{"sha": "f076f0ce31b273760d49817aeb128347c9b7d867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3NmYwY2UzMWIyNzM3NjBkNDk4MTdhZWIxMjgzNDdjOWI3ZDg2Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-08-13T01:38:35Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-13T01:38:35Z"}, "message": "c-pretty-print.c: #include \"c-tree.h\".\n\n        * c-pretty-print.c: #include \"c-tree.h\".\n        (pp_c_simple_type_specifier): Tweak.\n        (pp_c_storage_class_specifier): New.\n        (pp_c_function_specifier): Likewise.\n        (pp_c_declaration_specifiers): Likewise.\n        (pp_c_init_declarator): Likewise.\n        (pp_c_declaration): Likewise.\n        (pp_c_direct_declarator): Stub.\n        (pp_c_declarator): Likewise.\n        (pp_c_parameter_declaration): Likewise.\n\nFrom-SVN: r56240", "tree": {"sha": "6630a6fbfbd99f9a6eea23b8285cf29a42c3f9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6630a6fbfbd99f9a6eea23b8285cf29a42c3f9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f076f0ce31b273760d49817aeb128347c9b7d867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f076f0ce31b273760d49817aeb128347c9b7d867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f076f0ce31b273760d49817aeb128347c9b7d867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f076f0ce31b273760d49817aeb128347c9b7d867/comments", "author": null, "committer": null, "parents": [{"sha": "f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ff5a691f18d9f0fe106e76c99f1f9e77de368a"}], "stats": {"total": 319, "additions": 219, "deletions": 100}, "files": [{"sha": "e125b611b10ac97a8cf45eb8bb01f01074a152b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f076f0ce31b273760d49817aeb128347c9b7d867", "patch": "@@ -1,3 +1,16 @@\n+2002-08-13  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* c-pretty-print.c: #include \"c-tree.h\".\n+\t(pp_c_simple_type_specifier): Tweak.\n+\t(pp_c_storage_class_specifier): New.\n+\t(pp_c_function_specifier): Likewise.\n+\t(pp_c_declaration_specifiers): Likewise.\n+\t(pp_c_init_declarator): Likewise.\n+\t(pp_c_declaration): Likewise.\n+\t(pp_c_direct_declarator): Stub.\n+\t(pp_c_declarator): Likewise.\n+\t(pp_c_parameter_declaration): Likewise.\n+\n 2002-08-13  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-opts.c (deps_seen, deps_file, deferred_count, deferred_size,"}, {"sha": "34498ad53d5bc2063f7ad60671fd2dd3768487d8", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 188, "deletions": 84, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=f076f0ce31b273760d49817aeb128347c9b7d867", "patch": "@@ -23,50 +23,57 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"real.h\"\n #include \"c-pretty-print.h\"\n+#include \"c-tree.h\"\n \n /* literal  */\n-static void pp_c_char              PARAMS ((c_pretty_print_info *, int));\n-static void pp_c_character_literal PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_bool_literal      PARAMS ((c_pretty_print_info *, tree));\n-static bool pp_c_enumerator        PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_integer_literal   PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_real_literal      PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_string_literal    PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_char              PARAMS ((c_pretty_printer, int));\n+static void pp_c_character_literal PARAMS ((c_pretty_printer, tree));\n+static void pp_c_bool_literal      PARAMS ((c_pretty_printer, tree));\n+static bool pp_c_enumerator        PARAMS ((c_pretty_printer, tree));\n+static void pp_c_integer_literal   PARAMS ((c_pretty_printer, tree));\n+static void pp_c_real_literal      PARAMS ((c_pretty_printer, tree));\n+static void pp_c_string_literal    PARAMS ((c_pretty_printer, tree));\n \n-static void pp_c_primary_expression PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_primary_expression PARAMS ((c_pretty_printer, tree));\n \n /* postfix-expression  */\n-static void pp_c_initializer_list PARAMS ((c_pretty_print_info *, tree));\n-\n-static void pp_c_unary_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_multiplicative_expression PARAMS ((c_pretty_print_info *,\n-\t\t\t\t\t\t    tree));\n-static void pp_c_additive_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_shift_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_relational_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_equality_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_and_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_exclusive_or_expression PARAMS ((c_pretty_print_info *,\n+static void pp_c_initializer_list        PARAMS ((c_pretty_printer, tree));\n+\n+static void pp_c_unary_expression        PARAMS ((c_pretty_printer, tree));\n+static void pp_c_multiplicative_expression PARAMS ((c_pretty_printer, tree));\n+static void pp_c_additive_expression     PARAMS ((c_pretty_printer, tree));\n+static void pp_c_shift_expression        PARAMS ((c_pretty_printer, tree));\n+static void pp_c_relational_expression   PARAMS ((c_pretty_printer, tree));\n+static void pp_c_equality_expression     PARAMS ((c_pretty_printer, tree));\n+static void pp_c_and_expression          PARAMS ((c_pretty_printer, tree));\n+static void pp_c_exclusive_or_expression PARAMS ((c_pretty_printer,\n \t\t\t\t\t\t  tree));\n-static void pp_c_inclusive_or_expression PARAMS ((c_pretty_print_info *,\n+static void pp_c_inclusive_or_expression PARAMS ((c_pretty_printer,\n \t\t\t\t\t\t  tree));\n-static void pp_c_logical_and_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_conditional_expression PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_assignment_expression PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_logical_and_expression PARAMS ((c_pretty_printer, tree));\n+static void pp_c_conditional_expression PARAMS ((c_pretty_printer, tree));\n+static void pp_c_assignment_expression  PARAMS ((c_pretty_printer, tree));\n \n /* declarations.  */\n-static void pp_c_specifier_qualifier_list PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_type_specifier PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_abstract_declarator PARAMS ((c_pretty_print_info *, tree));\n-static void pp_c_type_id PARAMS ((c_pretty_print_info *, tree));\n+static void pp_c_declaration_specifiers   PARAMS ((c_pretty_printer, tree));\n+static void pp_c_init_declarator          PARAMS ((c_pretty_printer, tree));\n+static void pp_c_declarator               PARAMS ((c_pretty_printer, tree));\n+static void pp_c_direct_declarator        PARAMS ((c_pretty_printer, tree));\n+static void pp_c_abstract_declarator      PARAMS ((c_pretty_printer, tree));\n+static void pp_c_specifier_qualifier_list PARAMS ((c_pretty_printer, tree));\n+static void pp_c_simple_type_specifier    PARAMS ((c_pretty_printer, tree));\n+static void pp_c_parameter_declaration    PARAMS ((c_pretty_printer, tree));\n+static void pp_c_type_id                  PARAMS ((c_pretty_printer, tree));\n+static void pp_c_storage_class_specifier  PARAMS ((c_pretty_printer, tree));\n+static void pp_c_function_specifier       PARAMS ((c_pretty_printer, tree));\n \n \f\n /* Declarations.  */\n \n-/* Print out CV-qualifiers.  Take care of possible extension.  */\n+/* Print out CV-qualifiers.  Take care of possible extensions.  */\n void\n pp_c_cv_qualifier (ppi, cv)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      int cv;\n {\n   if (cv & TYPE_QUAL_CONST)\n@@ -78,15 +85,15 @@ pp_c_cv_qualifier (ppi, cv)\n }\n \n static void\n-pp_c_type_specifier (ppi, t)\n-     c_pretty_print_info *ppi;\n+pp_c_simple_type_specifier (ppi, t)\n+     c_pretty_printer ppi;\n      tree t;\n {\n   const enum tree_code code = TREE_CODE (t);\n   switch (code)\n     {\n     case ERROR_MARK:\n-      pp_c_identifier (ppi, \"<erroneous-type>\");\n+      pp_c_identifier (ppi, \"<type-error>\");\n       break;\n \n #if 0\n@@ -98,33 +105,29 @@ pp_c_type_specifier (ppi, t)\n     case IDENTIFIER_NODE:\n       pp_c_tree_identifier (ppi, t);\n       break;\n-\n-#if 0\n-    case INTEGER_TYPE:\n-      if (TREE_UNSIGNED (t))\n-\tpp_c_identifier (ppi, \"unsigned\");\n-      /* fall through.  */\n+      \n     case VOID_TYPE:\n     case BOOLEAN_TYPE:\n+    case CHAR_TYPE:\n+    case INTEGER_TYPE:\n     case REAL_TYPE:\n-      if (TYPE_NAME (t) && TYPE_IDENTIFIER (t))\n-\tpp_c_tree_identifier (t, TYPE_IDENTIFIER (t));\n-      else\n-\tpp_c_identifier (ppi, \"<anonymous-type>\");\n+      pp_c_tree_identifier (ppi, DECL_NAME (t));\n       break;\n-#endif\n       \n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n-      pp_c_type_specifier (ppi, TREE_TYPE (t));\n+      pp_c_simple_type_specifier (ppi, TYPE_MAIN_VARIANT (TREE_TYPE (t)));\n       if (code == COMPLEX_TYPE)\n \tpp_c_identifier (ppi, flag_isoc99 ? \"_Complex\" : \"__complex__\");\n       else if (code == VECTOR_TYPE)\n \tpp_c_identifier (ppi, \"__vector__\");\n       break;\n \n     case TYPE_DECL:\n-      pp_c_tree_identifier (ppi, DECL_NAME (t));\n+      if (DECL_NAME (t))\n+\tpp_c_tree_identifier (ppi, DECL_NAME (t));\n+      else\n+\tpp_c_identifier (ppi, \"<typedef-error>\");\n       break;\n \n     case UNION_TYPE:\n@@ -136,36 +139,32 @@ pp_c_type_specifier (ppi, t)\n \tpp_c_identifier (ppi, \"struct\");\n       else if (code == ENUMERAL_TYPE)\n \tpp_c_identifier (ppi, \"enum\");\n+      else\n+\tpp_c_identifier (ppi, \"<tag-error>\");\n       \n       if (TYPE_NAME (t))\n \tpp_c_tree_identifier (ppi, TYPE_NAME (t));\n       else\n \tpp_c_identifier (ppi, \"<anonymous>\");\n       break;\n \n-    case POINTER_TYPE:\n-    case ARRAY_TYPE:\n-      {\n-      }\n-      break;\n-      \n     default:\n       pp_unsupported_tree (ppi, t);\n     }\n }\n \n static inline void\n pp_c_specifier_qualifier_list (ppi, t)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree t;\n {\n-  pp_c_type_specifier (ppi, t);\n+  pp_c_simple_type_specifier (ppi, TYPE_MAIN_VARIANT (TREE_TYPE (t)));\n   pp_c_cv_qualifier (ppi, TYPE_QUALS (t));\n }\n \n static void\n pp_c_abstract_declarator (ppi, t)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree t;\n {\n   pp_unsupported_tree (ppi, t);\n@@ -174,20 +173,99 @@ pp_c_abstract_declarator (ppi, t)\n \n static inline void\n pp_c_type_id (ppi, t)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree t;\n {\n   pp_c_specifier_qualifier_list (ppi, t);\n   pp_c_abstract_declarator (ppi, t);\n }\n \n+static inline void\n+pp_c_storage_class_specifier (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  if (TREE_CODE (t) == TYPE_DECL)\n+    pp_c_identifier (pp, \"typedef\");\n+  else if (DECL_REGISTER (t))\n+    pp_c_identifier (pp, \"register\");\n+}\n+\n+static inline void\n+pp_c_function_specifier (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  if (TREE_CODE (t) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (t))\n+    pp_c_identifier (pp, \"inline\");\n+}\n+\n+static inline void\n+pp_c_declaration_specifiers (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_c_storage_class_specifier (pp, t);\n+  pp_c_function_specifier (pp, t);\n+  pp_type_specifier (pp, TYPE_MAIN_VARIANT (TREE_TYPE (t)));\n+  pp_c_cv_qualifier (pp, TYPE_QUALS (TREE_TYPE (t)));\n+}\n+\n+static inline void\n+pp_c_direct_declarator (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static inline void\n+pp_c_declarator (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n+static inline void\n+pp_c_init_declarator (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_declarator (pp, t);\n+  if (DECL_INITIAL (t))\n+    {\n+      pp_whitespace (pp);\n+      pp_equal (pp);\n+      pp_whitespace (pp);\n+      pp_c_initializer (pp, DECL_INITIAL (t));\n+    }\n+}\n+\n+void\n+pp_c_declaration (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_declaration_specifiers (pp, t);\n+  pp_c_init_declarator (pp, t);\n+}\n+\n+static void\n+pp_c_parameter_declaration (pp, t)\n+     c_pretty_printer pp;\n+     tree t;\n+{\n+  pp_unsupported_tree (pp, t);\n+}\n+\n \f\n /* Expressions.  */\n \n /* Print out a c-char.  */\n static void\n pp_c_char (ppi, c)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      int c;\n {\n   switch (c)\n@@ -234,7 +312,7 @@ pp_c_char (ppi, c)\n /* Print out a STRING literal.  */\n static inline void\n pp_c_string_literal (ppi, s)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree s;\n {\n   const char *p = TREE_STRING_POINTER (s);\n@@ -249,7 +327,7 @@ pp_c_string_literal (ppi, s)\n /* Print out a CHARACTER literal.  */\n static inline void\n pp_c_character_literal (ppi, c)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree c;\n {\n   pp_quote (ppi);\n@@ -260,7 +338,7 @@ pp_c_character_literal (ppi, c)\n /* Print out a BOOLEAN literal.  */\n static inline void\n pp_c_bool_literal (ppi, b)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree b;\n {\n   if (b == boolean_false_node || integer_zerop (b))\n@@ -291,7 +369,7 @@ pp_c_bool_literal (ppi, b)\n    is then printed by pp_c_integer_literal.  */\n static bool\n pp_c_enumerator (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   tree type = TREE_TYPE (e);\n@@ -320,7 +398,7 @@ pp_c_enumerator (ppi, e)\n /* Print out an INTEGER constant value.  */\n static void\n pp_c_integer_literal (ppi, i)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree i;\n {\n   tree type = TREE_TYPE (i);\n@@ -359,7 +437,7 @@ pp_c_integer_literal (ppi, i)\n /* Print out a REAL value. */\n static inline void\n pp_c_real_literal (ppi, r)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree r;\n {\n   REAL_VALUE_TO_DECIMAL (TREE_REAL_CST (r), \"%.16g\",\n@@ -370,7 +448,7 @@ pp_c_real_literal (ppi, r)\n \n void\n pp_c_literal (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   switch (TREE_CODE (e))\n@@ -396,7 +474,7 @@ pp_c_literal (ppi, e)\n /* Pretty-print a C primary-expression.  */\n static void\n pp_c_primary_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   switch (TREE_CODE (e))\n@@ -461,7 +539,7 @@ pp_c_primary_expression (ppi, e)\n /* Print out a C initializer -- also support C compound-literals.  */\n void\n pp_c_initializer (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == CONSTRUCTOR)\n@@ -482,7 +560,7 @@ pp_c_initializer (ppi, e)\n \n static void\n pp_c_initializer_list (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   tree type = TREE_TYPE (e);\n@@ -519,7 +597,7 @@ pp_c_initializer_list (ppi, e)\n \n void\n pp_c_postfix_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -651,7 +729,7 @@ pp_c_postfix_expression (ppi, e)\n /* Print out an expression-list; E is expected to be a TREE_LIST  */\n void\n pp_c_expression_list (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   for (; e != NULL_TREE; e = TREE_CHAIN (e))\n@@ -664,7 +742,7 @@ pp_c_expression_list (ppi, e)\n \n static void\n pp_c_unary_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -725,7 +803,7 @@ pp_c_unary_expression (ppi, e)\n \n void\n pp_c_cast_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == CONVERT_EXPR || TREE_CODE (e) == FLOAT_EXPR)\n@@ -741,7 +819,7 @@ pp_c_cast_expression (ppi, e)\n \n static void\n pp_c_multiplicative_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -770,7 +848,7 @@ pp_c_multiplicative_expression (ppi, e)\n \n static inline void\n pp_c_additive_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -796,7 +874,7 @@ pp_c_additive_expression (ppi, e)\n \n static inline void\n pp_c_shift_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -818,7 +896,7 @@ pp_c_shift_expression (ppi, e)\n \n static void\n pp_c_relational_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -850,7 +928,7 @@ pp_c_relational_expression (ppi, e)\n \n static inline void\n pp_c_equality_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -873,7 +951,7 @@ pp_c_equality_expression (ppi, e)\n \n static inline void\n pp_c_and_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == BIT_AND_EXPR)\n@@ -890,7 +968,7 @@ pp_c_and_expression (ppi, e)\n \n static inline void\n pp_c_exclusive_or_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == BIT_XOR_EXPR)\n@@ -907,7 +985,7 @@ pp_c_exclusive_or_expression (ppi, e)\n \n static inline void\n pp_c_inclusive_or_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == BIT_IOR_EXPR)\n@@ -924,7 +1002,7 @@ pp_c_inclusive_or_expression (ppi, e)\n \n static inline void\n pp_c_logical_and_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == TRUTH_ANDIF_EXPR)\n@@ -941,7 +1019,7 @@ pp_c_logical_and_expression (ppi, e)\n \n void\n pp_c_logical_or_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == TRUTH_ORIF_EXPR)\n@@ -958,7 +1036,7 @@ pp_c_logical_or_expression (ppi, e)\n \n static void\n pp_c_conditional_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == COND_EXPR)\n@@ -981,7 +1059,7 @@ pp_c_conditional_expression (ppi, e)\n /* Pretty-print a C assignment-expression.  */\n static void\n pp_c_assignment_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   if (TREE_CODE (e) == MODIFY_EXPR || TREE_CODE (e) == INIT_EXPR)\n@@ -999,7 +1077,7 @@ pp_c_assignment_expression (ppi, e)\n /* Pretty-print an expression.  */\n void\n pp_c_expression (ppi, e)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree e;\n {\n   switch (TREE_CODE (e))\n@@ -1136,7 +1214,7 @@ pp_c_expression (ppi, e)\n /* Statements.  */\n void\n pp_c_statement (ppi, stmt)\n-     c_pretty_print_info *ppi;\n+     c_pretty_printer ppi;\n      tree stmt;\n {\n   const enum tree_code code = TREE_CODE (stmt);\n@@ -1358,3 +1436,29 @@ pp_c_statement (ppi, stmt)\n \n }\n \n+\f\n+/* Initialize the PRETTY-PRINTER for handling C codes.  */\n+void\n+pp_c_pretty_printer_init (pp)\n+     c_pretty_printer pp;\n+{\n+  pp->offset_list               = 0;\n+\n+  pp->declaration               = pp_c_declaration;\n+  pp->declaration_specifiers    = pp_c_declaration_specifiers;\n+  pp->type_specifier            = pp_c_simple_type_specifier;\n+  pp->declarator                = pp_c_declarator;\n+  pp->direct_declarator         = pp_c_direct_declarator;\n+  pp->parameter_declaration     = pp_c_parameter_declaration;\n+  pp->type_id                   = pp_c_type_id;\n+\n+  pp->statement                 = pp_c_statement;\n+\n+  pp->primary_expression        = pp_c_primary_expression;\n+  pp->postfix_expression        = pp_c_postfix_expression;\n+  pp->unary_expression          = pp_c_unary_expression;\n+  pp->initializer               = pp_c_initializer;\n+  pp->multiplicative_expression = pp_c_multiplicative_expression;\n+  pp->conditional_expression    = pp_c_conditional_expression;\n+  pp->assignment_expression     = pp_c_assignment_expression;\n+}"}, {"sha": "a391dccbed0ce50d8572e429e4f7aa1426780597", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f076f0ce31b273760d49817aeb128347c9b7d867/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=f076f0ce31b273760d49817aeb128347c9b7d867", "patch": "@@ -26,10 +26,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* The data type used to bundle information necessary for pretty-printing\n    a C or C++ entity.  */\n-typedef struct c_pretty_print_info c_pretty_print_info;\n+typedef struct c_pretty_print_info *c_pretty_printer;\n \n /* The type of a C pretty-printer 'member' function.  */\n-typedef void (*c_pretty_print_fn) PARAMS ((c_pretty_print_info *, tree));\n+typedef void (*c_pretty_print_fn) PARAMS ((c_pretty_printer, tree));\n \n struct c_pretty_print_info\n {\n@@ -59,7 +59,6 @@ struct c_pretty_print_info\n   c_pretty_print_fn assignment_expression;\n };\n \n-#define pp_buffer(PPI) (PPI)->base.buffer\n #define pp_c_left_paren(PPI)             \\\n    do {                                  \\\n      pp_left_paren (PPI);                \\\n@@ -100,6 +99,7 @@ struct c_pretty_print_info\n #define pp_c_tree_identifier(PPI, ID)    \\\n    pp_c_identifier (PPI, IDENTIFIER_POINTER (ID))\n \n+#define pp_buffer(PPI) (PPI)->base.buffer\n \n #define pp_declaration(PPI, T)            (*(PPI)->declaration) (PPI, T)\n #define pp_declaration_specifiers(PPI, D) \\\n@@ -125,19 +125,21 @@ struct c_pretty_print_info\n    (*(PPI)->assignment_expression) (PPI, E)\n \n \n+extern void pp_c_pretty_printer_init   PARAMS ((c_pretty_printer));\n+\n /* Declarations.  */\n-void pp_c_cv_qualifier PARAMS ((c_pretty_print_info *, int));\n-void pp_c_parameter_declaration_clause PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_declaration PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_statement PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_expression PARAMS ((c_pretty_print_info *, tree));\n+void pp_c_cv_qualifier                 PARAMS ((c_pretty_printer, int));\n+void pp_c_parameter_declaration_clause PARAMS ((c_pretty_printer, tree));\n+void pp_c_declaration                  PARAMS ((c_pretty_printer, tree));\n+void pp_c_statement                    PARAMS ((c_pretty_printer, tree));\n+void pp_c_expression                   PARAMS ((c_pretty_printer, tree));\n /* Statements.  */\n-void pp_c_statement PARAMS ((c_pretty_print_info *, tree));\n+void pp_c_statement                    PARAMS ((c_pretty_printer, tree));\n /* Expressions.  */\n-void pp_c_expression PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_logical_or_expression PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_expression_list PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_cast_expression PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_postfix_expression PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_initializer PARAMS ((c_pretty_print_info *, tree));\n-void pp_c_literal PARAMS ((c_pretty_print_info *, tree));\n+void pp_c_expression                   PARAMS ((c_pretty_printer, tree));\n+void pp_c_logical_or_expression        PARAMS ((c_pretty_printer, tree));\n+void pp_c_expression_list              PARAMS ((c_pretty_printer, tree));\n+void pp_c_cast_expression              PARAMS ((c_pretty_printer, tree));\n+void pp_c_postfix_expression           PARAMS ((c_pretty_printer, tree));\n+void pp_c_initializer                  PARAMS ((c_pretty_printer, tree));\n+void pp_c_literal                      PARAMS ((c_pretty_printer, tree));"}]}