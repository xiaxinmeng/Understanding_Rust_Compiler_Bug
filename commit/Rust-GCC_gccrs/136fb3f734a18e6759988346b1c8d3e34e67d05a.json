{"sha": "136fb3f734a18e6759988346b1c8d3e34e67d05a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM2ZmIzZjczNGExOGU2NzU5OTg4MzQ2YjFjOGQzZTM0ZTY3ZDA1YQ==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2013-04-01T17:27:46Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2013-04-01T17:27:46Z"}, "message": "i386.md (*ashl<mode>3_mask): Rewrite as define_insn.\n\n2013-04-01  Wei Mi  <wmi@google.com>\n\n        * config/i386/i386.md (*ashl<mode>3_mask): Rewrite as define_insn.\n        Truncate operand 2 using %b asm operand modifier.\n        (*<shift_insn><mode>3_mask): Ditto.\n        (*<rotate_insn><mode>3_mask): Ditto.\n\nFrom-SVN: r197308", "tree": {"sha": "d2ad988cd54d87e96b083e4fa5433603ce60504c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ad988cd54d87e96b083e4fa5433603ce60504c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/136fb3f734a18e6759988346b1c8d3e34e67d05a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136fb3f734a18e6759988346b1c8d3e34e67d05a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/136fb3f734a18e6759988346b1c8d3e34e67d05a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136fb3f734a18e6759988346b1c8d3e34e67d05a/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6388c7382f78443f1284e2174a6834688b4e86a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6388c7382f78443f1284e2174a6834688b4e86a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6388c7382f78443f1284e2174a6834688b4e86a5"}], "stats": {"total": 49, "additions": 16, "deletions": 33}, "files": [{"sha": "7c7db0c3080176410031fb7c9c718f1fee915e52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136fb3f734a18e6759988346b1c8d3e34e67d05a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136fb3f734a18e6759988346b1c8d3e34e67d05a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=136fb3f734a18e6759988346b1c8d3e34e67d05a", "patch": "@@ -1,3 +1,10 @@\n+2013-04-01  Wei Mi  <wmi@google.com>\n+\n+\t* config/i386/i386.md (*ashl<mode>3_mask): Rewrite as define_insn.\n+\tTruncate operand 2 using %b asm operand modifier.\n+\t(*<shift_insn><mode>3_mask): Ditto.\n+\t(*<rotate_insn><mode>3_mask): Ditto.\n+\n 2013-04-01  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/56798"}, {"sha": "5b794a1b82770f0c0202b5da4b9de2f781b34c78", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136fb3f734a18e6759988346b1c8d3e34e67d05a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136fb3f734a18e6759988346b1c8d3e34e67d05a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=136fb3f734a18e6759988346b1c8d3e34e67d05a", "patch": "@@ -8647,28 +8647,20 @@\n })\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*ashl<mode>3_mask\"\n+(define_insn \"*ashl<mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (ashift:SWI48 (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (can_create_pseudo_p ())\n-    operands [2] = force_reg (SImode, operands[2]);\n-\n-  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+  return \"sal{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9157,28 +9149,20 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*<shift_insn><mode>3_mask\"\n+(define_insn \"*<shift_insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (any_shiftrt:SWI48 (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (can_create_pseudo_p ())\n-    operands [2] = force_reg (SImode, operands[2]);\n-\n-  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+  return \"<shift>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -9620,28 +9604,20 @@\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*<rotate_insn><mode>3_mask\"\n+(define_insn \"*<rotate_insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0\")\n \t  (subreg:QI\n \t    (and:SI\n-\t      (match_operand:SI 2 \"nonimmediate_operand\" \"c\")\n+\t      (match_operand:SI 2 \"register_operand\" \"c\")\n \t      (match_operand:SI 3 \"const_int_operand\" \"n\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n       == GET_MODE_BITSIZE (<MODE>mode)-1\"\n-  \"#\"\n-  \"&& 1\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (any_rotate:SWI48 (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (can_create_pseudo_p ())\n-    operands [2] = force_reg (SImode, operands[2]);\n-\n-  operands[2] = simplify_gen_subreg (QImode, operands[2], SImode, 0);\n+  return \"<rotate>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n }\n   [(set_attr \"type\" \"rotate\")\n    (set_attr \"mode\" \"<MODE>\")])"}]}