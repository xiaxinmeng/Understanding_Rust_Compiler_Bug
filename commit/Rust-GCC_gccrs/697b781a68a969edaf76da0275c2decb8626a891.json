{"sha": "697b781a68a969edaf76da0275c2decb8626a891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3Yjc4MWE2OGE5NjllZGFmNzZkYTAyNzVjMmRlY2I4NjI2YTg5MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:28:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:28:12Z"}, "message": "[multiple changes]\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* a-stream.ads, a-reatim.ads, a-calend.ads, sinfo.ads, s-crtl.ads,\n\tinterfac.ads, s-taskin.ads: Minor reformatting.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Extensions_Visible can now\n\tapply to an expression function.\n\t* sem_util.adb (Extensions_Visible_Status): Add special processing\n\tfor expression functions.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* inline.adb (Build_Body_To_Inline): Remove meaningless aspects\n\tand pragmas.\n\t(Generate_Subprogram_Body): Remove meaningless aspects and pragmas.\n\t(Remove_Aspects_And_Pragmas): New routine.\n\t(Remove_Pragmas): Removed.\n\t* namet.ads, namet.adb (Nam_In): New versions of the routine.\n\nFrom-SVN: r217841", "tree": {"sha": "40f72d8c13f2e4c30a8f7ec61386ea674f317aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f72d8c13f2e4c30a8f7ec61386ea674f317aa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697b781a68a969edaf76da0275c2decb8626a891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697b781a68a969edaf76da0275c2decb8626a891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697b781a68a969edaf76da0275c2decb8626a891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697b781a68a969edaf76da0275c2decb8626a891/comments", "author": null, "committer": null, "parents": [{"sha": "39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f0fa29d043e4b05c2eb43b2b811303e60dba4f"}], "stats": {"total": 448, "additions": 366, "deletions": 82}, "files": [{"sha": "e43c701f2eb348f849cef5a36c1dff7a96a0d855", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -1,3 +1,24 @@\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-stream.ads, a-reatim.ads, a-calend.ads, sinfo.ads, s-crtl.ads,\n+\tinterfac.ads, s-taskin.ads: Minor reformatting.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Extensions_Visible can now\n+\tapply to an expression function.\n+\t* sem_util.adb (Extensions_Visible_Status): Add special processing\n+\tfor expression functions.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Remove meaningless aspects\n+\tand pragmas.\n+\t(Generate_Subprogram_Body): Remove meaningless aspects and pragmas.\n+\t(Remove_Aspects_And_Pragmas): New routine.\n+\t(Remove_Pragmas): Removed.\n+\t* namet.ads, namet.adb (Nam_In): New versions of the routine.\n+\n 2014-11-20  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_util.adb: Minor reformatting."}, {"sha": "55efe115f5dcd307e0101f076124dfb86a66af34", "filename": "gcc/ada/a-calend.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -200,11 +200,15 @@ private\n    type Time_Rep is new Long_Long_Integer;\n    type Time is new Time_Rep;\n    --  The underlying type of Time has been chosen to be a 64 bit signed\n-   --  integer number since it allows for easier processing of sub seconds\n+   --  integer number since it allows for easier processing of sub-seconds\n    --  and arithmetic. We use Long_Long_Integer to allow this unit to compile\n    --  when using custom target configuration files where the max integer is\n-   --  32bits. This is useful for static analysis tools such as SPARK or\n+   --  32 bits. This is useful for static analysis tools such as SPARK or\n    --  CodePeer.\n+   --\n+   --  Note: the reason we have two separate types here is to avoid problems\n+   --  with overloading ambiguities in the body if we tried to use Time as an\n+   --  internal computational type.\n \n    Days_In_Month : constant array (Month_Number) of Day_Number :=\n                      (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);"}, {"sha": "8558d460a58df40ceaad4feff1e188195853b1c6", "filename": "gcc/ada/a-reatim.ads", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-reatim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-reatim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -90,12 +90,14 @@ package Ada.Real_Time is\n    function Minutes (M : Integer) return Time_Span;\n    pragma Ada_05 (Minutes);\n \n-   --  Seconds_Count needs 64 bits, since Time has the full range of Duration.\n-   --  The delta of Duration is 10 ** (-9), so the maximum number of seconds is\n-   --  2**63/10**9 = 8*10**9 which does not quite fit in 32 bits.\n-\n-   type Seconds_Count is range\n-     Long_Long_Integer'First .. Long_Long_Integer'Last;\n+   type Seconds_Count is new Long_Long_Integer;\n+   --  Seconds_Count needs 64 bits, since Time has the full range of\n+   --  Duration. The delta of Duration is 10 ** (-9), so the maximum number of\n+   --  seconds is 2**63/10**9 = 8*10**9 which does not quite fit in 32 bits.\n+   --  However, rather than make this explicitly 64-bits we derive from\n+   --  Long_Long_Integer. In normal usage this will have the same effect.\n+   --  But in the case of CodePeer with a target configuration file with a\n+   --  maximum integer size of 32, it allows analysis of this unit.\n \n    procedure Split (T : Time; SC : out Seconds_Count; TS : out Time_Span);\n    function Time_Of (SC : Seconds_Count; TS : Time_Span) return Time;"}, {"sha": "40e60ce24995e4e3c065a00355c5317dde59e0a0", "filename": "gcc/ada/a-stream.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-stream.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fa-stream.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stream.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -41,8 +41,12 @@ package Ada.Streams is\n \n    type Stream_Element is mod 2 ** Standard'Storage_Unit;\n \n-   type Stream_Element_Offset is range\n-      Long_Long_Integer'First .. Long_Long_Integer'Last;\n+   type Stream_Element_Offset is new Long_Long_Integer;\n+   --  Stream_Element_Offset needs 64 bits to accomodate large stream files.\n+   --  However, rather than make this explicitly 64-bits we derive from\n+   --  Long_Long_Integer. In normal usage this will have the same effect.\n+   --  But in the case of CodePeer with a target configuration file with a\n+   --  maximum integer size of 32, it allows analysis of this unit.\n \n    subtype Stream_Element_Count is\n       Stream_Element_Offset range 0 .. Stream_Element_Offset'Last;"}, {"sha": "9e97e8305fe18b201937a12b87f0a8dd2174e905", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 81, "deletions": 39, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -212,11 +213,21 @@ package body Inline is\n    --  function anyway. This is also the case if the function is defined in a\n    --  task body or within an entry (for example, an initialization procedure).\n \n-   procedure Remove_Pragmas (Bod : Node_Id);\n-   --  A pragma Unreferenced or pragma Unmodified that mentions a formal\n-   --  parameter has no meaning when the body is inlined and the formals\n-   --  are rewritten. Remove it from body to inline. The analysis of the\n-   --  non-inlined body will handle the pragma properly.\n+   procedure Remove_Aspects_And_Pragmas (Body_Decl : Node_Id);\n+   --  Remove all aspects and/or pragmas that have no meaning in inlined body\n+   --  Body_Decl. The analysis of these items is performed on the non-inlined\n+   --  body. The items currently removed are:\n+   --    Contract_Cases\n+   --    Global\n+   --    Depends\n+   --    Postcondition\n+   --    Precondition\n+   --    Refined_Global\n+   --    Refined_Depends\n+   --    Refined_Post\n+   --    Test_Case\n+   --    Unmodified\n+   --    Unreferenced\n \n    ------------------------------\n    -- Deferred Cleanup Actions --\n@@ -1103,21 +1114,22 @@ package body Inline is\n       Set_Parameter_Specifications (Specification (Original_Body), No_List);\n       Set_Defining_Unit_Name\n         (Specification (Original_Body),\n-          Make_Defining_Identifier (Sloc (N), Name_uParent));\n+         Make_Defining_Identifier (Sloc (N), Name_uParent));\n       Set_Corresponding_Spec (Original_Body, Empty);\n \n-      --  Remove those pragmas that have no meaining in an inlined body.\n+      --  Remove all aspects/pragmas that have no meaining in an inlined body\n \n-      Remove_Pragmas (Original_Body);\n+      Remove_Aspects_And_Pragmas (Original_Body);\n \n       Body_To_Analyze := Copy_Generic_Node (Original_Body, Empty, False);\n \n       --  Set return type of function, which is also global and does not need\n       --  to be resolved.\n \n       if Ekind (Spec_Id) = E_Function then\n-         Set_Result_Definition (Specification (Body_To_Analyze),\n-           New_Occurrence_Of (Etype (Spec_Id), Sloc (N)));\n+         Set_Result_Definition\n+           (Specification (Body_To_Analyze),\n+            New_Occurrence_Of (Etype (Spec_Id), Sloc (N)));\n       end if;\n \n       if No (Declarations (N)) then\n@@ -1126,9 +1138,9 @@ package body Inline is\n          Append (Body_To_Analyze, Declarations (N));\n       end if;\n \n-      --  The body to inline is pre-analyzed.  In GNATprove mode we must\n-      --  disable full analysis as well so that light expansion does not\n-      --  take place either, and name resolution is unaffected.\n+      --  The body to inline is pre-analyzed. In GNATprove mode we must disable\n+      --  full analysis as well so that light expansion does not take place\n+      --  either, and name resolution is unaffected.\n \n       Expander_Mode_Save_And_Set (False);\n       Full_Analysis := False;\n@@ -1643,12 +1655,10 @@ package body Inline is\n             Body_To_Inline := Copy_Separate_Tree (N);\n          end if;\n \n-         --  A pragma Unreferenced or pragma Unmodified that mentions a formal\n-         --  parameter has no meaning when the body is inlined and the formals\n-         --  are rewritten. Remove it from body to inline. The analysis of the\n-         --  non-inlined body will handle the pragma properly.\n+         --  Remove all aspects/pragmas that have no meaining in an inlined\n+         --  body.\n \n-         Remove_Pragmas (Body_To_Inline);\n+         Remove_Aspects_And_Pragmas (Body_To_Inline);\n \n          --  We need to capture references to the formals in order\n          --  to substitute the actuals at the point of inlining, i.e.\n@@ -3947,31 +3957,63 @@ package body Inline is\n       end loop;\n    end Remove_Dead_Instance;\n \n-   --------------------\n-   -- Remove_Pragmas --\n-   --------------------\n+   --------------------------------\n+   -- Remove_Aspects_And_Pragmas --\n+   --------------------------------\n \n-   procedure Remove_Pragmas (Bod : Node_Id) is\n-      Decl : Node_Id;\n-      Nxt  : Node_Id;\n+   procedure Remove_Aspects_And_Pragmas (Body_Decl : Node_Id) is\n+      procedure Remove_Items (List : List_Id);\n+      --  Remove all useless aspects/pragmas from a particular list\n \n-   begin\n-      Decl := First (Declarations (Bod));\n-      while Present (Decl) loop\n-         Nxt := Next (Decl);\n+      ------------------\n+      -- Remove_Items --\n+      ------------------\n \n-         if Nkind (Decl) = N_Pragma\n-           and then Nam_In (Pragma_Name (Decl), Name_Contract_Cases,\n-                                                Name_Precondition,\n+      procedure Remove_Items (List : List_Id) is\n+         Item      : Node_Id;\n+         Item_Id   : Node_Id;\n+         Next_Item : Node_Id;\n+\n+      begin\n+         --  Traverse the list looking for an aspect specification or a pragma\n+\n+         Item := First (List);\n+         while Present (Item) loop\n+            Next_Item := Next (Item);\n+\n+            if Nkind (Item) = N_Aspect_Specification then\n+               Item_Id := Identifier (Item);\n+            elsif Nkind (Item) = N_Pragma then\n+               Item_Id := Pragma_Identifier (Item);\n+            else\n+               Item_Id := Empty;\n+            end if;\n+\n+            if Present (Item_Id)\n+              and then Nam_In (Chars (Item_Id), Name_Contract_Cases,\n+                                                Name_Global,\n+                                                Name_Depends,\n                                                 Name_Postcondition,\n-                                                Name_Unreferenced,\n-                                                Name_Unmodified)\n-         then\n-            Remove (Decl);\n-         end if;\n+                                                Name_Precondition,\n+                                                Name_Refined_Global,\n+                                                Name_Refined_Depends,\n+                                                Name_Refined_Post,\n+                                                Name_Test_Case,\n+                                                Name_Unmodified,\n+                                                Name_Unreferenced)\n+            then\n+               Remove (Item);\n+            end if;\n \n-         Decl := Nxt;\n-      end loop;\n-   end Remove_Pragmas;\n+            Item := Next_Item;\n+         end loop;\n+      end Remove_Items;\n+\n+   --  Start of processing for Remove_Aspects_And_Pragmas\n+\n+   begin\n+      Remove_Items (Aspect_Specifications (Body_Decl));\n+      Remove_Items (Declarations          (Body_Decl));\n+   end Remove_Aspects_And_Pragmas;\n \n end Inline;"}, {"sha": "6e3afffe5ee72bd775d2dee8880bb8b7b56eeb96", "filename": "gcc/ada/interfac.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finterfac.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -51,12 +51,13 @@ package Interfaces is\n    type Integer_32 is range -2 ** 31 .. 2 ** 31 - 1;\n    for Integer_32'Size use 32;\n \n-   type Integer_64 is range Long_Long_Integer'First .. Long_Long_Integer'Last;\n+   type Integer_64 is new Long_Long_Integer;\n    for Integer_64'Size use 64;\n    --  Note: we use Long_Long_Integer'First instead of -2 ** 63 to allow this\n-   --  unit to compile when using custom target configuration files where\n-   --  the max integer is 32bits. This is useful for static analysis tools\n-   --  such as SPARK or CodePeer.\n+   --  unit to compile when using custom target configuration files where the\n+   --  maximum integer is 32 bits. This is useful for static analysis tools\n+   --  such as SPARK or CodePeer. In the normal case Long_Long_Integer is\n+   --  always 64-bits so we get the desired 64-bit type.\n \n    type Unsigned_8  is mod 2 ** 8;\n    for Unsigned_8'Size use  8;"}, {"sha": "1a946402845518919a0aacb1a4ec211769268527", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1133,6 +1133,106 @@ package body Namet is\n              T = V7;\n    end Nam_In;\n \n+   function Nam_In\n+     (T  : Name_Id;\n+      V1 : Name_Id;\n+      V2 : Name_Id;\n+      V3 : Name_Id;\n+      V4 : Name_Id;\n+      V5 : Name_Id;\n+      V6 : Name_Id;\n+      V7 : Name_Id;\n+      V8 : Name_Id) return Boolean\n+   is\n+   begin\n+      return T = V1 or else\n+             T = V2 or else\n+             T = V3 or else\n+             T = V4 or else\n+             T = V5 or else\n+             T = V6 or else\n+             T = V7 or else\n+             T = V8;\n+   end Nam_In;\n+\n+   function Nam_In\n+     (T  : Name_Id;\n+      V1 : Name_Id;\n+      V2 : Name_Id;\n+      V3 : Name_Id;\n+      V4 : Name_Id;\n+      V5 : Name_Id;\n+      V6 : Name_Id;\n+      V7 : Name_Id;\n+      V8 : Name_Id;\n+      V9 : Name_Id) return Boolean\n+   is\n+   begin\n+      return T = V1 or else\n+             T = V2 or else\n+             T = V3 or else\n+             T = V4 or else\n+             T = V5 or else\n+             T = V6 or else\n+             T = V7 or else\n+             T = V8 or else\n+             T = V9;\n+   end Nam_In;\n+\n+   function Nam_In\n+     (T   : Name_Id;\n+      V1  : Name_Id;\n+      V2  : Name_Id;\n+      V3  : Name_Id;\n+      V4  : Name_Id;\n+      V5  : Name_Id;\n+      V6  : Name_Id;\n+      V7  : Name_Id;\n+      V8  : Name_Id;\n+      V9  : Name_Id;\n+      V10 : Name_Id) return Boolean\n+   is\n+   begin\n+      return T = V1 or else\n+             T = V2 or else\n+             T = V3 or else\n+             T = V4 or else\n+             T = V5 or else\n+             T = V6 or else\n+             T = V7 or else\n+             T = V8 or else\n+             T = V9 or else\n+             T = V10;\n+   end Nam_In;\n+\n+   function Nam_In\n+     (T   : Name_Id;\n+      V1  : Name_Id;\n+      V2  : Name_Id;\n+      V3  : Name_Id;\n+      V4  : Name_Id;\n+      V5  : Name_Id;\n+      V6  : Name_Id;\n+      V7  : Name_Id;\n+      V8  : Name_Id;\n+      V9  : Name_Id;\n+      V10 : Name_Id;\n+      V11 : Name_Id) return Boolean\n+   is\n+   begin\n+      return T = V1  or else\n+             T = V2  or else\n+             T = V3  or else\n+             T = V4  or else\n+             T = V5  or else\n+             T = V6  or else\n+             T = V7  or else\n+             T = V8  or else\n+             T = V9  or else\n+             T = V10 or else\n+             T = V11;\n+   end Nam_In;\n+\n    ------------------\n    -- Reinitialize --\n    ------------------"}, {"sha": "a7d7a481636c471ca7fdf7f3986187d703b65c2a", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -227,6 +227,56 @@ package Namet is\n       V6 : Name_Id;\n       V7 : Name_Id) return Boolean;\n \n+   function Nam_In\n+     (T  : Name_Id;\n+      V1 : Name_Id;\n+      V2 : Name_Id;\n+      V3 : Name_Id;\n+      V4 : Name_Id;\n+      V5 : Name_Id;\n+      V6 : Name_Id;\n+      V7 : Name_Id;\n+      V8 : Name_Id) return Boolean;\n+\n+   function Nam_In\n+     (T  : Name_Id;\n+      V1 : Name_Id;\n+      V2 : Name_Id;\n+      V3 : Name_Id;\n+      V4 : Name_Id;\n+      V5 : Name_Id;\n+      V6 : Name_Id;\n+      V7 : Name_Id;\n+      V8 : Name_Id;\n+      V9 : Name_Id) return Boolean;\n+\n+   function Nam_In\n+     (T   : Name_Id;\n+      V1  : Name_Id;\n+      V2  : Name_Id;\n+      V3  : Name_Id;\n+      V4  : Name_Id;\n+      V5  : Name_Id;\n+      V6  : Name_Id;\n+      V7  : Name_Id;\n+      V8  : Name_Id;\n+      V9  : Name_Id;\n+      V10 : Name_Id) return Boolean;\n+\n+   function Nam_In\n+     (T   : Name_Id;\n+      V1  : Name_Id;\n+      V2  : Name_Id;\n+      V3  : Name_Id;\n+      V4  : Name_Id;\n+      V5  : Name_Id;\n+      V6  : Name_Id;\n+      V7  : Name_Id;\n+      V8  : Name_Id;\n+      V9  : Name_Id;\n+      V10 : Name_Id;\n+      V11 : Name_Id) return Boolean;\n+\n    pragma Inline (Nam_In);\n    --  Inline all above functions\n "}, {"sha": "217b5b6e59309a234f7a341ed658e9eb66fbf503", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -62,11 +62,12 @@ package System.CRTL is\n    type ssize_t is range -(2 ** (Standard'Address_Size - 1))\n                       .. +(2 ** (Standard'Address_Size - 1)) - 1;\n \n-   type int64 is range Long_Long_Integer'First .. Long_Long_Integer'Last;\n+   type int64 is new Long_Long_Integer;\n    --  Note: we use Long_Long_Integer'First instead of -2 ** 63 to allow this\n-   --  unit to compile when using custom target configuration files where\n-   --  the max integer is 32bits. This is useful for static analysis tools\n-   --  such as SPARK or CodePeer.\n+   --  unit to compile when using custom target configuration files where the\n+   --  maximum integer is 32 bits. This is useful for static analysis tools\n+   --  such as SPARK or CodePeer. In the normal case, Long_Long_Integer is\n+   --  always 64-bits so there is no difference.\n \n    type Filename_Encoding is (UTF8, ASCII_8bits, Unspecified);\n    for Filename_Encoding use (UTF8 => 0, ASCII_8bits => 1, Unspecified => 2);"}, {"sha": "ffb96c34640c55b7d5b1ada67495a1764a52ba61", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -947,7 +947,12 @@ package System.Tasking is\n    --  by Ada.Task_Attributes.\n \n    type Task_Serial_Number is mod 2 ** Long_Long_Integer'Size;\n-   --  Used to give each task a unique serial number\n+   --  Used to give each task a unique serial number. We want 64-bits for this\n+   --  type to get as much uniqueness as possible (2**64 is operationally\n+   --  infinite in this context, but 2**32 perhaps could recycle). We use\n+   --  Long_Long_Integer (which in the normal case is always 64-bits) rather\n+   --  than 64-bits explicitly to allow codepeer to analyze this unit when\n+   --  a target configuration file forces the maximum integer size to 32.\n \n    type Ada_Task_Control_Block (Entry_Num : Task_Entry_Index) is record\n       Common : Common_ATCB;"}, {"sha": "52853199a2906d1759b4f94cf6d07e923466be9f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -13920,11 +13920,12 @@ package body Sem_Prag is\n          --  pragma Extensions_Visible [ (boolean_EXPRESSION) ];\n \n          when Pragma_Extensions_Visible => Extensions_Visible : declare\n-            Context : constant Node_Id := Parent (N);\n-            Expr    : Node_Id;\n-            Formal  : Entity_Id;\n-            Subp    : Entity_Id;\n-            Stmt    : Node_Id;\n+            Context   : constant Node_Id := Parent (N);\n+            Expr      : Node_Id;\n+            Formal    : Entity_Id;\n+            Orig_Stmt : Node_Id;\n+            Subp      : Entity_Id;\n+            Stmt      : Node_Id;\n \n             Has_OK_Formal : Boolean := False;\n \n@@ -13949,7 +13950,18 @@ package body Sem_Prag is\n                --  Skip internally generated code\n \n                elsif not Comes_From_Source (Stmt) then\n-                  null;\n+                  Orig_Stmt := Original_Node (Stmt);\n+\n+                  --  When pragma Ghost applies to an expression function, the\n+                  --  expression function is transformed into a subprogram.\n+\n+                  if Nkind (Stmt) = N_Subprogram_Declaration\n+                    and then Comes_From_Source (Orig_Stmt)\n+                    and then Nkind (Orig_Stmt) = N_Expression_Function\n+                  then\n+                     Subp := Defining_Entity (Stmt);\n+                     exit;\n+                  end if;\n \n                --  The associated [generic] subprogram declaration has been\n                --  found, stop the search."}, {"sha": "ba2135daa70759f36028f0bb4313e10dab955167", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -5923,7 +5923,8 @@ package body Sem_Util is\n    function Extensions_Visible_Status\n      (Id : Entity_Id) return Extensions_Visible_Mode\n    is\n-      Arg1 : Node_Id;\n+      Arg  : Node_Id;\n+      Decl : Node_Id;\n       Expr : Node_Id;\n       Prag : Node_Id;\n       Subp : Entity_Id;\n@@ -5946,15 +5947,51 @@ package body Sem_Util is\n \n       Prag := Get_Pragma (Subp, Pragma_Extensions_Visible);\n \n+      --  In certain cases analysis may request the Extensions_Visible status\n+      --  of an expression function before the pragma has been analyzed yet.\n+      --  Inspect the declarative items after the expression function looking\n+      --  for the pragma (if any).\n+\n+      if No (Prag) and then Is_Expression_Function (Subp) then\n+         Decl := Next (Unit_Declaration_Node (Subp));\n+         while Present (Decl) loop\n+            if Nkind (Decl) = N_Pragma\n+              and then Pragma_Name (Decl) = Name_Extensions_Visible\n+            then\n+               Prag := Decl;\n+               exit;\n+\n+            --  A source construct ends the region where Extensions_Visible may\n+            --  appear, stop the traversal. An expanded expression function is\n+            --  no longer a source construct, but it must still be recognized.\n+\n+            elsif Comes_From_Source (Decl)\n+              or else (Nkind_In (Decl, N_Subprogram_Body,\n+                                       N_Subprogram_Declaration)\n+                         and then Is_Expression_Function\n+                                    (Defining_Entity (Decl)))\n+            then\n+               exit;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+      end if;\n+\n       --  Extract the value from the Boolean expression (if any)\n \n       if Present (Prag) then\n-         Arg1 := First (Pragma_Argument_Associations (Prag));\n+         Arg := First (Pragma_Argument_Associations (Prag));\n+\n+         if Present (Arg) then\n+            Expr := Get_Pragma_Arg (Arg);\n \n-         --  The pragma appears with an argument\n+            --  When the associated subprogram is an expression function, the\n+            --  argument of the pragma may not have been analyzed.\n \n-         if Present (Arg1) then\n-            Expr := Get_Pragma_Arg (Arg1);\n+            if not Analyzed (Expr) then\n+               Preanalyze_And_Resolve (Expr, Standard_Boolean);\n+            end if;\n \n             --  Guard against cascading errors when the argument of pragma\n             --  Extensions_Visible is not a valid static Boolean expression.\n@@ -5969,19 +6006,20 @@ package body Sem_Util is\n                return Extensions_Visible_False;\n             end if;\n \n-         --  Otherwise the pragma defaults to True\n+         --  Otherwise the aspect or pragma defaults to True\n \n          else\n             return Extensions_Visible_True;\n          end if;\n \n-      --  Otherwise pragma Extensions_Visible is not inherited or directly\n-      --  specified. In SPARK code, its value defaults to \"False\".\n+      --  Otherwise aspect or pragma Extensions_Visible is not inherited or\n+      --  directly specified. In SPARK code, its value defaults to \"False\".\n \n       elsif SPARK_Mode = On then\n          return Extensions_Visible_False;\n \n-      --  In non-SPARK code, pragma Extensions_Visible defaults to \"True\"\n+      --  In non-SPARK code, aspect or pragma Extensions_Visible defaults to\n+      --  \"True\".\n \n       else\n          return Extensions_Visible_True;"}, {"sha": "ae7813593a17d9ffa2acd8390aaad6ad531a9336", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697b781a68a969edaf76da0275c2decb8626a891/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=697b781a68a969edaf76da0275c2decb8626a891", "patch": "@@ -562,7 +562,7 @@ package Sinfo is\n    --  not make sense from a user point-of-view, and that cross-references that\n    --  do not lead to data dependences for subprograms can be safely ignored.\n \n-   --  GNATprove relies on the following frontend behaviors:\n+   --  GNATprove relies on the following front end behaviors:\n \n    --    1. The first declarations in the list of visible declarations of\n    --       a package declaration for a generic instance, up to the first\n@@ -579,13 +579,17 @@ package Sinfo is\n \n    --    4. Unconstrained types are not replaced by constrained types whose\n    --       bounds are generated from an expression: Expand_Subtype_From_Expr\n-   --       should be noop.\n+   --       should be a no-op.\n \n-   --    5. Errors (instead of warnings) are issued on compile-time known\n-   --       constraint errors, except in a few selected cases where it should\n-   --       be allowed to let analysis proceed (e.g. range checks on empty\n-   --       ranges, typically in deactivated code based on a given\n-   --       configuration).\n+   --    5. Errors (instead of warnings) are issued on compile-time-known\n+   --       constraint errors even though such cases do not correspond to\n+   --       illegalities in the Ada RM (this is simply another case where\n+   --       GNATprove implements a subset of the full language).\n+   --\n+   --       However, there are a few exceptions to this rule for cases where\n+   --       we want to allow the GNATprove analysis to proceed (e.g. range\n+   --       checks on empty ranges, which typically appear in deactivated\n+   --       code in a particular configuration).\n \n    -----------------------\n    -- Check Flag Fields --"}]}