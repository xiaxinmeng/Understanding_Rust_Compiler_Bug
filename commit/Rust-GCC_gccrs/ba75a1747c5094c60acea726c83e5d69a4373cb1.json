{"sha": "ba75a1747c5094c60acea726c83e5d69a4373cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3NWExNzQ3YzUwOTRjNjBhY2VhNzI2YzgzZTVkNjlhNDM3M2NiMQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:28:36Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:28:36Z"}, "message": "[Patch testsuite patch 10/17] Add options for floatN when checking effective target for support\n\ngcc/testsuite/\n\n\t* lib/target-supports.exp (check_effective_target_float16): Add\n\toptions for _Float16.\n\t(check_effective_target_float32): Add options for _Float32.\n\t(check_effective_target_float64): Add options for _Float64.\n\t(check_effective_target_float128): Add options for _Float128.\n\t(check_effective_target_float32x): Add options for _Float32x.\n\t(check_effective_target_float64x): Add options for _Float64x.\n\t(check_effective_target_float128x): Add options for _Float128x.\n\nFrom-SVN: r242780", "tree": {"sha": "5e7d7a8d2188e70211ee7d3ad1a3d74eac6084f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7d7a8d2188e70211ee7d3ad1a3d74eac6084f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba75a1747c5094c60acea726c83e5d69a4373cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75a1747c5094c60acea726c83e5d69a4373cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba75a1747c5094c60acea726c83e5d69a4373cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba75a1747c5094c60acea726c83e5d69a4373cb1/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5823ef233578d8f6e3770bf92e72c1c977067d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5823ef233578d8f6e3770bf92e72c1c977067d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5823ef233578d8f6e3770bf92e72c1c977067d13"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "44c1f262e3542999326b33f6e90f97231aaca065", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba75a1747c5094c60acea726c83e5d69a4373cb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba75a1747c5094c60acea726c83e5d69a4373cb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba75a1747c5094c60acea726c83e5d69a4373cb1", "patch": "@@ -1,3 +1,14 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_float16): Add\n+\toptions for _Float16.\n+\t(check_effective_target_float32): Add options for _Float32.\n+\t(check_effective_target_float64): Add options for _Float64.\n+\t(check_effective_target_float128): Add options for _Float128.\n+\t(check_effective_target_float32x): Add options for _Float32x.\n+\t(check_effective_target_float64x): Add options for _Float64x.\n+\t(check_effective_target_float128x): Add options for _Float128x.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.dg/fpermitted-flt-eval-methods_3.c: New."}, {"sha": "624c2e29f7c50904c9cd58d322a60894b2c60c60", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba75a1747c5094c60acea726c83e5d69a4373cb1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba75a1747c5094c60acea726c83e5d69a4373cb1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ba75a1747c5094c60acea726c83e5d69a4373cb1", "patch": "@@ -2527,43 +2527,43 @@ proc check_effective_target_has_q_floating_suffix { } {\n proc check_effective_target_float16 {} {\n     return [check_no_compiler_messages_nocache float16 object {\n         _Float16 x;\n-    }]\n+    } [add_options_for_float16 \"\"]]\n }\n \n proc check_effective_target_float32 {} {\n     return [check_no_compiler_messages_nocache float32 object {\n         _Float32 x;\n-    }]\n+    } [add_options_for_float32 \"\"]]\n }\n \n proc check_effective_target_float64 {} {\n     return [check_no_compiler_messages_nocache float64 object {\n         _Float64 x;\n-    }]\n+    } [add_options_for_float64 \"\"]]\n }\n \n proc check_effective_target_float128 {} {\n     return [check_no_compiler_messages_nocache float128 object {\n         _Float128 x;\n-    }]\n+    } [add_options_for_float128 \"\"]]\n }\n \n proc check_effective_target_float32x {} {\n     return [check_no_compiler_messages_nocache float32x object {\n         _Float32x x;\n-    }]\n+    } [add_options_for_float32x \"\"]]\n }\n \n proc check_effective_target_float64x {} {\n     return [check_no_compiler_messages_nocache float64x object {\n         _Float64x x;\n-    }]\n+    } [add_options_for_float64x \"\"]]\n }\n \n proc check_effective_target_float128x {} {\n     return [check_no_compiler_messages_nocache float128x object {\n         _Float128x x;\n-    }]\n+    } [add_options_for_float128x \"\"]]\n }\n \n # Likewise, but runtime support for any special options used as well"}]}