{"sha": "b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2ZGMwZmM2Y2MzOWZiYTllZDk3NGM1OGEyMWNmNWY3YTI2NGJlMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-17T20:22:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-18T20:00:30Z"}, "message": "c++: More P2002 operator<=> refinements.\n\n* Disallow && references.\n* Allow empty unions.\n* Improve diagnostics for a subobject comparison with\n  non-comparison-category type.\n\ngcc/cp/ChangeLog:\n\n\t* method.c (early_check_defaulted_comparison): Check for &&.\n\t(build_comparison_op): Allow empty union.  Diagnose non-category\n\ttype.\n\t(common_comparison_type): Remove handling for non-category type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/spaceship-ref1.C: New test.\n\t* g++.dg/cpp2a/spaceship-synth-neg4.C: New test.\n\t* g++.dg/cpp2a/spaceship-union1.C: New test.", "tree": {"sha": "4c1ae7089617958e3bb3754a8babd5cb10af711b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c1ae7089617958e3bb3754a8babd5cb10af711b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54353a72a0fd780a2f233a057f3f8121b476192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54353a72a0fd780a2f233a057f3f8121b476192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54353a72a0fd780a2f233a057f3f8121b476192"}], "stats": {"total": 93, "additions": 81, "deletions": 12}, "files": [{"sha": "b23764b3d54515dadb5e64a1643813cf9af3065e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "patch": "@@ -1134,6 +1134,11 @@ early_check_defaulted_comparison (tree fn)\n       error_at (loc, \"defaulted %qD must be %<const%>\", fn);\n       ok = false;\n     }\n+  if (mem && type_memfn_rqual (TREE_TYPE (fn)) == REF_QUAL_RVALUE)\n+    {\n+      error_at (loc, \"defaulted %qD must not have %<&&%> ref-qualifier\", fn);\n+      ok = false;\n+    }\n   tree parmnode = FUNCTION_FIRST_USER_PARMTYPE (fn);\n   bool saw_byval = false;\n   bool saw_byref = mem;\n@@ -1144,6 +1149,7 @@ early_check_defaulted_comparison (tree fn)\n       if (same_type_p (parmtype, ctx))\n \tsaw_byval = true;\n       else if (TREE_CODE (parmtype) != REFERENCE_TYPE\n+\t       || TYPE_REF_IS_RVALUE (parmtype)\n \t       || TYPE_QUALS (TREE_TYPE (parmtype)) != TYPE_QUAL_CONST\n \t       || !(same_type_ignoring_top_level_qualifiers_p\n \t\t    (TREE_TYPE (parmtype), ctx)))\n@@ -1186,11 +1192,9 @@ common_comparison_type (vec<tree> &comps)\n       tree comp = comps[i];\n       tree ctype = TREE_TYPE (comp);\n       comp_cat_tag tag = cat_tag_for (ctype);\n-      if (tag < cc_last)\n-\tseen[tag] = ctype;\n-      else\n-\t/* If any Ti is not a comparison category type, U is void.  */\n-\treturn void_type_node;\n+      /* build_comparison_op already checked this.  */\n+      gcc_checking_assert (tag < cc_last);\n+      seen[tag] = ctype;\n     }\n \n   /* Otherwise, if at least one T i is std::partial_ordering, U is\n@@ -1312,8 +1316,9 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n   iloc_sentinel ils (info.loc);\n \n   /* A defaulted comparison operator function for class C is defined as\n-     deleted if ... C is a union-like class.  */\n-  if (TREE_CODE (ctype) == UNION_TYPE)\n+     deleted if ... C has variant members.  */\n+  if (TREE_CODE (ctype) == UNION_TYPE\n+      && next_initializable_field (TYPE_FIELDS (ctype)))\n     {\n       if (complain & tf_error)\n \tinform (info.loc, \"cannot default compare union %qT\", ctype);\n@@ -1336,6 +1341,7 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \n   if (code == EQ_EXPR || code == SPACESHIP_EXPR)\n     {\n+      bool bad = false;\n       auto_vec<tree> comps;\n \n       /* Compare each of the subobjects.  Note that we get bases from\n@@ -1348,21 +1354,22 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \n \t  /* A defaulted comparison operator function for class C is defined as\n \t     deleted if any non-static data member of C is of reference type or\n-\t     C is a union-like class.  */\n+\t     C has variant members.  */\n \t  if (TREE_CODE (expr_type) == REFERENCE_TYPE)\n \t    {\n \t      if (complain & tf_error)\n \t\tinform (DECL_SOURCE_LOCATION (field), \"cannot default compare \"\n \t\t\t\"reference member %qD\", field);\n-\t      DECL_DELETED_FN (fndecl) = true;\n+\t      bad = true;\n \t      continue;\n \t    }\n-\t  else if (ANON_UNION_TYPE_P (expr_type))\n+\t  else if (ANON_UNION_TYPE_P (expr_type)\n+\t\t   && next_initializable_field (TYPE_FIELDS (expr_type)))\n \t    {\n \t      if (complain & tf_error)\n \t\tinform (DECL_SOURCE_LOCATION (field), \"cannot default compare \"\n \t\t\t\"anonymous union member\");\n-\t      DECL_DELETED_FN (fndecl) = true;\n+\t      bad = true;\n \t      continue;\n \t    }\n \n@@ -1374,7 +1381,19 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \t\t\t\t    NULL_TREE, NULL, complain);\n \t  if (comp == error_mark_node)\n \t    {\n-\t      DECL_DELETED_FN (fndecl) = true;\n+\t      bad = true;\n+\t      continue;\n+\t    }\n+\t  if (code == SPACESHIP_EXPR\n+\t      && cat_tag_for (TREE_TYPE (comp)) == cc_last)\n+\t    {\n+\t      /* The operator function is defined as deleted if ... Ri is not a\n+\t\t comparison category type.  */\n+\t      if (complain & tf_error)\n+\t\tinform (DECL_SOURCE_LOCATION (field),\n+\t\t\t\"three-way comparison of %qD has type %qT, not a \"\n+\t\t\t\"comparison category type\", field, TREE_TYPE (comp));\n+\t      bad = true;\n \t      continue;\n \t    }\n \t  comps.safe_push (comp);\n@@ -1384,6 +1403,11 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \t  rettype = common_comparison_type (comps);\n \t  apply_deduced_return_type (fndecl, rettype);\n \t}\n+      if (bad)\n+\t{\n+\t  DECL_DELETED_FN (fndecl) = true;\n+\t  goto out;\n+\t}\n       for (unsigned i = 0; i < comps.length(); ++i)\n \t{\n \t  tree comp = comps[i];\n@@ -1468,6 +1492,7 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \tfinish_return_stmt (comp2);\n     }\n \n+ out:\n   if (info.defining)\n     finish_compound_stmt (compound_stmt);\n   else"}, {"sha": "5f888dfc3b4a867c2a945da66e63532c67246f2b", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-ref1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-ref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-ref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-ref1.C?ref=b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "patch": "@@ -0,0 +1,12 @@\n+// Reject &&.\n+// { dg-do compile { target c++20 } }\n+\n+struct A\n+{\n+  bool operator==(const A&) const && = default; // { dg-error \"ref-qualifier\" }\n+};\n+\n+struct B\n+{\n+  friend bool operator==(const B&&, const B&&) = default; // { dg-error \"\" }\n+};"}, {"sha": "e99aa0a2041221c33c4a468eb8d245fa595ba841", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth-neg4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg4.C?ref=b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "patch": "@@ -0,0 +1,20 @@\n+// P2002: deleted if a subobject <=> has non-category type.\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+struct A\n+{\n+  bool operator<=>(const A&) const;\n+};\n+\n+struct B\n+{\n+  A a;\t\t\t\t// { dg-message \"bool\" }\n+  auto operator<=>(const B&) const = default;\n+};\n+\n+int main()\n+{\n+  auto x = B() <=> B();\t\t// { dg-error \"deleted\" }\n+}"}, {"sha": "a08ba0de69ce67e46d31fa50718c70cf9729db0c", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-union1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-union1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-union1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-union1.C?ref=b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "patch": "@@ -0,0 +1,12 @@\n+// P2002: Allow default comparison of unions with no members.\n+// { dg-do compile { target c++20 } }\n+\n+union A\n+{\n+  bool operator==(const A&) const = default;\n+};\n+\n+int main()\n+{\n+  A() == A();\n+}"}]}