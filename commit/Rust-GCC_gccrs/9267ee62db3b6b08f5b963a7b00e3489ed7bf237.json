{"sha": "9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2N2VlNjJkYjNiNmIwOGY1Yjk2M2E3YjAwZTM0ODllZDdiZjIzNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-06-02T09:34:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-06-02T09:34:38Z"}, "message": "decl.c (start_decl): Simplify specialization handling.\n\n\t* decl.c (start_decl): Simplify specialization handling. Remove\n\tunneeded CLASSTYPE_TEMPLATE_INSTANTIATION check.\n\t* mangle.c (discriminator_for_local_entity): Use VEC_index.\n\nFrom-SVN: r100488", "tree": {"sha": "2e82b949e5fbc2faf1a0d693b2123f86aac63f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e82b949e5fbc2faf1a0d693b2123f86aac63f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/comments", "author": null, "committer": null, "parents": [{"sha": "58fb06b4a11160c4c6191b6c89f3c1b3a3bd0787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58fb06b4a11160c4c6191b6c89f3c1b3a3bd0787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58fb06b4a11160c4c6191b6c89f3c1b3a3bd0787"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "7524d5e557b7f84112923d1109d5a5469830dc2d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "patch": "@@ -1,5 +1,9 @@\n 2005-06-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* decl.c (start_decl): Simplify specialization handling. Remove\n+\tunneeded CLASSTYPE_TEMPLATE_INSTANTIATION check.\n+\t* mangle.c (discriminator_for_local_entity): Use VEC_index.\n+\n \tPR c++/20350\n \t* decl.c (duplicate_decls): Copy all of DECL_USE_TEMPLATE.\n "}, {"sha": "83c67198dc72c28a22b6de9ad904102e86ee30a5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "patch": "@@ -3716,22 +3716,22 @@ start_decl (const cp_declarator *declarator,\n \n       /* cp_finish_decl sets DECL_EXTERNAL if DECL_IN_AGGR_P is set.  */\n       DECL_IN_AGGR_P (decl) = 0;\n-      if ((DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n-\t  || CLASSTYPE_TEMPLATE_INSTANTIATION (context))\n-\t{\n-\t  /* Do not mark DECL as an explicit specialization if it was\n-\t     not already marked as an instantiation; a declaration\n-\t     should never be marked as a specialization unless we know\n-\t     what template is being specialized.  */ \n-\t  if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n-\t    SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n+      /* Do not mark DECL as an explicit specialization if it was not\n+\t already marked as an instantiation; a declaration should\n+\t never be marked as a specialization unless we know what\n+\t template is being specialized.  */ \n+      if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n+\t{\n+\t  SET_DECL_TEMPLATE_SPECIALIZATION (decl);\n+      \n \t  /* [temp.expl.spec] An explicit specialization of a static data\n \t     member of a template is a definition if the declaration\n \t     includes an initializer; otherwise, it is a declaration.\n-\n+\t      \n \t     We check for processing_specialization so this only applies\n \t     to the new specialization syntax.  */\n-\t  if (DECL_INITIAL (decl) == NULL_TREE && processing_specialization)\n+\t  if (!DECL_INITIAL (decl)\n+\t      && processing_specialization)\n \t    DECL_EXTERNAL (decl) = 1;\n \t}\n "}, {"sha": "8c276b586ae7bfa4f5248316d847cadefca96bd2", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9267ee62db3b6b08f5b963a7b00e3489ed7bf237/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=9267ee62db3b6b08f5b963a7b00e3489ed7bf237", "patch": "@@ -1426,21 +1426,26 @@ write_special_name_destructor (const tree dtor)\n static int\n discriminator_for_local_entity (tree entity)\n {\n-  tree *type;\n-\n   /* Assume this is the only local entity with this name.  */\n   int discriminator = 0;\n \n   if (DECL_DISCRIMINATOR_P (entity) && DECL_LANG_SPECIFIC (entity))\n     discriminator = DECL_DISCRIMINATOR (entity);\n   else if (TREE_CODE (entity) == TYPE_DECL)\n     {\n+      int ix;\n+      \n       /* Scan the list of local classes.  */\n       entity = TREE_TYPE (entity);\n-      for (type = VEC_address (tree, local_classes); *type != entity; ++type)\n-        if (TYPE_IDENTIFIER (*type) == TYPE_IDENTIFIER (entity)\n-            && TYPE_CONTEXT (*type) == TYPE_CONTEXT (entity))\n-\t  ++discriminator;\n+      for (ix = 0; ; ix++)\n+\t{\n+\t  tree type = VEC_index (tree, local_classes, ix);\n+\t  if (type == entity)\n+\t    break;\n+\t  if (TYPE_IDENTIFIER (type) == TYPE_IDENTIFIER (entity)\n+\t      && TYPE_CONTEXT (type) == TYPE_CONTEXT (entity))\n+\t    ++discriminator;\n+\t}\n     }  \n \n   return discriminator;"}]}