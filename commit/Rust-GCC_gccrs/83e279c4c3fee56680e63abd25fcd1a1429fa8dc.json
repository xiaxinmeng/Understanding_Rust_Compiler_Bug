{"sha": "83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlMjc5YzRjM2ZlZTU2NjgwZTYzYWJkMjVmY2QxYTE0MjlmYThkYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-06-27T08:47:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-27T08:47:23Z"}, "message": "trans.c: Include tree-flow.h.\n\n\t* gcc-interface/trans.c: Include tree-flow.h.\n\t(gnu_switch_label_stack): Delete.\n\t(Case_Statement_to_gnu): Do not emit the goto at the end of a case if\n\tits associated block cannot fall through.  Do not emit the final label\n\tif no cases branche to it.\n\t* gcc-interface/Make-lang.in (ada/trans.o): Add $(TREE_FLOW_H).\n\nFrom-SVN: r161461", "tree": {"sha": "61e0c9b35ca04cd394033069bfe029ae4c1e100a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e0c9b35ca04cd394033069bfe029ae4c1e100a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/comments", "author": null, "committer": null, "parents": [{"sha": "7ed979b918d8f34e58463d0118f333c45775169b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed979b918d8f34e58463d0118f333c45775169b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed979b918d8f34e58463d0118f333c45775169b"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "021a07a93b52d487dbfd0c50668cc4e2ca055627", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -1,3 +1,12 @@\n+2010-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c: Include tree-flow.h.\n+\t(gnu_switch_label_stack): Delete.\n+\t(Case_Statement_to_gnu): Do not emit the goto at the end of a case if\n+\tits associated block cannot fall through.  Do not emit the final label\n+\tif no cases branche to it.\n+\t* gcc-interface/Make-lang.in (ada/trans.o): Add $(TREE_FLOW_H).\n+\n 2010-06-23  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_attr.adb (Expand_Access_To_Protected_Op): When rewriting a"}, {"sha": "d4f37fe53744f615317fa7e57e9dc2df49450fe8", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -1260,7 +1260,7 @@ ada/targtyps.o : ada/gcc-interface/targtyps.c $(CONFIG_H) $(SYSTEM_H) \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(FLAGS_H) output.h tree-iterator.h \\\n+   $(TM_H) $(TREE_H) $(FLAGS_H) output.h tree-iterator.h $(TREE_FLOW_H) \\\n    $(GIMPLE_H) ada/gcc-interface/ada.h ada/adadecode.h ada/types.h \\\n    ada/atree.h ada/elists.h ada/namet.h ada/nlists.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/urealp.h ada/fe.h ada/sinfo.h ada/einfo.h \\"}, {"sha": "b79b4f0bc5d1035f3af80c9dea4bed354a02245e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -33,6 +33,7 @@\n #include \"output.h\"\n #include \"libfuncs.h\"\t/* For set_stack_check_libfunc.  */\n #include \"tree-iterator.h\"\n+#include \"tree-flow.h\"\n #include \"gimple.h\"\n \n #include \"ada.h\"\n@@ -168,9 +169,6 @@ static GTY(()) VEC(tree,gc) *gnu_return_label_stack;\n /* Stack of LOOP_STMT nodes.  */\n static GTY(()) VEC(tree,gc) *gnu_loop_label_stack;\n \n-/* Stack of labels for switch statements.  */\n-static GTY(()) VEC(tree,gc) *gnu_switch_label_stack;\n-\n /* The stacks for N_{Push,Pop}_*_Label.  */\n static GTY(()) VEC(tree,gc) *gnu_constraint_error_label_stack;\n static GTY(()) VEC(tree,gc) *gnu_storage_error_label_stack;\n@@ -1908,9 +1906,9 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n static tree\n Case_Statement_to_gnu (Node_Id gnat_node)\n {\n-  tree gnu_result;\n-  tree gnu_expr;\n+  tree gnu_result, gnu_expr, gnu_label;\n   Node_Id gnat_when;\n+  bool may_fallthru = false;\n \n   gnu_expr = gnat_to_gnu (Expression (gnat_node));\n   gnu_expr = convert (get_base_type (TREE_TYPE (gnu_expr)), gnu_expr);\n@@ -1933,8 +1931,7 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \n   /* We build a SWITCH_EXPR that contains the code with interspersed\n      CASE_LABEL_EXPRs for each label.  */\n-  VEC_safe_push (tree, gc, gnu_switch_label_stack,\n-\t\t create_artificial_label (input_location));\n+  gnu_label = create_artificial_label (input_location);\n   start_stmt_group ();\n \n   for (gnat_when = First_Non_Pragma (Alternatives (gnat_node));\n@@ -2014,18 +2011,22 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t containing the Case statement.  */\n       if (choices_added_p)\n \t{\n-\t  add_stmt (build_stmt_group (Statements (gnat_when), true));\n-\t  add_stmt (build1 (GOTO_EXPR, void_type_node,\n-\t\t\t    VEC_last (tree, gnu_switch_label_stack)));\n+\t  tree group = build_stmt_group (Statements (gnat_when), true);\n+\t  bool group_may_fallthru = block_may_fallthru (group);\n+\t  add_stmt (group);\n+\t  if (group_may_fallthru)\n+\t    {\n+\t      add_stmt (build1 (GOTO_EXPR, void_type_node, gnu_label));\n+\t      may_fallthru = true;\n+\t    }\n \t}\n     }\n \n-  /* Now emit a definition of the label all the cases branched to.  */\n-  add_stmt (build1 (LABEL_EXPR, void_type_node,\n-\t\t    VEC_last (tree, gnu_switch_label_stack)));\n+  /* Now emit a definition of the label the cases branche to, if any.  */\n+  if (may_fallthru)\n+    add_stmt (build1 (LABEL_EXPR, void_type_node, gnu_label));\n   gnu_result = build3 (SWITCH_EXPR, TREE_TYPE (gnu_expr), gnu_expr,\n \t\t       end_stmt_group (), NULL_TREE);\n-  VEC_pop (tree, gnu_switch_label_stack);\n \n   return gnu_result;\n }"}, {"sha": "04fad302e9bc062247dcb5ffa0f86c652666e714", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -1,3 +1,7 @@\n+2010-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/noreturn3.ad[sb]: New test.\n+\n 2010-06-26  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/explicit5.C: New."}, {"sha": "4457373c308a9657976cd236814d2dc00e9e7d1f", "filename": "gcc/testsuite/gnat.dg/noreturn3.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.adb?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+\n+with Ada.Exceptions;\n+\n+package body Noreturn3 is\n+\n+  procedure Raise_Error (E : Enum; ErrorMessage : String) is\n+\n+    function Msg return String is\n+    begin\n+      return \"Error :\" & ErrorMessage;\n+    end;\n+\n+  begin\n+    case E is\n+       when One =>\n+         Ada.Exceptions.Raise_Exception (Exc1'Identity, Msg);\n+\n+       when Two =>\n+         Ada.Exceptions.Raise_Exception (Exc2'Identity, Msg);\n+\n+       when others =>\n+         Ada.Exceptions.Raise_Exception (Exc3'Identity, Msg);\n+    end case;\n+  end;\n+\n+end Noreturn3;"}, {"sha": "d830a14910e055b671fa8635cbb2affaa0c34b83", "filename": "gcc/testsuite/gnat.dg/noreturn3.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e279c4c3fee56680e63abd25fcd1a1429fa8dc/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnoreturn3.ads?ref=83e279c4c3fee56680e63abd25fcd1a1429fa8dc", "patch": "@@ -0,0 +1,12 @@\n+package Noreturn3 is\n+\n+  Exc1 : Exception;\n+  Exc2 : Exception;\n+  Exc3 : Exception;\n+\n+  type Enum is (One, Two, Three);\n+\n+  procedure Raise_Error (E : Enum; ErrorMessage : String);\n+  pragma No_Return (Raise_Error);\n+\n+end Noreturn3;"}]}