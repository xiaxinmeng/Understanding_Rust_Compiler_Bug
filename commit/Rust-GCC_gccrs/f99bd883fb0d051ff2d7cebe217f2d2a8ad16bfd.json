{"sha": "f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5YmQ4ODNmYjBkMDUxZmYyZDdjZWJlMjE3ZjJkMmE4YWQxNmJmZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-12-01T21:41:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-01T21:41:10Z"}, "message": "sparc.opt (mlra): New target option.\n\n\t* config/sparc/sparc.opt (mlra): New target option.\n\t* config/sparc/sparc.c (TARGET_LRA_P): Define to...\n\t(sparc_lra_p): ...this.  New function.\n\t(D_MODES, DF_MODES): Add missing cast.\n\t* config/sparc/sparc.md (*movsi_lo_sum, *movsi_high): Do not\n\tprovide these insns when flag_pic.\n\t(sethi_di_medlow, losum_di_medlow, seth44, setm44, setl44, sethh,\n\tsetlm, sethm, setlo, embmedany_sethi, embmedany_losum,\n\tembmedany_brsum, embmedany_textuhi, embmedany_texthi,\n\tembmedany_textulo, embmedany_textlo): Likewise.\n\t(sethi_di_medlow_embmedany_pic): Provide it only when flag_pic.\n\nCo-Authored-By: David S. Miller <davem@davemloft.net>\n\nFrom-SVN: r243135", "tree": {"sha": "d20e66569ff6ae298de16ceac627a080c6babed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d20e66569ff6ae298de16ceac627a080c6babed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/comments", "author": null, "committer": null, "parents": [{"sha": "96ad5df6db65383330cba79ed823a0256e750033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ad5df6db65383330cba79ed823a0256e750033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ad5df6db65383330cba79ed823a0256e750033"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "5a55f42fccdf664c48a47294975b3c90b231b7a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "patch": "@@ -1,3 +1,18 @@\n+2016-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+            David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.opt (mlra): New target option.\n+\t* config/sparc/sparc.c (TARGET_LRA_P): Define to...\n+\t(sparc_lra_p): ...this.  New function.\n+\t(D_MODES, DF_MODES): Add missing cast.\n+\t* config/sparc/sparc.md (*movsi_lo_sum, *movsi_high): Do not\n+\tprovide these insns when flag_pic.\n+\t(sethi_di_medlow, losum_di_medlow, seth44, setm44, setl44, sethh,\n+\tsetlm, sethm, setlo, embmedany_sethi, embmedany_losum,\n+\tembmedany_brsum, embmedany_textuhi, embmedany_texthi,\n+\tembmedany_textulo, embmedany_textlo): Likewise.\n+\t(sethi_di_medlow_embmedany_pic): Provide it only with flag_pic.\n+\n 2016-12-01  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR debug/66419"}, {"sha": "e17552add3b852740dac256c479df8b92d9c9083", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "patch": "@@ -639,6 +639,7 @@ static const char *sparc_mangle_type (const_tree);\n static void sparc_trampoline_init (rtx, tree, rtx);\n static machine_mode sparc_preferred_simd_mode (machine_mode);\n static reg_class_t sparc_preferred_reload_class (rtx x, reg_class_t rclass);\n+static bool sparc_lra_p (void);\n static bool sparc_print_operand_punct_valid_p (unsigned char);\n static void sparc_print_operand (FILE *, rtx, int);\n static void sparc_print_operand_address (FILE *, machine_mode, rtx);\n@@ -836,7 +837,7 @@ char sparc_hard_reg_printed[8];\n #endif\n \n #undef TARGET_LRA_P\n-#define TARGET_LRA_P hook_bool_void_false\n+#define TARGET_LRA_P sparc_lra_p\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P sparc_legitimate_address_p\n@@ -4787,7 +4788,7 @@ enum sparc_mode_class {\n   ((1 << (int) H_MODE) | (1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-word and smaller quantities.  */\n-#define D_MODES (S_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n+#define D_MODES (S_MODES | (1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n /* Modes for quad-word and smaller quantities.  */\n #define T_MODES (D_MODES | (1 << (int) T_MODE) | (1 << (int) TF_MODE))\n@@ -4799,7 +4800,7 @@ enum sparc_mode_class {\n #define SF_MODES ((1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-float and smaller quantities.  */\n-#define DF_MODES (SF_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n+#define DF_MODES (SF_MODES | (1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n /* Modes for quad-float and smaller quantities.  */\n #define TF_MODES (DF_MODES | (1 << (int) TF_MODE))\n@@ -12248,6 +12249,14 @@ sparc_preferred_reload_class (rtx x, reg_class_t rclass)\n   return rclass;\n }\n \n+/* Return true if we use LRA instead of reload pass.  */\n+\n+static bool\n+sparc_lra_p (void)\n+{\n+  return TARGET_LRA;\n+}\n+\n /* Output a wide multiply instruction in V8+ mode.  INSN is the instruction,\n    OPERANDS are its operands and OPCODE is the mnemonic to be used.  */\n "}, {"sha": "896ce4b64e693f7f6dcafb25a6f572c8f123f49d", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "patch": "@@ -1568,13 +1568,13 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n                    (match_operand:SI 2 \"immediate_operand\" \"in\")))]\n-  \"\"\n+  \"!flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"*movsi_high\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand:SI 1 \"immediate_operand\" \"in\")))]\n-  \"\"\n+  \"!flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n ;; The next two patterns must wrap the SYMBOL_REF in an UNSPEC\n@@ -1846,131 +1846,129 @@\n (define_insn \"*sethi_di_medlow_embmedany_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (match_operand:DI 1 \"medium_pic_operand\" \"\")))]\n-  \"(TARGET_CM_MEDLOW || TARGET_CM_EMBMEDANY) && check_pic (1)\"\n+  \"(TARGET_CM_MEDLOW || TARGET_CM_EMBMEDANY) && flag_pic && check_pic (1)\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (match_operand:DI 1 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDLOW && check_pic (1)\"\n+  \"TARGET_CM_MEDLOW && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"*losum_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDLOW\"\n+  \"TARGET_CM_MEDLOW && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"seth44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_SETH44)))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"sethi\\t%%h44(%a1), %0\")\n \n (define_insn \"setm44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")]\n \t\t\t      UNSPEC_SETM44)))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"or\\t%1, %%m44(%a2), %0\")\n \n (define_insn \"setl44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDMID\"\n+  \"TARGET_CM_MEDMID && !flag_pic\"\n   \"or\\t%1, %%l44(%a2), %0\")\n \n (define_insn \"sethh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_SETHH)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"sethi\\t%%hh(%a1), %0\")\n \n (define_insn \"setlm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_SETLM)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"sethi\\t%%lm(%a1), %0\")\n \n (define_insn \"sethm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")]\n \t\t\t      UNSPEC_EMB_SETHM)))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"or\\t%1, %%hm(%a2), %0\")\n \n (define_insn \"setlo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"symbolic_operand\" \"\")))]\n-  \"TARGET_CM_MEDANY\"\n+  \"TARGET_CM_MEDANY && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"embmedany_sethi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"data_segment_operand\" \"\")]\n \t\t\t    UNSPEC_EMB_HISUM)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"embmedany_losum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"data_segment_operand\" \"\")))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"add\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"embmedany_brsum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n \t           UNSPEC_EMB_HISUM))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"add\\t%1, %_, %0\")\n \n (define_insn \"embmedany_textuhi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")]\n \t\t\t    UNSPEC_EMB_TEXTUHI)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%uhi(%a1), %0\")\n \n (define_insn \"embmedany_texthi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")]\n \t\t\t    UNSPEC_EMB_TEXTHI)))]\n-  \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"embmedany_textulo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (unspec:DI [(match_operand:DI 2 \"text_segment_operand\" \"\")]\n \t\t\t      UNSPEC_EMB_TEXTULO)))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"or\\t%1, %%ulo(%a2), %0\")\n \n (define_insn \"embmedany_textlo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                    (match_operand:DI 2 \"text_segment_operand\" \"\")))]\n-  \"TARGET_CM_EMBMEDANY\"\n+  \"TARGET_CM_EMBMEDANY && !flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n ;; Now some patterns to help reload out a bit.\n (define_expand \"reload_indi\"\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=r\")\n               (match_operand:DI 1 \"immediate_operand\" \"\")\n               (match_operand:TI 2 \"register_operand\" \"=&r\")])]\n-  \"(TARGET_CM_MEDANY\n-    || TARGET_CM_EMBMEDANY)\n-   && !flag_pic\"\n+  \"(TARGET_CM_MEDANY || TARGET_CM_EMBMEDANY) && !flag_pic\"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n@@ -1980,9 +1978,7 @@\n   [(parallel [(match_operand:DI 0 \"register_operand\" \"=r\")\n               (match_operand:DI 1 \"immediate_operand\" \"\")\n               (match_operand:TI 2 \"register_operand\" \"=&r\")])]\n-  \"(TARGET_CM_MEDANY\n-    || TARGET_CM_EMBMEDANY)\n-   && !flag_pic\"\n+  \"(TARGET_CM_MEDANY || TARGET_CM_EMBMEDANY) && !flag_pic\"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;"}, {"sha": "973fe6f55d58bf56dabeb990e424b09457f924b1", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=f99bd883fb0d051ff2d7cebe217f2d2a8ad16bfd", "patch": "@@ -57,6 +57,10 @@ msoft-quad-float\n Target Report RejectNegative InverseMask(HARD_QUAD)\n Do not use hardware quad fp instructions.\n \n+mlra\n+Target Report Mask(LRA)\n+Enable Local Register Allocation.\n+\n mv8plus\n Target Report Mask(V8PLUS)\n Compile for V8+ ABI."}]}