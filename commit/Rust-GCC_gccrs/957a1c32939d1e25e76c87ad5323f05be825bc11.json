{"sha": "957a1c32939d1e25e76c87ad5323f05be825bc11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3YTFjMzI5MzlkMWUyNWU3NmM4N2FkNTMyM2YwNWJlODI1YmMxMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-20T23:55:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-20T23:55:24Z"}, "message": "(typespec): Made <SomeProtocol> equivalent to (id <SomeProtocol>).\n\n(non_empty_protocolrefs): New nonterminal.\n\nFrom-SVN: r11858", "tree": {"sha": "198a96479afb96182b45b3be127c4890eba9ec25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198a96479afb96182b45b3be127c4890eba9ec25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/957a1c32939d1e25e76c87ad5323f05be825bc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957a1c32939d1e25e76c87ad5323f05be825bc11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957a1c32939d1e25e76c87ad5323f05be825bc11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957a1c32939d1e25e76c87ad5323f05be825bc11/comments", "author": null, "committer": null, "parents": [{"sha": "5720c7e75b4c01567bf0b0fee33ea6663c4bb44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5720c7e75b4c01567bf0b0fee33ea6663c4bb44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5720c7e75b4c01567bf0b0fee33ea6663c4bb44c"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "a5223cd25a1bd565008222d2fd3a35dac6335682", "filename": "gcc/c-parse.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957a1c32939d1e25e76c87ad5323f05be825bc11/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957a1c32939d1e25e76c87ad5323f05be825bc11/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=957a1c32939d1e25e76c87ad5323f05be825bc11", "patch": "@@ -224,7 +224,8 @@ ifobjc\n %type <ttype> keywordexpr keywordarglist keywordarg\n %type <ttype> myparms myparm optparmlist reservedwords objcselectorexpr\n %type <ttype> selectorarg keywordnamelist keywordname objcencodeexpr\n-%type <ttype> objc_string protocolrefs identifier_list objcprotocolexpr\n+%type <ttype> objc_string non_empty_protocolrefs protocolrefs identifier_list objcprotocolexpr\n+\n %type <ttype> CLASSNAME OBJC_STRING OBJECTNAME\n end ifobjc\n \f\n@@ -1041,6 +1042,11 @@ ifobjc\n \t\t{ $$ = get_static_reference ($1, $2); }\n \t| OBJECTNAME protocolrefs\n \t\t{ $$ = get_object_reference ($2); }\n+\n+/* Make \"<SomeProtocol>\" equivalent to \"id <SomeProtocol>\"\n+   - nisse@lysator.liu.se */\n+        | non_empty_protocolrefs\n+                { $$ = get_object_reference ($1); }\n end ifobjc\n \t| TYPEOF '(' expr ')'\n \t\t{ $$ = TREE_TYPE ($3); }\n@@ -2440,7 +2446,11 @@ protocolrefs:\n \t\t{\n \t\t  $$ = NULL_TREE;\n \t\t}\n-\t| ARITHCOMPARE identifier_list ARITHCOMPARE\n+\t| non_empty_protocolrefs\n+\t;\n+\n+non_empty_protocolrefs:\n+\t  ARITHCOMPARE identifier_list ARITHCOMPARE\n \t\t{\n \t\t  if ($1 == LT_EXPR && $3 == GT_EXPR)\n \t\t    $$ = $2;"}]}