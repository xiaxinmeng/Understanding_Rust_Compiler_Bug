{"sha": "826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2ZTM4NTQ1MzhjMjFlNmE0MmJjNzNhZDVkMDJmMmVlMmExM2YxNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-07-01T13:20:50Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-07-01T13:20:50Z"}, "message": "reload.c (find_reloads): If there are multiple RELOAD_FOR_INPUT_ADDRESS / RELOAD_FOR_OUTPUT_ADDRESS...\n\n\t* reload.c (find_reloads): If there are multiple\n\tRELOAD_FOR_INPUT_ADDRESS / RELOAD_FOR_OUTPUT_ADDRESS reloads for\n\tone operand, change RELOAD_FOR_INPADDR_ADDRESS /\n\tRELOAD_FOR_OUTADDR_ADDRESS for all but the first\n\tRELOAD_FOR_INPUT_ADDRESS / RELOAD_FOR_OUTPUT_ADDRESS reloads.\n\nFrom-SVN: r20877", "tree": {"sha": "7f203b5d56a52fb6eb3200e2ef40d79aa3203a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f203b5d56a52fb6eb3200e2ef40d79aa3203a9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826e3854538c21e6a42bc73ad5d02f2ee2a13f14/comments", "author": null, "committer": null, "parents": [{"sha": "d7921434ac4825e33e59bc22df7c716d9990ff87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7921434ac4825e33e59bc22df7c716d9990ff87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7921434ac4825e33e59bc22df7c716d9990ff87"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "48f626c14b1c4359b1f5892f010078857b1aa8ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826e3854538c21e6a42bc73ad5d02f2ee2a13f14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826e3854538c21e6a42bc73ad5d02f2ee2a13f14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "patch": "@@ -1,3 +1,11 @@\n+Wed Jul  1 21:17:36 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload.c (find_reloads): If there are multiple\n+\tRELOAD_FOR_INPUT_ADDRESS / RELOAD_FOR_OUTPUT_ADDRESS reloads for\n+\tone operand, change RELOAD_FOR_INPADDR_ADDRESS /\n+\tRELOAD_FOR_OUTADDR_ADDRESS for all but the first\n+\tRELOAD_FOR_INPUT_ADDRESS / RELOAD_FOR_OUTPUT_ADDRESS reloads.\n+\n Wed Jul  1 17:23:23 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* regmove.c (fixup_match_2): Check that P has RTX_CLASS 'i' before"}, {"sha": "c010943021b623a5a96172f70e523da79edcf265", "filename": "gcc/reload.c", "status": "modified", "additions": 74, "deletions": 9, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826e3854538c21e6a42bc73ad5d02f2ee2a13f14/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826e3854538c21e6a42bc73ad5d02f2ee2a13f14/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=826e3854538c21e6a42bc73ad5d02f2ee2a13f14", "patch": "@@ -3994,17 +3994,82 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n      actually fail are extremely rare, so it turns out to be better to fix\n      the problem here by not generating cases that choose_reload_regs will\n      fail for.  */\n-   \n+  /* There is a similar problem with RELAOD_FOR_INPUT_ADDRESS /\n+     RELOAD_FOR_OUTPUT_ADDRESS when there is more than one of a kind for\n+     a single operand.\n+     We can reduce the register pressure by exploiting that a\n+     RELOAD_FOR_X_ADDR_ADDR that precedes all RELOAD_FOR_X_ADDRESS reloads\n+     does not conflict with any of them.  */\n   {\n-    int op_addr_reloads = 0;\n-    for (i = 0; i < n_reloads; i++)\n-      if (reload_when_needed[i] == RELOAD_FOR_OPERAND_ADDRESS)\n-\top_addr_reloads++;\n+    int first_op_addr_num = -2;\n+    int first_inpaddr_num[MAX_RECOG_OPERANDS];\n+    int first_outpaddr_num[MAX_RECOG_OPERANDS];\n+    int need_change= 0;\n+    /* We use last_op_addr_reload and the contents of the above arrays\n+       first as flags - -2 means no instance encountered, -1 means exactly\n+       one instance encountered.\n+       If more than one instance has been encountered, we store the reload\n+       number of the first reload of the kind in question; reload numbers\n+       are known to be non-negative.  */\n+    for (i = 0; i < noperands; i++)\n+      first_inpaddr_num[i] = first_outpaddr_num[i] = -2;\n+    for (i = n_reloads - 1; i >= 0; i--)\n+      {\n+\tswitch (reload_when_needed[i])\n+\t  {\n+\t  case RELOAD_FOR_OPERAND_ADDRESS:\n+\t    if (! ++first_op_addr_num)\n+\t      {\n+\t\tfirst_op_addr_num= i;\n+\t\tneed_change = 1;\n+\t      }\n+\t    break;\n+\t  case RELOAD_FOR_INPUT_ADDRESS:\n+\t    if (! ++first_inpaddr_num[reload_opnum[i]])\n+\t      {\n+\t\tfirst_inpaddr_num[reload_opnum[i]] = i;\n+\t\tneed_change = 1;\n+\t      }\n+\t    break;\n+\t  case RELOAD_FOR_OUTPUT_ADDRESS:\n+\t    if (! ++first_outpaddr_num[reload_opnum[i]])\n+\t      {\n+\t\tfirst_outpaddr_num[reload_opnum[i]] = i;\n+\t\tneed_change = 1;\n+\t      }\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+      }\n \n-    if (op_addr_reloads > 1)\n-      for (i = 0; i < n_reloads; i++)\n-\tif (reload_when_needed[i] == RELOAD_FOR_OPADDR_ADDR)\n-\t  reload_when_needed[i] = RELOAD_FOR_OPERAND_ADDRESS;\n+    if (need_change)\n+      {\n+\tfor (i = 0; i < n_reloads; i++)\n+\t  {\n+\t    int first_num, type;\n+\n+\t    switch (reload_when_needed[i])\n+\t      {\n+\t      case RELOAD_FOR_OPADDR_ADDR:\n+\t\tfirst_num = first_op_addr_num;\n+\t\ttype = RELOAD_FOR_OPERAND_ADDRESS;\n+\t\tbreak;\n+\t      case RELOAD_FOR_INPADDR_ADDRESS:\n+\t\tfirst_num = first_inpaddr_num[reload_opnum[i]];\n+\t\ttype = RELOAD_FOR_INPUT_ADDRESS;\n+\t\tbreak;\n+\t      case RELOAD_FOR_OUTADDR_ADDRESS:\n+\t\tfirst_num = first_outpaddr_num[reload_opnum[i]];\n+\t\ttype = RELOAD_FOR_OUTPUT_ADDRESS;\n+\t\tbreak;\n+\t      default:\n+\t\tcontinue;\n+\t      }\n+\t    if (i > first_num)\n+\t      reload_when_needed[i] = type;\n+\t  }\n+      }\n   }\n \n   /* See if we have any reloads that are now allowed to be merged"}]}