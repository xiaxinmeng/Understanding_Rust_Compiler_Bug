{"sha": "a4ccc3361445147584c08ae823db1fe5a171d311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjY2MzMzYxNDQ1MTQ3NTg0YzA4YWU4MjNkYjFmZTVhMTcxZDMxMQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2005-07-30T18:23:51Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2005-07-30T18:23:51Z"}, "message": "arm.md (all peepholes for post-increment operations): Delete.\n\n\t* arm.md (all peepholes for post-increment operations): Delete.\n\t(strqi_preinc, strqi_predec, loadqi_preinc, loadqi_predec)\n\t(loadqisi_preinc, loadqisi_predec, strsi_preinc, strsi_predec)\n\t(loadsi_preinc, loadsi_predec, strqi_shiftpreinc, strqi_shiftpredec)\n\t(loadqi_shiftpreinc, loadqi_shiftpredec, strsi_shiftpreinc)\n\t(strsishift_predec, loadsi_shiftpreinc, loadsi_shiftpredec): Delete.\n\nFrom-SVN: r102589", "tree": {"sha": "7a5bb80282b9a1b1a9cb18c0916877dd5abcc448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5bb80282b9a1b1a9cb18c0916877dd5abcc448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4ccc3361445147584c08ae823db1fe5a171d311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ccc3361445147584c08ae823db1fe5a171d311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ccc3361445147584c08ae823db1fe5a171d311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ccc3361445147584c08ae823db1fe5a171d311/comments", "author": null, "committer": null, "parents": [{"sha": "06581725b92dd7808e1388950b9bb90d095d2315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06581725b92dd7808e1388950b9bb90d095d2315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06581725b92dd7808e1388950b9bb90d095d2315"}], "stats": {"total": 399, "additions": 9, "deletions": 390}, "files": [{"sha": "59e5c838248c32d393cfc9b8eb7ee184a3c6039c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ccc3361445147584c08ae823db1fe5a171d311/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ccc3361445147584c08ae823db1fe5a171d311/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4ccc3361445147584c08ae823db1fe5a171d311", "patch": "@@ -1,3 +1,12 @@\n+2005-07-30  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.md (all peepholes for post-increment operations): Delete.\n+\t(strqi_preinc, strqi_predec, loadqi_preinc, loadqi_predec)\n+\t(loadqisi_preinc, loadqisi_predec, strsi_preinc, strsi_predec)\n+\t(loadsi_preinc, loadsi_predec, strqi_shiftpreinc, strqi_shiftpredec)\n+\t(loadqi_shiftpreinc, loadqi_shiftpredec, strsi_shiftpreinc)\n+\t(strsishift_predec, loadsi_shiftpreinc, loadsi_shiftpredec): Delete.\n+\n 2005-07-30  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* fold-const.c (tree_expr_nonnegative_p): Always return true for"}, {"sha": "eaa7d51c106b5393c9abbe978c8ce0235b8f5b6f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 390, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ccc3361445147584c08ae823db1fe5a171d311/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ccc3361445147584c08ae823db1fe5a171d311/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=a4ccc3361445147584c08ae823db1fe5a171d311", "patch": "@@ -9405,396 +9405,6 @@\n    (set_attr \"type\" \"load1\")]\n )\n \n-;; the arm can support extended pre-inc instructions\n-\n-;; In all these cases, we use operands 0 and 1 for the register being\n-;; incremented because those are the operands that local-alloc will\n-;; tie and these are the pair most likely to be tieable (and the ones\n-;; that will benefit the most).\n-\n-;; We reject the frame pointer if it occurs anywhere in these patterns since\n-;; elimination will cause too many headaches.\n-\n-(define_insn \"*strqi_preinc\"\n-  [(set (mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\")))\n-\t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"str%?b\\\\t%3, [%0, %2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strqi_predec\"\n-  [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")))\n-\t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"str%?b\\\\t%3, [%0, -%2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqi_preinc\"\n-  [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n-\t(mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?b\\\\t%3, [%0, %2]!\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqi_predec\"\n-  [(set (match_operand:QI 3 \"s_register_operand\" \"=r\")\n-\t(mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?b\\\\t%3, [%0, -%2]!\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqisi_preinc\"\n-  [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (mem:QI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t\t  (match_operand:SI 2 \"index_operand\" \"rJ\")))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?b\\\\t%3, [%0, %2]!\\\\t%@ z_extendqisi\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqisi_predec\"\n-  [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t   (match_operand:SI 2 \"s_register_operand\" \"r\")))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?b\\\\t%3, [%0, -%2]!\\\\t%@ z_extendqisi\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strsi_preinc\"\n-  [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\")))\n-\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"str%?\\\\t%3, [%0, %2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strsi_predec\"\n-  [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\")))\n-\t(match_operand:SI 3 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"str%?\\\\t%3, [%0, -%2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadsi_preinc\"\n-  [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n-\t(mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%0\")\n-\t\t\t (match_operand:SI 2 \"index_operand\" \"rJ\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?\\\\t%3, [%0, %2]!\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadsi_predec\"\n-  [(set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n-\t(mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operand:SI 2 \"s_register_operand\" \"r\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[2])\"\n-  \"ldr%?\\\\t%3, [%0, -%2]!\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strqi_shiftpreinc\"\n-  [(set (mem:QI (plus:SI (match_operator:SI 2 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n-\t\t\t (match_operand:SI 1 \"s_register_operand\" \"0\")))\n-\t(match_operand:QI 5 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_op_dup 2 [(match_dup 3)\t(match_dup 4)])\n-\t\t (match_dup 1)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"str%?b\\\\t%5, [%0, %3%S2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strqi_shiftpredec\"\n-  [(set (mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"const_shift_operand\" \"n\")])))\n-\t(match_operand:QI 5 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"str%?b\\\\t%5, [%0, -%3%S2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqi_shiftpreinc\"\n-  [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n-\t(mem:QI (plus:SI (match_operator:SI 2 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n-\t\t\t (match_operand:SI 1 \"s_register_operand\" \"0\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_op_dup 2 [(match_dup 3)\t(match_dup 4)])\n-\t\t (match_dup 1)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"ldr%?b\\\\t%5, [%0, %3%S2]!\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadqi_shiftpredec\"\n-  [(set (match_operand:QI 5 \"s_register_operand\" \"=r\")\n-\t(mem:QI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"const_shift_operand\" \"n\")]))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"ldr%?b\\\\t%5, [%0, -%3%S2]!\"\n-  [(set_attr \"type\" \"load_byte\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strsi_shiftpreinc\"\n-  [(set (mem:SI (plus:SI (match_operator:SI 2 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n-\t\t\t (match_operand:SI 1 \"s_register_operand\" \"0\")))\n-\t(match_operand:SI 5 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_op_dup 2 [(match_dup 3)\t(match_dup 4)])\n-\t\t (match_dup 1)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"str%?\\\\t%5, [%0, %3%S2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*strsi_shiftpredec\"\n-  [(set (mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"const_shift_operand\" \"n\")])))\n-\t(match_operand:SI 5 \"s_register_operand\" \"r\"))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"str%?\\\\t%5, [%0, -%3%S2]!\"\n-  [(set_attr \"type\" \"store1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadsi_shiftpreinc\"\n-  [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n-\t(mem:SI (plus:SI (match_operator:SI 2 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 4 \"const_shift_operand\" \"n\")])\n-\t\t\t (match_operand:SI 1 \"s_register_operand\" \"0\"))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (match_op_dup 2 [(match_dup 3) (match_dup 4)])\n-\t\t (match_dup 1)))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"ldr%?\\\\t%5, [%0, %3%S2]!\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*loadsi_shiftpredec\"\n-  [(set (match_operand:SI 5 \"s_register_operand\" \"=r\")\n-\t(mem:SI (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0\")\n-\t\t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t    (match_operand:SI 4 \"const_shift_operand\" \"n\")]))))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n-\t\t\t\t\t\t (match_dup 4)])))]\n-  \"TARGET_ARM\n-   && !arm_eliminable_register (operands[0])\n-   && !arm_eliminable_register (operands[1])\n-   && !arm_eliminable_register (operands[3])\"\n-  \"ldr%?\\\\t%5, [%0, -%3%S2]!\"\n-  [(set_attr \"type\" \"load1\")\n-   (set_attr \"predicable\" \"yes\")])\n-\n-; It can also support extended post-inc expressions, but combine doesn't\n-; try these....\n-; It doesn't seem worth adding peepholes for anything but the most common\n-; cases since, unlike combine, the increment must immediately follow the load\n-; for this pattern to match.\n-; We must watch to see that the source/destination register isn't also the\n-; same as the base address register, and that if the index is a register,\n-; that it is not the same as the base address register.  In such cases the\n-; instruction that we would generate would have UNPREDICTABLE behavior so \n-; we cannot use it.\n-\n-(define_peephole\n-  [(set (mem:QI (match_operand:SI 0 \"s_register_operand\" \"+r\"))\n-\t(match_operand:QI 2 \"s_register_operand\" \"r\"))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\n-   && (REGNO (operands[2]) != REGNO (operands[0]))\n-   && (GET_CODE (operands[1]) != REG\n-       || (REGNO (operands[1]) != REGNO (operands[0])))\"\n-  \"str%?b\\\\t%2, [%0], %1\"\n-)\n-\n-(define_peephole\n-  [(set (match_operand:QI 0 \"s_register_operand\" \"=r\")\n-\t(mem:QI (match_operand:SI 1 \"s_register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1) (match_operand:SI 2 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\n-   && REGNO (operands[0]) != REGNO(operands[1])\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO(operands[0]) != REGNO (operands[2]))\"\n-  \"ldr%?b\\\\t%0, [%1], %2\"\n-)\n-\n-(define_peephole\n-  [(set (mem:SI (match_operand:SI 0 \"s_register_operand\" \"+r\"))\n-\t(match_operand:SI 2 \"s_register_operand\" \"r\"))\n-   (set (match_dup 0)\n-\t(plus:SI (match_dup 0) (match_operand:SI 1 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\n-   && (REGNO (operands[2]) != REGNO (operands[0]))\n-   && (GET_CODE (operands[1]) != REG\n-       || (REGNO (operands[1]) != REGNO (operands[0])))\"\n-  \"str%?\\\\t%2, [%0], %1\"\n-)\n-\n-(define_peephole\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(mem:SI (match_operand:SI 1 \"s_register_operand\" \"+r\")))\n-   (set (match_dup 1)\n-\t(plus:SI (match_dup 1) (match_operand:SI 2 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\n-   && REGNO (operands[0]) != REGNO(operands[1])\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO(operands[0]) != REGNO (operands[2]))\"\n-  \"ldr%?\\\\t%0, [%1], %2\"\n-)\n-\n-(define_peephole\n-  [(set (mem:QI (plus:SI (match_operand:SI 0 \"s_register_operand\" \"+r\")\n-\t\t\t (match_operand:SI 1 \"index_operand\" \"rJ\")))\n-\t(match_operand:QI 2 \"s_register_operand\" \"r\"))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))]\n-  \"TARGET_ARM\n-   && (REGNO (operands[2]) != REGNO (operands[0]))\n-   && (GET_CODE (operands[1]) != REG\n-       || (REGNO (operands[1]) != REGNO (operands[0])))\"\n-  \"str%?b\\\\t%2, [%0, %1]!\"\n-)\n-\n-(define_peephole\n-  [(set (mem:QI (plus:SI (match_operator:SI 4 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 0 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 1 \"const_int_operand\" \"n\")])\n-\t\t\t (match_operand:SI 2 \"s_register_operand\" \"+r\")))\n-\t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n-   (set (match_dup 2) (plus:SI (match_op_dup 4 [(match_dup 0) (match_dup 1)])\n-\t\t\t       (match_dup 2)))]\n-  \"TARGET_ARM\n-   && (REGNO (operands[3]) != REGNO (operands[2]))\n-   && (REGNO (operands[0]) != REGNO (operands[2]))\"\n-  \"str%?b\\\\t%3, [%2, %0%S4]!\"\n-)\n-\n ; This pattern is never tried by combine, so do it as a peephole\n \n (define_peephole2"}]}