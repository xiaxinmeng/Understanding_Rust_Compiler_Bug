{"sha": "2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNmOTI3NmJhN2I4ZGY2ZDgyOThkY2Q1NWIyM2NhZjMxYmM5ZTcxYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-02-01T12:57:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-02-01T12:57:35Z"}, "message": "PR78346 make <bits/predefined_ops.h> handle stashing iterators\n\n\tPR libstdc++/78346\n\t* include/bits/predefined_ops.h (_Iter_equals_iter): Store iterator\n\tnot its referent.\n\t(_Iter_comp_to_iter): Likewise.\n\t* testsuite/25_algorithms/search/78346.cc: New test.\n\nFrom-SVN: r245090", "tree": {"sha": "5526886853de72ebc89312faab30c60c00005e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5526886853de72ebc89312faab30c60c00005e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7ef862ac809db0f6b9dfb746a12e27b7098194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7ef862ac809db0f6b9dfb746a12e27b7098194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7ef862ac809db0f6b9dfb746a12e27b7098194"}], "stats": {"total": 138, "additions": 131, "deletions": 7}, "files": [{"sha": "bfa7fb54d55c80258f8dd0a89a133a13e4147cf6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "patch": "@@ -1,5 +1,11 @@\n 2017-02-01  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/78346\n+\t* include/bits/predefined_ops.h (_Iter_equals_iter): Store iterator\n+\tnot its referent.\n+\t(_Iter_comp_to_iter): Likewise.\n+\t* testsuite/25_algorithms/search/78346.cc: New test.\n+\n \tPR libstdc++/79254\n \t* config/abi/pre/gnu.ver: Remove recently added symbols.\n \t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]"}, {"sha": "0624a38a1ba9f096468317ff2824d239d5cce401", "filename": "libstdc++-v3/include/bits/predefined_ops.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h?ref=2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "patch": "@@ -24,7 +24,7 @@\n \n /** @file predefined_ops.h\n  *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n+ *  You should not attempt to use it directly. @headername{algorithm}\n  */\n \n #ifndef _GLIBCXX_PREDEFINED_OPS_H\n@@ -249,17 +249,17 @@ namespace __ops\n   template<typename _Iterator1>\n     struct _Iter_equals_iter\n     {\n-      typename std::iterator_traits<_Iterator1>::reference _M_ref;\n+      _Iterator1 _M_it1;\n \n       explicit\n       _Iter_equals_iter(_Iterator1 __it1)\n-\t: _M_ref(*__it1)\n+\t: _M_it1(__it1)\n       { }\n \n       template<typename _Iterator2>\n \tbool\n \toperator()(_Iterator2 __it2)\n-\t{ return *__it2 == _M_ref; }\n+\t{ return *__it2 == *_M_it1; }\n     };\n \n   template<typename _Iterator>\n@@ -315,16 +315,16 @@ namespace __ops\n     struct _Iter_comp_to_iter\n     {\n       _Compare _M_comp;\n-      typename std::iterator_traits<_Iterator1>::reference _M_ref;\n+      _Iterator1 _M_it1;\n \n       _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)\n-\t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_ref(*__it1)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_it1(__it1)\n       { }\n \n       template<typename _Iterator2>\n \tbool\n \toperator()(_Iterator2 __it2)\n-\t{ return bool(_M_comp(*__it2, _M_ref)); }\n+\t{ return bool(_M_comp(*__it2, *_M_it1)); }\n     };\n \n   template<typename _Compare, typename _Iterator>"}, {"sha": "6f003bdb9e6a43cf78128cddc214828cef12c137", "filename": "libstdc++-v3/testsuite/25_algorithms/search/78346.cc", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F78346.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F78346.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F78346.cc?ref=2cf9276ba7b8df6d8298dcd55b23caf31bc9e71a", "patch": "@@ -0,0 +1,118 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool values[100];\n+\n+unsigned next_id()\n+{\n+  static unsigned counter = 0;\n+  VERIFY(counter < 100);\n+  return counter++;\n+}\n+\n+struct value\n+{\n+  int val;\n+  const unsigned id;\n+\n+  value(int i = 0) : val(i), id(next_id()) { values[id] = true; }\n+  value(const value& v) : val(v.val), id(next_id()) { values[id] = true; }\n+  value& operator=(const value& v) { val = v.val; return *this; }\n+  ~value() { values[id] = false; }\n+};\n+\n+bool operator<(const value& lhs, const value& rhs)\n+{\n+  if (!values[lhs.id])\n+    throw lhs.id;\n+  if (!values[rhs.id])\n+    throw rhs.id;\n+  return lhs.val < rhs.val;\n+}\n+\n+bool operator==(const value& lhs, const value& rhs)\n+{\n+  if (!values[lhs.id])\n+    throw lhs.id;\n+  if (!values[rhs.id])\n+    throw rhs.id;\n+  return lhs.val == rhs.val;\n+}\n+\n+// A forward iterator that fails to meet the requirement that for any\n+// two dereferenceable forward iterators, a == b implies &*a == &*b\n+struct stashing_iterator\n+{\n+  typedef std::forward_iterator_tag iterator_category;\n+  typedef value value_type;\n+  typedef value_type const* pointer;\n+  typedef value_type const& reference;\n+  typedef std::ptrdiff_t difference_type;\n+\n+  stashing_iterator() : ptr(), stashed() { }\n+  stashing_iterator(pointer p) : ptr(p), stashed() { stash(); }\n+  stashing_iterator(const stashing_iterator&) = default;\n+  stashing_iterator& operator=(const stashing_iterator&) = default;\n+\n+  stashing_iterator& operator++()\n+  {\n+    ++ptr;\n+    stash();\n+    return *this;\n+  }\n+\n+  stashing_iterator operator++(int)\n+  {\n+    stashing_iterator i = *this;\n+    ++*this;\n+    return i;\n+  }\n+\n+  reference operator*() const { return stashed; }\n+  pointer operator->() const { return &**this; }\n+\n+  bool operator==(const stashing_iterator& i) const { return ptr == i.ptr; }\n+  bool operator!=(const stashing_iterator& i) const { return !(*this == i); }\n+\n+private:\n+  void stash()\n+  {\n+    if (ptr)\n+      stashed = *ptr;\n+  }\n+\n+  pointer ptr;\n+  value_type stashed;\n+};\n+\n+void\n+test01()\n+{\n+  value s[] = { 0, 1, 2, 3, 4, 5 };\n+  std::search(s, s+6, stashing_iterator(s), stashing_iterator(s+4));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}