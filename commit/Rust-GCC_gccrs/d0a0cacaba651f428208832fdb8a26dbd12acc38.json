{"sha": "d0a0cacaba651f428208832fdb8a26dbd12acc38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhMGNhY2FiYTY1MWY0MjgyMDg4MzJmZGI4YTI2ZGJkMTJhY2MzOA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-10-11T09:00:26Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-10-11T09:00:26Z"}, "message": "S/390: Use signaling FP comparison instructions\n\ndg-torture.exp=inf-compare-1.c is failing, because (qNaN > +Inf)\ncomparison is compiled to CDB instruction, which does not signal an\ninvalid operation exception. KDB should have been used instead.\n\nThis patch introduces a new CCmode and a new pattern in order to\ngenerate signaling instructions in this and similar cases.\n\ngcc/ChangeLog:\n\n2019-10-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/77918\n\t* config/s390/2827.md: Add new opcodes.\n\t* config/s390/2964.md: Likewise.\n\t* config/s390/3906.md: Likewise.\n\t* config/s390/8561.md: Likewise.\n\t* config/s390/s390-builtins.def (s390_vfchesb): Use\n\tthe new vec_cmpgev4sf_quiet_nocc.\n\t(s390_vfchedb): Use the new vec_cmpgev2df_quiet_nocc.\n\t(s390_vfchsb): Use the new vec_cmpgtv4sf_quiet_nocc.\n\t(s390_vfchdb): Use the new vec_cmpgtv2df_quiet_nocc.\n\t(vec_cmplev4sf): Use the new vec_cmplev4sf_quiet_nocc.\n\t(vec_cmplev2df): Use the new vec_cmplev2df_quiet_nocc.\n\t(vec_cmpltv4sf): Use the new vec_cmpltv4sf_quiet_nocc.\n\t(vec_cmpltv2df): Use the new vec_cmpltv2df_quiet_nocc.\n\t* config/s390/s390-modes.def (CCSFPS): New mode.\n\t* config/s390/s390.c (s390_match_ccmode_set): Support CCSFPS.\n\t(s390_select_ccmode): Return CCSFPS for LT, LE, GT, GE and LTGT.\n\t(s390_branch_condition_mask): Reuse CCS for CCSFPS.\n\t(s390_expand_vec_compare): Use non-signaling patterns where\n\tnecessary.\n\t(s390_reverse_condition): Support CCSFPS.\n\t* config/s390/s390.md (*cmp<mode>_ccsfps): New pattern.\n\t* config/s390/vector.md: (VFCMP_HW_OP): Remove.\n\t(asm_fcmp_op): Likewise.\n\t(*smaxv2df3_vx): Use pattern for quiet comparison.\n\t(*sminv2df3_vx): Likewise.\n\t(*vec_cmp<VFCMP_HW_OP:code><mode>_nocc): Remove.\n\t(*vec_cmpeq<mode>_quiet_nocc): New pattern.\n\t(vec_cmpgt<mode>_quiet_nocc): Likewise.\n\t(vec_cmplt<mode>_quiet_nocc): New expander.\n\t(vec_cmpge<mode>_quiet_nocc): New pattern.\n\t(vec_cmple<mode>_quiet_nocc): New expander.\n\t(*vec_cmpeq<mode>_signaling_nocc): New pattern.\n\t(*vec_cmpgt<mode>_signaling_nocc): Likewise.\n\t(*vec_cmpgt<mode>_signaling_finite_nocc): Likewise.\n\t(*vec_cmpge<mode>_signaling_nocc): Likewise.\n\t(*vec_cmpge<mode>_signaling_finite_nocc): Likewise.\n\t(vec_cmpungt<mode>): New expander.\n\t(vec_cmpunge<mode>): Likewise.\n\t(vec_cmpuneq<mode>): Use quiet patterns.\n\t(vec_cmpltgt<mode>): Allow only on z14+.\n\t(vec_cmpordered<mode>): Use quiet patterns.\n\t(vec_cmpunordered<mode>): Likewise.\n\t(VEC_CMP_EXPAND): Add ungt and unge.\n\ngcc/testsuite/ChangeLog:\n\n2019-10-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Adjust\n\texpectations.\n\nFrom-SVN: r276871", "tree": {"sha": "ca9b590a55830fed9ac842a66314150a5e86b8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca9b590a55830fed9ac842a66314150a5e86b8ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a0cacaba651f428208832fdb8a26dbd12acc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a0cacaba651f428208832fdb8a26dbd12acc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a0cacaba651f428208832fdb8a26dbd12acc38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a0cacaba651f428208832fdb8a26dbd12acc38/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fcf52a6a2208a57e4542e1b830a7ac5cfa216a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fcf52a6a2208a57e4542e1b830a7ac5cfa216a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fcf52a6a2208a57e4542e1b830a7ac5cfa216a2"}], "stats": {"total": 366, "additions": 292, "deletions": 74}, "files": [{"sha": "f48f7f33c5eab624217a4e36e4ec1474237da502", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -1,3 +1,50 @@\n+2019-10-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/77918\n+\t* config/s390/2827.md: Add new opcodes.\n+\t* config/s390/2964.md: Likewise.\n+\t* config/s390/3906.md: Likewise.\n+\t* config/s390/8561.md: Likewise.\n+\t* config/s390/s390-builtins.def (s390_vfchesb): Use\n+\tthe new vec_cmpgev4sf_quiet_nocc.\n+\t(s390_vfchedb): Use the new vec_cmpgev2df_quiet_nocc.\n+\t(s390_vfchsb): Use the new vec_cmpgtv4sf_quiet_nocc.\n+\t(s390_vfchdb): Use the new vec_cmpgtv2df_quiet_nocc.\n+\t(vec_cmplev4sf): Use the new vec_cmplev4sf_quiet_nocc.\n+\t(vec_cmplev2df): Use the new vec_cmplev2df_quiet_nocc.\n+\t(vec_cmpltv4sf): Use the new vec_cmpltv4sf_quiet_nocc.\n+\t(vec_cmpltv2df): Use the new vec_cmpltv2df_quiet_nocc.\n+\t* config/s390/s390-modes.def (CCSFPS): New mode.\n+\t* config/s390/s390.c (s390_match_ccmode_set): Support CCSFPS.\n+\t(s390_select_ccmode): Return CCSFPS for LT, LE, GT, GE and LTGT.\n+\t(s390_branch_condition_mask): Reuse CCS for CCSFPS.\n+\t(s390_expand_vec_compare): Use non-signaling patterns where\n+\tnecessary.\n+\t(s390_reverse_condition): Support CCSFPS.\n+\t* config/s390/s390.md (*cmp<mode>_ccsfps): New pattern.\n+\t* config/s390/vector.md: (VFCMP_HW_OP): Remove.\n+\t(asm_fcmp_op): Likewise.\n+\t(*smaxv2df3_vx): Use pattern for quiet comparison.\n+\t(*sminv2df3_vx): Likewise.\n+\t(*vec_cmp<VFCMP_HW_OP:code><mode>_nocc): Remove.\n+\t(*vec_cmpeq<mode>_quiet_nocc): New pattern.\n+\t(vec_cmpgt<mode>_quiet_nocc): Likewise.\n+\t(vec_cmplt<mode>_quiet_nocc): New expander.\n+\t(vec_cmpge<mode>_quiet_nocc): New pattern.\n+\t(vec_cmple<mode>_quiet_nocc): New expander.\n+\t(*vec_cmpeq<mode>_signaling_nocc): New pattern.\n+\t(*vec_cmpgt<mode>_signaling_nocc): Likewise.\n+\t(*vec_cmpgt<mode>_signaling_finite_nocc): Likewise.\n+\t(*vec_cmpge<mode>_signaling_nocc): Likewise.\n+\t(*vec_cmpge<mode>_signaling_finite_nocc): Likewise.\n+\t(vec_cmpungt<mode>): New expander.\n+\t(vec_cmpunge<mode>): Likewise.\n+\t(vec_cmpuneq<mode>): Use quiet patterns.\n+\t(vec_cmpltgt<mode>): Allow only on z14+.\n+\t(vec_cmpordered<mode>): Use quiet patterns.\n+\t(vec_cmpunordered<mode>): Likewise.\n+\t(VEC_CMP_EXPAND): Add ungt and unge.\n+\n 2019-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gimple-streamer-out.c (output_gimple_stmt): Add explicit function"}, {"sha": "aafe8e27339744fb53deb267564091dae63daba0", "filename": "gcc/config/s390/2827.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F2827.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F2827.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2827.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -44,7 +44,7 @@\n \n (define_insn_reservation \"zEC12_normal_fp\" 8\n   (and (eq_attr \"cpu\" \"zEC12\")\n-       (eq_attr \"mnemonic\" \"lnebr,sdbr,sebr,clfxtr,adbr,aebr,celfbr,clfebr,lpebr,msebr,lndbr,clfdbr,cebr,maebr,ltebr,clfdtr,cdlgbr,cxlftr,lpdbr,cdfbr,lcebr,clfxbr,msdbr,cdbr,madbr,meebr,clgxbr,clgdtr,ledbr,cegbr,cdlftr,cdlgtr,mdbr,clgebr,ltdbr,cdlfbr,cdgbr,clgxtr,lcdbr,celgbr,clgdbr,ldebr,cefbr,fidtr,fixtr,madb,msdb,mseb,fiebra,fidbra,aeb,mdb,seb,cdb,tcdb,sdb,adb,tceb,maeb,ceb,meeb,ldeb\")) \"nothing\")\n+       (eq_attr \"mnemonic\" \"lnebr,sdbr,sebr,clfxtr,adbr,aebr,celfbr,clfebr,lpebr,msebr,lndbr,clfdbr,cebr,maebr,ltebr,clfdtr,cdlgbr,cxlftr,lpdbr,cdfbr,lcebr,clfxbr,msdbr,cdbr,madbr,meebr,clgxbr,clgdtr,ledbr,cegbr,cdlftr,cdlgtr,mdbr,clgebr,ltdbr,cdlfbr,cdgbr,clgxtr,lcdbr,celgbr,clgdbr,ldebr,cefbr,fidtr,fixtr,madb,msdb,mseb,fiebra,fidbra,aeb,mdb,seb,cdb,tcdb,sdb,adb,tceb,maeb,ceb,meeb,ldeb,keb,kebr,kdb,kdbr\")) \"nothing\")\n \n (define_insn_reservation \"zEC12_cgdbr\" 2\n   (and (eq_attr \"cpu\" \"zEC12\")\n@@ -426,6 +426,10 @@\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"cxbr\")) \"nothing\")\n \n+(define_insn_reservation \"zEC12_kxbr\" 18\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"kxbr\")) \"nothing\")\n+\n (define_insn_reservation \"zEC12_ddbr\" 36\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"ddbr\")) \"nothing\")\n@@ -578,10 +582,18 @@\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"cdtr\")) \"nothing\")\n \n+(define_insn_reservation \"zEC12_kdtr\" 11\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"kdtr\")) \"nothing\")\n+\n (define_insn_reservation \"zEC12_cxtr\" 14\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"cxtr\")) \"nothing\")\n \n+(define_insn_reservation \"zEC12_kxtr\" 14\n+  (and (eq_attr \"cpu\" \"zEC12\")\n+       (eq_attr \"mnemonic\" \"kxtr\")) \"nothing\")\n+\n (define_insn_reservation \"zEC12_slbg\" 3\n   (and (eq_attr \"cpu\" \"zEC12\")\n        (eq_attr \"mnemonic\" \"slbg\")) \"nothing\")"}, {"sha": "4396e3ba1c03438b5023c79dcb287311aa104506", "filename": "gcc/config/s390/2964.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F2964.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F2964.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2964.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -69,7 +69,7 @@ ng,ni,niy,ntstg,ny,o,og,oi,oiy,oy,s,sar,sdb,seb,sfpc,sg,sgf,sh,shy,sl,\\\n slb,slbg,slg,slgf,sly,sqdb,sqeb,st,stc,stcy,std,stdy,ste,stey,stg,stgrl,\\\n sth,sthrl,sthy,stoc,stocg,strl,strv,strvg,strvh,sty,sy,tabort,tm,tmy,vl,\\\n vlbb,vleb,vlef,vleg,vleh,vll,vllezb,vllezf,vllezg,vllezh,vllezlf,vlrepb,\\\n-vlrepf,vlrepg,vlreph,vst,vstl,x,xg,xi,xiy,xy\")\n+vlrepf,vlrepg,vlreph,vst,vstl,x,xg,xi,xiy,xy,kdb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z13_unit_vfu\" \"\"\n@@ -109,7 +109,8 @@ vuplhh,vuplhw,vupllb,vupllf,vupllh,vx,vzero,wcdgb,wcdlgb,wcgdb,wclgdb,wfadb,\\\n wfasb,wfaxb,wfcdb,wfcedb,wfcesb,wfcexbs,wfchdb,wfchedb,wfchesb,wfchexb,\\\n wfchexbs,wfchsb,wfchxb,wfchxbs,wfcsb,wfisb,wfixb,wflcdb,wflcsb,wflcxb,wflld,\\\n wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmadb,wfmasb,wfmaxb,wfmdb,wfmsb,\\\n-wfmsdb,wfmssb,wfmsxb,wfmxb,wfsdb,wfssb,wfsxb,wldeb,wledb\")\n+wfmsdb,wfmssb,wfmsxb,wfmxb,wfsdb,wfssb,wfsxb,wldeb,wledb,kebr,kdb,kdbr,kxbr,\\\n+kdtr,kxtr,wfkdb,wfksb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z13_cracked\" \"\"\n@@ -131,7 +132,7 @@ stmg,stmy,tbegin,tbeginc\")\n cxtr,dlgr,dlr,dr,dsgfr,dsgr,dxbr,dxtr,fixbr,fixbra,fixtr,flogr,lcxbr,lnxbr,\\\n lpxbr,ltxbr,ltxtr,lxdb,lxdbr,lxdtr,lxeb,lxebr,m,madb,maeb,maebr,mfy,ml,mlg,\\\n mlgr,mlr,mr,msdb,mseb,msebr,mvc,mxbr,mxtr,oc,sfpc,slb,slbg,slbgr,slbr,\\\n-sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc\")\n+sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc,kxbr,kxtr\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z13_endgroup\" \"\"\n@@ -198,7 +199,7 @@ vchlhs,vfcedbs,vfcesbs,vfchdbs,vfchedbs,vfchesbs,vfchsbs,vfeeb,vfeef,vfeeh,\\\n vfeneb,vfenef,vfeneh,vfenezb,vfenezf,vfenezh,vftcidb,vftcisb,vistrb,vistrf,\\\n vistrh,vllezb,vllezf,vllezg,vllezh,vllezlf,vlrepb,vlrepf,vlrepg,vlreph,vlvgp,\\\n vpklsfs,vpklsgs,vpklshs,vpksfs,vpksgs,vpkshs,vslb,vsrab,vsrlb,wfcdb,wfcexbs,\\\n-wfchexbs,wfchxbs,wfcsb\")) \"nothing\")\n+wfchexbs,wfchxbs,wfcsb,kebr,kdb,kdbr,wfkdb,wfksb\")) \"nothing\")\n \n (define_insn_reservation \"z13_3\" 3\n   (and (eq_attr \"cpu\" \"z13\")\n@@ -232,7 +233,7 @@ wfmdb,wfmsb,wfmsdb,wfmssb,wfmsxb,wfmxb,wfsdb,wfssb,wfsxb,wldeb,wledb\")) \"nothing\n   (and (eq_attr \"cpu\" \"z13\")\n (eq_attr \"mnemonic\" \"adtr,cdtr,fidtr,ldetr,msg,msgr,sdtr,tdcdt,tdcet,\\\n vcdgb,vcdlgb,vcgdb,vclgdb,vfadb,vfasb,vfidb,vfisb,vfmadb,vfmasb,vfmdb,vfmsb,\\\n-vfmsdb,vfmssb,vfsdb,vfssb,vldeb,vledb\")) \"nothing\")\n+vfmsdb,vfmssb,vfsdb,vfssb,vldeb,vledb,kdtr\")) \"nothing\")\n \n (define_insn_reservation \"z13_8\" 8\n   (and (eq_attr \"cpu\" \"z13\")\n@@ -254,7 +255,7 @@ celgbr,flogr,m,madb,maeb,maebr,mfy,ml,mlr,mr,msdb,mseb,msebr\")) \"nothing\")\n (define_insn_reservation \"z13_12\" 12\n   (and (eq_attr \"cpu\" \"z13\")\n (eq_attr \"mnemonic\" \"cfdbr,cfebr,cgdbr,cgebr,clfdbr,clfebr,clgdbr,\\\n-clgebr,cxbr,cxtr,mlg,mlgr,tcxb,tdcxt\")) \"nothing\")\n+clgebr,cxbr,cxtr,mlg,mlgr,tcxb,tdcxt,kxbr,kxtr\")) \"nothing\")\n \n (define_insn_reservation \"z13_13\" 13\n   (and (eq_attr \"cpu\" \"z13\")"}, {"sha": "1212d8b61f1ccddb042da8cc89982d0abc3ce8dd", "filename": "gcc/config/s390/3906.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F3906.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F3906.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F3906.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -71,7 +71,7 @@ sgh,sh,shy,sl,slb,slbg,slg,slgf,sly,sqdb,sqeb,st,stc,stcy,std,stdy,ste,\\\n stey,stg,stgrl,sth,sthrl,sthy,stoc,stocg,strl,strv,strvg,strvh,sty,sy,\\\n tabort,tm,tmy,vl,vlbb,vleb,vlef,vleg,vleh,vll,vllezb,vllezf,vllezg,vllezh,\\\n vllezlf,vlrepb,vlrepf,vlrepg,vlreph,vlrl,vlrlr,vst,vstl,vstrl,vstrlr,x,xg,xi,\\\n-xiy,xy\")\n+xiy,xy,kdb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z14_unit_vfu\" \"\"\n@@ -113,7 +113,8 @@ wfadb,wfasb,wfaxb,wfcdb,wfcedb,wfcesb,wfcexbs,wfchdb,wfchedb,wfchesb,\\\n wfchexb,wfchexbs,wfchsb,wfchxb,wfchxbs,wfcsb,wfisb,wfixb,wflcdb,wflcsb,wflcxb,\\\n wflld,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmadb,wfmasb,wfmaxb,\\\n wfmaxxb,wfmdb,wfminxb,wfmsb,wfmsdb,wfmssb,wfmsxb,wfmxb,wfnmaxb,wfnmsxb,wfsdb,\\\n-wfssb,wfsxb,wldeb,wledb\")\n+wfssb,wfsxb,wldeb,wledb,kebr,kdb,kdbr,kxbr,kdtr,kxtr,wfkdb,wfksb,vfkesb,\\\n+vfkedb,vfkhsb,vfkhdb,wfkhxb,vfkhesb,vfkhedb,wfkhexb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z14_cracked\" \"\"\n@@ -135,7 +136,7 @@ stmg,stmy,tbegin,tbeginc\")\n cxtr,dlgr,dlr,dr,dsgfr,dsgr,dxbr,dxtr,fixbr,fixbra,fixtr,flogr,lcxbr,lnxbr,\\\n lpxbr,ltxbr,ltxtr,lxdb,lxdbr,lxdtr,lxeb,lxebr,m,madb,maeb,maebr,mfy,mg,mgrk,\\\n ml,mlg,mlgr,mlr,mr,msdb,mseb,msebr,mvc,mxbr,mxtr,oc,ppa,sfpc,slb,slbg,\\\n-slbgr,slbr,sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc\")\n+slbgr,slbr,sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc,kxbr,kxtr\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z14_endgroup\" \"\"\n@@ -192,7 +193,8 @@ vrepig,vrepih,vsb,vsbiq,vscbib,vscbif,vscbig,vscbih,vscbiq,vsegb,vsegf,vsegh,\\\n vsel,vsf,vsg,vsh,vsl,vslb,vsldb,vsq,vsra,vsrab,vsrl,vsrlb,vuphb,vuphf,\\\n vuphh,vuplb,vuplf,vuplhb,vuplhf,vuplhh,vuplhw,vupllb,vupllf,vupllh,vx,vzero,\\\n wfcedb,wfcesb,wfchdb,wfchedb,wfchesb,wfchexb,wfchsb,wfchxb,wflcdb,wflcsb,\\\n-wflcxb,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmaxxb,wfminxb,xi,xiy\")) \"nothing\")\n+wflcxb,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmaxxb,wfminxb,xi,xiy,\\\n+vfkesb,vfkedb,vfkhsb,vfkhdb,wfkhxb,vfkhesb,vfkhedb,wfkhexb\")) \"nothing\")\n \n (define_insn_reservation \"z14_2\" 2\n   (and (eq_attr \"cpu\" \"z14\")\n@@ -204,7 +206,7 @@ vchlhs,vfcedbs,vfcesbs,vfchdbs,vfchedbs,vfchesbs,vfchsbs,vfeeb,vfeef,vfeeh,\\\n vfeneb,vfenef,vfeneh,vfenezb,vfenezf,vfenezh,vftcidb,vftcisb,vistrb,vistrf,\\\n vistrh,vlgvf,vlgvg,vlgvh,vllezb,vllezf,vllezg,vllezh,vllezlf,vlrepb,vlrepf,\\\n vlrepg,vlreph,vlrl,vlvgp,vpklsfs,vpklsgs,vpklshs,vpksfs,vpksgs,vpkshs,wfcdb,\\\n-wfcexbs,wfchexbs,wfchxbs,wfcsb\")) \"nothing\")\n+wfcexbs,wfchexbs,wfchxbs,wfcsb,kebr,kdb,kdbr,wfkdb,wfksb\")) \"nothing\")\n \n (define_insn_reservation \"z14_3\" 3\n   (and (eq_attr \"cpu\" \"z14\")\n@@ -238,7 +240,8 @@ wfmasb,wfmdb,wfmsb,wfmsdb,wfmssb,wfsdb,wfssb,wldeb,wledb\")) \"nothing\")\n (define_insn_reservation \"z14_7\" 7\n   (and (eq_attr \"cpu\" \"z14\")\n (eq_attr \"mnemonic\" \"adtr,cdtr,fidtr,ldetr,msgrkc,sdtr,tdcdt,tdcet,\\\n-vfasb,vfisb,vfmasb,vfmsb,vfmssb,vfnmssb,vfssb,vgef,vgeg,wflld\")) \"nothing\")\n+vfasb,vfisb,vfmasb,vfmsb,vfmssb,vfnmssb,vfssb,vgef,vgeg,wflld,kdtr\"))\n+\"nothing\")\n \n (define_insn_reservation \"z14_8\" 8\n   (and (eq_attr \"cpu\" \"z14\")\n@@ -261,7 +264,7 @@ celgbr,madb,maeb,maebr,msdb,mseb,msebr,vscef,vsceg\")) \"nothing\")\n (define_insn_reservation \"z14_12\" 12\n   (and (eq_attr \"cpu\" \"z14\")\n (eq_attr \"mnemonic\" \"cfdbr,cfebr,cgdbr,cgebr,clfdbr,clfebr,clgdbr,\\\n-clgebr,cxbr,cxtr,tcxb,tdcxt\")) \"nothing\")\n+clgebr,cxbr,cxtr,tcxb,tdcxt,kxbr,kxtr\")) \"nothing\")\n \n (define_insn_reservation \"z14_13\" 13\n   (and (eq_attr \"cpu\" \"z14\")"}, {"sha": "6bb0386e780e053d48a9b4356c97f2def47146ff", "filename": "gcc/config/s390/8561.md", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F8561.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2F8561.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F8561.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -70,7 +70,7 @@ sar,sdb,seb,sfpc,sg,sgf,sgh,sh,shy,sl,slb,slbg,slg,slgf,sly,sqdb,sqeb,st,\\\n stc,stcy,std,stdy,ste,stey,stg,stgrl,sth,sthrl,sthy,stoc,stocg,strl,strv,\\\n strvg,strvh,sty,sy,tabort,tm,tmy,vl,vlbb,vleb,vlef,vleg,vleh,vll,vllezb,\\\n vllezf,vllezg,vllezh,vllezlf,vlrepb,vlrepf,vlrepg,vlreph,vlrl,vlrlr,vst,\\\n-vstef,vsteg,vstl,vstrl,vstrlr,x,xg,xi,xiy,xy\")\n+vstef,vsteg,vstl,vstrl,vstrlr,x,xg,xi,xiy,xy,keb,kdb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z15_unit_vfu\" \"\"\n@@ -112,7 +112,9 @@ vupllf,vupllh,vx,vzero,wfadb,wfasb,wfaxb,wfcdb,wfcedb,wfcesb,wfcexb,wfcexbs,\\\n wfchdb,wfchedb,wfchesb,wfchexb,wfchexbs,wfchsb,wfchxb,wfchxbs,wfcsb,wfidb,\\\n wfisb,wfixb,wflcdb,wflcsb,wflcxb,wflld,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,\\\n wflpxb,wfmadb,wfmasb,wfmaxb,wfmaxxb,wfmdb,wfminxb,wfmsb,wfmsdb,wfmssb,wfmsxb,\\\n-wfmxb,wfnmaxb,wfnmsxb,wfsdb,wfssb,wfsxb,wldeb,wledb\")\n+wfmxb,wfnmaxb,wfnmsxb,wfsdb,wfssb,wfsxb,wldeb,wledb,keb,kebr,kdb,kdbr,kxbr,\\\n+kdtr,kxtr,wfkdb,wfksb,vfkesb,vfkedb,wfkexb,vfkhsb,vfkhdb,wfkhxb,vfkhesb,\\\n+vfkhedb,wfkhexb\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z15_cracked\" \"\"\n@@ -134,7 +136,7 @@ stam,stm,stmg,stmy,tbegin,tbeginc\")\n cxtr,dlgr,dlr,dr,dsgfr,dsgr,dxbr,dxtr,fixbr,fixbra,fixtr,flogr,lcxbr,lnxbr,\\\n lpxbr,ltxbr,ltxtr,lxdb,lxdbr,lxdtr,lxeb,lxebr,m,madb,maeb,maebr,mfy,mg,mgrk,\\\n ml,mlg,mlgr,mlr,mr,msdb,mseb,msebr,mvc,mxbr,mxtr,nc,oc,ppa,sfpc,slb,slbg,\\\n-slbgr,slbr,sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc\")\n+slbgr,slbr,sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc,kxbr,kxtr\")\n  (const_int 1)] (const_int 0)))\n \n (define_attr \"z15_endgroup\" \"\"\n@@ -194,7 +196,8 @@ vsel,vsf,vsg,vsh,vsl,vslb,vsldb,vsq,vsra,vsrab,vsrl,vsrlb,vuphb,vuphf,\\\n vuphh,vuplb,vuplf,vuplhb,vuplhf,vuplhh,vuplhw,vupllb,vupllf,vupllh,vx,vzero,\\\n wfcedb,wfcesb,wfcexb,wfchdb,wfchedb,wfchesb,wfchexb,wfchsb,wfchxb,wflcdb,\\\n wflcsb,wflcxb,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmaxxb,wfminxb,xi,\\\n-xiy\")) \"nothing\")\n+xiy,vfkesb,vfkedb,wfkexb,vfkhsb,vfkhdb,wfkhxb,vfkhesb,vfkhedb,wfkhexb\"))\n+\"nothing\")\n \n (define_insn_reservation \"z15_2\" 2\n   (and (eq_attr \"cpu\" \"z15\")\n@@ -206,7 +209,8 @@ vchlhs,vfcedbs,vfcesbs,vfchdbs,vfchedbs,vfchesbs,vfchsbs,vfeeb,vfeef,vfeeh,\\\n vfeneb,vfenef,vfeneh,vfenezb,vfenezf,vfenezh,vftcidb,vftcisb,vistrb,vistrf,\\\n vistrh,vlgvb,vlgvf,vlgvg,vlgvh,vllezb,vllezf,vllezg,vllezh,vllezlf,vlrepb,\\\n vlrepf,vlrepg,vlreph,vlrl,vlvgp,vpklsfs,vpklsgs,vpklshs,vpksfs,vpksgs,vpkshs,\\\n-wfcdb,wfcexbs,wfchexbs,wfchxbs,wfcsb\")) \"nothing\")\n+wfcdb,wfcexbs,wfchexbs,wfchxbs,wfcsb,keb,kebr,kdb,kdbr,wfkdb,wfksb\"))\n+\"nothing\")\n \n (define_insn_reservation \"z15_3\" 3\n   (and (eq_attr \"cpu\" \"z15\")\n@@ -240,7 +244,7 @@ wfmasb,wfmdb,wfmsb,wfmsdb,wfmssb,wfsdb,wfssb,wldeb,wledb\")) \"nothing\")\n (define_insn_reservation \"z15_7\" 7\n   (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"adtr,cdtr,fidtr,ldetr,ltdtr,msgrkc,sdtr,tdcdt,\\\n-tdcet,vgef,vgeg\")) \"nothing\")\n+tdcet,vgef,vgeg,kdtr\")) \"nothing\")\n \n (define_insn_reservation \"z15_8\" 8\n   (and (eq_attr \"cpu\" \"z15\")\n@@ -263,7 +267,8 @@ clgebr,mg,mgrk,mlg,mlgr\")) \"nothing\")\n \n (define_insn_reservation \"z15_12\" 12\n   (and (eq_attr \"cpu\" \"z15\")\n-(eq_attr \"mnemonic\" \"cxbr,cxftr,cxlftr,cxtr,tcxb,tdcxt\")) \"nothing\")\n+(eq_attr \"mnemonic\" \"cxbr,cxftr,cxlftr,cxtr,tcxb,tdcxt,kxbr,kxtr\"))\n+\"nothing\")\n \n (define_insn_reservation \"z15_13\" 13\n   (and (eq_attr \"cpu\" \"z15\")"}, {"sha": "a6519dae3a0ed1bfc3c5235f6521012615853acc", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -1495,8 +1495,8 @@ B_DEF      (vec_cmpgev4si,              vec_cmpgev4si,      0,\n B_DEF      (vec_cmpgeuv4si,             vec_cmpgeuv4si,     0,                  B_INT | B_VX,       0,                  BT_FN_V4SI_UV4SI_UV4SI)\n B_DEF      (vec_cmpgev2di,              vec_cmpgev2di,      0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n B_DEF      (vec_cmpgeuv2di,             vec_cmpgeuv2di,     0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n-B_DEF      (s390_vfchesb,               vec_cmpgev4sf,      0,                  B_VXE,              0,                  BT_FN_V4SI_V4SF_V4SF)\n-B_DEF      (s390_vfchedb,               vec_cmpgev2df,      0,                  B_VX,               0,                  BT_FN_V2DI_V2DF_V2DF)\n+B_DEF      (s390_vfchesb,               vec_cmpgev4sf_quiet_nocc,0,             B_VXE,              0,                  BT_FN_V4SI_V4SF_V4SF)\n+B_DEF      (s390_vfchedb,               vec_cmpgev2df_quiet_nocc,0,             B_VX,               0,                  BT_FN_V2DI_V2DF_V2DF)\n \n OB_DEF     (s390_vec_cmpgt,             s390_vec_cmpgt_s8,  s390_vec_cmpgt_dbl, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_cmpgt_s8,          s390_vchb,          0,                  0,                  BT_OV_BV16QI_V16QI_V16QI)\n@@ -1518,8 +1518,8 @@ B_DEF      (s390_vchf,                  vec_cmpgtv4si,      0,\n B_DEF      (s390_vchlf,                 vec_cmpgtuv4si,     0,                  B_VX,               0,                  BT_FN_V4SI_UV4SI_UV4SI)\n B_DEF      (s390_vchg,                  vec_cmpgtv2di,      0,                  B_VX,               0,                  BT_FN_V2DI_V2DI_V2DI)\n B_DEF      (s390_vchlg,                 vec_cmpgtuv2di,     0,                  B_VX,               0,                  BT_FN_V2DI_UV2DI_UV2DI)\n-B_DEF      (s390_vfchsb,                vec_cmpgtv4sf,      0,                  B_VXE,              0,                  BT_FN_V4SI_V4SF_V4SF)\n-B_DEF      (s390_vfchdb,                vec_cmpgtv2df,      0,                  B_VX,               0,                  BT_FN_V2DI_V2DF_V2DF)\n+B_DEF      (s390_vfchsb,                vec_cmpgtv4sf_quiet_nocc,0,             B_VXE,              0,                  BT_FN_V4SI_V4SF_V4SF)\n+B_DEF      (s390_vfchdb,                vec_cmpgtv2df_quiet_nocc,0,             B_VX,               0,                  BT_FN_V2DI_V2DF_V2DF)\n \n OB_DEF     (s390_vec_cmple,             s390_vec_cmple_s8,  s390_vec_cmple_dbl, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_cmple_s8,          vec_cmplev16qi,     0,                  0,                  BT_OV_BV16QI_V16QI_V16QI)\n@@ -1541,8 +1541,8 @@ B_DEF      (vec_cmplev4si,              vec_cmplev4si,      0,\n B_DEF      (vec_cmpleuv4si,             vec_cmpleuv4si,     0,                  B_INT | B_VX,       0,                  BT_FN_V4SI_UV4SI_UV4SI)\n B_DEF      (vec_cmplev2di,              vec_cmplev2di,      0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n B_DEF      (vec_cmpleuv2di,             vec_cmpleuv2di,     0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n-B_DEF      (vec_cmplev4sf,              vec_cmplev4sf,      0,                  B_INT | B_VXE,      0,                  BT_FN_V4SI_V4SF_V4SF)\n-B_DEF      (vec_cmplev2df,              vec_cmplev2df,      0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_V2DF_V2DF)\n+B_DEF      (vec_cmplev4sf,              vec_cmplev4sf_quiet_nocc,0,             B_INT | B_VXE,      0,                  BT_FN_V4SI_V4SF_V4SF)\n+B_DEF      (vec_cmplev2df,              vec_cmplev2df_quiet_nocc,0,             B_INT | B_VX,       0,                  BT_FN_V2DI_V2DF_V2DF)\n \n OB_DEF     (s390_vec_cmplt,             s390_vec_cmplt_s8,  s390_vec_cmplt_dbl, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_cmplt_s8,          vec_cmpltv16qi,     0,                  0,                  BT_OV_BV16QI_V16QI_V16QI)\n@@ -1564,8 +1564,8 @@ B_DEF      (vec_cmpltv4si,              vec_cmpltv4si,      0,\n B_DEF      (vec_cmpltuv4si,             vec_cmpltuv4si,     0,                  B_INT | B_VX,       0,                  BT_FN_V4SI_UV4SI_UV4SI)\n B_DEF      (vec_cmpltv2di,              vec_cmpltv2di,      0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n B_DEF      (vec_cmpltuv2di,             vec_cmpltuv2di,     0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_UV2DI_UV2DI)\n-B_DEF      (vec_cmpltv4sf,              vec_cmpltv4sf,      0,                  B_INT | B_VXE,      0,                  BT_FN_V4SI_V4SF_V4SF)\n-B_DEF      (vec_cmpltv2df,              vec_cmpltv2df,      0,                  B_INT | B_VX,       0,                  BT_FN_V2DI_V2DF_V2DF)\n+B_DEF      (vec_cmpltv4sf,              vec_cmpltv4sf_quiet_nocc,0,             B_INT | B_VXE,      0,                  BT_FN_V4SI_V4SF_V4SF)\n+B_DEF      (vec_cmpltv2df,              vec_cmpltv2df_quiet_nocc,0,             B_INT | B_VX,       0,                  BT_FN_V2DI_V2DF_V2DF)\n \n OB_DEF     (s390_vec_cntlz,             s390_vec_cntlz_s8,  s390_vec_cntlz_u64, B_VX,               BT_FN_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_cntlz_s8,          s390_vclzb,         0,                  0,                  BT_OV_UV16QI_V16QI)"}, {"sha": "a5e8b94f7c3872db47536ce964ece7574065f4f1", "filename": "gcc/config/s390/s390-modes.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-modes.def?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -52,6 +52,8 @@ CCS:  EQ          LT           GT          UNORDERED  (LTGFR, LTGR, LTR, ICM/Y,\n                                                        ADB/R, AEB/R, SDB/R, SEB/R,\n                                                        SRAG, SRA, SRDA)\n CCSR: EQ          GT           LT          UNORDERED  (CGF/R, CH/Y)\n+CCSFPS: EQ        LT           GT          UNORDERED  (KEB/R, KDB/R, KXBR, KDTR,\n+\t\t\t\t\t\t       KXTR, WFK)\n \n Condition codes resulting from add with overflow\n \n@@ -140,6 +142,11 @@ around. The following both modes can be considered as CCS and CCU modes with\n exchanged operands.\n \n \n+CCSFPS\n+\n+This mode is used for signaling rtxes: LT, LE, GT, GE and LTGT.\n+\n+\n CCL1, CCL2\n \n These modes represent the result of overflow checks.\n@@ -226,6 +233,7 @@ CC_MODE (CCU);\n CC_MODE (CCUR);\n CC_MODE (CCS);\n CC_MODE (CCSR);\n+CC_MODE (CCSFPS);\n CC_MODE (CCT);\n CC_MODE (CCT1);\n CC_MODE (CCT2);"}, {"sha": "9fed7d3b99f444f40e87a4876b3d8d0327be1d62", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -1382,6 +1382,7 @@ s390_match_ccmode_set (rtx set, machine_mode req_mode)\n     case E_CCZ1mode:\n     case E_CCSmode:\n     case E_CCSRmode:\n+    case E_CCSFPSmode:\n     case E_CCUmode:\n     case E_CCURmode:\n     case E_CCOmode:\n@@ -1565,6 +1566,12 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n \t    else\n \t      return CCAPmode;\n \t  }\n+\n+\t/* Fall through.  */\n+      case LTGT:\n+\tif (HONOR_NANS (op0) || HONOR_NANS (op1))\n+\t  return CCSFPSmode;\n+\n \t/* Fall through.  */\n       case UNORDERED:\n       case ORDERED:\n@@ -1573,7 +1580,6 @@ s390_select_ccmode (enum rtx_code code, rtx op0, rtx op1)\n       case UNLT:\n       case UNGE:\n       case UNGT:\n-      case LTGT:\n \tif ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op0) == ZERO_EXTEND)\n \t    && GET_CODE (op1) != CONST_INT)\n \t  return CCSRmode;\n@@ -2088,6 +2094,7 @@ s390_branch_condition_mask (rtx code)\n       break;\n \n     case E_CCSmode:\n+    case E_CCSFPSmode:\n       switch (GET_CODE (code))\n \t{\n \tcase EQ:\treturn CC0;\n@@ -6510,18 +6517,23 @@ s390_expand_vec_compare (rtx target, enum rtx_code cond,\n \t{\n \t  /* NE a != b -> !(a == b) */\n \tcase NE:   cond = EQ; neg_p = true;                break;\n-\t  /* UNGT a u> b -> !(b >= a) */\n-\tcase UNGT: cond = GE; neg_p = true; swap_p = true; break;\n-\t  /* UNGE a u>= b -> !(b > a) */\n-\tcase UNGE: cond = GT; neg_p = true; swap_p = true; break;\n-\t  /* LE: a <= b -> b >= a */\n+\tcase UNGT:\n+\t  emit_insn (gen_vec_cmpungt (target, cmp_op1, cmp_op2));\n+\t  return;\n+\tcase UNGE:\n+\t  emit_insn (gen_vec_cmpunge (target, cmp_op1, cmp_op2));\n+\t  return;\n \tcase LE:   cond = GE;               swap_p = true; break;\n-\t  /* UNLE: a u<= b -> !(a > b) */\n-\tcase UNLE: cond = GT; neg_p = true;                break;\n+\t  /* UNLE: (a u<= b) -> (b u>= a).  */\n+\tcase UNLE:\n+\t  emit_insn (gen_vec_cmpunge (target, cmp_op2, cmp_op1));\n+\t  return;\n \t  /* LT: a < b -> b > a */\n \tcase LT:   cond = GT;               swap_p = true; break;\n-\t  /* UNLT: a u< b -> !(a >= b) */\n-\tcase UNLT: cond = GE; neg_p = true;                break;\n+\t  /* UNLT: (a u< b) -> (b u> a).  */\n+\tcase UNLT:\n+\t  emit_insn (gen_vec_cmpungt (target, cmp_op2, cmp_op1));\n+\t  return;\n \tcase UNEQ:\n \t  emit_insn (gen_vec_cmpuneq (target, cmp_op1, cmp_op2));\n \t  return;\n@@ -6684,7 +6696,7 @@ s390_reverse_condition (machine_mode mode, enum rtx_code code)\n {\n   /* Reversal of FP compares takes care -- an ordered compare\n      becomes an unordered compare and vice versa.  */\n-  if (mode == CCVFALLmode || mode == CCVFANYmode)\n+  if (mode == CCVFALLmode || mode == CCVFANYmode || mode == CCSFPSmode)\n     return reverse_condition_maybe_unordered (code);\n   else if (mode == CCVIALLmode || mode == CCVIANYmode)\n     return reverse_condition (code);"}, {"sha": "4f7bde6616b241c3df695f522390b327c6172ec5", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -1423,6 +1423,20 @@\n    (set_attr \"cpu_facility\" \"*,*,vx,vxe\")\n    (set_attr \"enabled\" \"*,<DSF>,<DF>,<SF>\")])\n \n+(define_insn \"*cmp<mode>_ccsfps\"\n+  [(set (reg CC_REGNUM)\n+\t(compare (match_operand:FP 0 \"register_operand\" \"f,f,v,v\")\n+\t\t (match_operand:FP 1 \"general_operand\"  \"f,R,v,v\")))]\n+  \"s390_match_ccmode (insn, CCSFPSmode) && TARGET_HARD_FLOAT\"\n+  \"@\n+   k<xde><bt>r\\t%0,%1\n+   k<xde>b\\t%0,%1\n+   wfkdb\\t%0,%1\n+   wfksb\\t%0,%1\"\n+  [(set_attr \"op_type\" \"RRE,RXE,VRR,VRR\")\n+   (set_attr \"cpu_facility\" \"*,*,vx,vxe\")\n+   (set_attr \"enabled\" \"*,<DSF>,<DF>,<SF>\")])\n+\n ; Compare and Branch instructions\n \n ; cij, cgij, crj, cgrj, cfi, cgfi, cr, cgr"}, {"sha": "d40e310f9e79d046bc82e5f019be15b6fa4e2e22", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 141, "deletions": 30, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -168,10 +168,6 @@\n (define_mode_attr vec_halfnumelts\n   [(V4SF \"V2SF\") (V4SI \"V2SI\")])\n \n-; The comparisons not setting CC iterate over the rtx code.\n-(define_code_iterator VFCMP_HW_OP [eq gt ge])\n-(define_code_attr asm_fcmp_op [(eq \"e\") (gt \"h\") (ge \"he\")])\n-\n \n \n ; Comparison operators on int and fp compares which are directly\n@@ -1377,7 +1373,8 @@\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 3)\n-\t(gt:V2DI (match_dup 1) (match_dup 2)))\n+\t(not:V2DI\n+\t (unge:V2DI (match_dup 2) (match_dup 1))))\n    (set (match_dup 0)\n \t(if_then_else:V2DF\n \t (eq (match_dup 3) (match_dup 4))\n@@ -1412,7 +1409,8 @@\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 3)\n-\t(gt:V2DI (match_dup 1) (match_dup 2)))\n+\t(not:V2DI\n+\t (unge:V2DI (match_dup 2) (match_dup 1))))\n    (set (match_dup 0)\n \t(if_then_else:V2DF\n \t (eq (match_dup 3) (match_dup 4))\n@@ -1466,27 +1464,134 @@\n ;; Floating point compares\n ;;\n \n-; EQ, GT, GE\n-; vfcesb, vfcedb, wfcexb, vfchsb, vfchdb, wfchxb, vfchesb, vfchedb, wfchexb\n-(define_insn \"*vec_cmp<VFCMP_HW_OP:code><mode>_nocc\"\n-  [(set (match_operand:<tointvec>                  0 \"register_operand\" \"=v\")\n-\t(VFCMP_HW_OP:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n-\t\t\t     (match_operand:VFT 2 \"register_operand\"  \"v\")))]\n-   \"TARGET_VX\"\n-   \"<vw>fc<VFCMP_HW_OP:asm_fcmp_op><sdx>b\\t%v0,%v1,%v2\"\n+; vfcesb, vfcedb, wfcexb: non-signaling \"==\" comparison (a == b)\n+(define_insn \"*vec_cmpeq<mode>_quiet_nocc\"\n+  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n+\t(eq:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n+  \"TARGET_VX\"\n+  \"<vw>fce<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vfchsb, vfchdb, wfchxb: non-signaling > comparison (!(b u>= a))\n+(define_insn \"vec_cmpgt<mode>_quiet_nocc\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\"\n+  \"<vw>fch<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_expand \"vec_cmplt<mode>_quiet_nocc\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\")\n+\n+; vfchesb, vfchedb, wfchexb: non-signaling >= comparison (!(a u< b))\n+(define_insn \"vec_cmpge<mode>_quiet_nocc\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unlt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\"\n+  \"<vw>fche<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_expand \"vec_cmple<mode>_quiet_nocc\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unlt:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))]\n+  \"TARGET_VX\")\n+\n+; vfkesb, vfkedb, wfkexb: signaling == comparison ((a >= b) & (b >= a))\n+(define_insn \"*vec_cmpeq<mode>_signaling_nocc\"\n+  [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n+\t(and:<tointvec>\n+\t (ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t\t(match_operand:VFT 2 \"register_operand\" \"v\"))\n+\t (ge:<tointvec> (match_dup         2)\n+\t\t\t(match_dup         1))))]\n+  \"TARGET_VXE\"\n+  \"<vw>fke<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vfkhsb, vfkhdb, wfkhxb: signaling > comparison (a > b)\n+(define_insn \"*vec_cmpgt<mode>_signaling_nocc\"\n+  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n+\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n+  \"TARGET_VXE\"\n+  \"<vw>fkh<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vec_cmpgt<mode>_signaling_finite_nocc\"\n+  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n+\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n+  \"TARGET_VX && !TARGET_VXE && flag_finite_math_only\"\n+  \"<vw>fch<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+; vfkhesb, vfkhedb, wfkhexb: signaling >= comparison (a >= b)\n+(define_insn \"*vec_cmpge<mode>_signaling_nocc\"\n+  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n+\t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n+  \"TARGET_VXE\"\n+  \"<vw>fkhe<sdx>b\\t%v0,%v1,%v2\"\n+  [(set_attr \"op_type\" \"VRR\")])\n+\n+(define_insn \"*vec_cmpge<mode>_signaling_finite_nocc\"\n+  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n+\t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:VFT 2 \"register_operand\" \"v\")))]\n+  \"TARGET_VX && !TARGET_VXE && flag_finite_math_only\"\n+  \"<vw>fche<sdx>b\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; Expanders for not directly supported comparisons\n+; Signaling comparisons must be expressed via signaling rtxes only,\n+; and quiet comparisons must be expressed via quiet rtxes only.\n+\n+; UNGT a u> b -> !!(b u< a)\n+(define_expand \"vec_cmpungt<mode>\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unlt:<tointvec> (match_operand:VFT 2 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 1 \"register_operand\" \"v\"))))\n+   (set (match_dup                           0)\n+\t(not:<tointvec> (match_dup           0)))]\n+  \"TARGET_VX\")\n \n-; UNEQ a u== b -> !(a > b | b > a)\n+; UNGE a u>= b -> !!(a u>= b)\n+(define_expand \"vec_cmpunge<mode>\"\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VFT 2 \"register_operand\" \"v\"))))\n+   (set (match_dup                           0)\n+\t(not:<tointvec> (match_dup           0)))]\n+  \"TARGET_VX\")\n+\n+; UNEQ a u== b -> !(!(a u>= b) | !(b u>= a))\n (define_expand \"vec_cmpuneq<mode>\"\n-  [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n-\t(gt:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n-\t\t    (match_operand:VFT 2 \"register_operand\"  \"v\")))\n-   (set (match_dup 3)\n-\t(gt:<tointvec> (match_dup 2) (match_dup 1)))\n-   (set (match_dup 0) (ior:<tointvec> (match_dup 0) (match_dup 3)))\n-   (set (match_dup 0) (not:<tointvec> (match_dup 0)))]\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n+\t\t          (match_operand:VFT 2 \"register_operand\"  \"v\"))))\n+   (set (match_dup                           3)\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_dup         2)\n+\t                  (match_dup         1))))\n+   (set (match_dup                           0)\n+\t(ior:<tointvec> (match_dup           0)\n+\t\t\t(match_dup           3)))\n+   (set (match_dup                           0)\n+\t(not:<tointvec> (match_dup           0)))]\n   \"TARGET_VX\"\n {\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n@@ -1499,18 +1604,24 @@\n \t\t    (match_operand:VFT 2 \"register_operand\"  \"v\")))\n    (set (match_dup 3) (gt:<tointvec> (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (ior:<tointvec> (match_dup 0) (match_dup 3)))]\n-  \"TARGET_VX\"\n+  \"TARGET_VXE\"\n {\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n-; ORDERED (a, b): a >= b | b > a\n+; ORDERED (a, b): !(a u< b) | !(a u>= b)\n (define_expand \"vec_cmpordered<mode>\"\n-  [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n-\t(ge:<tointvec> (match_operand:VFT 1 \"register_operand\"  \"v\")\n-\t\t (match_operand:VFT 2 \"register_operand\"  \"v\")))\n-   (set (match_dup 3) (gt:<tointvec> (match_dup 2) (match_dup 1)))\n-   (set (match_dup 0) (ior:<tointvec> (match_dup 0) (match_dup 3)))]\n+  [(set (match_operand:<tointvec>            0 \"register_operand\" \"=v\")\n+\t(not:<tointvec>\n+\t (unlt:<tointvec> (match_operand:VFT 1 \"register_operand\" \"v\")\n+\t\t          (match_operand:VFT 2 \"register_operand\" \"v\"))))\n+   (set (match_dup                           3)\n+\t(not:<tointvec>\n+\t (unge:<tointvec> (match_dup         1)\n+\t\t\t  (match_dup         2))))\n+   (set (match_dup                           0)\n+\t(ior:<tointvec> (match_dup           0)\n+\t\t\t(match_dup           3)))]\n   \"TARGET_VX\"\n {\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n@@ -1530,7 +1641,7 @@\n })\n \n (define_code_iterator VEC_CMP_EXPAND\n-  [uneq ltgt ordered unordered])\n+  [ungt unge uneq ltgt ordered unordered])\n \n (define_expand \"vec_cmp<code>\"\n   [(match_operand 0 \"register_operand\" \"\")"}, {"sha": "668abb675189d11730422b37bdfb164b70c28c10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -1,3 +1,8 @@\n+2019-10-11  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Adjust\n+\texpectations.\n+\n 2019-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array38.adb: New test."}, {"sha": "073d574aa5e3b679486f7fa0a53d64af5156a914", "filename": "gcc/testsuite/gcc.target/s390/vector/vec-scalar-cmp-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a0cacaba651f428208832fdb8a26dbd12acc38/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvec-scalar-cmp-1.c?ref=d0a0cacaba651f428208832fdb8a26dbd12acc38", "patch": "@@ -34,7 +34,7 @@ gt (double a, double b)\n   return a > b;\n }\n \n-/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinh\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"gt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinh\\t%r2,0\" } } */\n \n int\n ge (double a, double b)\n@@ -45,7 +45,7 @@ ge (double a, double b)\n   return a >= b;\n }\n \n-/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinhe\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"ge:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinhe\\t%r2,0\" } } */\n \n int\n lt (double a, double b)\n@@ -56,7 +56,7 @@ lt (double a, double b)\n   return a < b;\n }\n \n-/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinl\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"lt:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinl\\t%r2,0\" } } */\n \n int\n le (double a, double b)\n@@ -67,4 +67,4 @@ le (double a, double b)\n   return a <= b;\n }\n \n-/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfcdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinle\\t%r2,0\" } } */\n+/* { dg-final { scan-assembler \"le:\\n\\[^:\\]*\\twfkdb\\t%v\\[0-9\\]*,%v\\[0-9\\]*\\n\\t\\[^:\\]+\\tlochinle\\t%r2,0\" } } */"}]}