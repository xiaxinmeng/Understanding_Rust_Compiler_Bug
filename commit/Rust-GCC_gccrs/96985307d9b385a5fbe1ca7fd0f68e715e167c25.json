{"sha": "96985307d9b385a5fbe1ca7fd0f68e715e167c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5ODUzMDdkOWIzODVhNWZiZTFjYTdmZDBmNjhlNzE1ZTE2N2MyNQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-07-14T08:49:30Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-07-14T08:49:30Z"}, "message": "expmed.c: Remove more references to QUEUED in the comments.\n\n2004-07-14  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expmed.c: Remove more references to QUEUED in the comments.\n\t* expr.c: Likewise.\n\nFrom-SVN: r84678", "tree": {"sha": "ba38dde851194462647bd207c894c61e65580fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba38dde851194462647bd207c894c61e65580fcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96985307d9b385a5fbe1ca7fd0f68e715e167c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96985307d9b385a5fbe1ca7fd0f68e715e167c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96985307d9b385a5fbe1ca7fd0f68e715e167c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96985307d9b385a5fbe1ca7fd0f68e715e167c25/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7407dec26fd01951b5711768b10a2b1befab12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7407dec26fd01951b5711768b10a2b1befab12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7407dec26fd01951b5711768b10a2b1befab12f"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "e3af5983d4ecc5d70a65831e9cad19a2449698cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96985307d9b385a5fbe1ca7fd0f68e715e167c25", "patch": "@@ -1,3 +1,8 @@\n+2004-07-14  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expmed.c: Remove more references to QUEUED in the comments.\n+\t* expr.c: Likewise.\n+\n 2004-07-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \tRevert:"}, {"sha": "45d87f662fb9ec8d19e9b032376a015008aec7fa", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=96985307d9b385a5fbe1ca7fd0f68e715e167c25", "patch": "@@ -1050,7 +1050,6 @@ store_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n    containing BITSIZE bits, starting at BITNUM,\n    and put it in TARGET if possible (if TARGET is nonzero).\n    Regardless of TARGET, we return the rtx for where the value is placed.\n-   It may be a QUEUED.\n \n    STR_RTX is the structure containing the byte (a REG or MEM).\n    UNSIGNEDP is nonzero if this is an unsigned bit field."}, {"sha": "95dbf353119640c18c7c8176e16dd3bda773a77f", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96985307d9b385a5fbe1ca7fd0f68e715e167c25/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=96985307d9b385a5fbe1ca7fd0f68e715e167c25", "patch": "@@ -2933,7 +2933,6 @@ compress_float_constant (rtx x, rtx y)\n \n /* Push a block of length SIZE (perhaps variable)\n    and return an rtx to address the beginning of the block.\n-   Note that it is not possible for the value returned to be a QUEUED.\n    The value may be virtual_outgoing_args_rtx.\n \n    EXTRA is the number of bytes of padding to push in addition to SIZE.\n@@ -3411,8 +3410,7 @@ get_subtarget (rtx x)\n \n /* Expand an assignment that stores the value of FROM into TO.\n    If WANT_VALUE is nonzero, return an rtx for the value of TO.\n-   (This may contain a QUEUED rtx;\n-   if the value is constant, this rtx is a constant.)\n+   (If the value is constant, this rtx is a constant.)\n    Otherwise, the returned value is NULL_RTX.  */\n \n rtx\n@@ -3730,7 +3728,6 @@ expand_assignment (tree to, tree from, int want_value)\n \n /* Generate code for computing expression EXP,\n    and storing the value into TARGET.\n-   TARGET may contain a QUEUED rtx.\n \n    If WANT_VALUE & 1 is nonzero, return a copy of the value\n    not in TARGET, so that we can be sure to use the proper\n@@ -8958,10 +8955,6 @@ do_store_flag (tree exp, rtx target, enum machine_mode mode, int only_cheap)\n   if (target == 0)\n     target = gen_reg_rtx (mode);\n \n-  /* Pass copies of OP0 and OP1 in case they contain a QUEUED.  This is safe\n-     because, if the emit_store_flag does anything it will succeed and\n-     OP0 and OP1 will not be used subsequently.  */\n-\n   result = emit_store_flag (target, code, op0, op1,\n \t\t\t    operand_mode, unsignedp, 1);\n "}]}