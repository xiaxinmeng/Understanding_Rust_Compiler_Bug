{"sha": "dcac003d6685744f5f95c068b85b051a03567272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNhYzAwM2Q2Njg1NzQ0ZjVmOTVjMDY4Yjg1YjA1MWEwMzU2NzI3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-05-16T19:35:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-05-16T19:35:43Z"}, "message": "backport: re PR target/7434 ([x86_64] ICE in change_address_1, at emit-rtl.c:1934)\n\n\tMerge from gcc-3_2-rhl8-branch:\n\t2003-04-23  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/tls/opt-6.c: New test.\n\n\t2003-04-05  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/20030405-1.c: New test.\n\n\t2003-03-09  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/20030309-1.c: New test.\n\n\t2003-03-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\t* gcc.c-torture/execute/20030307-1.c: New test.\n\n\t2003-02-20  Randolph Chung  <tausq@debian.org>\n\n\t* gcc.c-torture/compile/20030220-1.c: New test.\n\n\t2003-02-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/20030217-1.c: New test.\n\n\t2003-01-29  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.c-torture/compile/20020129-1.c: New test.\n\n\t2002-12-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\t* gcc.dg/unroll-1.c: New test.\n\n\t2002-11-16  Jan Hubicka  <jh@suse.cz>\n\n\t* gcc.c-torture/execute/20020920-1.c: New test.\n\n\t2002-10-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/7434\n\t* gcc.c-torture/compile/20021008-1.c: New test.\n\n\t2002-08-10  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>\n\n\tPR target/7559\n\t* testsuite/gcc.c-torture/execute/20020810-1.c: New test.\n\n\t2002-08-07  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.c-torture/compile/20020807-1.c: New test.\n\n\t2002-07-30  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/tls/opt-1.c: New test.\n\n\t2002-07-29  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/20020729-1.c: New test.\n\n\t2002-07-20  Jakub Jelinek  <jakub@redhat.com>\n\n\t* g++.dg/opt/life1.C: New test.\n\n\t2002-05-20  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gcc.dg/20020525-1.c: New test.\n\n\t2002-05-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/6794\n\t* g++.dg/ext/pretty1.C: New test.\n\t* g++.dg/ext/pretty2.C: New test.\n\nFrom-SVN: r66877", "tree": {"sha": "55b43cff94fa644f169e8d48dff2a04d2d619aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b43cff94fa644f169e8d48dff2a04d2d619aed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcac003d6685744f5f95c068b85b051a03567272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcac003d6685744f5f95c068b85b051a03567272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcac003d6685744f5f95c068b85b051a03567272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcac003d6685744f5f95c068b85b051a03567272/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a0a75dd441da8834907fc7d78634b458f71ce58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0a75dd441da8834907fc7d78634b458f71ce58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0a75dd441da8834907fc7d78634b458f71ce58"}], "stats": {"total": 683, "additions": 683, "deletions": 0}, "files": [{"sha": "ac46fbb428d7bf633fd890b97c1a61e52438897d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -1,3 +1,78 @@\n+2003-05-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tMerge from gcc-3_2-rhl8-branch:\n+\t2003-04-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tls/opt-6.c: New test.\n+\n+\t2003-04-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20030405-1.c: New test.\n+\n+\t2003-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20030309-1.c: New test.\n+\n+\t2003-03-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/execute/20030307-1.c: New test.\n+\n+\t2003-02-20  Randolph Chung  <tausq@debian.org>\n+\n+\t* gcc.c-torture/compile/20030220-1.c: New test.\n+\n+\t2003-02-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20030217-1.c: New test.\n+\n+\t2003-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020129-1.c: New test.\n+\n+\t2002-12-21  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/unroll-1.c: New test.\n+\n+\t2002-11-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/execute/20020920-1.c: New test.\n+\n+\t2002-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/7434\n+\t* gcc.c-torture/compile/20021008-1.c: New test.\n+\n+\t2002-08-10  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>\n+\n+\tPR target/7559\n+\t* testsuite/gcc.c-torture/execute/20020810-1.c: New test.\n+\n+\t2002-08-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020807-1.c: New test.\n+\n+\t2002-07-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tls/opt-1.c: New test.\n+\n+\t2002-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020729-1.c: New test.\n+\n+\t2002-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/opt/life1.C: New test.\n+\n+\t2002-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020525-1.c: New test.\n+\n+\t2002-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/6794\n+\t* g++.dg/ext/pretty1.C: New test.\n+\t* g++.dg/ext/pretty2.C: New test.\n+\n 2003-05-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8385"}, {"sha": "06608ae30ebb23a92f59ebe69d3dcbe23761d6d4", "filename": "gcc/testsuite/g++.dg/ext/pretty1.C", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty1.C?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,67 @@\n+// PR c++/6794\n+// Test whether __PRETTY_FUNCTION__ works in templates, functions and\n+// in initializers at global scope\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+extern \"C\" void __assert_fail (const char *, const char *,\n+\t\t\t       unsigned int, const char *)\n+  throw() __attribute__((noreturn));\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+#define str(expr) #expr\n+#define assert(expr)\t\t\t\t\t\t\\\n+  ((expr) ? 0 : (__assert_fail (str(expr), __FILE__, __LINE__,\t\\\n+\t\t\t\t__PRETTY_FUNCTION__), 0))\n+\n+int __attribute__((noinline))\n+foo (void)\n+{\n+  return 1;\n+}\n+\n+template<class T> int\n+bar (T)\n+{\n+  return (assert (foo ()), 1);\n+}\n+\n+template<> int\n+bar<int> (int)\n+{\n+  return (assert (foo ()), 2);\n+}\n+\n+int a = (assert (foo ()), 1);\n+int b = (assert (foo ()), 2);\n+\n+int\n+main ()\n+{\n+  double c = 1.0;\n+  unsigned char *d = 0;\n+  int e = (assert (foo ()), 3);\n+\n+  bar (c);\n+  bar (d);\n+  bar (e);\n+}\n+\n+namespace N\n+{\n+  int f = (assert (foo ()), 4);\n+}\n+\n+void __attribute__((noinline))\n+__assert_fail (const char *cond, const char *file, unsigned int line,\n+\t       const char *pretty) throw ()\n+{\n+  abort ();\n+}\n+\n+// { dg-final { scan-assembler \"int bar\\\\(T\\\\).*with T = int\" } }\n+// { dg-final { scan-assembler \"top level\" } }\n+// { dg-final { scan-assembler \"int main\\\\(\\\\)\" } }\n+// { dg-final { scan-assembler \"int bar\\\\(T\\\\).*with T = double\" } }\n+// { dg-final { scan-assembler \"int bar\\\\(T\\\\).*with T = unsigned char\\*\" } }"}, {"sha": "0c05da9b70d9b7b544def20447c3c903c7cf97fd", "filename": "gcc/testsuite/g++.dg/ext/pretty2.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpretty2.C?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/6794\n+// Test whether __PRETTY_FUNCTION__ works in templates, functions and\n+// in initializers at global scope\n+// { dg-do run }\n+// { dg-options \"\" }\n+\n+extern \"C\" void __assert_fail (const char *, const char *,\n+\t\t\t       unsigned int, const char *)\n+  throw() __attribute__((noreturn));\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+#define str(expr) #expr\n+#define assert(expr)\t\t\t\t\t\t\\\n+  ((expr) ? 0 : (__assert_fail (str(expr), __FILE__, __LINE__,\t\\\n+\t\t\t\t__PRETTY_FUNCTION__), 0))\n+\n+int __attribute__((noinline))\n+foo (void)\n+{\n+  return 1;\n+}\n+\n+template<class T> int\n+bar (T)\n+{\n+  return (assert (foo ()), 1);\n+}\n+\n+template<> int\n+bar<int> (int)\n+{\n+  return (assert (foo ()), 2);\n+}\n+\n+int a = (assert (foo ()), 1);\n+int b = (assert (foo ()), 2);\n+\n+int\n+main ()\n+{\n+  double c = 1.0;\n+  unsigned char *d = 0;\n+  int e = (assert (foo ()), 3);\n+\n+  bar (c);\n+  bar (d);\n+  bar (e);\n+}\n+\n+namespace N\n+{\n+  int f = (assert (foo ()), 4);\n+}\n+\n+void __attribute__((noinline))\n+__assert_fail (const char *cond, const char *file, unsigned int line,\n+\t       const char *pretty) throw ()\n+{\n+  abort ();\n+}"}, {"sha": "ac7a9f26d002523f7604f0f49f9e97c4cc7a37af", "filename": "gcc/testsuite/g++.dg/opt/life1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flife1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flife1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flife1.C?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,16 @@\n+// This testcase did not set up the pic register on IA-32 due\n+// to bug in calculate_global_regs_live EH edge handling.\n+// { dg-do compile { target i?86-*-linux* } }\n+// { dg-options \"-O2 -fPIC\" }\n+\n+struct A { };\n+\n+void foo (A (*fn)())\n+{\n+  try {\n+    A a = fn ();\n+  } catch (...) {\n+  }\n+}\n+\n+// { dg-final { scan-assembler \"GLOBAL_OFFSET_TABLE\" } }"}, {"sha": "7b17ba475e488a1876a13edf400495c65784ed74", "filename": "gcc/testsuite/gcc.c-torture/compile/20020129-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020129-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020129-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020129-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,17 @@\n+/* Test call to static variable.  */\n+\n+typedef struct\n+{\n+  long long a[10];\n+} A;\n+  \n+void bar (A *);\n+  \n+typedef int (*B)(int);\n+  \n+void foo (void)\n+{\n+  static A a;\n+  bar (&a);\n+  (*(B)&a) (1);\n+}"}, {"sha": "c1cc81504e82affc292b9ccc25a4a38292ab58b2", "filename": "gcc/testsuite/gcc.c-torture/compile/20020807-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020807-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020807-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020807-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,33 @@\n+int x;\n+\n+static int\n+__attribute__ ((noinline))\n+foo (void)\n+{\n+  return 0;\n+}\n+\n+static void\n+__attribute__ ((noinline))\n+bar (void)\n+{\n+}\n+\n+static inline void\n+baz (void)\n+{\n+  char arr[x];\n+\n+lab:\n+  if (foo () == -1)\n+    {\n+      bar ();\n+      goto lab;\n+    }\n+}\n+\n+void\n+test (void)\n+{\n+  baz ();\n+}"}, {"sha": "9d5a7f2763301ef3d8a5da1e7fa749d344e59164", "filename": "gcc/testsuite/gcc.c-torture/compile/20021008-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021008-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021008-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021008-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,11 @@\n+/* Origin: PR target/7434 Gwenole Beauchesne <gbeauchesne@mandrakesoft.com> */\n+\n+int main(void)\n+{\n+  static const int align_g[] = { 1, 2, 4, 8, 16 };\n+  char * buf;\n+  int i = 0;\n+  volatile long double val = 0;\n+  val = *((long double *)(buf + align_g[i]));\n+  return 0;\n+}"}, {"sha": "59a03e42c45645ba100de48fae1375b624c70097", "filename": "gcc/testsuite/gcc.c-torture/compile/20030220-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030220-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,20 @@\n+/* PR optimization/9768 */\n+/* Originator: Randolph Chung <tausq@debian.org> */\n+\n+inline int fixfloor (long x)\n+{\n+  if (x >= 0)\n+    return (x >> 16);\n+  else\n+    return ~((~x) >> 16);\n+}\n+\n+inline int fixtoi (long x)\n+{\n+  return fixfloor(x) + ((x & 0x8000) >> 15);\n+}\n+\n+int foo(long x, long y)\n+{\n+  return fixtoi(x*y);\n+}"}, {"sha": "d3386973a70138445b7266fefb62253d1f59a9be", "filename": "gcc/testsuite/gcc.c-torture/execute/20020810-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020810-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020810-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020810-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,38 @@\n+/* PR target/7559\n+   This testcase was miscompiled on x86-64, because classify_argument\n+   wrongly computed the offset of nested structure fields.  */\n+\n+extern void abort (void);\n+\n+struct A\n+{\n+  long x;\n+};\n+\n+struct R\n+{\n+  struct A a, b;\n+};\n+\n+struct R R = { 100, 200 };\n+\n+void f (struct R r)\n+{\n+  if (r.a.x != R.a.x || r.b.x != R.b.x)\n+    abort ();\n+}\n+\n+struct R g (void)\n+{\n+  return R;\n+}\n+\n+int main (void)\n+{\n+  struct R r;\n+  f(R);\n+  r = g();\n+  if (r.a.x != R.a.x || r.b.x != R.b.x)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "4539742dd38d06295e75f2f21565c763c13e777d", "filename": "gcc/testsuite/gcc.c-torture/execute/20020920-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020920-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020920-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020920-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,31 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct B\n+{\n+  int x;\n+  int y;\n+};\n+\n+struct A\n+{\n+  int z;\n+  struct B b;\n+};\n+\n+struct A\n+f ()\n+{\n+  struct B b = { 0, 1 };\n+  struct A a = { 2, b };\n+  return a;\n+}\n+\n+int\n+main (void)\n+{\n+  struct A a = f ();\n+  if (a.z != 2 || a.b.x != 0 || a.b.y != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "3f4eb864d6c277725f76057436fed6878056e666", "filename": "gcc/testsuite/gcc.c-torture/execute/20030307-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030307-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030307-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030307-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,26 @@\n+/* PR optimization/8726 */\n+/* Originator: Paul Eggert <eggert@twinsun.com> */\n+\n+/* Verify that GCC doesn't miscompile tail calls on Sparc. */\n+\n+extern void abort(void);\n+\n+int fcntl_lock(int fd, int op, long long offset, long long count, int type);\n+\n+int vfswrap_lock(char *fsp, int fd, int op, long long offset, long long count, int type)\n+{\n+  return fcntl_lock(fd, op, offset, count, type);\n+}\n+\n+int fcntl_lock(int fd, int op, long long offset, long long count, int type)\n+{\n+  return type;\n+}\n+\n+int main(void)\n+{\n+  if (vfswrap_lock (0, 1, 2, 3, 4, 5) != 5)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "5f2e8c9de91a11f85c466b2241faf51914b156ff", "filename": "gcc/testsuite/gcc.dg/20020525-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20020525-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20020525-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020525-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,24 @@\n+/* PR optimization/6703\n+   Origin: Glen Nakamura <glen@imodulo.com> */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void foo (int *x, int y)\n+{\n+  __builtin_memset (x, 0, y);\n+}\n+  \n+int main ()\n+{\n+  int x[2] = { 0x5a5a5a5a, 0x5a5a5a5a };\n+    \n+  if (x[1] != 0x5a5a5a5a)\n+    abort ();\n+  foo (x, sizeof (int) + 1);\n+  if (x[1] == 0x5a5a5a5a)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "da1ed1b7153094b623fe3ec7056fbd52cb44e4fd", "filename": "gcc/testsuite/gcc.dg/20020729-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20020729-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20020729-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020729-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O2 -march=k6\" } */\n+\n+static inline void *\n+baz (void *s, unsigned long c, unsigned int count)\n+{\n+  int d0, d1;\n+  __asm__ __volatile__ (\"\"\n+\t\t\t: \"=&c\" (d0), \"=&D\" (d1)\n+\t\t\t:\"a\" (c), \"q\" (count), \"0\" (count / 4), \"1\" ((long) s)\n+\t\t\t:\"memory\");\n+  return s;\n+}\n+\n+struct A\n+{\n+  unsigned long *a;\n+};\n+\n+inline static void *\n+bar (struct A *x, int y)\n+{\n+  char *ptr;\n+\n+  ptr = (void *) x->a[y >> 12];\n+  ptr += y % (1UL << 12);\n+  return (void *) ptr;\n+}\n+\n+int\n+foo (struct A *x, unsigned int *y, int z, int u)\n+{\n+  int a, b, c, d, e;\n+\n+  z += *y;\n+  c = z + u;\n+  a = (z >> 12) + 1;\n+  do\n+    {\n+      b = (a << 12);\n+      d = b - z;\n+      e = c - z;\n+      if (e < d)\n+\td = e;\n+      baz (bar (x, z), 0, d);\n+      z = b;\n+      a++;\n+    }\n+  while (z < c);\n+  return 0;\n+}"}, {"sha": "d0cd91316c408dfd97aaf59010f0662fea801391", "filename": "gcc/testsuite/gcc.dg/20030217-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030217-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030217-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030217-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,18 @@\n+/* Test whether denormal floating point constants in hexadecimal notation\n+   are parsed correctly.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-* } } */\n+/* { dg-options \"-std=c99\" } */\n+\n+long double d = 0x0.0000003ffffffff00000p-16357L;\n+long double e = 0x0.0000003ffffffff00000p-16356L;\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (d != e / 2.0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "2431bc1b52f307d2febac2aedfe7a897786a87e9", "filename": "gcc/testsuite/gcc.dg/20030309-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030309-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030309-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030309-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+struct A0 { int x; };\n+struct A1 { int x; int y[1]; };\n+struct A2 { int x; int y[2]; };\n+struct A3 { int x; int y[3]; };\n+struct A4 { int x; int y[4]; };\n+\n+void *s;\n+int u;\n+\n+int\n+main (void)\n+{\n+  int x;\n+  void *t = s;\n+\n+  switch (u)\n+    {\n+    case 0:\n+      x = ((struct A0 *) t)->x;\n+      break;\n+    case 1:\n+      x = ((struct A1 *) t)->x;\n+      break;\n+    case 2:\n+      x = ((struct A2 *) t)->x;\n+      break;\n+    case 3:\n+      x = ((struct A3 *) t)->x;\n+      break;\n+    case 4:\n+      x = ((struct A4 *) t)->x;\n+      break;\n+    default:\n+      x = 0;\n+      break;\n+    }\n+\n+  return x;\n+}"}, {"sha": "ec19d5c78704673d3b596a8ff78c7b18469d6d0f", "filename": "gcc/testsuite/gcc.dg/20030405-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030405-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2F20030405-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030405-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target ia64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int x, int y)\n+{\n+  if (y == 0)\n+    {\n+      register long r8 asm (\"r8\");\n+      register long r15 asm (\"r15\") = 1;\n+      long retval;\n+      __asm __volatile (\"foo\" : \"=r\" (r8), \"=r\" (r15) : \"1\" (r15));\n+      retval = r8;\n+      y = retval;\n+    }\n+\n+  {\n+    register long r8 asm (\"r8\");\n+    register long r15 asm (\"r15\") = 2;\n+    long retval;\n+    register long _out1 asm (\"out1\") = x;\n+    register long _out0 asm (\"out0\") = y;\n+    __asm __volatile (\"foo\"\n+\t\t      : \"=r\" (r8), \"=r\" (r15) , \"=r\" (_out0), \"=r\" (_out1)\n+\t\t      : \"1\" (r15) , \"2\" (_out0), \"3\" (_out1));\n+    retval = r8;\n+    return retval;\n+  }\n+}"}, {"sha": "8523c762a2edb0cd5368521eb45e2dbe89c82cb2", "filename": "gcc/testsuite/gcc.dg/tls/opt-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+/* { dg-options \"-O2 -fPIC -mtune=i686\" { target i?86-*-* } } */\n+\n+extern __thread int thr;\n+\n+static int x;\n+\n+static void\n+bar (void)\n+{\n+  x = 1;\n+}\n+\n+static void\n+#ifdef __i386__\n+__attribute__ ((regparm (3)))\n+#endif\n+foo (const char *x, void *y, int *z)\n+{\n+  bar ();\n+}\n+\n+void\n+test (const char *x, void *y)\n+{\n+  foo (x, y, &thr);\n+}"}, {"sha": "de04c1cb3fc494822ef279b9f1fc124919dfbe76", "filename": "gcc/testsuite/gcc.dg/tls/opt-6.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct A\n+{\n+  char a;\n+  int b;\n+  long long c;\n+};\n+extern __thread struct A a1, a2, a3, a4;\n+extern struct A *f1a (void);\n+extern struct A *f2a (void);\n+extern struct A *f3a (void);\n+extern struct A *f4a (void);\n+extern struct A *f5a (void);\n+extern struct A *f6a (void);\n+extern struct A *f7a (void);\n+extern struct A *f8a (void);\n+extern struct A *f9a (void);\n+extern struct A *f10a (void);\n+extern int f1b (void);\n+extern int f2b (void);\n+extern int f3b (void);\n+extern int f4b (void);\n+extern int f5b (void);\n+extern int f6b (void);\n+extern int f7b (void);\n+extern int f8b (void);\n+extern int f9b (void);\n+extern int f10b (void);\n+extern void check1 (void);\n+extern void check2 (void);\n+__thread int dummy = 12;\n+__thread struct A local = { 1, 2, 3 };\n+\n+int\n+main (void)\n+{\n+  struct A *p;\n+\n+  if (local.a != 1 || local.b != 2 || local.c != 3)\n+    abort ();\n+  if (a1.a != 4 || a1.b != 5 || a1.c != 6)\n+    abort ();\n+  if (a2.a != 22 || a2.b != 23 || a2.c != 24)\n+    abort ();\n+  if (a3.a != 10 || a3.b != 11 || a3.c != 12)\n+    abort ();\n+  if (a4.a != 25 || a4.b != 26 || a4.c != 27)\n+    abort ();\n+  check1 ();\n+  check2 ();\n+  if (f1a () != &a1 || f2a () != &a2 || f3a () != &a3 || f4a () != &a4)\n+    abort ();\n+  p = f5a (); if (p->a != 16 || p->b != 16 + 1 || p->c != 16 + 2)\n+    abort ();\n+  p = f6a (); if (p->a != 19 || p->b != 19 + 1 || p->c != 19 + 2)\n+    abort ();\n+  if (f7a () != &a2 || f8a () != &a4)\n+    abort ();\n+  p = f9a (); if (p->a != 28 || p->b != 28 + 1 || p->c != 28 + 2)\n+    abort ();\n+  p = f10a (); if (p->a != 31 || p->b != 31 + 1 || p->c != 31 + 2)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "1e2dd09ebeccfc54d7531cb74e22d23785a5b0b8", "filename": "gcc/testsuite/gcc.dg/unroll-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcac003d6685744f5f95c068b85b051a03567272/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-1.c?ref=dcac003d6685744f5f95c068b85b051a03567272", "patch": "@@ -0,0 +1,26 @@\n+/* PR optimization/8599 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -funroll-loops\" } */\n+/* { dg-options \"-mtune=k6 -O2 -funroll-loops\" { target i?86-*-* } } */\n+\n+extern void abort (void);\n+\n+int array[6] = { 1,2,3,4,5,6 };\n+\n+void foo()\n+{\n+  int i;\n+\n+  for (i = 0; i < 5; i++)\n+    array[i] = 0;\n+}\n+\n+int main()\n+{\n+  foo();\n+  if (array[0] || array [1] || array[2] || array[3] || array[4])\n+    abort ();\n+  if (array[5] != 6)\n+    abort ();\n+  return 0;\n+}"}]}