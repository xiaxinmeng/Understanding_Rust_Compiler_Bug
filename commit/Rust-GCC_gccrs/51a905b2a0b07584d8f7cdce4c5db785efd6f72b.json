{"sha": "51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhOTA1YjJhMGIwNzU4NGQ4ZjdjZGNlNGM1ZGI3ODVlZmQ2ZjcyYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-04T12:19:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-04T12:19:30Z"}, "message": "re PR tree-optimization/56213 (strided load vectorization is unnecessarily restricted)\n\n2013-04-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56213\n\t* tree-vect-data-refs.c (vect_check_strided_load): Remove.\n\t(vect_analyze_data_refs): Allow all non-nested loads as\n\tstrided loads.\n\n\t* gcc.dg/vect/vect-123.c: New testcase.\n\nFrom-SVN: r197480", "tree": {"sha": "c464cc5b66e76a622c5fe489c540f0f42855d139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c464cc5b66e76a622c5fe489c540f0f42855d139"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71879a86efd6404ef36a0493b900868f10808646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71879a86efd6404ef36a0493b900868f10808646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71879a86efd6404ef36a0493b900868f10808646"}], "stats": {"total": 83, "additions": 29, "deletions": 54}, "files": [{"sha": "09f5ff5478ae493db898dc62485eed3071eee09c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "patch": "@@ -1,3 +1,10 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56213\n+\t* tree-vect-data-refs.c (vect_check_strided_load): Remove.\n+\t(vect_analyze_data_refs): Allow all non-nested loads as\n+\tstrided loads.\n+\n 2013-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56837"}, {"sha": "a5ec8e2a007a1e362feb1835f402c5d101a51bb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "patch": "@@ -1,3 +1,8 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56213\n+\t* gcc.dg/vect/vect-123.c: New testcase.\n+\n 2013-04-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56810"}, {"sha": "5a2f325090e480e21cd49ceb4f010d67aad0bd9a", "filename": "gcc/testsuite/gcc.dg/vect/vect-123.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-123.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-123.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-123.c?ref=51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int x[4092];\n+int y[1024];\n+\n+void foo (int s)\n+{\n+  int i, j;\n+  for (i = 0, j = 0; j < 1023; i += s, j++)\n+    y[j] += x[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5d07cae309a99c7f87c9148be554635f469e3b61", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a905b2a0b07584d8f7cdce4c5db785efd6f72b/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=51a905b2a0b07584d8f7cdce4c5db785efd6f72b", "patch": "@@ -2816,56 +2816,6 @@ vect_check_gather (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n   return decl;\n }\n \n-/* Check wether a non-affine load in STMT (being in the loop referred to\n-   in LOOP_VINFO) is suitable for handling as strided load.  That is the case\n-   if its address is a simple induction variable.  If so return the base\n-   of that induction variable in *BASEP and the (loop-invariant) step\n-   in *STEPP, both only when that pointer is non-zero.\n-\n-   This handles ARRAY_REFs (with variant index) and MEM_REFs (with variant\n-   base pointer) only.  */\n-\n-static bool\n-vect_check_strided_load (gimple stmt, loop_vec_info loop_vinfo)\n-{\n-  struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-  struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n-  tree base, off;\n-  affine_iv iv;\n-\n-  if (!DR_IS_READ (dr))\n-    return false;\n-\n-  base = DR_REF (dr);\n-\n-  if (TREE_CODE (base) == REALPART_EXPR\n-      || TREE_CODE (base) == IMAGPART_EXPR)\n-    base = TREE_OPERAND (base, 0);\n-\n-  if (TREE_CODE (base) == ARRAY_REF)\n-    {\n-      off = TREE_OPERAND (base, 1);\n-      base = TREE_OPERAND (base, 0);\n-    }\n-  else if (TREE_CODE (base) == MEM_REF)\n-    {\n-      off = TREE_OPERAND (base, 0);\n-      base = TREE_OPERAND (base, 1);\n-    }\n-  else\n-    return false;\n-\n-  if (TREE_CODE (off) != SSA_NAME)\n-    return false;\n-\n-  if (!expr_invariant_in_loop_p (loop, base)\n-      || !simple_iv (loop, loop_containing_stmt (stmt), off, &iv, true))\n-    return false;\n-\n-  return true;\n-}\n-\n /* Function vect_analyze_data_refs.\n \n   Find all the data references in the loop or basic block.\n@@ -3291,10 +3241,8 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n       else if (loop_vinfo\n \t       && TREE_CODE (DR_STEP (dr)) != INTEGER_CST)\n \t{\n-\t  bool strided_load = false;\n-\t  if (!nested_in_vect_loop_p (loop, stmt))\n-\t    strided_load = vect_check_strided_load (stmt, loop_vinfo);\n-\t  if (!strided_load)\n+\t  if (nested_in_vect_loop_p (loop, stmt)\n+\t      || !DR_IS_READ (dr))\n \t    {\n \t      if (dump_enabled_p ())\n \t\t{"}]}