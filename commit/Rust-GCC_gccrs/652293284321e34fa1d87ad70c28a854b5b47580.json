{"sha": "652293284321e34fa1d87ad70c28a854b5b47580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyMjkzMjg0MzIxZTM0ZmExZDg3YWQ3MGMyOGE4NTRiNWI0NzU4MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-05-04T01:34:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-05-04T01:34:30Z"}, "message": "cmd/go: update to match recent changes to gc\n    \n    In https://golang.org/cl/111097 the gc version of cmd/go was updated\n    to include some gofrontend-specific changes. The gofrontend code\n    already has different versions of those changes; this CL makes the\n    gofrontend match the upstream code.\n    \n    Reviewed-on: https://go-review.googlesource.com/111099\n\nFrom-SVN: r259918", "tree": {"sha": "a9a9eeee039e6d87b7e8e3de6831a7a0fef92747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a9eeee039e6d87b7e8e3de6831a7a0fef92747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/652293284321e34fa1d87ad70c28a854b5b47580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652293284321e34fa1d87ad70c28a854b5b47580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652293284321e34fa1d87ad70c28a854b5b47580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652293284321e34fa1d87ad70c28a854b5b47580/comments", "author": null, "committer": null, "parents": [{"sha": "e7902c2c8f7a7b84fb2637319af2d7cf9cf42096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7902c2c8f7a7b84fb2637319af2d7cf9cf42096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7902c2c8f7a7b84fb2637319af2d7cf9cf42096"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "c45c9181ac44eed68f0b1872af77dd898c0a18db", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -1,4 +1,4 @@\n-85ca682349af2cb1aa6b1eecac794aeb73d24f15\n+bf6f714559bd7b27b7686811aaf0f6e8e7f1c0d5\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "aadf97c064f76c9c8ce2cfa5433f1a6b9e6b78cf", "filename": "libgo/go/cmd/go/alldocs.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Falldocs.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -1266,6 +1266,9 @@\n //\n // Special-purpose environment variables:\n //\n+// \tGCCGOTOOLDIR\n+// \t\tIf set, where to find gccgo tools, such as cgo.\n+// \t\tThe default is based on how gccgo was configured.\n // \tGOROOT_FINAL\n // \t\tThe root of the installed Go tree, when it is\n // \t\tinstalled in a location other than where it is built.\n@@ -1279,9 +1282,6 @@\n // \t\tDefined by Git. A colon-separated list of schemes that are allowed to be used\n // \t\twith git fetch/clone. If set, any scheme not explicitly mentioned will be\n // \t\tconsidered insecure by 'go get'.\n-//\tGCCGOTOOLDIR\n-//\t\tIf set, where to find gccgo tools, such as cgo.\n-//\t\tThe default is based on how gccgo was configured.\n //\n //\n // Import path syntax"}, {"sha": "f0a2277d1b22b411a8c48323b41a2a7270443190", "filename": "libgo/go/cmd/go/internal/cfg/cfg.go", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcfg%2Fcfg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcfg%2Fcfg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fcfg%2Fcfg.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -92,11 +92,12 @@ var (\n // Update build context to use our computed GOROOT.\n func init() {\n \tBuildContext.GOROOT = GOROOT\n-\t// Note that we must use runtime.GOOS and runtime.GOARCH here,\n-\t// as the tool directory does not move based on environment variables.\n-\t// This matches the initialization of ToolDir in go/build,\n-\t// except for using GOROOT rather than runtime.GOROOT().\n \tif runtime.Compiler != \"gccgo\" {\n+\t\t// Note that we must use runtime.GOOS and runtime.GOARCH here,\n+\t\t// as the tool directory does not move based on environment\n+\t\t// variables. This matches the initialization of ToolDir in\n+\t\t// go/build, except for using GOROOT rather than\n+\t\t// runtime.GOROOT.\n \t\tbuild.ToolDir = filepath.Join(GOROOT, \"pkg/tool/\"+runtime.GOOS+\"_\"+runtime.GOARCH)\n \t}\n }\n@@ -107,6 +108,8 @@ func findGOROOT() string {\n \t}\n \tdef := filepath.Clean(runtime.GOROOT())\n \tif runtime.Compiler == \"gccgo\" {\n+\t\t// gccgo has no real GOROOT, and it certainly doesn't\n+\t\t// depend on the executable's location.\n \t\treturn def\n \t}\n \texe, err := os.Executable()"}, {"sha": "6aa449a8e29ecfe5575dbe8c1b26ea4eea614ea8", "filename": "libgo/go/cmd/go/internal/help/helpdoc.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fhelp%2Fhelpdoc.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -526,6 +526,9 @@ Architecture-specific environment variables:\n \n Special-purpose environment variables:\n \n+\tGCCGOTOOLDIR\n+\t\tIf set, where to find gccgo tools, such as cgo.\n+\t\tThe default is based on how gccgo was configured.\n \tGOROOT_FINAL\n \t\tThe root of the installed Go tree, when it is\n \t\tinstalled in a location other than where it is built.\n@@ -539,9 +542,6 @@ Special-purpose environment variables:\n \t\tDefined by Git. A colon-separated list of schemes that are allowed to be used\n \t\twith git fetch/clone. If set, any scheme not explicitly mentioned will be\n \t\tconsidered insecure by 'go get'.\n-\tGCCGOTOOLDIR\n-\t\tIf set, where to find gccgo tools, such as cgo.\n-\t\tThe default is based on how gccgo was configured.\n \t`,\n }\n "}, {"sha": "d3026072e09d5d2c3f50293c21c41f4d51782963", "filename": "libgo/go/cmd/go/internal/load/pkg.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Finternal%2Fload%2Fpkg.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -13,7 +13,6 @@ import (\n \t\"os\"\n \tpathpkg \"path\"\n \t\"path/filepath\"\n-\t\"runtime\"\n \t\"sort\"\n \t\"strings\"\n \t\"unicode\"\n@@ -976,7 +975,7 @@ func (p *Package) load(stk *ImportStack, bp *build.Package, err error) {\n \t\t\t// This is for 'go tool'.\n \t\t\t// Override all the usual logic and force it into the tool directory.\n \t\t\tif cfg.BuildToolchainName == \"gccgo\" {\n-\t\t\t\tp.Target = filepath.Join(runtime.GCCGOTOOLDIR, elem)\n+\t\t\t\tp.Target = filepath.Join(base.ToolDir, elem)\n \t\t\t} else {\n \t\t\t\tp.Target = filepath.Join(cfg.GOROOTpkg, \"tool\", full)\n \t\t\t}"}, {"sha": "4e779557942cf746fd2e21bd3880fe9842816cc7", "filename": "libgo/go/go/build/build.go", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fbuild.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -1595,14 +1595,7 @@ func init() {\n \t}\n }\n \n-func getToolDir() string {\n-\tif runtime.Compiler == \"gccgo\" {\n-\t\treturn envOr(\"GCCGOTOOLDIR\", runtime.GCCGOTOOLDIR)\n-\t} else {\n-\t\treturn filepath.Join(runtime.GOROOT(), \"pkg/tool/\"+runtime.GOOS+\"_\"+runtime.GOARCH)\n-\t}\n-}\n-\n+// ToolDir is the directory containing build tools.\n var ToolDir = getToolDir()\n \n // IsLocalImport reports whether the import path is"}, {"sha": "3025cd5681591f0c2f0aaee701786be344dcdcc5", "filename": "libgo/go/go/build/gc.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fgc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fgc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fgc.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build gc\n+\n+package build\n+\n+import (\n+\t\"path/filepath\"\n+\t\"runtime\"\n+)\n+\n+// getToolDir returns the default value of ToolDir.\n+func getToolDir() string {\n+\treturn filepath.Join(runtime.GOROOT(), \"pkg/tool/\"+runtime.GOOS+\"_\"+runtime.GOARCH)\n+}"}, {"sha": "c6aac9aa1bc2d6fb5eec8749a220f4b69ced5036", "filename": "libgo/go/go/build/gccgo.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fgccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652293284321e34fa1d87ad70c28a854b5b47580/libgo%2Fgo%2Fgo%2Fbuild%2Fgccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fgccgo.go?ref=652293284321e34fa1d87ad70c28a854b5b47580", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build gccgo\n+\n+package build\n+\n+import \"runtime\"\n+\n+// getToolDir returns the default value of ToolDir.\n+func getToolDir() string {\n+\treturn envOr(\"GCCGOTOOLDIR\", runtime.GCCGOTOOLDIR)\n+}"}]}