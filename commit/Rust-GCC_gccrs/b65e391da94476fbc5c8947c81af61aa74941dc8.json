{"sha": "b65e391da94476fbc5c8947c81af61aa74941dc8", "node_id": "C_kwDOANBUbNoAKGI2NWUzOTFkYTk0NDc2ZmJjNWM4OTQ3YzgxYWY2MWFhNzQ5NDFkYzg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-02T09:06:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-02T09:06:24Z"}, "message": "libstdc++: Shortest denormal hex std::to_chars\n\nOn Fri, Oct 28, 2022 at 12:52:44PM -0400, Patrick Palka wrote:\n> > The following patch on top of\n> > https://gcc.gnu.org/pipermail/libstdc++/2022-October/054849.html\n> > adds std::{,b}float16_t support for std::to_chars.\n> > When precision is specified (or for std::bfloat16_t for hex mode even if not),\n> > I believe we can just use the std::to_chars float (when float is mode\n> > compatible with std::float32_t) overloads, both formats are proper subsets\n> > of std::float32_t.\n> > Unfortunately when precision is not specified and we are supposed to emit\n> > shortest string, the std::{,b}float16_t strings are usually much shorter.\n> > E.g. 1.e7p-14f16 shortest fixed representation is\n> > 0.0001161 and shortest scientific representation is\n> > 1.161e-04 while 1.e7p-14f32 (same number promoted to std::float32_t)\n> > 0.00011610985 and\n> > 1.1610985e-04.\n> > Similarly for 1.38p-112bf16,\n> > 0.000000000000000000000000000000000235\n> > 2.35e-34 vs. 1.38p-112f32\n> > 0.00000000000000000000000000000000023472271\n> > 2.3472271e-34\n> > For std::float16_t there are differences even in the shortest hex, say:\n> > 0.01p-14 vs. 1p-22\n> > but only for denormal std::float16_t values (where all std::float16_t\n> > denormals converted to std::float32_t are normal), __FLT16_MIN__ and\n> > everything larger in absolute value than that is the same.  Unless\n> > that is a bug and we should try to discover shorter representations\n> > even for denormals...\n>\n> IIRC for hex formatting of denormals I opted to be consistent with how\n> glibc printf formats them, instead of outputting the truly shortest\n> form.\n>\n> I wouldn't be against using the float32 overloads even for shortest hex\n> formatting of float16.  The output is shorter but equivalent so it\n> shouldn't cause any problems.\n\nThe following patch changes the behavior of the shortest hex denormals,\nsuch that they are printed like normals (so for has_implicit_leading_bit\nwith 1p-149 instead of 0.000002p-126 etc., otherwise (Intel extended)\nwith the leading digit before dot being [89abcdef]).  I think for all the\nsupported format it is never longer, it can be equal length e.g. for\n0.fffffep-126 vs. 1.fffffcp-127 but fortunately no largest subnormal\nin any format has the unbiased exponent like -9, -99, -999, -9999 because\nthen it would be longer and often it is shorter, sometimes much shorter.\n\nFor the cases with precision it keeps the handling as is.\n\nWhile for !has_implicit_leading_bit we for normals or with this patch\neven denormals have really shortest representation, for other formats\nwe sometimes do not, but this patch doesn't deal with that (we\nalways use 1.NNN while we could use 1.NNN up to f.NNN and by that shortening\nby the last hexit if the last hexit doesn't have least significant bit set\nand unbiased exponent is not -9, -99, -999 or -9999.\n\n2022-11-02  Jakub Jelinek  <jakub@redhat.com>\n\n\t* src/c++17/floating_to_chars.cc (__floating_to_chars_hex): Drop const\n\tfrom unbiased_exponent.  Canonicalize denormals such that they have\n\tthe leading bit set by shifting effective mantissa up and decreasing\n\tunbiased_exponent.\n\t(__floating_to_chars_shortest): Don't instantiate\n\t__floating_to_chars_hex for float16_t either and use float instead.\n\t* testsuite/20_util/to_chars/float.cc (float_to_chars_test_cases):\n\tAdjust testcases for shortest hex denormals.\n\t* testsuite/20_util/to_chars/double.cc (double_to_chars_test_cases):\n\tLikewise.", "tree": {"sha": "59b11b35aaabded34927b3a4975a051aafea2a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b11b35aaabded34927b3a4975a051aafea2a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65e391da94476fbc5c8947c81af61aa74941dc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65e391da94476fbc5c8947c81af61aa74941dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65e391da94476fbc5c8947c81af61aa74941dc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65e391da94476fbc5c8947c81af61aa74941dc8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaba55ffef961c28f6a15d845a4d6b77b8a8bab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaba55ffef961c28f6a15d845a4d6b77b8a8bab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaba55ffef961c28f6a15d845a4d6b77b8a8bab1"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "a253ee42416971910c546d3ab0246daae4c9a44f", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=b65e391da94476fbc5c8947c81af61aa74941dc8", "patch": "@@ -844,9 +844,9 @@ template<typename T>\n     const bool is_normal_number = (biased_exponent != 0);\n \n     // Calculate the unbiased exponent.\n-    const int32_t unbiased_exponent = (is_normal_number\n-\t\t\t\t       ? biased_exponent - exponent_bias\n-\t\t\t\t       : 1 - exponent_bias);\n+    int32_t unbiased_exponent = (is_normal_number\n+\t\t\t\t ? biased_exponent - exponent_bias\n+\t\t\t\t : 1 - exponent_bias);\n \n     // Shift the mantissa so that its bitwidth is a multiple of 4.\n     constexpr unsigned rounded_mantissa_bits = (mantissa_bits + 3) / 4 * 4;\n@@ -863,6 +863,16 @@ template<typename T>\n \t  __glibcxx_assert(effective_mantissa & (mantissa_t{1} << (mantissa_bits\n \t\t\t\t\t\t\t\t   - 1u)));\n       }\n+    else if (!precision.has_value() && effective_mantissa)\n+      {\n+\t// 1.8p-23 is shorter than 0.00cp-14, so if precision is\n+\t// omitted, try to canonicalize denormals such that they\n+\t// have the leading bit set.\n+\tint width = __bit_width(effective_mantissa);\n+\tint shift = rounded_mantissa_bits - width + has_implicit_leading_bit;\n+\tunbiased_exponent -= shift;\n+\teffective_mantissa <<= shift;\n+      }\n \n     // Compute the shortest precision needed to print this value exactly,\n     // disregarding trailing zeros.\n@@ -1061,7 +1071,10 @@ template<typename T>\n \t// std::bfloat16_t has the same exponent range as std::float32_t\n \t// and so we can avoid instantiation of __floating_to_chars_hex\n \t// for bfloat16_t.  Shortest hex will be the same as for float.\n-\tif constexpr (is_same_v<T, floating_type_bfloat16_t>)\n+\t// When we print shortest form even for denormals, we can do it\n+\t// for std::float16_t as well.\n+\tif constexpr (is_same_v<T, floating_type_float16_t>\n+\t\t      || is_same_v<T, floating_type_bfloat16_t>)\n \t  return __floating_to_chars_hex(first, last, value.x, nullopt);\n \telse\n \t  return __floating_to_chars_hex(first, last, value, nullopt);"}, {"sha": "ac9a43099a24ca186ed2bc85f47526dc58ea61cb", "filename": "libstdc++-v3/testsuite/20_util/to_chars/double.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fdouble.cc?ref=b65e391da94476fbc5c8947c81af61aa74941dc8", "patch": "@@ -2821,8 +2821,8 @@ inline constexpr double_to_chars_testcase double_to_chars_test_cases[] = {\n \n     // Test hexfloat corner cases.\n     {0x1.728p+0, chars_format::hex, \"1.728p+0\"}, // instead of \"2.e5p-1\"\n-    {0x0.0000000000001p-1022, chars_format::hex, \"0.0000000000001p-1022\"}, // instead of \"1p-1074\", min subnormal\n-    {0x0.fffffffffffffp-1022, chars_format::hex, \"0.fffffffffffffp-1022\"}, // max subnormal\n+    {0x0.0000000000001p-1022, chars_format::hex, \"1p-1074\"}, // min subnormal\n+    {0x0.fffffffffffffp-1022, chars_format::hex, \"1.ffffffffffffep-1023\"}, // max subnormal\n     {0x1p-1022, chars_format::hex, \"1p-1022\"}, // min normal\n     {0x1.fffffffffffffp+1023, chars_format::hex, \"1.fffffffffffffp+1023\"}, // max normal\n "}, {"sha": "5a5de63eae5e3657fe9d79e14f2f42aaeffafd7a", "filename": "libstdc++-v3/testsuite/20_util/to_chars/float.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65e391da94476fbc5c8947c81af61aa74941dc8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat.cc?ref=b65e391da94476fbc5c8947c81af61aa74941dc8", "patch": "@@ -521,8 +521,8 @@ inline constexpr float_to_chars_testcase float_to_chars_test_cases[] = {\n \n     // Test hexfloat corner cases.\n     {0x1.728p+0f, chars_format::hex, \"1.728p+0\"}, // instead of \"2.e5p-1\"\n-    {0x0.000002p-126f, chars_format::hex, \"0.000002p-126\"}, // instead of \"1p-149\", min subnormal\n-    {0x0.fffffep-126f, chars_format::hex, \"0.fffffep-126\"}, // max subnormal\n+    {0x0.000002p-126f, chars_format::hex, \"1p-149\"}, // min subnormal\n+    {0x0.fffffep-126f, chars_format::hex, \"1.fffffcp-127\"}, // max subnormal\n     {0x1p-126f, chars_format::hex, \"1p-126\"}, // min normal\n     {0x1.fffffep+127f, chars_format::hex, \"1.fffffep+127\"}, // max normal\n "}]}