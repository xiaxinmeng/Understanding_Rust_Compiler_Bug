{"sha": "f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiZDk1MDU2M2QwYTdlZDhlZGQ3MjMxZmM4ZjE5YTdlM2VhZjdiZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-11T13:07:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-11T13:07:17Z"}, "message": "[AArch64] Avoid GET_MODE_NUNITS in v8.4 support\n\nThis patch replaces GET_MODE_NUNITS in some of the v8.4 support\nwith equivalent values, in preparation for the switch to\nNUM_POLY_INT_COEFFS==2.\n\n2018-01-11  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_fml<f16mac1>l<f16quad>_low<mode>): Avoid GET_MODE_NUNITS.\n\t(aarch64_fml<f16mac1>l<f16quad>_high<mode>): Likewise.\n\t(aarch64_fml<f16mac1>l_lane_lowv2sf): Likewise.\n\t(aarch64_fml<f16mac1>l_lane_highv2sf): Likewise.\n\t(aarch64_fml<f16mac1>lq_laneq_lowv4sf): Likewise.\n\t(aarch64_fml<f16mac1>lq_laneq_highv4sf): Likewise.\n\t(aarch64_fml<f16mac1>l_laneq_lowv2sf): Likewise.\n\t(aarch64_fml<f16mac1>l_laneq_highv2sf): Likewise.\n\t(aarch64_fml<f16mac1>lq_lane_lowv4sf): Likewise.\n\t(aarch64_fml<f16mac1>lq_lane_highv4sf): Likewise.\n\nFrom-SVN: r256530", "tree": {"sha": "98a909ffc42ef864cb26bd2547ddaac46f6563be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98a909ffc42ef864cb26bd2547ddaac46f6563be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd/comments", "author": null, "committer": null, "parents": [{"sha": "c184e58c4d1aec200954f00b067e5adecd787f2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c184e58c4d1aec200954f00b067e5adecd787f2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c184e58c4d1aec200954f00b067e5adecd787f2f"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "8654289e58b8072fd003f54e9054f6449bc4c24a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "patch": "@@ -1,3 +1,17 @@\n+2018-01-11  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_fml<f16mac1>l<f16quad>_low<mode>): Avoid GET_MODE_NUNITS.\n+\t(aarch64_fml<f16mac1>l<f16quad>_high<mode>): Likewise.\n+\t(aarch64_fml<f16mac1>l_lane_lowv2sf): Likewise.\n+\t(aarch64_fml<f16mac1>l_lane_highv2sf): Likewise.\n+\t(aarch64_fml<f16mac1>lq_laneq_lowv4sf): Likewise.\n+\t(aarch64_fml<f16mac1>lq_laneq_highv4sf): Likewise.\n+\t(aarch64_fml<f16mac1>l_laneq_lowv2sf): Likewise.\n+\t(aarch64_fml<f16mac1>l_laneq_highv2sf): Likewise.\n+\t(aarch64_fml<f16mac1>lq_lane_lowv4sf): Likewise.\n+\t(aarch64_fml<f16mac1>lq_lane_highv4sf): Likewise.\n+\n 2018-01-11  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR target/83514"}, {"sha": "792fa1ce47841f5853f4c631a070f799fe35a487", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f3bd950563d0a7ed8edd7231fc8f19a7e3eaf7bd", "patch": "@@ -6060,9 +6060,10 @@\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n-  int nunits = GET_MODE_NUNITS (<VFMLA_W>mode);\n-  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, false);\n-  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, false);\n+  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode,\n+\t\t\t\t\t    <nunits> * 2, false);\n+  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode,\n+\t\t\t\t\t    <nunits> * 2, false);\n \n   emit_insn (gen_aarch64_simd_fml<f16mac1>l<f16quad>_low<mode> (operands[0],\n \t\t\t\t\t\t\t\toperands[1],\n@@ -6082,9 +6083,8 @@\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n-  int nunits = GET_MODE_NUNITS (<VFMLA_W>mode);\n-  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, true);\n-  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, nunits, true);\n+  rtx p1 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, <nunits> * 2, true);\n+  rtx p2 = aarch64_simd_vect_par_cnst_half (<VFMLA_W>mode, <nunits> * 2, true);\n \n   emit_insn (gen_aarch64_simd_fml<f16mac1>l<f16quad>_high<mode> (operands[0],\n \t\t\t\t\t\t\t\t operands[1],\n@@ -6173,9 +6173,7 @@\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n-\t\t\t\t\t      false);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode, 4, false);\n     rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>l_lane_lowv2sf (operands[0],\n@@ -6196,9 +6194,7 @@\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n-\t\t\t\t\t      true);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode, 4, true);\n     rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>l_lane_highv2sf (operands[0],\n@@ -6292,9 +6288,7 @@\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n-\t\t\t\t\t      false);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode, 8, false);\n     rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>lq_laneq_lowv4sf (operands[0],\n@@ -6314,10 +6308,7 @@\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n-\t\t\t\t\t      true);\n-\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode, 8, true);\n     rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>lq_laneq_highv4sf (operands[0],\n@@ -6411,9 +6402,7 @@\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V4HFmode),\n-\t\t\t\t\t      false);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode, 4, false);\n     rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>l_laneq_lowv2sf (operands[0],\n@@ -6434,9 +6423,7 @@\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS(V4HFmode),\n-\t\t\t\t\t      true);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V4HFmode, 4, true);\n     rtx lane = aarch64_endian_lane_rtx (V8HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>l_laneq_highv2sf (operands[0],\n@@ -6531,10 +6518,7 @@\n \t VFMLA16_LOW))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n-\t\t\t\t\t      false);\n-\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode, 8, false);\n     rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>lq_lane_lowv4sf (operands[0],\n@@ -6554,9 +6538,7 @@\n \t VFMLA16_HIGH))]\n   \"TARGET_F16FML\"\n {\n-    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode,\n-\t\t\t\t\t      GET_MODE_NUNITS (V8HFmode),\n-\t\t\t\t\t      true);\n+    rtx p1 = aarch64_simd_vect_par_cnst_half (V8HFmode, 8, true);\n     rtx lane = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n \n     emit_insn (gen_aarch64_simd_fml<f16mac1>lq_lane_highv4sf (operands[0],"}]}