{"sha": "0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM0NjgzY2Y4N2M5ZjIyNGVlN2VmZGQyNGZhM2Y5MTUyY2MyZGExNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T11:54:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T11:54:18Z"}, "message": "[multiple changes]\n\n2011-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* makeutl.adb: Minor reformatting.\n\n2011-08-04  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-altive.ads: Update comments to reflect that only the soft\n\tbinding is available today.\n\nFrom-SVN: r177359", "tree": {"sha": "7c45cdebff24203c9a7abceb637d764b8d0d9c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c45cdebff24203c9a7abceb637d764b8d0d9c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/comments", "author": null, "committer": null, "parents": [{"sha": "f142b5bc21027d6a14a31f6dd9768b913fd199ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f142b5bc21027d6a14a31f6dd9768b913fd199ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f142b5bc21027d6a14a31f6dd9768b913fd199ba"}], "stats": {"total": 108, "additions": 33, "deletions": 75}, "files": [{"sha": "ec8a3255e3ede6fd63631fe15fc90c22f0d1f4db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "patch": "@@ -1,3 +1,12 @@\n+2011-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* makeutl.adb: Minor reformatting.\n+\n+2011-08-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-altive.ads: Update comments to reflect that only the soft\n+\tbinding is available today.\n+\n 2011-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* bindgen.adb, einfo.adb, sem_ch12.adb, s-tasren.adb, sem_res.adb,"}, {"sha": "9ce80df3f06d8ff65d6d1ba30589ca156bc1cc75", "filename": "gcc/ada/g-altive.ads", "status": "modified", "additions": 23, "deletions": 74, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2Fg-altive.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2Fg-altive.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-altive.ads?ref=0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,13 +34,8 @@\n -------------------------\n \n --  This is the root of a package hierarchy offering an Ada binding to the\n---  PowerPC AltiVec extensions. These extensions basically consist in a set of\n---  128bit vector types together with a set of subprograms operating on such\n---  vectors. On a real Altivec capable target, vector objects map to hardware\n---  vector registers and the subprograms map to a set of specific hardware\n---  instructions.\n-\n---  Relevant documents are:\n+--  PowerPC AltiVec extensions, a set of 128bit vector types together with a\n+--  set of subprograms operating on them. Relevant documents are:\n \n --  o AltiVec Technology, Programming Interface Manual (1999-06)\n --    to which we will refer as [PIM], describes the data types, the\n@@ -53,29 +48,25 @@\n --  These documents, as well as a number of others of general interest on the\n --  AltiVec technology, are available from the Motorola/AltiVec Web site at\n \n---  http://www.motorola.com/altivec\n+--  http://www.freescale.com/altivec\n \n---  We offer two versions of this binding: one for real AltiVec capable\n---  targets, and one for other targets. In the latter case, everything is\n---  emulated in software. We will refer to the two bindings as:\n+--  The binding interface is structured to allow alternate implementations:\n+--  for real AltiVec capable targets, and for other targets. In the latter\n+--  case, everything is emulated in software. We refer to the two versions as:\n \n --  o The Hard binding for AltiVec capable targets (with the appropriate\n --    hardware support and corresponding instruction set)\n \n --  o The Soft binding for other targets (with the low level primitives\n --    emulated in software).\n \n---  The two versions of the binding are expected to be equivalent from the\n---  functional standpoint. The same client application code should observe no\n---  difference in operation results, even if the Soft version is used on a\n---  non-powerpc target. The Hard binding is naturally expected to run faster\n---  than the Soft version on the same target.\n-\n --  We also offer interfaces not strictly part of the base AltiVec API, such\n --  as vector conversions to/from array representations, which are of interest\n --  for client applications (e.g. for vector initialization purposes) and may\n --  also be used as implementation facilities.\n \n+--  Only the soft binding is available today.\n+\n -----------------------------------------\n -- General package architecture survey --\n -----------------------------------------\n@@ -84,8 +75,8 @@\n --  values, the possible types of which are declared in this root package to\n --  be generally accessible.\n \n---  From the user standpoint, the two versions of the binding are available\n---  through a consistent hierarchy of units providing identical services:\n+--  From the user standpoint, the binding materializes as a consistent\n+--  hierarchy of units:\n \n --                             GNAT.Altivec\n --                           (component types)\n@@ -99,7 +90,7 @@\n \n --  Vector types are defined in the GNAT.Altivec.Vector_Types package\n \n---  On these types, the user can apply the Altivec operations defined in\n+--  On these types, users can apply the Altivec operations defined in\n --  GNAT.Altivec.Vector_Operations. Their layout is opaque and may vary across\n --  configurations, for it is typically target-endianness dependant.\n \n@@ -116,43 +107,20 @@\n --  The GNAT.Altivec.Conversions package is provided to convert a View to the\n --  corresponding Vector and vice-versa.\n \n---  The two versions of the binding rely on a low level internal interface,\n---  and switching from one version to the other amounts to select one low\n---  level implementation instead of the other.\n-\n---  The bindings are provided as a set of sources together with a project file\n---  (altivec.gpr). The hard/soft binding selection is controlled by a project\n---  variable on targets where switching makes sense. See the example usage\n---  section below.\n-\n ---------------------------\n -- Underlying principles --\n ---------------------------\n \n---  The general organization sketched above has been devised from a number\n---  of driving ideas:\n-\n---  o From the clients standpoint, the two versions of the binding should be\n---    as easily exchangeable as possible,\n-\n---  o From the maintenance standpoint, we want to avoid as much code\n---    duplication as possible.\n-\n---  o From both standpoints above, we want to maintain a clear interface\n---    separation between the base bindings to the Motorola API and the\n---    additional facilities.\n+--  Internally, the binding relies on an abstraction of the Altivec API, a\n+--  rich set of functions around a core of low level primitives mapping to\n+--  AltiVec instructions. See for instance \"vec_add\" in [PIM-4.4 Generic and\n+--  Specific AltiVec operations], with no less than six result/arguments\n+--  combinations of byte vector types that map to \"vaddubm\".\n \n---  The identification of the low level interface is directly inspired by the\n---  base API organization, basically consisting of a rich set of functions\n---  around a core of low level primitives mapping to AltiVec instructions.\n+--  The \"soft\" version is a software emulation of the low level primitives.\n \n---  See for instance \"vec_add\" in [PIM-4.4 Generic and Specific AltiVec\n---  operations]: no less than six result/arguments combinations of byte vector\n---  types map to \"vaddubm\".\n-\n---  The \"hard\" version of the low level primitives map to real AltiVec\n---  instructions via the corresponding GCC builtins. The \"soft\" version is\n---  a software emulation of those.\n+--  The \"hard\" version would map to real AltiVec instructions via GCC builtins\n+--  and inlining.\n \n -------------------\n -- Example usage --\n@@ -168,6 +136,8 @@\n \n --  use GNAT.Altivec;\n \n+--  with Ada.Text_IO; use Ada.Text_IO;\n+\n --  procedure Sample is\n --     Va : Vector_Unsigned_Int := To_Vector ((Values => (1, 2, 3, 4)));\n --     Vb : Vector_Unsigned_Int := To_Vector ((Values => (1, 2, 3, 4)));\n@@ -183,28 +153,7 @@\n --     end loop;\n --  end;\n \n---  This currently requires the GNAT project management facilities to compile,\n---  to automatically retrieve the set of necessary sources and switches\n---  depending on your configuration. For the example above, customizing the\n---  switches to include -g also, this would be something like:\n-\n---  sample.gpr\n---\n---  with \"altivec.gpr\";\n---\n---  project Sample is\n-\n---    for Source_Dirs use (\".\");\n---    for Main use (\"sample\");\n-\n---    package Compiler is\n---       for Default_Switches (\"Ada\") use\n---           Altivec.Compiler'Default_Switches (\"Ada\") & \"-g\";\n---    end Compiler;\n-\n---  end Sample;\n-\n---  $ gnatmake -Psample\n+--  $ gnatmake sample.adb\n --  [...]\n --  $ ./sample\n --  2"}, {"sha": "3d14990da20e02058013b4318f40755b7ab58b11", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c4683cf87c9f224ee7efdd24fa3f9152cc2da16/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=0c4683cf87c9f224ee7efdd24fa3f9152cc2da16", "patch": "@@ -1581,7 +1581,7 @@ package body Makeutl is\n             if Number_Of_Mains (Tree) = 0\n               and then Mains.Count_Of_Mains_With_No_Tree = 0\n             then\n-               Debug_Output (\"add_Mains_From_Project\", Project.Name);\n+               Debug_Output (\"Add_Mains_From_Project\", Project.Name);\n                List := Project.Mains;\n \n                if List /= Prj.Nil_String then"}]}