{"sha": "e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjMjUyMjkwNWZlOGRhYTIxMTNjMjRjZmI0OGNlNTdlNmIyNDQ2Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:58:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:58:46Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aux.adb (Nearest_Ancestor): Use original node of type\n\tdeclaration to locate nearest ancestor, because derived\n\ttype declarations for record types are rewritten as record\n\tdeclarations.\n\t* sem_ch13.adb (Add_Call): Use an unchecked conversion to handle\n\tproperly derivations that are completions of private types.\n\t(Add_Predicates): If type is private, examine rep. items of full\n\tview, which may include inherited predicates.\n\t(Build_Predicate_Functions): Ditto.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.adb (New_Copy_Tree.Visit_Entity): Extend previous change\n\tto generate new entities for subtype declarations located in\n\tExpression_With_Action nodes.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Check_A_Call): Remove\n\tlocal variables Is_DIC_Proc and Issue_In_SPARK. Verify the\n\tneed for Elaborate_All when SPARK elaboration checks are\n\trequired. Update the checks for instances, variables, and calls\n\tto Default_Initial_Condition procedures.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.ads, aspects.adb: Make the GNAT-specific pragma No_Inline\n\tinto a boolean aspect, in analogy with the Ada aspect No_Return.\n\nFrom-SVN: r247219", "tree": {"sha": "311df8958b56581e917a7a120dab61e40cd147aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311df8958b56581e917a7a120dab61e40cd147aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/comments", "author": null, "committer": null, "parents": [{"sha": "a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a267d8ccb7df8b87c9f8680a32ea4530c86a600e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a267d8ccb7df8b87c9f8680a32ea4530c86a600e"}], "stats": {"total": 170, "additions": 108, "deletions": 62}, "files": [{"sha": "158542ccb1f8fcf9971181e535fa0163ca0337cb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -1,3 +1,34 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aux.adb (Nearest_Ancestor): Use original node of type\n+\tdeclaration to locate nearest ancestor, because derived\n+\ttype declarations for record types are rewritten as record\n+\tdeclarations.\n+\t* sem_ch13.adb (Add_Call): Use an unchecked conversion to handle\n+\tproperly derivations that are completions of private types.\n+\t(Add_Predicates): If type is private, examine rep. items of full\n+\tview, which may include inherited predicates.\n+\t(Build_Predicate_Functions): Ditto.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.adb (New_Copy_Tree.Visit_Entity): Extend previous change\n+\tto generate new entities for subtype declarations located in\n+\tExpression_With_Action nodes.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Check_A_Call): Remove\n+\tlocal variables Is_DIC_Proc and Issue_In_SPARK. Verify the\n+\tneed for Elaborate_All when SPARK elaboration checks are\n+\trequired. Update the checks for instances, variables, and calls\n+\tto Default_Initial_Condition procedures.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Make the GNAT-specific pragma No_Inline\n+\tinto a boolean aspect, in analogy with the Ada aspect No_Return.\n+\n 2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb, sem_ch13.adb, sem_ch6.adb: Minor reformatting."}, {"sha": "d5ec072d5e7ca63e46d1f0b2f7ab383111c5bc42", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -570,6 +570,7 @@ package body Aspects is\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n     Aspect_Max_Queue_Length             => Aspect_Max_Queue_Length,\n     Aspect_No_Elaboration_Code_All      => Aspect_No_Elaboration_Code_All,\n+    Aspect_No_Inline                    => Aspect_No_Inline,\n     Aspect_No_Return                    => Aspect_No_Return,\n     Aspect_No_Tagged_Streams            => Aspect_No_Tagged_Streams,\n     Aspect_Obsolescent                  => Aspect_Obsolescent,"}, {"sha": "f3c31367d4e5447b9d438d77ac13751a909f2a11", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -189,6 +189,7 @@ package Aspects is\n       Aspect_Inline_Always,                 -- GNAT\n       Aspect_Interrupt_Handler,\n       Aspect_Lock_Free,                     -- GNAT\n+      Aspect_No_Inline,                     -- GNAT\n       Aspect_No_Return,\n       Aspect_No_Tagged_Streams,             -- GNAT\n       Aspect_Pack,\n@@ -468,6 +469,7 @@ package Aspects is\n       Aspect_Machine_Radix                => Name_Machine_Radix,\n       Aspect_Max_Queue_Length             => Name_Max_Queue_Length,\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n+      Aspect_No_Inline                    => Name_No_Inline,\n       Aspect_No_Return                    => Name_No_Return,\n       Aspect_No_Tagged_Streams            => Name_No_Tagged_Streams,\n       Aspect_Object_Size                  => Name_Object_Size,\n@@ -677,6 +679,7 @@ package Aspects is\n       Aspect_Link_Name                    => Always_Delay,\n       Aspect_Linker_Section               => Always_Delay,\n       Aspect_Lock_Free                    => Always_Delay,\n+      Aspect_No_Inline                    => Always_Delay,\n       Aspect_No_Return                    => Always_Delay,\n       Aspect_Output                       => Always_Delay,\n       Aspect_Persistent_BSS               => Always_Delay,"}, {"sha": "1aa22e844e0969e208825f9c7bfe84f62f100b10", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1295,7 +1295,10 @@ package body Sem_Aux is\n    ----------------------\n \n    function Nearest_Ancestor (Typ : Entity_Id) return Entity_Id is\n-      D : constant Node_Id := Declaration_Node (Typ);\n+      D : constant Node_Id := Original_Node (Declaration_Node (Typ));\n+      --  We use the original node of the declaration, because derived\n+      --  types from record subtypes are rewritten as record declarations,\n+      --  and it is the original declaration that carries the ancestor.\n \n    begin\n       --  If we have a subtype declaration, get the ancestor subtype"}, {"sha": "ea7b3f47e44de449b1d252d67a9538c9dc0dd5e9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -8309,11 +8309,15 @@ package body Sem_Ch13 is\n          if Present (T) and then Present (Predicate_Function (T)) then\n             Set_Has_Predicates (Typ);\n \n-            --  Build the call to the predicate function of T\n+            --  Build the call to the predicate function of T. The type may be\n+            --  derived, so use an unchecked conversion for the actual.\n \n             Exp :=\n               Make_Predicate_Call\n-                (T, Convert_To (T, Make_Identifier (Loc, Object_Name)));\n+                (Typ  => T,\n+                 Expr =>\n+                   Unchecked_Convert_To (T,\n+                     Make_Identifier (Loc, Object_Name)));\n \n             --  \"and\"-in the call to evolving expression\n \n@@ -8456,6 +8460,14 @@ package body Sem_Ch13 is\n \n       begin\n          Ritem := First_Rep_Item (Typ);\n+\n+         --  If the type is private, check whether full view has inherited\n+         --  predicates.\n+\n+         if Is_Private_Type (Typ) and then No (Ritem) then\n+            Ritem := First_Rep_Item (Full_View (Typ));\n+         end if;\n+\n          while Present (Ritem) loop\n             if Nkind (Ritem) = N_Pragma\n               and then Pragma_Name (Ritem) = Name_Predicate\n@@ -8562,8 +8574,16 @@ package body Sem_Ch13 is\n       --  ones for the current type, as required by AI12-0071-1.\n \n       declare\n-         Atyp : constant Entity_Id := Nearest_Ancestor (Typ);\n+         Atyp : Entity_Id;\n       begin\n+         Atyp := Nearest_Ancestor (Typ);\n+\n+         --  The type may be private but the full view may inherit predicates\n+\n+         if No (Atyp) and then Is_Private_Type (Typ) then\n+            Atyp := Nearest_Ancestor (Full_View (Typ));\n+         end if;\n+\n          if Present (Atyp) then\n             Add_Call (Atyp);\n          end if;"}, {"sha": "b4102edd90eecaa6c6ef1624239ab501bdfb7ee2", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -629,18 +629,36 @@ package body Sem_Elab is\n          return W_Scope;\n       end Find_W_Scope;\n \n-      --  Locals\n+      --  Local variables\n+\n+      Inst_Case : constant Boolean := Nkind (N) in N_Generic_Instantiation;\n+      --  Indicates if we have instantiation case\n+\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n+      SPARK_Elab_Errors : constant Boolean :=\n+                            SPARK_Mode = On\n+                              and then Dynamic_Elaboration_Checks;\n+      --  Flag set when an entity is called or a variable is read during SPARK\n+      --  dynamic elaboration.\n \n       Variable_Case : constant Boolean :=\n                         Nkind (N) in N_Has_Entity\n                           and then Present (Entity (N))\n                           and then Ekind (Entity (N)) = E_Variable;\n       --  Indicates if we have variable reference case\n \n-      Loc : constant Source_Ptr := Sloc (N);\n-\n-      Inst_Case : constant Boolean := Nkind (N) in N_Generic_Instantiation;\n-      --  Indicates if we have instantiation case\n+      W_Scope : constant Entity_Id := Find_W_Scope;\n+      --  Top-level scope of directly called entity for subprogram. This\n+      --  differs from E_Scope in the case where renamings or derivations\n+      --  are involved, since it does not follow these links. W_Scope is\n+      --  generally in a visible unit, and it is this scope that may require\n+      --  an Elaborate_All. However, there are some cases (initialization\n+      --  calls and calls involving object notation) where W_Scope might not\n+      --  be in the context of the current unit, and there is an intermediate\n+      --  package that is, in which case the Elaborate_All has to be placed\n+      --  on this intermediate package. These special cases are handled in\n+      --  Set_Elaboration_Constraint.\n \n       Ent                  : Entity_Id;\n       Callee_Unit_Internal : Boolean;\n@@ -667,26 +685,6 @@ package body Sem_Elab is\n       --  non-visible unit. This is the scope that is to be investigated to\n       --  see whether an elaboration check is required.\n \n-      Is_DIC_Proc : Boolean := False;\n-      --  Flag set when the call denotes the Default_Initial_Condition\n-      --  procedure of a private type that wraps a nontrivial assertion\n-      --  expression.\n-\n-      Issue_In_SPARK : Boolean;\n-      --  Flag set when a source entity is called during elaboration in SPARK\n-\n-      W_Scope : constant Entity_Id := Find_W_Scope;\n-      --  Top-level scope of directly called entity for subprogram. This\n-      --  differs from E_Scope in the case where renamings or derivations\n-      --  are involved, since it does not follow these links. W_Scope is\n-      --  generally in a visible unit, and it is this scope that may require\n-      --  an Elaborate_All. However, there are some cases (initialization\n-      --  calls and calls involving object notation) where W_Scope might not\n-      --  be in the context of the current unit, and there is an intermediate\n-      --  package that is, in which case the Elaborate_All has to be placed\n-      --  on this intermediate package. These special cases are handled in\n-      --  Set_Elaboration_Constraint.\n-\n    --  Start of processing for Check_A_Call\n \n    begin\n@@ -1019,33 +1017,19 @@ package body Sem_Elab is\n          return;\n       end if;\n \n-      Is_DIC_Proc := Is_Nontrivial_DIC_Procedure (Ent);\n-\n-      --  Elaboration issues in SPARK are reported only for source constructs\n-      --  and for nontrivial Default_Initial_Condition procedures. The latter\n-      --  must be checked because the default initialization of an object of a\n-      --  private type triggers the evaluation of the Default_Initial_Condition\n-      --  expression, which in turn may have side effects.\n-\n-      Issue_In_SPARK :=\n-        SPARK_Mode = On\n-          and then Dynamic_Elaboration_Checks\n-          and then (Comes_From_Source (Ent) or Is_DIC_Proc);\n-\n       --  Now check if an Elaborate_All (or dynamic check) is needed\n \n-      if not Suppress_Elaboration_Warnings (Ent)\n+      if (Elab_Info_Messages or Elab_Warnings or SPARK_Elab_Errors)\n+        and then Generate_Warnings\n+        and then not Suppress_Elaboration_Warnings (Ent)\n         and then not Elaboration_Checks_Suppressed (Ent)\n         and then not Suppress_Elaboration_Warnings (E_Scope)\n         and then not Elaboration_Checks_Suppressed (E_Scope)\n-        and then ((Elab_Warnings or Elab_Info_Messages)\n-                    or else SPARK_Mode = On)\n-        and then Generate_Warnings\n       then\n          --  Instantiation case\n \n          if Inst_Case then\n-            if Issue_In_SPARK then\n+            if Comes_From_Source (Ent) and then SPARK_Elab_Errors then\n                Error_Msg_NE\n                  (\"instantiation of & during elaboration in SPARK\", N, Ent);\n             else\n@@ -1063,9 +1047,11 @@ package body Sem_Elab is\n \n          --  Variable reference in SPARK mode\n \n-         elsif Variable_Case and Issue_In_SPARK then\n-            Error_Msg_NE\n-              (\"reference to & during elaboration in SPARK\", N, Ent);\n+         elsif Variable_Case then\n+            if Comes_From_Source (Ent) and then SPARK_Elab_Errors then\n+               Error_Msg_NE\n+                 (\"reference to & during elaboration in SPARK\", N, Ent);\n+            end if;\n \n          --  Subprogram call case\n \n@@ -1079,14 +1065,14 @@ package body Sem_Elab is\n                   \"info: implicit call to & during elaboration?$?\",\n                   Ent);\n \n-            elsif Issue_In_SPARK then\n+            elsif SPARK_Elab_Errors then\n \n                --  Emit a specialized error message when the elaboration of an\n                --  object of a private type evaluates the expression of pragma\n                --  Default_Initial_Condition. This prevents the internal name\n                --  of the procedure from appearing in the error message.\n \n-               if Is_DIC_Proc then\n+               if Is_Nontrivial_DIC_Procedure (Ent) then\n                   Error_Msg_N\n                     (\"call to Default_Initial_Condition during elaboration in \"\n                      & \"SPARK\", N);\n@@ -1108,7 +1094,7 @@ package body Sem_Elab is\n          --  Case of Elaborate_All not present and required, for SPARK this\n          --  is an error, so give an error message.\n \n-         if Issue_In_SPARK then\n+         if SPARK_Elab_Errors then\n             Error_Msg_NE -- CODEFIX\n               (\"\\Elaborate_All pragma required for&\", N, W_Scope);\n "}, {"sha": "42e1601c98dd903452b0311b13d69402a47c8440", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c2522905fe8daa2113c24cfb48ce57e6b2446f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e7c2522905fe8daa2113c24cfb48ce57e6b2446f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -17120,10 +17120,12 @@ package body Sem_Util is\n          pragma Assert (not Is_Itype (Old_Entity));\n          pragma Assert (Nkind (Old_Entity) in N_Entity);\n \n-         --  Restrict entity creation to variable declarations. There is no\n-         --  need to create variables declared in inner scopes.\n+         --  Restrict entity creation to declarations of constants, variables\n+         --  and subtypes. There is no need to duplicate entities declared in\n+         --  inner scopes.\n \n-         if not Ekind_In (Old_Entity, E_Constant, E_Variable)\n+         if (not Ekind_In (Old_Entity, E_Constant, E_Variable)\n+              and then Nkind (Parent (Old_Entity)) /= N_Subtype_Declaration)\n            or else EWA_Inner_Scope_Level > 0\n          then\n             return;"}]}