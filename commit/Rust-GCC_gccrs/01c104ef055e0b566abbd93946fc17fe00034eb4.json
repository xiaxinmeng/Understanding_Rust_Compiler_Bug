{"sha": "01c104ef055e0b566abbd93946fc17fe00034eb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjMTA0ZWYwNTVlMGI1NjZhYmJkOTM5NDZmYzE3ZmUwMDAzNGViNA==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-05-01T06:58:59Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-05-01T06:58:59Z"}, "message": "re PR testsuite/31589 (gcc.dg/vect failures due to missing target specifiers)\n\n        PR testsuite/31589\n        * gcc.dg/vect/vect-iv-9.c: Added vect_int_mult target keyword to\n        dg-final test.\n        * gcc.dg/vect/vect-reduc-dot-u16b.c: Added vect_pack_trunc target\n        keyword to dg-final test.\n        * gcc.dg/vect/vect-iv-4.c: Likewise.\n        * gcc.dg/vect/vect-widen-mult-u16.c: Likewise.\n        * gcc.dg/vect/pr30771.c: Added vect_unapck target keyword to dg-final\n        test.\n        * gcc.dg/vect/vect-reduc-dot-u16a.c: Change variable type to avoid a\n        cast.\n        * gcc.dg/vect/no-section-anchors-vect-69.c: xfail on is64.\n        * lib/target-supports.exp\n        (check_effective_target_vect_widen_sum_hi_to_si): Added ia64.\n        (check_effective_target_vect_widen_sum_qi_to_hi): Added ia64.\n\nFrom-SVN: r124315", "tree": {"sha": "22b1211f130d2a656e79b64f8f7c4ade8a059c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22b1211f130d2a656e79b64f8f7c4ade8a059c73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c104ef055e0b566abbd93946fc17fe00034eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c104ef055e0b566abbd93946fc17fe00034eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c104ef055e0b566abbd93946fc17fe00034eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c104ef055e0b566abbd93946fc17fe00034eb4/comments", "author": null, "committer": null, "parents": [{"sha": "8e48985493cd4ce6ce910dc03a6cda69365ef73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e48985493cd4ce6ce910dc03a6cda69365ef73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e48985493cd4ce6ce910dc03a6cda69365ef73a"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "4d72cb536cd6c62d97c4de545617bd06622ab715", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -1,3 +1,21 @@\n+2007-05-01  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR testsuite/31589\n+\t* gcc.dg/vect/vect-iv-9.c: Added vect_int_mult target keyword to \n+\tdg-final test.\n+\t* gcc.dg/vect/vect-reduc-dot-u16b.c: Added vect_pack_trunc target \n+\tkeyword to dg-final test.\n+\t* gcc.dg/vect/vect-iv-4.c: Likewise.\n+\t* gcc.dg/vect/vect-widen-mult-u16.c: Likewise.\n+\t* gcc.dg/vect/pr30771.c: Added vect_unapck target keyword to dg-final\n+\ttest.\n+\t* gcc.dg/vect/vect-reduc-dot-u16a.c: Change variable type to avoid a\n+\tcast.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c: xfail on is64.\n+\t* lib/target-supports.exp \n+\t(check_effective_target_vect_widen_sum_hi_to_si): Added ia64.\n+\t(check_effective_target_vect_widen_sum_qi_to_hi): Added ia64.\n+\n 2007-04-30  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.c-torture/execute/ieee/20000320-1.c: Use"}, {"sha": "a590458da6e5702da2d64bd0bd52bf068b90011d", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -50,7 +50,7 @@ int main1 ()\n         abort ();\n     }\n \n-  /* 2. aligned */\n+  /* 2. aligned on 8-bytes */\n   for (i = 3; i < N-1; i++)\n     {\n       tmp1[2].a.n[1][2][i] = 6;\n@@ -63,7 +63,7 @@ int main1 ()\n         abort ();\n     }\n \n-  /* 3. aligned */\n+  /* 3. aligned on 16-bytes */\n   for (i = 0; i < N; i++)\n     {\n       for (j = 0; j < N; j++)\n@@ -113,5 +113,8 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" } } */\n+/* Loops 1,2,4 are unaligned on targets that require 16-byte alignment.\n+   Loops 1,4 are unaligned on targets that require 8-byte alignment (ia64). */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 3 \"vect\" { xfail ia64-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 2 \"vect\" { target ia64-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e9f4bd2abc77bb2f7fb6bd85cf9daa0a0cbad597", "filename": "gcc/testsuite/gcc.dg/vect/pr30771.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr30771.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -14,5 +14,5 @@ main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_unpack } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8dd39b1aded0fb38aaffb8c0cfe8b3d157c76dcb", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-4.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -40,5 +40,5 @@ int main (void)\n   return main1 ();\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_pack_trunc } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5926bbdd31eb87cd2cf6d0b8457cc7dd9ea14a7a", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-9.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -33,5 +33,6 @@ int main (void)\n   return 0;\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_int_mult } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target {! vect_int_mult } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "2947db26e6c96188726e54c8e4666b36073913c2", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-u16a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16a.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -30,7 +30,7 @@ foo1(int len) {\n int main (void)\n {\n   unsigned int dot1;\n-  int i;\n+  unsigned short i;\n \n   check_vect ();\n "}, {"sha": "bf499eb9f0594ea8ee8edc88d65dd130b479d636", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-u16b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-u16b.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -53,6 +53,6 @@ int main (void)\n    dot-product of unsigned shorts) and targets that support widening multiplication.  */\n /* The induction loop in main is vectorized.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail *-*-* } } } */ \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */ \n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_pack_trunc } } } */ \n \n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e8579e47eed3246031ca8c839de7782a591fe54d", "filename": "gcc/testsuite/gcc.dg/vect/vect-widen-mult-u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-u16.c?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -44,6 +44,6 @@ int main (void)\n \n /*The induction loop is vectorized  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_pack_trunc } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "a81127824199a56a7a5af3c1d5c2786b39ef5007", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c104ef055e0b566abbd93946fc17fe00034eb4/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=01c104ef055e0b566abbd93946fc17fe00034eb4", "patch": "@@ -1665,7 +1665,8 @@ proc check_effective_target_vect_widen_sum_hi_to_si { } {\n         verbose \"check_effective_target_vect_widen_sum_hi_to_si: using cached result\" 2\n     } else {\n         set et_vect_widen_sum_hi_to_si_saved [check_effective_target_vect_unpack]\n-        if { [istarget powerpc*-*-*] } {\n+        if { [istarget powerpc*-*-*] \n+\t     || [istarget ia64-*-*] } {\n             set et_vect_widen_sum_hi_to_si_saved 1\n         }\n     }\n@@ -1687,7 +1688,8 @@ proc check_effective_target_vect_widen_sum_qi_to_hi { } {\n         verbose \"check_effective_target_vect_widen_sum_qi_to_hi: using cached result\" 2\n     } else {\n         set et_vect_widen_sum_qi_to_hi_saved 0\n-\tif { [check_effective_target_vect_unpack] } {\n+\tif { [check_effective_target_vect_unpack] \n+\t     || [istarget ia64-*-*] } {\n             set et_vect_widen_sum_qi_to_hi_saved 1\n \t}\n     }"}]}