{"sha": "41ddaaa4d550071ed4e930d7722b8f9e6c439ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZGFhYTRkNTUwMDcxZWQ0ZTkzMGQ3NzIyYjhmOWU2YzQzOWZmYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-26T21:24:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-26T21:24:51Z"}, "message": "Update number of shift/reduce conflicts.\n\n(structsp): Pass attribute arg to finish_struct.\nSupport attributes on enums and pass to finish_enum.\n\nFrom-SVN: r9487", "tree": {"sha": "deb4a76a39fc28b17040b511f15d04a59fac8a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb4a76a39fc28b17040b511f15d04a59fac8a94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb/comments", "author": null, "committer": null, "parents": [{"sha": "10861e9a234fde12c33432d7744940526560a5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10861e9a234fde12c33432d7744940526560a5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10861e9a234fde12c33432d7744940526560a5e9"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "f6bdbe330a79c13114478b6d73b1d09f96337976", "filename": "gcc/c-parse.in", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ddaaa4d550071ed4e930d7722b8f9e6c439ffb/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=41ddaaa4d550071ed4e930d7722b8f9e6c439ffb", "patch": "@@ -24,13 +24,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    c-parse.y and into objc-parse.y.  */\n \n /* To whomever it may concern: I have heard that such a thing was once\n-written by AT&T, but I have never seen it.  */\n+   written by AT&T, but I have never seen it.  */\n \n ifobjc\n-%expect 40\n+%expect 42\n end ifobjc\n ifc\n-%expect 28\n+%expect 30\n \n /* These are the 23 conflicts you should get in parse.output;\n    the state numbers may vary if minor changes in the grammar are made.\n@@ -1310,41 +1310,34 @@ structsp:\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t}\n \t  component_decl_list '}' maybe_attribute \n-\t\t{ $$ = finish_struct ($<ttype>4, $5);\n-\t\t  decl_attributes ($$, $7, NULL_TREE);\n-\t\t  /* Really define the structure.  */\n-\t\t}\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n \t| STRUCT '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n-\t\t\t\t      $3);\n-\t\t  decl_attributes ($$, $5, NULL_TREE);\n+\t\t\t\t      $3, $5);\n \t\t}\n \t| STRUCT identifier\n \t\t{ $$ = xref_tag (RECORD_TYPE, $2); }\n \t| UNION identifier '{'\n \t\t{ $$ = start_struct (UNION_TYPE, $2); }\n \t  component_decl_list '}' maybe_attribute\n-\t\t{ $$ = finish_struct ($<ttype>4, $5);\n-\t\t  decl_attributes ($$, $7, NULL_TREE);\n-\t\t}\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n \t| UNION '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n-\t\t\t\t      $3);\n-\t\t  decl_attributes ($$, $5, NULL_TREE);\n+\t\t\t\t      $3, $5);\n \t\t}\n \t| UNION identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n \t| ENUM identifier '{'\n \t\t{ $<itype>3 = suspend_momentary ();\n \t\t  $$ = start_enum ($2); }\n-\t  enumlist maybecomma_warn '}'\n-\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5));\n+\t  enumlist maybecomma_warn '}' maybe_attribute\n+\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5), $8);\n \t\t  resume_momentary ($<itype>3); }\n \t| ENUM '{'\n \t\t{ $<itype>2 = suspend_momentary ();\n \t\t  $$ = start_enum (NULL_TREE); }\n-\t  enumlist maybecomma_warn '}'\n-\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4));\n+\t  enumlist maybecomma_warn '}' maybe_attribute\n+\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4), $7);\n \t\t  resume_momentary ($<itype>2); }\n \t| ENUM identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }"}]}