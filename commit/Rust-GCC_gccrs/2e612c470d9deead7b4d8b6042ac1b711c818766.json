{"sha": "2e612c470d9deead7b4d8b6042ac1b711c818766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2MTJjNDcwZDlkZWVhZDdiNGQ4YjYwNDJhYzFiNzExYzgxODc2Ng==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2015-03-03T15:04:02Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gcc.gnu.org", "date": "2015-03-03T15:04:02Z"}, "message": "Turn RETURN_ADDR_IN_PREVIOUS_FRAME into C expression\n\nThis allows a target to support both windowed and non-windowed ABI.\n\n2015-03-03  Max Filippov  <jcmvbkbc@gmail.com>\n\ngcc/\n\t* builtins.c (expand_builtin_return_addr): Add\n\tRETURN_ADDR_IN_PREVIOUS_FRAME to 'if' condition, remove\n\tsurrounding #ifdef.\n\t* config/sparc/sparc.h (RETURN_ADDR_IN_PREVIOUS_FRAME): Change\n\tdefinition to 1.\n\t* config/xtensa/xtensa.h (RETURN_ADDR_IN_PREVIOUS_FRAME):\n\tLikewise.\n\t* defaults.h (RETURN_ADDR_IN_PREVIOUS_FRAME): Define to 0 if\n\tundefined.\n\t* doc/tm.texi.in (RETURN_ADDR_IN_PREVIOUS_FRAME): Update\n\tparagraph.\n\nFrom-SVN: r221150", "tree": {"sha": "7f59cfef10ac3781fc4d997331364492938faf6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f59cfef10ac3781fc4d997331364492938faf6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e612c470d9deead7b4d8b6042ac1b711c818766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e612c470d9deead7b4d8b6042ac1b711c818766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e612c470d9deead7b4d8b6042ac1b711c818766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e612c470d9deead7b4d8b6042ac1b711c818766/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dd44d1c8021214d55491aefebe04d8647cae9d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd44d1c8021214d55491aefebe04d8647cae9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd44d1c8021214d55491aefebe04d8647cae9d0"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "44bad141a9c3a5d51af9c15e813cf6e72a2bde1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -1,3 +1,17 @@\n+2015-03-03  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* builtins.c (expand_builtin_return_addr): Add\n+\tRETURN_ADDR_IN_PREVIOUS_FRAME to 'if' condition, remove\n+\tsurrounding #ifdef.\n+\t* config/sparc/sparc.h (RETURN_ADDR_IN_PREVIOUS_FRAME): Change\n+\tdefinition to 1.\n+\t* config/xtensa/xtensa.h (RETURN_ADDR_IN_PREVIOUS_FRAME):\n+\tLikewise.\n+\t* defaults.h (RETURN_ADDR_IN_PREVIOUS_FRAME): Define to 0 if\n+\tundefined.\n+\t* doc/tm.texi.in (RETURN_ADDR_IN_PREVIOUS_FRAME): Update\n+\tparagraph.\n+\n 2015-03-03  Martin Jambor  <mjambor@suse.cz>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "92637771eae6d333e3873ead792182c4214b5e68", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -802,10 +802,8 @@ expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n      register.  There is no way to access it off of the current frame\n      pointer, but it can be accessed off the previous frame pointer by\n      reading the value from the register window save area.  */\n-#ifdef RETURN_ADDR_IN_PREVIOUS_FRAME\n-  if (fndecl_code == BUILT_IN_RETURN_ADDRESS)\n+  if (RETURN_ADDR_IN_PREVIOUS_FRAME && fndecl_code == BUILT_IN_RETURN_ADDRESS)\n     count--;\n-#endif\n \n   /* Scan back COUNT frames to the specified frame.  */\n   for (i = 0; i < count; i++)"}, {"sha": "27ad748076e67c6280f459ca2fa9bd797ee637fd", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -1293,7 +1293,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    access it from the current frame pointer.  We can access it from the\n    previous frame pointer though by reading a value from the register window\n    save area.  */\n-#define RETURN_ADDR_IN_PREVIOUS_FRAME\n+#define RETURN_ADDR_IN_PREVIOUS_FRAME 1\n \n /* This is the offset of the return address to the true next instruction to be\n    executed for the current function.  */"}, {"sha": "14fe4bb56ea42ee5919ed135acb86981d0f5f967", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -615,7 +615,7 @@ typedef struct xtensa_args\n \n /* Define this if the return address of a particular stack frame is\n    accessed from the frame pointer of the previous stack frame.  */\n-#define RETURN_ADDR_IN_PREVIOUS_FRAME\n+#define RETURN_ADDR_IN_PREVIOUS_FRAME 1\n \n /* A C expression whose value is RTL representing the value of the\n    return address for the frame COUNT steps up from the current"}, {"sha": "1d5479895e94a6887e9cfd67385f056e15481e8c", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -1095,6 +1095,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define FRAME_GROWS_DOWNWARD 0\n #endif\n \n+#ifndef RETURN_ADDR_IN_PREVIOUS_FRAME\n+#define RETURN_ADDR_IN_PREVIOUS_FRAME 0\n+#endif\n+\n /* On most machines, the CFA coincides with the first incoming parm.  */\n #ifndef ARG_POINTER_CFA_OFFSET\n #define ARG_POINTER_CFA_OFFSET(FNDECL) \\"}, {"sha": "8d6dfbc205e889104f55ec6a51018c73116bf82b", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e612c470d9deead7b4d8b6042ac1b711c818766/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2e612c470d9deead7b4d8b6042ac1b711c818766", "patch": "@@ -2650,16 +2650,17 @@ A C expression whose value is RTL representing the value of the return\n address for the frame @var{count} steps up from the current frame, after\n the prologue.  @var{frameaddr} is the frame pointer of the @var{count}\n frame, or the frame pointer of the @var{count} @minus{} 1 frame if\n-@code{RETURN_ADDR_IN_PREVIOUS_FRAME} is defined.\n+@code{RETURN_ADDR_IN_PREVIOUS_FRAME} is nonzero.\n \n The value of the expression must always be the correct address when\n @var{count} is zero, but may be @code{NULL_RTX} if there is no way to\n determine the return address of other frames.\n @end defmac\n \n @defmac RETURN_ADDR_IN_PREVIOUS_FRAME\n-Define this if the return address of a particular stack frame is accessed\n-from the frame pointer of the previous stack frame.\n+Define this macro to nonzero value if the return address of a particular\n+stack frame is accessed from the frame pointer of the previous stack\n+frame.  The zero default for this macro is suitable for most ports.\n @end defmac\n \n @defmac INCOMING_RETURN_ADDR_RTX"}]}