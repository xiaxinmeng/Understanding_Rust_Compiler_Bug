{"sha": "44f77a6dea2f312ee1743f3dde465c1b8453ee13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmNzdhNmRlYTJmMzEyZWUxNzQzZjNkZGU0NjVjMWI4NDUzZWUxMw==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-03T10:25:46Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-03T10:30:59Z"}, "message": "This patch is for PR target/91816\n\nThis is a patch for an issue where the compiler was generating a conditional\nbranch in Thumb2, which was too far for b{cond} to handle.\n\nThis was originally reported at binutils:\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=24991\n\nAnd then raised for GCC:\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=91816\n\nAs can be seen here:\n\nhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/Cihfddaf.html\n\nthe range of a 32-bit Thumb B{cond} is +/-1MB.\n\nThis is now checked for in arm.md and an unconditional branch is generated if\nthe jump would be greater than 1MB.\n\ngcc/ChangeLog\n\n2020-02-03  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\tPR target/91816\n\t* config/arm/arm-protos.h: New function arm_gen_far_branch prototype.\n\t* config/arm/arm.c (arm_gen_far_branch): New function\n\tarm_gen_far_branch.\n\t* config/arm/arm.md: Update b<cond> for Thumb2 range checks.\n\ngcc/testsuite/ChangeLog\n\n2020-02-03  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\tPR target/91816\n\t* gcc.target/arm/pr91816.c: New test.", "tree": {"sha": "85bdcc4d04784d2b0074d00a4a8bba04ff0d3af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85bdcc4d04784d2b0074d00a4a8bba04ff0d3af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f77a6dea2f312ee1743f3dde465c1b8453ee13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f77a6dea2f312ee1743f3dde465c1b8453ee13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f77a6dea2f312ee1743f3dde465c1b8453ee13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f77a6dea2f312ee1743f3dde465c1b8453ee13/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e464fc903506b75bef90374ab520b52df317a00e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e464fc903506b75bef90374ab520b52df317a00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e464fc903506b75bef90374ab520b52df317a00e"}], "stats": {"total": 153, "additions": 131, "deletions": 22}, "files": [{"sha": "c0ef95fdfda919b156400ff7b9a806a01079b663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44f77a6dea2f312ee1743f3dde465c1b8453ee13", "patch": "@@ -1,3 +1,11 @@\n+2020-02-03  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/91816\n+\t* config/arm/arm-protos.h: New function arm_gen_far_branch prototype.\n+\t* config/arm/arm.c (arm_gen_far_branch): New function\n+\tarm_gen_far_branch.\n+\t* config/arm/arm.md: Update b<cond> for Thumb2 range checks.\n+\n 2020-02-03  Julian Brown  <julian@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "eaff6543699755a2c4987fc3ceab1f8e15ec17b0", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=44f77a6dea2f312ee1743f3dde465c1b8453ee13", "patch": "@@ -577,4 +577,6 @@ void arm_parse_option_features (sbitmap, const cpu_arch_option *,\n \n void arm_initialize_isa (sbitmap, const enum isa_feature *);\n \n+const char * arm_gen_far_branch (rtx *, int, const char * , const char *);\n+\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "b5ae7e3e9ce08967368a046f2ca5b2fd7f18677e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=44f77a6dea2f312ee1743f3dde465c1b8453ee13", "patch": "@@ -33041,6 +33041,40 @@ arm_run_selftests (void)\n }\n } /* Namespace selftest.  */\n \n+\n+/* Generate code to enable conditional branches in functions over 1 MiB.\n+   Parameters are:\n+     operands: is the operands list of the asm insn (see arm_cond_branch or\n+       arm_cond_branch_reversed).\n+     pos_label: is an index into the operands array where operands[pos_label] is\n+       the asm label of the final jump destination.\n+     dest: is a string which is used to generate the asm label of the intermediate\n+       destination\n+   branch_format: is a string denoting the intermediate branch format, e.g.\n+     \"beq\", \"bne\", etc.  */\n+\n+const char *\n+arm_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n+\t\t    const char * branch_format)\n+{\n+  rtx_code_label * tmp_label = gen_label_rtx ();\n+  char label_buf[256];\n+  char buffer[128];\n+  ASM_GENERATE_INTERNAL_LABEL (label_buf, dest , \\\n+\t\t\tCODE_LABEL_NUMBER (tmp_label));\n+  const char *label_ptr = arm_strip_name_encoding (label_buf);\n+  rtx dest_label = operands[pos_label];\n+  operands[pos_label] = tmp_label;\n+\n+  snprintf (buffer, sizeof (buffer), \"%s%s\", branch_format , label_ptr);\n+  output_asm_insn (buffer, operands);\n+\n+  snprintf (buffer, sizeof (buffer), \"b\\t%%l0%d\\n%s:\", pos_label, label_ptr);\n+  operands[pos_label] = dest_label;\n+  output_asm_insn (buffer, operands);\n+  return \"\";\n+}\n+\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::arm_run_selftests\n #endif /* CHECKING_P */"}, {"sha": "5baf82d2ad6f423bc0e63a01be35e9fb67ebadb1", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 82, "deletions": 22, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=44f77a6dea2f312ee1743f3dde465c1b8453ee13", "patch": "@@ -7584,9 +7584,15 @@\n ;; And for backward branches we have \n ;;   (neg_range - neg_base_offs + pc_offs) = (neg_range - (-2 or -4) + 4).\n ;;\n+;; In 16-bit Thumb these ranges are:\n ;; For a 'b'       pos_range = 2046, neg_range = -2048 giving (-2040->2048).\n ;; For a 'b<cond>' pos_range = 254,  neg_range = -256  giving (-250 ->256).\n \n+;; In 32-bit Thumb these ranges are:\n+;; For a 'b'       +/- 16MB is not checked for.\n+;; For a 'b<cond>' pos_range = 1048574,  neg_range = -1048576  giving\n+;; (-1048568 -> 1048576).\n+\n (define_expand \"cbranchsi4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"expandable_comparison_operator\"\n@@ -7759,23 +7765,50 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_32BIT\"\n-  \"*\n-  if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n+  {\n+    if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n     {\n       arm_ccfsm_state += 2;\n-      return \\\"\\\";\n+      return \"\";\n     }\n-  return \\\"b%d1\\\\t%l0\\\";\n-  \"\n+    switch (get_attr_length (insn))\n+      {\n+\tcase 2: /* Thumb2 16-bit b{cond}.  */\n+\tcase 4: /* Thumb2 32-bit b{cond} or A32 b{cond}.  */\n+\t  return \"b%d1\\t%l0\";\n+\t  break;\n+\n+\t/* Thumb2 b{cond} out of range.  Use 16-bit b{cond} and\n+\t   unconditional branch b.  */\n+\tdefault: return arm_gen_far_branch (operands, 0, \"Lbcond\", \"b%D1\\t\");\n+      }\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n-\t(if_then_else\n-\t   (and (match_test \"TARGET_THUMB2\")\n-\t\t(and (ge (minus (match_dup 0) (pc)) (const_int -250))\n-\t\t     (le (minus (match_dup 0) (pc)) (const_int 256))))\n-\t   (const_int 2)\n-\t   (const_int 4)))]\n+    (if_then_else (match_test \"!TARGET_THUMB2\")\n+\n+      ;;Target is not Thumb2, therefore is A32.  Generate b{cond}.\n+      (const_int 4)\n+\n+      ;; Check if target is within 16-bit Thumb2 b{cond} range.\n+      (if_then_else (and (ge (minus (match_dup 0) (pc)) (const_int -250))\n+\t\t         (le (minus (match_dup 0) (pc)) (const_int 256)))\n+\n+\t;; Target is Thumb2, within narrow range.\n+\t;; Generate b{cond}.\n+\t(const_int 2)\n+\n+\t;; Check if target is within 32-bit Thumb2 b{cond} range.\n+\t(if_then_else (and (ge (minus (match_dup 0) (pc))(const_int -1048568))\n+\t\t\t   (le (minus (match_dup 0) (pc)) (const_int 1048576)))\n+\n+\t  ;; Target is Thumb2, within wide range.\n+\t  ;; Generate b{cond}\n+\t  (const_int 4)\n+\t  ;; Target is Thumb2, out of range.\n+\t  ;; Generate narrow b{cond} and unconditional branch b.\n+\t  (const_int 6)))))]\n )\n \n (define_insn \"*arm_cond_branch_reversed\"\n@@ -7785,23 +7818,50 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"TARGET_32BIT\"\n-  \"*\n-  if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n+  {\n+    if (arm_ccfsm_state == 1 || arm_ccfsm_state == 2)\n     {\n       arm_ccfsm_state += 2;\n-      return \\\"\\\";\n+      return \"\";\n     }\n-  return \\\"b%D1\\\\t%l0\\\";\n-  \"\n+    switch (get_attr_length (insn))\n+      {\n+\tcase 2: /* Thumb2 16-bit b{cond}.  */\n+\tcase 4: /* Thumb2 32-bit b{cond} or A32 b{cond}.  */\n+\t  return \"b%D1\\t%l0\";\n+\t  break;\n+\n+\t/* Thumb2 b{cond} out of range.  Use 16-bit b{cond} and\n+\t   unconditional branch b.  */\n+\tdefault: return arm_gen_far_branch (operands, 0, \"Lbcond\", \"b%d1\\t\");\n+      }\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n-\t(if_then_else\n-\t   (and (match_test \"TARGET_THUMB2\")\n-\t\t(and (ge (minus (match_dup 0) (pc)) (const_int -250))\n-\t\t     (le (minus (match_dup 0) (pc)) (const_int 256))))\n-\t   (const_int 2)\n-\t   (const_int 4)))]\n+    (if_then_else (match_test \"!TARGET_THUMB2\")\n+\n+      ;;Target is not Thumb2, therefore is A32.  Generate b{cond}.\n+      (const_int 4)\n+\n+      ;; Check if target is within 16-bit Thumb2 b{cond} range.\n+      (if_then_else (and (ge (minus (match_dup 0) (pc)) (const_int -250))\n+\t\t\t (le (minus (match_dup 0) (pc)) (const_int 256)))\n+\n+\t;; Target is Thumb2, within narrow range.\n+\t;; Generate b{cond}.\n+\t(const_int 2)\n+\n+\t;; Check if target is within 32-bit Thumb2 b{cond} range.\n+\t(if_then_else (and (ge (minus (match_dup 0) (pc))(const_int -1048568))\n+\t\t\t   (le (minus (match_dup 0) (pc)) (const_int 1048576)))\n+\n+\t  ;; Target is Thumb2, within wide range.\n+\t  ;; Generate b{cond}.\n+\t  (const_int 4)\n+\t  ;; Target is Thumb2, out of range.\n+\t  ;; Generate narrow b{cond} and unconditional branch b.\n+\t  (const_int 6)))))]\n )\n \n \f"}, {"sha": "cc9f3c15f85261b53f02524600e254b7dd9c46fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f77a6dea2f312ee1743f3dde465c1b8453ee13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44f77a6dea2f312ee1743f3dde465c1b8453ee13", "patch": "@@ -1,3 +1,8 @@\n+2020-02-03  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/91816\n+\t* gcc.target/arm/pr91816.c: New test.\n+\n 2020-02-03  Julian Brown  <julian@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}]}