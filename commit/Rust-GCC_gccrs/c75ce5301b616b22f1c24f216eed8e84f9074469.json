{"sha": "c75ce5301b616b22f1c24f216eed8e84f9074469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1Y2U1MzAxYjYxNmIyMmYxYzI0ZjIxNmVlZDhlODRmOTA3NDQ2OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-08-17T18:41:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-08-17T18:41:59Z"}, "message": "constexpr.c (cxx_eval_store_expression): Don't set CONSTRUCTOR_NO_IMPLICIT_ZERO if we have an enclosing CONSTRUCTOR...\n\n\t* constexpr.c (cxx_eval_store_expression): Don't set\n\tCONSTRUCTOR_NO_IMPLICIT_ZERO if we have an enclosing CONSTRUCTOR\n\twithout it.\n\t(cxx_eval_array_reference): Check it.\n\nFrom-SVN: r226948", "tree": {"sha": "e1852ad43d4edf8fed55cd7acbba859ac143878d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1852ad43d4edf8fed55cd7acbba859ac143878d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c75ce5301b616b22f1c24f216eed8e84f9074469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75ce5301b616b22f1c24f216eed8e84f9074469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75ce5301b616b22f1c24f216eed8e84f9074469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75ce5301b616b22f1c24f216eed8e84f9074469/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c563482ac83d8d2874f2cd4f608eae57d966dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c563482ac83d8d2874f2cd4f608eae57d966dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c563482ac83d8d2874f2cd4f608eae57d966dee"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "c6bd397748a00cf630052a3313ed05c3523eaa01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c75ce5301b616b22f1c24f216eed8e84f9074469", "patch": "@@ -1,5 +1,10 @@\n 2015-08-17  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (cxx_eval_store_expression): Don't set\n+\tCONSTRUCTOR_NO_IMPLICIT_ZERO if we have an enclosing CONSTRUCTOR\n+\twithout it.\n+\t(cxx_eval_array_reference): Check it.\n+\n \t* except.c (check_noexcept_r): Assert that fn is POINTER_TYPE_P.\n \n 2015-08-14  Jason Merrill  <jason@redhat.com>"}, {"sha": "35875a84361b2d86b46c04f4d745f78976fe5dcf", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c75ce5301b616b22f1c24f216eed8e84f9074469", "patch": "@@ -1732,6 +1732,18 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n     {\n       if (tree_int_cst_lt (index, array_type_nelts_top (TREE_TYPE (ary))))\n \t{\n+\t  if (TREE_CODE (ary) == CONSTRUCTOR\n+\t      && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))\n+\t    {\n+\t      /* 'ary' is part of the aggregate initializer we're currently\n+\t\t building; if there's no initializer for this element yet,\n+\t\t that's an error. */\n+\t      if (!ctx->quiet)\n+\t\terror (\"accessing uninitialized array element\");\n+\t      *non_constant_p = true;\n+\t      return t;\n+\t    }\n+\n \t  /* If it's within the array bounds but doesn't have an explicit\n \t     initializer, it's value-initialized.  */\n \t  tree val = build_value_init (elem_type, tf_warning_or_error);\n@@ -2674,13 +2686,17 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n   type = TREE_TYPE (object);\n+  bool no_zero_init = true;\n   while (!refs->is_empty())\n     {\n       if (*valp == NULL_TREE)\n \t{\n \t  *valp = build_constructor (type, NULL);\n-\t  CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp) = true;\n+\t  CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp) = no_zero_init;\n \t}\n+      /* If the value of object is already zero-initialized, any new ctors for\n+\t subobjects will also be zero-initialized.  */\n+      no_zero_init = CONSTRUCTOR_NO_IMPLICIT_ZERO (*valp);\n \n       constructor_elt ce;\n       type = refs->pop();\n@@ -2708,7 +2724,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       new_ctx.ctor = build_constructor (type, NULL);\n       if (*valp == NULL_TREE)\n \t*valp = new_ctx.ctor;\n-      CONSTRUCTOR_NO_IMPLICIT_ZERO (new_ctx.ctor) = true;\n+      CONSTRUCTOR_NO_IMPLICIT_ZERO (new_ctx.ctor) = no_zero_init;\n       new_ctx.object = target;\n     }\n "}, {"sha": "347ee54f06f208c87e4244535a7b1f7530ef14bf", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array12.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c75ce5301b616b22f1c24f216eed8e84f9074469/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array12.C?ref=c75ce5301b616b22f1c24f216eed8e84f9074469", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct A { int ar[3]; };\n+int main()\n+{\n+  constexpr A a1 = { 0, a1.ar[0] };\n+  constexpr A a2 = { a2.ar[0] };\t// { dg-error \"uninitialized\" }\n+}"}]}