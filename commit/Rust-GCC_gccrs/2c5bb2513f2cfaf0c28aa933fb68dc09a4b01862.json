{"sha": "2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "node_id": "C_kwDOANBUbNoAKDJjNWJiMjUxM2YyY2ZhZjBjMjhhYTkzM2ZiNjhkYzA5YTRiMDE4NjI", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T14:23:21Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve tests for vmax*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxaq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxavq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxvq_u8.c: Likewise.", "tree": {"sha": "4fa726be4386d5998a8477d3dea962efd9e99a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa726be4386d5998a8477d3dea962efd9e99a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d117647edc8fcae63abbdecbf38e9f22d0b1e3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d117647edc8fcae63abbdecbf38e9f22d0b1e3de"}], "stats": {"total": 1575, "additions": 1318, "deletions": 257}, "files": [{"sha": "4c487ed7f60e648debe1a1d454d02f2b1d826eb4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxaq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxat.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5156467f0c19aa22337283b34f8467cfb0049f70", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxaq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxat.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6564bd88c9b2485538b56cb284698f7798ccc29f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_m_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_m_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxaq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxat.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxat.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6cabf9f723b268a84ed37ab7dd750afe4865c4c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxa.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, int16x8_t b)\n {\n   return vmaxaq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxa.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, int16x8_t b)\n {\n   return vmaxaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d0dd3c236007455d711703e9f042862ccf86fb01", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxa.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, int32x4_t b)\n {\n   return vmaxaq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxa.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, int32x4_t b)\n {\n   return vmaxaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a7344638dcf36d7063e3b02c7be473439029aa1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxaq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxaq_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxa.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, int8x16_t b)\n {\n   return vmaxaq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxa.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, int8x16_t b)\n {\n   return vmaxaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxa.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ac81c8fd1bd7c6156c6be65f6ad16aa0014407eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s16.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxavq_p_s16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-\n-int16_t\n-foo2 (uint8_t a, int16x8_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16_t\n+foo2 (int16x8_t b, mve_pred16_t p)\n {\n-  return vmaxavq_p (a, b, p);\n+  return vmaxavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxavt.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "119c0c34c768e02ccf6a2382e5c89ea0952d39ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s32.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxavq_p_s32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-\n-int32_t\n-foo2 (uint16_t a, int32x4_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b, mve_pred16_t p)\n {\n-  return vmaxavq_p (a, b, p);\n+  return vmaxavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxavt.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dfd7f828ef6213c485da4dbed258e46b37c701cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_p_s8.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_p_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxavq_p_s8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxavq_p (a, b, p);\n }\n \n-\n-int8_t\n-foo2 (uint32_t a, int8x16_t b, mve_pred16_t p)\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxavt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8_t\n+foo2 (int8x16_t b, mve_pred16_t p)\n {\n-  return vmaxavq_p (a, b, p);\n+  return vmaxavq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxavt.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f59e8e454264864a0cd44cf229613cc7060a289", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s16.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, int16x8_t b)\n {\n   return vmaxavq_s16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, int16x8_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-\n-int16_t\n-foo2 (uint8_t a, int16x8_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxav.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16_t\n+foo2 (int16x8_t b)\n {\n-  return vmaxavq (a, b);\n+  return vmaxavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxav.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "716b8a2a979f277e7965c61b8405939415c8e1e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s32.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, int32x4_t b)\n {\n   return vmaxavq_s32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, int32x4_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-\n-int32_t\n-foo2 (uint16_t a, int32x4_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxav.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32_t\n+foo2 (int32x4_t b)\n {\n-  return vmaxavq (a, b);\n+  return vmaxavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxav.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0f1a87af54b1cf18ca2de15f74c5e67f83631075", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxavq_s8.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxavq_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, int8x16_t b)\n {\n   return vmaxavq_s8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, int8x16_t b)\n {\n   return vmaxavq (a, b);\n }\n \n-\n-int8_t\n-foo2 (uint32_t a, int8x16_t b)\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxav.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8_t\n+foo2 (int8x16_t b)\n {\n-  return vmaxavq (a, b);\n+  return vmaxavq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxav.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cd4c813bf3b8186f6f87e2dcbfdae2eaf47fe37c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnma.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vmaxnmaq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnma.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnma.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vmaxnmaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnma.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "527466fc13139bd0475635970222dc4c17c37716", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnma.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vmaxnmaq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnma.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnma.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vmaxnmaq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnma.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "39c68cdc172e2063a6e70e2d49ea0f973d8275aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmat.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmaq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmat.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmat.f16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f6f8bf075497be857c7f54fc768a8139aec62f75", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmaq_m_f32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmaq_m_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmat.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmaq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmat.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmat.f32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmaq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4c1f20be036613185d7f04d05bdfdfbf44d3cf52", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f16.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b)\n {\n   return vmaxnmavq_f16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vmaxnmavq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxnmav.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b)\n+foo2 (float16x8_t b)\n {\n-  return vmaxnmavq (a, b);\n+  return vmaxnmavq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmav.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "86087335ceaa6f932d60fbc92680eb218cbe7bd0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b)\n {\n   return vmaxnmavq_f32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vmaxnmavq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxnmav.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b)\n+foo2 (float32x4_t b)\n {\n-  return vmaxnmavq (a, b);\n+  return vmaxnmavq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmav.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a4973567d5e131b43631caa17ebb483da9cd78c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p_f16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+foo2 (float16x8_t b, mve_pred16_t p)\n {\n-  return vmaxnmavq_p (a, b, p);\n+  return vmaxnmavq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmavt.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b229cb3a322c22786121cc982f9d01ef3c9c6ef1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p_f32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmavq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmavt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+foo2 (float32x4_t b, mve_pred16_t p)\n {\n-  return vmaxnmavq_p (a, b, p);\n+  return vmaxnmavq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmavt.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "faf968ebb21387c0548be2dc9e59d90326a6c8bc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_f16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnm.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vmaxnmq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnm.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnm.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vmaxnmq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnm.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f7ee01b1f143cf945c2b7aaf3ce91a8fc9e63b27", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_f32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnm.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vmaxnmq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnm.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnm.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vmaxnmq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmaxnm.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ee3444393ed8d6e0f8da1a906a0613afa01eed70", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmq_m_f16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5d434432856bda31e62c131e17f05715c05c4de0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmq_m_f32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dad76734fd8a94cc82beaabd5ff3e6125910c69d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_x_f16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmq_x_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16x8_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2fe8c0d4f3dd7691197c1e4780ca6d9bd24b9979", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_x_f32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_x_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmq_x_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmt.f32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32x4_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9787cc1ba90d10f029e93ad16b9519d2f9f8e21f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f16.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b)\n {\n   return vmaxnmvq_f16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b)\n {\n   return vmaxnmvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxnmv.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b)\n+foo2 (float16x8_t b)\n {\n-  return vmaxnmvq (a, b);\n+  return vmaxnmvq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmv.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b1191876850cfe27a70cb2c1f9a23d380bb87368", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b)\n {\n   return vmaxnmvq_f32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b)\n {\n   return vmaxnmvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxnmv.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b)\n+foo2 (float32x4_t b)\n {\n-  return vmaxnmvq (a, b);\n+  return vmaxnmvq (1.1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmv.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0b1740d5ed2b48b9b8f0b769ecdb24f3a27a4a00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p_f16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float16_t\n-foo2 (float32_t a, float16x8_t b, mve_pred16_t p)\n+foo2 (float16x8_t b, mve_pred16_t p)\n {\n-  return vmaxnmvq_p (a, b, p);\n+  return vmaxnmvq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmvt.f16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ca6ad91d24d81b177b47bb1ced31eeb205f543ee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p_f32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vmaxnmvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxnmvt.f32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n float32_t\n-foo2 (float16_t a, float32x4_t b, mve_pred16_t p)\n+foo2 (float32x4_t b, mve_pred16_t p)\n {\n-  return vmaxnmvq_p (a, b, p);\n+  return vmaxnmvq_p (1.1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxnmvt.f32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "548824fc58affeef1783f499e237b8e5d68cc5c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e935729b47db2daca94213dca12c95eba8cf9bc3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8028fa031c7c07f6e8f1b913ed13a8551cde3d2d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_s8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e872f9e72f85161378b898fb37b6423016208097", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u16.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_m_u16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "76606555881312a458d1d9a1c08d2399cb53e866", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u32.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_m_u32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7ade467cafda7a233d3f231bb718f0c3325b93e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_m_u8.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_m_u8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,23 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_m_u8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bf547a2420d5472bcebaea33886ceefcd64a994f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vmaxq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "25bb950c0bf1888699d2186e7aa17830492aea63", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vmaxq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "33057f1a58e274f7b7fb405e089ffc7a9adf68a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_s8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vmaxq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7717a9a5057504736841b64f5c458e076ec1a705", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u16.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vmaxq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "36b5c276cfe670f22c86566117e17223a476b253", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u32.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vmaxq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e643e5f3e3cdca84f0ece250cc5700a98283188c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_u8.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_u8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmax.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vmaxq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmax.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vmaxq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vmax.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a32feb0d7cd88b4af799d7e1b406562ec3d08a8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_x_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3ac1994c4f8051e0536fffbd3b8b67d97a8d8392", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_x_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c9ba33d1504e29c0822b839200677f5011d99aec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_s8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_x_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "954a9e2f02a9772a833f50abb8178fd7e40a01a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u16.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_x_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "022d418af84c50b04584bb6e784fa8f326bc13a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u32.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_x_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7e1687a8b7272e6a02712726acf3925f8ba6fe94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxq_x_u8.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxq_x_u8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,22 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_x_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vmaxt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxt.u8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxq_x (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a97703eb58ca325cf1c1c1988a46cd666cfa0f08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s16.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_s16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo1 (int16_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n-int16_t\n-foo2 (int8_t a, int16x8_t b, mve_pred16_t p)\n-{\n-  return vmaxvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b4bddcb8312299abfef203cc1cfdc0ce177bf1e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s32.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_s32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n-int32_t\n-foo2 (int16_t a, int32x4_t b, mve_pred16_t p)\n-{\n-  return vmaxvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ee8c3e9155fbf3fb30dffdb66ff9f31abdfaec36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_s8.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_s8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo1 (int8_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n-int8_t\n-foo2 (int32_t a, int8x16_t b, mve_pred16_t p)\n-{\n-  return vmaxvq_p (a, b, p);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "906adf85936e5ef831f31ba7d87aa93446ada899", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u16.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_u16 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n-foo2 (uint32_t a, uint16x8_t b, mve_pred16_t p)\n+foo2 (uint16x8_t b, mve_pred16_t p)\n {\n-  return vmaxvq_p (a, b, p);\n+  return vmaxvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.u16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "acc5367c5a29a6f7ccb6e7baaa19b69085212f22", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u32.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_u32 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo2 (uint8_t a, uint32x4_t b, mve_pred16_t p)\n+foo2 (uint32x4_t b, mve_pred16_t p)\n {\n-  return vmaxvq_p (a, b, p);\n+  return vmaxvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.u32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "358cb40f829d45e793c1bc510c3a7f74abba59cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_p_u8.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_p_u8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p_u8 (a, b, p);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vmaxvq_p (a, b, p);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmaxvt.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n-foo2 (uint16_t a, uint8x16_t b, mve_pred16_t p)\n+foo2 (uint8x16_t b, mve_pred16_t p)\n {\n-  return vmaxvq_p (a, b, p);\n+  return vmaxvq_p (1, b, p);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxvt.u8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "485355a7d72b997901aea7651a40712af028dfa7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s16.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo (int16_t a, int16x8_t b)\n {\n   return vmaxvq_s16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.s16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16_t\n foo1 (int16_t a, int16x8_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n-int16_t\n-foo2 (int8_t a, int16x8_t b)\n-{\n-  return vmaxvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.s16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3b9075689a0c3a65837fd6552cb081749fd625e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s32.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo (int32_t a, int32x4_t b)\n {\n   return vmaxvq_s32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.s32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32_t\n foo1 (int32_t a, int32x4_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n-int32_t\n-foo2 (int16_t a, int32x4_t b)\n-{\n-  return vmaxvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.s32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f13a0168d9dd4c01ce7de4a404ebccd770105e4f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_s8.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_s8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo (int8_t a, int8x16_t b)\n {\n   return vmaxvq_s8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.s8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8_t\n foo1 (int8_t a, int8x16_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n-int8_t\n-foo2 (int32_t a, int8x16_t b)\n-{\n-  return vmaxvq (a, b);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.s8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6a0fe254043f44912dde8e3c1cf50d060611e89a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u16.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u16.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo (uint16_t a, uint16x8_t b)\n {\n   return vmaxvq_u16 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n foo1 (uint16_t a, uint16x8_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxv.u16\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16_t\n-foo2 (uint32_t a, uint16x8_t b)\n+foo2 (uint16x8_t b)\n {\n-  return vmaxvq (a, b);\n+  return vmaxvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.u16\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "eed20046e5364d48d33478c500493c266d888cbc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u32.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u32.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo (uint32_t a, uint32x4_t b)\n {\n   return vmaxvq_u32 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n foo1 (uint32_t a, uint32x4_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxv.u32\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32_t\n-foo2 (uint8_t a, uint32x4_t b)\n+foo2 (uint32x4_t b)\n {\n-  return vmaxvq (a, b);\n+  return vmaxvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.u32\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d44a6d3bb0225baede1230e3bca9acca65a7edb7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxvq_u8.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxvq_u8.c?ref=2c5bb2513f2cfaf0c28aa933fb68dc09a4b01862", "patch": "@@ -1,28 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmaxv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo (uint8_t a, uint8x16_t b)\n {\n   return vmaxvq_u8 (a, b);\n }\n \n \n+/*\n+**foo1:\n+**\t...\n+**\tvmaxv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n foo1 (uint8_t a, uint8x16_t b)\n {\n   return vmaxvq (a, b);\n }\n \n-\n+/*\n+**foo2:\n+**\t...\n+**\tvmaxv.u8\t(?:ip|fp|r[0-9]+), q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8_t\n-foo2 (uint16_t a, uint8x16_t b)\n+foo2 (uint8x16_t b)\n {\n-  return vmaxvq (a, b);\n+  return vmaxvq (1, b);\n }\n \n-/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n-/* { dg-final { scan-assembler-times \"vmaxv.u8\" 3 } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}