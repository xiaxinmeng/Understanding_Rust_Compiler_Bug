{"sha": "0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkMWRlNmZjOTY3YTE2ODNiYjVlYzM0NDYyYmY2ZDNlZjM5Y2RjOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-05-13T20:13:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-05-13T20:13:15Z"}, "message": "std_fstream.h (basic_filebuf::_M_codecvt): Add cached member.\n\n\n2003-05-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/std_fstream.h (basic_filebuf::_M_codecvt): Add\n\tcached member.\n\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf):\n\tInitialize _M_codecvt.\n\t(basic_filebuf::imbue): Same.\n\t(basic_filebuf::showmanyc): Use it.\n\t(basic_filebuf::underflow): Use it.\n\t(basic_filebuf::_M_convert_to_external): Use it.\n\t(basic_filebuf::seekoff): Use it.\n\t(basic_filebuf::imbue): Use it, tweaks.\n\t* include/bits/localefwd.h (__check_facet): New.\n\t* include/bits/locale_classes.h: Tweaks.\n\t* include/bits/locale_facets.tcc: Tweaks.\n\t* include/bits/basic_ios.h (basic_ios::_M_check_facet): Remove.\n\t_M_fctype to _M_ctype, _M_fnumput to _M_num_put, _M_fnumget to\n\t_M_num_get. Change _M_check_facet to __check_facet. Tweaks.\n\t* include/bits/basic_ios.tcc: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/std/std_streambuf.h: Same.\n\t* testsuite/27_io/basic_filebuf/imbue/char/2.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/char/3.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/2.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/3.cc: New.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/9322.cc: New.\n\nFrom-SVN: r66781", "tree": {"sha": "a60c45a328c27b7215a6c1c1c6b74c81468147ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60c45a328c27b7215a6c1c1c6b74c81468147ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/comments", "author": null, "committer": null, "parents": [{"sha": "d24273abda777ab605b1efb59bdf51db27693ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24273abda777ab605b1efb59bdf51db27693ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24273abda777ab605b1efb59bdf51db27693ca7"}], "stats": {"total": 666, "additions": 494, "deletions": 172}, "files": [{"sha": "c7273a27e392d82f013574eb6dd9972bc2c07f2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -1,3 +1,32 @@\n+2003-05-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/std_fstream.h (basic_filebuf::_M_codecvt): Add\n+\tcached member.\n+\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf):\n+\tInitialize _M_codecvt.\n+\t(basic_filebuf::imbue): Same.\n+\t(basic_filebuf::showmanyc): Use it.\n+\t(basic_filebuf::underflow): Use it.\n+\t(basic_filebuf::_M_convert_to_external): Use it.\n+\t(basic_filebuf::seekoff): Use it.\n+\t(basic_filebuf::imbue): Use it, tweaks.\n+\t* include/bits/localefwd.h (__check_facet): New.\n+\t* include/bits/locale_classes.h: Tweaks.\n+\t* include/bits/locale_facets.tcc: Tweaks.\t\n+\t* include/bits/basic_ios.h (basic_ios::_M_check_facet): Remove.\n+\t_M_fctype to _M_ctype, _M_fnumput to _M_num_put, _M_fnumget to\n+\t_M_num_get. Change _M_check_facet to __check_facet. Tweaks.\n+\t* include/bits/basic_ios.tcc: Same.\t\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/std/std_streambuf.h: Same.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/2.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/3.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/2.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/3.cc: New.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/9322.cc: New.\n+\t\n 2003-05-12  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/27_io/basic_filebuf/sgetc/char/1.cc: Remove"}, {"sha": "98b73cadd7cce3f442461b0637962d186941a7e3", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -90,11 +90,11 @@ namespace std\n       basic_streambuf<_CharT, _Traits>*              _M_streambuf;\n \n       // Cached use_facet<ctype>, which is based on the current locale info.\n-      const __ctype_type*                            _M_fctype;      \n+      const __ctype_type*                            _M_ctype;      \n       // For ostream.\n-      const __numput_type*                           _M_fnumput;\n+      const __numput_type*                           _M_num_put;\n       // For istream.\n-      const __numget_type*                           _M_fnumget;\n+      const __numget_type*                           _M_num_get;\n \n     public:\n       //@{\n@@ -241,7 +241,7 @@ namespace std\n       */\n       explicit \n       basic_ios(basic_streambuf<_CharT, _Traits>* __sb) \n-      : ios_base(), _M_fctype(0), _M_fnumput(0), _M_fnumget(0)\n+      : ios_base(), _M_ctype(0), _M_num_put(0), _M_num_get(0)\n       { this->init(__sb); }\n \n       /**\n@@ -419,7 +419,7 @@ namespace std\n        *  The default constructor does nothing and is not normally\n        *  accessible to users.\n       */\n-      basic_ios() : ios_base(), _M_fctype(0), _M_fnumput(0), _M_fnumget(0)\n+      basic_ios() : ios_base(), _M_ctype(0), _M_num_put(0), _M_num_get(0)\n       { }\n \n       /**\n@@ -431,14 +431,6 @@ namespace std\n       void \n       init(basic_streambuf<_CharT, _Traits>* __sb);\n \n-      bool\n-      _M_check_facet(const locale::facet* __f) const\n-      {\n-\tif (!__f)\n-\t  __throw_bad_cast();\n-\treturn true;\n-      }\n-\n       void\n       _M_cache_locale(const locale& __loc);\n "}, {"sha": "cf2701effb21725b675789377ea4a25b951e54d6", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -110,22 +110,12 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     char\n     basic_ios<_CharT, _Traits>::narrow(char_type __c, char __dfault) const\n-    { \n-      char __ret = __dfault;\n-      if (_M_check_facet(_M_fctype))\n-\t__ret = _M_fctype->narrow(__c, __dfault); \n-      return __ret;\n-    }\n+    { return __check_facet(_M_ctype).narrow(__c, __dfault); }\n \n   template<typename _CharT, typename _Traits>\n     _CharT\n     basic_ios<_CharT, _Traits>::widen(char __c) const\n-    {\n-      char_type __ret = char_type();\n-      if (_M_check_facet(_M_fctype))\n-\t__ret = _M_fctype->widen(__c); \n-      return __ret;\n-    }\n+    { return __check_facet(_M_ctype).widen(__c); }\n \n   // Locales:\n   template<typename _CharT, typename _Traits>\n@@ -181,11 +171,11 @@ namespace std\n     basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\n     {\n       if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n-\t_M_fctype = &use_facet<__ctype_type>(__loc);\n+\t_M_ctype = &use_facet<__ctype_type>(__loc);\n       if (__builtin_expect(has_facet<__numput_type>(__loc), true))\n-\t_M_fnumput = &use_facet<__numput_type>(__loc); \n+\t_M_num_put = &use_facet<__numput_type>(__loc); \n       if (__builtin_expect(has_facet<__numget_type>(__loc), true))\n-\t_M_fnumget = &use_facet<__numget_type>(__loc); \n+\t_M_num_get = &use_facet<__numget_type>(__loc); \n       static_cast<__locale_cache<_CharT>&>(_M_cache())._M_init(__loc); \n     }\n "}, {"sha": "3397071bd84f465dcd97c57be97654735c8ae626", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -78,8 +78,13 @@ namespace std\n     _M_state_cur(__state_type()), _M_state_beg(__state_type()), \n     _M_buf(NULL), _M_buf_size(BUFSIZ), _M_buf_allocated(false),\n     _M_last_overflowed(false), _M_pback_cur_save(0),\n-    _M_pback_end_save(0), _M_pback_init(false)\n-    { this->_M_buf_unified = true; }\n+    _M_pback_end_save(0), _M_pback_init(false), _M_codecvt(0)\n+    { \n+      this->_M_buf_unified = true; \t  \n+      if (__builtin_expect(has_facet<__codecvt_type>(this->_M_buf_locale), \n+\t\t\t                             true))\n+\t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n+    }\n \n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n@@ -163,17 +168,14 @@ namespace std\n     {\n       streamsize __ret = -1;\n       const bool __testin = this->_M_mode & ios_base::in;\n-      const locale __loc = this->getloc();\n-      const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n \n       if (__testin && this->is_open())\n \t{\n-\t  __ret = this->_M_in_end - this->_M_in_cur;\n-\n \t  // For a stateful encoding (-1) the pending sequence might be just\n \t  // shift and unshift prefixes with no actual character.\n-\t  if (__cvt.encoding() >= 0)\n-\t    __ret += _M_file.showmanyc() / __cvt.max_length();\n+\t  __ret = this->_M_in_end - this->_M_in_cur;\n+\t  if (__check_facet(_M_codecvt).encoding() >= 0)\n+\t    __ret += _M_file.showmanyc() / _M_codecvt->max_length();\n \t}\n \n       _M_last_overflowed = false;\t\n@@ -220,9 +222,8 @@ namespace std\n \t    {\n \t      streamsize __elen = 0;\n \t      streamsize __ilen = 0;\n-\t      const locale __loc = this->getloc();\n-\t      const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-\t      if (__cvt.always_noconv())\n+\n+\t      if (__check_facet(_M_codecvt).always_noconv())\n \t\t{\n \t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), _M_buf_size);\n \t\t  __ilen = __elen;\n@@ -235,9 +236,9 @@ namespace std\n \t\t  const char* __eend;\n \t\t  char_type* __iend;\n \t\t  codecvt_base::result __r;\n-\t\t  __r = __cvt.in(_M_state_cur, __buf, __buf + __elen, __eend, \n-\t\t\t\t this->_M_in_beg, \n-\t\t\t\t this->_M_in_beg + _M_buf_size, __iend);\n+\t\t  __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n+\t\t\t\t       __eend, this->_M_in_beg, \n+\t\t\t\t       this->_M_in_beg + _M_buf_size, __iend);\n \t\t  if (__r == codecvt_base::ok)\n \t\t    __ilen = __iend - this->_M_in_beg;\n \t\t  else if (__r == codecvt_base::noconv)\n@@ -400,7 +401,6 @@ namespace std\n \t  else \n \t    __ret = this->_M_overflow(__c);\n \t}\n-\n       _M_last_overflowed = false;    // Set in _M_overflow, below.\n       return __ret;\n     }\n@@ -414,26 +414,24 @@ namespace std\n       streamsize __elen = 0;\n       streamsize __plen = 0;\n \n-      const locale __loc = this->getloc();\n-      const __codecvt_type& __cvt = use_facet<__codecvt_type>(__loc);\n-      if (__cvt.always_noconv() && __ilen)\n+      if (__check_facet(_M_codecvt).always_noconv() && __ilen)\n \t{\n \t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n \t  __plen += __ilen;\n \t}\n       else\n \t{\n \t  // Worst-case number of external bytes needed.\n-\t  int __ext_multiplier = __cvt.encoding();\n+\t  int __ext_multiplier = _M_codecvt->encoding();\n \t  if (__ext_multiplier ==  -1 || __ext_multiplier == 0)\n \t    __ext_multiplier = sizeof(char_type);\n \t  streamsize __blen = __ilen * __ext_multiplier;\n \t  char* __buf = static_cast<char*>(__builtin_alloca(__blen));\n \t  char* __bend;\n \t  const char_type* __iend;\n \t  codecvt_base::result __r;\n-\t  __r = __cvt.out(_M_state_cur, __ibuf, __ibuf + __ilen,\n-\t\t\t  __iend, __buf, __buf + __blen, __bend);\n+\t  __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,\n+\t\t\t\t__iend, __buf, __buf + __blen, __bend);\n \t  \n \t  if (__r == codecvt_base::ok || __r == codecvt_base::partial)\n \t    __blen = __bend - __buf;\n@@ -460,8 +458,9 @@ namespace std\n \t    {\n \t      const char_type* __iresume = __iend;\n \t      streamsize __rlen = this->_M_out_lim - __iend;\n-\t      __r = __cvt.out(_M_state_cur, __iresume, __iresume + __rlen, \n-\t\t\t      __iend, __buf, __buf + __blen, __bend);\n+\t      __r = _M_codecvt->out(_M_state_cur, __iresume,\n+\t\t\t\t    __iresume + __rlen, __iend, __buf, \n+\t\t\t\t    __buf + __blen, __bend);\n \t      if (__r != codecvt_base::error)\n \t\t{\n \t\t  __rlen = __bend - __buf;\n@@ -470,7 +469,6 @@ namespace std\n \t\t}\n \t    }\n \t}\n-\n       return __elen && __elen == __plen;\n     }\n \n@@ -510,8 +508,8 @@ namespace std\n       const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n       \n       int __width = 0;\n-      if (has_facet<__codecvt_type>(this->_M_buf_locale))\n-\t  __width = use_facet<__codecvt_type>(this->_M_buf_locale).encoding();\n+      if (_M_codecvt)\n+\t  __width = _M_codecvt->encoding();\n       if (__width < 0)\n \t__width = 0;\n \n@@ -523,31 +521,30 @@ namespace std\n \n \t  if (__way != ios_base::cur || __off != 0)\n \t    { \n-\t      off_type __computed_off = __width * __off;\n-\t      \n+\t      // Sync the internal and external streams.\t      \n \t      const bool __testget = this->_M_in_beg < this->_M_in_end;\n \t      const bool __testput = this->_M_out_beg < this->_M_out_lim;\n-\t      // Sync the internal and external streams.\n-\t      // out\n+\t      off_type __computed_off = __width * __off;\n+\n \t      if (__testput || _M_last_overflowed)\n \t\t{\n \t\t  // Part one: update the output sequence.\n \t\t  this->sync();\n+\n \t\t  // Part two: output unshift sequence.\n \t\t  _M_output_unshift();\n \t\t}\n-\t      //in\n \t      else if (__testget && __way == ios_base::cur)\n \t\t__computed_off += this->_M_in_cur - _M_filepos;\n \n \t      // Return pos_type(off_type(-1)) in case of failure.\n \t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t      _M_set_indeterminate();\n \t    }\n-\t  // NB: Need to do this in case _M_file in indeterminate\n-\t  // state, ie _M_file._offset == -1\n \t  else\n \t    {\n+\t      // NB: Need to do this in case _M_file in indeterminate\n+\t      // state, ie _M_file._offset == -1\n \t      pos_type __tmp = _M_file.seekoff(__off, ios_base::cur, __mode);\n \t      if (__tmp >= 0)\n \t\t{\n@@ -584,16 +581,23 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     imbue(const locale& __loc)\n     {\n-      const bool __testbeg = this->_M_in_cur == this->_M_in_beg\n-\t                     && this->_M_out_cur == this->_M_out_beg;\n+      const bool __testbeg = !this->seekoff(0, ios_base::cur, this->_M_mode);\n+      const bool __teststate = __check_facet(_M_codecvt).encoding() == -1;\n \n-      if (__testbeg && this->_M_buf_locale != __loc)\n-\tthis->_M_buf_locale = __loc;\n-\n-      // NB this may require the reconversion of previously\n-      // converted chars. This in turn may cause the reconstruction\n-      // of the original file. YIKES!!\n-      // XXX The part in the above comment is not done.\n+      if (this->_M_buf_locale != __loc \n+\t  && (!this->is_open() || (__testbeg && !__teststate)))\n+\t{\n+\t  this->_M_buf_locale = __loc;\n+\t  if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))\n+\t    _M_codecvt = &use_facet<__codecvt_type>(__loc);\n+\n+\t  // NB This may require the reconversion of previously\n+\t  // converted chars. This in turn may cause the\n+\t  // reconstruction of the original file. YIKES!!  This\n+\t  // implementation interprets this requirement as requiring\n+\t  // the file position be at the beginning, and a stateless\n+\t  // encoding, or that the filebuf be closed. Opinions may differ.\n+\t}\n       _M_last_overflowed = false;\t\n     }\n "}, {"sha": "a9448b09c09f34e55e888bde7b7d8efbb5b2f1f2", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -53,10 +53,10 @@ namespace std\n \t      __streambuf_type* __sb = __in.rdbuf();\n \t      __int_type __c = __sb->sgetc();\n \n-\t      if (__in._M_check_facet(__in._M_fctype))\n-\t\twhile (!traits_type::eq_int_type(__c, __eof)\n-\t\t       && __in._M_fctype->is(ctype_base::space, \n-\t\t\t\t\t     traits_type::to_char_type(__c)))\n+\t      __check_facet(__in._M_ctype);\n+\t      while (!traits_type::eq_int_type(__c, __eof)\n+\t\t     && __in._M_ctype->is(ctype_base::space, \n+\t\t\t\t\t  traits_type::to_char_type(__c)))\n \t\t  __c = __sb->snextc();\n \n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n@@ -114,8 +114,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -142,8 +141,7 @@ namespace std\n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __l);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n@@ -178,8 +176,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -206,8 +203,7 @@ namespace std\n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      long __l;\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __l);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __l);\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n@@ -242,8 +238,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -269,8 +264,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -296,8 +290,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -324,8 +317,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -351,8 +343,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -379,8 +370,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -406,8 +396,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -433,8 +422,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -460,8 +448,7 @@ namespace std\n \t  try \n \t    {\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-\t      if (_M_check_facet(this->_M_fnumget))\n-\t\tthis->_M_fnumget->get(*this, 0, *this, __err, __n);\n+\t      __check_facet(this->_M_num_get).get(*this, 0, *this, __err, __n);\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)"}, {"sha": "e7210f821fedc48b002333a6158c7ecb7b626bdb", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -64,14 +64,14 @@ namespace std\n     friend class facet;\n     friend class _Impl;\n \n-    template<typename _Facet>\n-      friend const _Facet& \n-      use_facet(const locale&);\n-    \n     template<typename _Facet>\n       friend bool \n       has_facet(const locale&) throw();\n- \n+\n+    template<typename _Facet>\n+      friend const _Facet& \n+      use_facet(const locale&);\n+     \n     // Category values:\n     // NB: Order must match _S_facet_categories definition in locale.cc\n     static const category none\t\t= 0;"}, {"sha": "f44531799f015a21f17feddc8041c0d34c2b14e3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -67,23 +67,23 @@ namespace std\n     }\n \n   template<typename _Facet>\n-    const _Facet&\n-    use_facet(const locale& __loc)\n+    inline bool\n+    has_facet(const locale& __loc) throw()\n     {\n       size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n-        __throw_bad_cast();\n-      return static_cast<const _Facet&>(*__facets[__i]);\n+      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n     }\n \n   template<typename _Facet>\n-    bool\n-    has_facet(const locale& __loc) throw()\n+    inline const _Facet&\n+    use_facet(const locale& __loc)\n     {\n       size_t __i = _Facet::id._M_id();\n       const locale::facet** __facets = __loc._M_impl->_M_facets;\n-      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n+      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n+        __throw_bad_cast();\n+      return static_cast<const _Facet&>(*__facets[__i]);\n     }\n \n "}, {"sha": "16fa8821e9a3d9b9973e6e803e2b4b9e8b44eae3", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -171,13 +171,22 @@ namespace std\n   template<typename _CharT> \n     class messages_byname;\n \n+  template<typename _Facet>\n+    bool\n+    has_facet(const locale& __loc) throw();\n+\n   template<typename _Facet>\n     const _Facet&\n     use_facet(const locale& __loc);\n \n   template<typename _Facet>\n-    bool\n-    has_facet(const locale& __loc) throw();\n+    inline const _Facet&\n+    __check_facet(const _Facet* __f)\n+    { \n+      if (!__f)\n+\t__throw_bad_cast(); \n+      return *__f;\n+    }\n } // namespace std\n \n #endif"}, {"sha": "620458806a14d3a9ad65e3cda723478afe4c8581", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 43, "deletions": 51, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -157,10 +157,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -183,23 +183,19 @@ namespace std\n \t{\n \t  try \n \t    {\n+\t      bool __b = false;\n \t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      if (_M_check_facet(this->_M_fnumput))\n+\t      __check_facet(this->_M_num_put);\n+\t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n-\t\t  bool __b = false;\n-\t\t  if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n-\t\t    {\n-\t\t      unsigned long __l = static_cast<unsigned long>(__n);\n-\t\t      __b = this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t\t  __c, __l).failed();\n-\t\t    }\n-\t\t  else\n-\t\t    __b = this->_M_fnumput->put(*this, *this,\n-\t\t\t\t\t\t__c, __n).failed();\n-\t\t  if (__b)  \n-\t\t    this->setstate(ios_base::badbit);\n+\t\t  unsigned long __l = static_cast<unsigned long>(__n);\n+\t\t  __b = this->_M_num_put->put(*this, *this, __c, __l).failed();\n \t\t}\n+\t      else\n+\t\t__b = this->_M_num_put->put(*this, *this, __c, __n).failed();\n+\t      if (__b)  \n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -222,10 +218,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -249,24 +245,20 @@ namespace std\n \t{\n \t  try \n \t    {\n+\t      bool __b = false;\n \t      char_type __c = this->fill();\n \t      ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\t      if (_M_check_facet(this->_M_fnumput))\n+\t      __check_facet(this->_M_num_put);\n+\t      if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n \t\t{\n-\t\t  bool __b = false;\n-\t\t  if ((__fmt & ios_base::oct) || (__fmt & ios_base::hex))\n-\t\t    {\n-\t\t      unsigned long long __l;\n-\t\t      __l = static_cast<unsigned long long>(__n);\n-\t\t      __b = this->_M_fnumput->put(*this, *this,\n-\t\t\t\t\t\t  __c, __l).failed();\n-\t\t    }\n-\t\t  else\n-\t\t    __b = this->_M_fnumput->put(*this, *this,\n-\t\t\t\t\t\t__c, __n).failed();\n-\t\t  if (__b)  \n-\t\t    this->setstate(ios_base::badbit);\n+\t\t  unsigned long long __l;\n+\t\t  __l = static_cast<unsigned long long>(__n);\n+\t\t  __b = this->_M_num_put->put(*this, *this, __c, __l).failed();\n \t\t}\n+\t      else\n+\t\t__b = this->_M_num_put->put(*this, *this, __c, __n).failed();\n+\t      if (__b)  \n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -289,10 +281,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -316,10 +308,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -342,10 +334,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {\n@@ -368,10 +360,10 @@ namespace std\n \t{\n \t  try \n \t    {\n-\t      if (_M_check_facet(this->_M_fnumput))\n-\t\tif (this->_M_fnumput->put(*this, *this, \n-\t\t\t\t\t  this->fill(), __n).failed())\n-\t\t  this->setstate(ios_base::badbit);\n+\t      __check_facet(this->_M_num_put);\n+\t      if (this->_M_num_put->put(*this, *this, this->fill(), \n+\t\t\t\t\t__n).failed())\n+\t\tthis->setstate(ios_base::badbit);\n \t    }\n \t  catch(...)\n \t    {"}, {"sha": "2ff4ec15d103c323497a33daa7639d3516397579", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -163,6 +163,9 @@ namespace std\n       bool\t\t\t_M_pback_init; \n       //@}\n \n+      // Cached codecvt facet.\n+      const __codecvt_type* \t_M_codecvt;\n+\n       // Initializes pback buffers, and moves normal buffers to safety.\n       // Assumptions:\n       // _M_in_cur has already been moved back\n@@ -403,7 +406,6 @@ namespace std\n \t  }\n \telse\n \t  _M_file.sync();\n-\n \t_M_last_overflowed = false;\n \treturn __ret;\n       }"}, {"sha": "e258501c18b6e4521d8b5d64a864040062ff7805", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -343,9 +343,10 @@ namespace std\n       int_type \n       snextc()\n       {\n-\tint_type __eof = traits_type::eof();\n-\treturn (traits_type::eq_int_type(this->sbumpc(), __eof) \n-\t\t? __eof : this->sgetc());\n+\tint_type __ret = traits_type::eof();\n+\tif (!traits_type::eq_int_type(this->sbumpc(), __ret))\n+\t  __ret = this->sgetc();\n+\treturn __ret;\n       }\n \n       /**\n@@ -699,8 +700,8 @@ namespace std\n       uflow() \n       {\n \tint_type __ret = traits_type::eof();\n-\tconst bool __testeof =\n-\t  traits_type::eq_int_type(this->underflow(), __ret);\n+\tconst bool __testeof = traits_type::eq_int_type(this->underflow(), \n+\t\t\t\t\t\t\t__ret);\n \tif (!__testeof && _M_in_cur < _M_in_end)\n \t  {\n \t    __ret = traits_type::to_int_type(*_M_in_cur);"}, {"sha": "de6e1339a0e5ba90d3b9ce645eca0430a49ac3bc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/2.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F2.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,54 @@\n+// 2003-05-13 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+  locale loc;\n+  filebuf ob;\n+  VERIFY( ob.getloc() == loc );\n+  ob.open(name_01, ios_base::in);\n+  VERIFY( ob.is_open() );\n+ \n+  typedef streambuf::pos_type pos_type;\n+  pos_type bad = pos_type(streambuf::off_type(-1));\n+  pos_type p = ob.pubseekoff(2, ios_base::beg, ios_base::in);\n+  VERIFY( p != bad);\n+\n+  // 1 \"if file is not positioned at its beginning\" fails...\n+  locale loc_de = __gnu_cxx_test::try_named_locale(\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc );\n+}\n+\n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "1899278d415ab2dba2c24cdfa3858abda0e238bf", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/3.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F3.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,55 @@\n+// 2003-05-13 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class state_codecvt : public std::codecvt<char, char, std::mbstate_t>\n+{\n+protected:\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+};\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc_s(locale::classic(), new state_codecvt);\n+  filebuf ob;\n+  ob.pubimbue(loc_s);\n+  VERIFY( ob.getloc() == loc_s );\n+\n+  // 2 \"if encoding of current locale is state dependent\" fails...\n+  locale loc_c = locale::classic();\n+  locale ret = ob.pubimbue(loc_s);\n+  VERIFY( ob.getloc() == loc_s );\n+}\n+\n+main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "621799e513fa264f44a5ac3911e3c5ae42a948af", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F1.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,45 @@\n+// 981208 bkoz test functionality of basic_stringbuf for char_type == char\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+std::wfilebuf fbuf;\n+\n+// test the filebuf locale settings\n+void test02() \n+{\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = fbuf.getloc();\n+  fbuf.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = fbuf.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "4acff8123e7fab889de7c6487208be442e79fa2e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/2.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F2.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,54 @@\n+// 2003-05-13 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+  locale loc;\n+  wfilebuf ob;\n+  VERIFY( ob.getloc() == loc );\n+  ob.open(name_01, ios_base::in);\n+  VERIFY( ob.is_open() );\n+ \n+  typedef streambuf::pos_type pos_type;\n+  pos_type bad = pos_type(streambuf::off_type(-1));\n+  pos_type p = ob.pubseekoff(2, ios_base::beg, ios_base::in);\n+  VERIFY( p != bad);\n+\n+  // 1 \"if file is not positioned at its beginning\" fails...\n+  locale loc_de = __gnu_cxx_test::try_named_locale(\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc );\n+}\n+\n+main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "393732bee3653d0d94616ed69739a1bbfac81c37", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/3.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F3.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,55 @@\n+// 2003-05-13 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class state_codecvt : public std::codecvt<wchar_t, char, std::mbstate_t>\n+{\n+protected:\n+  int\n+  do_encoding() const throw()\n+  { return -1; }\n+};\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc_s(locale::classic(), new state_codecvt);\n+  wfilebuf ob;\n+  ob.pubimbue(loc_s);\n+  VERIFY( ob.getloc() == loc_s );\n+\n+  // 2 \"if encoding of current locale is state dependent\" fails...\n+  locale loc_c = locale::classic();\n+  locale ret = ob.pubimbue(loc_s);\n+  VERIFY( ob.getloc() == loc_s );\n+}\n+\n+main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "1b083fd023ade4d968384592b64b96cf7aa1216c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/9322.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F9322.cc?ref=0cd1de6fc967a1683bb5ec34462bf6d3ef39cdc8", "patch": "@@ -0,0 +1,53 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9322\n+void test07()\n+{\n+  using std::locale;\n+  bool test = true;\n+\n+  locale loc;\n+  std::wfilebuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(__gnu_cxx_test::try_named_locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de = __gnu_cxx_test::try_named_locale(\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+main() \n+{\n+  test07();\n+  return 0;\n+}"}]}