{"sha": "e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMxMjNhYjNiYTU5MGY3NzNkMTVmZTdlNzk2OWY1ZWQwZmViMjdlOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-12-21T22:52:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-21T22:52:51Z"}, "message": "configure.in: Change GLIBCPP_ENABLE_SHADOW to GLIBCPP_ENABLE_CHEADERS.\n\n\n2000-12-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.in: Change GLIBCPP_ENABLE_SHADOW to\n\tGLIBCPP_ENABLE_CHEADERS.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Change to\n\tENABLE_CHEADERS.  C_INCLUDE_DIR defaults to c_std from c.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* include/c: Move to ...\n\t* include/c_std: ...here.\n\t* include/c_std: Move to ...\n\t* include/c_shadow: ...here.\n\t* include/c: Repopulate, with simple headers.\n\t* docs/html/configopts.html: Adjust docs.\n\nFrom-SVN: r38432", "tree": {"sha": "0dfad2ca73e4a58641a63bfffe07273ee77b0d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfad2ca73e4a58641a63bfffe07273ee77b0d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/comments", "author": null, "committer": null, "parents": [{"sha": "3546ef587fdb117bb7b2906d18b392c46b5d1dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3546ef587fdb117bb7b2906d18b392c46b5d1dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3546ef587fdb117bb7b2906d18b392c46b5d1dbe"}], "stats": {"total": 2208, "additions": 1102, "deletions": 1106}, "files": [{"sha": "98c031ade58e7b9d0b7fddce3bbf5f3087ddddde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -1,3 +1,18 @@\n+2000-12-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.in: Change GLIBCPP_ENABLE_SHADOW to\n+\tGLIBCPP_ENABLE_CHEADERS.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Change to\n+\tENABLE_CHEADERS.  C_INCLUDE_DIR defaults to c_std from c. \n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/c: Move to ...\n+\t* include/c_std: ...here.\n+\t* include/c_std: Move to ...\n+\t* include/c_shadow: ...here.\n+\t* include/c: Repopulate, with simple headers.\n+\t* docs/html/configopts.html: Adjust docs.\n+\t\n 2000-12-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* acinclude.m4, configure.in, mkcheck.in,"}, {"sha": "1cdc89354d020f5dbfdf0d6b334e6e75b9949c6c", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -1492,51 +1492,59 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n \n dnl\n-dnl Check for whether or not to do shadowed C headers.\n-dnl\n-dnl GLIBCPP_ENABLE_SHADOW\n-dnl --enable-cshadow-headers [does stuff].\n-dnl --disable-cshadow-headers [does not do stuff].\n-dnl  +  This will eventually need to be on by default.\n-dnl  +  Usage:  GLIBCPP_ENABLE_SHADOW[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_SHADOW, [dnl\n-define([GLIBCPP_ENABLE_SHADOW_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_MSG_CHECKING([for enabled cshadow headers])\n-AC_ARG_ENABLE(cshadow-headers,\n+dnl Check for what kind of C headers to use.\n+dnl\n+dnl GLIBCPP_ENABLE_CHEADERS\n+dnl --enable-cheaders= [does stuff].\n+dnl --disable-cheaders [does not do anything, really].\n+dnl  +  This will eventually need to be 'c_shadow' by default.\n+dnl  +  Usage:  GLIBCPP_ENABLE_CHEADERS[(DEFAULT)]\n+dnl       Where DEFAULT is either `c' or `c_std' or 'c_shadow'.  \n+dnl       If ommitted, it defaults to `c_std'.\n+AC_DEFUN(GLIBCPP_ENABLE_CHEADERS, [dnl\n+define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n+AC_MSG_CHECKING([for c header strategy to use])\n+AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cshadow-headers construct \"shadowed\" C header files for\n-                           g++ [default=>>GLIBCPP_ENABLE_SHADOW_DEFAULT],\n+<<  --enable-cheaders construct \"C\" header files for\n+                           g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n-   yes) enable_cshadow_headers=yes \n+   c) \n+\tenable_cheaders=c \n         ;;\n-   no)  enable_cshadow_headers=no \n+   c_std)  \n+\tenable_cheaders=c_std \n         ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable shadowed C headers]) \n+   c_shadow)  \n+\tenable_cheaders=c_shadow \n+        ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers]) \n         ;;\n   esac],\n-  enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)\n-  AC_MSG_RESULT($enable_cshadow_headers)\n+  enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n+  AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n-  dnl NB: these things may be duplicated in c++config.h as well.\n-  case \"$enable_cshadow_headers\" in\n-    yes) \n+  case \"$enable_cheaders\" in\n+    c_shadow) \n         CSHADOW_FLAGS=\"-fno-builtin\"\n-        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_shadow'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n         ;;\n-    no)   \n+    c_std)   \n+        CSHADOW_FLAGS=\"\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n+        ;;\n+    c)   \n         CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${top_srcdir}/include/c'\n         ;;\n   esac\n \n   AC_SUBST(CSHADOW_FLAGS)\n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cheaders\" = c_shadow)\n ])\n \n \n@@ -1584,7 +1592,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n \n   # Can either use include/c or include/c_std to grab \"C\" headers. This\n   # variable is set to the include directory currently in use.\n-  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_SHADOW\n+  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_CHEADERS\n    \n   # Passed down for canadian crosses.\n   if  test x\"$CANADIAN\" = xyes; then"}, {"sha": "ff65e719f3ab1aedc355f34807a52a4234c16e1c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -1504,51 +1504,59 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n \n \n dnl\n-dnl Check for whether or not to do shadowed C headers.\n-dnl\n-dnl GLIBCPP_ENABLE_SHADOW\n-dnl --enable-cshadow-headers [does stuff].\n-dnl --disable-cshadow-headers [does not do stuff].\n-dnl  +  This will eventually need to be on by default.\n-dnl  +  Usage:  GLIBCPP_ENABLE_SHADOW[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n-dnl       defaults to `no'.\n-AC_DEFUN(GLIBCPP_ENABLE_SHADOW, [dnl\n-define([GLIBCPP_ENABLE_SHADOW_DEFAULT], ifelse($1, yes, yes, no))dnl\n-AC_MSG_CHECKING([for enabled cshadow headers])\n-AC_ARG_ENABLE(cshadow-headers,\n+dnl Check for what kind of C headers to use.\n+dnl\n+dnl GLIBCPP_ENABLE_CHEADERS\n+dnl --enable-cheaders= [does stuff].\n+dnl --disable-cheaders [does not do anything, really].\n+dnl  +  This will eventually need to be 'c_shadow' by default.\n+dnl  +  Usage:  GLIBCPP_ENABLE_CHEADERS[(DEFAULT)]\n+dnl       Where DEFAULT is either `c' or `c_std' or 'c_shadow'.  \n+dnl       If ommitted, it defaults to `c_std'.\n+AC_DEFUN(GLIBCPP_ENABLE_CHEADERS, [dnl\n+define([GLIBCPP_ENABLE_CHEADERS_DEFAULT], ifelse($1, c_std, c_std, c_std))dnl\n+AC_MSG_CHECKING([for c header strategy to use])\n+AC_ARG_ENABLE(cheaders,\n changequote(<<, >>)dnl\n-<<  --enable-cshadow-headers construct \"shadowed\" C header files for\n-                           g++ [default=>>GLIBCPP_ENABLE_SHADOW_DEFAULT],\n+<<  --enable-cheaders construct \"C\" header files for\n+                           g++ [default=>>GLIBCPP_ENABLE_CHEADERS_DEFAULT],\n changequote([, ])\n   [case \"$enableval\" in\n-   yes) enable_cshadow_headers=yes \n+   c) \n+\tenable_cheaders=c \n         ;;\n-   no)  enable_cshadow_headers=no \n+   c_std)  \n+\tenable_cheaders=c_std \n         ;;\n-   *)   AC_MSG_ERROR([Unknown argument to enable/disable shadowed C headers]) \n+   c_shadow)  \n+\tenable_cheaders=c_shadow \n+        ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable \"C\" headers]) \n         ;;\n   esac],\n-  enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)\n-  AC_MSG_RESULT($enable_cshadow_headers)\n+  enable_cheaders=GLIBCPP_ENABLE_CHEADERS_DEFAULT)\n+  AC_MSG_RESULT($enable_cheaders)\n \n   dnl Option parsed, now set things appropriately\n-  dnl NB: these things may be duplicated in c++config.h as well.\n-  case \"$enable_cshadow_headers\" in\n-    yes) \n+  case \"$enable_cheaders\" in\n+    c_shadow) \n         CSHADOW_FLAGS=\"-fno-builtin\"\n-        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_shadow'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n         ;;\n-    no)   \n+    c_std)   \n+        CSHADOW_FLAGS=\"\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n+        ;;\n+    c)   \n         CSHADOW_FLAGS=\"\"\n         C_INCLUDE_DIR='${top_srcdir}/include/c'\n         ;;\n   esac\n \n   AC_SUBST(CSHADOW_FLAGS)\n   AC_SUBST(C_INCLUDE_DIR)\n-  AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n+  AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cheaders\" = c_shadow)\n ])\n \n \n@@ -1596,7 +1604,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n \n   # Can either use include/c or include/c_std to grab \"C\" headers. This\n   # variable is set to the include directory currently in use.\n-  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_SHADOW\n+  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_CHEADERS\n    \n   # Passed down for canadian crosses.\n   if  test x\"$CANADIAN\" = xyes; then"}, {"sha": "441f57c18d0f858eca85337b33ceccfdc8083182", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -300,15 +300,6 @@\n /* Define if you have the cosl function.  */\n #undef HAVE_COSL\n \n-/* Define if you have the csqrt function.  */\n-#undef HAVE_CSQRT\n-\n-/* Define if you have the csqrtf function.  */\n-#undef HAVE_CSQRTF\n-\n-/* Define if you have the csqrtl function.  */\n-#undef HAVE_CSQRTL\n-\n /* Define if you have the expf function.  */\n #undef HAVE_EXPF\n \n@@ -501,9 +492,6 @@\n /* Define if you have the wmemset function.  */\n #undef HAVE_WMEMSET\n \n-/* Define if you have the <complex.h> header file.  */\n-#undef HAVE_COMPLEX_H\n-\n /* Define if you have the <endian.h> header file.  */\n #undef HAVE_ENDIAN_H\n "}, {"sha": "0e87b07d6cb0edd9516410ed24e230e9adc05576", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 986, "deletions": 977, "changes": 1963, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9"}, {"sha": "5d2f7d5a9b38374e80eb83b9f34b53e8e090a8c4", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -37,7 +37,7 @@ GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_LONG_LONG([no])\n-GLIBCPP_ENABLE_SHADOW([no])\n+GLIBCPP_ENABLE_CHEADERS([c_std])\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_ATOMICITY\n GLIBCPP_ENABLE_CXX_FLAGS([none])"}, {"sha": "73230ae93b39b5d04a61c48966ea2396327a9605", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.18 2000/12/03 23:47:46 jsm28 Exp $ -->\n+<!-- $Id: configopts.html,v 1.1 2000/12/10 04:03:08 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -75,10 +75,12 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         templates and the like).\n      </P>\n \n- <DT><TT>--enable-cshadow-headers  </TT>\n- <DD><P>This turns on the code to construct shadowed C headers, and to\n-        use c headers in the std:: namespace.  Very experimental as of\n-        this writing.\n+ <DT><TT>--enable-cheaders=OPTION  </TT>\n+ <DD><P>This allows the user to define what kind of C headers are\n+\tused.  Options are: c, c_std, and c_shadow. These correspond\n+\tto the source directory's include/c, include/c_std, and\n+\tinclude/c_shadow directories.\n+ \tThe default is c_std.\n      </P>\n \n  <DT><TT>--enable-threads  </TT>\n@@ -167,7 +169,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.18 2000/12/03 23:47:46 jsm28 Exp $\n+$Id: configopts.html,v 1.1 2000/12/10 04:03:08 pme Exp $\n </EM></P>\n \n "}, {"sha": "a80ad10e4c78fecee35fe94219bc17926a972822", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -111,7 +111,7 @@ libio_la = @libio_la@\n libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -123,21 +123,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@    iofopen.c stdio.c\n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c iofclose.c     iofopen.c stdio.c\n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "0c1bb57b9e49fe1ec684206fd8a69e5c9e62f4b8", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3123ab3ba590f773d15fe7e7969f5ed0feb27e9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e3123ab3ba590f773d15fe7e7969f5ed0feb27e9", "patch": "@@ -112,12 +112,12 @@ MAINT_CHARSET = latin1\n \n # Cross compiler and multilib support.\n # Install a library built with a cross compiler in tooldir, not libdir.\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@@gcc_version@\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@$(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = @USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -133,13 +133,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -151,38 +149,20 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n-headers = \\\n-\tcxxabi.h exception new typeinfo\n+headers =  \tcxxabi.h exception new typeinfo\n \n \n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\texception_support.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n-@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_TRUE@@gxx_include_dir@\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@$(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n-@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = @GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@$(prefix)/include/g++-@libstdcxx_interface@\n+@GXX_INCLUDE_DIR_TRUE@glibcppinstalldir = @gxx_include_dir@\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@glibcppinstalldir = $(libdir)/gcc-lib/$(target_alias)/@gcc_version@/include/g++\n+@GXX_INCLUDE_DIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@glibcppinstalldir = $(prefix)/include/g++-@libstdcxx_interface@\n \n glibcppinstall_HEADERS = $(headers)\n \n@@ -195,12 +175,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -221,16 +196,14 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}