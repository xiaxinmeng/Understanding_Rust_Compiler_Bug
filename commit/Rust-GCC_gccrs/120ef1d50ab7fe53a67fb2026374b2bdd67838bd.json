{"sha": "120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIwZWYxZDUwYWI3ZmU1M2E2N2ZiMjAyNjM3NGIyYmRkNjc4MzhiZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-06-09T03:46:08Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-06-09T03:46:08Z"}, "message": "rs6000: Don't add an immediate to r0 (PR80966)\n\nIf there is a large stack frame the rs6000 -fstack-limit code would\ncalculate the new stack pointer value using two insns (an addis and\nan addi), with r0 as temporary.  Such instructions do not exist.\n\nThis patch changes add<mode>3 to expand using a different strategy in\nsuch cases; to FAIL if there is no way to do it (namely, if the source\nis r0 and there is no way to get a temporary reg); and it changes\nrs6000_emit_allocate_stack to assert gen_add3_insn did in fact emit\ninstructions.\n\n\n\tPR target/80966\n\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Assert that\n\tgen_add3_insn did not fail.\n\t* config/rs6000/rs6000.md (add<mode>3): If asked to add a constant to\n\tr0, construct that number in a temporary reg and add that reg to r0.\n\tIf asked to put the result in r0 as well, fail.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/stack-limit.c: New testcase.\n\nFrom-SVN: r249046", "tree": {"sha": "705e42d50783725696c7140aee6b70afcf3ba82c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705e42d50783725696c7140aee6b70afcf3ba82c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff67045361eb84325e54c38c84cae2df9859bfd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff67045361eb84325e54c38c84cae2df9859bfd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff67045361eb84325e54c38c84cae2df9859bfd3"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "285d56af2802dccd0feadac6d39b3a565a8df4ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "patch": "@@ -1,3 +1,12 @@\n+2017-06-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/80966\n+\t* config/rs6000/rs6000.c (rs6000_emit_allocate_stack): Assert that\n+\tgen_add3_insn did not fail.\n+\t* config/rs6000/rs6000.md (add<mode>3): If asked to add a constant to\n+\tr0, construct that number in a temporary reg and add that reg to r0.\n+\tIf asked to put the result in r0 as well, fail.\n+\n 2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling"}, {"sha": "63ca2d12be814760f4a730054b1547faccd7a3c2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "patch": "@@ -27005,9 +27005,11 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n \t  && REGNO (stack_limit_rtx) > 1\n \t  && REGNO (stack_limit_rtx) <= 31)\n \t{\n-\t  emit_insn (gen_add3_insn (tmp_reg, stack_limit_rtx, GEN_INT (size)));\n-\t  emit_insn (gen_cond_trap (LTU, stack_reg, tmp_reg,\n-\t\t\t\t    const0_rtx));\n+\t  rtx_insn *insn\n+\t    = gen_add3_insn (tmp_reg, stack_limit_rtx, GEN_INT (size));\n+\t  gcc_assert (insn);\n+\t  emit_insn (insn);\n+\t  emit_insn (gen_cond_trap (LTU, stack_reg, tmp_reg, const0_rtx));\n \t}\n       else if (GET_CODE (stack_limit_rtx) == SYMBOL_REF\n \t       && TARGET_32BIT"}, {"sha": "dedb2e3c193310551ea5773506fdb3e7d16d4a19", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "patch": "@@ -1629,6 +1629,17 @@\n \t\t  || rtx_equal_p (operands[0], operands[1]))\n \t\t ? operands[0] : gen_reg_rtx (<MODE>mode));\n \n+      /* Adding a constant to r0 is not a valid insn, so use a different\n+\t strategy in that case.  */\n+      if (REGNO (operands[1]) == 0 || REGNO (tmp) == 0)\n+\t{\n+\t  if (operands[0] == operands[1])\n+\t    FAIL;\n+\t  rs6000_emit_move (operands[0], operands[2], <MODE>mode);\n+\t  emit_insn (gen_add<mode>3 (operands[0], operands[1], operands[0]));\n+\t  DONE;\n+\t}\n+\n       HOST_WIDE_INT val = INTVAL (operands[2]);\n       HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n       HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);"}, {"sha": "9855db5fb8ffc86e476454372a5223de215154c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "patch": "@@ -1,3 +1,8 @@\n+2017-06-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/80966\n+\t* gcc.target/powerpc/stack-limit.c: New testcase.\n+\n 2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-char.c: New."}, {"sha": "e676c96eb8e6ba57bf1f109695f0f6f1b81fe6a7", "filename": "gcc/testsuite/gcc.target/powerpc/stack-limit.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fstack-limit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/120ef1d50ab7fe53a67fb2026374b2bdd67838bd/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fstack-limit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fstack-limit.c?ref=120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-O0 -fstack-limit-register=r14\" } */\n+\n+// PR80966\n+\n+int foo (int i)\n+{\n+  char arr[135000];\n+\n+  arr[i] = 0;\n+}"}]}