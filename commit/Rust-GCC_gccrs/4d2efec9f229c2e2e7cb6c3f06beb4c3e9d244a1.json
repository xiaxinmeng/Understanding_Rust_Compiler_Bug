{"sha": "4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "node_id": "C_kwDOANBUbNoAKDRkMmVmZWM5ZjIyOWMyZTJlN2NiNmMzZjA2YmViNGMzZTlkMjQ0YTE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-27T22:46:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-01-28T03:21:43Z"}, "message": "c++: pack in enumerator in lambda [PR100198]\n\nThe GCC 8 lambda overhaul fixed most uses of lambdas in pack expansions, but\nlocal enums and classes within such lambdas that depend on parameter packs\nare still broken.  For now, give a sorry instead of an ICE or incorrect\nerror.\n\n\tPR c++/100198\n\tPR c++/100030\n\tPR c++/100282\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_enumerator_definition): Sorry on parameter\n\tpack in lambda.\n\t(cp_parser_class_head): And in class attributes.\n\t* pt.cc (check_for_bare_parameter_packs): Sorry instead of error\n\tin lambda.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-variadic13.C: Accept the sorry\n\tas well as the correct error.\n\t* g++.dg/cpp0x/lambda/lambda-variadic14.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-variadic14a.C: New test.\n\t* g++.dg/cpp0x/lambda/lambda-variadic15.C: New test.\n\t* g++.dg/cpp0x/lambda/lambda-variadic16.C: New test.", "tree": {"sha": "96e5220e2ebd90102251f7e3752d3b9326f791a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e5220e2ebd90102251f7e3752d3b9326f791a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f17e996f21d0ed64c36ed1e52977b705143522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f17e996f21d0ed64c36ed1e52977b705143522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f17e996f21d0ed64c36ed1e52977b705143522"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "94a5c64be4c615ba858455693b172b1b1ad10eb2", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -21146,7 +21146,16 @@ cp_parser_enumerator_definition (cp_parser* parser, tree type)\n \n   /* If we are processing a template, make sure the initializer of the\n      enumerator doesn't contain any bare template parameter pack.  */\n-  if (check_for_bare_parameter_packs (value))\n+  if (current_lambda_expr ())\n+    {\n+      /* In a lambda it should work, but doesn't currently.  */\n+      if (uses_parameter_packs (value))\n+\t{\n+\t  sorry (\"unexpanded parameter pack in enumerator in lambda\");\n+\t  value = error_mark_node;\n+\t}\n+    }\n+  else if (check_for_bare_parameter_packs (value))\n     value = error_mark_node;\n \n   /* Create the enumerator.  */\n@@ -26624,6 +26633,14 @@ cp_parser_class_head (cp_parser* parser,\n \n   if (type)\n     {\n+      if (current_lambda_expr ()\n+\t  && uses_parameter_packs (attributes))\n+\t{\n+\t  /* In a lambda this should work, but doesn't currently.  */\n+\t  sorry (\"unexpanded parameter pack in local class in lambda\");\n+\t  attributes = NULL_TREE;\n+\t}\n+\n       /* Apply attributes now, before any use of the class as a template\n \t argument in its base list.  */\n       cplus_decl_attributes (&type, attributes, (int)ATTR_FLAG_TYPE_IN_PLACE);"}, {"sha": "f46a7ad6655c6494658d830c687c91034c01ea6a", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -4273,10 +4273,27 @@ check_for_bare_parameter_packs (tree t, location_t loc /* = UNKNOWN_LOCATION */)\n   cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n   delete ppd.visited;\n \n+  if (!parameter_packs)\n+    return false;\n+\n+  if (loc == UNKNOWN_LOCATION)\n+    loc = cp_expr_loc_or_input_loc (t);\n+\n   /* It's OK for a lambda to have an unexpanded parameter pack from the\n      containing context, but do complain about unexpanded capture packs.  */\n-  if (current_class_type && LAMBDA_TYPE_P (current_class_type)\n-      && CLASSTYPE_TEMPLATE_INFO (current_class_type))\n+  tree lam = current_lambda_expr ();\n+  if (lam)\n+    lam = TREE_TYPE (lam);\n+\n+  if (lam && lam != current_class_type)\n+    {\n+      /* We're in a lambda, but it isn't the innermost class.\n+\t This should work, but currently doesn't.  */\n+      sorry_at (loc, \"unexpanded parameter pack in local class in lambda\");\n+      return true;\n+    }\n+\n+  if (lam && CLASSTYPE_TEMPLATE_INFO (lam))\n     for (; parameter_packs;\n \t parameter_packs = TREE_CHAIN (parameter_packs))\n       {\n@@ -4287,8 +4304,6 @@ check_for_bare_parameter_packs (tree t, location_t loc /* = UNKNOWN_LOCATION */)\n \n   if (parameter_packs)\n     {\n-      if (loc == UNKNOWN_LOCATION)\n-\tloc = cp_expr_loc_or_input_loc (t);\n       error_at (loc, \"parameter packs not expanded with %<...%>:\");\n       while (parameter_packs)\n         {"}, {"sha": "3df88296726369bf0fcead5eea49512bf6729d48", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic13.C?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -3,7 +3,7 @@\n \n template <class... Ts>\n void f() {\n-  [] { struct S : Ts { }; };\t// { dg-error \"not expanded\" }\n+  [] { struct S : Ts { }; };\t// { dg-message \"\" }\n }\n \n int main() {"}, {"sha": "4634f16ccb015ab45744cb534308b1f09677c112", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14.C?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -3,6 +3,6 @@\n \n template <int... E>\n void f() {\n-  [] { enum e { e = E }; };\t// { dg-error \"not expanded\" }\n+  [] { enum e { e = E }; };\t// { dg-message \"\" }\n }\n template void f<>();"}, {"sha": "810b4a4e04589299a92afad0841e444708ce8cd9", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic14a.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic14a.C?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/100198\n+// { dg-do compile { target c++11 } }\n+\n+template <int... E>\n+void f() {\n+  ([] { enum e { e = E }; }(), ...); // { dg-bogus \"\" \"\" { xfail *-*-* } }\n+}\n+\n+template void f<0>();"}, {"sha": "730215a7a419f3d75427d5e1d9ee9dc893c312aa", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic15.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic15.C?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/100030\n+// { dg-do compile { target c++11 } }\n+\n+template <class... Ts>\n+void sink(Ts...);\n+\n+template <class... Ts>\n+void f(Ts...) {\n+  sink([] { struct alignas(Ts) S {}; }...); // { dg-bogus \"\" \"\" { xfail *-*-* } }\n+}\n+\n+int main() {\n+  f(0);\n+}"}, {"sha": "8e48e38a3451c0d947dd8c0a68b18604fd12f212", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic16.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic16.C?ref=4d2efec9f229c2e2e7cb6c3f06beb4c3e9d244a1", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/100282\n+// { dg-do compile { target c++11 } }\n+\n+template <typename... Ts>\n+void\n+local_class ()\n+{\n+  int { []{ struct ZZ : Ts {}; }... }; // { dg-bogus \"\" \"\" { xfail *-*-* } }\n+}\n+\n+template // <>\n+void\n+local_class<int> ();"}]}