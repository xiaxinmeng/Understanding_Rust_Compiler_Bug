{"sha": "49482217e0ade3fe92ea050c01f5f7a6ddc31e95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk0ODIyMTdlMGFkZTNmZTkyZWEwNTBjMDFmNWY3YTZkZGMzMWU5NQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2020-09-12T14:38:51Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2020-09-12T14:43:27Z"}, "message": "Add new shrpsi instruction variands to gcc/config/pa/pa.md.\n\n2020-09-12  Roger Sayle  <roger@nextmovesoftware.com>\n\t    John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog\n\t* config/pa/pa.md (shrpsi4_1, shrpsi4_2): New define_insns split\n\tout from previous shrpsi4 providing two commutitive variants using\n\tplus_xor_ior_operator as a predicate.\n\t(shrpdi4_1, shrpdi4_2, shrpdi_3, shrpdi_4): Likewise DImode versions\n\twhere _1 and _2 take register shifts, and _3 and _4 for integers.\n\t(rotlsi3_internal): Name this anonymous instruction.\n\t(rotrdi3): New DImode insn copied from rotrsi3.\n\t(rotldi3): New DImode expander copied from rotlsi3.\n\t(rotldi4_internal): New DImode insn copied from rotsi3_internal.", "tree": {"sha": "88ca087e5a0cb058bf0cd07148765381420ec5b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ca087e5a0cb058bf0cd07148765381420ec5b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49482217e0ade3fe92ea050c01f5f7a6ddc31e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49482217e0ade3fe92ea050c01f5f7a6ddc31e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49482217e0ade3fe92ea050c01f5f7a6ddc31e95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49482217e0ade3fe92ea050c01f5f7a6ddc31e95/comments", "author": null, "committer": null, "parents": [{"sha": "f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9f95e9ccac1376aee73345b8b4a00e803d67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d9f95e9ccac1376aee73345b8b4a00e803d67d"}], "stats": {"total": 140, "additions": 119, "deletions": 21}, "files": [{"sha": "3a82fac85e390a97f3b8bf404cdb7fb458e10fa9", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 119, "deletions": 21, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49482217e0ade3fe92ea050c01f5f7a6ddc31e95/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49482217e0ade3fe92ea050c01f5f7a6ddc31e95/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=49482217e0ade3fe92ea050c01f5f7a6ddc31e95", "patch": "@@ -6627,32 +6627,82 @@\n    (set_attr \"length\" \"4\")])\n \n ; Shift right pair word 0 to 31 bits.\n-(define_insn \"shrpsi4\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t\t   (minus:SI (const_int 32)\n-\t\t\t     (match_operand:SI 3 \"shift5_operand\" \"q,n\")))\n-\t\t(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r,r\")\n-\t\t\t     (match_dup 3))))]\n+(define_insn \"*shrpsi4_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 4 \"plus_xor_ior_operator\"\n+\t  [(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (minus:SI (const_int 32)\n+\t\t\t\t(match_operand:SI 3 \"register_operand\" \"q\")))\n+\t   (lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t(match_dup 3))]))]\n   \"\"\n-  \"@\n-   {vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}\n-   {shd|shrpw} %1,%2,%3,%0\"\n+  \"{vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*shrpsi4_2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 4 \"plus_xor_ior_operator\"\n+\t  [(lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 3 \"register_operand\" \"q\"))\n+\t   (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (minus:SI (const_int 32)\n+\t\t\t\t(match_dup 3)))]))]\n+  \"\"\n+  \"{vshd %1,%2,%0|shrpw %1,%2,%%sar,%0}\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n ; Shift right pair doubleword 0 to 63 bits.\n-(define_insn \"shrpdi4\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(ior:DI (ashift:DI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t\t   (minus:DI (const_int 64)\n-\t\t\t     (match_operand:DI 3 \"shift6_operand\" \"q,n\")))\n-\t\t(lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"r,r\")\n-\t\t\t     (match_dup 3))))]\n+(define_insn \"*shrpdi4_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operator:DI 4 \"plus_xor_ior_operator\"\n+\t  [(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t      (minus:DI (const_int 64)\n+\t\t\t\t(match_operand:DI 3 \"register_operand\" \"q\")))\n+\t   (lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t(match_dup 3))]))]\n   \"TARGET_64BIT\"\n-  \"@\n-   shrpd %1,%2,%%sar,%0\n-   shrpd %1,%2,%3,%0\"\n+  \"shrpd %1,%2,%%sar,%0\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*shrpdi4_2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operator:DI 4 \"plus_xor_ior_operator\"\n+\t  [(lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:DI 3 \"shift6_operand\" \"q\"))\n+\t   (ashift:DI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (minus:DI (const_int 64)\n+\t\t\t\t(match_dup 3)))]))]\n+  \"TARGET_64BIT\"\n+  \"shrpd %1,%2,%%sar,%0\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*shrpdi4_3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operator:DI 5 \"plus_xor_ior_operator\"\n+\t  [(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:DI 3 \"const_int_operand\" \"n\"))\n+\t   (lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:DI 4 \"const_int_operand\" \"n\"))]))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n+  \"shrpd %1,%2,%4,%0\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*shrpdi4_4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(match_operator:DI 5 \"plus_xor_ior_operator\"\n+\t  [(lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t(match_operand:DI 4 \"const_int_operand\" \"n\"))\n+\t   (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:DI 3 \"const_int_operand\" \"n\"))]))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64\"\n+  \"shrpd %1,%2,%4,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -6691,7 +6741,7 @@\n   /* Else expand normally.  */\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*rotlsi3_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n                    (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n@@ -6704,6 +6754,54 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"rotrdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n+\t\t     (match_operand:DI 2 \"shift6_operand\" \"q,n\")))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 63);\n+      return \\\"shrpd %1,%1,%2,%0\\\";\n+    }\n+  else\n+    return \\\"shrpd %1,%1,%%sar,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"rotldi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (rotate:DI (match_operand:DI 1 \"register_operand\" \"\")\n+                   (match_operand:DI 2 \"arith32_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"\n+{\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      rtx temp = gen_reg_rtx (DImode);\n+      emit_insn (gen_subdi3 (temp, GEN_INT (64), operands[2]));\n+      emit_insn (gen_rotrdi3 (operands[0], operands[1], temp));\n+      DONE;\n+    }\n+  /* Else expand normally.  */\n+}\")\n+\n+(define_insn \"*rotldi3_internal\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (rotate:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+                   (match_operand:DI 2 \"const_int_operand\" \"n\")))]\n+  \"TARGET_64BIT\"\n+  \"*\n+{\n+  operands[2] = GEN_INT ((64 - INTVAL (operands[2])) & 63);\n+  return \\\"shrpd %1,%1,%2,%0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 5 \"plus_xor_ior_operator\""}]}