{"sha": "e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0YTU4ZmZiZWI1YzE4YTAxZTdhOGRhZjkyODk2MThjYjkwN2YyMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-07-12T20:07:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-07-12T20:07:09Z"}, "message": "cse.c (insert_with_costs): Put semi-colon after empty loop body on the next line.\n\n\t* cse.c (insert_with_costs): Put semi-colon after empty loop body\n\ton the next line.\n\t* emit-rtl.c (push_to_sequence): Likewise.\n\t* haifa-sched.c (max_issue): Likewise.\n\t* matrix-reorg.c (add_allocation_site): Likewise.\n\t* postreload-gcse.c (eliminate_partially_redundant_load): Likewise.\n\t* reload.c (alternative_allows_const_pool_ref): Likewise.\n\t* sched-rgn.c (rgn_add_block): Likewise.\n\t(rgn_fix_recovery_cfg): Likewise.\n\t* tree.c (attribute_list_contained): Likewise.\nc-family/\n\t* c-ada-spec.c (dump_nested_types): Put semi-colon after empty loop\n\tbody on the next line.\n\nFrom-SVN: r176216", "tree": {"sha": "21eb9d2f9d7caf8b2acedb119c2bc797c1c3644e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21eb9d2f9d7caf8b2acedb119c2bc797c1c3644e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/comments", "author": null, "committer": null, "parents": [{"sha": "3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4ffde68cfc6fee3c20d282d6690f2569e2fffa"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "c21c70ba76180b4da3313092882f549dead4a936", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -1,3 +1,16 @@\n+2011-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cse.c (insert_with_costs): Put semi-colon after empty loop body\n+\ton the next line.\n+\t* emit-rtl.c (push_to_sequence): Likewise.\n+\t* haifa-sched.c (max_issue): Likewise.\n+\t* matrix-reorg.c (add_allocation_site): Likewise.\n+\t* postreload-gcse.c (eliminate_partially_redundant_load): Likewise.\n+\t* reload.c (alternative_allows_const_pool_ref): Likewise.\n+\t* sched-rgn.c (rgn_add_block): Likewise.\n+\t(rgn_fix_recovery_cfg): Likewise.\n+\t* tree.c (attribute_list_contained): Likewise.\n+\n 2011-07-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c: Tidy processor feature bitmasks."}, {"sha": "38149c8c6dd341f62e1cb0d1b14882045f579669", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -1,3 +1,8 @@\n+2011-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_nested_types): Put semi-colon after empty loop\n+\tbody on the next line.\n+\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/45437"}, {"sha": "c6666675ccc0b04eb101c677a4c97527312121ff", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -2333,7 +2333,8 @@ dump_nested_types (pretty_printer *buffer, tree t, tree parent, bool forward,\n \t\tif (TREE_CODE (decl) == FUNCTION_TYPE)\n \t\t  for (decl = TREE_TYPE (decl);\n \t\t       decl && TREE_CODE (decl) == POINTER_TYPE;\n-\t\t       decl = TREE_TYPE (decl));\n+\t\t       decl = TREE_TYPE (decl))\n+\t\t    ;\n \n \t\tdecl = get_underlying_decl (decl);\n "}, {"sha": "54edf7ee94202345ef679ce60ec386eeca9638af", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -1637,8 +1637,10 @@ insert_with_costs (rtx x, struct table_elt *classp, unsigned int hash,\n \t  /* Put it after the last element cheaper than X.  */\n \t  struct table_elt *p, *next;\n \n-\t  for (p = classp; (next = p->next_same_value) && CHEAPER (next, elt);\n-\t       p = next);\n+\t  for (p = classp;\n+\t       (next = p->next_same_value) && CHEAPER (next, elt);\n+\t       p = next)\n+\t    ;\n \n \t  /* Put it after P and before NEXT.  */\n \t  elt->next_same_value = next;"}, {"sha": "e4049b99184c9bdbd62432ed8eb709de2eb32504", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -5043,7 +5043,8 @@ push_to_sequence (rtx first)\n \n   start_sequence ();\n \n-  for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last));\n+  for (last = first; last && NEXT_INSN (last); last = NEXT_INSN (last))\n+    ;\n \n   set_first_insn (first);\n   set_last_insn (last);"}, {"sha": "f4caecd284c261a1547f344b7771a2795b7afdb5", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -2568,7 +2568,8 @@ max_issue (struct ready_list *ready, int privileged_n, state_t state,\n \t\t{\n \t\t  n = privileged_n;\n \t\t  /* Try to find issued privileged insn.  */\n-\t\t  while (n && !ready_try[--n]);\n+\t\t  while (n && !ready_try[--n])\n+\t\t    ;\n \t\t}\n \n \t      if (/* If all insns are equally good...  */"}, {"sha": "fbeb16437961e1ce3f5c486c254c0d1a4de8e8f1", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -719,7 +719,8 @@ add_allocation_site (struct matrix_info *mi, gimple stmt, int level)\n          must be set accordingly.  */\n       for (min_malloc_level = 0;\n \t   min_malloc_level < mi->max_malloced_level\n-\t   && mi->malloc_for_level[min_malloc_level]; min_malloc_level++);\n+\t   && mi->malloc_for_level[min_malloc_level]; min_malloc_level++)\n+\t;\n       if (level < min_malloc_level)\n \t{\n \t  mi->allocation_function_decl = current_function_decl;"}, {"sha": "64f100697d4e17599bec7604aeb5f35437e12aad", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -1131,7 +1131,8 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n      discover additional redundancies, so mark it for later deletion.  */\n   for (a_occr = get_bb_avail_insn (bb, expr->avail_occr);\n        a_occr && (a_occr->insn != insn);\n-       a_occr = get_bb_avail_insn (bb, a_occr->next));\n+       a_occr = get_bb_avail_insn (bb, a_occr->next))\n+    ;\n \n   if (!a_occr)\n     {"}, {"sha": "c86f69b78c0b3fae53e00684ecb9bd60eb63349e", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -4591,7 +4591,8 @@ alternative_allows_const_pool_ref (rtx mem ATTRIBUTE_UNUSED,\n   /* Skip alternatives before the one requested.  */\n   while (altnum > 0)\n     {\n-      while (*constraint++ != ',');\n+      while (*constraint++ != ',')\n+\t;\n       altnum--;\n     }\n   /* Scan the requested alternative for TARGET_MEM_CONSTRAINT or 'o'."}, {"sha": "aa9c81d981406d24b8e6ea5a07003eb30bb6ed82", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -3396,7 +3396,8 @@ rgn_add_block (basic_block bb, basic_block after)\n       /* Now POS is the index of the last block in the region.  */\n \n       /* Find index of basic block AFTER.  */\n-      for (; rgn_bb_table[pos] != after->index; pos--);\n+      for (; rgn_bb_table[pos] != after->index; pos--)\n+\t;\n \n       pos++;\n       gcc_assert (pos > ebb_head[i - 1]);\n@@ -3443,12 +3444,14 @@ rgn_fix_recovery_cfg (int bbi, int check_bbi, int check_bb_nexti)\n \n   for (old_pos = ebb_head[BLOCK_TO_BB (check_bbi) + 1] - 1;\n        rgn_bb_table[old_pos] != check_bb_nexti;\n-       old_pos--);\n+       old_pos--)\n+    ;\n   gcc_assert (old_pos > ebb_head[BLOCK_TO_BB (check_bbi)]);\n \n   for (new_pos = ebb_head[BLOCK_TO_BB (bbi) + 1] - 1;\n        rgn_bb_table[new_pos] != bbi;\n-       new_pos--);\n+       new_pos--)\n+    ;\n   new_pos++;\n   gcc_assert (new_pos > ebb_head[BLOCK_TO_BB (bbi)]);\n "}, {"sha": "acc3841f216c54d7831413bc9f416e4952ca4860", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84a58ffbeb5c18a01e7a8daf9289618cb907f21/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e84a58ffbeb5c18a01e7a8daf9289618cb907f21", "patch": "@@ -6350,7 +6350,8 @@ attribute_list_contained (const_tree l1, const_tree l2)\n        t1 != 0 && t2 != 0\n         && TREE_PURPOSE (t1) == TREE_PURPOSE (t2)\n         && TREE_VALUE (t1) == TREE_VALUE (t2);\n-       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2));\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    ;\n \n   /* Maybe the lists are equal.  */\n   if (t1 == 0 && t2 == 0)"}]}