{"sha": "4bbbc5d906d1363fa6ca5fdf587c579120756a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJiYmM1ZDkwNmQxMzYzZmE2Y2E1ZmRmNTg3YzU3OTEyMDc1NmE3MQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-11T22:44:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-11T22:44:54Z"}, "message": "(convert_arguments): Don't warn about sign change for an INTEGER_CST inside NOP_EXPR, if value not fits new type.\n\n(convert_arguments): Don't warn about sign change\nfor an INTEGER_CST inside NOP_EXPR, if value not fits new type.\nDelete the code to check for VAL having enumeration type.\n\nFrom-SVN: r4906", "tree": {"sha": "ec703d915e9e42ca93dcf3d43dc6176b9ab519a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec703d915e9e42ca93dcf3d43dc6176b9ab519a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bbbc5d906d1363fa6ca5fdf587c579120756a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbbc5d906d1363fa6ca5fdf587c579120756a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbbc5d906d1363fa6ca5fdf587c579120756a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbbc5d906d1363fa6ca5fdf587c579120756a71/comments", "author": null, "committer": null, "parents": [{"sha": "f0a5c7b7d334fb71876eb5819884ff6c01e83c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0a5c7b7d334fb71876eb5819884ff6c01e83c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0a5c7b7d334fb71876eb5819884ff6c01e83c49"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "68c894661449b14c13e1b61963ff70539b9ccec3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbbc5d906d1363fa6ca5fdf587c579120756a71/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbbc5d906d1363fa6ca5fdf587c579120756a71/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4bbbc5d906d1363fa6ca5fdf587c579120756a71", "patch": "@@ -2073,12 +2073,19 @@ convert_arguments (typelist, values, name, fundecl)\n \t\t\t/* Change in signedness doesn't matter\n \t\t\t   if a constant value is unaffected.  */\n \t\t\t;\n+\t\t      /* Likewise for a constant in a NOP_EXPR.  */\n+\t\t      else if (TREE_CODE (val) == NOP_EXPR\n+\t\t\t       && TREE_CODE (TREE_OPERAND (val, 0)) == INTEGER_CST\n+\t\t\t       && int_fits_type_p (TREE_OPERAND (val, 0), type))\n+\t\t\t;\n+#if 0 /* We never get such tree structure here.  */\n \t\t      else if (TREE_CODE (TREE_TYPE (val)) == ENUMERAL_TYPE\n \t\t\t       && int_fits_type_p (TYPE_MIN_VALUE (TREE_TYPE (val)), type)\n \t\t\t       && int_fits_type_p (TYPE_MAX_VALUE (TREE_TYPE (val)), type))\n \t\t\t/* Change in signedness doesn't matter\n \t\t\t   if an enum value is unaffected.  */\n \t\t\t;\n+#endif\n \t\t      /* If the value is extended from a narrower\n \t\t\t unsigned type, it doesn't matter whether we\n \t\t\t pass it as signed or unsigned; the value"}]}