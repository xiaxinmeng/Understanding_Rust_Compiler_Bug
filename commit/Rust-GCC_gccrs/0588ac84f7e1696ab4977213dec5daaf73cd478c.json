{"sha": "0588ac84f7e1696ab4977213dec5daaf73cd478c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4OGFjODRmN2UxNjk2YWI0OTc3MjEzZGVjNWRhYWY3M2NkNDc4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-12-07T17:02:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-12-07T17:02:20Z"}, "message": "tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add UPPER_BOUND parameter.\n\n\n \t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add UPPER_BOUND\n \tparameter.\n \t(try_unroll_loop_completely) Update.\n\nFrom-SVN: r194305", "tree": {"sha": "6c39dd42bdad2100bc3c877f6ecce5ea863cf713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c39dd42bdad2100bc3c877f6ecce5ea863cf713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0588ac84f7e1696ab4977213dec5daaf73cd478c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0588ac84f7e1696ab4977213dec5daaf73cd478c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0588ac84f7e1696ab4977213dec5daaf73cd478c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0588ac84f7e1696ab4977213dec5daaf73cd478c/comments", "author": null, "committer": null, "parents": [{"sha": "0bd0d3bc95f7f3c85aa44dededa4443a5200e4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd0d3bc95f7f3c85aa44dededa4443a5200e4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd0d3bc95f7f3c85aa44dededa4443a5200e4c2"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "6b8318f44d6c57a5b3ce5d0fae63cfc941b954b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588ac84f7e1696ab4977213dec5daaf73cd478c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588ac84f7e1696ab4977213dec5daaf73cd478c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0588ac84f7e1696ab4977213dec5daaf73cd478c", "patch": "@@ -1,3 +1,9 @@\n+2012-12-07  Jan Hubicka  <jh@suse.cz>\n+\n+ \t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add UPPER_BOUND\n+ \tparameter.\n+ \t(try_unroll_loop_completely) Update.\n+\n 2012-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/55395"}, {"sha": "d54f704725afb5570165b785ea7078ace3719529", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0588ac84f7e1696ab4977213dec5daaf73cd478c/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0588ac84f7e1696ab4977213dec5daaf73cd478c/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=0588ac84f7e1696ab4977213dec5daaf73cd478c", "patch": "@@ -1,5 +1,5 @@\n-/* Induction variable canonicalization.\n-   Copyright (C) 2004, 2005, 2007, 2008, 2010\n+/* Induction variable canonicalization and loop peeling.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2010, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -207,10 +207,12 @@ constant_after_peeling (tree op, gimple stmt, struct loop *loop)\n    iteration of the loop.\n    EDGE_TO_CANCEL (if non-NULL) is an non-exit edge eliminated in the last iteration\n    of loop.\n-   Return results in SIZE, estimate benefits for complete unrolling exiting by EXIT.  */\n+   Return results in SIZE, estimate benefits for complete unrolling exiting by EXIT. \n+   Stop estimating after UPPER_BOUND is met. Return true in this case */\n \n-static void\n-tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, struct loop_size *size)\n+static bool\n+tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, struct loop_size *size,\n+\t\t\t int upper_bound)\n {\n   basic_block *body = get_loop_body (loop);\n   gimple_stmt_iterator gsi;\n@@ -316,6 +318,12 @@ tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, stru\n \t      if (likely_eliminated || likely_eliminated_last)\n \t\tsize->last_iteration_eliminated_by_peeling += num;\n \t    }\n+\t  if ((size->overall * 3 / 2 - size->eliminated_by_peeling\n+\t      - size->last_iteration_eliminated_by_peeling) > upper_bound)\n+\t    {\n+              free (body);\n+\t      return true;\n+\t    }\n \t}\n     }\n   while (path.length ())\n@@ -357,6 +365,7 @@ tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel, stru\n \t     size->last_iteration_eliminated_by_peeling);\n \n   free (body);\n+  return false;\n }\n \n /* Estimate number of insns of completely unrolled loop.\n@@ -699,12 +708,22 @@ try_unroll_loop_completely (struct loop *loop,\n       sbitmap wont_exit;\n       edge e;\n       unsigned i;\n+      bool large;\n       vec<edge> to_remove = vNULL;\n       if (ul == UL_SINGLE_ITER)\n \treturn false;\n \n-      tree_estimate_loop_size (loop, exit, edge_to_cancel, &size);\n+      large = tree_estimate_loop_size\n+\t\t (loop, exit, edge_to_cancel, &size,\n+\t\t  PARAM_VALUE (PARAM_MAX_COMPLETELY_PEELED_INSNS));\n       ninsns = size.overall;\n+      if (large)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"Not unrolling loop %d: it is too large.\\n\",\n+\t\t     loop->num);\n+\t  return false;\n+\t}\n \n       unr_insns = estimated_unrolled_size (&size, n_unroll);\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}