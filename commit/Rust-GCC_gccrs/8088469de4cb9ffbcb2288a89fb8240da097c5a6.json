{"sha": "8088469de4cb9ffbcb2288a89fb8240da097c5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4ODQ2OWRlNGNiOWZmYmNiMjI4OGE4OWZiODI0MGRhMDk3YzVhNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T11:27:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-27T11:27:52Z"}, "message": "(ior_operand): New function.\n\nFrom-SVN: r6330", "tree": {"sha": "d0493433dad69c4c077f279210acf91d30ef2ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0493433dad69c4c077f279210acf91d30ef2ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8088469de4cb9ffbcb2288a89fb8240da097c5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8088469de4cb9ffbcb2288a89fb8240da097c5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8088469de4cb9ffbcb2288a89fb8240da097c5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8088469de4cb9ffbcb2288a89fb8240da097c5a6/comments", "author": null, "committer": null, "parents": [{"sha": "bf500664d77741f264e95927eb3f4554fdd88e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf500664d77741f264e95927eb3f4554fdd88e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf500664d77741f264e95927eb3f4554fdd88e90"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "3896044673b8d4f783cc6323882aa2a32205c0c7", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8088469de4cb9ffbcb2288a89fb8240da097c5a6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8088469de4cb9ffbcb2288a89fb8240da097c5a6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8088469de4cb9ffbcb2288a89fb8240da097c5a6", "patch": "@@ -173,6 +173,20 @@ and_operand (op, mode)\n   return register_operand (op, mode);\n }\n \n+/* Return 1 if OP is a valid first operand to an IOR insn.  */\n+\n+int\n+ior_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == CONST_INT)\n+    return ((unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n+\t    || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100);\n+\n+  return register_operand (op, mode);\n+}\n+\n /* Return 1 if OP is a constant that is the width, in bits, of an integral\n    mode smaller than DImode.  */\n "}]}