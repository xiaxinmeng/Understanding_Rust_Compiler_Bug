{"sha": "8509a5001046d10fda6c9a2c0c4511f75fc8f619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwOWE1MDAxMDQ2ZDEwZmRhNmM5YTJjMGM0NTExZjc1ZmM4ZjYxOQ==", "commit": {"author": {"name": "Matthias Kretz", "email": "m.kretz@gsi.de", "date": "2021-06-23T15:36:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-23T17:29:06Z"}, "message": "libstdc++: Document simd testsuite\n\nSigned-off-by: Matthias Kretz <m.kretz@gsi.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/README.md: New file.", "tree": {"sha": "b87aeefc1e8c0b3e6aca4f2af92f3b8ab1e71e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b87aeefc1e8c0b3e6aca4f2af92f3b8ab1e71e00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8509a5001046d10fda6c9a2c0c4511f75fc8f619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509a5001046d10fda6c9a2c0c4511f75fc8f619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8509a5001046d10fda6c9a2c0c4511f75fc8f619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509a5001046d10fda6c9a2c0c4511f75fc8f619/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848bc05a98b6ea416340bfd9cec9a9584fe182fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848bc05a98b6ea416340bfd9cec9a9584fe182fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848bc05a98b6ea416340bfd9cec9a9584fe182fe"}], "stats": {"total": 257, "additions": 257, "deletions": 0}, "files": [{"sha": "db0d71f8d43f4ca5a7b158b144e2f32a60b06a0a", "filename": "libstdc++-v3/testsuite/experimental/simd/README.md", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509a5001046d10fda6c9a2c0c4511f75fc8f619/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2FREADME.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509a5001046d10fda6c9a2c0c4511f75fc8f619/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2FREADME.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2FREADME.md?ref=8509a5001046d10fda6c9a2c0c4511f75fc8f619", "patch": "@@ -0,0 +1,257 @@\n+# SIMD Tests\n+\n+To execute the simd testsuite, call `make check-simd`, typically with `-j N` \n+argument.\n+\n+For more control over verbosity, compiler flags, and use of a simulator, use \n+the environment variables documented below.\n+\n+## Environment variables\n+\n+### `target_list`\n+\n+Similar to dejagnu target lists: E.g. \n+`target_list=\"unix{-march=sandybridge,-march=native/-ffast-math,-march=native/-ffinite-math-only}\" \n+would create three subdirs in `testsuite/simd/` to run the complete simd \n+testsuite first with `-march=sandybridge`, then with `-march=native \n+-ffast-math`, and finally with `-march=native -ffinite-math-only`.\n+\n+\n+### `CHECK_SIMD_CONFIG`\n+\n+This variable can be set to a path to a file which is equivalent to a dejagnu \n+board. The file needs to be a valid `sh` script since it is sourced from the \n+`scripts/check_simd` script. It's purpose is to set the `target_list` variable \n+depending on `$target_triplet` (or whatever else makes sense for you). Example:\n+\n+```sh\n+case \"$target_triplet\" in\n+x86_64-*)\n+  target_list=\"unix{-march=sandybridge,-march=skylake-avx512,-march=native/-ffast-math,-march=athlon64,-march=core2,-march=nehalem,-march=skylake,-march=native/-ffinite-math-only,-march=knl}\"\n+  ;;\n+\n+powerpc64le-*)\n+  define_target power7 \"-mcpu=power7 -static\" \"$HOME/bin/run_on_gccfarm gcc112\"\n+  define_target power8 \"-mcpu=power8 -static\" \"$HOME/bin/run_on_gccfarm gcc112\"\n+  define_target power9 \"-mcpu=power9 -static\" \"$HOME/bin/run_on_gccfarm gcc135\"\n+  target_list=\"power7 power8 power9{,-ffast-math}\"\n+  ;;\n+\n+powerpc64-*)\n+  define_target power7 \"-mcpu=power7 -static\" \"$HOME/bin/run_on_gccfarm gcc110\"\n+  define_target power8 \"-mcpu=power8 -static\" \"$HOME/bin/run_on_gccfarm gcc110\"\n+  target_list=\"power7 power8{,-ffast-math}\"\n+  ;;\n+esac\n+```\n+\n+The `unix` target is pre-defined to have no initial flags and no simulator. Use \n+the `define_target(name, flags, sim)` function to define your own targets for \n+the `target_list` variable. In the example above `define_target power7 \n+\"-mcpu=power7 -static\" \"$HOME/bin/run_on_gccfarm gcc112\"` defines the target \n+`power7` which always uses the flags `-mcpu=power7` and `-static` when \n+compiling tests and prepends `$HOME/bin/run_on_gccfarm gcc112` to test \n+executables. In `target_list` you can now use the name `power7`. E.g. \n+`target_list=\"power7 power7/-ffast-math\"` or it's shorthand \n+`target_list=\"power7{,-ffast-math}\"`.\n+\n+\n+### `DRIVEROPTS`\n+\n+This variable affects the `Makefile`s generated per target (as defined above). \n+It's a string of flags that are prepended to the `driver.sh` invocation which \n+builds and runs the tests. You `cd` into a simd test subdir and use `make help` \n+to see possible options and a list of all valid targets.\n+\n+```\n+use DRIVEROPTS=<options> to pass the following options:\n+-q, --quiet         Disable same-line progress output (default if stdout is\n+                    not a tty).\n+-p, --percentage    Add percentage to default same-line progress output.\n+-v, --verbose       Print one line per test and minimal extra information on\n+                    failure.\n+-vv                 Print all compiler and test output.\n+-k, --keep-failed   Keep executables of failed tests.\n+--sim <executable>  Path to an executable that is prepended to the test\n+                    execution binary (default: the value of\n+                    GCC_TEST_SIMULATOR).\n+--timeout-factor <x>\n+                    Multiply the default timeout with x.\n+-x, --run-expensive Compile and run tests marked as expensive (default:\n+                    true if GCC_TEST_RUN_EXPENSIVE is set, false otherwise).\n+-o <pattern>, --only <pattern>\n+                    Compile and run only tests matching the given pattern.\n+```\n+\n+\n+### `TESTFLAGS`\n+\n+This variable also affects the `Makefile`s generated per target. It's a list of \n+compiler flags that are appended to `CXXFLAGS`.\n+\n+\n+### `GCC_TEST_SIMULATOR`\n+\n+If `--sim` is not passed via `DRIVEROPTS`, then this variable is prepended to \n+test invocations. If a simulator was defined via the `CHECK_SIMD_CONFIG` \n+script, then then generated `Makefile` sets the `GCC_TEST_SIMULATOR` variable.\n+\n+\n+### `GCC_TEST_RUN_EXPENSIVE`\n+\n+If set to any non-empty string, run tests marked as expensive, otherwise treat \n+these tests as `UNSUPPORTED`.\n+\n+\n+## Writing new tests\n+\n+A test starts with the copyright header, directly followed by directives \n+influencing the set of tests to generate and whether the test driver should \n+expect a failure.\n+\n+Then the test must at least `#include \"bits/verify.h\", which provides `main` \n+and declares a `template <typename V> void test()` function, which the test has \n+to define. The template parameter is set to `simd<T, Abi>` type where `T` and \n+`Abi` are determined by the type and ABI subset dimensions.\n+\n+The `test()` functions are typically implemented using the `COMPARE(x, \n+reference)`, `VERIFY(boolean)`, and `ULP_COMPARE(x, reference, \n+allowed_distance)` macros.\n+\n+### Directives\n+\n+* `// skip: <type pattern> <ABI subset pattern> <target triplet pattern> \n+  <CXXFLAGS pattern>`\n+  If all patterns match, the test is silently skipped.\n+\n+* `// only: <type pattern> <ABI subset pattern> <target triplet pattern> \n+  <CXXFLAGS pattern>`\n+  If any pattern doesn't match, the test is silently skipped.\n+\n+* `// expensive: <type pattern> <ABI subset pattern> <target triplet pattern>\n+  <CXXFLAGS pattern>`\n+  If all patterns match, the test is `UNSUPPORTED` unless expensive tests are \n+  enabled.\n+\n+* `// xfail: run|compile <type pattern> <ABI subset pattern> <target triplet \n+  pattern> <CXXFLAGS pattern>`\n+  If all patterns match, test compilation or execution is expected to fail. The \n+  test then shows as \"XFAIL: ...\". If the test passes, the test shows \"XPASS: \n+  ...\".\n+\n+All patterns are matched via\n+```sh\n+case '<test context>' in\n+  <pattern>)\n+  # treat as match\n+  ;;\n+esac\n+```\n+The `<CXXFLAGS pattern>` is implicitly adds a `*` wildcard before and after the \n+pattern. Thus, the `CXXFLAGS` pattern matches a substring and all other \n+patterns require a full match.\n+\n+Examples:\n+```cpp\n+// The test is only valid for floating-point types:\n+// only: float|double|ldouble * * *\n+\n+// Skip the test for long double for all powerpc64* targets:\n+// skip: ldouble * powerpc64* *\n+\n+// The test is expected to unconditionally fail on execution:\n+// xfail: run * * * *\n+\n+// ABI subsets 1-9 are considered expensive:\n+// expensive: * [1-9] * *\n+```\n+\n+\n+## Implementation sketch\n+\n+* `scripts/create_testsuite_files` collects all `*.c` and `*.cc` files with \n+  `simd/tests/` in their path into the file `testsuite_file_simd` (and at the \n+  same time removes them from `testsuite_files`.\n+\n+* The `check-simd` target in `testsuite/Makefile.am` calls \n+  `scripts/check_simd`. This script calls \n+  `testsuite/experimental/simd/generate_makefile.sh` to generate `Makefile`s in \n+  all requested subdirectories. The subdirectories are communicated back to the \n+  make target via a `stdout` pipe. The `check-simd` rule then spawns sub-make \n+  in these subdirectories. Finally it collects all summaries \n+  (`simd_testsuite.sum`) to present them at the end of the rule.\n+\n+* The generated Makefiles define targets for each file in `testsuite_file_simd` \n+  (you can edit this file after it was generated, though that's not \n+  recommended) while adding two test dimensions: type and ABI subset. The type \n+  is a list of all arithmetic types, potentially reduced via `only` and/or \n+  `skip` directives in the test's source file. The ABI subset is a number \n+  between 0 and 9 (inclusive) mapping to a set of `simd_abi`s in\n+  `testsuite/experimental/simd/tests/bits/verify.h` (`iterate_abis()`). The \n+  tests are thus potentially compiled 170 (17 arithmetic types * 10 ABI \n+  subsets) times. This is necessary to limit the memory usage of GCC to \n+  reasonable numbers and keep the compile time below 1 minute (per compiler \n+  invocation).\n+\n+* When `make` executes in the generated subdir, the `all` target depends on \n+  building and running all tests via `testsuite/experimental/simd/driver.sh` \n+  and collecting their logs into a `simd_testsuite.log` and then extracting \n+  `simd_testsuite.sum` from it.\n+\n+* The `driver.sh` script builds and runs the test, parses the compiler and test \n+  output, and prints progress information to the terminal.\n+\n+## Appendix\n+\n+### `run_on_gccfarm` script\n+\n+```sh\n+#!/bin/sh\n+usage() {\n+  cat <<EOF\n+Usage $0 <hostname> <executable> [arguments]\n+\n+Copies <executable> to $host, executes it and cleans up again.\n+EOF\n+}\n+\n+[ $# -lt 2 ] && usage && exit 1\n+case \"$1\" in\n+  -h|--help)\n+    usage\n+    exit\n+    ;;\n+esac\n+\n+host=\"$1\"\n+exe=\"$2\"\n+shift 2\n+\n+# Copy executable locally to strip it before scp to remote host\n+local_tmpdir=$(mktemp -d)\n+cp \"$exe\" $local_tmpdir\n+cd $local_tmpdir\n+exe=\"${exe##*/}\"\n+powerpc64le-linux-gnu-strip \"$exe\"\n+\n+ssh_controlpath=~/.local/run_on_gccfarm/$host\n+if [ ! -S $ssh_controlpath ]; then\n+  mkdir -p ~/.local/run_on_gccfarm\n+  (\n+    flock -n 9\n+    if [ ! -S $ssh_controlpath ]; then\n+      ssh -o ControlMaster=yes -o ControlPath=$ssh_controlpath -o ControlPersist=10m $host.fsffrance.org true\n+    fi\n+  ) 9> ~/.local/run_on_gccfarm/lockfile\n+fi\n+opts=\"-o ControlPath=$ssh_controlpath\"\n+\n+remote_tmpdir=$(ssh $opts $host.fsffrance.org mktemp -d -p .)\n+scp $opts -C -q \"$exe\" $host.fsffrance.org:$remote_tmpdir/\n+cd\n+rm -r \"$local_tmpdir\" &\n+ssh $opts $host.fsffrance.org $remote_tmpdir/$exe \"$@\"\n+ret=$?\n+ssh $opts $host.fsffrance.org rm -r $remote_tmpdir &\n+exit $ret\n+```"}]}