{"sha": "e6425869abeaf52c2c23e924140baa6c28dc9118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0MjU4NjlhYmVhZjUyYzJjMjNlOTI0MTQwYmFhNmMyOGRjOTExOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:36:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:36:44Z"}, "message": "[multiple changes]\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Get_Incomplete_View_Of_Ancestor):\n\tNew function to implement the notion introduced in RM 7.3.1\n\t(5.2/3): in a child unit, a derived type is within the derivation\n\tclass of an ancestor declared in a parent unit, even if there\n\tis an intermediate derivation that does not see the full view\n\tof that ancestor.\n\t* sem_res.adb (Valid_Conversion): if all else fails, examine if an\n\tincomplete view of an ancestor makes a numeric conversion legal.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb: in Ada2012 operators can only have in\n\tparameters.\n\n2013-04-11  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Create_Binder_Mapping_File): Do not put into\n\tthe mapping file ALI files of sources that have been replaced.\n\n2013-04-11  Vincent Celier  <celier@adacore.com>\n\n\t* projects.texi: Add subsection Duplicate Sources in Projects.\n\n2013-04-11  Vincent Celier  <celier@adacore.com>\n\n\t* gnat_ugn.texi: Add documentation for gnatmake switch -droot_dir/**\n\n2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n\n\t* init.c (__gnat_install_handler): Only set up an alternate\n\tstack when installing a signal handler for SIGSEGV.\n\n2013-04-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb (Connect_Socket, timeout version): Call\n\tunderlying connect operation directly, not through the 2-argument\n\tConnect_Socket thick binding, in order to avoid raising a junk\n\texception for the EINPROGRESS return.\n\nFrom-SVN: r197775", "tree": {"sha": "94590b0d8e08551f870e7b7e60b3aa605b8e144b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94590b0d8e08551f870e7b7e60b3aa605b8e144b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6425869abeaf52c2c23e924140baa6c28dc9118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6425869abeaf52c2c23e924140baa6c28dc9118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6425869abeaf52c2c23e924140baa6c28dc9118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6425869abeaf52c2c23e924140baa6c28dc9118/comments", "author": null, "committer": null, "parents": [{"sha": "fe96ecb94ac3a81499d804d428d275284e676027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe96ecb94ac3a81499d804d428d275284e676027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe96ecb94ac3a81499d804d428d275284e676027"}], "stats": {"total": 225, "additions": 182, "deletions": 43}, "files": [{"sha": "203295010da2af7fac52416004a3d1a4b6cf54ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -1,3 +1,44 @@\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Get_Incomplete_View_Of_Ancestor):\n+\tNew function to implement the notion introduced in RM 7.3.1\n+\t(5.2/3): in a child unit, a derived type is within the derivation\n+\tclass of an ancestor declared in a parent unit, even if there\n+\tis an intermediate derivation that does not see the full view\n+\tof that ancestor.\n+\t* sem_res.adb (Valid_Conversion): if all else fails, examine if an\n+\tincomplete view of an ancestor makes a numeric conversion legal.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb: in Ada2012 operators can only have in\n+\tparameters.\n+\n+2013-04-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.adb (Create_Binder_Mapping_File): Do not put into\n+\tthe mapping file ALI files of sources that have been replaced.\n+\n+2013-04-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* projects.texi: Add subsection Duplicate Sources in Projects.\n+\n+2013-04-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnat_ugn.texi: Add documentation for gnatmake switch -droot_dir/**\n+\n+2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* init.c (__gnat_install_handler): Only set up an alternate\n+\tstack when installing a signal handler for SIGSEGV.\n+\n+2013-04-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb (Connect_Socket, timeout version): Call\n+\tunderlying connect operation directly, not through the 2-argument\n+\tConnect_Socket thick binding, in order to avoid raising a junk\n+\texception for the EINPROGRESS return.\n+\n 2013-04-11  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cdlili.adb: Minor addition of pragma Warnings (Off)."}, {"sha": "7f9f34d992c724e17f56d96e4f13a2b62c05b789", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -200,6 +200,12 @@ package body GNAT.Sockets is\n    --  Raise Constraint_Error if Fd is less than 0 or greater than or equal to\n    --  FD_SETSIZE, on platforms where fd_set is a bitmap.\n \n+   function Connect_Socket\n+     (Socket : Socket_Type;\n+      Server : Sock_Addr_Type) return C.int;\n+   pragma Inline (Connect_Socket);\n+   --  Underlying implementation for the Connect_Socket procedures\n+\n    --  Types needed for Datagram_Socket_Stream_Type\n \n    type Datagram_Socket_Stream_Type is new Root_Stream_Type with record\n@@ -662,11 +668,10 @@ package body GNAT.Sockets is\n    -- Connect_Socket --\n    --------------------\n \n-   procedure Connect_Socket\n+   function Connect_Socket\n      (Socket : Socket_Type;\n-      Server : Sock_Addr_Type)\n+      Server : Sock_Addr_Type) return C.int\n    is\n-      Res : C.int;\n       Sin : aliased Sockaddr_In;\n       Len : constant C.int := Sin'Size / 8;\n \n@@ -681,17 +686,19 @@ package body GNAT.Sockets is\n         (Sin'Unchecked_Access,\n          Short_To_Network (C.unsigned_short (Server.Port)));\n \n-      Res := C_Connect (C.int (Socket), Sin'Address, Len);\n+      return C_Connect (C.int (Socket), Sin'Address, Len);\n+   end Connect_Socket;\n \n-      if Res = Failure then\n+   procedure Connect_Socket\n+     (Socket : Socket_Type;\n+      Server : Sock_Addr_Type)\n+   is\n+   begin\n+      if Connect_Socket (Socket, Server) = Failure then\n          Raise_Socket_Error (Socket_Errno);\n       end if;\n    end Connect_Socket;\n \n-   --------------------\n-   -- Connect_Socket --\n-   --------------------\n-\n    procedure Connect_Socket\n      (Socket   : Socket_Type;\n       Server   : Sock_Addr_Type;\n@@ -719,19 +726,16 @@ package body GNAT.Sockets is\n       Req := (Name => Non_Blocking_IO, Enabled => True);\n       Control_Socket (Socket, Request => Req);\n \n-      --  Start operation (non-blocking), will raise Socket_Error with\n-      --  EINPROGRESS.\n+      --  Start operation (non-blocking), will return Failure with errno set\n+      --  to EINPROGRESS.\n \n-      begin\n-         Connect_Socket (Socket, Server);\n-      exception\n-         when E : Socket_Error =>\n-            if Resolve_Exception (E) = Operation_Now_In_Progress then\n-               null;\n-            else\n-               raise;\n-            end if;\n-      end;\n+      Res := Connect_Socket (Socket, Server);\n+      if Res = Failure then\n+         Conn_Err := Socket_Errno;\n+         if Conn_Err /= SOSC.EINPROGRESS then\n+            Raise_Socket_Error (Conn_Err);\n+         end if;\n+      end if;\n \n       --  Wait for socket to become available for writing\n "}, {"sha": "9ef3fe45645d055dda8b0ba56154074810eb1345", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -12315,6 +12315,9 @@ specified, no switch @option{^-P^/PROJECT_FILE^} may be specified (see below).\n @cindex @option{^-d^/SOURCE_DIRS^} (@code{gnatname})\n Look for source files in directory @file{dir}. There may be zero, one or more\n spaces between @option{^-d^/SOURCE_DIRS=^} and @file{dir}.\n+@file{dir} may end with @code{/**}, that is it may be of the form\n+@code{root_dir/**}. In this case, the directory @code{root_dir} and all of its\n+subdirectories, recursively, have to be searched for sources.\n When a switch @option{^-d^/SOURCE_DIRS^}\n is specified, the current working directory will not be searched for source\n files, unless it is explicitly specified with a @option{^-d^/SOURCE_DIRS^}"}, {"sha": "ef9087c63c4ab29151d2210e6032c0dbbfd1af0e", "filename": "gcc/ada/init.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -603,14 +603,6 @@ __gnat_install_handler (void)\n      handled properly, avoiding a SEGV generation from stack usage by the\n      handler itself.  */\n \n-#if defined (i386) || defined (__x86_64__) || defined (__powerpc__)\n-  stack_t stack;\n-  stack.ss_sp = __gnat_alternate_stack;\n-  stack.ss_size = sizeof (__gnat_alternate_stack);\n-  stack.ss_flags = 0;\n-  sigaltstack (&stack, NULL);\n-#endif\n-\n   act.sa_sigaction = __gnat_error_handler;\n   act.sa_flags = SA_NODEFER | SA_RESTART | SA_SIGINFO;\n   sigemptyset (&act.sa_mask);\n@@ -624,11 +616,23 @@ __gnat_install_handler (void)\n     sigaction (SIGILL,  &act, NULL);\n   if (__gnat_get_interrupt_state (SIGBUS) != 's')\n     sigaction (SIGBUS,  &act, NULL);\n+  if (__gnat_get_interrupt_state (SIGSEGV) != 's')\n+    {\n #if defined (i386) || defined (__x86_64__) || defined (__powerpc__)\n-  act.sa_flags |= SA_ONSTACK;\n+      /* Setup an alternate stack region for the handler execution so that\n+\t stack overflows can be handled properly, avoiding a SEGV generation\n+\t from stack usage by the handler itself.  */\n+      stack_t stack;\n+\n+      stack.ss_sp = __gnat_alternate_stack;\n+      stack.ss_size = sizeof (__gnat_alternate_stack);\n+      stack.ss_flags = 0;\n+      sigaltstack (&stack, NULL);\n+\n+      act.sa_flags |= SA_ONSTACK;\n #endif\n-  if (__gnat_get_interrupt_state (SIGSEGV) != 's')\n-    sigaction (SIGSEGV, &act, NULL);\n+      sigaction (SIGSEGV, &act, NULL);\n+    }\n \n   __gnat_handler_installed = 1;\n }"}, {"sha": "dc28bfd9b64dd0a57513b4f69cb191aede8129da", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -390,7 +390,10 @@ package body Makeutl is\n \n             Unit := Source.Unit;\n \n-            if Unit = No_Unit_Index or else Unit.Name = No_Name then\n+            if Source.Replaced_By /= No_Source\n+              or else Unit = No_Unit_Index\n+              or else Unit.Name = No_Name\n+            then\n                ALI_Name := No_File;\n \n             --  If this is a body, put it in the mapping"}, {"sha": "492d23a44163d3003ccfc4138642a43440f00303", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -217,6 +217,7 @@ should contain the following code:\n \n @menu\n * Source Files and Directories::\n+* Duplicate Sources in Projects::\n * Object and Exec Directory::\n * Main Subprograms::\n * Tools Options in Project Files::\n@@ -401,21 +402,31 @@ setting @code{Source_Dirs}. The project manager automatically finds\n @file{pack.ads}, @file{pack.adb} and @file{proc.adb} as source files of the\n project.\n \n-Note that it is considered an error for a project file to have no sources\n-attached to it unless explicitly declared as mentioned above.\n+Note that by default a warning is issued when a project has no sources attached\n+to it and this is not explicitly indicated in the project file.\n \n+@c ---------------------------------------------\n+@node Duplicate Sources in Projects\n+@subsection Duplicate Sources in Projects\n+@c ---------------------------------------------\n+\n+@noindent\n If the order of the source directories is known statically, that is if\n-@code{\"**\"} is not used in the string list @code{Source_Dirs}, then there may\n+@code{\"/**\"} is not used in the string list @code{Source_Dirs}, then there may\n be several files with the same source file name sitting in different\n directories of the project. In this case, only the file in the first directory\n is considered as a source of the project and the others are hidden. If\n-@code{\"**\"} is used in the string list @code{Source_Dirs}, it is an error\n+@code{\"/**\"} is used in the string list @code{Source_Dirs}, it is an error\n to have several files with the same source file name in the same directory\n-@code{\"**\"} subtree, since there would be an ambiguity as to which one should\n+@code{\"/**\"} subtree, since there would be an ambiguity as to which one should\n be used. However, two files with the same source file name may exist in two\n single directories or directory subtrees. In this case, the one in the first\n directory or directory subtree is a source of the project.\n \n+If there are two sources in different directories of the same @code{\"/**\"}\n+subtree, one way to resolve the problem is to exclude the directory of the\n+file that should not be used as a source of the project.\n+\n @c ---------------------------------------------\n @node Object and Exec Directory\n @subsection Object and Exec Directory"}, {"sha": "c18a3a6457e529d2347c5c194463f8966ba9bde1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -12633,6 +12633,13 @@ package body Sem_Ch6 is\n             --  [IN] OUT parameters allowed for functions in Ada 2012\n \n             if Ada_Version >= Ada_2012 then\n+\n+               --  Even in Ada 2012 operators can only have IN parameters\n+\n+               if Is_Operator_Symbol_Name (Chars (Scope (Formal_Id))) then\n+                  Error_Msg_N (\"operators can only have IN parameters\", Spec);\n+               end if;\n+\n                if In_Present (Spec) then\n                   Set_Ekind (Formal_Id, E_In_Out_Parameter);\n                else"}, {"sha": "36d64bb2f3b260241154eee7606b9ccfcc6fc4ad", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -10504,8 +10504,9 @@ package body Sem_Res is\n       Operand     : Node_Id;\n       Report_Errs : Boolean := True) return Boolean\n    is\n-      Target_Type : constant Entity_Id := Base_Type (Target);\n-      Opnd_Type   : Entity_Id          := Etype (Operand);\n+      Target_Type  : constant Entity_Id := Base_Type (Target);\n+      Opnd_Type    : Entity_Id          := Etype (Operand);\n+      Inc_Ancestor : Entity_Id;\n \n       function Conversion_Check\n         (Valid : Boolean;\n@@ -10883,6 +10884,13 @@ package body Sem_Res is\n          end;\n       end if;\n \n+      --  If we are within a child unit, check whether the type of the\n+      --  expression has an ancestor in a parent unit, in which case it\n+      --  belongs to its derivation class even if the ancestor is private.\n+      --  See RM 7.3.1 (5.2/3).\n+\n+      Inc_Ancestor := Get_Incomplete_View_Of_Ancestor (Opnd_Type);\n+\n       --  Numeric types\n \n       if Is_Numeric_Type (Target_Type)  then\n@@ -10911,7 +10919,10 @@ package body Sem_Res is\n \n          else\n             return Conversion_Check\n-                    (Is_Numeric_Type (Opnd_Type),\n+                    (Is_Numeric_Type (Opnd_Type)\n+                       or else\n+                         (Present (Inc_Ancestor)\n+                           and then Is_Numeric_Type (Inc_Ancestor)),\n                      \"illegal operand for numeric conversion\");\n          end if;\n "}, {"sha": "071bdd5a20c68ed206ed6bf811792e9b244d16f0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -5380,6 +5380,55 @@ package body Sem_Util is\n       end if;\n    end Get_Generic_Entity;\n \n+   -------------------------------------\n+   -- Get_Incomplete_View_Of_Ancestor --\n+   -------------------------------------\n+\n+   function Get_Incomplete_View_Of_Ancestor (E : Entity_Id) return Entity_Id is\n+      Cur_Unit  : constant Entity_Id := Cunit_Entity (Current_Sem_Unit);\n+      Par_Scope : Entity_Id;\n+      Par_Type  : Entity_Id;\n+\n+   begin\n+      --  The incomplete view of an ancestor is only relevant for private\n+      --  derived types in child units.\n+\n+      if not Is_Derived_Type (E)\n+        or else not Is_Child_Unit (Cur_Unit)\n+      then\n+         return Empty;\n+\n+      else\n+         Par_Scope := Scope (Cur_Unit);\n+         if No (Par_Scope) then\n+            return Empty;\n+         end if;\n+\n+         Par_Type := Etype (Base_Type (E));\n+\n+         --  Traverse list of ancestor types until we find one declared in\n+         --  a parent or grandparent unit (two levels seem sufficient).\n+\n+         while Present (Par_Type) loop\n+            if Scope (Par_Type) = Par_Scope\n+              or else Scope (Par_Type) = Scope (Par_Scope)\n+            then\n+               return Par_Type;\n+\n+            elsif not Is_Derived_Type (Par_Type) then\n+               return Empty;\n+\n+            else\n+               Par_Type := Etype (Base_Type (Par_Type));\n+            end if;\n+         end loop;\n+\n+         --  If none found, there is no relevant ancestor type.\n+\n+         return Empty;\n+      end if;\n+   end Get_Incomplete_View_Of_Ancestor;\n+\n    ----------------------\n    -- Get_Index_Bounds --\n    ----------------------"}, {"sha": "11fe6548432a8f30c78da3f9639d65e74847afd7", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6425869abeaf52c2c23e924140baa6c28dc9118/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e6425869abeaf52c2c23e924140baa6c28dc9118", "patch": "@@ -582,6 +582,12 @@ package Sem_Util is\n    --  Returns the true generic entity in an instantiation. If the name in the\n    --  instantiation is a renaming, the function returns the renamed generic.\n \n+   function Get_Incomplete_View_Of_Ancestor (E : Entity_Id) return Entity_Id;\n+   --  Implements the notion introduced ever-so briefly in RM 7.3.1 (5.2/3):\n+   --  in a child unit a derived type is within the derivation class of an\n+   --  ancestor declared in a parent unit, even if there is an intermediate\n+   --  derivation that does not see the full view of that ancestor.\n+\n    procedure Get_Index_Bounds (N : Node_Id; L, H : out Node_Id);\n    --  This procedure assigns to L and H respectively the values of the low and\n    --  high bounds of node N, which must be a range, subtype indication, or the"}]}