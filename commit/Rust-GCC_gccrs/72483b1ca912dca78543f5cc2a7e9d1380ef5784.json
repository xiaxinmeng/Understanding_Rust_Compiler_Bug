{"sha": "72483b1ca912dca78543f5cc2a7e9d1380ef5784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI0ODNiMWNhOTEyZGNhNzg1NDNmNWNjMmE3ZTlkMTM4MGVmNTc4NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-08T21:29:55Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-08T21:29:55Z"}, "message": "Improve the error message for bad type bounds\n\nWe emit one error for all unsatisfied bounds such as:\n\ntest.rs:26:31: error: bounds not satisfied for Test \u2018Bar, Baz\u2019 is not satisfied\n   21 | fn type_bound_test<T: Foo + Bar + Baz>() -> i32 {\n      |                             ~     ~\n......\n   26 |     let a = type_bound_test::<Test>();\n      |                               ^", "tree": {"sha": "fc4db17b64ffe2717ba4b6f2ddf716a81aa1ef31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4db17b64ffe2717ba4b6f2ddf716a81aa1ef31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72483b1ca912dca78543f5cc2a7e9d1380ef5784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72483b1ca912dca78543f5cc2a7e9d1380ef5784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72483b1ca912dca78543f5cc2a7e9d1380ef5784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72483b1ca912dca78543f5cc2a7e9d1380ef5784/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f544652b42f9c9330e87ceb6df517d675aa5300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f544652b42f9c9330e87ceb6df517d675aa5300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f544652b42f9c9330e87ceb6df517d675aa5300"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "fff86beaa27a06a411303ac94aeccccb3d5880a0", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=72483b1ca912dca78543f5cc2a7e9d1380ef5784", "patch": "@@ -283,7 +283,7 @@ class TypeResolveGenericParam : public TypeCheckBase\n \n \t\t  TraitReference *trait = resolve_trait_path (b->get_path ());\n \t\t  TyTy::TypeBoundPredicate predicate (\n-\t\t    trait->get_mappings ().get_defid ());\n+\t\t    trait->get_mappings ().get_defid (), b->get_locus ());\n \n \t\t  specified_bounds.push_back (std::move (predicate));\n \t\t}"}, {"sha": "008dc19803213ab8f6a2310e68d86001bf8cd1a3", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=72483b1ca912dca78543f5cc2a7e9d1380ef5784", "patch": "@@ -83,5 +83,11 @@ TypeBoundPredicate::get () const\n   return ref;\n }\n \n+std::string\n+TypeBoundPredicate::get_name () const\n+{\n+  return get ()->get_name ();\n+}\n+\n } // namespace TyTy\n } // namespace Rust"}, {"sha": "2d165c3a0739fa639a755e6074d1c9ad752a5e7b", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=72483b1ca912dca78543f5cc2a7e9d1380ef5784", "patch": "@@ -62,6 +62,49 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n   return false;\n }\n \n+bool\n+BaseType::bounds_compatible (const BaseType &other, Location locus) const\n+{\n+  std::vector<std::reference_wrapper<const TypeBoundPredicate>>\n+    unsatisfied_bounds;\n+  for (auto &bound : get_specified_bounds ())\n+    {\n+      if (!other.satisfies_bound (bound))\n+\tunsatisfied_bounds.push_back (bound);\n+    }\n+\n+  // lets emit a single error for this\n+  if (unsatisfied_bounds.size () > 0)\n+    {\n+      RichLocation r (locus);\n+      std::string missing_preds;\n+      for (size_t i = 0; i < unsatisfied_bounds.size (); i++)\n+\t{\n+\t  const TypeBoundPredicate &pred = unsatisfied_bounds.at (i);\n+\t  r.add_range (pred.get_locus ());\n+\t  missing_preds += pred.get_name ();\n+\n+\t  bool have_next = (i + 1) < unsatisfied_bounds.size ();\n+\t  if (have_next)\n+\t    missing_preds += \", \";\n+\t}\n+\n+      rust_error_at (r, \"bounds not satisfied for %s %<%s%> is not satisfied\",\n+\t\t     other.get_name ().c_str (), missing_preds.c_str ());\n+    }\n+\n+  return unsatisfied_bounds.size () == 0;\n+}\n+\n+void\n+BaseType::inherit_bounds (const BaseType &other)\n+{\n+  for (auto &bound : other.get_specified_bounds ())\n+    {\n+      add_bound (bound);\n+    }\n+}\n+\n TyVar::TyVar (HirId ref) : ref (ref)\n {\n   // ensure this reference is defined within the context"}, {"sha": "c1afa141d2700424a8a4886883766f3888409ffd", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72483b1ca912dca78543f5cc2a7e9d1380ef5784/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=72483b1ca912dca78543f5cc2a7e9d1380ef5784", "patch": "@@ -132,14 +132,21 @@ class TypeKindFormat\n class TypeBoundPredicate\n {\n public:\n-  TypeBoundPredicate (DefId reference) : reference (reference) {}\n+  TypeBoundPredicate (DefId reference, Location locus)\n+    : reference (reference), locus (locus)\n+  {}\n \n   std::string as_string () const;\n \n   const Resolver::TraitReference *get () const;\n \n+  Location get_locus () const { return locus; }\n+\n+  std::string get_name () const;\n+\n private:\n   DefId reference;\n+  Location locus;\n };\n \n class TypeBoundsMappings\n@@ -241,34 +248,9 @@ class BaseType : public TypeBoundsMappings\n \n   bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n \n-  bool bounds_compatible (const BaseType &other, Location locus) const\n-  {\n-    std::vector<std::reference_wrapper<const TypeBoundPredicate>>\n-      unsatisfied_bounds;\n-    for (auto &bound : get_specified_bounds ())\n-      {\n-\tif (!other.satisfies_bound (bound))\n-\t  unsatisfied_bounds.push_back (bound);\n-      }\n-\n-    if (unsatisfied_bounds.size () > 0)\n-      {\n-\tRichLocation r (locus);\n-\trust_error_at (r, \"bounds not satisfied for %s\",\n-\t\t       other.as_string ().c_str ());\n-\treturn false;\n-      }\n-\n-    return unsatisfied_bounds.size () == 0;\n-  }\n+  bool bounds_compatible (const BaseType &other, Location locus) const;\n \n-  void inherit_bounds (const BaseType &other)\n-  {\n-    for (auto &bound : other.get_specified_bounds ())\n-      {\n-\tadd_bound (bound);\n-      }\n-  }\n+  void inherit_bounds (const BaseType &other);\n \n   virtual bool is_unit () const { return false; }\n "}]}