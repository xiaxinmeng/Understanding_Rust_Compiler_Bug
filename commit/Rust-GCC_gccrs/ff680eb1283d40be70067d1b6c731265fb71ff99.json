{"sha": "ff680eb1283d40be70067d1b6c731265fb71ff99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2ODBlYjEyODNkNDBiZTcwMDY3ZDFiNmM3MzEyNjVmYjcxZmY5OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-06-07T23:58:55Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-06-07T23:58:55Z"}, "message": "i386.h (enum ix86_entity): New.\n\n2005-06-07  Uros Bizjak  <uros@kss-loka.si>\n\n\t* config/i386/i386.h (enum ix86_entity): New.\n\t(enum ix86_stack_slot): New.\n\t(OPTIMIZE_MODE_SWITCHING): Redefine to use\n\tix86_optimize_mode_switching[] array.\n\t(NUM_MODES_FOR_MODE_SWITCHING): Redefine for 4 entities.\n\t(MODE_NEEDED): Use ix86_mode_needed() function.\n\t(EMIT_MODE_SET): Redefine for changed emit_i387_cw_initialization ()\n\tfunction.\n\t(struct machine_function): Use optimize_mode_switching[] array.\n\n\t* config/i386/i386.c (MAX_386_STACK_LOCALS): Remove.\n\t(ix86_mode_needed): New function.\n\t(emit_i387_cw_initialization): Cleanup. Use mode to calculate\n\tcorrect stack positions for stored control words.\n\t(assign_386_stack_local): Use enum ix86_stack_slot. Change assert.\n\t(ix86_expand_builtin) [IX86_BUILTIN_LDMXCSR]: Change constant to\n\tSLOT_TEMP.\n\t[IX86_BUILTIN_STMXCSR]: Same.\n\n\t* config/i386/i386-protos.h (assign_stack_local): Change prototype.\n\t(emit_i387_cw_initialization): Change prototype.\n\t(ix86_mode_needed): New prototype.\n\n\t* config/i386/i386.md (i387_cw attribute): Change order of elements.\n\t(truncdfsf2, truncxfsf2, truncxfdf2, fix_trunc<mode>_fisttp_i387_1)\n\t(*fix_trunc<mode>_i387_1, lrint<mode>2, *fist<mode>2_floor_1)\n\t(*fist<mode>2_ceil_1): Change constant in call to\n\tassign_386_stack_local to SLOT_TEMP.\n\t(*fix_trunc<mode>_i387_1): Change constant in call to\n\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_TRUNC.\n\tUse new ix86_optimize_mode_switching[] array.\n\t(frndintxf2_floor, *fist<mode>2_floor_1): Change constants in call to\n\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_FLOOR.\n\tUse new ix86_optimize_mode_switching[] array.\n\t(frndintxf2_ceil, *fist<mode>2_ceil_1):  Change constants in call to\n\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_CEIL.\n\tUse new ix86_optimize_mode_switching[] array.\n\t(frndintxf2_trunc): Change constants in call to\n\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_TRUNC.\n\tUse new ix86_optimize_mode_switching[] array.\n\t(frndintxf2_mask_pm): Change constants in call to\n\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_MASK_PM.\n\tUse new ix86_optimize_mode_switching[] array.\n\n\t(define_peephole2): Change constant from 17 to FLAGS_REG;\n\nFrom-SVN: r100732", "tree": {"sha": "de38c18707f51f9562c65f4443a221e83818a175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de38c18707f51f9562c65f4443a221e83818a175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff680eb1283d40be70067d1b6c731265fb71ff99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff680eb1283d40be70067d1b6c731265fb71ff99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff680eb1283d40be70067d1b6c731265fb71ff99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff680eb1283d40be70067d1b6c731265fb71ff99/comments", "author": null, "committer": null, "parents": [{"sha": "3b009185b3b4a8f44bd656db309e9440d0be89f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b009185b3b4a8f44bd656db309e9440d0be89f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b009185b3b4a8f44bd656db309e9440d0be89f4"}], "stats": {"total": 290, "additions": 208, "deletions": 82}, "files": [{"sha": "6719fa8746ada296738230cf8bf65610404fbcf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff680eb1283d40be70067d1b6c731265fb71ff99", "patch": "@@ -1,3 +1,51 @@\n+2005-06-07  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.h (enum ix86_entity): New.\n+\t(enum ix86_stack_slot): New.\n+\t(OPTIMIZE_MODE_SWITCHING): Redefine to use\n+\tix86_optimize_mode_switching[] array.\n+\t(NUM_MODES_FOR_MODE_SWITCHING): Redefine for 4 entities.\n+\t(MODE_NEEDED): Use ix86_mode_needed() function.\n+\t(EMIT_MODE_SET): Redefine for changed emit_i387_cw_initialization ()\n+\tfunction.\n+\t(struct machine_function): Use optimize_mode_switching[] array.\n+\n+\t* config/i386/i386.c (MAX_386_STACK_LOCALS): Remove.\n+\t(ix86_mode_needed): New function.\n+\t(emit_i387_cw_initialization): Cleanup. Use mode to calculate\n+\tcorrect stack positions for stored control words.\n+\t(assign_386_stack_local): Use enum ix86_stack_slot. Change assert.\n+\t(ix86_expand_builtin) [IX86_BUILTIN_LDMXCSR]: Change constant to\n+\tSLOT_TEMP.\n+\t[IX86_BUILTIN_STMXCSR]: Same.\n+\n+\t* config/i386/i386-protos.h (assign_stack_local): Change prototype.\n+\t(emit_i387_cw_initialization): Change prototype.\n+\t(ix86_mode_needed): New prototype.\n+\n+\t* config/i386/i386.md (i387_cw attribute): Change order of elements.\n+\t(truncdfsf2, truncxfsf2, truncxfdf2, fix_trunc<mode>_fisttp_i387_1)\n+\t(*fix_trunc<mode>_i387_1, lrint<mode>2, *fist<mode>2_floor_1)\n+\t(*fist<mode>2_ceil_1): Change constant in call to\n+\tassign_386_stack_local to SLOT_TEMP.\n+\t(*fix_trunc<mode>_i387_1): Change constant in call to\n+\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_TRUNC.\n+\tUse new ix86_optimize_mode_switching[] array.\n+\t(frndintxf2_floor, *fist<mode>2_floor_1): Change constants in call to\n+\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_FLOOR.\n+\tUse new ix86_optimize_mode_switching[] array.\n+\t(frndintxf2_ceil, *fist<mode>2_ceil_1):  Change constants in call to\n+\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_CEIL.\n+\tUse new ix86_optimize_mode_switching[] array.\n+\t(frndintxf2_trunc): Change constants in call to\n+\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_TRUNC.\n+\tUse new ix86_optimize_mode_switching[] array.\n+\t(frndintxf2_mask_pm): Change constants in call to\n+\tassign_386_stack_local to SLOT_CW_STORED and SLOT_CW_MASK_PM.\n+\tUse new ix86_optimize_mode_switching[] array.\n+\n+\t(define_peephole2): Change constant from 17 to FLAGS_REG;\n+\n 2005-06-07  Richard Henderson  <rth@redhat.com>\n \n \tPR rtl-opt/21528"}, {"sha": "df107d36190ae663d0c08ab42b1414166542b373", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ff680eb1283d40be70067d1b6c731265fb71ff99", "patch": "@@ -163,7 +163,7 @@ extern void ix86_split_lshrdi (rtx *, rtx);\n extern rtx ix86_find_base_term (rtx);\n extern int ix86_check_movabs (rtx, int);\n \n-extern rtx assign_386_stack_local (enum machine_mode, int);\n+extern rtx assign_386_stack_local (enum machine_mode, enum ix86_stack_slot);\n extern int ix86_attr_length_immediate_default (rtx, int);\n extern int ix86_attr_length_address_default (rtx);\n \n@@ -191,7 +191,8 @@ extern bool ix86_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t\t   enum machine_mode, enum reg_class);\n extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);\n extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);\n-extern void emit_i387_cw_initialization (rtx, rtx, int);\n+extern int ix86_mode_needed (int, rtx);\n+extern void emit_i387_cw_initialization (int);\n extern bool ix86_fp_jump_nontrivial_p (enum rtx_code);\n extern void x86_order_regs_for_local_alloc (void);\n extern void x86_function_profiler (FILE *, int);"}, {"sha": "f24a5cc7995ad5e7589714d74d6d379301e018b0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 93, "deletions": 27, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ff680eb1283d40be70067d1b6c731265fb71ff99", "patch": "@@ -732,7 +732,6 @@ rtx ix86_compare_op0 = NULL_RTX;\n rtx ix86_compare_op1 = NULL_RTX;\n rtx ix86_compare_emitted = NULL_RTX;\n \n-#define MAX_386_STACK_LOCALS 3\n /* Size of the register save area.  */\n #define X86_64_VARARGS_SIZE (REGPARM_MAX * UNITS_PER_WORD + SSE_REGPARM_MAX * 16)\n \n@@ -7321,41 +7320,103 @@ output_387_binary_op (rtx insn, rtx *operands)\n   return buf;\n }\n \n+/* Return needed mode for entity in optimize_mode_switching pass.  */\n+\n+int\n+ix86_mode_needed (int entity, rtx insn)\n+{\n+  enum attr_i387_cw mode;\n+\n+  /* The mode UNINITIALIZED is used to store control word after a\n+     function call or ASM pattern.  The mode ANY specify that function\n+     has no requirements on the control word and make no changes in the\n+     bits we are interested in.  */\n+\n+  if (CALL_P (insn)\n+      || (NONJUMP_INSN_P (insn)\n+\t  && (asm_noperands (PATTERN (insn)) >= 0\n+\t      || GET_CODE (PATTERN (insn)) == ASM_INPUT)))\n+    return I387_CW_UNINITIALIZED;\n+\n+  if (recog_memoized (insn) < 0)\n+    return I387_CW_ANY;\n+\n+  mode = get_attr_i387_cw (insn);\n+\n+  switch (entity)\n+    {\n+    case I387_TRUNC:\n+      if (mode == I387_CW_TRUNC)\n+\treturn mode;\n+      break;\n+\n+    case I387_FLOOR:\n+      if (mode == I387_CW_FLOOR)\n+\treturn mode;\n+      break;\n+\n+    case I387_CEIL:\n+      if (mode == I387_CW_CEIL)\n+\treturn mode;\n+      break;\n+\n+    case I387_MASK_PM:\n+      if (mode == I387_CW_MASK_PM)\n+\treturn mode;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return I387_CW_ANY;\n+}\n+\n /* Output code to initialize control word copies used by trunc?f?i and\n    rounding patterns.  CURRENT_MODE is set to current control word,\n    while NEW_MODE is set to new control word.  */\n \n void\n-emit_i387_cw_initialization (rtx current_mode, rtx new_mode, int mode)\n+emit_i387_cw_initialization (int mode)\n {\n+  rtx stored_mode = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  rtx new_mode;\n+\n+  int slot;\n+\n   rtx reg = gen_reg_rtx (HImode);\n \n-  emit_insn (gen_x86_fnstcw_1 (current_mode));\n-  emit_move_insn (reg, current_mode);\n+  emit_insn (gen_x86_fnstcw_1 (stored_mode));\n+  emit_move_insn (reg, stored_mode);\n \n-  if (!TARGET_PARTIAL_REG_STALL && !optimize_size\n-      && !TARGET_64BIT)\n+  if (TARGET_64BIT || TARGET_PARTIAL_REG_STALL || optimize_size)\n     {\n       switch (mode)\n \t{\n+\tcase I387_CW_TRUNC:\n+\t  /* round toward zero (truncate) */\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0c00)));\n+\t  slot = SLOT_CW_TRUNC;\n+\t  break;\n+\n \tcase I387_CW_FLOOR:\n \t  /* round down toward -oo */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x4)));\n+\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0400)));\n+\t  slot = SLOT_CW_FLOOR;\n \t  break;\n \n \tcase I387_CW_CEIL:\n \t  /* round up toward +oo */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x8)));\n+\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0800)));\n+\t  slot = SLOT_CW_CEIL;\n \t  break;\n \n-\tcase I387_CW_TRUNC:\n-\t  /* round toward zero (truncate) */\n-\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n-\t  break;\n- \n \tcase I387_CW_MASK_PM:\n \t  /* mask precision exception for nearbyint() */\n \t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0020)));\n+\t  slot = SLOT_CW_MASK_PM;\n \t  break;\n \n \tdefault:\n@@ -7366,33 +7427,38 @@ emit_i387_cw_initialization (rtx current_mode, rtx new_mode, int mode)\n     {\n       switch (mode)\n \t{\n+\tcase I387_CW_TRUNC:\n+\t  /* round toward zero (truncate) */\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n+\t  slot = SLOT_CW_TRUNC;\n+\t  break;\n+\n \tcase I387_CW_FLOOR:\n \t  /* round down toward -oo */\n-\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n-\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0400)));\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x4)));\n+\t  slot = SLOT_CW_FLOOR;\n \t  break;\n \n \tcase I387_CW_CEIL:\n \t  /* round up toward +oo */\n-\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n-\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0800)));\n-\t  break;\n-\n-\tcase I387_CW_TRUNC:\n-\t  /* round toward zero (truncate) */\n-\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0c00)));\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x8)));\n+\t  slot = SLOT_CW_CEIL;\n \t  break;\n-\n+ \n \tcase I387_CW_MASK_PM:\n \t  /* mask precision exception for nearbyint() */\n \t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0020)));\n+\t  slot = SLOT_CW_MASK_PM;\n \t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n \t}\n     }\n \n+  gcc_assert (slot < MAX_386_STACK_LOCALS);\n+\n+  new_mode = assign_386_stack_local (HImode, slot);\n   emit_move_insn (new_mode, reg);\n }\n \n@@ -12086,11 +12152,11 @@ ix86_init_machine_status (void)\n    which slot to use.  */\n \n rtx\n-assign_386_stack_local (enum machine_mode mode, int n)\n+assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n {\n   struct stack_local_entry *s;\n \n-  gcc_assert (n >= 0 && n < MAX_386_STACK_LOCALS);\n+  gcc_assert (n < MAX_386_STACK_LOCALS);\n \n   for (s = ix86_stack_locals; s; s = s->next)\n     if (s->mode == mode && s->n == n)\n@@ -14720,13 +14786,13 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \n     case IX86_BUILTIN_LDMXCSR:\n       op0 = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n-      target = assign_386_stack_local (SImode, 0);\n+      target = assign_386_stack_local (SImode, SLOT_TEMP);\n       emit_move_insn (target, op0);\n       emit_insn (gen_sse_ldmxcsr (target));\n       return 0;\n \n     case IX86_BUILTIN_STMXCSR:\n-      target = assign_386_stack_local (SImode, 0);\n+      target = assign_386_stack_local (SImode, SLOT_TEMP);\n       emit_insn (gen_sse_stmxcsr (target));\n       return copy_to_mode_reg (SImode, target);\n "}, {"sha": "73ad10857335a79da2bdeffe388fac8f7b83537f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ff680eb1283d40be70067d1b6c731265fb71ff99", "patch": "@@ -2196,11 +2196,31 @@ extern rtx ix86_compare_emitted;\n    Post-reload pass may be later used to eliminate the redundant fildcw if\n    needed.  */\n \n+enum ix86_entity\n+{\n+  I387_TRUNC = 0,\n+  I387_FLOOR,\n+  I387_CEIL,\n+  I387_MASK_PM,\n+  MAX_386_ENTITIES\n+};\n+\n+enum ix86_stack_slot \n+{\n+  SLOT_TEMP = 0,\n+  SLOT_CW_STORED,\n+  SLOT_CW_TRUNC,\n+  SLOT_CW_FLOOR,\n+  SLOT_CW_CEIL,\n+  SLOT_CW_MASK_PM,\n+  MAX_386_STACK_LOCALS\n+};\n \n /* Define this macro if the port needs extra instructions inserted\n    for mode switching in an optimizing compilation.  */\n \n-#define OPTIMIZE_MODE_SWITCHING(ENTITY) ix86_optimize_mode_switching\n+#define OPTIMIZE_MODE_SWITCHING(ENTITY) \\\n+   ix86_optimize_mode_switching[(ENTITY)]\n \n /* If you define `OPTIMIZE_MODE_SWITCHING', you have to define this as\n    initializer for an array of integers.  Each initializer element N\n@@ -2210,27 +2230,16 @@ extern rtx ix86_compare_emitted;\n    starting counting at zero - determines the integer that is used to\n    refer to the mode-switched entity in question.  */\n \n-#define NUM_MODES_FOR_MODE_SWITCHING { I387_CW_ANY }\n+#define NUM_MODES_FOR_MODE_SWITCHING \\\n+   { I387_CW_ANY, I387_CW_ANY, I387_CW_ANY, I387_CW_ANY }\n \n /* ENTITY is an integer specifying a mode-switched entity.  If\n    `OPTIMIZE_MODE_SWITCHING' is defined, you must define this macro to\n    return an integer value not larger than the corresponding element\n    in `NUM_MODES_FOR_MODE_SWITCHING', to denote the mode that ENTITY\n-   must be switched into prior to the execution of INSN. \n-   \n-   The mode UNINITIALIZED is used to force re-load of possibly previously\n-   stored control word after function call.  The mode ANY specify that\n-   function has no requirements on the control word and make no changes\n-   in the bits we are interested in.  */\n-\n-#define MODE_NEEDED(ENTITY, I)\t\t\t\t\t\t\\\n-  (GET_CODE (I) == CALL_INSN\t\t\t\t\t\t\\\n-   || (GET_CODE (I) == INSN && (asm_noperands (PATTERN (I)) >= 0 \t\\\n-\t\t\t\t|| GET_CODE (PATTERN (I)) == ASM_INPUT))\\\n-   ? I387_CW_UNINITIALIZED\t\t\t\t\t\t\\\n-   : recog_memoized (I) < 0\t\t\t\t\t\t\\\n-   ? I387_CW_ANY \t\t\t\t\t\t\t\\\n-   : get_attr_i387_cw (I))\n+   must be switched into prior to the execution of INSN. */\n+\n+#define MODE_NEEDED(ENTITY, I) ix86_mode_needed ((ENTITY), (I))\n \n /* This macro specifies the order in which modes for ENTITY are\n    processed.  0 is the highest priority.  */\n@@ -2243,10 +2252,9 @@ extern rtx ix86_compare_emitted;\n \n #define EMIT_MODE_SET(ENTITY, MODE, HARD_REGS_LIVE) \t\t\t\\\n   ((MODE) != I387_CW_ANY && (MODE) != I387_CW_UNINITIALIZED\t\t\\\n-   ? emit_i387_cw_initialization (assign_386_stack_local (HImode, 1),\t\\\n-\t\t\t\t  assign_386_stack_local (HImode, 2),   \\\n-\t\t\t\t  MODE), 0\t\t\t\t\\\n+   ? emit_i387_cw_initialization (MODE), 0\t\t\t\t\\\n    : 0)\n+\n \f\n /* Avoid renaming of stack registers, as doing so in combination with\n    scheduling just increases amount of live registers at time and in\n@@ -2268,7 +2276,7 @@ struct machine_function GTY(())\n   const char *some_ld_name;\n   int save_varrargs_registers;\n   int accesses_prev_frame;\n-  int optimize_mode_switching;\n+  int optimize_mode_switching[MAX_386_ENTITIES];\n   /* Set by ix86_compute_frame_layout and used by prologue/epilogue expander to\n      determine the style used.  */\n   int use_fast_prologue_epilogue;"}, {"sha": "39ed2b83f86abd2aa6f7f73b85f7297630313431", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff680eb1283d40be70067d1b6c731265fb71ff99/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ff680eb1283d40be70067d1b6c731265fb71ff99", "patch": "@@ -429,7 +429,7 @@\n \n ;; Defines rounding mode of an FP operation.\n \n-(define_attr \"i387_cw\" \"floor,ceil,trunc,mask_pm,uninitialized,any\"\n+(define_attr \"i387_cw\" \"trunc,floor,ceil,mask_pm,uninitialized,any\"\n   (const_string \"any\"))\n \n ;; Describe a user's asm statement.\n@@ -3664,7 +3664,7 @@\n     ;\n   else\n     {\n-      rtx temp = assign_386_stack_local (SFmode, 0);\n+      rtx temp = assign_386_stack_local (SFmode, SLOT_TEMP);\n       emit_insn (gen_truncdfsf2_with_temp (operands[0], operands[1], temp));\n       DONE;\n     }\n@@ -3814,7 +3814,7 @@\n       DONE;\n     }\n   else\n-    operands[2] = assign_386_stack_local (SFmode, 0);\n+    operands[2] = assign_386_stack_local (SFmode, SLOT_TEMP);\n })\n \n (define_insn \"*truncxfsf2_mixed\"\n@@ -3910,7 +3910,7 @@\n       DONE;\n     }\n   else\n-    operands[2] = assign_386_stack_local (DFmode, 0);\n+    operands[2] = assign_386_stack_local (DFmode, SLOT_TEMP);\n })\n \n (define_insn \"*truncxfdf2_mixed\"\n@@ -4151,7 +4151,7 @@\n     emit_insn (gen_fix_trunc<mode>_i387_fisttp (operands[0], operands[1]));\n   else\n     {\n-      operands[2] = assign_386_stack_local (<MODE>mode, 0);\n+      operands[2] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n       emit_insn (gen_fix_trunc<mode>_i387_fisttp_with_temp (operands[0],\n \t\t\t\t\t\t\t    operands[1],\n \t\t\t\t\t\t\t    operands[2]));\n@@ -4227,15 +4227,16 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  ix86_optimize_mode_switching[I387_TRUNC] = 1;\n+\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);\n   if (memory_operand (operands[0], VOIDmode))\n     emit_insn (gen_fix_trunc<mode>_i387 (operands[0], operands[1],\n \t\t\t\t\t operands[2], operands[3]));\n   else\n     {\n-      operands[4] = assign_386_stack_local (<MODE>mode, 0);\n+      operands[4] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n       emit_insn (gen_fix_trunc<mode>_i387_with_temp (operands[0], operands[1],\n \t\t\t\t\t\t     operands[2], operands[3],\n \t\t\t\t\t\t     operands[4]));\n@@ -13082,7 +13083,7 @@\n    (set (strict_low_part (match_dup 5))\n \t(match_dup 2))]\n {\n-  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n+  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n@@ -13104,7 +13105,7 @@\n    (set (strict_low_part (match_dup 5))\n \t(match_dup 2))]\n {\n-  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n+  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), FLAGS_REG);\n   operands[5] = gen_lowpart (QImode, operands[3]);\n   ix86_expand_clear (operands[3]);\n })\n@@ -16209,7 +16210,7 @@\n     emit_insn (gen_fist<mode>2 (operands[0], operands[1]));\n   else\n     {\n-      operands[2] = assign_386_stack_local (<MODE>mode, 0);\n+      operands[2] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n       emit_insn (gen_fist<mode>2_with_temp (operands[0], operands[1],\n \t\t\t\t\t    operands[2]));\n     }\n@@ -16229,10 +16230,10 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n+  ix86_optimize_mode_switching[I387_FLOOR] = 1;\n \n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);\n \n   emit_insn (gen_frndintxf2_floor_i387 (operands[0], operands[1],\n \t\t\t\t\toperands[2], operands[3]));\n@@ -16311,15 +16312,16 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  ix86_optimize_mode_switching[I387_FLOOR] = 1;\n+\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);\n   if (memory_operand (operands[0], VOIDmode))\n     emit_insn (gen_fist<mode>2_floor (operands[0], operands[1],\n \t\t\t\t      operands[2], operands[3]));\n   else\n     {\n-      operands[4] = assign_386_stack_local (<MODE>mode, 0);\n+      operands[4] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n       emit_insn (gen_fist<mode>2_floor_with_temp (operands[0], operands[1],\n \t\t\t\t\t\t  operands[2], operands[3],\n \t\t\t\t\t\t  operands[4]));\n@@ -16469,10 +16471,10 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n+  ix86_optimize_mode_switching[I387_CEIL] = 1;\n \n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);\n \n   emit_insn (gen_frndintxf2_ceil_i387 (operands[0], operands[1],\n \t\t\t\t       operands[2], operands[3]));\n@@ -16551,15 +16553,16 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  ix86_optimize_mode_switching[I387_CEIL] = 1;\n+\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);\n   if (memory_operand (operands[0], VOIDmode))\n     emit_insn (gen_fist<mode>2_ceil (operands[0], operands[1],\n \t\t\t\t     operands[2], operands[3]));\n   else\n     {\n-      operands[4] = assign_386_stack_local (<MODE>mode, 0);\n+      operands[4] = assign_386_stack_local (<MODE>mode, SLOT_TEMP);\n       emit_insn (gen_fist<mode>2_ceil_with_temp (operands[0], operands[1],\n \t\t\t\t\t\t operands[2], operands[3],\n \t\t\t\t\t\t operands[4]));\n@@ -16709,10 +16712,10 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n+  ix86_optimize_mode_switching[I387_TRUNC] = 1;\n \n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);\n \n   emit_insn (gen_frndintxf2_trunc_i387 (operands[0], operands[1],\n \t\t\t\t\toperands[2], operands[3]));\n@@ -16792,10 +16795,10 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n-  ix86_optimize_mode_switching = 1;\n+  ix86_optimize_mode_switching[I387_MASK_PM] = 1;\n \n-  operands[2] = assign_386_stack_local (HImode, 1);\n-  operands[3] = assign_386_stack_local (HImode, 2);\n+  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);\n+  operands[3] = assign_386_stack_local (HImode, SLOT_CW_MASK_PM);\n \n   emit_insn (gen_frndintxf2_mask_pm_i387 (operands[0], operands[1],\n \t\t\t\t\t  operands[2], operands[3]));"}]}