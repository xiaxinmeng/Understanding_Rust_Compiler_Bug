{"sha": "fdce4bb79eb092b412c272e92435b57147312011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjZTRiYjc5ZWIwOTJiNDEyYzI3MmU5MjQzNWI1NzE0NzMxMjAxMQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-09-26T10:42:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:42:49Z"}, "message": "einfo.adb (Is_Thunk): New attribute applicable to subprograms.\n\n2007-09-26  Javier Miranda  <miranda@adacore.com>\n\t    Gary Dismukes  <dismukes@adacore.com>\n\n\t* einfo.adb (Is_Thunk): New attribute applicable to subprograms. True\n\tfor thunks associated with interface types.\n\n\t* einfo.ads: Improve documentatation of Is_Internal\n\t(Is_Thunk): New attribute applicable to subprograms. True for thunks\n\tassociated with interface types.\n\tExtensive comment fixes regarding flags that appear in all entities. The\n\tdocumentation is now consistent for all such flags (there were a number\n\tof errors in the documentation in this regard).\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Minor code cleanup.\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_*): Return immediately if any\n\tof these procedures are passed a function call that already has\n\tbuild-in-place actuals (testing new flag\n\tIs_Expanded_Build_In_Place_Call). Set the flag on the function call in\n\tthe case where processing continues.\n\t(Expand_Call): If the call is generated from a thunk body then we\n\tpropagate the extra actuals associated with the accessibility\n\tlevel of the access type actuals.\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body): Set the Protected_Formal field\n\tof each extra formal of a protected operation to reference the\n\tcorresponding extra formal of the subprogram denoted by the\n\toperation's Protected_Body_Subprogram.\n\t\n\t* sinfo.ads, sinfo.adb (Is_Expanded_Build_In_Place_Call): New flag on\n\tN_Function_Call nodes.\n\nFrom-SVN: r128786", "tree": {"sha": "cfeb29e644e078a2c07b74278a02a9f14cd72b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfeb29e644e078a2c07b74278a02a9f14cd72b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdce4bb79eb092b412c272e92435b57147312011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce4bb79eb092b412c272e92435b57147312011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdce4bb79eb092b412c272e92435b57147312011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce4bb79eb092b412c272e92435b57147312011/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2642f9987ea72b416bce764ca3d95c19c9e77836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2642f9987ea72b416bce764ca3d95c19c9e77836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2642f9987ea72b416bce764ca3d95c19c9e77836"}], "stats": {"total": 560, "additions": 382, "deletions": 178}, "files": [{"sha": "013fab917a97b8067867d8cd052609d543d8c5e3", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -483,7 +483,8 @@ package body Einfo is\n    --    Used_As_Generic_Actual          Flag222\n    --    Is_Descendent_Of_Address        Flag223\n    --    Is_Raised                       Flag224\n-   --    (unused)                        Flag225\n+   --    Is_Thunk                        Flag225\n+   --\n    --    (unused)                        Flag226\n    --    (unused)                        Flag227\n    --    (unused)                        Flag228\n@@ -1966,6 +1967,12 @@ package body Einfo is\n       return Flag200 (Id);\n    end Is_Task_Interface;\n \n+   function Is_Thunk (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Subprogram (Id));\n+      return Flag225 (Id);\n+   end Is_Thunk;\n+\n    function Is_True_Constant (Id : E) return B is\n    begin\n       return Flag163 (Id);\n@@ -4291,6 +4298,11 @@ package body Einfo is\n       Set_Flag200 (Id, V);\n    end Set_Is_Task_Interface;\n \n+   procedure Set_Is_Thunk (Id : E; V : B := True) is\n+   begin\n+      Set_Flag225 (Id, V);\n+   end Set_Is_Thunk;\n+\n    procedure Set_Is_True_Constant (Id : E; V : B := True) is\n    begin\n       Set_Flag163 (Id, V);\n@@ -7264,6 +7276,7 @@ package body Einfo is\n       W (\"Is_Tag\",                          Flag78  (Id));\n       W (\"Is_Tagged_Type\",                  Flag55  (Id));\n       W (\"Is_Task_Interface\",               Flag200 (Id));\n+      W (\"Is_Thunk\",                        Flag225 (Id));\n       W (\"Is_True_Constant\",                Flag163 (Id));\n       W (\"Is_Unchecked_Union\",              Flag117 (Id));\n       W (\"Is_Unsigned_Type\",                Flag144 (Id));"}, {"sha": "0a6b35ab5d591e8f92caa927092369c2a1820463", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 156, "deletions": 136, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -1383,9 +1383,9 @@ package Einfo is\n --       or Is_Controlled is set for at least one component).\n \n --    Has_Convention_Pragma (Flag119)\n---       Present in an entity for which a Convention, Import, or Export\n---       pragma has been given. Used to prevent more than one such pragma\n---       appearing for a given entity (RM B.1(45)).\n+--       Present in all entities. Set true for an entity for which a valid\n+--       Convention, Import, or Export pragma has been given. Used to prevent\n+--       more than one such pragma appearing for a given entity (RM B.1(45)).\n \n --    Has_Delayed_Freeze (Flag18)\n --       Present in all entities. Set to indicate that an explicit freeze\n@@ -1446,10 +1446,10 @@ package Einfo is\n --       flag and also the related flag Has_Qualified_Name.\n \n --    Has_Gigi_Rep_Item (Flag82)\n---       This flag is set if the rep item chain (referenced by First_Rep_Item\n---       and linked through the Next_Rep_Item chain) contains a representation\n---       item that needs to be specially processed by Gigi, i.e. one of the\n---       following items:\n+--       Present in all entities. Set if the rep item chain (referenced by\n+--       First_Rep_Item and linked through the Next_Rep_Item chain) contains a\n+--       representation item that needs to be specially processed by Gigi, i.e.\n+--       one of the following items:\n --\n --          Machine_Attribute pragma\n --          Linker_Alias pragma\n@@ -1597,15 +1597,6 @@ package Einfo is\n --       (but unlike the case with pragma Unreferenced, it is ok to reference\n --       such an object and no warning is generated.\n \n---    Known_To_Have_Preelab_Init (Flag207)\n---       Present in all type and subtype entities. If set, then the type is\n---       known to have preelaborable initialization. In the case of a partial\n---       view of a private type, it is only possible for this to be set if a\n---       pragma Preelaborable_Initialization is given for the type. For other\n---       types, it is never set if the type does not have preelaborable\n---       initialization, it may or may not be set if the type does have\n---       preelaborable initialization.\n-\n --    Has_Primitive_Operations (Flag120) [base type only]\n --       Present in all type entities. Set if at least one primitive operation\n --       is defined for the type.\n@@ -1697,10 +1688,10 @@ package Einfo is\n --       storage size clause cannot be given to a derived type.\n \n --    Has_Stream_Size_Clause (Flag184)\n---       This flag is present in all entities. It is set for types which have a\n---       Stream_Size clause attribute. Used to prevent multiple Stream_Size\n---       clauses for a given entity, and also whether it is necessary to check\n---       for a stream size clause.\n+--       Present in all entities. It is set for types which have a Stream_Size\n+--       clause attribute. Used to prevent multiple Stream_Size clauses for a\n+--       given entity, and also whether it is necessary to check for a stream\n+--       size clause.\n \n --    Has_Subprogram_Descriptor (Flag93)\n --       This flag is set on entities for which zero-cost exception subprogram\n@@ -1725,17 +1716,17 @@ package Einfo is\n --       the flag Has_Unchecked_Union set.\n \n --    Has_Unknown_Discriminants (Flag72)\n---       Present in all type entities. Types can have unknown discriminants\n---       either from their declaration or through type derivation. The use\n---       of this flag exactly meets the spec in RM 3.7(26). Note that all\n---       class-wide types are considered to have unknown discriminants.\n---       Note that both Has_Discriminants and Has_Unknown_Discriminants may\n---       be true for a type. Class-wide types and their subtypes have\n---       unknown discriminants and can have declared ones as well. Private\n---       types declared with unknown discriminants may have a full view that\n---       has explicit discriminants, and both flag will be set on the partial\n---       view, to insure that discriminants are properly inherited in certain\n---       contexts.\n+--       Present in all entities. Set for types with unknown discriminants.\n+--       Types can have unknown discriminants either from their declaration or\n+--       through type derivation. The use of this flag exactly meets the spec\n+--       in RM 3.7(26). Note that all class-wide types are considered to have\n+--       unknown discriminants. Note that both Has_Discriminants and\n+--       Has_Unknown_Discriminants may be true for a type. Class-wide types and\n+--       their subtypes have unknown discriminants and can have declared ones\n+--       as well. Private types declared with unknown discriminants may have a\n+--       full view that has explicit discriminants, and both flag will be set\n+--       on the partial view, to insure that discriminants are properly\n+--       inherited in certain contexts.\n \n --    Has_Volatile_Components (Flag87) [implementation base type only]\n --       Present in all types and objects. Set only for an array type or\n@@ -1749,13 +1740,13 @@ package Einfo is\n --       item chain of the first subtype in the usual manner.\n \n --    Has_Xref_Entry (Flag182)\n---       This flag is set if an entity has an entry in the Xref information\n---       generated in ali files. This is true for all source entities in the\n---       extended main source file. It is also true of entities in other\n---       packages that are referenced directly or indirectly from the main\n---       source file (indirect reference occurs when the main source file\n---       references an entity with a type reference. See package Lib.Xref\n---       for further details).\n+--       Present in all entities. Set if an entity has an entry in the Xref\n+--       information generated in ali files. This is true for all source\n+--       entities in the extended main source file. It is also true of entities\n+--       in other packages that are referenced directly or indirectly from the\n+--       main source file (indirect reference occurs when the main source file\n+--       references an entity with a type reference. See package Lib.Xref for\n+--       further details).\n \n --    Hiding_Loop_Variable (Node8)\n --       Present in variables. Set only if a variable of a discrete type is\n@@ -1780,9 +1771,10 @@ package Einfo is\n --       returns the entity unchanged.\n \n --    In_Package_Body (Flag48)\n---       Set on the entity that denotes the package (the defining occurrence\n---       of the package declaration) while analyzing and expanding the package\n---       body. Reset on completion of analysis/expansion.\n+--       Present in package entities. Set on the entity that denotes the\n+--       package (the defining occurrence of the package declaration) while\n+--       analyzing and expanding the package body. Reset on completion of\n+--       analysis/expansion.\n \n --    In_Private_Part (Flag45)\n --       Present in all entities. Can be set only in package entities and\n@@ -1854,7 +1846,7 @@ package Einfo is\n --       Applies to all entities, true for access types and subtypes\n \n --    Is_Ada_2005_Only (Flag185)\n---       Applies to all entities, true if a valid pragma Ada_05 applies to the\n+--       Present in all entities, true if a valid pragma Ada_05 applies to the\n --       entity which specifically names the entity, indicating that the entity\n --       is Ada 2005 only. Note that this flag is not set if the entity is part\n --       of a unit compiled with the normal no-argument form of pragma Ada_05.\n@@ -1914,7 +1906,7 @@ package Einfo is\n --       inlining.\n \n --    Is_Character_Type (Flag63)\n---       Present in all entities, true for character types and subtypes,\n+--       Present in all entities. Set for character types and subtypes,\n --       i.e. enumeration types that have at least one character literal.\n \n --    Is_Child_Unit (Flag73)\n@@ -1936,13 +1928,13 @@ package Einfo is\n --       parent, we do not consider them to be separate units for this flag).\n \n --    Is_Completely_Hidden (Flag103)\n---       A flag set on an E_Discriminant entity. This flag can be set only\n---       for girder discriminants of untagged types. When set, the entity\n---       is a girder discriminant of a derived untagged type which is not\n---       directly visible in the derived type because the derived type or\n---       one of its ancestors have renamed the discriminants in the root\n---       type. Note that there are girder discriminants which are not\n---       Completely_Hidden (e.g. the discriminants of a root type).\n+--       Present in all entities. This flag can be set only for E_Discriminant\n+--       entities. This flag can be set only for girder discriminants of\n+--       untagged types. When set, the entity is a girder discriminant of a\n+--       derived untagged type which is not directly visible in the derived\n+--       type because the derived type or one of its ancestors have renamed the\n+--       discriminants in the root type. Note: there are girder discriminants\n+--       which are not Completely_Hidden (e.g. discriminants of a root type).\n \n --    Is_Composite_Type (synthesized)\n --       Applies to all entities, true for all composite types and\n@@ -1974,9 +1966,10 @@ package Einfo is\n --       that the constructed subtype itself will be constrained.\n \n --    Is_Constr_Subt_For_UN_Aliased (Flag141)\n---       This flag can only be set if Is_Constr_Subt_For_U_Nominal is set. It\n---       indicates that in addition the object concerned is aliased. This flag\n---       is used by Gigi to determine whether a template must be constructed.\n+--       Present in all types and subtypes. This flag can be set only if\n+--       Is_Constr_Subt_For_U_Nominal is also set. It indicates that in\n+--       addition the object concerned is aliased. This flag is used by\n+--       Gigi to determine whether a template must be constructed.\n \n --    Is_Constructor (Flag76)\n --       Present in function and procedure entities. Set if a pragma\n@@ -1988,7 +1981,7 @@ package Einfo is\n --       Ada.Finalization.Limited_Controlled.\n \n --    Is_Controlling_Formal (Flag97)\n---       Present in all Formal_Kind entity. Marks the controlling parameters\n+--       Present in all Formal_Kind entities. Marks the controlling parameters\n --       of dispatching operations.\n \n --    Is_CPP_Class (Flag74)\n@@ -2004,10 +1997,10 @@ package Einfo is\n --       Always false if argument is not a type.\n \n --    Is_Descendent_Of_Address (Flag223)\n---       Applies to all types. Indicates that a type is an address type that\n---       is visibly a numeric type. Used for semantic checks on VMS to remove\n---       ambiguities in universal integer expressions that may have an address\n---       interpretation\n+--       Present in all type and subtype entities. Indicates that a type is an\n+--       address type that is visibly a numeric type. Used for semantic checks\n+--       on VMS to remove ambiguities in universal integer expressions that may\n+--       have an address interpretation\n \n --    Is_Discrete_Type (synthesized)\n --       Applies to all entities, true for all discrete types and subtypes\n@@ -2017,7 +2010,7 @@ package Einfo is\n --       and all fixed-point types and subtypes.\n \n --    Is_Discrim_SO_Function (Flag176)\n---       Present in all entities, set only in E_Function entities that Layout\n+--       Present in all entities. Set only in E_Function entities that Layout\n --       creates to compute discriminant-dependent dynamic size/offset values.\n \n --    Is_Dispatching_Operation (Flag6)\n@@ -2081,7 +2074,7 @@ package Einfo is\n --       Applies to all entities, true for generic IN and IN OUT parameters\n \n --    Is_Formal_Subprogram (Flag111)\n---       Defined on all entities, true for generic formal subprograms.\n+--       Present in all entities. Set for generic formal subprograms.\n \n --    Is_For_Access_Subtype (Flag118)\n --       Present in E_Private_Subtype and E_Record_Subtype entities.\n@@ -2090,12 +2083,13 @@ package Einfo is\n --       because the type may not have been found or frozen yet.\n \n --    Is_Frozen (Flag4)\n---       Present in all type entities. Set if the type has been frozen.\n+--       Present in all type and subtype entities. Set if type or subtype has\n+--       been frozen.\n \n --    Is_Generic_Actual_Type (Flag94)\n---       Present in the subtype declaration that renames the generic formal\n---       as a subtype of the actual. Guarantees that the subtype is not static\n---       within the instance.\n+--       Present in all type and subtype entities. Set in the subtype\n+--       declaration that renames the generic formal as a subtype of the\n+--       actual. Guarantees that the subtype is not static within the instance.\n \n --    Is_Generic_Instance (Flag130)\n --       Present in all entities. Set to indicate that the entity is an\n@@ -2171,7 +2165,7 @@ package Einfo is\n --       Applies to all entities, true for integer types and subtypes\n \n --    Is_Interface (Flag186)\n---       Present in record types and subtypes to indicate that the current\n+--       Present in record types and subtypes. Set to indicate that the current\n --       entity corresponds with an abstract interface. Because abstract\n --       interfaces are conceptually a special kind of abstract tagged types\n --       we represent them by means of tagged record types and subtypes\n@@ -2182,10 +2176,11 @@ package Einfo is\n --    Is_Internal (Flag17)\n --       Present in all entities. Set to indicate an entity created during\n --       semantic processing (e.g. an implicit type, or a temporary). The\n---       current uses of this flag are: 1) to indicate that temporaries\n---       generated for the result of an inlined function call need not be\n---       initialized, even when scalars are initialized or normalized, and\n---       2) to indicate object declarations generated by the expander that are\n+--       current uses of this flag are: 1) to indicate that internal entities\n+--       (such as temporaries generated for the result of an inlined function\n+--       call or dummy variables generated for the debugger) need not be\n+--       initialized, even when scalars are initialized or normalized, and 2)\n+--       to indicate object declarations generated by the expander that are\n --       implicitly imported or exported, so that they can be appropriately\n --       marked in Sprint output.\n \n@@ -2205,14 +2200,14 @@ package Einfo is\n --       to intrinsic, which causes intrinsic code to be generated.\n \n --    Is_Itype (Flag91)\n---       Present in all entities, set for Itypes. If it is set, then the\n---       declaration for the type does not appear explicitly in the tree.\n---       Instead gigi will elaborate the type when it is first used.\n---       Has_Delayed_Freeze can be set for Itypes, and the meaning is that\n---       the first use (the one which causes the type to be defined) will\n---       be the freeze node. Note that an important restriction on Itypes\n---       is that the first use of such a type (the one that causes it to be\n---       defined) must be in the same scope as the type.\n+--       Present in all entities. Set to indicate that a type is an Itype,\n+--       which means that the declaration for the type does not appear\n+--       explicitly in the tree. Instead gigi will elaborate the type when it\n+--       is first used. Has_Delayed_Freeze can be set for Itypes, and the\n+--       meaning is that the first use (the one which causes the type to be\n+--       defined) will be the freeze node. Note that an important restriction\n+--       on Itypes is that the first use of such a type (the one that causes it\n+--       to be defined) must be in the same scope as the type.\n \n --    Is_Known_Non_Null (Flag37)\n --       Present in all entities. Relevant (and can be set True) only for\n@@ -2280,7 +2275,7 @@ package Einfo is\n --       Thus this flag has no meaning to the back end.\n \n --    Is_Limited_Composite (Flag106)\n---       Present in all entities. True for composite types that have a\n+--       Present in all entities. Set for composite types that have a\n --       limited component. Used to enforce the rule that operations on\n --       the composite type that depend on the full view of the component\n --       do not become visible until the immediate scope of the composite\n@@ -2312,20 +2307,20 @@ package Einfo is\n --       Applies to all entities. True if entity is a modular integer type\n \n --    Is_Non_Static_Subtype (Flag109)\n---       This flag is present in all type and subtype entities. It is set in\n---       some (but not all) cases in which a subtype is known to be non-static.\n---       Before this flag was added, the computation of whether a subtype was\n---       static was entirely synthesized, by looking at the bounds, and the\n---       immediate subtype parent. However, this method does not work for some\n---       Itypes that have no parent set (and the only way to find the immediate\n+--       Present in all type and subtype entities. It is set in some (but not\n+--       all) cases in which a subtype is known to be non-static. Before this\n+--       flag was added, the computation of whether a subtype was static was\n+--       entirely synthesized, by looking at the bounds, and the immediate\n+--       subtype parent. However, this method does not work for some Itypes\n+--       that have no parent set (and the only way to find the immediate\n --       subtype parent is to go through the tree). For now, this flay is set\n --       conservatively, i.e. if it is set then for sure the subtype is non-\n --       static, but if it is not set, then the type may or may not be static.\n---       Thus the test for a static subtype is that this flag is clear AND\n---       that the bounds are static AND that the parent subtype (if available\n---       to be tested) is static. Eventually we should make sure this flag\n---       is always set right, at which point, these comments can be removed,\n---       and the tests for static subtypes greatly simplified.\n+--       Thus the test for a static subtype is that this flag is clear AND that\n+--       the bounds are static AND that the parent subtype (if available to be\n+--       tested) is static. Eventually we should make sure this flag is always\n+--       set right, at which point, these comments can be removed, and the\n+--       tests for static subtypes greatly simplified.\n \n --    Is_Null_Init_Proc (Flag178)\n --       Present in procedure entities. Set for generated init proc procedures\n@@ -2436,9 +2431,9 @@ package Einfo is\n --       indicators in bodies.\n \n --    Is_Primitive_Wrapper (Flag195)\n---       Present in E_Procedures. Primitive wrappers are Expander-generated\n---       procedures that wrap entries of protected or task types implementing\n---       a limited interface.\n+--       Present in all entities. Set for procedure entries that are used as\n+--       primitive wrappers. which are generated by the expander to wrap\n+--       entries of protected or task types implementing a limited interface.\n \n --    Is_Private_Composite (Flag107)\n --       Present in composite types that have a private component. Used to\n@@ -2505,12 +2500,12 @@ package Einfo is\n --       includes class-wide types and subtypes (which are also records)\n \n --    Is_Remote_Call_Interface (Flag62)\n---       Present in all entities, set in E_Package and E_Generic_Package\n+--       Present in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Remote_Call_Interace is applied, and\n --       also in all entities within such packages.\n \n --    Is_Remote_Types (Flag61)\n---       Present in all entities, set in E_Package and E_Generic_Package\n+--       Present in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Remote_Types is applied, and also in\n --       all entities within such packages.\n \n@@ -2530,14 +2525,14 @@ package Einfo is\n --       calls. Note that build-in-place is allowed for other types, too.\n \n --    Is_Return_Object (Flag209)\n---       Applies to all object entities. True if the object is the return\n+--       Present in all object entities. True if the object is the return\n --       object of an extended_return_statement; False otherwise.\n \n --    Is_Scalar_Type (synthesized)\n --       Applies to all entities, true for scalar types and subtypes\n \n --    Is_Shared_Passive (Flag60)\n---       Present in all entities, set in E_Package and E_Generic_Package\n+--       Present in all entities. Set in E_Package and E_Generic_Package\n --       entities to which a pragma Shared_Passive is applied, and also in\n --       all entities within such packages.\n \n@@ -2573,33 +2568,43 @@ package Einfo is\n --       interface.\n \n --    Is_Tag (Flag78)\n---       Present in E_Component. For regular tagged type this flag is set on\n---       the tag component (whose name is Name_uTag) and for CPP_Class tagged\n---       types, this flag marks the pointer to the main vtable (i.e. the one\n---       to be extended by derivation)\n+--       Present in E_Component entities. For regular tagged type this flag is\n+--       set on the tag component (whose name is Name_uTag) and for CPP_Class\n+--       tagged types, this flag marks the pointer to the main vtable (i.e. the\n+--       one to be extended by derivation)\n \n --    Is_Tagged_Type (Flag55)\n---       Present in all entities, true for an entity for a tagged type.\n+--       Present in all entities. Set for an entity for a tagged type.\n \n --    Is_Task_Interface (Flag200)\n --       Present in types that are interfaces. True is interface is declared\n---        as such, or if it is derived from task interfaces.\n+--       as such, or if it is derived from task interfaces.\n \n --    Is_Task_Record_Type (synthesized)\n---       Applies to all entities, true if Is_Concurrent_Record_Type\n+--       Applies to all entities. True if Is_Concurrent_Record_Type\n --       Corresponding_Concurrent_Type is a task type.\n \n --    Is_Task_Type (synthesized)\n---       Applies to all entities, true for task types and subtypes\n+--       Applies to all entities. True for task types and subtypes\n+\n+--    Is_Thunk (Flag225)\n+--       True for subprograms that are thunks. Thunks are small subprograms\n+--       built by the expander for tagged types that cover interface types;\n+--       at run-time thunks displace the pointer to the object (pointer named\n+--       \"this\" in the C++ terminology) from a secondary dispatch table to the\n+--       primary dispatch table associated with a given tagged type. Set by\n+--       Expand_Interface_Thunk and used by Expand_Call to handle extra\n+--       actuals associated with accessibility level.\n \n --    Is_True_Constant (Flag163)\n---       This flag is set in constants and variables which have an initial\n---       value specified but which are never assigned, partially or in the\n---       whole. For variables, it means that the variable was initialized\n---       but never modified, and hence can be treated as a constant by the\n---       code generator. For a constant, it means that the constant was not\n---       modified by generated code (e.g. to set a discriminant in an init\n---       proc). Assignments by user or generated code will reset this flag.\n+--       This flag applies to all entities for constants and variables. Set\n+--       in constants and variables which have an initial value specified but\n+--       which are never assigned, partially or in the whole. For variables, it\n+--       means that the variable was initialized but never modified, and hence\n+--       can be treated as a constant by the code generator. For a constant, it\n+--       means that the constant was not modified by generated code (e.g. to\n+--       set a discriminant in an init proc). Assignments by user or generated\n+--       code will reset this flag.\n --\n --       Note: there is one situation in which the back end does not permit\n --       this flag to be set, even if no assignments are generated. This is\n@@ -2672,8 +2677,9 @@ package Einfo is\n --       created as a wrapper for a subprogram instantiation.\n \n --    Itype_Printed (Flag202)\n---       Set in Itypes if the Itype has been printed by Sprint. This is used to\n---       avoid printing an Itype more than once.\n+--       Present in all type and subtype entities. Set in Itypes if the Itype\n+--       has been printed by Sprint. This is used to avoid printing an Itype\n+--       more than once.\n \n --    Kill_Elaboration_Checks (Flag32)\n --       Present in all entities. Set by the expander to kill elaboration\n@@ -2696,6 +2702,15 @@ package Einfo is\n --       that the result is permanent and cannot be undone by a subsequent\n --       pragma Unsuppress.\n \n+--    Known_To_Have_Preelab_Init (Flag207)\n+--       Present in all type and subtype entities. If set, then the type is\n+--       known to have preelaborable initialization. In the case of a partial\n+--       view of a private type, it is only possible for this to be set if a\n+--       pragma Preelaborable_Initialization is given for the type. For other\n+--       types, it is never set if the type does not have preelaborable\n+--       initialization, it may or may not be set if the type does have\n+--       preelaborable initialization.\n+\n --    Last_Assignment (Node20)\n --       Present in entities for variables. Set for a local variable to point\n --       to the left side of an assignment statement assigning a value to the\n@@ -2810,7 +2825,7 @@ package Einfo is\n --       used to resolve various cases of entry calls.\n --\n --    Never_Set_In_Source (Flag115)\n---       Present in all entities, but relevant only for variables and\n+--       Present in all entities, but can be set only for variables and\n --       parameters. This flag is set if the object is never assigned a value\n --       in user source code, either by assignment or by being used as an out\n --       or in out parameter. Note that this flag is not reset from using an\n@@ -3147,16 +3162,17 @@ package Einfo is\n --       which a goto to that label is legal.\n \n --    Referenced (Flag156)\n---       Present in all entities, set if the entity is referenced, except\n+--       Present in all entities. Set if the entity is referenced, except\n --       for the case of an appearence of a simple variable, that is not a\n --       renaming, as the left side of an assignment in which case the flag\n --       Referenced_As_LHS is set instead.\n \n --    Referenced_As_LHS (Flag36):\n---       This flag is set instead of Referenced if a simple variable that is\n---       not a renaming appears as the left side of an assignment. The reason\n---       we distinguish this kind of reference is that we have a separate\n---       warning for variables that are only assigned and never read.\n+--       Present in all entities. This flag is set instead of Referenced if a\n+--       simple variable that is not a renaming appears as the left side of an\n+--       assignment. The reason we distinguish this kind of reference is that\n+--       we have a separate warning for variables that are only assigned and\n+--       never read.\n \n --    Referenced_Object (Node10)\n --       Present in all type entities. Set non-Empty only for type entities\n@@ -3426,7 +3442,7 @@ package Einfo is\n --       or a copy of the low bound of the index base type if not.\n \n --    Suppress_Elaboration_Warnings (Flag148)\n---       Present in all entities, relevant only for subprogram entities and\n+--       Present in all entities, can be set only for subprogram entities and\n --       for variables. If this flag is set then Sem_Elab will not generate\n --       elaboration warnings for the subprogram or variable. Suppression of\n --       such warnings is automatic for subprograms for which elaboration\n@@ -3537,9 +3553,9 @@ package Einfo is\n --       must be released on exit unless Sec_Stack_Needed_For_Return is set.\n \n --    Vax_Float (Flag151) [base type only]\n---       Present in all type entities. Set only on the base type of float\n---       types with Vax format. The particular format is determined by the\n---       Digits_Value value which is 6,9,15 for F_Float, D_Float, G_Float.\n+--       Present in all type and subtype entities. Set only on the base type of\n+--       float types with Vax format. The particular format is determined by\n+--       the Digits_Value value which is 6,9,15 for F_Float, D_Float, G_Float.\n \n --    Warnings_Off (Flag96)\n --       Present in all entities. Set if a pragma Warnings (Off, entity-name)\n@@ -4364,20 +4380,25 @@ package Einfo is\n    --    Has_Persistent_BSS                  (Flag188)\n    --    Has_Pragma_Elaborate_Body           (Flag150)\n    --    Has_Pragma_Inline                   (Flag157)\n+   --    Has_Pragma_Pack                     (Flag121)  (base type only)\n    --    Has_Pragma_Pure                     (Flag203)\n    --    Has_Pragma_Pure_Function            (Flag179)\n    --    Has_Pragma_Unreferenced             (Flag180)\n    --    Has_Private_Declaration             (Flag155)\n    --    Has_Qualified_Name                  (Flag161)\n+   --    Has_Stream_Size_Clause              (Flag184)\n    --    Has_Unknown_Discriminants           (Flag72)\n    --    Has_Xref_Entry                      (Flag182)\n+   --    In_Private_Part                     (Flag45)\n    --    Is_Ada_2005_Only                    (Flag185)\n    --    Is_Bit_Packed_Array                 (Flag122)  (base type only)\n+   --    Is_Character_Type                   (Flag63)\n    --    Is_Child_Unit                       (Flag73)\n    --    Is_Compilation_Unit                 (Flag149)\n    --    Is_Completely_Hidden                (Flag103)\n    --    Is_Discrim_SO_Function              (Flag176)\n    --    Is_Dispatching_Operation            (Flag6)\n+   --    Is_Entry_Formal                     (Flag52)\n    --    Is_Exported                         (Flag99)\n    --    Is_First_Subtype                    (Flag70)\n    --    Is_Formal_Subprogram                (Flag111)\n@@ -4404,8 +4425,10 @@ package Einfo is\n    --    Is_Pure                             (Flag44)\n    --    Is_Remote_Call_Interface            (Flag62)\n    --    Is_Remote_Types                     (Flag61)\n+   --    Is_Renaming_Of_Object               (Flag112)\n    --    Is_Shared_Passive                   (Flag60)\n    --    Is_Statically_Allocated             (Flag28)\n+   --    Is_Tagged_Type                      (Flag55)\n    --    Is_Unchecked_Union                  (Flag117)\n    --    Is_Visible_Formal                   (Flag206)\n    --    Is_VMS_Exception                    (Flag133)\n@@ -4415,13 +4438,15 @@ package Einfo is\n    --    Low_Bound_Known                     (Flag205)\n    --    Materialize_Entity                  (Flag168)\n    --    Needs_Debug_Info                    (Flag147)\n+   --    Never_Set_In_Source                 (Flag115)\n    --    No_Return                           (Flag113)\n    --    Referenced                          (Flag156)\n    --    Referenced_As_LHS                   (Flag36)\n    --    Suppress_Elaboration_Warnings       (Flag148)\n    --    Suppress_Style_Checks               (Flag165)\n    --    Suppress_Value_Tracking_On_Call     (Flag217)\n    --    Used_As_Generic_Actual              (Flag222)\n+   --    Warnings_Off                        (Flag96)\n    --    Was_Hidden                          (Flag196)\n \n    --    Declaration_Node                    (synth)\n@@ -4467,7 +4492,6 @@ package Einfo is\n    --    Has_Specified_Stream_Output         (Flag191)\n    --    Has_Specified_Stream_Read           (Flag192)\n    --    Has_Specified_Stream_Write          (Flag193)\n-   --    Has_Stream_Size_Clause              (Flag184)\n    --    Has_Task                            (Flag30)   (base type only)\n    --    Has_Unchecked_Union                 (Flag123)  (base type only)\n    --    Has_Volatile_Components             (Flag87)   (base type only)\n@@ -4488,8 +4512,6 @@ package Einfo is\n    --    Is_Non_Static_Subtype               (Flag109)\n    --    Is_Packed                           (Flag51)   (base type only)\n    --    Is_Private_Composite                (Flag107)\n-   --    Is_Renaming_Of_Object               (Flag112)\n-   --    Is_Tagged_Type                      (Flag55)\n    --    Is_Unsigned_Type                    (Flag144)\n    --    Is_Volatile                         (Flag16)\n    --    Itype_Printed                       (Flag202)  (itypes only)\n@@ -4573,12 +4595,11 @@ package Einfo is\n    --    Packed_Array_Type                   (Node23)\n    --    Component_Alignment                 (special)  (base type only)\n    --    Has_Component_Size_Clause           (Flag68)   (base type only)\n-   --    Has_Pragma_Pack                     (Flag121)  (base type only)\n    --    Is_Aliased                          (Flag15)\n    --    Is_Constrained                      (Flag12)\n    --    Next_Index                          (synth)\n    --    Number_Dimensions                   (synth)\n-   --        (plus type attributes)\n+   --    (plus type attributes)\n \n    --  E_Block\n    --    Block_Node                          (Node11)\n@@ -4655,12 +4676,10 @@ package Einfo is\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Up_Level_Access                 (Flag215)\n    --    Has_Volatile_Components             (Flag87)\n-   --    In_Private_Part                     (Flag45)\n    --    Is_Atomic                           (Flag85)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_True_Constant                    (Flag163)\n    --    Is_Volatile                         (Flag16)\n-   --    Never_Set_In_Source                 (Flag115)\n    --    Treat_As_Volatile                   (Flag41)\n    --    Is_Return_Object                    (Flag209)\n    --    Address_Clause                      (synth)\n@@ -4826,6 +4845,7 @@ package Einfo is\n    --    Is_Primitive                        (Flag218)\n    --    Is_Private_Descendant               (Flag53)\n    --    Is_Pure                             (Flag44)\n+   --    Is_Thunk                            (Flag225)\n    --    Is_Visible_Child_Unit               (Flag116)\n    --    Needs_No_Actuals                    (Flag22)\n    --    Requires_Overriding                 (Flag213)  (non-generic case only)\n@@ -4856,7 +4876,6 @@ package Einfo is\n    --    Default_Value                       (Node20)\n    --    Protected_Formal                    (Node22)\n    --    Is_Controlling_Formal               (Flag97)\n-   --    Is_Entry_Formal                     (Flag52)\n    --    Is_Return_Object                    (Flag209)\n    --    Parameter_Mode                      (synth)\n \n@@ -4891,10 +4910,8 @@ package Einfo is\n    --    Extra_Constrained                   (Node23)\n    --    Has_Initial_Value                   (Flag219)\n    --    Is_Controlling_Formal               (Flag97)\n-   --    Is_Entry_Formal                     (Flag52)\n    --    Is_Optional_Parameter               (Flag134)\n    --    Low_Bound_Known                     (Flag205)\n-   --    Never_Set_In_Source                 (Flag115)\n    --    Is_Return_Object                    (Flag209)\n    --    Parameter_Mode                      (synth)\n \n@@ -4947,6 +4964,7 @@ package Einfo is\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Overriding_Operation             (Flag39)\n    --    Is_Primitive                        (Flag218)\n+   --    Is_Thunk                            (Flag225)\n    --    Default_Expressions_Processed       (Flag108)\n \n    --  E_Ordinary_Fixed_Point_Type\n@@ -4994,7 +5012,6 @@ package Einfo is\n    --    Has_RACW                            (Flag214)  (non-generic case only)\n    --    Has_Subprogram_Descriptor           (Flag93)\n    --    In_Package_Body                     (Flag48)\n-   --    In_Private_Part                     (Flag45)\n    --    In_Use                              (Flag8)\n    --    Is_Instantiated                     (Flag126)\n    --    Is_Private_Descendant               (Flag53)\n@@ -5085,6 +5102,7 @@ package Einfo is\n    --    Is_Primitive_Wrapper                (Flag195)  (non-generic case only)\n    --    Is_Private_Descendant               (Flag53)\n    --    Is_Pure                             (Flag44)\n+   --    Is_Thunk                            (Flag225)\n    --    Is_Valued_Procedure                 (Flag127)\n    --    Is_Visible_Child_Unit               (Flag116)\n    --    Needs_No_Actuals                    (Flag22)\n@@ -5275,13 +5293,11 @@ package Einfo is\n    --    Has_Initial_Value                   (Flag219)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Volatile_Components             (Flag87)\n-   --    In_Private_Part                     (Flag45)\n    --    Is_Atomic                           (Flag85)\n    --    Is_Eliminated                       (Flag124)\n    --    Is_Shared_Passive                   (Flag60)\n    --    Is_True_Constant                    (Flag163)\n    --    Is_Volatile                         (Flag16)\n-   --    Never_Set_In_Source                 (Flag115)\n    --    Treat_As_Volatile                   (Flag41)\n    --    Is_Return_Object                    (Flag209)\n    --    Has_Up_Level_Access                 (Flag215)\n@@ -5926,6 +5942,7 @@ package Einfo is\n    function Is_Signed_Integer_Type              (Id : E) return B;\n    function Is_Subprogram                       (Id : E) return B;\n    function Is_Task_Type                        (Id : E) return B;\n+   function Is_Thunk                            (Id : E) return B;\n    function Is_Type                             (Id : E) return B;\n \n    -------------------------------------\n@@ -6306,6 +6323,7 @@ package Einfo is\n    procedure Set_Is_Tag                          (Id : E; V : B := True);\n    procedure Set_Is_Tagged_Type                  (Id : E; V : B := True);\n    procedure Set_Is_Task_Interface               (Id : E; V : B := True);\n+   procedure Set_Is_Thunk                        (Id : E; V : B := True);\n    procedure Set_Is_True_Constant                (Id : E; V : B := True);\n    procedure Set_Is_Unchecked_Union              (Id : E; V : B := True);\n    procedure Set_Is_Unsigned_Type                (Id : E; V : B := True);\n@@ -6940,6 +6958,7 @@ package Einfo is\n    pragma Inline (Is_Task_Interface);\n    pragma Inline (Is_True_Constant);\n    pragma Inline (Is_Task_Type);\n+   pragma Inline (Is_Thunk);\n    pragma Inline (Is_Type);\n    pragma Inline (Is_Unchecked_Union);\n    pragma Inline (Is_Unsigned_Type);\n@@ -7305,6 +7324,7 @@ package Einfo is\n    pragma Inline (Set_Is_Tag);\n    pragma Inline (Set_Is_Tagged_Type);\n    pragma Inline (Set_Is_Task_Interface);\n+   pragma Inline (Set_Is_Thunk);\n    pragma Inline (Set_Is_True_Constant);\n    pragma Inline (Set_Is_Unchecked_Union);\n    pragma Inline (Set_Is_Unsigned_Type);"}, {"sha": "8564beadefe13f5f8d22b3626d3d575f5f89e674", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -637,12 +637,10 @@ package body Exp_Attr is\n                   pragma Assert (Present (Formal));\n \n                   Rewrite (N,\n-                    Unchecked_Convert_To\n-                      (Typ, New_Occurrence_Of (Formal, Loc)));\n+                    Unchecked_Convert_To (Typ,\n+                      New_Occurrence_Of (Formal, Loc)));\n                   Set_Etype (N, Typ);\n \n-                  return;\n-\n                --  The expression must appear in a default expression, (which\n                --  in the initialization procedure is the right-hand side of an\n                --  assignment), and not in a discriminant constraint.\n@@ -667,8 +665,6 @@ package body Exp_Attr is\n \n                      Analyze_And_Resolve (N, Typ);\n                   end if;\n-\n-                  return;\n                end if;\n             end;\n \n@@ -702,8 +698,8 @@ package body Exp_Attr is\n                --  Note: Limit the expansion of an attribute applied to a\n                --  dereference of an access parameter so that it's only done\n                --  for 'Access. This fixes a problem with 'Unrestricted_Access\n-               --  that leads to errors in the case where the attribute\n-               --  type is access-to-variable and the access parameter is\n+               --  that leads to errors in the case where the attribute type\n+               --  is access-to-variable and the access parameter is\n                --  access-to-constant. The conversion is only done to get\n                --  accessibility checks, so it makes sense to limit it to\n                --  'Access (and consistent with existing comment)."}, {"sha": "7296b8ac0f5be1a90512954d2c6d0e465538a1a5", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 106, "deletions": 22, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -1679,25 +1679,8 @@ package body Exp_Ch6 is\n \n    procedure Expand_Call (N : Node_Id) is\n       Loc           : constant Source_Ptr := Sloc (N);\n-      Remote        : constant Boolean    := Is_Remote_Call (N);\n-      Subp          : Entity_Id;\n-      Orig_Subp     : Entity_Id := Empty;\n-      Parent_Subp   : Entity_Id;\n-      Parent_Formal : Entity_Id;\n-      Actual        : Node_Id;\n-      Formal        : Entity_Id;\n-      Prev          : Node_Id := Empty;\n-\n-      Prev_Orig : Node_Id;\n-      --  Original node for an actual, which may have been rewritten. If the\n-      --  actual is a function call that has been transformed from a selected\n-      --  component, the original node is unanalyzed. Otherwise, it carries\n-      --  semantic information used to generate additional actuals.\n-\n-      Scop          : Entity_Id;\n       Extra_Actuals : List_Id := No_List;\n-\n-      CW_Interface_Formals_Present : Boolean := False;\n+      Prev          : Node_Id := Empty;\n \n       procedure Add_Actual_Parameter (Insert_Param : Node_Id);\n       --  Adds one entry to the end of the actual parameter list. Used for\n@@ -1878,6 +1861,26 @@ package body Exp_Ch6 is\n          raise Program_Error;\n       end Inherited_From_Formal;\n \n+      --  Local variables\n+\n+      Remote        : constant Boolean := Is_Remote_Call (N);\n+      Actual        : Node_Id;\n+      Formal        : Entity_Id;\n+      Orig_Subp     : Entity_Id := Empty;\n+      Param_Count   : Natural := 0;\n+      Parent_Formal : Entity_Id;\n+      Parent_Subp   : Entity_Id;\n+      Scop          : Entity_Id;\n+      Subp          : Entity_Id;\n+\n+      Prev_Orig     : Node_Id;\n+      --  Original node for an actual, which may have been rewritten. If the\n+      --  actual is a function call that has been transformed from a selected\n+      --  component, the original node is unanalyzed. Otherwise, it carries\n+      --  semantic information used to generate additional actuals.\n+\n+      CW_Interface_Formals_Present : Boolean := False;\n+\n    --  Start of processing for Expand_Call\n \n    begin\n@@ -1998,8 +2001,9 @@ package body Exp_Ch6 is\n       --  We also generate any required range checks for actuals as we go\n       --  through the loop, since this is a convenient place to do this.\n \n-      Formal := First_Formal (Subp);\n-      Actual := First_Actual (N);\n+      Formal      := First_Formal (Subp);\n+      Actual      := First_Actual (N);\n+      Param_Count := 1;\n       while Present (Formal) loop\n \n          --  Generate range check if required (not activated yet ???)\n@@ -2136,7 +2140,35 @@ package body Exp_Ch6 is\n                Prev_Orig := Prev;\n             end if;\n \n-            if Is_Entity_Name (Prev_Orig) then\n+            --  Ada 2005 (AI-251): Thunks must propagate the extra actuals\n+            --  of accessibility levels.\n+\n+            if Ekind (Current_Scope) in Subprogram_Kind\n+              and then Is_Thunk (Current_Scope)\n+            then\n+               declare\n+                  Parm_Ent : Entity_Id;\n+\n+               begin\n+                  if Is_Controlling_Actual (Actual) then\n+\n+                     --  Find the corresponding actual of the thunk\n+\n+                     Parm_Ent := First_Entity (Current_Scope);\n+                     for J in 2 .. Param_Count loop\n+                        Next_Entity (Parm_Ent);\n+                     end loop;\n+\n+                  else pragma Assert (Is_Entity_Name (Actual));\n+                     Parm_Ent := Entity (Actual);\n+                  end if;\n+\n+                  Add_Extra_Actual\n+                    (New_Occurrence_Of (Extra_Accessibility (Parm_Ent), Loc),\n+                     Extra_Accessibility (Formal));\n+               end;\n+\n+            elsif Is_Entity_Name (Prev_Orig) then\n \n                --  When passing an access parameter, or a renaming of an access\n                --  parameter, as the actual to another access parameter we need\n@@ -2191,11 +2223,12 @@ package body Exp_Ch6 is\n                      Extra_Accessibility (Formal));\n                end if;\n \n+            --  All cases other than thunks\n+\n             else\n                case Nkind (Prev_Orig) is\n \n                   when N_Attribute_Reference =>\n-\n                      case Get_Attribute_Id (Attribute_Name (Prev_Orig)) is\n \n                         --  For X'Access, pass on the level of the prefix X\n@@ -2411,6 +2444,7 @@ package body Exp_Ch6 is\n \n          <<Skip_Extra_Actual_Generation>>\n \n+         Param_Count := Param_Count + 1;\n          Next_Actual (Actual);\n          Next_Formal (Formal);\n       end loop;\n@@ -5038,6 +5072,18 @@ package body Exp_Ch6 is\n          Func_Call := Expression (Func_Call);\n       end if;\n \n+      --  If the call has already been processed to add build-in-place actuals\n+      --  then return. This should not normally occur in an allocator context,\n+      --  but we add the protection as a defensive measure.\n+\n+      if Is_Expanded_Build_In_Place_Call (Func_Call) then\n+         return;\n+      end if;\n+\n+      --  Mark the call as processed as a build-in-place call\n+\n+      Set_Is_Expanded_Build_In_Place_Call (Func_Call);\n+\n       Loc := Sloc (Function_Call);\n \n       if Is_Entity_Name (Name (Func_Call)) then\n@@ -5179,6 +5225,20 @@ package body Exp_Ch6 is\n          Func_Call := Expression (Func_Call);\n       end if;\n \n+      --  If the call has already been processed to add build-in-place actuals\n+      --  then return. One place this can occur is for calls to build-in-place\n+      --  functions that occur within a call to a protected operation, where\n+      --  due to rewriting and expansion of the protected call there can be\n+      --  more than one call to Expand_Actuals for the same set of actuals.\n+\n+      if Is_Expanded_Build_In_Place_Call (Func_Call) then\n+         return;\n+      end if;\n+\n+      --  Mark the call as processed as a build-in-place call\n+\n+      Set_Is_Expanded_Build_In_Place_Call (Func_Call);\n+\n       Loc := Sloc (Function_Call);\n \n       if Is_Entity_Name (Name (Func_Call)) then\n@@ -5293,6 +5353,18 @@ package body Exp_Ch6 is\n          Func_Call := Expression (Func_Call);\n       end if;\n \n+      --  If the call has already been processed to add build-in-place actuals\n+      --  then return. This should not normally occur in an assignment context,\n+      --  but we add the protection as a defensive measure.\n+\n+      if Is_Expanded_Build_In_Place_Call (Func_Call) then\n+         return;\n+      end if;\n+\n+      --  Mark the call as processed as a build-in-place call\n+\n+      Set_Is_Expanded_Build_In_Place_Call (Func_Call);\n+\n       Loc := Sloc (Function_Call);\n \n       if Is_Entity_Name (Name (Func_Call)) then\n@@ -5403,6 +5475,18 @@ package body Exp_Ch6 is\n          Func_Call := Expression (Func_Call);\n       end if;\n \n+      --  If the call has already been processed to add build-in-place actuals\n+      --  then return. This should not normally occur in an object declaration,\n+      --  but we add the protection as a defensive measure.\n+\n+      if Is_Expanded_Build_In_Place_Call (Func_Call) then\n+         return;\n+      end if;\n+\n+      --  Mark the call as processed as a build-in-place call\n+\n+      Set_Is_Expanded_Build_In_Place_Call (Func_Call);\n+\n       Loc := Sloc (Function_Call);\n \n       if Is_Entity_Name (Name (Func_Call)) then"}, {"sha": "2cb621bfc9172e72bec3416922ace073bb35ce98", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -1961,6 +1961,37 @@ package body Sem_Ch6 is\n \n       Check_Anonymous_Return;\n \n+      --  Set the Protected_Formal field of each extra formal of the protected\n+      --  subprogram to reference the corresponding extra formal of the\n+      --  subprogram that implements it. For regular formals this occurs when\n+      --  the protected subprogram's declaration is expanded, but the extra\n+      --  formals don't get created until the subprogram is frozen. We need to\n+      --  do this before analyzing the protected subprogram's body so that any\n+      --  references to the original subprogram's extra formals will be changed\n+      --  refer to the implementing subprogram's formals (see Expand_Formal).\n+\n+      if Present (Spec_Id)\n+        and then Is_Protected_Type (Scope (Spec_Id))\n+        and then Present (Protected_Body_Subprogram (Spec_Id))\n+      then\n+         declare\n+            Impl_Subp       : constant Entity_Id :=\n+                                Protected_Body_Subprogram (Spec_Id);\n+            Prot_Ext_Formal : Entity_Id := Extra_Formals (Spec_Id);\n+            Impl_Ext_Formal : Entity_Id := Extra_Formals (Impl_Subp);\n+\n+         begin\n+            while Present (Prot_Ext_Formal) loop\n+               pragma Assert (Present (Impl_Ext_Formal));\n+\n+               Set_Protected_Formal (Prot_Ext_Formal, Impl_Ext_Formal);\n+\n+               Next_Formal_With_Extras (Prot_Ext_Formal);\n+               Next_Formal_With_Extras (Impl_Ext_Formal);\n+            end loop;\n+         end;\n+      end if;\n+\n       --  Now we can go on to analyze the body\n \n       HSS := Handled_Statement_Sequence (N);"}, {"sha": "b7bf39e94cb067f3a497f0594fad954b18a083ad", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -185,6 +185,14 @@ package body Sinfo is\n       return Node4 (N);\n    end Actual_Designated_Subtype;\n \n+   function Address_Warning_Posted\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n+      return Flag18 (N);\n+   end Address_Warning_Posted;\n+\n    function Aggregate_Bounds\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -1590,6 +1598,14 @@ package body Sinfo is\n       return Flag8 (N);\n    end Is_Entry_Barrier_Function;\n \n+   function Is_Expanded_Build_In_Place_Call\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Function_Call);\n+      return Flag11 (N);\n+   end Is_Expanded_Build_In_Place_Call;\n+\n    function Is_Folded_In_Parser\n       (N : Node_Id) return Boolean is\n    begin\n@@ -2901,6 +2917,14 @@ package body Sinfo is\n       Set_Node4 (N, Val);\n    end Set_Actual_Designated_Subtype;\n \n+   procedure Set_Address_Warning_Posted\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Attribute_Definition_Clause);\n+      Set_Flag18 (N, Val);\n+   end Set_Address_Warning_Posted;\n+\n    procedure Set_Aggregate_Bounds\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -4297,6 +4321,14 @@ package body Sinfo is\n       Set_Flag8 (N, Val);\n    end Set_Is_Entry_Barrier_Function;\n \n+   procedure Set_Is_Expanded_Build_In_Place_Call\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Function_Call);\n+      Set_Flag11 (N, Val);\n+   end Set_Is_Expanded_Build_In_Place_Call;\n+\n    procedure Set_Is_Folded_In_Parser\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "8528156dd9e222931913777460ead1c1a2cd27b5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdce4bb79eb092b412c272e92435b57147312011/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=fdce4bb79eb092b412c272e92435b57147312011", "patch": "@@ -475,17 +475,6 @@ package Sinfo is\n    --    refers to a node or is posted on its source location, and has the\n    --    effect of inhibiting further messages involving this same node.\n \n-   --  Local_Raise_Statements (Elist1)\n-   --    This field is present in exception handler nodes. It is set to\n-   --    No_Elist in the normal case. If there is at least one raise statement\n-   --    which can potentially be handled as a local raise, then this field\n-   --    points to a list of raise nodes, which are calls to a routine to raise\n-   --    an exception. These are raise nodes which can be optimized into gotos\n-   --    if the handler turns out to meet the conditions which permit this\n-   --    transformation. Note that this does NOT include instances of the\n-   --    N_Raise_xxx_Error nodes since the transformation of these nodes is\n-   --    handled by the back end (using the N_Push/N_Pop mechanism).\n-\n    --  Has_Dynamic_Length_Check (Flag10-Sem)\n    --    This flag is present on all nodes. It is set to indicate that one of\n    --    the routines in unit Checks has generated a length check action which\n@@ -573,6 +562,11 @@ package Sinfo is\n    --    the designated type is an unconstrained packed array and the\n    --    dereference is the prefix of a 'Size attribute reference.\n \n+   --  Address_Warning_Posted (Flag18-Sem)\n+   --    Present in N_Attribute_Definition nodes. Set to indicate that we have\n+   --    posted a warning for the address clause regarding size or alignment\n+   --    issues. Used to inhibit multiple redundant messages.\n+\n    --  Aggregate_Bounds (Node3-Sem)\n    --    Present in array N_Aggregate nodes. If the aggregate contains\n    --    component associations this field points to an N_Range node whose\n@@ -1167,6 +1161,11 @@ package Sinfo is\n    --    of an entry barrier from a protected entry body. It is used for the\n    --    circuitry checking for incorrect use of Current_Task.\n \n+   --  Is_Expanded_Build_In_Place_Call (Flag11-Sem)\n+   --    This flag is set in an N_Function_Call node to indicate that the extra\n+   --    actuals to support a build-in-place style of call have been added to\n+   --    the call.\n+\n    --  Is_In_Discriminant_Check (Flag11-Sem)\n    --    This flag is present in a selected component, and is used to indicate\n    --    that the reference occurs within a discriminant check. The\n@@ -1282,6 +1281,17 @@ package Sinfo is\n    --    described above). Instead for a child unit, implicit with's are\n    --    generated for all parents.\n \n+   --  Local_Raise_Statements (Elist1)\n+   --    This field is present in exception handler nodes. It is set to\n+   --    No_Elist in the normal case. If there is at least one raise statement\n+   --    which can potentially be handled as a local raise, then this field\n+   --    points to a list of raise nodes, which are calls to a routine to raise\n+   --    an exception. These are raise nodes which can be optimized into gotos\n+   --    if the handler turns out to meet the conditions which permit this\n+   --    transformation. Note that this does NOT include instances of the\n+   --    N_Raise_xxx_Error nodes since the transformation of these nodes is\n+   --    handled by the back end (using the N_Push/N_Pop mechanism).\n+\n    --  Loop_Actions (List2-Sem)\n    --    A list present in Component_Association nodes in array aggregates.\n    --    Used to collect actions that must be executed within the loop because\n@@ -4295,6 +4305,7 @@ package Sinfo is\n       --   actual parameter part)\n       --  First_Named_Actual (Node4-Sem)\n       --  Controlling_Argument (Node1-Sem) (set to Empty if not dispatching)\n+      --  Is_Expanded_Build_In_Place_Call (Flag11-Sem)\n       --  Do_Tag_Check (Flag13-Sem)\n       --  No_Elaboration_Check (Flag14-Sem)\n       --  Parameter_List_Truncated (Flag17-Sem)\n@@ -6114,6 +6125,7 @@ package Sinfo is\n       --  Next_Rep_Item (Node5-Sem)\n       --  From_At_Mod (Flag4-Sem)\n       --  Check_Address_Alignment (Flag11-Sem)\n+      --  Address_Warning_Posted (Flag18-Sem)\n \n       ---------------------------------------------\n       -- 13.4  Enumeration representation clause --\n@@ -7426,6 +7438,9 @@ package Sinfo is\n    function Actual_Designated_Subtype\n      (N : Node_Id) return Node_Id;    -- Node4\n \n+   function Address_Warning_Posted\n+     (N : Node_Id) return Boolean;    -- Flag18\n+\n    function Aggregate_Bounds\n      (N : Node_Id) return Node_Id;    -- Node3\n \n@@ -7873,6 +7888,9 @@ package Sinfo is\n    function Is_Entry_Barrier_Function\n      (N : Node_Id) return Boolean;    -- Flag8\n \n+   function Is_Expanded_Build_In_Place_Call\n+     (N : Node_Id) return Boolean;    -- Flag11\n+\n    function Is_Folded_In_Parser\n      (N : Node_Id) return Boolean;    -- Flag4\n \n@@ -8287,6 +8305,9 @@ package Sinfo is\n    procedure Set_Actual_Designated_Subtype\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n+   procedure Set_Address_Warning_Posted\n+     (N : Node_Id; Val : Boolean := True);    -- Flag18\n+\n    procedure Set_Aggregate_Bounds\n      (N : Node_Id; Val : Node_Id);            -- Node3\n \n@@ -8731,6 +8752,9 @@ package Sinfo is\n    procedure Set_Is_Entry_Barrier_Function\n      (N : Node_Id; Val : Boolean := True);    -- Flag8\n \n+   procedure Set_Is_Expanded_Build_In_Place_Call\n+     (N : Node_Id; Val : Boolean := True);    -- Flag11\n+\n    procedure Set_Is_Folded_In_Parser\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n@@ -10677,6 +10701,7 @@ package Sinfo is\n    pragma Inline (Activation_Chain_Entity);\n    pragma Inline (Acts_As_Spec);\n    pragma Inline (Actual_Designated_Subtype);\n+   pragma Inline (Address_Warning_Posted);\n    pragma Inline (Aggregate_Bounds);\n    pragma Inline (Aliased_Present);\n    pragma Inline (All_Others);\n@@ -10826,6 +10851,7 @@ package Sinfo is\n    pragma Inline (Is_Controlling_Actual);\n    pragma Inline (Is_Dynamic_Coextension);\n    pragma Inline (Is_Entry_Barrier_Function);\n+   pragma Inline (Is_Expanded_Build_In_Place_Call);\n    pragma Inline (Is_Folded_In_Parser);\n    pragma Inline (Is_In_Discriminant_Check);\n    pragma Inline (Is_Machine_Number);\n@@ -10961,6 +10987,7 @@ package Sinfo is\n    pragma Inline (Set_Activation_Chain_Entity);\n    pragma Inline (Set_Acts_As_Spec);\n    pragma Inline (Set_Actual_Designated_Subtype);\n+   pragma Inline (Set_Address_Warning_Posted);\n    pragma Inline (Set_Aggregate_Bounds);\n    pragma Inline (Set_Aliased_Present);\n    pragma Inline (Set_All_Others);\n@@ -11108,6 +11135,7 @@ package Sinfo is\n    pragma Inline (Set_Is_Controlling_Actual);\n    pragma Inline (Set_Is_Dynamic_Coextension);\n    pragma Inline (Set_Is_Entry_Barrier_Function);\n+   pragma Inline (Set_Is_Expanded_Build_In_Place_Call);\n    pragma Inline (Set_Is_Folded_In_Parser);\n    pragma Inline (Set_Is_In_Discriminant_Check);\n    pragma Inline (Set_Is_Machine_Number);"}]}