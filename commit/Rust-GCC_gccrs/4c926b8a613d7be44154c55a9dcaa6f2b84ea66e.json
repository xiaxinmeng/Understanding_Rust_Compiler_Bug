{"sha": "4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5MjZiOGE2MTNkN2JlNDQxNTRjNTVhOWRjYWE2ZjJiODRlYTY2ZQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@imgtec.com", "date": "2015-10-09T17:12:26Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2015-10-09T17:12:26Z"}, "message": "mips.exp (mips_option_groups): Add -mframe-header-opt and -mno-frame-header-opt options.\n\n2015-10-09  Steve Ellcey  <sellcey@imgtec.com>\n\n\t* gcc.target/mips/mips.exp (mips_option_groups): Add -mframe-header-opt\n\tand -mno-frame-header-opt options.\n\t* gcc.target/mips/frame-header-1.c: New file.\n\t* gcc.target/mips/frame-header-2.c: New file.\n\t* gcc.target/mips/frame-header-3.c: New file.\n\nFrom-SVN: r228667", "tree": {"sha": "1a9bdb0f68a8a0e11df04a08d4018697379c28ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9bdb0f68a8a0e11df04a08d4018697379c28ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/comments", "author": null, "committer": null, "parents": [{"sha": "d41c8b4c43d7050f05668f23ad4563ed6e9b41d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41c8b4c43d7050f05668f23ad4563ed6e9b41d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41c8b4c43d7050f05668f23ad4563ed6e9b41d0"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "d73a9028f131c51cdccb9621277ca7012c85b4eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "patch": "@@ -1,3 +1,11 @@\n+2015-10-09  Steve Ellcey  <sellcey@imgtec.com>\n+\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Add -mframe-header-opt\n+\tand -mno-frame-header-opt options.\n+\t* gcc.target/mips/frame-header-1.c: New file.\n+\t* gcc.target/mips/frame-header-2.c: New file.\n+\t* gcc.target/mips/frame-header-3.c: New file.\n+\n 2015-10-09  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Hale Wang  <hale.wang@arm.com>\n "}, {"sha": "971656ddaa3551fa12f5d10f8b3160c21dc7262c", "filename": "gcc/testsuite/gcc.target/mips/frame-header-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-1.c?ref=4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "patch": "@@ -0,0 +1,21 @@\n+/* Verify that we do not optimize away the frame header in foo when using\n+   -mno-frame-header-opt by checking the stack pointer increment done in\n+   that function.  Without the optimization foo should increment the stack\n+   by 24 bytes, with the optimization it would only be 8 bytes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mno-frame-header-opt -mabi=32 -mno-abicalls\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$sp,\\\\\\$sp,-24\" } } */\n+\n+NOMIPS16 void __attribute__((noinline))\n+bar (int* a)\n+{\n+  *a = 1;\n+}\n+\n+NOMIPS16 void\n+foo (int a)\n+{\n+  bar (&a);\n+}"}, {"sha": "0e86bc91994d1ad66db4263f6a723d2b2b1b585c", "filename": "gcc/testsuite/gcc.target/mips/frame-header-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-2.c?ref=4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "patch": "@@ -0,0 +1,21 @@\n+/* Verify that we do optimize away the frame header in foo when using\n+   -mframe-header-opt by checking the stack pointer increment done in\n+   that function.  Without the optimization foo should increment the\n+   stack by 24 bytes, with the optimization it would only be 8 bytes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mframe-header-opt -mabi=32 -mno-abicalls\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$sp,\\\\\\$sp,-8\" } } */\n+\n+NOMIPS16 void __attribute__((noinline))\n+bar (int* a)\n+{\n+  *a = 1;\n+}\n+\n+NOMIPS16 void\n+foo (int a)\n+{\n+  bar (&a);\n+}"}, {"sha": "2a8c5156368358c97af5da2a83804ba73621de6d", "filename": "gcc/testsuite/gcc.target/mips/frame-header-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fframe-header-3.c?ref=4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that we do not optimize away the frame header in foo when using\n+   -mframe-header-opt but are calling a weak function that may be overridden\n+   by a different function that does need the frame header.  Without the\n+   optimization foo should increment the stack by 24 bytes, with the\n+   optimization it would only be 8 bytes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mframe-header-opt -mabi=32 -mno-abicalls\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$sp,\\\\\\$sp,-24\" } } */\n+\n+NOMIPS16 void __attribute__((noinline, weak))\n+bar (int* a)\n+{\n+  *a = 1;\n+}\n+\n+void\n+NOMIPS16 foo (int a)\n+{\n+  bar (&a);\n+}"}, {"sha": "0f2d6a21f5df233dded721384275c26ca8dbb362", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c926b8a613d7be44154c55a9dcaa6f2b84ea66e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=4c926b8a613d7be44154c55a9dcaa6f2b84ea66e", "patch": "@@ -256,6 +256,7 @@ set mips_option_groups {\n     maddps \"HAS_MADDPS\"\n     lsa \"(|!)HAS_LSA\"\n     section_start \"-Wl,--section-start=.*\"\n+    frame-header \"-mframe-header-opt|-mno-frame-header-opt\"\n }\n \n for { set option 0 } { $option < 32 } { incr option } {"}]}