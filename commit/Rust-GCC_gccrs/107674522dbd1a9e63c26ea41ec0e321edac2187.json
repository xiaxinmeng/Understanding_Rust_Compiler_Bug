{"sha": "107674522dbd1a9e63c26ea41ec0e321edac2187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA3Njc0NTIyZGJkMWE5ZTYzYzI2ZWE0MWVjMGUzMjFlZGFjMjE4Nw==", "commit": {"author": {"name": "Akshat Agarwal", "email": "humancalico@disroot.org", "date": "2021-02-17T10:03:48Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-18T19:00:30Z"}, "message": "remove ast/clone-test.h\n\nSigned-off-by: Akshat Agarwal <humancalico@disroot.org>\n\nFixes: #99", "tree": {"sha": "4082aeb1b0a27157c16d8d12e80aa41c19fde450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4082aeb1b0a27157c16d8d12e80aa41c19fde450"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/107674522dbd1a9e63c26ea41ec0e321edac2187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107674522dbd1a9e63c26ea41ec0e321edac2187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107674522dbd1a9e63c26ea41ec0e321edac2187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107674522dbd1a9e63c26ea41ec0e321edac2187/comments", "author": {"login": "humancalico", "id": 51334444, "node_id": "MDQ6VXNlcjUxMzM0NDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/51334444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humancalico", "html_url": "https://github.com/humancalico", "followers_url": "https://api.github.com/users/humancalico/followers", "following_url": "https://api.github.com/users/humancalico/following{/other_user}", "gists_url": "https://api.github.com/users/humancalico/gists{/gist_id}", "starred_url": "https://api.github.com/users/humancalico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humancalico/subscriptions", "organizations_url": "https://api.github.com/users/humancalico/orgs", "repos_url": "https://api.github.com/users/humancalico/repos", "events_url": "https://api.github.com/users/humancalico/events{/privacy}", "received_events_url": "https://api.github.com/users/humancalico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca514784717ef9c8418968a60ed4641af78c7d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca514784717ef9c8418968a60ed4641af78c7d7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca514784717ef9c8418968a60ed4641af78c7d7b"}], "stats": {"total": 108, "additions": 0, "deletions": 108}, "files": [{"sha": "78a0662223510bc101b1475b5cfa21cbc12eeb8b", "filename": "gcc/rust/ast/clone-test.h", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Fclone-test.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca514784717ef9c8418968a60ed4641af78c7d7b/gcc%2Frust%2Fast%2Fclone-test.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Fclone-test.h?ref=ca514784717ef9c8418968a60ed4641af78c7d7b", "patch": "@@ -1,108 +0,0 @@\n-// Copyright (C) 2020 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef CLONE_TEST_H\n-#define CLONE_TEST_H\n-// Potential fancy deep cloning test for use with unique_ptr\n-\n-// disable by default\n-#if 0\n-#include <memory>\n-\n-namespace clone_code {\n-    template<typename T>\n-    class abstract_method {};\n-\n-    template<typename T>\n-    class virtual_inherit_from : virtual public T {\n-        using T::T;\n-    };\n-\n-    template<typename Derived, typename... Bases>\n-    class clone_inherit : public Bases... {\n-      public:\n-        virtual ~clone_inherit() = default;\n-\n-        std::unique_ptr<Derived> clone() const {\n-            return std::unique_ptr<Derived>(static_cast<Derived*>(this->clone_impl()));\n-        }\n-\n-      protected:\n-      private:\n-        virtual clone_inherit* clone_impl() const override {\n-            return new Derived(static_cast<const Derived&>(*this));\n-        }\n-    };\n-\n-    template<typename Derived, typename... Bases>\n-    class clone_inherit<abstract_method<Derived>, Bases...> : public Bases... {\n-      public:\n-        virtual ~clone_inherit() = default;\n-\n-        std::unique_ptr<Derived> clone() const {\n-            return std::unique_ptr<Derived>(static_cast<Derived*>(this->clone_impl()));\n-        }\n-\n-      protected:\n-      private:\n-        virtual clone_inherit* clone_impl() const = 0;\n-    };\n-\n-    template<typename Derived>\n-    class clone_inherit<Derived> {\n-      public:\n-        virtual ~clone_inherit() = default;\n-\n-        std::unique_ptr<Derived> clone() const {\n-            return std::unique_ptr<Derived>(static_cast<Derived*>(this->clone_impl()));\n-        }\n-\n-      private:\n-        virtual clone_inherit* clone_impl() const override {\n-            return new Derived(static_cast<const Derived&>(*this));\n-        }\n-    };\n-\n-    template<typename Derived>\n-    class clone_inherit<abstract_method<Derived> > {\n-      public:\n-        virtual ~clone_inherit() = default;\n-\n-        std::unique_ptr<Derived> clone() const {\n-            return std::unique_ptr<Derived>(static_cast<Derived*>(this->clone_impl()));\n-        }\n-\n-      private:\n-        virtual clone_inherit* clone_impl() const = 0;\n-    };\n-}\n-\n-namespace user_code {\n-    using namespace clone_code;\n-\n-    class cloneable : public clone_inherit<abstract_method<cloneable> > {};\n-\n-    class foo : public clone_inherit<abstract_method<foo>, virtual_inherit_from<cloneable> > {};\n-\n-    class bar : public clone_inherit<abstract_method<bar>, virtual_inherit_from<cloneable> > {};\n-\n-    class concrete : public clone_inherit<concrete, foo, bar> {};\n-}\n-#endif\n-\n-#endif"}]}