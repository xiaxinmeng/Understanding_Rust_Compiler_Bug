{"sha": "628b78f9794a2eefcbc578011806bfa8e09b9ef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4Yjc4Zjk3OTRhMmVlZmNiYzU3ODAxMTgwNmJmYThlMDliOWVmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-25T10:47:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-25T13:56:06Z"}, "message": "tree-optimization/95839 - allow CTOR vectorization without loads\n\nThis removes a premature check for enough datarefs in a basic-block\nbefore we consider vectorizing it which leaves basic-blocks with\njust vectorizable vector constructors unvectorized.  The check\nis effectively done by the following check for store groups\nwhich then also include constructors.\n\n2020-06-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95839\n\t* tree-vect-slp.c (vect_slp_analyze_bb_1): Remove premature\n\tcheck on the number of datarefs.\n\n\t* gcc.dg/vect/bb-slp-pr95839.c: New testcase.", "tree": {"sha": "5773155caa47cfcec12e00f2a4edd263437174e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5773155caa47cfcec12e00f2a4edd263437174e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628b78f9794a2eefcbc578011806bfa8e09b9ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628b78f9794a2eefcbc578011806bfa8e09b9ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628b78f9794a2eefcbc578011806bfa8e09b9ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628b78f9794a2eefcbc578011806bfa8e09b9ef7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8005a3e4e7a643ff78086081a3385775924fe828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8005a3e4e7a643ff78086081a3385775924fe828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8005a3e4e7a643ff78086081a3385775924fe828"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "0bfba01452de25158bd946d8223f70c3fffa799f", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr95839.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628b78f9794a2eefcbc578011806bfa8e09b9ef7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr95839.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628b78f9794a2eefcbc578011806bfa8e09b9ef7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr95839.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr95839.c?ref=628b78f9794a2eefcbc578011806bfa8e09b9ef7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-additional-options \"-w -Wno-psabi\" } */\n+\n+typedef float __attribute__((vector_size(16))) v4f32;\n+\n+v4f32 f(v4f32 a, v4f32 b)\n+{\n+  /* Check that we vectorize this CTOR without any loads.  */\n+  return (v4f32){a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]};\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" } } */"}, {"sha": "46a75f1c2072f65d972fa808ba5c1effc60ce830", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628b78f9794a2eefcbc578011806bfa8e09b9ef7/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628b78f9794a2eefcbc578011806bfa8e09b9ef7/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=628b78f9794a2eefcbc578011806bfa8e09b9ef7", "patch": "@@ -3149,15 +3149,6 @@ vect_slp_analyze_bb_1 (bb_vec_info bb_vinfo, int n_stmts, bool &fatal)\n       return false;\n     }\n \n-  if (BB_VINFO_DATAREFS (bb_vinfo).length () < 2)\n-    {\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"not vectorized: not enough data-refs in \"\n-\t\t\t \"basic block.\\n\");\n-      return false;\n-    }\n-\n   if (!vect_analyze_data_ref_accesses (bb_vinfo))\n     {\n      if (dump_enabled_p ())\n@@ -3169,9 +3160,9 @@ vect_slp_analyze_bb_1 (bb_vec_info bb_vinfo, int n_stmts, bool &fatal)\n \n   vect_slp_check_for_constructors (bb_vinfo);\n \n-  /* If there are no grouped stores in the region there is no need\n-     to continue with pattern recog as vect_analyze_slp will fail\n-     anyway.  */\n+  /* If there are no grouped stores and no constructors in the region\n+     there is no need to continue with pattern recog as vect_analyze_slp\n+     will fail anyway.  */\n   if (bb_vinfo->grouped_stores.is_empty ())\n     {\n       if (dump_enabled_p ())"}]}