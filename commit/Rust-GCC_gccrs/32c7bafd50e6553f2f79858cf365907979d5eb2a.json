{"sha": "32c7bafd50e6553f2f79858cf365907979d5eb2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJjN2JhZmQ1MGU2NTUzZjJmNzk4NThjZjM2NTkwNzk3OWQ1ZWIyYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-09T15:18:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-09T15:18:32Z"}, "message": "Add a vect_variable_length target selector\n\nThis patch adds a target selector for variable-length vectors.\nInitially it's always false, but the SVE patch provides a case\nin which it's true.\n\n2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* doc/sourcebuild.texi (vect_variable_length): Document.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_variable_length): New proc.\n\t* gcc.dg/vect/pr60482.c: XFAIL test for no epilog loop if\n\tvect_variable_length.\n\t* gcc.dg/vect/slp-reduc-6.c: XFAIL two-operation SLP if\n\tvect_variable_length.\n\t* gcc.dg/vect/vect-alias-check-5.c: XFAIL alias optimization if\n\tvect_variable_length.\n\t* gfortran.dg/vect/fast-math-mgrid-resid.f: XFAIL predictive\n\tcommoning optimization if vect_variable_length.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254595", "tree": {"sha": "0d3d1842c080a9bdb1106625b1d8df762c606ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d3d1842c080a9bdb1106625b1d8df762c606ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32c7bafd50e6553f2f79858cf365907979d5eb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c7bafd50e6553f2f79858cf365907979d5eb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c7bafd50e6553f2f79858cf365907979d5eb2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c7bafd50e6553f2f79858cf365907979d5eb2a/comments", "author": null, "committer": null, "parents": [{"sha": "b8353767564e8042ce75d6879e813ce313a0a050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8353767564e8042ce75d6879e813ce313a0a050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8353767564e8042ce75d6879e813ce313a0a050"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "0c56090da27dc0e247ca7c4f84422d000916223b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -1,3 +1,9 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* doc/sourcebuild.texi (vect_variable_length): Document.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "25e1103fd218293b5a943de98ebf51e1f39ead2d", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -1486,6 +1486,9 @@ Target prefers vectors to have an alignment greater than element\n alignment, but also allows unaligned vector accesses in some\n circumstances.\n \n+@item vect_variable_length\n+Target has variable-length vectors.\n+\n @item vect_widen_sum_hi_to_si\n Target supports a vector widening summation of @code{short} operands\n into @code{int} results, or can promote (unpack) from @code{short}"}, {"sha": "0a17dfa8593ff9ac7c59b59ae84d2a8d94b8d431", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -1,3 +1,18 @@\n+2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_variable_length): New proc.\n+\t* gcc.dg/vect/pr60482.c: XFAIL test for no epilog loop if\n+\tvect_variable_length.\n+\t* gcc.dg/vect/slp-reduc-6.c: XFAIL two-operation SLP if\n+\tvect_variable_length.\n+\t* gcc.dg/vect/vect-alias-check-5.c: XFAIL alias optimization if\n+\tvect_variable_length.\n+\t* gfortran.dg/vect/fast-math-mgrid-resid.f: XFAIL predictive\n+\tcommoning optimization if vect_variable_length.\n+\n 2017-11-09  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b07fe1ef33e523c93ba67480145326821b672c7e", "filename": "gcc/testsuite/gcc.dg/vect/pr60482.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60482.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60482.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60482.c?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -16,4 +16,6 @@ foo (double *x, int n)\n   return p;\n }\n \n-/* { dg-final { scan-tree-dump-not \"epilog loop required\" \"vect\" } } */\n+/* Until fully-masked loops are supported, we always need an epilog\n+   loop for variable-length vectors.  */\n+/* { dg-final { scan-tree-dump-not \"epilog loop required\" \"vect\" { xfail vect_variable_length } } } */"}, {"sha": "49a0ffc2168fa73546b8706f0946b523a46d6191", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-6.c?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -44,5 +44,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { xfail { vect_no_int_add || { ! { vect_unpack || vect_strided2 } } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"different interleaving chains in one node\" 1 \"vect\" { target { ! vect_no_int_add } } } } */\n+/* { dg-final { scan-tree-dump-times \"different interleaving chains in one node\" 1 \"vect\" { target { ! vect_no_int_add } xfail vect_variable_length } } } */\n "}, {"sha": "e17c7150a061152e687f9ed7b36c951c318ddf3d", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-5.c?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -15,5 +15,5 @@ f1 (struct s *a, struct s *b)\n }\n \n /* { dg-final { scan-tree-dump-times \"consider run-time aliasing\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"improved number of alias checks from 1 to 0\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"improved number of alias checks from 1 to 0\" 1 \"vect\" { xfail vect_variable_length } } } */\n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" } } */"}, {"sha": "2e0840d256b84a0192eebe44ef1b59928028e49b", "filename": "gcc/testsuite/gfortran.dg/vect/fast-math-mgrid-resid.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Ffast-math-mgrid-resid.f?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -42,5 +42,5 @@ SUBROUTINE RESID(U,V,R,N,A)\n ! vectorized loop.  If vector factor is 2, the vectorized loop can\n ! be predictive commoned, we check if predictive commoning PHI node\n ! is created with vector(2) type.\n-! { dg-final { scan-tree-dump \"Executing predictive commoning without unrolling\" \"pcom\" } }\n-! { dg-final { scan-tree-dump \"vectp_u.*__lsm.* = PHI <.*vectp_u.*__lsm\" \"pcom\" } }\n+! { dg-final { scan-tree-dump \"Executing predictive commoning without unrolling\" \"pcom\" { xfail vect_variable_length } } }\n+! { dg-final { scan-tree-dump \"vectp_u.*__lsm.* = PHI <.*vectp_u.*__lsm\" \"pcom\" { xfail vect_variable_length } } }"}, {"sha": "8d49ed2e6874c4feae5e1a37a653020dbe43334b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32c7bafd50e6553f2f79858cf365907979d5eb2a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=32c7bafd50e6553f2f79858cf365907979d5eb2a", "patch": "@@ -6714,6 +6714,12 @@ proc check_effective_target_vect_multiple_sizes { } {\n     return [expr { [llength [available_vector_sizes]] > 1 }]\n }\n \n+# Return true if variable-length vectors are supported.\n+\n+proc check_effective_target_vect_variable_length { } {\n+    return [expr { [lindex [available_vector_sizes] 0] == 0 }]\n+}\n+\n # Return 1 if the target supports vectors of 64 bits.\n \n proc check_effective_target_vect64 { } {"}]}