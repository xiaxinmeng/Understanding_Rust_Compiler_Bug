{"sha": "9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwMmVlNmE2ZjIwODZmZmZkNTQzY2RiNzg1ZDBjYWFjMDVlN2ZjYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-09-30T20:04:43Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-09-30T20:04:43Z"}, "message": "messages_members.cc (Catalog_info, Catalogs): Move...\n\n2015-09-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* config/locale/gnu/messages_members.cc (Catalog_info, Catalogs):\n\tMove...\n\t* config/locale/gnu/c++locale_internal.h: ...here in std namespace.\n\t* config/locale/gnu/c_locale.cc: Move implementation of latter here.\n\t* src/c++98/Makefile.am: Compile c++locale.cc with -fimplicit-templates.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Adjust.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r228305", "tree": {"sha": "747a44050b58bceb0ebd0ca7cae3445ec04456da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/747a44050b58bceb0ebd0ca7cae3445ec04456da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/comments", "author": null, "committer": null, "parents": [{"sha": "94829f87ca78fa846fdf1140c4a2af802488fb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94829f87ca78fa846fdf1140c4a2af802488fb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94829f87ca78fa846fdf1140c4a2af802488fb8f"}], "stats": {"total": 291, "additions": 176, "deletions": 115}, "files": [{"sha": "cc22cfa14c09d318c75dadf89c37c64baeb7b105", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -1,3 +1,14 @@\n+2015-09-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/locale/gnu/messages_members.cc (Catalog_info, Catalogs):\n+\tMove...\n+\t* config/locale/gnu/c++locale_internal.h: ...here in std namespace.\n+\t* config/locale/gnu/c_locale.cc: Move implementation of latter here.\n+\t* src/c++98/Makefile.am: Compile c++locale.cc with -fimplicit-templates.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Adjust.\n+\n 2015-09-30  Matthias Klose  <doko@ubuntu.com>\n \n \t* config/cpu/alpha, config/cpu/ia64: Remove empty directories."}, {"sha": "1b3184ac58b8e0c23739b533465a372be013f789", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -24,7 +24,7 @@ GLIBCXX_3.4 {\n     # Names inside the 'extern' block are demangled names.\n     extern \"C++\"\n     {\n-      std::[A-Z]*;\n+      std::[ABD-Z]*;\n       std::a[a-c]*;\n       std::ad[a-n]*;\n       std::ad[p-z]*;\n@@ -106,7 +106,7 @@ GLIBCXX_3.4 {\n #     std::istringstream*;\n       std::istrstream*;\n       std::i[t-z]*;\n-      std::[A-Zj-k]*;\n+      std::[j-k]*;\n #     std::length_error::l*;\n #     std::length_error::~l*;\n       std::locale::[A-Za-e]*;\n@@ -132,9 +132,8 @@ GLIBCXX_3.4 {\n #     std::logic_error::l*;\n       std::logic_error::what*;\n #     std::logic_error::~l*;\n-#     std::[A-Zm-r]*;\n-#     std::[A-Zm]*;\n-      std::[A-Z]*;\n+#     std::[m-r]*;\n+#     std::[m]*;\n       std::messages[^_]*;\n #     std::messages_byname*;\n       std::money_*;\n@@ -175,11 +174,13 @@ GLIBCXX_3.4 {\n #     std::t[i-n]*;\n       std::tr1::h[^a]*;\n       std::t[s-z]*;\n-#     std::[A-Zu-z]*;\n+#     std::[u-z]*;\n #     std::underflow_error::u*;\n #     std::underflow_error::~u*;\n       std::unexpected*;\n-      std::[A-Zv-z]*;\n+      std::valarray*;\n+      # std::vector*\n+      std::[w-z]*;\n       std::_List_node_base::hook*;\n       std::_List_node_base::swap*;\n       std::_List_node_base::unhook*;"}, {"sha": "7db354ceda2f5c986eddd791e74ae629d5b59d85", "filename": "libstdc++-v3/config/locale/gnu/c++locale_internal.h", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -36,8 +36,13 @@\n #include <cstddef>\n #include <langinfo.h>\n \n+#include <vector>\n+#include <string.h>\t// ::strdup\n+\n+#include <ext/concurrence.h>\n+\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-                                                  \n+\n extern \"C\" __typeof(nl_langinfo_l) __nl_langinfo_l;\n extern \"C\" __typeof(strcoll_l) __strcoll_l;\n extern \"C\" __typeof(strftime_l) __strftime_l;\n@@ -61,3 +66,55 @@ extern \"C\" __typeof(wctype_l) __wctype_l;\n #endif \n \n #endif // GLIBC 2.3 and later\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  struct Catalog_info\n+  {\n+    Catalog_info(messages_base::catalog __id, const char* __domain,\n+\t\t locale __loc)\n+      : _M_id(__id), _M_domain(strdup(__domain)), _M_locale(__loc)\n+    { }\n+\n+    ~Catalog_info()\n+    { free(_M_domain); }\n+\n+    messages_base::catalog _M_id;\n+    char* _M_domain;\n+    locale _M_locale;\n+\n+  private:\n+    Catalog_info(const Catalog_info&);\n+\n+    Catalog_info&\n+    operator=(const Catalog_info&);\n+  };\n+\n+  class Catalogs\n+  {\n+  public:\n+    Catalogs() : _M_catalog_counter(0) { }\n+    ~Catalogs();\n+\n+    messages_base::catalog\n+    _M_add(const char* __domain, locale __l);\n+\n+    void\n+    _M_erase(messages_base::catalog __c);\n+\n+    const Catalog_info*\n+    _M_get(messages_base::catalog __c) const;\n+\n+  private:\n+    mutable __gnu_cxx::__mutex _M_mutex;\n+    messages_base::catalog _M_catalog_counter;\n+    vector<Catalog_info*> _M_infos;\n+  };\n+\n+  Catalogs&\n+  get_catalogs();\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "0d6d20485e93483443b0fe4ae51a1be3664d54fe", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -31,9 +31,12 @@\n #include <locale>\n #include <stdexcept>\n #include <limits>\n+#include <algorithm>\n #include <langinfo.h>\n #include <bits/c++locale_internal.h>\n \n+#include <backward/auto_ptr.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -170,6 +173,85 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __changed;\n   }\n \n+  struct _CatalogIdComp\n+  {\n+    bool\n+    operator()(messages_base::catalog __cat, const Catalog_info* __info) const\n+    { return __cat < __info->_M_id; }\n+\n+    bool\n+    operator()(const Catalog_info* __info, messages_base::catalog __cat) const\n+    { return __info->_M_id < __cat; }\n+  };\n+\n+  Catalogs::~Catalogs()\n+  {\n+    for (vector<Catalog_info*>::iterator __it = _M_infos.begin();\n+\t __it != _M_infos.end(); ++__it)\n+      delete *__it;\n+  }\n+\n+  messages_base::catalog\n+  Catalogs::_M_add(const char* __domain, locale __l)\n+  {\n+    __gnu_cxx::__scoped_lock lock(_M_mutex);\n+\n+    // The counter is not likely to roll unless catalogs keep on being\n+    // opened/closed which is consider as an application mistake for the\n+    // moment.\n+    if (_M_catalog_counter == numeric_limits<messages_base::catalog>::max())\n+      return -1;\n+\n+    auto_ptr<Catalog_info> info(new Catalog_info(_M_catalog_counter++,\n+\t\t\t\t\t\t __domain, __l));\n+\n+    // Check if we managed to allocate memory for domain.\n+    if (!info->_M_domain)\n+      return -1;\n+\n+    _M_infos.push_back(info.get());\n+    return info.release()->_M_id;\n+  }\n+\n+  void\n+  Catalogs::_M_erase(messages_base::catalog __c)\n+  {\n+    __gnu_cxx::__scoped_lock lock(_M_mutex);\n+\n+    vector<Catalog_info*>::iterator __res =\n+      lower_bound(_M_infos.begin(), _M_infos.end(), __c, _CatalogIdComp());\n+    if (__res == _M_infos.end() || (*__res)->_M_id != __c)\n+      return;\n+\n+    delete *__res;\n+    _M_infos.erase(__res);\n+\n+    // Just in case closed catalog was the last open.\n+    if (__c == _M_catalog_counter - 1)\n+      --_M_catalog_counter;\n+  }\n+\n+  const Catalog_info*\n+  Catalogs::_M_get(messages_base::catalog __c) const\n+  {\n+    __gnu_cxx::__scoped_lock lock(_M_mutex);\n+\n+    vector<Catalog_info*>::const_iterator __res =\n+      lower_bound(_M_infos.begin(), _M_infos.end(), __c, _CatalogIdComp());\n+\n+    if (__res != _M_infos.end() && (*__res)->_M_id == __c)\n+      return *__res;\n+\n+    return 0;\n+  }\n+\n+  Catalogs&\n+  get_catalogs()\n+  {\n+    static Catalogs __catalogs;\n+    return __catalogs;\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "90f4b8dc5b5e0a54ad959ba0e29d6be2c23d47b8", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 5, "deletions": 107, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -31,115 +31,13 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n \n-#include <limits>\n-#include <algorithm>\n-#include <vector>\n #include <cstdlib>\t// std::free\n #include <string.h>\t// ::strdup\n \n-#include <backward/auto_ptr.h>\n-#include <ext/concurrence.h>\n-\n namespace\n {\n   using namespace std;\n \n-  typedef messages_base::catalog catalog;\n-\n-  struct Catalog_info\n-    {\n-    Catalog_info(catalog __id, const string& __domain, locale __loc)\n-      : _M_id(__id), _M_domain(__domain), _M_locale(__loc)\n-    { }\n-\n-    catalog _M_id;\n-    string _M_domain;\n-    locale _M_locale;\n-  };\n-\n-  class Catalogs\n-  {\n-  public:\n-    Catalogs() : _M_catalog_counter(0) { }\n-\n-    ~Catalogs()\n-    {\n-      for (vector<Catalog_info*>::iterator __it = _M_infos.begin();\n-\t   __it != _M_infos.end(); ++__it)\n-\tdelete *__it;\n-    }\n-\n-    catalog\n-    _M_add(const string& __domain, locale __l)\n-    {\n-      __gnu_cxx::__scoped_lock lock(_M_mutex);\n-\n-      // The counter is not likely to roll unless catalogs keep on being\n-      // opened/closed which is consider as an application mistake for the\n-      // moment.\n-      if (_M_catalog_counter == numeric_limits<catalog>::max())\n-\treturn -1;\n-\n-      std::auto_ptr<Catalog_info> info(new Catalog_info(_M_catalog_counter++,\n-\t\t\t\t\t\t\t__domain, __l));\n-      _M_infos.push_back(info.get());\n-      return info.release()->_M_id;\n-    }\n-\n-    void\n-    _M_erase(catalog __c)\n-    {\n-      __gnu_cxx::__scoped_lock lock(_M_mutex);\n-\n-      vector<Catalog_info*>::iterator __res =\n-\tlower_bound(_M_infos.begin(), _M_infos.end(), __c, _Comp());\n-      if (__res == _M_infos.end() || (*__res)->_M_id != __c)\n-\treturn;\n-\n-      delete *__res;\n-      _M_infos.erase(__res);\n-\n-      // Just in case closed catalog was the last open.\n-      if (__c == _M_catalog_counter - 1)\n-\t--_M_catalog_counter;\n-    }\n-\n-    const Catalog_info*\n-    _M_get(catalog __c) const\n-    {\n-      __gnu_cxx::__scoped_lock lock(_M_mutex);\n-\n-      vector<Catalog_info*>::const_iterator __res =\n-\tlower_bound(_M_infos.begin(), _M_infos.end(), __c, _Comp());\n-\n-      if (__res != _M_infos.end() && (*__res)->_M_id == __c)\n-\treturn *__res;\n-\n-      return 0;\n-    }\n-\n-  private:\n-    struct _Comp\n-    {\n-      bool operator()(catalog __cat, const Catalog_info* __info) const\n-      { return __cat < __info->_M_id; }\n-\n-      bool operator()(const Catalog_info* __info, catalog __cat) const\n-      { return __info->_M_id < __cat; }\n-    };\n-\n-    mutable __gnu_cxx::__mutex _M_mutex;\n-    catalog _M_catalog_counter;\n-    std::vector<Catalog_info*> _M_infos;\n-  };\n-\n-  Catalogs&\n-  get_catalogs()\n-  {\n-    static Catalogs __catalogs;\n-    return __catalogs;\n-  }\n-\n   const char*\n   get_glibc_msg(__c_locale __locale_messages __attribute__((unused)),\n \t\tconst char* __name_messages __attribute__((unused)),\n@@ -180,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bind_textdomain_codeset(__s.c_str(),\n \t  __nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n-      return get_catalogs()._M_add(__s, __l);\n+      return get_catalogs()._M_add(__s.c_str(), __l);\n     }\n \n   template<>\n@@ -202,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __dfault;\n \n       return get_glibc_msg(_M_c_locale_messages, _M_name_messages,\n-\t\t\t   __cat_info->_M_domain.c_str(),\n+\t\t\t   __cat_info->_M_domain,\n \t\t\t   __dfault.c_str());\n     }\n \n@@ -218,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bind_textdomain_codeset(__s.c_str(),\n \t  __nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n \n-      return get_catalogs()._M_add(__s, __l);\n+      return get_catalogs()._M_add(__s.c_str(), __l);\n     }\n \n   template<>\n@@ -248,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __builtin_memset(&__state, 0, sizeof(mbstate_t));\n       {\n \tconst wchar_t* __wdfault_next;\n-\tsize_t __mb_size = __wdfault.size() * __conv.max_length();;\n+\tsize_t __mb_size = __wdfault.size() * __conv.max_length();\n \tchar* __dfault =\n \t  static_cast<char*>(__builtin_alloca(sizeof(char) * (__mb_size + 1)));\n \tchar* __dfault_next;\n@@ -260,7 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// Make sure string passed to dgettext is \\0 terminated.\n \t*__dfault_next = '\\0';\n \t__translation = get_glibc_msg(_M_c_locale_messages, _M_name_messages,\n-\t\t\t\t      __cat_info->_M_domain.c_str(), __dfault);\n+\t\t\t\t      __cat_info->_M_domain, __dfault);\n \n \t// If we end up getting default value back we can simply return original\n \t// default value."}, {"sha": "c5a8866a9e766b2b7d194d7a4fec1cce506d04ed", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -155,6 +155,12 @@ vpath % $(top_srcdir)/src/c++98\n \n libc__98convenience_la_SOURCES = $(sources)\n \n+# Use special rules to compile with -fimplicit-templates.\n+c++locale.lo: c++locale.cc\n+\t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n+c++locale.o: c++locale.cc\n+\t$(CXXCOMPILE) -fimplicit-templates -c $<\n+\n if ENABLE_DUAL_ABI\n GLIBCXX_ABI_FLAGS = -D_GLIBCXX_USE_CXX11_ABI=@glibcxx_cxx98_abi@\n # Use special rules to compile with the non-default string ABI."}, {"sha": "3c3bbbd17f72f3e07ecb44fb6adaf4221cba8059", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9702ee6a6f2086fffd543cdb785d0caac05e7fcc/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=9702ee6a6f2086fffd543cdb785d0caac05e7fcc", "patch": "@@ -776,6 +776,12 @@ basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n \t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n vpath % $(top_srcdir)/src/c++98\n+\n+# Use special rules to compile with -fimplicit-templates.\n+c++locale.lo: c++locale.cc\n+\t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n+c++locale.o: c++locale.cc\n+\t$(CXXCOMPILE) -fimplicit-templates -c $<\n # Use special rules to compile with the non-default string ABI.\n @ENABLE_DUAL_ABI_TRUE@collate_members_cow.lo: collate_members_cow.cc\n @ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<"}]}