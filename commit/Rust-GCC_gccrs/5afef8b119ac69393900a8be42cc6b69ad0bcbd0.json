{"sha": "5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmZWY4YjExOWFjNjkzOTM5MDBhOGJlNDJjYzZiNjlhZDBiY2JkMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-03-21T18:21:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-03-21T18:21:39Z"}, "message": "C++: show private field accessor hints with -g and optimization (PR c++/84994)\n\ngcc/cp/ChangeLog:\n\tPR c++/84994\n\t* constexpr.c (constexpr_fn_retval): Make non-\"static\".\n\t* cp-tree.h (constexpr_fn_retval): New decl.\n\t* search.c (direct_accessor_p): Update leading comment.\n\t(reference_accessor_p): Likewise.\n\t(field_accessor_p): Replace check that function body is a\n\tRETURN_EXPR with a call to constexpr_fn_retval.  Fix\n\tindentation of \"field_type\" decl.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/84994\n\t* g++.dg/other/accessor-fixits-1.C: Move to...\n\t* g++.dg/torture/accessor-fixits-1.C: ...here.\n\t* g++.dg/other/accessor-fixits-2.C: Move to...\n\t* g++.dg/torture/accessor-fixits-2.C: ...here.\n\t* g++.dg/other/accessor-fixits-3.C: Move to...\n\t* g++.dg/torture/accessor-fixits-3.C: ...here.\n\t* g++.dg/other/accessor-fixits-4.C: Move to...\n\t* g++.dg/torture/accessor-fixits-4.C: ...here.\n\t* g++.dg/other/accessor-fixits-5.C: Move to...\n\t* g++.dg/torture/accessor-fixits-5.C: ...here.\n\t* g++.dg/torture/accessor-fixits-6.C: New testcase.\n\t* g++.dg/torture/accessor-fixits-7.C: New testcase.\n\t* g++.dg/torture/accessor-fixits-8.C: New testcase.\n\nFrom-SVN: r258731", "tree": {"sha": "48589739cf60c87d4370d731f0c5249f6d771e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48589739cf60c87d4370d731f0c5249f6d771e0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa3dd75327228f00df19070afac6a99a06b04f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3dd75327228f00df19070afac6a99a06b04f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3dd75327228f00df19070afac6a99a06b04f60"}], "stats": {"total": 127, "additions": 116, "deletions": 11}, "files": [{"sha": "c8b6b1703bd6ebba59840e879599b47da0dc6e20", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -1,3 +1,14 @@\n+2018-03-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84994\n+\t* constexpr.c (constexpr_fn_retval): Make non-\"static\".\n+\t* cp-tree.h (constexpr_fn_retval): New decl.\n+\t* search.c (direct_accessor_p): Update leading comment.\n+\t(reference_accessor_p): Likewise.\n+\t(field_accessor_p): Replace check that function body is a\n+\tRETURN_EXPR with a call to constexpr_fn_retval.  Fix\n+\tindentation of \"field_type\" decl.\n+\n 2018-03-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/84804"}, {"sha": "bebd9f5b5d0b9d43ea96037fa4a4858fe3ef720c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -657,7 +657,7 @@ get_function_named_in_call (tree t)\n    return value if suitable, error_mark_node for a statement not allowed in\n    a constexpr function, or NULL_TREE if no return value was found.  */\n \n-static tree\n+tree\n constexpr_fn_retval (tree body)\n {\n   switch (TREE_CODE (body))"}, {"sha": "d5382c2604f08eaf28644bfd33e198a81c53157f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -7424,6 +7424,7 @@ extern bool literal_type_p                      (tree);\n extern tree register_constexpr_fundef           (tree, tree);\n extern bool is_valid_constexpr_fn\t\t(tree, bool);\n extern bool check_constexpr_ctor_body           (tree, tree, bool);\n+extern tree constexpr_fn_retval\t\t(tree);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n extern bool potential_constant_expression       (tree);\n extern bool is_constant_expression (tree);"}, {"sha": "b4366102e23839ab6474efd8a8228e9f67bc1144", "filename": "gcc/cp/search.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -1657,16 +1657,15 @@ field_access_p (tree component_ref, tree field_decl, tree field_type)\n \n    Specifically, a simple accessor within struct S of the form:\n        T get_field () { return m_field; }\n-   should have a DECL_SAVED_TREE of the form:\n-       <return_expr\n+   should have a constexpr_fn_retval (saved_tree) of the form:\n \t <init_expr:T\n \t   <result_decl:T\n \t   <nop_expr:T\n \t     <component_ref:\n \t       <indirect_ref:S>\n \t\t <nop_expr:P*\n \t\t   <parm_decl (this)>\n-\t\t <field_decl (FIELD_DECL)>>>.  */\n+\t\t <field_decl (FIELD_DECL)>>>>>.  */\n \n static bool\n direct_accessor_p (tree init_expr, tree field_decl, tree field_type)\n@@ -1690,8 +1689,7 @@ direct_accessor_p (tree init_expr, tree field_decl, tree field_type)\n \n    Specifically, a simple accessor within struct S of the form:\n        T& get_field () { return m_field; }\n-   should have a DECL_SAVED_TREE of the form:\n-       <return_expr\n+   should have a constexpr_fn_retval (saved_tree) of the form:\n \t <init_expr:T&\n \t   <result_decl:T&\n \t   <nop_expr: T&\n@@ -1757,16 +1755,19 @@ field_accessor_p (tree fn, tree field_decl, bool const_p)\n   if (saved_tree == NULL_TREE)\n     return false;\n \n-  if (TREE_CODE (saved_tree) != RETURN_EXPR)\n+  /* Attempt to extract a single return value from the function,\n+     if it has one.  */\n+  tree retval = constexpr_fn_retval (saved_tree);\n+  if (retval == NULL_TREE || retval == error_mark_node)\n     return false;\n-\n-  tree init_expr = TREE_OPERAND (saved_tree, 0);\n-  if (TREE_CODE (init_expr) != INIT_EXPR)\n+  /* Require an INIT_EXPR.  */\n+  if (TREE_CODE (retval) != INIT_EXPR)\n     return false;\n+  tree init_expr = retval;\n \n   /* Determine if this is a simple accessor within struct S of the form:\n        T get_field () { return m_field; }.  */\n-   tree field_type = TREE_TYPE (field_decl);\n+  tree field_type = TREE_TYPE (field_decl);\n   if (cxx_types_compatible_p (TREE_TYPE (init_expr), field_type))\n     return direct_accessor_p (init_expr, field_decl, field_type);\n "}, {"sha": "5d25d56226a76a0d8cb0b8a954998b422894e975", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -1,3 +1,20 @@\n+2018-03-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84994\n+\t* g++.dg/other/accessor-fixits-1.C: Move to...\n+\t* g++.dg/torture/accessor-fixits-1.C: ...here.\n+\t* g++.dg/other/accessor-fixits-2.C: Move to...\n+\t* g++.dg/torture/accessor-fixits-2.C: ...here.\n+\t* g++.dg/other/accessor-fixits-3.C: Move to...\n+\t* g++.dg/torture/accessor-fixits-3.C: ...here.\n+\t* g++.dg/other/accessor-fixits-4.C: Move to...\n+\t* g++.dg/torture/accessor-fixits-4.C: ...here.\n+\t* g++.dg/other/accessor-fixits-5.C: Move to...\n+\t* g++.dg/torture/accessor-fixits-5.C: ...here.\n+\t* g++.dg/torture/accessor-fixits-6.C: New testcase.\n+\t* g++.dg/torture/accessor-fixits-7.C: New testcase.\n+\t* g++.dg/torture/accessor-fixits-8.C: New testcase.\n+\n 2018-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/tree-ssa/pr84512.c: xfail on 64-bit SPARC."}, {"sha": "fd46a522486c275780beb602e1c5033f2c2f941b", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-1.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-1.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "previous_filename": "gcc/testsuite/g++.dg/other/accessor-fixits-1.C"}, {"sha": "e1a2b7865b56c95d2533792c2261eef17fca6759", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-2.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-2.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "previous_filename": "gcc/testsuite/g++.dg/other/accessor-fixits-2.C"}, {"sha": "27d2eb4d0481db670c0716fe5c39d85935c56db7", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-3.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-3.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "previous_filename": "gcc/testsuite/g++.dg/other/accessor-fixits-3.C"}, {"sha": "c03dd4ea487e8cb7693462265105ad9a67d26d0a", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-4.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-4.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "previous_filename": "gcc/testsuite/g++.dg/other/accessor-fixits-4.C"}, {"sha": "cf72d784330c01759a8e7eca43ef834e9f55959d", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-5.C", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-5.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "previous_filename": "gcc/testsuite/g++.dg/other/accessor-fixits-5.C"}, {"sha": "ae2f180a8f2e946a4c225cc2d33fa5a3e29f9724", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-6.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-6.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/84994\n+/* Ensure that fix-it hints are offered at every optimization level, even when\n+   \"-g\" is enabled (coverage for every optimization level without -g is given\n+   by the other cases within g++.dg/torture/accessor-fixits-*.C).  */\n+// { dg-additional-options \"-g\" }\n+\n+class foo\n+{\n+public:\n+  double get_ratio() const { return m_ratio; }\n+\n+private:\n+  double m_ratio; // { dg-line field_decl }\n+};\n+\n+void test(foo *ptr)\n+{\n+  if (ptr->m_ratio >= 0.5) // { dg-error \"'double foo::m_ratio' is private within this context\" }\n+    ;\n+  // { dg-message \"declared private here\" \"\" { target *-*-* } field_decl }\n+  // { dg-message \"'double foo::m_ratio' can be accessed via 'double foo::get_ratio\\\\(\\\\) const'\" \"\" { target *-*-* } .-3 }\n+}"}, {"sha": "3b5babdc5136a52808aea18f6df9c80e3636ae66", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-7.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-7.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -0,0 +1,22 @@\n+class foo\n+{\n+public:\n+  double get_ratio() const;\n+\n+private:\n+  double m_ratio; // { dg-line field_decl }\n+};\n+\n+double\n+foo::get_ratio() const\n+{\n+  return m_ratio;\n+}\n+\n+void test(foo *ptr)\n+{\n+  if (ptr->m_ratio >= 0.5) // { dg-error \"'double foo::m_ratio' is private within this context\" }\n+    ;\n+  // { dg-message \"declared private here\" \"\" { target *-*-* } field_decl }\n+  // { dg-message \"'double foo::m_ratio' can be accessed via 'double foo::get_ratio\\\\(\\\\) const'\" \"\" { target *-*-* } .-3 }\n+}"}, {"sha": "1338b7d13498e779bccd0e4ffcd3bac5df76f413", "filename": "gcc/testsuite/g++.dg/torture/accessor-fixits-8.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afef8b119ac69393900a8be42cc6b69ad0bcbd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Faccessor-fixits-8.C?ref=5afef8b119ac69393900a8be42cc6b69ad0bcbd0", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+class t1\n+{\n+public:\n+  int get_doubled_field () const { return m_field * 2; }\n+  int get_guarded_field_1 () const { if (m_field) return m_field; else return 42; }\n+  int get_guarded_field_2 () const { return m_field ? m_field : 42; }\n+  int with_unreachable () const { __builtin_unreachable (); return m_field; }\n+  void no_return () { }\n+\n+private:\n+  int m_field; // { dg-line field_decl }\n+};\n+\n+int test (t1 *ptr)\n+{\n+  return ptr->m_field; // { dg-error \".int t1::m_field. is private within this context\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return ptr->m_field;\n+               ^~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  // { dg-message \"declared private here\" \"\" { target *-*-* } field_decl }\n+  /* { dg-begin-multiline-output \"\" }\n+   int m_field;\n+       ^~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+  /* We shouldn't issue a suggestion: none of the member functions are suitable returns.  */\n+}"}]}