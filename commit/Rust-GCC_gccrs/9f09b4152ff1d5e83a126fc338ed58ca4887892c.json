{"sha": "9f09b4152ff1d5e83a126fc338ed58ca4887892c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwOWI0MTUyZmYxZDVlODNhMTI2ZmMzMzhlZDU4Y2E0ODg3ODkyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-02T18:36:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-02T18:36:16Z"}, "message": "mips.md (*lea_high64): Change split condition to flow2_completed.\n\n\t* config/mips/mips.md (*lea_high64): Change split condition to\n\tflow2_completed.  Add a peephole2 to generate a more parallel version.\n\nFrom-SVN: r86975", "tree": {"sha": "9bc71eab4e4d1feec7cb9ae3a3c2bc86959c55c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc71eab4e4d1feec7cb9ae3a3c2bc86959c55c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f09b4152ff1d5e83a126fc338ed58ca4887892c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f09b4152ff1d5e83a126fc338ed58ca4887892c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f09b4152ff1d5e83a126fc338ed58ca4887892c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f09b4152ff1d5e83a126fc338ed58ca4887892c/comments", "author": null, "committer": null, "parents": [{"sha": "0772402279c0161fe41784911b52c77e12803c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0772402279c0161fe41784911b52c77e12803c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0772402279c0161fe41784911b52c77e12803c42"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "f3bd2d417eafacca9c1e76b424d61151effdf046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f09b4152ff1d5e83a126fc338ed58ca4887892c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f09b4152ff1d5e83a126fc338ed58ca4887892c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f09b4152ff1d5e83a126fc338ed58ca4887892c", "patch": "@@ -1,3 +1,8 @@\n+2004-09-02  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (*lea_high64): Change split condition to\n+\tflow2_completed.  Add a peephole2 to generate a more parallel version.\n+\n 2004-09-02  Jan Hubicka  <jh@suse.cz>\n \n \t* gimplify.c (gimplify_compound_lval): Move \"stack\" varray out of"}, {"sha": "9c0b1ccfa6cbf98fdd54da1081a136d0e0678ed9", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f09b4152ff1d5e83a126fc338ed58ca4887892c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f09b4152ff1d5e83a126fc338ed58ca4887892c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9f09b4152ff1d5e83a126fc338ed58ca4887892c", "patch": "@@ -3103,12 +3103,15 @@ beq\\t%2,%.,1b\\;\\\n ;;\tdsll\top0,op0,16\n ;;\tdaddiu\top0,op0,%hi(op1)\n ;;\tdsll\top0,op0,16\n+;;\n+;; The split is deferred until after flow2 to allow the peephole2 below\n+;; to take effect.\n (define_insn_and_split \"*lea_high64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(high:DI (match_operand:DI 1 \"general_symbolic_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& flow2_completed\"\n   [(set (match_dup 0) (high:DI (match_dup 2)))\n    (set (match_dup 0) (lo_sum:DI (match_dup 0) (match_dup 2)))\n    (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 16)))\n@@ -3120,6 +3123,29 @@ beq\\t%2,%.,1b\\;\\\n }\n   [(set_attr \"length\" \"20\")])\n \n+;; Use a scratch register to reduce the latency of the above pattern\n+;; on superscalar machines.  The optimized sequence is:\n+;;\n+;;\tlui\top1,%highest(op2)\n+;;\tlui\top0,%hi(op2)\n+;;\tdaddiu\top1,op1,%higher(op2)\n+;;\tdsll32\top1,op1,0\n+;;\tdaddu\top1,op1,op0\n+(define_peephole2\n+  [(match_scratch:DI 0 \"d\")\n+   (set (match_operand:DI 1 \"register_operand\")\n+\t(high:DI (match_operand:DI 2 \"general_symbolic_operand\")))]\n+  \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS\"\n+  [(set (match_dup 1) (high:DI (match_dup 3)))\n+   (set (match_dup 0) (high:DI (match_dup 4)))\n+   (set (match_dup 1) (lo_sum:DI (match_dup 1) (match_dup 3)))\n+   (set (match_dup 1) (ashift:DI (match_dup 1) (const_int 32)))\n+   (set (match_dup 1) (plus:DI (match_dup 1) (match_dup 0)))]\n+{\n+  operands[3] = mips_unspec_address (operands[2], SYMBOL_64_HIGH);\n+  operands[4] = mips_unspec_address (operands[2], SYMBOL_64_LOW);\n+})\n+\n ;; On most targets, the expansion of (lo_sum (high X) X) for a 64-bit\n ;; SYMBOL_GENERAL X will take 6 cycles.  This next pattern allows combine\n ;; to merge the HIGH and LO_SUM parts of a move if the HIGH part is only"}]}