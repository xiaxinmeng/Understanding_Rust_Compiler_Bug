{"sha": "327b1ba4bd731c191f167d74ec3766939ab923de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3YjFiYTRiZDczMWMxOTFmMTY3ZDc0ZWMzNzY2OTM5YWI5MjNkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T14:22:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T14:22:24Z"}, "message": "2013-04-24  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* gnat_ugn.texi: Add description of '--help' and '--version'\n\toptions for ASIS tools: gnatelim, gnatmetric, gnatstub, gnatpp.\n\n2013-04-24  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_rm.texi: Minor syntax fix.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Add extra comments on\n\twhat and why is being analyzed. Remove the decoration of renamings as\n\tthis simply falls out of the general analysis mechanism.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Explain_Redundancy): New routine.\n\t(Resolve_Equality_Op): Place the error concerning a redundant\n\tcomparison to True at the \"=\". Try to explain the nature of the\n\tredundant True.\n\n2013-04-24  Javier Miranda  <miranda@adacore.com>\n\n\n\t* checks.adb, exp_ch6.adb (Install_Null_Excluding_Check): No\n\tcheck in interface thunks since it is performed at the caller\n\tside.\n\t(Expand_Simple_Function_Return): No accessibility check\n\tneeded in thunks since the check is done by the target routine.\n\n2013-04-24  Vincent Celier  <celier@adacore.com>\n\n\t* xref_lib.adb (Add_Entity): Use the canonical file names\n\tso that source file names with capital letters are found on\n\tplatforms where file names are case insensitive.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* par-ch4.adb (P_Name): Continue to parse the name extension when the\n\tconstruct is attribute Loop_Entry. Do not convert the attribute\n\treference into an indexed component when there is at least one\n\texpression / range following 'Loop_Entry.\n\n2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Contains_Enabled_Pragmas): New routine.\n\t(Process_PPCs): Generate procedure _Postconditions\n\tonly when the context has invariants or predicates or enabled\n\taspects/pragmas.\n\nFrom-SVN: r198236", "tree": {"sha": "c51d1d5e40608d6c062f1aca184d31dab70d2f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c51d1d5e40608d6c062f1aca184d31dab70d2f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/327b1ba4bd731c191f167d74ec3766939ab923de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327b1ba4bd731c191f167d74ec3766939ab923de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327b1ba4bd731c191f167d74ec3766939ab923de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327b1ba4bd731c191f167d74ec3766939ab923de/comments", "author": null, "committer": null, "parents": [{"sha": "d436b30d99371fec40a60e617f86e3ede5701ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d436b30d99371fec40a60e617f86e3ede5701ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d436b30d99371fec40a60e617f86e3ede5701ac2"}], "stats": {"total": 279, "additions": 239, "deletions": 40}, "files": [{"sha": "1efb8b9682f7ca18751c1e7396d05ea242ddf8f6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -1,3 +1,54 @@\n+2013-04-24  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* gnat_ugn.texi: Add description of '--help' and '--version'\n+\toptions for ASIS tools: gnatelim, gnatmetric, gnatstub, gnatpp.\n+\n+2013-04-24  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_rm.texi: Minor syntax fix.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Add extra comments on\n+\twhat and why is being analyzed. Remove the decoration of renamings as\n+\tthis simply falls out of the general analysis mechanism.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Explain_Redundancy): New routine.\n+\t(Resolve_Equality_Op): Place the error concerning a redundant\n+\tcomparison to True at the \"=\". Try to explain the nature of the\n+\tredundant True.\n+\n+2013-04-24  Javier Miranda  <miranda@adacore.com>\n+\n+\n+\t* checks.adb, exp_ch6.adb (Install_Null_Excluding_Check): No\n+\tcheck in interface thunks since it is performed at the caller\n+\tside.\n+\t(Expand_Simple_Function_Return): No accessibility check\n+\tneeded in thunks since the check is done by the target routine.\n+\n+2013-04-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* xref_lib.adb (Add_Entity): Use the canonical file names\n+\tso that source file names with capital letters are found on\n+\tplatforms where file names are case insensitive.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* par-ch4.adb (P_Name): Continue to parse the name extension when the\n+\tconstruct is attribute Loop_Entry. Do not convert the attribute\n+\treference into an indexed component when there is at least one\n+\texpression / range following 'Loop_Entry.\n+\n+2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Contains_Enabled_Pragmas): New routine.\n+\t(Process_PPCs): Generate procedure _Postconditions\n+\tonly when the context has invariants or predicates or enabled\n+\taspects/pragmas.\n+\n 2013-04-24  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-socket.adb (Host_Entry): Introduce intermediate copy of"}, {"sha": "c20621862abd7b375dd36ead556cff75cc19e1ed", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -985,37 +985,32 @@ package body Exp_Attr is\n \n       Rewrite (Attr, New_Reference_To (Temp_Id, Loc));\n \n-      --  The analysis of the conditional block takes care of the constant\n-      --  declaration.\n-\n       Installed := Current_Scope = Loop_Id;\n \n+      --  Depending on the pracement of attribute 'Loop_Entry relative to the\n+      --  associated loop, ensure the proper visibility for analysis.\n+\n       if not Installed then\n          Push_Scope (Scope (Loop_Id));\n       end if;\n \n+      --  The analysis of the conditional block takes care of the constant\n+      --  declaration.\n+\n       if Present (Result) then\n          Rewrite (Loop_Stmt, Result);\n          Analyze (Loop_Stmt);\n+\n+      --  The conditional block was analyzed when a previous 'Loop_Entry was\n+      --  expanded. There is no point in reanalyzing the block, simply analyze\n+      --  the declaration of the constant.\n+\n       else\n          Analyze (Temp_Decl);\n       end if;\n \n       Analyze (Attr);\n \n-      --  Patch up a renaming of a 'Loop_Entry attribute. This case may arise\n-      --  when the attribute is used as the name in an Ada 2012 iterator loop.\n-\n-      if Nkind (Parent (Attr)) = N_Object_Renaming_Declaration then\n-         declare\n-            Mark : constant Node_Id := Subtype_Mark (Parent (Attr));\n-\n-         begin\n-            Rewrite (Mark, New_Reference_To (Etype (Temp_Id), Sloc (Mark)));\n-            Analyze (Mark);\n-         end;\n-      end if;\n-\n       if not Installed then\n          Pop_Scope;\n       end if;"}, {"sha": "2d162ef9abd2c182c1d74df58722b501f9db28bd", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -5135,9 +5135,9 @@ compiles with the Rational APEX compiler, even when the code includes non-\n conforming Ada constructs.  The profile enables the following three pragmas:\n \n @itemize @bullet\n-pragma Implicit_Packing;\n-pragma Overriding_Renamings;\n-pragma Use_VADS_Size;\n+@item pragma Implicit_Packing\n+@item pragma Overriding_Renamings\n+@item pragma Use_VADS_Size\n @end itemize\n \n @noindent"}, {"sha": "97aebf1c5f94d36aa21240c82afff487cc9a9f8e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -10910,6 +10910,14 @@ Ada 2005 mode etc.\n \n @table @option\n @c !sort!\n+@item --version\n+@cindex @option{--version} @command{gnatelim}\n+Display Copyright and version, then exit disregarding all other options.\n+\n+@item --help\n+@cindex @option{--help} @command{gnatelim}\n+Display usage, then exit disregarding all other options.\n+\n @item ^-files^/FILES^=@var{filename}\n @cindex @option{^-files^/FILES^} (@code{gnatelim})\n Take the argument source files from the specified file. This file should be an\n@@ -14207,6 +14215,14 @@ with @option{^-pipe^/STANDARD_OUTPUT^} option.\n The additional @command{gnatpp} switches are defined in this subsection.\n \n @table @option\n+@item --version\n+@cindex @option{--version} @command{gnatpp}\n+Display Copyright and version, then exit disregarding all other options.\n+\n+@item --help\n+@cindex @option{--help} @command{gnatpp}\n+Display usage, then exit disregarding all other options.\n+\n @item ^-files @var{filename}^/FILES=@var{filename}^\n @cindex @option{^-files^/FILES^} (@code{gnatpp})\n Take the argument source files from the specified file. This file should be an\n@@ -15657,6 +15673,14 @@ Report control fan-in coupling\n Additional @command{gnatmetric} switches are as follows:\n \n @table @option\n+@item --version\n+@cindex @option{--version} @command{gnatmetric}\n+Display Copyright and version, then exit disregarding all other options.\n+\n+@item --help\n+@cindex @option{--help} @command{gnatmetric}\n+Display usage, then exit disregarding all other options.\n+\n @item ^-files @var{filename}^/FILES=@var{filename}^\n @cindex @option{^-files^/FILES^} (@code{gnatmetric})\n Take the argument source files from the specified file. This file should be an\n@@ -18476,6 +18500,14 @@ is an optional sequence of switches as described in the next section\n @table @option\n @c !sort!\n \n+@item --version\n+@cindex @option{--version} @command{gnatstub}\n+Display Copyright and version, then exit disregarding all other options.\n+\n+@item --help\n+@cindex @option{--help} @command{gnatstub}\n+Display usage, then exit disregarding all other options.\n+\n @item ^-f^/FULL^\n @cindex @option{^-f^/FULL^} (@command{gnatstub})\n If the destination directory already contains a file with the name of the"}, {"sha": "f0cfa35f3c172654119d03b99e0d6157fc55445f", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -509,16 +509,25 @@ package body Ch4 is\n               and then not\n                 Is_Parameterless_Attribute (Get_Attribute_Id (Attr_Name))\n             then\n-               Set_Expressions (Name_Node, New_List);\n+               --  Attribute Loop_Entry has no effect on the name extension\n+               --  parsing logic, as if the attribute never existed in the\n+               --  source. Continue parsing the subsequent expressions or\n+               --  ranges.\n+\n+               if Attr_Name = Name_Loop_Entry then\n+                  Scan; -- past left paren\n+                  goto Scan_Name_Extension_Left_Paren;\n \n                --  Attribute Update contains an array or record association\n                --  list which provides new values for various components or\n                --  elements. The list is parsed as an aggregate.\n \n-               if Attr_Name = Name_Update then\n+               elsif Attr_Name = Name_Update then\n+                  Set_Expressions (Name_Node, New_List);\n                   Append (P_Aggregate, Expressions (Name_Node));\n \n                else\n+                  Set_Expressions (Name_Node, New_List);\n                   Scan; -- past left paren\n \n                   loop\n@@ -695,10 +704,20 @@ package body Ch4 is\n \n          elsif not Comma_Present then\n             T_Right_Paren;\n-            Prefix_Node := Name_Node;\n-            Name_Node := New_Node (N_Indexed_Component, Sloc (Prefix_Node));\n-            Set_Prefix (Name_Node, Prefix_Node);\n-            Set_Expressions (Name_Node, Arg_List);\n+\n+            --  Do not convert Prefix'Loop_Entry (Expr1, ..., ExprN) into an\n+            --  indexed component now. Let the analysis determine whether the\n+            --  attribute is legal and perform the transformation if needed.\n+\n+            if Attr_Name = Name_Loop_Entry then\n+               Set_Expressions (Name_Node, Arg_List);\n+            else\n+               Prefix_Node := Name_Node;\n+               Name_Node := New_Node (N_Indexed_Component, Sloc (Prefix_Node));\n+               Set_Prefix (Name_Node, Prefix_Node);\n+               Set_Expressions (Name_Node, Arg_List);\n+            end if;\n+\n             goto Scan_Name_Extension;\n          end if;\n "}, {"sha": "1d8ac8f8be29b77eefbcb9619ad4d4ec74a5b997", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -11196,6 +11196,10 @@ package body Sem_Ch6 is\n       --  under the same visibility conditions as for other invariant checks,\n       --  the type invariant must be applied to the returned value.\n \n+      function Contains_Enabled_Pragmas (L : List_Id) return Boolean;\n+      --  Determine whether list L has at least one enabled pragma. The routine\n+      --  ignores nother non-pragma elements.\n+\n       procedure Expand_Contract_Cases (CCs : Node_Id; Subp_Id : Entity_Id);\n       --  Given pragma Contract_Cases CCs, create the circuitry needed to\n       --  evaluate case guards and trigger consequence expressions. Subp_Id\n@@ -11263,6 +11267,26 @@ package body Sem_Ch6 is\n          end if;\n       end Check_Access_Invariants;\n \n+      ------------------------------\n+      -- Contains_Enabled_Pragmas --\n+      ------------------------------\n+\n+      function Contains_Enabled_Pragmas (L : List_Id) return Boolean is\n+         Prag : Node_Id;\n+\n+      begin\n+         Prag := First (L);\n+         while Present (Prag) loop\n+            if Nkind (Prag) = N_Pragma and then Is_Ignored (Prag) then\n+               return False;\n+            end if;\n+\n+            Next (Prag);\n+         end loop;\n+\n+         return True;\n+      end Contains_Enabled_Pragmas;\n+\n       ---------------------------\n       -- Expand_Contract_Cases --\n       ---------------------------\n@@ -12252,8 +12276,11 @@ package body Sem_Ch6 is\n       --  If we had any postconditions and expansion is enabled, or if the\n       --  subprogram has invariants, then build the _Postconditions procedure.\n \n-      if (Present (Plist) or else Invariants_Or_Predicates_Present)\n-        and then Expander_Active\n+      if Expander_Active\n+        and then\n+          (Invariants_Or_Predicates_Present\n+             or else\n+               (Present (Plist) and then Contains_Enabled_Pragmas (Plist)))\n       then\n          if No (Plist) then\n             Plist := Empty_List;"}, {"sha": "b4a654a24cc4350b9bb40e214b731992d3dae503", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -6821,6 +6821,11 @@ package body Sem_Res is\n       --  impose an expected type (as can be the case in an equality operation)\n       --  the expression must be rejected.\n \n+      procedure Explain_Redundancy (N : Node_Id);\n+      --  Attempt to explain the nature of a redundant comparison with True. If\n+      --  the expression N is too complex, this routine issues a general error\n+      --  message.\n+\n       function Find_Unique_Access_Type return Entity_Id;\n       --  In the case of allocators and access attributes, the context must\n       --  provide an indication of the specific access type to be used. If\n@@ -6850,6 +6855,72 @@ package body Sem_Res is\n          end if;\n       end Check_If_Expression;\n \n+      ------------------------\n+      -- Explain_Redundancy --\n+      ------------------------\n+\n+      procedure Explain_Redundancy (N : Node_Id) is\n+         Error  : Name_Id;\n+         Val    : Node_Id;\n+         Val_Id : Entity_Id;\n+\n+      begin\n+         Val := N;\n+\n+         --  Strip the operand down to an entity\n+\n+         loop\n+            if Nkind (Val) = N_Selected_Component then\n+               Val := Selector_Name (Val);\n+            else\n+               exit;\n+            end if;\n+         end loop;\n+\n+         --  The construct denotes an entity\n+\n+         if Is_Entity_Name (Val) and then Present (Entity (Val)) then\n+            Val_Id := Entity (Val);\n+\n+            --  Do not generate an error message when the comparison is done\n+            --  against the enumeration literal Standard.True.\n+\n+            if Ekind (Val_Id) /= E_Enumeration_Literal then\n+\n+               --  Build a customized error message\n+\n+               Name_Len := 0;\n+               Add_Str_To_Name_Buffer (\"?r?\");\n+\n+               if Ekind (Val_Id) = E_Component then\n+                  Add_Str_To_Name_Buffer (\"component \");\n+\n+               elsif Ekind (Val_Id) = E_Constant then\n+                  Add_Str_To_Name_Buffer (\"constant \");\n+\n+               elsif Ekind (Val_Id) = E_Discriminant then\n+                  Add_Str_To_Name_Buffer (\"discriminant \");\n+\n+               elsif Is_Formal (Val_Id) then\n+                  Add_Str_To_Name_Buffer (\"parameter \");\n+\n+               elsif Ekind (Val_Id) = E_Variable then\n+                  Add_Str_To_Name_Buffer (\"variable \");\n+               end if;\n+\n+               Add_Str_To_Name_Buffer (\"& is always True!\");\n+               Error := Name_Find;\n+\n+               Error_Msg_NE (Get_Name_String (Error), Val, Val_Id);\n+            end if;\n+\n+         --  The construct is too complex to disect, issue a general message\n+\n+         else\n+            Error_Msg_N (\"?r?expression is always True!\", Val);\n+         end if;\n+      end Explain_Redundancy;\n+\n       -----------------------------\n       -- Find_Unique_Access_Type --\n       -----------------------------\n@@ -6979,12 +7050,13 @@ package body Sem_Res is\n \n          if Warn_On_Redundant_Constructs\n            and then Comes_From_Source (N)\n+           and then Comes_From_Source (R)\n            and then Is_Entity_Name (R)\n            and then Entity (R) = Standard_True\n-           and then Comes_From_Source (R)\n          then\n             Error_Msg_N -- CODEFIX\n-              (\"?r?comparison with True is redundant!\", R);\n+              (\"?r?comparison with True is redundant!\", N);\n+            Explain_Redundancy (Original_Node (R));\n          end if;\n \n          Check_Unset_Reference (L);"}, {"sha": "db83c94e2b2ff8d491c3b356dba9b6df5a79577b", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327b1ba4bd731c191f167d74ec3766939ab923de/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=327b1ba4bd731c191f167d74ec3766939ab923de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -272,18 +272,21 @@ package body Xref_Lib is\n          end if;\n       end if;\n \n-      File_Ref :=\n-        Add_To_Xref_File\n-          (Entity (File_Start .. Line_Start - 1), Visited => True);\n-      Pattern.File_Ref := File_Ref;\n+      declare\n+         File_Name : String := Entity (File_Start .. Line_Start - 1);\n+      begin\n+         Osint.Canonical_Case_File_Name (File_Name);\n+         File_Ref := Add_To_Xref_File (File_Name, Visited => True);\n+         Pattern.File_Ref := File_Ref;\n \n-      Add_Line (Pattern.File_Ref, Line_Num, Col_Num);\n+         Add_Line (Pattern.File_Ref, Line_Num, Col_Num);\n \n-      File_Ref :=\n-        Add_To_Xref_File\n-          (ALI_File_Name (Entity (File_Start .. Line_Start - 1)),\n-           Visited      => False,\n-           Emit_Warning => True);\n+         File_Ref :=\n+           Add_To_Xref_File\n+             (ALI_File_Name (File_Name),\n+              Visited      => False,\n+              Emit_Warning => True);\n+      end;\n    end Add_Entity;\n \n    -------------------"}]}