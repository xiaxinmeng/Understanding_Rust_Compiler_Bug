{"sha": "b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIzYjY3MmU4ZDUwM2RkZDAyN2E2MTgwN2UzY2M1ZWE5YWFmMmE0Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:52:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:52:42Z"}, "message": "tree.h (host_integerp, [...]): Delete.\n\ngcc/\n\t* tree.h (host_integerp, tree_low_cst): Delete.\n\t* tree.c (host_integerp, tree_low_cst): Delete.\n\nFrom-SVN: r204963", "tree": {"sha": "1e97001d3e31548fe90361c2b839af2a63bb08b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e97001d3e31548fe90361c2b839af2a63bb08b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "386b1f1f416c9da018d47ccd371494b3a3a32870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b1f1f416c9da018d47ccd371494b3a3a32870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386b1f1f416c9da018d47ccd371494b3a3a32870"}], "stats": {"total": 49, "additions": 5, "deletions": 44}, "files": [{"sha": "6768fec5b193e24f383be725f0a0fbe3c1788420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* tree.h (host_integerp, tree_low_cst): Delete.\n+\t* tree.c (host_integerp, tree_low_cst): Delete.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expr.h: Update comments to refer to tree_to_[su]hwi rather"}, {"sha": "836db518b4510a8bfab0b28e8e9cdde766b9a823", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "patch": "@@ -6970,26 +6970,6 @@ tree_int_cst_compare (const_tree t1, const_tree t2)\n     return 0;\n }\n \n-/* Return 1 if T is an INTEGER_CST that can be manipulated efficiently on\n-   the host.  If POS is zero, the value can be represented in a single\n-   HOST_WIDE_INT.  If POS is nonzero, the value must be non-negative and can\n-   be represented in a single unsigned HOST_WIDE_INT.  */\n-\n-int\n-host_integerp (const_tree t, int pos)\n-{\n-  if (t == NULL_TREE)\n-    return 0;\n-\n-  return (TREE_CODE (t) == INTEGER_CST\n-\t  && ((TREE_INT_CST_HIGH (t) == 0\n-\t       && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) >= 0)\n-\t      || (! pos && TREE_INT_CST_HIGH (t) == -1\n-\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0\n-\t\t  && !TYPE_UNSIGNED (TREE_TYPE (t)))\n-\t      || (pos && TREE_INT_CST_HIGH (t) == 0)));\n-}\n-\n /* Return true if T is an INTEGER_CST whose numerical value (extended\n    according to TYPE_UNSIGNED) fits in a signed HOST_WIDE_INT.  */\n \n@@ -7016,17 +6996,6 @@ tree_fits_uhwi_p (const_tree t)\n \t  && TREE_INT_CST_HIGH (t) == 0);\n }\n \n-/* Return the HOST_WIDE_INT least significant bits of T if it is an\n-   INTEGER_CST and there is no overflow.  POS is nonzero if the result must\n-   be non-negative.  We must be able to satisfy the above conditions.  */\n-\n-HOST_WIDE_INT\n-tree_low_cst (const_tree t, int pos)\n-{\n-  gcc_assert (host_integerp (t, pos));\n-  return TREE_INT_CST_LOW (t);\n-}\n-\n /* T is an INTEGER_CST whose numerical value (extended according to\n    TYPE_UNSIGNED) fits in a signed HOST_WIDE_INT.  Return that\n    HOST_WIDE_INT.  */"}, {"sha": "2ac3480fc6a47ded92c68f6a08a6947b78c6b2be", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b23b672e8d503ddd027a61807e3cc5ea9aaf2a4b", "patch": "@@ -3657,11 +3657,6 @@ extern int attribute_list_contained (const_tree, const_tree);\n extern int tree_int_cst_equal (const_tree, const_tree);\n extern int tree_int_cst_lt (const_tree, const_tree);\n extern int tree_int_cst_compare (const_tree, const_tree);\n-extern int host_integerp (const_tree, int)\n-#ifndef ENABLE_TREE_CHECKING\n-  ATTRIBUTE_PURE /* host_integerp is pure only when checking is disabled.  */\n-#endif\n-  ;\n extern bool tree_fits_shwi_p (const_tree)\n #ifndef ENABLE_TREE_CHECKING\n   ATTRIBUTE_PURE /* tree_fits_shwi_p is pure only when checking is disabled.  */\n@@ -3672,17 +3667,9 @@ extern bool tree_fits_uhwi_p (const_tree)\n   ATTRIBUTE_PURE /* tree_fits_uhwi_p is pure only when checking is disabled.  */\n #endif\n   ;\n-extern HOST_WIDE_INT tree_low_cst (const_tree, int);\n extern HOST_WIDE_INT tree_to_shwi (const_tree);\n extern HOST_WIDE_INT tree_to_uhwi (const_tree);\n #if !defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 4003)\n-extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT\n-tree_low_cst (const_tree t, int pos)\n-{\n-  gcc_assert (host_integerp (t, pos));\n-  return TREE_INT_CST_LOW (t);\n-}\n-\n extern inline __attribute__ ((__gnu_inline__)) HOST_WIDE_INT\n tree_to_shwi (const_tree t)\n {"}]}