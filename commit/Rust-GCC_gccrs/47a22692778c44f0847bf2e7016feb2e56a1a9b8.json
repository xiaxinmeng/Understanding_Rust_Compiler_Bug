{"sha": "47a22692778c44f0847bf2e7016feb2e56a1a9b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhMjI2OTI3NzhjNDRmMDg0N2JmMmU3MDE2ZmViMmU1NmExYTliOA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-29T20:49:42Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-10-29T20:49:42Z"}, "message": "multilib\n\nFrom-SVN: r13074", "tree": {"sha": "12dc4f71b2796c6f365d025844e347ae5a9ddd53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12dc4f71b2796c6f365d025844e347ae5a9ddd53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47a22692778c44f0847bf2e7016feb2e56a1a9b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a22692778c44f0847bf2e7016feb2e56a1a9b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a22692778c44f0847bf2e7016feb2e56a1a9b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a22692778c44f0847bf2e7016feb2e56a1a9b8/comments", "author": null, "committer": null, "parents": [{"sha": "1a4fa807f16ece6b5e334155f01348139564f9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4fa807f16ece6b5e334155f01348139564f9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4fa807f16ece6b5e334155f01348139564f9e7"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "8b936ceb8933b509225339a5d1af51346809f29f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a22692778c44f0847bf2e7016feb2e56a1a9b8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a22692778c44f0847bf2e7016feb2e56a1a9b8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=47a22692778c44f0847bf2e7016feb2e56a1a9b8", "patch": "@@ -603,6 +603,9 @@ CONFIG_H =\n RTL_H = rtl.h rtl.def machmode.h machmode.def\n TREE_H = tree.h real.h tree.def machmode.h machmode.def\n BYTECODE_H = bytecode.h bc-emit.h bc-optab.h\n+\n+# \"t\" or nothing, for building multilibbed versions of, say, crtbegin.o.\n+T =\n \f\n # Language makefile fragments.\n \n@@ -995,6 +998,7 @@ stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n \t    RANLIB=\"$(RANLIB)\" RANLIB_TEST=\"$(RANLIB_TEST)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t    LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS) $${flags}\" \\\n+\t    MULTILIB_CFLAGS=\"$${flags}\" \\\n \t    LIBGCC1=\"$(LIBGCC1)\" LIBGCC2=\"$(LIBGCC2)\" \\\n \t    dir=\"$${dir}\" stmp-multilib-sub; \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n@@ -1003,7 +1007,11 @@ stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n \n # Subroutine of stmp-multilib so make -n works.\n stmp-multilib-sub:\n-\trm -f $(dir)/libgcc.a $(LIBGCC2)\n+\trm -f $(LIBGCC2)\n+\tif [ -d $(dir) ]; then \\\n+\t  cd $(dir); \\\n+\t  rm -f libgcc.a $(EXTRA_MULTILIB_PARTS); \\\n+\tfi\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n@@ -1032,6 +1040,13 @@ stmp-multilib-sub:\n \tif $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi\n \tif [ -d $(dir) ]; then true; else mkdir $(dir); fi\n \tmv tmplibgcc.a $(dir)/libgcc.a\n+\tfor f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n+\t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n+\t    AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n+\t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n+\t    MULTILIB_CFLAGS=\"$(MULTILIB_CFLAGS)\" T=\"t\" t$${f}; \\\n+\t  mv t$${f} $(dir)/$${f}; \\\n+\tfi; done\n \n objc-runtime: libobjc.a\n \n@@ -1062,18 +1077,15 @@ sublibobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready\n # Compile two additional files that are linked with every program\n # linked using GCC on systems using COFF or ELF, for the sake of C++\n # constructors.\n-crtbegin.o: stamp-crt ; @true\n-crtend.o: stamp-crt; @true\n-\n-stamp-crt:\tcrtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n+$(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -DCRT_BEGIN -finhibit-size-directive -fno-inline-functions \\\n-\t  -g0 -c $(srcdir)/crtstuff.c\n-\tmv crtstuff$(objext) crtbegin$(objext)\n+\t  $(MULTILIB_CFLAGS) -finhibit-size-directive -fno-inline-functions \\\n+\t  -g0 -c $(srcdir)/crtstuff.c -DCRT_BEGIN -o $(T)crtbegin$(objext)\n+\n+$(T)crtend.o: crtstuff.c $(GCC_PASSES) $(CONFIG_H) gbl-ctors.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -DCRT_END -finhibit-size-directive -fno-inline-functions \\\n-\t  -g0 -c $(srcdir)/crtstuff.c -o crtend$(objext)\n-\ttouch stamp-crt\n+\t  $(MULTILIB_CFLAGS) -finhibit-size-directive -fno-inline-functions \\\n+\t  -g0 -c $(srcdir)/crtstuff.c -DCRT_END -o $(T)crtend$(objext)\n \n # On some systems we also want to install versions of these files\n # compiled using PIC for use in shared libraries.\n@@ -2239,8 +2251,10 @@ install-multilib: stmp-multilib installdirs\n \tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n \t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n \t  if [ -d $(libsubdir)/$${dir} ]; then true; else mkdir $(libsubdir)/$${dir}; fi; \\\n-\t  rm -f $(libsubdir)/$${dir}/libgcc.a; \\\n-\t  $(INSTALL_DATA) $${dir}/libgcc.a $(libsubdir)/$${dir}/libgcc.a; \\\n+\t  for f in libgcc.a $(EXTRA_MULTILIB_PARTS); do \\\n+\t    rm -f $(libsubdir)/$${dir}/$${f}; \\\n+\t    $(INSTALL_DATA) $${dir}/$${f} $(libsubdir)/$${dir}/$${f}; \\\n+\t  done; \\\n \t  if $(RANLIB_TEST); then \\\n \t    (cd $(libsubdir)/$${dir}; $(RANLIB) libgcc.a); else true; fi; \\\n \t  chmod a-x $(libsubdir)/$${dir}/libgcc.a; \\"}]}