{"sha": "42c7b8075de9ae4425e3065c2bb07764f636aadc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjN2I4MDc1ZGU5YWU0NDI1ZTMwNjVjMmJiMDc3NjRmNjM2YWFkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-10T22:53:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-10T22:53:45Z"}, "message": "class.c (finish_struct_1): Use OVL_CURRENT on TREE_VEC_ELT.\n\n\t* class.c (finish_struct_1): Use OVL_CURRENT on TREE_VEC_ELT.\n\t* decl2.c (constructor_name_full): Likewise.\n\t* tree.c (mapcar): Add OVERLOAD support.\n\t* init.c (resolve_offset_ref): We must use basetype_path before we\n\tdestroy it with a call to convert_pointer_to.\n\nFrom-SVN: r19656", "tree": {"sha": "8bbfdafa3182cb814da4233f2db184d2d0875b40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bbfdafa3182cb814da4233f2db184d2d0875b40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42c7b8075de9ae4425e3065c2bb07764f636aadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c7b8075de9ae4425e3065c2bb07764f636aadc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c7b8075de9ae4425e3065c2bb07764f636aadc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c7b8075de9ae4425e3065c2bb07764f636aadc/comments", "author": null, "committer": null, "parents": [{"sha": "e9b4fabf5c41bdec0be36e37df4ff8abb4e8c346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b4fabf5c41bdec0be36e37df4ff8abb4e8c346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b4fabf5c41bdec0be36e37df4ff8abb4e8c346"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "61ea2355fe45c74b20f531d0e7b7d7f8b123586c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -1,3 +1,15 @@\n+Sun May 10 22:48:22 1998  H.J. Lu  (hjl@gnu.org)\n+\n+\t* class.c (finish_struct_1): Use OVL_CURRENT on TREE_VEC_ELT.\n+\t* decl2.c (constructor_name_full): Likewise.\n+\n+Sun May 10 22:48:12 1998  Mike Stump  <mrs@wrs.com>\n+\n+\t* tree.c (mapcar): Add OVERLOAD support.\n+\n+\t* init.c (resolve_offset_ref): We must use basetype_path before we\n+\tdestroy it with a call to convert_pointer_to.\n+\n Sat May  9 14:44:37 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (currently_open_class): New fn."}, {"sha": "9ba28245940d64ea9a4985df4c09452d71f81a31", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -3705,7 +3705,8 @@ finish_struct_1 (t, warn_anon)\n \tname = DECL_NAME (fdecl);\n \n \tfor (; i < n_methods; i++)\n-\t  if (DECL_NAME (TREE_VEC_ELT (method_vec, i)) == name)\n+\t  if (DECL_NAME (OVL_CURRENT (TREE_VEC_ELT (method_vec, i)))\n+\t\t== name)\n \t    {\n \t      cp_error (\"cannot adjust access to `%#D' in `%#T'\", fdecl, t);\n \t      cp_error_at (\"  because of local method `%#D' with same name\",\n@@ -3821,7 +3822,8 @@ finish_struct_1 (t, warn_anon)\n \t    continue;\n \n \t  for (; i < n_methods; ++i)\n-\t    if (DECL_NAME (TREE_VEC_ELT (method_vec, i)) == name)\n+\t    if (DECL_NAME (OVL_CURRENT (TREE_VEC_ELT (method_vec, i)))\n+\t\t== name)\n \t      {\n \t\tcp_error_at (\"data member `%#D' conflicts with\", x);\n \t\tcp_error_at (\"function member `%#D'\","}, {"sha": "662ba152f969bd863333c894ae30e9aeff5171d7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -1097,6 +1097,16 @@ struct lang_decl\n   ((TREE_CODE (NODE) == FUNCTION_DECL && DECL_FUNCTION_MEMBER_P (NODE)) \\\n    ? DECL_CLASS_CONTEXT (NODE) : DECL_CONTEXT (NODE))\n \n+/* 1 iff NODE has namespace scope, including the global namespace.  */\n+#define DECL_NAMESPACE_SCOPE(NODE) \\\n+  (DECL_CONTEXT (NODE) == NULL_TREE \\\n+   || TREE_CODE (DECL_CONTEXT (NODE)) == NAMESPACE_DECL)\n+\n+/* 1 iff NODE is a class member.  */\n+#define DECL_CLASS_SCOPE(NODE) \\\n+  (DECL_CONTEXT (NODE) \\\n+   && TREE_CODE_CLASS (TREE_CODE (DECL_CONTEXT (NODE))) == 't')\n+\n /* For a NAMESPACE_DECL: the list of using namespace directives\n    The PURPOSE is the used namespace, the value is the namespace\n    that is the common ancestor. */"}, {"sha": "927efb89563cb253ea64952864f8f4e27a7dce66", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -1982,7 +1982,7 @@ constructor_name_full (thing)\n   else if (IS_AGGR_TYPE_CODE (TREE_CODE (thing)))\n     {\n       if (TYPE_WAS_ANONYMOUS (thing) && TYPE_HAS_CONSTRUCTOR (thing))\n-\tthing = DECL_NAME (TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (thing), 0));\n+\tthing = DECL_NAME (OVL_CURRENT (TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (thing), 0)));\n       else\n \tthing = TYPE_NAME (thing);\n     }"}, {"sha": "d7a94aecefc8e32d535dbf8fb536d44c10e0618d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -1870,8 +1870,10 @@ resolve_offset_ref (exp)\n \t  error_not_base_type (basetype, TREE_TYPE (TREE_TYPE (base)));\n \t  return error_mark_node;\n \t}\n-      addr = convert_pointer_to (basetype, base);\n+      /* Kludge: we need to use basetype_path now, because\n+\t convert_pointer_to will bash it.  */\n       access = compute_access (basetype_path, member);\n+      addr = convert_pointer_to (basetype, base);\n       if (access == access_public_node)\n \treturn build (COMPONENT_REF, TREE_TYPE (member),\n \t\t      build_indirect_ref (addr, NULL_PTR), member);"}, {"sha": "2d07eee7d314c9bc5672f851e24f2002a6d25d09", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c7b8075de9ae4425e3065c2bb07764f636aadc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=42c7b8075de9ae4425e3065c2bb07764f636aadc", "patch": "@@ -1590,6 +1590,15 @@ mapcar (t, func)\n \treturn t;\n       }\n \n+    case OVERLOAD:\n+      {\n+\ttree chain = OVL_CHAIN (t);\n+\tt = copy_node (t);\n+\tOVL_FUNCTION (t) = mapcar (OVL_FUNCTION (t), func);\n+\tOVL_CHAIN (t) = mapcar (chain, func);\n+\treturn t;\n+      }\n+\n     case TREE_VEC:\n       {\n \tint len = TREE_VEC_LENGTH (t);"}]}