{"sha": "1dd2c57b1854636d5efa6f93bb92366181146e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkMmM1N2IxODU0NjM2ZDVlZmE2ZjkzYmI5MjM2NjE4MTE0NmUyMQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2009-11-25T04:45:26Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2009-11-25T04:45:26Z"}, "message": "* functions.texi: Rebuild.\n\nFrom-SVN: r154546", "tree": {"sha": "8bf5287197e81348803a71ef1e92fabcbb3270e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf5287197e81348803a71ef1e92fabcbb3270e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dd2c57b1854636d5efa6f93bb92366181146e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd2c57b1854636d5efa6f93bb92366181146e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd2c57b1854636d5efa6f93bb92366181146e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd2c57b1854636d5efa6f93bb92366181146e21/comments", "author": null, "committer": null, "parents": [{"sha": "f8766c931de89b94b86a41ac9706e21b6d0807fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8766c931de89b94b86a41ac9706e21b6d0807fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8766c931de89b94b86a41ac9706e21b6d0807fc"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "1c72218c5b9500115e7eac7f8af198238cb9b85b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd2c57b1854636d5efa6f93bb92366181146e21/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd2c57b1854636d5efa6f93bb92366181146e21/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=1dd2c57b1854636d5efa6f93bb92366181146e21", "patch": "@@ -1,3 +1,7 @@\n+2009-11-25  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* functions.texi: Rebuild.\n+\n 2009-11-25  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t    Ben Elliston  <bje@au.ibm.com>\n "}, {"sha": "72ca56cbd44dcd192ff59afdb14116fcf99a668f", "filename": "libiberty/functions.texi", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dd2c57b1854636d5efa6f93bb92366181146e21/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dd2c57b1854636d5efa6f93bb92366181146e21/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=1dd2c57b1854636d5efa6f93bb92366181146e21", "patch": "@@ -1,7 +1,7 @@\n @c Automatically generated from *.c and others (the comments before\n @c each entry tell you which file and where in that file).  DO NOT EDIT!\n @c Edit the *.c files, configure with --enable-maintainer-mode,\n-@c and let gather-docs build you a new copy.\n+@c run 'make stamp-functions' and gather-docs will build a new copy.\n \n @c safe-ctype.c:25\n @defvr Extension HOST_CHARSET\n@@ -104,7 +104,7 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n-@c argv.c:124\n+@c argv.c:142\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n Given a pointer to a string, parse the string extracting fields\n@@ -145,7 +145,7 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n \n @end deftypefn\n \n-@c choose-temp.c:42\n+@c choose-temp.c:46\n @deftypefn Extension char* choose_temp_base (void)\n \n Return a prefix for temporary file names or @code{NULL} if unable to\n@@ -198,6 +198,19 @@ protocol for the @samp{qCRC} command.  In order to get the same\n results as gdb for a block of data, you must pass the first CRC\n parameter as @code{0xffffffff}.\n \n+This CRC can be specified as:\n+\n+  Width  : 32\n+  Poly   : 0x04c11db7\n+  Init   : parameter, typically 0xffffffff\n+  RefIn  : false\n+  RefOut : false\n+  XorOut : 0\n+\n+This differs from the \"standard\" CRC-32 algorithm in that the values\n+are not reflected, and there is no final XOR value.  These differences\n+make it easy to compose the values of multiple blocks.\n+\n @end deftypefn\n \n @c argv.c:52\n@@ -229,7 +242,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:348\n+@c argv.c:361\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual\n@@ -617,7 +630,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:163\n+@c make-temp-file.c:168\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -1502,7 +1515,7 @@ does the return value.  The third argument is unused in @libib{}.\n \n @end deftypefn\n \n-@c argv.c:293\n+@c argv.c:306\n @deftypefn Extension int writeargv (const char **@var{argv}, FILE *@var{file})\n \n Write each member of ARGV, handling all necessary quoting, to the file"}]}