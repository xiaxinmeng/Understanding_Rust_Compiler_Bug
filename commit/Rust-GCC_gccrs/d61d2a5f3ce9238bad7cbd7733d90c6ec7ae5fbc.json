{"sha": "d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYxZDJhNWYzY2U5MjM4YmFkN2NiZDc3MzNkOTBjNmVjN2FlNWZiYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-14T13:15:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-14T13:31:07Z"}, "message": "c++: Fix erroneous parm comparison logic [PR 98372]\n\nI flubbed an application of De Morgan's law.  Let's just express the\nlogic directly and let the compiler figure it out.  This bug made it\nlook like pr52830 was fixed, but it is not.\n\n\tPR c++/98372\n\tgcc/cp/\n\t* tree.c (cp_tree_equal): Correct map_context logic.\n\tgcc/testsuite/\n\t* g++.dg/cpp0x/constexpr-52830.C: Restore dg-ice\n\t* g++.dg/template/pr98372.C: New.", "tree": {"sha": "46002f9934d03b658a4c3ab577d774ad73a6c0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46002f9934d03b658a4c3ab577d774ad73a6c0f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a4adcf2b6ded2fea97195c715757df61a23395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a4adcf2b6ded2fea97195c715757df61a23395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a4adcf2b6ded2fea97195c715757df61a23395"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "3a9a86de34a05c1708275df2d8a40f48e4cac1a8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "patch": "@@ -3841,8 +3841,8 @@ cp_tree_equal (tree t1, tree t2)\n \t  /* Module duplicate checking can have t1 = new, t2 =\n \t     existing, and they should be considered matching at this\n \t     point.  */\n-\t  && (DECL_CONTEXT (t1) != map_context_from\n-\t      && DECL_CONTEXT (t2) != map_context_to))\n+\t  && !(DECL_CONTEXT (t1) == map_context_from\n+\t       && DECL_CONTEXT (t2) == map_context_to))\n \t/* When comparing hash table entries, only an exact match is\n \t   good enough; we don't want to replace 'this' with the\n \t   version from another function.  But be more flexible"}, {"sha": "2c9d2f9b329eafb5c2f8f0ca51a2f3d903c6a05c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52830.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C?ref=d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "patch": "@@ -1,5 +1,6 @@\n // PR c++/52830\n // { dg-do compile { target c++11 } }\n+// { dg-ice \"comptypes\" }\n \n template<bool b> struct eif { typedef void type; };\n template<>       struct eif<false> {};"}, {"sha": "f1e8b0f332355356a330aeade3880e544064d816", "filename": "gcc/testsuite/g++.dg/template/pr98372.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98372.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98372.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr98372.C?ref=d61d2a5f3ce9238bad7cbd7733d90c6ec7ae5fbc", "patch": "@@ -0,0 +1,28 @@\n+// PR 98372 ICE due to incorrect type compare\n+// { dg-do compile { target c++11 } }\n+\n+template <typename _Tp> using remove_pointer_t = typename _Tp ::type;\n+template <bool> struct enable_if;\n+template <bool _Cond, typename>\n+using enable_if_t = typename enable_if<_Cond>::type;\n+template <typename> bool is_convertible_v;\n+template <typename, unsigned long = 0> class Span;\n+template <typename T, unsigned long> class Span {\n+  using element_type = T;\n+  template <unsigned long N>\n+  Span(element_type (&arr)[N],\n+       enable_if_t<is_convertible_v<remove_pointer_t<decltype(data(arr))>>,\n+                   decltype(nullptr)>);\n+};\n+template <typename T> class Span<T> {\n+  using element_type = T;\n+  template <unsigned long N>\n+  Span(element_type (&arr)[N],\n+       enable_if_t<is_convertible_v<remove_pointer_t<decltype(data(arr))>>,\n+                   decltype(nullptr)>);\n+};\n+\n+struct aaa\n+{\n+  Span<char> data0;\n+};"}]}