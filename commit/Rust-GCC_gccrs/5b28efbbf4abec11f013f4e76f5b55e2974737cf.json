{"sha": "5b28efbbf4abec11f013f4e76f5b55e2974737cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyOGVmYmJmNGFiZWMxMWYwMTNmNGU3NmY1YjU1ZTI5NzQ3MzdjZg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-09-10T14:38:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-09-10T14:38:56Z"}, "message": "Make canonical_va_list_type more strict\n\n2016-09-10  Tom de Vries  <tom@codesourcery.com>\n\n\tPR C/71602\n\t* builtins.c (std_canonical_va_list_type): Strictly return non-null for\n\tva_list type only.\n\t* config/i386/i386.c (ix86_canonical_va_list_type): Same.\n\t* gimplify.c (gimplify_va_arg_expr): Handle &va_list.\n\n\t* c-common.c (build_va_arg): Handle more strict\n\ttargetm.canonical_va_list_type.  Replace first argument type error with\n\tassert.\n\n\t* c-c++-common/va-arg-va-list-type.c: New test.\n\nFrom-SVN: r240072", "tree": {"sha": "3c42070a9bfa92bf3029b74813fd60d1dd925ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c42070a9bfa92bf3029b74813fd60d1dd925ccc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b28efbbf4abec11f013f4e76f5b55e2974737cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b28efbbf4abec11f013f4e76f5b55e2974737cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b28efbbf4abec11f013f4e76f5b55e2974737cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b28efbbf4abec11f013f4e76f5b55e2974737cf/comments", "author": null, "committer": null, "parents": [{"sha": "af4b8a523322d6100b52d41ad12d7b602d01331b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4b8a523322d6100b52d41ad12d7b602d01331b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4b8a523322d6100b52d41ad12d7b602d01331b"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "3a0057ef2b57174467059e842c632fcb802089da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -1,3 +1,11 @@\n+2016-09-10  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR C/71602\n+\t* builtins.c (std_canonical_va_list_type): Strictly return non-null for\n+\tva_list type only.\n+\t* config/i386/i386.c (ix86_canonical_va_list_type): Same.\n+\t* gimplify.c (gimplify_va_arg_expr): Handle &va_list.\n+\n 2016-09-09  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR rtl-optimization/77289"}, {"sha": "e779c71ba4076d566626aba0b3f4f73996f76525", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -4087,10 +4087,6 @@ std_canonical_va_list_type (tree type)\n {\n   tree wtype, htype;\n \n-  if (INDIRECT_REF_P (type))\n-    type = TREE_TYPE (type);\n-  else if (POINTER_TYPE_P (type) && POINTER_TYPE_P (TREE_TYPE (type)))\n-    type = TREE_TYPE (type);\n   wtype = va_list_type_node;\n   htype = type;\n   /* Treat structure va_list types.  */"}, {"sha": "635e981f4a5320fd64d9cd9acd04791dd0354193", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -1,3 +1,10 @@\n+2016-09-10  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR C/71602\n+\t* c-common.c (build_va_arg): Handle more strict\n+\ttargetm.canonical_va_list_type.  Replace first argument type error with\n+\tassert.\n+\n 2016-09-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/77520"}, {"sha": "16f6548259632edaf0ee725ad56d8c27df978567", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -5864,20 +5864,11 @@ build_va_arg (location_t loc, tree expr, tree type)\n     {\n       /* Case 1: Not an array type.  */\n \n-      /* Take the address, to get '&ap'.  */\n+      /* Take the address, to get '&ap'.  Note that &ap is not a va_list\n+\t type.  */\n       mark_addressable (expr);\n       expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (expr)), expr);\n \n-      /* Verify that &ap is still recognized as having va_list type.  */\n-      tree canon_expr_type\n-\t= targetm.canonical_va_list_type (TREE_TYPE (expr));\n-      if (canon_expr_type == NULL_TREE)\n-\t{\n-\t  error_at (loc,\n-\t\t    \"first argument to %<va_arg%> not of type %<va_list%>\");\n-\t  return error_mark_node;\n-\t}\n-\n       return build_va_arg_1 (loc, type, expr);\n     }\n \n@@ -5944,12 +5935,7 @@ build_va_arg (location_t loc, tree expr, tree type)\n       /* Verify that &ap is still recognized as having va_list type.  */\n       tree canon_expr_type\n \t= targetm.canonical_va_list_type (TREE_TYPE (expr));\n-      if (canon_expr_type == NULL_TREE)\n-\t{\n-\t  error_at (loc,\n-\t\t    \"first argument to %<va_arg%> not of type %<va_list%>\");\n-\t  return error_mark_node;\n-\t}\n+      gcc_assert (canon_expr_type != NULL_TREE);\n     }\n   else\n     {"}, {"sha": "051fddb253a786ddb39a76865391ac8ab7f60378", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -48562,14 +48562,6 @@ ix86_fn_abi_va_list (tree fndecl)\n static tree\n ix86_canonical_va_list_type (tree type)\n {\n-  /* Resolve references and pointers to va_list type.  */\n-  if (TREE_CODE (type) == MEM_REF)\n-    type = TREE_TYPE (type);\n-  else if (POINTER_TYPE_P (type) && POINTER_TYPE_P (TREE_TYPE(type)))\n-    type = TREE_TYPE (type);\n-  else if (POINTER_TYPE_P (type) && TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE)\n-    type = TREE_TYPE (type);\n-\n   if (TARGET_64BIT)\n     {\n       if (lookup_attribute (\"ms_abi va_list\", TYPE_ATTRIBUTES (type)))"}, {"sha": "e378ed0d1cbb0e6ef6cd20476d48c801f3254cad", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -11990,6 +11990,11 @@ gimplify_va_arg_expr (tree *expr_p, gimple_seq *pre_p,\n   if (have_va_type == error_mark_node)\n     return GS_ERROR;\n   have_va_type = targetm.canonical_va_list_type (have_va_type);\n+  if (have_va_type == NULL_TREE\n+      && TREE_CODE (valist) == ADDR_EXPR)\n+    /* Handle 'Case 1: Not an array type' from c-common.c/build_va_arg.  */\n+    have_va_type\n+      = targetm.canonical_va_list_type (TREE_TYPE (TREE_TYPE (valist)));\n   gcc_assert (have_va_type != NULL_TREE);\n \n   /* Generate a diagnostic for requesting data of a type that cannot"}, {"sha": "ee50f3d287e4a256230ff04d77ea9f7fc9893343", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -1,3 +1,8 @@\n+2016-09-10  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR C/71602\n+\t* c-c++-common/va-arg-va-list-type.c: New test.\n+\n 2016-09-09  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR rtl-optimization/77289"}, {"sha": "cdd97cfb037a1954efd4cfcfa22296398ac07f23", "filename": "gcc/testsuite/c-c++-common/va-arg-va-list-type.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fva-arg-va-list-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b28efbbf4abec11f013f4e76f5b55e2974737cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fva-arg-va-list-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fva-arg-va-list-type.c?ref=5b28efbbf4abec11f013f4e76f5b55e2974737cf", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+__builtin_va_list *pap;\n+\n+void\n+fn1 (void)\n+{\n+  __builtin_va_arg (pap, double); /* { dg-error \"first argument to 'va_arg' not of type 'va_list'\" } */\n+}"}]}