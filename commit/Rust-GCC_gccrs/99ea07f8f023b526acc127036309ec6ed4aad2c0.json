{"sha": "99ea07f8f023b526acc127036309ec6ed4aad2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllYTA3ZjhmMDIzYjUyNmFjYzEyNzAzNjMwOWVjNmVkNGFhZDJjMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-01T09:20:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-01T09:20:32Z"}, "message": "invoke.texi (fno-inline): Clarify documentation.\n\n2012-02-01  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (fno-inline): Clarify documentation.\n\t(finline-small-functions): Likewise.\n\t(finline-functions): Likewise.\n\t* common.opt (finline): Adjust comment and documentation.\n\t(finline-small-functions): Clarify documentation.\n\t(finline-functions): Likewise.\n\t(finline-functions-called-once): Likewise.\n\nFrom-SVN: r183792", "tree": {"sha": "569a7239350db03c992e307a8a1cd77ccbc08694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/569a7239350db03c992e307a8a1cd77ccbc08694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99ea07f8f023b526acc127036309ec6ed4aad2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ea07f8f023b526acc127036309ec6ed4aad2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ea07f8f023b526acc127036309ec6ed4aad2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ea07f8f023b526acc127036309ec6ed4aad2c0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3db684fb8962ab3ac3144ea860858b280519d39c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db684fb8962ab3ac3144ea860858b280519d39c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db684fb8962ab3ac3144ea860858b280519d39c"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "32a86f0ea06a0ab1423a1914bf5eb3247084a448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99ea07f8f023b526acc127036309ec6ed4aad2c0", "patch": "@@ -1,3 +1,13 @@\n+2012-02-01  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (fno-inline): Clarify documentation.\n+\t(finline-small-functions): Likewise.\n+\t(finline-functions): Likewise.\n+\t* common.opt (finline): Adjust comment and documentation.\n+\t(finline-small-functions): Clarify documentation.\n+\t(finline-functions): Likewise.\n+\t(finline-functions-called-once): Likewise.\n+\n 2012-02-01  Tristan Gingold  <gingold@adacore.com>\n \n \t* c-typeck.c (composite_type): Keep mode for pointers."}, {"sha": "984825dab4d3d152bdebb5ad78393b31012f7810", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=99ea07f8f023b526acc127036309ec6ed4aad2c0", "patch": "@@ -1245,26 +1245,23 @@ findirect-inlining\n Common Report Var(flag_indirect_inlining)\n Perform indirect inlining\n \n-; Nonzero means that functions declared `inline' will be treated\n-; as `static'.  Prevents generation of zillions of copies of unused\n-; static inline functions; instead, `inlines' are written out\n-; only when actually used.  Used in conjunction with -g.  Also\n-; does the right thing with #pragma interface.\n+; General flag to enable inlining.  Specifying -fno-inline will disable\n+; all inlining apart from always-inline functions.\n finline\n Common Report Var(flag_no_inline,0) Init(0)\n-Pay attention to the \\\"inline\\\" keyword\n+Enable inlining of function declared \\\"inline\\\", disabling disables all inlining\n \n finline-small-functions\n Common Report Var(flag_inline_small_functions) Optimization\n-Integrate simple functions into their callers when code size is known to not growth\n+Integrate functions into their callers when code size is known not to grow\n \n finline-functions\n Common Report Var(flag_inline_functions) Optimization\n-Integrate simple functions into their callers\n+Integrate functions not declared \\\"inline\\\" into their callers when profitable\n \n finline-functions-called-once\n Common Report Var(flag_inline_functions_called_once) Optimization\n-Integrate functions called once into their callers\n+Integrate functions only required by their single caller\n \n finline-limit-\n Common RejectNegative Joined Alias(finline-limit=)"}, {"sha": "9eb9d32f88d50c9442f9cdac4da1495035daba47", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ea07f8f023b526acc127036309ec6ed4aad2c0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=99ea07f8f023b526acc127036309ec6ed4aad2c0", "patch": "@@ -6335,16 +6335,20 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fno-inline\n @opindex fno-inline\n-Don't pay attention to the @code{inline} keyword.  Normally this option\n-is used to keep the compiler from expanding any functions inline.\n-Note that if you are not optimizing, no functions can be expanded inline.\n+Do not expand any functions inline apart from those marked with\n+the @code{always_inline} attribute.  This is the default when not\n+optimizing.\n+\n+Single functions can be exempted from inlining by marking them\n+with the @code{noinline} attribute.\n \n @item -finline-small-functions\n @opindex finline-small-functions\n Integrate functions into their callers when their body is smaller than expected\n function call code (so overall size of program gets smaller).  The compiler\n heuristically decides which functions are simple enough to be worth integrating\n-in this way.\n+in this way.  This inlining applies to all functions, even those not declared\n+inline.\n \n Enabled at level @option{-O2}.\n \n@@ -6359,9 +6363,9 @@ Enabled at level @option{-O2}.\n \n @item -finline-functions\n @opindex finline-functions\n-Integrate all simple functions into their callers.  The compiler\n-heuristically decides which functions are simple enough to be worth\n-integrating in this way.\n+Consider all functions for inlining, even if they are not declared inline.\n+The compiler heuristically decides which functions are worth integrating\n+in this way.\n \n If all calls to a given function are integrated, and the function is\n declared @code{static}, then the function is normally not output as"}]}