{"sha": "0da300cde35adbc97e9c2825a9490890cf21f25e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhMzAwY2RlMzVhZGJjOTdlOWMyODI1YTk0OTA4OTBjZjIxZjI1ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-06-09T16:48:47Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-06-09T16:48:47Z"}, "message": "c-decl.c (grokdeclarator): Added 'deprecated_state' argument.\n\n\t* c-decl.c (grokdeclarator): Added 'deprecated_state' argument.\n\t(deprecated_state): Removed.\n\t(start_decl): Update.\n\t(enum deprecated_states): Moved earlier.\n\t(groktypename): Update.\n\t(push_parm_decl): Likewise.\n\t(grokfield): Likewise.\n\t(start_function): Likewise.\n\nFrom-SVN: r125593", "tree": {"sha": "591ca950f643ab4da8f42acabedeb8e34ecc3e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/591ca950f643ab4da8f42acabedeb8e34ecc3e96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0da300cde35adbc97e9c2825a9490890cf21f25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da300cde35adbc97e9c2825a9490890cf21f25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da300cde35adbc97e9c2825a9490890cf21f25e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da300cde35adbc97e9c2825a9490890cf21f25e/comments", "author": null, "committer": null, "parents": [{"sha": "9c4ed267d69057cf5307b896a9466daf3e55f5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4ed267d69057cf5307b896a9466daf3e55f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4ed267d69057cf5307b896a9466daf3e55f5d5"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "ab0c2259876dbfcae881326367c6626c77dc4517", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da300cde35adbc97e9c2825a9490890cf21f25e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da300cde35adbc97e9c2825a9490890cf21f25e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0da300cde35adbc97e9c2825a9490890cf21f25e", "patch": "@@ -1,3 +1,14 @@\n+2007-06-09  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-decl.c (grokdeclarator): Added 'deprecated_state' argument.\n+\t(deprecated_state): Removed.\n+\t(start_decl): Update.\n+\t(enum deprecated_states): Moved earlier.\n+\t(groktypename): Update.\n+\t(push_parm_decl): Likewise.\n+\t(grokfield): Likewise.\n+\t(start_function): Likewise.\n+\n 2007-06-09  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/32169"}, {"sha": "ea05852396627ca6f89dbdf89c78cbecbbc2f4e2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0da300cde35adbc97e9c2825a9490890cf21f25e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0da300cde35adbc97e9c2825a9490890cf21f25e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0da300cde35adbc97e9c2825a9490890cf21f25e", "patch": "@@ -70,6 +70,16 @@ enum decl_context\n   FIELD,\t\t\t/* Declaration inside struct or union */\n   TYPENAME};\t\t\t/* Typename (inside cast or sizeof)  */\n \n+/* States indicating how grokdeclarator() should handle declspecs marked\n+   with __attribute__((deprecated)).  An object declared as\n+   __attribute__((deprecated)) suppresses warnings of uses of other\n+   deprecated items.  */\n+\n+enum deprecated_states {\n+  DEPRECATED_NORMAL,\n+  DEPRECATED_SUPPRESS\n+};\n+\n \f\n /* Nonzero if we have seen an invalid cross reference\n    to a struct, union, or enum, but not yet printed the message.  */\n@@ -398,7 +408,8 @@ static tree lookup_name_in_scope (tree, struct c_scope *);\n static tree c_make_fname_decl (tree, int);\n static tree grokdeclarator (const struct c_declarator *,\n \t\t\t    struct c_declspecs *,\n-\t\t\t    enum decl_context, bool, tree *);\n+\t\t\t    enum decl_context, bool, tree *,\n+\t\t\t    enum deprecated_states);\n static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n \f\n@@ -427,17 +438,6 @@ add_stmt (tree t)\n   return t;\n }\n \f\n-/* States indicating how grokdeclarator() should handle declspecs marked\n-   with __attribute__((deprecated)).  An object declared as\n-   __attribute__((deprecated)) suppresses warnings of uses of other\n-   deprecated items.  */\n-\n-enum deprecated_states {\n-  DEPRECATED_NORMAL,\n-  DEPRECATED_SUPPRESS\n-};\n-\n-static enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n \n void\n c_print_identifier (FILE *file, tree node, int indent)\n@@ -3142,7 +3142,7 @@ groktypename (struct c_type_name *type_name)\n   type_name->specs->attrs = NULL_TREE;\n \n   type = grokdeclarator (type_name->declarator, type_name->specs, TYPENAME,\n-\t\t\t false, NULL);\n+\t\t\t false, NULL, DEPRECATED_NORMAL);\n \n   /* Apply attributes.  */\n   decl_attributes (&type, attrs, 0);\n@@ -3171,19 +3171,19 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n {\n   tree decl;\n   tree tem;\n+  enum deprecated_states deprecated_state = DEPRECATED_NORMAL;\n \n   /* An object declared as __attribute__((deprecated)) suppresses\n      warnings of uses of other deprecated items.  */\n   if (lookup_attribute (\"deprecated\", attributes))\n     deprecated_state = DEPRECATED_SUPPRESS;\n \n   decl = grokdeclarator (declarator, declspecs,\n-\t\t\t NORMAL, initialized, NULL);\n+\t\t\t NORMAL, initialized, NULL,\n+\t\t\t deprecated_state);\n   if (!decl)\n     return 0;\n \n-  deprecated_state = DEPRECATED_NORMAL;\n-\n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n       && MAIN_NAME_P (DECL_NAME (decl)))\n     warning (OPT_Wmain, \"%q+D is usually a function\", decl);\n@@ -3669,7 +3669,7 @@ tree\n grokparm (const struct c_parm *parm)\n {\n   tree decl = grokdeclarator (parm->declarator, parm->specs, PARM, false,\n-\t\t\t      NULL);\n+\t\t\t      NULL, DEPRECATED_NORMAL);\n \n   decl_attributes (&decl, parm->attrs, 0);\n \n@@ -3684,7 +3684,8 @@ push_parm_decl (const struct c_parm *parm)\n {\n   tree decl;\n \n-  decl = grokdeclarator (parm->declarator, parm->specs, PARM, false, NULL);\n+  decl = grokdeclarator (parm->declarator, parm->specs, PARM, false, NULL,\n+\t\t\t DEPRECATED_NORMAL);\n   decl_attributes (&decl, parm->attrs, 0);\n \n   decl = pushdecl (decl);\n@@ -3957,6 +3958,8 @@ warn_variable_length_array (const char *name, tree size)\n    INITIALIZED is true if the decl has an initializer.\n    WIDTH is non-NULL for bit-fields, and is a pointer to an INTEGER_CST node\n    representing the width of the bit-field.\n+   DEPRECATED_STATE is a deprecated_states value indicating whether\n+   deprecation warnings should be suppressed.\n \n    In the TYPENAME case, DECLARATOR is really an absolute declarator.\n    It may also be so in the PARM case, for a prototype where the\n@@ -3968,7 +3971,8 @@ warn_variable_length_array (const char *name, tree size)\n static tree\n grokdeclarator (const struct c_declarator *declarator,\n \t\tstruct c_declspecs *declspecs,\n-\t\tenum decl_context decl_context, bool initialized, tree *width)\n+\t\tenum decl_context decl_context, bool initialized, tree *width,\n+\t\tenum deprecated_states deprecated_state)\n {\n   tree type = declspecs->type;\n   bool threadp = declspecs->thread_p;\n@@ -5445,7 +5449,7 @@ grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,\n-\t\t\t  width ? &width : NULL);\n+\t\t\t  width ? &width : NULL, DEPRECATED_NORMAL);\n \n   finish_decl (value, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n@@ -6085,7 +6089,8 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n      error message in c_finish_bc_stmt.  */\n   c_break_label = c_cont_label = size_zero_node;\n \n-  decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, true, NULL);\n+  decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, true, NULL,\n+\t\t\t  DEPRECATED_NORMAL);\n \n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */"}]}