{"sha": "2350455936313427a68eb1e0245a5e49d5ea8165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM1MDQ1NTkzNjMxMzQyN2E2OGViMWUwMjQ1YTVlNDlkNWVhODE2NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-07-27T07:40:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-07-27T07:40:25Z"}, "message": "tree-tailcall.c (decrease_profile): New function.\n\n\t* tree-tailcall.c (decrease_profile): New function.\n\t(eliminate_tail_call): Use it.\n\n\t* inliner-1.c: Add cleanup of dumps.\n\t* val-prof-*.c: Likewise.\n\t* update-tailcall.c: New.\n\nFrom-SVN: r102416", "tree": {"sha": "27bc6922d5fcba18b1774d3f3530db164e793e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27bc6922d5fcba18b1774d3f3530db164e793e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2350455936313427a68eb1e0245a5e49d5ea8165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2350455936313427a68eb1e0245a5e49d5ea8165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2350455936313427a68eb1e0245a5e49d5ea8165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2350455936313427a68eb1e0245a5e49d5ea8165/comments", "author": null, "committer": null, "parents": [{"sha": "57a737092259093219f2f5bb95e3f70151a8f1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a737092259093219f2f5bb95e3f70151a8f1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a737092259093219f2f5bb95e3f70151a8f1dc"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "f5627878c70d114b0058df7cdcaa9aa2087933c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -1,5 +1,8 @@\n 2005-07-27  Jan Hubicka  <jh@suse.cz>\n \n+\t* tree-tailcall.c (decrease_profile): New function.\n+\t(eliminate_tail_call): Use it.\n+\n \t* cgraphunit.c (cgraph_function_and_variable_visibility): Set\n \tvisibility flags correctly in whole program mode.\n "}, {"sha": "a874b2ad4c5c0a2775a36283625f83b4e442f08c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -1,3 +1,9 @@\n+2005-07-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* inliner-1.c: Add cleanup of dumps.\n+\t* val-prof-*.c: Likewise.\n+\t* update-tailcall.c: New.\n+\n 2005-07-26  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 22591"}, {"sha": "b27b4fdc81bc468f5851893a5430f2750b80f807", "filename": "gcc/testsuite/gcc.dg/tree-prof/inliner-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -35,3 +35,4 @@ main ()\n    declaration or other apperances of the string in dump.  */\n /* { dg-final-use { scan-tree-dump \"cold_function ..;\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"hot_function ..;\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "32ad34857b56d0a92536c71a5cd7c16329c2b0ee", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-tailcall.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-tailcall.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O2 -fdump-tree-tailcall -fdump-tree-optimized\" } */\n+__attribute__ ((noinline))\n+int factorial(int x)\n+{\n+   if (x == 1)\n+     return 1;\n+   else\n+     return x*factorial(--x);\n+}\n+int gbl;\n+int\n+main()\n+{\n+   gbl = factorial(100);\n+   return 0;\n+}\n+/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"tailc\"} } */\n+/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"tailc\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "dfe994ffef9bd114a22f702d8800504133267d00", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -18,3 +18,5 @@ main ()\n /* { dg-final-use { scan-tree-dump \"Div.mod by constant n=257 transformation on insn\" \"tree_profile\"} } */\n /* { dg-final-use { scan-tree-dump \"if \\\\(n != 257\\\\)\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "49a98e35958cd319b669f322d1b38253d14d1b14", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -28,3 +28,5 @@ main ()\n    didn't get optimized out.  */\n /* { dg-final-use { scan-tree-dump \"n \\\\+ \\\\-1\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "f233d670cc2eae9c3e1f6d587e325ed6a0f96737", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -28,3 +28,5 @@ main ()\n    didn't get optimized out.  */\n /* { dg-final-use { scan-tree-dump \"if \\\\(n \\\\>\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "86418e05e3af25ac1ab7b994e76d2f548affd126", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -28,3 +28,5 @@ main ()\n    didn't get optimized out.  */\n /* { dg-final-use { scan-tree-dump \"if \\\\(n \\\\>\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final-use { cleanup-tree-dump \"tree_profile\" } } */"}, {"sha": "3c7518d7b860227e1895a856135738b60dc47107", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2350455936313427a68eb1e0245a5e49d5ea8165/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=2350455936313427a68eb1e0245a5e49d5ea8165", "patch": "@@ -668,6 +668,29 @@ adjust_return_value (basic_block bb, tree m, tree a)\n   update_stmt (ret_stmt);\n }\n \n+/* Subtract COUNT and FREQUENCY from the basic block and it's\n+   outgoing edge.  */\n+static void\n+decrease_profile (basic_block bb, gcov_type count, int frequency)\n+{\n+  edge e;\n+  bb->count -= count;\n+  if (bb->count < 0)\n+    bb->count = 0;\n+  bb->frequency -= frequency;\n+  if (bb->frequency < 0)\n+    bb->frequency = 0;\n+  if (!single_succ_p (bb))\n+    {\n+      gcc_assert (!EDGE_COUNT (bb->succs));\n+      return;\n+    }\n+  e = single_succ_edge (bb);\n+  e->count -= count;\n+  if (e->count < 0)\n+    e->count = 0;\n+}\n+\n /* Eliminates tail call described by T.  TMP_VARS is a list of\n    temporary variables used to copy the function arguments.  */\n \n@@ -717,6 +740,13 @@ eliminate_tail_call (struct tailcall *t)\n       release_defs (t);\n     }\n \n+  /* Number of executions of function has reduced by the tailcall.  */\n+  e = single_succ_edge (t->call_block);\n+  decrease_profile (EXIT_BLOCK_PTR, e->count, EDGE_FREQUENCY (e));\n+  decrease_profile (ENTRY_BLOCK_PTR, e->count, EDGE_FREQUENCY (e));\n+  if (e->dest != EXIT_BLOCK_PTR)\n+    decrease_profile (e->dest, e->count, EDGE_FREQUENCY (e));\n+\n   /* Replace the call by a jump to the start of function.  */\n   e = redirect_edge_and_branch (single_succ_edge (t->call_block), first);\n   gcc_assert (e);"}]}