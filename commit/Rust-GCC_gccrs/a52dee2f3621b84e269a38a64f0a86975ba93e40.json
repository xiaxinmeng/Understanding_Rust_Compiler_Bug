{"sha": "a52dee2f3621b84e269a38a64f0a86975ba93e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyZGVlMmYzNjIxYjg0ZTI2OWEzOGE2NGYwYTg2OTc1YmE5M2U0MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-05T04:46:26Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-05T04:46:26Z"}, "message": "field.h (JvFieldIsRef): Return false for gnu.gcj.RawData field.\n\n\t* gcj/field.h (JvFieldIsRef): Return false for gnu.gcj.RawData\n\tfield.\n\t* boehm.cc (_Jv_MarkObj): Removed dead code.  Use `STATIC', not\n\t`0x0008'.\n\tInclude Modifier.h.\n\nFrom-SVN: r33702", "tree": {"sha": "1f7b855d9b5317e1e2813fec65731e6489b4ea7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7b855d9b5317e1e2813fec65731e6489b4ea7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a52dee2f3621b84e269a38a64f0a86975ba93e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52dee2f3621b84e269a38a64f0a86975ba93e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52dee2f3621b84e269a38a64f0a86975ba93e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52dee2f3621b84e269a38a64f0a86975ba93e40/comments", "author": null, "committer": null, "parents": [{"sha": "652f25043a2497f8f7d0449ba4c964c0faa49164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652f25043a2497f8f7d0449ba4c964c0faa49164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652f25043a2497f8f7d0449ba4c964c0faa49164"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "45bea02cccbd52c99dab9652eb86ec37ed5fdbc7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a52dee2f3621b84e269a38a64f0a86975ba93e40", "patch": "@@ -1,3 +1,11 @@\n+2000-05-04  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gcj/field.h (JvFieldIsRef): Return false for gnu.gcj.RawData\n+\tfield.\n+\t* boehm.cc (_Jv_MarkObj): Removed dead code.  Use `STATIC', not\n+\t`0x0008'.\n+\tInclude Modifier.h.\n+\n 2000-05-05  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/natClass.cc (isInstance): Use __builtin_expect."}, {"sha": "34e951058878205cd6ac299e02c2227dd5721eac", "filename": "libjava/boehm.cc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=a52dee2f3621b84e269a38a64f0a86975ba93e40", "patch": "@@ -16,6 +16,7 @@ details.  */\n #include <gcj/cni.h>\n \n #include <java/lang/Class.h>\n+#include <java/lang/reflect/Modifier.h>\n #include <java-interp.h>\n \n // More nastiness: the GC wants to define TRUE and FALSE.  We don't\n@@ -102,14 +103,6 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /*env*/)\n     {\n       jclass c = (jclass) addr;\n \n-#if 0\n-      // The next field should probably not be marked, since this is\n-      // only used in the class hash table.  Marking this field\n-      // basically prohibits class unloading. --Kresten\n-      p = (ptr_t) c->next;\n-      MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, c, c2label);\n-#endif\n-\n       p = (ptr_t) c->name;\n       MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, c, c3label);\n       p = (ptr_t) c->superclass;\n@@ -182,7 +175,7 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /*env*/)\n \n \t  // For the interpreter, we also need to mark the memory\n \t  // containing static members\n-\t  if (field->flags & 0x0008)\n+\t  if ((field->flags & java::lang::reflect::Modifier::STATIC))\n \t    {\n \t      p = (ptr_t) field->u.addr;\n \t      MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, c, c8clabel);"}, {"sha": "4413fa3079398574a91804bd6e8b5d142dbd8092", "filename": "libjava/gcj/field.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2Fgcj%2Ffield.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52dee2f3621b84e269a38a64f0a86975ba93e40/libjava%2Fgcj%2Ffield.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Ffield.h?ref=a52dee2f3621b84e269a38a64f0a86975ba93e40", "patch": "@@ -175,7 +175,9 @@ JvNumStaticFields (jclass klass)\n extern inline jboolean\n JvFieldIsRef (jfieldID field)\n {\n-  return field->isRef ();\n+  // gnu.gcj.RawData.class is  _CL_Q33gnu3gcj7RawData\n+  extern java::lang::Class _CL_Q33gnu3gcj7RawData;\n+  return field->isRef () && field->type != &_CL_Q33gnu3gcj7RawData;\n }\n \n extern inline jobject"}]}