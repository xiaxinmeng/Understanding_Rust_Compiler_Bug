{"sha": "c9379ce2a9a18a45eae9877c3c4e6977a414365e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzNzljZTJhOWExOGE0NWVhZTk4NzdjM2M0ZTY5NzdhNDE0MzY1ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-01T07:21:07Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-01T07:21:07Z"}, "message": "re PR c/29467 (-ansi -pedantic accepts _Bool without diagnostic)\n\n\tPR c/29467\n\t* c-decl.c (declspecs_add_type): Pedwarn if boolean types are used\n\tin C89 mode.\n\n\t* gcc.dg/pr29467.c: New test.\n\t* gcc.dg/declspec-13.c: Renumber some dg-warnings.  Add dg-warnings\n\tabout boolean types.\n\t* gfortran.dg/bind_c_usage_24_c.c: Include <stdbool.h>.  Change _Bool\n\tto bool.\n\t* gfortran.dg/c_f_pointer_logical_driver.c: Change _Bool to bool.\n\nFrom-SVN: r209971", "tree": {"sha": "e487579f4c8dfd615782b2e5bf5660167e7006f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e487579f4c8dfd615782b2e5bf5660167e7006f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9379ce2a9a18a45eae9877c3c4e6977a414365e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9379ce2a9a18a45eae9877c3c4e6977a414365e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9379ce2a9a18a45eae9877c3c4e6977a414365e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9379ce2a9a18a45eae9877c3c4e6977a414365e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d00887e89999f5f24210f6cd6c3895a64eb9f2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d00887e89999f5f24210f6cd6c3895a64eb9f2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d00887e89999f5f24210f6cd6c3895a64eb9f2cd"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "e04a38d93618822263f5b71ae39b050475f5194e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -1,3 +1,9 @@\n+2014-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/29467\n+\t* c-decl.c (declspecs_add_type): Pedwarn if boolean types are used\n+\tin C89 mode.\n+\n 2014-05-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/43245"}, {"sha": "6e7c5895ec6da476ded17db4ccb8bc87ec8c639f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -9564,6 +9564,9 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\t}\n \t      return specs;\n \t    case RID_BOOL:\n+\t      if (!flag_isoc99 && !in_system_header_at (loc))\n+\t\tpedwarn (loc, OPT_Wpedantic,\n+\t\t\t \"ISO C90 does not support boolean types\");\n \t      if (specs->long_p)\n \t\terror_at (loc,\n \t\t\t  (\"both %<long%> and %<_Bool%> in \""}, {"sha": "3be6253969a7ae8d66689850df5a0d2547ad0ebc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -1,3 +1,13 @@\n+2014-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/29467\n+\t* gcc.dg/pr29467.c: New test.\n+\t* gcc.dg/declspec-13.c: Renumber some dg-warnings.  Add dg-warnings\n+\tabout boolean types.\n+\t* gfortran.dg/bind_c_usage_24_c.c: Include <stdbool.h>.  Change _Bool\n+\tto bool.\n+\t* gfortran.dg/c_f_pointer_logical_driver.c: Change _Bool to bool.\n+\n 2014-05-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/43245"}, {"sha": "3b4e315ef356f9a59159a8f0ac06bfeb91258205", "filename": "gcc/testsuite/gcc.dg/declspec-13.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-13.c?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -36,51 +36,61 @@ long double long x3; /* { dg-error \"both 'long long' and 'double' in declaration\n short long x4; /* { dg-error \"both 'long' and 'short' in declaration specifiers\" } */\n void long x5; /* { dg-error \"both 'long' and 'void' in declaration specifiers\" } */\n _Bool long x6; /* { dg-error \"both 'long' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 38 } */\n char long x7; /* { dg-error \"both 'long' and 'char' in declaration specifiers\" } */\n float long x8; /* { dg-error \"both 'long' and 'float' in declaration specifiers\" } */\n long short x9; /* { dg-error \"both 'long' and 'short' in declaration specifiers\" } */\n void short x10; /* { dg-error \"both 'short' and 'void' in declaration specifiers\" } */\n _Bool short x11; /* { dg-error \"both 'short' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 44 } */\n char short x12; /* { dg-error \"both 'short' and 'char' in declaration specifiers\" } */\n float short x13; /* { dg-error \"both 'short' and 'float' in declaration specifiers\" } */\n double short x14; /* { dg-error \"both 'short' and 'double' in declaration specifiers\" } */\n unsigned signed x15; /* { dg-error \"both 'signed' and 'unsigned' in declaration specifiers\" } */\n void signed x16; /* { dg-error \"both 'signed' and 'void' in declaration specifiers\" } */\n _Bool signed x17; /* { dg-error \"both 'signed' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 51 } */\n float signed x18; /* { dg-error \"both 'signed' and 'float' in declaration specifiers\" } */\n double signed x19; /* { dg-error \"both 'signed' and 'double' in declaration specifiers\" } */\n signed unsigned x20; /* { dg-error \"both 'signed' and 'unsigned' in declaration specifiers\" } */\n void unsigned x21; /* { dg-error \"both 'unsigned' and 'void' in declaration specifiers\" } */\n _Bool unsigned x22; /* { dg-error \"both 'unsigned' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 57 } */\n float unsigned x23; /* { dg-error \"both 'unsigned' and 'float' in declaration specifiers\" } */\n double unsigned x24; /* { dg-error \"both 'unsigned' and 'double' in declaration specifiers\" } */\n void _Complex x25; /* { dg-error \"both 'complex' and 'void' in declaration specifiers\" } */\n-/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 57 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 61 } */\n _Bool _Complex x26; /* { dg-error \"both 'complex' and '_Bool' in declaration specifiers\" } */\n-/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 59 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 63 } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 63 } */\n \n long void x27; /* { dg-error \"both 'long' and 'void' in declaration specifiers\" } */\n short void x28; /* { dg-error \"both 'short' and 'void' in declaration specifiers\" } */\n signed void x29; /* { dg-error \"both 'signed' and 'void' in declaration specifiers\" } */\n unsigned void x30; /* { dg-error \"both 'unsigned' and 'void' in declaration specifiers\" } */\n _Complex void x31; /* { dg-error \"both 'complex' and 'void' in declaration specifiers\" } */\n-/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 66 } */\n-/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 66 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 71 } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 71 } */\n long _Bool x32; /* { dg-error \"both 'long' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 74 } */\n short _Bool x33; /* { dg-error \"both 'short' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 76 } */\n signed _Bool x34; /* { dg-error \"both 'signed' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 78 } */\n unsigned _Bool x35; /* { dg-error \"both 'unsigned' and '_Bool' in declaration specifiers\" } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 80 } */\n _Complex _Bool x36; /* { dg-error \"both 'complex' and '_Bool' in declaration specifiers\" } */\n-/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 73 } */\n-/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 73 } */\n+/* { dg-warning \"ISO C90 does not support complex types\" \"C90\" { target *-*-* } 82 } */\n+/* { dg-warning \"ISO C90 does not support boolean types\" \"C90\" { target *-*-* } 82 } */\n+/* { dg-warning \"ISO C does not support plain 'complex' meaning 'double complex'\" \"complex\" { target *-*-* } 82 } */\n long char x37; /* { dg-error \"both 'long' and 'char' in declaration specifiers\" } */\n short char x38; /* { dg-error \"both 'short' and 'char' in declaration specifiers\" } */\n long float x39; /* { dg-error \"both 'long' and 'float' in declaration specifiers\" } */\n short float x40; /* { dg-error \"both 'short' and 'float' in declaration specifiers\" } */\n signed float x41; /* { dg-error \"both 'signed' and 'float' in declaration specifiers\" } */\n unsigned float x42; /* { dg-error \"both 'unsigned' and 'float' in declaration specifiers\" } */\n long long double x43; /* { dg-error \"both 'long long' and 'double' in declaration specifiers\" } */\n-/* { dg-warning \"ISO C90 does not support 'long long'\" \"C90\" { target *-*-* } 82 } */\n+/* { dg-warning \"ISO C90 does not support 'long long'\" \"C90\" { target *-*-* } 92 } */\n short double x44; /* { dg-error \"both 'short' and 'double' in declaration specifiers\" } */\n signed double x45; /* { dg-error \"both 'signed' and 'double' in declaration specifiers\" } */\n unsigned double x46; /* { dg-error \"both 'unsigned' and 'double' in declaration specifiers\" } */"}, {"sha": "eaf09c2344d568fa0dd4b669a4c0b3c8690763c4", "filename": "gcc/testsuite/gcc.dg/pr29467.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29467.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29467.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr29467.c?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/29467 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -Wpedantic\" } */\n+\n+_Bool b; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+typedef _Bool B; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+static _Bool sb; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+\n+_Bool /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+foo (_Bool bp) /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+{\n+  _Bool bl; /* { dg-warning \"ISO C90 does not support boolean types\" } */\n+}"}, {"sha": "65754f3415d7ba3a43afc17fcd565375969e31c7", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_24_c.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24_c.c?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -1,11 +1,12 @@\n /* Compiled and linked by bind_c.f90.  */\n \n #include <stdlib.h>\n+#include <stdbool.h>\n \n-void subtest (_Bool, int *);\n+void subtest (bool, int *);\n \n void\n-c_proc (_Bool present, int *val)\n+c_proc (bool present, int *val)\n {\n   int val2;\n   if (!present && val)"}, {"sha": "a05449dc1810d5d2e2116b819335a82d3dfa8921", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_logical_driver.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_logical_driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9379ce2a9a18a45eae9877c3c4e6977a414365e/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_logical_driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_logical_driver.c?ref=c9379ce2a9a18a45eae9877c3c4e6977a414365e", "patch": "@@ -4,13 +4,13 @@\n \n #define NUM_ELEMS 10\n \n-void test_scalar(_Bool *my_c_bool_ptr);\n-void test_array(_Bool *my_bool_array, int num_elems);\n+void test_scalar(bool *my_c_bool_ptr);\n+void test_array(bool *my_bool_array, int num_elems);\n \n int main(int argc, char **argv)\n {\n-  _Bool my_bool = true;\n-  _Bool my_bool_array[NUM_ELEMS];\n+  bool my_bool = true;\n+  bool my_bool_array[NUM_ELEMS];\n   int i;\n \n   test_scalar(&my_bool);"}]}