{"sha": "985f48f7b575747ac5f0ece95816a3bb208fb138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1ZjQ4ZjdiNTc1NzQ3YWM1ZjBlY2U5NTgxNmEzYmIyMDhmYjEzOA==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-12-08T10:01:19Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-12-08T10:01:19Z"}, "message": "tree-chkp.c (chkp_call_returns_bounds_p): New.\n\ngcc/\n\n\t* tree-chkp.c (chkp_call_returns_bounds_p): New.\n\t(chkp_build_returned_bound): Use zero bounds as\n\treturned by calls not returning bounds.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/chkp-bndret.c: New.\n\t* gcc.target/i386/chkp-strchr.c: New.\n\nFrom-SVN: r218478", "tree": {"sha": "d66ef7fdb2d954f9e839018b44994dd041ffed0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66ef7fdb2d954f9e839018b44994dd041ffed0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985f48f7b575747ac5f0ece95816a3bb208fb138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985f48f7b575747ac5f0ece95816a3bb208fb138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985f48f7b575747ac5f0ece95816a3bb208fb138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985f48f7b575747ac5f0ece95816a3bb208fb138/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2625bb5df57f49af1b01e1aef952db551a77824f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2625bb5df57f49af1b01e1aef952db551a77824f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2625bb5df57f49af1b01e1aef952db551a77824f"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "8302882ee364a615728634f46ba36d8c912eb9d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=985f48f7b575747ac5f0ece95816a3bb208fb138", "patch": "@@ -1,3 +1,9 @@\n+2014-12-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-chkp.c (chkp_call_returns_bounds_p): New.\n+\t(chkp_build_returned_bound): Use zero bounds as\n+\treturned by calls not returning bounds.\n+\n 2014-12-08  Richard Biener  <rguenther@suse.de>\n \n \t* builtins.c (fold_builtin_0): Remove unused ignore parameter."}, {"sha": "05342ed6fbdfe0f7bd878eaa92fe299c03ba7564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=985f48f7b575747ac5f0ece95816a3bb208fb138", "patch": "@@ -1,3 +1,8 @@\n+2014-12-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/chkp-bndret.c: New.\n+\t* gcc.target/i386/chkp-strchr.c: New.\n+\n 2014-12-07  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53513"}, {"sha": "349805862196d64326018a9785e2f9536698cc98", "filename": "gcc/testsuite/gcc.target/i386/chkp-bndret.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c?ref=985f48f7b575747ac5f0ece95816a3bb208fb138", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkp\" } */\n+/* { dg-final { scan-tree-dump-not \"bndret\" \"chkp\" } } */\n+/* { dg-final { cleanup-tree-dump \"chkp\" } } */\n+\n+#include \"string.h\"\n+\n+extern int *test1 (int *p) __attribute__((bnd_legacy));\n+\n+int *\n+test2 (int *p)\n+{\n+  return test1 (p);\n+}"}, {"sha": "94a5eaab6928fd2d1b16cf473fe80140ba64c07f", "filename": "gcc/testsuite/gcc.target/i386/chkp-strchr.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c?ref=985f48f7b575747ac5f0ece95816a3bb208fb138", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n+\n+#include \"string.h\"\n+\n+static char *\n+test1 (char *str)\n+{\n+  return strrchr (str, '_');\n+}\n+\n+char *\n+test2 ()\n+{\n+  return test1 (\"test_string\");\n+}"}, {"sha": "1ea4f24d31f3af3d2078aa96c4cba7295b0bf21f", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985f48f7b575747ac5f0ece95816a3bb208fb138/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=985f48f7b575747ac5f0ece95816a3bb208fb138", "patch": "@@ -2082,6 +2082,38 @@ chkp_get_nonpointer_load_bounds (void)\n   return chkp_get_zero_bounds ();\n }\n \n+/* Return 1 if may use bndret call to get bounds for pointer\n+   returned by CALL.  */\n+static bool\n+chkp_call_returns_bounds_p (gcall *call)\n+{\n+  if (gimple_call_internal_p (call))\n+    return false;\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+\n+  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    return false;\n+\n+  if (fndecl\n+      && lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl)))\n+    return false;\n+\n+  if (fndecl && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    {\n+      if (chkp_instrument_normal_builtin (fndecl))\n+\treturn true;\n+\n+      if (!lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fndecl)))\n+\treturn false;\n+\n+      struct cgraph_node *clone = chkp_maybe_create_clone (fndecl);\n+      return (clone && gimple_has_body_p (clone->decl));\n+    }\n+\n+  return true;\n+}\n+\n /* Build bounds returned by CALL.  */\n static tree\n chkp_build_returned_bound (gcall *call)\n@@ -2156,7 +2188,7 @@ chkp_build_returned_bound (gcall *call)\n \n       bounds = chkp_find_bounds (gimple_call_arg (call, argno), &iter);\n     }\n-  else\n+  else if (chkp_call_returns_bounds_p (call))\n     {\n       gcc_assert (TREE_CODE (gimple_call_lhs (call)) == SSA_NAME);\n \n@@ -2174,6 +2206,8 @@ chkp_build_returned_bound (gcall *call)\n \n       update_stmt (stmt);\n     }\n+  else\n+    bounds = chkp_get_zero_bounds ();\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}]}