{"sha": "f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "node_id": "C_kwDOANBUbNoAKGY5ZmNkMzdkMDU1YzhlNDZhYWVjZmE0YTVhZjkxZTAxMDg2NzBjMTc", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-22T13:44:05Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:26Z"}, "message": "ast: Add some expr TokenStream visitors\n\nImplement some TokenStream expression visitor functions.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Implement\n\tvisitor.\n\t* ast/rust-ast-tokenstream.h: Add function prototype for missing\n\tcomponent.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "ba3d25688e860250bbc5fd69dfcc631780737eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3d25688e860250bbc5fd69dfcc631780737eda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcd37d055c8e46aaecfa4a5af91e0108670c17/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439c05ae3a8563a49cdf292f1ca0a84c0b43eb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439c05ae3a8563a49cdf292f1ca0a84c0b43eb58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439c05ae3a8563a49cdf292f1ca0a84c0b43eb58"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "18337ac076c1b9a5d7aa85bbaaed5323cf20d988", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 72, "deletions": 15, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcd37d055c8e46aaecfa4a5af91e0108670c17/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcd37d055c8e46aaecfa4a5af91e0108670c17/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "patch": "@@ -998,36 +998,93 @@ TokenStream::visit (ArrayIndexExpr &expr)\n }\n \n void\n-TokenStream::visit (TupleExpr &)\n-{}\n+TokenStream::visit (TupleExpr &expr)\n+{\n+  visit_items_as_lines (expr.get_outer_attrs ());\n+  tokens.push_back (Rust::Token::make (LEFT_PAREN, expr.get_locus ()));\n+  visit_items_joined_by_separator (expr.get_tuple_elems (), COMMA);\n+  tokens.push_back (Rust::Token::make (RIGHT_PAREN, Location ()));\n+}\n \n void\n-TokenStream::visit (TupleIndexExpr &)\n-{}\n+TokenStream::visit (TupleIndexExpr &expr)\n+{\n+  visit (expr.get_tuple_expr ());\n+  tokens.push_back (Rust::Token::make (DOT, expr.get_locus ()));\n+  tokens.push_back (\n+    Rust::Token::make_int (Location (),\n+\t\t\t   std::to_string (expr.get_tuple_index ())));\n+}\n \n void\n-TokenStream::visit (StructExprStruct &)\n-{}\n+TokenStream::visit (StructExprStruct &expr)\n+{\n+  visit (expr.get_struct_name ());\n+  tokens.push_back (Rust::Token::make (LEFT_CURLY, expr.get_locus ()));\n+  // FIXME: Reference says it should have fields but node doesn't have them for\n+  // now. We need to disambiguate with StructExprUnit and visit fields.\n+  gcc_unreachable ();\n+  tokens.push_back (Rust::Token::make (RIGHT_CURLY, Location ()));\n+}\n \n void\n-TokenStream::visit (StructExprFieldIdentifier &)\n-{}\n+TokenStream::visit (StructExprFieldIdentifier &expr)\n+{\n+  // TODO: Add attributes\n+  // visit_items_as_lines (expr.get_attrs ());\n+  auto id = expr.get_field_name ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (expr.get_locus (), std::move (id)));\n+}\n \n void\n-TokenStream::visit (StructExprFieldIdentifierValue &)\n-{}\n+TokenStream::visit (StructExprFieldIdentifierValue &expr)\n+{\n+  // TODO: Add attributes\n+  // visit_items_as_lines (expr.get_attrs ());\n+  auto id = expr.get_field_name ();\n+  tokens.push_back (\n+    Rust::Token::make_identifier (expr.get_locus (), std::move (id)));\n+  tokens.push_back (Rust::Token::make (COLON, Location ()));\n+  visit (expr.get_value ());\n+}\n \n void\n-TokenStream::visit (StructExprFieldIndexValue &)\n-{}\n+TokenStream::visit (StructExprFieldIndexValue &expr)\n+{\n+  // TODO: Add attributes\n+  // visit_items_as_lines (expr.get_attrs ());\n+  tokens.push_back (Rust::Token::make_int (expr.get_locus (),\n+\t\t\t\t\t   std::to_string (expr.get_index ())));\n+  tokens.push_back (Rust::Token::make (COLON, Location ()));\n+  visit (expr.get_value ());\n+}\n \n void\n-TokenStream::visit (StructExprStructFields &)\n-{}\n+TokenStream::visit (StructBase &base)\n+{\n+  tokens.push_back (Rust::Token::make (DOT_DOT, Location ()));\n+  visit (base.get_base_struct ());\n+}\n+\n+void\n+TokenStream::visit (StructExprStructFields &expr)\n+{\n+  visit_items_joined_by_separator (expr.get_fields (), COMMA);\n+  if (expr.has_struct_base ())\n+    {\n+      tokens.push_back (Rust::Token::make (COMMA, Location ()));\n+      visit (expr.get_struct_base ());\n+      trailing_comma ();\n+    }\n+}\n \n void\n TokenStream::visit (StructExprStructBase &)\n-{}\n+{\n+  // FIXME: Implement this node\n+  gcc_unreachable ();\n+}\n \n void\n TokenStream::visit (CallExpr &expr)"}, {"sha": "58b90fba010b6d82f8841f81aab2b24b655fd400", "filename": "gcc/rust/ast/rust-ast-tokenstream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcd37d055c8e46aaecfa4a5af91e0108670c17/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcd37d055c8e46aaecfa4a5af91e0108670c17/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.h?ref=f9fcd37d055c8e46aaecfa4a5af91e0108670c17", "patch": "@@ -161,6 +161,7 @@ class TokenStream : public ASTVisitor\n   void visit (StructExprFieldIdentifier &field);\n   void visit (StructExprFieldIdentifierValue &field);\n   void visit (StructExprFieldIndexValue &field);\n+  void visit (StructBase &base);\n   void visit (StructExprStructFields &expr);\n   void visit (StructExprStructBase &expr);\n   void visit (CallExpr &expr);"}]}