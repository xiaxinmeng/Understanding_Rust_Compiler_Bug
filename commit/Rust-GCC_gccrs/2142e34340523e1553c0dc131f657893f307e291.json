{"sha": "2142e34340523e1553c0dc131f657893f307e291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0MmUzNDM0MDUyM2UxNTUzYzBkYzEzMWY2NTc4OTNmMzA3ZTI5MQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-07T21:06:04Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-09T16:10:53Z"}, "message": "rs6000, Fix arguments in altivec_vrlwmi and altivec_rlwdi builtins\n\n\t2021-06-07  Carl Love  <cel@us.ibm.com>\n\ngcc/\n\t* config/rs6000/altivec.md (altivec_vrl<VI_char>mi): Fix\n\tbug in argument generation.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/check-builtin-vec_rlnm-runnable.c:\n\tNew runnable test case.\n\t* gcc.target/powerpc/vec-rlmi-rlnm.c: Update scan assembler times\n\tfor xxlor instruction.", "tree": {"sha": "0485b8135fd4f767b28997910e4ffd067135b43f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0485b8135fd4f767b28997910e4ffd067135b43f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2142e34340523e1553c0dc131f657893f307e291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2142e34340523e1553c0dc131f657893f307e291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2142e34340523e1553c0dc131f657893f307e291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2142e34340523e1553c0dc131f657893f307e291/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7969d9c83d061e57ea80795768469cffb1a859f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7969d9c83d061e57ea80795768469cffb1a859f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7969d9c83d061e57ea80795768469cffb1a859f8"}], "stats": {"total": 241, "additions": 236, "deletions": 5}, "files": [{"sha": "97dc9d2bda94125f7215c19c26bc38efe25a52f6", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2142e34340523e1553c0dc131f657893f307e291/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2142e34340523e1553c0dc131f657893f307e291/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=2142e34340523e1553c0dc131f657893f307e291", "patch": "@@ -1987,12 +1987,12 @@\n \n (define_insn \"altivec_vrl<VI_char>mi\"\n   [(set (match_operand:VIlong 0 \"register_operand\" \"=v\")\n-        (unspec:VIlong [(match_operand:VIlong 1 \"register_operand\" \"0\")\n-\t                (match_operand:VIlong 2 \"register_operand\" \"v\")\n+        (unspec:VIlong [(match_operand:VIlong 1 \"register_operand\" \"v\")\n+\t                (match_operand:VIlong 2 \"register_operand\" \"0\")\n \t\t        (match_operand:VIlong 3 \"register_operand\" \"v\")]\n \t\t       UNSPEC_VRLMI))]\n   \"TARGET_P9_VECTOR\"\n-  \"vrl<VI_char>mi %0,%2,%3\"\n+  \"vrl<VI_char>mi %0,%1,%3\"\n   [(set_attr \"type\" \"veclogical\")])\n \n (define_insn \"altivec_vrl<VI_char>nm\""}, {"sha": "cd67b06afbe1b0f00b77000d6fbe5da09cd24dfd", "filename": "gcc/testsuite/gcc.target/powerpc/check-builtin-vec_rlnm-runnable.c", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2142e34340523e1553c0dc131f657893f307e291/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcheck-builtin-vec_rlnm-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2142e34340523e1553c0dc131f657893f307e291/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcheck-builtin-vec_rlnm-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcheck-builtin-vec_rlnm-runnable.c?ref=2142e34340523e1553c0dc131f657893f307e291", "patch": "@@ -0,0 +1,231 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9 -save-temps\" } */\n+\n+/* Verify the vec_rlm and vec_rlmi builtins works correctly.  */\n+/* { dg-final { scan-assembler-times {\\mvrldmi\\M} 1 } } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#include <stdlib.h>\n+#endif\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  int i;\n+\n+  vector unsigned int vec_arg1_int, vec_arg2_int, vec_arg3_int;\n+  vector unsigned int vec_result_int, vec_expected_result_int;\n+  \n+  vector unsigned long long int vec_arg1_di, vec_arg2_di, vec_arg3_di;\n+  vector unsigned long long int vec_result_di, vec_expected_result_di;\n+\n+  unsigned int mask_begin, mask_end, shift;\n+  unsigned long long int mask;\n+\n+/* Check vec int version of vec_rlmi builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 16;\n+\n+  for (i = 0; i < 31; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x80000000ULL >> i;\n+\n+  for (i = 0; i < 4; i++) {\n+    vec_arg1_int[i] = 0x12345678 + i*0x11111111;\n+    vec_arg2_int[i] = 0xA1B1CDEF;\n+    vec_arg3_int[i] = mask_begin << 16 | mask_end << 8 | shift;\n+\n+    /* do rotate */\n+    vec_expected_result_int[i] =  ( vec_arg2_int[i] & ~mask) \n+      | ((vec_arg1_int[i] << shift) | (vec_arg1_int[i] >> (32-shift))) & mask;\n+      \n+  }\n+\n+  /* vec_rlmi(arg1, arg2, arg3)\n+     result - rotate each element of arg2 left and inserts it into arg1 \n+     element based on the mask specified in arg3.  The shift, mask\n+     start and end is specified in arg3.  */\n+  vec_result_int = vec_rlmi (vec_arg1_int, vec_arg2_int, vec_arg3_int);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_result_int[i] != vec_expected_result_int[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: i = %d, vec_rlmi int result 0x%x, does not match \"\n+\t     \"expected result 0x%x\\n\", i, vec_result_int[i],\n+\t     vec_expected_result_int[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+/* Check vec long long int version of vec_rlmi builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 16;\n+\n+  for (i = 0; i < 31; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x8000000000000000ULL >> i;\n+\n+  for (i = 0; i < 2; i++) {\n+    vec_arg1_di[i] = 0x1234567800000000 + i*0x11111111;\n+    vec_arg2_di[i] = 0xA1B1C1D1E1F12345;\n+    vec_arg3_di[i] = mask_begin << 16 | mask_end << 8 | shift;\n+\n+    /* do rotate */\n+    vec_expected_result_di[i] =  ( vec_arg2_di[i] & ~mask) \n+      | ((vec_arg1_di[i] << shift) | (vec_arg1_di[i] >> (64-shift))) & mask;\n+  }\n+\n+  /* vec_rlmi(arg1, arg2, arg3)\n+     result - rotate each element of arg1 left and inserts it into arg2 \n+     element based on the mask specified in arg3.  The shift, mask, start\n+     and end is specified in arg3.  */\n+  vec_result_di = vec_rlmi (vec_arg1_di, vec_arg2_di, vec_arg3_di);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_result_di[i] != vec_expected_result_di[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: i = %d, vec_rlmi int long long result 0x%llx, does not match \"\n+\t     \"expected result 0x%llx\\n\", i, vec_result_di[i],\n+\t     vec_expected_result_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  /* Check vec int version of vec_rlnm builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 16;\n+\n+  for (i = 0; i < 31; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x80000000ULL >> i;\n+\n+  for (i = 0; i < 4; i++) {\n+    vec_arg1_int[i] = 0x12345678 + i*0x11111111;\n+    vec_arg2_int[i] = shift;\n+    vec_arg3_int[i] = mask_begin << 8 | mask_end;\n+    vec_expected_result_int[i] = (vec_arg1_int[i] << shift) & mask;\n+  }\n+\n+  /* vec_rlnm(arg1, arg2, arg3)\n+     result - rotate each element of arg1 left by shift in element of arg2.\n+       Then AND with mask whose  start/stop bits are specified in element of\n+       arg3.  */\n+  vec_result_int = vec_rlnm (vec_arg1_int, vec_arg2_int, vec_arg3_int);\n+  for (i = 0; i < 4; i++) {\n+    if (vec_result_int[i] != vec_expected_result_int[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: vec_rlnm, i = %d, int result 0x%x does not match \"\n+\t     \"expected result 0x%x\\n\", i, vec_result_int[i],\n+\t     vec_expected_result_int[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+/* Check vec long int version of builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 20;\n+\n+  for (i = 0; i < 63; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x8000000000000000ULL >> i;\n+  \n+  for (i = 0; i < 2; i++) {\n+    vec_arg1_di[i] = 0x123456789ABCDE00ULL + i*0x1111111111111111ULL;\n+    vec_arg2_di[i] = shift;\n+    vec_arg3_di[i] = mask_begin << 8 | mask_end;\n+    vec_expected_result_di[i] = (vec_arg1_di[i] << shift) & mask;\n+  }\n+\n+  vec_result_di = vec_rlnm (vec_arg1_di, vec_arg2_di, vec_arg3_di);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_result_di[i] != vec_expected_result_di[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: vec_rlnm, i = %d, long long int result 0x%llx does not \"\n+\t     \"match expected result 0x%llx\\n\", i, vec_result_di[i],\n+\t     vec_expected_result_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+    /* Check vec int version of vec_vrlnm builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 16;\n+\n+  for (i = 0; i < 31; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x80000000ULL >> i;\n+\n+  for (i = 0; i < 4; i++) {\n+    vec_arg1_int[i] = 0x12345678 + i*0x11111111;\n+    vec_arg2_int[i] = mask_begin << 16 | mask_end << 8 | shift;\n+    vec_expected_result_int[i] = (vec_arg1_int[i] << shift) & mask;\n+  }\n+\n+  /* vec_vrlnm(arg1, arg2, arg3)\n+     result - rotate each element of arg1 left then AND with mask.  The mask\n+       start, stop bits is specified in the second argument.  The shift amount\n+       is also specified in the second argument.  */\n+  vec_result_int = vec_vrlnm (vec_arg1_int, vec_arg2_int);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_result_int[i] != vec_expected_result_int[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: vec_vrlnm, i = %d, int result 0x%x does not match \"\n+\t     \"expected result 0x%x\\n\", i, vec_result_int[i],\n+\t     vec_expected_result_int[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+/* Check vec long int version of vec_vrlnm builtin */\n+  mask = 0;\n+  mask_begin = 0;\n+  mask_end   = 4;\n+  shift = 20;\n+\n+  for (i = 0; i < 63; i++)\n+    if ((i >= mask_begin) && (i <= mask_end))\n+      mask |= 0x8000000000000000ULL >> i;\n+  \n+  for (i = 0; i < 2; i++) {\n+    vec_arg1_di[i] = 0x123456789ABCDE00ULL + i*0x1111111111111111ULL;\n+    vec_arg2_di[i] = mask_begin << 16 | mask_end << 8 | shift;\n+    vec_expected_result_di[i] = (vec_arg1_di[i] << shift) & mask;\n+  }\n+\n+  vec_result_di = vec_vrlnm (vec_arg1_di, vec_arg2_di);\n+\n+  for (i = 0; i < 2; i++) {\n+    if (vec_result_di[i] != vec_expected_result_di[i])\n+#ifdef DEBUG\n+      printf(\"ERROR: vec_vrlnm, i = %d, long long int result 0x%llx does not \"\n+\t     \"match expected result 0x%llx\\n\", i, vec_result_di[i],\n+\t     vec_expected_result_di[i]);\n+#else\n+      abort();\n+#endif\n+    }\n+\n+  return 0;\n+}"}, {"sha": "6834733b1bf34ed6a312b62402318f234ebd7fb5", "filename": "gcc/testsuite/gcc.target/powerpc/vec-rlmi-rlnm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2142e34340523e1553c0dc131f657893f307e291/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2142e34340523e1553c0dc131f657893f307e291/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-rlmi-rlnm.c?ref=2142e34340523e1553c0dc131f657893f307e291", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile }\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target p9vector_hw } */\n /* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n \n #include <altivec.h>\n@@ -62,6 +62,6 @@ rlnm_test_2 (vector unsigned long long x, vector unsigned long long y,\n /* { dg-final { scan-assembler-times \"vextsb2d\" 1 } } */\n /* { dg-final { scan-assembler-times \"vslw\" 1 } } */\n /* { dg-final { scan-assembler-times \"vsld\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlor\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 4 } } */\n /* { dg-final { scan-assembler-times \"vrlwnm\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrldnm\" 2 } } */"}]}