{"sha": "c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2NmZjNWYxYzEyODIzZmVkNThkOWEzZDNlZjRkNjdmY2ExOTk4NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-06-23T00:08:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-06-23T00:08:47Z"}, "message": "stl_iterator.h (reverse_iterator): Inherit from iterator.\n\n\n2001-06-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/stl_iterator.h (reverse_iterator): Inherit from\n\titerator.\n\t(back_insert_iterator): Same.\n\t(front_insert_iterator): Same.\n\t(insert_iterator): Same.\n\n\t* testsuite/20_util/raw_storage_iterator.cc: Modify.\n\t* testsuite/24_iterators/reverse_iterator.cc: New file.\n\t* testsuite/24_iterators/back_insert_iterator.cc: New file.\n\t* testsuite/24_iterators/front_insert_iterator.cc: New file.\n\t* testsuite/24_iterators/insert_iterator.cc: New file.\n\nFrom-SVN: r43524", "tree": {"sha": "4604ef6c25e8773f9fb2caaa86aa42511b2492da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4604ef6c25e8773f9fb2caaa86aa42511b2492da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/comments", "author": null, "committer": null, "parents": [{"sha": "9401afe31a29a1b933a87eb5f11d20e950cae82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9401afe31a29a1b933a87eb5f11d20e950cae82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9401afe31a29a1b933a87eb5f11d20e950cae82d"}], "stats": {"total": 735, "additions": 488, "deletions": 247}, "files": [{"sha": "9623194beb496c3aa5ae219910c3559dfd8326bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -1,3 +1,17 @@\n+2001-06-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (reverse_iterator): Inherit from\n+\titerator.\n+\t(back_insert_iterator): Same.\t\n+\t(front_insert_iterator): Same.\n+\t(insert_iterator): Same.\n+\n+\t* testsuite/20_util/raw_storage_iterator.cc: Modify.\n+\t* testsuite/24_iterators/reverse_iterator.cc: New file.\n+\t* testsuite/24_iterators/back_insert_iterator.cc: New file.\n+\t* testsuite/24_iterators/front_insert_iterator.cc: New file.\n+\t* testsuite/24_iterators/insert_iterator.cc: New file.\n+\n 2001-06-22  Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/*:  Revert comment/license change from yesterday for all"}, {"sha": "148cad6a1847f2a736adf510c4d159742f6c3641", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 260, "deletions": 239, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -33,117 +33,272 @@\n \n namespace std\n {\n-\n-template <class _Container>\n-class back_insert_iterator {\n-protected:\n-  _Container* container;\n-public:\n-  typedef _Container          container_type;\n-  typedef output_iterator_tag iterator_category;\n-  typedef void                value_type;\n-  typedef void                difference_type;\n-  typedef void                pointer;\n-  typedef void                reference;\n-\n-  explicit back_insert_iterator(_Container& __x) : container(&__x) {}\n-  back_insert_iterator<_Container>&\n-  operator=(const typename _Container::value_type& __value) { \n-    container->push_back(__value);\n-    return *this;\n-  }\n-  back_insert_iterator<_Container>& operator*() { return *this; }\n-  back_insert_iterator<_Container>& operator++() { return *this; }\n-  back_insert_iterator<_Container>& operator++(int) { return *this; }\n-};\n-\n-template <class _Container>\n-inline back_insert_iterator<_Container> back_inserter(_Container& __x) {\n-  return back_insert_iterator<_Container>(__x);\n-}\n-\n-template <class _Container>\n-class front_insert_iterator {\n-protected:\n-  _Container* container;\n-public:\n-  typedef _Container          container_type;\n-  typedef output_iterator_tag iterator_category;\n-  typedef void                value_type;\n-  typedef void                difference_type;\n-  typedef void                pointer;\n-  typedef void                reference;\n-\n-  explicit front_insert_iterator(_Container& __x) : container(&__x) {}\n-  front_insert_iterator<_Container>&\n-  operator=(const typename _Container::value_type& __value) { \n-    container->push_front(__value);\n-    return *this;\n+  // 24.4.1 Reverse iterators\n+  template<class _Iterator>\n+    class reverse_iterator \n+      : public iterator<iterator_traits<_Iterator>::iterator_category,\n+\t\t\titerator_traits<_Iterator>::value_type,\n+\t\t        iterator_traits<_Iterator>::difference_type,\n+\t\t        iterator_traits<_Iterator>::pointer,\n+                        iterator_traits<_Iterator>::reference>\n+    {\n+    protected:\n+      _Iterator current;\n+\n+    public:\n+      typedef iterator_traits<_Iterator>  \t\t__traits_type;\n+      typedef typename __traits_type::iterator_category\titerator_category;\n+      typedef typename __traits_type::value_type \tvalue_type;\n+      typedef typename __traits_type::difference_type \tdifference_type;\n+      typedef typename __traits_type::pointer          \tpointer;\n+      typedef typename __traits_type::reference \treference;\n+\n+      typedef _Iterator iterator_type;\n+      typedef reverse_iterator<_Iterator> _Self;\n+\n+    public:\n+      reverse_iterator() {}\n+\n+      explicit \n+      reverse_iterator(iterator_type __x) : current(__x) {}\n+\n+      reverse_iterator(const _Self& __x) : current(__x.current) {}\n+\n+      template <class _Iter>\n+        reverse_iterator(const reverse_iterator<_Iter>& __x)\n+\t: current(__x.base()) {}\n+    \n+      iterator_type \n+      base() const { return current; }\n+\n+      reference \n+      operator*() const \n+      {\n+\t_Iterator __tmp = current;\n+\treturn *--__tmp;\n+      }\n+\n+      pointer \n+      operator->() const { return &(operator*()); }\n+\n+      _Self& \n+      operator++() \n+      {\n+\t--current;\n+\treturn *this;\n+      }\n+\n+      _Self \n+      operator++(int) \n+      {\n+\t_Self __tmp = *this;\n+\t--current;\n+\treturn __tmp;\n+      }\n+\n+      _Self& \n+      operator--() \n+      {\n+\t++current;\n+\treturn *this;\n+      }\n+\n+      _Self operator--(int) \n+      {\n+\t_Self __tmp = *this;\n+\t++current;\n+\treturn __tmp;\n+      }\n+      \n+      _Self \n+      operator+(difference_type __n) const \n+      { return _Self(current - __n); }\n+\n+      _Self& \n+      operator+=(difference_type __n) \n+      {\n+\tcurrent -= __n;\n+\treturn *this;\n+      }\n+\n+      _Self \n+      operator-(difference_type __n) const \n+      { return _Self(current + __n); }\n+\n+      _Self& \n+      operator-=(difference_type __n) \n+      {\n+\tcurrent += __n;\n+\treturn *this;\n+      }\n+\n+      reference \n+      operator[](difference_type __n) const { return *(*this + __n); }  \n+    }; \n+ \n+  template<class _Iterator>\n+    inline bool \n+    operator==(const reverse_iterator<_Iterator>& __x, \n+\t       const reverse_iterator<_Iterator>& __y) \n+    { return __x.base() == __y.base(); }\n+\n+  template <class _Iterator>\n+    inline bool \n+    operator<(const reverse_iterator<_Iterator>& __x, \n+\t      const reverse_iterator<_Iterator>& __y) \n+    { return __y.base() < __x.base(); }\n+\n+  template <class _Iterator>\n+    inline bool \n+    operator!=(const reverse_iterator<_Iterator>& __x, \n+\t       const reverse_iterator<_Iterator>& __y) \n+    { return !(__x == __y); }\n+\n+  template <class _Iterator>\n+    inline bool \n+    operator>(const reverse_iterator<_Iterator>& __x, \n+\t      const reverse_iterator<_Iterator>& __y) \n+    { return __y < __x; }\n+\n+  template <class _Iterator>\n+    inline bool \n+    operator<=(const reverse_iterator<_Iterator>& __x, \n+\t\tconst reverse_iterator<_Iterator>& __y) \n+    { return !(__y < __x); }\n+\n+  template <class _Iterator>\n+    inline bool \n+    operator>=(const reverse_iterator<_Iterator>& __x, \n+\t       const reverse_iterator<_Iterator>& __y) \n+    { return !(__x < __y); }\n+\n+  template<class _Iterator>\n+    inline typename reverse_iterator<_Iterator>::difference_type\n+    operator-(const reverse_iterator<_Iterator>& __x, \n+\t      const reverse_iterator<_Iterator>& __y) \n+    { return __y.base() - __x.base(); }\n+\n+  template <class _Iterator>\n+    inline reverse_iterator<_Iterator> \n+    operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n+\t      const reverse_iterator<_Iterator>& __x) \n+    { return reverse_iterator<_Iterator>(__x.base() - __n); }\n+\n+  // 24.4.2.2.1 back_insert_iterator\n+  template <class _Container>\n+  class back_insert_iterator \n+    : public iterator<output_iterator_tag, void, void, void, void>\n+    {\n+    protected:\n+      _Container* container;\n+\n+    public:\n+      typedef _Container          container_type;\n+      \n+      explicit \n+      back_insert_iterator(_Container& __x) : container(&__x) {}\n+\n+      back_insert_iterator<_Container>&\n+      operator=(const typename _Container::value_type& __value) \n+      { \n+\tcontainer->push_back(__value);\n+\treturn *this;\n+      }\n+\n+      back_insert_iterator<_Container>& \n+      operator*() { return *this; }\n+\n+      back_insert_iterator<_Container>& \n+      operator++() { return *this; }\n+\n+      back_insert_iterator<_Container>& \n+      operator++(int) { return *this; }\n+    };\n+\n+  template <class _Container>\n+    inline back_insert_iterator<_Container> \n+    back_inserter(_Container& __x) \n+    { return back_insert_iterator<_Container>(__x); }\n+\n+  template <class _Container>\n+    class front_insert_iterator \n+      : public iterator<output_iterator_tag, void, void, void, void>\n+    {\n+    protected:\n+      _Container* container;\n+\n+    public:\n+      typedef _Container          container_type;\n+\n+      explicit front_insert_iterator(_Container& __x) : container(&__x) {}\n+      front_insert_iterator<_Container>&\n+      operator=(const typename _Container::value_type& __value) { \n+\tcontainer->push_front(__value);\n+\treturn *this;\n+      }\n+      front_insert_iterator<_Container>& operator*() { return *this; }\n+      front_insert_iterator<_Container>& operator++() { return *this; }\n+      front_insert_iterator<_Container>& operator++(int) { return *this; }\n+    };\n+\n+  template <class _Container>\n+  inline front_insert_iterator<_Container> front_inserter(_Container& __x) {\n+    return front_insert_iterator<_Container>(__x);\n   }\n-  front_insert_iterator<_Container>& operator*() { return *this; }\n-  front_insert_iterator<_Container>& operator++() { return *this; }\n-  front_insert_iterator<_Container>& operator++(int) { return *this; }\n-};\n-\n-template <class _Container>\n-inline front_insert_iterator<_Container> front_inserter(_Container& __x) {\n-  return front_insert_iterator<_Container>(__x);\n-}\n \n-template <class _Container>\n-class insert_iterator {\n-protected:\n-  _Container* container;\n-  typename _Container::iterator iter;\n-public:\n-  typedef _Container          container_type;\n-  typedef output_iterator_tag iterator_category;\n-  typedef void                value_type;\n-  typedef void                difference_type;\n-  typedef void                pointer;\n-  typedef void                reference;\n-\n-  insert_iterator(_Container& __x, typename _Container::iterator __i) \n-    : container(&__x), iter(__i) {}\n-  insert_iterator<_Container>&\n-  operator=(const typename _Container::value_type& __value) { \n-    iter = container->insert(iter, __value);\n-    ++iter;\n-    return *this;\n+  template <class _Container>\n+    class insert_iterator \n+      : public iterator<output_iterator_tag, void, void, void, void>\n+    {\n+    protected:\n+      _Container* container;\n+      typename _Container::iterator iter;\n+\n+    public:\n+      typedef _Container          container_type;\n+      \n+      insert_iterator(_Container& __x, typename _Container::iterator __i) \n+\t: container(&__x), iter(__i) {}\n+   \n+      insert_iterator<_Container>&\n+      operator=(const typename _Container::value_type& __value) { \n+\titer = container->insert(iter, __value);\n+\t++iter;\n+\treturn *this;\n+      }\n+      insert_iterator<_Container>& operator*() { return *this; }\n+      insert_iterator<_Container>& operator++() { return *this; }\n+      insert_iterator<_Container>& operator++(int) { return *this; }\n+    };\n+  \n+  template <class _Container, class _Iterator>\n+  inline \n+  insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)\n+  {\n+    typedef typename _Container::iterator __iter;\n+    return insert_iterator<_Container>(__x, __iter(__i));\n   }\n-  insert_iterator<_Container>& operator*() { return *this; }\n-  insert_iterator<_Container>& operator++() { return *this; }\n-  insert_iterator<_Container>& operator++(int) { return *this; }\n-};\n-\n-template <class _Container, class _Iterator>\n-inline \n-insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)\n-{\n-  typedef typename _Container::iterator __iter;\n-  return insert_iterator<_Container>(__x, __iter(__i));\n-}\n-\n-template <class _BidirectionalIterator, class _Tp, class _Reference = _Tp&, \n-          class _Distance = ptrdiff_t> \n-class reverse_bidirectional_iterator {\n-  typedef reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, \n-                                         _Reference, _Distance>  _Self;\n-protected:\n-  _BidirectionalIterator current;\n-public:\n-  typedef bidirectional_iterator_tag iterator_category;\n+  \n+  template <class _BidirectionalIterator, class _Tp, class _Reference = _Tp&, \n+    class _Distance = ptrdiff_t> \n+  class reverse_bidirectional_iterator {\n+    typedef reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, \n+      _Reference, _Distance>  _Self;\n+  protected:\n+    _BidirectionalIterator current;\n+  public:\n+    typedef bidirectional_iterator_tag iterator_category;\n   typedef _Tp                        value_type;\n-  typedef _Distance                  difference_type;\n+    typedef _Distance                  difference_type;\n   typedef _Tp*                       pointer;\n-  typedef _Reference                 reference;\n-\n+    typedef _Reference                 reference;\n+    \n   reverse_bidirectional_iterator() {}\n-  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)\n-    : current(__x) {}\n-  _BidirectionalIterator base() const { return current; }\n-  _Reference operator*() const {\n-    _BidirectionalIterator __tmp = current;\n+    explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)\n+      : current(__x) {}\n+    _BidirectionalIterator base() const { return current; }\n+    _Reference operator*() const {\n+      _BidirectionalIterator __tmp = current;\n     return *--__tmp;\n   }\n   pointer operator->() const { return &(operator*()); }\n@@ -184,134 +339,6 @@ inline bool operator!=(\n }\n \n \n-// This is the new version of reverse_iterator, as defined in the\n-//  draft C++ standard.  It relies on the iterator_traits template,\n-//  which in turn relies on partial specialization.  The class\n-//  reverse_bidirectional_iterator is no longer part of the draft\n-//  standard, but it is retained for backward compatibility.\n-\n-template <class _Iterator>\n-class reverse_iterator \n-{\n-protected:\n-  _Iterator current;\n-public:\n-  typedef typename iterator_traits<_Iterator>::iterator_category\n-          iterator_category;\n-  typedef typename iterator_traits<_Iterator>::value_type\n-          value_type;\n-  typedef typename iterator_traits<_Iterator>::difference_type\n-          difference_type;\n-  typedef typename iterator_traits<_Iterator>::pointer\n-          pointer;\n-  typedef typename iterator_traits<_Iterator>::reference\n-          reference;\n-\n-  typedef _Iterator iterator_type;\n-  typedef reverse_iterator<_Iterator> _Self;\n-\n-public:\n-  reverse_iterator() {}\n-  explicit reverse_iterator(iterator_type __x) : current(__x) {}\n-\n-  reverse_iterator(const _Self& __x) : current(__x.current) {}\n-  template <class _Iter>\n-  reverse_iterator(const reverse_iterator<_Iter>& __x)\n-    : current(__x.base()) {}\n-    \n-  iterator_type base() const { return current; }\n-  reference operator*() const {\n-    _Iterator __tmp = current;\n-    return *--__tmp;\n-  }\n-  pointer operator->() const { return &(operator*()); }\n-\n-  _Self& operator++() {\n-    --current;\n-    return *this;\n-  }\n-  _Self operator++(int) {\n-    _Self __tmp = *this;\n-    --current;\n-    return __tmp;\n-  }\n-  _Self& operator--() {\n-    ++current;\n-    return *this;\n-  }\n-  _Self operator--(int) {\n-    _Self __tmp = *this;\n-    ++current;\n-    return __tmp;\n-  }\n-\n-  _Self operator+(difference_type __n) const {\n-    return _Self(current - __n);\n-  }\n-  _Self& operator+=(difference_type __n) {\n-    current -= __n;\n-    return *this;\n-  }\n-  _Self operator-(difference_type __n) const {\n-    return _Self(current + __n);\n-  }\n-  _Self& operator-=(difference_type __n) {\n-    current += __n;\n-    return *this;\n-  }\n-  reference operator[](difference_type __n) const { return *(*this + __n); }  \n-}; \n- \n-template <class _Iterator>\n-inline bool operator==(const reverse_iterator<_Iterator>& __x, \n-                       const reverse_iterator<_Iterator>& __y) {\n-  return __x.base() == __y.base();\n-}\n-\n-template <class _Iterator>\n-inline bool operator<(const reverse_iterator<_Iterator>& __x, \n-                      const reverse_iterator<_Iterator>& __y) {\n-  return __y.base() < __x.base();\n-}\n-\n-template <class _Iterator>\n-inline bool operator!=(const reverse_iterator<_Iterator>& __x, \n-                       const reverse_iterator<_Iterator>& __y) {\n-  return !(__x == __y);\n-}\n-\n-template <class _Iterator>\n-inline bool operator>(const reverse_iterator<_Iterator>& __x, \n-                      const reverse_iterator<_Iterator>& __y) {\n-  return __y < __x;\n-}\n-\n-template <class _Iterator>\n-inline bool operator<=(const reverse_iterator<_Iterator>& __x, \n-                       const reverse_iterator<_Iterator>& __y) {\n-  return !(__y < __x);\n-}\n-\n-template <class _Iterator>\n-inline bool operator>=(const reverse_iterator<_Iterator>& __x, \n-                      const reverse_iterator<_Iterator>& __y) {\n-  return !(__x < __y);\n-}\n-\n-template <class _Iterator>\n-inline typename reverse_iterator<_Iterator>::difference_type\n-operator-(const reverse_iterator<_Iterator>& __x, \n-          const reverse_iterator<_Iterator>& __y) {\n-  return __y.base() - __x.base();\n-}\n-\n-template <class _Iterator>\n-inline reverse_iterator<_Iterator> \n-operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n-          const reverse_iterator<_Iterator>& __x) {\n-  return reverse_iterator<_Iterator>(__x.base() - __n);\n-}\n-\n \n template <class _Tp, \n           class _CharT = char, class _Traits = char_traits<_CharT>,\n@@ -428,12 +455,6 @@ class __normal_iterator\n \n public:\n   typedef __normal_iterator<_Iterator, _Container> normal_iterator_type;\n-  typedef iterator_traits<_Iterator>  \t\t\t__traits_type;\n-  typedef typename __traits_type::iterator_category \titerator_category;\n-  typedef typename __traits_type::value_type \t\tvalue_type;\n-  typedef typename __traits_type::difference_type \tdifference_type;\n-  typedef typename __traits_type::pointer          \tpointer;\n-  typedef typename __traits_type::reference \t\treference;\n \n   __normal_iterator() : _M_current(_Iterator()) { }\n "}, {"sha": "7d59a8a6099524c138da6b0ffaad74b4f5f8a854", "filename": "libstdc++-v3/testsuite/20_util/raw_storage_iterator.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fraw_storage_iterator.cc?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -28,16 +28,17 @@ void test01()\n \n   // Check for required base class.\n   long l;\n-  raw_storage_iterator<long*, long> rs_it(&l);\n-  iterator<output_iterator_tag, void, void, void, void>* base = &rs_it;\n+  typedef raw_storage_iterator<long*, long> test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator rs_it(&l);\n+  base_iterator* base = &rs_it;\n \n   // Check for required typedefs\n-  typedef raw_storage_iterator<long*, long>::value_type value_type;\n-  typedef raw_storage_iterator<long*, long>::difference_type difference_type;\n-  typedef raw_storage_iterator<long*, long>::pointer pointer;\n-  typedef raw_storage_iterator<long*, long>::reference reference;\n-  typedef raw_storage_iterator<long*, long>::iterator_category iteratory_category;\n-\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n }\n \n int main() "}, {"sha": "87d2d7966ed71d28b0b65d209370a575b5bd2919", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator.cc?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -0,0 +1,50 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.4.2.1 Template class back_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  typedef back_insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+  typedef test_iterator::container_type container_type;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "5e0d04ff1c5da1d0c8df2653304972f2d435ce52", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator.cc?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -0,0 +1,50 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.4.2.3 Template class front_insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  typedef front_insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+  typedef test_iterator::container_type container_type;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "aee24700d8a0b95aac0abc31950f212e399ceef4", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator.cc?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -0,0 +1,52 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.4.2.5 Template class insert_iterator\n+\n+#include <iterator>\n+#include <list>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  list<int> l;\n+  list<int>::iterator li;\n+\n+  typedef insert_iterator<list<int> > test_iterator;\n+  typedef iterator<output_iterator_tag, void, void, void, void> base_iterator;\n+  test_iterator  r_it(l, li);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+  typedef test_iterator::container_type container_type;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "606d393bf3767c049956f23ed86da3c66e1d06b4", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c766fc5f1c12823fed58d9a3d3ef4d67fca19985/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator.cc?ref=c766fc5f1c12823fed58d9a3d3ef4d67fca19985", "patch": "@@ -0,0 +1,53 @@\n+// 2001-06-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 24.4.1.2 Reverse iterators\n+\n+#include <iterator>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Check for required base class.\n+  long l;\n+  typedef reverse_iterator<long*> test_iterator;\n+  typedef iterator<iterator_traits<long*>::iterator_category,\n+\t\t   iterator_traits<long*>::value_type,\n+\t\t   iterator_traits<long*>::difference_type,\n+\t\t   iterator_traits<long*>::pointer,\n+                   iterator_traits<long*>::reference>\n+    base_iterator;\n+  test_iterator  r_it(&l);\n+  base_iterator* base = &r_it;\n+\n+  // Check for required typedefs\n+  typedef test_iterator::value_type value_type;\n+  typedef test_iterator::difference_type difference_type;\n+  typedef test_iterator::pointer pointer;\n+  typedef test_iterator::reference reference;\n+  typedef test_iterator::iterator_category iteratory_category;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}]}