{"sha": "af98cb88eb4be6a1668ddf966e975149bf8610b1", "node_id": "C_kwDOANBUbNoAKGFmOThjYjg4ZWI0YmU2YTE2NjhkZGY5NjZlOTc1MTQ5YmY4NjEwYjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-28T15:15:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T12:09:39Z"}, "message": "libstdc++: Unblock atomic wait on non-futex platforms [PR106183]\n\nWhen using a mutex and condition variable, the notifying thread needs to\nincrement _M_ver while holding the mutex lock, and the waiting thread\nneeds to re-check after locking the mutex. This avoids a missed\nnotification as described in the PR.\n\nBy moving the increment of _M_ver to the base _M_notify we can make the\nuse of the mutex local to the use of the condition variable, and\nsimplify the code a little. We can use a relaxed store because the mutex\nalready provides sequential consistency. Also we don't need to check\nwhether __addr == &_M_ver because we know that's always true for\nplatforms that use a condition variable, and so we also know that we\nalways need to use notify_all() not notify_one().\n\nReviewed-by: Thomas Rodgers <trodgers@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/106183\n\t* include/bits/atomic_wait.h (__waiter_pool_base::_M_notify):\n\tMove increment of _M_ver here.\n\t[!_GLIBCXX_HAVE_PLATFORM_WAIT]: Lock mutex around increment.\n\tUse relaxed memory order and always notify all waiters.\n\t(__waiter_base::_M_do_wait) [!_GLIBCXX_HAVE_PLATFORM_WAIT]:\n\tCheck value again after locking mutex.\n\t(__waiter_base::_M_notify): Remove increment of _M_ver.", "tree": {"sha": "71a6acd698921652824faea283b8d2108a67de04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a6acd698921652824faea283b8d2108a67de04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af98cb88eb4be6a1668ddf966e975149bf8610b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af98cb88eb4be6a1668ddf966e975149bf8610b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af98cb88eb4be6a1668ddf966e975149bf8610b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af98cb88eb4be6a1668ddf966e975149bf8610b1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075683767abe15b936ad41792da6ee71e9eda449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075683767abe15b936ad41792da6ee71e9eda449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075683767abe15b936ad41792da6ee71e9eda449"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "76ed7409937504d7a21269348f81c5d088149af0", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af98cb88eb4be6a1668ddf966e975149bf8610b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af98cb88eb4be6a1668ddf966e975149bf8610b1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=af98cb88eb4be6a1668ddf966e975149bf8610b1", "patch": "@@ -221,18 +221,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       void\n-      _M_notify(const __platform_wait_t* __addr, bool __all, bool __bare) noexcept\n+      _M_notify(__platform_wait_t* __addr, [[maybe_unused]] bool __all,\n+\t\tbool __bare) noexcept\n       {\n-\tif (!(__bare || _M_waiting()))\n-\t  return;\n-\n #ifdef _GLIBCXX_HAVE_PLATFORM_WAIT\n-\t__platform_notify(__addr, __all);\n+\tif (__addr == &_M_ver)\n+\t  {\n+\t    __atomic_fetch_add(__addr, 1, __ATOMIC_SEQ_CST);\n+\t    __all = true;\n+\t  }\n+\n+\tif (__bare || _M_waiting())\n+\t  __platform_notify(__addr, __all);\n #else\n-\tif (__all)\n+\t{\n+\t  lock_guard<mutex> __l(_M_mtx);\n+\t  __atomic_fetch_add(__addr, 1, __ATOMIC_RELAXED);\n+\t}\n+\tif (__bare || _M_waiting())\n \t  _M_cv.notify_all();\n-\telse\n-\t  _M_cv.notify_one();\n #endif\n       }\n \n@@ -259,7 +266,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__val == __old)\n \t  {\n \t    lock_guard<mutex> __l(_M_mtx);\n-\t    _M_cv.wait(_M_mtx);\n+\t    __atomic_load(__addr, &__val, __ATOMIC_RELAXED);\n+\t    if (__val == __old)\n+\t      _M_cv.wait(_M_mtx);\n \t  }\n #endif // __GLIBCXX_HAVE_PLATFORM_WAIT\n       }\n@@ -297,20 +306,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    , _M_addr(_S_wait_addr(__addr, &_M_w._M_ver))\n \t  { }\n \n-\tbool\n-\t_M_laundered() const\n-\t{ return _M_addr == &_M_w._M_ver; }\n-\n \tvoid\n-\t_M_notify(bool __all, bool __bare = false)\n-\t{\n-\t  if (_M_laundered())\n-\t    {\n-\t      __atomic_fetch_add(_M_addr, 1, __ATOMIC_SEQ_CST);\n-\t      __all = true;\n-\t    }\n-\t  _M_w._M_notify(_M_addr, __all, __bare);\n-\t}\n+\t_M_notify(bool __all, bool __bare = false) noexcept\n+\t{ _M_w._M_notify(_M_addr, __all, __bare); }\n \n \ttemplate<typename _Up, typename _ValFn,\n \t\t typename _Spin = __default_spin_policy>"}]}