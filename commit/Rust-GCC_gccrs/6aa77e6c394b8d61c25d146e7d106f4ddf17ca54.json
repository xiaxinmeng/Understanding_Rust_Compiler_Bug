{"sha": "6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhNzdlNmMzOTRiOGQ2MWMyNWQxNDZlN2QxMDZmNGRkZjE3Y2E1NA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-02-22T00:09:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-22T00:09:04Z"}, "message": "attr-alwaysinline.c: New.\n\n2002-02-21  Aldy Hernandez  <aldyh@redhat.com>\n\n        * gcc.dg/attr-alwaysinline.c: New.\n\n        * c-common.c (c_common_post_options): Set inline trees by\n        default.\n\n        * doc/extend.texi (Function Attributes): Document always_inline\n        attribute.\n        Update documentation about inlining when not optimizing.\n\n        * cp/decl.c (duplicate_decls): Merge always_inline attribute.\n\n        * cp/tree.c (cp_cannot_inline_tree_fn): Do not inline at -O0\n        unless DECL_ALWAYS_INLINE.\n\n        * c-objc-common.c (c_cannot_inline_tree_fn): Do not inline at -O0\n        unless DECL_ALWAYS_INLINE.\n        (c_disregard_inline_limits): Disregard if always_inline set.\n\n        * langhooks.c (lhd_tree_inlining_disregard_inline_limits):\n        Disregard if always_inline set.\n        (lhd_tree_inlining_cannot_inline_tree_fn): Do not inline at -O0\n        unless DECL_ALWAYS_INLINE.\n\n        * attribs.c (handle_always_inline_attribute): New.\n        (c_common_attribute_table): Add always_inline.\n\n        * config/rs6000/altivec.h: Add prototypes for builtins\n        requiring the always_inline attribute.\n\nFrom-SVN: r49947", "tree": {"sha": "81ecf94407355c68f26f5bc1ca604c5ff588e9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ecf94407355c68f26f5bc1ca604c5ff588e9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c410d49e434d06e93c9163eda0a26891e6116a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c410d49e434d06e93c9163eda0a26891e6116a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c410d49e434d06e93c9163eda0a26891e6116a7e"}], "stats": {"total": 162, "additions": 151, "deletions": 11}, "files": [{"sha": "347c7f8461503bd8f48622cb8646abfd840b5611", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -1,3 +1,34 @@\n+2002-02-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* testsuite/gcc.dg/attr-alwaysinline.c: New.\n+\n+\t* c-common.c (c_common_post_options): Set inline trees by\n+\tdefault.\n+\n+\t* doc/extend.texi (Function Attributes): Document always_inline\n+\tattribute.\n+\tUpdate documentation about inlining when not optimizing.\n+\n+\t* cp/decl.c (duplicate_decls): Merge always_inline attribute.\n+\n+\t* cp/tree.c (cp_cannot_inline_tree_fn): Do not inline at -O0\n+\tunless DECL_ALWAYS_INLINE.\n+\n+\t* c-objc-common.c (c_cannot_inline_tree_fn): Do not inline at -O0\n+\tunless DECL_ALWAYS_INLINE.\n+\t(c_disregard_inline_limits): Disregard if always_inline set.\n+\n+\t* langhooks.c (lhd_tree_inlining_disregard_inline_limits):\n+\tDisregard if always_inline set.\n+\t(lhd_tree_inlining_cannot_inline_tree_fn): Do not inline at -O0\n+\tunless DECL_ALWAYS_INLINE.\n+\n+\t* attribs.c (handle_always_inline_attribute): New.\n+\t(c_common_attribute_table): Add always_inline.\n+\n+\t* config/rs6000/altivec.h: Add prototypes for builtins\n+\trequiring the always_inline attribute.\n+\n 2002-02-21  Eric Christopher  <echristo@redhat.com>\n \n \t* expmed.c (store_bit_field): Try to simplify the subreg"}, {"sha": "543931add01195122310a9c8137f7e7144360fc4", "filename": "gcc/attribs.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -51,6 +51,8 @@ static tree handle_noreturn_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_noinline_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n+static tree handle_always_inline_attribute PARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t    bool *));\n static tree handle_used_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_unused_attribute\tPARAMS ((tree *, tree, tree, int,\n@@ -109,6 +111,8 @@ static const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noreturn_attribute },\n   { \"noinline\",               0, 0, true,  false, false,\n \t\t\t      handle_noinline_attribute },\n+  { \"always_inline\",          0, 0, true,  false, false,\n+\t\t\t      handle_always_inline_attribute },\n   { \"used\",                   0, 0, true,  false, false,\n \t\t\t      handle_used_attribute },\n   { \"unused\",                 0, 0, false, false, false,\n@@ -563,6 +567,31 @@ handle_noinline_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle a \"always_inline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_always_inline_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      /* Do nothing else, just set the attribute.  We'll get at\n+\t it later with lookup_attribute.  */\n+    }\n+  else\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"used\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n@@ -1431,3 +1460,4 @@ strip_attrs (specs_attrs)\n \n   return specs;\n }\n+"}, {"sha": "1e49104d5631154078a7d4fd9f3eadfe7fba0e6d", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -4109,15 +4109,14 @@ c_common_post_options ()\n {\n   cpp_post_options (parse_in);\n \n+  flag_inline_trees = 1;\n+\n   /* Use tree inlining if possible.  Function instrumentation is only\n      done in the RTL level, so we disable tree inlining.  */\n   if (! flag_instrument_function_entry_exit)\n     {\n       if (!flag_no_inline)\n-\t{\n-\t  flag_inline_trees = 1;\n-\t  flag_no_inline = 1;\n-\t}\n+\tflag_no_inline = 1;\n       if (flag_inline_functions)\n \t{\n \t  flag_inline_trees = 2;"}, {"sha": "b2f996973eebf4dab27685df54ccf60a5c8c5786", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -59,6 +59,9 @@ int\n c_disregard_inline_limits (fn)\n      tree fn;\n {\n+  if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n+    return 1;\n+\n   return DECL_DECLARED_INLINE_P (fn) && DECL_EXTERNAL (fn);\n }\n \n@@ -142,6 +145,10 @@ c_cannot_inline_tree_fn (fnp)\n   tree fn = *fnp;\n   tree t;\n \n+  if (optimize == 0\n+      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n+    return 1;\n+\n   if (! function_attribute_inlinable_p (fn))\n     {\n       DECL_UNINLINABLE (fn) = 1;"}, {"sha": "b18b60d456b914b0d8de965bff69de8fcfd3a1b2", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -70,6 +70,38 @@ extern int __altivec_link_error_invalid_argument ();\n \n #ifdef __cplusplus\n \n+/* Prototypes for builtins that take literals and must always be\n+   inlined.  */\n+inline vector float vec_ctf (vector unsigned int, const char) __attribute__ ((always_inline));\n+inline vector float vec_ctf (vector signed int, const char) __attribute__ ((always_inline));\n+inline vector signed int vec_cts (vector float, const char) __attribute__ ((always_inline));\n+inline vector unsigned int vec_ctu (vector float, const char) __attribute__ ((always_inline));\n+inline void vec_dss (const char) __attribute__ ((always_inline));\n+inline void vec_dst (void *, int, const char) __attribute__ ((always_inline));\n+inline void vec_dstst (void *, int, const char) __attribute__ ((always_inline));\n+inline void vec_dststt (void *, int, const char) __attribute__ ((always_inline));\n+inline void vec_dstt (void *, int, const char) __attribute__ ((always_inline));\n+inline vector float vec_sld (vector float, vector float, const char) __attribute__ ((always_inline));\n+inline vector signed int vec_sld (vector signed int, vector signed int, const char) __attribute__ ((always_inline));\n+inline vector unsigned int vec_sld (vector unsigned int, vector unsigned int, const char) __attribute__ ((always_inline));\n+inline vector signed short vec_sld (vector signed short, vector signed short, const char) __attribute__ ((always_inline));\n+inline vector unsigned short vec_sld (vector unsigned short, vector unsigned short, const char) __attribute__ ((always_inline));\n+inline vector signed char vec_sld (vector signed char, vector signed char, const char) __attribute__ ((always_inline));\n+inline vector unsigned char vec_sld (vector unsigned char, vector unsigned char, const char) __attribute__ ((always_inline));\n+inline vector signed char vec_splat (vector signed char, const char) __attribute__ ((always_inline));\n+inline vector unsigned char vec_splat (vector unsigned char, const char) __attribute__ ((always_inline));\n+inline vector signed short vec_splat (vector signed short, const char) __attribute__ ((always_inline));\n+inline vector unsigned short vec_splat (vector unsigned short, const char) __attribute__ ((always_inline));\n+inline vector float vec_splat (vector float, const char) __attribute__ ((always_inline));\n+inline vector signed int vec_splat (vector signed int, const char) __attribute__ ((always_inline));\n+inline vector unsigned int vec_splat (vector unsigned int, const char) __attribute__ ((always_inline));\n+inline vector signed char vec_splat_s8 (const char) __attribute__ ((always_inline));\n+inline vector signed short vec_splat_s16 (const char) __attribute__ ((always_inline));\n+inline vector signed int vec_splat_s32 (const char) __attribute__ ((always_inline));\n+inline vector unsigned char vec_splat_u8 (const char) __attribute__ ((always_inline));\n+inline vector unsigned short vec_splat_u16 (const char) __attribute__ ((always_inline));\n+inline vector unsigned int vec_splat_u32 (const char) __attribute__ ((always_inline));\n+\n /* vec_abs */\n \n inline vector signed char"}, {"sha": "a91b3da3df1fb0116efbf59d8285804616502515", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -3482,6 +3482,7 @@ duplicate_decls (newdecl, olddecl)\n      except for any that we copy here from the old type.  */\n   DECL_ATTRIBUTES (newdecl)\n     = (*targetm.merge_decl_attributes) (olddecl, newdecl);\n+  decl_attributes (&newdecl, DECL_ATTRIBUTES (newdecl), 0);\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {"}, {"sha": "62f67e7e9336965838752fe75b118fb4d5d70a0a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -2099,6 +2099,10 @@ cp_cannot_inline_tree_fn (fnp)\n {\n   tree fn = *fnp;\n \n+  if (optimize == 0\n+      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n+    return 1;\n+\n   /* We can inline a template instantiation only if it's fully\n      instantiated.  */\n   if (DECL_TEMPLATE_INFO (fn)"}, {"sha": "68d0146bad8fd66361e79afd5a7779a0c2a9acff", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -1880,7 +1880,8 @@ The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n-@code{noreturn}, @code{noinline}, @code{pure}, @code{const},\n+@code{noreturn}, @code{noinline}, @code{always_inline},\n+@code{pure}, @code{const},\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc}, and\n@@ -1946,6 +1947,12 @@ volatile voidfn fatal;\n This function attribute prevents a function from being considered for\n inlining.\n \n+@cindex @code{always_inline} function attribute\n+@item always_inline\n+Generally, functions are not inlined unless optimization is specified.\n+For functions declared inline, this attribute inlines the function even\n+if no optimization level was specified.\n+\n @cindex @code{pure} function attribute\n @item pure\n Many functions have no effects except the return value and their\n@@ -3388,10 +3395,13 @@ existing semantics will remain available when @option{-std=gnu89} is\n specified, but eventually the default will be @option{-std=gnu99} and\n that will implement the C99 semantics, though it does not do so yet.)\n \n-GCC does not inline any functions when not optimizing.  It is not\n-clear whether it is better to inline or not, in this case, but we found\n-that a correct implementation when not optimizing was difficult.  So we\n-did the easy thing, and turned it off.\n+GCC does not inline any functions when not optimizing unless you specify\n+the @samp{always_inline} attribute for the function, like this:\n+\n+@example\n+/* Prototype.  */\n+inline void foo (const char) __attribute__((always_inline));\n+@end example\n \n @node Extended Asm\n @section Assembler Instructions with C Expression Operands"}, {"sha": "c189a3b50b90ce4caa4b25cacf4cfbbbba424e71", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -153,8 +153,12 @@ lhd_tree_inlining_walk_subtrees (tp,subtrees,func,data,htab)\n \n int\n lhd_tree_inlining_cannot_inline_tree_fn (fnp)\n-     tree *fnp ATTRIBUTE_UNUSED;\n+     tree *fnp;\n {\n+  if (optimize == 0\n+      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (*fnp)) == NULL)\n+    return 1;\n+\n   return 0;\n }\n \n@@ -164,8 +168,11 @@ lhd_tree_inlining_cannot_inline_tree_fn (fnp)\n \n int\n lhd_tree_inlining_disregard_inline_limits (fn)\n-     tree fn ATTRIBUTE_UNUSED;\n+     tree fn;\n {\n+  if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n+    return 1;\n+\n   return 0;\n }\n "}, {"sha": "8ff92b23a72c77c7d1d99407994e8bb43ceceb71", "filename": "gcc/testsuite/gcc.dg/attr-alwaysinline.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alwaysinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa77e6c394b8d61c25d146e7d106f4ddf17ca54/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alwaysinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alwaysinline.c?ref=6aa77e6c394b8d61c25d146e7d106f4ddf17ca54", "patch": "@@ -0,0 +1,19 @@\n+/* Test always_inline attribute, which forces inlining of functions\n+   even at no optimization.  */\n+/* Origin: Aldy Hernandez <aldyh@redhat.com>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+static inline int sabrina (void) __attribute__((always_inline));\n+\n+static inline int sabrina (void)\n+{\n+  return 13;\n+}\n+\n+int bar (void)\n+{\n+  return sabrina () + 68;\n+}\n+\n+/* { dg-final { scan-assembler-not \"sabrina\" } } */"}]}