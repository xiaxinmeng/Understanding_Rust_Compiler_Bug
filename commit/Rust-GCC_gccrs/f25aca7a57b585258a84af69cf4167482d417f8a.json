{"sha": "f25aca7a57b585258a84af69cf4167482d417f8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1YWNhN2E1N2I1ODUyNThhODRhZjY5Y2Y0MTY3NDgyZDQxN2Y4YQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-07-31T20:37:46Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1997-07-31T20:37:46Z"}, "message": "(*trunc*): Use scratch memory for output_fix_trunc.\n\nFrom-SVN: r14569", "tree": {"sha": "a05086f07da0a0777f8647872b61fec8858f54c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a05086f07da0a0777f8647872b61fec8858f54c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25aca7a57b585258a84af69cf4167482d417f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25aca7a57b585258a84af69cf4167482d417f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25aca7a57b585258a84af69cf4167482d417f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25aca7a57b585258a84af69cf4167482d417f8a/comments", "author": null, "committer": null, "parents": [{"sha": "c27d9c3bced53f0444becbb208d217944d2819cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27d9c3bced53f0444becbb208d217944d2819cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27d9c3bced53f0444becbb208d217944d2819cb"}], "stats": {"total": 182, "additions": 116, "deletions": 66}, "files": [{"sha": "3b2a4eb7cf2342bdd09f88834bfc31dbba8df0f1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 116, "deletions": 66, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25aca7a57b585258a84af69cf4167482d417f8a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25aca7a57b585258a84af69cf4167482d417f8a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f25aca7a57b585258a84af69cf4167482d417f8a", "patch": "@@ -1,4 +1,4 @@\n-;; GCC machine description for Intel X86.\n+; GCC machine description for Intel X86.\n ;; Copyright (C) 1988, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n ;; Mostly by William Schelter.\n \n@@ -1316,7 +1316,7 @@\n \n   if (STACK_TOP_P (operands[1]) && NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -1502,7 +1502,7 @@\n \n   if (STACK_TOP_P (operands[1]) && NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -1686,7 +1686,7 @@\n \n   if (STACK_TOP_P (operands[1]) && NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -2186,7 +2186,7 @@\n \n   if (NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -2221,7 +2221,7 @@\n \n   if (NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -2256,7 +2256,7 @@\n \n   if (NON_STACK_REG_P (operands[0]))\n     {\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n \n@@ -2332,7 +2332,7 @@\n \t  output_asm_insn (AS1 (fld,%y1), operands);\n \t  stack_top_dies = 1;\n \t}\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n   else if (GET_CODE (operands[0]) == MEM)\n@@ -2365,7 +2365,7 @@\n \t  output_asm_insn (AS1 (fld,%y1), operands);\n \t  stack_top_dies = 1;\n \t}\n-      output_to_reg (operands[0], stack_top_dies);\n+      output_to_reg (operands[0], stack_top_dies, 0);\n       RET;\n     }\n   else if (GET_CODE (operands[0]) == MEM)\n@@ -2407,7 +2407,7 @@\n   operands[3] = gen_lowpart (SImode, operands[2]);\n   operands[4] = gen_reg_rtx (XFmode);\n   operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fixuns_truncdfsi2\"\n@@ -2428,7 +2428,7 @@\n   operands[3] = gen_lowpart (SImode, operands[2]);\n   operands[4] = gen_reg_rtx (DFmode);\n   operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fixuns_truncsfsi2\"\n@@ -2449,7 +2449,7 @@\n   operands[3] = gen_lowpart (SImode, operands[2]);\n   operands[4] = gen_reg_rtx (SFmode);\n   operands[5] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[6] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[6] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n ;; Signed conversion to DImode.\n@@ -2469,7 +2469,7 @@\n   operands[1] = copy_to_mode_reg (XFmode, operands[1]);\n   operands[2] = gen_reg_rtx (XFmode);\n   operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[4] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fix_truncdfdi2\"\n@@ -2487,7 +2487,7 @@\n   operands[1] = copy_to_mode_reg (DFmode, operands[1]);\n   operands[2] = gen_reg_rtx (DFmode);\n   operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[4] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fix_truncsfdi2\"\n@@ -2505,7 +2505,7 @@\n   operands[1] = copy_to_mode_reg (SFmode, operands[1]);\n   operands[2] = gen_reg_rtx (SFmode);\n   operands[3] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[4] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[4] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n ;; These match a signed conversion of either DFmode or SFmode to DImode.\n@@ -2515,7 +2515,7 @@\n \t(fix:DI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -2525,7 +2525,7 @@\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -2535,7 +2535,7 @@\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n    (clobber (match_dup 1))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -2553,7 +2553,7 @@\n   \"\n {\n   operands[2] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[3] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[3] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fix_truncdfsi2\"\n@@ -2567,7 +2567,7 @@\n   \"\n {\n   operands[2] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[3] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[3] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_expand \"fix_truncsfsi2\"\n@@ -2581,14 +2581,14 @@\n   \"\n {\n   operands[2] = (rtx) assign_386_stack_local (SImode, 0);\n-  operands[3] = (rtx) assign_386_stack_local (SImode, 1);\n+  operands[3] = (rtx) assign_386_stack_local (DImode, 1);\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:XF (match_operand:XF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -2597,7 +2597,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -2606,7 +2606,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"m\"))\n-   (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n+   (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n   \"* return output_fix_trunc (insn, operands);\")\n@@ -7270,7 +7270,13 @@ byte_xor_operation:\n   else if (which_alternative == 3)\n     {\n       /* r <- cond ? arg1 : arg2 */\n-    operands[5] = gen_label_rtx ();\n+    rtx xops[3];\n+\n+    xops[0] = gen_label_rtx ();\n+    xops[1] = gen_label_rtx ();\n+    xops[2] = operands[1];\n+\n+    output_asm_insn (\\\"j%c2 %l0\\\", xops);\n     if (! rtx_equal_p (operands[0], operands[2]))\n        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n          {\n@@ -7279,18 +7285,19 @@ byte_xor_operation:\n          }\n        else\n       output_asm_insn (AS2 (mov%z0,%2,%0), operands);\n+    output_asm_insn (\\\"jmp %l1\\\", xops);\n+    ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[0]));\n     if (! rtx_equal_p (operands[0], operands[3]))\n       {\n-        output_asm_insn (\\\"j%C1 %l5\\\", operands);\n         if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n           {\n             output_asm_insn (AS2 (mov%z2,%3,%4), operands);\n             output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n           }\n         else\n       output_asm_insn (AS2 (mov%z0,%3,%0), operands);\n-        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n       }\n+    ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[1]));\n     }  \n   RET;\n }\")\n@@ -7324,7 +7331,13 @@ byte_xor_operation:\n   else if (which_alternative == 3)\n     {\n       /* r <- cond ? arg1 : arg2 */\n-    operands[5] = gen_label_rtx ();\n+    rtx xops[3];\n+\n+    xops[0] = gen_label_rtx ();\n+    xops[1] = gen_label_rtx ();\n+    xops[2] = operands[1];\n+\n+    output_asm_insn (\\\"j%c2 %l0\\\", xops);\n     if (! rtx_equal_p (operands[0], operands[2]))\n        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n          {\n@@ -7333,18 +7346,19 @@ byte_xor_operation:\n          }\n        else\n       output_asm_insn (AS2 (mov%z0,%2,%0), operands);\n+    output_asm_insn (\\\"jmp %l1\\\", xops);\n+    ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[0]));\n     if (! rtx_equal_p (operands[0], operands[3]))\n       {\n-        output_asm_insn (\\\"j%C1 %l5\\\", operands);\n         if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n           {\n             output_asm_insn (AS2 (mov%z2,%3,%4), operands);\n             output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n           }\n         else\n       output_asm_insn (AS2 (mov%z0,%3,%0), operands);\n-        ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n       }\n+    ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[1]));\n     }  \n   RET;\n }\")\n@@ -7358,6 +7372,16 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  int i;\n+  \n+  for (i = 2; i <= 3; i++)\n+   {\n+     if ((reload_in_progress | reload_completed) == 0\n+       && CONSTANT_P (operands[i]))\n+       {\n+         operands[i] = force_const_mem (SFmode, operands[i]);\n+       }\n+     }\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n }\")\n \n@@ -7370,6 +7394,16 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  int i;\n+  \n+  for (i = 2; i <= 3; i++)\n+   {\n+     if ((reload_in_progress | reload_completed) == 0\n+       && CONSTANT_P (operands[i]))\n+       {\n+         operands[i] = force_const_mem (DFmode, operands[i]);\n+       }\n+     }\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n }\")\n \n@@ -7382,11 +7416,21 @@ byte_xor_operation:\n   \"TARGET_CMOVE\"\n   \"\n {\n+  int i;\n+  \n+  for (i = 2; i <= 3; i++)\n+   {\n+     if ((reload_in_progress | reload_completed) == 0\n+       && CONSTANT_P (operands[i]))\n+       {\n+         operands[i] = force_const_mem (XFmode, operands[i]);\n+       }\n+     }\n   operands[4] = i386_compare_gen (i386_compare_op0, i386_compare_op1);\n }\")\n \n (define_insn \"movsfcc_1\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=t,=t,f,fFm\")\n+  [(set (match_operand:SF 0 \"general_operand\" \"=f,=f,=f,=f\")\n \t(if_then_else:SF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n \t\t      (match_operand:SF 2 \"general_operand\" \"0,f,f,fFm\")\n@@ -7412,35 +7456,37 @@ byte_xor_operation:\n     }\n   else if (which_alternative == 3)\n     {\n-      rtx xops[2];\n-\n       /* r <- cond ? arg1 : arg2 */\n-      operands[4] = gen_label_rtx ();\n+      rtx xops[3];\n+\n+      xops[0] = gen_label_rtx ();\n+      xops[1] = gen_label_rtx ();\n+      xops[2] = operands[1];\n \n+      output_asm_insn (\\\"j%f2 %l0\\\", xops);\n       if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n \toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n       else\n         {\n-          xops[0] = operands[0];\n-          xops[1] = operands[2];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[2] = XEXP (operands[2], 0);\n+\t  output_asm_insn (AS1 (fld%z2,%y2), operands);\n         }\n-      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      output_asm_insn (\\\"jmp %l1\\\", xops);\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[0]));\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n \t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n-          xops[0] = operands[0];\n-\t  xops[1] = operands[3];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[3] = XEXP (operands[3], 0);\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n \t}\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[1]));\n }\n   RET;\n }\")\n \n (define_insn \"movdfcc_1\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=t,=t,f,fFm\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=f,=f,=f,=f\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n \t\t      (match_operand:DF 2 \"general_operand\" \"0,f,f,fFm\")\n@@ -7466,35 +7512,37 @@ byte_xor_operation:\n     }\n   else if (which_alternative == 3)\n     {\n-      rtx xops[2];\n-\n       /* r <- cond ? arg1 : arg2 */\n-      operands[4] = gen_label_rtx ();\n+      rtx xops[3];\n+\n+      xops[0] = gen_label_rtx ();\n+      xops[1] = gen_label_rtx ();\n+      xops[2] = operands[1];\n \n+      output_asm_insn (\\\"j%f2 %l0\\\", xops);\n       if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n \toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n       else\n         {\n-          xops[0] = operands[0];\n-          xops[1] = operands[2];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[2] = XEXP (operands[2], 0);\n+\t  output_asm_insn (AS1 (fld%z2,%y2), operands);\n         }\n-      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      output_asm_insn (\\\"jmp %l1\\\", xops);\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[0]));\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n \t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n-          xops[0] = operands[0];\n-\t  xops[1] = operands[3];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[3] = XEXP (operands[3], 0);\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n \t}\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[1]));\n }\n   RET;\n }\")\n \n (define_insn \"movxfcc_1\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=t,=t,f,fFm\")\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,=f,=f,=f\")\n \t(if_then_else:XF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"0,f,f,fFm\")\n@@ -7520,29 +7568,31 @@ byte_xor_operation:\n     }\n   else if (which_alternative == 3)\n     {\n-      rtx xops[2];\n-\n       /* r <- cond ? arg1 : arg2 */\n-      operands[4] = gen_label_rtx ();\n+      rtx xops[3];\n \n+      xops[0] = gen_label_rtx ();\n+      xops[1] = gen_label_rtx ();\n+      xops[2] = operands[1];\n+\n+      output_asm_insn (\\\"j%f2 %l0\\\", xops);\n       if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n \toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n       else\n         {\n-          xops[0] = operands[0];\n-          xops[1] = operands[2];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[2] = XEXP (operands[2], 0);\n+\t  output_asm_insn (AS1 (fld%z2,%y2), operands);\n         }\n-      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      output_asm_insn (\\\"jmp %l1\\\", xops);\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[0]));\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n \t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n-          xops[0] = operands[0];\n-\t  xops[1] = operands[3];\n-\t  output_asm_insn (singlemove_string (xops), xops);\n+\t  operands[3] = XEXP (operands[3], 0);\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n \t}\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (xops[1]));\n }\n   RET;\n }\")"}]}