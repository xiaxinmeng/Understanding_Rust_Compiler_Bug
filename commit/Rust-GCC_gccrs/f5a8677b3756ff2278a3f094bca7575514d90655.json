{"sha": "f5a8677b3756ff2278a3f094bca7575514d90655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhODY3N2IzNzU2ZmYyMjc4YTNmMDk0YmNhNzU3NTUxNGQ5MDY1NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-12T07:58:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-12T07:58:43Z"}, "message": "re PR c++/67557 (Calling copy constructor of base class in constructor of derived class produces crashing code)\n\n\tPR c++/67557\n\n\t* expr.c (store_field): Call store_constructor directly when\n\tstoring a CONSTRUCTOR into a target smaller than its type.\n\tGuard against unsafe bitwise copy.\n\nFrom-SVN: r228704", "tree": {"sha": "4b583f1035c03ad2ebaa0d9fcea61f20f3086f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b583f1035c03ad2ebaa0d9fcea61f20f3086f54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a8677b3756ff2278a3f094bca7575514d90655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a8677b3756ff2278a3f094bca7575514d90655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a8677b3756ff2278a3f094bca7575514d90655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a8677b3756ff2278a3f094bca7575514d90655/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5330a79d3409f2e0f0dfd314414e53e29136cf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5330a79d3409f2e0f0dfd314414e53e29136cf89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5330a79d3409f2e0f0dfd314414e53e29136cf89"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "1ce0fbb896a679d5e9ebfc76dcde7386f3ca4e96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5a8677b3756ff2278a3f094bca7575514d90655", "patch": "@@ -1,3 +1,10 @@\n+2015-10-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67557\n+\t* expr.c (store_field): Call store_constructor directly when\n+\tstoring a CONSTRUCTOR into a target smaller than its type.\n+\tGuard against unsafe bitwise copy.\n+\n 2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraphbuild.c (compute_call_stmt_bb_frequency): Use"}, {"sha": "595324dc3959ba491ea4526b99ff05f9f3b7a734", "filename": "gcc/expr.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f5a8677b3756ff2278a3f094bca7575514d90655", "patch": "@@ -6616,7 +6616,11 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t operations.  */\n       || (bitsize >= 0\n \t  && TREE_CODE (TYPE_SIZE (TREE_TYPE (exp))) == INTEGER_CST\n-\t  && compare_tree_int (TYPE_SIZE (TREE_TYPE (exp)), bitsize) != 0)\n+\t  && compare_tree_int (TYPE_SIZE (TREE_TYPE (exp)), bitsize) != 0\n+\t  /* Except for initialization of full bytes from a CONSTRUCTOR, which\n+\t     we will handle specially below.  */\n+\t  && !(TREE_CODE (exp) == CONSTRUCTOR\n+\t       && bitsize % BITS_PER_UNIT == 0))\n       /* If we are expanding a MEM_REF of a non-BLKmode non-addressable\n          decl we must use bitfield operations.  */\n       || (bitsize >= 0\n@@ -6629,6 +6633,9 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n       rtx temp;\n       gimple *nop_def;\n \n+      /* Using bitwise copy is not safe for TREE_ADDRESSABLE types.  */\n+      gcc_assert (!TREE_ADDRESSABLE (TREE_TYPE (exp)));\n+\n       /* If EXP is a NOP_EXPR of precision less than its mode, then that\n \t implies a mask operation.  If the precision is the same size as\n \t the field we're storing into, that mask is redundant.  This is\n@@ -6743,6 +6750,15 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n       if (!MEM_KEEP_ALIAS_SET_P (to_rtx) && MEM_ALIAS_SET (to_rtx) != 0)\n \tset_mem_alias_set (to_rtx, alias_set);\n \n+      /* Above we avoided using bitfield operations for storing a CONSTRUCTOR\n+\t into a target smaller than its type; handle that case now.  */\n+      if (TREE_CODE (exp) == CONSTRUCTOR && bitsize >= 0)\n+\t{\n+\t  gcc_assert (bitsize % BITS_PER_UNIT == 0);\n+\t  store_constructor (exp, to_rtx, 0, bitsize/BITS_PER_UNIT);\n+\t  return to_rtx;\n+\t}\n+\n       return store_expr (exp, to_rtx, 0, nontemporal);\n     }\n }"}, {"sha": "bcd6b42586d82f51d2317d4dfbb5cc282fab1361", "filename": "gcc/testsuite/g++.dg/init/vbase1.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a8677b3756ff2278a3f094bca7575514d90655/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fvbase1.C?ref=f5a8677b3756ff2278a3f094bca7575514d90655", "patch": "@@ -1,4 +1,5 @@\n // PR c++/50618\n+// { dg-options \"-fdump-rtl-expand\" }\n // { dg-do run }\n \n struct Base\n@@ -37,3 +38,8 @@ int main(int, char**)\n     Diamond x(2);\n     x.printText();\n }\n+\n+// Verify that the SubB() mem-initializer is storing 0 directly into\n+// this->D.whatever rather than into a stack temp that is then copied into the\n+// base field.\n+// { dg-final { scan-rtl-dump \"set \\[^\\n\\]*\\n\\[^\\n\\]*this\\[^\\n\\]*\\n\\[^\\n\\]*const_int 0\" \"expand\" } }"}]}