{"sha": "0ce42fe12b8e909f30bd57ab24e739d7d6218650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlNDJmZTEyYjhlOTA5ZjMwYmQ1N2FiMjRlNzM5ZDdkNjIxODY1MA==", "commit": {"author": {"name": "Andrew Waterman", "email": "andrew@sifive.com", "date": "2018-01-23T23:06:48Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-01-23T23:06:48Z"}, "message": "RISC-V: Add -mpreferred-stack-boundary option.\n\n\t2018-01-23  Andrew Waterman  <andrew@sifive.com>\n\tgcc/\n\t* config/riscv/riscv.c (riscv_stack_boundary): New.\n\t(riscv_option_override): Set riscv_stack_boundary.  Handle\n\triscv_preferred_stack_boundary_arg.\n\t* config/riscv/riscv.h (MIN_STACK_BOUNDARY, ABI_STACK_BOUNDARY): New.\n\t(BIGGEST_ALIGNMENT): Set to STACK_BOUNDARY.\n\t(STACK_BOUNDARY): Set to riscv_stack_boundary.\n\t(RISCV_STACK_ALIGN): Use STACK_BOUNDARY.\n\t* config/riscv/riscv.opt (mpreferred-stack-boundary): New.\n\t* doc/invoke.tex (RISC-V Options): Add -mpreferred-stack-boundary.\n\nCo-Authored-By: Jim Wilson <jimw@sifive.com>\n\nFrom-SVN: r257005", "tree": {"sha": "c81447dc4719ae395b048f87780595ce6d4ccd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c81447dc4719ae395b048f87780595ce6d4ccd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ce42fe12b8e909f30bd57ab24e739d7d6218650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce42fe12b8e909f30bd57ab24e739d7d6218650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce42fe12b8e909f30bd57ab24e739d7d6218650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce42fe12b8e909f30bd57ab24e739d7d6218650/comments", "author": {"login": "aswaterman", "id": 1031106, "node_id": "MDQ6VXNlcjEwMzExMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1031106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswaterman", "html_url": "https://github.com/aswaterman", "followers_url": "https://api.github.com/users/aswaterman/followers", "following_url": "https://api.github.com/users/aswaterman/following{/other_user}", "gists_url": "https://api.github.com/users/aswaterman/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswaterman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswaterman/subscriptions", "organizations_url": "https://api.github.com/users/aswaterman/orgs", "repos_url": "https://api.github.com/users/aswaterman/repos", "events_url": "https://api.github.com/users/aswaterman/events{/privacy}", "received_events_url": "https://api.github.com/users/aswaterman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0889f16859b68006ddc5dd4d9658b2c6fb93083c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889f16859b68006ddc5dd4d9658b2c6fb93083c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0889f16859b68006ddc5dd4d9658b2c6fb93083c"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "899b13e32f82aa992ddb216eae4349185dde20a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ce42fe12b8e909f30bd57ab24e739d7d6218650", "patch": "@@ -1,3 +1,16 @@\n+2018-01-23  Andrew Waterman  <andrew@sifive.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_stack_boundary): New.\n+\t(riscv_option_override): Set riscv_stack_boundary.  Handle\n+\triscv_preferred_stack_boundary_arg.\n+\t* config/riscv/riscv.h (MIN_STACK_BOUNDARY, ABI_STACK_BOUNDARY): New.\n+\t(BIGGEST_ALIGNMENT): Set to STACK_BOUNDARY.\n+\t(STACK_BOUNDARY): Set to riscv_stack_boundary.\n+\t(RISCV_STACK_ALIGN): Use STACK_BOUNDARY.\n+\t* config/riscv/riscv.opt (mpreferred-stack-boundary): New.\n+\t* doc/invoke.tex (RISC-V Options): Add -mpreferred-stack-boundary.\n+\n 2018-01-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/83905"}, {"sha": "4ef7a1774c4bba25c1da7b3c552f89c48b4f8bbb", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=0ce42fe12b8e909f30bd57ab24e739d7d6218650", "patch": "@@ -222,6 +222,9 @@ struct riscv_cpu_info {\n /* Whether unaligned accesses execute very slowly.  */\n bool riscv_slow_unaligned_access_p;\n \n+/* Stack alignment to assume/maintain.  */\n+unsigned riscv_stack_boundary;\n+\n /* Which tuning parameters to use.  */\n static const struct riscv_tune_info *tune_info;\n \n@@ -4111,6 +4114,20 @@ riscv_option_override (void)\n   /* We do not yet support ILP32 on RV64.  */\n   if (BITS_PER_WORD != POINTER_SIZE)\n     error (\"ABI requires -march=rv%d\", POINTER_SIZE);\n+\n+  /* Validate -mpreferred-stack-boundary= value.  */\n+  riscv_stack_boundary = ABI_STACK_BOUNDARY;\n+  if (riscv_preferred_stack_boundary_arg)\n+    {\n+      int min = ctz_hwi (MIN_STACK_BOUNDARY / 8);\n+      int max = 8;\n+\n+      if (!IN_RANGE (riscv_preferred_stack_boundary_arg, min, max))\n+\terror (\"-mpreferred-stack-boundary=%d must be between %d and %d\",\n+\t       riscv_preferred_stack_boundary_arg, min, max);\n+\n+      riscv_stack_boundary = 8 << riscv_preferred_stack_boundary_arg;\n+    }\n }\n \n /* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */"}, {"sha": "a002bff4480b4e706a452b966c2646b00ea966b7", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=0ce42fe12b8e909f30bd57ab24e739d7d6218650", "patch": "@@ -123,8 +123,14 @@ along with GCC; see the file COPYING3.  If not see\n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY (TARGET_RVC ? 16 : 32)\n \n+/* The smallest supported stack boundary the calling convention supports.  */\n+#define MIN_STACK_BOUNDARY (2 * BITS_PER_WORD)\n+\n+/* The ABI stack alignment.  */\n+#define ABI_STACK_BOUNDARY 128\n+\n /* There is no point aligning anything to a rounder boundary than this.  */\n-#define BIGGEST_ALIGNMENT 128\n+#define BIGGEST_ALIGNMENT STACK_BOUNDARY\n \n /* The user-level ISA permits unaligned accesses, but they are not required\n    of the privileged architecture.  */\n@@ -472,8 +478,8 @@ enum reg_class\n    `crtl->outgoing_args_size'.  */\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n-#define STACK_BOUNDARY 128\n-\f\n+#define STACK_BOUNDARY riscv_stack_boundary\n+\n /* Symbolic macros for the registers used to return integer and floating\n    point values.  */\n \n@@ -528,8 +534,9 @@ typedef struct {\n \n #define EPILOGUE_USES(REGNO)\t((REGNO) == RETURN_ADDR_REGNUM)\n \n-/* ABI requires 16-byte alignment, even on RV32. */\n-#define RISCV_STACK_ALIGN(LOC) (((LOC) + 15) & -16)\n+/* Align based on stack boundary, which might have been set by the user.  */\n+#define RISCV_STACK_ALIGN(LOC) \\\n+  (((LOC) + ((STACK_BOUNDARY/8)-1)) & -(STACK_BOUNDARY/8))\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}, {"sha": "581a26bb5c1e108fd950183ec6655ace3ae47f59", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=0ce42fe12b8e909f30bd57ab24e739d7d6218650", "patch": "@@ -33,6 +33,10 @@ mabi=\n Target Report RejectNegative Joined Enum(abi_type) Var(riscv_abi) Init(ABI_ILP32)\n Specify integer and floating-point calling convention.\n \n+mpreferred-stack-boundary=\n+Target RejectNegative Joined UInteger Var(riscv_preferred_stack_boundary_arg)\n+Attempt to keep stack aligned to this power of 2.\n+\n Enum\n Name(abi_type) Type(enum riscv_abi_type)\n Supported ABIs (for use with the -mabi= option):"}, {"sha": "f066349c2fff008ca7e266197282843def7e3017", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce42fe12b8e909f30bd57ab24e739d7d6218650/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0ce42fe12b8e909f30bd57ab24e739d7d6218650", "patch": "@@ -992,6 +992,7 @@ See RS/6000 and PowerPC Options.\n -mdiv  -mno-div @gol\n -march=@var{ISA-string} @gol\n -mtune=@var{processor-string} @gol\n+-mpreferred-stack-boundary=@var{num} @gol\n -msmall-data-limit=@var{N-bytes} @gol\n -msave-restore  -mno-save-restore @gol\n -mstrict-align -mno-strict-align @gol\n@@ -22072,6 +22073,16 @@ lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n Optimize the output for the given processor, specified by microarchitecture\n name.\n \n+@item -mpreferred-stack-boundary=@var{num}\n+@opindex mpreferred-stack-boundary\n+Attempt to keep the stack boundary aligned to a 2 raised to @var{num}\n+byte boundary.  If @option{-mpreferred-stack-boundary} is not specified,\n+the default is 4 (16 bytes or 128-bits).\n+\n+@strong{Warning:} If you use this switch, then you must build all modules with\n+the same value, including any libraries.  This includes the system libraries\n+and startup modules.\n+\n @item -msmall-data-limit=@var{n}\n @opindex msmall-data-limit\n Put global and static data smaller than @var{n} bytes into a special section"}]}