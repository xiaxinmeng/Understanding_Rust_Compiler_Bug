{"sha": "496f773bdaa0be769c3d0e05b3598efa86dcefe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2Zjc3M2JkYWEwYmU3NjljM2QwZTA1YjM1OThlZmE4NmRjZWZlMQ==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-17T07:31:05Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-19T10:34:59Z"}, "message": "Added `equals` method to `BaseType`\n\nThe resulting code looks quite similar to `unify`, except that it\ndoesn't save refs, so it should be more efficient. However the\nintroduced complexity is a bit worrying.\n\nThis commit also adjusted some const qualifiers of `BaseType`\nmethods where necessary.", "tree": {"sha": "1938f737d11215ea960d793e02e16d7988eb7ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1938f737d11215ea960d793e02e16d7988eb7ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/496f773bdaa0be769c3d0e05b3598efa86dcefe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f773bdaa0be769c3d0e05b3598efa86dcefe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496f773bdaa0be769c3d0e05b3598efa86dcefe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f773bdaa0be769c3d0e05b3598efa86dcefe1/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2906e5e4fccc2bc6d848a43be7e569036641e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2906e5e4fccc2bc6d848a43be7e569036641e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2906e5e4fccc2bc6d848a43be7e569036641e6"}], "stats": {"total": 159, "additions": 154, "deletions": 5}, "files": [{"sha": "75fb82746528eab0bff1b2330a15e73a8a8804dc", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f773bdaa0be769c3d0e05b3598efa86dcefe1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f773bdaa0be769c3d0e05b3598efa86dcefe1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=496f773bdaa0be769c3d0e05b3598efa86dcefe1", "patch": "@@ -130,6 +130,20 @@ StructFieldType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+StructFieldType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const StructFieldType &> (other);\n+      return get_field_type () == other2.get_field_type ();\n+    }\n+}\n+\n BaseType *\n StructFieldType::clone ()\n {\n@@ -165,6 +179,31 @@ ADTType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+ADTType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const ADTType &> (other);\n+      if (num_fields () != other2.num_fields ())\n+\t{\n+\t  return false;\n+\t}\n+      for (int i = 0; i < num_fields (); i++)\n+\t{\n+\t  if (!get_field (i)->equals (*other2.get_field (i)))\n+\t    {\n+\t      return false;\n+\t    }\n+\t}\n+      return true;\n+    }\n+}\n+\n BaseType *\n ADTType::clone ()\n {\n@@ -211,6 +250,31 @@ TupleType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+TupleType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const TupleType &> (other);\n+      if (num_fields () != other2.num_fields ())\n+\t{\n+\t  return false;\n+\t}\n+      for (int i = 0; i < num_fields (); i++)\n+\t{\n+\t  if (!get_field (i)->equals (*other2.get_field (i)))\n+\t    {\n+\t      return false;\n+\t    }\n+\t}\n+      return true;\n+    }\n+}\n+\n BaseType *\n TupleType::clone ()\n {\n@@ -247,6 +311,31 @@ FnType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+FnType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const FnType &> (other);\n+      if (!get_return_type ()->equals (*other2.get_return_type ()))\n+\treturn false;\n+      if (num_params () != other2.num_params ())\n+\treturn false;\n+      for (int i = 0; i < num_params (); i++)\n+\t{\n+\t  auto lhs = param_at (i).second;\n+\t  auto rhs = other2.param_at (i).second;\n+\t  if (!lhs->equals (*rhs))\n+\t    return false;\n+\t}\n+      return true;\n+    }\n+}\n+\n BaseType *\n FnType::clone ()\n {\n@@ -279,6 +368,21 @@ ArrayType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+ArrayType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const ArrayType &> (other);\n+      return get_type () == other2.get_type ()\n+\t     && get_capacity () == other2.get_capacity ();\n+    }\n+}\n+\n BaseType *\n ArrayType::get_type () const\n {\n@@ -529,6 +633,20 @@ ReferenceType::unify (BaseType *other)\n   return r.unify (other);\n }\n \n+bool\n+ReferenceType::equals (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    {\n+      return false;\n+    }\n+  else\n+    {\n+      auto other2 = static_cast<const ReferenceType &> (other);\n+      return get_base () == other2.get_base ();\n+    }\n+}\n+\n const BaseType *\n ReferenceType::get_base () const\n {"}, {"sha": "2be807bc1c67de6d5a98ff1efdd88ff65d75d4a8", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f773bdaa0be769c3d0e05b3598efa86dcefe1/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f773bdaa0be769c3d0e05b3598efa86dcefe1/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=496f773bdaa0be769c3d0e05b3598efa86dcefe1", "patch": "@@ -73,6 +73,15 @@ class BaseType\n      releasing the memory of the returned ty. */\n   virtual BaseType *unify (BaseType *other) = 0;\n \n+  /* Check value equality between two ty. Type inference rules are ignored. Two\n+     ty are considered equal if they're of the same kind, and\n+       1. (For ADTs, arrays, tuples, refs) have the same underlying ty\n+       2. (For functions) have the same signature */\n+  virtual bool equals (const BaseType &other) const\n+  {\n+    return get_kind () == other.get_kind ();\n+  }\n+\n   virtual bool is_unit () const { return kind == TypeKind::UNIT; }\n \n   TypeKind get_kind () const { return kind; }\n@@ -199,9 +208,11 @@ class StructFieldType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   std::string get_name () const { return name; }\n \n-  BaseType *get_field_type () { return ty; }\n+  BaseType *get_field_type () const { return ty; }\n \n   BaseType *clone () final override;\n \n@@ -231,6 +242,8 @@ class TupleType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   size_t num_fields () const { return fields.size (); }\n \n   BaseType *get_field (size_t index) const;\n@@ -275,14 +288,16 @@ class ADTType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   size_t num_fields () const { return fields.size (); }\n \n   std::string get_name () const { return identifier; }\n \n-  StructFieldType *get_field (size_t index) { return fields.at (index); }\n+  StructFieldType *get_field (size_t index) const { return fields.at (index); }\n \n   StructFieldType *get_field (const std::string &lookup,\n-\t\t\t      size_t *index = nullptr)\n+\t\t\t      size_t *index = nullptr) const\n   {\n     size_t i = 0;\n     for (auto &field : fields)\n@@ -341,19 +356,31 @@ class FnType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   size_t num_params () const { return params.size (); }\n \n   std::vector<std::pair<HIR::Pattern *, BaseType *> > &get_params ()\n   {\n     return params;\n   }\n \n+  const std::vector<std::pair<HIR::Pattern *, BaseType *> > &get_params () const\n+  {\n+    return params;\n+  }\n+\n   std::pair<HIR::Pattern *, BaseType *> &param_at (size_t idx)\n   {\n-    return params[idx];\n+    return params.at (idx);\n+  }\n+\n+  const std::pair<HIR::Pattern *, BaseType *> &param_at (size_t idx) const\n+  {\n+    return params.at (idx);\n   }\n \n-  BaseType *get_return_type () { return type; }\n+  BaseType *get_return_type () const { return type; }\n \n   BaseType *clone () final override;\n \n@@ -383,6 +410,8 @@ class ArrayType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   size_t get_capacity () const { return capacity; }\n \n   HirId element_type_ref () const { return element_type_id; }\n@@ -603,6 +632,8 @@ class ReferenceType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n+  virtual bool equals (const BaseType &other) const override;\n+\n   BaseType *clone () final override;\n \n private:"}]}