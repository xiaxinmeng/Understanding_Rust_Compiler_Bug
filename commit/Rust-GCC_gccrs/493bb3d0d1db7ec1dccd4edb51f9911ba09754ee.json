{"sha": "493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzYmIzZDBkMWRiN2VjMWRjY2Q0ZWRiNTFmOTkxMWJhMDk3NTRlZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-29T04:45:00Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-29T04:45:00Z"}, "message": "[RS6000] Replace TLSmode with P, and correct tls call mems\n\nThere is really no need to define a TLSmode mode iterator that is\nidentical (since !TARGET_64BIT == TARGET_32BIT) to the much used P\nmode iterator.  It's nonsense to think we might ever want to support\n32-bit TLS on 64-bit or vice versa!  The patch also fixes a minor\nerror in the call mems.  All other direct calls use (call (mem:SI ..)).\n\n\t* config/rs6000/rs6000.md (TLSmode): Delete mode iterator.  Replace\n\twith P throughout except for call mems which should use SI.\n\t(tls_abi_suffix, tls_sysv_suffix, tls_insn_suffix): Delete mode\n\tattributes.  Replace with bits, mode and ptrload respectively.\n\nFrom-SVN: r266602", "tree": {"sha": "03d3f9b125778a03499d80b39107477c22304618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d3f9b125778a03499d80b39107477c22304618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce83eeda066824074e56fbecdfcc5dd23fac6486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce83eeda066824074e56fbecdfcc5dd23fac6486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce83eeda066824074e56fbecdfcc5dd23fac6486"}], "stats": {"total": 413, "additions": 207, "deletions": 206}, "files": [{"sha": "3c9c0b450e1c619db03715d0dba0e43c90bbfd7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "patch": "@@ -1,3 +1,10 @@\n+2018-11-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.md (TLSmode): Delete mode iterator.  Replace\n+\twith P throughout except for call mems which should use SI.\n+\t(tls_abi_suffix, tls_sysv_suffix, tls_insn_suffix): Delete mode\n+\tattributes.  Replace with bits, mode and ptrload respectively.\n+\n 2018-11-29  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000-protos.h (rs6000_indirect_call_template),"}, {"sha": "81914a99c904aa38839e565c8fa2b7b629375342", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 200, "deletions": 206, "changes": 406, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493bb3d0d1db7ec1dccd4edb51f9911ba09754ee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=493bb3d0d1db7ec1dccd4edb51f9911ba09754ee", "patch": "@@ -9422,19 +9422,13 @@\n \f\n ;; TLS support.\n \n-;; Mode attributes for different ABIs.\n-(define_mode_iterator TLSmode [(SI \"! TARGET_64BIT\") (DI \"TARGET_64BIT\")])\n-(define_mode_attr tls_abi_suffix [(SI \"32\") (DI \"64\")])\n-(define_mode_attr tls_sysv_suffix [(SI \"si\") (DI \"di\")])\n-(define_mode_attr tls_insn_suffix [(SI \"wz\") (DI \"d\")])\n-\n-(define_insn_and_split \"tls_gd_aix<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n+(define_insn_and_split \"tls_gd_aix<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 3 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 4 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t \t    (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD)\n+   (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t      (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t     UNSPEC_TLSGD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n {\n@@ -9447,28 +9441,28 @@\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n-\t(unspec:TLSmode [(match_dup 1)\n-\t\t\t (match_dup 2)]\n-\t\t\tUNSPEC_TLSGD))\n+\t(unspec:P [(match_dup 1)\n+\t\t   (match_dup 2)]\n+\t\t  UNSPEC_TLSGD))\n    (parallel [(set (match_dup 0)\n-   \t     \t   (call (mem:TLSmode (match_dup 3))\n-\t\t   \t (match_dup 4)))\n-\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)\n+\t\t   (call (mem:SI (match_dup 3))\n+\t\t\t (match_dup 4)))\n+\t      (unspec:P [(match_dup 2)] UNSPEC_TLSGD)\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n   [(set_attr \"type\" \"two\")\n    (set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 16)\n-     \t\t   (const_int 12)))])\n+\t\t   (const_int 16)\n+\t\t   (const_int 12)))])\n \n-(define_insn_and_split \"tls_gd_sysv<TLSmode:tls_sysv_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 3 \"symbol_ref_operand\" \"s\"))\n+(define_insn_and_split \"tls_gd_sysv<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 3 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 4 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t \t    (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD)\n+   (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t      (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t     UNSPEC_TLSGD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n {\n@@ -9477,64 +9471,64 @@\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n-\t(unspec:TLSmode [(match_dup 1)\n-\t\t\t (match_dup 2)]\n-\t\t\tUNSPEC_TLSGD))\n+\t(unspec:P [(match_dup 1)\n+\t\t   (match_dup 2)]\n+\t\t  UNSPEC_TLSGD))\n    (parallel [(set (match_dup 0)\n-   \t     \t   (call (mem:TLSmode (match_dup 3))\n-\t\t   \t (match_dup 4)))\n-\t      (unspec:TLSmode [(match_dup 2)] UNSPEC_TLSGD)\n+\t\t   (call (mem:SI (match_dup 3))\n+\t\t\t (match_dup 4)))\n+\t      (unspec:P [(match_dup 2)] UNSPEC_TLSGD)\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn_and_split \"*tls_gd<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSGD))]\n+(define_insn_and_split \"*tls_gd<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSGD))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\"\n   \"addi %0,%1,%2@got@tlsgd\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-  \t(high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGD)))\n+\t(high:P\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGD)))\n    (set (match_dup 0)\n-   \t(lo_sum:TLSmode (match_dup 3)\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGD)))]\n+\t(lo_sum:P (match_dup 3)\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGD)))]\n {\n   operands[3] = gen_reg_rtx (TARGET_64BIT ? DImode : SImode);\n }\n   [(set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 8)\n-     \t\t   (const_int 4)))])\n-\n-(define_insn \"*tls_gd_high<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (high:TLSmode\n-       (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t       UNSPEC_TLSGD)))]\n+\t\t   (const_int 8)\n+\t\t   (const_int 4)))])\n+\n+(define_insn \"*tls_gd_high<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (high:P\n+       (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t  (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t UNSPEC_TLSGD)))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@tlsgd@ha\")\n \n-(define_insn \"*tls_gd_low<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (lo_sum:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (unspec:TLSmode [(match_operand:TLSmode 3 \"gpc_reg_operand\" \"b\")\n-\t\t\t(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t       UNSPEC_TLSGD)))]\n+(define_insn \"*tls_gd_low<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+       (unspec:P [(match_operand:P 3 \"gpc_reg_operand\" \"b\")\n+\t\t  (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t UNSPEC_TLSGD)))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addi %0,%1,%2@got@tlsgd@l\")\n \n-(define_insn \"*tls_gd_call_aix<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+(define_insn \"*tls_gd_call_aix<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 3 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD)\n+   (unspec:P [(match_operand:P 3 \"rs6000_tls_symbol_ref\" \"\")]\n+\t     UNSPEC_TLSGD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\n    && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n@@ -9544,25 +9538,25 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"*tls_gd_call_sysv<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+(define_insn \"*tls_gd_call_sysv<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 3 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t   UNSPEC_TLSGD)\n+   (unspec:P [(match_operand:P 3 \"rs6000_tls_symbol_ref\" \"\")]\n+\t     UNSPEC_TLSGD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n {\n   return rs6000_call_template (operands, 1, \"(%3@tlsgd)\");\n }\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn_and_split \"tls_ld_aix<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n+(define_insn_and_split \"tls_ld_aix<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 2 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 3 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n-\t\t   UNSPEC_TLSLD)\n+   (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")]\n+\t     UNSPEC_TLSLD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n {\n@@ -9575,26 +9569,26 @@\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n-\t(unspec:TLSmode [(match_dup 1)]\n-\t\t\tUNSPEC_TLSLD))\n+\t(unspec:P [(match_dup 1)]\n+\t\t  UNSPEC_TLSLD))\n    (parallel [(set (match_dup 0)\n-   \t     \t   (call (mem:TLSmode (match_dup 2))\n-\t\t   \t (match_dup 3)))\n-\t      (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+\t\t   (call (mem:SI (match_dup 2))\n+\t\t\t (match_dup 3)))\n+\t      (unspec:P [(const_int 0)] UNSPEC_TLSLD)\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n   [(set_attr \"type\" \"two\")\n    (set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 16)\n-     \t\t   (const_int 12)))])\n+\t\t   (const_int 16)\n+\t\t   (const_int 12)))])\n \n-(define_insn_and_split \"tls_ld_sysv<TLSmode:tls_sysv_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 2 \"symbol_ref_operand\" \"s\"))\n+(define_insn_and_split \"tls_ld_sysv<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 2 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 3 \"\" \"g\")))\n-   (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n-\t\t   UNSPEC_TLSLD)\n+   (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")]\n+\t     UNSPEC_TLSLD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4\"\n {\n@@ -9603,60 +9597,60 @@\n }\n   \"&& TARGET_TLS_MARKERS\"\n   [(set (match_dup 0)\n-\t(unspec:TLSmode [(match_dup 1)]\n-\t\t\tUNSPEC_TLSLD))\n+\t(unspec:P [(match_dup 1)]\n+\t\t  UNSPEC_TLSLD))\n    (parallel [(set (match_dup 0)\n-   \t     \t   (call (mem:TLSmode (match_dup 2))\n-\t\t   \t (match_dup 3)))\n-\t      (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+\t\t   (call (mem:SI (match_dup 2))\n+\t\t\t (match_dup 3)))\n+\t      (unspec:P [(const_int 0)] UNSPEC_TLSLD)\n \t      (clobber (reg:SI LR_REGNO))])]\n   \"\"\n   [(set_attr \"length\" \"8\")])\n \n-(define_insn_and_split \"*tls_ld<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n-\t\t\tUNSPEC_TLSLD))]\n+(define_insn_and_split \"*tls_ld<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")]\n+\t\t  UNSPEC_TLSLD))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\"\n   \"addi %0,%1,%&@got@tlsld\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 2)\n-  \t(high:TLSmode\n-\t    (unspec:TLSmode [(const_int 0) (match_dup 1)] UNSPEC_TLSLD)))\n+\t(high:P\n+\t    (unspec:P [(const_int 0) (match_dup 1)] UNSPEC_TLSLD)))\n    (set (match_dup 0)\n-   \t(lo_sum:TLSmode (match_dup 2)\n-\t    (unspec:TLSmode [(const_int 0) (match_dup 1)] UNSPEC_TLSLD)))]\n+\t(lo_sum:P (match_dup 2)\n+\t    (unspec:P [(const_int 0) (match_dup 1)] UNSPEC_TLSLD)))]\n {\n   operands[2] = gen_reg_rtx (TARGET_64BIT ? DImode : SImode);\n }\n   [(set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 8)\n-     \t\t   (const_int 4)))])\n-\n-(define_insn \"*tls_ld_high<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (high:TLSmode\n-       (unspec:TLSmode [(const_int 0)\n-\t\t\t(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")]\n-\t\t       UNSPEC_TLSLD)))]\n+\t\t   (const_int 8)\n+\t\t   (const_int 4)))])\n+\n+(define_insn \"*tls_ld_high<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (high:P\n+       (unspec:P [(const_int 0)\n+\t\t  (match_operand:P 1 \"gpc_reg_operand\" \"b\")]\n+\t\t UNSPEC_TLSLD)))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%&@got@tlsld@ha\")\n \n-(define_insn \"*tls_ld_low<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (lo_sum:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-       (unspec:TLSmode [(const_int 0)\n-                        (match_operand:TLSmode 2 \"gpc_reg_operand\" \"b\")]\n-                       UNSPEC_TLSLD)))]\n+(define_insn \"*tls_ld_low<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+       (unspec:P [(const_int 0)\n+\t\t  (match_operand:P 2 \"gpc_reg_operand\" \"b\")]\n+\t\t UNSPEC_TLSLD)))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addi %0,%1,%&@got@tlsld@l\")\n \n-(define_insn \"*tls_ld_call_aix<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+(define_insn \"*tls_ld_call_aix<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n-   (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+   (unspec:P [(const_int 0)] UNSPEC_TLSLD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && TARGET_TLS_MARKERS\n    && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_ELFv2)\"\n@@ -9666,154 +9660,154 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"*tls_ld_call_sysv<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-        (call (mem:TLSmode (match_operand:TLSmode 1 \"symbol_ref_operand\" \"s\"))\n+(define_insn \"*tls_ld_call_sysv<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+        (call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"g\")))\n-   (unspec:TLSmode [(const_int 0)] UNSPEC_TLSLD)\n+   (unspec:P [(const_int 0)] UNSPEC_TLSLD)\n    (clobber (reg:SI LR_REGNO))]\n   \"HAVE_AS_TLS && DEFAULT_ABI == ABI_V4 && TARGET_TLS_MARKERS\"\n {\n   return rs6000_call_template (operands, 1, \"(%&@tlsld)\");\n }\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"tls_dtprel_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSDTPREL))]\n+(define_insn \"tls_dtprel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSDTPREL))]\n   \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@dtprel\")\n \n-(define_insn \"tls_dtprel_ha_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSDTPRELHA))]\n+(define_insn \"tls_dtprel_ha_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSDTPRELHA))]\n   \"HAVE_AS_TLS\"\n   \"addis %0,%1,%2@dtprel@ha\")\n \n-(define_insn \"tls_dtprel_lo_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSDTPRELLO))]\n+(define_insn \"tls_dtprel_lo_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSDTPRELLO))]\n   \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@dtprel@l\")\n \n-(define_insn_and_split \"tls_got_dtprel_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSGOTDTPREL))]\n+(define_insn_and_split \"tls_got_dtprel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSGOTDTPREL))]\n   \"HAVE_AS_TLS\"\n-  \"l<TLSmode:tls_insn_suffix> %0,%2@got@dtprel(%1)\"\n+  \"<ptrload> %0,%2@got@dtprel(%1)\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-\t(high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTDTPREL)))\n+\t(high:P\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTDTPREL)))\n    (set (match_dup 0)\n-\t(lo_sum:TLSmode (match_dup 3)\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTDTPREL)))]\n+\t(lo_sum:P (match_dup 3)\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTDTPREL)))]\n {\n   operands[3] = gen_reg_rtx (TARGET_64BIT ? DImode : SImode);\n }\n   [(set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 8)\n-     \t\t   (const_int 4)))])\n-\n-(define_insn \"*tls_got_dtprel_high<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (high:TLSmode\n-       (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t       UNSPEC_TLSGOTDTPREL)))]\n+\t\t   (const_int 8)\n+\t\t   (const_int 4)))])\n+\n+(define_insn \"*tls_got_dtprel_high<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (high:P\n+       (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t  (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t UNSPEC_TLSGOTDTPREL)))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@dtprel@ha\")\n \n-(define_insn \"*tls_got_dtprel_low<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-     (lo_sum:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t (unspec:TLSmode [(match_operand:TLSmode 3 \"gpc_reg_operand\" \"b\")\n-\t\t\t  (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\t UNSPEC_TLSGOTDTPREL)))]\n+(define_insn \"*tls_got_dtprel_low<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+     (lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t (unspec:P [(match_operand:P 3 \"gpc_reg_operand\" \"b\")\n+\t\t    (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGOTDTPREL)))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n-  \"l<TLSmode:tls_insn_suffix> %0,%2@got@dtprel@l(%1)\")\n+  \"<ptrload> %0,%2@got@dtprel@l(%1)\")\n \n-(define_insn \"tls_tprel_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSTPREL))]\n+(define_insn \"tls_tprel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSTPREL))]\n   \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@tprel\")\n \n-(define_insn \"tls_tprel_ha_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSTPRELHA))]\n+(define_insn \"tls_tprel_ha_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSTPRELHA))]\n   \"HAVE_AS_TLS\"\n   \"addis %0,%1,%2@tprel@ha\")\n \n-(define_insn \"tls_tprel_lo_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSTPRELLO))]\n+(define_insn \"tls_tprel_lo_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSTPRELLO))]\n   \"HAVE_AS_TLS\"\n   \"addi %0,%1,%2@tprel@l\")\n \n ;; \"b\" output constraint here and on tls_tls input to support linker tls\n ;; optimization.  The linker may edit the instructions emitted by a\n ;; tls_got_tprel/tls_tls pair to addis,addi.\n-(define_insn_and_split \"tls_got_tprel_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSGOTTPREL))]\n+(define_insn_and_split \"tls_got_tprel_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSGOTTPREL))]\n   \"HAVE_AS_TLS\"\n-  \"l<TLSmode:tls_insn_suffix> %0,%2@got@tprel(%1)\"\n+  \"<ptrload> %0,%2@got@tprel(%1)\"\n   \"&& TARGET_CMODEL != CMODEL_SMALL\"\n   [(set (match_dup 3)\n-\t(high:TLSmode\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTTPREL)))\n+\t(high:P\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTTPREL)))\n    (set (match_dup 0)\n-\t(lo_sum:TLSmode (match_dup 3)\n-\t    (unspec:TLSmode [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTTPREL)))]\n+\t(lo_sum:P (match_dup 3)\n+\t    (unspec:P [(match_dup 1) (match_dup 2)] UNSPEC_TLSGOTTPREL)))]\n {\n   operands[3] = gen_reg_rtx (TARGET_64BIT ? DImode : SImode);\n }\n   [(set (attr \"length\")\n      (if_then_else (ne (symbol_ref \"TARGET_CMODEL\") (symbol_ref \"CMODEL_SMALL\"))\n-     \t\t   (const_int 8)\n-     \t\t   (const_int 4)))])\n-\n-(define_insn \"*tls_got_tprel_high<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=b\")\n-     (high:TLSmode\n-       (unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t(match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t       UNSPEC_TLSGOTTPREL)))]\n+\t\t   (const_int 8)\n+\t\t   (const_int 4)))])\n+\n+(define_insn \"*tls_got_tprel_high<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b\")\n+     (high:P\n+       (unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t  (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t UNSPEC_TLSGOTTPREL)))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n   \"addis %0,%1,%2@got@tprel@ha\")\n \n-(define_insn \"*tls_got_tprel_low<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-     (lo_sum:TLSmode (match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t (unspec:TLSmode [(match_operand:TLSmode 3 \"gpc_reg_operand\" \"b\")\n-\t\t\t  (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\t UNSPEC_TLSGOTTPREL)))]\n+(define_insn \"*tls_got_tprel_low<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+     (lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t (unspec:P [(match_operand:P 3 \"gpc_reg_operand\" \"b\")\n+\t\t    (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t   UNSPEC_TLSGOTTPREL)))]\n   \"HAVE_AS_TLS && TARGET_CMODEL != CMODEL_SMALL\"\n-  \"l<TLSmode:tls_insn_suffix> %0,%2@got@tprel@l(%1)\")\n+  \"<ptrload> %0,%2@got@tprel@l(%1)\")\n \n-(define_insn \"tls_tls_<TLSmode:tls_abi_suffix>\"\n-  [(set (match_operand:TLSmode 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:TLSmode [(match_operand:TLSmode 1 \"gpc_reg_operand\" \"b\")\n-\t\t\t (match_operand:TLSmode 2 \"rs6000_tls_symbol_ref\" \"\")]\n-\t\t\tUNSPEC_TLSTLS))]\n+(define_insn \"tls_tls_<bits>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(unspec:P [(match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand:P 2 \"rs6000_tls_symbol_ref\" \"\")]\n+\t\t  UNSPEC_TLSTLS))]\n   \"TARGET_ELF && HAVE_AS_TLS\"\n   \"add %0,%1,%2@tls\")\n "}]}