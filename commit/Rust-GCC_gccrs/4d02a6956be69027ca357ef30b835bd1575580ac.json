{"sha": "4d02a6956be69027ca357ef30b835bd1575580ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwMmE2OTU2YmU2OTAyN2NhMzU3ZWYzMGI4MzViZDE1NzU1ODBhYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-08-03T19:34:49Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-08-03T19:34:49Z"}, "message": "functions.h (__check_partition_lower_aux): Remove redundant comparison with pivot value.\n\n2012-08-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/functions.h (__check_partition_lower_aux): Remove\n\tredundant comparison with pivot value.\n\t(__check_partition_upper_aux): Likewise.\n\nFrom-SVN: r190134", "tree": {"sha": "955c2c5be91389fca2a91f51a44dfdd6ec1e006f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955c2c5be91389fca2a91f51a44dfdd6ec1e006f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d02a6956be69027ca357ef30b835bd1575580ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d02a6956be69027ca357ef30b835bd1575580ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d02a6956be69027ca357ef30b835bd1575580ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d02a6956be69027ca357ef30b835bd1575580ac/comments", "author": null, "committer": null, "parents": [{"sha": "a6de48da4d6b124bee8fbee74e0bfc482aab0081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6de48da4d6b124bee8fbee74e0bfc482aab0081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6de48da4d6b124bee8fbee74e0bfc482aab0081"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "546bdee61753faa8ed3e3eca5b9ca1a65c1f9f00", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d02a6956be69027ca357ef30b835bd1575580ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d02a6956be69027ca357ef30b835bd1575580ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4d02a6956be69027ca357ef30b835bd1575580ac", "patch": "@@ -1,3 +1,9 @@\n+2012-08-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/functions.h (__check_partition_lower_aux): Remove\n+\tredundant comparison with pivot value.\n+\t(__check_partition_upper_aux): Likewise.\n+\n 2012-08-03  Ollie Wild  <aaw@google.com>\n \t    Richard Smith  <richardsmith@google.com>\n "}, {"sha": "b59309e21853f4e8de57656a263362898504447a", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d02a6956be69027ca357ef30b835bd1575580ac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d02a6956be69027ca357ef30b835bd1575580ac/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=4d02a6956be69027ca357ef30b835bd1575580ac", "patch": "@@ -354,8 +354,12 @@ namespace __gnu_debug\n     {\n       while (__first != __last && *__first < __value)\n \t++__first;\n-      while (__first != __last && !(*__first < __value))\n-\t++__first;\n+      if (__first != __last)\n+\t{\n+\t  ++__first;\n+\t  while (__first != __last && !(*__first < __value))\n+\t    ++__first;\n+\t}\n       return __first == __last;\n     }\n \n@@ -368,8 +372,10 @@ namespace __gnu_debug\n \t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n \t\t\tconst _Tp& __value,\n \t\t\tstd::random_access_iterator_tag __tag)\n-    { return __check_partitioned_lower_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __tag); }\n+    {\n+      return __check_partitioned_lower_aux(__first.base(), __last.base(),\n+\t\t\t\t\t   __value, __tag);\n+    }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 270. Binary search requirements overly strict\n@@ -378,8 +384,10 @@ namespace __gnu_debug\n     inline bool\n     __check_partitioned_lower(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value)\n-    { return __check_partitioned_lower_aux(__first, __last, __value,\n-\t\t\t\t\t   std::__iterator_category(__first)); }\n+    {\n+      return __check_partitioned_lower_aux(__first, __last, __value,\n+\t\t\t\t\t   std::__iterator_category(__first));\n+    }\n \n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n@@ -389,8 +397,12 @@ namespace __gnu_debug\n     {\n       while (__first != __last && !(__value < *__first))\n \t++__first;\n-      while (__first != __last && __value < *__first)\n-\t++__first;\n+      if (__first != __last)\n+\t{\n+\t  ++__first;\n+\t  while (__first != __last && __value < *__first)\n+\t    ++__first;\n+\t}\n       return __first == __last;\n     }\n \n@@ -403,15 +415,19 @@ namespace __gnu_debug\n \t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n \t\t\tconst _Tp& __value,\n \t\t\tstd::random_access_iterator_tag __tag)\n-    { return __check_partitioned_upper_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __tag); }\n+    {\n+      return __check_partitioned_upper_aux(__first.base(), __last.base(),\n+\t\t\t\t\t   __value, __tag);\n+    }\n \n   template<typename _ForwardIterator, typename _Tp>\n     inline bool\n     __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value)\n-    { return __check_partitioned_upper_aux(__first, __last, __value,\n-\t\t\t\t\t   std::__iterator_category(__first)); }\n+    {\n+      return __check_partitioned_upper_aux(__first, __last, __value,\n+\t\t\t\t\t   std::__iterator_category(__first));\n+    }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n@@ -422,8 +438,12 @@ namespace __gnu_debug\n     {\n       while (__first != __last && bool(__pred(*__first, __value)))\n \t++__first;\n-      while (__first != __last && !bool(__pred(*__first, __value)))\n-\t++__first;\n+      if (__first != __last)\n+\t{\n+\t  ++__first;\n+\t  while (__first != __last && !bool(__pred(*__first, __value)))\n+\t    ++__first;\n+\t}\n       return __first == __last;\n     }\n \n@@ -437,17 +457,21 @@ namespace __gnu_debug\n \t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n \t\t\tconst _Tp& __value, _Pred __pred,\n \t\t\tstd::random_access_iterator_tag __tag)\n-    { return __check_partitioned_lower_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __pred, __tag); }\n+    {\n+      return __check_partitioned_lower_aux(__first.base(), __last.base(),\n+\t\t\t\t\t   __value, __pred, __tag);\n+    }\n \n   // Determine if a sequence is partitioned w.r.t. this element.\n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n     __check_partitioned_lower(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value,\n \t\t\t      _Pred __pred)\n-    { return __check_partitioned_lower_aux(__first, __last, __value, __pred,\n-\t\t\t\t\t   std::__iterator_category(__first)); }\n+    {\n+      return __check_partitioned_lower_aux(__first, __last, __value, __pred,\n+\t\t\t\t\t   std::__iterator_category(__first));\n+    }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n@@ -458,8 +482,12 @@ namespace __gnu_debug\n     {\n       while (__first != __last && !bool(__pred(__value, *__first)))\n \t++__first;\n-      while (__first != __last && bool(__pred(__value, *__first)))\n-\t++__first;\n+      if (__first != __last)\n+\t{\n+\t  ++__first;\n+\t  while (__first != __last && bool(__pred(__value, *__first)))\n+\t    ++__first;\n+\t}\n       return __first == __last;\n     }\n \n@@ -473,16 +501,20 @@ namespace __gnu_debug\n \t\t\tconst _Safe_iterator<_Iterator, _Sequence>& __last,\n \t\t\tconst _Tp& __value, _Pred __pred,\n \t\t\tstd::random_access_iterator_tag __tag)\n-    { return __check_partitioned_upper_aux(__first.base(), __last.base(),\n-\t\t\t\t\t   __value, __pred, __tag); }\n+    {\n+      return __check_partitioned_upper_aux(__first.base(), __last.base(),\n+\t\t\t\t\t   __value, __pred, __tag);\n+    }\n \n   template<typename _ForwardIterator, typename _Tp, typename _Pred>\n     inline bool\n     __check_partitioned_upper(_ForwardIterator __first,\n \t\t\t      _ForwardIterator __last, const _Tp& __value,\n \t\t\t      _Pred __pred)\n-    { return __check_partitioned_upper_aux(__first, __last, __value, __pred,\n-\t\t\t\t\t   std::__iterator_category(__first)); }\n+    {\n+      return __check_partitioned_upper_aux(__first, __last, __value, __pred,\n+\t\t\t\t\t   std::__iterator_category(__first));\n+    }\n \n   // Helper struct to detect random access safe iterators.\n   template<typename _Iterator>"}]}