{"sha": "f522930c8fe1554c4af6f4d87b6529be1b716ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyMjkzMGM4ZmUxNTU0YzRhZjZmNGQ4N2I2NTI5YmUxYjcxNmZmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-02-12T20:28:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-02-12T20:28:41Z"}, "message": "common.opt (-flifetime-dse): New.\n\ngcc/\n\t* common.opt (-flifetime-dse): New.\ngcc/cp/\n\t* decl.c (begin_destructor_body): Condition clobber on\n\t-flifetime-dse.\n\nFrom-SVN: r220657", "tree": {"sha": "2d3f895a3da2356f70340af326c8229b80d19433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3f895a3da2356f70340af326c8229b80d19433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f522930c8fe1554c4af6f4d87b6529be1b716ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f522930c8fe1554c4af6f4d87b6529be1b716ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f522930c8fe1554c4af6f4d87b6529be1b716ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f522930c8fe1554c4af6f4d87b6529be1b716ffc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "767e8803b9a65bfe71ff6881143309dc5b39aacf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -1,3 +1,7 @@\n+2015-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* common.opt (-flifetime-dse): New.\n+\n 2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/65019"}, {"sha": "6e65757b1b10e0e363a21571114a14fb61d194c2", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -1856,6 +1856,11 @@ fregmove\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n+flifetime-dse\n+Common Report Var(flag_lifetime_dse) Init(1) Optimization\n+Tell DSE that the storage for a C++ object is dead when the constructor\n+starts and when the destructor finishes.\n+\n flive-range-shrinkage\n Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n Relief of register pressure through live range shrinkage"}, {"sha": "4f7564644e20076199a788adbb5b7ec57fa25c58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -1,3 +1,8 @@\n+2015-02-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (begin_destructor_body): Condition clobber on\n+\t-flifetime-dse.\n+\n 2015-02-12 Andrea Azzarone <azzaronea@gmail.com>\n \n \tPR c++/64959"}, {"sha": "810acd56e605177aa0c96eb9a6a35fa68e12b643", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -13936,15 +13936,19 @@ begin_destructor_body (void)\n       initialize_vtbl_ptrs (current_class_ptr);\n       finish_compound_stmt (compound_stmt);\n \n-      /* Insert a cleanup to let the back end know that the object is dead\n-\t when we exit the destructor, either normally or via exception.  */\n-      tree btype = CLASSTYPE_AS_BASE (current_class_type);\n-      tree clobber = build_constructor (btype, NULL);\n-      TREE_THIS_VOLATILE (clobber) = true;\n-      tree bref = build_nop (build_reference_type (btype), current_class_ptr);\n-      bref = convert_from_reference (bref);\n-      tree exprstmt = build2 (MODIFY_EXPR, btype, bref, clobber);\n-      finish_decl_cleanup (NULL_TREE, exprstmt);\n+      if (flag_lifetime_dse)\n+\t{\n+\t  /* Insert a cleanup to let the back end know that the object is dead\n+\t     when we exit the destructor, either normally or via exception.  */\n+\t  tree btype = CLASSTYPE_AS_BASE (current_class_type);\n+\t  tree clobber = build_constructor (btype, NULL);\n+\t  TREE_THIS_VOLATILE (clobber) = true;\n+\t  tree bref = build_nop (build_reference_type (btype),\n+\t\t\t\t current_class_ptr);\n+\t  bref = convert_from_reference (bref);\n+\t  tree exprstmt = build2 (MODIFY_EXPR, btype, bref, clobber);\n+\t  finish_decl_cleanup (NULL_TREE, exprstmt);\n+\t}\n \n       /* And insert cleanups for our bases and members so that they\n \t will be properly destroyed if we throw.  */"}, {"sha": "5cce4f73634a5e1c0229a5bf2fc7624e5539c106", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -7888,6 +7888,16 @@ registers after writing to their lower 32-bit half.\n Enabled for Alpha, AArch64 and x86 at levels @option{-O2},\n @option{-O3}, @option{-Os}.\n \n+@item -fno-lifetime-dse\n+@opindex fno-lifetime-dse\n+In C++ the value of an object is only affected by changes within its\n+lifetime: when the constructor begins, the object has an indeterminate\n+value, and any changes during the lifetime of the object are dead when\n+the object is destroyed.  Normally dead store elimination will take\n+advantage of this; if your code relies on the value of the object\n+storage persisting beyond the lifetime of the object, you can use this\n+flag to disable this optimization.\n+\n @item -flive-range-shrinkage\n @opindex flive-range-shrinkage\n Attempt to decrease register pressure through register live range"}, {"sha": "733d28a794f4980b49418e6f1b7838f101034b2e", "filename": "gcc/testsuite/g++.dg/opt/flifetime-dse1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f522930c8fe1554c4af6f4d87b6529be1b716ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fflifetime-dse1.C?ref=f522930c8fe1554c4af6f4d87b6529be1b716ffc", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-O3 -fno-lifetime-dse\" }\n+// { dg-do run }\n+\n+typedef __SIZE_TYPE__ size_t;\n+inline void * operator new (size_t, void *p) { return p; }\n+\n+struct A\n+{\n+  int i;\n+  A() {}\n+  ~A() {}\n+};\n+\n+int main()\n+{\n+  int ar[1];\n+\n+  A* ap = new(ar) A;\n+  ap->i = 42;\n+  ap->~A();\n+\n+  if (ar[0] != 42) __builtin_abort();\n+}"}]}