{"sha": "9e50aebc813477655e0090b7de6578a7b11816ba", "node_id": "C_kwDOANBUbNoAKDllNTBhZWJjODEzNDc3NjU1ZTAwOTBiN2RlNjU3OGE3YjExODE2YmE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-24T08:08:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-24T09:47:05Z"}, "message": "Some more predicate analysis TLC\n\nThis limits the simple control dep also to the cd_root plus avoids\nfilling the lazily computed PHI def predicate in the early out path\nwhich would leave it not simplified and normalized if it were\nre-used.  It also avoids computing the use predicates when the\npost-dominance early out doesn't need it.  It also syncs\npredicate::use_cannot_happen with init_from_phi_def, adding the\nmissing PHI edge to the computed chains (the simple control dep\ncode already adds it).\n\n\t* gimple-predicate-analysis.cc (predicate::use_cannot_happen):\n\tDo simple_control_dep_chain only up to cd_root, add the PHI\n\toperand edge to the chains like init_from_phi_def does.\n\t(predicate::is_use_guarded): Speedup early out, avoid half-way\n\tinitializing the PHI def predicate.", "tree": {"sha": "0f5632ab3c40114f6d7f2a014ab1680c0519bb87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f5632ab3c40114f6d7f2a014ab1680c0519bb87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e50aebc813477655e0090b7de6578a7b11816ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e50aebc813477655e0090b7de6578a7b11816ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e50aebc813477655e0090b7de6578a7b11816ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e50aebc813477655e0090b7de6578a7b11816ba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846e5c009e360f0c4fe58ff0d3aee03ebe3ca1a9"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "f7170a8d068269f6c63e6d51ad6f5c48273ebf4b", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e50aebc813477655e0090b7de6578a7b11816ba/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e50aebc813477655e0090b7de6578a7b11816ba/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=9e50aebc813477655e0090b7de6578a7b11816ba", "patch": "@@ -1322,10 +1322,15 @@ predicate::use_cannot_happen (gphi *phi, unsigned opnds)\n \t  /* If compute_control_dep_chain bailed out due to limits\n \t     build a partial sparse path using dominators.  Collect\n \t     only edges whose predicates are always true when reaching E.  */\n-\t  simple_control_dep_chain (dep_chains[0],\n-\t\t\t\t    ENTRY_BLOCK_PTR_FOR_FN (cfun), e);\n+\t  simple_control_dep_chain (dep_chains[0], cd_root, e);\n \t  num_chains++;\n \t}\n+      /* Update the chains with the phi operand edge.  */\n+      else if (EDGE_COUNT (e->src->succs) > 1)\n+\t{\n+\t  for (unsigned j = 0; j < num_chains; j++)\n+\t    dep_chains[j].safe_push (e);\n+\t}\n \n       if (DEBUG_PREDICATE_ANALYZER && dump_file)\n \t{\n@@ -1916,24 +1921,14 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n   /* The basic block where the PHI is defined.  */\n   basic_block def_bb = gimple_bb (phi);\n \n+  if (dominated_by_p (CDI_POST_DOMINATORS, def_bb, use_bb))\n+    /* The use is not guarded.  */\n+    return false;\n+\n   /* Try to build the predicate expression under which the PHI flows\n      into its use.  This will be empty if the PHI is defined and used\n      in the same bb.  */\n   predicate use_preds (def_bb, use_bb, m_eval);\n-\n-  if (dominated_by_p (CDI_POST_DOMINATORS, def_bb, use_bb))\n-    {\n-      if (is_empty ())\n-\t{\n-\t  /* Lazily initialize *THIS from the PHI and build its use\n-\t     expression.  */\n-\t  init_from_phi_def (phi);\n-\t}\n-\n-      /* The use is not guarded.  */\n-      return false;\n-    }\n-\n   if (use_preds.is_empty ())\n     return false;\n \n@@ -1955,9 +1950,7 @@ predicate::is_use_guarded (gimple *use_stmt, basic_block use_bb,\n     {\n       /* Lazily initialize *THIS from PHI.  */\n       if (!init_from_phi_def (phi))\n-\t{\n-\t  return false;\n-\t}\n+\treturn false;\n \n       simplify (phi);\n       normalize (phi);"}]}