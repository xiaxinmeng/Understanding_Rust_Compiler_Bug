{"sha": "5ee23f588d92ce277afc3e651e8fe64d0128448a", "node_id": "C_kwDOANBUbNoAKDVlZTIzZjU4OGQ5MmNlMjc3YWZjM2U2NTFlOGZlNjRkMDEyODQ0OGE", "commit": {"author": {"name": "M V V S Manoj Kumar", "email": "mvvsmanojkumar@gmail.com", "date": "2023-03-16T05:33:57Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-10T14:38:20Z"}, "message": "Added HIR::InlineAsm node\n\nFixes Issue #1568\nAdded HIR node HIR::InlineAsm similar to the one found in rustc. In this\nI also changed the defination of the AST::InlineAsm node, so that we can\nreuse many of it's data members in the HIR::InlineAsm node.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-full-decls.h (enum class): Added declaration.\n\t(struct AnonConst): Added declaration.\n\t(struct InlineAsmRegOrRegClass): Added declaration.\n\t(struct InlineAsmOperand): Added declaration.\n\t(struct InlineAsmPlaceHolder): Added declaration.\n\t(struct InlineAsmTemplatePiece): Added declaration.\n\t(struct TupleClobber): Added declaration.\n\t(struct TupleTemplateStr): Added declaration.\n\t* ast/rust-expr.h (class InlineAsm): Defined all it's data members outside.\n\t(enum class InlineAsmOptions): Converted this to a enum class so we could use it in the HIR.\n\t(struct AnonConst): Defined it independent of the AST::InlineAsm node.\n\t(struct InlineAsmRegOrRegClass): Defined it independent of the AST::InlineAsm node.\n\t(struct InlineAsmOperand): Defined it independent of the AST::InlineAsm node.\n\t(struct InlineAsmPlaceHolder): Defined it independent of the AST::InlineAsm node.\n\t(struct InlineAsmTemplatePiece): Defined it independent of the AST::InlineAsm node.\n\t(struct TupleClobber): Defined it independent of the AST::InlineAsm node.\n\t(struct TupleTemplateStr): Defined it independent of the AST::InlineAsm node.\n\t* hir/tree/rust-hir-expr.h (class InlineAsmReg): Added defination.\n\t(class InlineAsmRegClass): Added defination.\n\t(struct InlineAsmRegOrRegClass): Added defination.\n\t(class InlineAsm): Added defination.\n\t* hir/tree/rust-hir-full-decls.h (class InlineAsmReg): Added declaration.\n\t(class InlineAsmRegClass): Added declaration.\n\t(struct InlineAsmRegOrRegClass): Added declaration.\n\t(class InlineAsm): Added declaration.\n\nSigned-off-by: M V V S Manoj Kumar <mvvsmanojkumar@gmail.com>", "tree": {"sha": "ec9b44f2e4478703d72f9091d9e095e709a2da94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9b44f2e4478703d72f9091d9e095e709a2da94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee23f588d92ce277afc3e651e8fe64d0128448a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee23f588d92ce277afc3e651e8fe64d0128448a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee23f588d92ce277afc3e651e8fe64d0128448a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee23f588d92ce277afc3e651e8fe64d0128448a/comments", "author": {"login": "mvvsmk", "id": 71825974, "node_id": "MDQ6VXNlcjcxODI1OTc0", "avatar_url": "https://avatars.githubusercontent.com/u/71825974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvvsmk", "html_url": "https://github.com/mvvsmk", "followers_url": "https://api.github.com/users/mvvsmk/followers", "following_url": "https://api.github.com/users/mvvsmk/following{/other_user}", "gists_url": "https://api.github.com/users/mvvsmk/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvvsmk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvvsmk/subscriptions", "organizations_url": "https://api.github.com/users/mvvsmk/orgs", "repos_url": "https://api.github.com/users/mvvsmk/repos", "events_url": "https://api.github.com/users/mvvsmk/events{/privacy}", "received_events_url": "https://api.github.com/users/mvvsmk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/875cd5ee9c6f037c7f5ace00b75631a1c45970a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/875cd5ee9c6f037c7f5ace00b75631a1c45970a5"}], "stats": {"total": 307, "additions": 204, "deletions": 103}, "files": [{"sha": "543f754829f8b4b4a28aa61e7b5336e959017e0a", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=5ee23f588d92ce277afc3e651e8fe64d0128448a", "patch": "@@ -145,6 +145,14 @@ struct MatchCase;\n class MatchExpr;\n class AwaitExpr;\n class AsyncBlockExpr;\n+enum class InlineAsmOptions;\n+struct AnonConst;\n+struct InlineAsmRegOrRegClass;\n+struct InlineAsmOperand;\n+struct InlineAsmPlaceHolder;\n+struct InlineAsmTemplatePiece;\n+struct TupleClobber;\n+struct TupleTemplateStr;\n class InlineAsm;\n \n // rust-stmt.h"}, {"sha": "8f30965b9f7f64e60aa7f38a8f7ebd8e5d09eab8", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 104, "deletions": 103, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=5ee23f588d92ce277afc3e651e8fe64d0128448a", "patch": "@@ -4413,135 +4413,135 @@ class AsyncBlockExpr : public ExprWithBlock\n   }\n };\n \n-// Inline Assembly Node\n-class InlineAsm : public ExprWithoutBlock\n+// Inline-assembly specific options\n+enum class InlineAsmOptions\n+{\n+  PURE = 1 << 0,\n+  NOMEM = 1 << 1,\n+  READONLY = 1 << 2,\n+  PRESERVES_FLAGS = 1 << 3,\n+  NORETURN = 1 << 4,\n+  NOSTACK = 1 << 5,\n+  ATT_SYNTAX = 1 << 6,\n+  RAW = 1 << 7,\n+  MAY_UNWIND = 1 << 8,\n+};\n+\n+struct AnonConst\n {\n-  // Inline-assembly specific options\n-  enum InlineAsmOptions\n-  {\n-    PURE = 1 << 0,\n-    NOMEM = 1 << 1,\n-    READONLY = 1 << 2,\n-    PRESERVES_FLAGS = 1 << 3,\n-    NORETURN = 1 << 4,\n-    NOSTACK = 1 << 5,\n-    ATT_SYNTAX = 1 << 6,\n-    RAW = 1 << 7,\n-    MAY_UNWIND = 1 << 8,\n+  NodeId id;\n+  std::unique_ptr<Expr> value;\n+};\n+\n+struct InlineAsmRegOrRegClass\n+{\n+  enum Type\n+  {\n+    Reg,\n+    RegClass,\n   };\n \n-  struct AnonConst\n+  struct Reg\n   {\n-    NodeId id;\n-    std::unique_ptr<Expr> value;\n+    std::string Symbol;\n   };\n \n-  struct InlineAsmRegOrRegClass\n+  struct RegClass\n   {\n-    enum Type\n-    {\n-      Reg,\n-      RegClass,\n-    };\n+    std::string Symbol;\n+  };\n \n-    struct Reg\n-    {\n-      std::string Symbol;\n-    };\n+  Identifier name;\n+  Location locus;\n+};\n \n-    struct RegClass\n-    {\n-      std::string Symbol;\n-    };\n+struct InlineAsmOperand\n+{\n+  enum RegisterType\n+  {\n+    In,\n+    Out,\n+    InOut,\n+    SplitInOut,\n+    Const,\n+    Sym,\n+  };\n \n-    Identifier name;\n-    Location locus;\n+  struct In\n+  {\n+    InlineAsmRegOrRegClass reg;\n+    std::unique_ptr<Expr> expr;\n+  };\n+\n+  struct Out\n+  {\n+    InlineAsmRegOrRegClass reg;\n+    bool late;\n+    std::unique_ptr<Expr> expr; // can be null\n   };\n \n-  struct InlineAsmOperand\n-  {\n-    enum RegisterType\n-    {\n-      In,\n-      Out,\n-      InOut,\n-      SplitInOut,\n-      Const,\n-      Sym,\n-    };\n-\n-    struct In\n-    {\n-      InlineAsmRegOrRegClass reg;\n-      std::unique_ptr<Expr> expr;\n-    };\n-\n-    struct Out\n-    {\n-      InlineAsmRegOrRegClass reg;\n-      bool late;\n-      std::unique_ptr<Expr> expr; // can be null\n-    };\n-\n-    struct InOut\n-    {\n-      InlineAsmRegOrRegClass reg;\n-      bool late;\n-      std::unique_ptr<Expr> expr; // this can't be null\n-    };\n-\n-    struct SplitInOut\n-    {\n-      InlineAsmRegOrRegClass reg;\n-      bool late;\n-      std::unique_ptr<Expr> in_expr;\n-      std::unique_ptr<Expr> out_expr; // could be null\n-    };\n-\n-    struct Const\n-    {\n-      AnonConst anon_const;\n-    };\n-\n-    struct Sym\n-    {\n-      std::unique_ptr<Expr> sym;\n-    };\n-    Location locus;\n+  struct InOut\n+  {\n+    InlineAsmRegOrRegClass reg;\n+    bool late;\n+    std::unique_ptr<Expr> expr; // this can't be null\n   };\n \n-  struct InlineAsmPlaceHolder\n+  struct SplitInOut\n   {\n-    size_t operand_idx;\n-    char modifier; // can be null\n-    Location locus;\n+    InlineAsmRegOrRegClass reg;\n+    bool late;\n+    std::unique_ptr<Expr> in_expr;\n+    std::unique_ptr<Expr> out_expr; // could be null\n   };\n \n-  struct InlineAsmTemplatePiece\n+  struct Const\n   {\n-    bool is_placeholder;\n-    union\n-    {\n-      std::string string;\n-      InlineAsmPlaceHolder placeholder;\n-    };\n+    AnonConst anon_const;\n   };\n \n-  struct TupleClobber\n+  struct Sym\n   {\n-    // as gccrs still doesen't contain a symbol class I have put them as strings\n-    std::string symbol;\n-    Location loc;\n+    std::unique_ptr<Expr> sym;\n   };\n+  Location locus;\n+};\n+\n+struct InlineAsmPlaceHolder\n+{\n+  size_t operand_idx;\n+  char modifier; // can be null\n+  Location locus;\n+};\n \n-  struct TupleTemplateStr\n+struct InlineAsmTemplatePiece\n+{\n+  bool is_placeholder;\n+  union\n   {\n-    // as gccrs still doesen't contain a symbol class I have put them as strings\n-    std::string symbol;\n-    std::string optional_symbol;\n-    Location loc;\n+    std::string string;\n+    InlineAsmPlaceHolder placeholder;\n   };\n+};\n \n+struct TupleClobber\n+{\n+  // as gccrs still doesen't contain a symbol class I have put them as strings\n+  std::string symbol;\n+  Location loc;\n+};\n+\n+struct TupleTemplateStr\n+{\n+  // as gccrs still doesen't contain a symbol class I have put them as strings\n+  std::string symbol;\n+  std::string optional_symbol;\n+  Location loc;\n+};\n+\n+// Inline Assembly Node\n+class InlineAsm : public ExprWithoutBlock\n+{\n public:\n   std::vector<InlineAsmTemplatePiece> template_;\n   std::vector<TupleTemplateStr> template_strs;\n@@ -4550,6 +4550,7 @@ class InlineAsm : public ExprWithoutBlock\n   InlineAsmOptions options;\n   std::vector<Location> line_spans;\n };\n+\n } // namespace AST\n } // namespace Rust\n "}, {"sha": "4bda78373193274685e1a2faadb54794475b8506", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=5ee23f588d92ce277afc3e651e8fe64d0128448a", "patch": "@@ -3889,6 +3889,94 @@ class OperatorExprMeta\n   Location locus;\n };\n \n+class InlineAsmReg\n+{\n+  enum Kind\n+  {\n+    X86,\n+    Arm,\n+    AArch64,\n+    RiscV,\n+    Nvptx,\n+    PowerPC,\n+    Hexagon,\n+    Mips,\n+    S390x,\n+    SpirV,\n+    Wasm,\n+    Bpf,\n+    Avr,\n+    Msp430,\n+    // Placeholder for invalid register constraints for the current target\n+    Err,\n+  };\n+\n+  // this placeholder is to be removed when the definations\n+  // of the above enums are made in a later PR/patch.\n+  std::string placeholder;\n+};\n+\n+class InlineAsmRegClass\n+{\n+  enum Type\n+  {\n+    X86,\n+    Arm,\n+    AArch64,\n+    RiscV,\n+    Nvptx,\n+    PowerPC,\n+    Hexagon,\n+    Mips,\n+    S390x,\n+    SpirV,\n+    Wasm,\n+    Bpf,\n+    Avr,\n+    Msp430,\n+    // Placeholder for invalid register constraints for the current target\n+    Err,\n+  };\n+\n+  // this placeholder is to be removed when the definations\n+  // of the above enums are made in a later PR/patch.\n+  std::string placeholder;\n+};\n+\n+struct InlineAsmRegOrRegClass\n+{\n+  enum Type\n+  {\n+    Reg,      // links to struct Register\n+    RegClass, // links to struct RegisterClass\n+  };\n+\n+  struct Register\n+  {\n+    InlineAsmReg Reg;\n+  };\n+\n+  struct RegisterClass\n+  {\n+    InlineAsmRegClass RegClass;\n+  };\n+\n+  Identifier name;\n+  Location locus;\n+};\n+\n+// Inline Assembly Node\n+class InlineAsm : public ExprWithoutBlock\n+{\n+  NodeId id;\n+\n+public:\n+  std::vector<AST::InlineAsmTemplatePiece> template_;\n+  std::vector<AST::TupleTemplateStr> template_strs;\n+  std::vector<AST::InlineAsmOperand> operands;\n+  AST::InlineAsmOptions options;\n+  std::vector<Location> line_spans;\n+};\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "d819692a331bfd01e9a85efb42bc33b1ff88b75b", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee23f588d92ce277afc3e651e8fe64d0128448a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=5ee23f588d92ce277afc3e651e8fe64d0128448a", "patch": "@@ -124,6 +124,10 @@ struct MatchCase;\n class MatchExpr;\n class AwaitExpr;\n class AsyncBlockExpr;\n+class InlineAsmReg;\n+class InlineAsmRegClass;\n+struct InlineAsmRegOrRegClass;\n+class InlineAsm;\n \n // rust-stmt.h\n class EmptyStmt;"}]}