{"sha": "19353855bfc05914faaee9f297684f608fd9a485", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzNTM4NTViZmMwNTkxNGZhYWVlOWYyOTc2ODRmNjA4ZmQ5YTQ4NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-07-12T07:08:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-07-12T07:08:34Z"}, "message": "tree-ssa-sccvn.c (mprts_hook_cnt): Remove.\n\n2018-07-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (mprts_hook_cnt): Remove.\n\t(vn_lookup_simplify_result): Remove recursion limit applied\n\there.\n\t(vn_nary_build_or_lookup_1): Adjust.\n\t(try_to_simplify): Likewise.\n\t* gimple-match-head.c (gimple_resimplify1): Instead apply one\n\there.\n\t(gimple_resimplify2): Likewise.\n\t(gimple_resimplify3): Likewise.\n\t(gimple_resimplify4): Likewise.\n\nFrom-SVN: r262573", "tree": {"sha": "5efac508c9b97fdcd24bad7d09b0a091e2dae779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5efac508c9b97fdcd24bad7d09b0a091e2dae779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19353855bfc05914faaee9f297684f608fd9a485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19353855bfc05914faaee9f297684f608fd9a485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19353855bfc05914faaee9f297684f608fd9a485", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19353855bfc05914faaee9f297684f608fd9a485/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c81daeeb5456d3b588e2ad22b5ec098bea2d393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c81daeeb5456d3b588e2ad22b5ec098bea2d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c81daeeb5456d3b588e2ad22b5ec098bea2d393"}], "stats": {"total": 79, "additions": 70, "deletions": 9}, "files": [{"sha": "d8a65861e5ac42b7723d2b72d0b5f491b4463d8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19353855bfc05914faaee9f297684f608fd9a485/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19353855bfc05914faaee9f297684f608fd9a485/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19353855bfc05914faaee9f297684f608fd9a485", "patch": "@@ -1,3 +1,16 @@\n+2018-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (mprts_hook_cnt): Remove.\n+\t(vn_lookup_simplify_result): Remove recursion limit applied\n+\there.\n+\t(vn_nary_build_or_lookup_1): Adjust.\n+\t(try_to_simplify): Likewise.\n+\t* gimple-match-head.c (gimple_resimplify1): Instead apply one\n+\there.\n+\t(gimple_resimplify2): Likewise.\n+\t(gimple_resimplify3): Likewise.\n+\t(gimple_resimplify4): Likewise.\n+\n 2018-07-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/avx512bitalgintrin.h (_mm512_mask_bitshuffle_epi64_mask):"}, {"sha": "c5a1923979828276b2a0aeae0560412090ac5315", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19353855bfc05914faaee9f297684f608fd9a485/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19353855bfc05914faaee9f297684f608fd9a485/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=19353855bfc05914faaee9f297684f608fd9a485", "patch": "@@ -97,13 +97,30 @@ gimple_resimplify1 (gimple_seq *seq, gimple_match_op *res_op,\n \t}\n     }\n \n+  /* Limit recursion, there are cases like PR80887 and others, for\n+     example when value-numbering presents us with unfolded expressions\n+     that we are really not prepared to handle without eventual\n+     oscillation like ((_50 + 0) + 8) where _50 gets mapped to _50\n+     itself as available expression.  */\n+  static unsigned depth;\n+  if (depth > 10)\n+    {\n+      if (dump_file && (dump_flags & TDF_FOLDING))\n+\tfprintf (dump_file, \"Aborting expression simplification due to \"\n+\t\t \"deep recursion\\n\");\n+      return false;\n+    }\n+\n+  ++depth;\n   gimple_match_op res_op2 (*res_op);\n   if (gimple_simplify (&res_op2, seq, valueize,\n \t\t       res_op->code, res_op->type, res_op->ops[0]))\n     {\n+      --depth;\n       *res_op = res_op2;\n       return true;\n     }\n+  --depth;\n \n   return false;\n }\n@@ -151,14 +168,27 @@ gimple_resimplify2 (gimple_seq *seq, gimple_match_op *res_op,\n       canonicalized = true;\n     }\n \n+  /* Limit recursion, see gimple_resimplify1.  */\n+  static unsigned depth;\n+  if (depth > 10)\n+    {\n+      if (dump_file && (dump_flags & TDF_FOLDING))\n+\tfprintf (dump_file, \"Aborting expression simplification due to \"\n+\t\t \"deep recursion\\n\");\n+      return false;\n+    }\n+\n+  ++depth;\n   gimple_match_op res_op2 (*res_op);\n   if (gimple_simplify (&res_op2, seq, valueize,\n \t\t       res_op->code, res_op->type,\n \t\t       res_op->ops[0], res_op->ops[1]))\n     {\n+      --depth;\n       *res_op = res_op2;\n       return true;\n     }\n+  --depth;\n \n   return canonicalized;\n }\n@@ -205,14 +235,27 @@ gimple_resimplify3 (gimple_seq *seq, gimple_match_op *res_op,\n       canonicalized = true;\n     }\n \n+  /* Limit recursion, see gimple_resimplify1.  */\n+  static unsigned depth;\n+  if (depth > 10)\n+    {\n+      if (dump_file && (dump_flags & TDF_FOLDING))\n+\tfprintf (dump_file, \"Aborting expression simplification due to \"\n+\t\t \"deep recursion\\n\");\n+      return false;\n+    }\n+\n+  ++depth;\n   gimple_match_op res_op2 (*res_op);\n   if (gimple_simplify (&res_op2, seq, valueize,\n \t\t       res_op->code, res_op->type,\n \t\t       res_op->ops[0], res_op->ops[1], res_op->ops[2]))\n     {\n+      --depth;\n       *res_op = res_op2;\n       return true;\n     }\n+  --depth;\n \n   return canonicalized;\n }\n@@ -229,15 +272,28 @@ gimple_resimplify4 (gimple_seq *seq, gimple_match_op *res_op,\n {\n   /* No constant folding is defined for four-operand functions.  */\n \n+  /* Limit recursion, see gimple_resimplify1.  */\n+  static unsigned depth;\n+  if (depth > 10)\n+    {\n+      if (dump_file && (dump_flags & TDF_FOLDING))\n+\tfprintf (dump_file, \"Aborting expression simplification due to \"\n+\t\t \"deep recursion\\n\");\n+      return false;\n+    }\n+\n+  ++depth;\n   gimple_match_op res_op2 (*res_op);\n   if (gimple_simplify (&res_op2, seq, valueize,\n \t\t       res_op->code, res_op->type,\n \t\t       res_op->ops[0], res_op->ops[1], res_op->ops[2],\n \t\t       res_op->ops[3]))\n     {\n+      --depth;\n       *res_op = res_op2;\n       return true;\n     }\n+  --depth;\n \n   return false;\n }"}, {"sha": "de3531d4e0beb951eaa9b9edbf127a73686f6b5f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19353855bfc05914faaee9f297684f608fd9a485/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19353855bfc05914faaee9f297684f608fd9a485/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=19353855bfc05914faaee9f297684f608fd9a485", "patch": "@@ -1648,7 +1648,6 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n }\n \n static vn_nary_op_t vn_nary_op_insert_stmt (gimple *stmt, tree result);\n-static unsigned mprts_hook_cnt;\n \n /* Hook for maybe_push_res_to_seq, lookup the expression in the VN tables.  */\n \n@@ -1672,13 +1671,8 @@ vn_lookup_simplify_result (gimple_match_op *res_op)\n   vn_nary_op_t vnresult = NULL;\n   tree res = vn_nary_op_lookup_pieces (length, (tree_code) res_op->code,\n \t\t\t\t       res_op->type, ops, &vnresult);\n-  /* We can end up endlessly recursing simplifications if the lookup above\n-     presents us with a def-use chain that mirrors the original simplification.\n-     See PR80887 for an example.  Limit successful lookup artificially\n-     to 10 times if we are called as mprts_hook.  */\n   if (res\n-      && mprts_hook\n-      && --mprts_hook_cnt == 0)\n+      && mprts_hook)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Resetting mprts_hook after too many \"\n@@ -1701,7 +1695,6 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n      So first simplify and lookup this expression to see if it\n      is already available.  */\n   mprts_hook = vn_lookup_simplify_result;\n-  mprts_hook_cnt = 9;\n   bool res = false;\n   switch (TREE_CODE_LENGTH ((tree_code) res_op->code))\n     {\n@@ -4051,7 +4044,6 @@ try_to_simplify (gassign *stmt)\n \n   /* First try constant folding based on our current lattice.  */\n   mprts_hook = vn_lookup_simplify_result;\n-  mprts_hook_cnt = 9;\n   tem = gimple_fold_stmt_to_constant_1 (stmt, vn_valueize, vn_valueize);\n   mprts_hook = NULL;\n   if (tem"}]}