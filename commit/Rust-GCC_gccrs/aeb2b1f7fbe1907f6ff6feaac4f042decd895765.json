{"sha": "aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViMmIxZjdmYmUxOTA3ZjZmZjZmZWFhYzRmMDQyZGVjZDg5NTc2NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-15T00:04:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-15T00:04:12Z"}, "message": "Fix test that does undefined shifts greater than width of size_t\n\n\t* testsuite/20_util/unsynchronized_pool_resource/allocate.cc: Fix\n\ttest for 32-bit targets. Test additional allocation sizes.\n\nFrom-SVN: r266163", "tree": {"sha": "e8802afd1ca8a0f523b7390029cae4b4c84b9196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8802afd1ca8a0f523b7390029cae4b4c84b9196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeb2b1f7fbe1907f6ff6feaac4f042decd895765/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded7b411a896034096b8896681ee2e3329d4c946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded7b411a896034096b8896681ee2e3329d4c946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded7b411a896034096b8896681ee2e3329d4c946"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "5262ef547824e5301be5e60bb84cf6ac1ff18c6f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb2b1f7fbe1907f6ff6feaac4f042decd895765/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb2b1f7fbe1907f6ff6feaac4f042decd895765/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "patch": "@@ -1,3 +1,8 @@\n+2018-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/unsynchronized_pool_resource/allocate.cc: Fix\n+\ttest for 32-bit targets. Test additional allocation sizes.\n+\n 2018-11-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* scripts/create_testsuite_files: Add special_functions to the list"}, {"sha": "0325a4358b686e14ef660240c4101ec6e104cc73", "filename": "libstdc++-v3/testsuite/20_util/unsynchronized_pool_resource/allocate.cc", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeb2b1f7fbe1907f6ff6feaac4f042decd895765/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funsynchronized_pool_resource%2Fallocate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeb2b1f7fbe1907f6ff6feaac4f042decd895765/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funsynchronized_pool_resource%2Fallocate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funsynchronized_pool_resource%2Fallocate.cc?ref=aeb2b1f7fbe1907f6ff6feaac4f042decd895765", "patch": "@@ -170,37 +170,38 @@ test05()\n void\n test06()\n {\n-  struct custom_mr : std::pmr::memory_resource\n+  struct checking_mr : std::pmr::memory_resource\n   {\n     size_t expected_size = 0;\n     size_t expected_alignment = 0;\n \n     struct bad_size { };\n     struct bad_alignment { };\n \n-    void* do_allocate(std::size_t b, std::size_t a)\n+    void* do_allocate(std::size_t bytes, std::size_t align)\n     {\n-      if (expected_size != 0)\n-      {\n-\tif (b < expected_size)\n-\t  throw bad_size();\n-\telse if (a != expected_alignment)\n-\t  throw bad_alignment();\n-\t// Else just throw, don't try to allocate:\n-\tthrow std::bad_alloc();\n-      }\n-\n-      return std::pmr::new_delete_resource()->allocate(b, a);\n+      // Internal data structures in unsynchronized_pool_resource need to\n+      // allocate memory, so handle those normally:\n+      if (align <= alignof(std::max_align_t))\n+\treturn std::pmr::new_delete_resource()->allocate(bytes, align);\n+\n+      // This is a large, unpooled allocation. Check the arguments:\n+      if (bytes < expected_size)\n+\tthrow bad_size();\n+      else if (align != expected_alignment)\n+\tthrow bad_alignment();\n+      // Else just throw, don't really try to allocate:\n+      throw std::bad_alloc();\n     }\n \n-    void do_deallocate(void* p, std::size_t b, std::size_t a)\n-    { std::pmr::new_delete_resource()->deallocate(p, b, a); }\n+    void do_deallocate(void* p, std::size_t bytes, std::size_t align)\n+    { std::pmr::new_delete_resource()->deallocate(p, bytes, align); }\n \n     bool do_is_equal(const memory_resource& r) const noexcept\n     { return false; }\n   };\n \n-  custom_mr c;\n+  checking_mr c;\n   std::pmr::unsynchronized_pool_resource r({1, 1}, &c);\n   std::pmr::pool_options opts = r.options();\n   const std::size_t largest_pool = opts.largest_required_pool_block;\n@@ -214,23 +215,26 @@ test06()\n \n   // Try allocating various very large sizes and ensure the size requested\n   // from the upstream allocator is at least as large as needed.\n-  for (int i = 1; i < 64; ++i)\n+  for (int i = 0; i < std::numeric_limits<std::size_t>::digits; ++i)\n   {\n-    for (auto b : { -1, 0, 1, 3 })\n+    for (auto b : { -63, -5, -1, 0, 1, 3, std::numeric_limits<int>::max() })\n     {\n       std::size_t bytes = std::size_t(1) << i;\n-      bytes += b;\n+      bytes += b; // For negative b this can wrap to a large positive value.\n       c.expected_size = bytes;\n       c.expected_alignment = large_alignment;\n+      bool caught_bad_alloc = false;\n       try {\n \t(void) r.allocate(bytes, large_alignment);\n       } catch (const std::bad_alloc&) {\n \t// expect to catch bad_alloc\n-      } catch (custom_mr::bad_size) {\n-\tVERIFY(false);\n-      } catch (custom_mr::bad_alignment) {\n-\tVERIFY(false);\n+\tcaught_bad_alloc = true;\n+      } catch (checking_mr::bad_size) {\n+\tVERIFY( ! \"allocation from upstream resource had expected size\" );\n+      } catch (checking_mr::bad_alignment) {\n+\tVERIFY( ! \"allocation from upstream resource had expected alignment\" );\n       }\n+      VERIFY( caught_bad_alloc );\n     }\n   }\n }"}]}