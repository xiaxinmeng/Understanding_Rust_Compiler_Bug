{"sha": "28c3bb954a5068c8e586587b79b01b7a72be35b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjM2JiOTU0YTUwNjhjOGU1ODY1ODdiNzliMDFiN2E3MmJlMzViMQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-15T10:37:33Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-15T10:37:33Z"}, "message": "In gcc/testsuite/: 2010-10-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/gnu-api-2-protocol.m: New.\n        * objc.dg/gnu-api-2-sel.m: New.\n\nFrom-SVN: r165500", "tree": {"sha": "cd28d783965945732411d0b6c7945cbbfc234269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd28d783965945732411d0b6c7945cbbfc234269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c3bb954a5068c8e586587b79b01b7a72be35b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c3bb954a5068c8e586587b79b01b7a72be35b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c3bb954a5068c8e586587b79b01b7a72be35b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c3bb954a5068c8e586587b79b01b7a72be35b1/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7185d479171342a33ffc2bc76226e86d400a785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7185d479171342a33ffc2bc76226e86d400a785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7185d479171342a33ffc2bc76226e86d400a785"}], "stats": {"total": 268, "additions": 268, "deletions": 0}, "files": [{"sha": "306aed31da41e3acd11eb7ebec49fd2aa13d93c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28c3bb954a5068c8e586587b79b01b7a72be35b1", "patch": "@@ -1,3 +1,8 @@\n+2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-protocol.m: New.\n+\t* objc.dg/gnu-api-2-sel.m: New.\n+\n 2010-10-15  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n        * g++.dg/torture/stackalign/eh-vararg-2.C: Fix dg-options for"}, {"sha": "537e5dfbc7d74d71634ef1d506cfad2f0ffc783b", "filename": "gcc/testsuite/objc.dg/gnu-api-2-protocol.m", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-protocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-protocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-protocol.m?ref=28c3bb954a5068c8e586587b79b01b7a72be35b1", "patch": "@@ -0,0 +1,160 @@\n+/* Test the Modern GNU Objective-C Runtime API.\n+\n+  This is test 'protocol', covering all functions starting with 'protocol'.  */\n+\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* To get the modern GNU Objective-C Runtime API, you include\n+   objc/runtime.h.  */\n+#include <objc/runtime.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n+@end\n+\n+@protocol MyProtocol\n+- (id) variable;\n+@end\n+\n+@protocol MySecondProtocol\n+- (id) setVariable: (id)value;\n+@end\n+\n+@protocol MyThirdProtocol <MySecondProtocol>\n+- (id) setAnotherVariable: (id)value;\n+@end\n+\n+@interface MySubClass : MyRootClass <MyProtocol>\n+{ id variable_ivar; }\n+- (void) setVariable: (id)value;\n+- (id) variable;\n+@end\n+\n+@implementation MySubClass\n+- (void) setVariable: (id)value { variable_ivar = value; }\n+- (id) variable { return variable_ivar; }\n+@end\n+\n+\n+int main(int argc, void **args)\n+{\n+  /* Functions are tested in alphabetical order.  */\n+\n+  printf (\"Testing protocol_conformsToProtocol ()...\\n\");\n+  {\n+    if (!protocol_conformsToProtocol (@protocol (MyProtocol),\n+\t\t\t\t      @protocol (MyProtocol)))\n+      abort ();\n+\n+    if (!protocol_conformsToProtocol (@protocol (MyThirdProtocol),\n+\t\t\t\t      @protocol (MySecondProtocol)))\n+      abort ();\n+\n+    if (protocol_conformsToProtocol (@protocol (MyProtocol),\n+\t\t\t\t     @protocol (MySecondProtocol)))\n+      abort ();\n+  }\n+\n+  printf (\"Testing protocol_copyMethodDescriptionList ()...\\n\");\n+  {\n+    unsigned int count;\n+    struct objc_method_description *list;\n+\n+    list = protocol_copyMethodDescriptionList (@protocol (MyThirdProtocol),\n+\t\t\t\t\t       YES, YES, &count);\n+    \n+    if (count != 1)\n+      abort ();\n+\n+    if (strcmp (sel_getName (list[0].name), \"setAnotherVariable:\") != 0)\n+      abort ();\n+    \n+    if (list[1].name != NULL  &&  list[1].types != NULL)\n+      abort ();\n+  }\n+\n+  /* TODO: Test new ABI (when available).  */\n+  printf (\"Testing protocol_copyPropertyList ()...\\n\");\n+  {\n+    unsigned int count;\n+    Property *list;\n+\n+    list = protocol_copyPropertyList (@protocol (MyProtocol), &count);\n+\n+    if (count != 0  ||  list != NULL)\n+      abort ();\n+  }\n+\n+  printf (\"Testing protocol_copyProtocolList ()...\\n\");\n+  {\n+    unsigned int count;\n+    Protocol **list;\n+\n+    list = protocol_copyProtocolList (@protocol (MyThirdProtocol), &count);\n+    \n+    if (count != 1)\n+      abort ();\n+\n+    if (strcmp (protocol_getName (list[0]), \"MySecondProtocol\") != 0)\n+      abort ();\n+    \n+    if (list[1] != NULL)\n+      abort ();\n+  }\n+\n+  printf (\"Testing protocol_getMethodDescription ()...\\n\");\n+  {\n+    struct objc_method_description description;\n+\n+    description = protocol_getMethodDescription (@protocol (MySecondProtocol),\n+\t\t\t\t\t\t @selector (setVariable:),\n+\t\t\t\t\t\t YES, YES);\n+    if (description.name == NULL  &&  description.types == NULL)\n+      abort ();\n+\n+    if (strcmp (sel_getName (description.name), \"setVariable:\") != 0)\n+      abort ();\n+  }\n+\n+  printf (\"Testing protocol_getName ()...\\n\");\n+  {\n+    if (strcmp (protocol_getName (@protocol (MyProtocol)), \"MyProtocol\") != 0)\n+      abort ();\n+  }\n+\n+  /* TODO: Test new ABI (when available).  */\n+  printf (\"Testing protocol_getProperty ()...\\n\");\n+  {\n+    Property property;\n+\n+    property = protocol_getProperty (objc_getProtocol (\"MyProtocol\"), \"someProperty\",\n+\t\t\t\t     YES, YES);\n+\n+    if (property != NULL)\n+      abort ();\n+  }\n+\n+  printf (\"Testing protocol_isEqual ()...\\n\");\n+  {\n+    if (!protocol_isEqual (@protocol (MyProtocol),\n+\t\t\t   @protocol (MyProtocol)))\n+      abort ();\n+\n+    if (!protocol_isEqual (@protocol (MyProtocol),\n+\t\t\t   objc_getProtocol (\"MyProtocol\")))\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "e710083232d25ff4b74a888532b541b2d6c74adb", "filename": "gcc/testsuite/objc.dg/gnu-api-2-sel.m", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c3bb954a5068c8e586587b79b01b7a72be35b1/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m?ref=28c3bb954a5068c8e586587b79b01b7a72be35b1", "patch": "@@ -0,0 +1,103 @@\n+/* Test the Modern GNU Objective-C Runtime API.\n+\n+  This is test 'sel', covering all functions starting with 'sel'.  */\n+\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* To get the modern GNU Objective-C Runtime API, you include\n+   objc/runtime.h.  */\n+#include <objc/runtime.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n+@end\n+\n+@protocol MyProtocol\n+- (id) variable;\n+@end\n+\n+@protocol MySecondProtocol\n+- (id) setVariable: (id)value;\n+@end\n+\n+@interface MySubClass : MyRootClass <MyProtocol>\n+{ id variable_ivar; }\n+- (void) setVariable: (id)value;\n+- (id) variable;\n+@end\n+\n+@implementation MySubClass\n+- (void) setVariable: (id)value { variable_ivar = value; }\n+- (id) variable { return variable_ivar; }\n+@end\n+\n+\n+int main(int argc, void **args)\n+{\n+  /* Functions are tested in alphabetical order.  */\n+\n+  printf (\"Testing sel_getName () ...\\n\");\n+  {\n+    if (strcmp (sel_getName (@selector (variable)), \"variable\") != 0)\n+      abort ();\n+\n+    if (strcmp (sel_getName (NULL), \"<null selector>\") != 0)\n+      abort ();\n+  }\n+\n+  printf (\"Testing sel_getType () ...\\n\");\n+  {\n+    /* Get a selector from a real class, so it has interesting\n+       types.  */\n+    Method method = class_getInstanceMethod (objc_getClass (\"MySubClass\"),\n+\t\t\t\t\t     @selector (variable));\n+    \n+    if (strcmp (sel_getType (method_getName (method)), method_getTypeEncoding (method)) != 0)\n+      abort ();\n+  }\n+\n+  printf (\"Testing sel_getUid () ...\\n\");\n+  {\n+    if (strcmp (sel_getName (sel_getUid (\"myMethod\")), \"myMethod\") != 0)\n+      abort ();\n+  }\n+\n+  printf (\"Testing sel_isEqual () ...\\n\");\n+  {\n+    if (! sel_isEqual (@selector (setVariable:), @selector (setVariable:)))\n+      abort ();\n+  }\n+  \n+  printf (\"Testing sel_registerName () ...\\n\");\n+  {\n+    if (strcmp (sel_getName (sel_registerName (\"myMethod\")), \"myMethod\") != 0)\n+      abort ();\n+  }\n+\n+  printf (\"Testing set_registerTypedName () ...\\n\");\n+  {\n+    const char *types = method_getTypeEncoding (class_getInstanceMethod \n+\t\t\t\t\t\t(objc_getClass (\"MySubClass\"),\n+\t\t\t\t\t\t @selector (variable)));\n+    SEL selector = sel_registerTypedName (\"aMethod\", types);\n+    \n+    if (strcmp (sel_getName (selector), \"aMethod\") != 0)\n+      abort ();\n+\n+    if (strcmp (sel_getType (selector), types) != 0)\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}]}