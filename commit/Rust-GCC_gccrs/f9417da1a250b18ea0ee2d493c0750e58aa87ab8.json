{"sha": "f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0MTdkYTFhMjUwYjE4ZWEwZWUyZDQ5M2MwNzUwZTU4YWE4N2FiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-13T19:40:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-13T19:40:33Z"}, "message": "langhooks-def.h (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n\n2009-09-13  Richard Guenther  <rguenther@suse.de>\n\tRafael Avila de Espindola  <espindola@google.com>\n\n\t* langhooks-def.h (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n\t(LANG_HOOKS_INITIALIZER): Adjust.\n\t(lhd_pass_through_t): Declare.\n\t* langhooks.h (struct lang_hooks): Add eh_runtime_type and\n\teh_personality.\n\t* langhooks.c (lhd_pass_through_t): New function.\n\n        * dwarf2out.c (output_call_frame_info, dwarf2out_do_cfi_startproc,\n\tdwarf2out_begin_prologue): Use personality from current_function_decl.\n        * expr.h (get_personality_function): Declare.\n\t* expr.c (get_personality_function): New function.\n\t(build_personality_function): Likewise.\n        * libfuncs.h (libfunc_index): Remove LTI_eh_personality.\n        (eh_personality_libfunc): Remove.\n        * optabs.c (build_libfunc_function): New function split out from ...\n\t(init_one_libfunc): ... here.\n        * tree.h (DECL_FUNCTION_PERSONALITY): New.\n        (tree_function_decl): Add personality.\n\t(lhd_gcc_personality): Declare.\n\t(build_personality_function): Likewise.\n\t* tree.c (gcc_eh_personality_decl): New.\n\t(lhd_gcc_personality): New function.\n\t* except.h (lang_eh_runtime_type): Remove.\n\t(enum eh_personality_kind): New.\n\t(build_personality_function): Declare.\n\t(function_needs_eh_personality): Declare.\n        * except.c (lang_eh_runtime_type): Remove.\n\t(function_needs_eh_personality): New function.\n\t(add_type_for_runtime): Call lang_hooks.type_for_runtime instead.\n        (sjlj_emit_function_enter, output_function_exception_table):\n        Use personality from current_function_decl.\n\t* tree-eh.c (lower_eh_constructs): Set DECL_FUNCTION_PERSONALITY.\n\t* tree-inline.c (tree_can_inline_p): Do not inline across different\n\tEH personalities.\n\t(expand_call_inline): Likewise.  Adjust the callers EH personality.\n\t(tree_function_versioning): Copy DECL_FUNCTION_PERSONALITY.\n\t* cgraph.c (cgraph_add_new_function): Set DECL_FUNCTION_PERSONALITY.\n\t* Makefile.in (cgraph.o): Add $(EXCEPT_H) dependency.\n\t(c-parser.o): Likewise\n\n\t* c-tree.h (c_eh_initialized_p): Remove.\n\t(c_maybe_initialize_eh): Likewise.\n\t* c-decl.c (finish_decl): Don't call c_maybe_initialize_eh.\n\t(finish_decl): Don't call c_maybe_initialize_eh.\n\t(c_eh_initialized_p): Remove.\n\t(c_maybe_initialize_eh): Likewise.\n        * c-parser.c (c_parser_omp_construct): Likewise.\n\t(c_parse_file): Initialize exception handling.\n\n\tobjc/\n\t* objc-act.c (objc_eh_runtime_type): Export.\n\t(objc_init_exceptions): Remove.  Move warning code ...\n\t(objc_begin_try_stmt): ... here\n\t(objc_build_throw_stmt): ... and here.\n\t(objc_eh_personality_decl): New.\n\t(objc_eh_personality): New function.\n\t* objc-act.h (objc_eh_runtime_type): Declare.\n\t(objc_eh_personality): Likewise.\n\t* objc-lang.c (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n\n\tcp/\n\t* except.c (init_exception_processing): Do not set\n\tlang_eh_runtime_type.\n\t(choose_personality_routine): Do not set eh_personality_decl,\n\tset pragma_java_exceptions.\n\t* cp-lang.c (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n\t(cp_eh_personality_decl): New.\n\t(cp_eh_personality): Likewise.\n\t* Make-lang.in (cp-lang.o): Add $(EXPR_H) and $(EXCEPT_H)\n\tdependencies.\n\n\tjava/\n\t* decl.c (do_nothing): Remove.\n\t(java_init_decl_processing): Do not set lang_eh_runtime_type.\n\t* Make-lang.in (lang.o): Add $(EXCEPT_H) dependency.\n\t* lang.c (java_eh_personality): New.\n\t(java_eh_personality_decl): Likewise.\n\t(LANG_HOOKS_EH_PERSONALITY): Define.\n\n\tada/\n\t* gcc-interface/misc.c (gnat_init_gcc_eh): Do not set\n\tlang_eh_runtime_type.\n\t(LANG_HOOKS_EH_PERSONALITY): Define.\n\t(gnat_eh_personality_decl): New.\n\t(gnat_eh_personality): Likewise.\n\t* Make-lang.in (misc.o): Add gt-ada-misc.h dependency.\n\t* config-lang.in (gtfiles): Add misc.c.\n\n\tfortran/\n\t* f95-lang.c (gfc_maybe_initialize_eh): Do not init\n\teh_personality_libfunc.\n\nCo-Authored-By: Rafael Avila de Espindola <espindola@google.com>\n\nFrom-SVN: r151676", "tree": {"sha": "5e937f9960fc5af8114c7b2d8943ecdd565debb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e937f9960fc5af8114c7b2d8943ecdd565debb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22f3450401afc7a025eec24ede6a947ffd7ad0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f3450401afc7a025eec24ede6a947ffd7ad0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f3450401afc7a025eec24ede6a947ffd7ad0f7"}], "stats": {"total": 643, "additions": 503, "deletions": 140}, "files": [{"sha": "21bf315913020f4bba1058caa9281c1f85232c15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,54 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* langhooks-def.h (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n+\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n+\t(LANG_HOOKS_INITIALIZER): Adjust.\n+\t(lhd_pass_through_t): Declare.\n+\t* langhooks.h (struct lang_hooks): Add eh_runtime_type and\n+\teh_personality.\n+\t* langhooks.c (lhd_pass_through_t): New function.\n+        * dwarf2out.c (output_call_frame_info, dwarf2out_do_cfi_startproc,\n+\tdwarf2out_begin_prologue): Use personality from current_function_decl.\n+        * expr.h (get_personality_function): Declare.\n+\t* expr.c (get_personality_function): New function.\n+\t(build_personality_function): Likewise.\n+        * libfuncs.h (libfunc_index): Remove LTI_eh_personality.\n+        (eh_personality_libfunc): Remove.\n+        * optabs.c (build_libfunc_function): New function split out from ...\n+\t(init_one_libfunc): ... here.\n+        * tree.h (DECL_FUNCTION_PERSONALITY): New.\n+        (tree_function_decl): Add personality.\n+\t(lhd_gcc_personality): Declare.\n+\t(build_personality_function): Likewise.\n+\t* tree.c (gcc_eh_personality_decl): New.\n+\t(lhd_gcc_personality): New function.\n+\t* except.h (lang_eh_runtime_type): Remove.\n+\t(enum eh_personality_kind): New.\n+\t(build_personality_function): Declare.\n+\t(function_needs_eh_personality): Declare.\n+        * except.c (lang_eh_runtime_type): Remove.\n+\t(function_needs_eh_personality): New function.\n+\t(add_type_for_runtime): Call lang_hooks.type_for_runtime instead.\n+        (sjlj_emit_function_enter, output_function_exception_table):\n+        Use personality from current_function_decl.\n+\t* tree-eh.c (lower_eh_constructs): Set DECL_FUNCTION_PERSONALITY.\n+\t* tree-inline.c (tree_can_inline_p): Do not inline across different\n+\tEH personalities.\n+\t(expand_call_inline): Likewise.  Adjust the callers EH personality.\n+\t(tree_function_versioning): Copy DECL_FUNCTION_PERSONALITY.\n+\t* cgraph.c (cgraph_add_new_function): Set DECL_FUNCTION_PERSONALITY.\n+\t* Makefile.in (cgraph.o): Add $(EXCEPT_H) dependency.\n+\t(c-parser.o): Likewise\n+\t* c-tree.h (c_eh_initialized_p): Remove.\n+\t(c_maybe_initialize_eh): Likewise.\n+\t* c-decl.c (finish_decl): Don't call c_maybe_initialize_eh.\n+\t(finish_decl): Don't call c_maybe_initialize_eh.\n+\t(c_eh_initialized_p): Remove.\n+\t(c_maybe_initialize_eh): Likewise.\n+        * c-parser.c (c_parser_omp_construct): Likewise.\n+\t(c_parse_file): Initialize exception handling.\n+\n 2009-09-13  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config.gcc (tm_file): Remove i386/biarch32.h"}, {"sha": "d89fb2a7e8c3e2833a54041cd3246f1862c81d53", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1909,7 +1909,7 @@ c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n c-parser.o : c-parser.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(GGC_H) $(TIMEVAR_H) $(C_TREE_H) $(INPUT_H) $(FLAGS_H) $(TOPLEV_H) output.h \\\n     $(CPPLIB_H) gt-c-parser.h $(RTL_H) langhooks.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n-    vec.h $(TARGET_H) $(CGRAPH_H) $(PLUGIN_H)\n+    vec.h $(TARGET_H) $(CGRAPH_H) $(PLUGIN_H) $(EXCEPT_H)\n \n srcextra: gcc.srcextra lang.srcextra\n \n@@ -2767,7 +2767,7 @@ simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h $(TOPLEV_H) $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n-   $(TREE_INLINE_H) $(TREE_DUMP_H) $(TREE_FLOW_H) value-prof.h\n+   $(TREE_INLINE_H) $(TREE_DUMP_H) $(TREE_FLOW_H) value-prof.h $(EXCEPT_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) $(TOPLEV_H) $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\"}, {"sha": "7d4d8aad2939b66620fb0d31fc543832b6049274", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,14 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* gcc-interface/misc.c (gnat_init_gcc_eh): Do not set\n+\tlang_eh_runtime_type.\n+\t(LANG_HOOKS_EH_PERSONALITY): Define.\n+\t(gnat_eh_personality_decl): New.\n+\t(gnat_eh_personality): Likewise.\n+\t* Make-lang.in (misc.o): Add gt-ada-misc.h dependency.\n+\t* config-lang.in (gtfiles): Add misc.c.\n+\n 2009-09-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR ada/18302"}, {"sha": "163274c43329a6402e482a2d1e3f03ee0fcdc762", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1072,7 +1072,8 @@ ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n-   ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h\n+   ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\\n+   gt-ada-misc.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/targtyps.o : ada/gcc-interface/targtyps.c $(CONFIG_H) $(SYSTEM_H) \\"}, {"sha": "b4a28be14c756f75c832e7c4bbf07daf406363d9", "filename": "gcc/ada/gcc-interface/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -32,7 +32,7 @@ boot_language_boot_flags='ADAFLAGS=\"$(BOOT_ADAFLAGS)\"'\n \n compilers=\"gnat1\\$(exeext)\"\n \n-gtfiles=\"\\$(srcdir)/ada/gcc-interface/ada-tree.h \\$(srcdir)/ada/gcc-interface/gigi.h \\$(srcdir)/ada/gcc-interface/decl.c \\$(srcdir)/ada/gcc-interface/trans.c \\$(srcdir)/ada/gcc-interface/utils.c\"\n+gtfiles=\"\\$(srcdir)/ada/gcc-interface/ada-tree.h \\$(srcdir)/ada/gcc-interface/gigi.h \\$(srcdir)/ada/gcc-interface/decl.c \\$(srcdir)/ada/gcc-interface/trans.c \\$(srcdir)/ada/gcc-interface/utils.c \\$(srcdir)/ada/gcc-interface/misc.c\"\n \n outputs=\"ada/gcc-interface/Makefile ada/Makefile\"\n "}, {"sha": "261351f840c917813e56f0f240a03956e5a7817d", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -79,6 +79,7 @@ static void gnat_parse_file\t\t(int);\n static void internal_error_function\t(const char *, va_list *);\n static tree gnat_type_max_size\t\t(const_tree);\n static void gnat_get_subrange_bounds\t(const_tree, tree *, tree *);\n+static tree gnat_eh_personality\t\t(void);\n \n /* Definitions for our language-specific hooks.  */\n \n@@ -129,7 +130,9 @@ static void gnat_get_subrange_bounds\t(const_tree, tree *, tree *);\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n #undef  LANG_HOOKS_BUILTIN_FUNCTION\n-#define LANG_HOOKS_BUILTIN_FUNCTION        gnat_builtin_function\n+#define LANG_HOOKS_BUILTIN_FUNCTION\tgnat_builtin_function\n+#undef  LANG_HOOKS_EH_PERSONALITY\n+#define LANG_HOOKS_EH_PERSONALITY\tgnat_eh_personality\n \n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -431,11 +434,7 @@ gnat_init_gcc_eh (void)\n      right exception regions.  */\n   using_eh_for_cleanups ();\n \n-  eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t\t\t     ? \"__gnat_eh_personality_sj\"\n-\t\t\t\t\t     : \"__gnat_eh_personality\");\n   lang_eh_type_covers = gnat_eh_type_covers;\n-  lang_eh_runtime_type = gnat_return_tree;\n   default_init_unwind_resume_libfunc ();\n \n   /* Turn on -fexceptions and -fnon-call-exceptions. The first one triggers\n@@ -811,3 +810,19 @@ fp_size_to_prec (int size)\n \n   gcc_unreachable ();\n }\n+\n+static GTY(()) tree gnat_eh_personality_decl;\n+\n+static tree\n+gnat_eh_personality (void)\n+{\n+  if (!gnat_eh_personality_decl)\n+    gnat_eh_personality_decl\n+      = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t    ? \"__gnat_eh_personality_sj\"\n+\t\t\t\t    : \"__gnat_eh_personality\");\n+\n+  return gnat_eh_personality_decl;\n+}\n+\n+#include \"gt-ada-misc.h\""}, {"sha": "ed8863dddd9f9f9e6f31bbefc4c75afce6c1ea07", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -92,9 +92,6 @@ tree pending_invalid_xref;\n /* File and line to appear in the eventual error message.  */\n location_t pending_invalid_xref_location;\n \n-/* True means we've initialized exception handling.  */\n-bool c_eh_initialized_p;\n-\n /* The file and line that the prototype came from if this is an\n    old-style definition; used for diagnostics in\n    store_parm_decls_oldstyle.  */\n@@ -2365,7 +2362,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n     TREE_USED (olddecl) = 1;\n \n   /* Copy most of the decl-specific fields of NEWDECL into OLDDECL.\n-     But preserve OLDDECL's DECL_UID and DECL_CONTEXT.  */\n+     But preserve OLDDECL's DECL_UID, DECL_CONTEXT and\n+     DECL_ARGUMENTS (if appropriate).  */\n   {\n     unsigned olddecl_uid = DECL_UID (olddecl);\n     tree olddecl_context = DECL_CONTEXT (olddecl);\n@@ -4043,23 +4041,6 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   return tem;\n }\n \n-/* Initialize EH if not initialized yet and exceptions are enabled.  */\n-\n-void\n-c_maybe_initialize_eh (void)\n-{\n-  if (!flag_exceptions || c_eh_initialized_p)\n-    return;\n-\n-  c_eh_initialized_p = true;\n-  eh_personality_libfunc\n-    = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t? \"__gcc_personality_sj0\"\n-\t\t\t: \"__gcc_personality_v0\");\n-  default_init_unwind_resume_libfunc ();\n-  using_eh_for_cleanups ();\n-}\n-\n /* Finish processing of a declaration;\n    install its initial value.\n    If ORIGTYPE is not NULL_TREE, it is the original type of INIT.\n@@ -4360,9 +4341,6 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t  TREE_USED (decl) = 1;\n \t  TREE_USED (cleanup_decl) = 1;\n \n-\t  /* Initialize EH, if we've been told to do so.  */\n-\t  c_maybe_initialize_eh ();\n-\n \t  push_cleanup (decl, cleanup, false);\n \t}\n     }"}, {"sha": "ddb81e16504e97037ae60f9753e3f390bfd0edcc", "filename": "gcc/c-parser.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"plugin.h\"\n+#include \"except.h\"\n \n \f\n /* Initialization routine for this file.  */\n@@ -8489,12 +8490,6 @@ c_parser_omp_construct (c_parser *parser)\n   p_kind = c_parser_peek_token (parser)->pragma_kind;\n   c_parser_consume_pragma (parser);\n \n-  /* For all constructs below except #pragma omp atomic\n-     MUST_NOT_THROW catch handlers are needed when exceptions\n-     are enabled.  */\n-  if (p_kind != PRAGMA_OMP_ATOMIC)\n-    c_maybe_initialize_eh ();\n-\n   switch (p_kind)\n     {\n     case PRAGMA_OMP_ATOMIC:\n@@ -8607,6 +8602,13 @@ c_parse_file (void)\n   the_parser = GGC_NEW (c_parser);\n   *the_parser = tparser;\n \n+  /* Initialize EH, if we've been told to do so.  */\n+  if (flag_exceptions)\n+    {\n+      default_init_unwind_resume_libfunc ();\n+      using_eh_for_cleanups ();\n+    }\n+\n   c_parser_translation_unit (the_parser);\n   the_parser = NULL;\n }"}, {"sha": "5c1ccb537d5de3564dd759be3945ecf3f4d2e0bd", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -427,7 +427,6 @@ extern struct c_spot_bindings *c_get_switch_bindings (void);\n extern void c_release_switch_bindings (struct c_spot_bindings *);\n extern bool c_check_switch_jump_warnings (struct c_spot_bindings *,\n \t\t\t\t\t  location_t, location_t);\n-extern void c_maybe_initialize_eh (void);\n extern void finish_decl (tree, location_t, tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n@@ -589,9 +588,6 @@ extern int system_header_p;\n \n extern bool c_override_global_bindings_to_false;\n \n-/* True means we've initialized exception handling.  */\n-extern bool c_eh_initialized_p;\n-\n /* In c-decl.c */\n extern void c_finish_incomplete_decl (tree);\n extern void c_write_global_declarations (void);"}, {"sha": "75447be839e4f559bb58fdc2fa1cb5716f541946", "filename": "gcc/cgraph.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -84,6 +84,7 @@ The callgraph:\n #include \"tree-dump.h\"\n #include \"tree-flow.h\"\n #include \"value-prof.h\"\n+#include \"except.h\"\n \n static void cgraph_node_remove_callers (struct cgraph_node *node);\n static inline void cgraph_edge_remove_caller (struct cgraph_edge *e);\n@@ -1953,6 +1954,12 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \tcurrent_function_decl = NULL;\n \tbreak;\n     }\n+\n+  /* Set a personality if required and we already passed EH lowering.  */\n+  if (lowered\n+      && (function_needs_eh_personality (DECL_STRUCT_FUNCTION (fndecl))\n+\t  == eh_personality_lang))\n+    DECL_FUNCTION_PERSONALITY (fndecl) = lang_hooks.eh_personality ();\n }\n \n /* Return true if NODE can be made local for API change."}, {"sha": "a50e9fcaf25f58b0607670ee6a81206f4923e9d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,17 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* except.c (init_exception_processing): Do not set\n+\tlang_eh_runtime_type.\n+\t(choose_personality_routine): Do not set eh_personality_decl,\n+\tset pragma_java_exceptions.\n+\t* cp-lang.c (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n+\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n+\t(cp_eh_personality_decl): New.\n+\t(cp_eh_personality): Likewise.\n+\t* Make-lang.in (cp-lang.o): Add $(EXPR_H) and $(EXCEPT_H)\n+\tdependencies.\n+\n 2009-09-13  Wei Guozhi  <carrot@google.com>\n \n \tPR c++/3187"}, {"sha": "861c93df066bb53e83dd5d7b2df1dadb3353acc1", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -250,7 +250,7 @@ cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   $(C_PRAGMA_H) toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h \\\n-  $(DIAGNOSTIC_H) cp/cp-objcp-common.h\n+  $(DIAGNOSTIC_H) cp/cp-objcp-common.h $(EXPR_H) $(EXCEPT_H)\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n   output.h $(EXPR_H) except.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\"}, {"sha": "9521eab28cdcb7a00f15414892ebf5b8480f62df", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -32,11 +32,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"cp-objcp-common.h\"\n #include \"hashtab.h\"\n+#include \"except.h\"\n+#include \"expr.h\"\n \n enum c_language_kind c_language = clk_cxx;\n static void cp_init_ts (void);\n static const char * cxx_dwarf_name (tree t, int verbosity);\n static enum classify_record cp_classify_record (tree type);\n+static tree cp_eh_personality (void);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -71,6 +74,10 @@ static enum classify_record cp_classify_record (tree type);\n #define LANG_HOOKS_FOLD_OBJ_TYPE_REF cp_fold_obj_type_ref\n #undef LANG_HOOKS_INIT_TS\n #define LANG_HOOKS_INIT_TS cp_init_ts\n+#undef LANG_HOOKS_EH_PERSONALITY\n+#define LANG_HOOKS_EH_PERSONALITY cp_eh_personality\n+#undef LANG_HOOKS_EH_RUNTIME_TYPE\n+#define LANG_HOOKS_EH_RUNTIME_TYPE build_eh_type_type\n \n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n@@ -145,4 +152,26 @@ finish_file (void)\n {\n }\n \n+static GTY(()) tree cp_eh_personality_decl;\n+\n+static tree\n+cp_eh_personality (void)\n+{\n+  if (!cp_eh_personality_decl)\n+    {\n+      if (!pragma_java_exceptions)\n+\tcp_eh_personality_decl\n+\t  = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t\t? \"__gxx_personality_sj0\"\n+\t\t\t\t\t: \"__gxx_personality_v0\");\n+      else\n+\tcp_eh_personality_decl\n+\t  = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t\t? \"__gcj_personality_sj0\"\n+\t\t\t\t\t: \"__gcj_personality_v0\");\n+    }\n+\n+  return cp_eh_personality_decl;\n+}\n+\n #include \"gtype-cp.h\""}, {"sha": "c720a565e7ce428b38736ba7e6ae203d2f8a4b95", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -4521,6 +4521,7 @@ extern void choose_personality_routine\t\t(enum languages);\n extern tree eh_type_info\t\t\t(tree);\n extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n+extern tree build_eh_type_type\t\t\t(tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);"}, {"sha": "588c2ee68d8b7c789e1b3707998a81703cb079f6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -43,7 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n \n static void push_eh_cleanup (tree);\n static tree prepare_eh_type (tree);\n-static tree build_eh_type_type (tree);\n static tree do_begin_catch (void);\n static int dtor_nothrow (tree);\n static tree do_end_catch (tree);\n@@ -78,15 +77,11 @@ init_exception_processing (void)\n   call_unexpected_node\n     = push_throw_library_fn (get_identifier (\"__cxa_call_unexpected\"), tmp);\n \n-  eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t\t\t     ? \"__gxx_personality_sj0\"\n-\t\t\t\t\t     : \"__gxx_personality_v0\");\n   if (targetm.arm_eabi_unwinder)\n     unwind_resume_libfunc = init_one_libfunc (\"__cxa_end_cleanup\");\n   else\n     default_init_unwind_resume_libfunc ();\n \n-  lang_eh_runtime_type = build_eh_type_type;\n   lang_protect_cleanup_actions = &cp_protect_cleanup_actions;\n }\n \n@@ -143,7 +138,7 @@ eh_type_info (tree type)\n /* Build the address of a typeinfo decl for use in the runtime\n    matching field of the exception model.  */\n \n-static tree\n+tree\n build_eh_type_type (tree type)\n {\n   tree exp = eh_type_info (type);\n@@ -313,7 +308,7 @@ decl_is_java_type (tree decl, int err)\n /* Select the personality routine to be used for exception handling,\n    or issue an error if we need two different ones in the same\n    translation unit.\n-   ??? At present eh_personality_libfunc is set to\n+   ??? At present eh_personality_decl is set to\n    __gxx_personality_(sj|v)0 in init_exception_processing - should it\n    be done here instead?  */\n void\n@@ -354,9 +349,7 @@ choose_personality_routine (enum languages lang)\n     case lang_java:\n       state = chose_java;\n       terminate_node = built_in_decls [BUILT_IN_ABORT];\n-      eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t\t\t\t ? \"__gcj_personality_sj0\"\n-\t\t\t\t\t\t : \"__gcj_personality_v0\");\n+      pragma_java_exceptions = true;\n       break;\n \n     default:"}, {"sha": "6f0b965d2e738248a2f8e537d4b4c3a32079dddf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -216,6 +216,10 @@ static GTY(()) section *debug_str_section;\n static GTY(()) section *debug_ranges_section;\n static GTY(()) section *debug_frame_section;\n \n+/* Personality decl of current unit.  Used only when assembler does not support\n+   personality CFI.  */\n+static GTY(()) rtx current_unit_personality;\n+\n /* How to start an assembler comment.  */\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\"\n@@ -3599,6 +3603,7 @@ output_call_frame_info (int for_eh)\n   int per_encoding = DW_EH_PE_absptr;\n   int lsda_encoding = DW_EH_PE_absptr;\n   int return_reg;\n+  rtx personality = NULL;\n   int dw_cie_version;\n \n   /* Don't emit a CIE if there won't be any FDEs.  */\n@@ -3684,6 +3689,8 @@ output_call_frame_info (int for_eh)\n \n   augmentation[0] = 0;\n   augmentation_size = 0;\n+\n+  personality = current_unit_personality;\n   if (for_eh)\n     {\n       char *p;\n@@ -3703,11 +3710,11 @@ output_call_frame_info (int for_eh)\n       lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/0);\n \n       p = augmentation + 1;\n-      if (eh_personality_libfunc)\n+      if (personality)\n \t{\n \t  *p++ = 'P';\n \t  augmentation_size += 1 + size_of_encoded_value (per_encoding);\n-\t  assemble_external_libcall (eh_personality_libfunc);\n+\t  assemble_external_libcall (personality);\n \t}\n       if (any_lsda_needed)\n \t{\n@@ -3726,7 +3733,7 @@ output_call_frame_info (int for_eh)\n \t}\n \n       /* Ug.  Some platforms can't do unaligned dynamic relocations at all.  */\n-      if (eh_personality_libfunc && per_encoding == DW_EH_PE_aligned)\n+      if (personality && per_encoding == DW_EH_PE_aligned)\n \t{\n \t  int offset = (  4\t\t/* Length */\n \t\t\t+ 4\t\t/* CIE Id */\n@@ -3760,12 +3767,12 @@ output_call_frame_info (int for_eh)\n   if (augmentation[0])\n     {\n       dw2_asm_output_data_uleb128 (augmentation_size, \"Augmentation size\");\n-      if (eh_personality_libfunc)\n+      if (personality)\n \t{\n \t  dw2_asm_output_data (1, per_encoding, \"Personality (%s)\",\n \t\t\t       eh_data_format_name (per_encoding));\n \t  dw2_asm_output_encoded_addr_rtx (per_encoding,\n-\t\t\t\t\t   eh_personality_libfunc,\n+\t\t\t\t\t   personality,\n \t\t\t\t\t   true, NULL);\n \t}\n \n@@ -3824,13 +3831,14 @@ dwarf2out_do_cfi_startproc (bool second)\n {\n   int enc;\n   rtx ref;\n+  rtx personality = get_personality_function (current_function_decl);\n \n   fprintf (asm_out_file, \"\\t.cfi_startproc\\n\");\n \n-  if (eh_personality_libfunc)\n+  if (personality)\n     {\n       enc = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2, /*global=*/1);\n-      ref = eh_personality_libfunc;\n+      ref = personality;\n \n       /* ??? The GAS support isn't entirely consistent.  We have to\n \t handle indirect support ourselves, but PC-relative is done\n@@ -3873,6 +3881,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n   char * dup_label;\n   dw_fde_ref fde;\n+  rtx personality;\n   section *fnsec;\n \n   current_function_func_begin_label = NULL;\n@@ -3967,8 +3976,17 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n     dwarf2out_source_line (line, file, 0, true);\n #endif\n \n+  personality = get_personality_function (current_function_decl);\n   if (dwarf2out_do_cfi_asm ())\n     dwarf2out_do_cfi_startproc (false);\n+  else\n+    {\n+      if (!current_unit_personality || current_unit_personality == personality)\n+        current_unit_personality = personality;\n+      else\n+\tsorry (\"Multiple EH personalities are supported only with assemblers \"\n+\t       \"supporting .cfi.personality directive.\");\n+    }\n }\n \n /* Output a marker (i.e. a label) for the absolute end of the generated code"}, {"sha": "9b6c24eff9b7ad332059215bdb25858331c5fc79", "filename": "gcc/except.c", "status": "modified", "additions": 76, "deletions": 12, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -92,9 +92,6 @@ gimple (*lang_protect_cleanup_actions) (void);\n /* Return true if type A catches type B.  */\n int (*lang_eh_type_covers) (tree a, tree b);\n \n-/* Map a type to a runtime object to match type.  */\n-tree (*lang_eh_runtime_type) (tree);\n-\n /* A hash table of label to region number.  */\n \n struct GTY(()) ehl_map_entry {\n@@ -1696,7 +1693,7 @@ add_type_for_runtime (tree type)\n \t\t\t\t\t    TREE_HASH (type), INSERT);\n   if (*slot == NULL)\n     {\n-      tree runtime = (*lang_eh_runtime_type) (type);\n+      tree runtime = lang_hooks.eh_runtime_type (type);\n       *slot = tree_cons (type, runtime, NULL_TREE);\n     }\n }\n@@ -2424,6 +2421,7 @@ sjlj_emit_function_enter (rtx dispatch_label)\n {\n   rtx fn_begin, fc, mem, seq;\n   bool fn_begin_outside_block;\n+  rtx personality = get_personality_function (current_function_decl);\n \n   fc = crtl->eh.sjlj_fc;\n \n@@ -2432,9 +2430,9 @@ sjlj_emit_function_enter (rtx dispatch_label)\n   /* We're storing this libcall's address into memory instead of\n      calling it directly.  Thus, we must call assemble_external_libcall\n      here, as we can not depend on emit_library_call to do it for us.  */\n-  assemble_external_libcall (eh_personality_libfunc);\n+  assemble_external_libcall (personality);\n   mem = adjust_address (fc, Pmode, sjlj_fc_personality_ofs);\n-  emit_move_insn (mem, eh_personality_libfunc);\n+  emit_move_insn (mem, personality);\n \n   mem = adjust_address (fc, Pmode, sjlj_fc_lsda_ofs);\n   if (crtl->uses_eh_lsda)\n@@ -4394,7 +4392,7 @@ output_ttype (tree type, int tt_format, int tt_format_size)\n \n static void\n output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n-\t\t\t\t     int section)\n+\t\t\t\t     int section, rtx ARG_UNUSED (personality))\n {\n   int tt_format, cs_format, lp_format, i, n;\n #ifdef HAVE_AS_LEB128\n@@ -4410,7 +4408,7 @@ output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n #ifdef TARGET_UNWIND_INFO\n   /* TODO: Move this into target file.  */\n   fputs (\"\\t.personality\\t\", asm_out_file);\n-  output_addr_const (asm_out_file, eh_personality_libfunc);\n+  output_addr_const (asm_out_file, personality);\n   fputs (\"\\n\\t.handlerdata\\n\", asm_out_file);\n   /* Note that varasm still thinks we're in the function's code section.\n      The \".endp\" directive that will immediately follow will take us back.  */\n@@ -4580,16 +4578,18 @@ output_one_function_exception_table (const char * ARG_UNUSED (fnname),\n void\n output_function_exception_table (const char * ARG_UNUSED (fnname))\n {\n+  rtx personality = get_personality_function (current_function_decl);\n+\n   /* Not all functions need anything.  */\n   if (! crtl->uses_eh_lsda)\n     return;\n \n-  if (eh_personality_libfunc)\n-    assemble_external_libcall (eh_personality_libfunc);\n+  if (personality)\n+    assemble_external_libcall (personality);\n \n-  output_one_function_exception_table (fnname, 0);\n+  output_one_function_exception_table (fnname, 0, personality);\n   if (crtl->eh.call_site_record[1] != NULL)\n-    output_one_function_exception_table (fnname, 1);\n+    output_one_function_exception_table (fnname, 1, personality);\n \n   switch_to_section (current_function_section ());\n }\n@@ -4606,6 +4606,70 @@ get_eh_throw_stmt_table (struct function *fun)\n   return fun->eh->throw_stmt_table;\n }\n \n+/* Return true if the function deeds a EH personality function.  */\n+\n+enum eh_personality_kind\n+function_needs_eh_personality (struct function *fn)\n+{\n+  struct eh_region_d *i;\n+  int depth = 0;\n+  enum eh_personality_kind kind = eh_personality_none;\n+\n+  i = fn->eh->region_tree;\n+  if (!i)\n+    return eh_personality_none;\n+\n+  while (1)\n+    {\n+      switch (i->type)\n+\t{\n+\tcase ERT_TRY:\n+\tcase ERT_THROW:\n+\t  /* Do not need a EH personality function.  */\n+\t  break;\n+\n+\tcase ERT_MUST_NOT_THROW:\n+\t  /* Always needs a EH personality function.  */\n+\t  return eh_personality_lang;\n+\n+\tcase ERT_CLEANUP:\n+\t  /* Can do with any personality including the generic C one.  */\n+\t  kind = eh_personality_any;\n+\t  break;\n+\n+\tcase ERT_CATCH:\n+\tcase ERT_ALLOWED_EXCEPTIONS:\n+\t  /* Always needs a EH personality function.  The generic C\n+\t     personality doesn't handle these even for empty type lists.  */\n+\t  return eh_personality_lang;\n+\n+\tcase ERT_UNKNOWN:\n+\t  return eh_personality_lang;\n+\t}\n+      /* If there are sub-regions, process them.  */\n+      if (i->inner)\n+\ti = i->inner, depth++;\n+      /* If there are peers, process them.  */\n+      else if (i->next_peer)\n+\ti = i->next_peer;\n+      /* Otherwise, step back up the tree to the next peer.  */\n+      else\n+\t{\n+\t  do\n+\t    {\n+\t      i = i->outer;\n+\t      depth--;\n+\t      if (i == NULL)\n+\t\treturn kind;\n+\t    }\n+\t  while (i->next_peer == NULL);\n+\t  i = i->next_peer;\n+\t}\n+    }\n+\n+  return kind;\n+}\n+\n /* Dump EH information to OUT.  */\n \n void"}, {"sha": "af63e983a3acbdc92ea4bc7be846dcedea11b51f", "filename": "gcc/except.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -217,9 +217,6 @@ extern gimple (*lang_protect_cleanup_actions) (void);\n /* Return true if type A catches type B.  */\n extern int (*lang_eh_type_covers) (tree a, tree b);\n \n-/* Map a type to a runtime object to match type.  */\n-extern tree (*lang_eh_runtime_type) (tree);\n-\n \n /* Just because the user configured --with-sjlj-exceptions=no doesn't\n    mean that we can use call frame exceptions.  Detect that the target\n@@ -277,3 +274,12 @@ extern int num_eh_regions (void);\n extern bitmap must_not_throw_labels (void);\n extern struct eh_region_d *redirect_eh_edge_to_label (struct edge_def *, tree, bool, bool, int);\n extern int get_next_region_sharing_label (int);\n+\n+enum eh_personality_kind {\n+  eh_personality_none,\n+  eh_personality_any,\n+  eh_personality_lang\n+};\n+\n+extern enum eh_personality_kind\n+function_needs_eh_personality (struct function *);"}, {"sha": "be3b5bb5e5be91bbee3c89e5209e2e03e54275a3", "filename": "gcc/expr.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -10214,4 +10214,52 @@ const_vector_from_tree (tree exp)\n \n   return gen_rtx_CONST_VECTOR (mode, v);\n }\n+\n+\n+/* Build a decl for a EH personality function named NAME. */\n+\n+tree\n+build_personality_function (const char *name)\n+{\n+  tree decl, type;\n+\n+  type = build_function_type_list (integer_type_node, integer_type_node,\n+\t\t\t\t   long_long_unsigned_type_node,\n+\t\t\t\t   ptr_type_node, ptr_type_node, NULL_TREE);\n+  decl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL,\n+\t\t     get_identifier (name), type);\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_EXTERNAL (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+\n+  /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n+     are the flags assigned by targetm.encode_section_info.  */\n+  SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);\n+\n+  return decl;\n+}\n+\n+/* Extracts the personality function of DECL and returns the corresponding\n+   libfunc.  */\n+\n+rtx\n+get_personality_function (tree decl)\n+{\n+  tree personality = DECL_FUNCTION_PERSONALITY (decl);\n+  enum eh_personality_kind pk;\n+\n+  pk = function_needs_eh_personality (DECL_STRUCT_FUNCTION (decl));\n+  if (pk == eh_personality_none)\n+    return NULL;\n+\n+  if (!personality\n+      && pk == eh_personality_any)\n+    personality = lang_hooks.eh_personality ();\n+\n+  if (pk == eh_personality_lang)\n+    gcc_assert (personality != NULL_TREE);\n+\n+  return XEXP (DECL_RTL (personality), 0);\n+}\n+\n #include \"gt-expr.h\""}, {"sha": "9bf0c38f5d2fae9135c2e159f638e95c3789bfa1", "filename": "gcc/expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -814,6 +814,12 @@ extern void init_all_optabs (void);\n extern rtx init_one_libfunc (const char *);\n extern rtx set_user_assembler_libfunc (const char *, const char *);\n \n+/* Build a decl for a libfunc named NAME. */\n+extern tree build_libfunc_function (const char *);\n+\n+/* Get the personality libfunc for a function decl.  */\n+rtx get_personality_function (tree);\n+\n extern int vector_mode_valid_p (enum machine_mode);\n \n #endif /* GCC_EXPR_H */"}, {"sha": "7cf6e86d9b05a958efac3d9587c3bae2e5601e89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,9 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* f95-lang.c (gfc_maybe_initialize_eh): Do not init\n+\teh_personality_libfunc.\n+\n 2009-09-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41242"}, {"sha": "3d94fd624240efc8b1743f19b7dc423f49d84709", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1155,10 +1155,6 @@ gfc_maybe_initialize_eh (void)\n     return;\n \n   gfc_eh_initialized_p = true;\n-  eh_personality_libfunc\n-    = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-                       ? \"__gcc_personality_sj0\"\n-                       : \"__gcc_personality_v0\");\n   default_init_unwind_resume_libfunc ();\n   using_eh_for_cleanups ();\n }"}, {"sha": "6b7d930ba28ae8749e4a73a8d4da2bffa7c05431", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,13 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* decl.c (do_nothing): Remove.\n+\t(java_init_decl_processing): Do not set lang_eh_runtime_type.\n+\t* Make-lang.in (lang.o): Add $(EXCEPT_H) dependency.\n+\t* lang.c (java_eh_personality): New.\n+\t(java_eh_personality_decl): Likewise.\n+\t(LANG_HOOKS_EH_PERSONALITY): Define.\n+\n 2009-09-03  Diego Novillo  <dnovillo@google.com>\n \n \t* lang.c (lang_hooks): Remove const qualifier."}, {"sha": "a56e2b62943c8edc26bb2b2d24cdcc0316e3f55c", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -284,7 +284,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(EXPR_H) $(DIAGNOSTIC_H) \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h $(EXCEPT_H)\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h $(LANGHOOKS_DEF_H)\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\"}, {"sha": "c9ccc9d8556f329c7f8dcb26033179eb76780899", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -510,12 +510,6 @@ create_primitive_vtable (const char *name)\n   return r;\n }\n \n-static tree\n-do_nothing (tree t)\n-{\n-  return t;\n-}\n-\n /* Parse the version string and compute the ABI version number.  */\n static void\n parse_version (void)\n@@ -1195,16 +1189,12 @@ java_init_decl_processing (void)\n \t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   /* Initialize variables for except.c.  */\n-  eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-                                             ? \"__gcj_personality_sj0\"\n-                                             : \"__gcj_personality_v0\");\n+\n   if (targetm.arm_eabi_unwinder)\n     unwind_resume_libfunc = init_one_libfunc (\"__cxa_end_cleanup\");\n   else\n     default_init_unwind_resume_libfunc ();\n \n-  lang_eh_runtime_type = do_nothing;\n-\n   initialize_builtins ();\n   soft_fmod_node = built_in_decls[BUILT_IN_FMOD];\n "}, {"sha": "504d0295bf044afde9f1326eb1b900bdbf5ac76a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -45,6 +45,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree-dump.h\"\n #include \"opts.h\"\n #include \"options.h\"\n+#include \"except.h\"\n \n static bool java_init (void);\n static void java_finish (void);\n@@ -64,6 +65,8 @@ static bool java_decl_ok_for_sibcall (const_tree);\n \n static enum classify_record java_classify_record (tree type);\n \n+static tree java_eh_personality (void);\n+\n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n@@ -158,6 +161,9 @@ struct GTY(()) language_function {\n #undef LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE java_attribute_table\n \n+#undef LANG_HOOKS_EH_PERSONALITY\n+#define LANG_HOOKS_EH_PERSONALITY java_eh_personality\n+\n /* Each front end provides its own.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -880,4 +886,18 @@ java_classify_record (tree type)\n   return RECORD_IS_CLASS;\n }\n \n+static GTY(()) tree java_eh_personality_decl;\n+\n+static tree\n+java_eh_personality (void)\n+{\n+  if (!java_eh_personality_decl)\n+    java_eh_personality_decl\n+      = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t    ? \"__gcj_personality_sj0\"\n+\t\t\t\t    : \"__gcj_personality_v0\");\n+\n+  return java_eh_personality_decl;\n+}\n+\n #include \"gt-java-lang.h\""}, {"sha": "dc4fdeef02f0d2e29129b362189fcaaa3ed81b8d", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -40,6 +40,7 @@ extern void lhd_do_nothing (void);\n extern void lhd_do_nothing_t (tree);\n extern void lhd_do_nothing_i (int);\n extern void lhd_do_nothing_f (struct function *);\n+extern tree lhd_pass_through_t (tree);\n extern bool lhd_post_options (const char **);\n extern alias_set_type lhd_get_alias_set (tree);\n extern tree lhd_return_null_tree_v (void);\n@@ -107,6 +108,8 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n+#define LANG_HOOKS_EH_PERSONALITY\tlhd_gcc_personality\n+#define LANG_HOOKS_EH_RUNTIME_TYPE\tlhd_pass_through_t\n \n /* Attribute hooks.  */\n #define LANG_HOOKS_ATTRIBUTE_TABLE\t\tNULL\n@@ -271,6 +274,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE, \\\n   LANG_HOOKS_INIT_TS,          \\\n   LANG_HOOKS_EXPR_TO_DECL, \\\n+  LANG_HOOKS_EH_PERSONALITY, \\\n+  LANG_HOOKS_EH_RUNTIME_TYPE, \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "092a32385922f074d1f0000cc3c14bec2b866408", "filename": "gcc/langhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -53,6 +53,13 @@ lhd_do_nothing_t (tree ARG_UNUSED (t))\n {\n }\n \n+/* Pass through (tree).  */\n+tree\n+lhd_pass_through_t (tree t)\n+{\n+  return t;\n+}\n+\n /* Do nothing (int).  */\n \n void"}, {"sha": "349a5d8d5a43e11d2a37a4d6905a1210a03caa6a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -414,6 +414,12 @@ struct lang_hooks\n      if in the process TREE_CONSTANT or TREE_SIDE_EFFECTS need updating.  */\n   tree (*expr_to_decl) (tree expr, bool *tc, bool *se);\n \n+  /* The EH personality function decl.  */\n+  tree (*eh_personality) (void);\n+\n+  /* Map a type to a runtime object to match type.  */\n+  tree (*eh_runtime_type) (tree);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "997ecb036414eaff5d5cc69ed804871876c620a0", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -31,7 +31,6 @@ enum libfunc_index\n   LTI_setbits,\n \n   LTI_unwind_resume,\n-  LTI_eh_personality,\n   LTI_setjmp,\n   LTI_longjmp,\n   LTI_unwind_sjlj_register,\n@@ -61,7 +60,6 @@ extern GTY(()) rtx libfunc_table[LTI_MAX];\n #define setbits_libfunc\t(libfunc_table[LTI_setbits])\n \n #define unwind_resume_libfunc\t(libfunc_table[LTI_unwind_resume])\n-#define eh_personality_libfunc\t(libfunc_table[LTI_eh_personality])\n #define setjmp_libfunc\t(libfunc_table[LTI_setjmp])\n #define longjmp_libfunc\t(libfunc_table[LTI_longjmp])\n #define unwind_sjlj_register_libfunc (libfunc_table[LTI_unwind_sjlj_register])"}, {"sha": "59317eb200c16a38cd96985d648d7c4f96c82ae5", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1,3 +1,17 @@\n+2009-09-13  Richard Guenther  <rguenther@suse.de>\n+\tRafael Avila de Espindola  <espindola@google.com>\n+\n+\t* objc-act.c (objc_eh_runtime_type): Export.\n+\t(objc_init_exceptions): Remove.  Move warning code ...\n+\t(objc_begin_try_stmt): ... here\n+\t(objc_build_throw_stmt): ... and here.\n+\t(objc_eh_personality_decl): New.\n+\t(objc_eh_personality): New function.\n+\t* objc-act.h (objc_eh_runtime_type): Declare.\n+\t(objc_eh_personality): Likewise.\n+\t* objc-lang.c (LANG_HOOKS_EH_RUNTIME_TYPE): Define.\n+\t(LANG_HOOKS_EH_PERSONALITY): Likewise.\n+\n 2009-09-03  Diego Novillo  <dnovillo@google.com>\n \n \t* objc-lang.c (lang_hooks): Remove const qualifier."}, {"sha": "f695431030a57564c28dea2e600368a02f582c7c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -3483,50 +3483,32 @@ struct objc_try_context\n \n static struct objc_try_context *cur_try_context;\n \n+static GTY(()) tree objc_eh_personality_decl;\n+\n /* This hook, called via lang_eh_runtime_type, generates a runtime object\n    that represents TYPE.  For Objective-C, this is just the class name.  */\n /* ??? Isn't there a class object or some such?  Is it easy to get?  */\n \n #ifndef OBJCPLUS\n-static tree\n+tree\n objc_eh_runtime_type (tree type)\n {\n   return add_objc_string (OBJC_TYPE_NAME (TREE_TYPE (type)), class_names);\n }\n-#endif\n-\n-/* Initialize exception handling.  */\n \n-static void\n-objc_init_exceptions (void)\n+tree\n+objc_eh_personality (void)\n {\n-  static bool done = false;\n-  if (done)\n-    return;\n-  done = true;\n+  if (!flag_objc_sjlj_exceptions\n+      && !objc_eh_personality_decl)\n+    objc_eh_personality_decl\n+      = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t    ? \"__gnu_objc_personality_sj0\"\n+\t\t\t\t    : \"__gnu_objc_personality_v0\");\n \n-  if (flag_objc_sjlj_exceptions)\n-    {\n-      /* On Darwin, ObjC exceptions require a sufficiently recent\n-\t version of the runtime, so the user must ask for them explicitly.  */\n-      if (!flag_objc_exceptions)\n-\twarning (0, \"use %<-fobjc-exceptions%> to enable Objective-C \"\n-\t\t \"exception syntax\");\n-    }\n-#ifndef OBJCPLUS\n-  else\n-    {\n-      c_eh_initialized_p = true;\n-      eh_personality_libfunc\n-\t= init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t    ? \"__gnu_objc_personality_sj0\"\n-\t\t\t    : \"__gnu_objc_personality_v0\");\n-      default_init_unwind_resume_libfunc ();\n-      using_eh_for_cleanups ();\n-      lang_eh_runtime_type = objc_eh_runtime_type;\n-    }\n-#endif\n+  return objc_eh_personality_decl;\n }\n+#endif\n \n /* Build an EXC_PTR_EXPR, or the moral equivalent.  In the case of Darwin,\n    we'll arrange for it to be initialized (and associated with a binding)\n@@ -3824,7 +3806,14 @@ objc_begin_try_stmt (location_t try_locus, tree body)\n   c->end_try_locus = input_location;\n   cur_try_context = c;\n \n-  objc_init_exceptions ();\n+  if (flag_objc_sjlj_exceptions)\n+    {\n+      /* On Darwin, ObjC exceptions require a sufficiently recent\n+\t version of the runtime, so the user must ask for them explicitly.  */\n+      if (!flag_objc_exceptions)\n+\twarning (0, \"use %<-fobjc-exceptions%> to enable Objective-C \"\n+\t\t \"exception syntax\");\n+    }\n \n   if (flag_objc_sjlj_exceptions)\n     objc_mark_locals_volatile (NULL);\n@@ -3973,7 +3962,14 @@ objc_build_throw_stmt (location_t loc, tree throw_expr)\n {\n   tree args;\n \n-  objc_init_exceptions ();\n+  if (flag_objc_sjlj_exceptions)\n+    {\n+      /* On Darwin, ObjC exceptions require a sufficiently recent\n+\t version of the runtime, so the user must ask for them explicitly.  */\n+      if (!flag_objc_exceptions)\n+\twarning (0, \"use %<-fobjc-exceptions%> to enable Objective-C \"\n+\t\t \"exception syntax\");\n+    }\n \n   if (throw_expr == NULL)\n     {"}, {"sha": "f0970f90bfd5b3b03444bd9387f1b92964cbcf74", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -32,6 +32,8 @@ const char *objc_printable_name (tree, int);\n void objc_finish_file (void);\n tree objc_fold_obj_type_ref (tree, tree);\n int objc_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n+tree objc_eh_runtime_type (tree);\n+tree objc_eh_personality (void);\n \n /* NB: The remaining public functions are prototyped in c-common.h, for the\n    benefit of stub-objc.c and objc-act.c.  */"}, {"sha": "acb1c84649dcefdcbc87553ab66fe92907a1b8de", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -51,6 +51,13 @@ static void objc_init_ts (void);\n #undef LANG_HOOKS_INIT_TS\n #define LANG_HOOKS_INIT_TS objc_init_ts\n \n+#ifndef OBJCPLUS\n+#undef LANG_HOOKS_EH_PERSONALITY\n+#define LANG_HOOKS_EH_PERSONALITY objc_eh_personality\n+#undef LANG_HOOKS_EH_RUNTIME_TYPE\n+#define LANG_HOOKS_EH_RUNTIME_TYPE objc_eh_runtime_type\n+#endif\n+\n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "35f95f2e3d48b2115273846e36a4b151f5ac4c10", "filename": "gcc/optabs.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -6023,6 +6023,28 @@ libfunc_decl_eq (const void *entry1, const void *entry2)\n   return DECL_NAME ((const_tree) entry1) == (const_tree) entry2;\n }\n \n+/* Build a decl for a libfunc named NAME. */\n+\n+tree\n+build_libfunc_function (const char *name)\n+{\n+  tree decl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL,\n+\t\t\t  get_identifier (name),\n+                          build_function_type (integer_type_node, NULL_TREE));\n+  /* ??? We don't have any type information except for this is\n+     a function.  Pretend this is \"int foo()\".  */\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_EXTERNAL (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+  gcc_assert (DECL_ASSEMBLER_NAME (decl));\n+\n+  /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n+     are the flags assigned by targetm.encode_section_info.  */\n+  SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);\n+\n+  return decl;\n+}\n+\n rtx\n init_one_libfunc (const char *name)\n {\n@@ -6043,19 +6065,7 @@ init_one_libfunc (const char *name)\n     {\n       /* Create a new decl, so that it can be passed to\n \t targetm.encode_section_info.  */\n-      /* ??? We don't have any type information except for this is\n-\t a function.  Pretend this is \"int foo()\".  */\n-      decl = build_decl (UNKNOWN_LOCATION,\n-\t\t\t FUNCTION_DECL, get_identifier (name),\n-\t\t\t build_function_type (integer_type_node, NULL_TREE));\n-      DECL_ARTIFICIAL (decl) = 1;\n-      DECL_EXTERNAL (decl) = 1;\n-      TREE_PUBLIC (decl) = 1;\n-\n-      /* Zap the nonsensical SYMBOL_REF_DECL for this.  What we're left with\n-\t are the flags assigned by targetm.encode_section_info.  */\n-      SET_SYMBOL_REF_DECL (XEXP (DECL_RTL (decl), 0), NULL);\n-\n+      decl = build_libfunc_function (name);\n       *slot = decl;\n     }\n   return XEXP (DECL_RTL (decl), 0);"}, {"sha": "ac87f424dcdc115e01b50aaa602b7507b018e712", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -1939,6 +1939,14 @@ lower_eh_constructs (void)\n   htab_delete (finally_tree);\n \n   collect_eh_region_array ();\n+\n+  /* If this function needs a language specific EH personality routine\n+     and the frontend didn't already set one do so now.  */\n+  if (function_needs_eh_personality (cfun) == eh_personality_lang\n+      && !DECL_FUNCTION_PERSONALITY (current_function_decl))\n+    DECL_FUNCTION_PERSONALITY (current_function_decl)\n+      = lang_hooks.eh_personality ();\n+\n   return 0;\n }\n "}, {"sha": "b83c52f537017dfb130078e0a33c6c8998104a11", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -3505,6 +3505,13 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \n   cg_edge = cgraph_edge (id->dst_node, stmt);\n \n+  /* Don't inline functions with different EH personalities.  */\n+  if (DECL_FUNCTION_PERSONALITY (cg_edge->caller->decl)\n+      && DECL_FUNCTION_PERSONALITY (cg_edge->callee->decl)\n+      && (DECL_FUNCTION_PERSONALITY (cg_edge->caller->decl)\n+\t  != DECL_FUNCTION_PERSONALITY (cg_edge->callee->decl)))\n+    goto egress;\n+\n   /* Don't try to inline functions that are not well-suited to\n      inlining.  */\n   if (!cgraph_inline_p (cg_edge, &reason))\n@@ -3546,6 +3553,11 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n   /* We will be inlining this callee.  */\n   id->eh_region = lookup_stmt_eh_region (stmt);\n \n+  /* Update the callers EH personality.  */\n+  if (DECL_FUNCTION_PERSONALITY (cg_edge->callee->decl))\n+    DECL_FUNCTION_PERSONALITY (cg_edge->caller->decl)\n+      = DECL_FUNCTION_PERSONALITY (cg_edge->callee->decl);\n+\n   /* Split the block holding the GIMPLE_CALL.  */\n   e = split_block (bb, stmt);\n   bb = e->src;\n@@ -4730,6 +4742,7 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \n   DECL_ARTIFICIAL (new_decl) = 1;\n   DECL_ABSTRACT_ORIGIN (new_decl) = DECL_ORIGIN (old_decl);\n+  DECL_FUNCTION_PERSONALITY (new_decl) = DECL_FUNCTION_PERSONALITY (old_decl);\n \n   /* Prepare the data structures for the tree copy.  */\n   memset (&id, 0, sizeof (id));\n@@ -5000,6 +5013,18 @@ tree_can_inline_p (struct cgraph_edge *e)\n   caller = e->caller->decl;\n   callee = e->callee->decl;\n \n+  /* We cannot inline a function that uses a different EH personality\n+     than the caller.  */\n+  if (DECL_FUNCTION_PERSONALITY (caller)\n+      && DECL_FUNCTION_PERSONALITY (callee)\n+      && (DECL_FUNCTION_PERSONALITY (caller)\n+\t  != DECL_FUNCTION_PERSONALITY (callee)))\n+    {\n+      e->inline_failed = CIF_UNSPECIFIED;\n+      gimple_call_set_cannot_inline (e->call_stmt, true);\n+      return false;\n+    }\n+\n   /* Allow the backend to decide if inlining is ok.  */\n   if (!targetm.target_option.can_inline_p (caller, callee))\n     {"}, {"sha": "98a683dea9d4432c590dd81d7a5c21cf3d74df15", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -10566,5 +10566,20 @@ tree_strip_sign_nop_conversions (tree exp)\n   return exp;\n }\n \n+static GTY(()) tree gcc_eh_personality_decl;\n+\n+/* Return the GCC personality function decl.  */\n+\n+tree\n+lhd_gcc_personality (void)\n+{\n+  if (!gcc_eh_personality_decl)\n+    gcc_eh_personality_decl\n+      = build_personality_function (USING_SJLJ_EXCEPTIONS\n+\t\t\t\t    ? \"__gcc_personality_sj0\"\n+\t\t\t\t    : \"__gcc_personality_v0\");\n+\n+  return gcc_eh_personality_decl;\n+}\n \n #include \"gt-tree.h\""}, {"sha": "5884b55a0b6dde5c78cdaa623cca28e6c9715a27", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9417da1a250b18ea0ee2d493c0750e58aa87ab8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f9417da1a250b18ea0ee2d493c0750e58aa87ab8", "patch": "@@ -2538,6 +2538,9 @@ struct GTY(()) tree_decl_minimal {\n #define DECL_DEBUG_EXPR_IS_FROM(NODE) \\\n   (DECL_COMMON_CHECK (NODE)->decl_common.debug_expr_is_from)\n \n+#define DECL_FUNCTION_PERSONALITY(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.personality)\n+\n /* Nonzero for a given ..._DECL node means that the name of this node should\n    be ignored for symbolic debug purposes.  Moreover, for a FUNCTION_DECL,\n    the body of the function should also be ignored.  */\n@@ -3191,6 +3194,9 @@ struct GTY(()) tree_function_decl {\n \n   struct function *f;\n \n+  /* The personality function. Used for stack unwinding. */\n+  tree personality;\n+\n   /* Function specific options that are used by this function.  */\n   tree function_specific_target;\t/* target options */\n   tree function_specific_optimization;\t/* optimization options */\n@@ -4653,6 +4659,7 @@ extern bool auto_var_in_fn_p (const_tree, const_tree);\n extern tree build_low_bits_mask (tree, unsigned);\n extern tree tree_strip_nop_conversions (tree);\n extern tree tree_strip_sign_nop_conversions (tree);\n+extern tree lhd_gcc_personality (void);\n \f\n /* In cgraph.c */\n extern void change_decl_assembler_name (tree, tree);\n@@ -5264,6 +5271,7 @@ extern unsigned HOST_WIDE_INT compute_builtin_object_size (tree, int);\n \n /* In expr.c.  */\n extern unsigned HOST_WIDE_INT highest_pow2_factor (const_tree);\n+extern tree build_personality_function (const char *);\n \n /* In tree-inline.c.  */\n "}]}