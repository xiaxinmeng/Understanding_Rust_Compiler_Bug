{"sha": "3f06f6c30a8c168388886c13785597e56b398981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YwNmY2YzMwYThjMTY4Mzg4ODg2YzEzNzg1NTk3ZTU2YjM5ODk4MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-14T13:21:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:46Z"}, "message": "[Ada] Add detection of uninitialized big reals\n\n2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin.ads: Minor reformatting.\n\t* libgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb (Is_Valid): Add\n\tconvention Intrinsic. Add detection of uninitialized big reals.", "tree": {"sha": "a6466efc45cd0a536648ba9ed2cf29180e8af451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6466efc45cd0a536648ba9ed2cf29180e8af451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f06f6c30a8c168388886c13785597e56b398981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f06f6c30a8c168388886c13785597e56b398981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f06f6c30a8c168388886c13785597e56b398981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f06f6c30a8c168388886c13785597e56b398981/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef65f9049ff5cf04635917e7cc845a8c4446ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ef65f9049ff5cf04635917e7cc845a8c4446ec"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "4c1a22c2e4dfb6519d674f473fb63a70446d7a86", "filename": "gcc/ada/libgnat/a-nbnbin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin.ads?ref=3f06f6c30a8c168388886c13785597e56b398981", "patch": "@@ -13,9 +13,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.Finalization;\n with Ada.Streams;\n \n+private with Ada.Finalization;\n private with System;\n \n --  Note that some Ada 2020 aspects are commented out since they are not\n@@ -89,7 +89,7 @@ is\n \n    end Unsigned_Conversions;\n \n-   function To_String (Arg : Big_Integer;\n+   function To_String (Arg   : Big_Integer;\n                        Width : Field := 0;\n                        Base  : Number_Base := 10) return String\n      with Post => To_String'Result'First = 1;"}, {"sha": "07a94424df15552d3f664e74bfc61a59463d0642", "filename": "gcc/ada/libgnat/a-nbnbre.adb", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb?ref=3f06f6c30a8c168388886c13785597e56b398981", "patch": "@@ -46,7 +46,7 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    --------------\n \n    function Is_Valid (Arg : Big_Real) return Boolean is\n-     (Is_Valid (Arg.Num) and then Is_Valid (Arg.Den));\n+     (Is_Valid (Arg.Num) and Is_Valid (Arg.Den));\n \n    ---------\n    -- \"/\" --\n@@ -69,13 +69,17 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    -- Numerator --\n    ---------------\n \n-   function Numerator (Arg : Big_Real) return Big_Integer is (Arg.Num);\n+   function Numerator (Arg : Big_Real) return Big_Integer is\n+     (if Is_Valid (Arg.Num) then Arg.Num\n+      else raise Constraint_Error with \"invalid big real\");\n \n    -----------------\n    -- Denominator --\n    -----------------\n \n-   function Denominator (Arg : Big_Real) return Big_Positive is (Arg.Den);\n+   function Denominator (Arg : Big_Real) return Big_Positive is\n+     (if Is_Valid (Arg.Den) then Arg.Den\n+      else raise Constraint_Error with \"invalid big real\");\n \n    ---------\n    -- \"=\" --\n@@ -409,6 +413,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"+\" (L : Big_Real) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       Result.Num := L.Num;\n       Result.Den := L.Den;\n       return Result;\n@@ -419,14 +427,16 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    ---------\n \n    function \"-\" (L : Big_Real) return Big_Real is\n-     (Num => -L.Num, Den => L.Den);\n+     (if Is_Valid (L) then (Num => -L.Num, Den => L.Den)\n+      else raise Constraint_Error with \"invalid big real\");\n \n    -----------\n    -- \"abs\" --\n    -----------\n \n    function \"abs\" (L : Big_Real) return Big_Real is\n-     (Num => abs L.Num, Den => L.Den);\n+     (if Is_Valid (L) then (Num => abs L.Num, Den => L.Den)\n+      else raise Constraint_Error with \"invalid big real\");\n \n    ---------\n    -- \"+\" --\n@@ -435,6 +445,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"+\" (L, R : Big_Real) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) or not Is_Valid (R) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       Result.Num := L.Num * R.Den + R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -448,6 +462,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"-\" (L, R : Big_Real) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) or not Is_Valid (R) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       Result.Num := L.Num * R.Den - R.Num * L.Den;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -461,6 +479,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"*\" (L, R : Big_Real) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) or not Is_Valid (R) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       Result.Num := L.Num * R.Num;\n       Result.Den := L.Den * R.Den;\n       Normalize (Result);\n@@ -474,6 +496,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"/\" (L, R : Big_Real) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) or not Is_Valid (R) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       Result.Num := L.Num * R.Den;\n       Result.Den := L.Den * R.Num;\n       Normalize (Result);\n@@ -487,6 +513,10 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n    function \"**\" (L : Big_Real; R : Integer) return Big_Real is\n       Result : Big_Real;\n    begin\n+      if not Is_Valid (L) then\n+         raise Constraint_Error with \"invalid big real\";\n+      end if;\n+\n       if R = 0 then\n          Result.Num := To_Big_Integer (1);\n          Result.Den := To_Big_Integer (1);"}, {"sha": "3ea93f62291e84a72efedf2ca97611fc8642acce", "filename": "gcc/ada/libgnat/a-nbnbre.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f06f6c30a8c168388886c13785597e56b398981/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.ads?ref=3f06f6c30a8c168388886c13785597e56b398981", "patch": "@@ -27,7 +27,8 @@ is\n --   with Real_Literal => From_String,\n --        Put_Image    => Put_Image;\n \n-   function Is_Valid (Arg : Big_Real) return Boolean;\n+   function Is_Valid (Arg : Big_Real) return Boolean\n+     with Convention => Intrinsic;\n \n    function \"/\" (Num, Den : Big_Integers.Big_Integer) return Big_Real;\n --   with Pre => (if Big_Integers.\"=\" (Den, Big_Integers.To_Big_Integer (0))"}]}