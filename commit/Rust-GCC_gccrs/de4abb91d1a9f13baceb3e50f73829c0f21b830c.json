{"sha": "de4abb91d1a9f13baceb3e50f73829c0f21b830c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0YWJiOTFkMWE5ZjEzYmFjZWIzZTUwZjczODI5YzBmMjFiODMwYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-05-26T16:44:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-05-26T16:44:21Z"}, "message": "alpha.h (MASK_FIX, TARGET_FIX): New.\n\n        * alpha.h (MASK_FIX, TARGET_FIX): New.\n        (MASK_*): Reorganize constants.\n        (CPP_AM_FIX_SPEC): New.\n        (TARGET_SWITCHES): Add FIX.\n        (EXTRA_SPECS): Likewise.\n        (CPP_CPU_EV6_SPEC): Use FIX, not CIX.\n        (SECONDARY_MEMORY_NEEDED): Likewise.\n        (REGISTER_MOVE_COST): Likewise.\n        * alpha.c (override_options): Add FIX support.  Always use\n        ALPHA_TP_PROG for ev6.\n        * alpha.md (sqrt and mov[sd]i patterns): Use FIX, not CIX.\n        * alpha/elf.h (ASM_FILE_START): Look at FIX too.\n        * configure.in (target_cpu_default2) [ev6]: Use FIX, not CIX.\n\nFrom-SVN: r27183", "tree": {"sha": "3c17881dd5352a637ba224dafbefa501259d400e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c17881dd5352a637ba224dafbefa501259d400e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4abb91d1a9f13baceb3e50f73829c0f21b830c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4abb91d1a9f13baceb3e50f73829c0f21b830c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4abb91d1a9f13baceb3e50f73829c0f21b830c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4abb91d1a9f13baceb3e50f73829c0f21b830c/comments", "author": null, "committer": null, "parents": [{"sha": "2ba1f15fb97925675536bec1376c68b9b8b21cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1f15fb97925675536bec1376c68b9b8b21cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba1f15fb97925675536bec1376c68b9b8b21cd6"}], "stats": {"total": 211, "additions": 124, "deletions": 87}, "files": [{"sha": "789da30182ed15239ce7e12414fe051bdb0e672e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -1,3 +1,19 @@\n+Wed May 26 14:18:05 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (MASK_FIX, TARGET_FIX): New.\n+\t(MASK_*): Reorganize constants.\n+\t(CPP_AM_FIX_SPEC): New.\n+\t(TARGET_SWITCHES): Add FIX.\n+\t(EXTRA_SPECS): Likewise.\n+\t(CPP_CPU_EV6_SPEC): Use FIX, not CIX.\n+\t(SECONDARY_MEMORY_NEEDED): Likewise.\n+\t(REGISTER_MOVE_COST): Likewise.\n+\t* alpha.c (override_options): Add FIX support.  Always use \n+\tALPHA_TP_PROG for ev6.\n+\t* alpha.md (sqrt and mov[sd]i patterns): Use FIX, not CIX.\n+\t* alpha/elf.h (ASM_FILE_START): Look at FIX too.\n+\t* configure.in (target_cpu_default2) [ev6]: Use FIX, not CIX.\n+\n Wed May 26 09:53:05 1999  Mark Mitchell  <mark@codesourcery.com>\n \n         * fold-const.c (fold): STRIP_NOPS when deciding whether or not"}, {"sha": "6e899f20f826464539e9d163a2132d5e55686e53", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 51, "deletions": 45, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -134,49 +134,6 @@ static int alpha_does_function_need_gp\n void\n override_options ()\n {\n-  alpha_cpu\n-    = TARGET_CPU_DEFAULT & MASK_CPU_EV6 ? PROCESSOR_EV6\n-      : (TARGET_CPU_DEFAULT & MASK_CPU_EV5 ? PROCESSOR_EV5 : PROCESSOR_EV4);\n-\n-  if (alpha_cpu_string)\n-    {\n-      if (! strcmp (alpha_cpu_string, \"ev4\")\n-\t  || ! strcmp (alpha_cpu_string, \"21064\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV4;\n-\t  target_flags &= ~ (MASK_BWX | MASK_CIX | MASK_MAX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev5\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags &= ~ (MASK_BWX | MASK_CIX | MASK_MAX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev56\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164a\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags |= MASK_BWX;\n-\t  target_flags &= ~ (MASK_CIX | MASK_MAX);\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"pca56\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164PC\")\n-\t       || ! strcmp (alpha_cpu_string, \"21164pc\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV5;\n-\t  target_flags |= MASK_BWX | MASK_MAX;\n-\t  target_flags &= ~ MASK_CIX;\n-\t}\n-      else if (! strcmp (alpha_cpu_string, \"ev6\")\n-\t       || ! strcmp (alpha_cpu_string, \"21264\"))\n-\t{\n-\t  alpha_cpu = PROCESSOR_EV6;\n-\t  target_flags |= MASK_BWX | MASK_CIX | MASK_MAX;\n-\t}\n-      else\n-\terror (\"bad value `%s' for -mcpu switch\", alpha_cpu_string);\n-    }\n-\n   alpha_tp = ALPHA_TP_PROG;\n   alpha_fprm = ALPHA_FPRM_NORM;\n   alpha_fptm = ALPHA_FPTM_N;\n@@ -234,10 +191,59 @@ override_options ()\n \terror (\"bad value `%s' for -mfp-trap-mode switch\", alpha_fptm_string);\n     }\n \n-  /* Do some sanity checks on the above option. */\n+  alpha_cpu\n+    = TARGET_CPU_DEFAULT & MASK_CPU_EV6 ? PROCESSOR_EV6\n+      : (TARGET_CPU_DEFAULT & MASK_CPU_EV5 ? PROCESSOR_EV5 : PROCESSOR_EV4);\n+\n+  if (alpha_cpu_string)\n+    {\n+      if (! strcmp (alpha_cpu_string, \"ev4\")\n+\t  || ! strcmp (alpha_cpu_string, \"21064\"))\n+\t{\n+\t  alpha_cpu = PROCESSOR_EV4;\n+\t  target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n+\t}\n+      else if (! strcmp (alpha_cpu_string, \"ev5\")\n+\t       || ! strcmp (alpha_cpu_string, \"21164\"))\n+\t{\n+\t  alpha_cpu = PROCESSOR_EV5;\n+\t  target_flags &= ~ (MASK_BWX | MASK_MAX | MASK_FIX | MASK_CIX);\n+\t}\n+      else if (! strcmp (alpha_cpu_string, \"ev56\")\n+\t       || ! strcmp (alpha_cpu_string, \"21164a\"))\n+\t{\n+\t  alpha_cpu = PROCESSOR_EV5;\n+\t  target_flags |= MASK_BWX;\n+\t  target_flags &= ~ (MASK_MAX | MASK_FIX | MASK_CIX);\n+\t}\n+      else if (! strcmp (alpha_cpu_string, \"pca56\")\n+\t       || ! strcmp (alpha_cpu_string, \"21164PC\")\n+\t       || ! strcmp (alpha_cpu_string, \"21164pc\"))\n+\t{\n+\t  alpha_cpu = PROCESSOR_EV5;\n+\t  target_flags |= MASK_BWX | MASK_MAX;\n+\t  target_flags &= ~ (MASK_FIX | MASK_CIX);\n+\t}\n+      else if (! strcmp (alpha_cpu_string, \"ev6\")\n+\t       || ! strcmp (alpha_cpu_string, \"21264\"))\n+\t{\n+\t  alpha_cpu = PROCESSOR_EV6;\n+\t  target_flags |= MASK_BWX | MASK_MAX | MASK_FIX;\n+\t  target_flags &= ~ (MASK_CIX);\n+\n+\t  /* Except for EV6 pass 1 (not released), we always have \n+\t     precise arithmetic traps.  Which means we can do \n+\t     software completion without minding trap shadows.  */\n+\t  alpha_tp = ALPHA_TP_PROG;\n+\t}\n+      else\n+\terror (\"bad value `%s' for -mcpu switch\", alpha_cpu_string);\n+    }\n+\n+  /* Do some sanity checks on the above options. */\n \n   if ((alpha_fptm == ALPHA_FPTM_SU || alpha_fptm == ALPHA_FPTM_SUI)\n-      && alpha_tp != ALPHA_TP_INSN)\n+      && (alpha_tp != ALPHA_TP_INSN || alpha_cpu == PROCESSOR_EV6))\n     {\n       warning (\"fp software completion requires -mtrap-precision=i\");\n       alpha_tp = ALPHA_TP_INSN;"}, {"sha": "85711182a52418a1c301c1272022b61008955704", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -95,73 +95,76 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n \n /* This means that floating-point support exists in the target implementation\n    of the Alpha architecture.  This is usually the default.  */\n-\n-#define MASK_FP\t\t1\n+#define MASK_FP\t\t(1 << 0)\n #define TARGET_FP\t(target_flags & MASK_FP)\n \n /* This means that floating-point registers are allowed to be used.  Note\n    that Alpha implementations without FP operations are required to\n    provide the FP registers.  */\n \n-#define MASK_FPREGS\t2\n+#define MASK_FPREGS\t(1 << 1)\n #define TARGET_FPREGS\t(target_flags & MASK_FPREGS)\n \n /* This means that gas is used to process the assembler file.  */\n \n-#define MASK_GAS 4\n+#define MASK_GAS\t(1 << 2)\n #define TARGET_GAS\t(target_flags & MASK_GAS)\n \n /* This means that we should mark procedures as IEEE conformant. */\n \n-#define MASK_IEEE_CONFORMANT 8\n+#define MASK_IEEE_CONFORMANT (1 << 3)\n #define TARGET_IEEE_CONFORMANT\t(target_flags & MASK_IEEE_CONFORMANT)\n \n /* This means we should be IEEE-compliant except for inexact.  */\n \n-#define MASK_IEEE\t16\n+#define MASK_IEEE\t(1 << 4)\n #define TARGET_IEEE\t(target_flags & MASK_IEEE)\n \n /* This means we should be fully IEEE-compliant.  */\n \n-#define MASK_IEEE_WITH_INEXACT 32\n+#define MASK_IEEE_WITH_INEXACT (1 << 5)\n #define TARGET_IEEE_WITH_INEXACT (target_flags & MASK_IEEE_WITH_INEXACT)\n \n /* This means we must construct all constants rather than emitting\n    them as literal data.  */\n \n-#define MASK_BUILD_CONSTANTS 128\n+#define MASK_BUILD_CONSTANTS (1 << 6)\n #define TARGET_BUILD_CONSTANTS (target_flags & MASK_BUILD_CONSTANTS)\n \n /* This means we handle floating points in VAX F- (float)\n    or G- (double) Format.  */\n \n-#define MASK_FLOAT_VAX 512\n+#define MASK_FLOAT_VAX\t(1 << 7)\n #define TARGET_FLOAT_VAX (target_flags & MASK_FLOAT_VAX)\n \n /* This means that the processor has byte and half word loads and stores\n    (the BWX extension).  */\n \n-#define MASK_BWX 1024\n+#define MASK_BWX\t(1 << 8)\n #define TARGET_BWX\t(target_flags & MASK_BWX)\n \n-/* This means that the processor has the CIX extension.  */\n-#define MASK_CIX 2048\n-#define TARGET_CIX\t(target_flags & MASK_CIX)\n-\n /* This means that the processor has the MAX extension.  */\n-#define MASK_MAX 4096\n+#define MASK_MAX\t(1 << 9)\n #define TARGET_MAX\t(target_flags & MASK_MAX)\n \n+/* This means that the processor has the FIX extension.  */\n+#define MASK_FIX\t(1 << 10)\n+#define TARGET_FIX\t(target_flags & MASK_FIX)\n+\n+/* This means that the processor has the CIX extension.  */\n+#define MASK_CIX\t(1 << 11)\n+#define TARGET_CIX\t(target_flags & MASK_CIX)\n+\n /* This means that the processor is an EV5, EV56, or PCA56.  This is defined\n    only in TARGET_CPU_DEFAULT.  */\n-#define MASK_CPU_EV5 8192\n+#define MASK_CPU_EV5\t(1 << 29)\n \n /* Likewise for EV6.  */\n-#define MASK_CPU_EV6 16384\n+#define MASK_CPU_EV6\t(1 << 30)\n \n /* This means we support the .arch directive in the assembler.  Only\n    defined in TARGET_CPU_DEFAULT.  */\n-#define MASK_SUPPORT_ARCH 32768\n+#define MASK_SUPPORT_ARCH (1 << 31)\n #define TARGET_SUPPORT_ARCH\t(target_flags & MASK_SUPPORT_ARCH)\n \n /* These are for target os support and cannot be changed at runtime.  */\n@@ -204,10 +207,12 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n     {\"float-ieee\", -MASK_FLOAT_VAX, \"Do not use VAX fp\"},\t\t\\\n     {\"bwx\", MASK_BWX, \"Emit code for the byte/word ISA extension\"},\t\\\n     {\"no-bwx\", -MASK_BWX, \"\"},\t\t\t\t\t\t\\\n-    {\"cix\", MASK_CIX, \"Emit code for the counting ISA extension\"},\t\\\n-    {\"no-cix\", -MASK_CIX, \"\"},\t\t\t\t\t\t\\\n     {\"max\", MASK_MAX, \"Emit code for the motion video ISA extension\"},\t\\\n     {\"no-max\", -MASK_MAX, \"\"},\t\t\t\t\t\t\\\n+    {\"fix\", MASK_FIX, \"Emit code for the fp move and sqrt ISA extension\"}, \\\n+    {\"no-fix\", -MASK_FIX, \"\"},\t\t\t\t\t\t\\\n+    {\"cix\", MASK_CIX, \"Emit code for the counting ISA extension\"},\t\\\n+    {\"no-cix\", -MASK_CIX, \"\"},\t\t\t\t\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT, \"\"} }\n \n #define TARGET_DEFAULT MASK_FP|MASK_FPREGS\n@@ -258,6 +263,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n /* Corresponding to amask... */\n #define CPP_AM_BWX_SPEC\t\"-D__alpha_bwx__ -Acpu(bwx)\"\n #define CPP_AM_MAX_SPEC\t\"-D__alpha_max__ -Acpu(max)\"\n+#define CPP_AM_FIX_SPEC\t\"-D__alpha_fix__ -Acpu(fix)\"\n #define CPP_AM_CIX_SPEC\t\"-D__alpha_cix__ -Acpu(cix)\"\n \n /* Corresponding to implver... */\n@@ -270,7 +276,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define CPP_CPU_EV5_SPEC\t\"%(cpp_im_ev5)\"\n #define CPP_CPU_EV56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx)\"\n #define CPP_CPU_PCA56_SPEC\t\"%(cpp_im_ev5) %(cpp_am_bwx) %(cpp_am_max)\"\n-#define CPP_CPU_EV6_SPEC\t\"%(cpp_im_ev6) %(cpp_am_bwx) %(cpp_am_max) %(cpp_am_cix)\"\n+#define CPP_CPU_EV6_SPEC\t\"%(cpp_im_ev6) %(cpp_am_bwx) %(cpp_am_max) %(cpp_am_fix)\"\n \n #ifndef CPP_CPU_DEFAULT_SPEC\n # if TARGET_CPU_DEFAULT & MASK_CPU_EV6\n@@ -320,6 +326,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n #define EXTRA_SPECS\t\t\t\t\\\n   { \"cpp_am_bwx\", CPP_AM_BWX_SPEC },\t\t\\\n   { \"cpp_am_max\", CPP_AM_MAX_SPEC },\t\t\\\n+  { \"cpp_am_fix\", CPP_AM_FIX_SPEC },\t\t\\\n   { \"cpp_am_cix\", CPP_AM_CIX_SPEC },\t\t\\\n   { \"cpp_im_ev4\", CPP_IM_EV4_SPEC },\t\t\\\n   { \"cpp_im_ev5\", CPP_IM_EV5_SPEC },\t\t\\\n@@ -848,10 +855,10 @@ extern int normal_memory_operand ();\n  : NO_REGS)\n \n /* If we are copying between general and FP registers, we need a memory\n-   location unless the CIX extension is available.  */\n+   location unless the FIX extension is available.  */\n \n #define SECONDARY_MEMORY_NEEDED(CLASS1,CLASS2,MODE) \\\n- (! TARGET_CIX && (CLASS1) != (CLASS2))\n+ (! TARGET_FIX && (CLASS1) != (CLASS2))\n \n /* Specify the mode to be used for memory when a secondary memory\n    location is needed.  If MODE is floating-point, use it.  Otherwise,\n@@ -884,7 +891,7 @@ extern int normal_memory_operand ();\n #define REGISTER_MOVE_COST(CLASS1, CLASS2)\t\t\\\n   (((CLASS1) == FLOAT_REGS) == ((CLASS2) == FLOAT_REGS)\t\\\n    ? 2\t\t\t\t\t\t\t\\\n-   : TARGET_CIX ? 3 : 4+2*alpha_memory_latency)\n+   : TARGET_FIX ? 3 : 4+2*alpha_memory_latency)\n \n /* A C expressions returning the cost of moving data of MODE from a register to\n    or from memory."}, {"sha": "7a25c6bce38ec3a382bf6ad1e241619b63d0a026", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -1219,7 +1219,15 @@\n   \"eqv %r1,%2,%0\"\n   [(set_attr \"type\" \"ilog\")])\n \f\n-;; Handle the FFS insn if we support CIX. \n+;; Handle the FFS insn iff we support CIX. \n+;;\n+;; These didn't make it into EV6 pass 2 as planned.  Instead they\n+;; cropped cttz/ctlz/ctpop from the old CIX and renamed it FIX for\n+;; \"Square Root and Floating Point Convert Extension\".\n+;;\n+;; I'm assured that these insns will make it into EV67 (first pass\n+;; due Summer 1999), presumably with a new AMASK bit, and presumably\n+;; will still be named CIX.\n \n (define_expand \"ffsdi2\"\n   [(set (match_dup 2)\n@@ -1241,7 +1249,7 @@\n \t(unspec [(match_operand:DI 1 \"register_operand\" \"r\")] 1))]\n   \"TARGET_CIX\"\n   \"cttz %1,%0\"\n-  ; ev6 calls all mvi and cttz/ctlz/popc class imisc, so just \n+  ; EV6 calls all mvi and cttz/ctlz/popc class imisc, so just \n   ; reuse the existing type name.\n   [(set_attr \"type\" \"mvi\")])\n \f\n@@ -2300,7 +2308,7 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(sqrt:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_CIX && alpha_tp == ALPHA_TP_INSN\"\n+  \"TARGET_FP && TARGET_FIX && alpha_tp == ALPHA_TP_INSN\"\n   \"sqrt%,%)%& %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"opsize\" \"si\")\n@@ -2309,7 +2317,7 @@\n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_CIX\"\n+  \"TARGET_FP && TARGET_FIX\"\n   \"sqrt%,%)%& %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"opsize\" \"si\")\n@@ -2318,15 +2326,15 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(sqrt:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_CIX && alpha_tp == ALPHA_TP_INSN\"\n+  \"TARGET_FP && TARGET_FIX && alpha_tp == ALPHA_TP_INSN\"\n   \"sqrt%-%)%& %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n-  \"TARGET_FP && TARGET_CIX\"\n+  \"TARGET_FP && TARGET_FIX\"\n   \"sqrt%-%)%& %1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"trap\" \"yes\")])\n@@ -4015,7 +4023,7 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,r,r,m,m\")\n \t(match_operand:SF 1 \"input_operand\" \"fG,m,rG,m,fG,r\"))]\n-  \"! TARGET_CIX\n+  \"! TARGET_FIX\n    && (register_operand (operands[0], SFmode)\n        || reg_or_fp0_operand (operands[1], SFmode))\"\n   \"@\n@@ -4030,7 +4038,7 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,r,r,m,m,f,*r\")\n \t(match_operand:SF 1 \"input_operand\" \"fG,m,rG,m,fG,r,r,*f\"))]\n-  \"TARGET_CIX\n+  \"TARGET_FIX\n    && (register_operand (operands[0], SFmode)\n        || reg_or_fp0_operand (operands[1], SFmode))\"\n   \"@\n@@ -4047,7 +4055,7 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,r,r,m,m\")\n \t(match_operand:DF 1 \"input_operand\" \"fG,m,rG,m,fG,r\"))]\n-  \"! TARGET_CIX\n+  \"! TARGET_FIX\n    && (register_operand (operands[0], DFmode)\n        || reg_or_fp0_operand (operands[1], DFmode))\"\n   \"@\n@@ -4062,7 +4070,7 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,r,r,m,m,f,*r\")\n \t(match_operand:DF 1 \"input_operand\" \"fG,m,rG,m,fG,r,r,*f\"))]\n-  \"TARGET_CIX\n+  \"TARGET_FIX\n    && (register_operand (operands[0], DFmode)\n        || reg_or_fp0_operand (operands[1], DFmode))\"\n   \"@\n@@ -4101,7 +4109,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,f,f,m\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,fJ,m,f\"))]\n-  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && ! TARGET_CIX\n+  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && ! TARGET_FIX\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n   \"@\n@@ -4118,7 +4126,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,f,f,m,r,*f\")\n \t(match_operand:SI 1 \"input_operand\" \"rJ,K,L,m,rJ,fJ,m,f,f,*r\"))]\n-  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && TARGET_CIX\n+  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS && TARGET_FIX\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n   \"@\n@@ -4250,7 +4258,7 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,r,m,f,f,Q\")\n \t(match_operand:DI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,fJ,Q,f\"))]\n-  \"! TARGET_CIX\n+  \"! TARGET_FIX\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   \"@\n@@ -4268,7 +4276,7 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,r,m,f,f,Q,r,*f\")\n \t(match_operand:DI 1 \"input_operand\" \"rJ,K,L,s,m,rJ,fJ,Q,f,f,*r\"))]\n-  \"TARGET_CIX\n+  \"TARGET_FIX\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n   \"@\n@@ -5307,5 +5315,5 @@\n ;        (match_operand:SI 1 \"hard_fp_register_operand\" \"f\"))\n ;   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n ;        (sign_extend:DI (match_dup 0)))]\n-;  \"TARGET_CIX && dead_or_set_p (insn, operands[0])\"\n+;  \"TARGET_FIX && dead_or_set_p (insn, operands[0])\"\n ;  \"ftois %1,%2\")"}, {"sha": "0e647ef534ce43458155da0cc15a53b2f44ab527", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -58,7 +58,7 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\\\n   fprintf (FILE, \"\\t.set noreorder\\n\");\t\t\t\t\\\n-  if (TARGET_BWX | TARGET_MAX | TARGET_CIX)\t\t\t\\\n+  if (TARGET_BWX | TARGET_MAX | TARGET_FIX | TARGET_CIX)\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.arch %s\\n\",\t\t\t\t\\\n                (alpha_cpu == PROCESSOR_EV6 ? \"ev6\"\t\t\\"}, {"sha": "4571948aeb81ab3161cda397b19a350c8a9a9b18", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -5635,7 +5635,7 @@ for machine in $build $host $target; do\n \talpha*-*-*)\n \t\tcase $machine in\n \t\t\talphaev6*)\n-\t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV6|MASK_BWX|MASK_CIX|MASK_MAX\"\n+\t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV6|MASK_BWX|MASK_MAX|MASK_FIX\"\n \t\t\t\t;;\n \t\t\talphapca56*)\n \t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV5|MASK_BWX|MASK_MAX\""}, {"sha": "3547d0bd2437d3b0bce669a28c81878fb7d18f11", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4abb91d1a9f13baceb3e50f73829c0f21b830c/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=de4abb91d1a9f13baceb3e50f73829c0f21b830c", "patch": "@@ -3332,7 +3332,7 @@ changequote([,])dnl\n \talpha*-*-*)\n \t\tcase $machine in\n \t\t\talphaev6*)\n-\t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV6|MASK_BWX|MASK_CIX|MASK_MAX\"\n+\t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV6|MASK_BWX|MASK_MAX|MASK_FIX\"\n \t\t\t\t;;\n \t\t\talphapca56*)\n \t\t\t\ttarget_cpu_default2=\"MASK_CPU_EV5|MASK_BWX|MASK_MAX\""}]}