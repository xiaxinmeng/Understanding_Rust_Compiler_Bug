{"sha": "985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1Yzg3Yzk0ZTE3YmI2YjY5YzA2NzgzY2E5Y2M1MWJiY2I2MjI1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-13T22:38:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-13T22:38:04Z"}, "message": "stor-layout.c (place_union_field): Do not put location information on offset expressions.\n\n\t* stor-layout.c (place_union_field): Do not put location information\n\ton offset expressions.\n\t(place_field): Likewise.\n\t(finalize_record_size): Likewise on size expressions.\n\t(finalize_type_size): Likewise.\n\t(layout_type): Likewise.\n\nFrom-SVN: r166721", "tree": {"sha": "41f4c68d1475f962d51e47880bb3db2adaa1a049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41f4c68d1475f962d51e47880bb3db2adaa1a049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985c87c94e17bb6b69c06783ca9cc51bbcb6225c/comments", "author": null, "committer": null, "parents": [{"sha": "0463992baa0837f4c1ff3e57d99ac77161cbf8f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0463992baa0837f4c1ff3e57d99ac77161cbf8f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0463992baa0837f4c1ff3e57d99ac77161cbf8f2"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "f84d1e13119f9c129ef5d55867e6b9b1c57a8e0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985c87c94e17bb6b69c06783ca9cc51bbcb6225c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985c87c94e17bb6b69c06783ca9cc51bbcb6225c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "patch": "@@ -1,3 +1,12 @@\n+2010-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* stor-layout.c (place_union_field): Do not put location information\n+\ton offset expressions.\n+\t(place_field): Likewise.\n+\t(finalize_record_size): Likewise on size expressions.\n+\t(finalize_type_size): Likewise.\n+\t(layout_type): Likewise.\n+\n 2010-11-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42889"}, {"sha": "a1587a925f326bfa4b15599989fdad74362a28b0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985c87c94e17bb6b69c06783ca9cc51bbcb6225c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985c87c94e17bb6b69c06783ca9cc51bbcb6225c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=985c87c94e17bb6b69c06783ca9cc51bbcb6225c", "patch": "@@ -1067,8 +1067,7 @@ place_union_field (record_layout_info rli, tree field)\n   if (TREE_CODE (rli->t) == UNION_TYPE)\n     rli->offset = size_binop (MAX_EXPR, rli->offset, DECL_SIZE_UNIT (field));\n   else if (TREE_CODE (rli->t) == QUAL_UNION_TYPE)\n-    rli->offset = fold_build3_loc (input_location, COND_EXPR, sizetype,\n-\t\t\t       DECL_QUALIFIER (field),\n+    rli->offset = fold_build3 (COND_EXPR, sizetype, DECL_QUALIFIER (field),\n \t\t\t       DECL_SIZE_UNIT (field), rli->offset);\n }\n \n@@ -1255,7 +1254,7 @@ place_field (record_layout_info rli, tree field)\n \t\t   field);\n \t    }\n \t  else\n-\t    rli->bitpos = round_up_loc (input_location, rli->bitpos, type_align);\n+\t    rli->bitpos = round_up (rli->bitpos, type_align);\n \t}\n \n       if (! DECL_PACKED (field))\n@@ -1436,7 +1435,7 @@ place_field (record_layout_info rli, tree field)\n \t  if (maximum_field_alignment != 0)\n \t    type_align = MIN (type_align, maximum_field_alignment);\n \n-\t  rli->bitpos = round_up_loc (input_location, rli->bitpos, type_align);\n+\t  rli->bitpos = round_up (rli->bitpos, type_align);\n \n           /* If we really aligned, don't allow subsequent bitfields\n \t     to undo that.  */\n@@ -1550,10 +1549,9 @@ finalize_record_size (record_layout_info rli)\n       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);\n \n   /* Round the size up to be a multiple of the required alignment.  */\n-  TYPE_SIZE (rli->t) = round_up_loc (input_location, unpadded_size,\n-\t\t\t\t TYPE_ALIGN (rli->t));\n+  TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));\n   TYPE_SIZE_UNIT (rli->t)\n-    = round_up_loc (input_location, unpadded_size_unit, TYPE_ALIGN_UNIT (rli->t));\n+    = round_up (unpadded_size_unit, TYPE_ALIGN_UNIT (rli->t));\n \n   if (TREE_CONSTANT (unpadded_size)\n       && simple_cst_equal (unpadded_size, TYPE_SIZE (rli->t)) == 0\n@@ -1573,7 +1571,7 @@ finalize_record_size (record_layout_info rli)\n       rli->unpacked_align = MAX (TYPE_ALIGN (rli->t), rli->unpacked_align);\n #endif\n \n-      unpacked_size = round_up_loc (input_location, TYPE_SIZE (rli->t), rli->unpacked_align);\n+      unpacked_size = round_up (TYPE_SIZE (rli->t), rli->unpacked_align);\n       if (simple_cst_equal (unpacked_size, TYPE_SIZE (rli->t)))\n \t{\n \t  if (TYPE_NAME (rli->t))\n@@ -1725,10 +1723,9 @@ finalize_type_size (tree type)\n \n   if (TYPE_SIZE (type) != 0)\n     {\n-      TYPE_SIZE (type) = round_up_loc (input_location,\n-\t\t\t\t   TYPE_SIZE (type), TYPE_ALIGN (type));\n-      TYPE_SIZE_UNIT (type) = round_up_loc (input_location, TYPE_SIZE_UNIT (type),\n-\t\t\t\t\tTYPE_ALIGN_UNIT (type));\n+      TYPE_SIZE (type) = round_up (TYPE_SIZE (type), TYPE_ALIGN (type));\n+      TYPE_SIZE_UNIT (type)\n+\t= round_up (TYPE_SIZE_UNIT (type), TYPE_ALIGN_UNIT (type));\n     }\n \n   /* Evaluate nonconstant sizes only once, either now or as soon as safe.  */\n@@ -2008,10 +2005,9 @@ layout_type (tree type)\n \t      length\n \t\t= size_binop (PLUS_EXPR, size_one_node,\n \t\t\t      fold_convert (sizetype,\n-\t\t\t\t\t    fold_build2_loc (input_location,\n-\t\t\t\t\t\t\t     MINUS_EXPR,\n-\t\t\t\t\t\t\t     TREE_TYPE (lb),\n-\t\t\t\t\t\t\t     ub, lb)));\n+\t\t\t\t\t    fold_build2 (MINUS_EXPR,\n+\t\t\t\t\t\t\t TREE_TYPE (lb),\n+\t\t\t\t\t\t\t ub, lb)));\n \n \t    TYPE_SIZE (type) = size_binop (MULT_EXPR, element_size,\n \t\t\t\t\t   fold_convert (bitsizetype,"}]}