{"sha": "db5db9d254853decad675afbb4272cf30fec179d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1ZGI5ZDI1NDg1M2RlY2FkNjc1YWZiYjQyNzJjZjMwZmVjMTc5ZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T16:47:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T16:47:31Z"}, "message": "[ARM][GCC][1/4x]: MVE intrinsics with quaternary operands.\n\nThis patch supports following MVE ACLE intrinsics with quaternary operands.\n\nvsriq_m_n_s8, vsubq_m_s8, vsubq_x_s8, vcvtq_m_n_f16_u16, vcvtq_x_n_f16_u16,\nvqshluq_m_n_s8, vabavq_p_s8, vsriq_m_n_u8, vshlq_m_u8, vshlq_x_u8, vsubq_m_u8,\nvsubq_x_u8, vabavq_p_u8, vshlq_m_s8, vshlq_x_s8, vcvtq_m_n_f16_s16,\nvcvtq_x_n_f16_s16, vsriq_m_n_s16, vsubq_m_s16, vsubq_x_s16, vcvtq_m_n_f32_u32,\nvcvtq_x_n_f32_u32, vqshluq_m_n_s16, vabavq_p_s16, vsriq_m_n_u16,\nvshlq_m_u16, vshlq_x_u16, vsubq_m_u16, vsubq_x_u16, vabavq_p_u16, vshlq_m_s16,\nvshlq_x_s16, vcvtq_m_n_f32_s32, vcvtq_x_n_f32_s32, vsriq_m_n_s32, vsubq_m_s32,\nvsubq_x_s32, vqshluq_m_n_s32, vabavq_p_s32, vsriq_m_n_u32, vshlq_m_u32,\nvshlq_x_u32, vsubq_m_u32, vsubq_x_u32, vabavq_p_u32, vshlq_m_s32, vshlq_x_s32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS):\n\tDefine builtin qualifier.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vsriq_m_n_s8): Define macro.\n\t(vsubq_m_s8): Likewise.\n\t(vcvtq_m_n_f16_u16): Likewise.\n\t(vqshluq_m_n_s8): Likewise.\n\t(vabavq_p_s8): Likewise.\n\t(vsriq_m_n_u8): Likewise.\n\t(vshlq_m_u8): Likewise.\n\t(vsubq_m_u8): Likewise.\n\t(vabavq_p_u8): Likewise.\n\t(vshlq_m_s8): Likewise.\n\t(vcvtq_m_n_f16_s16): Likewise.\n\t(vsriq_m_n_s16): Likewise.\n\t(vsubq_m_s16): Likewise.\n\t(vcvtq_m_n_f32_u32): Likewise.\n\t(vqshluq_m_n_s16): Likewise.\n\t(vabavq_p_s16): Likewise.\n\t(vsriq_m_n_u16): Likewise.\n\t(vshlq_m_u16): Likewise.\n\t(vsubq_m_u16): Likewise.\n\t(vabavq_p_u16): Likewise.\n\t(vshlq_m_s16): Likewise.\n\t(vcvtq_m_n_f32_s32): Likewise.\n\t(vsriq_m_n_s32): Likewise.\n\t(vsubq_m_s32): Likewise.\n\t(vqshluq_m_n_s32): Likewise.\n\t(vabavq_p_s32): Likewise.\n\t(vsriq_m_n_u32): Likewise.\n\t(vshlq_m_u32): Likewise.\n\t(vsubq_m_u32): Likewise.\n\t(vabavq_p_u32): Likewise.\n\t(vshlq_m_s32): Likewise.\n\t(__arm_vsriq_m_n_s8): Define intrinsic.\n\t(__arm_vsubq_m_s8): Likewise.\n\t(__arm_vqshluq_m_n_s8): Likewise.\n\t(__arm_vabavq_p_s8): Likewise.\n\t(__arm_vsriq_m_n_u8): Likewise.\n\t(__arm_vshlq_m_u8): Likewise.\n\t(__arm_vsubq_m_u8): Likewise.\n\t(__arm_vabavq_p_u8): Likewise.\n\t(__arm_vshlq_m_s8): Likewise.\n\t(__arm_vsriq_m_n_s16): Likewise.\n\t(__arm_vsubq_m_s16): Likewise.\n\t(__arm_vqshluq_m_n_s16): Likewise.\n\t(__arm_vabavq_p_s16): Likewise.\n\t(__arm_vsriq_m_n_u16): Likewise.\n\t(__arm_vshlq_m_u16): Likewise.\n\t(__arm_vsubq_m_u16): Likewise.\n\t(__arm_vabavq_p_u16): Likewise.\n\t(__arm_vshlq_m_s16): Likewise.\n\t(__arm_vsriq_m_n_s32): Likewise.\n\t(__arm_vsubq_m_s32): Likewise.\n\t(__arm_vqshluq_m_n_s32): Likewise.\n\t(__arm_vabavq_p_s32): Likewise.\n\t(__arm_vsriq_m_n_u32): Likewise.\n\t(__arm_vshlq_m_u32): Likewise.\n\t(__arm_vsubq_m_u32): Likewise.\n\t(__arm_vabavq_p_u32): Likewise.\n\t(__arm_vshlq_m_s32): Likewise.\n\t(__arm_vcvtq_m_n_f16_u16): Likewise.\n\t(__arm_vcvtq_m_n_f16_s16): Likewise.\n\t(__arm_vcvtq_m_n_f32_u32): Likewise.\n\t(__arm_vcvtq_m_n_f32_s32): Likewise.\n\t(vcvtq_m_n): Define polymorphic variant.\n\t(vqshluq_m_n): Likewise.\n\t(vshlq_m): Likewise.\n\t(vsriq_m_n): Likewise.\n\t(vsubq_m): Likewise.\n\t(vabavq_p): Likewise.\n\t* config/arm/arm_mve_builtins.def\n\t(QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS): Use builtin qualifier.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (VABAVQ_P): Define iterator.\n\t(VSHLQ_M): Likewise.\n\t(VSRIQ_M_N): Likewise.\n\t(VSUBQ_M): Likewise.\n\t(VCVTQ_M_N_TO_F): Likewise.\n\t(mve_vabavq_p_<supf><mode>): Define RTL pattern.\n\t(mve_vqshluq_m_n_s<mode>): Likewise.\n\t(mve_vshlq_m_<supf><mode>): Likewise.\n\t(mve_vsriq_m_n_<supf><mode>): Likewise.\n\t(mve_vsubq_m_<supf><mode>): Likewise.\n\t(mve_vcvtq_m_n_to_f_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vabavq_p_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_u8.c: Likewise.", "tree": {"sha": "36ecead9b67ca1ab23572b1f2f2ded3cb6d75c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ecead9b67ca1ab23572b1f2f2ded3cb6d75c7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5db9d254853decad675afbb4272cf30fec179d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5db9d254853decad675afbb4272cf30fec179d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5db9d254853decad675afbb4272cf30fec179d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5db9d254853decad675afbb4272cf30fec179d/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3678b4464a8dd9cc9386145b4acd2d3333bc071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3678b4464a8dd9cc9386145b4acd2d3333bc071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3678b4464a8dd9cc9386145b4acd2d3333bc071"}], "stats": {"total": 1368, "additions": 1347, "deletions": 21}, "files": [{"sha": "eaf5ff54e4562e72d7ef40d423d086ca3096f22f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -1,3 +1,105 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS):\n+\tDefine builtin qualifier.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vsriq_m_n_s8): Define macro.\n+\t(vsubq_m_s8): Likewise.\n+\t(vcvtq_m_n_f16_u16): Likewise.\n+\t(vqshluq_m_n_s8): Likewise.\n+\t(vabavq_p_s8): Likewise.\n+\t(vsriq_m_n_u8): Likewise.\n+\t(vshlq_m_u8): Likewise.\n+\t(vsubq_m_u8): Likewise.\n+\t(vabavq_p_u8): Likewise.\n+\t(vshlq_m_s8): Likewise.\n+\t(vcvtq_m_n_f16_s16): Likewise.\n+\t(vsriq_m_n_s16): Likewise.\n+\t(vsubq_m_s16): Likewise.\n+\t(vcvtq_m_n_f32_u32): Likewise.\n+\t(vqshluq_m_n_s16): Likewise.\n+\t(vabavq_p_s16): Likewise.\n+\t(vsriq_m_n_u16): Likewise.\n+\t(vshlq_m_u16): Likewise.\n+\t(vsubq_m_u16): Likewise.\n+\t(vabavq_p_u16): Likewise.\n+\t(vshlq_m_s16): Likewise.\n+\t(vcvtq_m_n_f32_s32): Likewise.\n+\t(vsriq_m_n_s32): Likewise.\n+\t(vsubq_m_s32): Likewise.\n+\t(vqshluq_m_n_s32): Likewise.\n+\t(vabavq_p_s32): Likewise.\n+\t(vsriq_m_n_u32): Likewise.\n+\t(vshlq_m_u32): Likewise.\n+\t(vsubq_m_u32): Likewise.\n+\t(vabavq_p_u32): Likewise.\n+\t(vshlq_m_s32): Likewise.\n+\t(__arm_vsriq_m_n_s8): Define intrinsic.\n+\t(__arm_vsubq_m_s8): Likewise.\n+\t(__arm_vqshluq_m_n_s8): Likewise.\n+\t(__arm_vabavq_p_s8): Likewise.\n+\t(__arm_vsriq_m_n_u8): Likewise.\n+\t(__arm_vshlq_m_u8): Likewise.\n+\t(__arm_vsubq_m_u8): Likewise.\n+\t(__arm_vabavq_p_u8): Likewise.\n+\t(__arm_vshlq_m_s8): Likewise.\n+\t(__arm_vsriq_m_n_s16): Likewise.\n+\t(__arm_vsubq_m_s16): Likewise.\n+\t(__arm_vqshluq_m_n_s16): Likewise.\n+\t(__arm_vabavq_p_s16): Likewise.\n+\t(__arm_vsriq_m_n_u16): Likewise.\n+\t(__arm_vshlq_m_u16): Likewise.\n+\t(__arm_vsubq_m_u16): Likewise.\n+\t(__arm_vabavq_p_u16): Likewise.\n+\t(__arm_vshlq_m_s16): Likewise.\n+\t(__arm_vsriq_m_n_s32): Likewise.\n+\t(__arm_vsubq_m_s32): Likewise.\n+\t(__arm_vqshluq_m_n_s32): Likewise.\n+\t(__arm_vabavq_p_s32): Likewise.\n+\t(__arm_vsriq_m_n_u32): Likewise.\n+\t(__arm_vshlq_m_u32): Likewise.\n+\t(__arm_vsubq_m_u32): Likewise.\n+\t(__arm_vabavq_p_u32): Likewise.\n+\t(__arm_vshlq_m_s32): Likewise.\n+\t(__arm_vcvtq_m_n_f16_u16): Likewise.\n+\t(__arm_vcvtq_m_n_f16_s16): Likewise.\n+\t(__arm_vcvtq_m_n_f32_u32): Likewise.\n+\t(__arm_vcvtq_m_n_f32_s32): Likewise.\n+\t(vcvtq_m_n): Define polymorphic variant.\n+\t(vqshluq_m_n): Likewise.\n+\t(vshlq_m): Likewise.\n+\t(vsriq_m_n): Likewise.\n+\t(vsubq_m): Likewise.\n+\t(vabavq_p): Likewise.\n+\t* config/arm/arm_mve_builtins.def\n+\t(QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS): Use builtin qualifier.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (VABAVQ_P): Define iterator.\n+\t(VSHLQ_M): Likewise.\n+\t(VSRIQ_M_N): Likewise.\n+\t(VSUBQ_M): Likewise.\n+\t(VCVTQ_M_N_TO_F): Likewise.\n+\t(mve_vabavq_p_<supf><mode>): Define RTL pattern.\n+\t(mve_vqshluq_m_n_s<mode>): Likewise.\n+\t(mve_vshlq_m_<supf><mode>): Likewise.\n+\t(mve_vsriq_m_n_<supf><mode>): Likewise.\n+\t(mve_vsubq_m_<supf><mode>): Likewise.\n+\t(mve_vcvtq_m_n_to_f_<supf><mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "26f0379f62b95886414d2eb4d7c6a6c4fc235e60", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -523,6 +523,62 @@ arm_ternop_none_none_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TERNOP_NONE_NONE_NONE_NONE_QUALIFIERS \\\n   (arm_ternop_none_none_none_none_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_quadop_unone_unone_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none, qualifier_none,\n+    qualifier_unsigned };\n+#define QUADOP_UNONE_UNONE_NONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_quadop_unone_unone_none_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_none_none_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_none,\n+    qualifier_unsigned };\n+#define QUADOP_NONE_NONE_NONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_quadop_none_none_none_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_none_none_none_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate,\n+    qualifier_unsigned };\n+#define QUADOP_NONE_NONE_NONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_quadop_none_none_none_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_unone_unone_unone_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_unsigned, qualifier_unsigned };\n+#define QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE_QUALIFIERS \\\n+  (arm_quadop_unone_unone_unone_unone_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_unone_unone_none_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none,\n+    qualifier_immediate, qualifier_unsigned };\n+#define QUADOP_UNONE_UNONE_NONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_quadop_unone_unone_none_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_none_none_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned, qualifier_immediate,\n+    qualifier_unsigned };\n+#define QUADOP_NONE_NONE_UNONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_quadop_none_none_unone_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_unone_unone_unone_imm_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_immediate, qualifier_unsigned };\n+#define QUADOP_UNONE_UNONE_UNONE_IMM_UNONE_QUALIFIERS \\\n+  (arm_quadop_unone_unone_unone_imm_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_quadop_unone_unone_unone_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+    qualifier_none, qualifier_unsigned };\n+#define QUADOP_UNONE_UNONE_UNONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_quadop_unone_unone_unone_none_unone_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "e236bffa31b4c9cc48efe150f9f82a54b9fcae82", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 313, "deletions": 13, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -1232,6 +1232,37 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vqmovnbq_m_u32(__a, __b, __p) __arm_vqmovnbq_m_u32(__a, __b, __p)\n #define vqmovntq_m_u32(__a, __b, __p) __arm_vqmovntq_m_u32(__a, __b, __p)\n #define vrev32q_m_u16(__inactive, __a, __p) __arm_vrev32q_m_u16(__inactive, __a, __p)\n+#define vsriq_m_n_s8(__a, __b,  __imm, __p) __arm_vsriq_m_n_s8(__a, __b,  __imm, __p)\n+#define vsubq_m_s8(__inactive, __a, __b, __p) __arm_vsubq_m_s8(__inactive, __a, __b, __p)\n+#define vcvtq_m_n_f16_u16(__inactive, __a,  __imm6, __p) __arm_vcvtq_m_n_f16_u16(__inactive, __a,  __imm6, __p)\n+#define vqshluq_m_n_s8(__inactive, __a,  __imm, __p) __arm_vqshluq_m_n_s8(__inactive, __a,  __imm, __p)\n+#define vabavq_p_s8(__a, __b, __c, __p) __arm_vabavq_p_s8(__a, __b, __c, __p)\n+#define vsriq_m_n_u8(__a, __b,  __imm, __p) __arm_vsriq_m_n_u8(__a, __b,  __imm, __p)\n+#define vshlq_m_u8(__inactive, __a, __b, __p) __arm_vshlq_m_u8(__inactive, __a, __b, __p)\n+#define vsubq_m_u8(__inactive, __a, __b, __p) __arm_vsubq_m_u8(__inactive, __a, __b, __p)\n+#define vabavq_p_u8(__a, __b, __c, __p) __arm_vabavq_p_u8(__a, __b, __c, __p)\n+#define vshlq_m_s8(__inactive, __a, __b, __p) __arm_vshlq_m_s8(__inactive, __a, __b, __p)\n+#define vcvtq_m_n_f16_s16(__inactive, __a,  __imm6, __p) __arm_vcvtq_m_n_f16_s16(__inactive, __a,  __imm6, __p)\n+#define vsriq_m_n_s16(__a, __b,  __imm, __p) __arm_vsriq_m_n_s16(__a, __b,  __imm, __p)\n+#define vsubq_m_s16(__inactive, __a, __b, __p) __arm_vsubq_m_s16(__inactive, __a, __b, __p)\n+#define vcvtq_m_n_f32_u32(__inactive, __a,  __imm6, __p) __arm_vcvtq_m_n_f32_u32(__inactive, __a,  __imm6, __p)\n+#define vqshluq_m_n_s16(__inactive, __a,  __imm, __p) __arm_vqshluq_m_n_s16(__inactive, __a,  __imm, __p)\n+#define vabavq_p_s16(__a, __b, __c, __p) __arm_vabavq_p_s16(__a, __b, __c, __p)\n+#define vsriq_m_n_u16(__a, __b,  __imm, __p) __arm_vsriq_m_n_u16(__a, __b,  __imm, __p)\n+#define vshlq_m_u16(__inactive, __a, __b, __p) __arm_vshlq_m_u16(__inactive, __a, __b, __p)\n+#define vsubq_m_u16(__inactive, __a, __b, __p) __arm_vsubq_m_u16(__inactive, __a, __b, __p)\n+#define vabavq_p_u16(__a, __b, __c, __p) __arm_vabavq_p_u16(__a, __b, __c, __p)\n+#define vshlq_m_s16(__inactive, __a, __b, __p) __arm_vshlq_m_s16(__inactive, __a, __b, __p)\n+#define vcvtq_m_n_f32_s32(__inactive, __a,  __imm6, __p) __arm_vcvtq_m_n_f32_s32(__inactive, __a,  __imm6, __p)\n+#define vsriq_m_n_s32(__a, __b,  __imm, __p) __arm_vsriq_m_n_s32(__a, __b,  __imm, __p)\n+#define vsubq_m_s32(__inactive, __a, __b, __p) __arm_vsubq_m_s32(__inactive, __a, __b, __p)\n+#define vqshluq_m_n_s32(__inactive, __a,  __imm, __p) __arm_vqshluq_m_n_s32(__inactive, __a,  __imm, __p)\n+#define vabavq_p_s32(__a, __b, __c, __p) __arm_vabavq_p_s32(__a, __b, __c, __p)\n+#define vsriq_m_n_u32(__a, __b,  __imm, __p) __arm_vsriq_m_n_u32(__a, __b,  __imm, __p)\n+#define vshlq_m_u32(__inactive, __a, __b, __p) __arm_vshlq_m_u32(__inactive, __a, __b, __p)\n+#define vsubq_m_u32(__inactive, __a, __b, __p) __arm_vsubq_m_u32(__inactive, __a, __b, __p)\n+#define vabavq_p_u32(__a, __b, __c, __p) __arm_vabavq_p_u32(__a, __b, __c, __p)\n+#define vshlq_m_s32(__inactive, __a, __b, __p) __arm_vshlq_m_s32(__inactive, __a, __b, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -7696,6 +7727,196 @@ __arm_vrev32q_m_u16 (uint16x8_t __inactive, uint16x8_t __a, mve_pred16_t __p)\n {\n   return __builtin_mve_vrev32q_m_uv8hi (__inactive, __a, __p);\n }\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_s8 (int8x16_t __a, int8x16_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_sv16qi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_s8 (int8x16_t __inactive, int8x16_t __a, int8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_sv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshluq_m_n_s8 (uint8x16_t __inactive, int8x16_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshluq_m_n_sv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_s8 (uint32_t __a, int8x16_t __b, int8x16_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_sv16qi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_u8 (uint8x16_t __a, uint8x16_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_uv16qi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_u8 (uint8x16_t __inactive, uint8x16_t __a, int8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_uv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_u8 (uint8x16_t __inactive, uint8x16_t __a, uint8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_uv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_u8 (uint32_t __a, uint8x16_t __b, uint8x16_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_uv16qi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_s8 (int8x16_t __inactive, int8x16_t __a, int8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_sv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_s16 (int16x8_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_s16 (int16x8_t __inactive, int16x8_t __a, int16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshluq_m_n_s16 (uint16x8_t __inactive, int16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshluq_m_n_sv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_s16 (uint32_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_u16 (uint16x8_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_u16 (uint16x8_t __inactive, uint16x8_t __a, int16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_uv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_u16 (uint16x8_t __inactive, uint16x8_t __a, uint16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_uv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_u16 (uint32_t __a, uint16x8_t __b, uint16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_uv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_s16 (int16x8_t __inactive, int16x8_t __a, int16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_s32 (int32x4_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_sv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshluq_m_n_s32 (uint32x4_t __inactive, int32x4_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshluq_m_n_sv4si (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_s32 (uint32_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsriq_m_n_u32 (uint32x4_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsriq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, int32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_uv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsubq_m_u32 (uint32x4_t __inactive, uint32x4_t __a, uint32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vsubq_m_uv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vabavq_p_u32 (uint32_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vabavq_p_uv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_m_s32 (int32x4_t __inactive, int32x4_t __a, int32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlq_m_sv4si (__inactive, __a, __b, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -9376,6 +9597,34 @@ __arm_vcvtq_m_u32_f32 (uint32x4_t __inactive, float32x4_t __a, mve_pred16_t __p)\n   return __builtin_mve_vcvtq_m_from_f_uv4si (__inactive, __a, __p);\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_n_f16_u16 (float16x8_t __inactive, uint16x8_t __a, const int __imm6, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_n_to_f_uv8hf (__inactive, __a, __imm6, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_n_f16_s16 (float16x8_t __inactive, int16x8_t __a, const int __imm6, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_n_to_f_sv8hf (__inactive, __a, __imm6, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_n_f32_u32 (float32x4_t __inactive, uint32x4_t __a, const int __imm6, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_n_to_f_uv4sf (__inactive, __a, __imm6, __p);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_m_n_f32_s32 (float32x4_t __inactive, int32x4_t __a, const int __imm6, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vcvtq_m_n_to_f_sv4sf (__inactive, __a, __imm6, __p);\n+}\n+\n #endif\n \n enum {\n@@ -11008,6 +11257,15 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcvtq_m_u16_f16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcvtq_m_u32_f32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n+#define vcvtq_m_n(p0,p1,p2,p3) __arm_vcvtq_m_n(p0,p1,p2,p3)\n+#define __arm_vcvtq_m_n(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcvtq_m_n_f16_s16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcvtq_m_n_f32_s32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcvtq_m_n_f16_u16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcvtq_m_n_f32_u32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n #define vabsq_m(p0,p1,p2) __arm_vabsq_m(p0,p1,p2)\n #define __arm_vabsq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -11050,19 +11308,6 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmlaq_rot90_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmlaq_rot90_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t)));})\n \n-#define vcmpeqq_m_n(p0,p1,p2) __arm_vcmpeqq_m_n(p0,p1,p2)\n-#define __arm_vcmpeqq_m_n(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n-  __typeof(p1) __p1 = (p1); \\\n-  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8_t]: __arm_vcmpeqq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vcmpeqq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vcmpeqq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8_t]: __arm_vcmpeqq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16_t]: __arm_vcmpeqq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vcmpeqq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16_t]: __arm_vcmpeqq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32_t]: __arm_vcmpeqq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n-\n #define vrndxq_m(p0,p1,p2) __arm_vrndxq_m(p0,p1,p2)\n #define __arm_vrndxq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -13387,6 +13632,30 @@ extern void *__ARM_undef;\n #define vrmlsldavhxq_p(p0,p1,p2) __arm_vrmlsldavhxq_p(p0,p1,p2)\n #define __arm_vrmlsldavhxq_p(p0,p1,p2) __arm_vrmlsldavhxq_p_s32(p0,p1,p2)\n \n+#define vsubq_m(p0,p1,p2,p3) __arm_vsubq_m(p0,p1,p2,p3)\n+#define __arm_vsubq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vsubq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vsubq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsubq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vsubq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vsubq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsubq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vabavq_p(p0,p1,p2,p3) __arm_vabavq_p(p0,p1,p2,p3)\n+#define __arm_vabavq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vabavq_p_s8(__p0, __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vabavq_p_s16(__p0, __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vabavq_p_s32(__p0, __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vabavq_p_u8(__p0, __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vabavq_p_u16(__p0, __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vabavq_p_u32(__p0, __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n #endif /* MVE Integer.  */\n \n #define vqabsq_m(p0,p1,p2) __arm_vqabsq_m(p0,p1,p2)\n@@ -13427,6 +13696,37 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqshrunbq_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqshrunbq_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2));})\n \n+#define vqshluq_m(p0,p1,p2,p3) __arm_vqshluq_m(p0,p1,p2,p3)\n+#define __arm_vqshluq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vqshluq_m_n_s8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vqshluq_m_n_s16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vqshluq_m_n_s32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3));})\n+\n+#define vshlq_m(p0,p1,p2,p3) __arm_vshlq_m(p0,p1,p2,p3)\n+#define __arm_vshlq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), __ARM_mve_coerce(__p2, int8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, int8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n+\n+#define vsriq_m(p0,p1,p2,p3) __arm_vsriq_m(p0,p1,p2,p3)\n+#define __arm_vsriq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vsriq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vsriq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vsriq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vsriq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vsriq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vsriq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "c7d64ff7858c7cbc2539ac09504ff512331ae1ca", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -502,3 +502,14 @@ VAR1 (TERNOP_NONE_NONE_NONE_UNONE, vaddlvaq_p_s, v4si)\n VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlsldavhaxq_s, v4si)\n VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlsldavhaq_s, v4si)\n VAR1 (TERNOP_NONE_NONE_NONE_NONE, vrmlaldavhaxq_s, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vsriq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vsriq_m_n_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsubq_m_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vsubq_m_u, v16qi, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vcvtq_m_n_to_f_u, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vcvtq_m_n_to_f_s, v8hf, v4sf)\n+VAR3 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vqshluq_m_n_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_NONE_NONE_UNONE, vabavq_p_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vabavq_p_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_NONE_UNONE, vshlq_m_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vshlq_m_s, v16qi, v8hi, v4si)"}, {"sha": "b65849cc54a063ffc2dea7137c76a9ec9cf8bbdf", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 118, "deletions": 8, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -140,7 +140,10 @@\n \t\t\t VCVTPQ_M_S VCVTPQ_M_U VCVTQ_M_N_FROM_F_S VCVTNQ_M_U\n \t\t\t VREV16Q_M_S VREV16Q_M_U VREV32Q_M VCVTQ_M_FROM_F_U\n \t\t\t VCVTQ_M_FROM_F_S VRMLALDAVHQ_P_U VADDLVAQ_P_U\n-\t\t\t VCVTQ_M_N_FROM_F_U])\n+\t\t\t VCVTQ_M_N_FROM_F_U VQSHLUQ_M_N_S VABAVQ_P_S\n+\t\t\t VABAVQ_P_U VSHLQ_M_S VSHLQ_M_U VSRIQ_M_N_S\n+\t\t\t VSRIQ_M_N_U VSUBQ_M_U VSUBQ_M_S VCVTQ_M_N_TO_F_U\n+\t\t\t VCVTQ_M_N_TO_F_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -244,7 +247,11 @@\n \t\t       (VCVTQ_M_N_FROM_F_U \"u\") (VCVTQ_M_FROM_F_S \"s\")\n \t\t       (VCVTQ_M_FROM_F_U \"u\") (VRMLALDAVHQ_P_U \"u\")\n \t\t       (VRMLALDAVHQ_P_S \"s\") (VADDLVAQ_P_U \"u\")\n-\t\t       (VCVTQ_M_N_FROM_F_S \"s\")])\n+\t\t       (VCVTQ_M_N_FROM_F_S \"s\") (VABAVQ_P_U \"u\")\n+\t\t       (VABAVQ_P_S \"s\") (VSHLQ_M_S \"s\") (VSHLQ_M_U \"u\")\n+\t\t       (VSRIQ_M_N_S \"s\") (VSRIQ_M_N_U \"u\") (VSUBQ_M_S \"s\")\n+\t\t       (VSUBQ_M_U \"u\") (VCVTQ_M_N_TO_F_S \"s\")\n+\t\t       (VCVTQ_M_N_TO_F_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -407,6 +414,11 @@\n (define_int_iterator VCVTQ_M_FROM_F [VCVTQ_M_FROM_F_U VCVTQ_M_FROM_F_S])\n (define_int_iterator VRMLALDAVHQ_P [VRMLALDAVHQ_P_S VRMLALDAVHQ_P_U])\n (define_int_iterator VADDLVAQ_P [VADDLVAQ_P_U VADDLVAQ_P_S])\n+(define_int_iterator VABAVQ_P [VABAVQ_P_S VABAVQ_P_U])\n+(define_int_iterator VSHLQ_M [VSHLQ_M_S VSHLQ_M_U])\n+(define_int_iterator VSRIQ_M_N [VSRIQ_M_N_S VSRIQ_M_N_U])\n+(define_int_iterator VSUBQ_M [VSUBQ_M_U VSUBQ_M_S])\n+(define_int_iterator VCVTQ_M_N_TO_F [VCVTQ_M_N_TO_F_U VCVTQ_M_N_TO_F_S])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -5551,7 +5563,7 @@\n \t VSHRNTQ_N))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vshrnt.i%#<V_sz_elem>\t%q0, %q2, %3\"\n+  \"vshrnt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -5567,7 +5579,7 @@\n \t VCVTMQ_M))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vpst\\;vcvtmt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  \"vpst\\;vcvtmt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -5583,7 +5595,7 @@\n \t VCVTPQ_M))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vpst\\;vcvtpt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  \"vpst\\;vcvtpt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -5599,7 +5611,7 @@\n \t VCVTNQ_M))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vpst\\;vcvtnt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q2\"\n+  \"vpst\\;vcvtnt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -5616,7 +5628,7 @@\n \t VCVTQ_M_N_FROM_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2, %3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -5648,7 +5660,7 @@\n \t VCVTQ_M_FROM_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n-  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\t%q0, %q2\"\n+  \"vpst\\;vcvtt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>\\t%q0, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n@@ -5683,3 +5695,101 @@\n   \"vrmlsldavha.s32 %Q0, %R0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vabavq_p_s, vabavq_p_u])\n+;;\n+(define_insn \"mve_vabavq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"0\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VABAVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vabavt.<supf>%#<V_sz_elem>\\t%0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vqshluq_m_n_s])\n+;;\n+(define_insn \"mve_vqshluq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_7\" \"Ra\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHLUQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\n\\tvqshlut.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [vshlq_m_s, vshlq_m_u])\n+;;\n+(define_insn \"mve_vshlq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHLQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshlt.<supf>%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [vsriq_m_n_s, vsriq_m_n_u])\n+;;\n+(define_insn \"mve_vsriq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_selective_upto_8\" \"Rg\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSRIQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vsrit.%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [vsubq_m_u, vsubq_m_s])\n+;;\n+(define_insn \"mve_vsubq_m_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSUBQ_M))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vsubt.i%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [vcvtq_m_n_to_f_u, vcvtq_m_n_to_f_s])\n+;;\n+(define_insn \"mve_vcvtq_m_n_to_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_16\" \"Rd\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCVTQ_M_N_TO_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcvtt.f%#<V_sz_elem>.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])"}, {"sha": "f4e117c51172ad97870b7943026c9ce22ac0f653", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -1,3 +1,39 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vabavq_p_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshluq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsriq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_u8.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "c9d9f836dbffe82cdbf820703a9a72dac0f2591d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s16\"  }  } */"}, {"sha": "a5b1da8d61c7518694c7c092f03ca88962f6b92e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s32\"  }  } */"}, {"sha": "15b95521976766c6ab99041b1bd3cce4ede7c665", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_s8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_s8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, int8x16_t b, int8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.s8\"  }  } */"}, {"sha": "1c27b6b46f700145bb02403d54804963e934358a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u16\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u16\"  }  } */"}, {"sha": "c50fe7c4e8083e1b1dc51af4c2152ecfe214d9bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u32\"  }  } */"}, {"sha": "0566222e96b904cbf90529a1c3017e29d6927b0e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabavq_p_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabavq_p_u8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p_u8 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u8\"  }  } */\n+\n+uint32_t\n+foo1 (uint32_t a, uint8x16_t b, uint8x16_t c, mve_pred16_t p)\n+{\n+  return vabavq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vabavt.u8\"  }  } */"}, {"sha": "e5b5e9befaad0e09e649205d0b137596995b55d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_f16_s16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.s16\"  }  } */"}, {"sha": "271fb1b6ea04e3ebac505f21118ccb4a575db351", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_f16_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f16_u16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_f16_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f16.u16\"  }  } */"}, {"sha": "280c5105b7eebb52a0635dc8ead518720ba95da4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_f32_s32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.s32\"  }  } */"}, {"sha": "691756b077e973d7fd9b8945af48888a870e5361", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_f32_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_f32_u32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_f32_u32 (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.f32.u32\"  }  } */"}, {"sha": "03016b0beec1fbd9c306038b1012d497a66fdc8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m_n_s16 (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlut.s16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3f812e1e374a4d47f99970ceb048e9e67da329e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m_n_s32 (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlut.s32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, int32x4_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "59c0108fa670093cdacb3343e979359d91f563c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshluq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshluq_m_n_s8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m_n_s8 (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshlut.s8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vqshluq_m (inactive, a, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "26b664d923cf6e5610a4aa74590d68a6b565a0f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "2bc83361ee1ea35355a64ccc9469e57afc486dc7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "5dec31eb5232220ed7b8fdbc70247ad671917911", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_s8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d4e42d83387a18188e83b20e4d0750579b4ba71d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "8c0b62dc2add3dfe97efd985f724cdbb8dccba92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "429b2f4a8518c170d1f29eb5af311340a1f8e93a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_m_u8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vshlq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlt.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vshlq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "041cc7249dea8f85034a4ffca4dd8c61335d89b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_s16 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "52cd978239d54376a17cbc45ff4e8120e735be9d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_s32 (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 2, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "208f8dc9a69f437aee69140f469eb2643f18d2ff", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_s8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_s8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "c1a1c4eeb19dd75e0e89cf6d2fd222cfa3c93500", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_u16 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3524c502f4dfc0a377301d72f194942c9b81f837", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_u32 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "4636544ea238955cb5f3097923c75de7047df988", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsriq_m_n_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsriq_m_n_u8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsriq_m_n_u8 (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsrit.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsriq_m (a, b, 4, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "142b91f0d2ebf2aee46ffeade1a98652017ec63f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "d82af8a0d1014b6f8a81b467ba701759dc02217b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "182b7c9759b224d6ceb988ba56daccb879f5c81d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_s8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_s8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "abafd6c9ad30c4b9519d3f9e4063ae998386683e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u16.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_u16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "dbd8341c793c6a1bbf7181b9cac4396647b4c91f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u32.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_u32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}, {"sha": "3acbefb60889e01f69f6aeb1c613e4c0dea6bfa3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5db9d254853decad675afbb4272cf30fec179d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_u8.c?ref=db5db9d254853decad675afbb4272cf30fec179d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_u8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */"}]}