{"sha": "aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5Y2E1Y2E0ZjNlOWUyNzJhN2RjYzUxOGQwMzc5MjdiMzE5YmIyNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-06-25T20:26:42Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-06-25T20:26:42Z"}, "message": "check.c (check_co_minmaxsum): Add definable check.\n\ngcc/fortran/\n2014-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * check.c (check_co_minmaxsum): Add definable check.\n        * expr.c (gfc_check_vardef_context): Fix context == NULL case.\n        * trans-expr.c (get_scalar_to_descriptor_type): Handle pointer\n        arguments.\n        * trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fix generation\n        of temporary strings.\n\ngcc/testsuite/\n2014-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_collectives_7.f90: New.\n\nFrom-SVN: r211992", "tree": {"sha": "a15b037bed16a18aeac9a00c6147d44c259deb02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15b037bed16a18aeac9a00c6147d44c259deb02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db88b449589fa989c1f72e4796d2bce291b6cedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db88b449589fa989c1f72e4796d2bce291b6cedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db88b449589fa989c1f72e4796d2bce291b6cedf"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "12606ffeaa89a4a0e391941114e56be5506696c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -1,3 +1,11 @@\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_minmaxsum): Add definable check.\n+\t* expr.c (gfc_check_vardef_context): Fix context == NULL case.\n+\t* trans-expr.c (get_scalar_to_descriptor_type): Handle pointer arguments.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_caf_get): Fix generation of temporary\n+\tstrings.\n+\n 2014-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* trans.h (gfc_omp_clause_linear_ctor): New prototype."}, {"sha": "10944ebd2b13c7606ae5b0be92db57a0d6a33ff4", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -1307,6 +1307,18 @@ check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n   if (!variable_check (a, 0, false))\n     return false;\n \n+  if (!gfc_check_vardef_context (a, false, false, false, \"argument 'A' with \"\n+\t\t\t\t \"INTENT(INOUT)\"))\n+    return false;\n+\n+  if (gfc_has_vector_subscript (a))\n+    {\n+      gfc_error (\"Argument 'A' with INTENT(INOUT) at %L of the intrinsic \"\n+\t\t \"subroutine %s shall not have a vector subscript\",\n+\t\t &a->where, gfc_current_intrinsic);\n+      return false;\n+    }\n+\n   if (result_image != NULL)\n     {\n       if (!type_check (result_image, 1, BT_INTEGER))"}, {"sha": "feb089e480b063f341ecebe25045a829ec1ded42", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -4956,10 +4956,11 @@ gfc_check_vardef_context (gfc_expr* e, bool pointer, bool alloc_obj,\n \t\t\t  en = n->expr;\n \t\t\t  if (gfc_dep_compare_expr (ec, en) == 0)\n \t\t\t    {\n-\t\t\t      gfc_error_now (\"Elements with the same value at %L\"\n-\t\t\t\t\t     \" and %L in vector subscript\"\n-\t\t\t\t\t     \" in a variable definition\"\n-\t\t\t\t\t     \" context (%s)\", &(ec->where),\n+\t\t\t      if (context)\n+\t\t\t\tgfc_error_now (\"Elements with the same value at %L\"\n+\t\t\t\t\t       \" and %L in vector subscript\"\n+\t\t\t\t\t       \" in a variable definition\"\n+\t\t\t\t\t       \" context (%s)\", &(ec->where),\n \t\t\t\t\t     &(en->where), context);\n \t\t\t      return false;\n \t\t\t    }"}, {"sha": "7ee0206e6a0c385d8af1918c04b1f5486c3e9bf4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -57,6 +57,8 @@ get_scalar_to_descriptor_type (tree scalar, symbol_attribute attr)\n   else\n     akind = GFC_ARRAY_ASSUMED_SHAPE_CONT;\n \n+  if (POINTER_TYPE_P (TREE_TYPE (scalar)))\n+    scalar = TREE_TYPE (scalar);\n   return gfc_get_array_type_bounds (TREE_TYPE (scalar), 0, 0, NULL, NULL, 1,\n \t\t\t\t    akind, !(attr.pointer || attr.target));\n }"}, {"sha": "a0c74218e63170a29bbbec002dc8359cae00adbf", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -1258,7 +1258,8 @@ gfc_conv_intrinsic_caf_get (gfc_se *se, gfc_expr *expr, tree lhs, tree lhs_kind)\n \t{\n \t  gfc_clear_attr (&attr);\n \t  if (array_expr->ts.type == BT_CHARACTER)\n-\t    res_var = gfc_conv_string_tmp (se, type, argse.string_length);\n+\t    res_var = gfc_conv_string_tmp (se, build_pointer_type (type),\n+\t\t\t\t\t   argse.string_length);\n \t  else\n \t    res_var = gfc_create_var (type, \"caf_res\");\n \t  dst_var = gfc_conv_scalar_to_descriptor (&argse, res_var, attr);"}, {"sha": "7046ff741056a5acae7685d4a18c4679da64267a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -1,3 +1,7 @@\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_collectives_7.f90: New.\n+\n 2014-06-25  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.c-torture/execute/20140622-1.c: New test."}, {"sha": "aa97b7fdc095379d6f52f74419b222ff942976a9", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_8.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9ca5ca4f3e9e272a7dcc518d037927b319bb27/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_8.f90?ref=aa9ca5ca4f3e9e272a7dcc518d037927b319bb27", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! As SOURCE is INTENT(INOUT), it must be definable,\n+! cf. J3/14-147\n+!\n+\n+intrinsic :: co_sum, co_min, co_max\n+integer :: vec(3), idx(3)\n+\n+call co_sum(vec(idx)) ! { dg-error \"Argument 'A' with INTENT\\\\(INOUT\\\\) at .1. of the intrinsic subroutine co_sum shall not have a vector subscript\" }\n+call co_min(vec([1,3,2])) ! { dg-error \"Argument 'A' with INTENT\\\\(INOUT\\\\) at .1. of the intrinsic subroutine co_min shall not have a vector subscript\" }\n+call co_sum(vec([1,1,1])) ! { dg-error \"Elements with the same value at .1. and .2. in vector subscript in a variable definition context \\\\(argument 'A' with INTENT\\\\(INOUT\\\\)\\\\)\" }\n+end"}]}