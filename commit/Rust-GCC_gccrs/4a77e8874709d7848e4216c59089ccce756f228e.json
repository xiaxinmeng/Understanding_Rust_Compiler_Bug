{"sha": "4a77e8874709d7848e4216c59089ccce756f228e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE3N2U4ODc0NzA5ZDc4NDhlNDIxNmM1OTA4OWNjY2U3NTZmMjI4ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-21T11:00:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-21T11:00:43Z"}, "message": "Tighten tree-ssa-ccp.c:get_value_for_expr condition\n\nbit_value_unop and bit_value_binop require constant values\nto be INTEGER_CSTs:\n\n  gcc_assert ((rval.lattice_val == CONSTANT\n               && TREE_CODE (rval.value) == INTEGER_CST)\n              || wi::sext (rval.mask, TYPE_PRECISION (TREE_TYPE (rhs))) == -1);\n\nHowever, when deciding whether to record a constant value,\nthe for_bits_p handling in get_value_for_expr used a negative\ntest for ADDR_EXPR:\n\n  else if (is_gimple_min_invariant (expr)\n           && (!for_bits_p || TREE_CODE (expr) != ADDR_EXPR))\n\nThis patch uses a positive test for INTEGER_CST instead.\n\nExisting tests showed the need for this once polynomial constants\nare added.\n\n2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-ssa-ccp.c (get_value_for_expr): Use a positive test for\n\tINTEGER_CST rather than a negative test for ADDR_EXPR.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253056", "tree": {"sha": "2f833fb43ecc1fb9ecb9c46f20119900d30c2630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f833fb43ecc1fb9ecb9c46f20119900d30c2630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a77e8874709d7848e4216c59089ccce756f228e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a77e8874709d7848e4216c59089ccce756f228e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a77e8874709d7848e4216c59089ccce756f228e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a77e8874709d7848e4216c59089ccce756f228e/comments", "author": null, "committer": null, "parents": [{"sha": "dd72b5f95275ca75dc54b8b51a14ff2025ed1a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd72b5f95275ca75dc54b8b51a14ff2025ed1a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd72b5f95275ca75dc54b8b51a14ff2025ed1a3a"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "6f2f3d7a9df273982bbb9d79d6260d109d7eb3b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a77e8874709d7848e4216c59089ccce756f228e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a77e8874709d7848e4216c59089ccce756f228e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a77e8874709d7848e4216c59089ccce756f228e", "patch": "@@ -1,3 +1,10 @@\n+2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-ssa-ccp.c (get_value_for_expr): Use a positive test for\n+\tINTEGER_CST rather than a negative test for ADDR_EXPR.\n+\n 2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "9811640c2a5fa17e032b2a7b7c02163bb947d0ed", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a77e8874709d7848e4216c59089ccce756f228e/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a77e8874709d7848e4216c59089ccce756f228e/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=4a77e8874709d7848e4216c59089ccce756f228e", "patch": "@@ -617,7 +617,7 @@ get_value_for_expr (tree expr, bool for_bits_p)\n \t}\n     }\n   else if (is_gimple_min_invariant (expr)\n-\t   && (!for_bits_p || TREE_CODE (expr) != ADDR_EXPR))\n+\t   && (!for_bits_p || TREE_CODE (expr) == INTEGER_CST))\n     {\n       val.lattice_val = CONSTANT;\n       val.value = expr;"}]}