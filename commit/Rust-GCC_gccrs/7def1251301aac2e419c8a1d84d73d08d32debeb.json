{"sha": "7def1251301aac2e419c8a1d84d73d08d32debeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlZjEyNTEzMDFhYWMyZTQxOWM4YTFkODRkNzNkMDhkMzJkZWJlYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-08-24T01:57:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-08-24T01:57:19Z"}, "message": "typeck.c (build_ptrmemfunc): Save the input pmf.\n\n        * typeck.c (build_ptrmemfunc): Save the input pmf.\n\n        * method.c (process_modifiers): Use same_type_p.\n\nFrom-SVN: r35930", "tree": {"sha": "e56284271522f5cf16f3706d3c21d3c5c67d2425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e56284271522f5cf16f3706d3c21d3c5c67d2425"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7def1251301aac2e419c8a1d84d73d08d32debeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7def1251301aac2e419c8a1d84d73d08d32debeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7def1251301aac2e419c8a1d84d73d08d32debeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7def1251301aac2e419c8a1d84d73d08d32debeb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f1c312aa06c452609c7fab1cf390dde6dfb8722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1c312aa06c452609c7fab1cf390dde6dfb8722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1c312aa06c452609c7fab1cf390dde6dfb8722"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "c78ff70b0296a34cc6053b3cc9bd437e01c2571c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7def1251301aac2e419c8a1d84d73d08d32debeb", "patch": "@@ -1,3 +1,9 @@\n+2000-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (build_ptrmemfunc): Save the input pmf.\n+\n+\t* method.c (process_modifiers): Use same_type_p.\n+\n 2000-08-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DECL_CLONED_FUNCTION_P): Check DECL_LANG_SPECIFIC."}, {"sha": "4c024d1e49ad610cda2eadec3614a2455062f958", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7def1251301aac2e419c8a1d84d73d08d32debeb", "patch": "@@ -1253,8 +1253,8 @@ process_modifiers (parmtype)\n   if (TYPE_READONLY (parmtype))\n     OB_PUTC ('C');\n   if (TREE_CODE (parmtype) == INTEGER_TYPE\n-      && parmtype != char_type_node\n-      && parmtype != wchar_type_node\n+      && ! same_type_p (parmtype, char_type_node)\n+      && ! same_type_p (parmtype, wchar_type_node)\n       && (TYPE_MAIN_VARIANT (parmtype)\n \t  == unsigned_type (TYPE_MAIN_VARIANT (parmtype)))\n       && ! TYPE_FOR_JAVA (parmtype))"}, {"sha": "3b3313deede7eda40977cc9a8e5b8de71b21c3f6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7def1251301aac2e419c8a1d84d73d08d32debeb", "patch": "@@ -6132,6 +6132,9 @@ build_ptrmemfunc (type, pfn, force)\n       if (TREE_CODE (pfn) != PTRMEM_CST && same_type_p (to_type, pfn_type))\n \treturn pfn;\n \n+      if (TREE_SIDE_EFFECTS (pfn))\n+\tpfn = save_expr (pfn);\n+\n       if (flag_new_abi)\n \t{\n \t  /* Under the new ABI, the conversion is easy.  Just adjust"}, {"sha": "e3e6a9fac53195d872265a7d153167687cf11a99", "filename": "gcc/testsuite/g++.old-deja/g++.other/pmf5.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7def1251301aac2e419c8a1d84d73d08d32debeb/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf5.C?ref=7def1251301aac2e419c8a1d84d73d08d32debeb", "patch": "@@ -0,0 +1,38 @@\n+// Bug: g++ expanded b->member() multiple times, causing the optimizer to\n+// decide that things weren't related and optimize 'die' into an infinite\n+// loop.\n+\n+struct A {\n+  virtual ~A() { }\n+  void f (bool) { }\n+};\n+\n+typedef void (A::*pmf_void)();\n+typedef void (A::*pmf_bool)(bool);\n+\n+struct B {\n+  ~B() {}\n+  pmf_void member() const { return mbr; }\n+  pmf_void mbr;\n+};\n+\n+A *a;\n+B *b;\n+\n+void die (bool param) {\n+  pmf_bool pmf = (pmf_bool)(b->member());\n+  (a->*pmf)(param);\n+}\n+\n+int main ()\n+{\n+  A a2;\n+  B b2;\n+\n+  b2.mbr = reinterpret_cast<pmf_void>(&A::f);\n+\n+  a = &a2;\n+  b = &b2;\n+\n+  die (true);\n+}"}]}