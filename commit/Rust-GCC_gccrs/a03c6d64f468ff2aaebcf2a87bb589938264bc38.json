{"sha": "a03c6d64f468ff2aaebcf2a87bb589938264bc38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzYzZkNjRmNDY4ZmYyYWFlYmNmMmE4N2JiNTg5OTM4MjY0YmMzOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-01-16T16:32:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-01-16T16:32:05Z"}, "message": "re PR rtl-optimization/31396 (Inline code performance much worse than out-of-line)\n\n\n\tPR rtl-optimization/31396\n\t* regstat.c (regstat_bb_compute_ri): Compute FREQ_CALLS_CROSSED.\n\t* cfg.c (dump_reg_info): Print it.\n\t* regs.h (struct reg_info_t): add freq_calls_crossed.\n\t(REG_FREQ_CALLS_CROSSED): New macro.\n\t* global.c (global_alloc): Compute freq_calls_crossed for allocno.\n\t(find_reg): Update call of CALLER_SAVE_PROFITABLE.\n\t* regmove.c (optimize_reg_copy_1, optimize_reg_copy_2, fixup_match_2,\n\tregmove_optimize): Update call crossed frequencies.\n\t* local-alloc.c (struct qty): Add freq_calls_crossed.\n\t(alloc_qty): Copute freq_calls_crossed.\n\t(update_equiv_regs, combine_regs): Update REG_FREQ_CALLS_CROSSED.\n\t(find_free_reg): Update call of CALLER_SAVE_PROFITABLE.\n\t* ra.h (struct allocno): Add freq_calls_crossed.\n\nFrom-SVN: r131576", "tree": {"sha": "e7a65553b87a99438635f0d5abcf71b9c8210b5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a65553b87a99438635f0d5abcf71b9c8210b5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03c6d64f468ff2aaebcf2a87bb589938264bc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03c6d64f468ff2aaebcf2a87bb589938264bc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03c6d64f468ff2aaebcf2a87bb589938264bc38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03c6d64f468ff2aaebcf2a87bb589938264bc38/comments", "author": null, "committer": null, "parents": [{"sha": "58c0b6524407250f48bb9c616943bf05a1ee6478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c0b6524407250f48bb9c616943bf05a1ee6478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c0b6524407250f48bb9c616943bf05a1ee6478"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "8e2caec9b1672f45843ded4895ca7d1313420ebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -1,3 +1,20 @@\n+2008-01-16  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR rtl-optimization/31396\n+\t* regstat.c (regstat_bb_compute_ri): Compute FREQ_CALLS_CROSSED.\n+\t* cfg.c (dump_reg_info): Print it.\n+\t* regs.h (struct reg_info_t): add freq_calls_crossed.\n+\t(REG_FREQ_CALLS_CROSSED): New macro.\n+\t* global.c (global_alloc): Compute freq_calls_crossed for allocno.\n+\t(find_reg): Update call of CALLER_SAVE_PROFITABLE.\n+\t* regmove.c (optimize_reg_copy_1, optimize_reg_copy_2, fixup_match_2,\n+\tregmove_optimize): Update call crossed frequencies.\n+\t* local-alloc.c (struct qty): Add freq_calls_crossed.\n+\t(alloc_qty): Copute freq_calls_crossed.\n+\t(update_equiv_regs, combine_regs): Update REG_FREQ_CALLS_CROSSED.\n+\t(find_free_reg): Update call of CALLER_SAVE_PROFITABLE.\n+\t* ra.h (struct allocno): Add freq_calls_crossed.\n+\n 2008-01-16  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* gcc.c (LINK_COMMAND_SPEC): Add includes and link options for"}, {"sha": "8a83137aaa5c7258f663ad90010fbf8df2401f3f", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -613,6 +613,8 @@ dump_reg_info (FILE *file)\n \tfprintf (file, \"; crosses 1 call\");\n       else if (REG_N_CALLS_CROSSED (i))\n \tfprintf (file, \"; crosses %d calls\", REG_N_CALLS_CROSSED (i));\n+      if (REG_FREQ_CALLS_CROSSED (i))\n+\tfprintf (file, \"; crosses call with %d frequency\", REG_FREQ_CALLS_CROSSED (i));\n       if (regno_reg_rtx[i] != NULL\n \t  && PSEUDO_REGNO_BYTES (i) != UNITS_PER_WORD)\n \tfprintf (file, \"; %d bytes\", PSEUDO_REGNO_BYTES (i));"}, {"sha": "8be113df60a39468b7ebf094ac5806f54e73636a", "filename": "gcc/global.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -404,6 +404,7 @@ global_alloc (void)\n       allocno[i].reg = regno;\n       allocno[i].size = PSEUDO_REGNO_SIZE (regno);\n       allocno[i].calls_crossed += REG_N_CALLS_CROSSED (regno);\n+      allocno[i].freq_calls_crossed += REG_FREQ_CALLS_CROSSED (regno);\n       allocno[i].throwing_calls_crossed\n \t+= REG_N_THROWING_CALLS_CROSSED (regno);\n       allocno[i].n_refs += REG_N_REFS (regno);\n@@ -1164,8 +1165,9 @@ find_reg (int num, HARD_REG_SET losers, int alt_regs_p, int accept_call_clobbere\n       if (! accept_call_clobbered\n \t  && allocno[num].calls_crossed != 0\n \t  && allocno[num].throwing_calls_crossed == 0\n-\t  && CALLER_SAVE_PROFITABLE (allocno[num].n_refs,\n-\t\t\t\t     allocno[num].calls_crossed))\n+\t  && CALLER_SAVE_PROFITABLE (optimize_size ? allocno[num].n_refs : allocno[num].freq,\n+\t\t\t\t     optimize_size ? allocno[num].calls_crossed\n+\t\t\t\t     : allocno[num].freq_calls_crossed))\n \t{\n \t  HARD_REG_SET new_losers;\n \t  if (! losers)"}, {"sha": "9569a36e707170f2a15b71f5e01dc64cb17c44e5", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -126,6 +126,10 @@ struct qty\n \n   int n_calls_crossed;\n \n+  /* Number of times a reg tied to given qty lives across a CALL_INSN.  */\n+\n+  int freq_calls_crossed;\n+\n   /* Number of times a reg tied to given qty lives across a CALL_INSN\n      that might throw.  */\n \n@@ -332,6 +336,7 @@ alloc_qty (int regno, enum machine_mode mode, int size, int birth)\n   qty[qtyno].mode = mode;\n   qty[qtyno].birth = birth;\n   qty[qtyno].n_calls_crossed = REG_N_CALLS_CROSSED (regno);\n+  qty[qtyno].freq_calls_crossed = REG_FREQ_CALLS_CROSSED (regno);\n   qty[qtyno].n_throwing_calls_crossed = REG_N_THROWING_CALLS_CROSSED (regno);\n   qty[qtyno].min_class = reg_preferred_class (regno);\n   qty[qtyno].alternate_class = reg_alternate_class (regno);\n@@ -1193,6 +1198,7 @@ update_equiv_regs (void)\n \n \t\t      REG_BASIC_BLOCK (regno) = bb->index;\n \t\t      REG_N_CALLS_CROSSED (regno) = 0;\n+\t\t      REG_FREQ_CALLS_CROSSED (regno) = 0;\n \t\t      REG_N_THROWING_CALLS_CROSSED (regno) = 0;\n \t\t      REG_LIVE_LENGTH (regno) = 2;\n \n@@ -2026,6 +2032,7 @@ combine_regs (rtx usedreg, rtx setreg, int may_save_copy, int insn_number,\n \n       /* Update info about quantity SQTY.  */\n       qty[sqty].n_calls_crossed += REG_N_CALLS_CROSSED (sreg);\n+      qty[sqty].freq_calls_crossed += REG_FREQ_CALLS_CROSSED (sreg);\n       qty[sqty].n_throwing_calls_crossed\n \t+= REG_N_THROWING_CALLS_CROSSED (sreg);\n       qty[sqty].n_refs += REG_N_REFS (sreg);\n@@ -2338,8 +2345,9 @@ find_free_reg (enum reg_class class, enum machine_mode mode, int qtyno,\n       && ! just_try_suggested\n       && qty[qtyno].n_calls_crossed != 0\n       && qty[qtyno].n_throwing_calls_crossed == 0\n-      && CALLER_SAVE_PROFITABLE (qty[qtyno].n_refs,\n-\t\t\t\t qty[qtyno].n_calls_crossed))\n+      && CALLER_SAVE_PROFITABLE (optimize_size ? qty[qtyno].n_refs : qty[qtyno].freq,\n+\t\t\t\t optimize_size ? qty[qtyno].n_calls_crossed\n+\t\t\t\t : qty[qtyno].freq_calls_crossed))\n     {\n       i = find_free_reg (class, mode, qtyno, 1, 0, born_index, dead_index);\n       if (i >= 0)"}, {"sha": "4081df347cadb42cdbbfedd2b8f58642444800cb", "filename": "gcc/ra.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fra.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fra.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.h?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -32,6 +32,9 @@ struct allocno\n   /* Number of calls crossed by each allocno.  */\n   int calls_crossed;\n \n+  /* Estimated frequency of crossing call by each allocno.  */\n+  int freq_calls_crossed;\n+\n   /* Number of calls that might throw crossed by each allocno.  */\n   int throwing_calls_crossed;\n "}, {"sha": "9a071876937a27c80df9b329fe9d6f58cde9ad04", "filename": "gcc/regmove.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -506,6 +506,8 @@ optimize_reg_copy_1 (rtx insn, rtx dest, rtx src)\n \t  int s_length = 0;\n \t  int d_n_calls = 0;\n \t  int s_n_calls = 0;\n+\t  int s_freq_calls = 0;\n+\t  int d_freq_calls = 0;\n \n \t  /* We can do the optimization.  Scan forward from INSN again,\n \t     replacing regs as we go.  Set FAILED if a replacement can't\n@@ -556,8 +558,12 @@ optimize_reg_copy_1 (rtx insn, rtx dest, rtx src)\n \t\t  /* Similarly, total calls for SREGNO, total calls beyond\n \t\t     the death note for DREGNO.  */\n \t\t  s_n_calls++;\n+\t\t  s_freq_calls += REG_FREQ_FROM_BB  (BLOCK_FOR_INSN (q));\n \t\t  if (dest_death)\n-\t\t    d_n_calls++;\n+\t\t    {\n+\t\t      d_n_calls++;\n+\t\t      d_freq_calls += REG_FREQ_FROM_BB  (BLOCK_FOR_INSN (q));\n+\t\t    }\n \t\t}\n \n \t      /* If DEST dies here, remove the death note and save it for\n@@ -590,6 +596,7 @@ optimize_reg_copy_1 (rtx insn, rtx dest, rtx src)\n \t\t    }\n \n \t\t  REG_N_CALLS_CROSSED (sregno) -= s_n_calls;\n+\t\t  REG_FREQ_CALLS_CROSSED (sregno) -= s_freq_calls;\n \t\t}\n \n \t      /* Move death note of SRC from P to INSN.  */\n@@ -619,6 +626,7 @@ optimize_reg_copy_1 (rtx insn, rtx dest, rtx src)\n \t\t  if (REG_LIVE_LENGTH (dregno) >= 0)\n \t\t    REG_LIVE_LENGTH (dregno) += d_length;\n \t\t  REG_N_CALLS_CROSSED (dregno) += d_n_calls;\n+\t\t  REG_FREQ_CALLS_CROSSED (dregno) += d_freq_calls;\n \t\t}\n \t    }\n \n@@ -684,8 +692,11 @@ optimize_reg_copy_2 (rtx insn, rtx dest, rtx src)\n \n \t\tif (CALL_P (q))\n \t\t  {\n+\t\t    int freq = REG_FREQ_FROM_BB  (BLOCK_FOR_INSN (q));\n \t\t    REG_N_CALLS_CROSSED (dregno)--;\n \t\t    REG_N_CALLS_CROSSED (sregno)++;\n+\t\t    REG_FREQ_CALLS_CROSSED (dregno) -= freq;\n+\t\t    REG_FREQ_CALLS_CROSSED (sregno) += freq;\n \t\t  }\n \t      }\n \n@@ -953,7 +964,7 @@ static int\n fixup_match_2 (rtx insn, rtx dst, rtx src, rtx offset)\n {\n   rtx p, dst_death = 0;\n-  int length, num_calls = 0;\n+  int length, num_calls = 0, freq_calls = 0;\n \n   /* If SRC dies in INSN, we'd have to move the death note.  This is\n      considered to be very unlikely, so we just skip the optimization\n@@ -997,6 +1008,7 @@ fixup_match_2 (rtx insn, rtx dst, rtx src, rtx offset)\n \t\t  remove_death (REGNO (dst), dst_death);\n \t\t  REG_LIVE_LENGTH (REGNO (dst)) += length;\n \t\t  REG_N_CALLS_CROSSED (REGNO (dst)) += num_calls;\n+\t\t  REG_FREQ_CALLS_CROSSED (REGNO (dst)) += freq_calls;\n \t\t}\n \n \t      if (dump_file)\n@@ -1049,7 +1061,10 @@ fixup_match_2 (rtx insn, rtx dst, rtx src, rtx offset)\n       if (CALL_P (p))\n \t{\n \t  if (! dst_death)\n-\t    num_calls++;\n+\t    {\n+\t      num_calls++;\n+\t      freq_calls += REG_FREQ_FROM_BB  (BLOCK_FOR_INSN (p));\n+\t    }\n \n \t  if (REG_N_CALLS_CROSSED (REGNO (src)) == 0)\n \t    break;\n@@ -1276,7 +1291,7 @@ regmove_optimize (rtx f, int nregs)\n \t    {\n \t      rtx set, p, src, dst;\n \t      rtx src_note, dst_note;\n-\t      int num_calls = 0;\n+\t      int num_calls = 0, freq_calls = 0;\n \t      enum reg_class src_class, dst_class;\n \t      int length;\n \n@@ -1465,6 +1480,7 @@ regmove_optimize (rtx f, int nregs)\n \t\t  if (CALL_P (p))\n \t\t    {\n \t\t      num_calls++;\n+\t\t      freq_calls += REG_FREQ_FROM_BB  (BLOCK_FOR_INSN (p));\n \n \t\t      if (REG_N_CALLS_CROSSED (REGNO (dst)) == 0)\n \t\t\tbreak;\n@@ -1497,6 +1513,8 @@ regmove_optimize (rtx f, int nregs)\n \n \t\t  REG_N_CALLS_CROSSED (dstno) += num_calls;\n \t\t  REG_N_CALLS_CROSSED (srcno) -= num_calls;\n+\t\t  REG_FREQ_CALLS_CROSSED (dstno) += freq_calls;\n+\t\t  REG_FREQ_CALLS_CROSSED (srcno) -= freq_calls;\n \n \t\t  REG_LIVE_LENGTH (dstno) += length;\n \t\t  if (REG_LIVE_LENGTH (srcno) >= 0)"}, {"sha": "f0679f753e9294056cc8c88d18ce231091f902b9", "filename": "gcc/regs.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -115,6 +115,7 @@ struct reg_info_t\n   int deaths;\t\t\t/* # of times (REG n) dies */\n   int live_length;\t\t/* # of instructions (REG n) is live */\n   int calls_crossed;\t\t/* # of calls (REG n) is live across */\n+  int freq_calls_crossed;\t/* # estimated frequency (REG n) crosses call */\n   int throw_calls_crossed;\t/* # of calls that may throw (REG n) is live across */\n   int basic_block;\t\t/* # of basic blocks (REG n) is used in */\n };\n@@ -172,6 +173,7 @@ extern size_t reg_info_p_size;\n /* Indexed by N, gives number of CALL_INSNS across which (REG n) is live.  */\n \n #define REG_N_CALLS_CROSSED(N)  (reg_info_p[N].calls_crossed)\n+#define REG_FREQ_CALLS_CROSSED(N)  (reg_info_p[N].freq_calls_crossed)\n \n /* Indexed by N, gives number of CALL_INSNS that may throw, across which\n    (REG n) is live.  */"}, {"sha": "26f96070472fbc09222d4e8f071f030e49bc9255", "filename": "gcc/regstat.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03c6d64f468ff2aaebcf2a87bb589938264bc38/gcc%2Fregstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregstat.c?ref=a03c6d64f468ff2aaebcf2a87bb589938264bc38", "patch": "@@ -180,6 +180,7 @@ regstat_bb_compute_ri (unsigned int bb_index,\n \t  EXECUTE_IF_SET_IN_BITMAP (live, 0, regno, bi)\n \t    {\n \t      REG_N_CALLS_CROSSED (regno)++;\n+\t      REG_FREQ_CALLS_CROSSED (regno) += REG_FREQ_FROM_BB (bb);\n \t      if (can_throw)\n \t\tREG_N_THROWING_CALLS_CROSSED (regno)++;\n \t      \n@@ -445,7 +446,10 @@ regstat_bb_compute_calls_crossed (unsigned int bb_index, bitmap live)\n \t{\n \t  bitmap_iterator bi;\n \t  EXECUTE_IF_SET_IN_BITMAP (live, 0, regno, bi)\n-\t    REG_N_CALLS_CROSSED (regno)++;\n+\t    {\n+\t      REG_N_CALLS_CROSSED (regno)++;\n+\t      REG_FREQ_CALLS_CROSSED (regno) += REG_FREQ_FROM_BB (bb);\n+\t    }\n \t}\n \t  \n       /* All of the defs except the return value are some sort of"}]}