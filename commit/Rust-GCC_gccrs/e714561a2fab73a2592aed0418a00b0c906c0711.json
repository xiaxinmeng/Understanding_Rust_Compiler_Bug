{"sha": "e714561a2fab73a2592aed0418a00b0c906c0711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxNDU2MWEyZmFiNzNhMjU5MmFlZDA0MThhMDBiMGM5MDZjMDcxMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-09T08:45:12Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-09T08:45:12Z"}, "message": "gensupport.c (init_rtx_reader_args_cb): Start counting code generating patterns from 1 to free up 0 for CODE_FOR_nothing.\n\n\t* gensupport.c (init_rtx_reader_args_cb): Start counting code\n\tgenerating patterns from 1 to free up 0 for CODE_FOR_nothing.\n\t* gencodes.c (main): Give CODE_FOR_nothing the value 0.  Add\n\tthe LAST_INSN_CODE marker at the end.\n\t* genoutput.c (nothing): New static struct data.\n\t(idata): Initialize to &nothing.\n\t(idata_end): Initialize to &nothing.next.\n\t(init_insn_for_nothing): New function to create dummy 'nothing' insn.\n\t(main): Use it.\n\t* genpeep.c (insn_code_number): Remove global variable.\n\t(gen_peephole): Take it as an argument instead.\n\t(main): Take insn_code_number from read_md_rtx.\n\t* optabs.h: Revert r161809:\n\t(optab_handlers): Change type of insn_code back to insn_code.\n\t(optab_handler, widening_optab_handler, set_optab_handler,\n\tset_widening_optab_handler, convert_optab_handler,\n\tset_convert_optab_handler, direct_optab_handler,\n\tset_direct_optab_handler): Remove int casts.\n\tRevert to treating the insn_code field as \"insn_code\".\n\nFrom-SVN: r189366", "tree": {"sha": "8171a7fe230372ff8186c6f2b999f0d7b358565c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8171a7fe230372ff8186c6f2b999f0d7b358565c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e714561a2fab73a2592aed0418a00b0c906c0711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e714561a2fab73a2592aed0418a00b0c906c0711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e714561a2fab73a2592aed0418a00b0c906c0711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e714561a2fab73a2592aed0418a00b0c906c0711/comments", "author": null, "committer": null, "parents": [{"sha": "701649fa8939e9a3b6328afc9fca2abe4b55c312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701649fa8939e9a3b6328afc9fca2abe4b55c312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701649fa8939e9a3b6328afc9fca2abe4b55c312"}], "stats": {"total": 134, "additions": 82, "deletions": 52}, "files": [{"sha": "96d4cf2d5d90a4cea1446419be66ba9a0642cc6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -1,3 +1,25 @@\n+2012-07-09  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gensupport.c (init_rtx_reader_args_cb): Start counting code\n+\tgenerating patterns from 1 to free up 0 for CODE_FOR_nothing.\n+\t* gencodes.c (main): Give CODE_FOR_nothing the value 0.  Add\n+\tthe LAST_INSN_CODE marker at the end.\n+\t* genoutput.c (nothing): New static struct data.\n+\t(idata): Initialize to &nothing.\n+\t(idata_end): Initialize to &nothing.next.\n+\t(init_insn_for_nothing): New function to create dummy 'nothing' insn.\n+\t(main): Use it.\n+\t* genpeep.c (insn_code_number): Remove global variable.\n+\t(gen_peephole): Take it as an argument instead.\n+\t(main): Take insn_code_number from read_md_rtx.\n+\t* optabs.h: Revert r161809:\n+\t(optab_handlers): Change type of insn_code back to insn_code.\n+\t(optab_handler, widening_optab_handler, set_optab_handler,\n+\tset_widening_optab_handler, convert_optab_handler,\n+\tset_convert_optab_handler, direct_optab_handler,\n+\tset_direct_optab_handler): Remove int casts.\n+\tRevert to treating the insn_code field as \"insn_code\".\n+\n 2012-07-08  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (*return_i): Move trap_exit attribute check to ..."}, {"sha": "e95eb98cb88b0c47dc0acd7c0b98f627c013c527", "filename": "gcc/gencodes.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -2,7 +2,7 @@\n    - some macros CODE_FOR_... giving the insn_code_number value\n    for each of the defined standard insn names.\n    Copyright (C) 1987, 1991, 1995, 1998, 1999, 2000, 2001, 2003,\n-   2004, 2007, 2010  Free Software Foundation, Inc.\n+   2004, 2007, 2010, 2012  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -68,7 +68,8 @@ main (int argc, char **argv)\n #ifndef GCC_INSN_CODES_H\\n\\\n #define GCC_INSN_CODES_H\\n\\\n \\n\\\n-enum insn_code {\");\n+enum insn_code {\\n\\\n+  CODE_FOR_nothing = 0,\\n\");\n \n   /* Read the machine description.  */\n \n@@ -85,7 +86,7 @@ enum insn_code {\");\n \tgen_insn (desc, insn_code_number);\n     }\n \n-  puts (\"  CODE_FOR_nothing\\n\\\n+  puts (\"  LAST_INSN_CODE\\n\\\n };\\n\\\n \\n\\\n #endif /* GCC_INSN_CODES_H */\");"}, {"sha": "4e4e1edc6acd565a12fff0efac700de54622bdef", "filename": "gcc/genoutput.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -1,6 +1,7 @@\n /* Generate code from to output assembler insns as recognized from rtl.\n    Copyright (C) 1987, 1988, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2002,\n-   2003, 2004, 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2007, 2008, 2009, 2010, 2012\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -171,9 +172,16 @@ struct data\n   struct operand_data operand[MAX_MAX_OPERANDS];\n };\n \n+/* A dummy insn, for CODE_FOR_nothing.  */\n+static struct data nothing;\n+\n /* This variable points to the first link in the insn chain.  */\n+static struct data *idata = &nothing;\n+\n+/* This variable points to the end of the insn chain.  This is where\n+   everything relevant from the machien description is appended to.  */\n+static struct data **idata_end = &nothing.next;\n \n-static struct data *idata, **idata_end = &idata;\n \f\n static void output_prologue (void);\n static void output_operand_data (void);\n@@ -987,6 +995,14 @@ gen_split (rtx split, int lineno)\n   place_operands (d);\n }\n \n+static void\n+init_insn_for_nothing (void)\n+{\n+  memset (&nothing, 0, sizeof (nothing));\n+  nothing.name = \"*placeholder_for_nothing\";\n+  nothing.filename = \"<internal>\";\n+}\n+\n extern int main (int, char **);\n \n int\n@@ -996,11 +1012,12 @@ main (int argc, char **argv)\n \n   progname = \"genoutput\";\n \n+  init_insn_for_nothing ();\n+\n   if (!init_rtx_reader_args (argc, argv))\n     return (FATAL_EXIT_CODE);\n \n   output_prologue ();\n-  next_code_number = 0;\n   next_index_number = 0;\n \n   /* Read the machine description.  */"}, {"sha": "dfbf037407a016ca6bbcb9dc50c51f674d3b2a57", "filename": "gcc/genpeep.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to perform peephole optimizations.\n    Copyright (C) 1987, 1989, 1992, 1997, 1998, 1999, 2000, 2003, 2004,\n-   2007, 2010  Free Software Foundation, Inc.\n+   2007, 2010, 2012  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -47,18 +47,13 @@ static int max_opno;\n \n static int n_operands;\n \n-/* Peephole optimizations get insn codes just like insn patterns.\n-   Count them so we know the code of the define_peephole we are handling.  */\n-\n-static int insn_code_number = 0;\n-\n-static void gen_peephole (rtx);\n+static void gen_peephole (rtx, int);\n static void match_rtx (rtx, struct link *, int);\n static void print_path (struct link *);\n static void print_code (RTX_CODE);\n \f\n static void\n-gen_peephole (rtx peep)\n+gen_peephole (rtx peep, int insn_code_number)\n {\n   int ninsns = XVECLEN (peep, 0);\n   int i;\n@@ -392,24 +387,15 @@ from the machine description file `md'.  */\\n\\n\");\n \n   while (1)\n     {\n-      int line_no, rtx_number = 0;\n+      int line_no;\n+      int insn_code_number;\n \n-      desc = read_md_rtx (&line_no, &rtx_number);\n+      desc = read_md_rtx (&line_no, &insn_code_number);\n       if (desc == NULL)\n \tbreak;\n \n-       if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n-\t{\n-\t  gen_peephole (desc);\n-\t  insn_code_number++;\n-\t}\n-      if (GET_CODE (desc) == DEFINE_INSN\n-\t  || GET_CODE (desc) == DEFINE_EXPAND\n-\t  || GET_CODE (desc) == DEFINE_SPLIT\n-\t  || GET_CODE (desc) == DEFINE_PEEPHOLE2)\n-\t{\n-\t  insn_code_number++;\n-\t}\n+      if (GET_CODE (desc) == DEFINE_PEEPHOLE)\n+\tgen_peephole (desc, insn_code_number);\n     }\n \n   printf (\"  return 0;\\n}\\n\\n\");"}, {"sha": "44443e2dce3d6200395fe78138125443c4c88670", "filename": "gcc/gensupport.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -1,6 +1,6 @@\n /* Support routines for the various generation passes.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010, Free Software Foundation, Inc.\n+   2010, 2012  Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -38,6 +38,10 @@ int insn_elision = 1;\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n+/* Counter for patterns that generate code: define_insn, define_expand,\n+   define_split, define_peephole, and define_peephole2.  See read_md_rtx().\n+   Any define_insn_and_splits are already in separate queues so that the\n+   insn and the splitter get a unique number also.  */\n static int sequence_num;\n \n static int predicable_default;\n@@ -1397,7 +1401,9 @@ init_rtx_reader_args_cb (int argc, char **argv,\n   condition_table = htab_create (500, hash_c_test, cmp_c_test, NULL);\n   init_predicate_table ();\n   obstack_init (rtl_obstack);\n-  sequence_num = 0;\n+\n+  /* Start at 1, to make 0 available for CODE_FOR_nothing.  */\n+  sequence_num = 1;\n \n   read_md_files (argc, argv, parse_opt, rtx_handle_directive);\n \n@@ -1419,7 +1425,11 @@ init_rtx_reader_args (int argc, char **argv)\n   return init_rtx_reader_args_cb (argc, argv, 0);\n }\n \f\n-/* The entry point for reading a single rtx from an md file.  */\n+/* The entry point for reading a single rtx from an md file.  Return\n+   the rtx, or NULL if the md file has been fully processed.\n+   Return the line where the rtx was found in LINENO.\n+   Return the number of code generating rtx'en read since the start\n+   of the md file in SEQNR.  */\n \n rtx\n read_md_rtx (int *lineno, int *seqnr)"}, {"sha": "d87aff81c9381e8467ce40fdf4346f1dc4593f2e", "filename": "gcc/optabs.h", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e714561a2fab73a2592aed0418a00b0c906c0711/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=e714561a2fab73a2592aed0418a00b0c906c0711", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for code generation pass of GNU compiler.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+   2010, 2012  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -29,17 +29,18 @@ along with GCC; see the file COPYING3.  If not see\n \n    For example, add_optab applies to addition.\n \n+   The insn_code slot is the enum insn_code that says how to\n+   generate an insn for this operation on a particular machine mode.\n+   It is CODE_FOR_nothing if there is no such insn on the target machine.\n+\n    The `lib_call' slot is the name of the library function that\n    can be used to perform the operation.\n \n    A few optabs, such as move_optab, are used by special code.  */\n \n struct optab_handlers\n {\n-  /* I - CODE_FOR_nothing, where I is either the insn code of the\n-     associated insn generator or CODE_FOR_nothing if there is no such\n-     insn on the target machine.  */\n-  int insn_code;\n+  enum insn_code insn_code;\n };\n \n struct widening_optab_handlers\n@@ -1011,8 +1012,7 @@ extern rtx expand_vec_perm (enum machine_mode, rtx, rtx, rtx, rtx);\n static inline enum insn_code\n optab_handler (optab op, enum machine_mode mode)\n {\n-  return (enum insn_code) (op->handlers[(int) mode].insn_code\n-\t\t\t   + (int) CODE_FOR_nothing);\n+  return op->handlers[(int) mode].insn_code;\n }\n \n /* Like optab_handler, but for widening_operations that have a TO_MODE and\n@@ -1026,8 +1026,7 @@ widening_optab_handler (optab op, enum machine_mode to_mode,\n     return optab_handler (op, to_mode);\n \n   if (op->widening)\n-    return (enum insn_code) (op->widening->handlers[(int) to_mode][(int) from_mode].insn_code\n-\t\t\t     + (int) CODE_FOR_nothing);\n+    return op->widening->handlers[(int) to_mode][(int) from_mode].insn_code;\n \n   return CODE_FOR_nothing;\n }\n@@ -1037,7 +1036,7 @@ widening_optab_handler (optab op, enum machine_mode to_mode,\n static inline void\n set_optab_handler (optab op, enum machine_mode mode, enum insn_code code)\n {\n-  op->handlers[(int) mode].insn_code = (int) code - (int) CODE_FOR_nothing;\n+  op->handlers[(int) mode].insn_code = code;\n }\n \n /* Like set_optab_handler, but for widening operations that have a TO_MODE\n@@ -1055,8 +1054,7 @@ set_widening_optab_handler (optab op, enum machine_mode to_mode,\n \top->widening = (struct widening_optab_handlers *)\n \t      xcalloc (1, sizeof (struct widening_optab_handlers));\n \n-      op->widening->handlers[(int) to_mode][(int) from_mode].insn_code\n-\t  = (int) code - (int) CODE_FOR_nothing;\n+      op->widening->handlers[(int) to_mode][(int) from_mode].insn_code = code;\n     }\n }\n \n@@ -1068,9 +1066,7 @@ static inline enum insn_code\n convert_optab_handler (convert_optab op, enum machine_mode to_mode,\n \t\t       enum machine_mode from_mode)\n {\n-  return ((enum insn_code)\n-\t  (op->handlers[(int) to_mode][(int) from_mode].insn_code\n-\t   + (int) CODE_FOR_nothing));\n+  return op->handlers[(int) to_mode][(int) from_mode].insn_code;\n }\n \n /* Record that insn CODE should be used to perform conversion OP\n@@ -1080,8 +1076,7 @@ static inline void\n set_convert_optab_handler (convert_optab op, enum machine_mode to_mode,\n \t\t\t   enum machine_mode from_mode, enum insn_code code)\n {\n-  op->handlers[(int) to_mode][(int) from_mode].insn_code\n-    = (int) code - (int) CODE_FOR_nothing;\n+  op->handlers[(int) to_mode][(int) from_mode].insn_code = code;\n }\n \n /* Return the insn used to implement mode MODE of OP, or CODE_FOR_nothing\n@@ -1090,8 +1085,7 @@ set_convert_optab_handler (convert_optab op, enum machine_mode to_mode,\n static inline enum insn_code\n direct_optab_handler (direct_optab op, enum machine_mode mode)\n {\n-  return (enum insn_code) (op->handlers[(int) mode].insn_code\n-\t\t\t   + (int) CODE_FOR_nothing);\n+  return op->handlers[(int) mode].insn_code;\n }\n \n /* Record that insn CODE should be used to implement mode MODE of OP.  */\n@@ -1100,7 +1094,7 @@ static inline void\n set_direct_optab_handler (direct_optab op, enum machine_mode mode,\n \t\t\t  enum insn_code code)\n {\n-  op->handlers[(int) mode].insn_code = (int) code - (int) CODE_FOR_nothing;\n+  op->handlers[(int) mode].insn_code = code;\n }\n \n /* Return true if UNOPTAB is for a trapping-on-overflow operation.  */"}]}