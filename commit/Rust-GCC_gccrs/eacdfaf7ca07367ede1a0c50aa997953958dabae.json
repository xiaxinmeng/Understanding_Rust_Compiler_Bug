{"sha": "eacdfaf7ca07367ede1a0c50aa997953958dabae", "node_id": "C_kwDOANBUbNoAKGVhY2RmYWY3Y2EwNzM2N2VkZTFhMGM1MGFhOTk3OTUzOTU4ZGFiYWU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-16T09:18:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-16T09:18:25Z"}, "message": "waccess: Fix up pass_waccess::check_alloc_size_call [PR102009]\n\nThis function punts if the builtins have no arguments, but as can be seen\non the testcase, even if it has some arguments but alloc_size attribute's\narguments point to arguments that aren't passed, we get a warning earlier\nfrom the FE but should punt rather than ICE on it.\nOther users of alloc_size attribute e.g. in\ntree-object-size.c (alloc_object_size) punt similarly and similarly\neven in the same TU maybe_warn_nonstring_arg correctly verifies calls have\nenough arguments.\n\n2021-11-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102009\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_alloc_size_call):\n\tPunt if any of alloc_size arguments is out of bounds vs. number of\n\tcall arguments.\n\n\t* gcc.dg/pr102009.c: New test.", "tree": {"sha": "ddb70ff6527184ae6dcc08258433b1f05d7cd08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddb70ff6527184ae6dcc08258433b1f05d7cd08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eacdfaf7ca07367ede1a0c50aa997953958dabae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eacdfaf7ca07367ede1a0c50aa997953958dabae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eacdfaf7ca07367ede1a0c50aa997953958dabae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eacdfaf7ca07367ede1a0c50aa997953958dabae/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473b5e87346edf9885abc28b7de68e3cd7059746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473b5e87346edf9885abc28b7de68e3cd7059746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473b5e87346edf9885abc28b7de68e3cd7059746"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "22c791d833a0b9b5415bb3ea21ff7e6a21e06625", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eacdfaf7ca07367ede1a0c50aa997953958dabae/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eacdfaf7ca07367ede1a0c50aa997953958dabae/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=eacdfaf7ca07367ede1a0c50aa997953958dabae", "patch": "@@ -2335,10 +2335,6 @@ pass_waccess::check_alloca (gcall *stmt)\n void\n pass_waccess::check_alloc_size_call (gcall *stmt)\n {\n-  if (gimple_call_num_args (stmt) < 1)\n-    /* Avoid invalid calls to functions without a prototype.  */\n-    return;\n-\n   tree fndecl = gimple_call_fndecl (stmt);\n   if (fndecl && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n     {\n@@ -2367,13 +2363,19 @@ pass_waccess::check_alloc_size_call (gcall *stmt)\n      the actual argument(s) at those indices in ALLOC_ARGS.  */\n   int idx[2] = { -1, -1 };\n   tree alloc_args[] = { NULL_TREE, NULL_TREE };\n+  unsigned nargs = gimple_call_num_args (stmt);\n \n   tree args = TREE_VALUE (alloc_size);\n   idx[0] = TREE_INT_CST_LOW (TREE_VALUE (args)) - 1;\n+  /* Avoid invalid calls to functions without a prototype.  */\n+  if ((unsigned) idx[0] >= nargs)\n+    return;\n   alloc_args[0] = call_arg (stmt, idx[0]);\n   if (TREE_CHAIN (args))\n     {\n       idx[1] = TREE_INT_CST_LOW (TREE_VALUE (TREE_CHAIN (args))) - 1;\n+      if ((unsigned) idx[1] >= nargs)\n+\treturn;\n       alloc_args[1] = call_arg (stmt, idx[1]);\n     }\n "}, {"sha": "5b3a39bd0db9705efc27f705a4a8ddd5abd5fc7b", "filename": "gcc/testsuite/gcc.dg/pr102009.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eacdfaf7ca07367ede1a0c50aa997953958dabae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102009.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eacdfaf7ca07367ede1a0c50aa997953958dabae/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102009.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102009.c?ref=eacdfaf7ca07367ede1a0c50aa997953958dabae", "patch": "@@ -0,0 +1,10 @@\n+/* PR tree-optimization/102009 */\n+/* { dg-do compile } */\n+\n+void *realloc ();\t/* { dg-message \"declared here\" } */\n+\n+void *\n+foo (void *p)\n+{\n+  return realloc (p);\t/* { dg-warning \"too few arguments to built-in function 'realloc' expecting \" } */\n+}"}]}