{"sha": "8209db250f305cc79fd751c3ed056fb9ff551a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwOWRiMjUwZjMwNWNjNzlmZDc1MWMzZWQwNTZmYjlmZjU1MWE4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-01T08:56:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-01T08:56:12Z"}, "message": "[C] Improve diagnostics for vector types\n\nGiven the following invalid arm_neon.h-based code:\n\n  float x;\n  int8x8_t y = x;\n\nthe error message we emit is pretty good:\n\n  incompatible types when initializing type 'int8x8_t' using type 'float'\n\nBut convert the types to pointers:\n\n  int8x8_t *ptr = &x;\n\nand the message becomes:\n\n  initialization of '__vector(8) signed char *' from incompatible pointer type 'float *'\n\nAlthough it's reasonably obvious what '__vector(8) signed char *' means,\nit isn't valid C or C++ syntax and is quite far from what the user wrote,\nso using 'int8x8_t *' would be better.\n\nThis patch therefore prints the type name of vectors that have one.\nIt's still OK to print the __vector syntax as an \"aka\", although I have\na follow-on patch to tweak this slightly for types defined in system\nheader files.  The follow-on patch also addresses the ??? in\ngcc.target/aarch64/diag_aka_1.c.\n\nThe C++ test already passed, but it seemed worth including for\nconsistency.\n\n2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/c-family/\n\t* c-pretty-print.c (pp_c_specifier_qualifier_list): If a vector type\n\thas a type name, use it in preference to the __vector syntax.\n\ngcc/testsuite/\n\t* gcc.dg/diag-aka-3.c: New test.\n\t* gcc.target/aarch64/diag_aka_1.c: New test.\n\t* g++.dg/diagnostic/aka4.C: New test.\n\nFrom-SVN: r276394", "tree": {"sha": "4eb7f756c70754535630e314469467e44a31413f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eb7f756c70754535630e314469467e44a31413f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8209db250f305cc79fd751c3ed056fb9ff551a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8209db250f305cc79fd751c3ed056fb9ff551a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8209db250f305cc79fd751c3ed056fb9ff551a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8209db250f305cc79fd751c3ed056fb9ff551a83/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17d184e5c4896264c27c27d125a6c1f8462d9d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d184e5c4896264c27c27d125a6c1f8462d9d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d184e5c4896264c27c27d125a6c1f8462d9d37"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "eaea04b9635280fd3858a45db439c6c299753caf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -1,3 +1,8 @@\n+2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-pretty-print.c (pp_c_specifier_qualifier_list): If a vector type\n+\thas a type name, use it in preference to the __vector syntax.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-pretty-print.c (pp_c_parameter_type_list): Avoid printing"}, {"sha": "1b06cc20f680c65c1034090e9ac3041f7a902cc5", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -470,6 +470,16 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n \t\t\t     ? \"_Complex\" : \"__complex__\"));\n       else if (code == VECTOR_TYPE)\n \t{\n+\t  /* The syntax we print for vector types isn't real C or C++ syntax,\n+\t     so it's better to print the type name if we have one.  */\n+\t  tree name = TYPE_NAME (t);\n+\t  if (!(pp->flags & pp_c_flag_gnu_v3)\n+\t      && name\n+\t      && TREE_CODE (name) == TYPE_DECL)\n+\t    {\n+\t      pp->id_expression (name);\n+\t      break;\n+\t    }\n \t  pp_c_ws_string (pp, \"__vector\");\n \t  pp_c_left_paren (pp);\n \t  pp_wide_integer (pp, TYPE_VECTOR_SUBPARTS (t));"}, {"sha": "af7f6a25a029715cc4f2aabb1b573b312952df9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -1,3 +1,9 @@\n+2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/diag-aka-3.c: New test.\n+\t* gcc.target/aarch64/diag_aka_1.c: New test.\n+\t* g++.dg/diagnostic/aka4.C: New test.\n+\n 2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/torture/simd-abi-10.c: New test."}, {"sha": "da8c579646f95c9e0c70942c4e21e89df23f07b1", "filename": "gcc/testsuite/g++.dg/diagnostic/aka4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka4.C?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -0,0 +1,9 @@\n+typedef unsigned int myvec __attribute__((vector_size (16)));\n+\n+void f (float x)\n+{\n+  myvec y = x; // { dg-error {cannot convert 'float' to 'myvec' {aka '__vector\\([48]\\) unsigned int'} in initialization} }\n+  myvec *ptr = &x; // { dg-error {cannot convert 'float\\*' to 'myvec\\*' {aka '__vector\\([48]\\) unsigned int\\*'} in initialization} }\n+  const myvec *const_ptr = &x; // { dg-error {cannot convert 'float\\*' to 'const myvec\\*' {aka 'const __vector\\([48]\\) unsigned int\\*'} in initialization} }\n+  volatile myvec *volatile_ptr = &x; // { dg-error {cannot convert 'float\\*' to 'volatile myvec\\*' {aka 'volatile __vector\\([48]\\) unsigned int\\*'} in initialization} }\n+}"}, {"sha": "a3778ed7d7d95cb153e4079cc8739939a330af0b", "filename": "gcc/testsuite/gcc.dg/diag-aka-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-3.c?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -0,0 +1,9 @@\n+typedef unsigned int myvec __attribute__((vector_size (16)));\n+\n+void f (float x)\n+{\n+  myvec y = x; /* { dg-error {incompatible types when initializing type 'myvec' {aka '__vector\\([48]\\) unsigned int'} using type 'float'} } */\n+  myvec *ptr = &x; /* { dg-error {initialization of 'myvec \\*' {aka '__vector\\([48]\\) unsigned int \\*'} from incompatible pointer type 'float \\*'} } */\n+  const myvec *const_ptr = &x; /* { dg-error {initialization of 'const myvec \\*' {aka 'const __vector\\([48]\\) unsigned int \\*'} from incompatible pointer type 'float \\*'} } */\n+  volatile myvec *volatile_ptr = &x; /* { dg-error {initialization of 'volatile myvec \\*' {aka 'volatile __vector\\([48]\\) unsigned int \\*'} from incompatible pointer type 'float \\*'} } */\n+}"}, {"sha": "59e24f48bd582662d9a32c86853f209be66c185e", "filename": "gcc/testsuite/gcc.target/aarch64/diag_aka_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdiag_aka_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8209db250f305cc79fd751c3ed056fb9ff551a83/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdiag_aka_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdiag_aka_1.c?ref=8209db250f305cc79fd751c3ed056fb9ff551a83", "patch": "@@ -0,0 +1,14 @@\n+#include <arm_neon.h>\n+\n+typedef int16x4_t myvec;\n+\n+void f (float x)\n+{\n+  __Int8x8_t y1 = x; /* { dg-error {incompatible types when initializing type '__Int8x8_t' using type 'float'} } */\n+  __Int8x8_t *ptr1 = &x; /* { dg-error {initialization of '__Int8x8_t \\*' from incompatible pointer type 'float \\*'} } */\n+  int8x8_t y2 = x; /* { dg-error {incompatible types when initializing type 'int8x8_t' using type 'float'} } */\n+  int8x8_t *ptr2 = &x; /* { dg-error {initialization of 'int8x8_t \\*' from incompatible pointer type 'float \\*'} } */\n+  /* ??? For these it would be better to print an aka for 'int16x4_t'.  */\n+  myvec y3 = x; /* { dg-error {incompatible types when initializing type 'myvec' using type 'float'} } */\n+  myvec *ptr3 = &x; /* { dg-error {initialization of 'myvec \\*' from incompatible pointer type 'float \\*'} } */\n+}"}]}