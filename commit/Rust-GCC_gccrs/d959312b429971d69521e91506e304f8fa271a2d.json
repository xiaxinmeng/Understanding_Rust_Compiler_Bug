{"sha": "d959312b429971d69521e91506e304f8fa271a2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1OTMxMmI0Mjk5NzFkNjk1MjFlOTE1MDZlMzA0ZjhmYTI3MWEyZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-01-28T03:38:02Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:30Z"}, "message": "AVX512FP16: Enable _Float16 autovectorization\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c\n\t(ix86_avx256_split_vector_move_misalign): Handle V16HF mode.\n\t* config/i386/i386.c\n\t(ix86_preferred_simd_mode): Handle HF mode.\n\t* config/i386/sse.md (V_256H): New mode iterator.\n\t(avx_vextractf128<mode>): Use it.\n\t(VEC_INIT_MODE): Align vector HFmode condition to vector\n\tHImodes since there're no real HF instruction used.\n\t(VEC_INIT_HALF_MODE): Ditto.\n\t(VIHF): Ditto.\n\t(VIHF_AVX512BW): Ditto.\n\t(*vec_extracthf): Ditto.\n\t(VEC_EXTRACT_MODE): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/vect-float16-1.c: New test.\n\t* gcc.target/i386/vect-float16-10.c: Ditto.\n\t* gcc.target/i386/vect-float16-11.c: Ditto.\n\t* gcc.target/i386/vect-float16-12.c: Ditto.\n\t* gcc.target/i386/vect-float16-2.c: Ditto.\n\t* gcc.target/i386/vect-float16-3.c: Ditto.\n\t* gcc.target/i386/vect-float16-4.c: Ditto.\n\t* gcc.target/i386/vect-float16-5.c: Ditto.\n\t* gcc.target/i386/vect-float16-6.c: Ditto.\n\t* gcc.target/i386/vect-float16-7.c: Ditto.\n\t* gcc.target/i386/vect-float16-8.c: Ditto.\n\t* gcc.target/i386/vect-float16-9.c: Ditto.", "tree": {"sha": "23fdb0d0f66f19d988cebfbdfc29ed74c631dd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23fdb0d0f66f19d988cebfbdfc29ed74c631dd40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d959312b429971d69521e91506e304f8fa271a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d959312b429971d69521e91506e304f8fa271a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d959312b429971d69521e91506e304f8fa271a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d959312b429971d69521e91506e304f8fa271a2d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0458154caafc5438cecf1db8cf96076e384244ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0458154caafc5438cecf1db8cf96076e384244ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0458154caafc5438cecf1db8cf96076e384244ab"}], "stats": {"total": 210, "additions": 198, "deletions": 12}, "files": [{"sha": "cac8354a067243065cfde165546558fd7bec87bd", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -678,6 +678,10 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n       extract = gen_avx_vextractf128v32qi;\n       mode = V16QImode;\n       break;\n+    case E_V16HFmode:\n+      extract = gen_avx_vextractf128v16hf;\n+      mode = V8HFmode;\n+      break;\n     case E_V8SFmode:\n       extract = gen_avx_vextractf128v8sf;\n       mode = V4SFmode;"}, {"sha": "7b173bc0bebd714a688385850cd6a4045c50fd67", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -22641,6 +22641,20 @@ ix86_preferred_simd_mode (scalar_mode mode)\n       else\n \treturn V2DImode;\n \n+    case E_HFmode:\n+      if (TARGET_AVX512FP16)\n+\t{\n+\t  if (TARGET_AVX512VL)\n+\t    {\n+\t      if (TARGET_PREFER_AVX128)\n+\t\treturn V8HFmode;\n+\t      else if (TARGET_PREFER_AVX256)\n+\t\treturn V16HFmode;\n+\t    }\n+\t  return V32HFmode;\n+\t}\n+      return word_mode;\n+\n     case E_SFmode:\n       if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n \treturn V16SFmode;"}, {"sha": "26024609e2be9cd43ae8b0845b67413d9e0ce031", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -279,6 +279,10 @@\n (define_mode_iterator V_256\n   [V32QI V16HI V8SI V4DI V8SF V4DF])\n \n+;; All 256bit vector modes including HF vector mode\n+(define_mode_iterator V_256H\n+  [V32QI V16HI V8SI V4DI V8SF V4DF V16HF])\n+\n ;; All 128bit and 256bit vector modes\n (define_mode_iterator V_128_256\n   [V32QI V16QI V16HI V8HI V8SI V4SI V4DI V2DI V8SF V4SF V4DF V2DF])\n@@ -406,8 +410,7 @@\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX\") V8HI\n    (V8SI \"TARGET_AVX\") V4SI\n    (V4DI \"TARGET_AVX\") V2DI\n-   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")])\n+   (V32HF \"TARGET_AVX512BW\") (V16HF \"TARGET_AVX\") V8HF])\n \n (define_mode_iterator VI_AVX2\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX2\") V16QI\n@@ -752,7 +755,7 @@\n   [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")])\n (define_mode_iterator VIHF_AVX512BW\n   [V16SI V8DI (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")\n-  (V32HF \"TARGET_AVX512FP16\")])\n+  (V32HF \"TARGET_AVX512BW\")])\n \n ;; Int-float size matches\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n@@ -9381,7 +9384,7 @@\n \n (define_expand \"avx_vextractf128<mode>\"\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n-   (match_operand:V_256 1 \"register_operand\")\n+   (match_operand:V_256H 1 \"register_operand\")\n    (match_operand:SI 2 \"const_0_to_1_operand\")]\n   \"TARGET_AVX\"\n {\n@@ -9868,7 +9871,7 @@\n \t  (match_operand:V8HF 1 \"register_operand\" \"v,v\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_7_operand\")])))]\n-  \"TARGET_AVX512FP16\"\n+  \"TARGET_SSE2\"\n   \"@\n    vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\n    vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -9882,8 +9885,7 @@\n    (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n-   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")\n+   (V32HF \"TARGET_AVX512BW\") (V16HF \"TARGET_AVX\") V8HF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") V2DF\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -15615,7 +15617,7 @@\n \n ;; Modes handled by pinsr patterns.\n (define_mode_iterator PINSR_MODE\n-  [(V16QI \"TARGET_SSE4_1\") V8HI (V8HF \"TARGET_AVX512FP16\")\n+  [(V16QI \"TARGET_SSE4_1\") V8HI V8HF\n    (V4SI \"TARGET_SSE4_1\")\n    (V2DI \"TARGET_SSE4_1 && TARGET_64BIT\")])\n \n@@ -23723,8 +23725,7 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI\n-   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")\n+   (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\") (V2DF \"TARGET_SSE2\")\n    (V4TI \"TARGET_AVX512F\") (V2TI \"TARGET_AVX\")])\n@@ -23736,8 +23737,7 @@\n    (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\")\n-   (V32HF \"TARGET_AVX512FP16\") (V16HF \"TARGET_AVX512FP16\")\n-   (V8HF \"TARGET_AVX512FP16\")\n+   (V32HF \"TARGET_AVX512F\") (V16HF \"TARGET_AVX\") V8HF\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\") (V4DF \"TARGET_AVX\")\n    (V4TI \"TARGET_AVX512F\")])"}, {"sha": "0f82cf94932395040988ddbf97ee914e4b5bac4d", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-1.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mno-avx512vl\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] + c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddph\" 8 } } */"}, {"sha": "217645692ad4ddb002da079217ff6f8e7247e0f7", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-10.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mno-avx512vl\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] / c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vdivph\" 8 } } */"}, {"sha": "e0409ce9d3faceb7d1b35f081095b240046a70f0", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-11.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-11.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=128\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 128; i++)\n+    a[i] = b[i] / c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vdivph\" 16 } } */"}, {"sha": "d92a25dc2555b3c34680f2188820ae5751209f9c", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-12.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-12.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=256\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] / c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vdivph\" 16 } } */"}, {"sha": "974fca4ce099b5e4f15e8c85928c78dfda8f27e9", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-2.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=128\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 128; i++)\n+    a[i] = b[i] + c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddph\" 16 } } */"}, {"sha": "9bca9142df7c14ef2a4905fe340a7ba898f439ac", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-3.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=256\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] + c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddph\" 16 } } */"}, {"sha": "e6f26f0aa40ad075a1184bc566b2f2ed5839162b", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-4.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mno-avx512vl\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] - c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubph\" 8 } } */"}, {"sha": "38f287b1dc06f82abcf496d7dbe9642c90dc31a7", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-5.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=128\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 128; i++)\n+    a[i] = b[i] - c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubph\" 16 } } */"}, {"sha": "bc9f78700610a7d4386660dd399f461dd789e01e", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-6.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=256\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] - c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsubph\" 16 } } */"}, {"sha": "b4849cf77c7eb32241cafce64c1c9cef8f1d4c19", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-7.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mno-avx512vl\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] * c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmulph\" 8 } } */"}, {"sha": "71631b17cc3013690657bdd7f2f401ef46e3e5e6", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-8.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=128\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 128; i++)\n+    a[i] = b[i] * c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmulph\" 16 } } */"}, {"sha": "1be5c7f022f19b8f72038ca00e722991db9e09cb", "filename": "gcc/testsuite/gcc.target/i386/vect-float16-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d959312b429971d69521e91506e304f8fa271a2d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-float16-9.c?ref=d959312b429971d69521e91506e304f8fa271a2d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -mprefer-vector-width=256\" } */\n+\n+/* Check that we vectorize to a full 128-bit vector for _Float16 types.  */\n+\n+void\n+foo (_Float16 *__restrict__ a, _Float16 *__restrict__ b,\n+     _Float16 *__restrict__ c)\n+{\n+  for (int i = 0; i < 256; i++)\n+    a[i] = b[i] * c[i];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmulph\" 16 } } */"}]}