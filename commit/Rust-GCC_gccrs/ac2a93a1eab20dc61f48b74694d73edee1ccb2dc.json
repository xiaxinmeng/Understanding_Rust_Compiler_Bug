{"sha": "ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYTkzYTFlYWIyMGRjNjFmNDhiNzQ2OTRkNzNlZGVlMWNjYjJkYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-01-28T02:43:36Z"}, "committer": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1996-01-28T02:43:36Z"}, "message": "rs6000_sync_trampoline cmpdi and rs6000_initialize_trampoline pmode\n\nFrom-SVN: r11118", "tree": {"sha": "46d6b0a3adb6da3150f123d9bcfe9dc2ced1d001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d6b0a3adb6da3150f123d9bcfe9dc2ced1d001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc/comments", "author": null, "committer": null, "parents": [{"sha": "39733624099ba6b2fb1b034bb87fb6b95f747a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39733624099ba6b2fb1b034bb87fb6b95f747a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39733624099ba6b2fb1b034bb87fb6b95f747a61"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "6963b5aaef37ffd4e599616c92cc9a0de91847fd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a93a1eab20dc61f48b74694d73edee1ccb2dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ac2a93a1eab20dc61f48b74694d73edee1ccb2dc", "patch": "@@ -3820,14 +3820,15 @@ rs6000_sync_trampoline (addr)\n   rtx (*cmp_fcn) PROTO ((rtx, rtx));\n   rtx label;\n \n-  if (TARGET_64BIT)\n+  if (TARGET_32BIT)\n     {\n-      abort ();\t\t\t/* no cmpdi function yet */\n+      sub_fcn = gen_subsi3;\n+      cmp_fcn = gen_cmpsi;\n     }\n   else\n     {\n-      sub_fcn = gen_subsi3;\n-      cmp_fcn = gen_cmpsi;\n+      sub_fcn = gen_subdi3;\n+      cmp_fcn = gen_cmpdi;\n     }\n \n   addr = force_reg (pmode, addr);\n@@ -3990,6 +3991,7 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n      rtx cxt;\n {\n   rtx reg, reg2, reg3;\n+  enum machine_mode pmode = Pmode;\n \n   switch (DEFAULT_ABI)\n     {\n@@ -3998,31 +4000,31 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n \n     /* Under AIX, just build the 3 word function descriptor */\n     case ABI_AIX:\n-      emit_move_insn (gen_rtx (MEM, Pmode,\n-\t\t\t       memory_address (Pmode, (addr))),\n-\t\t      gen_rtx (MEM, Pmode,\n-\t\t\t       memory_address (Pmode, (fnaddr))));\n-      emit_move_insn (gen_rtx (MEM, Pmode,\n-\t\t\t       memory_address (Pmode,\n+      emit_move_insn (gen_rtx (MEM, pmode,\n+\t\t\t       memory_address (pmode, (addr))),\n+\t\t      gen_rtx (MEM, pmode,\n+\t\t\t       memory_address (pmode, (fnaddr))));\n+      emit_move_insn (gen_rtx (MEM, pmode,\n+\t\t\t       memory_address (pmode,\n \t\t\t\t\t       plus_constant ((addr), 4))),\n-\t\t      gen_rtx (MEM, Pmode,\n-\t\t\t       memory_address (Pmode,\n+\t\t      gen_rtx (MEM, pmode,\n+\t\t\t       memory_address (pmode,\n \t\t\t\t\t       plus_constant ((fnaddr), 4))));\n-      emit_move_insn (gen_rtx (MEM, Pmode,\n-\t\t\t       memory_address (Pmode,\n+      emit_move_insn (gen_rtx (MEM, pmode,\n+\t\t\t       memory_address (pmode,\n \t\t\t\t\t       plus_constant ((addr), 8))),\n-\t\t      force_reg (Pmode, (cxt)));\n+\t\t      force_reg (pmode, (cxt)));\n       break;\n \n     /* Under V.4/eabi, update the two words after the bl to have the real\n        function address and the static chain.  */\n     case ABI_V4:\n     case ABI_AIX_NODESC:\n-      reg = gen_reg_rtx (Pmode);\n+      reg = gen_reg_rtx (pmode);\n \n       emit_move_insn (reg, fnaddr);\n-      emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (addr, 8)), reg);\n-      emit_move_insn (gen_rtx (MEM, Pmode,\n+      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 8)), reg);\n+      emit_move_insn (gen_rtx (MEM, pmode,\n \t\t\t       plus_constant (addr, (TARGET_64BIT ? 16 : 12))),\n \t\t      cxt);\n \n@@ -4033,18 +4035,18 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n        then fill in the fields with the function address and static chain after\n        the bl instruction.  */\n     case ABI_NT:\n-      reg  = gen_reg_rtx (Pmode);\n-      reg2 = gen_reg_rtx (Pmode);\n-      reg3 = gen_reg_rtx (Pmode);\n+      reg  = gen_reg_rtx (pmode);\n+      reg2 = gen_reg_rtx (pmode);\n+      reg3 = gen_reg_rtx (pmode);\n \n-      emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (addr, 4)),\n-\t\t      gen_rtx (REG, Pmode, 2));\n+      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 4)),\n+\t\t      gen_rtx (REG, pmode, 2));\n       emit_move_insn (reg, fnaddr);\n-      emit_move_insn (reg2, gen_rtx (MEM, Pmode, reg));\n+      emit_move_insn (reg2, gen_rtx (MEM, pmode, reg));\n       emit_move_insn (reg3, plus_constant (addr, 8));\n-      emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (addr, 16)), reg);\n-      emit_move_insn (gen_rtx (MEM, Pmode, addr), reg3);\n-      emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (addr, 20)), cxt);\n+      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 16)), reg);\n+      emit_move_insn (gen_rtx (MEM, pmode, addr), reg3);\n+      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 20)), cxt);\n       rs6000_sync_trampoline (addr);\n       break;\n     }"}]}