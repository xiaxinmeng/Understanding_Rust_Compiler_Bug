{"sha": "702edf1d71ab3a86e114d664f56c8929678d0d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyZWRmMWQ3MWFiM2E4NmUxMTRkNjY0ZjU2Yzg5Mjk2NzhkMGQ0Yw==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-04-04T23:16:21Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-04-04T23:16:21Z"}, "message": "fix bugs exposed by --enable-checking\n\nFrom-SVN: r26181", "tree": {"sha": "536bedee473f17d5f64b5cfff93ca36195d1ca4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536bedee473f17d5f64b5cfff93ca36195d1ca4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/702edf1d71ab3a86e114d664f56c8929678d0d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702edf1d71ab3a86e114d664f56c8929678d0d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702edf1d71ab3a86e114d664f56c8929678d0d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702edf1d71ab3a86e114d664f56c8929678d0d4c/comments", "author": null, "committer": null, "parents": [{"sha": "f114df2032fdc0c50ac41395460ee273a2860a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f114df2032fdc0c50ac41395460ee273a2860a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f114df2032fdc0c50ac41395460ee273a2860a6a"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "fc4d26279c548bc10de3a79fcdc19bef71b8415e", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=702edf1d71ab3a86e114d664f56c8929678d0d4c", "patch": "@@ -1,3 +1,13 @@\n+Mon Apr  5 02:11:23 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\tFix bugs exposed by configuring with --enable-checking:\n+\t* com.c (ffecom_do_entry_, ffecom_expr_, ffecom_arg_ptr_to_expr,\n+\tffecom_list_expr, ffecom_list_ptr_to_expr, finish_function,\n+\tpop_f_function_context, store_parm_decls, poplevel): Handle\n+\terror_mark_node properly.\n+\t* ste.c (ffeste_begin_iterdo_, ffeste_end_iterdo_): Ditto.\n+\t* version.c: Bump version.\n+\n Sat Apr  3 23:57:56 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.texi: Fix up docs for -fset-g77-defaults, and"}, {"sha": "dabf049be4d41df1cec9bcaad2b0e5346ec7d93e", "filename": "gcc/f/com.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=702edf1d71ab3a86e114d664f56c8929678d0d4c", "patch": "@@ -2599,7 +2599,8 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n \tif (ffebld_op (arg) != FFEBLD_opSYMTER)\n \t  continue;\n \ts = ffebld_symter (arg);\n-\tif (ffesymbol_hook (s).decl_tree == NULL_TREE)\n+\tif (ffesymbol_hook (s).decl_tree == NULL_TREE\n+\t    || ffesymbol_hook (s).decl_tree == error_mark_node)\n \t  actarg = null_pointer_node;\t/* We don't have this arg. */\n \telse\n \t  actarg = ffesymbol_hook (s).decl_tree;\n@@ -2622,7 +2623,8 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n \t  continue;\t\t/* Only looking for CHARACTER arguments. */\n \tif (ffesymbol_kind (s) != FFEINFO_kindENTITY)\n \t  continue;\t\t/* Only looking for variables and arrays. */\n-\tif (ffesymbol_hook (s).length_tree == NULL_TREE)\n+\tif (ffesymbol_hook (s).length_tree == NULL_TREE\n+\t    || ffesymbol_hook (s).length_tree == error_mark_node)\n \t  actarg = ffecom_f2c_ftnlen_zero_node;\t/* We don't have this arg. */\n \telse\n \t  actarg = ffesymbol_hook (s).length_tree;\n@@ -3282,6 +3284,9 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \targs = ffecom_list_ptr_to_expr (ffebld_right (expr));\n       ffecom_pop_calltemps ();\n \n+      if (args == error_mark_node)\n+\treturn error_mark_node;\n+\n       item = ffecom_call_ (item, kt,\n \t\t\t   ffesymbol_is_f2c (s)\n \t\t\t   && (bt == FFEINFO_basictypeCOMPLEX)\n@@ -10977,6 +10982,9 @@ ffecom_arg_ptr_to_expr (ffebld expr, tree *length)\n \ttree temp_length;\n \n \ttemp_exp = ffecom_arg_ptr_to_expr (ffebld_left (expr), &temp_length);\n+\tif (temp_exp == error_mark_node)\n+\t  return error_mark_node;\n+\n \treturn ffecom_1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (temp_exp)),\n \t\t\t temp_exp);\n       }\n@@ -12703,9 +12711,12 @@ ffecom_list_expr (ffebld expr)\n \n   while (expr != NULL)\n     {\n-      *plist\n-\t= build_tree_list (NULL_TREE, ffecom_arg_expr (ffebld_head (expr),\n-\t\t\t\t\t\t       &length));\n+      tree texpr = ffecom_arg_expr (ffebld_head (expr), &length);\n+\n+      if (texpr == error_mark_node)\n+\treturn error_mark_node;\n+\n+      *plist = build_tree_list (NULL_TREE, texpr);\n       plist = &TREE_CHAIN (*plist);\n       expr = ffebld_trail (expr);\n       if (length != NULL_TREE)\n@@ -12742,10 +12753,12 @@ ffecom_list_ptr_to_expr (ffebld expr)\n \n   while (expr != NULL)\n     {\n-      *plist\n-\t= build_tree_list (NULL_TREE,\n-\t\t\t   ffecom_arg_ptr_to_expr (ffebld_head (expr),\n-\t\t\t\t\t\t   &length));\n+      tree texpr = ffecom_arg_ptr_to_expr (ffebld_head (expr), &length);\n+\n+      if (texpr == error_mark_node)\n+\treturn error_mark_node;\n+\n+      *plist = build_tree_list (NULL_TREE, texpr);\n       plist = &TREE_CHAIN (*plist);\n       expr = ffebld_trail (expr);\n       if (length != NULL_TREE)\n@@ -14366,7 +14379,9 @@ finish_function (int nested)\n   if (!nested)\n     permanent_allocation (1);\n \n-  if (DECL_SAVED_INSNS (fndecl) == 0 && !nested && (TREE_CODE (fndecl) != ERROR_MARK))\n+  if (TREE_CODE (fndecl) != ERROR_MARK\n+      && !nested\n+      && DECL_SAVED_INSNS (fndecl) == 0)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */\n       /* But DECL_INITIAL must remain nonzero so we know this was an actual\n@@ -14544,7 +14559,8 @@ pop_f_function_context ()\n       IDENTIFIER_LABEL_VALUE (DECL_NAME (TREE_VALUE (link)))\n \t= TREE_VALUE (link);\n \n-  if (DECL_SAVED_INSNS (current_function_decl) == 0)\n+  if (current_function_decl != error_mark_node\n+      && DECL_SAVED_INSNS (current_function_decl) == 0)\n     {\n       /* Stop pointing to the local nodes about to be freed.  */\n       /* But DECL_INITIAL must remain nonzero so we know this was an actual\n@@ -14648,6 +14664,9 @@ store_parm_decls (int is_main_program UNUSED)\n {\n   register tree fndecl = current_function_decl;\n \n+  if (fndecl == error_mark_node)\n+    return;\n+\n   /* This is a chain of PARM_DECLs from old-style parm declarations.  */\n   DECL_ARGUMENTS (fndecl) = storedecls (nreverse (getdecls ()));\n \n@@ -15193,7 +15212,8 @@ poplevel (keep, reverse, functionbody)\n   }\n \n   /* Dispose of the block that we just made inside some higher level.  */\n-  if (functionbody)\n+  if (functionbody\n+      && current_function_decl != error_mark_node)\n     DECL_INITIAL (current_function_decl) = block;\n   else if (block)\n     {"}, {"sha": "e8c066ef361fe9e66768f1d1384d5eb16c9ff478", "filename": "gcc/f/ste.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=702edf1d71ab3a86e114d664f56c8929678d0d4c", "patch": "@@ -317,6 +317,17 @@ ffeste_begin_iterdo_ (ffestw block, tree *xtvar, tree *xtincr,\n   tvar = ffecom_expr_rw (var);\n   tincr = ffecom_expr (incr);\n \n+  if (TREE_CODE (tvar) == ERROR_MARK\n+      || TREE_CODE (tincr) == ERROR_MARK)\n+    {\n+      if (block)\n+\tffestw_set_do_tvar (block, error_mark_node);\n+      else\n+\t*xtvar = error_mark_node;\n+      pop_momentary ();\n+      return;\n+    }\n+\n   /* Check whether incr is known to be zero, complain and fix.  */\n \n   if (integer_zerop (tincr) || real_zerop (tincr))\n@@ -336,6 +347,18 @@ ffeste_begin_iterdo_ (ffestw block, tree *xtvar, tree *xtincr,\n   tstart = ffecom_expr (start);\n   tend = ffecom_expr (end);\n \n+  if (TREE_CODE (tstart) == ERROR_MARK\n+      || TREE_CODE (tend) == ERROR_MARK)\n+    {\n+      if (block)\n+\tffestw_set_do_tvar (block, error_mark_node);\n+      else\n+\t*xtvar = error_mark_node;\n+      pop_momentary ();\n+      pop_momentary ();\n+      return;\n+    }\n+\n   {\t\t\t\t/* For warnings only, nothing else\n \t\t\t\t   happens here.  */\n     tree try;\n@@ -492,6 +515,9 @@ ffeste_end_iterdo_ (tree tvar, tree tincr, tree itersvar)\n   tree expr;\n   tree niters = itersvar;\n \n+  if (tvar == error_mark_node)\n+    return;\n+\n   expand_loop_continue_here ();\n \n   if (ffe_is_onetrip ())"}, {"sha": "de648d527271f5a92b604c4cd76487b412a35682", "filename": "gcc/f/version.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702edf1d71ab3a86e114d664f56c8929678d0d4c/gcc%2Ff%2Fversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fversion.c?ref=702edf1d71ab3a86e114d664f56c8929678d0d4c", "patch": "@@ -1 +1 @@\n-const char *ffe_version_string = \"0.5.24-19990403\";\n+const char *ffe_version_string = \"0.5.24-19990405\";"}]}