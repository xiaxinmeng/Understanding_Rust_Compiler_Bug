{"sha": "f4daf7e44e61ed8987d419a692015de25405be70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRkYWY3ZTQ0ZTYxZWQ4OTg3ZDQxOWE2OTIwMTVkZTI1NDA1YmU3MA==", "commit": {"author": {"name": "Uttam Pawar", "email": "uttamp@us.ibm.com", "date": "2006-02-15T19:33:33Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2006-02-15T19:33:33Z"}, "message": "re PR rtl-optimization/26184 (memory leaks in swing modulo scheduling function)\n\n2006-02-15  Uttam Pawar  <uttamp@us.ibm.com>\n\n        PR rtl-optimization/26184\n        * modulo-sched.c (generate_reg_moves): Free bitmap vector\n        uses_of_defs.\n        * modulo-sched.c (sms_schedule): Free g_arr pointer.\n        * modulo-sched.c (sms_schedule_by_order): Free bitmap pointers\n        must_precede, must_follow and tobe_scheduled.\n\n        PR other/26147\n        * opts.c (common_handle_option): Free new_option pointer.\n        * df-core.c (df_analyze): Free postorder pointer.\n\nFrom-SVN: r111114", "tree": {"sha": "85a04c4c6472b196d5500b4a0eef2a9432fb0107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a04c4c6472b196d5500b4a0eef2a9432fb0107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4daf7e44e61ed8987d419a692015de25405be70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4daf7e44e61ed8987d419a692015de25405be70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4daf7e44e61ed8987d419a692015de25405be70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4daf7e44e61ed8987d419a692015de25405be70/comments", "author": null, "committer": null, "parents": [{"sha": "f7ca46d66f50f2520120a859b8a7c01eca6bcb23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ca46d66f50f2520120a859b8a7c01eca6bcb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ca46d66f50f2520120a859b8a7c01eca6bcb23"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "5d8c43cebbfeebeb7122bb0ba28f0311897ce088", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4daf7e44e61ed8987d419a692015de25405be70", "patch": "@@ -1,4 +1,17 @@\n-2006-02-15 Rafael \ufffdvila de Esp\ufffdndola <rafael.espindola@gmail.com>\n+2006-02-15  Uttam Pawar  <uttamp@us.ibm.com>\n+\n+\tPR rtl-optimization/26184\n+\t* modulo-sched.c (generate_reg_moves): Free bitmap vector\n+\tuses_of_defs.\n+\t* modulo-sched.c (sms_schedule): Free g_arr pointer.\n+\t* modulo-sched.c (sms_schedule_by_order): Free bitmap pointers\n+\tmust_precede, must_follow and tobe_scheduled.\n+\n+\tPR other/26147\n+\t* opts.c (common_handle_option): Free new_option pointer.\n+\t* df-core.c (df_analyze): Free postorder pointer.\n+\n+2006-02-15  Rafael \ufffdvila de Esp\ufffdndola <rafael.espindola@gmail.com>\n \n \t* Makefile.in: Fix the examples about the use of stamps\n \n@@ -3687,7 +3700,7 @@\n \t* basic-block.h: Remove the prototype for\n \tpartition_hot_cold_basic_blocks.\n \n-2006-01-16  Rafael \u00c3vila de Esp\ufffd\ufffd\ufffdndola <rafael.espindola@gmail.com>\n+2006-01-16  Rafael \ufffdvila de Esp\ufffd\ufffd\ufffdndola <rafael.espindola@gmail.com>\n \n \t* cppspec.c (lang_specific_spec_functions): Remove.\n \t* gcc.c (lookup_spec_function): Use static_spec_functions directly."}, {"sha": "e9da8b626fa794cfd41bd3bbfefdfec0a60ae481", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=f4daf7e44e61ed8987d419a692015de25405be70", "patch": "@@ -782,6 +782,7 @@ df_analyze (struct df *df)\n \n   BITMAP_FREE (df->blocks_to_scan);\n   df->blocks_to_scan = NULL;\n+  free (postorder);\n }\n \n "}, {"sha": "fdba7300da729e4b1e234997753595ae28b428bd", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=f4daf7e44e61ed8987d419a692015de25405be70", "patch": "@@ -531,6 +531,7 @@ generate_reg_moves (partial_schedule_ptr ps)\n \n \t  prev_reg = new_reg;\n \t}\n+      sbitmap_vector_free (uses_of_defs);\n     }\n   return reg_move_replaces;\n }\n@@ -1259,6 +1260,8 @@ sms_schedule (void)\n       free_ddg (g);\n     }\n \n+  free (g_arr);\n+\n   /* Release scheduler data, needed until now because of DFA.  */\n   sched_finish ();\n   loop_optimizer_finalize (loops);\n@@ -1607,6 +1610,9 @@ sms_schedule_by_order (ddg_ptr g, int mii, int maxii, int *nodes_order)\n     } /* While try_again_with_larger_ii.  */\n \n   sbitmap_free (sched_nodes);\n+  sbitmap_free (must_precede);\n+  sbitmap_free (must_follow);\n+  sbitmap_free (tobe_scheduled);\n \n   if (ii >= maxii)\n     {"}, {"sha": "a5dc609aa455c39b59369813f87263a056a99d01", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4daf7e44e61ed8987d419a692015de25405be70/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f4daf7e44e61ed8987d419a692015de25405be70", "patch": "@@ -777,7 +777,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \toption_index = find_opt (new_option, lang_mask);\n \tif (option_index == N_OPTS)\n \t  {\n-\t    error(\"-Werror-%s: No option -%s\", arg, new_option);\n+\t    error (\"-Werror-%s: No option -%s\", arg, new_option);\n \t  }\n \telse\n \t  {\n@@ -789,6 +789,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n \t\t&& cl_options[option_index].flag_var\n \t\t&& kind == DK_ERROR)\n \t      *(int *) cl_options[option_index].flag_var = 1;\n+\t    free (new_option);\n \t  }\n       }\n       break;"}]}