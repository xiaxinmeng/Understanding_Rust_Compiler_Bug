{"sha": "cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyZDQxMmMzZTNmYzI0NmMxZTUyODA5ZmYxM2Q1ODczODhmOGI1Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-23T09:49:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-23T09:49:29Z"}, "message": "tree-ssa-copy.c (may_propagate_copy): Remove redundant checks.\n\n2007-11-23  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-copy.c (may_propagate_copy): Remove redundant\n\tchecks.\n\t(merge_alias_info): Do verification only if checking is\n\tenabled.  Merge flow-sensitive alias information in simple\n\tcases.\n\t* tree-ssa-operands.c (get_addr_dereference_operands): Also\n\tcomplain about missing NMTs.\n\n\t* gcc.dg/tree-ssa/alias-17.c: New testcase.\n\nFrom-SVN: r130370", "tree": {"sha": "4af788d35b43ea02b6e76826f2bd3b4601bf538d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4af788d35b43ea02b6e76826f2bd3b4601bf538d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7415017a81ec88f60100ce76577514563b11710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7415017a81ec88f60100ce76577514563b11710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7415017a81ec88f60100ce76577514563b11710"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "d9aee04b5137a09b0ee8b73c956b47de5b032ad6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "patch": "@@ -1,3 +1,7 @@\n+2007-11-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/alias-17.c: New testcase.\n+\n 2007-11-22  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/14050"}, {"sha": "48e72ffee2f0a948f35165d7ccd4818a694c9c9d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-17.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-17.c?ref=cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-early-inlining -fdump-tree-ccp2\" } */\n+\n+int *p;\n+int inline bar(void) { return 0; }\n+int foo(int x)\n+{\n+  int i;\n+  int *q;\n+  if (bar())\n+    q = &i;\n+  else\n+    q = p;\n+  return *q + *p;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"NOTE: no flow-sensitive alias info for\" \"ccp2\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp2\" } } */"}, {"sha": "ae4f50c2febe70372f5234b3e730a2d78e4ae0e5", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "patch": "@@ -129,8 +129,6 @@ may_propagate_copy (tree dest, tree orig)\n       tree mt_orig = symbol_mem_tag (SSA_NAME_VAR (orig));\n       if (mt_dest && mt_orig && mt_dest != mt_orig)\n \treturn false;\n-      else if (!useless_type_conversion_p (type_d, type_o))\n-\treturn false;\n       else if (get_alias_set (TREE_TYPE (type_d)) != \n \t       get_alias_set (TREE_TYPE (type_o)))\n \treturn false;\n@@ -217,31 +215,13 @@ merge_alias_info (tree orig_name, tree new_name)\n       return;\n     }\n \n-  gcc_assert (POINTER_TYPE_P (TREE_TYPE (orig_name)));\n-  gcc_assert (POINTER_TYPE_P (TREE_TYPE (new_name)));\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (orig_name))\n+\t      && POINTER_TYPE_P (TREE_TYPE (new_name)));\n \n #if defined ENABLE_CHECKING\n   gcc_assert (useless_type_conversion_p (TREE_TYPE (orig_name),\n \t\t\t\t\tTREE_TYPE (new_name)));\n \n-  /* If the pointed-to alias sets are different, these two pointers\n-     would never have the same memory tag.  In this case, NEW should\n-     not have been propagated into ORIG.  */\n-  gcc_assert (get_alias_set (TREE_TYPE (TREE_TYPE (new_sym)))\n-\t      == get_alias_set (TREE_TYPE (TREE_TYPE (orig_sym))));\n-#endif\n-\n-  /* Synchronize the symbol tags.  If both pointers had a tag and they\n-     are different, then something has gone wrong.  Symbol tags can\n-     always be merged because they are flow insensitive, all the SSA\n-     names of the same base DECL share the same symbol tag.  */\n-  if (new_ann->symbol_mem_tag == NULL_TREE)\n-    new_ann->symbol_mem_tag = orig_ann->symbol_mem_tag;\n-  else if (orig_ann->symbol_mem_tag == NULL_TREE)\n-    orig_ann->symbol_mem_tag = new_ann->symbol_mem_tag;\n-  else\n-    gcc_assert (new_ann->symbol_mem_tag == orig_ann->symbol_mem_tag);\n-\n   /* Check that flow-sensitive information is compatible.  Notice that\n      we may not merge flow-sensitive information here.  This function\n      is called when propagating equivalences dictated by the IL, like\n@@ -257,7 +237,11 @@ merge_alias_info (tree orig_name, tree new_name)\n \n      Since we cannot distinguish one case from another in this\n      function, we can only make sure that if P_i and Q_j have\n-     flow-sensitive information, they should be compatible.  */\n+     flow-sensitive information, they should be compatible.\n+\n+     As callers of merge_alias_info are supposed to call may_propagate_copy\n+     first, the following check is redundant.  Thus, only do it if checking\n+     is enabled.  */\n   if (SSA_NAME_PTR_INFO (orig_name) && SSA_NAME_PTR_INFO (new_name))\n     {\n       struct ptr_info_def *orig_ptr_info = SSA_NAME_PTR_INFO (orig_name);\n@@ -278,7 +262,33 @@ merge_alias_info (tree orig_name, tree new_name)\n \tgcc_assert (bitmap_intersect_p (new_ptr_info->pt_vars,\n \t\t\t\t\torig_ptr_info->pt_vars));\n     }\n-}   \n+#endif\n+\n+  /* Synchronize the symbol tags.  If both pointers had a tag and they\n+     are different, then something has gone wrong.  Symbol tags can\n+     always be merged because they are flow insensitive, all the SSA\n+     names of the same base DECL share the same symbol tag.  */\n+  if (new_ann->symbol_mem_tag == NULL_TREE)\n+    new_ann->symbol_mem_tag = orig_ann->symbol_mem_tag;\n+  else if (orig_ann->symbol_mem_tag == NULL_TREE)\n+    orig_ann->symbol_mem_tag = new_ann->symbol_mem_tag;\n+  else\n+    gcc_assert (new_ann->symbol_mem_tag == orig_ann->symbol_mem_tag);\n+\n+  /* Copy flow-sensitive alias information in case that NEW_NAME\n+     didn't get a NMT but was set to pt_anything for optimization\n+     purposes.  In case ORIG_NAME has a NMT we can safely use its\n+     flow-sensitive alias information as a conservative estimate.  */\n+  if (SSA_NAME_PTR_INFO (orig_name)\n+      && SSA_NAME_PTR_INFO (orig_name)->name_mem_tag\n+      && (!SSA_NAME_PTR_INFO (new_name)\n+\t  || !SSA_NAME_PTR_INFO (new_name)->name_mem_tag))\n+    {\n+      struct ptr_info_def *orig_ptr_info = SSA_NAME_PTR_INFO (orig_name);\n+      struct ptr_info_def *new_ptr_info = get_ptr_info (new_name);\n+      memcpy (new_ptr_info, orig_ptr_info, sizeof (struct ptr_info_def));\n+    }\n+}\n \n \n /* Common code for propagate_value and replace_exp."}, {"sha": "96ed4ca5cb5ec6ec5e2e0e8323a2a836a6d1eed1", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2d412c3e3fc246c1e52809ff13d587388f8b5f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=cb2d412c3e3fc246c1e52809ff13d587388f8b5f", "patch": "@@ -1643,16 +1643,18 @@ get_addr_dereference_operands (tree stmt, tree *addr, int flags, tree full_ref,\n \t  /* If we are emitting debugging dumps, display a warning if\n \t     PTR is an SSA_NAME with no flow-sensitive alias\n \t     information.  That means that we may need to compute\n-\t     aliasing again.  */\n+\t     aliasing again or that a propagation pass forgot to\n+\t     update the alias information on the pointers.  */\n \t  if (dump_file\n \t      && TREE_CODE (ptr) == SSA_NAME\n-\t      && pi == NULL)\n+\t      && (pi == NULL\n+\t\t  || pi->name_mem_tag == NULL_TREE))\n \t    {\n \t      fprintf (dump_file,\n \t\t  \"NOTE: no flow-sensitive alias info for \");\n \t      print_generic_expr (dump_file, ptr, dump_flags);\n \t      fprintf (dump_file, \" in \");\n-\t      print_generic_stmt (dump_file, stmt, dump_flags);\n+\t      print_generic_stmt (dump_file, stmt, 0);\n \t    }\n \n \t  if (TREE_CODE (ptr) == SSA_NAME)"}]}