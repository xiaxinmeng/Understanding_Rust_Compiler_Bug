{"sha": "73271c4ce5d33fe51766ce9cc438cad764bf31c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyNzFjNGNlNWQzM2ZlNTE3NjZjZTljYzQzOGNhZDc2NGJmMzFjMQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-04T07:41:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-04T07:41:58Z"}, "message": "Merge #607\n\n607: Remove split-stack from backend r=tschwinge a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000110.html\r\n\r\n> The backend was derived from the go backend which enables split stack\r\n> support by default. This inserts a __morestack call at the start of\r\n> each function. This is not needed for the rust backend. Remove the\r\n> split stack support code from the rust backend and spec.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "1e8ea266706945f4a3ac816125eb48719ff6aea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8ea266706945f4a3ac816125eb48719ff6aea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73271c4ce5d33fe51766ce9cc438cad764bf31c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCkTGCRBK7hj4Ov3rIwAAUeMIAFcH+D5oGo2FnOv/dkz6j2NJ\nAIt+eIUG//BHorG8DgG6ebING8vL4wbTkGNIQpXTDWzpmGX8H2aq4o2UEIqyotRk\nxO5r4OLHVNVq7D5U3SxFVvoNBcDwgslKC+coiZoMysG0fvuHF4uCs+KkXH/AHVq5\nqEDTGY5aQts7Z9XRGlWQFWdfHPvlI0TqdV2NcxvYHhQClEo5bDD98MlJVLbP6Lv4\nLSzlTvYwg5RTyozA6zItSj4Y3Pdgb2FoZbFO8peTncTnsNsaLVzHFlaE5MIYSNdN\nGDX1mfP1reL+owudg/qj0r5nrWEWz48cAdjIEHXYaiclLW8aOn+QiUi6Gvc4mZY=\n=ajJO\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e8ea266706945f4a3ac816125eb48719ff6aea3\nparent c707190b29e1e5b2d20fa9d68dcd7f043659aed4\nparent 4292110a0aecd4ad3b48d16370c640679c3f2adf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628062918 +0000\ncommitter GitHub <noreply@github.com> 1628062918 +0000\n\nMerge #607\n\n607: Remove split-stack from backend r=tschwinge a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000110.html\r\n\r\n> The backend was derived from the go backend which enables split stack\r\n> support by default. This inserts a __morestack call at the start of\r\n> each function. This is not needed for the rust backend. Remove the\r\n> split stack support code from the rust backend and spec.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73271c4ce5d33fe51766ce9cc438cad764bf31c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73271c4ce5d33fe51766ce9cc438cad764bf31c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73271c4ce5d33fe51766ce9cc438cad764bf31c1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c707190b29e1e5b2d20fa9d68dcd7f043659aed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c707190b29e1e5b2d20fa9d68dcd7f043659aed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c707190b29e1e5b2d20fa9d68dcd7f043659aed4"}, {"sha": "4292110a0aecd4ad3b48d16370c640679c3f2adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4292110a0aecd4ad3b48d16370c640679c3f2adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4292110a0aecd4ad3b48d16370c640679c3f2adf"}], "stats": {"total": 64, "additions": 4, "deletions": 60}, "files": [{"sha": "1af76cfcc1082c07dbed3e2d5fdbf6e19c138a34", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=73271c4ce5d33fe51766ce9cc438cad764bf31c1", "patch": "@@ -790,27 +790,23 @@ class Backend\n   // recover and must be visible for correct panic recovery.\n   static const unsigned int function_is_inlinable = 1 << 2;\n \n-  // Set if the function may not split the stack.  This is set for the\n-  // implementation of recover itself, among other things.\n-  static const unsigned int function_no_split_stack = 1 << 3;\n-\n   // Set if the function does not return.  This is set for the\n   // implementation of panic.\n-  static const unsigned int function_does_not_return = 1 << 4;\n+  static const unsigned int function_does_not_return = 1 << 3;\n \n   // Set if the function should be put in a unique section if\n   // possible.  This is used for field tracking.\n-  static const unsigned int function_in_unique_section = 1 << 5;\n+  static const unsigned int function_in_unique_section = 1 << 4;\n \n   // Set if the function should be available for inlining in the\n   // backend, but should not be emitted as a standalone function.  Any\n   // call to the function that is not inlined should be treated as a\n   // call to a function defined in a different compilation unit.  This\n   // is like a C99 function marked inline but not extern.\n-  static const unsigned int function_only_inline = 1 << 6;\n+  static const unsigned int function_only_inline = 1 << 5;\n \n   // const function\n-  static const unsigned int function_read_only = 1 << 7;\n+  static const unsigned int function_read_only = 1 << 6;\n \n   // Declare or define a function of FNTYPE.\n   // NAME is the Go name of the function.  ASM_NAME, if not the empty"}, {"sha": "5c37cea20da7f263914d9cbbd5fb34dd4932e838", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=73271c4ce5d33fe51766ce9cc438cad764bf31c1", "patch": "@@ -3382,11 +3382,6 @@ Gcc_backend::function (Btype *fntype, const std::string &name,\n     }\n   if ((flags & function_is_inlinable) == 0)\n     DECL_UNINLINABLE (decl) = 1;\n-  if ((flags & function_no_split_stack) != 0)\n-    {\n-      tree attr = get_identifier (\"no_split_stack\");\n-      DECL_ATTRIBUTES (decl) = tree_cons (attr, NULL_TREE, NULL_TREE);\n-    }\n   if ((flags & function_does_not_return) != 0)\n     TREE_THIS_VOLATILE (decl) = 1;\n   if ((flags & function_in_unique_section) != 0)"}, {"sha": "12ec874d2223b2949f7754eca9cf975edb20583d", "filename": "gcc/rust/rustspec.cc", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frustspec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73271c4ce5d33fe51766ce9cc438cad764bf31c1/gcc%2Frust%2Frustspec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frustspec.cc?ref=73271c4ce5d33fe51766ce9cc438cad764bf31c1", "patch": "@@ -104,9 +104,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* The total number of arguments with the new stuff.  */\n   int num_args = 1;\n \n-  /* Supports split stack */\n-  int supports_split_stack = 0;\n-\n   /* Whether the -o option was used.  */\n   bool saw_opt_o = false;\n \n@@ -118,11 +115,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether the -S option was used.  */\n   bool saw_opt_S = false;\n \n-#ifdef TARGET_CAN_SPLIT_STACK_64BIT\n-  /* Whether the -m64 option is in force. */\n-  bool is_m64 = TARGET_CAN_SPLIT_STACK_64BIT;\n-#endif\n-\n   /* The first input file with an extension of .go.  */\n   const char *first_go_file = NULL;\n \n@@ -159,16 +151,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t    library = (library == 0) ? 1 : library;\n \t  break;\n \n-#ifdef TARGET_CAN_SPLIT_STACK_64BIT\n-\tcase OPT_m32:\n-\t  is_m64 = false;\n-\t  break;\n-\n-\tcase OPT_m64:\n-\t  is_m64 = true;\n-\t  break;\n-#endif\n-\n \tcase OPT_pg:\n \tcase OPT_p:\n \t  saw_profile_flag = true;\n@@ -253,23 +235,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Copy the 0th argument, i.e., the name of the program itself.  */\n   new_decoded_options[j++] = decoded_options[i++];\n \n-#ifdef TARGET_CAN_SPLIT_STACK\n-  supports_split_stack = 1;\n-#endif\n-\n-#ifdef TARGET_CAN_SPLIT_STACK_64BIT\n-  if (is_m64)\n-    supports_split_stack = 1;\n-#endif\n-\n-  /* If we are linking, pass -fsplit-stack if it is supported.  */\n-  if ((library >= 0) && supports_split_stack)\n-    {\n-      generate_option (OPT_fsplit_stack, NULL, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j]);\n-      j++;\n-    }\n-\n   /* NOTE: We start at 1 now, not 0.  */\n   while (i < argc)\n     {\n@@ -402,18 +367,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n \t\t     &new_decoded_options[j++]);\n \n-  /* libgcc wraps pthread_create to support split stack, however, due to\n-     relative ordering of -lpthread and -lgcc, we can't just mark\n-     __real_pthread_create in libgcc as non-weak.  But we need to link in\n-     pthread_create from pthread if we are statically linking, so we work-\n-     around by passing -u pthread_create to the linker. */\n-  if (static_link && supports_split_stack)\n-    {\n-      generate_option (OPT_Wl_, \"-u,pthread_create\", 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j]);\n-      j++;\n-    }\n-\n #if defined(TARGET_SOLARIS) && !defined(USE_GLD)\n   /* We use a common symbol for go$zerovalue.  On Solaris, when not\n      using the GNU linker, the Solaris linker needs an option to not"}]}