{"sha": "f8b6598ecc2a0594801da4f59f5740b550802244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiNjU5OGVjYzJhMDU5NDgwMWRhNGY1OWY1NzQwYjU1MDgwMjI0NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-08-27T07:47:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-08-27T07:47:17Z"}, "message": "errors.c: New file...\n\n1999-08-27 00:27 -0700  Zack Weinberg  <zack@bitmover.com>\n\n\t* errors.c: New file; defines functions error, warning, and\n\tfatal, variables have_error and progname.\n\t* errors.h: New file; prototypes and decls for stuff in errors.c.\n\n\t* Makefile: Add rules to build errors.o and\n\t$(HOST_PREFIX)errors.o.  Link genconfig, gencodes, genemit,\n\tgenopinit, genrecog, genextract, genpeep, genattr, and\n\tgenoutput with errors.o.  Add errors.h to deps of genconfig.o,\n\tgencodes.o, genemit.o, genopinit.o, genrecog.o, genextract.o,\n\tgenpeep.o, genattr.o, and genoutput.o.\n\n\t* genconfig.c, gencodes.c, genemit.c, genopinit.c, genrecog.c,\n\tgenextract.c, genpeep.c, genattr.c:  Include errors.h.  Don't\n\tdefine or prototype fatal.  Set progname at beginning of main.\n\t* genoutput.c:  Likewise, and don't define or prototype error\n\teither.\n\nFrom-SVN: r28925", "tree": {"sha": "183b4e952f4b352501a6484981cbbb5af1e6004e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183b4e952f4b352501a6484981cbbb5af1e6004e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b6598ecc2a0594801da4f59f5740b550802244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b6598ecc2a0594801da4f59f5740b550802244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b6598ecc2a0594801da4f59f5740b550802244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b6598ecc2a0594801da4f59f5740b550802244/comments", "author": null, "committer": null, "parents": [{"sha": "2ca7bde97344e506b3cbf59837bf172a18136aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca7bde97344e506b3cbf59837bf172a18136aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca7bde97344e506b3cbf59837bf172a18136aca"}], "stats": {"total": 527, "additions": 207, "deletions": 320}, "files": [{"sha": "7b6f100ef1418c1e204af1df1405da3ca101703e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -575,6 +575,7 @@ HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)  \\\n HOST_RTL = $(HOST_PREFIX)rtl.o $(HOST_PREFIX)bitmap.o\n HOST_RTLANAL = $(HOST_PREFIX)rtlanal.o\n HOST_PRINT = $(HOST_PREFIX)print-rtl.o\n+HOST_ERRORS = $(HOST_PREFIX)errors.o\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -1454,6 +1455,7 @@ rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h\n \n print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H) bitmap.h basic-block.h\n rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n+errors.o : errors.c $(CONFIG_H) system.h errors.h\n \n varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n    function.h defaults.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n@@ -1760,81 +1762,81 @@ $(MD_FILE): $(MD_DEPS)\n \t$(MD_CPP) $(MD_CPPFLAGS) $(md_file) | sed 's/^# /; /g' > tmp-$@\n \tmv tmp-$@ $@\n \n-genconfig : genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genconfig : genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t  genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t  genconfig.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genconfig.o : genconfig.c $(RTL_H) $(build_xm_file) system.h\n+genconfig.o : genconfig.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genconfig.c\n \n-genflags : genflags.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genflags : genflags.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genflags.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genflags.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genflags.o : genflags.c $(RTL_H) $(build_xm_file) system.h\n+genflags.o : genflags.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genflags.c\n \n-gencodes : gencodes.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+gencodes : gencodes.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t gencodes.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t gencodes.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-gencodes.o : gencodes.c $(RTL_H) $(build_xm_file) system.h\n+gencodes.o : gencodes.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencodes.c\n \n-genemit : genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genemit : genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genemit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genemit.o : genemit.c $(RTL_H) $(build_xm_file) system.h\n+genemit.o : genemit.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genemit.c\n \n-genopinit : genopinit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genopinit : genopinit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genopinit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genopinit.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genopinit.o : genopinit.c $(RTL_H) $(build_xm_file) system.h\n+genopinit.o : genopinit.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genopinit.c\n \n-genrecog : genrecog.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genrecog : genrecog.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genrecog.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genrecog.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genrecog.o : genrecog.c $(RTL_H) $(build_xm_file) system.h\n+genrecog.o : genrecog.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c\n \n-genextract : genextract.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genextract : genextract.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genextract.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genextract.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genextract.o : genextract.c $(RTL_H) $(build_xm_file) system.h insn-config.h\n+genextract.o : genextract.c $(RTL_H) $(build_xm_file) system.h insn-config.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genextract.c\n \n-genpeep : genpeep.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genpeep : genpeep.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genpeep.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genpeep.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genpeep.o : genpeep.c $(RTL_H) $(build_xm_file) system.h\n+genpeep.o : genpeep.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genpeep.c\n \n-genattr : genattr.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genattr : genattr.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genattr.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genattr.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genattr.o : genattr.c $(RTL_H) $(build_xm_file) system.h\n+genattr.o : genattr.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattr.c\n \n-genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBDEPS)\n+genattrtab : genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_RTLANAL) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_RTLANAL) $(HOST_LIBS)\n+\t genattrtab.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_RTLANAL) $(HOST_LIBS)\n \n-genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) system.h insn-config.h\n+genattrtab.o : genattrtab.c $(RTL_H)  $(build_xm_file) system.h insn-config.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genattrtab.c\n \n-genoutput : genoutput.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBDEPS)\n+genoutput : genoutput.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n-\t genoutput.o $(HOST_RTL) $(HOST_PRINT) $(HOST_LIBS)\n+\t genoutput.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBS)\n \n-genoutput.o : genoutput.c $(RTL_H) $(build_xm_file) system.h\n+genoutput.o : genoutput.c $(RTL_H) $(build_xm_file) system.h errors.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genoutput.c\n \n gengenrtl : gengenrtl.o $(HOST_LIBDEPS)\n@@ -1896,6 +1898,12 @@ $(HOST_PREFIX_1)malloc.o: malloc.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/malloc.c > $(HOST_PREFIX)malloc.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)malloc.c\n \n+$(HOST_PREFIX_1)errors.o: errors.c\n+\trm -f $(HOST_PREFIX)errors.c\n+\tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/errors.c > $(HOST_PREFIX)errors.c\n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)errors.c\n+\n+\n # This satisfies the dependency that we get if you cross-compile a compiler\n # that does not need to compile alloca, malloc or whatever.\n $(HOST_PREFIX_1): "}, {"sha": "556e7403a773e0ac614245364dfa5988f82882ae", "filename": "gcc/errors.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -0,0 +1,106 @@\n+/* Basic error reporting routines.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* warning, error, and fatal.  These definitions are suitable for use\n+   in the generator programs; eventually we would like to use them in\n+   cc1 too, but that's a longer term project.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"errors.h\"\n+\n+/* Set this to argv[0] at the beginning of main.  */\n+\n+const char *progname;\n+\n+/* Starts out 0, set to 1 if error is called.  */\n+\n+int have_error = 0;\n+\n+/* Print a warning message - output produced, but there may be problems.  */\n+\n+void\n+warning VPROTO ((const char *format, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  const char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, const char *);\n+#endif\n+\n+  fprintf (stderr, \"%s: warning: \", progname);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n+  fputc('\\n', stderr);\n+}\n+\n+\n+/* Print an error message - we keep going but the output is unusable.  */\n+\n+void\n+error VPROTO ((const char *format, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  const char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, const char *);\n+#endif\n+\n+  fprintf (stderr, \"%s: \", progname);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n+  fputc('\\n', stderr);\n+\n+  have_error = 1;\n+}\n+\n+\n+/* Fatal error - terminate execution immediately.  Does not return.  */\n+\n+void\n+fatal VPROTO ((const char *format, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  const char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef ANSI_PROTOTYPES\n+  format = va_arg (ap, const char *);\n+#endif\n+\n+  fprintf (stderr, \"%s: \", progname);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n+  fputc('\\n', stderr);\n+  exit (FATAL_EXIT_CODE);\n+}"}, {"sha": "cd9ebb152eaf0adb820aa07b356182919d970d87", "filename": "gcc/errors.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -0,0 +1,36 @@\n+/* Basic error reporting routines.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* warning, error, and fatal.  These definitions are suitable for use\n+   in the generator programs; eventually we would like to use them in\n+   cc1 too, but that's a longer term project.  */\n+\n+#ifndef __GCC_ERRORS_H__\n+#define __GCC_ERRORS_H__\n+\n+void warning PVPROTO ((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n+void error   PVPROTO ((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n+void fatal   PVPROTO ((const char *format, ...))\n+    ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+\n+extern int have_error;\n+extern const char *progname;\n+    \n+#endif"}, {"sha": "02e0be8e8e3db7686514ac11aef3a80e1b367d7e", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -24,16 +24,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n@@ -224,27 +222,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genattr: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -268,6 +245,7 @@ main (argc, argv)\n   init_range (&all_issue_delay);\n   init_range (&all_blockage);\n \n+  progname = \"genattr\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "4b36275066247e201e13f297ffa4aae72e3bfa23", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -107,6 +107,7 @@ Boston, MA 02111-1307, USA.  */\n /* We must include obstack.h after <sys/time.h>, to avoid lossage with\n    /usr/include/sys/stdtypes.h on Sun OS 4.x.  */\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack, obstack1, obstack2;\n struct obstack *rtl_obstack = &obstack;\n@@ -119,9 +120,6 @@ struct obstack *temp_obstack = &obstack2;\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* enough space to reserve for printing out ints */\n #define MAX_DIGITS (HOST_BITS_PER_INT * 3 / 10 + 3)\n \n@@ -5906,27 +5904,6 @@ copy_rtx_unchanging (orig)\n #endif\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genattrtab: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n /* Determine if an insn has a constant number of delay slots, i.e., the\n    number of delay slots is not a function of the length of the insn.  */\n \n@@ -5990,6 +5967,7 @@ main (argc, argv)\n   }\n #endif\n \n+  progname = \"genattrtab\";\n   obstack_init (rtl_obstack);\n   obstack_init (hash_obstack);\n   obstack_init (temp_obstack);"}, {"sha": "1fa8700dd33df0d7d881af87bbcccd1666cdd4f6", "filename": "gcc/gencodes.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -26,16 +26,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n@@ -81,27 +79,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"gencodes: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -111,6 +88,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"gencodes\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "bbe707cf029ab2c8bff2daf072c48227c6697724", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -49,9 +50,6 @@ static int max_insns_per_split = 1;\n static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n static void walk_insn_part PROTO((rtx, int, int));\n static void gen_insn PROTO((rtx));\n static void gen_expand PROTO((rtx));\n@@ -270,27 +268,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genconfig: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -300,6 +277,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genconfig\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "161aeff6da61505d16986025bcff62fc9bce3a4e", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -23,16 +23,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n@@ -706,27 +704,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genemit: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -736,6 +713,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genemit\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "2f791a351989175de2aa5153b7a7a348c424922b", "filename": "gcc/genextract.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n #include \"insn-config.h\"\n \n static struct obstack obstack;\n@@ -98,9 +99,7 @@ static struct code_ptr *peepholes;\n static void gen_insn PROTO ((rtx));\n static void walk_rtx PROTO ((rtx, const char *));\n static void print_path PROTO ((char *));\n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\f\n+\n static void\n gen_insn (insn)\n      rtx insn;\n@@ -369,27 +368,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genextract: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n char *\n xstrdup (input)\n   const char *input;\n@@ -411,6 +389,7 @@ main (argc, argv)\n   struct extraction *p;\n   struct code_ptr *link;\n \n+  progname = \"genextract\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "4602ea404dc48473face69678bd15c9036a568be", "filename": "gcc/genflags.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -26,16 +26,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* Names for patterns.  Need to allow linking with print-rtl.  */\n char **insn_name_ptr;\n \n@@ -201,27 +199,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genflags: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -235,6 +212,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genflags\";\n   obstack_init (rtl_obstack);\n   obstack_init (&call_obstack);\n   obstack_init (&normal_obstack);"}, {"sha": "a68c27b2720fcc8be2b78ee774d16a98da326403", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -23,16 +23,14 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n /* Many parts of GCC use arrays that are indexed by machine mode and\n    contain the insn codes for pattern in the MD file that perform a given\n    operation on operands of that mode.\n@@ -306,27 +304,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genopinit: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -336,6 +313,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genopinit\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "ecdc304f4c8a262027551eccd91d8ea707199766", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -94,6 +94,7 @@ given in the entry is a constant (it does not start with `*').  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n /* No instruction can have more operands than this.\n    Sorry for this arbitrary limit, but what machine will\n@@ -107,9 +108,6 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-static void error PVPROTO ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n static int n_occurrences PROTO((int, char *));\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n@@ -931,49 +929,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genoutput: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n-static void\n-error VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genoutput: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-\n-  have_error = 1;\n-}\n-\f\n int\n main (argc, argv)\n      int argc;\n@@ -983,6 +938,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genoutput\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "9b6c4920e77a03ed7d6b224e6d594232729461ca", "filename": "gcc/genpeep.c", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n@@ -46,9 +47,6 @@ struct link\n   int vecelt;\n };\n \n-void fatal PVPROTO ((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\n static int max_opno;\n \n /* Number of operands used in current peephole definition.  */\n@@ -409,27 +407,6 @@ xrealloc (old, size)\n   return ptr;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genpeep: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -441,6 +418,7 @@ main (argc, argv)\n \n   max_opno = -1;\n \n+  progname = \"genpeep\";\n   obstack_init (rtl_obstack);\n \n   if (argc <= 1)"}, {"sha": "d8bd74a2f0cca1229a125232d34ac873691d1413", "filename": "gcc/genrecog.c", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b6598ecc2a0594801da4f59f5740b550802244/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=f8b6598ecc2a0594801da4f59f5740b550802244", "patch": "@@ -50,6 +50,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n+#include \"errors.h\"\n \n #define OUTPUT_LABEL(INDENT_STRING, LABEL_NUMBER) \\\n   printf(\"%sL%d: ATTRIBUTE_UNUSED_LABEL\\n\", (INDENT_STRING), (LABEL_NUMBER))\n@@ -193,9 +194,7 @@ static void write_tree\t\tPROTO((struct decision *, const char *,\n \t\t\t\t       struct decision *, int,\n \t\t\t\t       enum routine_type));\n static void change_state\tPROTO((const char *, const char *, int));\n-void fatal\t\tPVPROTO((const char *, ...))\n-  ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-\f\n+\n /* Construct and return a sequence of decisions\n    that will recognize INSN.\n \n@@ -1709,28 +1708,6 @@ xmalloc (size)\n   return val;\n }\n \n-void\n-fatal VPROTO ((const char *format, ...))\n-{\n-#ifndef ANSI_PROTOTYPES\n-  const char *format;\n-#endif\n-  va_list ap;\n-\n-  VA_START (ap, format);\n-\n-#ifndef ANSI_PROTOTYPES\n-  format = va_arg (ap, const char *);\n-#endif\n-\n-  fprintf (stderr, \"genrecog: \");\n-  vfprintf (stderr, format, ap);\n-  va_end (ap);\n-  fprintf (stderr, \"\\n\");\n-  fprintf (stderr, \"after %d definitions\\n\", next_index);\n-  exit (FATAL_EXIT_CODE);\n-}\n-\n int\n main (argc, argv)\n      int argc;\n@@ -1742,6 +1719,7 @@ main (argc, argv)\n   FILE *infile;\n   register int c;\n \n+  progname = \"genrecog\";\n   obstack_init (rtl_obstack);\n   recog_tree.first = recog_tree.last = split_tree.first = split_tree.last = 0;\n "}]}