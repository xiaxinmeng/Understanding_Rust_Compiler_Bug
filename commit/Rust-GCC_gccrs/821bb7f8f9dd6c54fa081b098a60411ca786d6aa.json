{"sha": "821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxYmI3ZjhmOWRkNmM1NGZhMDgxYjA5OGE2MDQxMWNhNzg2ZDZhYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-29T09:49:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-29T09:49:42Z"}, "message": "tree-ssa-operands.c (get_expr_operands): Do not handle INDIRECT_REFs in the handled-component case.\n\n2009-05-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-operands.c (get_expr_operands): Do not handle\n\tINDIRECT_REFs in the handled-component case.  Remove\n\tunused get_ref_base_and_extent case.\n\t* tree-dfa.c (get_ref_base_and_extent): Avoid calling\n\ttree_low_cst and host_integerp where possible.\n\t* tree-ssa-structalias.c (equiv_class_label_eq): Check hash\n\tcodes for equivalence.\n\t* dce.c (find_call_stack_args): Avoid redundant bitmap queries.\n\nFrom-SVN: r147973", "tree": {"sha": "6c80b189fd0b9250df5581608770c18fb098718b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c80b189fd0b9250df5581608770c18fb098718b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e997fb9cde056a19283773504860010e3dede244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e997fb9cde056a19283773504860010e3dede244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e997fb9cde056a19283773504860010e3dede244"}], "stats": {"total": 60, "additions": 32, "deletions": 28}, "files": [{"sha": "b46a783568627f958aeb86b37fca8dd7f8fc54ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "patch": "@@ -1,3 +1,14 @@\n+2009-05-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-operands.c (get_expr_operands): Do not handle\n+\tINDIRECT_REFs in the handled-component case.  Remove\n+\tunused get_ref_base_and_extent case.\n+\t* tree-dfa.c (get_ref_base_and_extent): Avoid calling\n+\ttree_low_cst and host_integerp where possible.\n+\t* tree-ssa-structalias.c (equiv_class_label_eq): Check hash\n+\tcodes for equivalence.\n+\t* dce.c (find_call_stack_args): Avoid redundant bitmap queries.\n+\n 2009-05-29  David Billinghurst <billingd@gcc.gnu.org>\n \n \t* config.gcc: Add i386/t-fprules-softfp and soft-fp/t-softfp"}, {"sha": "2d1bd7ada299ce89040bbe8a5306b400fb5eca40", "filename": "gcc/dce.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "patch": "@@ -354,8 +354,8 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n \t  }\n \tfor (byte = off; byte < off + INTVAL (MEM_SIZE (mem)); byte++)\n \t  {\n-\t    gcc_assert (!bitmap_bit_p (sp_bytes, byte - min_sp_off));\n-\t    bitmap_set_bit (sp_bytes, byte - min_sp_off);\n+\t    if (!bitmap_set_bit (sp_bytes, byte - min_sp_off))\n+\t      gcc_unreachable ();\n \t  }\n       }\n \n@@ -442,9 +442,8 @@ find_call_stack_args (rtx call_insn, bool do_mark, bool fast,\n \t{\n \t  if (byte < min_sp_off\n \t      || byte >= max_sp_off\n-\t      || !bitmap_bit_p (sp_bytes, byte - min_sp_off))\n+\t      || !bitmap_clear_bit (sp_bytes, byte - min_sp_off))\n \t    break;\n-\t  bitmap_clear_bit (sp_bytes, byte - min_sp_off);\n \t}\n \n       if (!deletable_insn_p (insn, fast, NULL))"}, {"sha": "4fecd01c42371a67ba983eaf5e884624510357fa", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "patch": "@@ -750,7 +750,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       switch (TREE_CODE (exp))\n \t{\n \tcase BIT_FIELD_REF:\n-\t  bit_offset += tree_low_cst (TREE_OPERAND (exp, 2), 0);\n+\t  bit_offset += TREE_INT_CST_LOW (TREE_OPERAND (exp, 2));\n \t  break;\n \n \tcase COMPONENT_REF:\n@@ -761,13 +761,14 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t    if (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == UNION_TYPE)\n \t      seen_union = true;\n \n-\t    if (this_offset && TREE_CODE (this_offset) == INTEGER_CST)\n+\t    if (this_offset\n+\t\t&& TREE_CODE (this_offset) == INTEGER_CST\n+\t\t&& host_integerp (this_offset, 0))\n \t      {\n-\t\tHOST_WIDE_INT hthis_offset = tree_low_cst (this_offset, 0);\n-\n+\t\tHOST_WIDE_INT hthis_offset = TREE_INT_CST_LOW (this_offset);\n \t\ththis_offset *= BITS_PER_UNIT;\n \t\tbit_offset += hthis_offset;\n-\t\tbit_offset += tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 0);\n+\t\tbit_offset += TREE_INT_CST_LOW (DECL_FIELD_BIT_OFFSET (field));\n \t      }\n \t    else\n \t      {\n@@ -787,18 +788,20 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \tcase ARRAY_RANGE_REF:\n \t  {\n \t    tree index = TREE_OPERAND (exp, 1);\n-\t    tree low_bound = array_ref_low_bound (exp);\n-\t    tree unit_size = array_ref_element_size (exp);\n+\t    tree low_bound, unit_size;\n \n \t    /* If the resulting bit-offset is constant, track it.  */\n-\t    if (host_integerp (index, 0)\n-\t\t&& host_integerp (low_bound, 0)\n-\t\t&& host_integerp (unit_size, 1))\n+\t    if (TREE_CODE (index) == INTEGER_CST\n+\t\t&& host_integerp (index, 0)\n+\t\t&& (low_bound = array_ref_low_bound (exp),\n+\t\t    host_integerp (low_bound, 0))\n+\t\t&& (unit_size = array_ref_element_size (exp),\n+\t\t    host_integerp (unit_size, 1)))\n \t      {\n-\t\tHOST_WIDE_INT hindex = tree_low_cst (index, 0);\n+\t\tHOST_WIDE_INT hindex = TREE_INT_CST_LOW (index);\n \n-\t\thindex -= tree_low_cst (low_bound, 0);\n-\t\thindex *= tree_low_cst (unit_size, 1);\n+\t\thindex -= TREE_INT_CST_LOW (low_bound);\n+\t\thindex *= TREE_INT_CST_LOW (unit_size);\n \t\thindex *= BITS_PER_UNIT;\n \t\tbit_offset += hindex;\n "}, {"sha": "0f3c829713eded3ec95cec1227aa4c066a2b3813", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "patch": "@@ -904,19 +904,9 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       {\n-\ttree ref;\n-\tHOST_WIDE_INT offset, size, maxsize;\n-\n \tif (TREE_THIS_VOLATILE (expr))\n \t  gimple_set_has_volatile_ops (stmt, true);\n \n-\tref = get_ref_base_and_extent (expr, &offset, &size, &maxsize);\n-\tif (TREE_CODE (ref) == INDIRECT_REF)\n-\t  {\n-\t    get_indirect_ref_operands (stmt, ref, flags, false);\n-\t    flags |= opf_no_vops;\n-\t  }\n-\n \tget_expr_operands (stmt, &TREE_OPERAND (expr, 0), flags);\n \t\n \tif (code == COMPONENT_REF)"}, {"sha": "827a9162234cb931363e2c6a86a033e8c2b8f7ba", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bb7f8f9dd6c54fa081b098a60411ca786d6aa/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=821bb7f8f9dd6c54fa081b098a60411ca786d6aa", "patch": "@@ -1864,7 +1864,8 @@ equiv_class_label_eq (const void *p1, const void *p2)\n {\n   const_equiv_class_label_t const eql1 = (const_equiv_class_label_t) p1;\n   const_equiv_class_label_t const eql2 = (const_equiv_class_label_t) p2;\n-  return bitmap_equal_p (eql1->labels, eql2->labels);\n+  return (eql1->hashcode == eql2->hashcode\n+\t  && bitmap_equal_p (eql1->labels, eql2->labels));\n }\n \n /* Lookup a equivalence class in TABLE by the bitmap of LABELS it"}]}