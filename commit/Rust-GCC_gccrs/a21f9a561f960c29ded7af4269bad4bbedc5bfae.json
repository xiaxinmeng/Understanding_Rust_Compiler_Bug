{"sha": "a21f9a561f960c29ded7af4269bad4bbedc5bfae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxZjlhNTYxZjk2MGMyOWRlZDdhZjQyNjliYWQ0YmJlZGM1YmZhZQ==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@aim.com", "date": "2008-04-09T23:58:39Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2008-04-09T23:58:39Z"}, "message": "re PR testsuite/34894 (Some compile tests require trampolines even when the target sets no_trampolines)\n\n2008-04-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n\n\tPR testsuite/34894\n\tPR testsuite/33782\n\t* lib/target-supports.dg: Add check_effective_target_trampolines.\n\tDisable profiling for avr-*-*.\n\t* gcc.c-torture/compile/pr27889.c: dg-requires trampolines.\n\t* gcc.c-torture/compile/nested-1.c: Ditto.\n\t* gcc.c-torture/compile/20050122-2.c: Ditto.\n\t* gcc.c-torture/compile/20010226-1.c: Ditto.\n\t* gcc.c-torture/compile/20010327-1.c:  Skip for avr-*-*.\n\t* gcc.c-torture/compile/980506-1.c: Ditto.\n\t* gcc.c-torture/compile/20020604-1.c: Ditto.\n\t* gcc.c-torture/compile/limits-stringlit.c: Ditto\n\t* gcc.c-torture/compile/20001226-1.c: Ditto\n\nFrom-SVN: r134153", "tree": {"sha": "93123ce580ee8e5cc8c378df792063e7fff66774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93123ce580ee8e5cc8c378df792063e7fff66774"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21f9a561f960c29ded7af4269bad4bbedc5bfae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21f9a561f960c29ded7af4269bad4bbedc5bfae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21f9a561f960c29ded7af4269bad4bbedc5bfae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21f9a561f960c29ded7af4269bad4bbedc5bfae/comments", "author": null, "committer": null, "parents": [{"sha": "df79488418903fda527f6a6b88e84b1f1d598526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df79488418903fda527f6a6b88e84b1f1d598526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df79488418903fda527f6a6b88e84b1f1d598526"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "c82950a3382a34fda77fbe549311fcb01c85366d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,3 +1,19 @@\n+2008-04-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n+\n+\tPR testsuite/34894\n+\tPR testsuite/33782\n+\t* lib/target-supports.dg: Add check_effective_target_trampolines.\n+\tDisable profiling for avr-*-*.\n+\t* gcc.c-torture/compile/pr27889.c: dg-requires trampolines.\n+\t* gcc.c-torture/compile/nested-1.c: Ditto.\n+\t* gcc.c-torture/compile/20050122-2.c: Ditto.\n+\t* gcc.c-torture/compile/20010226-1.c: Ditto.\n+\t* gcc.c-torture/compile/20010327-1.c:  Skip for avr-*-*.\n+\t* gcc.c-torture/compile/980506-1.c: Ditto.\n+\t* gcc.c-torture/compile/20020604-1.c: Ditto.\n+\t* gcc.c-torture/compile/limits-stringlit.c: Ditto\n+\t* gcc.c-torture/compile/20001226-1.c: Ditto\n+\n 2008-04-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35708"}, {"sha": "cfcf546e157f694160c04b043b4c22b4092f6b69", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -2,6 +2,7 @@\n    than 64K.  */\n /* { dg-do assemble } */\n /* { dg-xfail-if \"function larger than 64K\" { m6811-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"too much code for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-xfail-if \"jump beyond 128K not supported\" { xtensa-*-* } { \"-O0\" } { \"\" } } */\n /* { dg-skip-if \"\" { m32c-*-* } { \"*\" } { \"\" } } */\n "}, {"sha": "f25b48390d5a6fde988a230d9f54f110d97dd0f1", "filename": "gcc/testsuite/gcc.c-torture/compile/20010226-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-effective-target trampolines } */\n+\n void f1 (void *);\n void f3 (void *, void (*)(void *));\n void f2 (void *);"}, {"sha": "59639e6ed961cc4baba91745beebb690c79d36f7", "filename": "gcc/testsuite/gcc.c-torture/compile/20010327-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,4 +1,5 @@\n /* { dg-skip-if \"non-SI pointers\" { m32c-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"HI mode pointer for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */ \n \n /* This testcase tests whether GCC can produce static initialized data\n    that references addresses of size 'unsigned long', even if that's not"}, {"sha": "17b9b2165bac15756685069bcb66c1d7b672e108", "filename": "gcc/testsuite/gcc.c-torture/compile/20020604-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do assemble } */\n /* { dg-xfail-if \"The array is too big\" { \"m6811-*-* m6812-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"The array is too big\" { \"avr-*-*\" } { \"*\" } { \"\" } } */ \n /* { dg-xfail-if \"The array too big\" { \"h8300-*-*\" } { \"-mno-h\" \"-mn\" } { \"\" } } */\n /* { dg-skip-if \"\" { m32c-*-* } { } { } } */\n "}, {"sha": "1e297be8cb6ba06091e87c2c75e7583a7f905e0e", "filename": "gcc/testsuite/gcc.c-torture/compile/20050122-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050122-2.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,4 +1,6 @@\n /* Related to PR 19484.  */\n+/* { dg-require-effective-target trampolines } */\n+\n extern void foo (void) __attribute__((noreturn));\n int n;\n "}, {"sha": "5c22e7e508f9f41bd74195f719e5c1a29d3d8add", "filename": "gcc/testsuite/gcc.c-torture/compile/980506-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do assemble } */\n /* { dg-require-effective-target size32plus } */\n /* { dg-xfail-if \"The array too big\" { m6811-*-* m6812-*-* } { \"*\" } { \"\" } } /*\n+/* { dg-skip-if \"Array too big\" { \"avr-*-*\" } { \"*\" } { \"\" } } */ \n /* { dg-xfail-if \"The array too big\" { h8300-*-* } { \"-mno-h\" \"-mn\" } { \"\" } } */\n \n unsigned char\tTIFFFax2DMode[20][256];"}, {"sha": "5b52c83b06182e967bf20fcded1df8306d91b85c", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-stringlit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-skip-if \"Array too big\" { \"avr-*-*\" } { \"*\" } { \"\" } } */ \n+\n #define STR2 \"012345678901234567890123456789012345678901234567890123456789\\\n 0123456789012345678901234567890123456789\"\n #define STR3 STR2 STR2 STR2 STR2 STR2 STR2 STR2 STR2 STR2 STR2"}, {"sha": "135538a8524a154b6a04f2b601f876a471742925", "filename": "gcc/testsuite/gcc.c-torture/compile/nested-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-1.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-effective-target trampolines } */\n+\n typedef __SIZE_TYPE__ size_t;\n extern int printf (const char *, ...);\n extern void *memset (void *, int, size_t);"}, {"sha": "4e76caa5663d67b76d0c779aeb9b7f0e05794e1c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr27889.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27889.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27889.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr27889.c?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-require-effective-target trampolines } */\n+\n void h(void (*)(void));\n _Complex int g (void)\n {"}, {"sha": "180ce86da2e8440ee26b280711efb3a1cc917a6b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21f9a561f960c29ded7af4269bad4bbedc5bfae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a21f9a561f960c29ded7af4269bad4bbedc5bfae", "patch": "@@ -383,6 +383,21 @@ proc check_gc_sections_available { } {\n     return $gc_sections_available_saved\n }\n \n+# Return 1 if according to target_info struct and explicit target list\n+# target is supposed to support trampolines.\n+ \n+proc check_effective_target_trampolines { } {\n+    if [target_info exists no_trampolines] {\n+      return 0\n+    }\n+    if { [istarget avr-*-*]\n+\t || [istarget hppa2.0w-hp-hpux11.23]\n+\t|| [istarget hppa64-hp-hpux11.23] } {\n+\treturn 0;   \n+    }\n+    return 1\n+}\n+\n # Return true if profiling is supported on the target.\n \n proc check_profiling_available { test_what } {\n@@ -435,6 +450,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget arm*-*-eabi*]\n \t     || [istarget arm*-*-elf]\n \t     || [istarget arm*-*-symbianelf*]\n+\t     || [istarget avr-*-*]\n \t     || [istarget bfin-*-*]\n \t     || [istarget powerpc-*-eabi*]\n \t     || [istarget strongarm*-*-elf]"}]}