{"sha": "cad367a62b3532869209dd3058215eb72b923770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkMzY3YTYyYjM1MzI4NjkyMDlkZDMwNTgyMTVlYjcyYjkyMzc3MA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-06-27T19:20:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-06-27T19:20:06Z"}, "message": "typelist.h (typelist_append): To append_typelist.\n\n2006-06-27  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/typelist.h (typelist_append): To append_typelist. \n\t(typelist): To node.\n\tEnclose in namespace typelist.\n\t* testsuite/util/testsuite_common_types.h: Adjust names, namespaces.\n\t* testsuite/performance/23_containers/find/map.cc: Same.\n\t* testsuite/performance/23_containers/create/map.cc: Same.\n\t* testsuite/performance/23_containers/insert_erase/associative.cc: \n\tSame.\n\t* testsuite/performance/23_containers/insert/sequence.cc: Same.\n\t* testsuite/performance/23_containers/insert/associative.cc: Same.\n\t* testsuite/performance/23_containers/create_from_sorted/set.cc: Same.\n\t* testsuite/performance/23_containers/index/map.cc: Same.\n\t* testsuite/performance/23_containers/insert_from_sorted/set.cc: Same.\n\t* testsuite/performance/23_containers/create_sort/list.cc: Same.\n\t* testsuite/performance/23_containers/sort_search/list.cc: Same.\n\t* testsuite/performance/23_containers/producer_consumer/sequence.cc: \n\tSame.\n\t* testsuite/performance/23_containers/producer_consumer/associative.cc:\n\tSame.\n\nFrom-SVN: r115037", "tree": {"sha": "b82d0316de697d6bbdbcfb5c73daa10cf69cd138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82d0316de697d6bbdbcfb5c73daa10cf69cd138"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad367a62b3532869209dd3058215eb72b923770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad367a62b3532869209dd3058215eb72b923770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad367a62b3532869209dd3058215eb72b923770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad367a62b3532869209dd3058215eb72b923770/comments", "author": null, "committer": null, "parents": [{"sha": "776862ddc1082808b2053d4e2ceeb445eecebbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776862ddc1082808b2053d4e2ceeb445eecebbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776862ddc1082808b2053d4e2ceeb445eecebbf1"}], "stats": {"total": 133, "additions": 69, "deletions": 64}, "files": [{"sha": "11913e3aa22264bc9e79b1153fb748421938a27c", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,13 +48,12 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  // XXX namespace typelist\n-  // struct typelist -> struct node \n-\n+namespace typelist\n+{\n   struct null_type { };\n \n   template<typename Root>\n-    struct typelist\n+    struct node\n     {\n       typedef Root \troot;\n     };\n@@ -71,7 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     struct append;\n \n   template<typename Typelist_Typelist>\n-    struct typelist_append;\n+    struct append_typelist;\n \n   template<typename Typelist, typename T>\n     struct contains;\n@@ -87,12 +86,15 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   template<typename Typelist, template<typename T> class Transform>\n     struct transform;\n+} // namespace typelist\n \n _GLIBCXX_END_NAMESPACE\n \n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+namespace typelist \n+{\n namespace detail\n {\n   // #include <ext/detail/type_utils.h>\n@@ -245,32 +247,35 @@ namespace detail\n       typedef chain<transform_type, rest_type> type;\n     };\n \n-  // #include <ext/detail/typelist_append.h>\n+  // #include <ext/detail/append_typelist.h>\n   template<typename Typelist_Typelist_Chain>\n-    struct typelist_append_;\n+    struct append_typelist_;\n \n   template<typename Hd>\n-    struct typelist_append_<chain<Hd, null_type> >\n+    struct append_typelist_<chain<Hd, null_type> >\n     {\n       typedef chain<Hd, null_type> type;\n     };\n \n   template<typename Hd, typename Tl>\n-    struct typelist_append_<chain< Hd, Tl> >\n+    struct append_typelist_<chain< Hd, Tl> >\n     {\n     private:\n-      typedef typename typelist_append_<Tl>::type rest;\n+      typedef typename append_typelist_<Tl>::type rest;\n       \n     public:\n-      typedef typename append<Hd, typelist<rest> >::type::root type;\n+      typedef typename append<Hd, node<rest> >::type::root type;\n     };\n } // namespace detail\n+} // namespace typelist\n \n _GLIBCXX_END_NAMESPACE\n \n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n+namespace typelist\n+{\n   template<typename Fn, typename Typelist>\n     struct apply\n     {\n@@ -292,18 +297,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef detail::append_<root0_type, root1_type> \t\tappend_type;\n \n     public:\n-      typedef typelist<typename append_type::type> \t\ttype;\n+      typedef node<typename append_type::type> \t\ttype;\n     };\n \n   template<typename Typelist_Typelist>\n-    struct typelist_append\n+    struct append_typelist\n     {\n     private:\n       typedef typename Typelist_Typelist::root \t\t      \troot_type;\n-      typedef detail::typelist_append_<root_type> \t\tappend_type;\n+      typedef detail::append_typelist_<root_type> \t\tappend_type;\n \n     public:\n-      typedef typelist<typename append_type::type> \t\ttype;\n+      typedef node<typename append_type::type> \t\ttype;\n     };\n \n   template<typename Typelist, typename T>\n@@ -325,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef detail::chain_filter_<root_type, Pred> \t\tfilter_type;\n \n     public:\n-      typedef typelist<typename filter_type::type> \t       \ttype;\n+      typedef node<typename filter_type::type> \t       \ttype;\n     };\n \n   template<typename Typelist, int i>\n@@ -345,27 +350,27 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef detail::chain_transform_<root_type, Transform> \ttransform_type;\n \n     public:\n-      typedef typelist<typename transform_type::type> \t\ttype;\n+      typedef node<typename transform_type::type> \t\ttype;\n     };\n-\n+} // namespace typelist\n _GLIBCXX_END_NAMESPACE\n \n \n-#define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::chain<X0, __gnu_cxx::null_type>\n-#define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n-#define _GLIBCXX_TYPELIST_CHAIN3(X0, X1, X2) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN2(X1, X2) >\n-#define _GLIBCXX_TYPELIST_CHAIN4(X0, X1, X2, X3) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN3(X1, X2, X3) >\n-#define _GLIBCXX_TYPELIST_CHAIN5(X0, X1, X2, X3, X4) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN4(X1, X2, X3, X4) >\n-#define _GLIBCXX_TYPELIST_CHAIN6(X0, X1, X2, X3, X4, X5) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN5(X1, X2, X3, X4, X5) >\n-#define _GLIBCXX_TYPELIST_CHAIN7(X0, X1, X2, X3, X4, X5, X6) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6) >\n-#define _GLIBCXX_TYPELIST_CHAIN8(X0, X1, X2, X3, X4, X5, X6, X7) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7) >\n-#define _GLIBCXX_TYPELIST_CHAIN9(X0, X1, X2, X3, X4, X5, X6, X7, X8) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8) >\n-#define _GLIBCXX_TYPELIST_CHAIN10(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9) >\n-#define _GLIBCXX_TYPELIST_CHAIN11(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) >\n-#define _GLIBCXX_TYPELIST_CHAIN12(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) >\n-#define _GLIBCXX_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n-#define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n-#define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n+#define _GLIBCXX_TYPELIST_CHAIN1(X0) __gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>\n+#define _GLIBCXX_TYPELIST_CHAIN2(X0, X1) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1) >\n+#define _GLIBCXX_TYPELIST_CHAIN3(X0, X1, X2) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN2(X1, X2) >\n+#define _GLIBCXX_TYPELIST_CHAIN4(X0, X1, X2, X3) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN3(X1, X2, X3) >\n+#define _GLIBCXX_TYPELIST_CHAIN5(X0, X1, X2, X3, X4) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN4(X1, X2, X3, X4) >\n+#define _GLIBCXX_TYPELIST_CHAIN6(X0, X1, X2, X3, X4, X5) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN5(X1, X2, X3, X4, X5) >\n+#define _GLIBCXX_TYPELIST_CHAIN7(X0, X1, X2, X3, X4, X5, X6) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6) >\n+#define _GLIBCXX_TYPELIST_CHAIN8(X0, X1, X2, X3, X4, X5, X6, X7) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7) >\n+#define _GLIBCXX_TYPELIST_CHAIN9(X0, X1, X2, X3, X4, X5, X6, X7, X8) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8) >\n+#define _GLIBCXX_TYPELIST_CHAIN10(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9) >\n+#define _GLIBCXX_TYPELIST_CHAIN11(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) >\n+#define _GLIBCXX_TYPELIST_CHAIN12(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11) >\n+#define _GLIBCXX_TYPELIST_CHAIN13(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12) >\n+#define _GLIBCXX_TYPELIST_CHAIN14(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13) >\n+#define _GLIBCXX_TYPELIST_CHAIN15(X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) >\n \n #endif\n "}, {"sha": "08009ec7f48b293256afbaf864ebb63f153a8dfa", "filename": "libstdc++-v3/testsuite/performance/23_containers/create/map.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate%2Fmap.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,6 +1,6 @@\n // 2003-03-01 gp dot bolton at computer dot org\n \n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -54,7 +54,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "0c6bd709cb21be2541a0243fb0450bbac9bd20bb", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_from_sorted/set.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_from_sorted%2Fset.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create_from_sorted\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "02b25cde17fb62c35b7392f5bb0269973463f515", "filename": "libstdc++-v3/testsuite/performance/23_containers/create_sort/list.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fcreate_sort%2Flist.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,7 +57,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"create_sort\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "f11bda1c8e283c5aa6820161887aa24c9ea759cc", "filename": "libstdc++-v3/testsuite/performance/23_containers/find/map.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Ffind%2Fmap.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,7 +60,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"find\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "8682c9070d5899e85d4bbaee7868d3126a9668fa", "filename": "libstdc++-v3/testsuite/performance/23_containers/index/map.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Findex%2Fmap.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -63,7 +63,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"index_associative\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "8be68f6c1ca8f0ca9625209f0624fe24d4f1aa2d", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/associative.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fassociative.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,7 +65,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_associative\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "b6cdbf117deff2d42a09a348161a7ee856202c95", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/sequence.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Fsequence.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,7 +61,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_sequence\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "c0ce6f9aa45355eedb42bb15fa59267cdb94da48", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_erase/associative.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_erase%2Fassociative.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +68,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_erase_associative\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "863c7a6dc7c26ff61e43704a651da350b8cfdc56", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert_from_sorted/set.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert_from_sorted%2Fset.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -81,7 +81,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"insert_from_sorted\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "3ccfca92e6913d325654259cfc72f54b53e02ec7", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/associative.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fassociative.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -246,11 +246,11 @@ main()\n \n   typedef __gnu_test::maps<test_type, thread_type>::type map_typelist;\n   typedef __gnu_test::sets<test_type, thread_type>::type set_typelist;\n-  typedef __gnu_cxx::append<map_typelist, set_typelist>::type container_types;\n+  typedef __gnu_cxx::typelist::append<map_typelist, set_typelist>::type container_types;\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"producer_consumer_associative\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "4adccb94654ad1c7f01ec36bc9a7cb1c82c3619b", "filename": "libstdc++-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fproducer_consumer%2Fsequence.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -249,7 +249,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"producer_consumer_sequence\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "ed48eb9412f8fe1a9079988677058e3a7b08f4b6", "filename": "libstdc++-v3/testsuite/performance/23_containers/sort_search/list.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fsort_search%2Flist.cc?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -76,7 +76,7 @@ main()\n \n   typedef test_sequence<thread_type> test_type;\n   test_type test(\"sort_search\");\n-  __gnu_cxx::apply<test_type, container_types> applier;\n+  __gnu_cxx::typelist::apply<test_type, container_types> applier;\n   applier(test);\n \n   return 0;"}, {"sha": "c4819109b19aac683aea866d8dfdff8efd05d42b", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad367a62b3532869209dd3058215eb72b923770/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=cad367a62b3532869209dd3058215eb72b923770", "patch": "@@ -54,9 +54,9 @@\n \n namespace __gnu_test\n {\n-  using __gnu_cxx::typelist;\n-  using __gnu_cxx::transform;\n-  using __gnu_cxx::append;\n+  using __gnu_cxx::typelist::node;\n+  using __gnu_cxx::typelist::transform;\n+  using __gnu_cxx::typelist::append;\n \n   // All the allocators to test.\n   template<typename Tp, bool Thread>\n@@ -69,7 +69,7 @@ namespace __gnu_test\n       typedef __gnu_cxx::__mt_alloc<Tp, pool_policy>\ta3;\n       typedef __gnu_cxx::bitmap_allocator<Tp> \t\ta4;\n       typedef __gnu_cxx::__pool_alloc<Tp> \t\ta5;\n-      typedef typelist<_GLIBCXX_TYPELIST_CHAIN5(a1, a2, a3, a4, a5)> type;\n+      typedef node<_GLIBCXX_TYPELIST_CHAIN5(a1, a2, a3, a4, a5)> type;\n     };\n \n   // Typelists for vector, string, list, deque.\n@@ -385,7 +385,7 @@ template<bool Thread>\n \n     template<class Container>\n       void\n-      operator()(__gnu_cxx::detail::type_to_type<Container>)\n+      operator()(__gnu_cxx::typelist::detail::type_to_type<Container>)\n       {\n \tconst int i = 20000;\n \ttest_container<Container, i, Thread>(_M_filename); "}]}