{"sha": "4a063bec6e3b164cf467ee99e423f9271177be86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwNjNiZWM2ZTNiMTY0Y2Y0NjdlZTk5ZTQyM2Y5MjcxMTc3YmU4Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-07T22:14:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-07T22:14:43Z"}, "message": "c-common.c (signed_or_unsigned_type): Handle machine mode types which have no corresponding C type.\n\n        * c-common.c (signed_or_unsigned_type): Handle machine mode types\n        which have no corresponding C type.\n        * fold_const.c (target_isinf,target_isnan,target_negative): Update\n        the representation of 64-bit doubles to work with 64-bit ints.\n\nFrom-SVN: r45479", "tree": {"sha": "356b8d1f15ff4a7a73cc72dae36b54c788ad92b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356b8d1f15ff4a7a73cc72dae36b54c788ad92b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a063bec6e3b164cf467ee99e423f9271177be86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a063bec6e3b164cf467ee99e423f9271177be86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a063bec6e3b164cf467ee99e423f9271177be86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a063bec6e3b164cf467ee99e423f9271177be86/comments", "author": null, "committer": null, "parents": [{"sha": "2fd7f0c1f8f3efcedf2a466b638a0d95a7398582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fd7f0c1f8f3efcedf2a466b638a0d95a7398582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fd7f0c1f8f3efcedf2a466b638a0d95a7398582"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "75d8514d5a4249e773459f0664125b6873af44f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a063bec6e3b164cf467ee99e423f9271177be86", "patch": "@@ -1,7 +1,14 @@\n-2001-09-06  Aldy Hernandez  <aldyh@redhat.com>\n+2001-09-07  Roman Lechtchinsky  <rl@cs.tu-berlin.de>\n+\n+\t* c-common.c (signed_or_unsigned_type): Handle machine mode types\n+\twhich have no corresponding C type.\n+\t* fold_const.c (target_isinf,target_isnan,target_negative): Update\n+\tthe representation of 64-bit doubles to work with 64-bit ints.\n+\n+2001-09-07  Aldy Hernandez  <aldyh@redhat.com>\n \n-       * config/mips/mips.c (override_options): Do not override ISA when ABI\n-        specified if MIPS_CPU_STRING_DEFAULT was specified.\n+\t* config/mips/mips.c (override_options): Do not override ISA when ABI\n+\tspecified if MIPS_CPU_STRING_DEFAULT was specified.\n \n 2001-09-07  Richard Henderson  <rth@redhat.com>\n \n@@ -111,7 +118,7 @@ Thu Sep  6 11:16:35 2001  Jeffrey A Law  (law@cygnus.com)\n \n 2001-09-05  Ziemowit Laski  <zlaski@apple.com>\n \n-        * objc/objc-act.c (build_message_expr): If a class method cannot\n+\t* objc/objc-act.c (build_message_expr): If a class method cannot\n \tbe found, do not issue a warning if a corresponding instance\n \tmethod exists in the root class.\n "}, {"sha": "72b1417f8d438f199cb35553b32a49da2937a127", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4a063bec6e3b164cf467ee99e423f9271177be86", "patch": "@@ -2071,6 +2071,20 @@ signed_or_unsigned_type (unsignedp, type)\n   if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node))\n     return (unsignedp ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n+\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (intTI_type_node))\n+    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+#endif\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (intDI_type_node))\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (intSI_type_node))\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (intHI_type_node))\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+  if (TYPE_PRECISION (type) == TYPE_PRECISION (intQI_type_node))\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+\n   return type;\n }\n \f"}, {"sha": "7cefaeaef0e756d50dad8337df76905df9b889f1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a063bec6e3b164cf467ee99e423f9271177be86/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4a063bec6e3b164cf467ee99e423f9271177be86", "patch": "@@ -821,10 +821,10 @@ target_isinf (x)\n       unsigned sign      :  1;\n       unsigned exponent  : 11;\n       unsigned mantissa1 : 20;\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n     } little_endian;\n     struct {\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n       unsigned mantissa1 : 20;\n       unsigned exponent  : 11;\n       unsigned sign      :  1;\n@@ -861,10 +861,10 @@ target_isnan (x)\n       unsigned sign      :  1;\n       unsigned exponent  : 11;\n       unsigned mantissa1 : 20;\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n     } little_endian;\n     struct {\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n       unsigned mantissa1 : 20;\n       unsigned exponent  : 11;\n       unsigned sign      :  1;\n@@ -901,10 +901,10 @@ target_negative (x)\n       unsigned sign      :  1;\n       unsigned exponent  : 11;\n       unsigned mantissa1 : 20;\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n     } little_endian;\n     struct {\n-      unsigned mantissa2;\n+      unsigned mantissa2 : 32;\n       unsigned mantissa1 : 20;\n       unsigned exponent  : 11;\n       unsigned sign      :  1;"}]}