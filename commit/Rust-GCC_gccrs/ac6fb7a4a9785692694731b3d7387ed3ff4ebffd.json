{"sha": "ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2ZmI3YTRhOTc4NTY5MjY5NDczMWIzZDczODdlZDNmZjRlYmZmZA==", "commit": {"author": {"name": "Janis Johnson", "email": "janisjo@codesourcery.com", "date": "2011-09-30T17:33:41Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2011-09-30T17:33:41Z"}, "message": "re PR c++/44473 (iterators already defined for std::vector when using std::decimal)\n\ngcc/cp\n\tPR c++/44473\n\t* mangle.c (write_type): Handle CV qualifiers for decimal classes.\ngcc/testsuite\n\tPR c++/44473\n\t* g++.dg/dfp/44473-1.C: New test.\n\t* g++.dg/dfp/44473-2.C: New test.\n\t* g++.dg/dfp/mangle-1.C: New test.\n\t* g++.dg/dfp/mangle-2.C: New test.\n\t* g++.dg/dfp/mangle-3.C: New test.\n\t* g++.dg/dfp/mangle-4.C: New test.\n\t* g++.dg/dfp/mangle-5.C: New test.\n\nFrom-SVN: r179399", "tree": {"sha": "caf15736b1c3d643de3ebaba7138eb88fee004ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf15736b1c3d643de3ebaba7138eb88fee004ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/comments", "author": null, "committer": null, "parents": [{"sha": "06ef8c2e5581d0ec0bb45775eb70535695d61358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ef8c2e5581d0ec0bb45775eb70535695d61358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ef8c2e5581d0ec0bb45775eb70535695d61358"}], "stats": {"total": 334, "additions": 329, "deletions": 5}, "files": [{"sha": "4cd3ff9b3aa234e0d836352314ecfb5dd86b10e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -1,3 +1,8 @@\n+2011-09-30  Janis Johnson  <janisjo@codesourcery.com>\n+\n+\tPR c++/44473\n+\t* mangle.c (write_type): Handle CV qualifiers for decimal classes.\n+\n 2011-09-26   Andi Kleen <ak@linux.intel.com>\n \n \t* repo.c (finish_repo): Use HOST_WIDE_INT_PRINT_HEX_PURE."}, {"sha": "55851e646b2e169c78d71a79c2dac86a0b0b8de9", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -1802,11 +1802,6 @@ write_type (tree type)\n   if (find_substitution (type))\n     return;\n \n-  /* According to the C++ ABI, some library classes are passed the\n-     same as the scalar type of their single member and use the same\n-     mangling.  */\n-  if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n-    type = TREE_TYPE (first_field (type));\n \n   if (write_CV_qualifiers_for_type (type) > 0)\n     /* If TYPE was CV-qualified, we just wrote the qualifiers; now\n@@ -1826,6 +1821,12 @@ write_type (tree type)\n       /* See through any typedefs.  */\n       type = TYPE_MAIN_VARIANT (type);\n \n+      /* According to the C++ ABI, some library classes are passed the\n+\t same as the scalar type of their single member and use the same\n+\t mangling.  */\n+      if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n+\ttype = TREE_TYPE (first_field (type));\n+\n       if (TYPE_PTRMEM_P (type))\n \twrite_pointer_to_member_type (type);\n       else"}, {"sha": "d7b163a36f7ce949a9ffbbe259b618050906762a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -1,3 +1,14 @@\n+2011-09-30  Janis Johnson  <janisjo@codesourcery.com>\n+\n+\tPR c++/44473\n+\t* g++.dg/dfp/44473-1.C: New test.\n+\t* g++.dg/dfp/44473-2.C: New test.\n+\t* g++.dg/dfp/mangle-1.C: New test.\n+\t* g++.dg/dfp/mangle-2.C: New test.\n+\t* g++.dg/dfp/mangle-3.C: New test.\n+\t* g++.dg/dfp/mangle-4.C: New test.\n+\t* g++.dg/dfp/mangle-5.C: New test.\n+\n 2011-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/50571"}, {"sha": "38689fa165dad3995e7ca20ab45176841431a587", "filename": "gcc/testsuite/g++.dg/dfp/44473-1.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-1.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do assemble } */\n+\n+/* Minimized from the testcase in PR c++/44473; mangling of decimal types\n+   did not include CV qualifiers. */\n+\n+namespace std\n+{\n+  namespace decimal\n+  {\n+    class decimal32\n+    {\n+    public:\n+      typedef float __decfloat32 __attribute__ ((mode (SD)));\n+      explicit decimal32 (float __r):__val (__r) {}\n+    private:\n+      __decfloat32 __val;\n+    };\n+  };\n+\n+  template <typename _BI1, typename _BI2>\n+  _BI2 copy_backward (_BI1 __first, _BI2 __result);\n+}\n+\n+namespace __gnu_cxx\n+{\n+  template <typename _Iterator, typename _Container>\n+  class __normal_iterator\n+  {\n+  public:\n+    explicit __normal_iterator (const _Iterator & __i) {}\n+    const _Iterator & base () const {}\n+  };\n+\n+  template <typename _IteratorL, typename _IteratorR, typename _Container>\n+  bool operator== (const __normal_iterator <_IteratorL, _Container> &__lhs,\n+\t\t   const __normal_iterator <_IteratorR, _Container> &__rhs)\n+  {\n+    return __lhs.base () == __rhs.base ();\n+  }\n+\n+  template <typename _Tp>\n+  class new_allocator\n+  {\n+  public:\n+    typedef _Tp *pointer;\n+    typedef const _Tp *const_pointer;\n+    template <typename _Tp1>\n+    struct rebind\n+    {\n+      typedef new_allocator <_Tp1> other;\n+    };\n+  };\n+}\n+\n+namespace std\n+{\n+  template <typename _Tp>\n+  class allocator:public __gnu_cxx::new_allocator <_Tp> {};\n+\n+  template <typename _Tp, typename _Alloc>\n+  struct _Vector_base\n+  {\n+    typedef typename _Alloc::template rebind <_Tp>::other _Tp_alloc_type;\n+    struct _Vector_impl:public _Tp_alloc_type\n+    {\n+      typename _Tp_alloc_type::pointer _M_finish;\n+    };\n+  public:  _Vector_impl _M_impl;\n+  };\n+\n+  template <typename _Tp, typename _Alloc = std::allocator <_Tp> >\n+  class vector:protected _Vector_base <_Tp, _Alloc>\n+  {\n+    typedef _Vector_base <_Tp, _Alloc> _Base;\n+    typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\n+  public:\n+    typedef _Tp value_type;\n+    typedef typename _Tp_alloc_type::pointer pointer;\n+    typedef typename _Tp_alloc_type::const_pointer const_pointer;\n+    typedef __gnu_cxx::__normal_iterator <pointer, vector> iterator;\n+    typedef __gnu_cxx::__normal_iterator <const_pointer, vector>\n+      const_iterator;\n+    const_iterator begin () const;\n+    iterator end ()\n+    {\n+      return iterator (this->_M_impl._M_finish);\n+    }\n+    const_iterator end () const\n+    {\n+      return const_iterator (this->_M_impl._M_finish);\n+    }\n+    bool empty () const\n+    {\n+      return begin () == end ();\n+    }\n+    void push_back (const value_type & __x)\n+    {\n+      _M_insert_aux (end ());\n+    }\n+    void _M_insert_aux (iterator __position);\n+  };\n+\n+  template <typename _Tp, typename _Alloc>\n+  void vector <_Tp, _Alloc>::_M_insert_aux (iterator __position)\n+  {\n+    std::copy_backward (__position.base (), this->_M_impl._M_finish - 1);\n+  }\n+}\n+\n+std::vector <std::decimal::decimal32> vec;\n+\n+int\n+foo ()\n+{\n+  return (vec.empty ()) ? 1 : 0;\n+}\n+\n+bool\n+bar ()\n+{\n+  vec.push_back (std::decimal::decimal32 (0));\n+}"}, {"sha": "311f62299b38e9109eb6500739c9996dde16e78b", "filename": "gcc/testsuite/g++.dg/dfp/44473-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2F44473-2.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal64 {\n+      public:\n+\ttypedef float __decfloat64 __attribute__ ((mode (DD)));\n+\texplicit decimal64 (int __r):__val (__r) {}\n+      private:\n+\t__decfloat64 __val;\n+    };\n+  }\n+}\n+\n+int bar (const std::decimal::decimal64 & x) { }\n+\n+int foo ()\n+{\n+  std::decimal::decimal64 x(0);\n+  bar (x);\n+}\n+\n+// { dg-final { scan-assembler \"_Z3barRKDd:\" } }"}, {"sha": "455d3e4c0ef6ccde15d56666d2618e8ef5ee0411", "filename": "gcc/testsuite/g++.dg/dfp/mangle-1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-1.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+// Derived from g++.dg/abi/mangle13.C.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal64 {\n+      public:\n+\ttypedef float __decfloat64 __attribute__ ((mode (DD)));\n+\texplicit decimal64 (float __r):__val (__r) {}\n+      private:\n+\t__decfloat64 __val;\n+    };\n+  }\n+}\n+\n+struct A {\n+  template <typename T> std::decimal::decimal64 f ();\n+  std::decimal::decimal64 operator+();\n+  operator std::decimal::decimal64 ();\n+  template <typename T>\n+  std::decimal::decimal64 operator-();\n+};\n+\n+typedef std::decimal::decimal64 (A::*P)();\n+\n+template <P> struct S {};\n+\n+template <typename T> void g (S<&T::template f<std::decimal::decimal64> >) {}\n+template <typename T> void g (S<&T::operator+ >) {}\n+template <typename T> void g (S<&T::operator std::decimal::decimal64>) {}\n+template <typename T> void g (S<&T::template operator- <std::decimal::decimal64> >) {}\n+\n+template void g<A> (S<&A::f<std::decimal::decimal64> >);\n+template void g<A> (S<&A::operator+>);\n+template void g<A> (S<&A::operator std::decimal::decimal64>);\n+\n+// { dg-final { scan-assembler \"\\n?_Z1gI1AEv1SIXadsrT_1fIDdEEE\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n?_Z1gI1AEv1SIXadsrT_plEE\\[: \\t\\n\\]\" } }"}, {"sha": "1af9aa1a03b2a64a42bacfd46573a6ef17a06827", "filename": "gcc/testsuite/g++.dg/dfp/mangle-2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-2.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+// Derived from g++.dg/abi/mangle15.C.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal64 {\n+      public:\n+\ttypedef float __decfloat64 __attribute__ ((mode (DD)));\n+\texplicit decimal64 (float __r):__val (__r) {}\n+      private:\n+\t__decfloat64 __val;\n+    };\n+  }\n+}\n+\n+struct A {\n+  template <typename T> std::decimal::decimal64 f ();\n+};\n+\n+typedef std::decimal::decimal64 (A::*P)();\n+\n+template <P> struct S {};\n+\n+void g (S<&A::f<std::decimal::decimal64> >) {}\n+\n+// { dg-final { scan-assembler \"\\n?_Z1g1SIXadL_ZN1A1fIDdEEDdvEEE\\[: \\t\\n\\]\" } }"}, {"sha": "c716ed0e91995e59f2542b2ba2e56999ca49ef34", "filename": "gcc/testsuite/g++.dg/dfp/mangle-3.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-3.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+// Derived from g++.dg/abi/mangle20-1.C.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal64 {\n+      public:\n+\ttypedef float __decfloat64 __attribute__ ((mode (DD)));\n+\texplicit decimal64 (int __r):__val (__r) {}\n+      private:\n+\t__decfloat64 __val;\n+    };\n+  }\n+}\n+\n+template <int I> void f(std::decimal::decimal64 (*)[2]) {}\n+template <int I> void g(std::decimal::decimal64 (*)[I+2]) {}\n+\n+static const std::decimal::decimal64 I(1);\n+static const std::decimal::decimal64 J(2);\n+\n+template void f<1>(std::decimal::decimal64 (*)[2]);\n+template void g<1>(std::decimal::decimal64 (*)[3]);\n+\n+//  { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvPA2_Dd\\[: \\t\\n\\]\" } }\n+//  { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvPAplT_Li2E_Dd\\[: \\t\\n\\]\" } }"}, {"sha": "899d5661c0d6126d3431913961d3b8f6cb94a5d1", "filename": "gcc/testsuite/g++.dg/dfp/mangle-4.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-4.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+// Derived from g++.dg/abi/mangle30.C.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal64 {\n+      public:\n+\ttypedef float __decfloat64 __attribute__ ((mode (DD)));\n+\texplicit decimal64 (int __r):__val (__r) {}\n+      private:\n+\t__decfloat64 __val;\n+    };\n+  }\n+}\n+\n+struct A\n+{\n+  template <class T>\n+  struct B\n+  {\n+    typedef T myT;\n+  };\n+};\n+\n+template <class T>\n+void f (T t, typename T::template B<std::decimal::decimal64>::myT u, typename T::template B<int>::myT v);\n+\n+void foo ()\n+{\n+  f (A(), std::decimal::decimal64(0), 1);\n+}\n+\n+// { dg-final { scan-assembler \"_Z1fI1AEvT_NS1_1BIDdE3myTENS2_IiE3myTE\" } }"}, {"sha": "794577f866a381d7befe588ab47e2132c8a0419e", "filename": "gcc/testsuite/g++.dg/dfp/mangle-5.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6fb7a4a9785692694731b3d7387ed3ff4ebffd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdfp%2Fmangle-5.C?ref=ac6fb7a4a9785692694731b3d7387ed3ff4ebffd", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Mangling of classes from std::decimal are special-cased.\n+// Derived from g++.dg/abi/mangle35.C.\n+\n+namespace std {\n+  namespace decimal {\n+    class decimal128 {\n+      public:\n+\ttypedef float __decfloat128 __attribute__ ((mode (TD)));\n+\texplicit decimal128 (int __r):__val (__r) {}\n+      private:\n+\t__decfloat128 __val;\n+    };\n+  }\n+}\n+\n+template<void (*)()> struct A {};\n+\n+template<typename> void foo();\n+\n+template<typename T> A<foo<T> > bar();\n+\n+void baz()\n+{\n+  bar<std::decimal::decimal128>();\n+}\n+\n+// { dg-final { scan-assembler \"_Z3barIDeE1AIX3fooIT_EEEv\" } }"}]}