{"sha": "5afaa917dac97e43afb9f2b6a590b30973d85e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmYWE5MTdkYWM5N2U0M2FmYjlmMmI2YTU5MGIzMDk3M2Q4NWUyMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2009-04-15T09:34:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2009-04-15T09:34:37Z"}, "message": "rs6000.c (rs6000_init_builtins): Set TYPE_NAME of our distinct integral and vector types.\n\n./\t* config/rs6000/rs6000.c (rs6000_init_builtins): Set TYPE_NAME of\n\tour distinct integral and vector types.\ntestsuite/\n\t* g++.dg/ext/altivec-17.C: New.\n\nFrom-SVN: r146092", "tree": {"sha": "35e1ab2456618de07656e58f1560d05a0ec3709f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e1ab2456618de07656e58f1560d05a0ec3709f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5afaa917dac97e43afb9f2b6a590b30973d85e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afaa917dac97e43afb9f2b6a590b30973d85e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afaa917dac97e43afb9f2b6a590b30973d85e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afaa917dac97e43afb9f2b6a590b30973d85e21/comments", "author": null, "committer": null, "parents": [{"sha": "f7ca1d041c1766a16a016d959395370bea93d069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ca1d041c1766a16a016d959395370bea93d069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ca1d041c1766a16a016d959395370bea93d069"}], "stats": {"total": 138, "additions": 90, "deletions": 48}, "files": [{"sha": "491608cdd7b4fbc7e5b7be198f9a0de6893c69cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5afaa917dac97e43afb9f2b6a590b30973d85e21", "patch": "@@ -1,3 +1,8 @@\n+2009-04-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Set TYPE_NAME of\n+\tour distinct integral and vector types.\n+\n 2009-04-15  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* class.c (build_vtbl_ref_1): Remove call to assemble_external."}, {"sha": "6500cc79291678c4d07d37e6c2ec90337ea6155f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 48, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5afaa917dac97e43afb9f2b6a590b30973d85e21", "patch": "@@ -9374,6 +9374,8 @@ build_opaque_vector_type (tree node, int nunits)\n static void\n rs6000_init_builtins (void)\n {\n+  tree tdecl;\n+  \n   V2SI_type_node = build_vector_type (intSI_type_node, 2);\n   V2SF_type_node = build_vector_type (float_type_node, 2);\n   V4HI_type_node = build_vector_type (intHI_type_node, 4);\n@@ -9411,60 +9413,75 @@ rs6000_init_builtins (void)\n   float_type_internal_node = float_type_node;\n   void_type_internal_node = void_type_node;\n \n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__bool char\"),\n-\t\t\t\t\t    bool_char_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__bool short\"),\n-\t\t\t\t\t    bool_short_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__bool int\"),\n-\t\t\t\t\t    bool_int_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__pixel\"),\n-\t\t\t\t\t    pixel_type_node));\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool char\"),\n+\t\t      bool_char_type_node);\n+  TYPE_NAME (bool_char_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool short\"),\n+\t\t      bool_short_type_node);\n+  TYPE_NAME (bool_short_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__bool int\"),\n+\t\t      bool_int_type_node);\n+  TYPE_NAME (bool_int_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__pixel\"),\n+\t\t      pixel_type_node);\n+  TYPE_NAME (pixel_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n \n   bool_V16QI_type_node = build_vector_type (bool_char_type_node, 16);\n   bool_V8HI_type_node = build_vector_type (bool_short_type_node, 8);\n   bool_V4SI_type_node = build_vector_type (bool_int_type_node, 4);\n   pixel_V8HI_type_node = build_vector_type (pixel_type_node, 8);\n \n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector unsigned char\"),\n-\t\t\t\t\t    unsigned_V16QI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector signed char\"),\n-\t\t\t\t\t    V16QI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector __bool char\"),\n-\t\t\t\t\t    bool_V16QI_type_node));\n-\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector unsigned short\"),\n-\t\t\t\t\t    unsigned_V8HI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector signed short\"),\n-\t\t\t\t\t    V8HI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector __bool short\"),\n-\t\t\t\t\t    bool_V8HI_type_node));\n-\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector unsigned int\"),\n-\t\t\t\t\t    unsigned_V4SI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector signed int\"),\n-\t\t\t\t\t    V4SI_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector __bool int\"),\n-\t\t\t\t\t    bool_V4SI_type_node));\n-\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector float\"),\n-\t\t\t\t\t    V4SF_type_node));\n-  (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n-\t\t\t\t\t    get_identifier (\"__vector __pixel\"),\n-\t\t\t\t\t    pixel_V8HI_type_node));\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned char\"),\n+\t\t      unsigned_V16QI_type_node);\n+  TYPE_NAME (unsigned_V16QI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed char\"),\n+\t\t      V16QI_type_node);\n+  TYPE_NAME (V16QI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool char\"),\n+\t\t      bool_V16QI_type_node);\n+  TYPE_NAME ( bool_V16QI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned short\"),\n+\t\t      unsigned_V8HI_type_node);\n+  TYPE_NAME (unsigned_V8HI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed short\"),\n+\t\t      V8HI_type_node);\n+  TYPE_NAME (V8HI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool short\"),\n+\t\t      bool_V8HI_type_node);\n+  TYPE_NAME (bool_V8HI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector unsigned int\"),\n+\t\t      unsigned_V4SI_type_node);\n+  TYPE_NAME (unsigned_V4SI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector signed int\"),\n+\t\t      V4SI_type_node);\n+  TYPE_NAME (V4SI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __bool int\"),\n+\t\t      bool_V4SI_type_node);\n+  TYPE_NAME (bool_V4SI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector float\"),\n+\t\t      V4SF_type_node);\n+  TYPE_NAME (V4SF_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n+  tdecl = build_decl (TYPE_DECL, get_identifier (\"__vector __pixel\"),\n+\t\t      pixel_V8HI_type_node);\n+  TYPE_NAME (pixel_V8HI_type_node) = tdecl;\n+  (*lang_hooks.decls.pushdecl) (tdecl);\n \n   if (TARGET_PAIRED_FLOAT)\n     paired_init_builtins ();"}, {"sha": "a6e9bf7329ef0adf8b95afe37391748c1c92bb98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5afaa917dac97e43afb9f2b6a590b30973d85e21", "patch": "@@ -1,3 +1,7 @@\n+2009-04-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/ext/altivec-17.C: New.\n+\n 2009-04-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat.dg/sync1.ads: Fix error now flagged by gnat."}, {"sha": "7db10e502b15b98380f0bd4092db9544a0928d50", "filename": "gcc/testsuite/g++.dg/ext/altivec-17.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afaa917dac97e43afb9f2b6a590b30973d85e21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-17.C?ref=5afaa917dac97e43afb9f2b6a590b30973d85e21", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target powerpc*-*-* } }\n+// { dg-require-effective-target powerpc_altivec_ok }\n+// { dg-options \"-maltivec\" }\n+\n+// Make sure that bool vectors have distinct names to int vectors\n+\n+#define vector__ __attribute__((altivec (vector__)))\n+#define bool__ __attribute__((altivec(bool__)))\n+\n+typedef vector__ unsigned int simd_type;\n+typedef vector__ bool__ int bool_simd_type;\n+\n+void Foo (bool_simd_type const &a)\n+{\n+  simd_type const &v = a; // { dg-error \"'const unsigned int __vector__&' from expression of type 'const __bool int __vector__'\" }\n+}"}]}