{"sha": "ef57eeb23260872cb601a848493488c24cb309c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY1N2VlYjIzMjYwODcyY2I2MDFhODQ4NDkzNDg4YzI0Y2IzMDljMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-23T10:42:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-23T10:42:32Z"}, "message": "Fix vect_float markup for a couple of tests (PR 83888)\n\nvect_float is true for arm*-*-* targets, but the support is only\navailable when -funsafe-math-optimizations is on.  This caused\nfailures in two tests that disable fast-math.\n\nThe easiest fix seemed to be to add a new target selector for\n\"vect_float without special options\".\n\n2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR testsuite/83888\n\t* doc/sourcebuild.texi (vect_float): Say that the selector\n\tonly describes the situation when -funsafe-math-optimizations is on.\n\t(vect_float_strict): Document.\n\ngcc/testsuite/\n\tPR testsuite/83888\n\t* lib/target-supports.exp (check_effective_target_vect_float): Say\n\tthat the result only holds when -funsafe-math-optimizations is on.\n\t(check_effective_target_vect_float_strict): New procedure.\n\t* gcc.dg/vect/no-fast-math-vect16.c: Use vect_float_strict instead\n\tof vect_float.\n\t* gcc.dg/vect/vect-reduc-6.c: Likewise.\n\nFrom-SVN: r256977", "tree": {"sha": "98b0c0d20b46c58cf03d997254c1bb7c56b28b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b0c0d20b46c58cf03d997254c1bb7c56b28b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef57eeb23260872cb601a848493488c24cb309c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef57eeb23260872cb601a848493488c24cb309c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef57eeb23260872cb601a848493488c24cb309c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef57eeb23260872cb601a848493488c24cb309c1/comments", "author": null, "committer": null, "parents": [{"sha": "97e52238b292ca744368f66980533c578838e94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e52238b292ca744368f66980533c578838e94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e52238b292ca744368f66980533c578838e94c"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "94f2ad75ce1506285e1cca500c3575d5c7acdb21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -1,3 +1,10 @@\n+2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR testsuite/83888\n+\t* doc/sourcebuild.texi (vect_float): Say that the selector\n+\tonly describes the situation when -funsafe-math-optimizations is on.\n+\t(vect_float_strict): Document.\n+\n 2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83965"}, {"sha": "bf44d158683dfb4047dfdd446db39e692b69584f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -1403,7 +1403,13 @@ The target's preferred vector alignment is the same as the element\n alignment.\n \n @item vect_float\n-Target supports hardware vectors of @code{float}.\n+Target supports hardware vectors of @code{float} when\n+@option{-funsafe-math-optimizations} is in effect.\n+\n+@item vect_float_strict\n+Target supports hardware vectors of @code{float} when\n+@option{-funsafe-math-optimizations} is not in effect.\n+This implies @code{vect_float}.\n \n @item vect_int\n Target supports hardware vectors of @code{int}."}, {"sha": "b684430fccb87322d8eb2e8904ba01f7e791fe7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -1,3 +1,13 @@\n+2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR testsuite/83888\n+\t* lib/target-supports.exp (check_effective_target_vect_float): Say\n+\tthat the result only holds when -funsafe-math-optimizations is on.\n+\t(check_effective_target_vect_float_strict): New procedure.\n+\t* gcc.dg/vect/no-fast-math-vect16.c: Use vect_float_strict instead\n+\tof vect_float.\n+\t* gcc.dg/vect/vect-reduc-6.c: Likewise.\n+\n 2018-01-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/83965"}, {"sha": "7a148e41d513ea1d78693fc54a74b761ace81c3b", "filename": "gcc/testsuite/gcc.dg/vect/no-fast-math-vect16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-fast-math-vect16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-fast-math-vect16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-fast-math-vect16.c?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_float_strict } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "ad148046a8eca15bfdb41335f4f91c219c31b71a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-6.c?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_float } */\n+/* { dg-require-effective-target vect_float_strict } */\n /* { dg-additional-options \"-fno-fast-math\" } */\n \n #include <stdarg.h>"}, {"sha": "24514233ceaadcd9d727b02e0ad9fd023c291d67", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef57eeb23260872cb601a848493488c24cb309c1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ef57eeb23260872cb601a848493488c24cb309c1", "patch": "@@ -5492,7 +5492,8 @@ proc check_effective_target_vect_long { } {\n     return $answer\n }\n \n-# Return 1 if the target supports hardware vectors of float, 0 otherwise.\n+# Return 1 if the target supports hardware vectors of float when\n+# -funsafe-math-optimizations is enabled, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n@@ -5525,6 +5526,14 @@ proc check_effective_target_vect_float { } {\n     return $et_vect_float_saved($et_index)\n }\n \n+# Return 1 if the target supports hardware vectors of float without\n+# -funsafe-math-optimizations being enabled, 0 otherwise.\n+\n+proc check_effective_target_vect_float_strict { } {\n+    return [expr { [check_effective_target_vect_float]\n+\t\t   && ![istarget arm*-*-*] }]\n+}\n+\n # Return 1 if the target supports hardware vectors of double, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result."}]}