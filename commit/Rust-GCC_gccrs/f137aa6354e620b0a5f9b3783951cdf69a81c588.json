{"sha": "f137aa6354e620b0a5f9b3783951cdf69a81c588", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzN2FhNjM1NGU2MjBiMGE1ZjliMzc4Mzk1MWNkZjY5YTgxYzU4OA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-03-23T13:42:46Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-03-23T13:42:46Z"}, "message": "2084.md: Enable all insn reservations also for z9_ec cpu attribute value.\n\n2011-03-23  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/2084.md: Enable all insn reservations also for z9_ec\n\tcpu attribute value.\n\t* config/s390/s390-opts.h (enum s390_arch_option): Remove.\n\t(enum processor_type): Add PROCESSOR_2094_Z9_EC.\n\t* config/s390/s390.c (processor_flags_table): New constant array.\n\t(s390_handle_arch_option): Remove.\n\t(s390_handle_option): Remove s390_handle_arch_option invocations\n\tand OPT_mwarn_framesize_ handling.\n\t(s390_option_override): Remove s390_handle_arch_option invocation.\n\t(s390_emit_prologue): Remove use of HOST_WIDE_INT_PRINT_DEC in\n\twarnings.\n\t* config/s390/s390.md (cpu attribute): Add z9_ec value.\n\t* config/s390/s390.opt (s390_tune, s390_arch)\n\t(march=): Replace s390_arch_option enum and values with\n\tprocessor_type.  Set variable name to s390_arch.  Set\n\tinitialization value.\n\t(mtune=): Replace s390_arch_option with processor_type.  Set\n\tvariable name to s390_tune.  Set initialization value.\n\nFrom-SVN: r171350", "tree": {"sha": "8c3ed9b4da9e845b7f2fe45b3684d3e43f469af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c3ed9b4da9e845b7f2fe45b3684d3e43f469af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f137aa6354e620b0a5f9b3783951cdf69a81c588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f137aa6354e620b0a5f9b3783951cdf69a81c588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f137aa6354e620b0a5f9b3783951cdf69a81c588", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f137aa6354e620b0a5f9b3783951cdf69a81c588/comments", "author": null, "committer": null, "parents": [{"sha": "8d985ccd2e833b81201295c090ba4278b71ed4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d985ccd2e833b81201295c090ba4278b71ed4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d985ccd2e833b81201295c090ba4278b71ed4d6"}], "stats": {"total": 219, "additions": 93, "deletions": 126}, "files": [{"sha": "de143563a2f8a92a48323c4535b1aa28931a0bec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -1,3 +1,24 @@\n+2011-03-23  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/2084.md: Enable all insn reservations also for z9_ec\n+\tcpu attribute value.\n+\t* config/s390/s390-opts.h (enum s390_arch_option): Remove.\n+\t(enum processor_type): Add PROCESSOR_2094_Z9_EC.\n+\t* config/s390/s390.c (processor_flags_table): New constant array.\n+\t(s390_handle_arch_option): Remove.\n+\t(s390_handle_option): Remove s390_handle_arch_option invocations\n+\tand OPT_mwarn_framesize_ handling.\n+\t(s390_option_override): Remove s390_handle_arch_option invocation.\n+\t(s390_emit_prologue): Remove use of HOST_WIDE_INT_PRINT_DEC in\n+\twarnings.\n+\t* config/s390/s390.md (cpu attribute): Add z9_ec value.\n+\t* config/s390/s390.opt (s390_tune, s390_arch)\n+\t(march=): Replace s390_arch_option enum and values with\n+\tprocessor_type.  Set variable name to s390_arch.  Set\n+\tinitialization value.\n+\t(mtune=): Replace s390_arch_option with processor_type.  Set\n+\tvariable name to s390_tune.  Set initialization value.\n+\n 2011-03-23  Julian Brown  <julian@codesourcery.com>\n \n \t* expr.c (expand_expr_real_1): Only use BLKmode for volatile"}, {"sha": "2379f965e2ccab2689c88e19c2d0325c4883be69", "filename": "gcc/config/s390/2084.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2F2084.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2F2084.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2084.md?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -62,69 +62,69 @@\n ;;\n \n (define_insn_reservation \"x_int\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (and (eq_attr \"type\" \"integer\")\n             (eq_attr \"atype\" \"reg\")))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_agen\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (and (eq_attr \"type\" \"integer\")\n             (eq_attr \"atype\" \"agen\")))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_lr\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"lr\"))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_la\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"la\"))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_larl\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"larl\"))\n   \"x-e1-st,x-wr-st\")\n \n (define_insn_reservation \"x_load\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"load\"))\n   \"x-e1-st+x-mem,x-wr-st\")\n \n (define_insn_reservation \"x_store\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"store\"))\n   \"x-e1-st+x_store_tok,x-wr-st\")\n \n (define_insn_reservation \"x_branch\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"branch\"))\n   \"x_e1_r,x_wr_r\")\n \n (define_insn_reservation \"x_call\" 5\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"jsr\"))\n   \"x-e1-np*5,x-wr-np\")\n \n (define_insn_reservation \"x_mul_hi\" 2\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"imulhi\"))\n   \"x-e1-np*2,x-wr-np\")\n \n (define_insn_reservation \"x_mul_sidi\" 4\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"imulsi,imuldi\"))\n   \"x-e1-np*4,x-wr-np\")\n \n (define_insn_reservation \"x_div\" 10\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"idiv\"))\n   \"x-e1-np*10,x-wr-np\")\n \n (define_insn_reservation \"x_sem\" 17\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"sem\"))\n   \"x-e1-np+x-mem,x-e1-np*16,x-wr-st\")\n \n@@ -133,27 +133,27 @@\n ;;\n \n (define_insn_reservation \"x_cs\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"cs\"))\n   \"x-e1-np,x-wr-np\")\n \n (define_insn_reservation \"x_vs\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"vs\"))\n   \"x-e1-np*10,x-wr-np\")\n \n (define_insn_reservation \"x_stm\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"stm\"))\n   \"(x-e1-np+x_store_tok)*10,x-wr-np\")\n \n (define_insn_reservation \"x_lm\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"lm\"))\n   \"x-e1-np*10,x-wr-np\")\n \n (define_insn_reservation \"x_other\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"other\"))\n   \"x-e1-np,x-wr-np\")\n \n@@ -162,88 +162,88 @@\n ;;\n \n (define_insn_reservation \"x_fsimptf\" 7\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fsimptf,fhex\"))\n   \"x_e1_t*2,x-wr-fp\")\n \n (define_insn_reservation \"x_fsimpdf\" 6\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fsimpdf,fmuldf,fmadddf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_fsimpsf\" 6\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fsimpsf,fmulsf,fmaddsf,fhex\"))\n   \"x_e1_t,x-wr-fp\")\n \n \n (define_insn_reservation \"x_fmultf\" 33\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fmultf\"))\n   \"x_e1_t*27,x-wr-fp\")\n \n \n (define_insn_reservation \"x_fdivtf\" 82\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fdivtf,fsqrttf\"))\n   \"x_e1_t*76,x-wr-fp\")\n \n (define_insn_reservation \"x_fdivdf\" 36\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fdivdf,fsqrtdf\"))\n   \"x_e1_t*30,x-wr-fp\")\n \n (define_insn_reservation \"x_fdivsf\" 36\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fdivsf,fsqrtsf\"))\n   \"x_e1_t*30,x-wr-fp\")\n \n \n (define_insn_reservation \"x_floadtf\" 6\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"floadtf\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_floaddf\" 6\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"floaddf\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_floadsf\" 6\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"floadsf\"))\n   \"x_e1_t,x-wr-fp\")\n \n \n (define_insn_reservation \"x_fstoredf\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fstoredf\"))\n   \"x_e1_t,x-wr-fp\")\n \n (define_insn_reservation \"x_fstoresf\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"fstoresf\"))\n   \"x_e1_t,x-wr-fp\")\n \n \n (define_insn_reservation \"x_ftrunctf\" 16\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"ftrunctf\"))\n   \"x_e1_t*10,x-wr-fp\")\n \n (define_insn_reservation \"x_ftruncdf\" 11\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"ftruncdf\"))\n   \"x_e1_t*5,x-wr-fp\")\n \n \n (define_insn_reservation \"x_ftoi\" 1\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"ftoi\"))\n   \"x_e1_t*3,x-wr-fp\")\n \n (define_insn_reservation \"x_itof\" 7\n-  (and (eq_attr \"cpu\" \"z990,z9_109\")\n+  (and (eq_attr \"cpu\" \"z990,z9_109,z9_ec\")\n        (eq_attr \"type\" \"itoftf,itofdf,itofsf\"))\n   \"x_e1_t*3,x-wr-fp\")\n "}, {"sha": "668aaaa846e39ec4c85593566663a1761be570db", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -32,26 +32,10 @@ enum processor_type\n   PROCESSOR_2064_Z900,\n   PROCESSOR_2084_Z990,\n   PROCESSOR_2094_Z9_109,\n+  PROCESSOR_2094_Z9_EC,\n   PROCESSOR_2097_Z10,\n   PROCESSOR_2817_Z196,\n   PROCESSOR_max\n };\n \n-/* This enumeration must match processor_alias_table in\n-   s390_handle_arch_option.  It is different from enum processor_type\n-   because some processors differ for option handling but not for\n-   scheduling.  */\n-\n-enum s390_arch_option\n-{\n-  s390_arch_g5,\n-  s390_arch_g6,\n-  s390_arch_z900,\n-  s390_arch_z990,\n-  s390_arch_z9_109,\n-  s390_arch_z9_ec,\n-  s390_arch_z10,\n-  s390_arch_z196\n-};\n-\n #endif"}, {"sha": "2a299c2aa5a12b5d48aa6008fb72f9b056f78451", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 25, "deletions": 55, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -55,6 +55,21 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"opts.h\"\n \n+static const int processor_flags_table[] =\n+  {\n+    /* g5 */     PF_IEEE_FLOAT,\n+    /* g6 */     PF_IEEE_FLOAT,\n+    /* z900 */   PF_IEEE_FLOAT | PF_ZARCH,\n+    /* z990 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT,\n+    /* z9-109 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM,\n+    /* z9-ec */  PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP,\n+    /* z10 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10,\n+    /* z196 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196\n+  };\n \n /* Define the specific costs for a given cpu.  */\n \n@@ -1530,47 +1545,12 @@ s390_option_init_struct (struct gcc_options *opts)\n   opts->x_flag_asynchronous_unwind_tables = 1;\n }\n \n-/* Set *TYPE and *FLAGS to the associated processor_type and\n-   processor_flags for processor ARCH.  */\n-\n-static void\n-s390_handle_arch_option (enum s390_arch_option arch,\n-\t\t\t enum processor_type *type,\n-\t\t\t int *flags)\n-{\n-  /* This must match enum s390_arch_option in s390-opts.h.  */\n-  static struct pta\n-    {\n-      const enum processor_type processor;\n-      const int flags;\t\t\t/* From enum processor_flags. */\n-    }\n-  const processor_alias_table[] =\n-    {\n-      {PROCESSOR_9672_G5, PF_IEEE_FLOAT},\n-      {PROCESSOR_9672_G6, PF_IEEE_FLOAT},\n-      {PROCESSOR_2064_Z900, PF_IEEE_FLOAT | PF_ZARCH},\n-      {PROCESSOR_2084_Z990, PF_IEEE_FLOAT | PF_ZARCH\n-\t\t\t\t    | PF_LONG_DISPLACEMENT},\n-      {PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n-                                       | PF_LONG_DISPLACEMENT | PF_EXTIMM},\n-      {PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n-                             | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP },\n-      {PROCESSOR_2097_Z10, PF_IEEE_FLOAT | PF_ZARCH\n-       | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10},\n-      {PROCESSOR_2817_Z196, PF_IEEE_FLOAT | PF_ZARCH\n-       | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 },\n-    };\n-\n-  *type = processor_alias_table[(int) arch].processor;\n-  *flags = processor_alias_table[(int) arch].flags;\n-}\n-\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n s390_handle_option (struct gcc_options *opts,\n \t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_decoded_option *decoded,\n+  \t\t    const struct cl_decoded_option *decoded,\n \t\t    location_t loc)\n {\n   size_t code = decoded->opt_index;\n@@ -1580,9 +1560,7 @@ s390_handle_option (struct gcc_options *opts,\n   switch (code)\n     {\n     case OPT_march_:\n-      s390_handle_arch_option ((enum s390_arch_option) value,\n-\t\t\t       &opts->x_s390_arch,\n-\t\t\t       &opts->x_s390_arch_flags);\n+      opts->x_s390_arch_flags = processor_flags_table[value];\n       opts->x_s390_arch_string = arg;\n       return true;\n \n@@ -1597,9 +1575,7 @@ s390_handle_option (struct gcc_options *opts,\n       return true;\n \n     case OPT_mtune_:\n-      s390_handle_arch_option ((enum s390_arch_option) value,\n-\t\t\t       &opts->x_s390_tune,\n-\t\t\t       &opts->x_s390_tune_flags);\n+      opts->x_s390_tune_flags = processor_flags_table[value];\n       return true;\n \n     case OPT_mwarn_framesize_:\n@@ -1626,20 +1602,15 @@ s390_option_override (void)\n \ttarget_flags &= ~MASK_ZARCH;\n     }\n \n-  /* Determine processor architectural level.  */\n-  if (!s390_arch_string)\n+  /* Set the march default in case it hasn't been specified on\n+     cmdline.  */\n+  if (s390_arch == PROCESSOR_max)\n     {\n       s390_arch_string = TARGET_ZARCH? \"z900\" : \"g5\";\n-      s390_handle_arch_option ((TARGET_ZARCH ? s390_arch_z900 : s390_arch_g5),\n-\t\t\t       &s390_arch, &s390_arch_flags);\n+      s390_arch = TARGET_ZARCH ? PROCESSOR_2064_Z900 : PROCESSOR_9672_G5;\n+      s390_arch_flags = processor_flags_table[(int)s390_arch];\n     }\n \n-  /* This check is triggered when the user specified a wrong -march=\n-     string and prevents subsequent error messages from being\n-     issued.  */\n-  if (s390_arch == PROCESSOR_max)\n-    return;\n-\n   /* Determine processor to tune for.  */\n   if (s390_tune == PROCESSOR_max)\n     {\n@@ -8160,8 +8131,7 @@ s390_emit_prologue (void)\n \t\t not match the test under mask pattern.  */\n \t      if (stack_guard >= s390_stack_size)\n \t\t{\n-\t\t  warning (0, \"frame size of function %qs is \"\n-\t\t\t   HOST_WIDE_INT_PRINT_DEC\n+\t\t  warning (0, \"frame size of function %qs is %wd\"\n \t\t\t   \" bytes which is more than half the stack size. \"\n \t\t\t   \"The dynamic check would not be reliable. \"\n \t\t\t   \"No check emitted for this function.\",\n@@ -8189,7 +8159,7 @@ s390_emit_prologue (void)\n \n       if (s390_warn_framesize > 0\n \t  && cfun_frame_layout.frame_size >= s390_warn_framesize)\n-\twarning (0, \"frame size of %qs is \" HOST_WIDE_INT_PRINT_DEC \" bytes\",\n+\twarning (0, \"frame size of %qs is %wd bytes\",\n \t\t current_function_name (), cfun_frame_layout.frame_size);\n \n       if (s390_warn_dynamicstack_p && cfun->calls_alloca)"}, {"sha": "faf867254c3cfa4348912aa33aa132974f4cea62", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -272,7 +272,7 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z10,z196\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n (define_attr \"cpu_facility\" \"standard,ieee,zarch,longdisp,extimm,dfp,z10,z196\""}, {"sha": "6ce32dc9c9ed1e6da24a3108120e3a5613f1dada", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f137aa6354e620b0a5f9b3783951cdf69a81c588/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=f137aa6354e620b0a5f9b3783951cdf69a81c588", "patch": "@@ -25,17 +25,9 @@ config/s390/s390-opts.h\n Variable\n const char *s390_arch_string\n \n-; Which cpu are we tuning for.\n-Variable\n-enum processor_type s390_tune = PROCESSOR_max\n-\n Variable\n int s390_tune_flags\n \n-; Which instruction set architecture to use.\n-Variable\n-enum processor_type s390_arch\n-\n Variable\n int s390_arch_flags\n \n@@ -51,35 +43,35 @@ Target Report RejectNegative Negative(m31) Mask(64BIT)\n 64 bit ABI\n \n march=\n-Target RejectNegative Joined Enum(s390_arch_option)\n+Target RejectNegative Joined Enum(processor_type) Var(s390_arch) Init(PROCESSOR_max)\n Generate code for given CPU\n \n Enum\n-Name(s390_arch_option) Type(enum s390_arch_option)\n+Name(processor_type) Type(enum processor_type)\n \n EnumValue\n-Enum(s390_arch_option) String(g5) Value(s390_arch_g5)\n+Enum(processor_type) String(g5) Value(PROCESSOR_9672_G5)\n \n EnumValue\n-Enum(s390_arch_option) String(g6) Value(s390_arch_g6)\n+Enum(processor_type) String(g6) Value(PROCESSOR_9672_G6)\n \n EnumValue\n-Enum(s390_arch_option) String(z900) Value(s390_arch_z900)\n+Enum(processor_type) String(z900) Value(PROCESSOR_2064_Z900)\n \n EnumValue\n-Enum(s390_arch_option) String(z990) Value(s390_arch_z990)\n+Enum(processor_type) String(z990) Value(PROCESSOR_2084_Z990)\n \n EnumValue\n-Enum(s390_arch_option) String(z9-109) Value(s390_arch_z9_109)\n+Enum(processor_type) String(z9-109) Value(PROCESSOR_2094_Z9_109)\n \n EnumValue\n-Enum(s390_arch_option) String(z9-ec) Value(s390_arch_z9_ec)\n+Enum(processor_type) String(z9-ec) Value(PROCESSOR_2094_Z9_EC)\n \n EnumValue\n-Enum(s390_arch_option) String(z10) Value(s390_arch_z10)\n+Enum(processor_type) String(z10) Value(PROCESSOR_2097_Z10)\n \n EnumValue\n-Enum(s390_arch_option) String(z196) Value(s390_arch_z196)\n+Enum(processor_type) String(z196) Value(PROCESSOR_2817_Z196)\n \n mbackchain\n Target Report Mask(BACKCHAIN)\n@@ -130,7 +122,7 @@ Target RejectNegative Joined UInteger Var(s390_stack_size)\n Emit extra code in the function prologue in order to trap if the stack size exceeds the given limit\n \n mtune=\n-Target RejectNegative Joined Enum(s390_arch_option)\n+Target RejectNegative Joined Enum(processor_type) Var(s390_tune) Init(PROCESSOR_max)\n Schedule code for given CPU\n \n mmvcle"}]}