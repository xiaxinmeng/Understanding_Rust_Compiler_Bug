{"sha": "69ca76581e9a9303a099d4f959ba6630e5721270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljYTc2NTgxZTlhOTMwM2EwOTlkNGY5NTliYTY2MzBlNTcyMTI3MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-21T20:19:18Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-21T20:19:18Z"}, "message": "decl2.c (lang_decode_option): Adjust, in the wake of recent changes to option processing.\n\n\t* decl2.c (lang_decode_option): Adjust, in the wake of recent\n\tchanges to option processing.\n\nFrom-SVN: r29562", "tree": {"sha": "4addf5f5d118365706828a51c6b96fadc1182854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4addf5f5d118365706828a51c6b96fadc1182854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ca76581e9a9303a099d4f959ba6630e5721270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ca76581e9a9303a099d4f959ba6630e5721270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ca76581e9a9303a099d4f959ba6630e5721270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ca76581e9a9303a099d4f959ba6630e5721270/comments", "author": null, "committer": null, "parents": [{"sha": "54965141fbe2d622a744c83782e75038d6a7e656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54965141fbe2d622a744c83782e75038d6a7e656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54965141fbe2d622a744c83782e75038d6a7e656"}], "stats": {"total": 80, "additions": 36, "deletions": 44}, "files": [{"sha": "e9e05d0e36dc0e48f1b8bb143c244c0ac9c5fea4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ca76581e9a9303a099d4f959ba6630e5721270/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ca76581e9a9303a099d4f959ba6630e5721270/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=69ca76581e9a9303a099d4f959ba6630e5721270", "patch": "@@ -1,3 +1,8 @@\n+1999-09-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (lang_decode_option): Adjust, in the wake of recent\n+\tchanges to option processing.\n+\n 1999-09-21  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* typeck.c (get_member_function_from_ptrfunc): Allow extraction of"}, {"sha": "09ea7dc6a84967f666aa75a706e3c111123d9e2d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 31, "deletions": 44, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ca76581e9a9303a099d4f959ba6630e5721270/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ca76581e9a9303a099d4f959ba6630e5721270/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=69ca76581e9a9303a099d4f959ba6630e5721270", "patch": "@@ -559,7 +559,6 @@ lang_decode_option (argc, argv)\n       /* Some kind of -f option.\n \t P's value is the option sans `-f'.\n \t Search for it in the table of options.  */\n-      int found = 0;\n       size_t j;\n \n       p += 2;\n@@ -577,51 +576,36 @@ lang_decode_option (argc, argv)\n \t  || !strcmp (p, \"no-enum-int-equiv\")\n \t  || !strcmp (p, \"nonnull-objects\")\n           || !strcmp (p, \"ansi-overloading\"))\n-\t{\n-\t  /* ignore */\n-\t  found = 1;\n-\t}\n+\t/* ignore */\n+\t;\n       else if (!strcmp (p, \"all-virtual\")\n \t       || !strcmp (p, \"enum-int-equiv\")\n \t       || !strcmp (p, \"no-nonnull-objects\")\n \t       || !strcmp (p, \"no-ansi-overloading\"))\n-\t{\n-\t  warning (\"-f%s is no longer supported\", p);\n-\t  found = 1;\n-\t}\n+\twarning (\"-f%s is no longer supported\", p);\n       else if (! strcmp (p, \"alt-external-templates\"))\n \t{\n \t  flag_external_templates = 1;\n \t  flag_alt_external_templates = 1;\n-\t  found = 1;\n           cp_deprecated (\"-falt-external-templates\");\n \t}\n       else if (! strcmp (p, \"no-alt-external-templates\"))\n-\t{\n-\t  flag_alt_external_templates = 0;\n-\t  found = 1;\n-\t}\n+\tflag_alt_external_templates = 0;\n       else if (!strcmp (p, \"repo\"))\n \t{\n \t  flag_use_repository = 1;\n \t  flag_implicit_templates = 0;\n-\t  found = 1;\n \t}\n       else if (!strcmp (p, \"guiding-decls\"))\n \t{\n \t  flag_guiding_decls = 1;\n \t  name_mangling_version = 0;\n-\t  found = 1;\n \t}\n       else if (!strcmp (p, \"no-guiding-decls\"))\n-\t{\n-\t  flag_guiding_decls = 0;\n-\t  found = 1;\n-\t}\n+\tflag_guiding_decls = 0;\n       else if (!strcmp (p, \"external-templates\"))\n         {\n           flag_external_templates = 1;\n-          found = 1;\n           cp_deprecated (\"-fexternal-templates\");\n         }\n       else if (!strcmp (p, \"new-abi\"))\n@@ -638,41 +622,44 @@ lang_decode_option (argc, argv)\n \t  flag_honor_std = 0;\n \t}\n       else if (!strncmp (p, \"template-depth-\", 15))\n-\t{\n-\t  max_tinst_depth =\n-\t  \tread_integral_parameter (p + 15, p - 2, max_tinst_depth);\n-\t}\n+\tmax_tinst_depth\n+\t  = read_integral_parameter (p + 15, p - 2, max_tinst_depth);\n       else if (!strncmp (p, \"name-mangling-version-\", 22))\n-\t{\n-\t  name_mangling_version =\n-\t  \tread_integral_parameter (p + 22, p - 2, name_mangling_version);\n-\t}\n+\tname_mangling_version \n+\t  = read_integral_parameter (p + 22, p - 2, name_mangling_version);\n       else if (!strncmp (p, \"dump-translation-unit-\", 22))\n \t{\n \t  if (p[22] == '\\0')\n \t    error (\"no file specified with -fdump-translation-unit\");\n \t  else\n \t    flag_dump_translation_unit = p + 22;\n \t}\n-      else for (j = 0;\n-\t\t!found && j < sizeof (lang_f_options) / sizeof (lang_f_options[0]);\n-\t\tj++)\n+      else \n \t{\n-\t  if (!strcmp (p, lang_f_options[j].string))\n-\t    {\n-\t      *lang_f_options[j].variable = lang_f_options[j].on_value;\n-\t      /* A goto here would be cleaner,\n-\t\t but breaks the vax pcc.  */\n-\t      found = 1;\n-\t    }\n-\t  if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n-\t      && ! strcmp (p+3, lang_f_options[j].string))\n+\t  int found = 0;\n+\n+\t  for (j = 0;\n+\t       !found && j < (sizeof (lang_f_options) \n+\t\t\t      / sizeof (lang_f_options[0]));\n+\t       j++)\n \t    {\n-\t      *lang_f_options[j].variable = ! lang_f_options[j].on_value;\n-\t      found = 1;\n+\t      if (!strcmp (p, lang_f_options[j].string))\n+\t\t{\n+\t\t  *lang_f_options[j].variable = lang_f_options[j].on_value;\n+\t\t  /* A goto here would be cleaner,\n+\t\t     but breaks the vax pcc.  */\n+\t\t  found = 1;\n+\t\t}\n+\t      if (p[0] == 'n' && p[1] == 'o' && p[2] == '-'\n+\t\t  && ! strcmp (p+3, lang_f_options[j].string))\n+\t\t{\n+\t\t  *lang_f_options[j].variable = ! lang_f_options[j].on_value;\n+\t\t  found = 1;\n+\t\t}\n \t    }\n+\t      \n+\t  return found;\n \t}\n-      return found;\n     }\n   else if (p[0] == '-' && p[1] == 'W')\n     {"}]}