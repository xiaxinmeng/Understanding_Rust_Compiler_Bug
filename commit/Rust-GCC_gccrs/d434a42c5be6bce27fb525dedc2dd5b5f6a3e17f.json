{"sha": "d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzNGE0MmM1YmU2YmNlMjdmYjUyNWRlZGMyZGQ1YjVmNmEzZTE3Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:56:35Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T06:56:35Z"}, "message": "(convert_to_integer): When optimizing LSHIFT_EXPR and\nRSHIFT_EXPR, do compares at tree level.\n\nFrom-SVN: r2086", "tree": {"sha": "bec7c424c0de2b6767359141ab50160cbaedab45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bec7c424c0de2b6767359141ab50160cbaedab45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f/comments", "author": null, "committer": null, "parents": [{"sha": "24f8db991baf42e6e5b0a3f76e5425e72e9fb41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f8db991baf42e6e5b0a3f76e5425e72e9fb41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f8db991baf42e6e5b0a3f76e5425e72e9fb41f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b160fd1b1acbf6e020e47dc67d790c394a01361d", "filename": "gcc/c-convert.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=d434a42c5be6bce27fb525dedc2dd5b5f6a3e17f", "patch": "@@ -177,20 +177,20 @@ convert_to_integer (type, expr)\n \t{\n \tcase RSHIFT_EXPR:\n \t  /* We can pass truncation down through right shifting\n-\t     when the shift count is a negative constant.  */\n-\t  if (TREE_CODE (TREE_OPERAND (expr, 1)) != INTEGER_CST\n-\t      || TREE_INT_CST_LOW (TREE_OPERAND (expr, 1)) > 0)\n-\t    break;\n-\t  goto trunc1;\n+\t     when the shift count is a nonpositive constant.  */\n+\t  if (TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST\n+\t      && tree_int_cst_lt (TREE_OPERAND (expr, 1), integer_one_node))\n+\t    goto trunc1;\n+\t  break;\n \n \tcase LSHIFT_EXPR:\n \t  /* We can pass truncation down through left shifting\n-\t     when the shift count is a positive constant.  */\n-\t  if (TREE_CODE (TREE_OPERAND (expr, 1)) != INTEGER_CST\n-\t      || TREE_INT_CST_LOW (TREE_OPERAND (expr, 1)) < 0)\n-\t    break;\n-\t  /* In this case, shifting is like multiplication.  */\n-\t  goto trunc1;\n+\t     when the shift count is a nonnegative constant.  */\n+\t  if (TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST\n+\t      && ! tree_int_cst_lt (TREE_OPERAND (expr, 1), integer_zero_node))\n+\t    /* In this case, shifting is like multiplication.  */\n+\t    goto trunc1;\n+\t  break;\n \n \tcase MAX_EXPR:\n \tcase MIN_EXPR:"}]}