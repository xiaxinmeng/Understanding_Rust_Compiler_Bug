{"sha": "bc8c44a637419f06d348530310dd6e1f4ec803de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4YzQ0YTYzNzQxOWYwNmQzNDg1MzAzMTBkZDZlMWY0ZWM4MDNkZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-04T13:15:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-04T13:15:46Z"}, "message": "(addsi3...\n\n(addsi3, addhi3): Use two addqw (or subqw) insns when adding (or\nsubtracting) small integer constants (8 < N <= 16) to both address and\ndata registers.\n\nFrom-SVN: r13367", "tree": {"sha": "b52d0e7db8ba506adc597bfaede9f8754e31aa8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b52d0e7db8ba506adc597bfaede9f8754e31aa8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc8c44a637419f06d348530310dd6e1f4ec803de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8c44a637419f06d348530310dd6e1f4ec803de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8c44a637419f06d348530310dd6e1f4ec803de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8c44a637419f06d348530310dd6e1f4ec803de/comments", "author": null, "committer": null, "parents": [{"sha": "7bc88d49332000c62fd7793d4cbc1718462c078d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bc88d49332000c62fd7793d4cbc1718462c078d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bc88d49332000c62fd7793d4cbc1718462c078d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2f0201c5ccbc278a7da15d8052678ac7dc84bc27", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8c44a637419f06d348530310dd6e1f4ec803de/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8c44a637419f06d348530310dd6e1f4ec803de/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=bc8c44a637419f06d348530310dd6e1f4ec803de", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, Motorola 68000 Version\n-;;  Copyright (C) 1987, 88, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+;;  Copyright (C) 1987, 88, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -2167,9 +2167,9 @@\n \t\t  : \\\"subq%.l %2,%0\\\");\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n-\t add a small integer (8 < N <= 16) to an address register.\n+\t add a small integer (8 < N <= 16) to a register.\n \t Likewise for subqw. */\n-      if (TARGET_CPU32 && ADDRESS_REG_P (operands[0]))\n+      if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[2]) > 8\n \t      && INTVAL (operands[2]) <= 16)\n@@ -2242,9 +2242,9 @@\n \t  return \\\"subq%.w %2,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n-\t add a small integer (8 < N <= 16) to an address register.  \n+\t add a small integer (8 < N <= 16) to a register.  \n \t Likewise for subqw. */\n-      if (TARGET_CPU32 && ADDRESS_REG_P (operands[0]))\n+      if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[2]) > 8\n \t      && INTVAL (operands[2]) <= 16)\n@@ -2308,9 +2308,9 @@\n \t  return \\\"subq%.w %1,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n-\t add a small integer (8 < N <= 16) to an address register. \n+\t add a small integer (8 < N <= 16) to a register. \n \t Likewise for subqw. */\n-      if (TARGET_CPU32 && ADDRESS_REG_P (operands[0]))\n+      if (TARGET_CPU32 && REG_P (operands[0]))\n \t{\n \t  if (INTVAL (operands[1]) > 8\n \t      && INTVAL (operands[1]) <= 16)\n@@ -2368,9 +2368,9 @@\n \t  return \\\"subq%.w %1,%0\\\";\n \t}\n       /* On the CPU32 it is faster to use two addqw instructions to\n-\t add a small integer (8 < N <= 16) to an address register.\n+\t add a small integer (8 < N <= 16) to a register.\n \t Likewise for subqw. */\n-      if (TARGET_CPU32 && ADDRESS_REG_P (operands[0])) \n+      if (TARGET_CPU32 && REG_P (operands[0])) \n \t{\n \t  if (INTVAL (operands[1]) > 8\n \t      && INTVAL (operands[1]) <= 16)"}]}