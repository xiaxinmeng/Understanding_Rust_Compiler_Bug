{"sha": "ad06ee51fe9e658817b79f5db44a431fc1854288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwNmVlNTFmZTllNjU4ODE3Yjc5ZjVkYjQ0YTQzMWZjMTg1NDI4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-05T19:24:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-05T19:24:45Z"}, "message": "tree-ssa-dce.c (mark_last_stmt_necessary): New function.\n\n\t* tree-ssa-dce.c (mark_last_stmt_necessary): New function.\n\t(mark_control_dependent_edges_necessary): Call it instead of marking\n\tthe last statement manually.\n\t(propagate_necessity): Likewise.\n\nFrom-SVN: r160329", "tree": {"sha": "bb32768245debca6284a15f055d17c969ee4acda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb32768245debca6284a15f055d17c969ee4acda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad06ee51fe9e658817b79f5db44a431fc1854288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad06ee51fe9e658817b79f5db44a431fc1854288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad06ee51fe9e658817b79f5db44a431fc1854288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad06ee51fe9e658817b79f5db44a431fc1854288/comments", "author": null, "committer": null, "parents": [{"sha": "3b1420846cf928b046826db73c1a4fb79e66d476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1420846cf928b046826db73c1a4fb79e66d476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1420846cf928b046826db73c1a4fb79e66d476"}], "stats": {"total": 76, "additions": 44, "deletions": 32}, "files": [{"sha": "7f7ce36531b2ea8f1e4fed8e9d71988efe255f4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad06ee51fe9e658817b79f5db44a431fc1854288/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad06ee51fe9e658817b79f5db44a431fc1854288/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad06ee51fe9e658817b79f5db44a431fc1854288", "patch": "@@ -1,3 +1,10 @@\n+2010-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-dce.c (mark_last_stmt_necessary): New function.\n+\t(mark_control_dependent_edges_necessary): Call it instead of marking\n+\tthe last statement manually.\n+\t(propagate_necessity): Likewise.\n+\n 2010-06-05  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-into-ssa.c (insert_phi_nodes): Use bitmap heads\n@@ -39,9 +46,9 @@\n \n 2010-06-05  Jan Hubicka  <jh@suse.cz>\n \n-\t* ipa-pure-const.c (propagate): Fix type in handling functions\n-\tthat can not return; be more cureful about merging the results\n-\twith previously known.\n+\t* ipa-pure-const.c (propagate): Fix typo in handling of functions\n+\tthat cannot return.  Be more careful when merging the results with\n+\tpreviously known ones.\n \n 2010-06-05  Matthias Klose  <doko@ubuntu.com>\n "}, {"sha": "cfbc26a7ee73b3ac1d4f2d86635b12504646ebae", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad06ee51fe9e658817b79f5db44a431fc1854288/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad06ee51fe9e658817b79f5db44a431fc1854288/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=ad06ee51fe9e658817b79f5db44a431fc1854288", "patch": "@@ -77,8 +77,8 @@ static VEC(gimple,heap) *worklist;\n    as necessary.  */\n static sbitmap processed;\n \n-/* Vector indicating that last_stmt if a basic block has already been\n-   marked as necessary.  */\n+/* Vector indicating that the last statement of a basic block has already\n+   been marked as necessary.  */\n static sbitmap last_stmt_necessary;\n \n /* Vector indicating that BB contains statements that are live.  */\n@@ -197,6 +197,7 @@ find_all_control_dependences (struct edge_list *el)\n \n /* If STMT is not already marked necessary, mark it, and add it to the\n    worklist if ADD_TO_WORKLIST is true.  */\n+\n static inline void\n mark_stmt_necessary (gimple stmt, bool add_to_worklist)\n {\n@@ -365,13 +366,30 @@ mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n }\n \n \n-/* Make corresponding control dependent edges necessary.  We only\n-   have to do this once for each basic block, so we clear the bitmap\n-   after we're done.\n+/* Mark the last statement of BB as necessary.  */\n \n-   When IGNORE_SELF it true, ignore BB from the list of control dependences.  */\n static void\n-mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el, bool ignore_self)\n+mark_last_stmt_necessary (basic_block bb)\n+{\n+  gimple stmt = last_stmt (bb);\n+\n+  SET_BIT (last_stmt_necessary, bb->index);\n+  SET_BIT (bb_contains_live_stmts, bb->index);\n+\n+  /* We actually mark the statement only if it is a control statement.  */\n+  if (stmt && is_ctrl_stmt (stmt))\n+    mark_stmt_necessary (stmt, true);\n+}\n+\n+\n+/* Mark control dependent edges of BB as necessary.  We have to do this only\n+   once for each basic block so we set the appropriate bit after we're done.\n+\n+   When IGNORE_SELF is true, ignore BB in the list of control dependences.  */\n+\n+static void\n+mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el,\n+\t\t\t\t\tbool ignore_self)\n {\n   bitmap_iterator bi;\n   unsigned edge_number;\n@@ -384,7 +402,6 @@ mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el, bo\n \n   EXECUTE_IF_CONTROL_DEPENDENT (bi, bb->index, edge_number)\n     {\n-      gimple stmt;\n       basic_block cd_bb = INDEX_EDGE_PRED_BB (el, edge_number);\n \n       if (ignore_self && cd_bb == bb)\n@@ -393,15 +410,10 @@ mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el, bo\n \t  continue;\n \t}\n \n-      if (TEST_BIT (last_stmt_necessary, cd_bb->index))\n-\tcontinue;\n-      SET_BIT (last_stmt_necessary, cd_bb->index);\n-      SET_BIT (bb_contains_live_stmts, cd_bb->index);\n-\n-      stmt = last_stmt (cd_bb);\n-      if (stmt && is_ctrl_stmt (stmt))\n-\tmark_stmt_necessary (stmt, true);\n+      if (!TEST_BIT (last_stmt_necessary, cd_bb->index))\n+\tmark_last_stmt_necessary (cd_bb);\n     }\n+\n   if (!skipped)\n     SET_BIT (visited_control_parents, bb->index);\n }\n@@ -652,12 +664,12 @@ propagate_necessity (struct edge_list *el)\n \n       if (aggressive)\n \t{\n-\t  /* Mark the last statements of the basic blocks that the block\n-\t     containing STMT is control dependent on, but only if we haven't\n+\t  /* Mark the last statement of the basic blocks on which the block\n+\t     containing STMT is control dependent, but only if we haven't\n \t     already done so.  */\n \t  basic_block bb = gimple_bb (stmt);\n \t  if (bb != ENTRY_BLOCK_PTR\n-\t      && ! TEST_BIT (visited_control_parents, bb->index))\n+\t      && !TEST_BIT (visited_control_parents, bb->index))\n \t    mark_control_dependent_edges_necessary (bb, el, false);\n \t}\n \n@@ -760,18 +772,11 @@ propagate_necessity (struct edge_list *el)\n \t\t      != get_immediate_dominator (CDI_POST_DOMINATORS, arg_bb))\n \t\t    {\n \t\t      if (!TEST_BIT (last_stmt_necessary, arg_bb->index))\n-\t\t\t{\n-\t\t\t  gimple stmt2;\n-\t\t\t  SET_BIT (last_stmt_necessary, arg_bb->index);\n-\t\t\t  SET_BIT (bb_contains_live_stmts, arg_bb->index);\n-\n-\t\t\t  stmt2 = last_stmt (arg_bb);\n-\t\t\t  if (stmt2 && is_ctrl_stmt (stmt2))\n-\t\t\t    mark_stmt_necessary (stmt2, true);\n-\t\t\t}\n+\t\t\tmark_last_stmt_necessary (arg_bb);\n \t\t    }\n \t\t  else if (arg_bb != ENTRY_BLOCK_PTR\n-\t\t           && ! TEST_BIT (visited_control_parents, arg_bb->index))\n+\t\t           && !TEST_BIT (visited_control_parents,\n+\t\t\t\t\t arg_bb->index))\n \t\t    mark_control_dependent_edges_necessary (arg_bb, el, true);\n \t\t}\n \t    }"}]}