{"sha": "ecd7b400c959b1ba0e006e48fac6b82253fe8834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNkN2I0MDBjOTU5YjFiYTBlMDA2ZTQ4ZmFjNmI4MjI1M2ZlODgzNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-13T00:10:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-13T00:10:37Z"}, "message": "compiler: Do not count package uses from ambiguous lookups.\n\nWhen using dot imports, it is possible to\nhave an imported symbol name that matches\nthe name of a struct field in a composite\nliteral.  Do not consider the imported\npackage to be used in this situation.\nFixes issue 6427.\n\nFrom-SVN: r217453", "tree": {"sha": "c52785286d6b2d294585d421b228ed1b7ea46041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52785286d6b2d294585d421b228ed1b7ea46041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecd7b400c959b1ba0e006e48fac6b82253fe8834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd7b400c959b1ba0e006e48fac6b82253fe8834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd7b400c959b1ba0e006e48fac6b82253fe8834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd7b400c959b1ba0e006e48fac6b82253fe8834/comments", "author": null, "committer": null, "parents": [{"sha": "be8de8946ed904c92c09dadb158e76c9c5044d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8de8946ed904c92c09dadb158e76c9c5044d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8de8946ed904c92c09dadb158e76c9c5044d11"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "dba5ea0f9c94812d80ecc737bcf28581e45ff396", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=ecd7b400c959b1ba0e006e48fac6b82253fe8834", "patch": "@@ -12791,6 +12791,16 @@ Composite_literal_expression::lower_struct(Gogo* gogo, Type* type)\n \t{\n \tcase EXPRESSION_UNKNOWN_REFERENCE:\n \t  name = name_expr->unknown_expression()->name();\n+\t  if (type->named_type() != NULL)\n+\t    {\n+\t      // If the named object found for this field name comes from a\n+\t      // different package than the struct it is a part of, do not count\n+\t      // this incorrect lookup as a usage of the object's package.\n+\t      no = name_expr->unknown_expression()->named_object();\n+\t      if (no->package() != NULL\n+\t\t  && no->package() != type->named_type()->named_object()->package())\n+\t\tno->package()->forget_usage(name_expr);\n+\t    }\n \t  break;\n \n \tcase EXPRESSION_CONST_REFERENCE:"}, {"sha": "7c318ab1b897d8219d91fbdcb57e30ff60ffba78", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=ecd7b400c959b1ba0e006e48fac6b82253fe8834", "patch": "@@ -1412,7 +1412,7 @@ Gogo::lookup(const std::string& name, Named_object** pfunction) const\n       if (ret != NULL)\n \t{\n \t  if (ret->package() != NULL)\n-\t    ret->package()->set_used();\n+\t    ret->package()->note_usage();\n \t  return ret;\n \t}\n     }\n@@ -7426,6 +7426,36 @@ Package::set_priority(int priority)\n     this->priority_ = priority;\n }\n \n+// Forget a given usage.  If forgetting this usage means this package becomes\n+// unused, report that error.\n+\n+void\n+Package::forget_usage(Expression* usage) const\n+{\n+  if (this->fake_uses_.empty())\n+    return;\n+\n+  std::set<Expression*>::iterator p = this->fake_uses_.find(usage);\n+  go_assert(p != this->fake_uses_.end());\n+  this->fake_uses_.erase(p);\n+\n+  if (this->fake_uses_.empty())\n+    error_at(this->location(), \"imported and not used: %s\",\n+\t     Gogo::message_name(this->package_name()).c_str());\n+}\n+\n+// Clear the used field for the next file.  If the only usages of this package\n+// are possibly fake, keep the fake usages for lowering.\n+\n+void\n+Package::clear_used()\n+{\n+  if (this->used_ > this->fake_uses_.size())\n+    this->fake_uses_.clear();\n+\n+  this->used_ = 0;\n+}\n+\n // Determine types of constants.  Everything else in a package\n // (variables, function declarations) should already have a fixed\n // type.  Constants may have abstract types."}, {"sha": "10aea696c2604dff6ddf053ddcdc319c4d94c45f", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=ecd7b400c959b1ba0e006e48fac6b82253fe8834", "patch": "@@ -2645,17 +2645,25 @@ class Package\n   // Whether some symbol from the package was used.\n   bool\n   used() const\n-  { return this->used_; }\n+  { return this->used_ > 0; }\n \n   // Note that some symbol from this package was used.\n   void\n-  set_used() const\n-  { this->used_ = true; }\n+  note_usage() const\n+  { this->used_++; }\n+\n+  // Note that USAGE might be a fake usage of this package.\n+  void\n+  note_fake_usage(Expression* usage) const\n+  { this->fake_uses_.insert(usage); }\n+\n+  // Forget a given USAGE of this package.\n+  void\n+  forget_usage(Expression* usage) const;\n \n   // Clear the used field for the next file.\n   void\n-  clear_used()\n-  { this->used_ = false; }\n+  clear_used();\n \n   // Whether this package was imported in the current file.\n   bool\n@@ -2749,10 +2757,12 @@ class Package\n   int priority_;\n   // The location of the import statement.\n   Location location_;\n-  // True if some name from this package was used.  This is mutable\n-  // because we can use a package even if we have a const pointer to\n-  // it.\n-  mutable bool used_;\n+  // The amount of times some name from this package was used.  This is mutable\n+  // because we can use a package even if we have a const pointer to it.\n+  mutable size_t used_;\n+  // A set of possibly fake uses of this package.  This is mutable because we\n+  // can track fake uses of a package even if we have a const pointer to it.\n+  mutable std::set<Expression*> fake_uses_;\n   // True if this package was imported in the current file.\n   bool is_imported_;\n   // True if this package was imported with a name of \"_\"."}, {"sha": "57310250c79d88c28e38dd583d59b400d7bfad09", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecd7b400c959b1ba0e006e48fac6b82253fe8834/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=ecd7b400c959b1ba0e006e48fac6b82253fe8834", "patch": "@@ -199,7 +199,7 @@ Parse::qualified_ident(std::string* pname, Named_object** ppackage)\n       return false;\n     }\n \n-  package->package_value()->set_used();\n+  package->package_value()->note_usage();\n \n   token = this->advance_token();\n   if (!token->is_identifier())\n@@ -2401,7 +2401,7 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \t\treturn Expression::make_error(location);\n \t      }\n \t    package = named_object->package_value();\n-\t    package->set_used();\n+\t    package->note_usage();\n \t    id = this->peek_token()->identifier();\n \t    is_exported = this->peek_token()->is_identifier_exported();\n \t    packed = this->gogo_->pack_hidden_name(id, is_exported);\n@@ -3242,9 +3242,12 @@ Parse::id_to_expression(const std::string& name, Location location,\n     case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n       {\n \t// These cases can arise for a field name in a composite\n-\t// literal.\n+\t// literal.  Keep track of these as they might be fake uses of\n+\t// the related package.\n \tUnknown_expression* ue =\n \t  Expression::make_unknown_reference(named_object, location);\n+\tif (named_object->package() != NULL)\n+\t  named_object->package()->note_fake_usage(ue);\n \tif (this->is_erroneous_function_)\n \t  ue->set_no_error_message();\n \treturn ue;"}]}