{"sha": "c28eb6c2947ce079b782ee537d43b3639ba5a251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4ZWI2YzI5NDdjZTA3OWI3ODJlZTUzN2Q0M2IzNjM5YmE1YTI1MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-02-20T00:13:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-02-20T00:13:15Z"}, "message": "pa-hpux10.h (MD_EXEC_PREFIX): Define appropriately for hpux10.\n\n        * pa/pa-hpux10.h (MD_EXEC_PREFIX): Define appropriately for hpux10.\n        (MD_STARTFILE_PREFIX): Similarly.\n\n        * pa/pa.c (return_addr_rtx): Add some comments about cases it\n        doesn't handle correctly.\n\n        * pa/pa.h (ASM_OUTPUT_SECTION_NAME): Surround the section name\n        with '$' if not using GAS.\n\nFrom-SVN: r13667", "tree": {"sha": "678a50d888fc460b14a9011db28ce7488342fac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678a50d888fc460b14a9011db28ce7488342fac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28eb6c2947ce079b782ee537d43b3639ba5a251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28eb6c2947ce079b782ee537d43b3639ba5a251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28eb6c2947ce079b782ee537d43b3639ba5a251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28eb6c2947ce079b782ee537d43b3639ba5a251/comments", "author": null, "committer": null, "parents": [{"sha": "e02fbefc82748bc33629bcb6a7ef3e6302711908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02fbefc82748bc33629bcb6a7ef3e6302711908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02fbefc82748bc33629bcb6a7ef3e6302711908"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "1c57d5ee6ea70cc1a2b3386aae7917b02ff9feb3", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28eb6c2947ce079b782ee537d43b3639ba5a251/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28eb6c2947ce079b782ee537d43b3639ba5a251/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=c28eb6c2947ce079b782ee537d43b3639ba5a251", "patch": "@@ -53,3 +53,19 @@ do {  \\\n        output_file_directive ((FILE), main_input_filename); \\\n    } while (0)\n \n+/* Under hpux10, the normal location of the `ld' and `as' programs is the\n+   /usr/ccs/bin directory.  */\n+\n+#ifndef CROSS_COMPILE\n+#undef MD_EXEC_PREFIX\n+#define MD_EXEC_PREFIX \"/usr/ccs/bin/\"\n+#endif\n+\n+/* Under hpux10, the normal location of the various *crt*.o files is the\n+   /usr/ccs/lib directory.  */\n+\n+#ifndef CROSS_COMPILE\n+#undef MD_STARTFILE_PREFIX\n+#define MD_STARTFILE_PREFIX \"/usr/ccs/lib/\"\n+#endif\n+"}, {"sha": "3ed113b9805fbc45fe0b2e353ea54f0553bef5f7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28eb6c2947ce079b782ee537d43b3639ba5a251/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28eb6c2947ce079b782ee537d43b3639ba5a251/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c28eb6c2947ce079b782ee537d43b3639ba5a251", "patch": "@@ -3038,7 +3038,28 @@ hppa_expand_epilogue ()\n    the current frame, after the prologue.  FRAMEADDR is the\n    frame pointer of the COUNT frame.\n \n-   We want to ignore any export stub remnants here.  */\n+   We want to ignore any export stub remnants here.\n+\n+   The value returned is used in two different ways:\n+\n+\t1. To find a function's caller.\n+\n+\t2. To change the return address for a function.\n+\n+   This function handles most instances of case 1; however, it will\n+   fail if there are two levels of stubs to execute on the return\n+   path.  The only way I believe that can happen is if the return value\n+   needs a parameter relocation, which never happens for C code.\n+\n+   This function handles most instances of case 2; however, it will\n+   fail if we did not originally have stub code on the return path\n+   but will need code on the new return path.  This can happen if\n+   the caller & callee are both in the main program, but the new\n+   return location is in a shared library.\n+\n+   To handle this correctly we need to set the return pointer at\n+   frame-20 to point to a return stub frame-24 to point to the\n+   location we wish to return to.  */\n \n rtx\n return_addr_rtx (count, frameaddr)"}]}