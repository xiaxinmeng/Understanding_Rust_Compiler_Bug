{"sha": "d4de0221f3539de204f92443ca66a0e8b36de64b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkZTAyMjFmMzUzOWRlMjA0ZjkyNDQzY2E2NmEwZThiMzZkZTY0Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-31T17:22:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-31T17:22:33Z"}, "message": "lib1funcs.asm: Fix comment formatting.\n\n\t* config/v850/lib1funcs.asm: Fix comment formatting.\n\t* config/v850/v850.c: Likewise.\n\t* config/v850/v850.h: Likewise.\n\t* config/v850/v850.md: Likewise.\n\nFrom-SVN: r75270", "tree": {"sha": "5fa5ece0cc3b91456b0c80abe5c366ae9108901b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa5ece0cc3b91456b0c80abe5c366ae9108901b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4de0221f3539de204f92443ca66a0e8b36de64b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de0221f3539de204f92443ca66a0e8b36de64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4de0221f3539de204f92443ca66a0e8b36de64b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de0221f3539de204f92443ca66a0e8b36de64b/comments", "author": null, "committer": null, "parents": [{"sha": "99f296a0d9c74a5ab40ac72f2a82322355729da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f296a0d9c74a5ab40ac72f2a82322355729da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f296a0d9c74a5ab40ac72f2a82322355729da3"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "c747054654605033af400a2064c9716e4957b2ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4de0221f3539de204f92443ca66a0e8b36de64b", "patch": "@@ -1,3 +1,10 @@\n+2003-12-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/v850/lib1funcs.asm: Fix comment formatting.\n+\t* config/v850/v850.c: Likewise.\n+\t* config/v850/v850.h: Likewise.\n+\t* config/v850/v850.md: Likewise.\n+\n 2003-12-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/i386/i386.md (*movqi_insv_2): Remove AND in the"}, {"sha": "ea28902c9c5c0cc9ed0ee6de0940c870cd4e5156", "filename": "gcc/config/v850/lib1funcs.asm", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Flib1funcs.asm?ref=d4de0221f3539de204f92443ca66a0e8b36de64b", "patch": "@@ -1170,16 +1170,16 @@ __return_r29_r31:\n \t.align\t2\n \t.globl\t__save_r31\n \t.type\t__save_r31,@function\n-\t/* Allocate space and save register 31 on the stack */\n-\t/* Also allocate space for the argument save area */\n+\t/* Allocate space and save register 31 on the stack.  */\n+\t/* Also allocate space for the argument save area.  */\n \t/* Called via:\tjalr __save_r31,r10 */\n __save_r31:\n \taddi\t-20,sp,sp\n \tst.w\tr31,16[sp]\n \tjmp\t[r10]\n \t.size\t__save_r31,.-__save_r31\n \n-\t/* Restore saved registers, deallocate stack and return to the user */\n+\t/* Restore saved registers, deallocate stack and return to the user.  */\n \t/* Called via:\tjr __return_r31 */\n \t.align\t2\n \t.globl\t__return_r31\n@@ -1196,7 +1196,7 @@ __return_r31:\n \t.align\t2\n \t.globl\t__save_r6_r9\n \t.type\t__save_r6_r9,@function\n-\t/* Save registers 6 .. 9 on the stack for variable argument functions */\n+\t/* Save registers 6 .. 9 on the stack for variable argument functions.  */\n \t/* Called via:\tjalr __save_r6_r9,r10 */\n __save_r6_r9:\n \tmov\tep,r1\n@@ -1215,8 +1215,8 @@ __save_r6_r9:\n \t.align\t2\n \t.globl\t__save_interrupt\n \t.type\t__save_interrupt,@function\n-\t/* Save registers r1, r4 on stack and load up with expected values */\n-\t/* Note, 12 bytes of stack have already been allocated. */\n+\t/* Save registers r1, r4 on stack and load up with expected values.  */\n+\t/* Note, 12 bytes of stack have already been allocated.  */\n \t/* Called via:\tjalr __save_interrupt,r10 */\n __save_interrupt:\n \tst.w\tep,0[sp]\n@@ -1229,7 +1229,7 @@ __save_interrupt:\n \tjmp\t[r10]\n \t.size\t__save_interrupt,.-__save_interrupt\n \n-\t/* Restore saved registers, deallocate stack and return from the interrupt */\n+\t/* Restore saved registers, deallocate stack and return from the interrupt.  */\n \t/* Called via:\tjr __return_interrupt */\n \t.align\t2\n \t.globl\t__return_interrupt\n@@ -1249,8 +1249,8 @@ __return_interrupt:\n \t.align\t2\n \t.globl\t__save_all_interrupt\n \t.type\t__save_all_interrupt,@function\n-\t/* Save all registers except for those saved in __save_interrupt */\n-\t/* allocate enough stack for all of the registers & 16 bytes of space */\n+\t/* Save all registers except for those saved in __save_interrupt.  */\n+\t/* Allocate enough stack for all of the registers & 16 bytes of space.  */\n \t/* Called via:\tjalr __save_all_interrupt,r10 */\n __save_all_interrupt:\n \taddi\t-120,sp,sp\n@@ -1288,8 +1288,8 @@ __save_all_interrupt:\n \n \t.globl\t__restore_all_interrupt\n \t.type\t__restore_all_interrupt,@function\n-\t/* Restore all registers saved in __save_all_interrupt */\n-\t/* & deallocate the stack space */\n+\t/* Restore all registers saved in __save_all_interrupt and\n+\t   deallocate the stack space.  */\n \t/* Called via:\tjalr __restore_all_interrupt,r10 */\n __restore_all_interrupt:\n \tmov\tep,r1\n@@ -1455,7 +1455,7 @@ __callt_save_interrupt: .short ctoff(.L_save_interrupt)\n         .call_table_text\n \n \t/* Restore saved registers, deallocate stack and return from the interrupt.  */\n-        /* Called via:  callt ctoff(__callt_restore_itnerrupt).   */\n+        /* Called via:  callt ctoff(__callt_restore_itnerrupt).  */\n \t.text\n \t.align\t2\n \t.globl\t__return_interrupt\n@@ -1513,8 +1513,8 @@ __callt_return_interrupt:       .short ctoff(.L_return_interrupt)\n \tprepare {r20 - r29, r31}, 4\n \tctret\t\n \n-\t/* Restore all registers saved in __save_all_interrupt.  */\n-\t/* & deallocate the stack space.  */\n+\t/* Restore all registers saved in __save_all_interrupt\n+\t   deallocate the stack space.  */\n \t/* Called via:\tcallt ctoff(__callt_restore_all_interrupt).  */\n \t.align 2\n .L_restore_all_interrupt:\n@@ -1570,7 +1570,7 @@ __callt_restore_all_interrupt:\t.short ctoff(.L_restore_all_interrupt)\n .L_return_##START##_r29:\t\t\t\t\t\t\t;\\\n \tdispose 0, { START - r29 }, r31\t\t\t\t\t\t;\\\n \t\t\t\t\t\t\t\t\t\t;\\\n-\t/* Place the offsets of the start of these funcs into the call table. */;\\\n+\t/* Place the offsets of the start of these funcs into the call table.  */;\\\n \t.call_table_data\t\t\t\t\t\t\t;\\\n \t\t\t\t\t\t\t\t\t\t;\\\n \t.global\t__callt_save_##START##_r29\t\t\t\t\t;\\\n@@ -1597,7 +1597,7 @@ __callt_return_##START##_r29:\t.short ctoff(.L_return_##START##_r29 )\n .L_return_##START##_r31c:\t\t\t\t\t\t\t;\\\n \tdispose 4, { START - r29, r31}, r31\t\t\t\t\t;\\\n \t\t\t\t\t\t\t\t\t\t;\\\n-\t/* Place the offsets of the start of these funcs into the call table. */;\\\n+\t/* Place the offsets of the start of these funcs into the call table.  */;\\\n \t.call_table_data\t\t\t\t\t\t\t;\\\n \t\t\t\t\t\t\t\t\t\t;\\\n \t.global\t__callt_save_##START##_r31c\t\t\t\t\t;\\"}, {"sha": "4de480a422c64e54a956a865bbfb6f0f75c9fc3a", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=d4de0221f3539de204f92443ca66a0e8b36de64b", "patch": "@@ -1765,7 +1765,7 @@ Saved %d bytes via prologue function (%d vs. %d) for function %s\\n\",\n     }\n \n   /* If no prolog save function is available, store the registers the old\n-     fashioned way (one by one). */\n+     fashioned way (one by one).  */\n   if (!save_all)\n     {\n       /* Special case interrupt functions that save all registers for a call.  */\n@@ -1786,7 +1786,7 @@ Saved %d bytes via prologue function (%d vs. %d) for function %s\\n\",\n \t  else\n \t    init_stack_alloc = actual_fsize;\n \t      \n-\t  /* Save registers at the beginning of the stack frame */\n+\t  /* Save registers at the beginning of the stack frame.  */\n \t  offset = init_stack_alloc - 4;\n \t  \n \t  if (init_stack_alloc)\n@@ -2431,7 +2431,7 @@ construct_restore_jr (rtx op)\n     \n   stack_bytes = INTVAL (XEXP (SET_SRC (XVECEXP (op, 0, 1)), 1));\n \n-  /* Each pop will remove 4 bytes from the stack... */\n+  /* Each pop will remove 4 bytes from the stack....  */\n   stack_bytes -= (count - 2) * 4;\n \n   /* Make sure that the amount we are popping either 0 or 16 bytes.  */\n@@ -2634,7 +2634,7 @@ construct_save_jarl (rtx op)\n      registers.  */\n   stack_bytes = INTVAL (XEXP (SET_SRC (XVECEXP (op, 0, 0)), 1));\n \n-  /* Each push will put 4 bytes from the stack... */\n+  /* Each push will put 4 bytes from the stack....  */\n   stack_bytes += (count - (TARGET_LONG_CALLS ? 3 : 2)) * 4;\n \n   /* Make sure that the amount we are popping either 0 or 16 bytes.  */\n@@ -2721,7 +2721,7 @@ extern tree last_assemble_variable_decl;\n extern int size_directive_output;\n \n /* A version of asm_output_aligned_bss() that copes with the special\n-   data areas of the v850. */\n+   data areas of the v850.  */\n void\n v850_output_aligned_bss (FILE * file,\n                          tree decl,\n@@ -2858,7 +2858,7 @@ v850_insert_attributes (tree decl, tree * attr_ptr ATTRIBUTE_UNUSED )\n \tkind = GHS_SECTION_KIND_TEXT;\n       else\n \t{\n-\t  /* First choose a section kind based on the data area of the decl. */\n+\t  /* First choose a section kind based on the data area of the decl.  */\n \t  switch (v850_get_data_area (decl))\n \t    {\n \t    default:\n@@ -2891,11 +2891,11 @@ v850_insert_attributes (tree decl, tree * attr_ptr ATTRIBUTE_UNUSED )\n \t}\n \n       /* Now, if the section kind has been explicitly renamed,\n-         then attach a section attribute. */\n+         then attach a section attribute.  */\n       chosen_section = GHS_current_section_names [(int) kind];\n \n       /* Otherwise, if this kind of section needs an explicit section\n-         attribute, then also attach one. */\n+         attribute, then also attach one.  */\n       if (chosen_section == NULL)\n         chosen_section = GHS_default_section_names [(int) kind];\n \n@@ -3001,7 +3001,7 @@ construct_dispose_instruction (rtx op)\n     \n   stack_bytes = INTVAL (XEXP (SET_SRC (XVECEXP (op, 0, 1)), 1));\n \n-  /* Each pop will remove 4 bytes from the stack... */\n+  /* Each pop will remove 4 bytes from the stack....  */\n   stack_bytes -= (count - 2) * 4;\n \n   /* Make sure that the amount we are popping"}, {"sha": "ff8c274f598cecc079f568c07510bade25a45bf3", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=d4de0221f3539de204f92443ca66a0e8b36de64b", "patch": "@@ -275,7 +275,7 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n    enable machine-specific optimizations.\n \n    *Do not examine `write_symbols' in this macro!* The debugging\n-   options are not supposed to alter the generated code. */\n+   options are not supposed to alter the generated code.  */\n \n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -343,7 +343,7 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \n /* Define this as 1 if `char' should by default be signed; else as 0.\n \n-   On the NEC V850, loads do sign extension, so make this default. */\n+   On the NEC V850, loads do sign extension, so make this default.  */\n #define DEFAULT_SIGNED_CHAR 1\n \f\n /* Standard register usage.  */\n@@ -401,7 +401,7 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n }\n \n /* If TARGET_NO_APP_REGS is not defined then add r2 and r5 to\n-   the pool of fixed registers. See PR 14505. */\n+   the pool of fixed registers. See PR 14505.  */\n #define CONDITIONAL_REGISTER_USAGE  \\\n {                                                       \\\n   if (TARGET_NO_APP_REGS)                               \\\n@@ -461,7 +461,7 @@ enum reg_class\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n { \"NO_REGS\", \"GENERAL_REGS\", \"ALL_REGS\", \"LIM_REGS\" }\n@@ -634,7 +634,7 @@ enum reg_class\n    `HARD_FRAME_POINTER_REGNUM' or `STACK_POINTER_REGNUM'.\n \n    Do not define this macro if it would be the same as\n-   `FRAME_POINTER_REGNUM'. */\n+   `FRAME_POINTER_REGNUM'.  */\n #undef  HARD_FRAME_POINTER_REGNUM \n #define HARD_FRAME_POINTER_REGNUM 29\n \n@@ -674,7 +674,7 @@ enum reg_class\n          {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n \n    Note that the elimination of the argument pointer with the stack\n-   pointer is specified first since that is the preferred elimination. */\n+   pointer is specified first since that is the preferred elimination.  */\n \n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\t\\\n@@ -687,15 +687,15 @@ enum reg_class\n    TO-REG.  This macro need only be defined if `ELIMINABLE_REGS' is\n    defined, and will usually be the constant 1, since most of the\n    cases preventing register elimination are things that the compiler\n-   already knows about. */\n+   already knows about.  */\n \n #define CAN_ELIMINATE(FROM, TO) \\\n  ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n \n /* This macro is similar to `INITIAL_FRAME_POINTER_OFFSET'.  It\n    specifies the initial difference between the specified pair of\n    registers.  This macro must be defined if `ELIMINABLE_REGS' is\n-   defined. */\n+   defined.  */\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -797,7 +797,7 @@ struct cum_arg { int nbytes; int anonymous_args; };\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.   */\n+   otherwise, FUNC is 0.  */\n    \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n   gen_rtx_REG (TYPE_MODE (VALTYPE), 10)\n@@ -1003,7 +1003,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    GO_IF_LEGITIMATE_ADDRESS.\n \n    It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.   */\n+   opportunities to optimize the output.  */\n \n #define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)  {}\n \n@@ -1068,10 +1068,10 @@ typedef enum\n /* One or more functions to be defined in `varasm.c'.  These\n    functions should do jobs analogous to those of `text_section' and\n    `data_section', for your additional sections.  Do not define this\n-   macro if you do not define `EXTRA_SECTIONS'. */\n+   macro if you do not define `EXTRA_SECTIONS'.  */\n #undef\tEXTRA_SECTION_FUNCTIONS\n \n-/* This could be done a lot more cleanly using ANSI C ... */\n+/* This could be done a lot more cleanly using ANSI C....  */\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n sdata_section ()\t\t\t\t\t\t\t\\\n@@ -1188,14 +1188,14 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n   v850_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n /* This says how to output the assembler to define a global\n-   uninitialized, common symbol. */\n+   uninitialized, common symbol.  */\n #undef  ASM_OUTPUT_ALIGNED_COMMON\n #undef  ASM_OUTPUT_COMMON\n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN) \\\n      v850_output_common (FILE, DECL, NAME, SIZE, ALIGN)\n \n /* This says how to output the assembler to define a local\n-   uninitialized symbol. */\n+   uninitialized symbol.  */\n #undef  ASM_OUTPUT_ALIGNED_LOCAL\n #undef  ASM_OUTPUT_LOCAL\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN) \\\n@@ -1289,11 +1289,11 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n /* The switch instruction requires that the jump table immediately follow\n-   it. */\n+   it.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n /* svr4.h defines this assuming that 4 byte alignment is required.  */"}, {"sha": "cef8365ed0b3ccb13fb76316577288c75686e503", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de0221f3539de204f92443ca66a0e8b36de64b/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=d4de0221f3539de204f92443ca66a0e8b36de64b", "patch": "@@ -1429,7 +1429,7 @@\n       if (GET_CODE (operands[1]) == REG)\n         return \\\"jarl %1, r31\\\";\n       else\n-      /* Reload can generate this pattern... */\n+      /* Reload can generate this pattern....  */\n         return \\\"movhi hi(%1), r0, r11 ; movea lo(%1), r11, r11 ; jarl .+4, r31 ; add 4, r31 ; jmp r11\\\";\n     }\n   else"}]}