{"sha": "1e7e62b1145656ae1002c040023eb7c8a342e697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3ZTYyYjExNDU2NTZhZTEwMDJjMDQwMDIzZWI3YzhhMzQyZTY5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-20T19:24:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-20T19:24:57Z"}, "message": "i386.c (set_pic_reg_ever_live): Remove.\n\n\t* config/i386/i386.c (set_pic_reg_ever_live): Remove.\n\t(legitimize_pic_address): Do not call set_pic_reg_ever_live.\n\t(legitimize_tls_address): Ditto.\n\t(ix86_expand_move): Ditto.\n\t(ix86_expand_binary_operator): Remove reload_in_progress checks.\n\t(ix86_expand_unary_operator): Ditto.\n\t* config/i386/predicates.md (index_register_operand): Ditto.\n\nFrom-SVN: r222246", "tree": {"sha": "5ad90865af7c9ffa475547ba6e33db5d2649a236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad90865af7c9ffa475547ba6e33db5d2649a236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e7e62b1145656ae1002c040023eb7c8a342e697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7e62b1145656ae1002c040023eb7c8a342e697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7e62b1145656ae1002c040023eb7c8a342e697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7e62b1145656ae1002c040023eb7c8a342e697/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87e0ceb78c9797754f599dda0344a4165da93338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e0ceb78c9797754f599dda0344a4165da93338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e0ceb78c9797754f599dda0344a4165da93338"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "a4c10765dfaa7bf2ae01b0bd88682469a1003454", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e7e62b1145656ae1002c040023eb7c8a342e697", "patch": "@@ -1,3 +1,13 @@\n+2015-04-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (set_pic_reg_ever_live): Remove.\n+\t(legitimize_pic_address): Do not call set_pic_reg_ever_live.\n+\t(legitimize_tls_address): Ditto.\n+\t(ix86_expand_move): Ditto.\n+\t(ix86_expand_binary_operator): Remove reload_in_progress checks.\n+\t(ix86_expand_unary_operator): Ditto.\n+\t* config/i386/predicates.md (index_register_operand): Ditto.\n+\n 2015-04-20  Selim Belbachir  <selim.belbachir@fr.thalesgroup.com>\n \n \t* reorg.c (try_merge_delay_insns): Improve correctness checking"}, {"sha": "74332f3bef0f1cf411e38342546eff27d52b071b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 35, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1e7e62b1145656ae1002c040023eb7c8a342e697", "patch": "@@ -13576,15 +13576,6 @@ ix86_GOT_alias_set (void)\n   return set;\n }\n \n-/* Set regs_ever_live for PIC base address register\n-   to true if required.  */\n-static void\n-set_pic_reg_ever_live ()\n-{\n-  if (reload_in_progress)\n-    df_set_regs_ever_live (REGNO (pic_offset_table_rtx), true);\n-}\n-\n /* Return a legitimate reference for ORIG (an address) using the\n    register REG.  If REG is 0, a new pseudo is generated.\n \n@@ -13635,7 +13626,6 @@ legitimize_pic_address (rtx orig, rtx reg)\n       /* This symbol may be referenced via a displacement from the PIC\n \t base address (@GOTOFF).  */\n \n-      set_pic_reg_ever_live ();\n       if (GET_CODE (addr) == CONST)\n \taddr = XEXP (addr, 0);\n       if (GET_CODE (addr) == PLUS)\n@@ -13667,7 +13657,6 @@ legitimize_pic_address (rtx orig, rtx reg)\n       /* This symbol may be referenced via a displacement from the PIC\n \t base address (@GOTOFF).  */\n \n-      set_pic_reg_ever_live ();\n       if (GET_CODE (addr) == CONST)\n \taddr = XEXP (addr, 0);\n       if (GET_CODE (addr) == PLUS)\n@@ -13728,7 +13717,6 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t  /* This symbol must be referenced via a load from the\n \t     Global Offset Table (@GOT).  */\n \n-\t  set_pic_reg_ever_live ();\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOT);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n \t  if (TARGET_64BIT)\n@@ -13780,7 +13768,6 @@ legitimize_pic_address (rtx orig, rtx reg)\n \t    {\n \t      if (!TARGET_64BIT)\n \t\t{\n-\t\t  set_pic_reg_ever_live ();\n \t\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op0),\n \t\t\t\t\t    UNSPEC_GOTOFF);\n \t\t  new_rtx = gen_rtx_PLUS (Pmode, new_rtx, op1);\n@@ -14082,7 +14069,6 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \t}\n       else if (flag_pic)\n \t{\n-\t  set_pic_reg_ever_live ();\n \t  pic = pic_offset_table_rtx;\n \t  type = TARGET_ANY_GNU_TLS ? UNSPEC_GOTNTPOFF : UNSPEC_GOTTPOFF;\n \t}\n@@ -17306,10 +17292,8 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \t  /* dynamic-no-pic */\n \t  if (MACHOPIC_INDIRECT)\n \t    {\n-\t      rtx temp = ((reload_in_progress\n-\t\t\t   || ((op0 && REG_P (op0))\n-\t\t\t       && mode == Pmode))\n-\t\t\t  ? op0 : gen_reg_rtx (Pmode));\n+\t      rtx temp = (op0 && REG_P (op0) && mode == Pmode)\n+\t\t\t ? op0 : gen_reg_rtx (Pmode);\n \t      op1 = machopic_indirect_data_reference (op1, temp);\n \t      if (MACHOPIC_PURE)\n \t\top1 = machopic_legitimize_pic_address (op1, mode,\n@@ -17957,16 +17941,10 @@ ix86_expand_binary_operator (enum rtx_code code, machine_mode mode,\n  /* Emit the instruction.  */\n \n   op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_ee (code, mode, src1, src2));\n-  if (reload_in_progress)\n-    {\n-      /* Reload doesn't know about the flags register, and doesn't know that\n-         it doesn't want to clobber it.  We can only do this with PLUS.  */\n-      gcc_assert (code == PLUS);\n-      emit_insn (op);\n-    }\n-  else if (reload_completed\n-\t   && code == PLUS\n-\t   && !rtx_equal_p (dst, src1))\n+\n+  if (reload_completed\n+      && code == PLUS\n+      && !rtx_equal_p (dst, src1))\n     {\n       /* This is going to be an LEA; avoid splitting it later.  */\n       emit_insn (op);\n@@ -18130,13 +18108,9 @@ ix86_expand_unary_operator (enum rtx_code code, machine_mode mode,\n   /* Emit the instruction.  */\n \n   op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_e (code, mode, src));\n-  if (reload_in_progress || code == NOT)\n-    {\n-      /* Reload doesn't know about the flags register, and doesn't know that\n-         it doesn't want to clobber it.  */\n-      gcc_assert (code == NOT);\n-      emit_insn (op);\n-    }\n+\n+  if (code == NOT)\n+    emit_insn (op);\n   else\n     {\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));"}, {"sha": "92533b553a4f5b836be6ff316e1b40d0dce3ed73", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7e62b1145656ae1002c040023eb7c8a342e697/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=1e7e62b1145656ae1002c040023eb7c8a342e697", "patch": "@@ -577,7 +577,7 @@\n {\n   if (GET_CODE (op) == SUBREG)\n     op = SUBREG_REG (op);\n-  if (reload_in_progress || reload_completed)\n+  if (reload_completed)\n     return REG_OK_FOR_INDEX_STRICT_P (op);\n   else\n     return REG_OK_FOR_INDEX_NONSTRICT_P (op);"}]}