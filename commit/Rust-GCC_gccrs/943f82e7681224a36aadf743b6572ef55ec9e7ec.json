{"sha": "943f82e7681224a36aadf743b6572ef55ec9e7ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzZjgyZTc2ODEyMjRhMzZhYWRmNzQzYjY1NzJlZjU1ZWM5ZTdlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-14T20:17:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-14T20:17:34Z"}, "message": "re PR c++/36625 (bogus error on __attribute__((aligned(N))) in template code)\n\n\tPR c++/36625\n\t* c-common.c (attribute_takes_identifier_p): New fn.\n\t* c-common.h: Declare it.\ncp/\n\t* parser.c (cp_parser_parenthesized_expression_list): Change\n\tis_attribute_list parm to int to indicate whether or not to\n\thandle initial identifier specially.\n\t(cp_parser_attribute_list): Use attribute_takes_identifier_p.\n\nFrom-SVN: r158355", "tree": {"sha": "15fb63d52eb5842deac30924073c0b3cdfc5783f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15fb63d52eb5842deac30924073c0b3cdfc5783f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943f82e7681224a36aadf743b6572ef55ec9e7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943f82e7681224a36aadf743b6572ef55ec9e7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943f82e7681224a36aadf743b6572ef55ec9e7ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943f82e7681224a36aadf743b6572ef55ec9e7ec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17fb1a8ce7ef03fcd293c16fc2e5bf087b165802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fb1a8ce7ef03fcd293c16fc2e5bf087b165802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fb1a8ce7ef03fcd293c16fc2e5bf087b165802"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "f29c405d0e5208bde1a06966e0838c1dcd7e7f71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -1,3 +1,9 @@\n+2010-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/36625\n+\t* c-common.c (attribute_takes_identifier_p): New fn.\n+\t* c-common.h: Declare it.\n+\n 2010-04-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*divmod<mode>4): Remove stray \"&&\" from"}, {"sha": "ac113676d51033fa8efc6522fe0f671019cec886", "filename": "gcc/c-common.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -5809,6 +5809,17 @@ c_init_attributes (void)\n #undef DEF_ATTR_TREE_LIST\n }\n \n+/* Returns TRUE iff the attribute indicated by ATTR_ID takes a plain\n+   identifier as an argument, so the front end shouldn't look it up.  */\n+\n+bool\n+attribute_takes_identifier_p (tree attr_id)\n+{\n+  return (is_attribute_p (\"mode\", attr_id)\n+\t  || is_attribute_p (\"format\", attr_id)\n+\t  || is_attribute_p (\"cleanup\", attr_id));\n+}\n+\n /* Attribute handlers common to C front ends.  */\n \n /* Handle a \"packed\" attribute; arguments as in"}, {"sha": "6ed38490cb6132cdd1a77928a3e2c6fbe4b8e1f2", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -822,6 +822,7 @@ extern void check_function_format (tree, int, tree *);\n extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n+extern bool attribute_takes_identifier_p (tree);\n extern int c_common_handle_option (size_t code, const char *arg, int value);\n extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);"}, {"sha": "6a11a946300071186ffa21df08cc1e7876f563fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -1,3 +1,11 @@\n+2010-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/36625\n+\t* parser.c (cp_parser_parenthesized_expression_list): Change\n+\tis_attribute_list parm to int to indicate whether or not to\n+\thandle initial identifier specially.\n+\t(cp_parser_attribute_list): Use attribute_takes_identifier_p.\n+\n 2010-04-13  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (type_decays_to): Check MAYBE_CLASS_TYPE_P instead of"}, {"sha": "720a632ed7530522a94714e80402423664cee25f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -1596,7 +1596,9 @@ static tree cp_parser_postfix_open_square_expression\n static tree cp_parser_postfix_dot_deref_expression\n   (cp_parser *, enum cpp_ttype, tree, bool, cp_id_kind *, location_t);\n static VEC(tree,gc) *cp_parser_parenthesized_expression_list\n-  (cp_parser *, bool, bool, bool, bool *);\n+  (cp_parser *, int, bool, bool, bool *);\n+/* Values for the second parameter of cp_parser_parenthesized_expression_list.  */\n+enum { non_attr = 0, normal_attr = 1, id_attr = 2 };\n static void cp_parser_pseudo_destructor_name\n   (cp_parser *, tree *, tree *);\n static tree cp_parser_unary_expression\n@@ -4806,7 +4808,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\tparser->integral_constant_expression_p = false;\n \t      }\n \t    args = (cp_parser_parenthesized_expression_list\n-\t\t    (parser, /*is_attribute_list=*/false,\n+\t\t    (parser, non_attr,\n \t\t     /*cast_p=*/false, /*allow_expansion_p=*/true,\n \t\t     /*non_constant_p=*/NULL));\n \t    if (is_builtin_constant_p)\n@@ -5244,20 +5246,22 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n    Returns a vector of trees.  Each element is a representation of an\n    assignment-expression.  NULL is returned if the ( and or ) are\n    missing.  An empty, but allocated, vector is returned on no\n-   expressions.  The parentheses are eaten.  IS_ATTRIBUTE_LIST is true\n-   if this is really an attribute list being parsed.  If\n+   expressions.  The parentheses are eaten.  IS_ATTRIBUTE_LIST is id_attr\n+   if we are parsing an attribute list for an attribute that wants a\n+   plain identifier argument, normal_attr for an attribute that wants\n+   an expression, or non_attr if we aren't parsing an attribute list.  If\n    NON_CONSTANT_P is non-NULL, *NON_CONSTANT_P indicates whether or\n    not all of the expressions in the list were constant.  */\n \n static VEC(tree,gc) *\n cp_parser_parenthesized_expression_list (cp_parser* parser,\n-\t\t\t\t\t bool is_attribute_list,\n+\t\t\t\t\t int is_attribute_list,\n \t\t\t\t\t bool cast_p,\n                                          bool allow_expansion_p,\n \t\t\t\t\t bool *non_constant_p)\n {\n   VEC(tree,gc) *expression_list;\n-  bool fold_expr_p = is_attribute_list;\n+  bool fold_expr_p = is_attribute_list != non_attr;\n   tree identifier = NULL_TREE;\n   bool saved_greater_than_is_operator_p;\n \n@@ -5284,7 +5288,7 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \n \t/* At the beginning of attribute lists, check to see if the\n \t   next token is an identifier.  */\n-\tif (is_attribute_list\n+\tif (is_attribute_list == id_attr\n \t    && cp_lexer_peek_token (parser->lexer)->type == CPP_NAME)\n \t  {\n \t    cp_token *token;\n@@ -5345,7 +5349,7 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \n \t/* After the first item, attribute lists look the same as\n \t   expression lists.  */\n-\tis_attribute_list = false;\n+\tis_attribute_list = non_attr;\n \n       get_comma:;\n \t/* If the next token isn't a `,', then we are done.  */\n@@ -5820,7 +5824,8 @@ cp_parser_new_placement (cp_parser* parser)\n \n   /* Parse the expression-list.  */\n   expression_list = (cp_parser_parenthesized_expression_list\n-\t\t     (parser, false, /*cast_p=*/false, /*allow_expansion_p=*/true,\n+\t\t     (parser, non_attr, /*cast_p=*/false,\n+\t\t      /*allow_expansion_p=*/true,\n \t\t      /*non_constant_p=*/NULL));\n \n   return expression_list;\n@@ -6026,7 +6031,8 @@ cp_parser_new_initializer (cp_parser* parser)\n     }\n   else\n     expression_list = (cp_parser_parenthesized_expression_list\n-\t\t       (parser, false, /*cast_p=*/false, /*allow_expansion_p=*/true,\n+\t\t       (parser, non_attr, /*cast_p=*/false,\n+\t\t\t/*allow_expansion_p=*/true,\n \t\t\t/*non_constant_p=*/NULL));\n \n   return expression_list;\n@@ -9967,7 +9973,7 @@ cp_parser_mem_initializer (cp_parser* parser)\n   else\n     {\n       VEC(tree,gc)* vec;\n-      vec = cp_parser_parenthesized_expression_list (parser, false,\n+      vec = cp_parser_parenthesized_expression_list (parser, non_attr,\n \t\t\t\t\t\t     /*cast_p=*/false,\n \t\t\t\t\t\t     /*allow_expansion_p=*/true,\n \t\t\t\t\t\t     /*non_constant_p=*/NULL);\n@@ -15453,7 +15459,7 @@ cp_parser_initializer (cp_parser* parser, bool* is_direct_init,\n   else if (token->type == CPP_OPEN_PAREN)\n     {\n       VEC(tree,gc) *vec;\n-      vec = cp_parser_parenthesized_expression_list (parser, false,\n+      vec = cp_parser_parenthesized_expression_list (parser, non_attr,\n \t\t\t\t\t\t     /*cast_p=*/false,\n \t\t\t\t\t\t     /*allow_expansion_p=*/true,\n \t\t\t\t\t\t     non_constant_p);\n@@ -17768,8 +17774,10 @@ cp_parser_attribute_list (cp_parser* parser)\n \t  if (token->type == CPP_OPEN_PAREN)\n \t    {\n \t      VEC(tree,gc) *vec;\n+\t      int attr_flag = (attribute_takes_identifier_p (identifier)\n+\t\t\t       ? id_attr : normal_attr);\n \t      vec = cp_parser_parenthesized_expression_list\n-\t\t    (parser, true, /*cast_p=*/false,\n+\t\t    (parser, attr_flag, /*cast_p=*/false,\n \t\t     /*allow_expansion_p=*/false,\n \t\t     /*non_constant_p=*/NULL);\n \t      if (vec == NULL)\n@@ -18971,7 +18979,7 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n     }\n \n \n-  vec = cp_parser_parenthesized_expression_list (parser, false,\n+  vec = cp_parser_parenthesized_expression_list (parser, non_attr,\n \t\t\t\t\t\t /*cast_p=*/true,\n \t\t\t\t\t\t /*allow_expansion_p=*/true,\n \t\t\t\t\t\t /*non_constant_p=*/NULL);"}, {"sha": "e505fe7a7fdaac25e6b8382ac855a9386059f18b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -1,3 +1,8 @@\n+2010-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/36625\n+\t* g++.dg/ext/attrib38.C: New.\n+\n 2010-04-14  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR testsuite/43739"}, {"sha": "be3c7f2ba1ad7e99751c974dae09d3780c7ebe53", "filename": "gcc/testsuite/g++.dg/ext/attrib38.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943f82e7681224a36aadf743b6572ef55ec9e7ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib38.C?ref=943f82e7681224a36aadf743b6572ef55ec9e7ec", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/36625\n+\n+template <int N>\n+struct A {\n+  struct S { short f[3]; } __attribute__ ((aligned (N)));\n+};\n+\n+int main ()\n+{\n+  A<4>::S s;\n+}"}]}