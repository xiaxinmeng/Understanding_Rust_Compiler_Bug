{"sha": "cc83c823a2be3dc48f011c07c9e407af0a7974c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4M2M4MjNhMmJlM2RjNDhmMDExYzA3YzllNDA3YWYwYTc5NzRjMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-01-09T14:51:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-09T14:51:09Z"}, "message": "re PR c/48418 (Bit shift operator >>=)\n\n\tPR c/48418\n\t* c-common.c (c_fully_fold_internal): Warn for LSHIFT_EXPR and\n\tRSHIFT_EXPR, if orig_op1 isn't INTEGER_CST, op1 is INTEGER_CST\n\tand is either negative or bigger or equal to type precision\n\tof the first operand.\n\n\t* typeck.c (cp_build_binary_op): For LSHIFT_EXPR and RSHIFT_EXPR,\n\tcall maybe_constant_value for the negative or too big shift\n\tcount warnings.\n\n\t* c-c++-common/pr48418.c: New test.\n\nFrom-SVN: r195051", "tree": {"sha": "9860db1553f003a5d248886e9631536f697cf020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9860db1553f003a5d248886e9631536f697cf020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc83c823a2be3dc48f011c07c9e407af0a7974c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc83c823a2be3dc48f011c07c9e407af0a7974c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc83c823a2be3dc48f011c07c9e407af0a7974c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc83c823a2be3dc48f011c07c9e407af0a7974c0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdbff37f390c9bb60794be943acb898159717834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbff37f390c9bb60794be943acb898159717834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdbff37f390c9bb60794be943acb898159717834"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "84addf720bbee42581dfbe23ad388ab41e5c32cb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -1,3 +1,11 @@\n+2013-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48418\n+\t* c-common.c (c_fully_fold_internal): Warn for LSHIFT_EXPR and\n+\tRSHIFT_EXPR, if orig_op1 isn't INTEGER_CST, op1 is INTEGER_CST\n+\tand is either negative or bigger or equal to type precision\n+\tof the first operand.\n+\n 2012-12-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/55570"}, {"sha": "72483937b7afcb1218d86a333dd1490388fb6cff", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines shared by all languages that are variants of C.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n-   Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\n+   2013 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1269,6 +1269,25 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  && !TREE_OVERFLOW_P (op0)\n \t  && !TREE_OVERFLOW_P (op1))\n \toverflow_warning (EXPR_LOCATION (expr), ret);\n+      if ((code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n+\t  && TREE_CODE (orig_op1) != INTEGER_CST\n+\t  && TREE_CODE (op1) == INTEGER_CST\n+\t  && (TREE_CODE (TREE_TYPE (orig_op0)) == INTEGER_TYPE\n+\t      || TREE_CODE (TREE_TYPE (orig_op0)) == FIXED_POINT_TYPE)\n+\t  && TREE_CODE (TREE_TYPE (orig_op1)) == INTEGER_TYPE\n+\t  && c_inhibit_evaluation_warnings == 0)\n+\t{\n+\t  if (tree_int_cst_sgn (op1) < 0)\n+\t    warning_at (loc, 0, (code == LSHIFT_EXPR\n+\t\t\t\t ? G_(\"left shift count is negative\")\n+\t\t\t\t : G_(\"right shift count is negative\")));\n+\t  else if (compare_tree_int (op1,\n+\t\t\t\t     TYPE_PRECISION (TREE_TYPE (orig_op0)))\n+\t\t   >= 0)\n+\t    warning_at (loc, 0, (code == LSHIFT_EXPR\n+\t\t\t\t ? G_(\"left shift count >= width of type\")\n+\t\t\t\t : G_(\"right shift count >= width of type\")));\n+\t}\n       goto out;\n \n     case INDIRECT_REF:"}, {"sha": "d67a3c40f35536edb0e9971e98da0233057eaddc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -1,3 +1,10 @@\n+2013-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48418\n+\t* typeck.c (cp_build_binary_op): For LSHIFT_EXPR and RSHIFT_EXPR,\n+\tcall maybe_constant_value for the negative or too big shift\n+\tcount warnings.\n+\n 2013-01-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55801"}, {"sha": "864213534d8f418ceef7caf226df723d89e31e5e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -1,7 +1,7 @@\n /* Build expressions with type checking for C++ compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011, 2012\n+   2011, 2012, 2013\n    Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -4095,18 +4095,21 @@ cp_build_binary_op (location_t location,\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n+\t  tree const_op1 = maybe_constant_value (op1);\n+\t  if (TREE_CODE (const_op1) != INTEGER_CST)\n+\t    const_op1 = op1;\n \t  result_type = type0;\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t  if (TREE_CODE (const_op1) == INTEGER_CST)\n \t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n+\t      if (tree_int_cst_lt (const_op1, integer_zero_node))\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n \t\t    warning (0, \"right shift count is negative\");\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0\n+\t\t  if (compare_tree_int (const_op1, TYPE_PRECISION (type0)) >= 0\n \t\t      && (complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n \t\t    warning (0, \"right shift count >= width of type\");\n@@ -4138,16 +4141,20 @@ cp_build_binary_op (location_t location,\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n+\t  tree const_op1 = maybe_constant_value (op1);\n+\t  if (TREE_CODE (const_op1) != INTEGER_CST)\n+\t    const_op1 = op1;\n \t  result_type = type0;\n-\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t  if (TREE_CODE (const_op1) == INTEGER_CST)\n \t    {\n-\t      if (tree_int_cst_lt (op1, integer_zero_node))\n+\t      if (tree_int_cst_lt (const_op1, integer_zero_node))\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n \t\t    warning (0, \"left shift count is negative\");\n \t\t}\n-\t      else if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n+\t      else if (compare_tree_int (const_op1,\n+\t\t\t\t\t TYPE_PRECISION (type0)) >= 0)\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)"}, {"sha": "5b95a473a64835b112a384b7cc3e448fd6095332", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -1,3 +1,8 @@\n+2013-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/48418\n+\t* c-c++-common/pr48418.c: New test.\n+\n 2013-01-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/55801"}, {"sha": "95ff855b89c83ed5af1cfca5d583d1b398989770", "filename": "gcc/testsuite/c-c++-common/pr48418.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc83c823a2be3dc48f011c07c9e407af0a7974c0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c?ref=cc83c823a2be3dc48f011c07c9e407af0a7974c0", "patch": "@@ -0,0 +1,20 @@\n+/* PR c/48418 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+int\n+foo (int x)\n+{\n+  const int a = sizeof (int) * __CHAR_BIT__;\n+  const int b = -7;\n+  int c = 0;\n+  c += x << a;\t\t\t\t   /* { dg-warning \"left shift count >= width of type\" } */\n+  c += x << b;\t\t\t\t   /* { dg-warning \"left shift count is negative\" } */\n+  c += x << (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"left shift count >= width of type\" } */\n+  c += x << -7;\t\t\t\t   /* { dg-warning \"left shift count is negative\" } */\n+  c += x >> a;\t\t\t\t   /* { dg-warning \"right shift count >= width of type\" } */\n+  c += x >> b;\t\t\t\t   /* { dg-warning \"right shift count is negative\" } */\n+  c += x >> (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"right shift count >= width of type\" } */\n+  c += x >> -7;\t\t\t\t   /* { dg-warning \"right shift count is negative\" } */\n+  return c;\n+}"}]}