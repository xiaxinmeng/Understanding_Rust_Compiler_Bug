{"sha": "2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1NWYxYzZkZDNiMWExZGI3NDUzMDY1YTBiYjY3ZjMwZDQ1NTJhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-09-13T18:27:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-13T18:27:24Z"}, "message": "re PR ada/21952 (Annoying \"attribute directive ignored\" warnings)\n\n\tPR ada/21952\n\t* gigi.h (gnat_internal_attribute_table): Declare.\n\t* misc.c (LANG_HOOKS_ATTRIBUTE_TABLE): Define to above.\n\t* utils.c (gnat_internal_attribute_table): New global variable.\n\t(builtin_function): Always call decl_attributes on the builtin.\n\t(handle_const_attribute): New static function.\n\t(handle_nothrow_attribute): Likewise.\n\nFrom-SVN: r116926", "tree": {"sha": "2e239ba8769813341c27af38aed2f2c2f2f5459f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e239ba8769813341c27af38aed2f2c2f2f5459f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/comments", "author": null, "committer": null, "parents": [{"sha": "f66fd328ce6453b71f117eed42dad270e3c2bcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66fd328ce6453b71f117eed42dad270e3c2bcaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66fd328ce6453b71f117eed42dad270e3c2bcaa"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "fd8318b73f16004af2566710d5f63dd216f3005d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "patch": "@@ -1,3 +1,13 @@\n+2006-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/21952\n+\t* gigi.h (gnat_internal_attribute_table): Declare.\n+\t* misc.c (LANG_HOOKS_ATTRIBUTE_TABLE): Define to above.\n+\t* utils.c (gnat_internal_attribute_table): New global variable.\n+\t(builtin_function): Always call decl_attributes on the builtin.\n+\t(handle_const_attribute): New static function.\n+\t(handle_nothrow_attribute): Likewise.\n+\n 2006-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* Make-lang.in: Use $(HEADER_H) instead of header.h in dependencies."}, {"sha": "43d46f6ad0240510807cfd56427fbc614b848b50", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "patch": "@@ -309,7 +309,6 @@ extern int force_global;\n    type whose bit width is Pmode.  Assume \"long\" is such a type here.  */\n #undef SIZE_TYPE\n #define SIZE_TYPE \"long int\"\n-\n \f\n /* Data structures used to represent attributes.  */\n \n@@ -332,6 +331,9 @@ struct attrib\n   Node_Id error_point;\n };\n \n+/* Table of machine-independent internal attributes.  */\n+extern const struct attribute_spec gnat_internal_attribute_table[];\n+\n /* Define the entries in the standard data array.  */\n enum standard_datatypes\n {"}, {"sha": "11bd27bd58371070e04d83f3c6ad93cc59c3ea7b", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "patch": "@@ -161,6 +161,8 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_UNSIGNED_TYPE\tgnat_unsigned_type\n #undef  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gnat_signed_or_unsigned_type\n+#undef  LANG_HOOKS_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n \n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "c59a33e9b4f5d7f9203b11ab106b71061e1da06e", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2655f1c6dd3b1a1db7453065a0bb67f30d4552ad/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=2655f1c6dd3b1a1db7453065a0bb67f30d4552ad", "patch": "@@ -79,6 +79,21 @@ tree gnat_raise_decls[(int) LAST_REASON_CODE + 1];\n tree static_ctors;\n tree static_dtors;\n \n+/* Forward declarations for handlers of attributes.  */\n+static tree handle_const_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n+\n+/* Table of machine-independent internal attributes for Ada.  We support\n+   this minimal set ot attributes to accomodate the Alpha back-end which\n+   unconditionally puts them on its builtins.  */\n+const struct attribute_spec gnat_internal_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  { \"const\",   0, 0, true,  false, false, handle_const_attribute   },\n+  { \"nothrow\", 0, 0, true,  false, false, handle_nothrow_attribute },\n+  { NULL,      0, 0, false, false, false, NULL }\n+};\n+\n /* Associates a GNAT tree node to a GCC tree node. It is used in\n    `save_gnu_tree', `get_gnu_tree' and `present_gnu_tree'. See documentation\n    of `save_gnu_tree' for more info.  */\n@@ -1826,11 +1841,48 @@ builtin_function (const char *name, tree type, int function_code,\n   gnat_pushdecl (decl, Empty);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n+\n+  /* Possibly apply some default attributes to this built-in function.  */\n   if (attrs)\n-      decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n+    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n+  else\n+    decl_attributes (&decl, NULL_TREE, 0);\n+\n   return decl;\n }\n \n+/* Handle a \"const\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_const_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\ttree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\tbool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    TREE_READONLY (*node) = 1;\n+  else\n+    *no_add_attrs = true;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"nothrow\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_nothrow_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t  tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n+\t\t\t  bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    TREE_NOTHROW (*node) = 1;\n+  else\n+    *no_add_attrs = true;\n+\n+  return NULL_TREE;\n+}\n+\n /* Return an integer type with the number of bits of precision given by\n    PRECISION.  UNSIGNEDP is nonzero if the type is unsigned; otherwise\n    it is a signed type.  */"}]}