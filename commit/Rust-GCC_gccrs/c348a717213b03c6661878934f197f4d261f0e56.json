{"sha": "c348a717213b03c6661878934f197f4d261f0e56", "node_id": "C_kwDOANBUbNoAKGMzNDhhNzE3MjEzYjAzYzY2NjE4Nzg5MzRmMTk3ZjRkMjYxZjBlNTY", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2023-02-14T19:23:01Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2023-02-14T22:44:34Z"}, "message": "bpf: fix memory constraint of ldx/stx instructions [PR108790]\n\nIn some cases where the target memory address for an ldx or stx\ninstruction could be reduced to a constant, GCC could emit a malformed\ninstruction like:\n\n    ldxdw %r0,0\n\nRather than the expected form:\n\n    ldxdw %rX, [%rY + OFFSET]\n\nThis is due to the constraint allowing a const_int operand, which the\noutput templates do not handle.\n\nFix it by introducing a new memory constraint for the appropriate\noperands of these instructions, which is identical to 'm' except that\nit does not accept const_int.\n\ngcc/\n\n\tPR target/108790\n\t* config/bpf/constraints.md (q): New memory constraint.\n\t* config/bpf/bpf.md (zero_extendhidi2): Use it here.\n\t(zero_extendqidi2): Likewise.\n\t(zero_extendsidi2): Likewise.\n\t(*mov<MM:mode>): Likewise.\n\ngcc/testsuite/\n\n\tPR target/108790\n\t* gcc.target/bpf/ldxdw.c: New test.", "tree": {"sha": "5d70417991652e21c9bcea3dd74d10f8a084f31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d70417991652e21c9bcea3dd74d10f8a084f31a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c348a717213b03c6661878934f197f4d261f0e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c348a717213b03c6661878934f197f4d261f0e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c348a717213b03c6661878934f197f4d261f0e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c348a717213b03c6661878934f197f4d261f0e56/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42ed1d9181d21d5cb02f131f641c0cf375eca9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42ed1d9181d21d5cb02f131f641c0cf375eca9d"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "f6be0a2123451289ddced0d9f37b5feaa916e2d7", "filename": "gcc/config/bpf/bpf.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Fconfig%2Fbpf%2Fbpf.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Fconfig%2Fbpf%2Fbpf.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.md?ref=c348a717213b03c6661878934f197f4d261f0e56", "patch": "@@ -242,7 +242,7 @@\n \n (define_insn \"zero_extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r,m\")))]\n+\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r,q\")))]\n   \"\"\n   \"@\n    and\\t%0,0xffff\n@@ -252,7 +252,7 @@\n \n (define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"0,r,m\")))]\n+\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"0,r,q\")))]\n   \"\"\n   \"@\n    and\\t%0,0xff\n@@ -263,7 +263,7 @@\n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,q\")))]\n   \"\"\n   \"@\n    * return bpf_has_alu32 ? \\\"mov32\\t%0,%1\\\" : \\\"mov\\t%0,%1\\;and\\t%0,0xffffffff\\\";\n@@ -302,8 +302,8 @@\n }\")\n \n (define_insn \"*mov<MM:mode>\"\n-  [(set (match_operand:MM 0 \"nonimmediate_operand\" \"=r, r,r,m,m\")\n-        (match_operand:MM 1 \"mov_src_operand\"      \" m,rI,B,r,I\"))]\n+  [(set (match_operand:MM 0 \"nonimmediate_operand\" \"=r, r,r,q,q\")\n+        (match_operand:MM 1 \"mov_src_operand\"      \" q,rI,B,r,I\"))]\n   \"\"\n   \"@\n    ldx<mop>\\t%0,%1"}, {"sha": "33f9177b8eb1aef13741f541751e663c872006c5", "filename": "gcc/config/bpf/constraints.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Fconfig%2Fbpf%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Fconfig%2Fbpf%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fconstraints.md?ref=c348a717213b03c6661878934f197f4d261f0e56", "patch": "@@ -29,3 +29,14 @@\n (define_constraint \"S\"\n   \"A constant call address.\"\n   (match_code \"const,symbol_ref,label_ref,const_int\"))\n+\n+;;\n+;; Memory constraints.\n+;;\n+\n+; Just like 'm' but disallows const_int.\n+; Used for ldx[b,h,w,dw] and stx[b,h,w,dw] instructions.\n+(define_memory_constraint \"q\"\n+  \"Memory reference which is not a constant integer.\"\n+  (and (match_code \"mem\")\n+       (match_test \"GET_CODE(XEXP(op, 0)) != CONST_INT\")))"}, {"sha": "0985ea3e6ac41ee2cf908f6e8d82796c55304520", "filename": "gcc/testsuite/gcc.target/bpf/ldxdw.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fldxdw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348a717213b03c6661878934f197f4d261f0e56/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fldxdw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbpf%2Fldxdw.c?ref=c348a717213b03c6661878934f197f4d261f0e56", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that we do not generate a malformed ldxdw instruction\n+   with a constant instead of register + offset.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-times \"ldxdw\\t%r.,\\\\\\[%r.+0\\\\\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"ldxdw\\t%r.,\\[0-9\\]+\" } } */\n+\n+unsigned long long test () {\n+  return *((unsigned long long *) 0x4000);\n+}"}]}