{"sha": "d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzOTRlMmJiYzE3NWY1M2Y2MGU3MWZjY2M1YTliZTQ1NDJjZTY4ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-10T03:51:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-10T03:51:11Z"}, "message": "compiler: Fix test for constant argument too large for make.\n\nFrom-SVN: r203338", "tree": {"sha": "5df145f25fbc3fe02363eec28c63aadb42997c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5df145f25fbc3fe02363eec28c63aadb42997c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6394e2bbc175f53f60e71fccc5a9be4542ce68e/comments", "author": null, "committer": null, "parents": [{"sha": "3d317d48a799c2561349f4aba97adf576d97b0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d317d48a799c2561349f4aba97adf576d97b0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d317d48a799c2561349f4aba97adf576d97b0db"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "0647a5058006d35713225a71f31d8f166dfd99b7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6394e2bbc175f53f60e71fccc5a9be4542ce68e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6394e2bbc175f53f60e71fccc5a9be4542ce68e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d6394e2bbc175f53f60e71fccc5a9be4542ce68e", "patch": "@@ -7542,7 +7542,7 @@ Builtin_call_expression::check_int_value(Expression* e, bool is_length)\n       switch (nc.to_unsigned_long(&v))\n \t{\n \tcase Numeric_constant::NC_UL_VALID:\n-\t  return true;\n+\t  break;\n \tcase Numeric_constant::NC_UL_NOTINT:\n \t  error_at(e->location(), \"non-integer %s argument to make\",\n \t\t   is_length ? \"len\" : \"cap\");\n@@ -7554,8 +7554,23 @@ Builtin_call_expression::check_int_value(Expression* e, bool is_length)\n \tcase Numeric_constant::NC_UL_BIG:\n \t  // We don't want to give a compile-time error for a 64-bit\n \t  // value on a 32-bit target.\n-\t  return true;\n+\t  break;\n+\t}\n+\n+      mpz_t val;\n+      if (!nc.to_int(&val))\n+\tgo_unreachable();\n+      int bits = mpz_sizeinbase(val, 2);\n+      mpz_clear(val);\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      if (bits >= int_type->integer_type()->bits())\n+\t{\n+\t  error_at(e->location(), \"%s argument too large for make\",\n+\t\t   is_length ? \"len\" : \"cap\");\n+\t  return false;\n \t}\n+\n+      return true;\n     }\n \n   if (e->type()->integer_type() != NULL)"}]}