{"sha": "3140b2ed036c51b9df0fda28b153ebecb4f906ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0MGIyZWQwMzZjNTFiOWRmMGZkYTI4YjE1M2ViZWNiNGY5MDZlYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-16T11:20:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-16T11:20:33Z"}, "message": "re PR rtl-optimization/66152 (suboptimal load bytes to stack)\n\n\tPR rtl-optimization/66152\n\t* builtins.h (c_readstr): Declare.\n\t* builtins.c (c_readstr): Remove forward declaration.  Add\n\tnull_terminated_p argument, if false, read all bytes from the\n\tstring instead of stopping after '\\0'.\n\t* expr.c (string_cst_read_str): New function.\n\t(store_expr): Use string_cst_read_str instead of\n\tbuiltin_strncpy_read_str.  Try to store by pieces the whole\n\texp_len first, and only if that fails, split it up into\n\tstore by pieces followed by clear_storage.  Formatting fix.\n\n\t* gcc.target/i386/pr66152.c: New test.\n\nFrom-SVN: r268957", "tree": {"sha": "81cea5780c130ecb2ea39b2cddc613799d6e31dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81cea5780c130ecb2ea39b2cddc613799d6e31dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3140b2ed036c51b9df0fda28b153ebecb4f906ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3140b2ed036c51b9df0fda28b153ebecb4f906ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3140b2ed036c51b9df0fda28b153ebecb4f906ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3140b2ed036c51b9df0fda28b153ebecb4f906ec/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d52e33df1b07c3d33b9fe377691ebbf4be157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d52e33df1b07c3d33b9fe377691ebbf4be157"}], "stats": {"total": 121, "additions": 93, "deletions": 28}, "files": [{"sha": "addbd3999322a89b4d90eae1ee78818f0a354e9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -1,5 +1,16 @@\n 2019-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/66152\n+\t* builtins.h (c_readstr): Declare.\n+\t* builtins.c (c_readstr): Remove forward declaration.  Add\n+\tnull_terminated_p argument, if false, read all bytes from the\n+\tstring instead of stopping after '\\0'.\n+\t* expr.c (string_cst_read_str): New function.\n+\t(store_expr): Use string_cst_read_str instead of\n+\tbuiltin_strncpy_read_str.  Try to store by pieces the whole\n+\texp_len first, and only if that fails, split it up into\n+\tstore by pieces followed by clear_storage.  Formatting fix.\n+\n \t* config/i386/i386.md (*movqi_internal): Remove static from\n \tbuf variable.  Use output_asm_insn (buf, operands); return \"\";\n \tinstead of return buf;."}, {"sha": "6f266ad15d0afb6c7672fe2e262ec1d12e2d383f", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -95,7 +95,6 @@ builtin_info_type builtin_info[(int)END_BUILTINS];\n /* Non-zero if __builtin_constant_p should be folded right away.  */\n bool force_folding_builtin_constant_p;\n \n-static rtx c_readstr (const char *, scalar_int_mode);\n static int target_char_cast (tree, char *);\n static rtx get_memory_rtx (tree, tree);\n static int apply_args_size (void);\n@@ -802,10 +801,14 @@ c_strlen (tree src, int only_value, c_strlen_data *data, unsigned eltsize)\n }\n \n /* Return a constant integer corresponding to target reading\n-   GET_MODE_BITSIZE (MODE) bits from string constant STR.  */\n+   GET_MODE_BITSIZE (MODE) bits from string constant STR.  If\n+   NULL_TERMINATED_P, reading stops after '\\0' character, all further ones\n+   are assumed to be zero, otherwise it reads as many characters\n+   as needed.  */\n \n-static rtx\n-c_readstr (const char *str, scalar_int_mode mode)\n+rtx\n+c_readstr (const char *str, scalar_int_mode mode,\n+\t   bool null_terminated_p/*=true*/)\n {\n   HOST_WIDE_INT ch;\n   unsigned int i, j;\n@@ -830,7 +833,7 @@ c_readstr (const char *str, scalar_int_mode mode)\n \tj = j + UNITS_PER_WORD - 2 * (j % UNITS_PER_WORD) - 1;\n       j *= BITS_PER_UNIT;\n \n-      if (ch)\n+      if (ch || !null_terminated_p)\n \tch = (unsigned char) str[i];\n       tmp[j / HOST_BITS_PER_WIDE_INT] |= ch << (j % HOST_BITS_PER_WIDE_INT);\n     }"}, {"sha": "1ffb491d7850366c74bd694bf9e1c277bcde1da9", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -103,6 +103,7 @@ struct c_strlen_data\n };\n \n extern tree c_strlen (tree, int, c_strlen_data * = NULL, unsigned = 1);\n+extern rtx c_readstr (const char *, scalar_int_mode, bool = true);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern void expand_builtin_update_setjmp_buf (rtx);"}, {"sha": "ce71ae710898444ea34b491ac6a98f8e25e01295", "filename": "gcc/expr.c", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -5453,6 +5453,30 @@ emit_storent_insn (rtx to, rtx from)\n   return maybe_expand_insn (code, 2, ops);\n }\n \n+/* Helper function for store_expr storing of STRING_CST.  */\n+\n+static rtx\n+string_cst_read_str (void *data, HOST_WIDE_INT offset, scalar_int_mode mode)\n+{\n+  tree str = (tree) data;\n+\n+  gcc_assert (offset >= 0);\n+  if (offset >= TREE_STRING_LENGTH (str))\n+    return const0_rtx;\n+\n+  if ((unsigned HOST_WIDE_INT) offset + GET_MODE_SIZE (mode)\n+      > (unsigned HOST_WIDE_INT) TREE_STRING_LENGTH (str))\n+    {\n+      char *p = XALLOCAVEC (char, GET_MODE_SIZE (mode));\n+      size_t l = TREE_STRING_LENGTH (str) - offset;\n+      memcpy (p, TREE_STRING_POINTER (str) + offset, l);\n+      memset (p + l, '\\0', GET_MODE_SIZE (mode) - l);\n+      return c_readstr (p, mode, false);\n+    }\n+\n+  return c_readstr (TREE_STRING_POINTER (str) + offset, mode, false);\n+}\n+\n /* Generate code for computing expression EXP,\n    and storing the value into TARGET.\n \n@@ -5472,7 +5496,7 @@ emit_storent_insn (rtx to, rtx from)\n \n rtx\n store_expr (tree exp, rtx target, int call_param_p,\n-\t\t\tbool nontemporal, bool reverse)\n+\t    bool nontemporal, bool reverse)\n {\n   rtx temp;\n   rtx alt_rtl = NULL_RTX;\n@@ -5606,36 +5630,32 @@ store_expr (tree exp, rtx target, int call_param_p,\n       if (TREE_STRING_LENGTH (str) <= 0)\n \tgoto normal_expr;\n \n-      str_copy_len = strlen (TREE_STRING_POINTER (str));\n-      if (str_copy_len < TREE_STRING_LENGTH (str) - 1)\n-\tgoto normal_expr;\n+      if (can_store_by_pieces (exp_len, string_cst_read_str, (void *) str,\n+\t\t\t       MEM_ALIGN (target), false))\n+\t{\n+\t  store_by_pieces (target, exp_len, string_cst_read_str, (void *) str,\n+\t\t\t   MEM_ALIGN (target), false, RETURN_BEGIN);\n+\t  return NULL_RTX;\n+\t}\n \n       str_copy_len = TREE_STRING_LENGTH (str);\n-      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0\n-\t  && TREE_STRING_POINTER (str)[TREE_STRING_LENGTH (str) - 1] == '\\0')\n+      if ((STORE_MAX_PIECES & (STORE_MAX_PIECES - 1)) == 0)\n \t{\n \t  str_copy_len += STORE_MAX_PIECES - 1;\n \t  str_copy_len &= ~(STORE_MAX_PIECES - 1);\n \t}\n-      str_copy_len = MIN (str_copy_len, exp_len);\n-      if (!can_store_by_pieces (str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\tCONST_CAST (char *, TREE_STRING_POINTER (str)),\n-\t\t\t\tMEM_ALIGN (target), false))\n+      if (str_copy_len >= exp_len)\n+\tgoto normal_expr;\n+\n+      if (!can_store_by_pieces (str_copy_len, string_cst_read_str,\n+\t\t\t\t(void *) str, MEM_ALIGN (target), false))\n \tgoto normal_expr;\n \n-      dest_mem = target;\n-\n-      memop_ret retmode = exp_len > str_copy_len ? RETURN_END : RETURN_BEGIN;\n-      dest_mem = store_by_pieces (dest_mem,\n-\t\t\t\t  str_copy_len, builtin_strncpy_read_str,\n-\t\t\t\t  CONST_CAST (char *,\n-\t\t\t\t\t      TREE_STRING_POINTER (str)),\n-\t\t\t\t  MEM_ALIGN (target), false,\n-\t\t\t\t  retmode);\n-      if (exp_len > str_copy_len)\n-\tclear_storage (adjust_address (dest_mem, BLKmode, 0),\n-\t\t       GEN_INT (exp_len - str_copy_len),\n-\t\t       BLOCK_OP_NORMAL);\n+      dest_mem = store_by_pieces (target, str_copy_len, string_cst_read_str,\n+\t\t\t\t  (void *) str, MEM_ALIGN (target), false,\n+\t\t\t\t  RETURN_END);\n+      clear_storage (adjust_address (dest_mem, BLKmode, 0),\n+\t\t     GEN_INT (exp_len - str_copy_len), BLOCK_OP_NORMAL);\n       return NULL_RTX;\n     }\n   else"}, {"sha": "ebc75cef578cb5a13e21ef4c02a0f4f116314dcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -1,3 +1,8 @@\n+2019-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/66152\n+\t* gcc.target/i386/pr66152.c: New test.\n+\n 2019-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/asan/asan_oob_test.cc: Skip OOB_int on SPARC."}, {"sha": "3d152ebc248f5e0f8a5351588529642b6697a720", "filename": "gcc/testsuite/gcc.target/i386/pr66152.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3140b2ed036c51b9df0fda28b153ebecb4f906ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66152.c?ref=3140b2ed036c51b9df0fda28b153ebecb4f906ec", "patch": "@@ -0,0 +1,25 @@\n+/* PR rtl-optimization/66152 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"movabs\\[^\\n\\r]*506097522914230528\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movabs\\[^\\n\\r]*505813836079825408\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"mov\\[^\\n\\r]*50462976\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"mov\\[^\\n\\r]*117835012\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"mov\\[^\\n\\r]*100925952\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"mov\\[^\\n\\r]*117768961\" { target ia32 } } } */\n+\n+void foo (char *);\n+\n+void\n+bar (void)\n+{\n+  char a[] = {0,1,2,3,4,5,6,7};\n+  foo (a);\n+}\n+\n+void\n+baz (void)\n+{\n+  char a[8] = \"\\0\\2\\4\\6\\1\\3\\5\\7\";\n+  foo (a);\n+}"}]}