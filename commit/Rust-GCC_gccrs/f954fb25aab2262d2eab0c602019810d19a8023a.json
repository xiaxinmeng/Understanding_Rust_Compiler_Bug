{"sha": "f954fb25aab2262d2eab0c602019810d19a8023a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1NGZiMjVhYWIyMjYyZDJlYWIwYzYwMjAxOTgxMGQxOWE4MDIzYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2015-01-27T14:59:48Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-01-27T14:59:48Z"}, "message": "s390.c (s390_register_move_cost): Increase costs for FPR->GPR moves.\n\n2015-01-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_register_move_cost): Increase costs for\n\tFPR->GPR moves.\n\nFrom-SVN: r220168", "tree": {"sha": "aa96a9993e010df8f9cef659a41d6535ec3652e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa96a9993e010df8f9cef659a41d6535ec3652e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f954fb25aab2262d2eab0c602019810d19a8023a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f954fb25aab2262d2eab0c602019810d19a8023a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f954fb25aab2262d2eab0c602019810d19a8023a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f954fb25aab2262d2eab0c602019810d19a8023a/comments", "author": null, "committer": null, "parents": [{"sha": "94213c1020c041c21c93c60e9b19fb2a07cbe975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94213c1020c041c21c93c60e9b19fb2a07cbe975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94213c1020c041c21c93c60e9b19fb2a07cbe975"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "2ed7e80912f55e6a354f113d962c7b642f484cd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954fb25aab2262d2eab0c602019810d19a8023a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954fb25aab2262d2eab0c602019810d19a8023a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f954fb25aab2262d2eab0c602019810d19a8023a", "patch": "@@ -1,3 +1,8 @@\n+2015-01-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_register_move_cost): Increase costs for\n+\tFPR->GPR moves.\n+\n 2015-01-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vrp.c (update_value_range): Intersect the range with"}, {"sha": "1cc4e4affe68ad198f001a71eb0296792848476c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f954fb25aab2262d2eab0c602019810d19a8023a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f954fb25aab2262d2eab0c602019810d19a8023a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f954fb25aab2262d2eab0c602019810d19a8023a", "patch": "@@ -2407,16 +2407,29 @@ s390_float_const_zero_p (rtx value)\n /* Implement TARGET_REGISTER_MOVE_COST.  */\n \n static int\n-s390_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n+s390_register_move_cost (machine_mode mode,\n                          reg_class_t from, reg_class_t to)\n {\n-  /* On s390, copy between fprs and gprs is expensive as long as no\n-     ldgr/lgdr can be used.  */\n-  if ((!TARGET_Z10 || GET_MODE_SIZE (mode) != 8)\n-      && ((reg_classes_intersect_p (from, GENERAL_REGS)\n-\t   && reg_classes_intersect_p (to, FP_REGS))\n-\t  || (reg_classes_intersect_p (from, FP_REGS)\n-\t      && reg_classes_intersect_p (to, GENERAL_REGS))))\n+  /* On s390, copy between fprs and gprs is expensive.  */\n+\n+  /* It becomes somewhat faster having ldgr/lgdr.  */\n+  if (TARGET_Z10 && GET_MODE_SIZE (mode) == 8)\n+    {\n+      /* ldgr is single cycle. */\n+      if (reg_classes_intersect_p (from, GENERAL_REGS)\n+\t  && reg_classes_intersect_p (to, FP_REGS))\n+\treturn 1;\n+      /* lgdr needs 3 cycles. */\n+      if (reg_classes_intersect_p (to, GENERAL_REGS)\n+\t  && reg_classes_intersect_p (from, FP_REGS))\n+\treturn 3;\n+    }\n+\n+  /* Otherwise copying is done via memory.  */\n+  if ((reg_classes_intersect_p (from, GENERAL_REGS)\n+       && reg_classes_intersect_p (to, FP_REGS))\n+      || (reg_classes_intersect_p (from, FP_REGS)\n+\t  && reg_classes_intersect_p (to, GENERAL_REGS)))\n     return 10;\n \n   return 1;"}]}