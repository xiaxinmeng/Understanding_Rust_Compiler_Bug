{"sha": "13d1a6e78d659c03f382484e8b9b417e2282c086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkMWE2ZTc4ZDY1OWMwM2YzODI0ODRlOGI5YjQxN2UyMjgyYzA4Ng==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-03-31T21:51:34Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-03-31T21:51:34Z"}, "message": "ia64.md (divsf3_internal_lat): Remove.\n\n\t* config/ia64/ia64.md (divsf3_internal_lat): Remove.\n\t(divdf3_internal_lat): Remove.\n\t(divxf3_internal_lat): Remove.\n\t(divxf3_internal_thr): Remove.\n\t(divxf): Use divxf3_internal.\n\t* config/ia64/div.md (divsf3_internal_lat): New.\n\t(divdf3_internal_lat): New.\n\t(divxf3_internal): New.\n\nFrom-SVN: r145376", "tree": {"sha": "4f9e6390658bed2d7000f144195dc7ae644d4c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f9e6390658bed2d7000f144195dc7ae644d4c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13d1a6e78d659c03f382484e8b9b417e2282c086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d1a6e78d659c03f382484e8b9b417e2282c086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d1a6e78d659c03f382484e8b9b417e2282c086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d1a6e78d659c03f382484e8b9b417e2282c086/comments", "author": null, "committer": null, "parents": [{"sha": "51fc2d02c702abb039402ad02dd11ddaf39c1045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fc2d02c702abb039402ad02dd11ddaf39c1045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fc2d02c702abb039402ad02dd11ddaf39c1045"}], "stats": {"total": 498, "additions": 192, "deletions": 306}, "files": [{"sha": "9894ff8df3100a1fb37013ecf13572985be44292", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13d1a6e78d659c03f382484e8b9b417e2282c086", "patch": "@@ -1,3 +1,14 @@\n+2009-03-31  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.md (divsf3_internal_lat): Remove.\n+\t(divdf3_internal_lat): Remove.\n+\t(divxf3_internal_lat): Remove.\n+\t(divxf3_internal_thr): Remove.\n+\t(divxf): Use divxf3_internal.\n+\t* config/ia64/div.md (divsf3_internal_lat): New.\n+\t(divdf3_internal_lat): New.\n+\t(divxf3_internal): New.\n+\n 2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/448"}, {"sha": "f0f51ea09ab0b75d5ebd399f9ece73f657b65866", "filename": "gcc/config/ia64/div.md", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2Fconfig%2Fia64%2Fdiv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2Fconfig%2Fia64%2Fdiv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fdiv.md?ref=13d1a6e78d659c03f382484e8b9b417e2282c086", "patch": "@@ -257,6 +257,56 @@\n   DONE;\n })\n \n+;; Single precision floating point division (minimum latency algorithm).\n+\n+(define_expand \"divsf3_internal_lat\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"\")\n+        (div:SF (match_operand:SF 1 \"fr_register_operand\" \"\")\n+                (match_operand:SF 2 \"fr_register_operand\" \"\")))]\n+  \"TARGET_INLINE_FLOAT_DIV\"\n+{\n+  rtx y         = gen_reg_rtx (RFmode);\n+  rtx a         = gen_reg_rtx (RFmode);\n+  rtx b         = gen_reg_rtx (RFmode);\n+  rtx e         = gen_reg_rtx (RFmode);\n+  rtx q         = gen_reg_rtx (RFmode);\n+  rtx e1        = gen_reg_rtx (RFmode);\n+  rtx y1        = gen_reg_rtx (RFmode);\n+  rtx q1        = gen_reg_rtx (RFmode);\n+  rtx r         = gen_reg_rtx (RFmode);\n+  rtx q_res     = gen_reg_rtx (RFmode);\n+  rtx cond      = gen_reg_rtx (BImode);\n+  rtx zero      = CONST0_RTX (RFmode);\n+  rtx one       = CONST1_RTX (RFmode);\n+  rtx status0   = CONST0_RTX (SImode);\n+  rtx status1   = CONST1_RTX (SImode);\n+  rtx trunc_sgl = CONST0_RTX (SImode);\n+  rtx trunc_off = CONST2_RTX (SImode);\n+\n+  /* Empty conversions to put inputs into RFmode.  */\n+  emit_insn (gen_extendsfrf2 (a, operands[1]));\n+  emit_insn (gen_extendsfrf2 (b, operands[2]));\n+  /* y = 1 / b\t\t\t\t*/\n+  emit_insn (gen_recip_approx_rf (y, a, b, cond, status0));\n+  /* q = a * y\t\t\t\t*/\n+  emit_insn (gen_mulrf3_cond (q, cond, a, y, zero, status1, trunc_off));\n+  /* e = 1 - (b * y)\t\t\t*/\n+  emit_insn (gen_m2subrf4_cond (e, cond, one, b, y, zero, status1, trunc_off));\n+  /* e1 = e + (e * e)\t\t\t*/\n+  emit_insn (gen_m2addrf4_cond (e1, cond, e, e, e, zero, status1, trunc_off));\n+  /* q1 = single(q + (q * e1))\t\t*/\n+  emit_insn (gen_m2addrf4_cond (q1, cond, q, q, e1, zero, status1, trunc_sgl));\n+  /* y1 = y + (y * e1)\t\t\t*/\n+  emit_insn (gen_m2addrf4_cond (y1, cond, y, y, e1, zero, status1, trunc_off));\n+  /* r = a - (q1 * b)\t\t\t*/\n+  emit_insn (gen_m2subrf4_cond (r, cond, a, q1, b, zero, status1, trunc_off));\n+  /* Q = single (q1 + (r * y1))\t\t*/\n+  emit_insn (gen_m2addrf4_cond (q_res, cond, q1, r, y1, y, status0, trunc_sgl));\n+  /* Conversion back into SFmode.\t*/\n+  emit_insn (gen_truncrfsf2 (operands[0], q_res));\n+  DONE;\n+})\n+\n \n ;; Double precision floating point division (maximum throughput algorithm).\n \n@@ -312,3 +362,132 @@\n   emit_insn (gen_truncrfdf2 (operands[0], q_res));\n   DONE;\n })\n+\n+;; Double precision floating point division (minimum latency algorithm).\n+\n+(define_expand \"divdf3_internal_lat\"\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"\")\n+        (div:DF (match_operand:DF 1 \"fr_register_operand\" \"\")\n+                (match_operand:DF 2 \"fr_register_operand\" \"\")))]\n+  \"TARGET_INLINE_FLOAT_DIV\"\n+{\n+  rtx q_res     = gen_reg_rtx (RFmode);\n+  rtx a         = gen_reg_rtx (RFmode);\n+  rtx b         = gen_reg_rtx (RFmode);\n+  rtx y         = gen_reg_rtx (RFmode);\n+  rtx e         = gen_reg_rtx (RFmode);\n+  rtx y1        = gen_reg_rtx (RFmode);\n+  rtx e1        = gen_reg_rtx (RFmode);\n+  rtx q1        = gen_reg_rtx (RFmode);\n+  rtx y2        = gen_reg_rtx (RFmode);\n+  rtx e2        = gen_reg_rtx (RFmode);\n+  rtx q2        = gen_reg_rtx (RFmode);\n+  rtx e3        = gen_reg_rtx (RFmode);\n+  rtx q         = gen_reg_rtx (RFmode);\n+  rtx r1        = gen_reg_rtx (RFmode);\n+  rtx cond      = gen_reg_rtx (BImode);\n+  rtx zero      = CONST0_RTX (RFmode);\n+  rtx one       = CONST1_RTX (RFmode);\n+  rtx status0   = CONST0_RTX (SImode);\n+  rtx status1   = CONST1_RTX (SImode);\n+  rtx trunc_dbl = CONST1_RTX (SImode);\n+  rtx trunc_off = CONST2_RTX (SImode);\n+\n+  /* Empty conversions to put inputs into RFmode */\n+  emit_insn (gen_extenddfrf2 (a, operands[1]));\n+  emit_insn (gen_extenddfrf2 (b, operands[2]));\n+  /* y  = 1 / b\t\t\t*/\n+  emit_insn (gen_recip_approx_rf (y, a, b, cond, status0));\n+  /* e  = 1 - (b * y)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (e, cond, one, b, y, zero, status1, trunc_off));\n+  /* q  = a * y                 */\n+  emit_insn (gen_mulrf3_cond (q, cond, a, y, zero, status1, trunc_off));\n+  /* e2 = e + (e * e)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (e2, cond, e, e, e, zero, status1, trunc_off));\n+  /* e1 = e * e                 */\n+  emit_insn (gen_mulrf3_cond (e1, cond, e, e, zero, status1, trunc_off));\n+  /* e3 = e + (e1 * e1)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (e3, cond, e, e1, e1, zero, status1, trunc_off));\n+  /* q1 = q + (q * e2)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (q1, cond, q, q, e2, zero, status1, trunc_off));\n+  /* y1 = y + (y * e2)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (y1, cond, y, y, e2, zero, status1, trunc_off));\n+  /* q2 = double(q + (q1 * e3))\t*/\n+  emit_insn (gen_m2addrf4_cond (q2, cond, q, q1, e3, zero, status1, trunc_dbl));\n+  /* y2 = y + (y1 * e3)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (y2, cond, y, y1, e3, zero, status1, trunc_off));\n+  /* r1  = a - (b * q2)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (r1, cond, a, b, q2, zero, status1, trunc_off));\n+  /* Q  = double (q2 + (r1 * y2))\t*/\n+  emit_insn (gen_m2addrf4_cond (q_res, cond, q2, r1, y2, y, status0, trunc_dbl));\n+  /* Conversion back into DFmode */\n+  emit_insn (gen_truncrfdf2 (operands[0], q_res));\n+  DONE;\n+})\n+\n+;; Extended precision floating point division.\n+\n+(define_expand \"divxf3_internal\"\n+  [(set (match_operand:XF 0 \"fr_register_operand\" \"\")\n+        (div:XF (match_operand:XF 1 \"fr_register_operand\" \"\")\n+                (match_operand:XF 2 \"fr_register_operand\" \"\")))]\n+  \"TARGET_INLINE_FLOAT_DIV\"\n+{\n+  rtx q_res     = gen_reg_rtx (RFmode);\n+  rtx a         = gen_reg_rtx (RFmode);\n+  rtx b         = gen_reg_rtx (RFmode);\n+  rtx y         = gen_reg_rtx (RFmode);\n+  rtx e         = gen_reg_rtx (RFmode);\n+  rtx y1        = gen_reg_rtx (RFmode);\n+  rtx e1        = gen_reg_rtx (RFmode);\n+  rtx q1        = gen_reg_rtx (RFmode);\n+  rtx y2        = gen_reg_rtx (RFmode);\n+  rtx e2        = gen_reg_rtx (RFmode);\n+  rtx y3        = gen_reg_rtx (RFmode);\n+  rtx e3        = gen_reg_rtx (RFmode);\n+  rtx e4        = gen_reg_rtx (RFmode);\n+  rtx q         = gen_reg_rtx (RFmode);\n+  rtx r         = gen_reg_rtx (RFmode);\n+  rtx r1        = gen_reg_rtx (RFmode);\n+  rtx cond      = gen_reg_rtx (BImode);\n+  rtx zero      = CONST0_RTX (RFmode);\n+  rtx one       = CONST1_RTX (RFmode);\n+  rtx status0   = CONST0_RTX (SImode);\n+  rtx status1   = CONST1_RTX (SImode);\n+  rtx trunc_off = CONST2_RTX (SImode);\n+\n+  /* Empty conversions to put inputs into RFmode */\n+  emit_insn (gen_extendxfrf2 (a, operands[1]));\n+  emit_insn (gen_extendxfrf2 (b, operands[2]));\n+  /* y  = 1 / b\t\t\t*/\n+  emit_insn (gen_recip_approx_rf (y, a, b, cond, status0));\n+  /* e  = 1 - (b * y)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (e, cond, one, b, y, zero, status1, trunc_off));\n+  /* q  = a * y                 */\n+  emit_insn (gen_mulrf3_cond (q, cond, a, y, zero, status1, trunc_off));\n+  /* e2 = e + (e * e)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (e2, cond, e, e, e, zero, status1, trunc_off));\n+  /* e1 = e * e                 */\n+  emit_insn (gen_mulrf3_cond (e1, cond, e, e, zero, status1, trunc_off));\n+  /* y1 = y + (y * e2)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (y1, cond, y, y, e2, zero, status1, trunc_off));\n+  /* e3 = e + (e1 * e1)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (e3, cond, e, e1, e1, zero, status1, trunc_off));\n+  /* y2 = y + (y1 * e3)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (y2, cond, y, y1, e3, zero, status1, trunc_off));\n+  /* r  = a - (b * q)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (r, cond, a, b, q, zero, status1, trunc_off));\n+  /* e4  = 1 - (b * y2)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (e4, cond, one, b, y2, zero, status1, trunc_off));\n+  /* q1 = q + (r * y2)\t\t*/\n+  emit_insn (gen_m2addrf4_cond (q1, cond, q, r, y2, zero, status1, trunc_off));\n+  /* y3 = y2 + (y2 * e4)\t*/\n+  emit_insn (gen_m2addrf4_cond (y3, cond, y2, y2, e4, zero, status1, trunc_off));\n+  /* r1  = a - (b * q1)\t\t*/\n+  emit_insn (gen_m2subrf4_cond (r1, cond, a, b, q1, zero, status1, trunc_off));\n+  /* Q  = q1 + (r1 * y3)\t*/\n+  emit_insn (gen_m2addrf4_cond (q_res, cond, q1, r1, y3, y, status0, trunc_off));\n+  /* Conversion back into XFmode */\n+  emit_insn (gen_truncrfxf2 (operands[0], q_res));\n+  DONE;\n+})"}, {"sha": "98e56e40b18d6341322f0ce66e24e7e9f36baafc", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 2, "deletions": 306, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13d1a6e78d659c03f382484e8b9b417e2282c086/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=13d1a6e78d659c03f382484e8b9b417e2282c086", "patch": "@@ -3157,64 +3157,6 @@\n   DONE;\n })\n \n-(define_insn_and_split \"divsf3_internal_lat\"\n-  [(set (match_operand:SF 0 \"fr_register_operand\" \"=&f\")\n-\t(div:SF (match_operand:SF 1 \"fr_register_operand\" \"f\")\n-\t\t(match_operand:SF 2 \"fr_register_operand\" \"f\")))\n-   (clobber (match_scratch:XF 3 \"=&f\"))\n-   (clobber (match_scratch:XF 4 \"=f\"))\n-   (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (match_dup 6) (unspec:XF [(const_int 1) (match_dup 8)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX_RES))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 7) (match_dup 8)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n-\t      (use (const_int 0))])\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3) (mult:XF (match_dup 7) (match_dup 6)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 10)\n-\t\t\t       (mult:XF (match_dup 8) (match_dup 6))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4) (mult:XF (match_dup 4) (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4) (mult:XF (match_dup 4) (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 9)\n-\t\t     (float_truncate:DF\n-\t\t       (plus:XF (mult:XF (match_dup 4) (match_dup 3))\n-\t\t\t      (match_dup 3))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (set (match_dup 0)\n-\t  (float_truncate:SF (match_dup 6))))\n-  ] \n-{\n-  operands[6] = gen_rtx_REG (XFmode, REGNO (operands[0]));\n-  operands[7] = gen_rtx_REG (XFmode, REGNO (operands[1]));\n-  operands[8] = gen_rtx_REG (XFmode, REGNO (operands[2]));\n-  operands[9] = gen_rtx_REG (DFmode, REGNO (operands[0]));\n-  operands[10] = CONST1_RTX (XFmode);\n-}\n-  [(set_attr \"predicable\" \"no\")])\n-\n ;; Inline square root.\n \n (define_insn \"*sqrt_approx\"\n@@ -3588,88 +3530,6 @@\n   DONE;\n })\n \n-(define_insn_and_split \"divdf3_internal_lat\"\n-  [(set (match_operand:DF 0 \"fr_register_operand\" \"=&f\")\n-\t(div:DF (match_operand:DF 1 \"fr_register_operand\" \"f\")\n-\t\t(match_operand:DF 2 \"fr_register_operand\" \"f\")))\n-   (clobber (match_scratch:XF 3 \"=&f\"))\n-   (clobber (match_scratch:XF 4 \"=&f\"))\n-   (clobber (match_scratch:XF 5 \"=&f\"))\n-   (clobber (match_scratch:BI 6 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (match_dup 7) (unspec:XF [(const_int 1) (match_dup 9)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX_RES))\n-\t      (set (match_dup 6) (unspec:BI [(match_dup 8) (match_dup 9)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n-\t      (use (const_int 0))])\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 3) (mult:XF (match_dup 8) (match_dup 7)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 12)\n-\t\t\t       (mult:XF (match_dup 9) (match_dup 7))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 5) (mult:XF (match_dup 4) (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 7)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 7))\n-\t\t\t      (match_dup 7)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 5) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 4) (mult:XF (match_dup 5) (match_dup 5)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 7)\n-\t\t     (plus:XF (mult:XF (match_dup 5) (match_dup 7))\n-\t\t\t      (match_dup 7)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 10)\n-\t\t     (float_truncate:DF\n-\t\t       (plus:XF (mult:XF (match_dup 4) (match_dup 3))\n-\t\t\t      (match_dup 3))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 7)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 7))\n-\t\t\t      (match_dup 7)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (parallel [(set (match_dup 11)\n-\t\t     (float_truncate:DF\n-\t\t       (minus:XF (match_dup 8)\n-\t\t\t\t (mult:XF (match_dup 9) (match_dup 3)))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 6) (const_int 0))\n-     (set (match_dup 0)\n-\t  (float_truncate:DF (plus:XF (mult:XF (match_dup 5) (match_dup 7))\n-\t\t\t      (match_dup 3)))))\n-  ] \n-{\n-  operands[7] = gen_rtx_REG (XFmode, REGNO (operands[0]));\n-  operands[8] = gen_rtx_REG (XFmode, REGNO (operands[1]));\n-  operands[9] = gen_rtx_REG (XFmode, REGNO (operands[2]));\n-  operands[10] = gen_rtx_REG (DFmode, REGNO (operands[3]));\n-  operands[11] = gen_rtx_REG (DFmode, REGNO (operands[5]));\n-  operands[12] = CONST1_RTX (XFmode);\n-}\n-  [(set_attr \"predicable\" \"no\")])\n-\n ;; Inline square root.\n \n (define_expand \"sqrtdf2\"\n@@ -4179,175 +4039,11 @@\n \t\t(match_operand:XF 2 \"fr_register_operand\" \"\")))]\n   \"TARGET_INLINE_FLOAT_DIV\"\n {\n-  rtx insn;\n-  if (TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT)\n-    insn = gen_divxf3_internal_lat (operands[0], operands[1], operands[2]);\n-  else\n-    insn = gen_divxf3_internal_thr (operands[0], operands[1], operands[2]);\n-  emit_insn (insn);\n+  /* There is only one divxf3 sequence, not two like for divsf and divdf.  */\n+  emit_insn (gen_divxf3_internal (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n-(define_insn_and_split \"divxf3_internal_lat\"\n-  [(set (match_operand:XF 0 \"fr_register_operand\" \"=&f\")\n-\t(div:XF (match_operand:XF 1 \"fr_register_operand\" \"f\")\n-\t\t(match_operand:XF 2 \"fr_register_operand\" \"f\")))\n-   (clobber (match_scratch:XF 3 \"=&f\"))\n-   (clobber (match_scratch:XF 4 \"=&f\"))\n-   (clobber (match_scratch:XF 5 \"=&f\"))\n-   (clobber (match_scratch:XF 6 \"=&f\"))\n-   (clobber (match_scratch:BI 7 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV == INL_MIN_LAT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (unspec:XF [(const_int 1) (match_dup 2)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX_RES))\n-\t      (set (match_dup 7) (unspec:BI [(match_dup 1) (match_dup 2)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n-\t      (use (const_int 0))])\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (minus:XF (match_dup 8)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 0))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 4) (mult:XF (match_dup 1) (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 5) (mult:XF (match_dup 3) (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 6)\n-\t\t     (plus:XF (mult:XF (match_dup 3) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 5) (match_dup 5))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 5)\n-\t\t     (plus:XF (mult:XF (match_dup 6) (match_dup 0))\n-\t\t\t      (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 0)\n-\t\t     (plus:XF (mult:XF (match_dup 5) (match_dup 3))\n-\t\t\t      (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 1)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 4))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 3) (match_dup 0))\n-\t\t\t      (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 5)\n-\t\t     (minus:XF (match_dup 8)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 0))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 0)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 0))\n-\t\t\t      (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 1)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 3))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 7) (const_int 0))\n-     (set (match_dup 0)\n-\t  (plus:XF (mult:XF (match_dup 4) (match_dup 0))\n-\t\t   (match_dup 3))))\n-  ] \n-  \"operands[8] = CONST1_RTX (XFmode);\"\n-  [(set_attr \"predicable\" \"no\")])\n-\n-(define_insn_and_split \"divxf3_internal_thr\"\n-  [(set (match_operand:XF 0 \"fr_register_operand\" \"=&f\")\n-\t(div:XF (match_operand:XF 1 \"fr_register_operand\" \"f\")\n-\t\t(match_operand:XF 2 \"fr_register_operand\" \"f\")))\n-   (clobber (match_scratch:XF 3 \"=&f\"))\n-   (clobber (match_scratch:XF 4 \"=&f\"))\n-   (clobber (match_scratch:BI 5 \"=c\"))]\n-  \"TARGET_INLINE_FLOAT_DIV == INL_MAX_THR\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (unspec:XF [(const_int 1) (match_dup 2)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX_RES))\n-\t      (set (match_dup 5) (unspec:BI [(match_dup 1) (match_dup 2)]\n-\t\t\t\t\t    UNSPEC_FR_RECIP_APPROX))\n-\t      (use (const_int 0))])\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (minus:XF (match_dup 6)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 0))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (plus:XF (mult:XF (match_dup 3) (match_dup 0))\n-\t\t\t      (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3) (mult:XF (match_dup 3) (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 3) (match_dup 4))\n-\t\t\t      (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4) (mult:XF (match_dup 1) (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 0)\n-\t\t     (minus:XF (match_dup 6)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 3))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 0)\n-\t\t     (plus:XF (mult:XF (match_dup 0) (match_dup 3))\n-\t\t\t      (match_dup 3)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (minus:XF (match_dup 1)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 4))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 3)\n-\t\t     (plus:XF (mult:XF (match_dup 3) (match_dup 0))\n-\t\t\t      (match_dup 4)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 6)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 0))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 0)\n-\t\t     (plus:XF (mult:XF (match_dup 4) (match_dup 0))\n-\t\t\t      (match_dup 0)))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (parallel [(set (match_dup 4)\n-\t\t     (minus:XF (match_dup 1)\n-\t\t\t       (mult:XF (match_dup 2) (match_dup 3))))\n-\t\t(use (const_int 1))]))\n-   (cond_exec (ne (match_dup 5) (const_int 0))\n-     (set (match_dup 0)\n-\t  (plus:XF (mult:XF (match_dup 4) (match_dup 0))\n-\t\t   (match_dup 3))))\n-  ] \n-  \"operands[6] = CONST1_RTX (XFmode);\"\n-  [(set_attr \"predicable\" \"no\")])\n-\n ;; Inline square root.\n \n (define_expand \"sqrtxf2\""}]}