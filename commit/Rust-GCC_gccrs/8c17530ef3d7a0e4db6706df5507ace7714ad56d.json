{"sha": "8c17530ef3d7a0e4db6706df5507ace7714ad56d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxNzUzMGVmM2Q3YTBlNGRiNjcwNmRmNTUwN2FjZTc3MTRhZDU2ZA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-11-06T21:35:10Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-11-06T21:35:10Z"}, "message": "s390-protos.h (s390_function_value): Declare.\n\n\t* config/s390/s390-protos.h (s390_function_value): Declare.\n\t* config/s390/s390.c (TARGET_RETURN_IN_MEMORY): Define.\n\t(s390_return_in_memory): New function.\n\t(s390_function_value): New function.\n\t(s390_function_arg_float): Return false for all arguments larger\n\tthan 8 bytes.\n\t(s390_function_arg_pass_by_reference): Likewise.  Return true for\n\tall vector arguments.\n\t(s390_function_arg_integer): New function.\n\t(s390_function_arg_advance): Call it.  Add sanity checks.\n\t(s390_function_arg): Likewise.\n\t* config/s390/s390.h (FUNCTION_VALUE): Call s390_function_value.\n\t(LIBCALL_VALUE): Likewise.\n\t(RET_REG): Remove.\n\t(RETURN_IN_MEMORY): Remove.\n\nFrom-SVN: r73314", "tree": {"sha": "f24f5b885de682f27f58ba375c4f5da0783159a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24f5b885de682f27f58ba375c4f5da0783159a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c17530ef3d7a0e4db6706df5507ace7714ad56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c17530ef3d7a0e4db6706df5507ace7714ad56d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c17530ef3d7a0e4db6706df5507ace7714ad56d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c17530ef3d7a0e4db6706df5507ace7714ad56d/comments", "author": null, "committer": null, "parents": [{"sha": "2b04d015d61b0d5def8eccc1f3d08694968882fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b04d015d61b0d5def8eccc1f3d08694968882fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b04d015d61b0d5def8eccc1f3d08694968882fe"}], "stats": {"total": 166, "additions": 136, "deletions": 30}, "files": [{"sha": "9279d35f094031744fb4e7eb890640731f24c76d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c17530ef3d7a0e4db6706df5507ace7714ad56d", "patch": "@@ -1,3 +1,21 @@\n+2003-11-06  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_function_value): Declare.\n+\t* config/s390/s390.c (TARGET_RETURN_IN_MEMORY): Define.\n+\t(s390_return_in_memory): New function.\n+\t(s390_function_value): New function.\n+\t(s390_function_arg_float): Return false for all arguments larger\n+\tthan 8 bytes.\n+\t(s390_function_arg_pass_by_reference): Likewise.  Return true for\n+\tall vector arguments.\n+\t(s390_function_arg_integer): New function.\n+\t(s390_function_arg_advance): Call it.  Add sanity checks.\n+\t(s390_function_arg): Likewise.\n+\t* config/s390/s390.h (FUNCTION_VALUE): Call s390_function_value.\n+\t(LIBCALL_VALUE): Likewise.\n+\t(RET_REG): Remove.\n+\t(RETURN_IN_MEMORY): Remove.\n+\n 2003-11-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_initial_elimination_offset): Change"}, {"sha": "1ab6b0933f1e1d8e5eea0b08611ef2883a843ffb", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=8c17530ef3d7a0e4db6706df5507ace7714ad56d", "patch": "@@ -99,6 +99,7 @@ extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n #ifdef RTX_CODE\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n+extern rtx s390_function_value (tree, enum machine_mode);\n extern void s390_va_start (tree, rtx);\n extern rtx s390_va_arg (tree, tree);\n #endif /* RTX_CODE */"}, {"sha": "6d94d3daa1b0c9c0fb60bdfae233bfb4f7e7844b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 112, "deletions": 6, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8c17530ef3d7a0e4db6706df5507ace7714ad56d", "patch": "@@ -60,6 +60,7 @@ static void s390_select_rtx_section (enum machine_mode, rtx,\n static void s390_encode_section_info (tree, rtx, int);\n static bool s390_cannot_force_const_mem (rtx);\n static rtx s390_delegitimize_address (rtx);\n+static bool s390_return_in_memory (tree, tree);\n static void s390_init_builtins (void);\n static rtx s390_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void s390_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n@@ -107,6 +108,9 @@ static tree s390_build_builtin_va_list (void);\n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS s390_delegitimize_address\n \n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY s390_return_in_memory\n+\n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS s390_init_builtins\n #undef  TARGET_EXPAND_BUILTIN\n@@ -6009,6 +6013,10 @@ s390_function_arg_size (enum machine_mode mode, tree type)\n static bool\n s390_function_arg_float (enum machine_mode mode, tree type)\n {\n+  int size = s390_function_arg_size (mode, type);\n+  if (size > 8)\n+    return false;\n+\n   /* Soft-float changes the ABI: no floating-point registers are used.  */\n   if (TARGET_SOFT_FLOAT)\n     return false;\n@@ -6043,6 +6051,39 @@ s390_function_arg_float (enum machine_mode mode, tree type)\n   return TREE_CODE (type) == REAL_TYPE;\n }\n \n+/* Return true if a function argument of type TYPE and mode MODE\n+   is to be passed in an integer register, or a pair of integer\n+   registers, if available.  */\n+\n+static bool\n+s390_function_arg_integer (enum machine_mode mode, tree type)\n+{\n+  int size = s390_function_arg_size (mode, type);\n+  if (size > 8)\n+    return false;\n+\n+  /* No type info available for some library calls ...  */\n+  if (!type)\n+    return GET_MODE_CLASS (mode) == MODE_INT\n+\t   || (TARGET_SOFT_FLOAT &&  GET_MODE_CLASS (mode) == MODE_FLOAT);\n+\n+  /* We accept small integral (and similar) types.  */\n+  if (INTEGRAL_TYPE_P (type)\n+      || POINTER_TYPE_P (type) \n+      || TREE_CODE (type) == OFFSET_TYPE\n+      || (TARGET_SOFT_FLOAT && TREE_CODE (type) == REAL_TYPE))\n+    return true;\n+\n+  /* We also accept structs of size 1, 2, 4, 8 that are not\n+     passed in floating-point registers.  */  \n+  if (AGGREGATE_TYPE_P (type)\n+      && exact_log2 (size) >= 0\n+      && !s390_function_arg_float (mode, type))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return 1 if a function argument of type TYPE and mode MODE\n    is to be passed by reference.  The ABI specifies that only\n    structures of size 1, 2, 4, or 8 bytes are passed by value,\n@@ -6053,15 +6094,16 @@ int\n s390_function_arg_pass_by_reference (enum machine_mode mode, tree type)\n {\n   int size = s390_function_arg_size (mode, type);\n+  if (size > 8)\n+    return true;\n \n   if (type)\n     {\n-      if (AGGREGATE_TYPE_P (type) &&\n-          size != 1 && size != 2 && size != 4 && size != 8\n-\t  && !s390_function_arg_float (mode, type))\n+      if (AGGREGATE_TYPE_P (type) && exact_log2 (size) < 0)\n         return 1;\n \n-      if (TREE_CODE (type) == COMPLEX_TYPE)\n+      if (TREE_CODE (type) == COMPLEX_TYPE\n+\t  || TREE_CODE (type) == VECTOR_TYPE)\n         return 1;\n     }\n \n@@ -6086,11 +6128,13 @@ s390_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     {\n       cum->fprs += 1;\n     }\n-  else\n+  else if (s390_function_arg_integer (mode, type))\n     {\n       int size = s390_function_arg_size (mode, type);\n       cum->gprs += ((size + UNITS_PER_WORD-1) / UNITS_PER_WORD);\n     }\n+  else\n+    abort ();\n }\n \n /* Define where to put the arguments to a function.\n@@ -6126,7 +6170,7 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       else\n \treturn gen_rtx (REG, mode, cum->fprs + 16);\n     }\n-  else\n+  else if (s390_function_arg_integer (mode, type))\n     {\n       int size = s390_function_arg_size (mode, type);\n       int n_gprs = (size + UNITS_PER_WORD-1) / UNITS_PER_WORD;\n@@ -6136,6 +6180,68 @@ s390_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n       else\n \treturn gen_rtx (REG, mode, cum->gprs + 2);\n     }\n+\n+  /* After the real arguments, expand_call calls us once again\n+     with a void_type_node type.  Whatever we return here is\n+     passed as operand 2 to the call expanders.\n+\n+     We don't need this feature ...  */\n+  else if (type == void_type_node)\n+    return const0_rtx;\n+\n+  abort ();\n+}\n+\n+/* Return true if return values of type TYPE should be returned\n+   in a memory buffer whose address is passed by the caller as\n+   hidden first argument.  */\n+\n+static bool\n+s390_return_in_memory (tree type, tree fundecl ATTRIBUTE_UNUSED)\n+{\n+  /* We accept small integral (and similar) types.  */\n+  if (INTEGRAL_TYPE_P (type)\n+      || POINTER_TYPE_P (type) \n+      || TREE_CODE (type) == OFFSET_TYPE\n+      || TREE_CODE (type) == REAL_TYPE)\n+    return int_size_in_bytes (type) > 8;\n+\n+  /* Aggregates and similar constructs are always returned\n+     in memory.  */\n+  if (AGGREGATE_TYPE_P (type)\n+      || TREE_CODE (type) == COMPLEX_TYPE\n+      || TREE_CODE (type) == VECTOR_TYPE)\n+    return true;\n+\n+  /* ??? We get called on all sorts of random stuff from\n+     aggregate_value_p.  We can't abort, but it's not clear\n+     what's safe to return.  Pretend it's a struct I guess.  */\n+  return true;\n+}\n+\n+/* Define where to return a (scalar) value of type TYPE.\n+   If TYPE is null, define where to return a (scalar)\n+   value of mode MODE from a libcall.  */\n+\n+rtx\n+s390_function_value (tree type, enum machine_mode mode)\n+{\n+  if (type)\n+    {\n+      int unsignedp = TREE_UNSIGNED (type);\n+      mode = promote_mode (type, TYPE_MODE (type), &unsignedp, 1);\n+    }\n+\n+  if (GET_MODE_CLASS (mode) != MODE_INT \n+      && GET_MODE_CLASS (mode) != MODE_FLOAT)\n+    abort ();\n+  if (GET_MODE_SIZE (mode) > 8)\n+    abort ();\n+\n+  if (TARGET_HARD_FLOAT && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+    return gen_rtx_REG (mode, 16);\n+  else\n+    return gen_rtx_REG (mode, 2);\n }\n \n "}, {"sha": "e3eaf915604d0b8604aa262aec8d8ebdc3bb79db", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c17530ef3d7a0e4db6706df5507ace7714ad56d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=8c17530ef3d7a0e4db6706df5507ace7714ad56d", "patch": "@@ -707,34 +707,15 @@ CUMULATIVE_ARGS;\n \n /* Scalar return values.  */\n \n-/* We return scalars in general purpose register 2 for integral values,\n-   and floating point register 0 for fp values.  */\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\\\n-  gen_rtx_REG ((INTEGRAL_TYPE_P (VALTYPE)\t\t\t\\\n-\t\t&& TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\\\n-\t       || POINTER_TYPE_P (VALTYPE)\t\t\t\\\n-\t       ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n-\t       TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_HARD_FLOAT ? 16 : 2)\n-\n-/* Define how to find the value returned by a library function assuming\n-   the value has mode MODE.  */\n-#define RET_REG(MODE) ((GET_MODE_CLASS (MODE) == MODE_INT       \\\n-                       || TARGET_SOFT_FLOAT ) ? 2 : 16)\n-#define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, RET_REG (MODE))\n+#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n+  s390_function_value ((VALTYPE), VOIDmode)\n+\n+#define LIBCALL_VALUE(MODE) \\\n+  s390_function_value (NULL, (MODE))\n \n /* Only gpr 2 and fpr 0 are ever used as return registers.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 2 || (N) == 16)\n \n-\n-/* Aggregate return values.  */\n-\n-/* The definition of this macro implies that there are cases where\n-   a scalar value cannot be returned in registers.  */\n-#define RETURN_IN_MEMORY(type)       \t\t\t\t\\\n-  (TYPE_MODE (type) == BLKmode || \t\t\t\t\\\n-   GET_MODE_CLASS (TYPE_MODE (type)) == MODE_COMPLEX_INT  ||\t\\\n-   GET_MODE_CLASS (TYPE_MODE (type)) == MODE_COMPLEX_FLOAT)\n-\n /* Structure value address is passed as invisible first argument (gpr 2).  */\n #define STRUCT_VALUE 0\n "}]}