{"sha": "09494c325c52f55c72ab1448371ab03d25e13c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0OTRjMzI1YzUyZjU1YzcyYWIxNDQ4MzcxYWIwM2QyNWUxM2M1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T13:16:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T13:16:44Z"}, "message": "[multiple changes]\n\n2009-07-22  Brett Porter  <porter@adacore.com>\n\n\t* init.c (__gnat_init_float): For SPE, set bits in SPEFSCR instead of\n\tFPSCR.\n\t* sysdep.c (__gnat_get_task_options): Set task option enabling SPE.\n\n2009-07-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb, sem_util.adb, sem_attr.adb, exp_dbug.ads, exp_ch2.adb,\n\texp_tss.ads, exp_ch4.adb, sem_ch4.adb: Correct spelling error.\n\tMinor reformatting.\n\t* sem_res.adb (Resolve_Explicit_Dereference): Reword one comment that\n\tused poor terminology.\n\n2009-07-22  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb, sem_ch3.adb, sem_prag.adb: Minor reformatting\n\t* sem_eval.adb, exp_tss.adb: Minor comment update.\n\t* stylesw.adb: Code clean up.\n\nFrom-SVN: r149932", "tree": {"sha": "4c7ca77d2f10ec5949c3ff7d39427f1f605f2c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c7ca77d2f10ec5949c3ff7d39427f1f605f2c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09494c325c52f55c72ab1448371ab03d25e13c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09494c325c52f55c72ab1448371ab03d25e13c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09494c325c52f55c72ab1448371ab03d25e13c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09494c325c52f55c72ab1448371ab03d25e13c50/comments", "author": null, "committer": null, "parents": [{"sha": "5a989c6ba5e462a5545f2fd853df3aac24879440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a989c6ba5e462a5545f2fd853df3aac24879440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a989c6ba5e462a5545f2fd853df3aac24879440"}], "stats": {"total": 154, "additions": 107, "deletions": 47}, "files": [{"sha": "cc55f1cd4b2b1c0937ef69a807946e4248c13cf3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -1,3 +1,23 @@\n+2009-07-22  Brett Porter  <porter@adacore.com>\n+\n+\t* init.c (__gnat_init_float): For SPE, set bits in SPEFSCR instead of\n+\tFPSCR.\n+\t* sysdep.c (__gnat_get_task_options): Set task option enabling SPE.\n+\n+2009-07-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb, sem_util.adb, sem_attr.adb, exp_dbug.ads, exp_ch2.adb,\n+\texp_tss.ads, exp_ch4.adb, sem_ch4.adb: Correct spelling error.\n+\tMinor reformatting.\n+\t* sem_res.adb (Resolve_Explicit_Dereference): Reword one comment that\n+\tused poor terminology.\n+\n+2009-07-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb, sem_ch3.adb, sem_prag.adb: Minor reformatting\n+\t* sem_eval.adb, exp_tss.adb: Minor comment update.\n+\t* stylesw.adb: Code clean up.\n+\n 2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): If Implicit_Packing is enabled, and the"}, {"sha": "5d1822d18598fc69359df120f7305b5a2747948b", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -519,8 +519,8 @@ package body Exp_Ch2 is\n \n       --  For all types of parameters, the constructed parameter record object\n       --  contains a pointer to the parameter. Thus we must dereference them to\n-      --  access them (this will often be redundant, since the needed deference\n-      --  is implicit, but no harm is done by making it explicit).\n+      --  access them (this will often be redundant, since the dereference is\n+      --  implicit, but no harm is done by making it explicit).\n \n       Rewrite (N,\n         Make_Explicit_Dereference (Loc, P_Comp_Ref));"}, {"sha": "8eabfc7e4e61e783afb6eee88fb9f3c4bbbf4c5a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -4655,7 +4655,7 @@ package body Exp_Ch4 is\n       end if;\n \n       --  If the prefix is an access type, then we unconditionally rewrite if\n-      --  as an explicit deference. This simplifies processing for several\n+      --  as an explicit dereference. This simplifies processing for several\n       --  cases, including packed array cases and certain cases in which checks\n       --  must be generated. We used to try to do this only when it was\n       --  necessary, but it cleans up the code to do it all the time."}, {"sha": "94a038eeeeb086c34d37ee42bcddbfc4ac38dbd7", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -378,8 +378,8 @@ package body Exp_Ch5 is\n          --  do this, we get the wrong length computed for the array to be\n          --  moved. The two cases we need to worry about are:\n \n-         --  Explicit deference of an unconstrained packed array type as in the\n-         --  following example:\n+         --  Explicit dereference of an unconstrained packed array type as in\n+         --  the following example:\n \n          --    procedure C52 is\n          --       type BITS is array(INTEGER range <>) of BOOLEAN;"}, {"sha": "2b30248a78cb846cf4a7475b5a6b0ae9a848dd24", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -1053,7 +1053,7 @@ package Exp_Dbug is\n \n    --            Here f is the field name for the selection\n \n-   --        For an explicit deference (.all), we have a single entry\n+   --        For an explicit dereference (.all), we have a single entry\n \n    --          XA\n "}, {"sha": "87038a0ccd8dcbac29688c363717848eedc9938f", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -72,7 +72,8 @@ package Exp_Tss is\n \n    --  The following codes are used to denote TSSs:\n \n-   --  Note: When making additions to this list, update the list in snames.adb\n+   --  Note: When making additions to this list, update the list in\n+   --  snames.adb-tmpl\n \n    type TSS_Name_Type is new String (1 .. 2);\n    subtype TNT is TSS_Name_Type;\n@@ -84,7 +85,7 @@ package Exp_Tss is\n    TSS_From_Any           : constant TNT := \"FA\";  -- PolyORB/DSA From_Any\n    TSS_Init_Proc          : constant TNT := \"IP\";  -- Initialization Procedure\n    TSS_RAS_Access         : constant TNT := \"RA\";  -- RAS type access\n-   TSS_RAS_Dereference    : constant TNT := \"RD\";  -- RAS type deference\n+   TSS_RAS_Dereference    : constant TNT := \"RD\";  -- RAS type dereference\n    TSS_Rep_To_Pos         : constant TNT := \"RP\";  -- Rep to Pos conversion\n    TSS_Slice_Assign       : constant TNT := \"SA\";  -- Slice assignment\n    TSS_Stream_Input       : constant TNT := \"SI\";  -- Stream Input attribute"}, {"sha": "d0c9718abbf42f0e974c670e77653d1664019949", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -5108,15 +5108,12 @@ package body Freeze is\n    exception\n       when Cannot_Be_Static =>\n \n-         --  If the object that cannot be static is imported or exported,\n-         --  then we give an error message saying that this object cannot\n-         --  be imported or exported. If it has an address clause it is\n-         --  an overlay in the current partition and the static requirement\n-         --  is not relevant.\n-\n-         if Is_Imported (E)\n-           and then No (Address_Clause (E))\n-         then\n+         --  If the object that cannot be static is imported or exported, then\n+         --  issue an error message saying that this object cannot be imported\n+         --  or exported. If it has an address clause it is an overlay in the\n+         --  current partition and the static requirement is not relevant.\n+\n+         if Is_Imported (E) and then No (Address_Clause (E)) then\n             Error_Msg_N\n               (\"& cannot be imported (local type is not constant)\", E);\n "}, {"sha": "2f10505b55ffbb7b98df3e5fea776ce696a00877", "filename": "gcc/ada/init.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -1932,9 +1932,19 @@ __gnat_init_float (void)\n      overflow settings are an OS configuration issue.  The instructions\n      below have no effect.  */\n #if defined (_ARCH_PPC) && !defined (_SOFT_FLOAT) && !defined (VTHREADS)\n+#if defined (_SPE_)\n+  {\n+     const unsigned long spefscr_mask = 0xfffffff3;\n+     unsigned long spefscr;\n+     asm (\"mfspr  %0, 512\" : \"=r\" (spefscr));\n+     spefscr = spefscr & spefscr_mask;\n+     asm (\"mtspr 512, %0\\n\\tisync\" : : \"r\" (spefscr));\n+  }\n+#else\n   asm (\"mtfsb0 25\");\n   asm (\"mtfsb0 26\");\n #endif\n+#endif\n \n #if (defined (__i386__) || defined (i386)) && !defined (VTHREADS)\n   /* This is used to properly initialize the FPU on an x86 for each"}, {"sha": "d4f4f51dc331ff0c38c242bc59055a82489c812f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -234,7 +234,7 @@ package body Sem_Attr is\n \n       procedure Check_Dereference;\n       --  If the prefix of attribute is an object of an access type, then\n-      --  introduce an explicit deference, and adjust P_Type accordingly.\n+      --  introduce an explicit dereference, and adjust P_Type accordingly.\n \n       procedure Check_Discrete_Type;\n       --  Verify that prefix of attribute N is a discrete type\n@@ -4410,9 +4410,9 @@ package body Sem_Attr is\n          Check_Not_Incomplete_Type;\n          Set_Etype (N, RTE (RE_Type_Class));\n \n-      ------------\n-      -- To_Any --\n-      ------------\n+      --------------\n+      -- TypeCode --\n+      --------------\n \n       when Attribute_TypeCode =>\n          Check_E0;"}, {"sha": "3f1d85c9c8a138ac4470023922fecef768f5189e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -2332,11 +2332,11 @@ package body Sem_Ch3 is\n \n          if Present (Prev_Entity)\n            and then\n-               --  If the homograph is an implicit subprogram, it is overridden\n-               --  by the current declaration.\n+             --  If the homograph is an implicit subprogram, it is overridden\n+             --  by the current declaration.\n \n              ((Is_Overloadable (Prev_Entity)\n-                 and then Is_Inherited_Operation (Prev_Entity))\n+                and then Is_Inherited_Operation (Prev_Entity))\n \n                --  The current object is a discriminal generated for an entry\n                --  family index. Even though the index is a constant, in this\n@@ -2353,12 +2353,10 @@ package body Sem_Ch3 is\n \n                or else\n                 (Ekind (Prev_Entity) = E_Package\n-                   and then\n-                 Nkind (Parent (Prev_Entity)) = N_Package_Renaming_Declaration\n-                   and then\n-                 not Comes_From_Source (Prev_Entity)\n-                   and then\n-                 Is_Generic_Instance (Renamed_Entity (Prev_Entity))))\n+                  and then Nkind (Parent (Prev_Entity)) =\n+                                         N_Package_Renaming_Declaration\n+                  and then not Comes_From_Source (Prev_Entity)\n+                  and then Is_Generic_Instance (Renamed_Entity (Prev_Entity))))\n          then\n             Prev_Entity := Empty;\n          end if;"}, {"sha": "600a95ff2c59c9d4cdae350f4c9c76b0575100c4", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -2814,9 +2814,9 @@ package body Sem_Ch4 is\n                   Set_Etype (N,   Etype (Comp));\n                   Set_Etype (Nam, It.Typ);\n \n-                  --  For access type case, introduce explicit deference for\n-                  --  more uniform treatment of entry calls. Do this only\n-                  --  once if several interpretations yield an access type.\n+                  --  For access type case, introduce explicit dereference for\n+                  --  more uniform treatment of entry calls. Do this only once\n+                  --  if several interpretations yield an access type.\n \n                   if Is_Access_Type (Etype (Nam))\n                     and then Nkind (Nam) /= N_Explicit_Dereference\n@@ -3570,8 +3570,8 @@ package body Sem_Ch4 is\n                   Set_Original_Discriminant (Sel, Comp);\n                end if;\n \n-               --  For access type case, introduce explicit deference for more\n-               --  uniform treatment of entry calls.\n+               --  For access type case, introduce explicit dereference for\n+               --  more uniform treatment of entry calls.\n \n                if Is_Access_Type (Etype (Name)) then\n                   Insert_Explicit_Dereference (Name);"}, {"sha": "432ceb7b387aba3d15ab9ec88aee50f28accdc2e", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -1960,7 +1960,7 @@ package body Sem_Eval is\n       --  the context to determine that Any_Integer is meant.\n \n       ----------------------------\n-      -- To_Any_Integer_Context --\n+      -- In_Any_Integer_Context --\n       ----------------------------\n \n       function In_Any_Integer_Context return Boolean is"}, {"sha": "9ba8ec5df7a60ea1e301cf0eca4570f200673241", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -9160,8 +9160,8 @@ package body Sem_Prag is\n             Check_Arg_Count (0);\n             Check_Valid_Configuration_Pragma;\n \n-            --  Normalize_Scalars creates false positives in CodePeer,\n-            --  so ignore this pragma in this mode.\n+            --  Normalize_Scalars creates false positives in CodePeer, so\n+            --  ignore this pragma in this mode.\n \n             if not CodePeer_Mode then\n                Normalize_Scalars := True;"}, {"sha": "b43ab51e66ec8bdc378bf1847a50fd8a9eaf5b58", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -1036,7 +1036,7 @@ package body Sem_Res is\n             and then (Ekind (Entity (N)) /= E_Enumeration_Literal\n                         or else Is_Overloaded (N)))\n \n-      --  Rewrite as call if it is an explicit deference of an expression of\n+      --  Rewrite as call if it is an explicit dereference of an expression of\n       --  a subprogram access type, and the subprogram type is not that of a\n       --  procedure or entry.\n \n@@ -6411,9 +6411,8 @@ package body Sem_Res is\n          Set_Etype (N, Get_Actual_Subtype (N));\n       end if;\n \n-      --  Note: there is no Eval processing required for an explicit deference,\n-      --  because the type is known to be an allocators, and allocator\n-      --  expressions can never be static.\n+      --  Note: No Eval processing is required for an explicit dereference,\n+      --  because such a name can never be static.\n \n    end Resolve_Explicit_Dereference;\n "}, {"sha": "25793ac3123c491dbbbc79fcba052167a08a3581", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -5235,8 +5235,8 @@ package body Sem_Util is\n \n       if Is_Overloaded (New_Prefix) then\n \n-         --  The deference is also overloaded, and its interpretations are the\n-         --  designated types of the interpretations of the original node.\n+         --  The dereference is also overloaded, and its interpretations are\n+         --  the designated types of the interpretations of the original node.\n \n          Set_Etype (N, Any_Type);\n "}, {"sha": "2f987fda28c1c84ca309b3cfe1d61b5f6fc57e26", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -28,6 +28,37 @@ with Opt;      use Opt;\n \n package body Stylesw is\n \n+   --  The following constant defines the default style options for -gnaty\n+\n+   Default_Style : constant String :=\n+                     \"3\" &  -- indentation level is 3\n+                     \"a\" &  -- check attribute casing\n+                     \"A\" &  -- check array attribute indexes\n+                     \"b\" &  -- check no blanks at end of lines\n+                     \"c\" &  -- check comment formats\n+                     \"e\" &  -- check end/exit labels present\n+                     \"f\" &  -- check no form/feeds vertical tabs in source\n+                     \"h\" &  -- check no horizontal tabs in source\n+                     \"i\" &  -- check if-then layout\n+                     \"k\" &  -- check casing rules for keywords\n+                     \"l\" &  -- check reference manual layout\n+                     \"m\" &  -- check line length <= 79 characters\n+                     \"n\" &  -- check casing of package Standard idents\n+                     \"p\" &  -- check pragma casing\n+                     \"r\" &  -- check casing for identifier references\n+                     \"s\" &  -- check separate subprogram specs present\n+                     \"t\";   -- check token separation rules\n+\n+   --  The following constant defines the GNAT style options, showing them\n+   --  as additions to the standard default style check options.\n+\n+   GNAT_Style    : constant String := Default_Style &\n+                     \"d\" &  -- check no DOS line terminators\n+                     \"I\" &  -- check mode IN\n+                     \"S\" &  -- check separate lines after THEN or ELSE\n+                     \"u\" &  -- check no unnecessary blank lines\n+                     \"x\";   -- check extra parentheses around conditionals\n+\n    -------------------------------\n    -- Reset_Style_Check_Options --\n    -------------------------------\n@@ -171,7 +202,7 @@ package body Stylesw is\n    procedure Set_Default_Style_Check_Options is\n    begin\n       Reset_Style_Check_Options;\n-      Set_Style_Check_Options (\"3aAbcefhiklmnprst\");\n+      Set_Style_Check_Options (Default_Style);\n    end Set_Default_Style_Check_Options;\n \n    ----------------------------------\n@@ -181,7 +212,7 @@ package body Stylesw is\n    procedure Set_GNAT_Style_Check_Options is\n    begin\n       Reset_Style_Check_Options;\n-      Set_Style_Check_Options (\"3aAbcdefhiIklmnprsStux\");\n+      Set_Style_Check_Options (GNAT_Style);\n    end Set_GNAT_Style_Check_Options;\n \n    -----------------------------"}, {"sha": "a60b83e0341e538b3f2f65ff38c4a2ce03b93f88", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09494c325c52f55c72ab1448371ab03d25e13c50/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=09494c325c52f55c72ab1448371ab03d25e13c50", "patch": "@@ -940,7 +940,8 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)\n    function returns the options to be set when creating a new task. It fetches\n    the options assigned to the current task (parent), so offering some user\n    level control over the options for a task hierarchy. It forces VX_FP_TASK\n-   because it is almost always required. */\n+   because it is almost always required. On processors with the SPE\n+   category, VX_SPE_TASK is needed to enable the SPE. */\n extern int __gnat_get_task_options (void);\n \n int\n@@ -953,6 +954,9 @@ __gnat_get_task_options (void)\n \n   /* Force VX_FP_TASK because it is almost always required */\n   options |= VX_FP_TASK;\n+#if defined (_SPE_)\n+  options |= VX_SPE_TASK;\n+#endif\n \n   /* Mask those bits that are not under user control */\n #ifdef VX_USR_TASK_OPTIONS"}]}