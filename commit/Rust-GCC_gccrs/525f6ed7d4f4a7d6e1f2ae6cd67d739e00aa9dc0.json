{"sha": "525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1ZjZlZDdkNGY0YTdkNmUxZjJhZTZjZDY3ZDczOWUwMGFhOWRjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-12-10T18:28:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-12-10T18:28:51Z"}, "message": "genrecog.c (validate_pattern): Treat all messages except missing modes as errors.\n\ngcc/\n\t* genrecog.c (validate_pattern): Treat all messages except missing\n\tmodes as errors.\n\t* config/epiphany/epiphany.md: Remove constraints from\n\tdefine_peephole2s.\n\t* config/h8300/h8300.md: Remove constraints from define_splits.\n\t* config/msp430/msp430.md: Likewise.\n\t* config/mcore/mcore.md (movdi_i, movsf_i, movdf_k): Use\n\tnonimmediate_operand rather than general_operand for operand 0.\n\t* config/moxie/moxie.md (*movsi, *movqi, *movhi): Likewise.\n\t* config/pdp11/predicates.md (float_operand, float_nonimm_operand):\n\tUse match_operator rather than match_test to invoke general_operand.\n\t* config/v850/v850.md (*movqi_internal, *movhi_internal)\n\t(*movsi_internal_v850e, *movsi_internal, *movsf_internal): Likewise.\n\nFrom-SVN: r205870", "tree": {"sha": "a966be032d47a0fad7297b18e1a8cdc10e4f0a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a966be032d47a0fad7297b18e1a8cdc10e4f0a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a79721fa34bbbbaefc3fe7708a1b2324599458b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79721fa34bbbbaefc3fe7708a1b2324599458b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a79721fa34bbbbaefc3fe7708a1b2324599458b"}], "stats": {"total": 120, "additions": 67, "deletions": 53}, "files": [{"sha": "3264f7ab92a571a5ee92c04e156c1377023700ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -1,3 +1,19 @@\n+2013-12-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* genrecog.c (validate_pattern): Treat all messages except missing\n+\tmodes as errors.\n+\t* config/epiphany/epiphany.md: Remove constraints from\n+\tdefine_peephole2s.\n+\t* config/h8300/h8300.md: Remove constraints from define_splits.\n+\t* config/msp430/msp430.md: Likewise.\n+\t* config/mcore/mcore.md (movdi_i, movsf_i, movdf_k): Use\n+\tnonimmediate_operand rather than general_operand for operand 0.\n+\t* config/moxie/moxie.md (*movsi, *movqi, *movhi): Likewise.\n+\t* config/pdp11/predicates.md (float_operand, float_nonimm_operand):\n+\tUse match_operator rather than match_test to invoke general_operand.\n+\t* config/v850/v850.md (*movqi_internal, *movhi_internal)\n+\t(*movsi_internal_v850e, *movsi_internal, *movsf_internal): Likewise.\n+\n 2013-12-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/tilegx/tilegx.md (insn_ld_add<bitsuffix>): Use"}, {"sha": "fb7d6301adf631125e27ea897a2b56a7e8850c46", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -1787,14 +1787,14 @@\n \n (define_peephole2\n   [(parallel\n-    [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n-\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\"  \"r\")\n-\t\t\t (match_operand:SI 2 \"gpr_operand\" \"%r\")))\n+    [(set (match_operand:SI 0 \"gpr_operand\")\n+\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\")\n+\t\t\t (match_operand:SI 2 \"gpr_operand\")))\n      (clobber (reg:CC CC_REGNUM))])\n    (parallel\n     [(set (reg:CC CC_REGNUM)\n \t  (compare:CC (and:SI (match_dup 0) (match_dup 0)) (const_int 0)))\n-     (set (match_operand:SI 3 \"gpr_operand\" \"=r\")\n+     (set (match_operand:SI 3 \"gpr_operand\")\n \t  (and:SI (match_dup 0) (match_dup 0)))])]\n   \"peep2_reg_dead_p (2, operands[0])\"\n   [(parallel\n@@ -1805,14 +1805,14 @@\n \n (define_peephole2\n   [(parallel\n-    [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n-\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\"  \"r\")\n-\t\t\t (match_operand:SI 2 \"gpr_operand\" \"%r\")))\n+    [(set (match_operand:SI 0 \"gpr_operand\")\n+\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\")\n+\t\t\t (match_operand:SI 2 \"gpr_operand\")))\n      (clobber (reg:CC CC_REGNUM))])\n    (parallel\n     [(set (reg:CC CC_REGNUM)\n \t  (compare:CC (and:SI (match_dup 0) (match_dup 0)) (const_int 0)))\n-     (set (match_operand:SI 3 \"gpr_operand\" \"=r\")\n+     (set (match_operand:SI 3 \"gpr_operand\")\n \t  (and:SI (match_dup 0) (match_dup 0)))])]\n   \"peep2_reg_dead_p (2, operands[3])\"\n   [(parallel\n@@ -1823,14 +1823,14 @@\n \n (define_peephole2\n   [(parallel\n-    [(set (match_operand:SI 0 \"gpr_operand\" \"=r\")\n-\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\"  \"r\")\n-\t\t\t (match_operand:SI 2 \"gpr_operand\" \"%r\")))\n+    [(set (match_operand:SI 0 \"gpr_operand\")\n+\t  (logical_op:SI (match_operand:SI 1 \"gpr_operand\")\n+\t\t\t (match_operand:SI 2 \"gpr_operand\")))\n      (clobber (reg:CC CC_REGNUM))])\n    (parallel\n     [(set (reg:CC CC_REGNUM)\n \t  (compare:CC (match_dup 0) (const_int 0)))\n-     (clobber (match_operand:SI 3 \"gpr_operand\" \"=r\"))])]\n+     (clobber (match_operand:SI 3 \"gpr_operand\"))])]\n   \"\"\n   [(parallel\n     [(set (reg:CC CC_REGNUM)"}, {"sha": "3b07f5f8fd7d85c2fde1cdd91072d2ae9b40fe7d", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -1703,9 +1703,9 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n-\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_zero_operand\" \"Y0\")))]\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n+\t(and:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n+\t\t(match_operand:HI 2 \"single_zero_operand\")))]\n   \"TARGET_H8300SX\"\n   [(set (match_dup 0)\n \t(and:QI (match_dup 1)\n@@ -1844,9 +1844,9 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n-\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n+\t(ior:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n+\t\t(match_operand:HI 2 \"single_one_operand\")))]\n   \"TARGET_H8300SX\"\n   [(set (match_dup 0)\n \t(ior:QI (match_dup 1)\n@@ -1922,9 +1922,9 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_split\n-  [(set (match_operand:HI 0 \"bit_register_indirect_operand\" \"=U\")\n-\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\" \"%0\")\n-\t\t(match_operand:HI 2 \"single_one_operand\" \"Y2\")))]\n+  [(set (match_operand:HI 0 \"bit_register_indirect_operand\")\n+\t(xor:HI (match_operand:HI 1 \"bit_register_indirect_operand\")\n+\t\t(match_operand:HI 2 \"single_one_operand\")))]\n   \"TARGET_H8300SX\"\n   [(set (match_dup 0)\n \t(xor:QI (match_dup 1)"}, {"sha": "9ac68c40644d8a9e37cccdae3228059dafc12e8b", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -1288,7 +1288,7 @@\n }\")\n \n (define_insn \"movdi_i\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,r,r,r,a,r,m\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,a,r,m\")\n \t(match_operand:DI 1 \"mcore_general_movsrc_operand\" \"I,M,N,r,R,m,r\"))]\n   \"\"\n   \"* return mcore_output_movedouble (operands, DImode);\"\n@@ -1307,7 +1307,7 @@\n }\")\n \n (define_insn \"movsf_i\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=r,r,m\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(match_operand:SF 1 \"general_operand\"  \"r,m,r\"))]\n   \"\"\n   \"@\n@@ -1329,7 +1329,7 @@\n }\")\n \n (define_insn \"movdf_k\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"=r,r,m\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(match_operand:DF 1 \"general_operand\" \"r,m,r\"))]\n   \"\"\n   \"* return mcore_output_movedouble (operands, DFmode);\""}, {"sha": "2e6a699e9416129005e5f78341dfa583210ee3c5", "filename": "gcc/config/moxie/moxie.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmoxie%2Fmoxie.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -223,7 +223,7 @@\n }\")\n \n (define_insn \"*movsi\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,W,A,r,r,B,r\")\n \t(match_operand:SI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\"\n@@ -251,7 +251,7 @@\n }\")\n \n (define_insn \"*movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,W,A,r,r,B,r\")\n \t(match_operand:QI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n@@ -279,7 +279,7 @@\n }\")\n \n (define_insn \"*movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,W,A,r,r,B,r\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,W,A,r,r,B,r\")\n \t(match_operand:HI 1 \"moxie_general_movsrc_operand\" \"O,r,i,r,r,W,A,r,B\"))]\n   \"(register_operand (operands[0], HImode)\n     || register_operand (operands[1], HImode))\""}, {"sha": "6f9f2d3b288a402368dc3a579c6d3a3fc7cc675d", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -362,9 +362,9 @@\n ; so that gcc knows when it can and can't optimize away the two\n ; halves.\n (define_split\n-  [(set (match_operand:SI 0 \"msp430_nonsubreg_operand\" \"=&rm\")\n-\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"rmi\")))\n+  [(set (match_operand:SI 0 \"msp430_nonsubreg_operand\")\n+\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\")\n+\t\t (match_operand:SI 2 \"general_operand\")))\n    ]\n   \"\"\n   [(parallel [(set (match_operand:HI 3 \"nonimmediate_operand\" \"=&rm\")"}, {"sha": "e3b205187ae063145c0ebebb8f946a6590ea4655", "filename": "gcc/config/pdp11/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpredicates.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -42,7 +42,7 @@\n \t\t(ior \n \t\t (match_test \"REGNO_REG_CLASS (REGNO (op)) == LOAD_FPU_REGS\")\n \t\t (match_test \"REGNO_REG_CLASS (REGNO (op)) == NO_LOAD_FPU_REGS\"))\n-\t\t(match_test \"general_operand (op, mode)\")))\n+\t\t(match_operand 0 \"general_operand\")))\n \n ;; Accept anything nonimmediate_operand accepts, except that registers must\n ;; be FPU registers.\n@@ -51,4 +51,4 @@\n \t\t(ior \n \t\t (match_test \"REGNO_REG_CLASS (REGNO (op)) == LOAD_FPU_REGS\")\n \t\t (match_test \"REGNO_REG_CLASS (REGNO (op)) == NO_LOAD_FPU_REGS\"))\n-\t\t(match_test \"nonimmediate_operand (op, mode)\")))\n+\t\t(match_operand 0 \"nonimmediate_operand\")))"}, {"sha": "213aedffa5748d786939181fbbb92d2c58968dce", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -233,7 +233,7 @@\n   })\n \n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,Q,r,m,m\")\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,Q,r,m,m\")\n \t(match_operand:QI 1 \"general_operand\" \"Jr,n,Q,Ir,m,r,I\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n@@ -258,7 +258,7 @@\n })\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,Q,r,m,m\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,Q,r,m,m\")\n \t(match_operand:HI 1 \"general_operand\" \"Jr,n,Q,Ir,m,r,I\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n@@ -334,7 +334,7 @@\n ;; upper part with hi, and then put the lower part in the load/store insn.\n \n (define_insn \"*movsi_internal_v850e\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,Q,r,r,m,m,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,Q,r,r,m,m,r\")\n \t(match_operand:SI 1 \"general_operand\" \"Jr,K,L,Q,Ir,m,R,r,I,i\"))]\n   \"(TARGET_V850E_UP)\n    && (register_operand (operands[0], SImode)\n@@ -347,7 +347,7 @@\n    (set_attr \"type\" \"other,other,other,load,other,load,other,store,store,other\")])\n \n (define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,Q,r,r,m,m\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,r,Q,r,r,m,m\")\n \t(match_operand:SI 1 \"movsi_source_operand\" \"Jr,K,L,Q,Ir,m,R,r,I\"))]\n   \"register_operand (operands[0], SImode)\n    || reg_or_0_operand (operands[1], SImode)\"\n@@ -359,7 +359,7 @@\n    (set_attr \"type\" \"other,other,other,load,other,load,store,store,other\")])\n \n (define_insn \"*movsf_internal\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=r,r,r,r,r,Q,r,m,m,r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r,r,r,Q,r,m,m,r\")\n \t(match_operand:SF 1 \"general_operand\" \"Jr,K,L,n,Q,Ir,m,r,IG,iF\"))]\n   \"register_operand (operands[0], SFmode)\n    || reg_or_0_operand (operands[1], SFmode)\""}, {"sha": "663ab60167463d8e37d056b93015488719e38299", "filename": "gcc/genrecog.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=525f6ed7d4f4a7d6e1f2ae6cd67d739e00aa9dc0", "patch": "@@ -457,9 +457,8 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n \t  {\n \t    pred = lookup_predicate (pred_name);\n \t    if (!pred)\n-\t      message_with_line (pattern_lineno,\n-\t\t\t\t \"warning: unknown predicate '%s'\",\n-\t\t\t\t pred_name);\n+\t      error_with_line (pattern_lineno, \"unknown predicate '%s'\",\n+\t\t\t       pred_name);\n \t  }\n \telse\n \t  pred = 0;\n@@ -477,9 +476,9 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n \t\t|| GET_CODE (insn) == DEFINE_PEEPHOLE2)\n \t      {\n \t\tif (constraints0)\n-\t\t  message_with_line (pattern_lineno,\n-\t\t\t\t     \"warning: constraints not supported in %s\",\n-\t\t\t\t     rtx_name[GET_CODE (insn)]);\n+\t\t  error_with_line (pattern_lineno,\n+\t\t\t\t   \"constraints not supported in %s\",\n+\t\t\t\t   rtx_name[GET_CODE (insn)]);\n \t      }\n \n \t    /* A MATCH_OPERAND that is a SET should have an output reload.  */\n@@ -510,10 +509,9 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n \t   while not likely to occur at runtime, results in less efficient\n \t   code from insn-recog.c.  */\n \tif (set && pred && pred->allows_non_lvalue)\n-\t  message_with_line (pattern_lineno,\n-\t\t\t     \"warning: destination operand %d \"\n-\t\t\t     \"allows non-lvalue\",\n-\t\t\t     XINT (pattern, 0));\n+\t  error_with_line (pattern_lineno,\n+\t\t\t   \"destination operand %d allows non-lvalue\",\n+\t\t\t   XINT (pattern, 0));\n \n \t/* A modeless MATCH_OPERAND can be handy when we can check for\n \t   multiple modes in the c_test.  In most other cases, it is a\n@@ -781,16 +779,16 @@ add_to_sequence (rtx pattern, struct decision_head *last,\n \t\tallows_const_int = pred->codes[CONST_INT];\n \t\tif (was_code == MATCH_PARALLEL\n \t\t    && pred->singleton != PARALLEL)\n-\t\t  message_with_line (pattern_lineno,\n-\t\t\t\"predicate '%s' used in match_parallel \"\n-\t\t\t\"does not allow only PARALLEL\", pred->name);\n+\t\t  error_with_line (pattern_lineno,\n+\t\t\t\t   \"predicate '%s' used in match_parallel \"\n+\t\t\t\t   \"does not allow only PARALLEL\", pred->name);\n \t\telse\n \t\t  code = pred->singleton;\n \t      }\n \t    else\n-\t      message_with_line (pattern_lineno,\n-\t\t\t\"warning: unknown predicate '%s' in '%s' expression\",\n-\t\t\tpred_name, GET_RTX_NAME (was_code));\n+\t      error_with_line (pattern_lineno,\n+\t\t\t       \"unknown predicate '%s' in '%s' expression\",\n+\t\t\t       pred_name, GET_RTX_NAME (was_code));\n \t  }\n \n \t/* Can't enforce a mode if we allow const_int.  */"}]}