{"sha": "863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzZWE2Y2Y1NWU2ZjhkNzQ2OWUyNTdkMjJlYjJjNjlhMGNiMTgxYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-13T18:09:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-13T18:09:56Z"}, "message": "compiler: Permit converting between string and named []byte/[]rune.\n\nFrom-SVN: r182291", "tree": {"sha": "17857b9c308b4cc1737d65129e8c2e3aefabe495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17857b9c308b4cc1737d65129e8c2e3aefabe495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/comments", "author": null, "committer": null, "parents": [{"sha": "80fd8eba8ed7cc70a89e4f31931a5da28464357a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80fd8eba8ed7cc70a89e4f31931a5da28464357a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80fd8eba8ed7cc70a89e4f31931a5da28464357a"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "ab6f4feeaf3da45cddecad3aed17c2e72c90c016", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "patch": "@@ -3322,7 +3322,7 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n       mpfr_clear(imag);\n     }\n \n-  if (type->is_slice_type() && type->named_type() == NULL)\n+  if (type->is_slice_type())\n     {\n       Type* element_type = type->array_type()->element_type()->forwarded();\n       bool is_byte = element_type == Type::lookup_integer_type(\"uint8\");\n@@ -3621,20 +3621,11 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t\t\t       integer_type_node,\n \t\t\t       fold_convert(integer_type_node, expr_tree));\n     }\n-  else if (type->is_string_type()\n-\t   && (expr_type->array_type() != NULL\n-\t       || (expr_type->points_to() != NULL\n-\t\t   && expr_type->points_to()->array_type() != NULL)))\n+  else if (type->is_string_type() && expr_type->is_slice_type())\n     {\n-      Type* t = expr_type;\n-      if (t->points_to() != NULL)\n-\t{\n-\t  t = t->points_to();\n-\t  expr_tree = build_fold_indirect_ref(expr_tree);\n-\t}\n       if (!DECL_P(expr_tree))\n \texpr_tree = save_expr(expr_tree);\n-      Array_type* a = t->array_type();\n+      Array_type* a = expr_type->array_type();\n       Type* e = a->element_type()->forwarded();\n       go_assert(e->integer_type() != NULL);\n       tree valptr = fold_convert(const_ptr_type_node,"}, {"sha": "432a647221764d63f5fbbcc726faf97c7b644ac5", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "patch": "@@ -662,7 +662,7 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n     {\n       if (rhs->integer_type() != NULL)\n \treturn true;\n-      if (rhs->is_slice_type() && rhs->named_type() == NULL)\n+      if (rhs->is_slice_type())\n \t{\n \t  const Type* e = rhs->array_type()->element_type()->forwarded();\n \t  if (e->integer_type() != NULL\n@@ -673,9 +673,7 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n     }\n \n   // A string may be converted to []byte or []int.\n-  if (rhs->is_string_type()\n-      && lhs->is_slice_type()\n-      && lhs->named_type() == NULL)\n+  if (rhs->is_string_type() && lhs->is_slice_type())\n     {\n       const Type* e = lhs->array_type()->element_type()->forwarded();\n       if (e->integer_type() != NULL"}, {"sha": "1e82d1f2f561ebc60ac903066a4fb87795df8381", "filename": "gcc/testsuite/go.test/test/convlit.go", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvlit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvlit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvlit.go?ref=863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "patch": "@@ -36,7 +36,7 @@ var good3 int = 1e9\n var good4 float64 = 1e20\n \n // explicit conversion of string is okay\n-var _ = []int(\"abc\")\n+var _ = []rune(\"abc\")\n var _ = []byte(\"abc\")\n \n // implicit is not\n@@ -47,20 +47,20 @@ var _ []byte = \"abc\" // ERROR \"cannot use|incompatible|invalid\"\n type Tstring string\n \n var ss Tstring = \"abc\"\n-var _ = []int(ss)\n+var _ = []rune(ss)\n var _ = []byte(ss)\n \n // implicit is still not\n-var _ []int = ss  // ERROR \"cannot use|incompatible|invalid\"\n+var _ []rune = ss // ERROR \"cannot use|incompatible|invalid\"\n var _ []byte = ss // ERROR \"cannot use|incompatible|invalid\"\n \n-// named slice is not\n-type Tint []int\n+// named slice is now ok\n+type Trune []rune\n type Tbyte []byte\n \n-var _ = Tint(\"abc\")  // ERROR \"convert|incompatible|invalid\"\n-var _ = Tbyte(\"abc\") // ERROR \"convert|incompatible|invalid\"\n+var _ = Trune(\"abc\") // ok\n+var _ = Tbyte(\"abc\") // ok\n \n // implicit is still not\n-var _ Tint = \"abc\"  // ERROR \"cannot use|incompatible|invalid\"\n+var _ Trune = \"abc\" // ERROR \"cannot use|incompatible|invalid\"\n var _ Tbyte = \"abc\" // ERROR \"cannot use|incompatible|invalid\""}, {"sha": "499b77b9615e5fe92bed7bcd8509fb8a252df9fb", "filename": "gcc/testsuite/go.test/test/named1.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863ea6cf55e6f8d7469e257d22eb2c69a0cb181c/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go?ref=863ea6cf55e6f8d7469e257d22eb2c69a0cb181c", "patch": "@@ -41,7 +41,6 @@ func main() {\n \tasBool(i < j)  // ERROR \"cannot use.*type bool.*as type Bool\"\n \n \t_, b = m[2] // ERROR \"cannot .* bool.*type Bool\"\n-\tm[2] = 1, b // ERROR \"cannot use.*type Bool.*as type bool\"\n \n \tvar inter interface{}\n \t_, b = inter.(Map) // ERROR \"cannot .* bool.*type Bool\"\n@@ -55,8 +54,8 @@ func main() {\n \n \t_, bb := <-c\n \tasBool(bb) // ERROR \"cannot use.*type bool.*as type Bool\"\n-\t_, b = <-c     // ERROR \"cannot .* bool.*type Bool\"\n+\t_, b = <-c // ERROR \"cannot .* bool.*type Bool\"\n \t_ = b\n \n-\tasString(String(slice)) // ERROR \"cannot .*type Slice.*type String\"\n+\tasString(String(slice)) // ok\n }"}]}