{"sha": "8f7941ca37001773a36add8119791725aeb823ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3OTQxY2EzNzAwMTc3M2EzNmFkZDgxMTk3OTE3MjVhZWI4MjNiYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-30T10:21:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-30T10:21:24Z"}, "message": "i386: Optimize pmovmskb on inverted vector to inversion of pmovmskb result [PR98461]\n\nThe following patch adds combine splitters to optimize:\n-       vpcmpeqd        %ymm1, %ymm1, %ymm1\n-       vpandn  %ymm1, %ymm0, %ymm0\n        vpmovmskb       %ymm0, %eax\n+       notl    %eax\netc. (for vectors with less than 32 elements with xorl instead of notl).\n\n2020-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/98461\n\t* config/i386/sse.md (<sse2_avx2>_pmovmskb): Add splitters\n\tfor pmovmskb of NOT vector.\n\n\t* gcc.target/i386/sse2-pr98461.c: New test.\n\t* gcc.target/i386/avx2-pr98461.c: New test.", "tree": {"sha": "e2ca3ce142651d180577771f50190584cd2daf1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2ca3ce142651d180577771f50190584cd2daf1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7941ca37001773a36add8119791725aeb823ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7941ca37001773a36add8119791725aeb823ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7941ca37001773a36add8119791725aeb823ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7941ca37001773a36add8119791725aeb823ba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b3edf1ff26590077b5e968fca0b32dfdc2bf33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b3edf1ff26590077b5e968fca0b32dfdc2bf33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b3edf1ff26590077b5e968fca0b32dfdc2bf33"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "d84103807ffbcc6decbe25b98a56386a89e49d92", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8f7941ca37001773a36add8119791725aeb823ba", "patch": "@@ -16099,6 +16099,53 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(unspec:SI\n+\t  [(not:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\"))]\n+          UNSPEC_MOVMSK))]\n+  \"TARGET_SSE2\"\n+  [(set (match_dup 2)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))\n+   (set (match_dup 0) (match_dup 3))]\n+{\n+  operands[2] = gen_reg_rtx (SImode);\n+  if (GET_MODE_NUNITS (<MODE>mode) == 32)\n+    operands[3] = gen_rtx_NOT (SImode, operands[2]);\n+  else\n+    {\n+      operands[3]\n+\t= gen_int_mode ((HOST_WIDE_INT_1 << GET_MODE_NUNITS (<MODE>mode)) - 1,\n+\t\t\tSImode);\n+      operands[3] = gen_rtx_XOR (SImode, operands[2], operands[3]);\n+    }\n+})\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(unspec:SI\n+\t  [(subreg:VI1_AVX2 (not (match_operand 1 \"register_operand\")) 0)]\n+          UNSPEC_MOVMSK))]\n+  \"TARGET_SSE2\n+   && GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_VECTOR_INT\n+   && GET_MODE_SIZE (GET_MODE (operands[1])) == <MODE_SIZE>\"\n+  [(set (match_dup 2)\n+\t(unspec:SI [(match_dup 1)] UNSPEC_MOVMSK))\n+   (set (match_dup 0) (match_dup 3))]\n+{\n+  operands[2] = gen_reg_rtx (SImode);\n+  operands[1] = gen_lowpart (<MODE>mode, operands[1]);\n+  if (GET_MODE_NUNITS (<MODE>mode) == 32)\n+    operands[3] = gen_rtx_NOT (SImode, operands[2]);\n+  else\n+    {\n+      operands[3]\n+\t= gen_int_mode ((HOST_WIDE_INT_1 << GET_MODE_NUNITS (<MODE>mode)) - 1,\n+\t\t\tSImode);\n+      operands[3] = gen_rtx_XOR (SImode, operands[2], operands[3]);\n+    }\n+})\n+\n (define_insn_and_split \"*<sse2_avx2>_pmovmskb_lt\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI"}, {"sha": "15f49b864daa459944856fdc24ab4b8443be1819", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr98461.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr98461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr98461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr98461.c?ref=8f7941ca37001773a36add8119791725aeb823ba", "patch": "@@ -0,0 +1,54 @@\n+/* PR target/98461 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tvpmovmskb\\t\" 6 } } */\n+/* { dg-final { scan-assembler-times \"\\tnotl\\t\" 6 } } */\n+/* { dg-final { scan-assembler-not \"\\tvpcmpeq\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvpxor\" } } */\n+/* { dg-final { scan-assembler-not \"\\tvpandn\" } } */\n+\n+#include <x86intrin.h>\n+\n+int\n+f1 (__m256i x)\n+{\n+  return ~_mm256_movemask_epi8 (x);\n+}\n+\n+int\n+f2 (__m256i x)\n+{\n+  return _mm256_movemask_epi8 (_mm256_andnot_si256 (x, _mm256_set1_epi8 (255)));\n+}\n+\n+int\n+f3 (__v32qi x)\n+{\n+  x ^= (__v32qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return _mm256_movemask_epi8 ((__m256i) x);\n+}\n+\n+long\n+f4 (__m256i x)\n+{\n+  return (unsigned) ~_mm256_movemask_epi8 (x);\n+}\n+\n+long\n+f5 (__m256i x)\n+{\n+  return (unsigned) _mm256_movemask_epi8 (_mm256_andnot_si256 (x, _mm256_set1_epi8 (255)));\n+}\n+\n+long\n+f6 (__v32qi x)\n+{\n+  x ^= (__v32qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return (unsigned) _mm256_movemask_epi8 ((__m256i) x);\n+}"}, {"sha": "9fae7557f525d88b82af8a7461a8ac3aacd51c83", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr98461.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7941ca37001773a36add8119791725aeb823ba/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr98461.c?ref=8f7941ca37001773a36add8119791725aeb823ba", "patch": "@@ -0,0 +1,50 @@\n+/* PR target/98461 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"\\tpmovmskb\\t\" 6 } } */\n+/* { dg-final { scan-assembler-times \"\\txorl\\t\" 6 } } */\n+/* { dg-final { scan-assembler-not \"\\tpcmpeq\" } } */\n+/* { dg-final { scan-assembler-not \"\\tpxor\" } } */\n+/* { dg-final { scan-assembler-not \"\\tpandn\" } } */\n+\n+#include <x86intrin.h>\n+\n+int\n+f1 (__m128i x)\n+{\n+  return _mm_movemask_epi8 (x) ^ 65535;\n+}\n+\n+int\n+f2 (__m128i x)\n+{\n+  return _mm_movemask_epi8 (_mm_andnot_si128 (x, _mm_set1_epi8 (255)));\n+}\n+\n+int\n+f3 (__v16qi x)\n+{\n+  x ^= (__v16qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return _mm_movemask_epi8 ((__m128i) x);\n+}\n+\n+long\n+f4 (__m128i x)\n+{\n+  return (unsigned) (_mm_movemask_epi8 (x) ^ 65535);\n+}\n+\n+long\n+f5 (__m128i x)\n+{\n+  return (unsigned) _mm_movemask_epi8 (_mm_andnot_si128 (x, _mm_set1_epi8 (255)));\n+}\n+\n+long\n+f6 (__v16qi x)\n+{\n+  x ^= (__v16qi) { -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t   -1, -1, -1, -1, -1, -1, -1, -1 };\n+  return (unsigned) _mm_movemask_epi8 ((__m128i) x);\n+}"}]}