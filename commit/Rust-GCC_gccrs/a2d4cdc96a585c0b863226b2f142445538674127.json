{"sha": "a2d4cdc96a585c0b863226b2f142445538674127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkNGNkYzk2YTU4NWMwYjg2MzIyNmIyZjE0MjQ0NTUzODY3NDEyNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-12-01T15:27:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-12-01T15:27:12Z"}, "message": "re PR c++/38257 (ICE with auto and #pragma omp parallel)\n\n\tPR c++/38257\n\t* parser.c (cp_parser_omp_for_loop): Handle auto.\n\t* pt.c (tsubst_omp_for_iterator): Likewise.\n\n\t* testsuite/libgomp.c++/for-7.C: New test.\n\nFrom-SVN: r142320", "tree": {"sha": "ecc36046a609da5f002a051ee7dfcc4183fc8c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecc36046a609da5f002a051ee7dfcc4183fc8c30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2d4cdc96a585c0b863226b2f142445538674127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d4cdc96a585c0b863226b2f142445538674127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d4cdc96a585c0b863226b2f142445538674127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d4cdc96a585c0b863226b2f142445538674127/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b10560935521f81f26a4f1fe12d7b4bb1de33d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b10560935521f81f26a4f1fe12d7b4bb1de33d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b10560935521f81f26a4f1fe12d7b4bb1de33d0"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "438b3e0d309cfdc2cd68e3ee6991ff3aeb8c1af1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a2d4cdc96a585c0b863226b2f142445538674127", "patch": "@@ -1,3 +1,9 @@\n+2008-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/38257\n+\t* parser.c (cp_parser_omp_for_loop): Handle auto.\n+\t* pt.c (tsubst_omp_for_iterator): Likewise.\n+\n 2008-11-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38233"}, {"sha": "275a7f3b4d38f840df64b18567717899a21882cb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a2d4cdc96a585c0b863226b2f142445538674127", "patch": "@@ -21118,13 +21118,14 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \n \t      else \n \t\t{\n-\t\t  tree pushed_scope;\n+\t\t  tree pushed_scope, auto_node;\n \n \t\t  decl = start_decl (declarator, &type_specifiers,\n-\t\t\t\t     /*initialized_p=*/false, attributes,\n+\t\t\t\t     SD_INITIALIZED, attributes,\n \t\t\t\t     /*prefix_attributes=*/NULL_TREE,\n \t\t\t\t     &pushed_scope);\n \n+\t\t  auto_node = type_uses_auto (TREE_TYPE (decl));\n \t\t  if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))\n \t\t    {\n \t\t      if (cp_lexer_next_token_is (parser->lexer, \n@@ -21139,14 +21140,26 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t      cp_parser_skip_to_end_of_statement (parser);\n \t\t    }\n \t\t  else if (CLASS_TYPE_P (TREE_TYPE (decl))\n-\t\t\t   || type_dependent_expression_p (decl))\n+\t\t\t   || type_dependent_expression_p (decl)\n+\t\t\t   || auto_node)\n \t\t    {\n \t\t      bool is_direct_init, is_non_constant_init;\n \n \t\t      init = cp_parser_initializer (parser,\n \t\t\t\t\t\t    &is_direct_init,\n \t\t\t\t\t\t    &is_non_constant_init);\n \n+\t\t      if (auto_node && !type_dependent_expression_p (init))\n+\t\t\t{\n+\t\t\t  TREE_TYPE (decl)\n+\t\t\t    = do_auto_deduction (TREE_TYPE (decl), init,\n+\t\t\t\t\t\t auto_node);\n+\n+\t\t\t  if (!CLASS_TYPE_P (TREE_TYPE (decl))\n+\t\t\t      && !type_dependent_expression_p (decl))\n+\t\t\t    goto non_class;\n+\t\t\t}\n+\t\t      \n \t\t      cp_finish_decl (decl, init, !is_non_constant_init,\n \t\t\t\t      asm_specification,\n \t\t\t\t      LOOKUP_ONLYCONVERTING);\n@@ -21166,6 +21179,7 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t\t      cp_lexer_consume_token (parser->lexer);\n \t\t      init = cp_parser_assignment_expression (parser, false);\n \n+\t\t    non_class:\n \t\t      if (TREE_CODE (TREE_TYPE (decl)) == REFERENCE_TYPE)\n \t\t\tinit = error_mark_node;\n \t\t      else"}, {"sha": "8de27a6a91390df3c3ef134bfeb5f94c8801cfbe", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d4cdc96a585c0b863226b2f142445538674127/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a2d4cdc96a585c0b863226b2f142445538674127", "patch": "@@ -10324,12 +10324,25 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree initv,\n #define RECUR(NODE)\t\t\t\t\\\n   tsubst_expr ((NODE), args, complain, in_decl,\t\\\n \t       integral_constant_expression_p)\n-  tree decl, init, cond, incr;\n+  tree decl, init, cond, incr, auto_node;\n \n   init = TREE_VEC_ELT (OMP_FOR_INIT (t), i);\n   gcc_assert (TREE_CODE (init) == MODIFY_EXPR);\n   decl = RECUR (TREE_OPERAND (init, 0));\n   init = TREE_OPERAND (init, 1);\n+  auto_node = type_uses_auto (TREE_TYPE (decl));\n+  if (auto_node && init)\n+    {\n+      tree init_expr = init;\n+      tree orig_type;\n+      if (TREE_CODE (init_expr) == DECL_EXPR)\n+\tinit_expr = DECL_INITIAL (DECL_EXPR_DECL (init_expr));\n+      orig_type = TREE_TYPE (init_expr);\n+      TREE_TYPE (init_expr) = RECUR (TREE_TYPE (init_expr));\n+      TREE_TYPE (decl)\n+\t= do_auto_deduction (TREE_TYPE (decl), init_expr, auto_node);\n+      TREE_TYPE (init_expr) = orig_type;\n+    }\n   gcc_assert (!type_dependent_expression_p (decl));\n \n   if (!CLASS_TYPE_P (TREE_TYPE (decl)))"}, {"sha": "89c8a42dd41dca71f25751fa41c62c3c81ca53e0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d4cdc96a585c0b863226b2f142445538674127/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d4cdc96a585c0b863226b2f142445538674127/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a2d4cdc96a585c0b863226b2f142445538674127", "patch": "@@ -1,5 +1,8 @@\n 2008-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/38257\n+\t* testsuite/libgomp.c++/for-7.C: New test.\n+\n \tPR c++/38348\n \t* testsuite/libgomp.c++/for-6.C: New test.\n "}, {"sha": "9d626c028df04962a9efaa032eaf554691373af3", "filename": "libgomp/testsuite/libgomp.c++/for-7.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d4cdc96a585c0b863226b2f142445538674127/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d4cdc96a585c0b863226b2f142445538674127/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Ffor-7.C?ref=a2d4cdc96a585c0b863226b2f142445538674127", "patch": "@@ -0,0 +1,110 @@\n+// PR c++/\n+// { dg-do run }\n+// { dg-options \"-std=c++0x -fopenmp\" }\n+\n+extern \"C\" void abort ();\n+int cnt;\n+\n+template <typename T>\n+void\n+f0 (T, int)\n+{\n+  abort ();\n+}\n+\n+template <>\n+void\n+f0<int> (int, int type)\n+{\n+  if (type != 0)\n+    abort ();\n+#pragma omp atomic\n+  cnt++;\n+}\n+\n+template <>\n+void\n+f0<const char *> (const char *, int type)\n+{\n+  if (type != 1)\n+    abort ();\n+#pragma omp atomic\n+  cnt++;\n+}\n+\n+template <typename T>\n+void\n+f1 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = 0; i < 10; i++)\n+    f0 (i, 0);\n+}\n+\n+template <typename T>\n+void\n+f2 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = T (0); i < T (10); i += T (1))\n+    f0 (i, 0);\n+}\n+\n+void\n+f3 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = 0; i < 10; i++)\n+    f0 (i, 0);\n+}\n+\n+const char *p = \"abcdefghij\";\n+\n+template <typename T>\n+void\n+f4 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = p; i < p + 10; i++)\n+    f0 (i, 1);\n+}\n+\n+template <typename T>\n+void\n+f5 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = T (p); i < T (p + 10); i++)\n+    f0 (i, 1);\n+}\n+\n+void\n+f6 ()\n+{\n+#pragma omp parallel for\n+  for (auto i = p; i < p + 10; i++)\n+    f0 (i, 1);\n+}\n+\n+int\n+main ()\n+{\n+  f1<int> ();\n+  if (cnt != 10)\n+    abort ();\n+  f2<int> ();\n+  if (cnt != 20)\n+    abort ();\n+  f3 ();\n+  if (cnt != 30)\n+    abort ();\n+  f4<int> ();\n+  if (cnt != 40)\n+    abort ();\n+  f5<const char *> ();\n+  if (cnt != 50)\n+    abort ();\n+  f6 ();\n+  if (cnt != 60)\n+    abort ();\n+}"}]}