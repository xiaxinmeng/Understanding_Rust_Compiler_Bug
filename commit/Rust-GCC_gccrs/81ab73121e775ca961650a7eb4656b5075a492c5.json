{"sha": "81ab73121e775ca961650a7eb4656b5075a492c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhYjczMTIxZTc3NWNhOTYxNjUwYTdlYjQ2NTZiNTA3NWE0OTJjNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-07T10:27:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-07T10:27:02Z"}, "message": "re PR middle-end/53667 (Cray pointer: Wrong result with optimizations)\n\n2012-09-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/53667\n\t* tree-ssa-structalias.c (handle_rhs_call): Properly clobber\n\tEAF_NOESCAPED arguments.  Transitively close non-EAF_DIRECT\n\targuments separately.\n\nFrom-SVN: r191064", "tree": {"sha": "441fe35fe49b5f9c8bf0147e5c38e577a542eeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/441fe35fe49b5f9c8bf0147e5c38e577a542eeaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ab73121e775ca961650a7eb4656b5075a492c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ab73121e775ca961650a7eb4656b5075a492c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ab73121e775ca961650a7eb4656b5075a492c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ab73121e775ca961650a7eb4656b5075a492c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d630245f9d4584bd3ecb2192f8e2ba05e1db77ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d630245f9d4584bd3ecb2192f8e2ba05e1db77ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d630245f9d4584bd3ecb2192f8e2ba05e1db77ba"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "cdf6a201820c41d148ce2fbfb309885dd22ef31e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ab73121e775ca961650a7eb4656b5075a492c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ab73121e775ca961650a7eb4656b5075a492c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81ab73121e775ca961650a7eb4656b5075a492c5", "patch": "@@ -1,3 +1,10 @@\n+2012-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/53667\n+\t* tree-ssa-structalias.c (handle_rhs_call): Properly clobber\n+\tEAF_NOESCAPED arguments.  Transitively close non-EAF_DIRECT\n+\targuments separately.\n+\n 2012-09-07  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* bitmap.c (bitmap_last_set_bit): Rewrite to return the correct bit."}, {"sha": "4969edc4b5bc600295b8e4b7736e5d6656e7b17b", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ab73121e775ca961650a7eb4656b5075a492c5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ab73121e775ca961650a7eb4656b5075a492c5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=81ab73121e775ca961650a7eb4656b5075a492c5", "patch": "@@ -3743,29 +3743,43 @@ handle_rhs_call (gimple stmt, VEC(ce_s, heap) **results)\n       /* As we compute ESCAPED context-insensitive we do not gain\n          any precision with just EAF_NOCLOBBER but not EAF_NOESCAPE\n \t set.  The argument would still get clobbered through the\n-\t escape solution.\n-\t ???  We might get away with less (and more precise) constraints\n-\t if using a temporary for transitively closing things.  */\n+\t escape solution.  */\n       if ((flags & EAF_NOCLOBBER)\n \t   && (flags & EAF_NOESCAPE))\n \t{\n \t  varinfo_t uses = get_call_use_vi (stmt);\n \t  if (!(flags & EAF_DIRECT))\n-\t    make_transitive_closure_constraints (uses);\n-\t  make_constraint_to (uses->id, arg);\n+\t    {\n+\t      varinfo_t tem = new_var_info (NULL_TREE, \"callarg\");\n+\t      make_constraint_to (tem->id, arg);\n+\t      make_transitive_closure_constraints (tem);\n+\t      make_copy_constraint (uses, tem->id);\n+\t    }\n+\t  else\n+\t    make_constraint_to (uses->id, arg);\n \t  returns_uses = true;\n \t}\n       else if (flags & EAF_NOESCAPE)\n \t{\n+\t  struct constraint_expr lhs, rhs;\n \t  varinfo_t uses = get_call_use_vi (stmt);\n \t  varinfo_t clobbers = get_call_clobber_vi (stmt);\n+\t  varinfo_t tem = new_var_info (NULL_TREE, \"callarg\");\n+\t  make_constraint_to (tem->id, arg);\n \t  if (!(flags & EAF_DIRECT))\n-\t    {\n-\t      make_transitive_closure_constraints (uses);\n-\t      make_transitive_closure_constraints (clobbers);\n-\t    }\n-\t  make_constraint_to (uses->id, arg);\n-\t  make_constraint_to (clobbers->id, arg);\n+\t    make_transitive_closure_constraints (tem);\n+\t  make_copy_constraint (uses, tem->id);\n+\t  make_copy_constraint (clobbers, tem->id);\n+\t  /* Add *tem = nonlocal, do not add *tem = callused as\n+\t     EAF_NOESCAPE parameters do not escape to other parameters\n+\t     and all other uses appear in NONLOCAL as well.  */\n+\t  lhs.type = DEREF;\n+\t  lhs.var = tem->id;\n+\t  lhs.offset = 0;\n+\t  rhs.type = SCALAR;\n+\t  rhs.var = nonlocal_id;\n+\t  rhs.offset = 0;\n+\t  process_constraint (new_constraint (lhs, rhs));\n \t  returns_uses = true;\n \t}\n       else"}]}