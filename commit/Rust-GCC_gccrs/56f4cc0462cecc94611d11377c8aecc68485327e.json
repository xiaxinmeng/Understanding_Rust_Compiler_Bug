{"sha": "56f4cc0462cecc94611d11377c8aecc68485327e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmNGNjMDQ2MmNlY2M5NDYxMWQxMTM3N2M4YWVjYzY4NDg1MzI3ZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2008-10-02T18:53:04Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-10-02T18:53:04Z"}, "message": "rs6000.c (USE_FP_FOR_ARG_P): Revert TARGET_DOUBLE_FLOAT, TARGET_SINGLE_FLOAT.\n\n        * config/rs6000/rs6000.c (USE_FP_FOR_ARG_P): Revert\n        TARGET_DOUBLE_FLOAT, TARGET_SINGLE_FLOAT.\n        (function_arg_advance): Condition on TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n        Revert SCALAR_FLOAT_MODE_P condition.\n        (function_arg): Condition on TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n        (rs6000_function_value): Revert TARGET_DOUBLE_FLOAT,\n        TARGET_SINGLE_FLOAT.\n\nFrom-SVN: r140838", "tree": {"sha": "d2921f3adfddd4cb2b2556603fb0e49ecdad24fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2921f3adfddd4cb2b2556603fb0e49ecdad24fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f4cc0462cecc94611d11377c8aecc68485327e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f4cc0462cecc94611d11377c8aecc68485327e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f4cc0462cecc94611d11377c8aecc68485327e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f4cc0462cecc94611d11377c8aecc68485327e/comments", "author": null, "committer": null, "parents": [{"sha": "414f00e997074e07b825402f861625a47b85275e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414f00e997074e07b825402f861625a47b85275e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414f00e997074e07b825402f861625a47b85275e"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "10aab9ca08aa7c77a293534dbe478e349ba8ab5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f4cc0462cecc94611d11377c8aecc68485327e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f4cc0462cecc94611d11377c8aecc68485327e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f4cc0462cecc94611d11377c8aecc68485327e", "patch": "@@ -1,3 +1,15 @@\n+2008-10-02  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (USE_FP_FOR_ARG_P): Revert\n+\tTARGET_DOUBLE_FLOAT, TARGET_SINGLE_FLOAT.\n+\t(function_arg_advance): Condition on TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\tRevert SCALAR_FLOAT_MODE_P condition.\n+\t(function_arg): Condition on TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\t(rs6000_function_value): Revert TARGET_DOUBLE_FLOAT,\n+\tTARGET_SINGLE_FLOAT.\n+\n 2008-10-02  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* builtins.c (fold_builtin_pow): Check for 0 ** NEGATIVE."}, {"sha": "e1e0d1c02f8748463b178a009cbc730a3bed2209", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f4cc0462cecc94611d11377c8aecc68485327e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f4cc0462cecc94611d11377c8aecc68485327e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=56f4cc0462cecc94611d11377c8aecc68485327e", "patch": "@@ -5249,9 +5249,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE)\t\t\\\n   (SCALAR_FLOAT_MODE_P (MODE)\t\t\t\\\n    && (CUM)->fregno <= FP_ARG_MAX_REG\t\t\\\n-   && TARGET_HARD_FLOAT && TARGET_FPRS \t\t\\\n-   && ((TARGET_DOUBLE_FLOAT && (MODE) == DFmode)\\\n-       || (TARGET_SINGLE_FLOAT && (MODE) == SFmode)))\n+   && TARGET_HARD_FLOAT && TARGET_FPRS)\n \n /* Nonzero if we can use an AltiVec register to pass this arg.  */\n #define USE_ALTIVEC_FOR_ARG_P(CUM,MODE,TYPE,NAMED)\t\\\n@@ -5728,9 +5726,10 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-          && (mode == SFmode || mode == DFmode\n-\t      || mode == SDmode || mode == DDmode || mode == TDmode\n-              || (mode == TFmode && !TARGET_IEEEQUAD)))\n+\t  && ((TARGET_SINGLE_FLOAT && mode == SFmode)\n+\t      || (TARGET_DOUBLE_FLOAT && mode == DFmode)\n+\t      || (mode == TFmode && !TARGET_IEEEQUAD)\n+\t      || mode == SDmode || mode == DDmode || mode == TDmode))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -5796,9 +5795,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       cum->words = align_words + n_words;\n \n       if (SCALAR_FLOAT_MODE_P (mode)\n-\t  && TARGET_HARD_FLOAT && TARGET_FPRS\n- \t  && ((TARGET_DOUBLE_FLOAT && mode == DFmode)\n- \t      || (TARGET_SINGLE_FLOAT && mode == SFmode)))\n+\t  && TARGET_HARD_FLOAT && TARGET_FPRS)\n \t{\n \t  /* _Decimal128 must be passed in an even/odd float register pair.\n \t     This assumes that the register number is odd when fregno is\n@@ -6292,7 +6289,8 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (abi == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (mode == SFmode || mode == DFmode\n+\t  && ((TARGET_SINGLE_FLOAT && mode == SFmode)\n+\t      || (TARGET_DOUBLE_FLOAT && mode == DFmode)\n \t      || (mode == TFmode && !TARGET_IEEEQUAD)\n \t      || mode == SDmode || mode == DDmode || mode == TDmode))\n \t{\n@@ -22522,10 +22520,7 @@ rs6000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n   if (DECIMAL_FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     /* _Decimal128 must use an even/odd register pair.  */\n     regno = (mode == TDmode) ? FP_ARG_RETURN + 1 : FP_ARG_RETURN;\n-  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_FPRS \n-           && (TARGET_HARD_FLOAT \n-\t       && ((TARGET_SINGLE_FLOAT && mode == SFmode) \n-\t           || TARGET_DOUBLE_FLOAT)))\n+  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     regno = FP_ARG_RETURN;\n   else if (TREE_CODE (valtype) == COMPLEX_TYPE\n \t   && targetm.calls.split_complex_arg)"}]}