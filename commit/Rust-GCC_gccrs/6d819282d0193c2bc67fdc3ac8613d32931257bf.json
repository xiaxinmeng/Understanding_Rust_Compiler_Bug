{"sha": "6d819282d0193c2bc67fdc3ac8613d32931257bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4MTkyODJkMDE5M2MyYmM2N2ZkYzNhYzg2MTNkMzI5MzEyNTdiZg==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1998-02-05T20:54:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-05T20:54:49Z"}, "message": "c-common.c (decl_attributes): Flag unrecognized attribute functions as warnings instead of as errors.\n\n        * c-common.c (decl_attributes): Flag unrecognized attribute\n        functions as warnings instead of as errors.\n\nFrom-SVN: r17672", "tree": {"sha": "2467dbea5d4779e85abc6266dc396f1178940821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2467dbea5d4779e85abc6266dc396f1178940821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d819282d0193c2bc67fdc3ac8613d32931257bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d819282d0193c2bc67fdc3ac8613d32931257bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d819282d0193c2bc67fdc3ac8613d32931257bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d819282d0193c2bc67fdc3ac8613d32931257bf/comments", "author": null, "committer": null, "parents": [{"sha": "aec98e42eff44570e0c88be04e37e297b914534d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec98e42eff44570e0c88be04e37e297b914534d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec98e42eff44570e0c88be04e37e297b914534d"}], "stats": {"total": 138, "additions": 123, "deletions": 15}, "files": [{"sha": "6c4cff004e9bfeb940a7cabe8c5527cf55cbba31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d819282d0193c2bc67fdc3ac8613d32931257bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d819282d0193c2bc67fdc3ac8613d32931257bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d819282d0193c2bc67fdc3ac8613d32931257bf", "patch": "@@ -1,3 +1,8 @@\n+Thu Feb  5 21:56:06 1998  Mumit Khan  <khan@xraylith.wisc.edu>\n+\t\n+\t* c-common.c (decl_attributes): Flag unrecognized attribute\n+\tfunctions as warnings instead of as errors.\n+\n 1998-02-05  Marc Lehmann  <pcg@goof.com>\n \n \t* integrate.c (INTEGRATE_THRESHOLD): Inline only small functions"}, {"sha": "dd2bd0f7a7156c1bcb7c8e787a7d38f91694fe56", "filename": "gcc/c-common.c", "status": "modified", "additions": 118, "deletions": 15, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d819282d0193c2bc67fdc3ac8613d32931257bf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d819282d0193c2bc67fdc3ac8613d32931257bf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6d819282d0193c2bc67fdc3ac8613d32931257bf", "patch": "@@ -19,12 +19,12 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include \"tree.h\"\n #include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n-#include <stdio.h>\n #include <ctype.h>\n \n #ifndef WCHAR_TYPE_SIZE\n@@ -51,6 +51,61 @@ static void add_attribute\t\tPROTO((enum attrs, char *,\n static void init_attributes\t\tPROTO((void));\n static void record_international_format\tPROTO((tree, tree, int));\n \n+/* Keep a stack of if statements.  The value recorded is the number of\n+   compound statements seen up to the if keyword.  */\n+static int *if_stack;\n+\n+/* Amount of space in the if statement stack.  */\n+static int if_stack_space = 0;\n+\n+/* Stack pointer.  */\n+static int if_stack_pointer = 0;\n+\n+void\n+c_expand_start_cond (cond, exitflag, compstmt_count)\n+     tree cond;\n+     int exitflag;\n+     int compstmt_count;\n+{\n+  /* Make sure there is enough space on the stack.  */\n+  if (if_stack_space == 0)\n+    {\n+      if_stack_space = 10;\n+      if_stack = (int *)xmalloc (10 * sizeof (int));\n+    }\n+  else if (if_stack_space == if_stack_pointer)\n+    {\n+      if_stack_space += 10;\n+      if_stack = (int *)xrealloc (if_stack, if_stack_space * sizeof (int));\n+    }\n+  \n+  /* Record this if statement.  */\n+  if_stack[if_stack_pointer++] = compstmt_count;\n+\n+  expand_start_cond (cond, exitflag);\n+}\n+\n+void\n+c_expand_end_cond ()\n+{\n+  if_stack_pointer--;\n+  expand_end_cond ();\n+}\n+\n+void\n+c_expand_start_else ()\n+{\n+  if (warn_parentheses\n+      && if_stack_pointer > 1\n+      && if_stack[if_stack_pointer - 1] == if_stack[if_stack_pointer - 2])\n+    warning (\"suggest explicit braces to avoid ambiguous `else'\");\n+  \n+  /* This if statement can no longer cause a dangling else.  */\n+  if_stack[if_stack_pointer - 1]--;\n+\n+  expand_start_else ();\n+}\n+\n /* Make bindings for __FUNCTION__ and __PRETTY_FUNCTION__.  */\n \n void\n@@ -268,7 +323,7 @@ init_attributes ()\n   add_attribute (A_COMMON, \"common\", 0, 0, 1);\n   add_attribute (A_NORETURN, \"noreturn\", 0, 0, 1);\n   add_attribute (A_NORETURN, \"volatile\", 0, 0, 1);\n-  add_attribute (A_UNUSED, \"unused\", 0, 0, 1);\n+  add_attribute (A_UNUSED, \"unused\", 0, 0, 0);\n   add_attribute (A_CONST, \"const\", 0, 0, 1);\n   add_attribute (A_T_UNION, \"transparent_union\", 0, 0, 0);\n   add_attribute (A_CONSTRUCTOR, \"constructor\", 0, 0, 1);\n@@ -385,8 +440,11 @@ decl_attributes (node, attributes, prefix_attributes)\n \t  break;\n \n \tcase A_UNUSED:\n-\t  if (TREE_CODE (decl) == PARM_DECL || TREE_CODE (decl) == VAR_DECL\n-\t      || TREE_CODE (decl) == FUNCTION_DECL)\n+\t  if (is_type)\n+\t    TREE_USED (type) = 1;\n+\t  else if (TREE_CODE (decl) == PARM_DECL \n+\t\t   || TREE_CODE (decl) == VAR_DECL\n+\t\t   || TREE_CODE (decl) == FUNCTION_DECL)\n \t    TREE_USED (decl) = 1;\n \t  else\n \t    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n@@ -587,8 +645,8 @@ decl_attributes (node, attributes, prefix_attributes)\n \t      is_scan = 1;\n \t    else if (TREE_CODE (format_type) == IDENTIFIER_NODE)\n \t      {\n-\t\terror (\"`%s' is an unrecognized format function type\",\n-\t\t       IDENTIFIER_POINTER (format_type));\n+\t\twarning (\"`%s' is an unrecognized format function type\",\n+\t\t         IDENTIFIER_POINTER (format_type));\n \t\tcontinue;\n \t      }\n \t    else\n@@ -871,7 +929,7 @@ static format_char_info print_char_table[] = {\n /* Two GNU extensions.  */\n   { \"Z\",\t0,\tT_ST,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp0\"\t\t},\n   { \"m\",\t0,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"feEgG\",\t0,\tT_D,\tNULL,\tNULL,\tNULL,\tT_LD,\t\"-wp0 +#\"\t},\n+  { \"feEgGaA\",\t0,\tT_D,\tNULL,\tNULL,\tNULL,\tT_LD,\t\"-wp0 +#\"\t},\n   { \"c\",\t0,\tT_I,\tNULL,\tT_W,\tNULL,\tNULL,\t\"-w\"\t\t},\n   { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n   { \"s\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\tNULL,\t\"-wp\"\t\t},\n@@ -884,7 +942,7 @@ static format_char_info print_char_table[] = {\n static format_char_info scan_char_table[] = {\n   { \"di\",\t1,\tT_I,\tT_S,\tT_L,\tT_LL,\tT_LL,\t\"*\"\t},\n   { \"ouxX\",\t1,\tT_UI,\tT_US,\tT_UL,\tT_ULL,\tT_ULL,\t\"*\"\t},\t\n-  { \"efgEG\",\t1,\tT_F,\tNULL,\tT_D,\tNULL,\tT_LD,\t\"*\"\t},\n+  { \"efgEGaA\",\t1,\tT_F,\tNULL,\tT_D,\tNULL,\tT_LD,\t\"*\"\t},\n   { \"sc\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\tNULL,\t\"*a\"\t},\n   { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n   { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n@@ -1232,9 +1290,12 @@ check_format_info (info, params)\n \t\t\t   *format_chars);\n \t\t  warning (message);\n \t\t}\n-\t      i = strlen (flag_chars);\n-\t      flag_chars[i++] = *format_chars++;\n-\t      flag_chars[i] = 0;\n+\t      else\n+\t\t{\n+\t\t  i = strlen (flag_chars);\n+\t\t  flag_chars[i++] = *format_chars++;\n+\t\t  flag_chars[i] = 0;\n+\t\t}\n \t    }\n \t  /* \"If the space and + flags both appear, \n \t     the space flag will be ignored.\"  */\n@@ -1343,10 +1404,15 @@ check_format_info (info, params)\n \t    pedwarn (\"ANSI C does not support the `ll' length modifier\");\n \t}\n       aflag = 0;\n-      if (*format_chars == 'a')\n+      if (*format_chars == 'a' && info->is_scan)\n \t{\n-\t  aflag = 1;\n-\t  format_chars++;\n+\t  if (format_chars[1] == 's' || format_chars[1] == 'S'\n+\t      || format_chars[1] == '[')\n+\t    {\n+\t      /* `a' is used as a flag.  */\n+\t      aflag = 1;\n+\t      format_chars++;\n+\t    }\n \t}\n       if (suppressed && length_char != 0)\n \t{\n@@ -1485,13 +1551,21 @@ check_format_info (info, params)\n       ++arg_num;\n       cur_type = TREE_TYPE (cur_param);\n \n+      STRIP_NOPS (cur_param);\n+\n       /* Check the types of any additional pointer arguments\n \t that precede the \"real\" argument.  */\n       for (i = 0; i < fci->pointer_count + aflag; ++i)\n \t{\n \t  if (TREE_CODE (cur_type) == POINTER_TYPE)\n \t    {\n \t      cur_type = TREE_TYPE (cur_type);\n+\n+\t      if (TREE_CODE (cur_param) == ADDR_EXPR)\n+\t\tcur_param = TREE_OPERAND (cur_param, 0);\n+\t      else\n+\t\tcur_param = 0;\n+\n \t      continue;\n \t    }\n \t  if (TREE_CODE (cur_type) != ERROR_MARK)\n@@ -1506,6 +1580,21 @@ check_format_info (info, params)\n \t  break;\n \t}\n \n+      /* See if this is an attempt to write into a const type with\n+\t scanf.  */\n+      if (info->is_scan && i == fci->pointer_count + aflag\n+\t  && wanted_type != 0\n+\t  && TREE_CODE (cur_type) != ERROR_MARK\n+\t  && (TYPE_READONLY (cur_type)\n+\t      || (cur_param != 0\n+\t\t  && (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'c'\n+\t\t      || (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'd'\n+\t\t\t  && TREE_READONLY (cur_param))))))\n+\t{\n+\t  sprintf (message, \"writing into constant object (arg %d)\", arg_num);\n+\t  warning (message);\n+\t}\n+\n       /* Check the type of the \"real\" argument, if there's a type we want.  */\n       if (i == fci->pointer_count + aflag && wanted_type != 0\n \t  && TREE_CODE (cur_type) != ERROR_MARK\n@@ -1856,7 +1945,7 @@ void\n binary_op_error (code)\n      enum tree_code code;\n {\n-  register char *opname = \"unknown\";\n+  register char *opname;\n \n   switch (code)\n     {\n@@ -1909,6 +1998,8 @@ binary_op_error (code)\n     case LROTATE_EXPR:\n     case RROTATE_EXPR:\n       opname = \"rotate\"; break;\n+    default:\n+      opname = \"unknown\"; break;\n     }\n   error (\"invalid operands to binary %s\", opname);\n }\n@@ -1995,6 +2086,8 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \tcase GE_EXPR:\n \t  code = LE_EXPR;\n \t  break;\n+\tdefault:\n+\t  break;\n \t}\n       *rescode_ptr = code;\n     }\n@@ -2125,6 +2218,9 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t\tprimop1 = TYPE_MAX_VALUE (type);\n \t\tval = 0;\n \t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n \t      }\n \t  type = unsigned_type (type);\n \t}\n@@ -2222,6 +2318,10 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t\t\t\t\t\t     primop0))))\n \t\twarning (\"unsigned value < 0 is always 0\");\n \t      value = boolean_false_node;\n+\t      break;\n+\n+\t    default:\n+\t      break;\n \t    }\n \n \t  if (value != 0)\n@@ -2409,6 +2509,9 @@ truthvalue_conversion (expr)\n       if (warn_parentheses && C_EXP_ORIGINAL_CODE (expr) == MODIFY_EXPR)\n \twarning (\"suggest parentheses around assignment used as truth value\");\n       break;\n+      \n+    default:\n+      break;\n     }\n \n   if (TREE_CODE (TREE_TYPE (expr)) == COMPLEX_TYPE)"}]}