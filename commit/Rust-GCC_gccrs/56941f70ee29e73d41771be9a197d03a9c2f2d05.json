{"sha": "56941f70ee29e73d41771be9a197d03a9c2f2d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5NDFmNzBlZTI5ZTczZDQxNzcxYmU5YTE5N2QwM2E5YzJmMmQwNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T16:01:55Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T16:01:55Z"}, "message": "[arm] Use ISA feature sets for determining inlinability\n\nNow that we can construct the build target isa from the cl_target_options\ndata we can use this to determine inlinability.  This eliminates the\nfinal remaining use of the FPU features field.\n\n\t* arm.c (arm_can_inline_p): Use ISA features for determining\n\tinlinability.\n\nFrom-SVN: r243714", "tree": {"sha": "da7040c9a5762f34f1257d94e0e135c9690ed687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da7040c9a5762f34f1257d94e0e135c9690ed687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56941f70ee29e73d41771be9a197d03a9c2f2d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56941f70ee29e73d41771be9a197d03a9c2f2d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56941f70ee29e73d41771be9a197d03a9c2f2d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56941f70ee29e73d41771be9a197d03a9c2f2d05/comments", "author": null, "committer": null, "parents": [{"sha": "a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53613c4ae9ad153ce5d12fdfef413c9e9ae82d6"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "2258bf832166dcfd96d8f4b1e9aad1bba7f2c471", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941f70ee29e73d41771be9a197d03a9c2f2d05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941f70ee29e73d41771be9a197d03a9c2f2d05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56941f70ee29e73d41771be9a197d03a9c2f2d05", "patch": "@@ -1,3 +1,8 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (arm_can_inline_p): Use ISA features for determining\n+\tinlinability.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-protos.h (arm_configure_build_target): Change second argument"}, {"sha": "1d3bb89de7e6e15762cfa326d173c67b9684f7ba", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56941f70ee29e73d41771be9a197d03a9c2f2d05/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56941f70ee29e73d41771be9a197d03a9c2f2d05/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=56941f70ee29e73d41771be9a197d03a9c2f2d05", "patch": "@@ -30227,6 +30227,7 @@ arm_can_inline_p (tree caller, tree callee)\n {\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n   tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n+  bool can_inline = true;\n \n   struct cl_target_option *caller_opts\n \t= TREE_TARGET_OPTION (caller_tree ? caller_tree\n@@ -30236,19 +30237,29 @@ arm_can_inline_p (tree caller, tree callee)\n \t= TREE_TARGET_OPTION (callee_tree ? callee_tree\n \t\t\t\t\t   : target_option_default_node);\n \n-  const struct arm_fpu_desc *caller_fpu\n-    = &all_fpus[caller_opts->x_arm_fpu_index];\n-  const struct arm_fpu_desc *callee_fpu\n-    = &all_fpus[callee_opts->x_arm_fpu_index];\n+  if (callee_opts == caller_opts)\n+    return true;\n \n-  /* Callee's fpu features should be a subset of the caller's.  */\n-  if ((caller_fpu->features & callee_fpu->features) != callee_fpu->features)\n-    return false;\n+  /* Callee's ISA features should be a subset of the caller's.  */\n+  struct arm_build_target caller_target;\n+  struct arm_build_target callee_target;\n+  caller_target.isa = sbitmap_alloc (isa_num_bits);\n+  callee_target.isa = sbitmap_alloc (isa_num_bits);\n+\n+  arm_configure_build_target (&caller_target, caller_opts, &global_options_set,\n+\t\t\t      false);\n+  arm_configure_build_target (&callee_target, callee_opts, &global_options_set,\n+\t\t\t      false);\n+  if (!bitmap_subset_p (callee_target.isa, caller_target.isa))\n+    can_inline = false;\n+\n+  sbitmap_free (caller_target.isa);\n+  sbitmap_free (callee_target.isa);\n \n   /* OK to inline between different modes.\n      Function with mode specific instructions, e.g using asm,\n      must be explicitly protected with noinline.  */\n-  return true;\n+  return can_inline;\n }\n \n /* Hook to fix function's alignment affected by target attribute.  */"}]}