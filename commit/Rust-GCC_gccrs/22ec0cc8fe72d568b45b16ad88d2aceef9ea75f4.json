{"sha": "22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlYzBjYzhmZTcyZDU2OGI0NWIxNmFkODhkMmFjZWVmOWVhNzVmNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-03-04T19:45:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-03-04T19:45:26Z"}, "message": "rtlanal.c (insns_safe_to_move_p): Remove.\n\n\t* rtlanal.c (insns_safe_to_move_p): Remove.\n\t* rtl.h: Remove the prototype for insns_safe_to_move_p.\n\nFrom-SVN: r111713", "tree": {"sha": "620b58f6baa549989fa26da81134ad19fdc06abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/620b58f6baa549989fa26da81134ad19fdc06abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/comments", "author": null, "committer": null, "parents": [{"sha": "2f8dc5bb4c14c4cd524c5f72a814fc46a4c06024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8dc5bb4c14c4cd524c5f72a814fc46a4c06024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8dc5bb4c14c4cd524c5f72a814fc46a4c06024"}], "stats": {"total": 82, "additions": 5, "deletions": 77}, "files": [{"sha": "396c031aea376c754804ba2426cbc04f7bfc6e7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "patch": "@@ -1,3 +1,8 @@\n+2006-03-04  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* rtlanal.c (insns_safe_to_move_p): Remove.\n+\t* rtl.h: Remove the prototype for insns_safe_to_move_p.\n+\n 2006-03-04  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* expmed.c (expand_mult_add): Remove."}, {"sha": "a6cd5808202bb4c6db2be6b68a1956375a3d762c", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "patch": "@@ -1734,7 +1734,6 @@ extern rtx regno_use_in (unsigned int, rtx);\n extern int auto_inc_p (rtx);\n extern int in_expr_list_p (rtx, rtx);\n extern void remove_node_from_expr_list (rtx, rtx *);\n-extern int insns_safe_to_move_p (rtx, rtx, rtx *);\n extern int loc_mentioned_in_p (rtx *, rtx);\n extern rtx find_first_parameter_load (rtx, rtx);\n extern bool keep_with_call_p (rtx);"}, {"sha": "dc3b5adde5a000e80fb6442207be1b7e6fe79882", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=22ec0cc8fe72d568b45b16ad88d2aceef9ea75f4", "patch": "@@ -2927,82 +2927,6 @@ auto_inc_p (rtx x)\n   return 0;\n }\n \n-/* Return 1 if the sequence of instructions beginning with FROM and up\n-   to and including TO is safe to move.  If NEW_TO is non-NULL, and\n-   the sequence is not already safe to move, but can be easily\n-   extended to a sequence which is safe, then NEW_TO will point to the\n-   end of the extended sequence.\n-\n-   For now, this function only checks that the region contains whole\n-   exception regions, but it could be extended to check additional\n-   conditions as well.  */\n-\n-int\n-insns_safe_to_move_p (rtx from, rtx to, rtx *new_to)\n-{\n-  int eh_region_count = 0;\n-  int past_to_p = 0;\n-  rtx r = from;\n-\n-  /* By default, assume the end of the region will be what was\n-     suggested.  */\n-  if (new_to)\n-    *new_to = to;\n-\n-  while (r)\n-    {\n-      if (NOTE_P (r))\n-\t{\n-\t  switch (NOTE_LINE_NUMBER (r))\n-\t    {\n-\t    case NOTE_INSN_EH_REGION_BEG:\n-\t      ++eh_region_count;\n-\t      break;\n-\n-\t    case NOTE_INSN_EH_REGION_END:\n-\t      if (eh_region_count == 0)\n-\t\t/* This sequence of instructions contains the end of\n-\t\t   an exception region, but not he beginning.  Moving\n-\t\t   it will cause chaos.  */\n-\t\treturn 0;\n-\n-\t      --eh_region_count;\n-\t      break;\n-\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-      else if (past_to_p)\n-\t/* If we've passed TO, and we see a non-note instruction, we\n-\t   can't extend the sequence to a movable sequence.  */\n-\treturn 0;\n-\n-      if (r == to)\n-\t{\n-\t  if (!new_to)\n-\t    /* It's OK to move the sequence if there were matched sets of\n-\t       exception region notes.  */\n-\t    return eh_region_count == 0;\n-\n-\t  past_to_p = 1;\n-\t}\n-\n-      /* It's OK to move the sequence if there were matched sets of\n-\t exception region notes.  */\n-      if (past_to_p && eh_region_count == 0)\n-\t{\n-\t  *new_to = r;\n-\t  return 1;\n-\t}\n-\n-      /* Go to the next instruction.  */\n-      r = NEXT_INSN (r);\n-    }\n-\n-  return 0;\n-}\n-\n /* Return nonzero if IN contains a piece of rtl that has the address LOC.  */\n int\n loc_mentioned_in_p (rtx *loc, rtx in)"}]}