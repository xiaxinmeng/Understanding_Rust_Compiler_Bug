{"sha": "508f8149cc9ce0c99b755aff3ca4b7409405f42a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4ZjgxNDljYzljZTBjOTliNzU1YWZmM2NhNGI3NDA5NDA1ZjQyYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-08T10:30:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-07-08T10:30:11Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1516", "tree": {"sha": "6d62283f2fd33224a1673e65d6cd5ac0b0d7a3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d62283f2fd33224a1673e65d6cd5ac0b0d7a3d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/508f8149cc9ce0c99b755aff3ca4b7409405f42a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508f8149cc9ce0c99b755aff3ca4b7409405f42a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508f8149cc9ce0c99b755aff3ca4b7409405f42a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508f8149cc9ce0c99b755aff3ca4b7409405f42a/comments", "author": null, "committer": null, "parents": [{"sha": "2e0e2b76bea575afc3070ebd4d3c47deade86221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0e2b76bea575afc3070ebd4d3c47deade86221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0e2b76bea575afc3070ebd4d3c47deade86221"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "0dadbd2bf715be9b3701994fdf61954d0339c234", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/508f8149cc9ce0c99b755aff3ca4b7409405f42a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/508f8149cc9ce0c99b755aff3ca4b7409405f42a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=508f8149cc9ce0c99b755aff3ca4b7409405f42a", "patch": "@@ -840,6 +840,9 @@ make_node (code)\n   tree_node_sizes[(int)kind] += length;\n #endif\n \n+  /* We assume here that the length of a tree node is a multiple of the\n+     size of an int.  Rounding up won't work because it would clobber\n+     the next object.  */\n   for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n     ((int *) t)[i] = 0;\n \n@@ -932,9 +935,7 @@ copy_node (node)\n \n   t = (tree) obstack_alloc (current_obstack, length);\n \n-  for (i = ((length + sizeof (int) - 1) / sizeof (int)) - 1;\n-       i >= 0;\n-       i--)\n+  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n     ((int *) t)[i] = ((int *) node)[i];\n \n   TREE_CHAIN (t) = 0;\n@@ -1199,12 +1200,9 @@ make_tree_vec (len)\n \n   t = (tree) obstack_alloc (obstack, length);\n \n-  TREE_TYPE (t) = 0;\n-  TREE_CHAIN (t) = 0;\n-  for (i = (length / sizeof (int)) - 1;\n-       i >= sizeof (struct tree_common) / sizeof (int) - 1;\n-       i--)\n+  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n     ((int *) t)[i] = 0;\n+\n   TREE_SET_CODE (t, TREE_VEC);\n   TREE_VEC_LENGTH (t) = len;\n   if (obstack == &permanent_obstack)\n@@ -1563,11 +1561,12 @@ tree_cons (purpose, value, chain)\n   tree_node_sizes[(int)x_kind] += sizeof (struct tree_list);\n #endif\n \n-  ((int *)node)[(sizeof (struct tree_common)/sizeof (int)) - 1] = 0;\n+  for (i = (sizeof (struct tree_common) / sizeof (int)) - 1; i >= 0; i--)\n+    ((int *) t)[i] = 0;\n+\n   TREE_SET_CODE (node, TREE_LIST);\n   if (current_obstack == &permanent_obstack)\n     TREE_PERMANENT (node) = 1;\n-  TREE_TYPE (node) = 0;\n #endif\n \n   TREE_CHAIN (node) = chain;\n@@ -2005,13 +2004,10 @@ build1 (code, type, node)\n   tree_node_sizes[(int)kind] += length;\n #endif\n \n-  TREE_TYPE (t) = type;\n-  TREE_CHAIN (t) = 0;\n-\n-  for (i = (length / sizeof (int)) - 2;\n-       i >= sizeof (struct tree_common) / sizeof (int) - 1;\n-       i--)\n+  for (i = (length / sizeof (int)) - 1; i >= 0; i--)\n     ((int *) t)[i] = 0;\n+\n+  TREE_TYPE (t) = type;\n   TREE_SET_CODE (t, code);\n \n   if (obstack == &permanent_obstack)"}]}