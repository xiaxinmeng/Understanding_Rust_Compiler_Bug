{"sha": "83d9be558117c0dea6b12d3db4171eae1c90a2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNkOWJlNTU4MTE3YzBkZWE2YjEyZDNkYjQxNzFlYWUxYzkwYTJkNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-16T22:40:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-16T22:40:32Z"}, "message": "re PR fortran/84418 (ICE with fortran OpenMP linear (ref ()) clause)\n\n\tPR fortran/84418\n\t* trans-openmp.c (gfc_trans_omp_clauses): For OMP_CLAUSE_LINEAR_REF\n\tkind set OMP_CLAUSE_LINEAR_STEP to TYPE_SIZE_UNIT times last_step.\n\n\t* libgomp.fortran/pr84418-1.f90: New test.\n\t* libgomp.fortran/pr84418-2.f90: New test.\n\nFrom-SVN: r257771", "tree": {"sha": "2928af1a64421d351d8d34be1829fa0f34927163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2928af1a64421d351d8d34be1829fa0f34927163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83d9be558117c0dea6b12d3db4171eae1c90a2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d9be558117c0dea6b12d3db4171eae1c90a2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d9be558117c0dea6b12d3db4171eae1c90a2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d9be558117c0dea6b12d3db4171eae1c90a2d7/comments", "author": null, "committer": null, "parents": [{"sha": "019e0ae8e00068d14aeee7c3b9e54ec14d2a5dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019e0ae8e00068d14aeee7c3b9e54ec14d2a5dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019e0ae8e00068d14aeee7c3b9e54ec14d2a5dd9"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "445b9cce22244b36208c21ceb3b067115b96cdeb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d9be558117c0dea6b12d3db4171eae1c90a2d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d9be558117c0dea6b12d3db4171eae1c90a2d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=83d9be558117c0dea6b12d3db4171eae1c90a2d7", "patch": "@@ -1,4 +1,10 @@\n-2018-02-16  Dominique d'Humieres <dominiq@gcc.gnu.org>\n+2018-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/84418\n+\t* trans-openmp.c (gfc_trans_omp_clauses): For OMP_CLAUSE_LINEAR_REF\n+\tkind set OMP_CLAUSE_LINEAR_STEP to TYPE_SIZE_UNIT times last_step.\n+\n+2018-02-16  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n \tPR fortran/84354\n \t* decl.c (gfc_get_pdt_instance): Replace '%qs' with %qs.\n@@ -390,7 +396,7 @@\n \t* trans-io.c (get_dtio_proc): Likewise. (transfer_expr): Fix\n \twhitespace.\n \n-2018-01-13  Thomas Koenig <tkoenig@gcc.gnu.org>\n+2018-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83744\n \t* dump-parse-tree.c (get_c_type_name): Remove extra line.\n@@ -414,7 +420,7 @@\n \t* trans-array.c (is_pointer_array): Remove unconditional return\n \tof false for -fopenmp.\n \n-2018-01-13  Thomas Koenig <tkoenig@gcc.gnu.org>\n+2018-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \t<emsr@gcc.gnu.org>\n \n \tPR fortran/83803"}, {"sha": "795175d701a4876524622e991eb521a0729a5174", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d9be558117c0dea6b12d3db4171eae1c90a2d7/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d9be558117c0dea6b12d3db4171eae1c90a2d7/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=83d9be558117c0dea6b12d3db4171eae1c90a2d7", "patch": "@@ -1949,9 +1949,32 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t  }\n \t\t\telse\n \t\t\t  {\n-\t\t\t    tree type = gfc_typenode_for_spec (&n->sym->ts);\n-\t\t\t    OMP_CLAUSE_LINEAR_STEP (node)\n-\t\t\t      = fold_convert (type, last_step);\n+\t\t\t    if (kind == OMP_CLAUSE_LINEAR_REF)\n+\t\t\t      {\n+\t\t\t\ttree type;\n+\t\t\t\tif (n->sym->attr.flavor == FL_PROCEDURE)\n+\t\t\t\t  {\n+\t\t\t\t    type = gfc_get_function_type (n->sym);\n+\t\t\t\t    type = build_pointer_type (type);\n+\t\t\t\t  }\n+\t\t\t\telse\n+\t\t\t\t  type = gfc_sym_type (n->sym);\n+\t\t\t\tif (POINTER_TYPE_P (type))\n+\t\t\t\t  type = TREE_TYPE (type);\n+\t\t\t\t/* Otherwise to be determined what exactly\n+\t\t\t\t   should be done.  */\n+\t\t\t\ttree t = fold_convert (sizetype, last_step);\n+\t\t\t\tt = size_binop (MULT_EXPR, t,\n+\t\t\t\t\t\tTYPE_SIZE_UNIT (type));\n+\t\t\t\tOMP_CLAUSE_LINEAR_STEP (node) = t;\n+\t\t\t      }\n+\t\t\t    else\n+\t\t\t      {\n+\t\t\t\ttree type\n+\t\t\t\t  = gfc_typenode_for_spec (&n->sym->ts);\n+\t\t\t\tOMP_CLAUSE_LINEAR_STEP (node)\n+\t\t\t\t  = fold_convert (type, last_step);\n+\t\t\t      }\n \t\t\t  }\n \t\t\tif (n->sym->attr.dimension || n->sym->attr.allocatable)\n \t\t\t  OMP_CLAUSE_LINEAR_ARRAY (node) = 1;"}, {"sha": "5e5e22f3a9f4dad9751d7b0d67cfbf8bde062925", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=83d9be558117c0dea6b12d3db4171eae1c90a2d7", "patch": "@@ -1,3 +1,9 @@\n+2018-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/84418\n+\t* libgomp.fortran/pr84418-1.f90: New test.\n+\t* libgomp.fortran/pr84418-2.f90: New test.\n+\n 2018-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/84313"}, {"sha": "e56c022446cddc71386af569934bf719040a7da3", "filename": "libgomp/testsuite/libgomp.fortran/pr84418-1.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-1.f90?ref=83d9be558117c0dea6b12d3db4171eae1c90a2d7", "patch": "@@ -0,0 +1,26 @@\n+! PR fortran/84418\n+! { dg-do run { target vect_simd_clones } }\n+! { dg-options \"-fno-inline\" }\n+! { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+! { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+  real :: a(1024), b(1024), c(1024)\n+  integer :: i\n+  do i = 1, 1024\n+    a(i) = 0.5 * i\n+    b(i) = 1.5 * i\n+  end do\n+  !$omp simd\n+  do i = 1, 1024\n+    c(i) = foo (a(i), b(i))\n+  end do\n+  do i = 1, 1024\n+    if (c(i).ne.(2 * i)) call abort\n+  end do\n+contains\n+  real function foo (x, y)\n+    real :: x, y\n+    !$omp declare simd linear (ref (x, y))\n+    foo = x + y\n+  end function\n+end"}, {"sha": "a6657d180959aeaa82eadf470054b3ffeaaefd8e", "filename": "libgomp/testsuite/libgomp.fortran/pr84418-2.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83d9be558117c0dea6b12d3db4171eae1c90a2d7/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr84418-2.f90?ref=83d9be558117c0dea6b12d3db4171eae1c90a2d7", "patch": "@@ -0,0 +1,35 @@\n+! PR fortran/84418\n+! { dg-do run { target vect_simd_clones } }\n+! { dg-options \"-fno-inline\" }\n+! { dg-additional-options \"-msse2\" { target sse2_runtime } }\n+! { dg-additional-options \"-mavx\" { target avx_runtime } }\n+\n+  type p\n+    integer :: i, j\n+  end type\n+  type(p) :: a(1024)\n+  integer :: b(4,1024), c(1024)\n+  integer :: i\n+  do i = 1, 1024\n+    a(i)%i = 2 * i\n+    a(i)%j = 3 * i\n+    b(1,i) = 4 * i\n+    b(2,i) = 5 * i\n+    b(3,i) = 6 * i\n+    b(4,i) = 7 * i\n+  end do\n+  !$omp simd\n+  do i = 1, 1024\n+    c(i) = foo (a(i), b(:,i))\n+  end do\n+  do i = 1, 1024\n+    if (c(i).ne.(6 * i)) call abort\n+  end do\n+contains  \n+  function foo (x, y)\n+    type (p) :: x\n+    integer :: y(4), foo\n+    !$omp declare simd linear (ref (x, y))\n+    foo = x%i + y(1)\n+  end function\n+end"}]}