{"sha": "b3be269469128e277aabfe9972e48176eb627f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiZTI2OTQ2OTEyOGUyNzdhYWJmZTk5NzJlNDgxNzZlYjYyN2Y1Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-22T11:19:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-22T11:19:45Z"}, "message": "re PR tree-optimization/43845 (Segfault when using __attribute__((const)), versions 4.4.3 and 4.6)\n\n2010-04-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43845\n\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Properly\n\tlookup the CALL_EXPR function and arguments.\n\n\t* gcc.c-torture/compile/pr43845.c: New testcase.\n\nFrom-SVN: r158641", "tree": {"sha": "05f70a50455f568a3f9ab371e4e06842510f6504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f70a50455f568a3f9ab371e4e06842510f6504"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3be269469128e277aabfe9972e48176eb627f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3be269469128e277aabfe9972e48176eb627f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3be269469128e277aabfe9972e48176eb627f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3be269469128e277aabfe9972e48176eb627f57/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "038eab67cde22a3405950a60bc62df7e4681f44e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038eab67cde22a3405950a60bc62df7e4681f44e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038eab67cde22a3405950a60bc62df7e4681f44e"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "659727d9993c599b6bb4c15947758c0e82a8c87b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3be269469128e277aabfe9972e48176eb627f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3be269469128e277aabfe9972e48176eb627f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3be269469128e277aabfe9972e48176eb627f57", "patch": "@@ -1,3 +1,9 @@\n+2010-04-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43845\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Properly\n+\tlookup the CALL_EXPR function and arguments.\n+\n 2010-04-22  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.c"}, {"sha": "026b4babd3c2b923af66b369cdd41d97c66f612f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3be269469128e277aabfe9972e48176eb627f57", "patch": "@@ -1,3 +1,8 @@\n+2010-04-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43845\n+\t* gcc.c-torture/compile/pr43845.c: New testcase.\n+\n 2010-04-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR middle-end/29274"}, {"sha": "bdb45e7d2a8b6db667001f2b24ee3d25fefc7fe0", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43845.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43845.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43845.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43845.c?ref=b3be269469128e277aabfe9972e48176eb627f57", "patch": "@@ -0,0 +1,12 @@\n+typedef int __attribute__ ((const)) (*x264_pixel_cmp_t)(void);\n+\n+typedef struct {\n+    x264_pixel_cmp_t ssd;\n+} x264_pixel_function_t;\n+\n+int x264_pixel_ssd_wxh (x264_pixel_function_t *pf, int i_width) {\n+    int i_ssd = 0, x;\n+    for (x = 0; x < i_width; x++)\n+      i_ssd += pf->ssd();\n+    return i_ssd;\n+}"}, {"sha": "3a81f2c93167383a1ca28c0c876f16b43d76577e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3be269469128e277aabfe9972e48176eb627f57/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b3be269469128e277aabfe9972e48176eb627f57", "patch": "@@ -2631,31 +2631,46 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n     {\n     case CALL_EXPR:\n       {\n-\ttree folded, sc = currop->op1;\n+\ttree folded, sc = NULL_TREE;\n \tunsigned int nargs = 0;\n-\ttree *args = XNEWVEC (tree, VEC_length (vn_reference_op_s,\n-\t\t\t\t\t\tref->operands) - 1);\n+\ttree fn, *args;\n+\tif (TREE_CODE (currop->op0) == FUNCTION_DECL)\n+\t  fn = currop->op0;\n+\telse\n+\t  {\n+\t    pre_expr op0 = get_or_alloc_expr_for (currop->op0);\n+\t    fn = find_or_generate_expression (block, op0, stmts, domstmt);\n+\t    if (!fn)\n+\t      return NULL_TREE;\n+\t  }\n+\tif (currop->op1)\n+\t  {\n+\t    pre_expr scexpr = get_or_alloc_expr_for (currop->op1);\n+\t    sc = find_or_generate_expression (block, scexpr, stmts, domstmt);\n+\t    if (!sc)\n+\t      return NULL_TREE;\n+\t  }\n+\targs = XNEWVEC (tree, VEC_length (vn_reference_op_s,\n+\t\t\t\t\t  ref->operands) - 1);\n \twhile (*operand < VEC_length (vn_reference_op_s, ref->operands))\n \t  {\n \t    args[nargs] = create_component_ref_by_pieces_1 (block, ref,\n \t\t\t\t\t\t\t    operand, stmts,\n \t\t\t\t\t\t\t    domstmt);\n+\t    if (!args[nargs])\n+\t      {\n+\t\tfree (args);\n+\t\treturn NULL_TREE;\n+\t      }\n \t    nargs++;\n \t  }\n \tfolded = build_call_array (currop->type,\n-\t\t\t\t   TREE_CODE (currop->op0) == FUNCTION_DECL\n-\t\t\t\t   ? build_fold_addr_expr (currop->op0)\n-\t\t\t\t   : currop->op0,\n+\t\t\t\t   (TREE_CODE (fn) == FUNCTION_DECL\n+\t\t\t\t    ? build_fold_addr_expr (fn) : fn),\n \t\t\t\t   nargs, args);\n \tfree (args);\n \tif (sc)\n-\t  {\n-\t    pre_expr scexpr = get_or_alloc_expr_for (sc);\n-\t    sc = find_or_generate_expression (block, scexpr, stmts, domstmt);\n-\t    if (!sc)\n-\t      return NULL_TREE;\n-\t    CALL_EXPR_STATIC_CHAIN (folded) = sc;\n-\t  }\n+\t  CALL_EXPR_STATIC_CHAIN (folded) = sc;\n \treturn folded;\n       }\n       break;"}]}