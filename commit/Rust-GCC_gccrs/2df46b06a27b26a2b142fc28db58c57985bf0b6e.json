{"sha": "2df46b06a27b26a2b142fc28db58c57985bf0b6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmNDZiMDZhMjdiMjZhMmIxNDJmYzI4ZGI1OGM1Nzk4NWJmMGI2ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-19T12:28:38Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-19T12:28:38Z"}, "message": "(fold): Handle EQ_EXPR and NE_EXPR where both args are comparisons or\nBIT_AND_EXPR with constant 1.\n\nFrom-SVN: r5186", "tree": {"sha": "e96bee4e7c3a76d57d8342155a8a22d858e6a249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e96bee4e7c3a76d57d8342155a8a22d858e6a249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df46b06a27b26a2b142fc28db58c57985bf0b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df46b06a27b26a2b142fc28db58c57985bf0b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df46b06a27b26a2b142fc28db58c57985bf0b6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df46b06a27b26a2b142fc28db58c57985bf0b6e/comments", "author": null, "committer": null, "parents": [{"sha": "0dc92bf6bc0f20b66b5d957993efca53d908a384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc92bf6bc0f20b66b5d957993efca53d908a384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc92bf6bc0f20b66b5d957993efca53d908a384"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "a859f6d2a9a261724b821467105ccdcbc3d5a807", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df46b06a27b26a2b142fc28db58c57985bf0b6e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df46b06a27b26a2b142fc28db58c57985bf0b6e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2df46b06a27b26a2b142fc28db58c57985bf0b6e", "patch": "@@ -3167,9 +3167,11 @@ fold (expr)\n      one of the operands is a comparison and the other is either a comparison\n      or a BIT_AND_EXPR with the constant 1.  In that case, the code below\n      would make the expression more complex.  Change it to a\n-     TRUTH_{AND,OR}_EXPR.  */\n+     TRUTH_{AND,OR}_EXPR.  Likewise, convert a similar NE_EXPR to \n+     TRUTH_XOR_EXPR and an EQ_EXPR to the inversion of a TRUTH_XOR_EXPR.  */\n \n-  if ((code == BIT_AND_EXPR || code == BIT_IOR_EXPR)\n+  if ((code == BIT_AND_EXPR || code == BIT_IOR_EXPR\n+       || code == EQ_EXPR || code == NE_EXPR)\n       && ((TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n \t   && (TREE_CODE_CLASS (TREE_CODE (arg1)) == '<'\n \t       || (TREE_CODE (arg1) == BIT_AND_EXPR\n@@ -3178,8 +3180,17 @@ fold (expr)\n \t      && (TREE_CODE_CLASS (TREE_CODE (arg0)) == '<'\n \t\t  || (TREE_CODE (arg0) == BIT_AND_EXPR\n \t\t      && integer_onep (TREE_OPERAND (arg0, 1)))))))\n-    return fold (build (code == BIT_AND_EXPR ? TRUTH_AND_EXPR : TRUTH_OR_EXPR,\n-\t\t\ttype, arg0, arg1));\n+    {\n+      t = fold (build (code == BIT_AND_EXPR ? TRUTH_AND_EXPR\n+\t\t       : code == BIT_IOR_EXPR ? TRUTH_OR_EXPR\n+\t\t       : TRUTH_XOR_EXPR,\n+\t\t       type, arg0, arg1));\n+\n+      if (code == EQ_EXPR)\n+\tt = invert_truthvalue (t);\n+\n+      return t;\n+    }\n \n   if (TREE_CODE_CLASS (code) == '1')\n     {"}]}