{"sha": "44b80bf0240aefb56d9abcce59c15a24a22048f4", "node_id": "C_kwDOANBUbNoAKDQ0YjgwYmYwMjQwYWVmYjU2ZDlhYmNjZTU5YzE1YTI0YTIyMDQ4ZjQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-20T12:30:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:24Z"}, "message": "Port over context structures", "tree": {"sha": "61aa0abe1352f609417113e4e698a55a61dad225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61aa0abe1352f609417113e4e698a55a61dad225"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44b80bf0240aefb56d9abcce59c15a24a22048f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b80bf0240aefb56d9abcce59c15a24a22048f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b80bf0240aefb56d9abcce59c15a24a22048f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b80bf0240aefb56d9abcce59c15a24a22048f4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4dd8fbc857a78bb4bfb69f1bdfdcbd9b1b6cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4dd8fbc857a78bb4bfb69f1bdfdcbd9b1b6cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4dd8fbc857a78bb4bfb69f1bdfdcbd9b1b6cdb"}], "stats": {"total": 120, "additions": 107, "deletions": 13}, "files": [{"sha": "c1d5cad1448e21a54e41f0c098921f8f9ba7061f", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 107, "deletions": 13, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b80bf0240aefb56d9abcce59c15a24a22048f4/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b80bf0240aefb56d9abcce59c15a24a22048f4/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=44b80bf0240aefb56d9abcce59c15a24a22048f4", "patch": "@@ -50,31 +50,108 @@ array_index_cmp (tree key, tree index);\n \n struct constexpr_global_ctx\n {\n+  /* Values for any temporaries or local variables within the\n+     constant-expression. */\n+  hash_map<tree, tree> values;\n+  /* Number of cxx_eval_constant_expression calls (except skipped ones,\n+     on simple constants or location wrappers) encountered during current\n+     cxx_eval_outermost_constant_expr call.  */\n   HOST_WIDE_INT constexpr_ops_count;\n-\n-  /* Cleanups that need to be evaluated at the end of CLEANUP_POINT_EXPR.  */\n-  vec<tree> *cleanups;\n   /* Heap VAR_DECLs created during the evaluation of the outermost constant\n      expression.  */\n   auto_vec<tree, 16> heap_vars;\n-  constexpr_global_ctx () : constexpr_ops_count (0) {}\n+  /* Cleanups that need to be evaluated at the end of CLEANUP_POINT_EXPR.  */\n+  vec<tree> *cleanups;\n+  /* Number of heap VAR_DECL deallocations.  */\n+  unsigned heap_dealloc_count;\n+  /* Constructor.  */\n+  constexpr_global_ctx ()\n+    : constexpr_ops_count (0), cleanups (NULL), heap_dealloc_count (0)\n+  {}\n+};\n+\n+/* In constexpr.cc */\n+/* Representation of entries in the constexpr function definition table.  */\n+\n+struct GTY ((for_user)) constexpr_fundef\n+{\n+  tree decl;\n+  tree body;\n+  tree parms;\n+  tree result;\n+};\n+\n+/* Objects of this type represent calls to constexpr functions\n+ along with the bindings of parameters to their arguments, for\n+ the purpose of compile time evaluation.  */\n+\n+struct GTY ((for_user)) constexpr_call\n+{\n+  /* Description of the constexpr function definition.  */\n+  constexpr_fundef *fundef;\n+  /* Parameter bindings environment.  A TREE_VEC of arguments.  */\n+  tree bindings;\n+  /* Result of the call.\n+       NULL means the call is being evaluated.\n+       error_mark_node means that the evaluation was erroneous;\n+       otherwise, the actuall value of the call.  */\n+  tree result;\n+  /* The hash of this call; we remember it here to avoid having to\n+     recalculate it when expanding the hash table.  */\n+  hashval_t hash;\n+  /* Whether __builtin_is_constant_evaluated() should evaluate to true.  */\n+  bool manifestly_const_eval;\n+};\n+\n+struct constexpr_call_hasher : ggc_ptr_hash<constexpr_call>\n+{\n+  static hashval_t hash (constexpr_call *);\n+  static bool equal (constexpr_call *, constexpr_call *);\n+};\n+\n+enum constexpr_switch_state\n+{\n+  /* Used when processing a switch for the first time by cxx_eval_switch_expr\n+     and default: label for that switch has not been seen yet.  */\n+  css_default_not_seen,\n+  /* Used when processing a switch for the first time by cxx_eval_switch_expr\n+     and default: label for that switch has been seen already.  */\n+  css_default_seen,\n+  /* Used when processing a switch for the second time by\n+     cxx_eval_switch_expr, where default: label should match.  */\n+  css_default_processing\n };\n \n struct constexpr_ctx\n {\n   /* The part of the context that needs to be unique to the whole\n-   cxx_eval_outermost_constant_expr invocation.  */\n+     cxx_eval_outermost_constant_expr invocation.  */\n   constexpr_global_ctx *global;\n-\n-  /* Whether we should error on a non-constant expression or fail quietly.\n-    This flag needs to be here, but some of the others could move to global\n-    if they get larger than a word.  */\n-  bool quiet;\n-  /* The object we're building the CONSTRUCTOR for.  */\n-  tree object;\n+  /* The innermost call we're evaluating.  */\n+  constexpr_call *call;\n+  /* SAVE_EXPRs and TARGET_EXPR_SLOT vars of TARGET_EXPRs that we've seen\n+     within the current LOOP_EXPR.  NULL if we aren't inside a loop.  */\n+  vec<tree> *save_exprs;\n   /* The CONSTRUCTOR we're currently building up for an aggregate\n      initializer.  */\n   tree ctor;\n+  /* The object we're building the CONSTRUCTOR for.  */\n+  tree object;\n+  /* If inside SWITCH_EXPR.  */\n+  constexpr_switch_state *css_state;\n+  /* The aggregate initialization context inside which this one is nested.  This\n+     is used by lookup_placeholder to resolve PLACEHOLDER_EXPRs.  */\n+  const constexpr_ctx *parent;\n+\n+  /* Whether we should error on a non-constant expression or fail quietly.\n+     This flag needs to be here, but some of the others could move to global\n+     if they get larger than a word.  */\n+  bool quiet;\n+  /* Whether we are strictly conforming to constant expression rules or\n+     trying harder to get a constant value.  */\n+  bool strict;\n+  /* Whether __builtin_is_constant_evaluated () should be true.  */\n+  bool manifestly_const_eval;\n };\n \n static tree\n@@ -105,17 +182,34 @@ eval_binary_expression (const constexpr_ctx *ctx, tree r, bool, bool *, bool *);\n static tree\n get_function_named_in_call (tree t);\n \n+// this is ported from cxx_eval_outermost_constant_expr\n tree\n fold_expr (tree expr)\n {\n+  bool allow_non_constant = false;\n+  bool strict = true;\n+  bool manifestly_const_eval = false;\n+\n   constexpr_global_ctx global_ctx;\n-  constexpr_ctx ctx = {&global_ctx, false};\n+  constexpr_ctx ctx\n+    = {&global_ctx, NULL,\n+       NULL,\t    NULL,\n+       NULL,\t    NULL,\n+       NULL,\t    allow_non_constant,\n+       strict,\t    manifestly_const_eval || !allow_non_constant};\n+\n+  auto_vec<tree, 16> cleanups;\n+  global_ctx.cleanups = &cleanups;\n+\n   bool non_constant_p = false;\n   bool overflow_p = false;\n \n   tree folded\n     = constexpr_expression (&ctx, expr, false, &non_constant_p, &overflow_p);\n   rust_assert (folded != NULL_TREE);\n+\n+  // more logic here to possibly port\n+\n   return folded;\n }\n "}]}