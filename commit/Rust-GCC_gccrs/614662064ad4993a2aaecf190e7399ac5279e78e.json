{"sha": "614662064ad4993a2aaecf190e7399ac5279e78e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0NjYyMDY0YWQ0OTkzYTJhYWVjZjE5MGU3Mzk5YWM1Mjc5ZTc4ZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-09T17:47:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-09T17:47:13Z"}, "message": "c++: Partially revert fix for PR c++/95497 [PR96132]\n\nI was mistaken to assume that a dependent type is necessarily\nincomplete, and indeed there are multiple places in the frontend where\nwe check a type for both dependency and completeness.  So this patch\npartially reverts the fix for PR95497, restoring the dependent_type_p\ncheck that guarded the call to is_really_empty_class below.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96132\n\t* constexpr.c (potential_constant_expression_1) <case PARM_DECL>:\n\tRestore dependent_type_p check that guarded the call to\n\tis_really_empty_class.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96132\n\t* g++.dg/template/incomplete12.C: New test.", "tree": {"sha": "5ff778f4aeb96e50d62364516bafff6a24504fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ff778f4aeb96e50d62364516bafff6a24504fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/614662064ad4993a2aaecf190e7399ac5279e78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614662064ad4993a2aaecf190e7399ac5279e78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614662064ad4993a2aaecf190e7399ac5279e78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614662064ad4993a2aaecf190e7399ac5279e78e/comments", "author": null, "committer": null, "parents": [{"sha": "fab263ab0fc10ea08409b80afa7e8569438b8d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fab263ab0fc10ea08409b80afa7e8569438b8d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fab263ab0fc10ea08409b80afa7e8569438b8d28"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "97dcc1b1d1057567b1c099f691c8b19d6452d2ac", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614662064ad4993a2aaecf190e7399ac5279e78e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614662064ad4993a2aaecf190e7399ac5279e78e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=614662064ad4993a2aaecf190e7399ac5279e78e", "patch": "@@ -7444,6 +7444,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t{\n \t  tree type = TREE_TYPE (t);\n \t  if ((processing_template_decl && !COMPLETE_TYPE_P (type))\n+\t      || dependent_type_p (type)\n \t      || is_really_empty_class (type, /*ignore_vptr*/false))\n \t    /* An empty class has no data to read.  */\n \t    return true;"}, {"sha": "335e5356874dcad043f5f0e4f1062b1984e106b3", "filename": "gcc/testsuite/g++.dg/template/incomplete12.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614662064ad4993a2aaecf190e7399ac5279e78e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614662064ad4993a2aaecf190e7399ac5279e78e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete12.C?ref=614662064ad4993a2aaecf190e7399ac5279e78e", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/96132\n+// { dg-do compile }\n+\n+template <int> class a;\n+\n+template <int b> class c {\n+  a<b> e;\n+  void operator=(c d) { e = d; }\n+};"}]}