{"sha": "21c767169b833b6c22f8b1e8550e95ef792b6fd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjNzY3MTY5YjgzM2I2YzIyZjhiMWU4NTUwZTk1ZWY3OTJiNmZkMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2014-11-12T21:16:14Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-11-12T21:16:14Z"}, "message": "Initialize PIC register for large PIC model C++ thunk\n\ngcc/\n\n\tPR target/63815\n\t* config/i386/i386.c (ix86_init_large_pic_reg): New.  Extracted\n\tfrom ...\n\t(ix86_init_pic_reg): Here.  Use ix86_init_large_pic_reg.\n\t(x86_output_mi_thunk): Set PIC register to %r11.  Call\n\tix86_init_large_pic_reg to initialize PIC register.\n\ngcc/testsuite/\n\n\tPR target/63815\n\t* g++.dg/other/pr63815.C: New test.\n\nFrom-SVN: r217445", "tree": {"sha": "98bab630dbbcc84f4da9fe5e76576f8dc2a819ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98bab630dbbcc84f4da9fe5e76576f8dc2a819ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c767169b833b6c22f8b1e8550e95ef792b6fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c767169b833b6c22f8b1e8550e95ef792b6fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c767169b833b6c22f8b1e8550e95ef792b6fd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c767169b833b6c22f8b1e8550e95ef792b6fd1/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "186ad798b9f039e5c824636687d0ee67f29bfc80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/186ad798b9f039e5c824636687d0ee67f29bfc80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/186ad798b9f039e5c824636687d0ee67f29bfc80"}], "stats": {"total": 114, "additions": 96, "deletions": 18}, "files": [{"sha": "1fc374b69d4913175f194e08a7fd1b4ee4ec4307", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21c767169b833b6c22f8b1e8550e95ef792b6fd1", "patch": "@@ -1,3 +1,12 @@\n+2014-11-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/63815\n+\t* config/i386/i386.c (ix86_init_large_pic_reg): New.  Extracted\n+\tfrom ...\n+\t(ix86_init_pic_reg): Here.  Use ix86_init_large_pic_reg.\n+\t(x86_output_mi_thunk): Set PIC register to %r11.  Call\n+\tix86_init_large_pic_reg to initialize PIC register.\n+\n 2014-11-12  Kai Tietz  <ktietz@redhat.com>\n \n \t* sdbout.c (sdbout_symbol): Eliminate register only"}, {"sha": "3d7e057e64ac317ceeca7b4150a82769720e9667", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21c767169b833b6c22f8b1e8550e95ef792b6fd1", "patch": "@@ -6195,6 +6195,27 @@ ix86_use_pseudo_pic_reg (void)\n   return true;\n }\n \n+/* Initialize large model PIC register.  */\n+\n+static void\n+ix86_init_large_pic_reg (unsigned int tmp_regno)\n+{\n+  rtx_code_label *label;\n+  rtx tmp_reg;\n+\n+  gcc_assert (Pmode == DImode);\n+  label = gen_label_rtx ();\n+  emit_label (label);\n+  LABEL_PRESERVE_P (label) = 1;\n+  tmp_reg = gen_rtx_REG (Pmode, tmp_regno);\n+  gcc_assert (REGNO (pic_offset_table_rtx) != tmp_regno);\n+  emit_insn (gen_set_rip_rex64 (pic_offset_table_rtx,\n+\t\t\t\tlabel));\n+  emit_insn (gen_set_got_offset_rex64 (tmp_reg, label));\n+  emit_insn (ix86_gen_add3 (pic_offset_table_rtx,\n+\t\t\t    pic_offset_table_rtx, tmp_reg));\n+}\n+\n /* Create and initialize PIC register if required.  */\n static void\n ix86_init_pic_reg (void)\n@@ -6210,22 +6231,7 @@ ix86_init_pic_reg (void)\n   if (TARGET_64BIT)\n     {\n       if (ix86_cmodel == CM_LARGE_PIC)\n-\t{\n-\t  rtx_code_label *label;\n-\t  rtx tmp_reg;\n-\n-\t  gcc_assert (Pmode == DImode);\n-\t  label = gen_label_rtx ();\n-\t  emit_label (label);\n-\t  LABEL_PRESERVE_P (label) = 1;\n-\t  tmp_reg = gen_rtx_REG (Pmode, R11_REG);\n-\t  gcc_assert (REGNO (pic_offset_table_rtx) != REGNO (tmp_reg));\n-\t  emit_insn (gen_set_rip_rex64 (pic_offset_table_rtx,\n-\t\t\t\t\tlabel));\n-\t  emit_insn (gen_set_got_offset_rex64 (tmp_reg, label));\n-\t  emit_insn (ix86_gen_add3 (pic_offset_table_rtx,\n-\t\t\t\t    pic_offset_table_rtx, tmp_reg));\n-\t}\n+\tix86_init_large_pic_reg (R11_REG);\n       else\n \temit_insn (gen_set_got_rex64 (pic_offset_table_rtx));\n     }\n@@ -42686,8 +42692,16 @@ x86_output_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n   else\n     {\n       if (ix86_cmodel == CM_LARGE_PIC && SYMBOLIC_CONST (fnaddr))\n-\tfnaddr = legitimize_pic_address (fnaddr,\n-\t\t\t\t\t gen_rtx_REG (Pmode, tmp_regno));\n+\t{\n+\t  // CM_LARGE_PIC always uses pseudo PIC register which is\n+\t  // uninitialized.  Since FUNCTION is local and calling it\n+\t  // doesn't go through PLT, we use scratch register %r11 as\n+\t  // PIC register and initialize it here.\n+\t  SET_REGNO (pic_offset_table_rtx, R11_REG);\n+\t  ix86_init_large_pic_reg (tmp_regno);\n+\t  fnaddr = legitimize_pic_address (fnaddr,\n+\t\t\t\t\t   gen_rtx_REG (Pmode, tmp_regno));\n+\t}\n \n       if (!sibcall_insn_operand (fnaddr, word_mode))\n \t{"}, {"sha": "93889d4d065b86907c943b8a4a66c508ee36fa8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21c767169b833b6c22f8b1e8550e95ef792b6fd1", "patch": "@@ -1,3 +1,8 @@\n+2014-11-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/63815\n+\t* g++.dg/other/pr63815.C: New test.\n+\n 2014-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 1510"}, {"sha": "fce6226bb71d31b83a3967e8b3d572533b2a96a2", "filename": "gcc/testsuite/g++.dg/other/pr63815.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr63815.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c767169b833b6c22f8b1e8550e95ef792b6fd1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr63815.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr63815.C?ref=21c767169b833b6c22f8b1e8550e95ef792b6fd1", "patch": "@@ -0,0 +1,50 @@\n+// PR target/63815\n+// { dg-do run { target { { i?86-*-linux* x86_64-*-linux* } && lp64 } } }\n+// { dg-options \"-mcmodel=large\" }\n+// { dg-additional-options \"-fpic\" { target fpic } }\n+\n+struct ICCStringClass\n+{\n+  virtual int CreateString (int) = 0;\n+};\n+\n+struct AGSCCDynamicObject\n+{\n+  virtual void Unserialize () = 0;\n+};\n+\n+struct ScriptString:AGSCCDynamicObject, ICCStringClass\n+{\n+  virtual int CreateString (int);\n+  virtual void Unserialize ();\n+};\n+\n+int\n+__attribute__ ((noinline))\n+CreateNewScriptString (int fromText, bool reAllocate = true)\n+{\n+  return fromText;\n+}\n+\n+int\n+__attribute__ ((noinline))\n+ScriptString::CreateString (int fromText)\n+{\n+  return CreateNewScriptString (fromText);\n+}\n+\n+void\n+__attribute__ ((noinline))\n+ScriptString::Unserialize ()\n+{\n+}\n+\n+int\n+main ()\n+{\n+  ICCStringClass *x = new ScriptString;\n+\n+  if (x->CreateString (1) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}