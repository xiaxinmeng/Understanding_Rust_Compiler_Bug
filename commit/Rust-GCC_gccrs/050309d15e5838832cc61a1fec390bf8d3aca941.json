{"sha": "050309d15e5838832cc61a1fec390bf8d3aca941", "node_id": "C_kwDOANBUbNoAKDA1MDMwOWQxNWU1ODM4ODMyY2M2MWExZmVjMzkwYmY4ZDNhY2E5NDE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:47Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-08-30T14:43:47Z"}, "message": "Add base hash traits for vectors\n\nThis patch adds a class that provides basic hash/equal functions\nfor vectors, based on corresponding traits for the element type.\n\ngcc/\n\t* hash-traits.h (vec_hash_base): New class.\n\t(vec_free_hash_base): Likewise.", "tree": {"sha": "29df470d09f88a915d56a1848ac25db856fcf978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29df470d09f88a915d56a1848ac25db856fcf978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/050309d15e5838832cc61a1fec390bf8d3aca941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050309d15e5838832cc61a1fec390bf8d3aca941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050309d15e5838832cc61a1fec390bf8d3aca941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050309d15e5838832cc61a1fec390bf8d3aca941/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6952abc8ceff1a25b78506315959240cb73d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6952abc8ceff1a25b78506315959240cb73d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6952abc8ceff1a25b78506315959240cb73d41"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "f5d12706324cc62d4d5077f8291dff3f5fdb0109", "filename": "gcc/hash-traits.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050309d15e5838832cc61a1fec390bf8d3aca941/gcc%2Fhash-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050309d15e5838832cc61a1fec390bf8d3aca941/gcc%2Fhash-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-traits.h?ref=050309d15e5838832cc61a1fec390bf8d3aca941", "patch": "@@ -408,6 +408,61 @@ pair_hash <T1, T2>::is_empty (const value_type &x)\n   return T1::is_empty (x.first);\n }\n \n+/* Base traits for vectors, providing just the hash and comparison\n+   functionality.  Type gives the corresponding traits for the element\n+   type.  */\n+\n+template <typename Type>\n+struct vec_hash_base\n+{\n+  typedef vec<typename Type::value_type> value_type;\n+  typedef vec<typename Type::compare_type> compare_type;\n+\n+  static inline hashval_t hash (value_type);\n+  static inline bool equal (value_type, compare_type);\n+};\n+\n+template <typename Type>\n+inline hashval_t\n+vec_hash_base <Type>::hash (value_type x)\n+{\n+  inchash::hash hstate;\n+  hstate.add_int (x.length ());\n+  for (auto &value : x)\n+    hstate.merge_hash (Type::hash (value));\n+  return hstate.end ();\n+}\n+\n+template <typename Type>\n+inline bool\n+vec_hash_base <Type>::equal (value_type x, compare_type y)\n+{\n+  if (x.length () != y.length ())\n+    return false;\n+  for (unsigned int i = 0; i < x.length (); ++i)\n+    if (!Type::equal (x[i], y[i]))\n+      return false;\n+  return true;\n+}\n+\n+/* Traits for vectors whose contents should be freed normally.  */\n+\n+template <typename Type>\n+struct vec_free_hash_base : vec_hash_base <Type>\n+{\n+  static void remove (typename vec_hash_base <Type>::value_type &);\n+};\n+\n+template <typename Type>\n+void\n+vec_free_hash_base <Type>\n+::remove (typename vec_hash_base <Type>::value_type &x)\n+{\n+  for (auto &value : x)\n+    Type::remove (x);\n+  x.release ();\n+}\n+\n template <typename T> struct default_hash_traits : T {};\n \n template <typename T>"}]}