{"sha": "d723bb7c757e0d7d94df7b059f52ad50a2175c50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyM2JiN2M3NTdlMGQ3ZDk0ZGY3YjA1OWY1MmFkNTBhMjE3NWM1MA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-26T21:21:58Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-10-26T21:21:58Z"}, "message": "In cp/error.c...\n\nIn cp/error.c, I separate the initialization of the diagnostic context\nfrom the initialization of the scratch pretty-printer (cxx_pp).  This\nwas suggested by Gabriel in the last review of the patch and now I\nrealize it was a good idea. Now cxx_initialize_diagnostics is the\nequivalent version of c_initialize_diagnostics.  To avoid having to\nmake extern a bunch of functions, I moved it from cp-objcp-common.c to\nerror.c.\n\nI moved the setting of diagnostic_format_decoder (global_dc) =\nc_tree_printer, from c_objc_common_init to c_initialize_diagnostics,\nand right after c_common_diagnostics_set_defaults.  This\nmimics what is done in cxx_initialize_diagnostics.\n\nMoreover, in both c_initialize_diagnostics and\ncxx_initialize_diagnostics, the FE-specific pretty-printer is\ninitialized first and then other settings are applied. This does not\nmake a difference right now, but if in the future one wishes to touch\nsomething in the pretty-printer, it will not get overriden\nimmediately.\n\nIn fact, the code I removed in c_common_initialize_diagnostics, which\nsets line_cutoff to 80, is useless because the pretty-printer created\nhere is actually never used, but overriden by the FE-specific\npretty-printers. This also means that doc/invoke.texi was wrong.\n\nFinally, it is useless to set the maximum line length to 0 in the\nconstructor of cxx_pretty_printer.  It is the default anyway.\n\ngcc/c/ChangeLog:\n\n2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/53061\n\t* c-objc-common.c (c_objc_common_init): Do not do diagnostics\n\tinitialization here...\n\t(c_initialize_diagnostics): ... but here. Set defaults after\n\tbuilding pretty-printer.\n\ngcc/ChangeLog:\n\n2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/53061\n\t* doc/invoke.texi (fmessage-length): Update text to match reality.\n\ngcc/cp/ChangeLog:\n\n2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/53061\n\t* cp-objcp-common.c: Do not include new.\n\t(cxx_initialize_diagnostics): Move from here to ...\n\t* error.c (cxx_initialize_diagnostics): : ... here. Move\n\tdiagnostics initialization here from init_error.\n\t(cxx_pp): Use a real pointer not a macro.\n\t(init_error): Just initialize cxx_pp.\n\t* cxx-pretty-print.c (cxx_pretty_printer::cxx_pretty_printer): Do\n\tnot set maximum line length.\n\ngcc/c-family/ChangeLog:\n\n2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/53061\n\t* c-opts.c (c_common_diagnostics_set_defaults): Renamed from\n\tc_common_initialize_diagnostics.\n\t* c-common.h: Likewise.\n\nFrom-SVN: r216720", "tree": {"sha": "37cbb1525929f4ecbfc1d14e764c60d380839efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37cbb1525929f4ecbfc1d14e764c60d380839efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d723bb7c757e0d7d94df7b059f52ad50a2175c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d723bb7c757e0d7d94df7b059f52ad50a2175c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d723bb7c757e0d7d94df7b059f52ad50a2175c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d723bb7c757e0d7d94df7b059f52ad50a2175c50/comments", "author": null, "committer": null, "parents": [{"sha": "23487675cd29d1702f44c9bc60885c1602a401f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23487675cd29d1702f44c9bc60885c1602a401f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23487675cd29d1702f44c9bc60885c1602a401f1"}], "stats": {"total": 133, "additions": 76, "deletions": 57}, "files": [{"sha": "cfcba31de956a8a009aeb4210cd9e9754ef95795", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -1,3 +1,8 @@\n+2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/53061\n+\t* doc/invoke.texi (fmessage-length): Update text to match reality.\n+\n 2014-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/microblaze/microblaze.c: Include rtl-iter.h."}, {"sha": "9735625eee1618fb0af5407b86188be4d80363aa", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -1,3 +1,10 @@\n+2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/53061\n+\t* c-opts.c (c_common_diagnostics_set_defaults): Renamed from\n+\tc_common_initialize_diagnostics.\n+\t* c-common.h: Likewise.\n+\n 2014-10-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/56980"}, {"sha": "dcd52fb010c22bfad4191b04b58e134d1969f479", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -845,7 +845,7 @@ extern tree build_va_arg (location_t, tree, tree);\n \n extern const unsigned int c_family_lang_mask;\n extern unsigned int c_common_option_lang_mask (void);\n-extern void c_common_initialize_diagnostics (diagnostic_context *);\n+extern void c_common_diagnostics_set_defaults (diagnostic_context *);\n extern bool c_common_complain_wrong_lang_p (const struct cl_option *);\n extern void c_common_init_options_struct (struct gcc_options *);\n extern void c_common_init_options (unsigned int, struct cl_decoded_option *);"}, {"sha": "000fdd2bd523ded0aa2732e56afad20b9f576bfe", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -178,21 +178,10 @@ c_diagnostic_finalizer (diagnostic_context *context,\n   pp_newline_and_flush (context->printer);\n }\n \n-/* Common diagnostics initialization.  */\n+/* Common default settings for diagnostics.  */\n void\n-c_common_initialize_diagnostics (diagnostic_context *context)\n+c_common_diagnostics_set_defaults (diagnostic_context *context)\n {\n-  /* This is conditionalized only because that is the way the front\n-     ends used to do it.  Maybe this should be unconditional?  */\n-  if (c_dialect_cxx ())\n-    {\n-      /* By default wrap lines at 80 characters.  Is getenv\n-\t (\"COLUMNS\") preferable?  */\n-      diagnostic_line_cutoff (context) = 80;\n-      /* By default, emit location information once for every\n-\t diagnostic message.  */\n-      diagnostic_prefixing_rule (context) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n-    }\n   diagnostic_finalizer (context) = c_diagnostic_finalizer;\n   context->opt_permissive = OPT_fpermissive;\n }"}, {"sha": "35d9ceed23bac48de66e03368f4f92fe4091e028", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -1,3 +1,11 @@\n+2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/53061\n+\t* c-objc-common.c (c_objc_common_init): Do not do diagnostics\n+\tinitialization here...\n+\t(c_initialize_diagnostics): ... but here. Set defaults after\n+\tbuilding pretty-printer.\n+\n 2014-10-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/63626"}, {"sha": "12db5487894598c0d769f75dd9b0575a8c6c91fb", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -62,15 +62,7 @@ c_objc_common_init (void)\n {\n   c_init_decl_processing ();\n \n-  if (c_common_init () == false)\n-    return false;\n-\n-  /* These were not defined in the Objective-C front end, but I'm\n-     putting them here anyway.  The diagnostic format decoder might\n-     want an enhanced ObjC implementation.  */\n-  diagnostic_format_decoder (global_dc) = &c_tree_printer;\n-\n-  return true;\n+  return c_common_init ();\n }\n \n /* Called during diagnostic message formatting process to print a\n@@ -186,15 +178,16 @@ has_c_linkage (const_tree decl ATTRIBUTE_UNUSED)\n void\n c_initialize_diagnostics (diagnostic_context *context)\n {\n-  c_common_initialize_diagnostics (context);\n-\n   pretty_printer *base = context->printer;\n   c_pretty_printer *pp = XNEW (c_pretty_printer);\n   context->printer = new (pp) c_pretty_printer ();\n \n   /* It is safe to free this object because it was previously XNEW()'d.  */\n   base->~pretty_printer ();\n   XDELETE (base);\n+\n+  c_common_diagnostics_set_defaults (context);\n+  diagnostic_format_decoder (context) = &c_tree_printer;\n }\n \n int"}, {"sha": "e105edca01e6c1c63830c304fa19b048f30fad15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -1,3 +1,15 @@\n+2014-10-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/53061\n+\t* cp-objcp-common.c: Do not include new.\n+\t(cxx_initialize_diagnostics): Move from here to ...\n+\t* error.c (cxx_initialize_diagnostics): : ... here. Move\n+\tdiagnostics initialization here from init_error.\n+\t(cxx_pp): Use a real pointer not a macro.\n+\t(init_error): Just initialize cxx_pp.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::cxx_pretty_printer): Do\n+\tnot set maximum line length.\n+\n 2014-10-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/63619"}, {"sha": "12df4c2667f920e475be7e2380838eba505c8443", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -32,8 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cxx-pretty-print.h\"\n #include \"cp-objcp-common.h\"\n \n-#include <new>                       // For placement new.\n-\n /* Special routine to get the alias set for C++.  */\n \n alias_set_type\n@@ -132,22 +130,6 @@ cp_var_mod_type_p (tree type, tree fn)\n   return false;\n }\n \n-/* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed\n-   that CONTEXT->printer is an already constructed basic pretty_printer.  */\n-void\n-cxx_initialize_diagnostics (diagnostic_context *context)\n-{\n-  c_common_initialize_diagnostics (context);\n-\n-  pretty_printer *base = context->printer;\n-  cxx_pretty_printer *pp = XNEW (cxx_pretty_printer);\n-  context->printer = new (pp) cxx_pretty_printer ();\n-\n-  /* It is safe to free this object because it was previously XNEW()'d.  */\n-  base->~pretty_printer ();\n-  XDELETE (base);\n-}\n-\n /* This compares two types for equivalence (\"compatible\" in C-based languages).\n    This routine should only return 1 if it is sure.  It should not be used\n    in contexts where erroneously returning 0 causes problems.  */"}, {"sha": "02ce34611b31c982c2ed70908044fbbd45a2ea42", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -2433,8 +2433,6 @@ cxx_pretty_printer::cxx_pretty_printer ()\n   : c_pretty_printer (),\n     enclosing_scope (global_namespace)\n {\n-  pp_set_line_maximum_length (this, 0);\n-\n   type_specifier_seq = (pp_fun) pp_cxx_type_specifier_seq;\n   parameter_list = (pp_fun) pp_cxx_parameter_declaration_clause;\n }"}, {"sha": "755bb00f71bdaecd818117f49043cf5109529f57", "filename": "gcc/cp/error.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -39,11 +39,13 @@ along with GCC; see the file COPYING3.  If not see\n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n #define pp_separate_with_semicolon(PP) pp_cxx_separate_with (PP, ';')\n \n-/* The global buffer where we dump everything.  It is there only for\n-   transitional purpose.  It is expected, in the near future, to be\n-   completely removed.  */\n+/* cxx_pp is a C++ front-end-specific pretty printer: this is where we\n+   dump C++ ASTs as strings. It is mostly used only by the various\n+   tree -> string functions that are occasionally called from the\n+   debugger or by the front-end for things like\n+   __PRETTY_FUNCTION__.  */\n static cxx_pretty_printer scratch_pretty_printer;\n-#define cxx_pp (&scratch_pretty_printer)\n+static cxx_pretty_printer * cxx_pp = &scratch_pretty_printer;\n \n /* Translate if being used for diagnostics, but not for dump files or\n    __PRETTY_FUNCTION.  */\n@@ -104,13 +106,37 @@ static void cp_print_error_function (diagnostic_context *, diagnostic_info *);\n static bool cp_printer (pretty_printer *, text_info *, const char *,\n \t\t\tint, bool, bool, bool);\n \n+/* CONTEXT->printer is a basic pretty printer that was constructed\n+   presumably by diagnostic_initialize(), called early in the\n+   compiler's initialization process (in general_init) Before the FE\n+   is initialized.  This (C++) FE-specific diagnostic initializer is\n+   thus replacing the basic pretty printer with one that has C++-aware\n+   capacities.  */\n+\n void\n-init_error (void)\n+cxx_initialize_diagnostics (diagnostic_context *context)\n {\n-  diagnostic_starter (global_dc) = cp_diagnostic_starter;\n+  pretty_printer *base = context->printer;\n+  cxx_pretty_printer *pp = XNEW (cxx_pretty_printer);\n+  context->printer = new (pp) cxx_pretty_printer ();\n+\n+  /* It is safe to free this object because it was previously XNEW()'d.  */\n+  base->~pretty_printer ();\n+  XDELETE (base);\n+\n+  c_common_diagnostics_set_defaults (context);\n+  diagnostic_starter (context) = cp_diagnostic_starter;\n   /* diagnostic_finalizer is already c_diagnostic_finalizer.  */\n-  diagnostic_format_decoder (global_dc) = cp_printer;\n+  diagnostic_format_decoder (context) = cp_printer;\n+}\n \n+/* Initialize the global cxx_pp that is used as the memory store for\n+   the string representation of C++ AST.  See the description of\n+   cxx_pp above.  */\n+\n+void\n+init_error (void)\n+{\n   new (cxx_pp) cxx_pretty_printer ();\n }\n "}, {"sha": "9f21c9623a9348777c6c7b9d8f2a7e506dd841c9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723bb7c757e0d7d94df7b059f52ad50a2175c50/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d723bb7c757e0d7d94df7b059f52ad50a2175c50", "patch": "@@ -3078,11 +3078,10 @@ honor these options.\n @table @gcctabopt\n @item -fmessage-length=@var{n}\n @opindex fmessage-length\n-Try to format error messages so that they fit on lines of about @var{n}\n-characters.  The default is 72 characters for @command{g++} and 0 for the rest of\n-the front ends supported by GCC@.  If @var{n} is zero, then no\n-line-wrapping is done; each error message appears on a single\n-line.\n+Try to format error messages so that they fit on lines of about\n+@var{n} characters.  If @var{n} is zero, then no line-wrapping will be\n+done; each error message will appear on a single line.  This is the\n+default for all front ends.\n \n @item -fdiagnostics-show-location=once\n @opindex fdiagnostics-show-location"}]}