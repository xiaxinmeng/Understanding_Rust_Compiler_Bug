{"sha": "c3d3862950f5708af0db77c76b5db4db5e65740c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkMzg2Mjk1MGY1NzA4YWYwZGI3N2M3NmI1ZGI0ZGI1ZTY1NzQwYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-07-26T11:53:17Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-07-26T11:53:17Z"}, "message": "re PR middle-end/70992 (Infinite recursion between fold_build2_stat_loc and fold_binary_loc w/ -fwrapv)\n\n\tPR middle-end/70992\n\t* tree.c (build2_stat): Don't set TREE_CONSTANT on divisions by zero.\n\n\t* gcc.dg/overflow-warn-1.c: Adjust dg-error.\n\t* gcc.dg/overflow-warn-2.c: Likewise.\n\t* gcc.dg/overflow-warn-3.c: Likewise.\n\t* gcc.dg/overflow-warn-4.c: Likewise.\n\t* gcc.dg/torture/pr70992-2.c: New test.\n\t* gcc.dg/torture/pr70992.c: New test.\n\nFrom-SVN: r250566", "tree": {"sha": "fe268f2ec60db1f3c633b92b4a7228e889a09c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe268f2ec60db1f3c633b92b4a7228e889a09c9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3d3862950f5708af0db77c76b5db4db5e65740c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d3862950f5708af0db77c76b5db4db5e65740c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d3862950f5708af0db77c76b5db4db5e65740c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d3862950f5708af0db77c76b5db4db5e65740c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f450a2b1022124194097e39b3b1caca1d5dc2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f450a2b1022124194097e39b3b1caca1d5dc2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f450a2b1022124194097e39b3b1caca1d5dc2bc"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "fa34e4974c16b1a66c98b373766685bb59fc34d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/70992\n+\t* tree.c (build2_stat): Don't set TREE_CONSTANT on divisions by zero.\n+\n 2017-07-26  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-match-head.c (do_valueize): Return OP if valueize"}, {"sha": "b311c6a504d365a42585292637aeb7f0ea621c7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -1,3 +1,13 @@\n+2017-07-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/70992\n+\t* gcc.dg/overflow-warn-1.c: Adjust dg-error.\n+\t* gcc.dg/overflow-warn-2.c: Likewise.\n+\t* gcc.dg/overflow-warn-3.c: Likewise.\n+\t* gcc.dg/overflow-warn-4.c: Likewise.\n+\t* gcc.dg/torture/pr70992-2.c: New test.\n+\t* gcc.dg/torture/pr70992.c: New test.\n+\n 2017-07-26  Richard Biener  <rguenther@suse.de>\n \n \t* gcc/testsuite/gcc.dg/pr70920-2.c: Adjust for transform already"}, {"sha": "a5cd5738636c7ae4d422da0274a1dfa33eff2bce", "filename": "gcc/testsuite/gcc.dg/overflow-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-1.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -49,7 +49,7 @@ static int sc = INT_MAX + 1; /* { dg-warning \"25:integer overflow in expression\"\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } .-1 } */\n+/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "05ab104fa4a2c990ac2ab095e5cade4c6cc89b3c", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -49,7 +49,7 @@ static int sc = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" }\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-1 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } .-1 } */\n+/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "fd4a34f67e21087ee0b04839412848dc2c8a1ff1", "filename": "gcc/testsuite/gcc.dg/overflow-warn-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-3.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -55,7 +55,7 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } .-1 } */\n+/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-warning \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "018e3e1e4cd2a34dbaff80d966f7e1a3c0d9aa1c", "filename": "gcc/testsuite/gcc.dg/overflow-warn-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-4.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -55,7 +55,7 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"initializer element is not computable at load time\" \"constant\" { target *-*-* } .-1 } */\n+/* { dg-error \"initializer element is not constant\" \"constant\" { target *-*-* } .-1 } */\n /* { dg-error \"initialization makes pointer from integer without a cast\" \"null\" { target *-*-* } .-2 } */\n void *r = (1 ? 0 : INT_MAX+1);\n "}, {"sha": "c5d2c5f26832c49a340e62a1ff981bd062c4b028", "filename": "gcc/testsuite/gcc.dg/torture/pr70992-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992-2.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/70992 */\n+/* { dg-do compile } */\n+\n+unsigned int *od;\n+int\n+fn (void)\n+{\n+  return (0 % 0 + 1) * *od * 2; /* { dg-warning \"division by zero\" } */\n+}"}, {"sha": "56728e09d1b5f0042c7a3d12b50e64761a765ebc", "filename": "gcc/testsuite/gcc.dg/torture/pr70992.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70992.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/70992 */\n+/* { dg-do compile } */\n+\n+typedef unsigned int uint32_t;\n+typedef int int32_t;\n+\n+uint32_t\n+fn (uint32_t so)\n+{\n+  return (so + so) * (0x80000000 / 0 + 1); /* { dg-warning \"division by zero\" } */\n+}\n+\n+uint32_t\n+fn5 (uint32_t so)\n+{\n+  return (0x80000000 / 0 + 1) * (so + so); /* { dg-warning \"division by zero\" } */\n+}\n+\n+uint32_t\n+fn6 (uint32_t so)\n+{\n+  return (0x80000000 / 0 - 1) * (so + so); /* { dg-warning \"division by zero\" } */\n+}\n+\n+uint32_t\n+fn2 (uint32_t so)\n+{\n+  return (so + so) * (0x80000000 / 0 - 1); /* { dg-warning \"division by zero\" } */\n+}\n+\n+int32_t\n+fn3 (int32_t so)\n+{\n+  return (so + so) * (0x80000000 / 0 + 1); /* { dg-warning \"division by zero\" } */\n+}\n+\n+int32_t\n+fn4 (int32_t so)\n+{\n+  return (so + so) * (0x80000000 / 0 - 1); /* { dg-warning \"division by zero\" } */\n+}"}, {"sha": "48fb2ce0651bbd2a0b39d12f24fed8a68c1ad2b3", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d3862950f5708af0db77c76b5db4db5e65740c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c3d3862950f5708af0db77c76b5db4db5e65740c", "patch": "@@ -4456,7 +4456,7 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n tree\n build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n {\n-  bool constant, read_only, side_effects;\n+  bool constant, read_only, side_effects, div_by_zero;\n   tree t;\n \n   gcc_assert (TREE_CODE_LENGTH (code) == 2);\n@@ -4489,6 +4489,23 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n   read_only = 1;\n   side_effects = TREE_SIDE_EFFECTS (t);\n \n+  switch (code)\n+    {\n+    case TRUNC_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case ROUND_DIV_EXPR:\n+    case EXACT_DIV_EXPR:\n+    case CEIL_MOD_EXPR:\n+    case FLOOR_MOD_EXPR:\n+    case ROUND_MOD_EXPR:\n+    case TRUNC_MOD_EXPR:\n+      div_by_zero = integer_zerop (arg1);\n+      break;\n+    default:\n+      div_by_zero = false;\n+    }\n+\n   PROCESS_ARG (0);\n   PROCESS_ARG (1);\n \n@@ -4505,7 +4522,8 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n   else\n     {\n       TREE_READONLY (t) = read_only;\n-      TREE_CONSTANT (t) = constant;\n+      /* Don't mark X / 0 as constant.  */\n+      TREE_CONSTANT (t) = constant && !div_by_zero;\n       TREE_THIS_VOLATILE (t)\n \t= (TREE_CODE_CLASS (code) == tcc_reference\n \t   && arg0 && TREE_THIS_VOLATILE (arg0));"}]}