{"sha": "60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkMjc5MDdjYzJjZmIyMzNjZWI1ZTc2YmJhM2VkODJhYjliMjFjNw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-02-04T11:05:46Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-02-04T11:05:46Z"}, "message": "aarch64.c (aarch64_legitimize_address): Force register scaling out of memory reference and comment why.\n\n\n\t* config/aarch64/aarch64.c (aarch64_legitimize_address): Force\n\tregister scaling out of memory reference and comment why.\n\nFrom-SVN: r233136", "tree": {"sha": "f81634e0302002f0c46f5c3be9d14d6b0028305b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81634e0302002f0c46f5c3be9d14d6b0028305b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7/comments", "author": null, "committer": null, "parents": [{"sha": "d1243d278cb5f6af0b17c94ed48b9e40a5a92639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1243d278cb5f6af0b17c94ed48b9e40a5a92639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1243d278cb5f6af0b17c94ed48b9e40a5a92639"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "7646774c05c57c2ab988079c4d396b041b6e25e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "patch": "@@ -1,3 +1,8 @@\n+2016-02-04  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_legitimize_address): Force\n+\tregister scaling out of memory reference and comment why.\n+\n 2016-02-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/65932"}, {"sha": "7ab5ec85705d3f373cfc6ac9fae1d25c53e303c9", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=60d27907cc2cfb233ceb5e76bba3ed82ab9b21c7", "patch": "@@ -4988,13 +4988,18 @@ aarch64_legitimize_address (rtx x, rtx /* orig_x  */, machine_mode mode)\n \t       Rt = Ra + Rc;\n \t       addr = Rt + Rb<<SCALE.\n \n-\t     Here we split CONST out of memory referece because:\n+\t     TODO: We really should split CONST out of memory referece\n+\t     because:\n \t       a) We depend on GIMPLE optimizers to pick up common sub\n \t\t  expression involving the scaling operation.\n \t       b) The index Rb is likely a loop iv, it's better to split\n \t\t  the CONST so that computation of new base Rt is a loop\n \t\t  invariant and can be moved out of loop.  This is more\n-\t\t  important when the original base Ra is sfp related.  */\n+\t\t  important when the original base Ra is sfp related.\n+\n+\t     Unfortunately, GIMPLE optimizers (e.g., SLSR) can not handle\n+\t     this kind of CSE opportunity at the time of this change, we\n+\t     have to force register scaling expr out of memory ref now.  */\n \t  else if (REG_P (op0) || REG_P (op1))\n \t    {\n \t      machine_mode addr_mode = GET_MODE (x);\n@@ -5004,14 +5009,13 @@ aarch64_legitimize_address (rtx x, rtx /* orig_x  */, machine_mode mode)\n \t      if (REG_P (op1))\n \t\tstd::swap (op0, op1);\n \n-\t      rtx addr = gen_rtx_PLUS (addr_mode, op1, base);\n+\t      rtx addr = plus_constant (addr_mode, base, offset);\n \n \t      if (aarch64_legitimate_address_hook_p (mode, addr, false))\n \t\t{\n-\t\t  base = force_operand (plus_constant (addr_mode,\n-\t\t\t\t\t\t       op0, offset),\n+\t\t  base = force_operand (gen_rtx_PLUS (addr_mode, op1, op0),\n \t\t\t\t\tNULL_RTX);\n-\t\t  return gen_rtx_PLUS (addr_mode, op1, base);\n+\t\t  return plus_constant (addr_mode, base, offset);\n \t\t}\n \t    }\n \t}"}]}