{"sha": "dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJkYmQ5ODJkZjJkMDQ0ZjNiNDNiMmY0MWVmMWFkYTU2NjcxNjBmOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-01-31T18:36:02Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-01-31T18:36:02Z"}, "message": "lib1funcs.S: Add support for e3v5 architecture variant.\n\n\t* config/v850/lib1funcs.S: Add support for e3v5 architecture\n\tvariant.\n\n\t* config/v850/constraints.md (Q): Define as a memory constraint.\n\t* config/v850/predicates.md (label_ref_operand): New predicate.\n\t(e3v5_shift_operand): New predicate.\n\t(ior_operator): New predicate.\n\t* config/v850/t-v850: Add e3v5 multilib.\n\t* config/v850/v850-protos.h (v850_adjust_insn_length): Prototype.\n\t(v850_gen_movdi): Prototype.\n\t* config/v850/v850.c: Add support for e3v5 architecture.\n\tRename all uses of TARGET_V850E || TARGET_V850E2_ALL to\n\tTARGET_V850E_UP.\n\t(construct_save_jarl): Add e3v5 long JARL support.\n\t(v850_adjust_insn_length): New function.  Adjust length of call\n\tinsns when using e3v5 instructions.\n\t(v850_gen_movdi): New function: Generate instructions to move a\n\tDImode value.\n\t* config/v850/v850.h (TARGET_CPU_v850e3v5): Define.\n\t(CPP_SPEC): Define __v850e3v5__ as appropriate.\n\t(TARGET_USE_FPU): Enable for e3v5.\n\t(CONST_OK_FOR_W): New macro.\n\t(ADJUST_INSN_LENGTH): Define.\n\t* config/v850/v850.md (UNSPEC_LOOP): Define.\n\t(attr cpu): Add v850e3v5.\n\tRename all uses of TARGET_V850E2 to TARGET_V850E2V3_UP.\n\t(movdi): New pattern.\n\t(movdi_internal): New pattern.\n\t(cbranchsf4): Conditionalize on TARGET_USE_FPU.\n\t(cbranchdf4): Conditionalize on TARGET_USE_FPU.\n\t(cstoresf4): Likewise.\n\t(cstoredf4): Likewise.\n\t(insv): New pattern.\n\t(rotlso3_a): New pattern.\n\t(rotlsi3_b): New pattern\n\t(rotlsi3_v850e3v5): New pattern.\n\t(doloop_begin): New pattern.\n\t(fix_loop_counter): New pattern.\n\t(doloop_end): New pattern.\n\t(branch_normal): Add e3v5 long branch support.\n\t(branch_invert): Likewise.\n\t(branch_z_normal): Likewise.\n\t(branch_z_invert): Likewise.\n\t(branch_nz_normal): Likewise.\n\t(branch_nz_invert): Likewise.\n\t(call_internal_short): Add e3v5 register-indirect JARL support.\n\t(call_internal_long): Likewise.\n\t(call_value_internal_short): Likewise.\n\t(call_value_internal_long): Likewise.\n\t* config/v850/v850.opt (mv850e3v5, mv850e2v4): New options.\n\t(mloop): New option.\n\t* config.gcc: Add support for configuring v840e3v5 target.\n\t* doc/invoke.texi: Document new v850 specific command line\n\toptions.\n\nFrom-SVN: r195623", "tree": {"sha": "74fc8090f85709b8d53297f1a682f42daa03d155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74fc8090f85709b8d53297f1a682f42daa03d155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/comments", "author": null, "committer": null, "parents": [{"sha": "73861a4142c04fdeb77b72f8c534e2e967a69bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73861a4142c04fdeb77b72f8c534e2e967a69bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73861a4142c04fdeb77b72f8c534e2e967a69bae"}], "stats": {"total": 852, "additions": 698, "deletions": 154}, "files": [{"sha": "341e9aa434bbb97651eaae187fbc79696eaa7199", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -1,3 +1,58 @@\n+2013-01-31  Hiroyuki Ono  <hiroyuki.ono.jc@renesas.com>\n+\t    Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/constraints.md (Q): Define as a memory constraint.\n+\t* config/v850/predicates.md (label_ref_operand): New predicate.\n+\t(e3v5_shift_operand): New predicate.\n+\t(ior_operator): New predicate.\n+\t* config/v850/t-v850: Add e3v5 multilib.\n+\t* config/v850/v850-protos.h (v850_adjust_insn_length): Prototype.\n+\t(v850_gen_movdi): Prototype.\n+\t* config/v850/v850.c: Add support for e3v5 architecture.\n+\tRename all uses of TARGET_V850E || TARGET_V850E2_ALL to\n+\tTARGET_V850E_UP.\n+\t(construct_save_jarl): Add e3v5 long JARL support.\n+\t(v850_adjust_insn_length): New function.  Adjust length of call\n+\tinsns when using e3v5 instructions.\n+\t(v850_gen_movdi): New function: Generate instructions to move a\n+\tDImode value.\n+\t* config/v850/v850.h (TARGET_CPU_v850e3v5): Define.\n+\t(CPP_SPEC): Define __v850e3v5__ as appropriate.\n+\t(TARGET_USE_FPU): Enable for e3v5.\n+\t(CONST_OK_FOR_W): New macro.\n+\t(ADJUST_INSN_LENGTH): Define.\n+\t* config/v850/v850.md (UNSPEC_LOOP): Define.\n+\t(attr cpu): Add v850e3v5.\n+\tRename all uses of TARGET_V850E2 to TARGET_V850E2V3_UP.\n+\t(movdi): New pattern.\n+\t(movdi_internal): New pattern.\n+\t(cbranchsf4): Conditionalize on TARGET_USE_FPU.\n+\t(cbranchdf4): Conditionalize on TARGET_USE_FPU.\n+\t(cstoresf4): Likewise.\n+\t(cstoredf4): Likewise.\n+\t(insv): New pattern.\n+\t(rotlso3_a): New pattern.\n+\t(rotlsi3_b): New pattern\n+\t(rotlsi3_v850e3v5): New pattern.\n+\t(doloop_begin): New pattern.\n+\t(fix_loop_counter): New pattern.\n+\t(doloop_end): New pattern.\n+\t(branch_normal): Add e3v5 long branch support.\n+\t(branch_invert): Likewise.\n+\t(branch_z_normal): Likewise.\n+\t(branch_z_invert): Likewise.\n+\t(branch_nz_normal): Likewise.\n+\t(branch_nz_invert): Likewise.\n+\t(call_internal_short): Add e3v5 register-indirect JARL support.\n+\t(call_internal_long): Likewise.\n+\t(call_value_internal_short): Likewise.\n+\t(call_value_internal_long): Likewise.\n+\t* config/v850/v850.opt (mv850e3v5, mv850e2v4): New options.\n+\t(mloop): New option.\n+\t* config.gcc: Add support for configuring v840e3v5 target.\n+\t* doc/invoke.texi: Document new v850 specific command line\n+\toptions.\n+\n 2013-01-31  Paul Koning  <ni1d@arrl.net>\n \n \tPR debug/55059"}, {"sha": "b6a6ad0636debc5a4815861f2f74aacbaf69a03a", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -2554,6 +2554,9 @@ v850-*-rtems*)\n \t;;\n v850*-*-*)\n \tcase ${target} in\n+\tv850e3v5-*-*)\n+\t\ttarget_cpu_default=\"TARGET_CPU_v850e3v5\"\n+\t\t;;\n \tv850e2v3-*-*)\n \t\ttarget_cpu_default=\"TARGET_CPU_v850e2v3\"\n \t\t;;\n@@ -3614,7 +3617,7 @@ case \"${target}\" in\n \tv850*-*-*)\n \t\tsupported_defaults=cpu\n \t\tcase ${with_cpu} in\n-\t\t\"\" | v850e | v850e1 | v850e2 | v850es | v850e2v3)\n+\t\t\"\" | v850e | v850e1 | v850e2 | v850es | v850e2v3 | v850e3v5)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n@@ -3741,7 +3744,7 @@ case ${target} in\n \t\tcase \"x$with_cpu\" in\n \t\tx)\n \t\t\t;;\n-\t\txv850e | xv850e1 | xv850e2 | xv850e2v3)\n+\t\txv850e | xv850e1 | xv850e2 | xv850e2v3 | xv850e3v5)\n \t\t\ttarget_cpu_default2=\"TARGET_CPU_$with_cpu\"\n \t\t\t;;\n \t\txv850es)"}, {"sha": "11a97c9da2c1aa1f7d5dbf04c598836c9ea011aa", "filename": "gcc/config/v850/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fconstraints.md?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -76,7 +76,7 @@\n        (match_test \"0\")))\n \n ;;; Extra constraints.\n-(define_constraint \"Q\"\n+(define_memory_constraint \"Q\"\n   \"A memory address that does not contain a symbol address.\"\n   (and (match_code \"mem\")\n        (match_test \"ep_memory_operand (op, mode, FALSE)\")))"}, {"sha": "10674a9d6332c9a7f03cf2aedf53bd6d244745bd", "filename": "gcc/config/v850/predicates.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fpredicates.md?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -498,6 +498,26 @@\n   return op == CONST0_RTX(mode);\n })\n \n+(define_predicate \"label_ref_operand\"\n+  (match_code \"label_ref\")\n+)\n+\n+\n+(define_predicate \"e3v5_shift_operand\"\n+  (match_code \"const_int,reg\")\n+  {\n+    if (CONST_INT_P (op))\n+      return IN_RANGE (INTVAL (op), 0, 31);\n+    return true;\n+  }\n+)\n+\n+(define_predicate \"ior_operator\"\n+  (match_code \"ior\")\n+{\n+  return (GET_CODE (op) == IOR);\n+})\n+\n ;; Return true if the floating point comparison operation\n ;; given produces a canonical answer.\n (define_predicate \"v850_float_z_comparison_operator\""}, {"sha": "b91b5057d7d52017575af31723ef2c132eb2b3da", "filename": "gcc/config/v850/t-v850", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Ft-v850", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Ft-v850", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Ft-v850?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -20,6 +20,9 @@\n MULTILIB_OPTIONS  = m8byte-align mgcc-abi msoft-float\n MULTILIB_DIRNAMES =  8byte        gcc-abi  soft-float\n \n+MULTILIB_OPTIONS  += mv850e3v5\n+MULTILIB_DIRNAMES +=  v850e3v5\n+\n TCFLAGS = -mno-app-regs -msmall-sld -Wa,-mwarn-signed-overflow -Wa,-mwarn-unsigned-overflow\n \n v850-c.o: $(srcdir)/config/v850/v850-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "be253dd5dbf7a1414e0fdcba73745dcdde448728", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -39,6 +39,8 @@ extern char * construct_restore_jr          (rtx);\n extern char * construct_dispose_instruction (rtx);\n extern char * construct_prepare_instruction (rtx);\n extern int    ep_memory_operand             (rtx, enum machine_mode, int);\n+extern int    v850_adjust_insn_length       (rtx, int);\n+extern const char * v850_gen_movdi          (rtx *);\n extern rtx    v850_gen_compare              (enum rtx_code, enum machine_mode,\n \t\t\t\t\t     rtx, rtx);\n extern enum machine_mode  v850_gen_float_compare (enum rtx_code,"}, {"sha": "67cc2c2671641d42ba0845bb4f5b8ad0a7483150", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 74, "deletions": 12, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -824,7 +824,7 @@ output_move_single (rtx * operands)\n \t    return \"movhi hi0(%1),%.,%0\";\n \n \t  /* A random constant.  */\n-\t  else if (TARGET_V850E || TARGET_V850E2_ALL)\n+\t  else if (TARGET_V850E_UP)\n \t      return \"mov %1,%0\";\n \t  else\n \t    return \"movhi hi(%1),%.,%0\\n\\tmovea lo(%1),%0,%0\";\n@@ -846,7 +846,7 @@ output_move_single (rtx * operands)\n \t    return \"movhi hi0(%F1),%.,%0\";\n \n \t  /* A random constant.  */\n-\telse if (TARGET_V850E || TARGET_V850E2_ALL)\n+\telse if (TARGET_V850E_UP)\n \t      return \"mov %F1,%0\";\n \n \t  else\n@@ -863,7 +863,7 @@ output_move_single (rtx * operands)\n \t       || GET_CODE (src) == SYMBOL_REF\n \t       || GET_CODE (src) == CONST)\n \t{\n-\t  if (TARGET_V850E || TARGET_V850E2_ALL) \n+\t  if (TARGET_V850E_UP) \n \t    return \"mov hilo(%1),%0\";\n \t  else\n \t    return \"movhi hi(%1),%.,%0\\n\\tmovea lo(%1),%0,%0\";\n@@ -1018,7 +1018,7 @@ ep_memory_offset (enum machine_mode mode, int unsignedp ATTRIBUTE_UNUSED)\n     case QImode:\n       if (TARGET_SMALL_SLD)\n \tmax_offset = (1 << 4);\n-      else if ((TARGET_V850E || TARGET_V850E2_ALL)\n+      else if ((TARGET_V850E_UP)\n \t\t&& unsignedp)\n \tmax_offset = (1 << 4);\n       else\n@@ -1028,7 +1028,7 @@ ep_memory_offset (enum machine_mode mode, int unsignedp ATTRIBUTE_UNUSED)\n     case HImode:\n       if (TARGET_SMALL_SLD)\n \tmax_offset = (1 << 5);\n-      else if ((TARGET_V850E || TARGET_V850E2_ALL)\n+      else if ((TARGET_V850E_UP)\n \t\t&& unsignedp)\n \tmax_offset = (1 << 5);\n       else\n@@ -1656,7 +1656,7 @@ expand_prologue (void)\n   /* Save/setup global registers for interrupt functions right now.  */\n   if (interrupt_handler)\n     {\n-      if (! TARGET_DISABLE_CALLT && (TARGET_V850E || TARGET_V850E2_ALL))\n+      if (! TARGET_DISABLE_CALLT && (TARGET_V850E_UP))\n \temit_insn (gen_callt_save_interrupt ());\n       else\n \temit_insn (gen_save_interrupt ());\n@@ -1759,7 +1759,7 @@ expand_prologue (void)\n       /* Special case interrupt functions that save all registers for a call.  */\n       if (interrupt_handler && ((1L << LINK_POINTER_REGNUM) & reg_saved) != 0)\n \t{\n-\t  if (! TARGET_DISABLE_CALLT && (TARGET_V850E || TARGET_V850E2_ALL))\n+\t  if (! TARGET_DISABLE_CALLT && (TARGET_V850E_UP))\n \t    emit_insn (gen_callt_save_all_interrupt ());\n \t  else\n \t    emit_insn (gen_save_all_interrupt ());\n@@ -1967,7 +1967,7 @@ expand_epilogue (void)\n       /* And return or use reti for interrupt handlers.  */\n       if (interrupt_handler)\n         {\n-          if (! TARGET_DISABLE_CALLT && (TARGET_V850E || TARGET_V850E2_ALL))\n+          if (! TARGET_DISABLE_CALLT && (TARGET_V850E_UP))\n             emit_insn (gen_callt_return_interrupt ());\n           else\n             emit_jump_insn (gen_return_interrupt ());\n@@ -2437,8 +2437,11 @@ construct_save_jarl (rtx op)\n       else\n \tsprintf (name, \"__save_%s_%s\", reg_names [first], reg_names [last]);\n       \n-      sprintf (buff, \"movhi hi(%s), r0, r11\\n\\tmovea lo(%s), r11, r11\\n\\tjarl .+4, r10\\n\\tadd 4, r10\\n\\tjmp r11\",\n-\t       name, name);\n+      if (TARGET_V850E3V5_UP)\n+\tsprintf (buff, \"mov hilo(%s), r11\\n\\tjarl [r11], r10\", name);\n+      else\n+\tsprintf (buff, \"movhi hi(%s), r0, r11\\n\\tmovea lo(%s), r11, r11\\n\\tjarl .+4, r10\\n\\tadd 4, r10\\n\\tjmp r11\",\n+\t\t name, name);\n     }\n   else\n     {\n@@ -3048,7 +3051,7 @@ v850_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n static int\n v850_issue_rate (void)\n {\n-  return (TARGET_V850E2_ALL? 2 : 1);\n+  return (TARGET_V850E2_UP ? 2 : 1);\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n@@ -3082,6 +3085,32 @@ v850_memory_move_cost (enum machine_mode mode,\n       return (GET_MODE_SIZE (mode) / 2) * (in ? 3 : 1);\n     }\n }\n+\n+int\n+v850_adjust_insn_length (rtx insn, int length)\n+{\n+  if (TARGET_V850E3V5_UP)\n+    {\n+      if (CALL_P (insn))\n+\t{\n+\t  if (TARGET_LONG_CALLS)\n+\t    {\n+\t      /* call_internal_long, call_value_internal_long.  */\n+\t      if (length == 8)\n+\t\tlength = 4;\n+\t      if (length == 16)\n+\t\tlength = 10;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* call_internal_short, call_value_internal_short.  */\n+\t      if (length == 8)\n+\t\tlength = 4;\n+\t    }\n+\t}\n+    }\n+  return length;\n+}\n \f\n /* V850 specific attributes.  */\n \n@@ -3102,7 +3131,6 @@ static const struct attribute_spec v850_attribute_table[] =\n   { NULL,                0, 0, false, false, false, NULL, false }\n };\n \f\n-\n static void\n v850_option_override (void)\n {\n@@ -3114,6 +3142,40 @@ v850_option_override (void)\n     target_flags |= MASK_DISABLE_CALLT;\n }\n \f\n+const char *\n+v850_gen_movdi (rtx * operands)\n+{\n+  if (REG_P (operands[0]))\n+    {\n+      if (REG_P (operands[1]))\n+\t{\n+\t  if (REGNO (operands[0]) == (REGNO (operands[1]) - 1))\n+\t    return \"mov %1, %0; mov %R1, %R0\";\n+\n+\t  return \"mov %R1, %R0; mov %1, %0\";\n+\t}\n+\n+      if (MEM_P (operands[1]))\n+\t{\n+\t  if (REGNO (operands[0]) & 1)\n+\t    /* Use two load word instructions to synthesise a load double.  */\n+\t    return \"ld.w %1, %0 ; ld.w %R1, %R0\" ;\n+\n+\t  return \"ld.dw %1, %0\";\n+\t}\n+\n+      return \"mov %1, %0; mov %R1, %R0\";\n+    }\n+\n+  gcc_assert (REG_P (operands[1]));\n+\n+  if (REGNO (operands[1]) & 1)\n+    /* Use two store word instructions to synthesise a store double.  */\n+    return \"st.w %1, %0 ; st.w %R1, %R0 \";\n+  \n+  return \"st.dw %1, %0\";\n+}\n+\f\n /* Initialize the GCC target structure.  */\n \n #undef  TARGET_OPTION_OVERRIDE"}, {"sha": "e08c6220eacbe8caa0a917ecf4b4c858b2cf2ba7", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -37,7 +37,7 @@ extern GTY(()) rtx v850_compare_op1;\n #define TARGET_CPU_v850e1\t3\n #define TARGET_CPU_v850e2\t4\n #define TARGET_CPU_v850e2v3\t5\n-\n+#define TARGET_CPU_v850e3v5\t6\n \n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT\tTARGET_CPU_generic\n@@ -86,7 +86,22 @@ extern GTY(()) rtx v850_compare_op1;\n #define SUBTARGET_CPP_SPEC\t\"%{!mv*:-D__v850e2v3__} %{mv850e2v3:-D__v850e2v3__}\"\n #endif\n \n-#define TARGET_V850E2_ALL      (TARGET_V850E2 || TARGET_V850E2V3) \n+#if TARGET_CPU_DEFAULT == TARGET_CPU_v850e3v5\n+#undef  MASK_DEFAULT\n+#define MASK_DEFAULT            MASK_V850E3V5\n+#undef  SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC\t\"%{!mv*:-mv850e3v5}\"\n+#undef  SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC\t\"%{!mv*:-D__v850e3v5__} %{mv850e3v5:-D__v850e3v5__}\"\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION\t\tfprintf (stderr, \" (Renesas V850E3V5)\");\n+#endif\n+\n+#define TARGET_V850E3V5_UP ((TARGET_V850E3V5))     \n+#define TARGET_V850E2V3_UP ((TARGET_V850E2V3) || TARGET_V850E3V5_UP)\n+#define TARGET_V850E2_UP   ((TARGET_V850E2)   || TARGET_V850E2V3_UP)\n+#define TARGET_V850E_UP    ((TARGET_V850E)    || TARGET_V850E2_UP)\n+#define TARGET_ALL         ((TARGET_V850)     || TARGET_V850E_UP)\n \n #define ASM_SPEC \"%{m850es:-mv850e1}%{!mv850es:%{mv*:-mv%*}} \\\n %{mrelax:-mrelax} \\\n@@ -96,22 +111,23 @@ extern GTY(()) rtx v850_compare_op1;\n #define LINK_SPEC \"%{mgcc-abi:-m v850}\"\n \n #define CPP_SPEC \"\\\n+  %{mv850e3v5:-D__v850e3v5__} \\\n   %{mv850e2v3:-D__v850e2v3__} \\\n   %{mv850e2:-D__v850e2__} \\\n   %{mv850es:-D__v850e1__} \\\n   %{mv850e1:-D__v850e1__} \\\n   %{mv850e:-D__v850e__} \\\n   %{mv850:-D__v850__} \\\n-  %(subtarget_cpp_spec)\" \\\n-  \" %{mep:-D__EP__}\"\n+  %(subtarget_cpp_spec) \\\n+  %{mep:-D__EP__}\"\n \n #define EXTRA_SPECS \\\n  { \"subtarget_asm_spec\", SUBTARGET_ASM_SPEC }, \\\n  { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC } \n \n \n /* Macro to decide when FPU instructions can be used.  */\n-#define TARGET_USE_FPU  (TARGET_V850E2V3 && ! TARGET_SOFT_FLOAT)\n+#define TARGET_USE_FPU  (TARGET_V850E2V3_UP && ! TARGET_SOFT_FLOAT)\n \n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -136,7 +152,7 @@ extern GTY(()) rtx v850_compare_op1;\n     }\t\t\t\t\t\t\\\n   while(0)\n \n-#define MASK_CPU (MASK_V850 | MASK_V850E | MASK_V850E1 | MASK_V850E2 | MASK_V850E2V3)\n+#define MASK_CPU (MASK_V850 | MASK_V850E | MASK_V850E1 | MASK_V850E2 | MASK_V850E2V3 | MASK_V850E3V5)\n \f\n /* Target machine storage layout */\n \n@@ -380,7 +396,8 @@ enum reg_class\n   insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_N)\n #define CONST_OK_FOR_O(VALUE) \\\n   insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_O)\n-\n+#define CONST_OK_FOR_W(VALUE) \\\n+  insn_const_int_ok_for_constraint (VALUE, CONSTRAINT_W)\n \f\n /* Stack layout; function entry, exit and calling.  */\n \n@@ -797,9 +814,9 @@ typedef enum\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \t\t\\\n   fprintf (FILE, \"\\t%s %s.L%d-.L%d%s\\n\",\t\t\t\t\\\n \t   (TARGET_BIG_SWITCH ? \".long\" : \".short\"),\t\t\t\\\n-\t   (0 && ! TARGET_BIG_SWITCH && (TARGET_V850E || TARGET_V850E2_ALL) ? \"(\" : \"\"),             \\\n+\t   (0 && ! TARGET_BIG_SWITCH && (TARGET_V850E_UP) ? \"(\" : \"\"),             \\\n \t   VALUE, REL,\t\t\t\t\t\t\t\\\n-\t   (0 && ! TARGET_BIG_SWITCH && (TARGET_V850E || TARGET_V850E2_ALL) ? \")>>1\" : \"\"))\n+\t   (0 && ! TARGET_BIG_SWITCH && (TARGET_V850E_UP) ? \")>>1\" : \"\"))\n \n #define ASM_OUTPUT_ALIGN(FILE, LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n@@ -960,4 +977,7 @@ extern tree GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_KINDS];\n    -isystem <path-to-build-dir>.  */\n #define NO_IMPLICIT_EXTERN_C\n \n+#define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n+  ((LENGTH) = v850_adjust_insn_length ((INSN), (LENGTH)))\n+\n #endif /* ! GCC_V850_H */"}, {"sha": "4ed0e40b05fb065f6a89449bf73b5df6f130bd11", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 344, "deletions": 101, "changes": 445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -43,6 +43,7 @@\n    (LP_REGNUM       \t\t31)         ; Return address register\n    (CC_REGNUM       \t\t32)         ; Condition code pseudo register\n    (FCC_REGNUM      \t\t33)         ; Floating Condition code pseudo register\n+   (UNSPEC_LOOP                200)         ; loop counter\n   ]\n )\n \n@@ -59,7 +60,7 @@\n (define_attr \"type\" \"load,store,bit1,mult,macc,div,fpu,single,other\"\n   (const_string \"other\"))\n \n-(define_attr \"cpu\" \"none,v850,v850e,v850e1,v850e2,v850e2v3\"\n+(define_attr \"cpu\" \"none,v850,v850e,v850e1,v850e2,v850e2v3,v850e3v5\"\n   (cond [(match_test \"TARGET_V850\")\n \t (const_string \"v850\")\n \t (match_test \"TARGET_V850E\")\n@@ -68,8 +69,10 @@\n \t (const_string \"v850e1\")\n \t (match_test \"TARGET_V850E2\")\n \t (const_string \"v850e2\")\n-\t (match_test \"TARGET_V850E2\")\n-\t (const_string \"v850e2v3\")]\n+\t (match_test \"TARGET_V850E2V3\")\n+\t (const_string \"v850e2v3\")\n+\t (match_test \"TARGET_V850E3V5\")\n+\t (const_string \"v850e3v5\")]\t \n \t (const_string \"none\")))\n \n ;; Condition code settings.\n@@ -109,7 +112,7 @@\n \t(sign_extend:SI\n \t(mem:QI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand 2 \"disp23_operand\" \"W\")))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"ld.b %2[%1],%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -119,7 +122,7 @@\n \t(zero_extend:SI\n \t(mem:QI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand 2 \"disp23_operand\" \"W\")))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"ld.bu %2[%1],%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -129,7 +132,7 @@\n \t(sign_extend:SI\n \t(mem:HI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand 2 \"disp23_operand\" \"W\")))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"ld.h %2[%1],%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -139,7 +142,7 @@\n \t(zero_extend:SI\n \t(mem:HI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand 2 \"disp23_operand\" \"W\")))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"ld.hu %2[%1],%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -148,7 +151,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (match_operand 2 \"disp23_operand\" \"W\"))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"ld.w %2[%1],%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -157,7 +160,7 @@\n   [(set (mem:QI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t (match_operand 1 \"disp23_operand\" \"W\")))\n \t(match_operand:QI 2 \"register_operand\" \"r\"))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"st.b %2,%1[%0]\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -166,7 +169,7 @@\n   [(set (mem:HI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t (match_operand 1 \"disp23_operand\" \"W\")))\n \t(match_operand:HI 2 \"register_operand\" \"r\"))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"st.h %2,%1[%0]\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -175,11 +178,47 @@\n   [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t (match_operand 1 \"disp23_operand\" \"W\")))\n \t(match_operand:SI 2 \"register_operand\" \"r\"))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"st.w %2,%1[%0]\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n+;; movdi\n+\n+(define_expand \"movdi\"\n+  [(set (match_operand:DI 0 \"general_operand\")\n+\t(match_operand:DI 1 \"general_operand\"))]\n+  \"TARGET_V850E3V5_UP\"\n+  {\n+    /* One of the ops has to be in a register or 0.  */\n+    if (!register_operand (operand0, DImode)\n+        && !register_operand (operand1, DImode))\n+      operands[1] = copy_to_mode_reg (DImode, operand1);\n+\n+    if (register_operand (operand0, DImode)\n+\t&& (CONST_INT_P (operands[1]) || CONST_DOUBLE_P (operands[1])))\n+      {\n+        int i;\n+\n+        for (i = 0; i < UNITS_PER_WORD * 2; i += UNITS_PER_WORD)\n+          emit_move_insn (simplify_gen_subreg (SImode, operands[0], DImode, i),\n+                          simplify_gen_subreg (SImode, operands[1], DImode, i));\n+        DONE;\n+      }\n+  }\n+)\n+\n+(define_insn \"*movdi_internal\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,e!r,m\")\n+\t(match_operand:DI 1 \"nonimmediate_operand\"  \"r,m,e!r\"))]\n+  \"TARGET_V850E3V5_UP\n+   || (register_operand (operands[0], DImode) && register_operand (operands[1], DImode))\"\n+  { return v850_gen_movdi (operands); }\n+  [(set_attr \"length\" \"4,12,12\")\n+   (set_attr \"cc\" \"none_0hit\")\n+   (set_attr \"type\" \"other,load,store\")]\n+)\n+\n ;; movqi\n \n (define_expand \"movqi\"\n@@ -265,7 +304,7 @@\n        must be done with HIGH & LO_SUM patterns.  */\n     if (CONSTANT_P (operands[1])\t\n \t&& GET_CODE (operands[1]) != HIGH\n-\t&& ! (TARGET_V850E || TARGET_V850E2_ALL)\n+\t&& ! (TARGET_V850E_UP)\n \t&& !special_symbolref_operand (operands[1], VOIDmode)\n \t&& !(GET_CODE (operands[1]) == CONST_INT\n \t     && (CONST_OK_FOR_J (INTVAL (operands[1]))\n@@ -297,7 +336,7 @@\n (define_insn \"*movsi_internal_v850e\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=r,r,r,r,Q,r,r,m,m,r\")\n \t(match_operand:SI 1 \"general_operand\" \"Jr,K,L,Q,Ir,m,R,r,I,i\"))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\n+  \"(TARGET_V850E_UP)\n    && (register_operand (operands[0], SImode)\n        || reg_or_0_operand (operands[1], SImode))\"\n {\n@@ -412,17 +451,17 @@\n                      (label_ref (match_operand 3 \"\"))\n                      (pc)))\n   (clobber (cc0))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_USE_FPU\"\n {\n-  v850_compare_op0 = operands[1];\n-  v850_compare_op1 = operands[2];\n-\n-  enum rtx_code cond = GET_CODE(operands[0]);\n+  enum rtx_code cond = GET_CODE (operands[0]);\n   enum machine_mode mode;\n   rtx fcc_reg;\n   rtx cc_reg;\n   rtx tmp;\n \n+  v850_compare_op0 = operands[1];\n+  v850_compare_op1 = operands[2];\n+\n   if (GET_MODE_CLASS (GET_MODE (v850_compare_op0)) != MODE_FLOAT)\n     FAIL;\n \n@@ -442,7 +481,7 @@\n         (match_operator:SI  1 \"ordered_comparison_operator\"\n          [(match_operand:SF 2 \"register_operand\" \"r\")\n           (match_operand:SF 3 \"register_operand\" \"r\")]))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_USE_FPU\"\n {\n   if (GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GE)\n     return \"cmpf.s %c1, %z2, %z3 ; trfsr ; setf nz, %0\";\n@@ -466,17 +505,17 @@\n                      (label_ref (match_operand 3 \"\"))\n                      (pc)))\n   (clobber (cc0))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_USE_FPU\"\n {\n-  v850_compare_op0 = operands[1];\n-  v850_compare_op1 = operands[2];\n-\n-  enum rtx_code cond = GET_CODE(operands[0]);\n+  enum rtx_code cond = GET_CODE (operands[0]);\n   enum machine_mode mode;\n   rtx fcc_reg;\n   rtx cc_reg;\n   rtx tmp;\n \n+    v850_compare_op0 = operands[1];\n+    v850_compare_op1 = operands[2];\n+\n   if (GET_MODE_CLASS (GET_MODE (v850_compare_op0)) != MODE_FLOAT)\n     FAIL;\n \n@@ -496,7 +535,7 @@\n         (match_operator:SI  1 \"ordered_comparison_operator\"\n          [(match_operand:DF 2 \"even_reg_operand\"  \"r\")\n           (match_operand:DF 3 \"even_reg_operand\" \"r\")]))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_USE_FPU\"\n {\n   if (GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GE)\n     return \"cmpf.d %c1, %z2, %z3 ; trfsr ; setf nz, %0\";\n@@ -633,7 +672,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:SI 2 \"reg_or_int9_operand\" \"rO\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"mul %2,%1,%.\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")\n@@ -657,9 +696,9 @@\n \t(mod:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E || TARGET_V850E2_ALL\"\n+  \"TARGET_V850E_UP\"\n {\n-  if (TARGET_V850E2_ALL)\n+  if (TARGET_V850E2_UP)\n     return \"divq %2,%0,%3\";\n    else\n     return \"div %2,%0,%3\";\n@@ -676,9 +715,9 @@\n \t(umod:SI (match_dup 1)\n \t\t (match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E || TARGET_V850E2_ALL\"\n+  \"TARGET_V850E_UP\"\n {\n-  if (TARGET_V850E2_ALL)\n+  if (TARGET_V850E2_UP)\n     return \"divqu %2,%0,%3\";\n   else\n     return \"divu %2,%0,%3\";\n@@ -698,7 +737,7 @@\n \t(mod:HI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E || TARGET_V850E2_ALL\"\n+  \"TARGET_V850E_UP\"\n   \"divh %2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n@@ -715,7 +754,7 @@\n \t(umod:HI (match_dup 1)\n \t\t (match_dup 2)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E || TARGET_V850E2_ALL\"\n+  \"TARGET_V850E_UP\"\n   \"zxh %0 ; divhu %2,%0,%3\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")\n@@ -984,6 +1023,17 @@\n ;; optimize_bitfield_compare in fold-const usually converts single\n ;; bit extracts into an AND with a mask.\n \n+(define_insn \"insv\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t\t (match_operand:SI 2 \"immediate_operand\" \"n\"))\n+\t(match_operand:SI 3 \"register_operand\" \"r\"))]\n+  \"TARGET_V850E3V5_UP\"\n+  \"bins %3, %2, %1, %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")]\n+)\n+\n ;; -----------------------------------------------------------------\n ;; Scc INSTRUCTIONS\n ;; -----------------------------------------------------------------\n@@ -1018,15 +1068,15 @@\n (define_insn \"set_z_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand 1 \"v850_float_z_comparison_operator\" \"\"))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"setf z,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n \n (define_insn \"set_nz_insn\" \n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand 1 \"v850_float_nz_comparison_operator\" \"\"))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n   \"setf nz,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"none_0hit\")])\n@@ -1045,7 +1095,7 @@\n \t (match_operand 1 \"comparison_operator\")\n \t (match_operand:SI 2 \"reg_or_const_operand\" \"rJ\")\n \t (match_operand:SI 3 \"reg_or_const_operand\" \"rI\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   {\n     /* Make sure that we have an integer comparison...  */\n     if (GET_MODE (XEXP (operands[1], 0)) != CCmode\n@@ -1093,7 +1143,7 @@\n                          [(reg:CC CC_REGNUM) (const_int 0)])\n          (match_operand:SI 2 \"reg_or_int5_operand\" \"rJ\")\n          (match_operand:SI 3 \"reg_or_0_operand\" \"rI\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"cmov %c1,%2,%z3,%0\";\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"compare\")])\n@@ -1105,7 +1155,7 @@\n                          [(reg:CC CC_REGNUM) (const_int 0)])\n          (match_operand:SI 2 \"reg_or_0_operand\" \"rI\")\n          (match_operand:SI 3 \"reg_or_int5_operand\" \"rJ\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"cmov %C1,%3,%z2,%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"compare\")])\n@@ -1118,7 +1168,7 @@\n \t\t\t  (match_operand:SI 5 \"reg_or_int5_operand\" \"rJ\")])\n \t (match_operand:SI 2 \"reg_or_int5_operand\" \"rJ\")\n \t (match_operand:SI 3 \"reg_or_0_operand\" \"rI\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"cmp %5,%4 ; cmov %c1,%2,%z3,%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1131,7 +1181,7 @@\n \t\t\t  (match_operand:SI 5 \"reg_or_int5_operand\" \"rJ\")])\n \t (match_operand:SI 2 \"reg_or_0_operand\" \"rI\")\n \t (match_operand:SI 3 \"reg_or_int5_operand\" \"rJ\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"cmp %5,%4 ; cmov %C1,%3,%z2,%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1147,7 +1197,7 @@\n \t\t\t  (const_int 0)])\n \t (match_operand:SI 4 \"reg_or_int5_operand\" \"rJ\")\n \t (match_operand:SI 5 \"reg_or_0_operand\" \"rI\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"tst1 %3,%2 ; cmov %c1,%4,%z5,%0\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1163,7 +1213,7 @@\n \t\t\t  (const_int 0)])\n \t (match_operand:SI 4 \"reg_or_0_operand\" \"rI\")\n \t (match_operand:SI 5 \"reg_or_int5_operand\" \"rJ\")))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"tst1 %3,%2 ; cmov %C1,%5,%z4,%0\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1182,7 +1232,7 @@\n \t (ashift:SI (match_operand:SI 2 \"register_operand\" \"0\")\n \t\t    (const_int 1))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"cmp %4,%3 ; sasf %c1,%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1196,7 +1246,7 @@\n \t (match_operand:SI 2 \"const_int_operand\" \"\")\n \t (match_operand:SI 3 \"const_int_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\n+  \"(TARGET_V850E_UP)\n    && ((INTVAL (operands[2]) ^ INTVAL (operands[3])) == 1)\n    && ((INTVAL (operands[2]) + INTVAL (operands[3])) != 1)\n    && (GET_CODE (operands[5]) == CONST_INT\n@@ -1225,7 +1275,7 @@\n \t\t   (rotate:HI (match_operand:HI 1 \"register_operand\" \"\")\n \t\t\t      (match_operand:HI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC CC_REGNUM))])]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   {\n     if (INTVAL (operands[2]) != 8)\n       FAIL;\n@@ -1236,7 +1286,7 @@\n \t(rotate:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t   (const_int 8)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"bsh %1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1246,18 +1296,55 @@\n \t\t   (rotate:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"\")))\n \t      (clobber (reg:CC CC_REGNUM))])]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   {\n     if (INTVAL (operands[2]) != 16)\n       FAIL;\n   })\n \n+(define_insn \"rotlsi3_a\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+     (match_operator:SI 4 \"ior_operator\"\n+       [(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))\n+\t(lshiftrt:SI (match_dup 1)\n+\t(match_operand:SI 3 \"const_int_operand\" \"n\"))]))]\n+  \"TARGET_V850E3V5_UP && (INTVAL (operands[2]) + INTVAL (operands[3]) == 32)\"\n+  \"rotl %2, %1, %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")]\n+)\n+\n+(define_insn \"rotlsi3_b\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+     (match_operator:SI 4 \"ior_operator\"\n+       [(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t(ashift:SI (match_dup 1)\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"n\"))]))]\n+  \"TARGET_V850E3V5_UP && (INTVAL (operands[2]) + INTVAL (operands[3]) == 32)\"\n+  \"rotl %2, %1, %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")]\n+)\n+\n+(define_insn \"rotlsi3_v850e3v5\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"e3v5_shift_operand\" \"rn\")))\n+\t      (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_V850E3V5_UP\"\n+  \"rotl %2, %1, %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"set_zn\")]\n+)\n+\n (define_insn \"*rotlsi3_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (const_int 16)))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"hsw %1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -1266,6 +1353,99 @@\n ;; JUMP INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n+;; Doloop\n+\n+(define_expand \"doloop_begin\"\n+ [(use (match_operand 0 \"\" \"\"))        ; loop pseudo\n+  (use (match_operand 1 \"\" \"\"))        ; iterations; zero if unknown\n+  (use (match_operand 2 \"\" \"\"))        ; max iterations\n+  (use (match_operand 3 \"\" \"\"))        ; loop level\n+  (use (match_operand 4 \"\" \"\"))]       ; condition\n+  \"TARGET_V850E3V5_UP && TARGET_LOOP\"\n+  {\n+    rtx loop_cnt   = operands[0];\n+    rtx loop_level = operands[3];\n+\n+    if (INTVAL (loop_level) > 1)\n+      FAIL;\n+    if (GET_MODE (loop_cnt) != SImode)\n+      FAIL;\n+\n+    emit_insn (gen_fix_loop_counter (loop_cnt));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"fix_loop_counter\"\n+  [(unspec:SI [(match_operand:SI          0 \"register_operand\" \"+r,!m\")\n+\t       (clobber (match_scratch:SI 1                    \"=X,r\"))] UNSPEC_LOOP)]\n+  \"TARGET_V850E3V5_UP && TARGET_LOOP\"\n+  {\n+    switch (which_alternative)\n+    {\n+    case 0:  return \"add 1, %0 # LOOP_BEGIN\";\n+    case 1:  return \"ld.w %0, %1; add 1, %1; st.w %1, %0 # LOOP_BEGIN\";\n+    default: gcc_unreachable ();\n+    }\n+  }\n+  [(set_attr \"length\" \"2,6\")\n+   (set_attr \"cc\" \"none\")]\n+)\n+\n+(define_expand \"doloop_end\"\n+ [(use (match_operand 0 \"\" \"\"))        ; loop pseudo\n+  (use (match_operand 1 \"\" \"\"))        ; iterations; zero if unknown\n+  (use (match_operand 2 \"\" \"\"))        ; max iterations\n+  (use (match_operand 3 \"\" \"\"))        ; loop level\n+  (use (match_operand 4 \"\" \"\"))        ; label\n+  (use (match_operand 5 \"\" \"\"))]       ; entered at top\n+  \"TARGET_V850E3V5_UP && TARGET_LOOP\"\n+  {\n+    rtx loop_cnt   = operands[0];\n+    rtx loop_level = operands[3];\n+    rtx label      = operands[4];\n+\n+    if (INTVAL (loop_level) > 1)\n+      FAIL;\n+    if (GET_MODE (loop_cnt) != SImode)\n+      FAIL;\n+\n+    emit_jump_insn (gen_doloop_end_internal_loop (label, loop_cnt));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"doloop_end_internal_loop\"\n+ [(set (pc)\n+       (if_then_else (ne (match_operand:SI 1 \"register_operand\" \"+r,!m\")\n+\t\t\t (const_int 0))\n+\t\t     (label_ref (match_operand 0 \"\" \"\"))\n+\t\t     (pc)))\n+  (set (match_dup 1) (plus:SI (match_dup 1) (const_int -1)))\n+  (clobber (match_scratch:SI 2 \"=X,r\"))\n+  (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_V850E3V5_UP && TARGET_LOOP\"\n+  {\n+    switch (which_alternative)\n+    {\n+    case 0:\n+      if (get_attr_length (insn) == 4)\n+\treturn \"loop %1, %0 # LOOP.1.0\";\n+\n+      return \"add -1, %1; bne %l0 # LOOP.1.1\";\n+    case 1:\n+      return \"ld.w %1, %2; add -1, %2; st.w %2, %1; bne %l0 # LOOP.2.1\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+  }\n+ [(set (attr \"length\")\n+       (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t     (const_int 65534))\n+\t\t     (const_int 4)\n+\t\t     (const_int 14)))\n+  (set_attr \"cc\" \"none\")])\n+\n ;; Conditional jump instructions\n \n (define_insn \"*branch_normal\"\n@@ -1285,14 +1465,18 @@\n \n   if (get_attr_length (insn) == 2)\n     return \"b%b1 %l0\";\n-  else\n-    return \"b%B1 .+6 ; jr %l0\";\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"b%b1 %l0\";\n+  return \"b%B1 .+6 ; jr %l0\";\n }\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n (define_insn \"*branch_invert\"\n@@ -1308,93 +1492,124 @@\n \t  || GET_CODE (operands[1]) == GE\n \t  || GET_CODE (operands[1]) == LE\n \t  || GET_CODE (operands[1]) == LT))\n-    return 0;\n+    return NULL;\n+\n   if (get_attr_length (insn) == 2)\n     return \"b%B1 %l0\";\n-  else\n-    return \"b%b1 .+6 ; jr %l0\";\n+\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"b%B1 %l0\";\n+    \n+  return \"b%b1 .+6 ; jr %l0\";\n }\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n (define_insn \"branch_z_normal\"\t\n   [(set (pc)\n \t(if_then_else (match_operand 1 \"v850_float_z_comparison_operator\" \"\")\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n {\n   if (get_attr_length (insn) == 2)\n     return \"bz %l0\";\n-  else\n-    return \"bnz 1f ; jr %l0 ; 1:\";\n+\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"bz %l0\";\n+\n+  return \"bnz 1f ; jr %l0 ; 1:\";\n }\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n (define_insn \"*branch_z_invert\"\n   [(set (pc)\n \t(if_then_else (match_operand 1 \"v850_float_z_comparison_operator\" \"\")\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n {\n   if (get_attr_length (insn) == 2)\n     return \"bnz %l0\";\n-  else\n-    return \"bz 1f ; jr %l0 ; 1:\";\n+\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"bnz %l0\";\n+\n+  return \"bz 1f ; jr %l0 ; 1:\";\n }\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t\t   (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n (define_insn \"branch_nz_normal\"\n   [(set (pc)\n \t(if_then_else (match_operand 1 \"v850_float_nz_comparison_operator\" \"\")\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n {\n   if (get_attr_length (insn) == 2)\n     return \"bnz %l0\";\n-  else\n-    return \"bz 1f ; jr %l0 ; 1:\";\n+\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"bnz %l0\";\n+\n+  return \"bz 1f ; jr %l0 ; 1:\";\n }\n [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t\t   (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n (define_insn \"*branch_nz_invert\"\n   [(set (pc)\n \t(if_then_else (match_operand 1 \"v850_float_nz_comparison_operator\" \"\")\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"TARGET_V850E2V3\"\n+  \"TARGET_V850E2V3_UP\"\n {\n   if (get_attr_length (insn) == 2)\n     return \"bz %l0\";\n-  else\n-    return \"bnz 1f ; jr %l0 ; 1:\";\n+\n+  if (TARGET_V850E3V5_UP && get_attr_length (insn) == 4)\n+    return \"bz %l0\";\n+\n+  return \"bnz 1f ; jr %l0 ; 1:\";\n }\n  [(set (attr \"length\")\n     (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n \t\t      (const_int 256))\n \t\t  (const_int 2)\n-\t\t  (const_int 6)))\n+\t\t  (if_then_else (lt (abs (minus (match_dup 0) (pc)))\n+\t\t      (const_int 65536))\n+\t\t      (const_int 4)\n+\t\t      (const_int 6))))\n   (set_attr \"cc\" \"none\")])\n \n ;; Unconditional and other jump instructions.\n@@ -1440,7 +1655,7 @@\n \t\t\t      (const_int 1))\n \t\t   (label_ref (match_operand 1 \"\" \"\")))))\n \t(label_ref (match_dup 1))))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"switch %0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none\")])\n@@ -1512,9 +1727,17 @@\n \t (match_operand:SI 1 \"general_operand\" \"g,g\"))\n    (clobber (reg:SI 31))]\n   \"! TARGET_LONG_CALLS\"\n-  \"@\n-  jarl %0,r31\n-  jarl .+4,r31 ; add 4,r31 ; jmp %0\"\n+  {\n+    if (which_alternative == 1)\n+      {\n+        if (TARGET_V850E3V5_UP)\n+\t  return \"jarl [%0], r31\";\n+\n+        return \"jarl .+4, r31 ; add 4, r31 ; jmp %0\";\n+      }\n+\n+    return \"jarl %0, r31\";\n+  }\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n )\n@@ -1529,11 +1752,17 @@\n     {\n       if (GET_CODE (operands[0]) == REG)\n         return \"jarl %0,r31\";\n-      else\n-        return \"movhi hi(%0), r0, r11 ; movea lo(%0), r11, r11 ; jarl .+4,r31 ; add 4, r31 ; jmp r11\";\n+\n+      if (TARGET_V850E3V5_UP)\n+\treturn \"mov hilo(%0), r11 ; jarl [r11], r31\";\n+\n+      return \"movhi hi(%0), r0, r11 ; movea lo(%0), r11, r11 ; jarl .+4,r31 ; add 4, r31 ; jmp r11\";\n     }\n-  else\n-    return \"jarl .+4,r31 ; add 4,r31 ; jmp %0\";\n+\n+  if (TARGET_V850E3V5_UP)\n+    return \"jarl [%0], r31\";\n+\n+  return \"jarl .+4,r31 ; add 4,r31 ; jmp %0\";\n }\n   [(set_attr \"length\" \"16,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n@@ -1568,9 +1797,17 @@\n \t      (match_operand:SI 2 \"general_operand\" \"g,g\")))\n    (clobber (reg:SI 31))]\n   \"! TARGET_LONG_CALLS\"\n-  \"@\n-  jarl %1,r31\n-  jarl .+4,r31 ; add 4,r31 ; jmp %1\"\n+  {\n+    if (which_alternative == 1)\n+      {\n+        if (TARGET_V850E3V5_UP)\n+          return \"jarl [%1], r31\";\n+\n+        return \"jarl .+4, r31 ; add 4, r31 ; jmp %1\";\n+      }\n+\n+    return \"jarl %1, r31\";\n+  }\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n )\n@@ -1586,12 +1823,18 @@\n     {\n       if (GET_CODE (operands[1]) == REG)\n         return \"jarl %1, r31\";\n-      else\n+\n       /* Reload can generate this pattern....  */\n-        return \"movhi hi(%1), r0, r11 ; movea lo(%1), r11, r11 ; jarl .+4, r31 ; add 4, r31 ; jmp r11\";\n+      if (TARGET_V850E3V5_UP)\n+        return \"mov hilo(%1), r11 ; jarl [r11], r31\";\n+\n+      return \"movhi hi(%1), r0, r11 ; movea lo(%1), r11, r11 ; jarl .+4, r31 ; add 4, r31 ; jmp r11\";\n     }\n-  else\n-    return \"jarl .+4, r31 ; add 4, r31 ; jmp %1\";\n+  \n+  if (TARGET_V850E3V5_UP)\n+    return \"jarl [%1], r31\";\n+\n+  return \"jarl .+4, r31 ; add 4, r31 ; jmp %1\";\n }\n   [(set_attr \"length\" \"16,8\")\n    (set_attr \"cc\" \"clobber,clobber\")]\n@@ -1613,7 +1856,7 @@\n \t(zero_extend:SI\n         (match_operand:HI 1 \"nonimmediate_operand\" \"0,r,T,m\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"@\n    zxh %0\n    andi 65535,%1,%0\n@@ -1639,7 +1882,7 @@\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n   {\n-    if (! (TARGET_V850E || TARGET_V850E2_ALL))\n+    if (! (TARGET_V850E_UP))\n       operands[1] = force_reg (HImode, operands[1]);\n   })\n \n@@ -1648,7 +1891,7 @@\n \t(zero_extend:SI\n \t(match_operand:QI 1 \"nonimmediate_operand\" \"0,r,T,m\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"@\n    zxb %0\n    andi 255,%1,%0\n@@ -1674,7 +1917,7 @@\n \t      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n   {\n-    if (! (TARGET_V850E || TARGET_V850E2_ALL))\n+    if (! (TARGET_V850E_UP))\n       operands[1] = force_reg (QImode, operands[1]);\n   })\n \n@@ -1686,7 +1929,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,Q,m\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"@\n    sxh %0\n    sld.h %1,%0\n@@ -1718,7 +1961,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0,Q,m\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL)\"\n+  \"(TARGET_V850E_UP)\"\n   \"@\n    sxb %0\n    sld.b %1,%0\n@@ -1767,7 +2010,7 @@\n \t(match_operand:SI 1 \"register_operand\" \"r\")\n \t(match_operand:SI 2 \"nonmemory_operand\" \"r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E2_ALL\"\n+  \"TARGET_V850E2_UP\"\n   \"shl %2,%1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_znv\")])\n@@ -1791,7 +2034,7 @@\n \t(match_operand:SI 1 \"register_operand\" \"r\")\n \t(match_operand:SI 2 \"nonmemory_operand\" \"r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E2_ALL\"\n+  \"TARGET_V850E2_UP\"\n   \"shr %2,%1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_zn\")])\n@@ -1815,7 +2058,7 @@\n \t(match_operand:SI 1 \"register_operand\" \"r\")\n \t(match_operand:SI 2 \"nonmemory_operand\" \"r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E2_ALL\"\n+  \"TARGET_V850E2_UP\"\n   \"sar %2,%1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"set_zn\")])\n@@ -1828,7 +2071,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n        (ffs:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_V850E2_ALL\"\n+  \"TARGET_V850E2_UP\"\n   \"sch1r %1,%0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -2529,7 +2772,7 @@\n     (set (mem:SI (plus:SI (reg:SI 3)\n \t\t\t  (match_operand:SI 2 \"immediate_operand\" \"i\")))\n \t (match_operand:SI 3 \"register_is_ok_for_epilogue\" \"r\"))])]\n- \"TARGET_PROLOG_FUNCTION && (TARGET_V850E || TARGET_V850E2_ALL)\"\n+ \"TARGET_PROLOG_FUNCTION && (TARGET_V850E_UP)\"\n {\n   return construct_prepare_instruction (operands[0]);\n }\n@@ -2563,7 +2806,7 @@\n     (set (match_operand:SI 2 \"register_is_ok_for_epilogue\" \"=r\")\n \t (mem:SI (plus:SI (reg:SI 3)\n \t\t\t  (match_operand:SI 3 \"immediate_operand\" \"i\"))))])]\n- \"TARGET_PROLOG_FUNCTION && (TARGET_V850E || TARGET_V850E2_ALL)\"\n+ \"TARGET_PROLOG_FUNCTION && (TARGET_V850E_UP)\"\n {\n   return construct_dispose_instruction (operands[0]);\n }\n@@ -2594,7 +2837,7 @@\n ;; Initialize an interrupt function.  Do not depend on TARGET_PROLOG_FUNCTION.\n (define_insn \"callt_save_interrupt\"\n   [(unspec_volatile [(const_int 0)] 2)]\n-    \"(TARGET_V850E || TARGET_V850E2_ALL) && !TARGET_DISABLE_CALLT\"\n+    \"(TARGET_V850E_UP) && !TARGET_DISABLE_CALLT\"\n     ;; The CALLT instruction stores the next address of CALLT to CTPC register\n     ;; without saving its previous value.  So if the interrupt handler\n     ;; or its caller could possibly execute the CALLT insn, save_interrupt \n@@ -2616,7 +2859,7 @@\n \n (define_insn \"callt_return_interrupt\"\n   [(unspec_volatile [(const_int 0)] 3)]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL) && !TARGET_DISABLE_CALLT\"\n+  \"(TARGET_V850E_UP) && !TARGET_DISABLE_CALLT\"\n   \"callt ctoff(__callt_return_interrupt)\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -2693,7 +2936,7 @@\n \n (define_insn \"callt_save_all_interrupt\"\n   [(unspec_volatile [(const_int 0)] 0)]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL) && !TARGET_DISABLE_CALLT\"\n+  \"(TARGET_V850E_UP) && !TARGET_DISABLE_CALLT\"\n   \"callt ctoff(__callt_save_all_interrupt)\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none\")])\n@@ -2793,7 +3036,7 @@\n \n (define_insn \"callt_restore_all_interrupt\"\n   [(unspec_volatile [(const_int 0)] 1)]\n-  \"(TARGET_V850E || TARGET_V850E2_ALL) && !TARGET_DISABLE_CALLT\"\n+  \"(TARGET_V850E_UP) && !TARGET_DISABLE_CALLT\"\n   \"callt ctoff(__callt_restore_all_interrupt)\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"none\")])"}, {"sha": "feba0ddc27a32ab3266c4a89432dc234dba3d53a", "filename": "gcc/config/v850/v850.opt", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fconfig%2Fv850%2Fv850.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.opt?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -112,6 +112,17 @@ mv850e2v3\n Target Report RejectNegative Mask(V850E2V3)\n Compile for the v850e2v3 processor\n \n+mv850e3v5\n+Target Report RejectNegative Mask(V850E3V5)\n+Compile for the v850e3v5 processor\n+\n+mv850e2v4\n+Target RejectNegative Mask(V850E3V5) MaskExists\n+\n+mloop\n+Target Report Mask(LOOP)\n+Enable v850e3v5 loop instructions\n+\n mzda=\n Target RejectNegative Joined UInteger\n Set the max size of data eligible for the ZDA area"}, {"sha": "e9fe4efe978893d396fbfdeea0ac51fd2083f4c5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 145, "deletions": 25, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -956,11 +956,16 @@ See RS/6000 and PowerPC Options.\n -mtda=@var{n}  -msda=@var{n}  -mzda=@var{n} @gol\n -mapp-regs  -mno-app-regs @gol\n -mdisable-callt  -mno-disable-callt @gol\n--mv850e2v3 @gol\n--mv850e2 @gol\n--mv850e1 -mv850es @gol\n--mv850e @gol\n--mv850  -mbig-switch}\n+-mv850e2v3 -mv850e2 -mv850e1 -mv850es @gol\n+-mv850e -mv850 -mv850e3v5 @gol\n+-mloop @gol\n+-mrelax @gol\n+-mlong-jumps @gol\n+-msoft-float @gol\n+-mhard-float @gol\n+-mgcc-abi @gol\n+-mrh850-abi @gol\n+-mbig-switch}\n \n @emph{VAX Options}\n @gccoptlist{-mg  -mgnu  -munix}\n@@ -6083,7 +6088,7 @@ vectorizer passes print the source location of loops which got\n successfully vectorized.\n @item missed\n Print information about missed optimizations. Individual passes\n-control which informations to include in the output. For example,\n+control which information to include in the output. For example,\n \n @smallexample\n gcc -O2 -ftree-vectorize -fopt-info-vec-missed\n@@ -8401,7 +8406,7 @@ requires the complete toolchain to be aware of LTO. It requires a linker with\n linker plugin support for basic functionality.  Additionally,\n @command{nm}, @command{ar} and @command{ranlib}\n need to support linker plugins to allow a full-featured build environment\n-(capable of building static libraries etc). gcc provides the @command{gcc-ar},\n+(capable of building static libraries etc).  GCC provides the @command{gcc-ar},\n @command{gcc-nm}, @command{gcc-ranlib} wrappers to pass the right options\n to these tools. With non fat LTO makefiles need to be modified to use them.\n \n@@ -19591,26 +19596,20 @@ the first 32 kilobytes of memory.\n @opindex mv850\n Specify that the target processor is the V850.\n \n-@item -mbig-switch\n-@opindex mbig-switch\n-Generate code suitable for big switch tables.  Use this option only if\n-the assembler/linker complain about out of range branches within a switch\n-table.\n-\n-@item -mapp-regs\n-@opindex mapp-regs\n-This option causes r2 and r5 to be used in the code generated by\n-the compiler.  This setting is the default.\n+@item -mv850e3v5\n+@opindex mv850e3v5\n+Specify that the target processor is the V850E3V5.  The preprocessor\n+constant @samp{__v850e3v5__} is defined if this option is used.\n \n-@item -mno-app-regs\n-@opindex mno-app-regs\n-This option causes r2 and r5 to be treated as fixed registers.\n+@item -mv850e2v4\n+@opindex mv850e2v4\n+Specify that the target processor is the V850E3V5.  This is an alias for\n+the @option{-mv850e3v5} option.\n \n @item -mv850e2v3\n @opindex mv850e2v3\n Specify that the target processor is the V850E2V3.  The preprocessor\n-constant @samp{__v850e2v3__} is defined if\n-this option is used.\n+constant @samp{__v850e2v3__} is defined if this option is used.\n \n @item -mv850e2\n @opindex mv850e2\n@@ -19634,18 +19633,139 @@ Specify that the target processor is the V850E@.  The preprocessor\n constant @samp{__v850e__} is defined if this option is used.\n \n If neither @option{-mv850} nor @option{-mv850e} nor @option{-mv850e1}\n-nor @option{-mv850e2} nor @option{-mv850e2v3}\n+nor @option{-mv850e2} nor @option{-mv850e2v3} nor @option{-mv850e3v5}\n are defined then a default target processor is chosen and the\n relevant @samp{__v850*__} preprocessor constant is defined.\n \n The preprocessor constants @samp{__v850} and @samp{__v851__} are always\n defined, regardless of which processor variant is the target.\n \n @item -mdisable-callt\n+@itemx -mno-disable-callt\n @opindex mdisable-callt\n+@opindex mno-disable-callt\n This option suppresses generation of the @code{CALLT} instruction for the\n-v850e, v850e1, v850e2 and v850e2v3 flavors of the v850 architecture.  The default is\n-@option{-mno-disable-callt} which allows the @code{CALLT} instruction to be used.\n+v850e, v850e1, v850e2, v850e2v3 and v850e3v5 flavors of the v850\n+architecture.\n+\n+This option is enabled by default when the RH850 ABI is\n+in use (see @option{-mrh850-abi}), and disabled by default when the\n+GCC ABI is in use.  If @code{CALLT} instructions are being generated\n+then the C preprocessor symbol @code{__V850_CALLT__} will be defined.\n+\n+@item -mrelax\n+@itemx -mno-relax\n+@opindex mrelax\n+@opindex mno-relax\n+Pass on (or do not pass on) the @option{-mrelax} command line option\n+to the assembler.\n+\n+@item -mlong-jumps\n+@itemx -mno-long-jumps\n+@opindex mlong-jumps\n+@opindex mno-long-jumps\n+Disable (or re-enable) the generation of PC-relative jump instructions.\n+\n+@item -msoft-float\n+@itemx -mhard-float\n+@opindex msoft-float\n+@opindex mhard-float\n+Disable (or re-enable) the generation of hardware floating point\n+instructions.  This option is only significant when the target\n+architecture is @samp{V850E2V3} or higher.  If hardware floating point\n+instructions are being generated then the C preprocessor symbol\n+@code{__FPU_OK__} will be defined, otherwise the symbol\n+@code{__NO_FPU__} will be defined.\n+\n+@item -mloop\n+@opindex mloop\n+Enables the use of the e3v5 LOOP instruction.  The use of this\n+instruction is not enabled by default when the e3v5 architecture is\n+selected because its use is still experimental.\n+\n+@item -mrh850-abi\n+@itemx -mghs\n+@opindex mrh850-abi\n+@opindex mghs\n+Enables support for the RH850 version of the V850 ABI.  This is the\n+default.  With this version of the ABI the following rules apply:\n+\n+@itemize\n+@item\n+Integer sized structures and unions are returned via a memory pointer\n+rather than a register.\n+\n+@item\n+Large structures and unions (more than 8 bytes in size) are passed by\n+value.\n+\n+@item\n+Functions are aligned to 16-bit boundaries.\n+\n+@item\n+The @option{-m8byte-align} command line option is supported.\n+\n+@item\n+The @option{-mdisable-callt} command line option is enabled by\n+default.  The @option{-mno-disable-callt} command line option is not\n+supported.\n+@end itemize\n+\n+When this version of the ABI is enabled the C preprocessor symbol\n+@code{__V850_RH850_ABI__} is defined.\n+\n+@item -mgcc-abi\n+@opindex mgcc-abi\n+Enables support for the old GCC version of the V850 ABI.  With this\n+version of the ABI the following rules apply:\n+\n+@itemize\n+@item\n+Integer sized structures and unions are returned in register @code{r10}.\n+\n+@item\n+Large structures and unions (more than 8 bytes in size) are passed by\n+reference.\n+\n+@item\n+Functions are aligned to 32-bit boundaries, unless optimizing for\n+size.\n+\n+@item\n+The @option{-m8byte-align} command line option is not supported.\n+\n+@item\n+The @option{-mdisable-callt} command line option is supported but not\n+enabled by default.\n+@end itemize\n+\n+When this version of the ABI is enabled the C preprocessor symbol\n+@code{__V850_GCC_ABI__} is defined.\n+\n+@item -m8byte-align\n+@itemx -mno-8byte-align\n+@opindex m8byte-align\n+@opindex mno-8byte-align\n+Enables support for @code{doubles} and @code{long long} types to be\n+aligned on 8-byte boundaries.  The default is to restrict the\n+alignment of all objects to at most 4-bytes.  When\n+@option{-m8byte-align} is in effect the C preprocessor symbol\n+@code{__V850_8BYTE_ALIGN__} will be defined.\n+\n+@item -mbig-switch\n+@opindex mbig-switch\n+Generate code suitable for big switch tables.  Use this option only if\n+the assembler/linker complain about out of range branches within a switch\n+table.\n+\n+@item -mapp-regs\n+@opindex mapp-regs\n+This option causes r2 and r5 to be used in the code generated by\n+the compiler.  This setting is the default.\n+\n+@item -mno-app-regs\n+@opindex mno-app-regs\n+This option causes r2 and r5 to be treated as fixed registers.\n \n @end table\n "}, {"sha": "b99f8032fb39bad8d3fc86d34840a017e0e53e17", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -1,3 +1,8 @@\n+2013-01-31  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/v850/lib1funcs.S: Add support for e3v5 architecture\n+\tvariant.\n+\n 2013-01-29  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54222\n@@ -9,7 +14,7 @@\n \n 2013-01-26  David Holsgrove <david.holsgrove@xilinx.com>\n \n-\t* config.host(microblaze*-linux*): tmake_file: Remove \n+\t* config.host(microblaze*-linux*): tmake_file: Remove\n \tt-slibgcc-nolc-override, add t-slibgcc-libgcc.\n \t* config/microblaze/t-microblaze: Set LIB2FUNCS_EXCLUDE\n \tto exclude functions from being built with libgcc.c and use"}, {"sha": "ff8a55d51be252e814a801c8ccd5d411c3d05319", "filename": "libgcc/config/v850/lib1funcs.S", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/libgcc%2Fconfig%2Fv850%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbdbd982df2d044f3b43b2f41ef1ada5667160f9/libgcc%2Fconfig%2Fv850%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fv850%2Flib1funcs.S?ref=dbdbd982df2d044f3b43b2f41ef1ada5667160f9", "patch": "@@ -81,7 +81,7 @@ ___mulsi3:\n         add   r7,  r10\n         jmp   [r31]\n #endif /* __v850__ */\n-#if defined(__v850e__) || defined(__v850ea__) || defined(__v850e2__) || defined(__v850e2v3__)\n+#if defined(__v850e__) || defined(__v850ea__) || defined(__v850e2__) || defined(__v850e2v3__) || defined(__v850e3v5__)\n         /* This routine is almost unneccesarry because gcc\n            generates the MUL instruction for the RTX mulsi3.\n            But if someone wants to link his application with\n@@ -1765,7 +1765,7 @@ __restore_all_interrupt:\n #endif /* L_save_all_interrupt */\n \t\n #if defined __V850_CALLT__\n-#if defined(__v850e__) || defined(__v850e1__) || defined(__v850e2__) || defined(__v850e2v3__)\n+#if defined(__v850e__) || defined(__v850e1__) || defined(__v850e2__) || defined(__v850e2v3__) || defined(__v850e3v5__)\n #ifdef\tL_callt_save_r2_r29\n \t/* Put these functions into the call table area.  */\n \t.call_table_text\n@@ -2146,7 +2146,7 @@ __callt_save_r31c:\t.short ctoff(.L_callt_save_r31c)\n __callt_return_r31c:\t.short ctoff(.L_callt_return_r31c)\t\t\n #endif\n \n-#endif /* __v850e__ */\n+#endif /* __v850e__ + */\n #endif /* __V850_CALLT__ */\n \n /*  libgcc2 routines for NEC V850.  */"}]}