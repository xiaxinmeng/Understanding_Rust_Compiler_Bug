{"sha": "77c9db7751b8239833f152701b7cde02569859e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdjOWRiNzc1MWI4MjM5ODMzZjE1MjcwMWI3Y2RlMDI1Njk4NTllMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-16T23:25:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-16T23:25:51Z"}, "message": "builtins.c (std_expand_builtin_va_arg): Remove.\n\n        * builtins.c (std_expand_builtin_va_arg): Remove.\n        (expand_builtin_va_arg): Remove.\n        * expr.h: Don't declare them.\n        * gimplify.c (mark_decls_volatile_r): Remove.\n        (copy_if_shared_r): Don't call it.\n        * target-def.h: Don't test EXPAND_BUILTIN_VA_ARG.\n        * expr.c (expand_expr_real_1): Don't handle VA_ARG_EXPR.\n        * gimple-low.c (lower_stmt): Likewise.\n        * tree-cfg.c (cfg_remove_useless_stmts_bb): Likewise.\n        * tree-gimple.c (is_gimple_tmp_rhs, is_gimple_stmt): Likewise.\n        * tree-ssa-operands.c (get_expr_operands): Likewise.\n        * doc/tm.texi (TARGET_GIMPLIFY_VA_ARG_EXPR): Don't mention\n        EXPAND_BUILTIN_VA_ARG.\n        * system.h (EXPAND_BUILTIN_VA_ARG): Poison.\n        * config/alpha/alpha.h, config/alpha/unicosmk.h, config/i386/i386.h,\n        config/ia64/ia64.h, config/rs6000/rs6000.h, config/s390/s390.h,\n        config/sparc/sparc.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84842", "tree": {"sha": "736540023a0461568858dfe8fec7b2c58a7dd59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/736540023a0461568858dfe8fec7b2c58a7dd59d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77c9db7751b8239833f152701b7cde02569859e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c9db7751b8239833f152701b7cde02569859e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c9db7751b8239833f152701b7cde02569859e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c9db7751b8239833f152701b7cde02569859e0/comments", "author": null, "committer": null, "parents": [{"sha": "3f7d210dfb6639949b9b2f0f6dc04cb4124d85b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7d210dfb6639949b9b2f0f6dc04cb4124d85b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7d210dfb6639949b9b2f0f6dc04cb4124d85b6"}], "stats": {"total": 302, "additions": 28, "deletions": 274}, "files": [{"sha": "34dfd963b07f1b05b7da4b71faddd5d4dd499a30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1,3 +1,23 @@\n+2004-07-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (std_expand_builtin_va_arg): Remove.\n+\t(expand_builtin_va_arg): Remove.\n+\t* expr.h: Don't declare them.\n+\t* gimplify.c (mark_decls_volatile_r): Remove.\n+\t(copy_if_shared_r): Don't call it.\n+\t* target-def.h: Don't test EXPAND_BUILTIN_VA_ARG.\n+\t* expr.c (expand_expr_real_1): Don't handle VA_ARG_EXPR.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* tree-cfg.c (cfg_remove_useless_stmts_bb): Likewise.\n+\t* tree-gimple.c (is_gimple_tmp_rhs, is_gimple_stmt): Likewise.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t* doc/tm.texi (TARGET_GIMPLIFY_VA_ARG_EXPR): Don't mention\n+\tEXPAND_BUILTIN_VA_ARG.\n+\t* system.h (EXPAND_BUILTIN_VA_ARG): Poison.\n+\t* config/alpha/alpha.h, config/alpha/unicosmk.h, config/i386/i386.h,\n+\tconfig/ia64/ia64.h, config/rs6000/rs6000.h, config/s390/s390.h,\n+\tconfig/sparc/sparc.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n 2004-07-16  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-pre.c (insert_aux): Break out if we hit"}, {"sha": "de2cca6de17c1589bc804b7027ab107ba607a1d0", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 181, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -4288,186 +4288,6 @@ expand_builtin_va_start (tree arglist)\n /* The \"standard\" implementation of va_arg: read the value from the\n    current (padded) address and increment by the (padded) size.  */\n \n-rtx\n-std_expand_builtin_va_arg (tree valist, tree type)\n-{\n-  tree addr_tree, t, type_size = NULL;\n-  tree align, alignm1;\n-  tree rounded_size;\n-  rtx addr;\n-  HOST_WIDE_INT boundary;\n-\n-  /* Compute the rounded size of the type.  */\n-  align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n-  alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n-  boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n-\n-  /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n-     requires greater alignment, we must perform dynamic alignment.  */\n-\n-  if (boundary > PARM_BOUNDARY)\n-    {\n-      if (!PAD_VARARGS_DOWN)\n-\t{\n-\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t      build2 (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t\t      build_int_2 (boundary / BITS_PER_UNIT - 1, 0)));\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t}\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t  build2 (BIT_AND_EXPR, TREE_TYPE (valist), valist,\n-\t\t\t  build_int_2 (~(boundary / BITS_PER_UNIT - 1), -1)));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-    }\n-  if (type == error_mark_node\n-      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n-      || TREE_OVERFLOW (type_size))\n-    rounded_size = size_zero_node;\n-  else\n-    {\n-      rounded_size = fold (build2 (PLUS_EXPR, sizetype, type_size, alignm1));\n-      rounded_size = fold (build2 (TRUNC_DIV_EXPR, sizetype,\n-\t\t\t\t   rounded_size, align));\n-      rounded_size = fold (build2 (MULT_EXPR, sizetype,\n-\t\t\t\t   rounded_size, align));\n-    }\n-\n-  /* Get AP.  */\n-  addr_tree = valist;\n-  if (PAD_VARARGS_DOWN && ! integer_zerop (rounded_size))\n-    {\n-      /* Small args are padded downward.  */\n-      addr_tree = fold (build2 (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n-\t\t\t\tfold (build3 (COND_EXPR, sizetype,\n-\t\t\t\t\t      fold (build2 (GT_EXPR, sizetype,\n-\t\t\t\t\t\t\t    rounded_size,\n-\t\t\t\t\t\t\t    align)),\n-\t\t\t\t\t      size_zero_node,\n-\t\t\t\t\t      fold (build2 (MINUS_EXPR,\n-\t\t\t\t\t\t\t    sizetype,\n-\t\t\t\t\t\t\t    rounded_size,\n-\t\t\t\t\t\t\t    type_size))))));\n-    }\n-\n-  addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n-  addr = copy_to_reg (addr);\n-\n-  /* Compute new value for AP.  */\n-  if (! integer_zerop (rounded_size))\n-    {\n-      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t\t  build2 (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t\t  rounded_size));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-    }\n-\n-  return addr;\n-}\n-\n-/* Expand __builtin_va_arg, which is not really a builtin function, but\n-   a very special sort of operator.  */\n-\n-rtx\n-expand_builtin_va_arg (tree valist, tree type)\n-{\n-  rtx addr, result;\n-  tree promoted_type, want_va_type, have_va_type;\n-\n-  /* Verify that valist is of the proper type.  */\n-\n-  want_va_type = va_list_type_node;\n-  have_va_type = TREE_TYPE (valist);\n-  if (TREE_CODE (want_va_type) == ARRAY_TYPE)\n-    {\n-      /* If va_list is an array type, the argument may have decayed\n-\t to a pointer type, e.g. by being passed to another function.\n-         In that case, unwrap both types so that we can compare the\n-\t underlying records.  */\n-      if (TREE_CODE (have_va_type) == ARRAY_TYPE\n-\t  || TREE_CODE (have_va_type) == POINTER_TYPE)\n-\t{\n-\t  want_va_type = TREE_TYPE (want_va_type);\n-\t  have_va_type = TREE_TYPE (have_va_type);\n-\t}\n-    }\n-  if (TYPE_MAIN_VARIANT (want_va_type) != TYPE_MAIN_VARIANT (have_va_type))\n-    {\n-      error (\"first argument to `va_arg' not of type `va_list'\");\n-      addr = const0_rtx;\n-    }\n-\n-  /* Generate a diagnostic for requesting data of a type that cannot\n-     be passed through `...' due to type promotion at the call site.  */\n-  else if ((promoted_type = lang_hooks.types.type_promotes_to (type))\n-\t   != type)\n-    {\n-      const char *name = \"<anonymous type>\", *pname = 0;\n-      static bool gave_help;\n-\n-      if (TYPE_NAME (type))\n-\t{\n-\t  if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n-\t    name = IDENTIFIER_POINTER (TYPE_NAME (type));\n-\t  else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n-\t\t   && DECL_NAME (TYPE_NAME (type)))\n-\t    name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n-\t}\n-      if (TYPE_NAME (promoted_type))\n-\t{\n-\t  if (TREE_CODE (TYPE_NAME (promoted_type)) == IDENTIFIER_NODE)\n-\t    pname = IDENTIFIER_POINTER (TYPE_NAME (promoted_type));\n-\t  else if (TREE_CODE (TYPE_NAME (promoted_type)) == TYPE_DECL\n-\t\t   && DECL_NAME (TYPE_NAME (promoted_type)))\n-\t    pname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (promoted_type)));\n-\t}\n-\n-      /* Unfortunately, this is merely undefined, rather than a constraint\n-\t violation, so we cannot make this an error.  If this call is never\n-\t executed, the program is still strictly conforming.  */\n-      warning (\"`%s' is promoted to `%s' when passed through `...'\",\n-\t       name, pname);\n-      if (! gave_help)\n-\t{\n-\t  gave_help = true;\n-\t  warning (\"(so you should pass `%s' not `%s' to `va_arg')\",\n-\t\t   pname, name);\n-\t}\n-\n-      /* We can, however, treat \"undefined\" any way we please.\n-\t Call abort to encourage the user to fix the program.  */\n-      inform (\"if this code is reached, the program will abort\");\n-      expand_builtin_trap ();\n-\n-      /* This is dead code, but go ahead and finish so that the\n-\t mode of the result comes out right.  */\n-      addr = const0_rtx;\n-    }\n-  else\n-    {\n-      /* Make it easier for the backends by protecting the valist argument\n-         from multiple evaluations.  */\n-      valist = stabilize_va_list (valist, 0);\n-\n-#ifdef EXPAND_BUILTIN_VA_ARG\n-      addr = EXPAND_BUILTIN_VA_ARG (valist, type);\n-#else\n-      addr = std_expand_builtin_va_arg (valist, type);\n-#endif\n-    }\n-\n-  addr = convert_memory_address (Pmode, addr);\n-\n-  result = gen_rtx_MEM (TYPE_MODE (type), addr);\n-  set_mem_alias_set (result, get_varargs_alias_set ());\n-\n-  return result;\n-}\n-\n-/* Like std_expand_builtin_va_arg, but gimplify instead of expanding.  */\n-\n tree\n std_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n@@ -4550,7 +4370,8 @@ dummy_object (tree type)\n   return build1 (INDIRECT_REF, type, t);\n }\n \n-/* Like expand_builtin_va_arg, but gimplify instead of expanding.  */\n+/* Gimplify __builtin_va_arg, aka VA_ARG_EXPR, which is not really a\n+   builtin function, but a very special sort of operator.  */\n \n enum gimplify_status\n gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)"}, {"sha": "15b3a09d7a8f550356851e8801b0f9472d4d091c", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1675,9 +1675,6 @@ do {\t\t\t\t\t\t\\\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   alpha_va_start (valist, nextarg)\n-\n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) (abort (), NULL_RTX)\n \f\n /* Tell collect that the object format is ECOFF.  */\n #define OBJECT_FORMAT_COFF"}, {"sha": "c0aac5330e879f1e9998b1b8e2ba29d67b519dfc", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -483,6 +483,5 @@ ssib_section (void)\t\t\\\n #define LIB_SPEC \"-L/opt/ctl/craylibs/craylibs -lu -lm -lc -lsma\"\n \n #undef EXPAND_BUILTIN_VA_START\n-#undef EXPAND_BUILTIN_VA_ARG\n \n #define EH_FRAME_IN_DATA_SECTION 1"}, {"sha": "da73bfefcd986582b4af328ec2a37decab8a68cf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1769,9 +1769,6 @@ typedef struct ix86_args {\n #define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n   ix86_va_start (VALIST, NEXTARG)\n \n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) (abort (), NULL_RTX)\n-\n #define TARGET_ASM_FILE_END ix86_file_end\n #define NEED_INDICATE_EXEC_STACK 0\n "}, {"sha": "d2a9ca3769f2727639fe1892998907b7b16461cd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1386,9 +1386,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n (((REGNO) >= AR_ARG_FIRST && (REGNO) < (AR_ARG_FIRST + MAX_ARGUMENT_SLOTS)) \\\n  || ((REGNO) >= FR_ARG_FIRST && (REGNO) < (FR_ARG_FIRST + MAX_ARGUMENT_SLOTS)))\n \f\n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) (abort (), NULL_RTX)\n-\f\n /* How Scalar Function Values are Returned */\n \n /* A C expression to create an RTX representing the place where a function"}, {"sha": "f69b10cc3c010a37be70b30c6aa91513bd570ec5", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1754,9 +1754,6 @@ typedef struct rs6000_args\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   rs6000_va_start (valist, nextarg)\n \n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) (abort (), NULL_RTX)\n-\n #define PAD_VARARGS_DOWN \\\n    (FUNCTION_ARG_PADDING (TYPE_MODE (type), type) == downward)\n "}, {"sha": "f4d91fa13bb9f3b38f5f0459c4ccedaf2816cc68", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -704,10 +704,6 @@ CUMULATIVE_ARGS;\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   s390_va_start (valist, nextarg)\n \n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  (abort (), NULL_RTX)\n-\n-\n /* Trampolines for nested functions.  */\n \n #define TRAMPOLINE_SIZE (TARGET_64BIT ? 36 : 20)"}, {"sha": "db72f3511114172f55107a13278df39c527f67c3", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1860,9 +1860,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   sparc_va_start (valist, nextarg)\n \n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) (abort (), NULL_RTX)\n-\n /* Generate RTL to flush the register windows so as to make arbitrary frames\n    available.  */\n #define SETUP_FRAME_ADDRESSES()\t\t\\"}, {"sha": "30c58d6511e7747118523c6210cf407a59c56bb4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -3882,16 +3882,6 @@ This hook performs target-specific gimplification of\n @code{VA_ARG_EXPR}.  The first two parameters correspond to the\n arguments to @code{va_arg}; the latter two are as in\n @code{gimplify.c:gimplify_expr}.\n-\n-You only need to define this hook if you previously defined\n-@code{EXPAND_BUILTIN_VA_ARG}; it is pretty easy to reuse the same code\n-for both.  One significant difference is that\n-@code{EXPAND_BUILTIN_VA_ARG} returns an address, whereas this hook\n-produces an expression of type @var{type}, usually an @code{INDIRECT_REF}.\n-\n-Once you define this macro, you can change\n-@code{EXPAND_BUILTIN_VA_ARG} to just abort, as it should never be\n-called.\n @end deftypefn\n \n @node Scalar Return"}, {"sha": "417f69cfccced7fd809b80b928bebc70f7793e4c", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -8541,12 +8541,10 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case WITH_CLEANUP_EXPR:\n     case CLEANUP_POINT_EXPR:\n     case TARGET_EXPR:\n+    case VA_ARG_EXPR:\n       /* Lowered by gimplify.c.  */\n       abort ();\n \n-    case VA_ARG_EXPR:\n-      return expand_builtin_va_arg (TREE_OPERAND (exp, 0), type);\n-\n     case EXC_PTR_EXPR:\n       return get_exception_pointer (cfun);\n "}, {"sha": "d3fab31fb4ab4b9a497933f9f8619af3a2566c0a", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -351,8 +351,6 @@ extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);\n extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern tree std_build_builtin_va_list (void);\n extern void std_expand_builtin_va_start (tree, rtx);\n-extern rtx std_expand_builtin_va_arg (tree, tree);\n-extern rtx expand_builtin_va_arg (tree, tree);\n extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);"}, {"sha": "f164bd92ef133a69949f18a90dd46dab5be970b7", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -195,7 +195,6 @@ lower_stmt (tree_stmt_iterator *tsi, struct lower_data *data)\n     case CALL_EXPR:\n     case GOTO_EXPR:\n     case LABEL_EXPR:\n-    case VA_ARG_EXPR:\n     case SWITCH_EXPR:\n       break;\n "}, {"sha": "34f1b3e4dc2f288459d3389d0f92ca4a2ecb934d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -608,20 +608,6 @@ mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)\n   return NULL_TREE;\n }\n \n-/* Mark all the _DECL nodes under *TP as volatile.  FIXME: This must die\n-   after VA_ARG_EXPRs are properly lowered.  */\n-\n-static tree\n-mark_decls_volatile_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t       void *data ATTRIBUTE_UNUSED)\n-{\n-  if (SSA_VAR_P (*tp))\n-    TREE_THIS_VOLATILE (*tp) = 1;\n-\n-  return NULL_TREE;\n-}\n-\n-\n /* Callback for walk_tree to unshare most of the shared trees rooted at\n    *TP.  If *TP has been visited already (i.e., TREE_VISITED (*TP) == 1),\n    then *TP is deep copied by calling copy_tree_r.\n@@ -662,23 +648,7 @@ copy_if_shared_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n \n   /* Otherwise, mark the tree as visited and keep looking.  */\n   else\n-    {\n-      TREE_VISITED (t) = 1;\n-      if (TREE_CODE (*tp) == VA_ARG_EXPR\n-\t  && targetm.gimplify_va_arg_expr == NULL)\n-\t{\n-\t  /* Mark any _DECL inside the operand as volatile to avoid\n-\t     the optimizers messing around with it. We have to do this\n-\t     early, otherwise we might mark a variable as volatile\n-\t     after we gimplify other statements that use the variable\n-\t     assuming it's not volatile.  */\n-\n-\t  /* FIXME once most targets define the above hook, this should\n-\t     go away (perhaps along with the #include \"target.h\").  */\n-\t  walk_tree (&TREE_OPERAND (*tp, 0), mark_decls_volatile_r,\n-\t\t     NULL, NULL);\n-\t}\n-    }\n+    TREE_VISITED (t) = 1;\n \n   return NULL_TREE;\n }"}, {"sha": "dfc8b089c7128db74f9caf519c2363b125c37ce0", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -623,7 +623,7 @@ extern int snprintf (char *, size_t, const char *, ...);\n \tDBX_OUTPUT_STANDARD_TYPES BUILTIN_SETJMP_FRAME_VALUE\t\t   \\\n \tSUNOS4_SHARED_LIBRARIES PROMOTE_FOR_CALL_ONLY\t\t\t   \\\n \tSPACE_AFTER_L_OPTION NO_RECURSIVE_FUNCTION_CSE\t\t\t   \\\n-\tDEFAULT_MAIN_RETURN TARGET_MEM_FUNCTIONS\n+\tDEFAULT_MAIN_RETURN TARGET_MEM_FUNCTIONS EXPAND_BUILTIN_VA_ARG\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "242d5351d34200d845496a07383263038c9b9ce6", "filename": "gcc/target-def.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -359,13 +359,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   default_pretend_outgoing_varargs_named\n #define TARGET_SPLIT_COMPLEX_ARG NULL\n \n-#ifdef EXPAND_BUILTIN_VA_ARG\n-/* If there's a target-specific va_arg expander, there needs to be a\n-   target-specific gimplifier.  */\n-#define TARGET_GIMPLIFY_VA_ARG_EXPR NULL\n-#else\n #define TARGET_GIMPLIFY_VA_ARG_EXPR std_gimplify_va_arg_expr\n-#endif\n \n #define TARGET_PASS_BY_REFERENCE hook_pass_by_reference_false\n "}, {"sha": "f3df4e2c221d649adadc19845e72ebbbe9ec734a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -1734,11 +1734,8 @@ cfg_remove_useless_stmts_bb (basic_block bb)\n \n       /* Invalidate the var if we encounter something that could modify it.  */\n       if (TREE_CODE (stmt) == ASM_EXPR\n-\t  || TREE_CODE (stmt) == VA_ARG_EXPR\n \t  || (TREE_CODE (stmt) == MODIFY_EXPR\n-\t      && (TREE_OPERAND (stmt, 0) == var\n-\t\t  || TREE_OPERAND (stmt, 0) == val\n-\t\t  || TREE_CODE (TREE_OPERAND (stmt, 1)) == VA_ARG_EXPR)))\n+\t      && TREE_OPERAND (stmt, 0) == var))\n \treturn;\n   \n       bsi_next (&bsi);"}, {"sha": "488173fb6205c180164aa4c31833d4c3de04e25d", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -219,8 +219,6 @@ is_gimple_tmp_rhs (tree t)\n     case CALL_EXPR:\n     case CONSTRUCTOR:\n     case COMPLEX_EXPR:\n-      /* FIXME lower VA_ARG_EXPR.  */\n-    case VA_ARG_EXPR:\n     case INTEGER_CST:\n     case REAL_CST:\n     case STRING_CST:\n@@ -389,10 +387,6 @@ is_gimple_stmt (tree t)\n       /* These are always void.  */\n       return true;\n \n-    case VA_ARG_EXPR:\n-      /* FIXME this should be lowered.  */\n-      return true;\n-\n     case CALL_EXPR:\n     case MODIFY_EXPR:\n       /* These are valid regardless of their type.  */"}, {"sha": "c1c967a53a9f23f71e4ab9e7cef46cf0e551060c", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77c9db7751b8239833f152701b7cde02569859e0/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=77c9db7751b8239833f152701b7cde02569859e0", "patch": "@@ -808,8 +808,8 @@ get_stmt_operands (tree stmt)\n     default:\n       /* Notice that if get_expr_operands tries to use &STMT as the operand\n \t pointer (which may only happen for USE operands), we will abort in\n-\t append_use.  This default will handle statements like empty statements,\n-\t CALL_EXPRs or VA_ARG_EXPRs that may appear on the RHS of a statement\n+\t append_use.  This default will handle statements like empty\n+\t statements, or CALL_EXPRs that may appear on the RHS of a statement\n \t or as statements themselves.  */\n       get_expr_operands (stmt, &stmt, opf_none, &prev_vops);\n       break;\n@@ -964,13 +964,6 @@ get_expr_operands (tree stmt, tree *expr_p, int flags, voperands_t prev_vops)\n \treturn;\n       }\n \n-    case VA_ARG_EXPR:\n-      /* Mark VA_ARG_EXPR nodes as making volatile references.  FIXME,\n-\t this is needed because we currently do not gimplify VA_ARG_EXPR\n-\t properly.  */\n-      stmt_ann (stmt)->has_volatile_ops = true;\n-      return;\n-\n     case CONSTRUCTOR:\n       {\n \t/* General aggregate CONSTRUCTORs have been decomposed, but they"}]}