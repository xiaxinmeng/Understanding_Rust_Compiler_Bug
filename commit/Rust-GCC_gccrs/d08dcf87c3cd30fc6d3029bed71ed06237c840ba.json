{"sha": "d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA4ZGNmODdjM2NkMzBmYzZkMzAyOWJlZDcxZWQwNjIzN2M4NDBiYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-13T18:53:28Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-13T18:53:28Z"}, "message": "cpplex.c (_cpp_clean_line): In the common case of a line with no trigraphs and no \\-newline...\n\n\t* cpplex.c (_cpp_clean_line): In the common case of a line\n\twith no trigraphs and no \\-newline, avoid writing to memory.\n\t(_cpp_skip_block_comment): Use a local 'cur' pointer instead\n\tof the buffer member.  Make c an uchar to avoid unnecessary\n\tsign extensions.\n\nFrom-SVN: r72437", "tree": {"sha": "c72adc0c25b99cd7a460fe815b5e09afa77b4622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72adc0c25b99cd7a460fe815b5e09afa77b4622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08dcf87c3cd30fc6d3029bed71ed06237c840ba/comments", "author": null, "committer": null, "parents": [{"sha": "b1ef58c8faace79193bb064f8034b422beb7fb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ef58c8faace79193bb064f8034b422beb7fb46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ef58c8faace79193bb064f8034b422beb7fb46"}], "stats": {"total": 101, "additions": 83, "deletions": 18}, "files": [{"sha": "584fd728130a9ca8ae8650143d0e0805c29b746a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08dcf87c3cd30fc6d3029bed71ed06237c840ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08dcf87c3cd30fc6d3029bed71ed06237c840ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "patch": "@@ -1,3 +1,11 @@\n+2003-10-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cpplex.c (_cpp_clean_line): In the common case of a line\n+\twith no trigraphs and no \\-newline, avoid writing to memory.\n+\t(_cpp_skip_block_comment): Use a local 'cur' pointer instead\n+\tof the buffer member.  Make c an uchar to avoid unnecessary\n+\tsign extensions.\n+\n 2003-10-13  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure.in: Remove unnecessary test.\n@@ -9,13 +17,13 @@\n \n 2003-10-13  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* config/s390/s390.md (\"*fmadddf4\", \"*fmsubdf4\", \"*fmaddsf4\", \n+\t* config/s390/s390.md (\"*fmadddf4\", \"*fmsubdf4\", \"*fmaddsf4\",\n \t\"*fmsubsf4\"): Insns are now dependent on TARGET_FUSED_MADD instead\n \tof flag_unsafe_math_optimizations.\n \t* config/s390/s390.h (\"MASK_NO_FUSED_MADD\", \"TARGET_NO_FUSED_MADD\",\n \t\"TARGET_FUSED_MADD\", \"TARGET_SWITCHES\"): Introduced new target flags\n \tfused-madd and no-fused-madd.\n-\t* doc/invoke.texi: Documented the new options fused-madd and \n+\t* doc/invoke.texi: Documented the new options fused-madd and\n \tno-fused-madd for S/390.\n \n 2003-10-14  Alan Modra  <amodra@bigpond.net.au>\n@@ -123,7 +131,7 @@\n \tand the signed type would overflow.  Always negate real constants\n \tunless we honor -ftrapping-math.  Only convert -(A-B) into B-A\n \tif allowed by reorder_operands_p.  Add support for COMPLEX_CST.\n-\tOptimize negation through floating point extensions and \n+\tOptimize negation through floating point extensions and\n \tsign-preserving built-in functions (as defined by negate_mathfn_p).\n \t(fold): Adjust calls to tree_swap_operands_p.\n \t(fold <NEGATE_EXPR>): Move the remaining negation optimizations\n@@ -226,7 +234,7 @@ Sat Oct 11 12:24:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tpoint optimizations with -funsafe-math-optimizations.\n \n 2003-10-11  Andrew Pinski <pinskia@physics.uc.edu>\n-\t\n+\n \t* genmodes.c (emit_mode_mask) Change MASK to MODE_MASK.\n \n 2003-10-11  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -298,7 +306,7 @@ Sat Oct 11 12:24:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t    Paul Dale  <pauli@snapgear.com>\n \n \t* config/m68k/lb1sf68.asm: Add __PIC__ and __ID_SHARED_LIBRARY__\n-\tsupport. \n+\tsupport.\n \t* config/m68k/m68k-none.h (ASM_SPEC): Pass --pcrel to assembler on\n \t-fpic, -fPIC, -msep-data and -mid-shared-library.\n \t* config/m68k/m68k.c (m68k_library_id_string): New global variable."}, {"sha": "3701415aa326d463105c67abadc2672c6207c30e", "filename": "gcc/cpplex.c", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d08dcf87c3cd30fc6d3029bed71ed06237c840ba/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d08dcf87c3cd30fc6d3029bed71ed06237c840ba/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=d08dcf87c3cd30fc6d3029bed71ed06237c840ba", "patch": "@@ -114,7 +114,57 @@ _cpp_clean_line (cpp_reader *pfile)\n \n   if (!buffer->from_stage3)\n     {\n-      d = (uchar *) s;\n+      /* Short circuit for the common case of an un-escaped line with\n+\t no trigraphs.  The primary win here is by not writing any\n+\t data back to memory until we have to.  */\n+      for (;;)\n+\t{\n+\t  c = *++s;\n+\t  if (c == '\\n' || c == '\\r')\n+\t    {\n+\t      d = (uchar *) s;\n+\n+\t      if (s == buffer->rlimit)\n+\t\tgoto done;\n+\n+\t      /* DOS line ending? */\n+\t      if (c == '\\r' && s[1] == '\\n')\n+\t\ts++;\n+\n+\t      if (s == buffer->rlimit)\n+\t\tgoto done;\n+\n+\t      /* check for escaped newline */\n+\t      p = d;\n+\t      while (p != buffer->next_line && is_nvspace (p[-1]))\n+\t\tp--;\n+\t      if (p == buffer->next_line || p[-1] != '\\\\')\n+\t\tgoto done;\n+\n+\t      /* Have an escaped newline; process it and proceed to\n+\t\t the slow path.  */\n+\t      add_line_note (buffer, p - 1, p != d ? ' ' : '\\\\');\n+\t      d = p - 2;\n+\t      buffer->next_line = p - 1;\n+\t      break;\n+\t    }\n+\t  if (c == '?' && s[1] == '?' && _cpp_trigraph_map[s[2]])\n+\t    {\n+\t      /* Have a trigraph.  We may or may not have to convert\n+\t\t it.  Add a line note regardless, for -Wtrigraphs.  */\n+\t      add_line_note (buffer, s, s[2]);\n+\t      if (CPP_OPTION (pfile, trigraphs))\n+\t\t{\n+\t\t  /* We do, and that means we have to switch to the\n+\t\t     slow path.  */\n+\t\t  d = (uchar *) s;\n+\t\t  *d = _cpp_trigraph_map[s[2]];\n+\t\t  s += 2;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+\n \n       for (;;)\n \t{\n@@ -164,6 +214,7 @@ _cpp_clean_line (cpp_reader *pfile)\n \ts++;\n     }\n \n+ done:\n   *d = '\\n';\n   /* A sentinel note that should never be processed.  */\n   add_line_note (buffer, d + 1, '\\n');\n@@ -266,43 +317,49 @@ bool\n _cpp_skip_block_comment (cpp_reader *pfile)\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  cppchar_t c;\n+  const uchar *cur = buffer->cur;\n+  uchar c;\n \n-  buffer->cur++;\n-  if (*buffer->cur == '/')\n-    buffer->cur++;\n+  cur++;\n+  if (*cur == '/')\n+    cur++;\n \n   for (;;)\n     {\n-      c = *buffer->cur++;\n-\n       /* People like decorating comments with '*', so check for '/'\n \t instead for efficiency.  */\n+      c = *cur++;\n+\n       if (c == '/')\n \t{\n-\t  if (buffer->cur[-2] == '*')\n+\t  if (cur[-2] == '*')\n \t    break;\n \n \t  /* Warn about potential nested comments, but not if the '/'\n \t     comes immediately before the true comment delimiter.\n \t     Don't bother to get it right across escaped newlines.  */\n \t  if (CPP_OPTION (pfile, warn_comments)\n-\t      && buffer->cur[0] == '*' && buffer->cur[1] != '/')\n-\t    cpp_error_with_line (pfile, DL_WARNING,\n-\t\t\t\t pfile->line, CPP_BUF_COL (buffer),\n-\t\t\t\t \"\\\"/*\\\" within comment\");\n+\t      && cur[0] == '*' && cur[1] != '/')\n+\t    {\n+\t      buffer->cur = cur;\n+\t      cpp_error_with_line (pfile, DL_WARNING,\n+\t\t\t\t   pfile->line, CPP_BUF_COL (buffer),\n+\t\t\t\t   \"\\\"/*\\\" within comment\");\n+\t    }\n \t}\n       else if (c == '\\n')\n \t{\n-\t  buffer->cur--;\n+\t  buffer->cur = cur - 1;\n \t  _cpp_process_line_notes (pfile, true);\n \t  if (buffer->next_line >= buffer->rlimit)\n \t    return true;\n \t  _cpp_clean_line (pfile);\n \t  pfile->line++;\n+\t  cur = buffer->cur;\n \t}\n     }\n \n+  buffer->cur = cur;\n   _cpp_process_line_notes (pfile, true);\n   return false;\n }"}]}