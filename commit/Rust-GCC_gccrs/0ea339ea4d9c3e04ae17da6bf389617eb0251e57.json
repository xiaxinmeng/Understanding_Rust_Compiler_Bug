{"sha": "0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhMzM5ZWE0ZDljM2UwNGFlMTdkYTZiZjM4OTYxN2ViMDI1MWU1Nw==", "commit": {"author": {"name": "Nigel Stephens", "email": "nigel@mips.com", "date": "2007-08-01T06:21:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-08-01T06:21:43Z"}, "message": "2007-xx-xx Nigel Stephens <nigel@mips.com> David Ung <davidu@mips.com> Thiemo...\n\ngcc/\n2007-xx-xx  Nigel Stephens  <nigel@mips.com>\n\t    David Ung  <davidu@mips.com>\n\t    Thiemo Seufer  <ths@mips.com>\n\t    Chris Dearman  <chris@mips.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* config.gcc (mips*-sde-elf*): New stanza.\n\t(mipsisa32-*-elf*, mipsisa32el-*-elf*, mipsisa32r2-*-elf*)\n\t(mipsisa32r2el-*-elf*, mipsisa64-*-elf*, mipsisa64el-*-elf*)\n\t(mipsisa64sb1-*-elf*, mipsisa64sb1el-*-elf*, mips-*-elf*)\n\t(mipsel-*-elf*, mips64-*-elf*, mips64el-*-elf*, mips64orion-*-elf*)\n\t(mips64orionel-*-elf*, mips*-*-rtems*, mips-wrs-windiss)\n\t(mipstx39-*-elf*, mipstx39el-*-elf*): Add mips/t-libgcc-mips16\n\tto tmake_file.\n\t* config/mips/sde.h: New file.\n\t* config/mips/t-libgcc-mips16: Likewise.\n\t* config/mips/t-sde: Likewise.\n\t* config/mips/linux.h (TARGET_OS_CPP_BUILTINS): Remove settings\n\tof _ABIN32, _ABI64, _ABIO32, _MIPS_SIM, _MIPS_SZLONG, _MIPS_SZPTR,\n\t_MIPS_FPSET and _MIPS_SZINT.\n\t* config/mips/iris.h (TARGET_OS_CPP_BUILTINS): Likewise.\n\t* config/mips/elfoabi.h (DRIVER_SELF_SPECS): Remove separate\n\tinsertion of a default -mips option.  Use MIPS_32BIT_OPTION_SPEC.\n\t* config/mips/t-isa3264 (LIB1ASMSRC, LIB1ASMFUNCS): Delete.\n\t* config/mips/t-r3900 (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\t* config/mips/t-elf (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\t* config/mips/mips.h (TARGET_CPU_CPP_BUITINS): Define _ABIO32,\n\t_ABIN32, _ABI64, _ABIO64, _MIPS_SIM, _MIPS_SZINT, _MIPS_SZLONG,\n\t_MIPS_SZPTR and _MIPS_FPSET.\n\t(MIPS_ISA_LEVEL_SPEC): Inject the default -mips option if no\n\tarchitecture is specified.\n\t(MIPS_32BIT_OPTION_SPEC): New macro.\n\nCo-Authored-By: Chris Dearman <chris@mips.com>\nCo-Authored-By: David Ung <davidu@mips.com>\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\nCo-Authored-By: Thiemo Seufer <ths@mips.com>\n\nFrom-SVN: r127113", "tree": {"sha": "f5bd2232a22aa998ac1549f623c8f4639aa3e821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5bd2232a22aa998ac1549f623c8f4639aa3e821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/comments", "author": null, "committer": null, "parents": [{"sha": "ff4aaa0c8a3dd2bc976c3e99eecbfbbc89fbcb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4aaa0c8a3dd2bc976c3e99eecbfbbc89fbcb73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4aaa0c8a3dd2bc976c3e99eecbfbbc89fbcb73"}], "stats": {"total": 756, "additions": 462, "deletions": 294}, "files": [{"sha": "9d610378334bd902037f67d2c5e67172e247816a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -1,3 +1,36 @@\n+2007-08-01  Nigel Stephens  <nigel@mips.com>\n+\t    David Ung  <davidu@mips.com>\n+\t    Thiemo Seufer  <ths@mips.com>\n+\t    Chris Dearman  <chris@mips.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config.gcc (mips*-sde-elf*): New stanza.\n+\t(mipsisa32-*-elf*, mipsisa32el-*-elf*, mipsisa32r2-*-elf*)\n+\t(mipsisa32r2el-*-elf*, mipsisa64-*-elf*, mipsisa64el-*-elf*)\n+\t(mipsisa64sb1-*-elf*, mipsisa64sb1el-*-elf*, mips-*-elf*)\n+\t(mipsel-*-elf*, mips64-*-elf*, mips64el-*-elf*, mips64orion-*-elf*)\n+\t(mips64orionel-*-elf*, mips*-*-rtems*, mips-wrs-windiss)\n+\t(mipstx39-*-elf*, mipstx39el-*-elf*): Add mips/t-libgcc-mips16\n+\tto tmake_file.\n+\t* config/mips/sde.h: New file.\n+\t* config/mips/t-libgcc-mips16: Likewise.\n+\t* config/mips/t-sde: Likewise.\n+\t* config/mips/linux.h (TARGET_OS_CPP_BUILTINS): Remove settings\n+\tof _ABIN32, _ABI64, _ABIO32, _MIPS_SIM, _MIPS_SZLONG, _MIPS_SZPTR,\n+\t_MIPS_FPSET and _MIPS_SZINT.\n+\t* config/mips/iris.h (TARGET_OS_CPP_BUILTINS): Likewise.\n+\t* config/mips/elfoabi.h (DRIVER_SELF_SPECS): Remove separate\n+\tinsertion of a default -mips option.  Use MIPS_32BIT_OPTION_SPEC.\n+\t* config/mips/t-isa3264 (LIB1ASMSRC, LIB1ASMFUNCS): Delete.\n+\t* config/mips/t-r3900 (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\t* config/mips/t-elf (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUITINS): Define _ABIO32,\n+\t_ABIN32, _ABI64, _ABIO64, _MIPS_SIM, _MIPS_SZINT, _MIPS_SZLONG,\n+\t_MIPS_SZPTR and _MIPS_FPSET.\n+\t(MIPS_ISA_LEVEL_SPEC): Inject the default -mips option if no\n+\tarchitecture is specified.\n+\t(MIPS_32BIT_OPTION_SPEC): New macro.\n+\n 2007-07-31  Dan Hipschman  <dsh@google.com>\n \n \t* gcc.c (end_going_arg): New function."}, {"sha": "b7bc0720bfbc9110b6dd8a85fa614418e700b2a5", "filename": "gcc/config.gcc", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -1678,11 +1678,26 @@ mips*-*-openbsd*)\n \t*)  tm_defines=\"${tm_defines} TARGET_ENDIAN_DEFAULT=MASK_BIG_ENDIAN\";;\n         esac\n \t;;\n+mips*-sde-elf*)\n+\ttm_file=\"elfos.h ${tm_file} mips/elf.h mips/sde.h\"\n+\ttmake_file=\"mips/t-sde mips/t-libgcc-mips16\"\n+\tcase ${target} in\n+\t  mipsisa32r2*)\n+\t    tm_defines=\"MIPS_ISA_DEFAULT=33 MIPS_ABI_DEFAULT=ABI_32\"\n+\t    ;;\n+\t  mipsisa32*)\n+\t    tm_defines=\"MIPS_ISA_DEFAULT=32 MIPS_ABI_DEFAULT=ABI_32\"\n+\t    ;;\n+\t  mipsisa64*)\n+\t    tm_defines=\"MIPS_ISA_DEFAULT=64 MIPS_ABI_DEFAULT=ABI_N32\"\n+\t    ;;\n+\tesac\n+\t;;\n mipsisa32-*-elf* | mipsisa32el-*-elf* | \\\n mipsisa32r2-*-elf* | mipsisa32r2el-*-elf* | \\\n mipsisa64-*-elf* | mipsisa64el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n-\ttmake_file=mips/t-isa3264\n+\ttmake_file=\"mips/t-isa3264 mips/t-libgcc-mips16\"\n \tcase ${target} in\n \t  mipsisa32r2*)\n \t    tm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=33\"\n@@ -1717,19 +1732,19 @@ mipsisa64sr71k-*-elf*)\n         ;;\n mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n-\ttmake_file=\"mips/t-elf mips/t-sb1\"\n+\ttmake_file=\"mips/t-elf mips/t-libgcc-mips16 mips/t-sb1\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=64 MIPS_CPU_STRING_DEFAULT=\\\\\\\"sb1\\\\\\\" MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n \t;;\n mips-*-elf* | mipsel-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n-\ttmake_file=mips/t-elf\n+\ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \tuse_fixproto=yes\n \t;;\n mips64-*-elf* | mips64el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h\"\n-\ttmake_file=mips/t-elf\n+\ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n@@ -1741,14 +1756,14 @@ mips64vr-*-elf* | mips64vrel-*-elf*)\n         ;;\n mips64orion-*-elf* | mips64orionel-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/elforion.h mips/elf.h\"\n-\ttmake_file=mips/t-elf\n+\ttmake_file=\"mips/t-elf mips/t-libgcc-mips16\"\n \ttarget_cpu_default=\"MASK_64BIT|MASK_FLOAT64\"\n \ttm_defines=\"${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_O64\"\n \tuse_fixproto=yes\n \t;;\n mips*-*-rtems*)\n \ttm_file=\"elfos.h ${tm_file} mips/elf.h mips/rtems.h rtems.h\"\n-\ttmake_file=\"mips/t-elf t-rtems mips/t-rtems\"\n+\ttmake_file=\"mips/t-elf mips/t-libgcc-mips16 t-rtems mips/t-rtems\"\n \t;;\n mips-wrs-vxworks)\n \ttm_file=\"elfos.h ${tm_file} svr4.h mips/elf.h vx-common.h vxworks.h mips/vxworks.h\"\n@@ -1757,12 +1772,12 @@ mips-wrs-vxworks)\n mips-wrs-windiss)\t# Instruction-level simulator for VxWorks.\n \txm_defines=POSIX\n \ttm_file=\"elfos.h mips/mips.h svr4.h mips/elf.h windiss.h mips/windiss.h\"\n-\ttmake_file=\"${tmake_file} mips/t-elf\"\n+\ttmake_file=\"${tmake_file} mips/t-elf mips/t-libgcc-mips16\"\n \tthread_file=\n \t;;\n mipstx39-*-elf* | mipstx39el-*-elf*)\n \ttm_file=\"elfos.h ${tm_file} mips/r3900.h mips/elf.h\"\n-\ttmake_file=mips/t-r3900\n+\ttmake_file=\"mips/t-r3900 mips/t-libgcc-mips16\"\n \tuse_fixproto=yes\n \t;;\n mmix-knuth-mmixware)"}, {"sha": "69930e2558b53f80641ebc2208004e38776275c2", "filename": "gcc/config/mips/elfoabi.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Felfoabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Felfoabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felfoabi.h?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -21,19 +21,14 @@ the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n #define DRIVER_SELF_SPECS\t\t\t\t\t\t\\\n-  /* Infer a -mips option from a -march option.  This makes\t\t\\\n-     -march pick the right multilib, and also makes the later\t\t\\\n-     specs easier to write.  */\t\t\t\t\t\t\\\n+  /* Make sure a -mips option is present.  This helps us to pick\t\\\n+     the right multilib, and also makes the later specs easier\t\t\\\n+     to write.  */\t\t\t\t\t\t\t\\\n   MIPS_ISA_LEVEL_SPEC,\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  /* If no architecture option is specified, force the default to\t\\\n-     be listed explicitly.  This too makes later specs easier to\t\\\n-     write.  */\t\t\t\t\t\t\t       \t\\\n-  \"%{\" MIPS_ISA_LEVEL_OPTION_SPEC \":;: -\" MULTILIB_ISA_DEFAULT \"}\",\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   /* If no ABI option is specified, infer one from the ISA level\t\\\n      or -mgp setting.  */\t\t\t\t\t\t\\\n-  \"%{!mabi=*: %{mips1|mips2|mips32*|mgp32: -mabi=32;: -mabi=o64}}\",\t\\\n+  \"%{!mabi=*: %{\" MIPS_32BIT_OPTION_SPEC \": -mabi=32;: -mabi=o64}}\"\t\\\n \t\t\t\t\t\t\t\t\t\\\n   /* Remove a redundant -mfp64 for -mabi=o64; we want the !mfp64\t\\\n      multilibs.  There's no need to check whether the architecture\t\\"}, {"sha": "c71df499b3709567323e1762feb74cd4106396d9", "filename": "gcc/config/mips/iris.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Firis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Firis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis.h?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -100,39 +100,9 @@ Boston, MA 02110-1301, USA.  */\n       builtin_assert (\"system=svr4\");\t\t\t\t\\\n       builtin_assert (\"machine=sgi\");\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-      if (mips_abi == ABI_32)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_ABIO32=1\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_SIM=_ABIO32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZINT=32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (mips_abi == ABI_64)\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_ABI64=3\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_SIM=_ABI64\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZINT=32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZLONG=64\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZPTR=64\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_ABIN32=2\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_SIM=_ABIN32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZINT=32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n       if (!ISA_MIPS1 && !ISA_MIPS2)\t\t\t\t\\\n \tbuiltin_define (\"_COMPILER_VERSION=601\");\t\t\\\n \t\t\t\t\t\t\t\t\\\n-      if (!TARGET_FLOAT64)\t\t\t\t\t\\\n-\tbuiltin_define (\"_MIPS_FPSET=16\");\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"_MIPS_FPSET=32\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n       /* We must always define _LONGLONG, even when -ansi is\t\\\n \t used, because IRIX 5 system header files require it.\t\\\n \t This is OK, because gcc never warns when long long\t\\"}, {"sha": "024b5c5a027be5bbfff78f9f90b0825f56b659a7", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -59,34 +59,6 @@ Boston, MA 02110-1301, USA.  */\n     /* The GNU C++ standard library requires this.  */\t\t\\\n     if (c_dialect_cxx ())\t\t\t\t\t\\\n       builtin_define (\"_GNU_SOURCE\");\t\t\t\t\\\n-    \t\t\t\t\t\t\t\t\\\n-    if (mips_abi == ABI_N32)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        builtin_define (\"_ABIN32=2\");\t\t\t\t\\\n-        builtin_define (\"_MIPS_SIM=_ABIN32\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else if (mips_abi == ABI_64)\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        builtin_define (\"_ABI64=3\");\t\t\t\t\\\n-        builtin_define (\"_MIPS_SIM=_ABI64\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZLONG=64\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZPTR=64\");\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"_ABIO32=1\");\t\t\t\t\\\n-\tbuiltin_define (\"_MIPS_SIM=_ABIO32\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZLONG=32\");\t\t\t\\\n-        builtin_define (\"_MIPS_SZPTR=32\");\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    if (TARGET_FLOAT64)\t\t\t\t\t\t\\\n-      builtin_define (\"_MIPS_FPSET=32\");\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      builtin_define (\"_MIPS_FPSET=16\");\t\t\t\\\n-    \t\t\t\t\t\t\t\t\\\n-    builtin_define (\"_MIPS_SZINT=32\");\t\t\t\t\\\n   } while (0)\n \n #undef SUBTARGET_CPP_SPEC"}, {"sha": "fa1a1384830f0ecb6c973b5387077d5989c5209d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 196, "deletions": 159, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -328,163 +328,192 @@ extern const struct mips_rtx_cost_data *mips_cost;\n   while (0)\n \n /* Target CPU builtins.  */\n-#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      /* Everyone but IRIX defines this to mips.  */            \\\n-      if (!TARGET_IRIX)                                         \\\n-        builtin_assert (\"machine=mips\");                        \\\n-                                                                \\\n-      builtin_assert (\"cpu=mips\");\t\t\t\t\\\n-      builtin_define (\"__mips__\");     \t\t\t\t\\\n-      builtin_define (\"_mips\");\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* We do this here because __mips is defined below\t\\\n-\t and so we can't use builtin_define_std.  */\t\t\\\n-      if (!flag_iso)\t\t\t\t\t\t\\\n-\tbuiltin_define (\"mips\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_64BIT)\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips64\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (!TARGET_IRIX)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  /* Treat _R3000 and _R4000 like register-size\t\t\\\n-\t     defines, which is how they've historically\t\t\\\n-\t     been used.  */\t\t\t\t\t\\\n-\t  if (TARGET_64BIT)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      builtin_define_std (\"R4000\");\t\t\t\\\n-\t      builtin_define (\"_R4000\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      builtin_define_std (\"R3000\");\t\t\t\\\n-\t      builtin_define (\"_R3000\");\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      if (TARGET_FLOAT64)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_fpr=64\");\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_fpr=32\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_MIPS16)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips16\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_MIPS3D)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips3d\");\t\t\t\t\\\n-                                                                \\\n-      if (TARGET_SMARTMIPS)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_smartmips\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_DSP)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_dsp\");\t\t\t\\\n-\t  if (TARGET_DSPR2)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      builtin_define (\"__mips_dspr2\");\t\t\t\\\n-\t      builtin_define (\"__mips_dsp_rev=2\");\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"__mips_dsp_rev=1\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      MIPS_CPP_SET_PROCESSOR (\"_MIPS_ARCH\", mips_arch_info);\t\\\n-      MIPS_CPP_SET_PROCESSOR (\"_MIPS_TUNE\", mips_tune_info);\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (ISA_MIPS1)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=1\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS1\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS2)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=2\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS2\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS3)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=3\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS3\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS4)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=4\");\t\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS4\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS32R2)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (ISA_MIPS64)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"__mips=64\");\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n-\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\\\n-\t}\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      /* These defines reflect the ABI in use, not whether the  \\\n-\t FPU is directly accessible.  */\t\t\t\\\n-      if (TARGET_HARD_FLOAT_ABI)\t\t\t\t\\\n-\tbuiltin_define (\"__mips_hard_float\");\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_soft_float\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_single_float\");\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_PAIRED_SINGLE_FLOAT)\t\t\t\t\\\n-\tbuiltin_define (\"__mips_paired_single_float\");\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define_std (\"MIPSEB\");\t\t\t\\\n-\t  builtin_define (\"_MIPSEB\");\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  builtin_define_std (\"MIPSEL\");\t\t\t\\\n-\t  builtin_define (\"_MIPSEL\");\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-        /* Macros dependent on the C dialect.  */\t\t\\\n-      if (preprocessing_asm_p ())\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-          builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\t\\\n-\t  builtin_define (\"_LANGUAGE_ASSEMBLY\");\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (c_dialect_cxx ())\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_LANGUAGE_C_PLUS_PLUS\");\t\t\\\n-          builtin_define (\"__LANGUAGE_C_PLUS_PLUS\");\t\t\\\n-          builtin_define (\"__LANGUAGE_C_PLUS_PLUS__\");\t\t\\\n-        }\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-          builtin_define_std (\"LANGUAGE_C\");\t\t\t\\\n-\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      if (c_dialect_objc ())\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_LANGUAGE_OBJECTIVE_C\");\t\t\\\n-          builtin_define (\"__LANGUAGE_OBJECTIVE_C\");\t\t\\\n-\t  /* Bizarre, but needed at least for Irix.  */\t\t\\\n-\t  builtin_define_std (\"LANGUAGE_C\");\t\t\t\\\n-\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      if (mips_abi == ABI_EABI)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips_eabi\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* Everyone but IRIX defines this to mips.  */            \t\\\n+      if (!TARGET_IRIX)                                         \t\\\n+\tbuiltin_assert (\"machine=mips\");                        \t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      builtin_assert (\"cpu=mips\");\t\t\t\t\t\\\n+      builtin_define (\"__mips__\");     \t\t\t\t\t\\\n+      builtin_define (\"_mips\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* We do this here because __mips is defined below\t\t\\\n+\t and so we can't use builtin_define_std.  */\t\t\t\\\n+      if (!flag_iso)\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"mips\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips64\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (!TARGET_IRIX)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* Treat _R3000 and _R4000 like register-size\t\t\t\\\n+\t     defines, which is how they've historically\t\t\t\\\n+\t     been used.  */\t\t\t\t\t\t\\\n+\t  if (TARGET_64BIT)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define_std (\"R4000\");\t\t\t\t\\\n+\t      builtin_define (\"_R4000\");\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define_std (\"R3000\");\t\t\t\t\\\n+\t      builtin_define (\"_R3000\");\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      if (TARGET_FLOAT64)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=64\");\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_fpr=32\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_MIPS16)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips16\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_MIPS3D)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips3d\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SMARTMIPS)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_smartmips\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_DSP)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_dsp\");\t\t\t\t\\\n+\t  if (TARGET_DSPR2)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      builtin_define (\"__mips_dspr2\");\t\t\t\t\\\n+\t      builtin_define (\"__mips_dsp_rev=2\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    builtin_define (\"__mips_dsp_rev=1\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      MIPS_CPP_SET_PROCESSOR (\"_MIPS_ARCH\", mips_arch_info);\t\t\\\n+      MIPS_CPP_SET_PROCESSOR (\"_MIPS_TUNE\", mips_tune_info);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (ISA_MIPS1)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=1\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS1\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS2)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=2\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS2\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS3)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=3\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS3\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS4)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=4\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS4\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS32)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS32R2)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS64)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      switch (mips_abi)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\tcase ABI_32:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_ABIO32=1\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_SIM=_ABIO32\");\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ABI_N32:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_ABIN32=2\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_SIM=_ABIN32\");\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ABI_64:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_ABI64=3\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_SIM=_ABI64\");\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tcase ABI_O64:\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_ABIO64=4\");\t\t\t\t\t\\\n+\t  builtin_define (\"_MIPS_SIM=_ABIO64\");\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      builtin_define_with_int_value (\"_MIPS_SZINT\", INT_TYPE_SIZE);\t\\\n+      builtin_define_with_int_value (\"_MIPS_SZLONG\", LONG_TYPE_SIZE);\t\\\n+      builtin_define_with_int_value (\"_MIPS_SZPTR\", POINTER_SIZE);\t\\\n+      builtin_define_with_int_value (\"_MIPS_FPSET\",\t\t\t\\\n+\t\t\t\t     32 / MAX_FPRS_PER_FMT);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* These defines reflect the ABI in use, not whether the  \t\\\n+\t FPU is directly accessible.  */\t\t\t\t\\\n+      if (TARGET_HARD_FLOAT_ABI)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_hard_float\");\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_soft_float\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_single_float\");\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_PAIRED_SINGLE_FLOAT)\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_paired_single_float\");\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (TARGET_BIG_ENDIAN)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"MIPSEB\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPSEB\");\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"MIPSEL\");\t\t\t\t\\\n+\t  builtin_define (\"_MIPSEL\");\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* Macros dependent on the C dialect.  */\t\t\t\t\\\n+      if (preprocessing_asm_p ())\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_ASSEMBLY\");\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_ASSEMBLY\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if (c_dialect_cxx ())\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C_PLUS_PLUS\");\t\t\t\\\n+\t  builtin_define (\"__LANGUAGE_C_PLUS_PLUS\");\t\t\t\\\n+\t  builtin_define (\"__LANGUAGE_C_PLUS_PLUS__\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_C\");\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      if (c_dialect_objc ())\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_OBJECTIVE_C\");\t\t\t\\\n+\t  builtin_define (\"__LANGUAGE_OBJECTIVE_C\");\t\t\t\\\n+\t  /* Bizarre, but needed at least for Irix.  */\t\t\t\\\n+\t  builtin_define_std (\"LANGUAGE_C\");\t\t\t\t\\\n+\t  builtin_define (\"_LANGUAGE_C\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (mips_abi == ABI_EABI)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_eabi\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Default target_flags if no switches are specified  */\n \n@@ -591,7 +620,8 @@ extern const struct mips_rtx_cost_data *mips_cost;\n #define MIPS_ARCH_OPTION_SPEC \\\n   MIPS_ISA_LEVEL_OPTION_SPEC \"|march=*\"\n \n-/* A spec that infers a -mips argument from an -march argument.  */\n+/* A spec that infers a -mips argument from an -march argument,\n+   or injects the default if no architecture is specified.  */\n \n #define MIPS_ISA_LEVEL_SPEC \\\n   \"%{\" MIPS_ISA_LEVEL_OPTION_SPEC \":;: \\\n@@ -602,7 +632,14 @@ extern const struct mips_rtx_cost_data *mips_cost;\n      %{march=mips32|march=4kc|march=4km|march=4kp|march=4ksc:-mips32} \\\n      %{march=mips32r2|march=m4k|march=4ke*|march=4ksd|march=24k* \\\n        |march=34k*|march=74k*: -mips32r2} \\\n-     %{march=mips64|march=5k*|march=20k*|march=sb1*|march=sr71000: -mips64}}\"\n+     %{march=mips64|march=5k*|march=20k*|march=sb1*|march=sr71000: -mips64} \\\n+     %{!march=*: -\" MULTILIB_ISA_DEFAULT \"}}\"\n+\n+/* A spec condition that matches 32-bit options.  It only works if\n+   MIPS_ISA_LEVEL_SPEC has been applied.  */\n+\n+#define MIPS_32BIT_OPTION_SPEC \\\n+  \"mips1|mips2|mips32*|mgp32\"\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-arch is ignored if -march is specified or a -mips is specified"}, {"sha": "14a161025d574f9c87f5cb6670473ba124df52d0", "filename": "gcc/config/mips/sde.h", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Fsde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Fsde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsde.h?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -0,0 +1,150 @@\n+/* Definitions of target machine for GNU compiler.\n+   MIPS SDE version.\n+   Copyright (C) 2003, 2004\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Let the -march option set soft-float.  */\n+#define MIPS_MARCH_CONTROLS_SOFT_FLOAT 1\n+\n+#define DRIVER_SELF_SPECS\t\t\t\t\t\t\\\n+  /* Make sure a -mips option is present.  This helps us to pick\t\\\n+     the right multilib, and also makes the later specs easier\t\t\\\n+     to write.  */\t\t\t\t\t\t\t\\\n+  MIPS_ISA_LEVEL_SPEC,\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* If no ABI option is specified, infer one from the ISA level\t\\\n+     or -mgp setting.  */\t\t\t\t\t\t\\\n+  \"%{!mabi=*: %{\" MIPS_32BIT_OPTION_SPEC \": -mabi=32;: -mabi=n32}}\",\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Remove a redundant -mfp64 for -mabi=n32; we want the !mfp64\t\\\n+     multilibs.  There's no need to check whether the architecture\t\\\n+     is 64-bit; cc1 will complain if it isn't.  */\t\t\t\\\n+  \"%{mabi=n32: %<mfp64}\"\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Make sure that an endian option is always present.  This makes\t\\\n+     things like LINK_SPEC easier to write.  */\t\t\t\t\\\n+  \"%{!EB:%{!EL:%(endian_spec)}}\"\n+\n+/* Use trap rather than break for all but MIPS I ISA.  Force -no-mips16,\n+   so that MIPS16 assembler code requires an explicit \".set mips16\".\n+   Very little hand-written MIPS16 assembler exists, and some build\n+   systems expect code to be assembled as non-MIPS16 even if the\n+   prevailing compiler flags select -mips16.  */\n+#undef SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC \"\\\n+%{!mips1:--trap} \\\n+%{fPIC|fpic|fPIE|fpie:%{!mips16*:-KPIC}} \\\n+%{mips16:-no-mips16}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%(endian_spec) \\\n+%{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips32r2} %{mips64} \\\n+%{bestGnum} \\\n+%{shared} %{non_shared} %{call_shared} \\\n+%{mabi=n32:-melf32%{EB:b}%{EL:l}tsmipn32} \\\n+%{mabi=64:-melf64%{EB:b}%{EL:l}tsmip} \\\n+%{mabi=32:-melf32%{EB:b}%{EL:l}tsmip}\"\n+\n+#undef DEFAULT_SIGNED_CHAR\n+#define DEFAULT_SIGNED_CHAR 0\n+\n+/* SDE-MIPS won't ever support SDB or MIPS debugging info.  */\n+#undef SDB_DEBUGGING_INFO\n+#undef MIPS_DEBUGGING_INFO\n+\n+/* Describe how we implement __builtin_eh_return.  */\n+\n+/* At the moment, nothing appears to use more than 2 EH data registers.\n+   The chosen registers must not clash with the return register ($2),\n+   EH_RETURN_STACKADJ ($3), or MIPS_EPILOGUE_TEMP ($5), and they must\n+   be general MIPS16 registers.  Pick $6 and $7.  */\n+#undef EH_RETURN_DATA_REGNO\n+#define EH_RETURN_DATA_REGNO(N) \\\n+  ((N) < 2 ? 7 - (N) : INVALID_REGNUM)\n+\n+/* Use $5 as a temporary for both MIPS16 and non-MIPS16.  */\n+#undef MIPS_EPILOGUE_TEMP_REGNUM\n+#define MIPS_EPILOGUE_TEMP_REGNUM (GP_REG_FIRST + 5)\n+\n+/* Using long will always be right for size_t and ptrdiff_t, since\n+   sizeof(long) must equal sizeof(void *), following from the setting\n+   of the -mlong64 option.  */\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"long unsigned int\"\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n+#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n+\n+/* Use standard ELF-style local labels (not '$' as on early Irix).  */\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* Use periods rather than dollar signs in special g++ assembler names.  */\n+#define NO_DOLLAR_IN_LABEL\n+\n+/* Attach a special .ident directive to the end of the file to identify\n+   the version of GCC which compiled this code.  */\n+#undef IDENT_ASM_OP\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n+\n+/* Output #ident string into the ELF .comment section, so it doesn't\n+   form part of the load image, and so that it can be stripped.  */\n+#undef ASM_OUTPUT_IDENT\n+#define ASM_OUTPUT_IDENT(STREAM, STRING) \\\n+  fprintf (STREAM, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, STRING);\n+\n+/* Currently we don't support 128bit long doubles, so for now we force\n+   n32 to be 64bit.  */\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 64\n+\n+#ifdef IN_LIBGCC2\n+#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n+#endif\n+\n+/* This version of _mcount does not pop 2 words from the stack.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n+    /* MIPS16 code passes saved $ra in $v1 instead of $at.  */\t\t\\\n+    fprintf (FILE, \"\\tmove\\t%s,%s\\n\",\t\t\t\t\t\\\n+\t     reg_names[GP_REG_FIRST + (TARGET_MIPS16 ? 3 : 1)],\t\t\\\n+\t     reg_names[GP_REG_FIRST + 31]);\t\t\t\t\\\n+    fprintf (FILE, \"\\tjal\\t_mcount\\n\");\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n+  }\n+\n+/* Force all .init and .fini entries to be 32-bit, not mips16, so that\n+   in a mixed environment they are all the same mode. The crti.asm and\n+   crtn.asm files will also be compiled as 32-bit due to the\n+   -no-mips16 flag in SUBTARGET_ASM_SPEC above. */\n+#undef CRT_CALL_STATIC_FUNCTION\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC) \\\n+   asm (SECTION_OP \"\\n\\\n+\t.set push\\n\\\n+\t.set nomips16\\n\\\n+\tjal \" USER_LABEL_PREFIX #FUNC \"\\n\\\n+\t.set pop\\n\\\n+\t\" TEXT_SECTION_ASM_OP);"}, {"sha": "55af20845f40b8bb904e18c435f8c889723362d7", "filename": "gcc/config/mips/t-elf", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-elf?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -10,26 +10,6 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n \n-LIB1ASMSRC = mips/mips16.S\n-LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n-\t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fix_truncsfsi \\\n-\t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n-\t_m16extsfdf2 _m16trdfsf2 \\\n-\t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fix_truncdfsi \\\n-\t_m16retsf _m16retdf \\\n-\t_m16retsc _m16retdc \\\n-\t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n-\t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\\n-\t_m16stubsf9 _m16stubsf10 \\\n-\t_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \\\n-\t_m16stubdf9 _m16stubdf10 \\\n-\t_m16stubsc0 _m16stubsc1 _m16stubsc2 _m16stubsc5 _m16stubsc6 \\\n-\t_m16stubsc9 _m16stubsc10 \\\n-\t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n-\t_m16stubdc9 _m16stubdc10\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0"}, {"sha": "cec7e5e64b54ed05d9d439ea9eb01369aebcd1b4", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -10,26 +10,6 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n \n-LIB1ASMSRC = mips/mips16.S\n-LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n-\t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fix_truncsfsi \\\n-\t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n-\t_m16extsfdf2 _m16trdfsf2 \\\n-\t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fix_truncdfsi \\\n-\t_m16retsf _m16retdf \\\n-\t_m16retsc _m16retdc \\\n-\t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n-\t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\\n-\t_m16stubsf9 _m16stubsf10 \\\n-\t_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \\\n-\t_m16stubdf9 _m16stubdf10 \\\n-\t_m16stubsc0 _m16stubsc1 _m16stubsc2 _m16stubsc5 _m16stubsc6 \\\n-\t_m16stubsc9 _m16stubsc10 \\\n-\t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n-\t_m16stubdc9 _m16stubdc10\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0"}, {"sha": "ba015e7aa27295daf859b6e4a472d5156fbed51f", "filename": "gcc/config/mips/t-libgcc-mips16", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -0,0 +1,19 @@\n+LIB1ASMSRC = mips/mips16.S\n+LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n+\t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n+\t_m16fltsisf _m16fix_truncsfsi \\\n+\t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n+\t_m16extsfdf2 _m16trdfsf2 \\\n+\t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n+\t_m16fltsidf _m16fix_truncdfsi \\\n+\t_m16retsf _m16retdf \\\n+\t_m16retsc _m16retdc \\\n+\t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n+\t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\\n+\t_m16stubsf9 _m16stubsf10 \\\n+\t_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \\\n+\t_m16stubdf9 _m16stubdf10 \\\n+\t_m16stubsc0 _m16stubsc1 _m16stubsc2 _m16stubsc5 _m16stubsc6 \\\n+\t_m16stubsc9 _m16stubsc10 \\\n+\t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n+\t_m16stubdc9 _m16stubdc10"}, {"sha": "b95a3731e3b18c534f8ed811ae0f9964d789faeb", "filename": "gcc/config/mips/t-r3900", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-r3900", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-r3900", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-r3900?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -1,23 +1,3 @@\n-LIB1ASMSRC = mips/mips16.S\n-LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n-\t_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \\\n-\t_m16fltsisf _m16fix_truncsfsi \\\n-\t_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \\\n-\t_m16extsfdf2 _m16trdfsf2 \\\n-\t_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \\\n-\t_m16fltsidf _m16fix_truncdfsi \\\n-\t_m16retsf _m16retdf \\\n-\t_m16retsc _m16retdc \\\n-\t_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \\\n-\t_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \\\n-\t_m16stubsf9 _m16stubsf10 \\\n-\t_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \\\n-\t_m16stubdf9 _m16stubdf10 \\\n-\t_m16stubsc0 _m16stubsc1 _m16stubsc2 _m16stubsc5 _m16stubsc6 \\\n-\t_m16stubsc9 _m16stubsc10 \\\n-\t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n-\t_m16stubdc9 _m16stubdc10\n-\n # We must build libgcc2.a with -G 0, in case the user wants to link\n # without the $gp register.\n TARGET_LIBGCC2_CFLAGS = -G 0"}, {"sha": "40c62dcc728e2766ee17efcc01da2d78020ce8e3", "filename": "gcc/config/mips/t-sde", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-sde", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea339ea4d9c3e04ae17da6bf389617eb0251e57/gcc%2Fconfig%2Fmips%2Ft-sde", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-sde?ref=0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "patch": "@@ -0,0 +1,37 @@\n+# Don't let CTOR_LIST end up in sdata section.\n+CRTSTUFF_T_CFLAGS = -G 0\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm\n+\n+# We must build libgcc2.a with -G 0, in case the user wants to link\n+# without the $gp register. Use -fno-optimize-sibling-calls in case\n+# we have a mixed mips16/non-mips16 environment where a plain \"jump\"\n+# instuction won't work across the divide (no jx instruction).\n+TARGET_LIBGCC2_CFLAGS = -G 0 -fno-optimize-sibling-calls\n+\n+MULTILIB_OPTIONS = EL/EB mips32/mips32r2/mips64 mips16 msoft-float/mfp64\n+MULTILIB_DIRNAMES = el eb mips32 mips32r2 mips64 mips16 sof f64\n+MULTILIB_MATCHES = EL=mel EB=meb\n+\n+# The -mfp64 option is only valid in conjunction with -mips32r2.\n+ifneq ($(filter MIPS_ISA_DEFAULT=33,$(tm_defines)),)\n+MULTILIB_EXCLUSIONS := mips32/mfp64 mips64/mfp64\n+else\n+MULTILIB_EXCLUSIONS := !mips32r2/mfp64\n+endif\n+\n+# Don't build 64-bit MIPS16 multilibs.\n+MULTILIB_EXCLUSIONS += mips16/mips64\n+\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n+\n+# Build the multilibs.\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}]}