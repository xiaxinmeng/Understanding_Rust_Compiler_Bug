{"sha": "b7d95ea80be40c5ee468a5549d84e058a21fc62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkOTVlYTgwYmU0MGM1ZWU0NjhhNTU0OWQ4NGUwNThhMjFmYzYyYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-30T10:48:20Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-30T10:57:48Z"}, "message": "Add initial support for defaults on generic parameters\n\nIn the case that the GenericArgs to a type/fn are less than the expected\nnumber of required substitutions we need to look for what is the min\nnumber of required substitutions which might be zero if each TypeParam\nhas a default.\n\nIn the event we have less than expected arguments we can substitute the\ndefaults if available as the GenericArgumentMappings.\n\nAddresses: #307", "tree": {"sha": "92dfd62b9f3ebf2d73a0bfcaf2b59c513191aead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92dfd62b9f3ebf2d73a0bfcaf2b59c513191aead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d95ea80be40c5ee468a5549d84e058a21fc62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d95ea80be40c5ee468a5549d84e058a21fc62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d95ea80be40c5ee468a5549d84e058a21fc62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d95ea80be40c5ee468a5549d84e058a21fc62c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ca22c7b9141364aa4bebc61e46ae1518b793f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ca22c7b9141364aa4bebc61e46ae1518b793f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ca22c7b9141364aa4bebc61e46ae1518b793f3"}], "stats": {"total": 84, "additions": 83, "deletions": 1}, "files": [{"sha": "648999b27fff440e40e1f396e13df70a3d115387", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=b7d95ea80be40c5ee468a5549d84e058a21fc62c", "patch": "@@ -117,6 +117,12 @@ class TypeParam : public GenericParam\n     return type;\n   }\n \n+  Analysis::NodeMapping get_type_mappings () const\n+  {\n+    rust_assert (type != nullptr);\n+    return type->get_mappings ();\n+  }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TypeParam *clone_generic_param_impl () const override"}, {"sha": "3e9098dc5571099c4231c21bbcf4f1ff8339e0dc", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b7d95ea80be40c5ee468a5549d84e058a21fc62c", "patch": "@@ -233,7 +233,7 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n       return SubstitutionArgumentMappings::error ();\n     }\n \n-  if (args.get_type_args ().size () < substitutions.size ())\n+  if (args.get_type_args ().size () < min_required_substitutions ())\n     {\n       RichLocation r (args.get_locus ());\n       r.add_range (substitutions.front ().get_param_locus ());\n@@ -260,6 +260,22 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n       mappings.push_back (std::move (subst_arg));\n     }\n \n+  // we must need to fill out defaults\n+  size_t left_over\n+    = num_required_substitutions () - min_required_substitutions ();\n+  if (left_over > 0)\n+    {\n+      for (size_t offs = mappings.size (); offs < substitutions.size (); offs++)\n+\t{\n+\t  SubstitutionParamMapping &param = substitutions.at (offs);\n+\t  rust_assert (param.param_has_default_ty ());\n+\n+\t  BaseType *resolved = param.get_default_ty ();\n+\t  SubstitutionArg subst_arg (&param, resolved);\n+\t  mappings.push_back (std::move (subst_arg));\n+\t}\n+    }\n+\n   return SubstitutionArgumentMappings (mappings, args.get_locus ());\n }\n "}, {"sha": "d6a3aefa781bf3c733cf6fb7e8f196179e77fa72", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=b7d95ea80be40c5ee468a5549d84e058a21fc62c", "patch": "@@ -449,6 +449,12 @@ class SubstitutionParamMapping\n \n   bool param_has_default_ty () const { return generic.has_type (); }\n \n+  BaseType *get_default_ty () const\n+  {\n+    TyVar var (generic.get_type_mappings ().get_hirid ());\n+    return var.get_tyty ();\n+  }\n+\n private:\n   const HIR::TypeParam &generic;\n   ParamType *param;\n@@ -643,6 +649,7 @@ class SubstitutionRef\n     return used_arguments;\n   }\n \n+  // this is the count of type params that are not substituted fuly\n   size_t num_required_substitutions () const\n   {\n     size_t n = 0;\n@@ -654,6 +661,19 @@ class SubstitutionRef\n     return n;\n   }\n \n+  // this is the count of type params that need substituted taking into account\n+  // possible defaults\n+  size_t min_required_substitutions () const\n+  {\n+    size_t n = 0;\n+    for (auto &p : substitutions)\n+      {\n+\tif (p.needs_substitution () && !p.param_has_default_ty ())\n+\t  n++;\n+      }\n+    return n;\n+  }\n+\n   // We are trying to subst <i32, f32> into Struct Foo<X,Y> {}\n   // in the case of Foo<i32,f32>{...}\n   //"}, {"sha": "2169e3649c61a7cb343e5693d327a3649c271d7d", "filename": "gcc/testsuite/rust.test/compile/generics23.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs?ref=b7d95ea80be40c5ee468a5549d84e058a21fc62c", "patch": "@@ -0,0 +1,6 @@\n+struct Foo<A = f32>(A);\n+\n+fn main() {\n+    let a: Foo;\n+    a = Foo(123f32);\n+}"}, {"sha": "9d24bceb49ca2aa9ab3fe72d3e30878a121d1aa5", "filename": "gcc/testsuite/rust.test/compile/generics24.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d95ea80be40c5ee468a5549d84e058a21fc62c/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs?ref=b7d95ea80be40c5ee468a5549d84e058a21fc62c", "patch": "@@ -0,0 +1,34 @@\n+struct Foo<A = (isize, char)> {\n+    a: A,\n+}\n+\n+impl Foo<isize> {\n+    fn bar(self) -> isize {\n+        self.a\n+    }\n+}\n+\n+impl Foo<char> {\n+    fn bar(self) -> char {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        self.a\n+    }\n+}\n+\n+impl Foo {\n+    fn bar(self) {\n+        let a: (isize, char) = self.a;\n+        let b = a.0;\n+        let c = a.1;\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+        let aa: Foo<isize> = Foo { a: b };\n+        let bb: isize = aa.bar();\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo { a: (123, 'a') };\n+    a.bar();\n+}"}]}