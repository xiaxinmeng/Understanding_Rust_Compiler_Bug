{"sha": "2c459e748715afd82c0687bb4070b4006444348d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0NTllNzQ4NzE1YWZkODJjMDY4N2JiNDA3MGI0MDA2NDQ0MzQ4ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-17T21:04:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-17T21:04:56Z"}, "message": "re PR tree-optimization/17509 (ICE in verify_cgraph_node)\n\n\n\tPR tree-optimization/17509\n\t* tree-optimize.c (update_inlined_to_pointers): New function.\n\t(tree_rest_of_compilation): Use it.\n\nFrom-SVN: r87669", "tree": {"sha": "bf5ae808d2f1483e6acc4079c57fd6fd42969fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5ae808d2f1483e6acc4079c57fd6fd42969fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c459e748715afd82c0687bb4070b4006444348d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c459e748715afd82c0687bb4070b4006444348d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c459e748715afd82c0687bb4070b4006444348d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c459e748715afd82c0687bb4070b4006444348d/comments", "author": null, "committer": null, "parents": [{"sha": "0456cbf6658808ffc20bbd2080b7c3bdc555d57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0456cbf6658808ffc20bbd2080b7c3bdc555d57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0456cbf6658808ffc20bbd2080b7c3bdc555d57d"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "ff1725f5a97c316b2a43f058716731ea885c83d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c459e748715afd82c0687bb4070b4006444348d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c459e748715afd82c0687bb4070b4006444348d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c459e748715afd82c0687bb4070b4006444348d", "patch": "@@ -1,3 +1,9 @@\n+2004-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/17509\n+\t* tree-optimize.c (update_inlined_to_pointers): New function.\n+\t(tree_rest_of_compilation): Use it.\n+\n 2004-09-17  Devang Patel  <dpatel@apple.com>\n \n \t* dbxout.c (get_lang_number): New."}, {"sha": "fdb7e766a25b897223f38d5b22a1ee904adbd7fb", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c459e748715afd82c0687bb4070b4006444348d/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c459e748715afd82c0687bb4070b4006444348d/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=2c459e748715afd82c0687bb4070b4006444348d", "patch": "@@ -539,6 +539,24 @@ execute_pass_list (struct tree_opt_pass *pass)\n     }\n   while (pass);\n }\n+\f\n+\n+/* update recursivly all inlined_to pointers of functions\n+   inlined into NODE to INLINED_TO.  */\n+static void\n+update_inlined_to_pointers (struct cgraph_node *node,\n+\t\t\t    struct cgraph_node *inlined_to)\n+{\n+  struct cgraph_edge *e;\n+  for (e = node->callees; e; e = e->next_callee)\n+    {\n+      if (e->callee->global.inlined_to)\n+\t{\n+\t  e->callee->global.inlined_to = inlined_to;\n+\t  update_inlined_to_pointers (e->callee, node);\n+\t}\n+    }\n+}\n \n \f\n /* For functions-as-trees languages, this performs all optimization and\n@@ -630,14 +648,18 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n       if (!flag_unit_at_a_time)\n \t{\n \t  struct cgraph_edge *e;\n+\t  verify_cgraph ();\n \t  while (node->callees)\n \t    cgraph_remove_edge (node->callees);\n \t  node->callees = saved_node->callees;\n \t  saved_node->callees = NULL;\n \t  for (e = node->callees; e; e = e->next_callee)\n \t    {\n \t      if (e->callee->global.inlined_to)\n-\t\te->callee->global.inlined_to = node;\n+\t\t{\n+\t\t  e->callee->global.inlined_to = node;\n+\t\t  update_inlined_to_pointers (e->callee, node);\n+\t\t}\n \t      e->caller = node;\n \t    }\n \t  cgraph_remove_node (saved_node);"}]}