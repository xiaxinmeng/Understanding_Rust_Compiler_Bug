{"sha": "0a32c5ea4af6d481f49876e0cb504794a3c5e265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEzMmM1ZWE0YWY2ZDQ4MWY0OTg3NmUwY2I1MDQ3OTRhM2M1ZTI2NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-04-27T20:31:42Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-04-27T20:31:42Z"}, "message": "For PR java/6382:\n\n\t* parse.y (string_convert_int_cst): New function.\n\t(merge_string_cste): Use it.\n\nFrom-SVN: r52835", "tree": {"sha": "b59878382dd3fc46d0cc03104aef5621489a2a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59878382dd3fc46d0cc03104aef5621489a2a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a32c5ea4af6d481f49876e0cb504794a3c5e265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a32c5ea4af6d481f49876e0cb504794a3c5e265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a32c5ea4af6d481f49876e0cb504794a3c5e265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a32c5ea4af6d481f49876e0cb504794a3c5e265/comments", "author": null, "committer": null, "parents": [{"sha": "a62271540b77521105201f891e7b15391bc8e977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62271540b77521105201f891e7b15391bc8e977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62271540b77521105201f891e7b15391bc8e977"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "461f13058049660bfcafeef8de074430dcce2c9f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32c5ea4af6d481f49876e0cb504794a3c5e265/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32c5ea4af6d481f49876e0cb504794a3c5e265/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0a32c5ea4af6d481f49876e0cb504794a3c5e265", "patch": "@@ -1,3 +1,9 @@\n+2002-04-27  Tom Tromey  <tromey@redhat.com>\n+\n+\tFor PR java/6382:\n+\t* parse.y (string_convert_int_cst): New function.\n+\t(merge_string_cste): Use it.\n+\n 2002-04-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* java-tree.h (java_parse_file): Update."}, {"sha": "00f064d96447ed7098f00e3360d6290e8f9253ac", "filename": "gcc/java/parse.y", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a32c5ea4af6d481f49876e0cb504794a3c5e265/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a32c5ea4af6d481f49876e0cb504794a3c5e265/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=0a32c5ea4af6d481f49876e0cb504794a3c5e265", "patch": "@@ -337,6 +337,8 @@ static bool attach_init_test_initialization_flags PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t\t  PTR));\n static bool emit_test_initialization PARAMS ((struct hash_entry *, PTR));\n \n+static char *string_convert_int_cst PARAMS ((tree));\n+\n /* Number of error found so far. */\n int java_error_count; \n /* Number of warning found so far. */\n@@ -12554,8 +12556,82 @@ build_assignment (op, op_location, lhs, rhs)\n   return assignment;\n }\n \n-/* Print an INTEGER_CST node in a static buffer, and return the buffer. */\n+/* Print an INTEGER_CST node as decimal in a static buffer, and return\n+   the buffer.  This is used only for string conversion.  */\n+static char *\n+string_convert_int_cst (node)\n+     tree node;\n+{\n+  static char buffer[80];\n+\n+  unsigned HOST_WIDE_INT lo = TREE_INT_CST_LOW (node);\n+  unsigned HOST_WIDE_INT hi = TREE_INT_CST_HIGH (node);\n+  char *p = buffer + sizeof (buffer) - 1;\n+  int neg = 0;\n+\n+  unsigned HOST_WIDE_INT hibit = (((unsigned HOST_WIDE_INT) 1)\n+\t\t\t\t  << (HOST_BITS_PER_WIDE_INT - 1));\n+\n+  *p-- = '\\0';\n+\n+  /* If negative, note the fact and negate the value.  */\n+  if ((hi & hibit))\n+    {\n+      lo = ~lo;\n+      hi = ~hi;\n+      if (++lo == 0)\n+\t++hi;\n+      neg = 1;\n+    }\n+\n+  /* Divide by 10 until there are no bits left.  */\n+  while (hi || lo)\n+    {\n+      unsigned HOST_WIDE_INT acc = 0;\n+      unsigned HOST_WIDE_INT outhi = 0, outlo = 0;\n+      unsigned int i;\n+\n+      /* Use long division to compute the result and the remainder.  */\n+      for (i = 0; i < 2 * HOST_BITS_PER_WIDE_INT; ++i)\n+\t{\n+\t  /* Shift a bit into accumulator.  */\n+\t  acc <<= 1;\n+\t  if ((hi & hibit))\n+\t    acc |= 1;\n \n+\t  /* Shift the value.  */\n+\t  hi <<= 1;\n+\t  if ((lo & hibit))\n+\t    hi |= 1;\n+\t  lo <<= 1;\n+\n+\t  /* Shift the correct bit into the result.  */\n+\t  outhi <<= 1;\n+\t  if ((outlo & hibit))\n+\t    outhi |= 1;\n+\t  outlo <<= 1;\n+\t  if (acc >= 10)\n+\t    {\n+\t      acc -= 10;\n+\t      outlo |= 1;\n+\t    }\n+\t}\n+\n+      /* FIXME: ASCII assumption.  */\n+      *p-- = '0' + acc;\n+\n+      hi = outhi;\n+      lo = outlo;\n+    }\n+\n+  if (neg)\n+    *p-- = '-';\n+\n+  return p + 1;\n+}\n+\n+/* Print an INTEGER_CST node in a static buffer, and return the\n+   buffer.  This is used only for error handling.  */\n char *\n print_int_node (node)\n     tree node;\n@@ -13678,8 +13754,8 @@ merge_string_cste (op1, op2, after)\n \t  string = ch;\n \t}\n       else\n-\t  string = print_int_node (op2);\n-      \n+\tstring = string_convert_int_cst (op2);\n+\n       return do_merge_string_cste (op1, string, strlen (string), after);\n     }\n   return NULL_TREE;"}]}