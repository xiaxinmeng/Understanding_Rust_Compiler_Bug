{"sha": "39b945d23be172373092d9a96fcb645d39b01202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliOTQ1ZDIzYmUxNzIzNzMwOTJkOWE5NmZjYjY0NWQzOWIwMTIwMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jw@kayari.org", "date": "2002-04-05T17:58:41Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-04-05T17:58:41Z"}, "message": "stl_algo.h (unique_copy, [...]): Doxygenate.\n\n2002-04-05  Jonathan Wakely <jw@kayari.org>\n\n\t* include/bits/stl_algo.h (unique_copy, __gcd, rotate, rotate_copy,\n\trandom_shuffle, partition, stable_partition, sort, stable_sort,\n\tpartial_sort, partial_sort_copy, nth_element):  Doxygenate.\n\nFrom-SVN: r51927", "tree": {"sha": "b366a1eb96e16220db871c1de4b9df362cb3bb1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b366a1eb96e16220db871c1de4b9df362cb3bb1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39b945d23be172373092d9a96fcb645d39b01202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b945d23be172373092d9a96fcb645d39b01202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b945d23be172373092d9a96fcb645d39b01202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b945d23be172373092d9a96fcb645d39b01202/comments", "author": null, "committer": null, "parents": [{"sha": "03381059f786cab9725cafdea33e8b77ece475c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03381059f786cab9725cafdea33e8b77ece475c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03381059f786cab9725cafdea33e8b77ece475c7"}], "stats": {"total": 192, "additions": 151, "deletions": 41}, "files": [{"sha": "97de30d917d3fbadabeeb5438fb2625c1ee802ab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b945d23be172373092d9a96fcb645d39b01202/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b945d23be172373092d9a96fcb645d39b01202/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=39b945d23be172373092d9a96fcb645d39b01202", "patch": "@@ -1,3 +1,9 @@\n+2002-04-05  Jonathan Wakely <jw@kayari.org>\n+\n+\t* include/bits/stl_algo.h (unique_copy, __gcd, rotate, rotate_copy,\n+\trandom_shuffle, partition, stable_partition, sort, stable_sort,\n+\tpartial_sort, partial_sort_copy, nth_element):  Doxygenate.\n+\n 2002-04-05  David S. Miller  <davem@redhat.com>\n \n \t* config/os/gnu-linux/bits/os_defines.h"}, {"sha": "4263e7711e8fc922f2345c2bc16c3f87426bc28e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 145, "deletions": 41, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b945d23be172373092d9a96fcb645d39b01202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b945d23be172373092d9a96fcb645d39b01202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=39b945d23be172373092d9a96fcb645d39b01202", "patch": "@@ -1139,6 +1139,8 @@ namespace std\n    *  Copies each element in the range @p [first,last) to the range\n    *  beginning at @p result, except that only the first element is copied\n    *  from groups of consecutive elements that compare equal.\n+   *  unique_copy() is stable, so the relative order of elements that are\n+   *  copied is unchanged.\n   */\n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n@@ -1391,6 +1393,7 @@ __result, __binary_pred, _IterType());\n   /**\n    *  @if maint\n    *  This is a helper function for the rotate algorithm specialized on RAIs.\n+   *  It returns the greatest common divisor of two integer values.\n    *  @endif\n   */\n   template<typename _EuclideanRingElement>\n@@ -1538,13 +1541,22 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Rotate the elements of a sequence.\n    *  @param  first   A forward iterator.\n    *  @param  middle  A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Rotates the elements of the range @p [first,last) by @p (middle-first)\n+   *  positions so that the element at @p middle is moved to @p first, the\n+   *  element at @p middle+1 is moved to @first+1 and so on for each element\n+   *  in the range @p [first,last).\n+   *\n+   *  This effectively swaps the ranges @p [first,middle) and\n+   *  @p [middle,last).\n+   *\n+   *  Performs @p *(first+(n+(last-middle))%(last-first))=*(first+n) for\n+   *  each @p n in the range @p [0,last-first).\n   */\n   template<typename _ForwardIter>\n     inline void\n@@ -1558,14 +1570,21 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Copy a sequence, rotating its elements.\n    *  @param  first   A forward iterator.\n    *  @param  middle  A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  result  An output iterator.\n-   *  @return  TODO\n+   *  @return   An iterator designating the end of the resulting sequence.\n    *\n-   *  @doctodo\n+   *  Copies the elements of the range @p [first,last) to the range\n+   *  beginning at @result, rotating the copied elements by @p (middle-first)\n+   *  positions so that the element at @p middle is moved to @p result, the\n+   *  element at @p middle+1 is moved to @result+1 and so on for each element\n+   *  in the range @p [first,last).\n+   *\n+   *  Performs @p *(result+(n+(last-middle))%(last-first))=*(first+n) for\n+   *  each @p n in the range @p [0,last-first).\n   */\n   template<typename _ForwardIter, typename _OutputIter>\n     _OutputIter\n@@ -1603,12 +1622,14 @@ __result, __binary_pred, _IterType());\n \n \n   /**\n-   *  @brief TODO\n+   *  @brief Randomly shuffle the elements of a sequence.\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Reorder the elements in the range @p [first,last) using a random\n+   *  distribution, so that every possible ordering of the sequence is\n+   *  equally likely.\n   */\n   template<typename _RandomAccessIter>\n     inline void\n@@ -1624,13 +1645,17 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Shuffle the elements of a sequence using a random number\n+   *         generator.\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  rand    The RNG functor or function.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Reorders the elements in the range @p [first,last) using @p rand to\n+   *  provide a random distribution. Calling @p rand(N) for a positive\n+   *  integer @p N should return a randomly chosen integer from the\n+   *  range [0,N).\n   */\n   template<typename _RandomAccessIter, typename _RandomNumberGenerator>\n     void\n@@ -1707,13 +1732,18 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Move elements for which a predicate is true to the beginning\n+   *         of a sequence.\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  pred    A predicate functor.\n-   *  @return  TODO\n-   *\n-   *  @doctodo\n+   *  @return  An iterator @p middle such that @p pred(i) is true for each\n+   *  iterator @p i in the range @p [first,middle) and false for each @p i\n+   *  in the range @p [middle,last).\n+   *  \n+   *  @p pred must not modify its operand. @p partition() does not preserve\n+   *  the relative ordering of elements in each group, use\n+   *  @p stable_partition() if this is needed.\n   */\n   template<typename _ForwardIter, typename _Predicate>\n     inline _ForwardIter\n@@ -1800,13 +1830,20 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Move elements for which a predicate is true to the beginning\n+   *         of a sequence, preserving relative ordering.\n    *  @param  first   A forward iterator.\n    *  @param  last    A forward iterator.\n    *  @param  pred    A predicate functor.\n-   *  @return  TODO\n-   *\n-   *  @doctodo\n+   *  @return  An iterator @p middle such that @p pred(i) is true for each\n+   *  iterator @p i in the range @p [first,middle) and false for each @p i\n+   *  in the range @p [middle,last).\n+   *  \n+   *  Performs the same function as @p partition() with the additional\n+   *  guarantee that the relative ordering of elements in each group is\n+   *  preserved, so any two elements @p x and @p y in the range\n+   *  @p [first,last) such that @p pred(x)==pred(y) will have the same\n+   *  relative ordering after calling @p stable_partition().\n   */\n   template<typename _ForwardIter, typename _Predicate>\n     _ForwardIter\n@@ -2114,12 +2151,17 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the elements of a sequence.\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the elements in the range @p [first,last) in ascending order,\n+   *  such that @p *(i+1)<*i is false for each iterator @p i in the range\n+   *  @p [first,last-1).\n+   *\n+   *  The relative ordering of equivalent elements is not preserved, use\n+   *  @p stable_sort() if this is needed.\n   */\n   template<typename _RandomAccessIter>\n     inline void\n@@ -2139,13 +2181,18 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the elements of a sequence using a predicate for comparison.\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the elements in the range @p [first,last) in ascending order,\n+   *  such that @p comp(*(i+1),*i) is false for every iterator @p i in the\n+   *  range @p [first,last-1).\n+   *\n+   *  The relative ordering of equivalent elements is not preserved, use\n+   *  @p stable_sort() if this is needed.\n   */\n   template<typename _RandomAccessIter, typename _Compare>\n     inline void\n@@ -2365,12 +2412,20 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the elements of a sequence, preserving the relative order\n+   *         of equivalent elements.\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the elements in the range @p [first,last) in ascending order,\n+   *  such that @p *(i+1)<*i is false for each iterator @p i in the range\n+   *  @p [first,last-1).\n+   *\n+   *  The relative ordering of equivalent elements is preserved, so any two\n+   *  elements @p x and @p y in the range @p [first,last) such that\n+   *  @p x<y is false and @p y<x is false will have the same relative\n+   *  ordering after calling @p stable_sort().\n   */\n   template<typename _RandomAccessIter>\n     inline void\n@@ -2392,13 +2447,21 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the elements of a sequence using a predicate for comparison,\n+   *         preserving the relative order of equivalent elements.\n    *  @param  first   An iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the elements in the range @p [first,last) in ascending order,\n+   *  such that @p comp(*(i+1),*i) is false for each iterator @p i in the\n+   *  range @p [first,last-1).\n+   *\n+   *  The relative ordering of equivalent elements is preserved, so any two\n+   *  elements @p x and @p y in the range @p [first,last) such that\n+   *  @p comp(x,y) is false and @p comp(y,x) is false will have the same\n+   *  relative ordering after calling @p stable_sort().\n   */\n   template<typename _RandomAccessIter, typename _Compare>\n     inline void\n@@ -2422,13 +2485,19 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the smallest elements of a sequence.\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the smallest @p (middle-first) elements in the range\n+   *  @p [first,last) and moves them to the range @p [first,middle). The\n+   *  order of the remaining elements in the range @p [middle,last) is\n+   *  undefined.\n+   *  After the sort if @p i and @j are iterators in the range\n+   *  @p [first,middle) such that @i precedes @j and @k is an iterator in\n+   *  the range @p [middle,last) then @p *j<*i and @p *k<*i are both false.\n   */\n   template<typename _RandomAccessIter>\n     void\n@@ -2451,14 +2520,22 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort the smallest elements of a sequence using a predicate\n+   *         for comparison.\n    *  @param  first   An iterator.\n    *  @param  middle  Another iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Sorts the smallest @p (middle-first) elements in the range\n+   *  @p [first,last) and moves them to the range @p [first,middle). The\n+   *  order of the remaining elements in the range @p [middle,last) is\n+   *  undefined.\n+   *  After the sort if @p i and @j are iterators in the range\n+   *  @p [first,middle) such that @i precedes @j and @k is an iterator in\n+   *  the range @p [middle,last) then @p *comp(j,*i) and @p comp(*k,*i)\n+   *  are both false.\n   */\n   template<typename _RandomAccessIter, typename _Compare>\n     void\n@@ -2483,14 +2560,21 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n-   *  @param  first   An input iterator.\n-   *  @param  last    Another input iterator.\n+   *  @brief Copy the smallest elements of a sequence.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n    *  @param  result_first   A random-access iterator.\n    *  @param  result_last    Another random-access iterator.\n-   *  @return  TODO\n+   *  @return   An iterator indicating the end of the resulting sequence.\n    *\n-   *  @doctodo\n+   *  Copies and sorts the smallest N values from the range @p [first,last)\n+   *  to the range beginning at @p result_first, where the number of\n+   *  elements to be copied, @p N, is the smaller of @p (last-first) and\n+   *  @p (result_last-result_first).\n+   *  After the sort if @p i and @j are iterators in the range\n+   *  @p [result_first,result_first+N) such that @i precedes @j then\n+   *  @p *j<*i is false.\n+   *  The value returned is @p result_first+N.\n   */\n   template<typename _InputIter, typename _RandomAccessIter>\n     _RandomAccessIter\n@@ -2528,15 +2612,23 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Copy the smallest elements of a sequence using a predicate for\n+   *         comparison.\n    *  @param  first   An input iterator.\n    *  @param  last    Another input iterator.\n    *  @param  result_first   A random-access iterator.\n    *  @param  result_last    Another random-access iterator.\n    *  @param  comp    A comparison functor.\n-   *  @return  TODO\n+   *  @return   An iterator indicating the end of the resulting sequence.\n    *\n-   *  @doctodo\n+   *  Copies and sorts the smallest N values from the range @p [first,last)\n+   *  to the range beginning at @p result_first, where the number of\n+   *  elements to be copied, @p N, is the smaller of @p (last-first) and\n+   *  @p (result_last-result_first).\n+   *  After the sort if @p i and @j are iterators in the range\n+   *  @p [result_first,result_first+N) such that @i precedes @j then\n+   *  @p comp(*j,*i) is false.\n+   *  The value returned is @p result_first+N.\n   */\n   template<typename _InputIter, typename _RandomAccessIter, typename _Compare>\n     _RandomAccessIter\n@@ -2577,13 +2669,19 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort a sequence just enough to find a particular position.\n    *  @param  first   An iterator.\n    *  @param  nth     Another iterator.\n    *  @param  last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Rearranges the elements in the range @p [first,last) so that @p *nth\n+   *  is the same element that would have been in that position had the\n+   *  whole sequence been sorted. \n+   *  whole sequence been sorted. The elements either side of @p *nth are\n+   *  not completely sorted, but for any iterator @i in the range\n+   *  @p [first,nth) and any iterator @j in the range @p [nth,last) it\n+   *  holds that @p *j<*i is false.\n   */\n   template<typename _RandomAccessIter>\n     void\n@@ -2612,14 +2710,20 @@ __result, __binary_pred, _IterType());\n     }\n \n   /**\n-   *  @brief TODO\n+   *  @brief Sort a sequence just enough to find a particular position\n+   *         using a predicate for comparison.\n    *  @param  first   An iterator.\n    *  @param  nth     Another iterator.\n    *  @param  last    Another iterator.\n    *  @param  comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  @doctodo\n+   *  Rearranges the elements in the range @p [first,last) so that @p *nth\n+   *  is the same element that would have been in that position had the\n+   *  whole sequence been sorted. The elements either side of @p *nth are\n+   *  not completely sorted, but for any iterator @i in the range\n+   *  @p [first,nth) and any iterator @j in the range @p [nth,last) it\n+   *  holds that @p comp(*j,*i) is false.\n   */\n   template<typename _RandomAccessIter, typename _Compare>\n     void"}]}