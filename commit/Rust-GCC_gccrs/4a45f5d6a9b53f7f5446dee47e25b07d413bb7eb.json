{"sha": "4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "node_id": "C_kwDOANBUbNoAKDRhNDVmNWQ2YTliNTNmN2Y1NDQ2ZGVlNDdlMjViMDdkNDEzYmI3ZWI", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-04-05T15:16:29Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro", "date": "2023-04-05T15:19:43Z"}, "message": "[RFA][Bug target/108892 ][13 regression] Force re-recognition after changing RTL structure of an insn\n\nSo as mentioned in the PR the underlying issue here is combine changes the form of an existing insn, but fails to force re-recognition.  As a result other parts of the compiler blow up.\n\n>                   /* Temporarily replace the set's source with the\n>                      contents of the REG_EQUAL note.  The insn will\n>                      be deleted or recognized by try_combine.  */\n>                   rtx orig_src = SET_SRC (set);                   rtx orig_dest = SET_DEST (set);                   if (GET_CODE (SET_DEST (set)) == ZERO_EXTRACT)\n>                     SET_DEST (set) = XEXP (SET_DEST (set), 0);\n>                   SET_SRC (set) = note;\n>                   i2mod = temp;\n>                   i2mod_old_rhs = copy_rtx (orig_src);\n>                   i2mod_new_rhs = copy_rtx (note);\n>                   next = try_combine (insn, i2mod, NULL, NULL,\n>                                       &new_direct_jump_p,                                       last_combined_insn);\n>                   i2mod = NULL;\n>                   if (next)\n>                     {\n>                       statistics_counter_event (cfun, \"insn-with-note combine\", 1);\n>                       goto retry;\n>                     }                   SET_SRC (set) = orig_src;\n>                   SET_DEST (set) = orig_dest;\n\nThis code replaces the SET_SRC of an insn in the RTL stream with the contents of a REG_EQUAL note.  So given an insn like this:\n\n> (insn 122 117 127 2 (set (reg:DI 157 [ _46 ])\n>         (ior:DI (reg:DI 200)\n>             (reg:DI 251))) \"j.c\":14:5 -1\n>      (expr_list:REG_EQUAL (const_int 25769803782 [0x600000006])\n>         (nil)))\n\nIt replaces the (ior ...) with a (const_int ...).  The resulting insn is passed to try_combine which will try to recognize it, then use it in a combination attempt.  Recognition succeeds with the special define_insn_and_split pattern in the risc-v backend resulting in:\n\n> (insn 122 117 127 2 (set (reg:DI 157 [ _46 ])\n>         (const_int 25769803782 [0x600000006])) \"j.c\":14:5 177 {*mvconst_internal}\n>      (expr_list:REG_EQUAL (const_int 25769803782 [0x600000006])\n>         (nil)))\n\nThis is as-expected.  Now assume we were unable to combine anything, so try_combine returns NULL_RTX.  The quoted code above restores SET_SRC (and SET_DEST) resulting in:\n\n> (insn 122 117 127 2 (set (reg:DI 157 [ _46 ])\n>         (ior:DI (reg:DI 200)\n>             (reg:DI 251))) \"j.c\":14:5 177 {*mvconst_internal}\n>      (expr_list:REG_EQUAL (const_int 25769803782 [0x600000006])\n>         (nil)))\n\nBut this doesn't get re-recognized and we ICE later in LRA.\n\nThe fix is trivial, reset the INSN_CODE to force re-recognition in the case where try_combine fails.\n\n\tPR target/108892\ngcc/\n\t* combine.cc (combine_instructions): Force re-recognition when\n\tafter restoring the body of an insn to its original form.\n\ngcc/testsuite/\n\t* gcc.c-torture/compile/pr108892.c: New test.", "tree": {"sha": "50868241121a2296d7e722ae1042316d01ad1185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50868241121a2296d7e722ae1042316d01ad1185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb/comments", "author": null, "committer": null, "parents": [{"sha": "ddb0f66e6c1e846bdc217075c9a770bfd0b01970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb0f66e6c1e846bdc217075c9a770bfd0b01970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb0f66e6c1e846bdc217075c9a770bfd0b01970"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "22bf8e1ec89814ec75a6e042946fbf55ca2e9614", "filename": "gcc/combine.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "patch": "@@ -1416,6 +1416,7 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \t\t      statistics_counter_event (cfun, \"insn-with-note combine\", 1);\n \t\t      goto retry;\n \t\t    }\n+\t\t  INSN_CODE (temp) = -1;\n \t\t  SET_SRC (set) = orig_src;\n \t\t  SET_DEST (set) = orig_dest;\n \t\t}"}, {"sha": "d7fecd54ecfe1bf9c8ae2647659fbc27481c0792", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108892.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108892.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108892.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108892.c?ref=4a45f5d6a9b53f7f5446dee47e25b07d413bb7eb", "patch": "@@ -0,0 +1,23 @@\n+typedef char __attribute__((__vector_size__ (64))) U;\n+typedef int __attribute__((__vector_size__ (64))) V;\n+\n+int g;\n+U u;\n+\n+static inline __attribute__((__always_inline__)) void\n+bar (short a, short b, V w)\n+{\n+  V v = __builtin_shufflevector ((V) { }, a % (0 != w), 17, 22, 20, 15,\n+\t\t\t\t 20, 23, 17, 20, 16, 21, 16, 19, 18, 14, 15,\n+\t\t\t\t 14) ^ b;\n+  g *= __builtin_memcmp_eq (0, 0, 2);\n+  v |= 6;\n+  __builtin_ilogb (0);\n+  u = (U) w + (U) v;\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (5, 4, (V){30, 4, 1, 5, 6});\n+}"}]}