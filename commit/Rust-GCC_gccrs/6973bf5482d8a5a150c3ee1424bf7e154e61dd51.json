{"sha": "6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3M2JmNTQ4MmQ4YTVhMTUwYzNlZTE0MjRiZjdlMTU0ZTYxZGQ1MQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2000-03-12T19:20:47Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2000-03-12T19:20:47Z"}, "message": "configure.in: Define IEEE_COMPLEX_DIVIDE.\n\n\t* libF77/configure.in: Define IEEE_COMPLEX_DIVIDE.\n\t* libF77/[cz]_div.c: Arrange for compilation under\n\t-DIEEE_COMPLEX_DIVIDE to make these routines\n\tavoid calling sig_die when the denominator vanishes.\n\t* libF77/s_rnge.c: Add casts for the case of\n\tsizeof(ftnint) == sizeof(int) < sizeof(long).\n\t* libI77/endfile.c: Set state to writing (b->uwrt = 1) when an\n\tendfile statement requires copying the file\n\tAlso, supply a missing (long) cast in the sprintf call.\n\t* libI77/sfe.c: Add #ifdef ALWAYS_FLUSH logic, for formatted I/O.\n\nFrom-SVN: r32496", "tree": {"sha": "2f96ba2bc116769c43eb3433f6fa7f616e56586d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f96ba2bc116769c43eb3433f6fa7f616e56586d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/comments", "author": null, "committer": null, "parents": [{"sha": "66e86e32ab9ff17888ed0d05fcb090f2c37c73a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e86e32ab9ff17888ed0d05fcb090f2c37c73a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e86e32ab9ff17888ed0d05fcb090f2c37c73a0"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "b89bbcd3c6800aa5227c9e4c99adb5b46aaca8f4", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -1,3 +1,17 @@\n+Sun Mar 12 20:12;30 2000  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\tBased on work done by David M. Gay (Bell Labs)\n+\n+\t* libF77/configure.in: Define IEEE_COMPLEX_DIVIDE.\n+\t* libF77/[cz]_div.c: Arrange for compilation under\n+\t-DIEEE_COMPLEX_DIVIDE to make these routines\n+\tavoid calling sig_die when the denominator vanishes.\n+\t* libF77/s_rnge.c: Add casts for the case of\n+\tsizeof(ftnint) == sizeof(int) < sizeof(long).\n+\t* libI77/endfile.c: Set state to writing (b->uwrt = 1) when an\n+\tendfile statement requires copying the file\n+\tAlso, supply a missing (long) cast in the sprintf call.\n+\t* libI77/sfe.c: Add #ifdef ALWAYS_FLUSH logic, for formatted I/O.\n+\n Wed Feb 16 11:10:05 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in (gcc_version): When setting, narrow search to"}, {"sha": "46372fc56e319983915f74b2d48e422739bc06e7", "filename": "libf2c/libF77/Version.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2FVersion.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -1,4 +1,4 @@\n-static char junk[] = \"\\n@(#)LIBF77 VERSION 19990503\\n\";\n+static char junk[] = \"\\n@(#)LIBF77 VERSION 19991115\\n\";\n \n /*\n */\n@@ -61,6 +61,14 @@ char __G77_LIBF77_VERSION__[] = \"0.5.25 20000312 (prerelease)\";\n \t\t\toverlapping arguments caused by equivalence.\n \t3 May 1999:\t\"invisible\" tweaks to omit compiler warnings in\n \t\t\tabort_.c, ef1asc_.c, s_rnge.c, s_stop.c.\n+\t7 Sept. 1999: [cz]_div.c: arrange for compilation under\n+\t\t\t-DIEEE_COMPLEX_DIVIDE to make these routines\n+\t\t\tavoid calling sig_die when the denominator\n+\t\t\tvanishes; instead, they return pairs of NaNs\n+\t\t\tor Infinities, depending whether the numerator\n+\t\t\talso vanishes or not.  VERSION not changed.\n+\t15 Nov. 1999: s_rnge.c: add casts for the case of\n+\t\t\tsizeof(ftnint) == sizeof(int) < sizeof(long).\n */\n \n #include <stdio.h>"}, {"sha": "4d153b4c4afc0df757822ff4ac747c312f600fc2", "filename": "libf2c/libF77/c_div.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fc_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fc_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fc_div.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -18,8 +18,18 @@ void c_div(complex *c, complex *a, complex *b)\n \t\tabi = - abi;\n \tif( abr <= abi )\n \t\t{\n-\t\tif(abi == 0)\n+\t\tif(abi == 0) {\n+#ifdef IEEE_COMPLEX_DIVIDE\n+\t\t\tfloat af, bf;\n+\t\t\taf = bf = abr;\n+\t\t\tif (a->i != 0 || a->r != 0)\n+\t\t\t\taf = 1.;\n+\t\t\tc->i = c->r = af / bf;\n+\t\t\treturn;\n+#else\n \t\t\tsig_die(\"complex division by zero\", 1);\n+#endif\n+\t\t\t}\n \t\tratio = (double)b->r / b->i ;\n \t\tden = b->i * (1 + ratio*ratio);\n \t\tcr = (a->r*ratio + a->i) / den;"}, {"sha": "a9f282ee3f69f45bd0e26f0258300f72245d01e4", "filename": "libf2c/libF77/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fconfigure.in?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -98,6 +98,7 @@ dnl Unfortunately, the message implies we're just checking for -lm...\n AC_CHECK_LIB(m,drem,AC_DEFINE(IEEE_drem))\n \n AC_DEFINE(Skip_f2c_Undefs)\n+AC_DEFINE(IEEE_COMPLEX_DIVIDE)\n \n AC_OUTPUT(Makefile)\n "}, {"sha": "766889bbfa5912968897c06e7c1abe0518391d3b", "filename": "libf2c/libF77/s_rnge.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fs_rnge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fs_rnge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fs_rnge.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -13,10 +13,12 @@ integer s_rnge(char *varn, ftnint offset, char *procn, ftnint line)\n {\n register int i;\n \n-fprintf(stderr, \"Subscript out of range on file line %ld, procedure \", line);\n+fprintf(stderr, \"Subscript out of range on file line %ld, procedure \",\n+\t(long)line);\n while((i = *procn) && i != '_' && i != ' ')\n \tputc(*procn++, stderr);\n-fprintf(stderr, \".\\nAttempt to access the %ld-th element of variable \", offset+1);\n+fprintf(stderr, \".\\nAttempt to access the %ld-th element of variable \",\n+\t(long)offset+1);\n while((i = *varn) && i != ' ')\n \tputc(*varn++, stderr);\n sig_die(\".\", 1);"}, {"sha": "e14df32a1f8a79c3a8807abe9dfabdc984df8fe3", "filename": "libf2c/libF77/z_div.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fz_div.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibF77%2Fz_div.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fz_div.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -17,8 +17,16 @@ void z_div(doublecomplex *c, doublecomplex *a, doublecomplex *b)\n \t\tabi = - abi;\n \tif( abr <= abi )\n \t\t{\n-\t\tif(abi == 0)\n+\t\tif(abi == 0) {\n+#ifdef IEEE_COMPLEX_DIVIDE\n+\t\t\tif (a->i != 0 || a->r != 0)\n+\t\t\t\tabi = 1.;\n+\t\t\tc->i = c->r = abi / abr;\n+\t\t\treturn;\n+#else\n \t\t\tsig_die(\"complex division by zero\", 1);\n+#endif\n+\t\t\t}\n \t\tratio = b->r / b->i ;\n \t\tden = b->i * (1 + ratio*ratio);\n \t\tcr = (a->r*ratio + a->i) / den;"}, {"sha": "fe3c959bc259414ae0dbafc3e62ba2000be91634", "filename": "libf2c/libI77/Version.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2FVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2FVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2FVersion.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -1,4 +1,4 @@\n-static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19990627\\n\";\n+static char junk[] = \"\\n@(#) LIBI77 VERSION pjw,dmg-mods 19991115\\n\";\n \n /*\n */\n@@ -305,6 +305,15 @@ wrtfmt.c:\n /* 27 June 1999: rsne.c: fix bug in namelist input: a misplaced increment */\n /*\t\t could cause wrong array elements to be assigned; e.g.,\t*/\n /*\t\t \"&input k(5)=10*1 &end\" assigned k(5) and k(15..23)\t*/\n+/* 15 Nov. 1999: endfile.c: set state to writing (b->uwrt = 1) when an */\n+/*\t\tendfile statement requires copying the file. */\n+/*\t\t(Otherwise an immediately following rewind statement */\n+/*\t\tcould make the file appear empty.)  Also, supply a */\n+/*\t\tmissing (long) cast in the sprintf call. */\n+/*\t\t sfe.c: add #ifdef ALWAYS_FLUSH logic, for formatted I/O: */\n+/*\t\tCompiling libf2c with -DALWAYS_FLUSH should prevent losing */\n+/*\t\tany data in buffers should the program fault.  It also */\n+/*\t\tmakes the program run more slowly. */\n \n \n "}, {"sha": "f7a78e12555c5ca126209439859fb88ad9564ffa", "filename": "libf2c/libI77/endfile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fendfile.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -29,7 +29,7 @@ integer f_end(alist *a)\n \tb = &f__units[a->aunit];\n \tif(b->ufd==NULL) {\n \t\tchar nbuf[10];\n-\t\tsprintf(nbuf,\"fort.%ld\",a->aunit);\n+\t\tsprintf(nbuf,\"fort.%ld\",(long)a->aunit);\n \t\tif (tf = fopen(nbuf, f__w_mode[0]))\n \t\t\tfclose(tf);\n \t\treturn(0);\n@@ -103,6 +103,7 @@ t_runc(alist *a)\n \trewind(tf);\n \tif (copy(tf, loc, bf))\n \t\tgoto bad1;\n+\tb->uwrt = 1;\n \tb->urw = 2;\n #ifdef NON_UNIX_STDIO\n \tif (b->ufmt) {"}, {"sha": "77ade5b5a7f59f28701fd1778b4957a2bea7bf5d", "filename": "libf2c/libI77/sfe.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2Fsfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6973bf5482d8a5a150c3ee1424bf7e154e61dd51/libf2c%2FlibI77%2Fsfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fsfe.c?ref=6973bf5482d8a5a150c3ee1424bf7e154e61dd51", "patch": "@@ -30,5 +30,9 @@ integer e_wsfe(Void)\n \tf__init = 1;\n \tn = en_fio();\n \tf__fmtbuf=NULL;\n+#ifdef ALWAYS_FLUSH\n+\tif (!n && fflush(f__cf))\n+\t\terr(f__elist->cierr, errno, \"write end\");\n+#endif\n \treturn n;\n }"}]}