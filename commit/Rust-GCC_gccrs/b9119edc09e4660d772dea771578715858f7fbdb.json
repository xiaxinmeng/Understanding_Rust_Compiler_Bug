{"sha": "b9119edc09e4660d772dea771578715858f7fbdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxMTllZGMwOWU0NjYwZDc3MmRlYTc3MTU3ODcxNTg1OGY3ZmJkYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-10T02:40:07Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-07-10T02:40:07Z"}, "message": "c++: 'new T[N]' and SFINAE [PR82110]\n\nHere we're failing to treat 'new T[N]' as erroneous in a SFINAE context\nwhen T isn't default constructible because expand_aggr_init_1 doesn't\ncommunicate to build_aggr_init (its only SFINAE caller) whether the\ninitialization was actually successful.  To fix this, this patch makes\nexpand_aggr_init_1 and its subroutine expand_default_init return true on\nsuccess, false on failure so that build_aggr_init can properly return\nerror_mark_node on failure.\n\n\tPR c++/82110\n\ngcc/cp/ChangeLog:\n\n\t* init.c (build_aggr_init): Return error_mark_node if\n\texpand_aggr_init_1 returns false.\n\t(expand_default_init): Change return type to bool.  Return false\n\ton error, true on success.\n\t(expand_aggr_init_1): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/pr78765.C: Expect another conversion failure\n\tdiagnostic.\n\t* g++.dg/template/sfinae14.C: Flip incorrect assertion.\n\t* g++.dg/cpp2a/concepts-requires27.C: New test.", "tree": {"sha": "4b3c6fb7575e670996de09c0ae666b7b472a1098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b3c6fb7575e670996de09c0ae666b7b472a1098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9119edc09e4660d772dea771578715858f7fbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9119edc09e4660d772dea771578715858f7fbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9119edc09e4660d772dea771578715858f7fbdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9119edc09e4660d772dea771578715858f7fbdb/comments", "author": null, "committer": null, "parents": [{"sha": "ef2ace642a1ba795235c542b728cb83c73dfce74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2ace642a1ba795235c542b728cb83c73dfce74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2ace642a1ba795235c542b728cb83c73dfce74"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "d47e405e7459034d1248fb9dbc76aad2f7ae8ec5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b9119edc09e4660d772dea771578715858f7fbdb", "patch": "@@ -39,8 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n static bool begin_init_stmts (tree *, tree *);\n static tree finish_init_stmts (bool, tree, tree);\n static void construct_virtual_base (tree, tree);\n-static void expand_aggr_init_1 (tree, tree, tree, tree, int, tsubst_flags_t);\n-static void expand_default_init (tree, tree, tree, tree, int, tsubst_flags_t);\n+static bool expand_aggr_init_1 (tree, tree, tree, tree, int, tsubst_flags_t);\n+static bool expand_default_init (tree, tree, tree, tree, int, tsubst_flags_t);\n static void perform_member_init (tree, tree);\n static int member_init_ok_or_else (tree, tree, tree);\n static void expand_virtual_init (tree, tree);\n@@ -1838,12 +1838,14 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   is_global = begin_init_stmts (&stmt_expr, &compound_stmt);\n   destroy_temps = stmts_are_full_exprs_p ();\n   current_stmt_tree ()->stmts_are_full_exprs_p = 0;\n-  expand_aggr_init_1 (TYPE_BINFO (type), exp, exp,\n-\t\t      init, LOOKUP_NORMAL|flags, complain);\n+  bool ok = expand_aggr_init_1 (TYPE_BINFO (type), exp, exp,\n+\t\t\t\tinit, LOOKUP_NORMAL|flags, complain);\n   stmt_expr = finish_init_stmts (is_global, stmt_expr, compound_stmt);\n   current_stmt_tree ()->stmts_are_full_exprs_p = destroy_temps;\n   TREE_READONLY (exp) = was_const;\n   TREE_THIS_VOLATILE (exp) = was_volatile;\n+  if (!ok)\n+    return error_mark_node;\n \n   if ((VAR_P (exp) || TREE_CODE (exp) == PARM_DECL)\n       && TREE_SIDE_EFFECTS (stmt_expr)\n@@ -1854,7 +1856,7 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   return stmt_expr;\n }\n \n-static void\n+static bool\n expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n                      tsubst_flags_t complain)\n {\n@@ -1889,6 +1891,9 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n        happen for direct-initialization, too.  */\n     init = digest_init (type, init, complain);\n \n+  if (init == error_mark_node)\n+    return false;\n+\n   /* A CONSTRUCTOR of the target's type is a previously digested\n      initializer, whether that happened just above or in\n      cp_parser_late_parsing_nsdmi.\n@@ -1910,7 +1915,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       init = build2 (INIT_EXPR, TREE_TYPE (exp), exp, init);\n       TREE_SIDE_EFFECTS (init) = 1;\n       finish_expr_stmt (init);\n-      return;\n+      return true;\n     }\n \n   if (init && TREE_CODE (init) != TREE_LIST\n@@ -1927,8 +1932,12 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \t   have already built up the constructor call so we could wrap it\n \t   in an exception region.  */;\n       else\n-\tinit = ocp_convert (type, init, CONV_IMPLICIT|CONV_FORCE_TEMP,\n-\t\t\t    flags, complain | tf_no_cleanup);\n+\t{\n+\t  init = ocp_convert (type, init, CONV_IMPLICIT|CONV_FORCE_TEMP,\n+\t\t\t      flags, complain | tf_no_cleanup);\n+\t  if (init == error_mark_node)\n+\t    return false;\n+\t}\n \n       if (TREE_CODE (init) == MUST_NOT_THROW_EXPR)\n \t/* We need to protect the initialization of a catch parm with a\n@@ -1944,7 +1953,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \tinit = build2 (INIT_EXPR, TREE_TYPE (exp), exp, init);\n       TREE_SIDE_EFFECTS (init) = 1;\n       finish_expr_stmt (init);\n-      return;\n+      return true;\n     }\n \n   if (init == NULL_TREE)\n@@ -1982,6 +1991,8 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \t\t\t\t\t&parms, binfo, flags,\n \t\t\t\t\tcomplain);\n       base = fold_build_cleanup_point_expr (void_type_node, base);\n+      if (complete == error_mark_node || base == error_mark_node)\n+\treturn false;\n       rval = build_if_in_charge (complete, base);\n     }\n    else\n@@ -1991,6 +2002,8 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \n       rval = build_special_member_call (exp, ctor_name, &parms, binfo, flags,\n \t\t\t\t\tcomplain);\n+      if (rval == error_mark_node)\n+\treturn false;\n     }\n \n   if (parms != NULL)\n@@ -2010,10 +2023,12 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n   /* FIXME put back convert_to_void?  */\n   if (TREE_SIDE_EFFECTS (rval))\n     finish_expr_stmt (rval);\n+\n+  return true;\n }\n \n /* This function is responsible for initializing EXP with INIT\n-   (if any).\n+   (if any).  Returns true on success, false on failure.\n \n    BINFO is the binfo of the type for who we are performing the\n    initialization.  For example, if W is a virtual base class of A and B,\n@@ -2032,7 +2047,7 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n    FLAGS is just passed to `build_new_method_call'.  See that function\n    for its description.  */\n \n-static void\n+static bool\n expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n                     tsubst_flags_t complain)\n {\n@@ -2058,7 +2073,7 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       if (init)\n \tfinish_expr_stmt (init);\n       gcc_assert (!cleanups);\n-      return;\n+      return true;\n     }\n \n   /* List-initialization from {} becomes value-initialization for non-aggregate\n@@ -2096,15 +2111,15 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n       /* If we don't need to mess with the constructor at all,\n \t then we're done.  */\n       if (! type_build_ctor_call (type))\n-\treturn;\n+\treturn true;\n \n       /* Otherwise fall through and call the constructor.  */\n       init = NULL_TREE;\n     }\n \n   /* We know that expand_default_init can handle everything we want\n      at this point.  */\n-  expand_default_init (binfo, true_exp, exp, init, flags, complain);\n+  return expand_default_init (binfo, true_exp, exp, init, flags, complain);\n }\n \n /* Report an error if TYPE is not a user-defined, class type.  If"}, {"sha": "4c63fddb6840091fb17d0a70aec8e18585d0842c", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78765.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78765.C?ref=b9119edc09e4660d772dea771578715858f7fbdb", "patch": "@@ -8,7 +8,7 @@ struct ValueType {\n   int field;\n };\n \n-static constexpr ValueType var = 0; // { dg-error \"conversion\" }\n+static constexpr ValueType var = 0; // { dg-error \"conversion|convert\" }\n \n template <int> class ValueTypeInfo;\n "}, {"sha": "99d45001383adb4073336e0c203f810bb8f89249", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires27.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires27.C?ref=b9119edc09e4660d772dea771578715858f7fbdb", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/82110\n+// { dg-do compile { target c++20 } }\n+\n+struct X { X() = delete; };\n+\n+template<class T> concept C = requires(T t) { new T; };\n+template<class T> concept D = requires(T t) { new T[1]; };\n+\n+static_assert(!C<X>);\n+static_assert(!D<X>);"}, {"sha": "0c59dad305d185249701c95c3630c9f4dc7da3f4", "filename": "gcc/testsuite/g++.dg/template/sfinae14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9119edc09e4660d772dea771578715858f7fbdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae14.C?ref=b9119edc09e4660d772dea771578715858f7fbdb", "patch": "@@ -76,4 +76,4 @@ STATIC_ASSERT(!(has_new_one_arg<X, int X::*>::value));\n \n STATIC_ASSERT((has_array_new<Y, int, 5>::value));\n STATIC_ASSERT(!(has_array_new<X, int Y::*, &Y::foo>::value));\n-STATIC_ASSERT((has_array_new<X, int, 5>::value));\n+STATIC_ASSERT(!(has_array_new<X, int, 5>::value));"}]}