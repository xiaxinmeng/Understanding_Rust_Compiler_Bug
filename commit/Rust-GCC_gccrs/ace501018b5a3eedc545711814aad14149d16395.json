{"sha": "ace501018b5a3eedc545711814aad14149d16395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlNTAxMDE4YjVhM2VlZGM1NDU3MTE4MTRhYWQxNDE0OWQxNjM5NQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-19T19:49:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-19T19:49:13Z"}, "message": "Merge #505\n\n505: DWARF for Rust primitive types r=philberty a=tromey\n\nI found a couple of small bugs in the DWARF that is emitted for primitive types.\r\nThese two patches fix these.\n\nCo-authored-by: Tom Tromey <tom@tromey.com>", "tree": {"sha": "3038f4f97e6091e4affedf98a2010593c41c2416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3038f4f97e6091e4affedf98a2010593c41c2416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace501018b5a3eedc545711814aad14149d16395", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzko5CRBK7hj4Ov3rIwAA6MQIAIe17h2arAgVBZ2ZS8kP0EHV\nABhuZnr2uGIqc7uuOQPFxM1CEzFAew1nNMPoFqOPguCrFUlg/vCuh/r1o7BeP29P\nMKa+8rLNS75fNi4Niz1eO3ldNpird1emWnmLNfgarHX2/CqUI/m4SOU1qzNYSMo0\nvV3o2+t7O1HndMdc+mSu+SAoDYCrRTB7DE+gKPMSYdPj3CeCr5HKCD5bIKBschrN\nG6ms+TZi0PlQ/Jj9LAyo69h7Gu0mzYMIySDHCx+NQXMZ4coWuUYXLxyzKTqt4DWg\nSQVX6l1PrvdxXCVOFNmtW16F/jAZhBOodvx0z4uQkOB+SRtRcdEYbD8yiy2+guE=\n=jvl/\n-----END PGP SIGNATURE-----\n", "payload": "tree 3038f4f97e6091e4affedf98a2010593c41c2416\nparent a0c1c0b4001f68c2f4827e65ec23e21fedc2a88d\nparent 8dd844ad0ab6378e6f6317dd93883bc8f642e642\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624132153 +0000\ncommitter GitHub <noreply@github.com> 1624132153 +0000\n\nMerge #505\n\n505: DWARF for Rust primitive types r=philberty a=tromey\n\nI found a couple of small bugs in the DWARF that is emitted for primitive types.\r\nThese two patches fix these.\n\nCo-authored-by: Tom Tromey <tom@tromey.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace501018b5a3eedc545711814aad14149d16395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace501018b5a3eedc545711814aad14149d16395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace501018b5a3eedc545711814aad14149d16395/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c1c0b4001f68c2f4827e65ec23e21fedc2a88d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c1c0b4001f68c2f4827e65ec23e21fedc2a88d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c1c0b4001f68c2f4827e65ec23e21fedc2a88d"}, {"sha": "8dd844ad0ab6378e6f6317dd93883bc8f642e642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd844ad0ab6378e6f6317dd93883bc8f642e642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd844ad0ab6378e6f6317dd93883bc8f642e642"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "0ce8935e3184462a3597ad7c13761eb00873037c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace501018b5a3eedc545711814aad14149d16395/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace501018b5a3eedc545711814aad14149d16395/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ace501018b5a3eedc545711814aad14149d16395", "patch": "@@ -5498,6 +5498,16 @@ is_fortran (const_tree decl)\n   return is_fortran ();\n }\n \n+/* Return TRUE if the language is Rust.  */\n+\n+static inline bool\n+is_rust ()\n+{\n+  unsigned int lang = get_AT_unsigned (comp_unit_die (), DW_AT_language);\n+\n+  return lang == DW_LANG_Rust || lang == DW_LANG_Rust_old;\n+}\n+\n /* Return TRUE if the language is Ada.  */\n \n static inline bool\n@@ -12952,7 +12962,11 @@ base_type_die (tree type, bool reverse)\n \t}\n       if (TYPE_STRING_FLAG (type))\n \t{\n-\t  if (TYPE_UNSIGNED (type))\n+\t  if ((dwarf_version >= 4 || !dwarf_strict)\n+\t      && is_rust ()\n+\t      && int_size_in_bytes (type) == 4)\n+\t    encoding = DW_ATE_UTF;\n+\t  else if (TYPE_UNSIGNED (type))\n \t    encoding = DW_ATE_unsigned_char;\n \t  else\n \t    encoding = DW_ATE_signed_char;"}, {"sha": "3158c11e61e846030e98d398b39f8dcc742999e0", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace501018b5a3eedc545711814aad14149d16395/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace501018b5a3eedc545711814aad14149d16395/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=ace501018b5a3eedc545711814aad14149d16395", "patch": "@@ -1,5 +1,5 @@\n // rust-gcc.cc -- Rust frontend to gcc IR.\n-// Copyright (C) 2011-2020 Free Software Foundation, Inc.\n+// Copyright (C) 2011-2021 Free Software Foundation, Inc.\n // Contributed by Ian Lance Taylor, Google.\n // forked from gccgo\n \n@@ -217,10 +217,8 @@ class Gcc_backend : public Backend\n \n   Btype *wchar_type ()\n   {\n-    // i think this is meant to be 32 bit from\n-    // https://www.unicode.org/versions/Unicode13.0.0/ch03.pdf#G7404\n-    int precision = 32;\n-    tree wchar = make_unsigned_type (precision);\n+    tree wchar = make_unsigned_type (32);\n+    TYPE_STRING_FLAG (wchar) = 1;\n     return this->make_type (wchar);\n   }\n \n@@ -867,8 +865,6 @@ Gcc_backend::integer_type (bool is_unsigned, int bits)\n     {\n       if (bits == INT_TYPE_SIZE)\n \ttype = unsigned_type_node;\n-      else if (bits == CHAR_TYPE_SIZE)\n-\ttype = unsigned_char_type_node;\n       else if (bits == SHORT_TYPE_SIZE)\n \ttype = short_unsigned_type_node;\n       else if (bits == LONG_TYPE_SIZE)\n@@ -882,8 +878,6 @@ Gcc_backend::integer_type (bool is_unsigned, int bits)\n     {\n       if (bits == INT_TYPE_SIZE)\n \ttype = integer_type_node;\n-      else if (bits == CHAR_TYPE_SIZE)\n-\ttype = signed_char_type_node;\n       else if (bits == SHORT_TYPE_SIZE)\n \ttype = short_integer_type_node;\n       else if (bits == LONG_TYPE_SIZE)"}, {"sha": "5504481e2f90ea9516c5d1074bacac5d7bb4262e", "filename": "gcc/testsuite/rust/debug/chartype.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace501018b5a3eedc545711814aad14149d16395/gcc%2Ftestsuite%2Frust%2Fdebug%2Fchartype.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace501018b5a3eedc545711814aad14149d16395/gcc%2Ftestsuite%2Frust%2Fdebug%2Fchartype.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fdebug%2Fchartype.rs?ref=ace501018b5a3eedc545711814aad14149d16395", "patch": "@@ -0,0 +1,10 @@\n+// 'char' should use DW_ATE_UTF\n+fn main () {\n+    let c = 'x';\n+// { dg-do compile }\n+// Use -w to avoid warnings about the unused variables\n+// DW_ATE_UTF entered in DWARF 4.\n+// { dg-options \"-w -gdwarf-4 -dA\" }\n+// DW_ATE_UTF = 0x10\n+// { dg-final { scan-assembler \"0x10\\[^\\n\\r]* DW_AT_encoding\" } } */\n+}"}, {"sha": "8f0dd19f3467c2f3fbb7a11726567ed83f6103d8", "filename": "gcc/testsuite/rust/debug/i8u8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace501018b5a3eedc545711814aad14149d16395/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace501018b5a3eedc545711814aad14149d16395/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fdebug%2Fi8u8.rs?ref=ace501018b5a3eedc545711814aad14149d16395", "patch": "@@ -0,0 +1,12 @@\n+// i8 and u8 types should not have the DWARF 'char' encoding.\n+fn main () {\n+    let x : i8 = 5;\n+    let y : u8 = 7;\n+// { dg-do compile }\n+// Use -w to avoid warnings about the unused variables\n+// { dg-options \"-w -g -dA\" }\n+// DW_ATE_signed_char = 6\n+// { dg-final { scan-assembler-not \"0x6\\[^\\n\\r]* DW_AT_language\" } } */\n+// DW_ATE_unsigned_char = 8\n+// { dg-final { scan-assembler-not \"0x8\\[^\\n\\r]* DW_AT_language\" } } */\n+}"}]}