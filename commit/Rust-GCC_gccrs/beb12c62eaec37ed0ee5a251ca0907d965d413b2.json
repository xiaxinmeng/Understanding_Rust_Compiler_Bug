{"sha": "beb12c62eaec37ed0ee5a251ca0907d965d413b2", "node_id": "C_kwDOANBUbNoAKGJlYjEyYzYyZWFlYzM3ZWQwZWU1YTI1MWNhMDkwN2Q5NjVkNDEzYjI", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-16T15:15:47Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-03-16T15:15:48Z"}, "message": "tree-optimization/104941: Actually assign the conversion result\n\nAssign the result of fold_convert to offset.  Also make the useless\nconversion check lighter since the two way check is not needed here.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/104941\n\t* tree-object-size.cc (size_for_offset): Make useless conversion\n\tcheck lighter and assign result of fold_convert to OFFSET.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/104941\n\t* gcc.dg/builtin-dynamic-object-size-0.c (S1, S2): New structs.\n\t(test_alloc_nested_structs, g): New functions.\n\t(main): Call test_alloc_nested_structs.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "d320f700bbc0113c4cbf9ef9ea3d20153f3a0ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d320f700bbc0113c4cbf9ef9ea3d20153f3a0ab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb12c62eaec37ed0ee5a251ca0907d965d413b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb12c62eaec37ed0ee5a251ca0907d965d413b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb12c62eaec37ed0ee5a251ca0907d965d413b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb12c62eaec37ed0ee5a251ca0907d965d413b2/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be093b8dcc9cf5c9f99479ec68f1abe95aa38a83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be093b8dcc9cf5c9f99479ec68f1abe95aa38a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be093b8dcc9cf5c9f99479ec68f1abe95aa38a83"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "e5dc23a908d13cd25f78df740cfa0c503173040a", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb12c62eaec37ed0ee5a251ca0907d965d413b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb12c62eaec37ed0ee5a251ca0907d965d413b2/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=beb12c62eaec37ed0ee5a251ca0907d965d413b2", "patch": "@@ -323,6 +323,34 @@ test_substring (size_t sz, size_t off)\n   return __builtin_dynamic_object_size (&str[off], 0);\n }\n \n+struct S2\n+{\n+  char arr[7];\n+};\n+\n+struct S1\n+{\n+  int pad;\n+  struct S2 s2;\n+};\n+\n+static long\n+g (struct S1 *s1)\n+{\n+  struct S2 *s2 = &s1->s2;\n+  return __builtin_dynamic_object_size (s2->arr, 0);\n+}\n+\n+long\n+__attribute__ ((noinline))\n+test_alloc_nested_structs (int x)\n+{\n+  struct S1 *s1 = __builtin_malloc (x);\n+  return g (s1);\n+}\n+\n+/* POINTER_PLUS expressions.  */\n+\n size_t\n __attribute__ ((noinline))\n test_substring_ptrplus (size_t sz, size_t off)\n@@ -342,6 +370,8 @@ test_substring_ptrplus2 (size_t sz, size_t off, size_t off2)\n   return __builtin_dynamic_object_size (ptr + off2, 0);\n }\n \n+/* Function parameters.  */\n+\n size_t\n __attribute__ ((access (__read_write__, 1, 2)))\n __attribute__ ((noinline))\n@@ -382,6 +412,8 @@ test_parmsz_unknown (void *obj, void *unknown, size_t sz, int cond)\n   return __builtin_dynamic_object_size (cond ? obj : unknown, 0);\n }\n \n+/* Loops.  */\n+\n size_t\n __attribute__ ((noinline))\n __attribute__ ((access (__read_write__, 1, 2)))\n@@ -491,6 +523,8 @@ main (int argc, char **argv)\n     FAIL ();\n   if (test_dynarray_cond (1) != 8)\n     FAIL ();\n+  if (test_alloc_nested_structs (42) != 42 - sizeof (int))\n+    FAIL ();\n   if (test_deploop (128, 4) != 128)\n     FAIL ();\n   if (test_deploop (128, 129) != 32)"}, {"sha": "b0b50774936cd5d41f41208e4c3aef8962e65305", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb12c62eaec37ed0ee5a251ca0907d965d413b2/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb12c62eaec37ed0ee5a251ca0907d965d413b2/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=beb12c62eaec37ed0ee5a251ca0907d965d413b2", "patch": "@@ -371,8 +371,8 @@ size_for_offset (tree sz, tree offset, tree wholesize = NULL_TREE)\n     }\n \n   /* Safe to convert now, since a valid net offset should be non-negative.  */\n-  if (!types_compatible_p (TREE_TYPE (offset), sizetype))\n-    fold_convert (sizetype, offset);\n+  if (!useless_type_conversion_p (sizetype, TREE_TYPE (offset)))\n+    offset = fold_convert (sizetype, offset);\n \n   if (TREE_CODE (offset) == INTEGER_CST)\n     {"}]}