{"sha": "ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzMWEyNGRkY2ViN2QyZDNmMmQ5ZGExNTI2Y2NiZDM1NWYyOTdmNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T11:13:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-10T11:18:54Z"}, "message": "Fix formatting in HIR::Trait", "tree": {"sha": "cd02fe396eeaf8c37f226e90d97d89aea695349b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd02fe396eeaf8c37f226e90d97d89aea695349b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93393d007276a3335839741f45865bc05787869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93393d007276a3335839741f45865bc05787869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93393d007276a3335839741f45865bc05787869"}], "stats": {"total": 132, "additions": 65, "deletions": 67}, "files": [{"sha": "c6ac9bfa65e1edb63e49624a08e0b4d91a75c6c3", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 65, "deletions": 67, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=ba31a24ddceb7d2d3f2d9da1526ccbd355f297f6", "patch": "@@ -40,7 +40,7 @@ class TypeParam : public GenericParam\n \n   // bool has_type_param_bounds;\n   // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound> >\n+  std::vector<std::unique_ptr<TypeParamBound>>\n     type_param_bounds; // inlined form\n \n   // bool has_type;\n@@ -60,8 +60,8 @@ class TypeParam : public GenericParam\n \n   TypeParam (Analysis::NodeMapping mappings, Identifier type_representation,\n \t     Location locus = Location (),\n-\t     std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds\n-\t     = std::vector<std::unique_ptr<TypeParamBound> > (),\n+\t     std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds\n+\t     = std::vector<std::unique_ptr<TypeParamBound>> (),\n \t     std::unique_ptr<Type> type = nullptr,\n \t     AST::Attribute outer_attr = AST::Attribute::create_empty ())\n     : GenericParam (mappings), outer_attr (std::move (outer_attr)),\n@@ -122,7 +122,7 @@ class TypeParam : public GenericParam\n     return type->get_mappings ();\n   }\n \n-  std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n+  std::vector<std::unique_ptr<TypeParamBound>> &get_type_param_bounds ()\n   {\n     return type_param_bounds;\n   }\n@@ -197,7 +197,7 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n \n   // bool has_type_param_bounds;\n   // TypeParamBounds type_param_bounds;\n-  std::vector<std::unique_ptr<TypeParamBound> >\n+  std::vector<std::unique_ptr<TypeParamBound>>\n     type_param_bounds; // inlined form\n \n   // should this store location info?\n@@ -211,7 +211,7 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n \n   TypeBoundWhereClauseItem (\n     std::vector<LifetimeParam> for_lifetimes, std::unique_ptr<Type> bound_type,\n-    std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds)\n+    std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds)\n     : for_lifetimes (std::move (for_lifetimes)),\n       bound_type (std::move (bound_type)),\n       type_param_bounds (std::move (type_param_bounds))\n@@ -261,13 +261,12 @@ class TypeBoundWhereClauseItem : public WhereClauseItem\n struct WhereClause\n {\n private:\n-  std::vector<std::unique_ptr<WhereClauseItem> > where_clause_items;\n+  std::vector<std::unique_ptr<WhereClauseItem>> where_clause_items;\n \n   // should this store location info?\n \n public:\n-  WhereClause (\n-    std::vector<std::unique_ptr<WhereClauseItem> > where_clause_items)\n+  WhereClause (std::vector<std::unique_ptr<WhereClauseItem>> where_clause_items)\n     : where_clause_items (std::move (where_clause_items))\n   {}\n \n@@ -296,7 +295,7 @@ struct WhereClause\n   // Creates a WhereClause with no items.\n   static WhereClause create_empty ()\n   {\n-    return WhereClause (std::vector<std::unique_ptr<WhereClauseItem> > ());\n+    return WhereClause (std::vector<std::unique_ptr<WhereClauseItem>> ());\n   }\n \n   // Returns whether the WhereClause has no items.\n@@ -645,7 +644,7 @@ class Module : public VisItem\n   // bool has_inner_attrs;\n   AST::AttrVec inner_attrs;\n   // bool has_items;\n-  std::vector<std::unique_ptr<Item> > items;\n+  std::vector<std::unique_ptr<Item>> items;\n \n public:\n   std::string as_string () const override;\n@@ -658,7 +657,7 @@ class Module : public VisItem\n \n   // Full constructor\n   Module (Analysis::NodeMapping mappings, Identifier module_name,\n-\t  Location locus, std::vector<std::unique_ptr<Item> > items,\n+\t  Location locus, std::vector<std::unique_ptr<Item>> items,\n \t  Visibility visibility = Visibility::create_error (),\n \t  AST::AttrVec inner_attrs = AST::AttrVec (),\n \t  AST::AttrVec outer_attrs = AST::AttrVec ())\n@@ -696,7 +695,7 @@ class Module : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<Item> > &get_items () { return items; };\n+  std::vector<std::unique_ptr<Item>> &get_items () { return items; };\n \n   /* Override that runs the function recursively on all items contained within\n    * the module. */\n@@ -867,11 +866,11 @@ class UseTreeList : public UseTree\n   PathType path_type;\n   AST::SimplePath path;\n \n-  std::vector<std::unique_ptr<UseTree> > trees;\n+  std::vector<std::unique_ptr<UseTree>> trees;\n \n public:\n   UseTreeList (PathType path_type, AST::SimplePath path,\n-\t       std::vector<std::unique_ptr<UseTree> > trees, Location locus)\n+\t       std::vector<std::unique_ptr<UseTree>> trees, Location locus)\n     : UseTree (locus), path_type (path_type), path (std::move (path)),\n       trees (std::move (trees))\n   {\n@@ -1043,7 +1042,7 @@ class Function : public VisItem, public ImplItem\n {\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params;\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n   std::vector<FunctionParam> function_params;\n   std::unique_ptr<Type> return_type;\n   WhereClause where_clause;\n@@ -1069,7 +1068,7 @@ class Function : public VisItem, public ImplItem\n   // Mega-constructor with all possible fields\n   Function (Analysis::NodeMapping mappings, Identifier function_name,\n \t    FunctionQualifiers qualifiers,\n-\t    std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t    std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t    std::vector<FunctionParam> function_params,\n \t    std::unique_ptr<Type> return_type, WhereClause where_clause,\n \t    std::unique_ptr<BlockExpr> function_body, Visibility vis,\n@@ -1139,11 +1138,11 @@ class Function : public VisItem, public ImplItem\n     return function_params;\n   }\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n-  const std::vector<std::unique_ptr<GenericParam> > &get_generic_params () const\n+  const std::vector<std::unique_ptr<GenericParam>> &get_generic_params () const\n   {\n     return generic_params;\n   }\n@@ -1203,7 +1202,7 @@ class TypeAlias : public VisItem, public ImplItem\n \n   // bool has_generics;\n   // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n+  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n \n   // bool has_where_clause;\n   WhereClause where_clause;\n@@ -1223,7 +1222,7 @@ class TypeAlias : public VisItem, public ImplItem\n \n   // Mega-constructor with all possible fields\n   TypeAlias (Analysis::NodeMapping mappings, Identifier new_type_name,\n-\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t     std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t     WhereClause where_clause, std::unique_ptr<Type> existing_type,\n \t     Visibility vis, AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n@@ -1268,11 +1267,11 @@ class TypeAlias : public VisItem, public ImplItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n-  const std::vector<std::unique_ptr<GenericParam> > &get_generic_params () const\n+  const std::vector<std::unique_ptr<GenericParam>> &get_generic_params () const\n   {\n     return generic_params;\n   }\n@@ -1318,7 +1317,7 @@ class Struct : public VisItem\n \n   // bool has_generics;\n   // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n+  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n \n   // bool has_where_clause;\n   WhereClause where_clause;\n@@ -1336,14 +1335,14 @@ class Struct : public VisItem\n \n   Location get_locus () const override final { return locus; }\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n \n protected:\n   Struct (Analysis::NodeMapping mappings, Identifier struct_name,\n-\t  std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t  std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t  WhereClause where_clause, Visibility vis, Location locus,\n \t  AST::AttrVec outer_attrs = AST::AttrVec ())\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n@@ -1465,7 +1464,7 @@ class StructStruct : public Struct\n   // Mega-constructor with all possible fields\n   StructStruct (Analysis::NodeMapping mappings, std::vector<StructField> fields,\n \t\tIdentifier struct_name,\n-\t\tstd::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t\tstd::vector<std::unique_ptr<GenericParam>> generic_params,\n \t\tWhereClause where_clause, bool is_unit, Visibility vis,\n \t\tAST::AttrVec outer_attrs, Location locus)\n     : Struct (std::move (mappings), std::move (struct_name),\n@@ -1476,7 +1475,7 @@ class StructStruct : public Struct\n \n   // Unit struct constructor\n   StructStruct (Analysis::NodeMapping mappings, Identifier struct_name,\n-\t\tstd::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t\tstd::vector<std::unique_ptr<GenericParam>> generic_params,\n \t\tWhereClause where_clause, Visibility vis,\n \t\tAST::AttrVec outer_attrs, Location locus)\n     : Struct (std::move (mappings), std::move (struct_name),\n@@ -1597,7 +1596,7 @@ class TupleStruct : public Struct\n   // Mega-constructor with all possible fields\n   TupleStruct (Analysis::NodeMapping mappings, std::vector<TupleField> fields,\n \t       Identifier struct_name,\n-\t       std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t       std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t       WhereClause where_clause, Visibility vis,\n \t       AST::AttrVec outer_attrs, Location locus)\n     : Struct (std::move (mappings), std::move (struct_name),\n@@ -1786,12 +1785,12 @@ class Enum : public VisItem\n \n   // bool has_generics;\n   // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n+  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n \n   // bool has_where_clause;\n   WhereClause where_clause;\n \n-  std::vector<std::unique_ptr<EnumItem> > items;\n+  std::vector<std::unique_ptr<EnumItem>> items;\n \n   Location locus;\n \n@@ -1810,8 +1809,8 @@ class Enum : public VisItem\n \n   // Mega-constructor\n   Enum (Analysis::NodeMapping mappings, Identifier enum_name, Visibility vis,\n-\tstd::vector<std::unique_ptr<GenericParam> > generic_params,\n-\tWhereClause where_clause, std::vector<std::unique_ptr<EnumItem> > items,\n+\tstd::vector<std::unique_ptr<GenericParam>> generic_params,\n+\tWhereClause where_clause, std::vector<std::unique_ptr<EnumItem>> items,\n \tAST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n       enum_name (std::move (enum_name)),\n@@ -1884,7 +1883,7 @@ class Union : public VisItem\n \n   // bool has_generics;\n   // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n+  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n \n   // bool has_where_clause;\n   WhereClause where_clause;\n@@ -1903,7 +1902,7 @@ class Union : public VisItem\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n   Union (Analysis::NodeMapping mappings, Identifier union_name, Visibility vis,\n-\t std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t WhereClause where_clause, std::vector<StructField> variants,\n \t AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n@@ -1944,7 +1943,7 @@ class Union : public VisItem\n   Union (Union &&other) = default;\n   Union &operator= (Union &&other) = default;\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n@@ -2116,7 +2115,7 @@ struct TraitFunctionDecl\n private:\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params;\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n   std::vector<FunctionParam> function_params;\n   std::unique_ptr<Type> return_type;\n   WhereClause where_clause;\n@@ -2125,7 +2124,7 @@ struct TraitFunctionDecl\n public:\n   // Mega-constructor\n   TraitFunctionDecl (Identifier function_name, FunctionQualifiers qualifiers,\n-\t\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t\t     std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t\t     SelfParam self, std::vector<FunctionParam> function_params,\n \t\t     std::unique_ptr<Type> return_type,\n \t\t     WhereClause where_clause)\n@@ -2196,7 +2195,7 @@ struct TraitFunctionDecl\n \n   Identifier get_function_name () const { return function_name; }\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n@@ -2366,18 +2365,17 @@ class TraitItemType : public TraitItem\n   AST::AttrVec outer_attrs;\n \n   Identifier name;\n-  std::vector<std::unique_ptr<TypeParamBound> >\n+  std::vector<std::unique_ptr<TypeParamBound>>\n     type_param_bounds; // inlined form\n   Location locus;\n \n public:\n   // Returns whether trait item type has type param bounds.\n   bool has_type_param_bounds () const { return !type_param_bounds.empty (); }\n \n-  TraitItemType (\n-    Analysis::NodeMapping mappings, Identifier name,\n-    std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n-    AST::AttrVec outer_attrs, Location locus)\n+  TraitItemType (Analysis::NodeMapping mappings, Identifier name,\n+\t\t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n+\t\t AST::AttrVec outer_attrs, Location locus)\n     : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n       name (std::move (name)),\n       type_param_bounds (std::move (type_param_bounds)), locus (locus)\n@@ -2421,7 +2419,7 @@ class TraitItemType : public TraitItem\n \n   Identifier get_name () const { return name; }\n \n-  std::vector<std::unique_ptr<TypeParamBound> > &get_type_param_bounds ()\n+  std::vector<std::unique_ptr<TypeParamBound>> &get_type_param_bounds ()\n   {\n     return type_param_bounds;\n   }\n@@ -2441,10 +2439,10 @@ class Trait : public VisItem\n {\n   bool has_unsafe;\n   Identifier name;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params;\n-  std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds;\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n+  std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds;\n   WhereClause where_clause;\n-  std::vector<std::unique_ptr<TraitItem> > trait_items;\n+  std::vector<std::unique_ptr<TraitItem>> trait_items;\n   Location locus;\n \n public:\n@@ -2462,7 +2460,7 @@ class Trait : public VisItem\n   // Returns whether trait has trait items.\n   bool has_trait_items () const { return !trait_items.empty (); }\n \n-  std::vector<std::unique_ptr<TraitItem> > &get_trait_items ()\n+  std::vector<std::unique_ptr<TraitItem>> &get_trait_items ()\n   {\n     return trait_items;\n   }\n@@ -2471,10 +2469,10 @@ class Trait : public VisItem\n \n   // Mega-constructor\n   Trait (Analysis::NodeMapping mappings, Identifier name, bool is_unsafe,\n-\t std::vector<std::unique_ptr<GenericParam> > generic_params,\n-\t std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n+\t std::vector<std::unique_ptr<GenericParam>> generic_params,\n+\t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n \t WhereClause where_clause,\n-\t std::vector<std::unique_ptr<TraitItem> > trait_items, Visibility vis,\n+\t std::vector<std::unique_ptr<TraitItem>> trait_items, Visibility vis,\n \t AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n       has_unsafe (is_unsafe), name (std::move (name)),\n@@ -2534,12 +2532,12 @@ class Trait : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n \n-  const std::vector<std::unique_ptr<GenericParam> > &get_generic_params () const\n+  const std::vector<std::unique_ptr<GenericParam>> &get_generic_params () const\n   {\n     return generic_params;\n   }\n@@ -2552,18 +2550,18 @@ class Trait : public VisItem\n \n class ImplBlock : public VisItem\n {\n-  std::vector<std::unique_ptr<GenericParam> > generic_params;\n+  std::vector<std::unique_ptr<GenericParam>> generic_params;\n   std::unique_ptr<Type> impl_type;\n   std::unique_ptr<TypePath> trait_ref;\n   WhereClause where_clause;\n   AST::AttrVec inner_attrs;\n   Location locus;\n-  std::vector<std::unique_ptr<ImplItem> > impl_items;\n+  std::vector<std::unique_ptr<ImplItem>> impl_items;\n \n public:\n   ImplBlock (Analysis::NodeMapping mappings,\n-\t     std::vector<std::unique_ptr<ImplItem> > impl_items,\n-\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n+\t     std::vector<std::unique_ptr<ImplItem>> impl_items,\n+\t     std::vector<std::unique_ptr<GenericParam>> generic_params,\n \t     std::unique_ptr<Type> impl_type,\n \t     std::unique_ptr<TypePath> trait_ref, WhereClause where_clause,\n \t     Visibility vis, AST::AttrVec inner_attrs, AST::AttrVec outer_attrs,\n@@ -2619,12 +2617,12 @@ class ImplBlock : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<ImplItem> > &get_impl_items ()\n+  std::vector<std::unique_ptr<ImplItem>> &get_impl_items ()\n   {\n     return impl_items;\n   };\n \n-  const std::vector<std::unique_ptr<ImplItem> > &get_impl_items () const\n+  const std::vector<std::unique_ptr<ImplItem>> &get_impl_items () const\n   {\n     return impl_items;\n   };\n@@ -2642,7 +2640,7 @@ class ImplBlock : public VisItem\n \n   std::unique_ptr<Type> &get_type () { return impl_type; };\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n@@ -2832,7 +2830,7 @@ class ExternalFunctionItem : public ExternalItem\n {\n   // bool has_generics;\n   // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n+  std::vector<std::unique_ptr<GenericParam>> generic_params; // inlined\n \n   // bool has_return_type;\n   // FunctionReturnType return_type;\n@@ -2856,7 +2854,7 @@ class ExternalFunctionItem : public ExternalItem\n \n   ExternalFunctionItem (\n     Analysis::NodeMapping mappings, Identifier item_name,\n-    std::vector<std::unique_ptr<GenericParam> > generic_params,\n+    std::vector<std::unique_ptr<GenericParam>> generic_params,\n     std::unique_ptr<Type> return_type, WhereClause where_clause,\n     std::vector<NamedFunctionParam> function_params, bool has_variadics,\n     Visibility vis, AST::AttrVec outer_attrs, Location locus)\n@@ -2905,7 +2903,7 @@ class ExternalFunctionItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;\n   }\n@@ -2938,7 +2936,7 @@ class ExternBlock : public VisItem\n   AST::AttrVec inner_attrs;\n \n   // bool has_extern_items;\n-  std::vector<std::unique_ptr<ExternalItem> > extern_items;\n+  std::vector<std::unique_ptr<ExternalItem>> extern_items;\n \n   Location locus;\n \n@@ -2957,7 +2955,7 @@ class ExternBlock : public VisItem\n   std::string get_abi () const { return abi; }\n \n   ExternBlock (Analysis::NodeMapping mappings, std::string abi,\n-\t       std::vector<std::unique_ptr<ExternalItem> > extern_items,\n+\t       std::vector<std::unique_ptr<ExternalItem>> extern_items,\n \t       Visibility vis, AST::AttrVec inner_attrs,\n \t       AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n@@ -2998,7 +2996,7 @@ class ExternBlock : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<ExternalItem> > &get_extern_items ()\n+  std::vector<std::unique_ptr<ExternalItem>> &get_extern_items ()\n   {\n     return extern_items;\n   }"}]}