{"sha": "717b2d4191e80dc8aae3847675de73ed3f611fb7", "node_id": "C_kwDOANBUbNoAKDcxN2IyZDQxOTFlODBkYzhhYWUzODQ3Njc1ZGU3M2VkM2Y2MTFmYjc", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-03-31T06:45:58Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-04-06T15:38:15Z"}, "message": "--target-help: align with --help=target\n\n\tPR driver/105096\n\ngcc/ChangeLog:\n\n\t* common.opt: Document properly based on what it does.\n\t* gcc.cc (display_help): Unify with what we have in common.opt.\n\t* opts.cc (common_handle_option): Do not print undocumented\n\toptions.", "tree": {"sha": "3df6620cdde941f1f5ca2e0b56d57f433ec586f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df6620cdde941f1f5ca2e0b56d57f433ec586f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/717b2d4191e80dc8aae3847675de73ed3f611fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b2d4191e80dc8aae3847675de73ed3f611fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717b2d4191e80dc8aae3847675de73ed3f611fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b2d4191e80dc8aae3847675de73ed3f611fb7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c65d15d40738f3691ff1a39907a4b93e9fe5c5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65d15d40738f3691ff1a39907a4b93e9fe5c5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65d15d40738f3691ff1a39907a4b93e9fe5c5ae"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "8a0dafc522d12037416aa33e4d4c9e9ccf4a1213", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=717b2d4191e80dc8aae3847675de73ed3f611fb7", "patch": "@@ -419,7 +419,7 @@ Driver Alias(symbolic)\n \n -target-help\n Common Driver\n-Alias for --help=target.\n+Display target specific command line options (including assembler and linker options).\n \n -time\n Driver Alias(time)"}, {"sha": "bb07cc244e30fbeccc701816db888f497d65eb08", "filename": "gcc/gcc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=717b2d4191e80dc8aae3847675de73ed3f611fb7", "patch": "@@ -3758,7 +3758,8 @@ display_help (void)\n \n   fputs (_(\"  -pass-exit-codes         Exit with highest error code from a phase.\\n\"), stdout);\n   fputs (_(\"  --help                   Display this information.\\n\"), stdout);\n-  fputs (_(\"  --target-help            Display target specific command line options.\\n\"), stdout);\n+  fputs (_(\"  --target-help            Display target specific command line options \"\n+\t   \"(including assembler and linker options).\\n\"), stdout);\n   fputs (_(\"  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...].\\n\"), stdout);\n   fputs (_(\"                           Display specific types of command line options.\\n\"), stdout);\n   if (! verbose_flag)"}, {"sha": "e5e3119a98057a66f143c6b2aa8b212f77a062f6", "filename": "gcc/opts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/717b2d4191e80dc8aae3847675de73ed3f611fb7/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=717b2d4191e80dc8aae3847675de73ed3f611fb7", "patch": "@@ -2557,7 +2557,7 @@ common_handle_option (struct gcc_options *opts,\n \tbreak;\n \n       target_option_override_hook ();\n-      print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0, opts, lang_mask);\n+      print_specific_help (CL_TARGET, 0, 0, opts, lang_mask);\n       opts->x_exit_after_options = true;\n       break;\n "}]}