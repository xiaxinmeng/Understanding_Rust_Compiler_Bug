{"sha": "143597ffdaaf5ffc45f0940263704127ef3aa671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzNTk3ZmZkYWFmNWZmYzQ1ZjA5NDAyNjM3MDQxMjdlZjNhYTY3MQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-04-13T12:39:53Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-04-13T12:39:53Z"}, "message": "tree-ssa-reassoc.c (repropagate_negates): Merge negates also into MINUS_EXPRs.\n\n\t* tree-ssa-reassoc.c (repropagate_negates): Merge negates also\n\tinto MINUS_EXPRs.\n\t(can_reassociate_p): New function.\n\t(break_up_subtract_bb, reassociate_bb): Use it.\n\ntestsuite/\n\t* gcc.dg/tree-ssa/negate.c: New testcase.\n\nFrom-SVN: r158265", "tree": {"sha": "05699a395708e0a401d3e3d5b87f880893f20ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05699a395708e0a401d3e3d5b87f880893f20ac8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143597ffdaaf5ffc45f0940263704127ef3aa671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143597ffdaaf5ffc45f0940263704127ef3aa671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143597ffdaaf5ffc45f0940263704127ef3aa671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143597ffdaaf5ffc45f0940263704127ef3aa671/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54c5ec4fbf4139a627be486b0416a7f636b104f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c5ec4fbf4139a627be486b0416a7f636b104f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c5ec4fbf4139a627be486b0416a7f636b104f8"}], "stats": {"total": 137, "additions": 102, "deletions": 35}, "files": [{"sha": "dfeebd8973955d978e9eb67fa31ffbe92a32ae94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=143597ffdaaf5ffc45f0940263704127ef3aa671", "patch": "@@ -1,3 +1,10 @@\n+2010-04-13  Michael Matz  <matz@suse.de>\n+\n+\t* tree-ssa-reassoc.c (repropagate_negates): Merge negates also\n+\tinto MINUS_EXPRs.\n+\t(can_reassociate_p): New function.\n+\t(break_up_subtract_bb, reassociate_bb): Use it.\n+\n 2010-04-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR bootstrap/43737"}, {"sha": "2c370c071430ed3e9f916530c7fe6d34463b8589", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=143597ffdaaf5ffc45f0940263704127ef3aa671", "patch": "@@ -1,3 +1,7 @@\n+2010-04-13  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/tree-ssa/negate.c: New testcase.\n+\n 2010-04-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/43735"}, {"sha": "c51f323e710baeffc5ff9746dfd7a7b77e3ae9f6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/negate.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnegate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnegate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fnegate.c?ref=143597ffdaaf5ffc45f0940263704127ef3aa671", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc1\" } */\n+\n+int f (int a, int b)\n+{\n+  int x = -a;\n+  int y = b - x;\n+  return y;\n+}\n+\n+int g (int a, int b)\n+{\n+  int x = -a;\n+  int y = x - b;\n+  return y;\n+}\n+\n+/* There should be two additions now.  */\n+/* { dg-final { scan-tree-dump-times \"\\\\+\" 2 \"reassoc1\"} } */\n+/* { dg-final { cleanup-tree-dump \"reassoc1\" } } */"}, {"sha": "9a623bb3d59d2c5c963d743c784d76a66ab4d9cb", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 71, "deletions": 35, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143597ffdaaf5ffc45f0940263704127ef3aa671/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=143597ffdaaf5ffc45f0940263704127ef3aa671", "patch": "@@ -1707,14 +1707,15 @@ repropagate_negates (void)\n     {\n       gimple user = get_single_immediate_use (negate);\n \n+      if (!user || !is_gimple_assign (user))\n+\tcontinue;\n+\n       /* The negate operand can be either operand of a PLUS_EXPR\n \t (it can be the LHS if the RHS is a constant for example).\n \n \t Force the negate operand to the RHS of the PLUS_EXPR, then\n \t transform the PLUS_EXPR into a MINUS_EXPR.  */\n-      if (user\n-\t  && is_gimple_assign (user)\n-\t  && gimple_assign_rhs_code (user) == PLUS_EXPR)\n+      if (gimple_assign_rhs_code (user) == PLUS_EXPR)\n \t{\n \t  /* If the negated operand appears on the LHS of the\n \t     PLUS_EXPR, exchange the operands of the PLUS_EXPR\n@@ -1737,9 +1738,63 @@ repropagate_negates (void)\n \t      update_stmt (user);\n \t    }\n \t}\n+      else if (gimple_assign_rhs_code (user) == MINUS_EXPR)\n+\t{\n+\t  if (gimple_assign_rhs1 (user) == negate)\n+\t    {\n+\t      /* We have\n+\t           x = -a\n+\t\t   y = x - b\n+\t\t which we transform into\n+\t\t   x = a + b\n+\t\t   y = -x .\n+\t\t This pushes down the negate which we possibly can merge\n+\t\t into some other operation, hence insert it into the\n+\t\t plus_negates vector.  */\n+\t      gimple feed = SSA_NAME_DEF_STMT (negate);\n+\t      tree a = gimple_assign_rhs1 (feed);\n+\t      tree rhs2 = gimple_assign_rhs2 (user);\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (feed), gsi2;\n+\t      gimple_replace_lhs (feed, negate);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, PLUS_EXPR, a, rhs2);\n+\t      update_stmt (gsi_stmt (gsi));\n+\t      gsi2 = gsi_for_stmt (user);\n+\t      gimple_assign_set_rhs_with_ops (&gsi2, NEGATE_EXPR, negate, NULL);\n+\t      update_stmt (gsi_stmt (gsi2));\n+\t      gsi_move_before (&gsi, &gsi2);\n+\t      VEC_safe_push (tree, heap, plus_negates,\n+\t\t\t     gimple_assign_lhs (gsi_stmt (gsi2)));\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Transform \"x = -a; y = b - x\" into \"y = b + a\", getting\n+\t         rid of one operation.  */\n+\t      gimple feed = SSA_NAME_DEF_STMT (negate);\n+\t      tree a = gimple_assign_rhs1 (feed);\n+\t      tree rhs1 = gimple_assign_rhs1 (user);\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (user);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, PLUS_EXPR, rhs1, a);\n+\t      update_stmt (gsi_stmt (gsi));\n+\t    }\n+\t}\n     }\n }\n \n+/* Returns true if OP is of a type for which we can do reassociation.\n+   That is for integral or non-saturating fixed-point types, and for\n+   floating point type when associative-math is enabled.  */\n+\n+static bool\n+can_reassociate_p (tree op)\n+{\n+  tree type = TREE_TYPE (op);\n+  if (INTEGRAL_TYPE_P (type)\n+      || NON_SAT_FIXED_POINT_TYPE_P (type)\n+      || (flag_associative_math && SCALAR_FLOAT_TYPE_P (type)))\n+    return true;\n+  return false;\n+}\n+\n /* Break up subtract operations in block BB.\n \n    We do this top down because we don't know whether the subtract is\n@@ -1768,27 +1823,15 @@ break_up_subtract_bb (basic_block bb)\n       gimple stmt = gsi_stmt (gsi);\n       gimple_set_visited (stmt, false);\n \n+      if (!is_gimple_assign (stmt)\n+\t  || !can_reassociate_p (gimple_assign_lhs (stmt)))\n+\tcontinue;\n+\n       /* Look for simple gimple subtract operations.  */\n-      if (is_gimple_assign (stmt)\n-\t  && gimple_assign_rhs_code (stmt) == MINUS_EXPR)\n+      if (gimple_assign_rhs_code (stmt) == MINUS_EXPR)\n \t{\n-\t  tree lhs = gimple_assign_lhs (stmt);\n-\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n-\t  tree rhs2 = gimple_assign_rhs2 (stmt);\n-\n-\t  /* If associative-math we can do reassociation for\n-\t     non-integral types.  Or, we can do reassociation for\n-\t     non-saturating fixed-point types.  */\n-\t  if ((!INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n-\t       || !INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n-\t       || !INTEGRAL_TYPE_P (TREE_TYPE (rhs2)))\n-\t      && (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (lhs))\n-\t\t  || !SCALAR_FLOAT_TYPE_P (TREE_TYPE(rhs1))\n-\t\t  || !SCALAR_FLOAT_TYPE_P (TREE_TYPE(rhs2))\n-\t\t  || !flag_associative_math)\n-\t      && (!NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE (lhs))\n-\t\t  || !NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE(rhs1))\n-\t\t  || !NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE(rhs2))))\n+\t  if (!can_reassociate_p (gimple_assign_rhs1 (stmt))\n+\t      || !can_reassociate_p (gimple_assign_rhs2 (stmt)))\n \t    continue;\n \n \t  /* Check for a subtract used only in an addition.  If this\n@@ -1798,6 +1841,9 @@ break_up_subtract_bb (basic_block bb)\n \t  if (should_break_up_subtract (stmt))\n \t    break_up_subtract (stmt, &gsi);\n \t}\n+      else if (gimple_assign_rhs_code (stmt) == NEGATE_EXPR\n+\t       && can_reassociate_p (gimple_assign_rhs1 (stmt)))\n+\tVEC_safe_push (tree, heap, plus_negates, gimple_assign_lhs (stmt));\n     }\n   for (son = first_dom_son (CDI_DOMINATORS, bb);\n        son;\n@@ -1858,19 +1904,9 @@ reassociate_bb (basic_block bb)\n \t  rhs1 = gimple_assign_rhs1 (stmt);\n \t  rhs2 = gimple_assign_rhs2 (stmt);\n \n-\t  /* If associative-math we can do reassociation for\n-\t     non-integral types.  Or, we can do reassociation for\n-\t     non-saturating fixed-point types.  */\n-\t  if ((!INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n-\t       || !INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n-\t       || !INTEGRAL_TYPE_P (TREE_TYPE (rhs2)))\n-\t      && (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (lhs))\n-\t\t  || !SCALAR_FLOAT_TYPE_P (TREE_TYPE(rhs1))\n-\t\t  || !SCALAR_FLOAT_TYPE_P (TREE_TYPE(rhs2))\n-\t\t  || !flag_associative_math)\n-\t      && (!NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE (lhs))\n-\t\t  || !NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE(rhs1))\n-\t\t  || !NON_SAT_FIXED_POINT_TYPE_P (TREE_TYPE(rhs2))))\n+\t  if (!can_reassociate_p (lhs)\n+\t      || !can_reassociate_p (rhs1)\n+\t      || !can_reassociate_p (rhs2))\n \t    continue;\n \n \t  if (associative_tree_code (rhs_code))"}]}