{"sha": "81bc077a39faa66769629155bc7d3c03cfe1d194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiYzA3N2EzOWZhYTY2NzY5NjI5MTU1YmM3ZDNjMDNjZmUxZDE5NA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-12T13:39:07Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-12T13:39:07Z"}, "message": "2003-10-12  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/PipeImpl.java\n\t(SourceChannelImpl): New inner class.\n\t(SinkChannelImpl): New inner class.\n\t(sink): New member variable.\n\t(source): New member variable.\n\t(PipeImpl): Add SelectorProvider argument, implemented.\n\t(nativeInit): New method.\n\t(sink): Return sink channel.\n\t(source): Return source channel.\n\t* gnu/java/nio/SelectorProviderImpl.java\n\t(openPipe): Give provider as argument to PipeImpl constructor.\n\t* java/nio/channels/spi/SelectorProvider.java\n\t(pr): Removed.\n\t(systemDefaultProvider): New member variable.\n\t(provider): Made it synchronized, use property\n\tjava.nio.channels.spi.SelectorProvider.\n\t* gnu/java/nio/natPipeImpl.cc: New file.\n\t* Makefile.am (nat_source_files): Added gnu/java/nio/natPipeImpl.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r72397", "tree": {"sha": "5d08f0f5020b2a6cf46bdef0ba775007240ccd17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d08f0f5020b2a6cf46bdef0ba775007240ccd17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81bc077a39faa66769629155bc7d3c03cfe1d194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc077a39faa66769629155bc7d3c03cfe1d194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81bc077a39faa66769629155bc7d3c03cfe1d194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81bc077a39faa66769629155bc7d3c03cfe1d194/comments", "author": null, "committer": null, "parents": [{"sha": "b77d1698d9615b96f094c2bf665f4b16d6c5d674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77d1698d9615b96f094c2bf665f4b16d6c5d674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77d1698d9615b96f094c2bf665f4b16d6c5d674"}], "stats": {"total": 229, "additions": 208, "deletions": 21}, "files": [{"sha": "5c5f1f67073e9e392aa0f3635b59f9874dbb05e0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -1,3 +1,25 @@\n+2003-10-12  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/PipeImpl.java\n+\t(SourceChannelImpl): New inner class.\n+\t(SinkChannelImpl): New inner class.\n+\t(sink): New member variable.\n+\t(source): New member variable.\n+\t(PipeImpl): Add SelectorProvider argument, implemented.\n+\t(nativeInit): New method.\n+\t(sink): Return sink channel.\n+\t(source): Return source channel.\n+\t* gnu/java/nio/SelectorProviderImpl.java\n+\t(openPipe): Give provider as argument to PipeImpl constructor.\n+\t* java/nio/channels/spi/SelectorProvider.java\n+\t(pr): Removed.\n+\t(systemDefaultProvider): New member variable.\n+\t(provider): Made it synchronized, use property\n+\tjava.nio.channels.spi.SelectorProvider.\n+\t* gnu/java/nio/natPipeImpl.cc: New file.\n+\t* Makefile.am (nat_source_files): Added gnu/java/nio/natPipeImpl.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-10-12  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/table/DefaultTableModel.java,"}, {"sha": "bc4ea9a7130317f44c94b7735040506aa682e91e", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -2659,6 +2659,7 @@ gnu/java/net/natPlainDatagramSocketImpl.cc \\\n gnu/java/net/natPlainSocketImpl.cc \\\n gnu/java/net/protocol/core/natCoreInputStream.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n+gnu/java/nio/natPipeImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natNIOServerSocket.cc \\\n java/io/natFile.cc \\"}, {"sha": "7a80131862d6667605e8a5581a3d2791dc86eae6", "filename": "libjava/Makefile.in", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -2377,6 +2377,7 @@ gnu/java/net/natPlainDatagramSocketImpl.cc \\\n gnu/java/net/natPlainSocketImpl.cc \\\n gnu/java/net/protocol/core/natCoreInputStream.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n+gnu/java/nio/natPipeImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n gnu/java/nio/natNIOServerSocket.cc \\\n java/io/natFile.cc \\\n@@ -2555,14 +2556,14 @@ gnu/java/awt/natEmbeddedWindow.lo \\\n gnu/java/net/natPlainDatagramSocketImpl.lo \\\n gnu/java/net/natPlainSocketImpl.lo \\\n gnu/java/net/protocol/core/natCoreInputStream.lo \\\n-gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natSelectorImpl.lo \\\n-gnu/java/nio/natNIOServerSocket.lo java/io/natFile.lo \\\n-java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n-java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n-java/lang/natClass.lo java/lang/natClassLoader.lo \\\n-java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n-java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n-java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natPipeImpl.lo \\\n+gnu/java/nio/natSelectorImpl.lo gnu/java/nio/natNIOServerSocket.lo \\\n+java/io/natFile.lo java/io/natFileDescriptor.lo \\\n+java/io/natObjectInputStream.lo java/io/natVMObjectStreamClass.lo \\\n+java/lang/natCharacter.lo java/lang/natClass.lo \\\n+java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n+java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n+java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n@@ -3055,7 +3056,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/nio/charset/UTF_16LE.P \\\n .deps/gnu/java/nio/charset/UTF_8.P .deps/gnu/java/nio/natFileLockImpl.P \\\n .deps/gnu/java/nio/natNIOServerSocket.P \\\n-.deps/gnu/java/nio/natSelectorImpl.P \\\n+.deps/gnu/java/nio/natPipeImpl.P .deps/gnu/java/nio/natSelectorImpl.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectInputStream.P \\\n .deps/gnu/java/rmi/RMIMarshalledObjectOutputStream.P \\\n .deps/gnu/java/rmi/dgc/DGCImpl.P .deps/gnu/java/rmi/dgc/DGCImpl_Skel.P \\"}, {"sha": "da608d21c19f75706935a34bd77ded5149ec202f", "filename": "libjava/gnu/java/nio/PipeImpl.java", "status": "modified", "additions": 110, "deletions": 4, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FPipeImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FPipeImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FPipeImpl.java?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -1,5 +1,5 @@\n /* PipeImpl.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,21 +37,127 @@\n \n package gnu.java.nio;\n \n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.nio.channels.Pipe;\n+import java.nio.channels.spi.SelectorProvider;\n \n class PipeImpl extends Pipe\n {\n-  public PipeImpl()\n+  public final class SourceChannelImpl extends Pipe.SourceChannel\n   {\n+    private int native_fd;\n+    \n+    public SourceChannelImpl (SelectorProvider selectorProvider,\n+                              int native_fd)\n+    {\n+      super (selectorProvider);\n+      this.native_fd = native_fd;\n+    }\n+\n+    protected final void implCloseSelectableChannel()\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    protected void implConfigureBlocking (boolean blocking)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final int read (ByteBuffer src)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final long read (ByteBuffer[] srcs)\n+      throws IOException\n+    {\n+      return read (srcs, 0, srcs.length);\n+    }\n+\n+    public final long read (ByteBuffer[] srcs, int offset, int len)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final int getNativeFD()\n+    {\n+      return native_fd;\n+    }\n   }\n+\n+  public final class SinkChannelImpl extends Pipe.SinkChannel\n+  {\n+    private int native_fd;\n+    \n+    public SinkChannelImpl (SelectorProvider selectorProvider,\n+                            int native_fd)\n+    {\n+      super (selectorProvider);\n+      this.native_fd = native_fd;\n+    }\n+\n+    protected final void implCloseSelectableChannel()\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    protected final void implConfigureBlocking (boolean blocking)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final int write (ByteBuffer dst)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final long write (ByteBuffer[] dsts)\n+      throws IOException\n+    {\n+      return write (dsts, 0, dsts.length);\n+    }\n+\n+    public final long write (ByteBuffer[] dsts, int offset, int len)\n+      throws IOException\n+    {\n+      throw new Error (\"Not implemented\");\n+    }\n+\n+    public final int getNativeFD()\n+    {\n+      return native_fd;\n+    }\n+  }\n+\n+  private SinkChannelImpl sink;\n+  private SourceChannelImpl source;\n+  \n+  public PipeImpl (SelectorProvider provider)\n+    throws IOException\n+  {\n+    super();\n+    nativeInit (provider);\n+  }\n+\n+  private native void nativeInit (SelectorProvider provider)\n+    throws IOException;\n     \n   public Pipe.SinkChannel sink()\n   {\n-    return null;\n+    return sink;\n   }\n \n   public Pipe.SourceChannel source()\n   {\n-    return null;\n+    return source;\n   }\n }"}, {"sha": "41966ef14a1f06cc732a5fa391e25c3abb0a9552", "filename": "libjava/gnu/java/nio/SelectorProviderImpl.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorProviderImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorProviderImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorProviderImpl.java?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -1,5 +1,5 @@\n /* SelectorProviderImpl.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -60,7 +60,7 @@ public DatagramChannel openDatagramChannel ()\n   public Pipe openPipe ()\n     throws IOException\n   {\n-    return new PipeImpl ();\n+    return new PipeImpl (this);\n   }\n     \n   public AbstractSelector openSelector ()"}, {"sha": "522c24cc807c50c2c4a8a739f314a47eb5fa4c8c", "filename": "libjava/gnu/java/nio/natPipeImpl.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FnatPipeImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fgnu%2Fjava%2Fnio%2FnatPipeImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatPipeImpl.cc?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -0,0 +1,38 @@\n+// natPipeImpl.cc\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <platform.h>\n+\n+#include <errno.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+#include <gnu/java/nio/PipeImpl.h>\n+//#include <gnu/java/nio/PipeImpl$SinkChannelImpl.h>\n+//#include <gnu/java/nio/PipeImpl$SourceChannelImpl.h>\n+#include <java/io/IOException.h>\n+#include <java/nio/channels/spi/SelectorProvider.h>\n+\n+void\n+gnu::java::nio::PipeImpl::nativeInit (::java::nio::channels::spi::SelectorProvider* /*provider*/)\n+{\n+  int filedes [2];\n+\n+  if (::pipe (filedes) < 0)\n+    throw new ::java::io::IOException (JvNewStringUTF (strerror (errno)));\n+\n+  /* FIXME\n+  source = new gnu::java::nio::PipeImpl$SourceChannelImpl\n+    (this, provider, filedes [0]);\n+  sink = new gnu::java::nio::PipeImpl$SinkChannelImpl\n+    (this, provider, filedes [1]);\n+  */\n+}"}, {"sha": "1de3e4f83cc1220b903bb188e1cb6a7d6da221f9", "filename": "libjava/java/nio/channels/spi/SelectorProvider.java", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81bc077a39faa66769629155bc7d3c03cfe1d194/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FSelectorProvider.java?ref=81bc077a39faa66769629155bc7d3c03cfe1d194", "patch": "@@ -1,5 +1,5 @@\n /* SelectorProvider.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -50,7 +50,7 @@\n  */\n public abstract class SelectorProvider\n {\n-  static SelectorProvider pr;\n+  private static SelectorProvider systemDefaultProvider;\n     \n   /**\n    * Initializes the selector provider.\n@@ -95,13 +95,32 @@ public abstract ServerSocketChannel openServerSocketChannel ()\n    * Returns the system-wide default selector provider for this invocation\n    * of the Java virtual machine.\n    */\n-  public static SelectorProvider provider ()\n+  public static synchronized SelectorProvider provider ()\n   {\n-    if (pr == null)\n+    if (systemDefaultProvider == null)\n       {\n-        pr = new SelectorProviderImpl ();\n+        String propertyValue =\n+          System.getProperty (\"java.nio.channels.spi.SelectorProvider\");\n+\n+        if (propertyValue == null\n+            || propertyValue.equals (\"\"))\n+          systemDefaultProvider = new SelectorProviderImpl();\n+        else\n+          {\n+            try\n+              {\n+                systemDefaultProvider = (SelectorProvider) Class.forName\n+                  (propertyValue).newInstance();\n+              }\n+            catch (Exception e)\n+              {\n+                System.err.println (\"Could not instantiate class: \"\n+                                    + propertyValue);\n+                systemDefaultProvider = new SelectorProviderImpl();\n+              }\n+          }\n       }\n     \n-    return pr;\n+    return systemDefaultProvider;\n   }\n }"}]}