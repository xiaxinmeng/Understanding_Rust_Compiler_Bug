{"sha": "9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlNWViZWI4ZDdkMDcyZmExNjFiZTAxMGQ1YmQ4YjNkYWIwNjE5Nw==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2010-01-29T03:28:50Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2010-01-29T03:28:50Z"}, "message": "decl.c (redeclaration_error_message): Wrap the return messages to G_() for easy translation.\n\n2010-01-29  Shujing Zhao  <pearly.zhao@oracle.com>\n\n        * decl.c (redeclaration_error_message): Wrap the return messages to\n        G_() for easy translation.\n\nFrom-SVN: r156340", "tree": {"sha": "40b04ba8768906a4ab520a2159539419d8a8a1be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b04ba8768906a4ab520a2159539419d8a8a1be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197/comments", "author": null, "committer": null, "parents": [{"sha": "b42e0e49ad135e5ba17822f5f95586c120207f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42e0e49ad135e5ba17822f5f95586c120207f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42e0e49ad135e5ba17822f5f95586c120207f5e"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "45b5c344a600bec72cc1221125ff92356a94dfa2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "patch": "@@ -1,3 +1,8 @@\n+2010-01-29  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* decl.c (redeclaration_error_message): Wrap the return messages into\n+\tG_() for easy translation.\n+\n 2010-01-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42880"}, {"sha": "db3d7054dc10453bd31af6f7b9b0f45d3063dec2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee5ebeb8d7d072fa161be010d5bd8b3dab06197/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9ee5ebeb8d7d072fa161be010d5bd8b3dab06197", "patch": "@@ -2210,7 +2210,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       if (same_type_p (TREE_TYPE (newdecl), TREE_TYPE (olddecl)))\n \treturn NULL;\n       else\n-\treturn \"redefinition of %q#D\";\n+\treturn G_(\"redefinition of %q#D\");\n     }\n   else if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n@@ -2226,7 +2226,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       if (DECL_NAMESPACE_SCOPE_P (olddecl)\n \t  && DECL_CONTEXT (olddecl) != DECL_CONTEXT (newdecl)\n \t  && ! decls_match (olddecl, newdecl))\n-\treturn \"%qD conflicts with used function\";\n+\treturn G_(\"%qD conflicts with used function\");\n \n       /* We'll complain about linkage mismatches in\n \t warn_extern_redeclared_static.  */\n@@ -2236,10 +2236,10 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t  && DECL_INITIAL (newdecl) != NULL_TREE)\n \t{\n \t  if (DECL_NAME (olddecl) == NULL_TREE)\n-\t    return \"%q#D not declared in class\";\n+\t    return G_(\"%q#D not declared in class\");\n \t  else if (!GNU_INLINE_P (olddecl)\n \t\t   || GNU_INLINE_P (newdecl))\n-\t    return \"redefinition of %q#D\";\n+\t    return G_(\"redefinition of %q#D\");\n \t}\n \n       if (DECL_DECLARED_INLINE_P (olddecl) && DECL_DECLARED_INLINE_P (newdecl))\n@@ -2250,9 +2250,11 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t  if (olda != newa)\n \t    {\n \t      if (newa)\n-\t\treturn \"%q+D redeclared inline with %<gnu_inline%> attribute\";\n+\t\treturn G_(\"%q+D redeclared inline with \"\n+\t\t\t  \"%<gnu_inline%> attribute\");\n \t      else\n-\t\treturn \"%q+D redeclared inline without %<gnu_inline%> attribute\";\n+\t\treturn G_(\"%q+D redeclared inline without \"\n+\t\t\t  \"%<gnu_inline%> attribute\");\n \t    }\n \t}\n \n@@ -2266,7 +2268,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t{\n \t  if (COMPLETE_TYPE_P (TREE_TYPE (newdecl))\n \t      && COMPLETE_TYPE_P (TREE_TYPE (olddecl)))\n-\t    return \"redefinition of %q#D\";\n+\t    return G_(\"redefinition of %q#D\");\n \t  return NULL;\n \t}\n \n@@ -2283,7 +2285,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \tot = DECL_TEMPLATE_RESULT (template_for_substitution (ot));\n       if (DECL_INITIAL (nt) && DECL_INITIAL (ot)\n \t  && (!GNU_INLINE_P (ot) || GNU_INLINE_P (nt)))\n-\treturn \"redefinition of %q#D\";\n+\treturn G_(\"redefinition of %q#D\");\n \n       if (DECL_DECLARED_INLINE_P (ot) && DECL_DECLARED_INLINE_P (nt))\n \t{\n@@ -2293,9 +2295,11 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t  if (olda != newa)\n \t    {\n \t      if (newa)\n-\t\treturn \"%q+D redeclared inline with %<gnu_inline%> attribute\";\n+\t\treturn G_(\"%q+D redeclared inline with \"\n+\t\t\t  \"%<gnu_inline%> attribute\");\n \t      else\n-\t\treturn \"%q+D redeclared inline without %<gnu_inline%> attribute\";\n+\t\treturn G_(\"%q+D redeclared inline without \"\n+\t\t     \t  \"%<gnu_inline%> attribute\");\n \t    }\n \t}\n \n@@ -2310,7 +2314,8 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n           && !check_default_tmpl_args (nt, DECL_TEMPLATE_PARMS (newdecl), \n                                        /*is_primary=*/1, /*is_partial=*/0,\n                                        /*is_friend_decl=*/2))\n-        return \"redeclaration of friend %q#D may not have default template arguments\";\n+        return G_(\"redeclaration of friend %q#D \"\n+\t \t  \"may not have default template arguments\");\n \n       return NULL;\n     }\n@@ -2323,11 +2328,11 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       /* Only variables can be thread-local, and all declarations must\n \t agree on this property.  */\n       if (DECL_THREAD_LOCAL_P (newdecl))\n-\treturn \"thread-local declaration of %q#D follows \"\n-\t       \"non-thread-local declaration\";\n+\treturn G_(\"thread-local declaration of %q#D follows \"\n+\t          \"non-thread-local declaration\");\n       else\n-\treturn \"non-thread-local declaration of %q#D follows \"\n-\t       \"thread-local declaration\";\n+\treturn G_(\"non-thread-local declaration of %q#D follows \"\n+\t          \"thread-local declaration\");\n     }\n   else if (toplevel_bindings_p () || DECL_NAMESPACE_SCOPE_P (newdecl))\n     {\n@@ -2341,7 +2346,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t   is invalid.  */\n       if ((TREE_CODE (newdecl) == VAR_DECL && DECL_ANON_UNION_VAR_P (newdecl))\n \t  || (TREE_CODE (olddecl) == VAR_DECL && DECL_ANON_UNION_VAR_P (olddecl)))\n-\treturn \"redeclaration of %q#D\";\n+\treturn G_(\"redeclaration of %q#D\");\n       /* If at least one declaration is a reference, there is no\n \t conflict.  For example:\n \n@@ -2352,15 +2357,15 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       if (DECL_EXTERNAL (newdecl) || DECL_EXTERNAL (olddecl))\n \treturn NULL;\n       /* Reject two definitions.  */\n-      return \"redefinition of %q#D\";\n+      return G_(\"redefinition of %q#D\");\n     }\n   else\n     {\n       /* Objects declared with block scope:  */\n       /* Reject two definitions, and reject a definition\n \t together with an external reference.  */\n       if (!(DECL_EXTERNAL (newdecl) && DECL_EXTERNAL (olddecl)))\n-\treturn \"redeclaration of %q#D\";\n+\treturn G_(\"redeclaration of %q#D\");\n       return NULL;\n     }\n }"}]}