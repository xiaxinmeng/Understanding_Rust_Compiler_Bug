{"sha": "3e907b90563ad90752acf1b318bdac33d546c7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5MDdiOTA1NjNhZDkwNzUyYWNmMWIzMThiZGFjMzNkNTQ2YzdmNw==", "commit": {"author": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-03-28T15:32:29Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-03-28T15:32:29Z"}, "message": "tree-vect-loop-manip.c (slpeel_add_loop_guard): New param and mark new edge's irreducible flag accordign to it.\n\n\t* tree-vect-loop-manip.c (slpeel_add_loop_guard): New param and\n\tmark new edge's irreducible flag accordign to it.\n\t(vect_do_peeling): Check loop preheader edge's irreducible flag\n\tand pass it to function slpeel_add_loop_guard.\n\tgcc/testsuite\n\t* gcc.c-torture/compile/irreducible-loop.c: New.\n\nFrom-SVN: r246540", "tree": {"sha": "a424b9312c1a72286158acb96bd9e6c459c09604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a424b9312c1a72286158acb96bd9e6c459c09604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e907b90563ad90752acf1b318bdac33d546c7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e907b90563ad90752acf1b318bdac33d546c7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e907b90563ad90752acf1b318bdac33d546c7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e907b90563ad90752acf1b318bdac33d546c7f7/comments", "author": null, "committer": null, "parents": [{"sha": "522818b971dbbb87e4bf875de17a67c813c54b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522818b971dbbb87e4bf875de17a67c813c54b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522818b971dbbb87e4bf875de17a67c813c54b47"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "fa216e904ab93af81b0de5bcc441987f0e25803c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e907b90563ad90752acf1b318bdac33d546c7f7", "patch": "@@ -1,3 +1,10 @@\n+2017-03-28  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-vect-loop-manip.c (slpeel_add_loop_guard): New param and\n+\tmark new edge's irreducible flag accordign to it.\n+\t(vect_do_peeling): Check loop preheader edge's irreducible flag\n+\tand pass it to function slpeel_add_loop_guard.\n+\n 2017-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/80218"}, {"sha": "446096199d425b3c06fecdafb75db7d16d17abe2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e907b90563ad90752acf1b318bdac33d546c7f7", "patch": "@@ -1,6 +1,10 @@\n+2017-03-28  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.c-torture/compile/irreducible-loop.c: New.\n+\n 2017-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n-        PR tree-optimization/80218\n+\tPR tree-optimization/80218\n \t* gcc.dg/pr80218.c: New test.\n \n 2017-03-28  Richard Biener  <rguenther@suse.de>"}, {"sha": "e4be667c829e8cbfbebd7e32c778d8c7ff18cb54", "filename": "gcc/testsuite/gcc.c-torture/compile/irreducible-loop.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Firreducible-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Firreducible-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Firreducible-loop.c?ref=3e907b90563ad90752acf1b318bdac33d546c7f7", "patch": "@@ -0,0 +1,21 @@\n+void foo (int n, double a, double *b, double *x)\n+{\n+  int i, j;\n+\n+  if(n <= 0) return;\n+  if (a == 0.0e0) return;\n+\n+  if (a > 5.0)\n+    {\n+      i = 0;\n+      goto sec;\n+    }\n+  for (i = 0; i < 1024; i++)\n+    {\n+      double y = b[i];\n+sec:\n+      b[i+1] = y + 5.0;\n+      for (j = 0; j < n; j++)\n+\tx[j] = x[j] + a;\n+    }\n+}"}, {"sha": "f48336bff5858a3866d41af172a8384a1d3ba5ed", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e907b90563ad90752acf1b318bdac33d546c7f7/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=3e907b90563ad90752acf1b318bdac33d546c7f7", "patch": "@@ -534,12 +534,13 @@ slpeel_tree_duplicate_loop_to_edge_cfg (struct loop *loop,\n /* Given the condition expression COND, put it as the last statement of\n    GUARD_BB; set both edges' probability; set dominator of GUARD_TO to\n    DOM_BB; return the skip edge.  GUARD_TO is the target basic block to\n-   skip the loop.  PROBABILITY is the skip edge's probability.  */\n+   skip the loop.  PROBABILITY is the skip edge's probability.  Mark the\n+   new edge as irreducible if IRREDUCIBLE_P is true.  */\n \n static edge\n slpeel_add_loop_guard (basic_block guard_bb, tree cond,\n \t\t       basic_block guard_to, basic_block dom_bb,\n-\t\t       int probability)\n+\t\t       int probability, bool irreducible_p)\n {\n   gimple_stmt_iterator gsi;\n   edge new_e, enter_e;\n@@ -566,6 +567,9 @@ slpeel_add_loop_guard (basic_block guard_bb, tree cond,\n   new_e->count = guard_bb->count;\n   new_e->probability = probability;\n   new_e->count = apply_probability (enter_e->count, probability);\n+  if (irreducible_p)\n+    new_e->flags |= EDGE_IRREDUCIBLE_LOOP;\n+\n   enter_e->count -= new_e->count;\n   enter_e->probability = inverse_probability (probability);\n   set_immediate_dominator (CDI_DOMINATORS, guard_to, dom_bb);\n@@ -1667,6 +1671,7 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \n   struct loop *prolog, *epilog = NULL, *loop = LOOP_VINFO_LOOP (loop_vinfo);\n   struct loop *first_loop = loop;\n+  bool irred_flag = loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP;\n   create_lcssa_for_virtual_phi (loop);\n   update_ssa (TODO_update_ssa_only_virtuals);\n \n@@ -1748,7 +1753,8 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \t  guard_to = split_edge (loop_preheader_edge (loop));\n \t  guard_e = slpeel_add_loop_guard (guard_bb, guard_cond,\n \t\t\t\t\t   guard_to, guard_bb,\n-\t\t\t\t\t   inverse_probability (prob_prolog));\n+\t\t\t\t\t   inverse_probability (prob_prolog),\n+\t\t\t\t\t   irred_flag);\n \t  e = EDGE_PRED (guard_to, 0);\n \t  e = (e != guard_e ? e : EDGE_PRED (guard_to, 1));\n \t  slpeel_update_phi_nodes_for_guard1 (prolog, loop, guard_e, e);\n@@ -1813,7 +1819,8 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \t  guard_to = split_edge (loop_preheader_edge (epilog));\n \t  guard_e = slpeel_add_loop_guard (guard_bb, guard_cond,\n \t\t\t\t\t   guard_to, guard_bb,\n-\t\t\t\t\t   inverse_probability (prob_vector));\n+\t\t\t\t\t   inverse_probability (prob_vector),\n+\t\t\t\t\t   irred_flag);\n \t  e = EDGE_PRED (guard_to, 0);\n \t  e = (e != guard_e ? e : EDGE_PRED (guard_to, 1));\n \t  slpeel_update_phi_nodes_for_guard1 (first_loop, epilog, guard_e, e);\n@@ -1853,7 +1860,8 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n \t  guard_to = split_edge (single_exit (epilog));\n \t  guard_e = slpeel_add_loop_guard (guard_bb, guard_cond, guard_to,\n \t\t\t\t\t   skip_vector ? anchor : guard_bb,\n-\t\t\t\t\t   inverse_probability (prob_epilog));\n+\t\t\t\t\t   inverse_probability (prob_epilog),\n+\t\t\t\t\t   irred_flag);\n \t  slpeel_update_phi_nodes_for_guard2 (loop, epilog, guard_e,\n \t\t\t\t\t      single_exit (epilog));\n \t  /* Only need to handle basic block before epilog loop if it's not"}]}