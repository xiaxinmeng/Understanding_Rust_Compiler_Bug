{"sha": "ad5bc3248e147212a972d5d4a7fe4d202abebf27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1YmMzMjQ4ZTE0NzIxMmE5NzJkNWQ0YTdmZTRkMjAyYWJlYmYyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-10T21:58:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-10T21:58:53Z"}, "message": "ipa-devirt.c (warn_types_mismatch): Do not ICE when warning about mismatch between C and C++ type...\n\n\t* ipa-devirt.c (warn_types_mismatch): Do not ICE when warning about\n\tmismatch between C and C++ type; compoare correctly ARG_TYPES\n\tfor non-prototypes and output correctly parameter index for METHOD_TYPE.\n\t(odr_types_equivalent_p): Fix wording of warning about attributes;\n\tit is OK to match prototype and non-prototype.\n\nFrom-SVN: r222985", "tree": {"sha": "da7dcb0b5504106093eec4cca9a7a1df5e8ec8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da7dcb0b5504106093eec4cca9a7a1df5e8ec8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5bc3248e147212a972d5d4a7fe4d202abebf27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5bc3248e147212a972d5d4a7fe4d202abebf27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5bc3248e147212a972d5d4a7fe4d202abebf27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5bc3248e147212a972d5d4a7fe4d202abebf27/comments", "author": null, "committer": null, "parents": [{"sha": "15296d46dec964f4f2fea572c183462dbd96e576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15296d46dec964f4f2fea572c183462dbd96e576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15296d46dec964f4f2fea572c183462dbd96e576"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "73f6be6d390474f24196d8fad441ea9b805d90ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5bc3248e147212a972d5d4a7fe4d202abebf27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5bc3248e147212a972d5d4a7fe4d202abebf27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad5bc3248e147212a972d5d4a7fe4d202abebf27", "patch": "@@ -1,3 +1,11 @@\n+2015-05-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (warn_types_mismatch): Do not ICE when warning about\n+\tmismatch between C and C++ type; compoare correctly ARG_TYPES\n+\tfor non-prototypes and output correctly parameter index for METHOD_TYPE.\n+\t(odr_types_equivalent_p): Fix wording of warning about attributes;\n+\tit is OK to match prototype and non-prototype.\n+\n 2015-05-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (free_lang_data_in_type): Free TREE_PURPOSE of"}, {"sha": "f19503bf010186b4754dc90af6020343e0de9012", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5bc3248e147212a972d5d4a7fe4d202abebf27/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5bc3248e147212a972d5d4a7fe4d202abebf27/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=ad5bc3248e147212a972d5d4a7fe4d202abebf27", "patch": "@@ -1028,7 +1028,9 @@ warn_types_mismatch (tree t1, tree t2)\n \t  t1 = t2;\n \t  t2 = tmp;\n \t}\n-      if (TYPE_NAME (t1) && TYPE_NAME (t2))\n+      if (TYPE_NAME (t1) && TYPE_NAME (t2)\n+\t  && TREE_CODE (TYPE_NAME (t1)) == TYPE_DECL\n+\t  && TREE_CODE (TYPE_NAME (t2)) == TYPE_DECL)\n \t{\n \t  inform (DECL_SOURCE_LOCATION (TYPE_NAME (t1)),\n \t\t  \"type %qT defined in anonymous namespace can not match \"\n@@ -1079,7 +1081,7 @@ warn_types_mismatch (tree t1, tree t2)\n \t  else if (TREE_CODE (t1) == METHOD_TYPE\n \t\t   || TREE_CODE (t1) == FUNCTION_TYPE)\n \t    {\n-\t      tree parms1, parms2;\n+\t      tree parms1 = NULL, parms2 = NULL;\n \t      int count = 1;\n \n \t      if (!odr_subtypes_equivalent_p (TREE_TYPE (t1), TREE_TYPE (t2),\n@@ -1089,21 +1091,27 @@ warn_types_mismatch (tree t1, tree t2)\n \t\t  warn_types_mismatch (TREE_TYPE (t1), TREE_TYPE (t2));\n \t\t  return;\n \t\t}\n-\t      for (parms1 = TYPE_ARG_TYPES (t1), parms2 = TYPE_ARG_TYPES (t2);\n-\t\t   parms1 && parms2;\n-\t\t   parms1 = TREE_CHAIN (parms1), parms2 = TREE_CHAIN (parms2),\n-\t\t   count++)\n-\t\t{\n-\t\t  if (!odr_subtypes_equivalent_p\n-\t\t      (TREE_VALUE (parms1), TREE_VALUE (parms2), &visited))\n-\t\t    {\n-\t\t      inform (UNKNOWN_LOCATION,\n-\t\t\t      \"type mismatch in parameter %i\", count);\n-\t\t      warn_types_mismatch (TREE_VALUE (parms1),\n-\t\t\t\t\t   TREE_VALUE (parms2));\n-\t\t      return;\n-\t\t    }\n-\t\t}\n+\t      if (prototype_p (t1) && prototype_p (t2))\n+\t\tfor (parms1 = TYPE_ARG_TYPES (t1), parms2 = TYPE_ARG_TYPES (t2);\n+\t\t     parms1 && parms2;\n+\t\t     parms1 = TREE_CHAIN (parms1), parms2 = TREE_CHAIN (parms2),\n+\t\t     count++)\n+\t\t  {\n+\t\t    if (!odr_subtypes_equivalent_p\n+\t\t\t(TREE_VALUE (parms1), TREE_VALUE (parms2), &visited))\n+\t\t      {\n+\t\t\tif (count == 1 && TREE_CODE (t1) == METHOD_TYPE)\n+\t\t\t  inform (UNKNOWN_LOCATION,\n+\t\t\t\t  \"implicit this pointer type mismatch\");\n+\t\t\telse\n+\t\t\t  inform (UNKNOWN_LOCATION,\n+\t\t\t\t  \"type mismatch in parameter %i\",\n+\t\t\t\t  count - (TREE_CODE (t1) == METHOD_TYPE));\n+\t\t\twarn_types_mismatch (TREE_VALUE (parms1),\n+\t\t\t\t\t     TREE_VALUE (parms2));\n+\t\t\treturn;\n+\t\t      }\n+\t\t  }\n \t      if (parms1 || parms2)\n \t\t{\n \t\t  inform (UNKNOWN_LOCATION,\n@@ -1180,7 +1188,7 @@ odr_types_equivalent_p (tree t1, tree t2, bool warn, bool *warned,\n   if (comp_type_attributes (t1, t2) != 1)\n     {\n       warn_odr (t1, t2, NULL, NULL, warn, warned,\n-\t        G_(\"a type with attributes \"\n+\t        G_(\"a type with different attributes \"\n \t\t   \"is defined in another translation unit\"));\n       return false;\n     }\n@@ -1348,7 +1356,8 @@ odr_types_equivalent_p (tree t1, tree t2, bool warn, bool *warned,\n \t  return false;\n \t}\n \n-      if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2))\n+      if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2)\n+\t  || !prototype_p (t1) || !prototype_p (t2))\n \treturn true;\n       else\n \t{"}]}