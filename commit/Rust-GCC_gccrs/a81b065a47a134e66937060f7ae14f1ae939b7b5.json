{"sha": "a81b065a47a134e66937060f7ae14f1ae939b7b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxYjA2NWE0N2ExMzRlNjY5MzcwNjBmN2FlMTRmMWFlOTM5YjdiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-06T08:53:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-06T08:53:19Z"}, "message": "re PR middle-end/43987 (type-punning causes broken binaries unless -O0 is used)\n\n2010-05-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43987\n\t* tree-ssa-structalias.c (could_have_pointers): For possibly\n\taddress-taken variables force pointers to be recorded.\n\t(create_variable_info_for_1): Likewise.\n\t(push_fields_onto_fieldstack): Pass in wheter all fields\n\tmust have pointers.\n\t(find_func_aliases): Query types instead of vars whether\n\tthey contain pointers where appropriate.\n\n\t* gcc.c-torture/execute/pr43987.c: New testcase.\n\t* gcc.dg/torture/pta-escape-1.c: Adjust.\n\t* gcc.dg/tree-ssa/pta-escape-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pta-escape-3.c: Likewise.\n\t* gcc.dg/ipa/ipa-pta-11.c: Likewise.\n\nFrom-SVN: r159098", "tree": {"sha": "fb40fc61a7dd82108d5aaff3589d2f98c91881e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb40fc61a7dd82108d5aaff3589d2f98c91881e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81b065a47a134e66937060f7ae14f1ae939b7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81b065a47a134e66937060f7ae14f1ae939b7b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81b065a47a134e66937060f7ae14f1ae939b7b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81b065a47a134e66937060f7ae14f1ae939b7b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "369451ec60604a300eb85c57fc62284d1cd2f837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369451ec60604a300eb85c57fc62284d1cd2f837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369451ec60604a300eb85c57fc62284d1cd2f837"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "4d0c54afff1b64283c7d1f1c7c88da15ea2a99f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -1,3 +1,14 @@\n+2010-05-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43987\n+\t* tree-ssa-structalias.c (could_have_pointers): For possibly\n+\taddress-taken variables force pointers to be recorded.\n+\t(create_variable_info_for_1): Likewise.\n+\t(push_fields_onto_fieldstack): Pass in wheter all fields\n+\tmust have pointers.\n+\t(find_func_aliases): Query types instead of vars whether\n+\tthey contain pointers where appropriate.\n+\n 2010-05-06  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c (record_reference_ctx): Add varpool_node."}, {"sha": "ee41bdf2717fd8103b295d83f3706e779ad0bcad", "filename": "gcc/testsuite/gcc.c-torture/execute/pr43987.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43987.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43987.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43987.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -0,0 +1,20 @@\n+char B[256 * sizeof(void *)];\n+typedef void *FILE;\n+typedef struct globals {\n+    int c;\n+    FILE *l;\n+} __attribute__((may_alias)) T;\n+void add_input_file(FILE *file)\n+{\n+  (*(T*)&B).l[0] = file;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  FILE x;\n+  (*(T*)&B).l = &x;\n+  add_input_file ((void *)-1);\n+  if ((*(T*)&B).l[0] != (void *)-1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "947ab816fc9e6e9d78599b59fc05a9e868b29c19", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-11.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -29,5 +29,5 @@ int main()\n /* It isn't clear if the escape if l is strictly necessary, if it were\n    we should have i, r and s in ESCAPED as well.  */\n \n-/* { dg-final { scan-ipa-dump \"ESCAPED = { l k }\" \"pta\" } } */\n+/* { dg-final { scan-ipa-dump \"ESCAPED = { ESCAPED NONLOCAL l k }\" \"pta\" } } */\n /* { dg-final { cleanup-ipa-dump \"pta\" } } */"}, {"sha": "3929d97f2947e5bd965956f3dcd69b92c8fe6916", "filename": "gcc/testsuite/gcc.dg/torture/pta-escape-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpta-escape-1.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -30,5 +30,5 @@ main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED = { i }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED = { ESCAPED NONLOCAL i }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "50d7357ef2536f59f710075673da4bf970bf5c19", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-1.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -33,5 +33,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to vars: { x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "226105e856edc7c2937e3d20c50896c02a519019", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-2.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -34,5 +34,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to vars: { x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "15b06af12be0846eb867b5c262bae74ff0d85c35", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-escape-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-escape-3.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -38,5 +38,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"ESCAPED, points-to vars: { x }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"ESCAPED, points-to non-local, points-to vars: { x }\" \"alias\" } } */\n /* { dg-final { cleanup-tree-dump \"alias\" } } */"}, {"sha": "19aa5db5f346622018035e4ec21d9fe82551c246", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81b065a47a134e66937060f7ae14f1ae939b7b5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a81b065a47a134e66937060f7ae14f1ae939b7b5", "patch": "@@ -2959,7 +2959,11 @@ type_could_have_pointers (tree type)\n static bool\n could_have_pointers (tree t)\n {\n-  return type_could_have_pointers (TREE_TYPE (t));\n+  return (((TREE_CODE (t) == VAR_DECL\n+\t    || TREE_CODE (t) == PARM_DECL\n+\t    || TREE_CODE (t) == RESULT_DECL)\n+\t   && (TREE_PUBLIC (t) || DECL_EXTERNAL (t) || TREE_ADDRESSABLE (t)))\n+\t  || type_could_have_pointers (TREE_TYPE (t)));\n }\n \n /* Return the position, in bits, of FIELD_DECL from the beginning of its\n@@ -4232,7 +4236,7 @@ find_func_aliases (gimple origt)\n \t  /* If we are returning a value, assign it to the result.  */\n \t  lhsop = gimple_call_lhs (t);\n \t  if (lhsop\n-\t      && could_have_pointers (lhsop))\n+\t      && type_could_have_pointers (TREE_TYPE (lhsop)))\n \t    {\n \t      struct constraint_expr rhs;\n \t      struct constraint_expr *lhsp;\n@@ -4286,7 +4290,7 @@ find_func_aliases (gimple origt)\n      operations with pointer result, others are dealt with as escape\n      points if they have pointer operands.  */\n   else if (is_gimple_assign (t)\n-\t   && could_have_pointers (gimple_assign_lhs (t)))\n+\t   && type_could_have_pointers (TREE_TYPE (gimple_assign_lhs (t))))\n     {\n       /* Otherwise, just a regular assignment statement.  */\n       tree lhsop = gimple_assign_lhs (t);\n@@ -4855,7 +4859,7 @@ var_can_have_subvars (const_tree v)\n \n static bool\n push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n-\t\t\t     HOST_WIDE_INT offset)\n+\t\t\t     HOST_WIDE_INT offset, bool must_have_pointers_p)\n {\n   tree field;\n   bool empty_p = true;\n@@ -4880,7 +4884,8 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n \t    || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE)\n \t  push = true;\n \telse if (!push_fields_onto_fieldstack\n-\t\t    (TREE_TYPE (field), fieldstack, offset + foff)\n+\t\t    (TREE_TYPE (field), fieldstack, offset + foff,\n+\t\t     must_have_pointers_p)\n \t\t && (DECL_SIZE (field)\n \t\t     && !integer_zerop (DECL_SIZE (field))))\n \t  /* Empty structures may have actual size, like in C++.  So\n@@ -4906,6 +4911,7 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n \t\t&& !pair->has_unknown_size\n \t\t&& !has_unknown_size\n \t\t&& pair->offset + (HOST_WIDE_INT)pair->size == offset + foff\n+\t\t&& !must_have_pointers_p\n \t\t&& !could_have_pointers (field))\n \t      {\n \t\tpair->size += TREE_INT_CST_LOW (DECL_SIZE (field));\n@@ -4919,7 +4925,8 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n \t\t  pair->size = TREE_INT_CST_LOW (DECL_SIZE (field));\n \t\telse\n \t\t  pair->size = -1;\n-\t\tpair->may_have_pointers = could_have_pointers (field);\n+\t\tpair->may_have_pointers\n+\t\t  = must_have_pointers_p || could_have_pointers (field);\n \t\tpair->only_restrict_pointers\n \t\t  = (!has_unknown_size\n \t\t     && POINTER_TYPE_P (TREE_TYPE (field))\n@@ -5196,7 +5203,10 @@ create_variable_info_for_1 (tree decl, const char *name)\n       bool notokay = false;\n       unsigned int i;\n \n-      push_fields_onto_fieldstack (decl_type, &fieldstack, 0);\n+      push_fields_onto_fieldstack (decl_type, &fieldstack, 0,\n+\t\t\t\t   TREE_PUBLIC (decl)\n+\t\t\t\t   || DECL_EXTERNAL (decl)\n+\t\t\t\t   || TREE_ADDRESSABLE (decl));\n \n       for (i = 0; !notokay && VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n \tif (fo->has_unknown_size"}]}