{"sha": "2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE3NmNiYjViM2MxMmQzZTZlMTRkMWI0MzdiNjEwNjMxNjllM2IxNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-07-12T17:11:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-07-12T17:11:35Z"}, "message": "cp-tree.h (make_binfo): Remove.\n\n\t* cp-tree.h (make_binfo): Remove.\n\t* decl.c (xref_basetypes): Use make_tree_binfo directly.\n\t* tree.h (copy_base_binfos): Likewise.\n\t(make_binfo): Remove.\n\nFrom-SVN: r84566", "tree": {"sha": "5f38a707dcb2b6c34f7d765b346ad7cd9f1ac3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f38a707dcb2b6c34f7d765b346ad7cd9f1ac3b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/comments", "author": null, "committer": null, "parents": [{"sha": "717b209147986b24d6c73dbdcbbc09b24baaac00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717b209147986b24d6c73dbdcbbc09b24baaac00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717b209147986b24d6c73dbdcbbc09b24baaac00"}], "stats": {"total": 89, "additions": 27, "deletions": 62}, "files": [{"sha": "c897bdc6a0b9e5438d275d954682e76e8d2d86b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "patch": "@@ -1,5 +1,10 @@\n 2004-07-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* cp-tree.h (make_binfo): Remove.\n+\t* decl.c (xref_basetypes): Use make_tree_binfo directly.\n+\t* tree.h (copy_base_binfos): Likewise.\n+\t(make_binfo): Remove.\n+\t\n \t* call.c (build_user_type_conversion_1, build_new_op,\n \tcheck_constructor_callable, build_temp,\n \tperform_direct_initialization_of_possible): Pass type directly to"}, {"sha": "a8d6f04fa062baace90a69f8da61b573b737e276", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "patch": "@@ -4181,7 +4181,6 @@ extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern tree hash_chainon\t\t\t(tree, tree);\n-extern tree make_binfo\t\t\t\t(tree, tree, tree, tree);\n extern int count_functions\t\t\t(tree);\n extern int is_overloaded_fn\t\t\t(tree);\n extern tree get_first_fn\t\t\t(tree);"}, {"sha": "f659b201dd39a07c26c63d5ed9cd30a7c09b2948", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "patch": "@@ -9064,7 +9064,10 @@ xref_basetypes (tree ref, tree base_list)\n   /* The binfo slot should be empty, unless this is an (ill-formed)\n      redefinition.  */\n   my_friendly_assert (!TYPE_BINFO (ref) || TYPE_SIZE (ref), 20040706);\n-  TYPE_BINFO (ref) = make_binfo (size_zero_node, ref, NULL_TREE, NULL_TREE);\n+  my_friendly_assert (TYPE_MAIN_VARIANT (ref) == ref, 20040712);\n+  TYPE_BINFO (ref) = make_tree_binfo (BINFO_LANG_SLOTS);\n+  BINFO_OFFSET (TYPE_BINFO (ref)) = size_zero_node;\n+  BINFO_TYPE (TYPE_BINFO (ref)) = ref;\n   \n   if (i)\n     {\n@@ -9115,23 +9118,17 @@ xref_basetypes (tree ref, tree base_list)\n \t      && (current_lang_depth () == 0))\n \t    TYPE_FOR_JAVA (ref) = 1;\n \t  \n-\t  if (CLASS_TYPE_P (basetype))\n+\t  if (CLASS_TYPE_P (basetype) && !dependent_type_p (basetype))\n \t    {\n \t      base_binfo = TYPE_BINFO (basetype);\n \n-\t      if (dependent_type_p (basetype))\n-\t\t{\n-\t\t  base_binfo = make_binfo (size_zero_node, basetype,\n-\t\t\t\t\t   NULL_TREE, NULL_TREE);\n-\t\t  BINFO_DEPENDENT_BASE_P (base_binfo) = 1;\n-\t\t}\n-\t      else\n-\t\tmy_friendly_assert (base_binfo, 20040706);\n+\t      my_friendly_assert (base_binfo, 20040706);\n \t    }\n \t  else\n \t    {\n-\t      base_binfo = make_binfo (size_zero_node, basetype,\n-\t\t\t\t       NULL_TREE, NULL_TREE);\n+\t      base_binfo = make_tree_binfo (BINFO_LANG_SLOTS);\n+\t      \n+\t      BINFO_TYPE (base_binfo) = basetype;\n \t      BINFO_DEPENDENT_BASE_P (base_binfo) = 1;\n \t    }\n \t  "}, {"sha": "6cb784ad3bacc341aeb1db1b1abb91dfcb133a8a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 13, "deletions": 49, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2176cbb5b3c12d3e6e14d1b437b61063169e3b14/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2176cbb5b3c12d3e6e14d1b437b61063169e3b14", "patch": "@@ -617,9 +617,19 @@ copy_base_binfos (tree binfo, tree t, tree prev)\n       \n       if (!new_binfo)\n \t{\n-\t  new_binfo = make_binfo (BINFO_OFFSET (base_binfo),\n-\t\t\t\t  base_binfo, NULL_TREE,\n-\t\t\t\t  BINFO_VIRTUALS (base_binfo));\n+\t  new_binfo = make_tree_binfo (BINFO_LANG_SLOTS);\n+\n+\t  BINFO_TYPE (new_binfo) = BINFO_TYPE (base_binfo);\n+\t  BINFO_OFFSET (new_binfo) = BINFO_OFFSET (base_binfo);\n+\t  BINFO_VIRTUALS (new_binfo) = BINFO_VIRTUALS (base_binfo);\n+\n+\t  if (BINFO_BASE_BINFOS (base_binfo))\n+\t    /* Duplicate the binfo's base vector, so we can recurse.  */\n+\t    BINFO_BASE_BINFOS (new_binfo)\n+\t      = copy_node (BINFO_BASE_BINFOS (base_binfo));\n+\t  /* We do not need to copy the accesses, as they are read only.  */\n+\t  BINFO_BASE_ACCESSES (new_binfo) = BINFO_BASE_ACCESSES (base_binfo);\n+\t  \n \t  prev = copy_base_binfos (new_binfo, t, prev);\n \t  if (BINFO_VIRTUAL_P (base_binfo))\n \t    {\n@@ -753,52 +763,6 @@ hash_chainon (tree list1, tree list2)\n \t\t\t  hash_chainon (TREE_CHAIN (list1), list2));\n }\n \f\n-/* Build an association between TYPE and some parameters:\n-\n-   OFFSET is the offset added to `this' to convert it to a pointer\n-   of type `TYPE *'\n-\n-   BINFO is the base binfo to use, if we are deriving from one.  This\n-   is necessary, as we want specialized parent binfos from base\n-   classes, so that the VTABLE_NAMEs of bases are for the most derived\n-   type, instead of the simple type.\n-\n-   VTABLE is the virtual function table with which to initialize\n-   sub-objects of type TYPE.\n-\n-   VIRTUALS are the virtual functions sitting in VTABLE.  */\n-\n-tree\n-make_binfo (tree offset, tree binfo, tree vtable, tree virtuals)\n-{\n-  tree new_binfo = make_tree_binfo (BINFO_LANG_SLOTS);\n-  tree type;\n-\n-  if (TREE_CODE (binfo) == TREE_BINFO)\n-    {\n-      type = BINFO_TYPE (binfo);\n-      my_friendly_assert (!BINFO_DEPENDENT_BASE_P (binfo), 20040706);\n-    }\n-  else\n-    {\n-      type = binfo;\n-      binfo = NULL_TREE;\n-    }\n-\n-  TREE_TYPE (new_binfo) = TYPE_MAIN_VARIANT (type);\n-  BINFO_OFFSET (new_binfo) = offset;\n-  BINFO_VTABLE (new_binfo) = vtable;\n-  BINFO_VIRTUALS (new_binfo) = virtuals;\n-\n-  if (binfo && BINFO_BASE_BINFOS (binfo))\n-    {\n-      BINFO_BASE_BINFOS (new_binfo) = copy_node (BINFO_BASE_BINFOS (binfo));\n-      /* We do not need to copy the accesses, as they are read only.  */\n-      BINFO_BASE_ACCESSES (new_binfo) = BINFO_BASE_ACCESSES (binfo);\n-    }\n-  return new_binfo;\n-}\n-\n void\n debug_binfo (tree elem)\n {"}]}