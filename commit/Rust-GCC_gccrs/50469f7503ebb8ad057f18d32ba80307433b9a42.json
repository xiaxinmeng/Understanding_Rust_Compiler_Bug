{"sha": "50469f7503ebb8ad057f18d32ba80307433b9a42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0NjlmNzUwM2ViYjhhZDA1N2YxOGQzMmJhODAzMDc0MzNiOWE0Mg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-11-26T15:19:57Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-11-26T15:19:57Z"}, "message": "[AArch64] Add NEON intrinsics vqrdmlah_lane and vqrdmlsh_lane.\n\n        gcc/\n\t* gcc/config/aarch64/arm_neon.h\n\t(vqrdmlah_laneq_s16, vqrdmlah_laneq_s32): New.\n\t(vqrdmlahq_laneq_s16, vqrdmlahq_laneq_s32): New.\n\t(vqrdmlsh_lane_s16, vqrdmlsh_lane_s32): New.\n\t(vqrdmlshq_laneq_s16, vqrdmlshq_laneq_s32): New.\n\t(vqrdmlah_lane_s16, vqrdmlah_lane_s32): New.\n\t(vqrdmlahq_lane_s16, vqrdmlahq_lane_s32): New.\n\t(vqrdmlahh_s16, vqrdmlahh_lane_s16, vqrdmlahh_laneq_s16): New.\n\t(vqrdmlahs_s32, vqrdmlahs_lane_s32, vqrdmlahs_laneq_s32): New.\n\t(vqrdmlsh_lane_s16, vqrdmlsh_lane_s32): New.\n\t(vqrdmlshq_lane_s16, vqrdmlshq_lane_s32): New.\n\t(vqrdmlshh_s16, vqrdmlshh_lane_s16, vqrdmlshh_laneq_s16): New.\n\t(vqrdmlshs_s32, vqrdmlshs_lane_s32, vqrdmlshs_laneq_s32): New.\n\n        gcc/testsuite\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh_lane.inc: New file,\n\tsupport code for vqrdml{as}h_lane tests.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah_lane.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh_lane.c: New.\n\nFrom-SVN: r230972", "tree": {"sha": "54480c99e7dd822274969e7c5394bc2c779a5d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54480c99e7dd822274969e7c5394bc2c779a5d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50469f7503ebb8ad057f18d32ba80307433b9a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50469f7503ebb8ad057f18d32ba80307433b9a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50469f7503ebb8ad057f18d32ba80307433b9a42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50469f7503ebb8ad057f18d32ba80307433b9a42/comments", "author": null, "committer": null, "parents": [{"sha": "0c6110a1264ffeb89764aba0ffb41aff60e31192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6110a1264ffeb89764aba0ffb41aff60e31192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6110a1264ffeb89764aba0ffb41aff60e31192"}], "stats": {"total": 463, "additions": 463, "deletions": 0}, "files": [{"sha": "39e1ec4f48455776a1e9f6e91d1b300efcf1436f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -1,3 +1,19 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc/config/aarch64/arm_neon.h\n+\t(vqrdmlah_laneq_s16, vqrdmlah_laneq_s32): New.\n+\t(vqrdmlahq_laneq_s16, vqrdmlahq_laneq_s32): New.\n+\t(vqrdmlsh_lane_s16, vqrdmlsh_lane_s32): New.\n+\t(vqrdmlshq_laneq_s16, vqrdmlshq_laneq_s32): New.\n+\t(vqrdmlah_lane_s16, vqrdmlah_lane_s32): New.\n+\t(vqrdmlahq_lane_s16, vqrdmlahq_lane_s32): New.\n+\t(vqrdmlahh_s16, vqrdmlahh_lane_s16, vqrdmlahh_laneq_s16): New.\n+\t(vqrdmlahs_s32, vqrdmlahs_lane_s32, vqrdmlahs_laneq_s32): New.\n+\t(vqrdmlsh_lane_s16, vqrdmlsh_lane_s32): New.\n+\t(vqrdmlshq_lane_s16, vqrdmlshq_lane_s32): New.\n+\t(vqrdmlshh_s16, vqrdmlshh_lane_s16, vqrdmlshh_laneq_s16): New.\n+\t(vqrdmlshs_s32, vqrdmlshs_lane_s32, vqrdmlshs_laneq_s32): New.\n+\n 2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc/config/aarch64/arm_neon.h (vqrdmlah_s16, vqrdmlah_s32): New."}, {"sha": "56db3391785944dd11bd4209591c5798b6697320", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -11264,6 +11264,174 @@ vqrdmlshq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n {\n   return __builtin_aarch64_sqrdmlshv4si (__a, __b, __c);\n }\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlah_laneq_s16 (int16x4_t __a, int16x4_t __b, int16x8_t __c, const int __d)\n+{\n+  return  __builtin_aarch64_sqrdmlah_laneqv4hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlah_laneq_s32 (int32x2_t __a, int32x2_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_laneqv2si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlahq_laneq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_laneqv8hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlahq_laneq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_laneqv4si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlsh_laneq_s16 (int16x4_t __a, int16x4_t __b, int16x8_t __c, const int __d)\n+{\n+  return  __builtin_aarch64_sqrdmlsh_laneqv4hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlsh_laneq_s32 (int32x2_t __a, int32x2_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_laneqv2si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlshq_laneq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_laneqv8hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlshq_laneq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_laneqv4si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlah_lane_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c, const int __d)\n+{\n+  return  __builtin_aarch64_sqrdmlah_lanev4hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlah_lane_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_lanev2si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlahq_lane_s16 (int16x8_t __a, int16x8_t __b, int16x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_lanev8hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlahq_lane_s32 (int32x4_t __a, int32x4_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_lanev4si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlahh_s16 (int16_t __a, int16_t __b, int16_t __c)\n+{\n+  return (int16_t) __builtin_aarch64_sqrdmlahhi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlahh_lane_s16 (int16_t __a, int16_t __b, int16x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_lanehi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlahh_laneq_s16 (int16_t __a, int16_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_laneqhi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlahs_s32 (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return (int32_t) __builtin_aarch64_sqrdmlahsi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlahs_lane_s32 (int32_t __a, int32_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_lanesi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlahs_laneq_s32 (int32_t __a, int32_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlah_laneqsi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vqrdmlsh_lane_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c, const int __d)\n+{\n+  return  __builtin_aarch64_sqrdmlsh_lanev4hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vqrdmlsh_lane_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_lanev2si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vqrdmlshq_lane_s16 (int16x8_t __a, int16x8_t __b, int16x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_lanev8hi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vqrdmlshq_lane_s32 (int32x4_t __a, int32x4_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_lanev4si (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlshh_s16 (int16_t __a, int16_t __b, int16_t __c)\n+{\n+  return (int16_t) __builtin_aarch64_sqrdmlshhi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlshh_lane_s16 (int16_t __a, int16_t __b, int16x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_lanehi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vqrdmlshh_laneq_s16 (int16_t __a, int16_t __b, int16x8_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_laneqhi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlshs_s32 (int32_t __a, int32_t __b, int32_t __c)\n+{\n+  return (int32_t) __builtin_aarch64_sqrdmlshsi (__a, __b, __c);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlshs_lane_s32 (int32_t __a, int32_t __b, int32x2_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_lanesi (__a, __b, __c, __d);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vqrdmlshs_laneq_s32 (int32_t __a, int32_t __b, int32x4_t __c, const int __d)\n+{\n+  return __builtin_aarch64_sqrdmlsh_laneqsi (__a, __b, __c, __d);\n+}\n #pragma GCC pop_options\n \n #pragma GCC push_options"}, {"sha": "5c663c4d07c07fb073fcbc033b538d609adde9a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -1,3 +1,10 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh_lane.inc: New file,\n+\tsupport code for vqrdml{as}h_lane tests.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlah_lane.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh_lane.c: New.\n+\n 2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh.inc: New file,"}, {"sha": "a85550294961b6adc0434878d322a97c5a70463b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlXh_lane.inc", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvqrdmlXh_lane.inc?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -0,0 +1,154 @@\n+#define FNNAME1(NAME) exec_ ## NAME ## _lane\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+void FNNAME (INSN) (void)\n+{\n+  /* vector_res = vqrdmlXh_lane (vector, vector2, vector3, lane),\n+     then store the result.  */\n+#define TEST_VQRDMLXH_LANE2(INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n+\t\t\t    EXPECTED_CUMULATIVE_SAT, CMT)\t\t\\\n+  Set_Neon_Cumulative_Sat (0, VECT_VAR (vector_res, T1, W, N));\t\t\\\n+  VECT_VAR (vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_lane_##T2##W (VECT_VAR (vector, T1, W, N),\t\t\\\n+\t\t\t    VECT_VAR (vector2, T1, W, N),\t\t\\\n+\t\t\t    VECT_VAR (vector3, T1, W, N2),\t\t\\\n+\t\t\t    L);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W (VECT_VAR (result, T1, W, N),\t\t\t\\\n+\t\t     VECT_VAR (vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT (TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN.  */\n+#define TEST_VQRDMLXH_LANE1(INSN, Q, T1, T2, W, N, N2, L,\t\\\n+\t\t\t    EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQRDMLXH_LANE2 (INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n+\t\t       EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRDMLXH_LANE(Q, T1, T2, W, N, N2, L,\t\t\\\n+\t\t\t   EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQRDMLXH_LANE1 (INSN, Q, T1, T2, W, N, N2, L,\t\t\\\n+\t\t       EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  DECL_VARIABLE (vector, int, 16, 4);\n+  DECL_VARIABLE (vector, int, 32, 2);\n+  DECL_VARIABLE (vector, int, 16, 8);\n+  DECL_VARIABLE (vector, int, 32, 4);\n+\n+  DECL_VARIABLE (vector_res, int, 16, 4);\n+  DECL_VARIABLE (vector_res, int, 32, 2);\n+  DECL_VARIABLE (vector_res, int, 16, 8);\n+  DECL_VARIABLE (vector_res, int, 32, 4);\n+\n+  DECL_VARIABLE (vector2, int, 16, 4);\n+  DECL_VARIABLE (vector2, int, 32, 2);\n+  DECL_VARIABLE (vector2, int, 16, 8);\n+  DECL_VARIABLE (vector2, int, 32, 4);\n+\n+  DECL_VARIABLE (vector3, int, 16, 4);\n+  DECL_VARIABLE (vector3, int, 32, 2);\n+  DECL_VARIABLE (vector3, int, 16, 8);\n+  DECL_VARIABLE (vector3, int, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD (vector, buffer, , int, s, 16, 4);\n+  VLOAD (vector, buffer, , int, s, 32, 2);\n+\n+  VLOAD (vector, buffer, q, int, s, 16, 8);\n+  VLOAD (vector, buffer, q, int, s, 32, 4);\n+\n+  /* Initialize vector2.  */\n+  VDUP (vector2, , int, s, 16, 4, 0x5555);\n+  VDUP (vector2, , int, s, 32, 2, 0xBB);\n+  VDUP (vector2, q, int, s, 16, 8, 0xBB);\n+  VDUP (vector2, q, int, s, 32, 4, 0x22);\n+\n+  /* Initialize vector3.  */\n+  VDUP (vector3, , int, s, 16, 4, 0x5555);\n+  VDUP (vector3, , int, s, 32, 2, 0xBB);\n+  VDUP (vector3, q, int, s, 16, 8, 0x33);\n+  VDUP (vector3, q, int, s, 32, 4, 0x22);\n+\n+  /* Choose lane arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat, CMT);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat, CMT);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Now use input values such that the multiplication causes\n+     saturation.  */\n+#define TEST_MSG_MUL \" (check mul cumulative saturation)\"\n+  VDUP (vector, , int, s, 16, 4, 0x8000);\n+  VDUP (vector, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector, q, int, s, 32, 4, 0x80000000);\n+\n+  VDUP (vector2, , int, s, 16, 4, 0x8000);\n+  VDUP (vector2, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector2, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector2, q, int, s, 32, 4, 0x80000000);\n+\n+  VDUP (vector3, , int, s, 16, 4, 0x8000);\n+  VDUP (vector3, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector3, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector3, q, int, s, 32, 4, 0x80000000);\n+\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat_mul,\n+\t\t      TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat_mul,\n+\t\t      TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat_mul,\n+\t\t      TEST_MSG_MUL);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat_mul,\n+\t\t      TEST_MSG_MUL);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected_mul, TEST_MSG_MUL);\n+\n+  VDUP (vector, , int, s, 16, 4, 0x8000);\n+  VDUP (vector, , int, s, 32, 2, 0x80000000);\n+  VDUP (vector, q, int, s, 16, 8, 0x8000);\n+  VDUP (vector, q, int, s, 32, 4, 0x80000000);\n+\n+  VDUP (vector2, , int, s, 16, 4, 0x8001);\n+  VDUP (vector2, , int, s, 32, 2, 0x80000001);\n+  VDUP (vector2, q, int, s, 16, 8, 0x8001);\n+  VDUP (vector2, q, int, s, 32, 4, 0x80000001);\n+\n+  VDUP (vector3, , int, s, 16, 4, 0x8001);\n+  VDUP (vector3, , int, s, 32, 2, 0x80000001);\n+  VDUP (vector3, q, int, s, 16, 8, 0x8001);\n+  VDUP (vector3, q, int, s, 32, 4, 0x80000001);\n+\n+  /* Use input values where rounding produces a result equal to the\n+     saturation value, but does not set the saturation flag.  */\n+#define TEST_MSG_ROUND \" (check rounding)\"\n+  TEST_VQRDMLXH_LANE (, int, s, 16, 4, 4, 2, expected_cumulative_sat_round,\n+\t\t      TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (, int, s, 32, 2, 2, 1, expected_cumulative_sat_round,\n+\t\t      TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (q, int, s, 16, 8, 4, 3, expected_cumulative_sat_round,\n+\t\t      TEST_MSG_ROUND);\n+  TEST_VQRDMLXH_LANE (q, int, s, 32, 4, 2, 0, expected_cumulative_sat_round,\n+\t\t      TEST_MSG_ROUND);\n+\n+  CHECK (TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 16, 8, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK (TEST_MSG, int, 32, 4, PRIx32, expected_round, TEST_MSG_ROUND);\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN) ();\n+  return 0;\n+}"}, {"sha": "ed43e01053944ff99e04121469caaa194bdcf64f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlah_lane.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlah_lane.c?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target arm_v8_1a_neon_hw } */\n+/* { dg-add-options arm_v8_1a_neon } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL (expected, int, 16, 4) [] = { 0x38d3, 0x38d4, 0x38d5, 0x38d6 };\n+VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL (expected, int, 16, 8) [] = { 0x006d, 0x006e, 0x006f, 0x0070,\n+\t\t\t\t\t    0x0071, 0x0072, 0x0073, 0x0074 };\n+VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 0;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 0;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0xfffe, 0xfffe,\n+\t\t\t\t\t\t  0xfffe, 0xfffe };\n+VECT_VAR_DECL (expected_round, int, 32, 2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL (expected_round,int, 16, 8) [] = { 0xfffe, 0xfffe,\n+\t\t\t\t\t\t 0xfffe, 0xfffe,\n+\t\t\t\t\t\t 0xfffe, 0xfffe,\n+\t\t\t\t\t\t 0xfffe, 0xfffe };\n+VECT_VAR_DECL (expected_round, int, 32, 4) [] = { 0xfffffffe, 0xfffffffe,\n+\t\t\t\t\t\t  0xfffffffe, 0xfffffffe };\n+\n+#define INSN vqrdmlah\n+#define TEST_MSG \"VQRDMLAH_LANE\"\n+\n+#include \"vqrdmlXh_lane.inc\""}, {"sha": "6010b4209e65d8c960884b56527bd132e3a131e8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmlsh_lane.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50469f7503ebb8ad057f18d32ba80307433b9a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmlsh_lane.c?ref=50469f7503ebb8ad057f18d32ba80307433b9a42", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-require-effective-target arm_v8_1a_neon_hw } */\n+/* { dg-add-options arm_v8_1a_neon } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR (expected_cumulative_sat, int, 16, 4) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 2) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 16, 8) = 0;\n+int VECT_VAR (expected_cumulative_sat, int, 32, 4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL (expected, int, 16, 4) [] = { 0xc70d, 0xc70e, 0xc70f, 0xc710 };\n+VECT_VAR_DECL (expected, int, 32, 2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL (expected, int, 16, 8) [] = { 0xff73, 0xff74, 0xff75, 0xff76,\n+\t\t\t\t\t    0xff77, 0xff78, 0xff79, 0xff7a };\n+VECT_VAR_DECL (expected, int, 32, 4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t    0xfffffff2, 0xfffffff3 };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 4) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 2) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 16, 8) = 1;\n+int VECT_VAR (expected_cumulative_sat_mul, int, 32, 4) = 1;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL (expected_mul, int, 16, 4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_mul, int, 32, 2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL (expected_mul, int, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_mul, int, 32, 4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t0x80000000, 0x80000000 };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 4) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 2) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 16, 8) = 1;\n+int VECT_VAR (expected_cumulative_sat_round, int, 32, 4) = 1;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL (expected_round, int, 16, 4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_round, int, 32, 2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL (expected_round, int, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL (expected_round, int, 32, 4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t  0x80000000, 0x80000000 };\n+\n+#define INSN vqrdmlsh\n+#define TEST_MSG \"VQRDMLSH_LANE\"\n+\n+#include \"vqrdmlXh_lane.inc\""}]}