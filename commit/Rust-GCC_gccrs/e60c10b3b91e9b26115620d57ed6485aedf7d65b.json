{"sha": "e60c10b3b91e9b26115620d57ed6485aedf7d65b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwYzEwYjNiOTFlOWIyNjExNTYyMGQ1N2VkNjQ4NWFlZGY3ZDY1Yg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-12-11T11:11:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:58Z"}, "message": "[Ada] Unnesting: fix a missing activation record\n\n2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada\n\n\t* exp_ch7.adb (Check_Unnesting_In_Declarations): Extend\n\tsubprogram so that it is usable for visible and private\n\tdeclarations of a package declaration, not just for declarations\n\tin the pakage body.\n\t* exp_ch13.adb (Expand_Freeze_Entity): Handle properly the\n\tfreezing of a finalizer routine generated for a controlled objet\n\tdeclaration. Special processing already applies to finalizers\n\tbecause they are usually displaced into another construct.\n\nFrom-SVN: r267010", "tree": {"sha": "467c8ab2451dea59e9b8149b35f9045796d3e689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467c8ab2451dea59e9b8149b35f9045796d3e689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60c10b3b91e9b26115620d57ed6485aedf7d65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60c10b3b91e9b26115620d57ed6485aedf7d65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60c10b3b91e9b26115620d57ed6485aedf7d65b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60c10b3b91e9b26115620d57ed6485aedf7d65b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ffa39d24733c209d32cc6b2cb87f4d38d8198a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffa39d24733c209d32cc6b2cb87f4d38d8198a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffa39d24733c209d32cc6b2cb87f4d38d8198a9"}], "stats": {"total": 160, "additions": 91, "deletions": 69}, "files": [{"sha": "0e317811171b2a65bb9c6894c60074b5d748724c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e60c10b3b91e9b26115620d57ed6485aedf7d65b", "patch": "@@ -1,3 +1,14 @@\n+2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch7.adb (Check_Unnesting_In_Declarations): Extend\n+\tsubprogram so that it is usable for visible and private\n+\tdeclarations of a package declaration, not just for declarations\n+\tin the pakage body.\n+\t* exp_ch13.adb (Expand_Freeze_Entity): Handle properly the\n+\tfreezing of a finalizer routine generated for a controlled objet\n+\tdeclaration. Special processing already applies to finalizers\n+\tbecause they are usually displaced into another construct.\n+\n 2018-12-11  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprogram): Ensure Current_Subprogram is"}, {"sha": "a6421580d733a1ce82c7f3b295b657b958122ae3", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=e60c10b3b91e9b26115620d57ed6485aedf7d65b", "patch": "@@ -540,6 +540,8 @@ package body Exp_Ch13 is\n          --      moved to the non-protected version of the subprogram.\n          --    * Task bodies - The declarations and statements are moved to the\n          --      task body procedure.\n+         --    * Blocks that will be rewritten as subprograms when unnesting\n+         --      is in effect.\n \n          --  Visible declarations do not need to be installed in these three\n          --  cases since it does not make semantic sense to do so. All entities\n@@ -552,7 +554,8 @@ package body Exp_Ch13 is\n              (Is_Entry (E_Scope)\n                 or else (Is_Subprogram (E_Scope)\n                           and then Is_Protected_Type (Scope (E_Scope)))\n-                or else Is_Task_Type (E_Scope))\n+                or else Is_Task_Type (E_Scope)\n+                or else Ekind (E_Scope) = E_Block)\n          then\n             null;\n          else"}, {"sha": "ed5cc8173d6deea3e45d074379cc64d5a75144c4", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 76, "deletions": 68, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60c10b3b91e9b26115620d57ed6485aedf7d65b/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=e60c10b3b91e9b26115620d57ed6485aedf7d65b", "patch": "@@ -350,6 +350,18 @@ package body Exp_Ch7 is\n    --  Build the deep Initialize/Adjust/Finalize for a record Typ with\n    --  Has_Component_Component set and store them using the TSS mechanism.\n \n+   -------------------------------------------\n+   -- Unnesting procedures for CCG and LLVM --\n+   -------------------------------------------\n+\n+   --  Expansion generates subprograms for controlled types management that\n+   --  may appear in declarative lists in package declarations and bodies.\n+   --  These subprograms appear within generated blocks that contain local\n+   --  declarations and a call to finalization procedures. To ensure that\n+   --  such subprograms get activation records when needed, we transform the\n+   --  block into a procedure body, followed by a call to it in the same\n+   --  declarative list.\n+\n    procedure Check_Unnesting_Elaboration_Code (N : Node_Id);\n    --  The statement part of a package body that is a compilation unit may\n    --  contain blocks that declare local subprograms. In Subprogram_Unnesting\n@@ -360,13 +372,17 @@ package body Exp_Ch7 is\n    --  a call to this subprogram. This is only done if blocks are present\n    --  in the statement list of the body.\n \n-   procedure Check_Unnesting_In_Declarations (N : Node_Id);\n+   procedure Check_Unnesting_In_Declarations (Decls : List_Id);\n    --  Similarly, the declarations in the package body may have created\n    --  blocks with nested subprograms. Such a block must be transformed into a\n    --  procedure followed by a call to it, so that unnesting can handle uplevel\n    --  references within these nested subprograms (typically generated\n    --  subprograms to handle finalization actions).\n \n+   function Contains_Subprogram (Blk : Entity_Id) return Boolean;\n+   --  Check recursively whether a loop or block contains a subprogram that\n+   --  may need an activation record.\n+\n    procedure Check_Visibly_Controlled\n      (Prim : Final_Primitives;\n       Typ  : Entity_Id;\n@@ -4000,10 +4016,6 @@ package body Exp_Ch7 is\n       First_Ent : Entity_Id := Empty;\n       Loop_Id   : Entity_Id := Empty;\n \n-      function Contains_Subprogram (Blk : Entity_Id) return Boolean;\n-      --  Check recursively whether a loop or block contains a subprogram that\n-      --  may need an activation record.\n-\n       function First_Local_Scope (L : List_Id) return Entity_Id;\n       --  Find first entity in the elaboration code of the body that contains\n       --  or represents a subprogram body. A body can appear within a block or\n@@ -4014,31 +4026,6 @@ package body Exp_Ch7 is\n       --  which depends on the scope links to determine the nesting level of\n       --  each subprogram.\n \n-      --------------------------\n-      --  Contains_Subprogram --\n-      --------------------------\n-\n-      function Contains_Subprogram (Blk : Entity_Id) return Boolean is\n-         E : Entity_Id;\n-\n-      begin\n-         E := First_Entity (Blk);\n-         while Present (E) loop\n-            if Is_Subprogram (E) then\n-               return True;\n-\n-            elsif Ekind_In (E, E_Block, E_Loop)\n-              and then Contains_Subprogram (E)\n-            then\n-               return True;\n-            end if;\n-\n-            Next_Entity (E);\n-         end loop;\n-\n-         return False;\n-      end Contains_Subprogram;\n-\n       -----------------------\n       --  Find_Local_Scope --\n       -----------------------\n@@ -4230,10 +4217,9 @@ package body Exp_Ch7 is\n    -- Check_Unnesting_In_Declarations --\n    -------------------------------------\n \n-   procedure Check_Unnesting_In_Declarations (N : Node_Id) is\n+   procedure Check_Unnesting_In_Declarations (Decls : List_Id) is\n       Decl       : Node_Id;\n       Ent        : Entity_Id;\n-      Inner_Decl : Node_Id;\n       Loc        : Source_Ptr;\n       Local_Body : Node_Id;\n       Local_Call : Node_Id;\n@@ -4243,49 +4229,43 @@ package body Exp_Ch7 is\n       Local_Call := Empty;\n \n       if Unnest_Subprogram_Mode\n-        and then Present (Declarations (N))\n+        and then Present (Decls)\n         and then Is_Compilation_Unit (Current_Scope)\n       then\n-         Decl := First (Declarations (N));\n+         Decl := First (Decls);\n          while Present (Decl) loop\n-            if Nkind (Decl) = N_Block_Statement then\n+            if Nkind (Decl) = N_Block_Statement\n+               and then Contains_Subprogram (Entity (Identifier (Decl)))\n+            then\n                Ent := First_Entity (Entity (Identifier (Decl)));\n-               Inner_Decl := First (Declarations (Decl));\n-\n-               while Present (Inner_Decl) loop\n-                  if Nkind (Inner_Decl) = N_Subprogram_Body then\n-                     Loc := Sloc (Decl);\n-                     Local_Proc :=\n-                       Make_Defining_Identifier (Loc,\n-                         Chars => New_Internal_Name ('P'));\n-\n-                     Local_Body :=\n-                       Make_Subprogram_Body (Loc,\n-                         Specification              =>\n-                           Make_Procedure_Specification (Loc,\n-                             Defining_Unit_Name => Local_Proc),\n-                             Declarations       => Declarations (Decl),\n-                         Handled_Statement_Sequence =>\n-                           Handled_Statement_Sequence (Decl));\n-\n-                     Rewrite (Decl, Local_Body);\n-                     Analyze (Decl);\n-                     Set_Has_Nested_Subprogram (Local_Proc);\n+               Loc := Sloc (Decl);\n+               Local_Proc :=\n+                 Make_Defining_Identifier (Loc,\n+                   Chars => New_Internal_Name ('P'));\n+\n+               Local_Body :=\n+                 Make_Subprogram_Body (Loc,\n+                   Specification              =>\n+                     Make_Procedure_Specification (Loc,\n+                       Defining_Unit_Name => Local_Proc),\n+                       Declarations       => Declarations (Decl),\n+                   Handled_Statement_Sequence =>\n+                     Handled_Statement_Sequence (Decl));\n \n-                     Local_Call :=\n-                       Make_Procedure_Call_Statement (Loc,\n-                         Name => New_Occurrence_Of (Local_Proc, Loc));\n+               Rewrite (Decl, Local_Body);\n+               Analyze (Decl);\n+               Set_Has_Nested_Subprogram (Local_Proc);\n \n-                     Insert_After (Decl, Local_Call);\n-                     Analyze (Local_Call);\n+               Local_Call :=\n+                 Make_Procedure_Call_Statement (Loc,\n+                   Name => New_Occurrence_Of (Local_Proc, Loc));\n \n-                     while Present (Ent) loop\n-                        Set_Scope (Ent, Local_Proc);\n-                        Next_Entity (Ent);\n-                     end loop;\n-                  end if;\n+               Insert_After (Decl, Local_Call);\n+               Analyze (Local_Call);\n \n-                  Next (Inner_Decl);\n+               while Present (Ent) loop\n+                  Set_Scope (Ent, Local_Proc);\n+                  Next_Entity (Ent);\n                end loop;\n             end if;\n \n@@ -4335,6 +4315,32 @@ package body Exp_Ch7 is\n       end if;\n    end Check_Visibly_Controlled;\n \n+   --------------------------\n+   --  Contains_Subprogram --\n+   --------------------------\n+\n+   function Contains_Subprogram (Blk : Entity_Id) return Boolean is\n+      E : Entity_Id;\n+\n+   begin\n+      E := First_Entity (Blk);\n+\n+      while Present (E) loop\n+         if Is_Subprogram (E) then\n+            return True;\n+\n+         elsif Ekind_In (E, E_Block, E_Loop)\n+           and then Contains_Subprogram (E)\n+         then\n+            return True;\n+         end if;\n+\n+         Next_Entity (E);\n+      end loop;\n+\n+      return False;\n+   end Contains_Subprogram;\n+\n    ------------------\n    -- Convert_View --\n    ------------------\n@@ -5023,7 +5029,7 @@ package body Exp_Ch7 is\n \n          Expand_Pragma_Initial_Condition (Spec_Id, N);\n          Check_Unnesting_Elaboration_Code (N);\n-         Check_Unnesting_In_Declarations (N);\n+         Check_Unnesting_In_Declarations (Declarations (N));\n \n          Pop_Scope;\n       end if;\n@@ -5181,6 +5187,8 @@ package body Exp_Ch7 is\n \n          Set_Finalizer (Id, Fin_Id);\n       end if;\n+      Check_Unnesting_In_Declarations (Visible_Declarations (Spec));\n+      Check_Unnesting_In_Declarations (Private_Declarations (Spec));\n    end Expand_N_Package_Declaration;\n \n    ----------------------------"}]}