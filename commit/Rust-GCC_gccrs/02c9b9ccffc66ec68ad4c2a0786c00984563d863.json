{"sha": "02c9b9ccffc66ec68ad4c2a0786c00984563d863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjOWI5Y2NmZmM2NmVjNjhhZDRjMmEwNzg2YzAwOTg0NTYzZDg2Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-17T13:13:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-17T13:13:30Z"}, "message": "Add constexpr to std::optional::value_or(U&&)&&\n\nIn C++1z drafts up to N4606 the constexpr keyword was missing from the\ndetailed description of this function, despite being shown in the class\nsynopsis.  That was fixed editorially for N4618, but our implementation\nwas not corrected to match.\n\n\t* include/std/optional (optional::value_or(U&&) &&): Add missing\n\tconstexpr specifier.\n\t* testsuite/20_util/optional/constexpr/observers/4.cc: Check value_or\n\tfor disengaged optionals and rvalue optionals.\n\t* testsuite/20_util/optional/observers/4.cc: Likewise.\n\nFrom-SVN: r270409", "tree": {"sha": "7cf052c6da992e58be5c83b6916ec71c700838c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf052c6da992e58be5c83b6916ec71c700838c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02c9b9ccffc66ec68ad4c2a0786c00984563d863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c9b9ccffc66ec68ad4c2a0786c00984563d863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02c9b9ccffc66ec68ad4c2a0786c00984563d863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c9b9ccffc66ec68ad4c2a0786c00984563d863/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa9c1f65f59e893064937c35a46c804b924cb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa9c1f65f59e893064937c35a46c804b924cb55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa9c1f65f59e893064937c35a46c804b924cb55"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "9ab8bb9154a5dc7cca236a907b75fbd8e7baaf10", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02c9b9ccffc66ec68ad4c2a0786c00984563d863", "patch": "@@ -1,3 +1,11 @@\n+2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (optional::value_or(U&&) &&): Add missing\n+\tconstexpr specifier.\n+\t* testsuite/20_util/optional/constexpr/observers/4.cc: Check value_or\n+\tfor disengaged optionals and rvalue optionals.\n+\t* testsuite/20_util/optional/observers/4.cc: Likewise.\n+\n 2019-04-12  Thomas Rodgers  <trodgers@redhat.com>\n \t\n \t* include/pstl/algorithm_impl.h: Uglify identfiers."}, {"sha": "503d859bee6fcabba079951c7a12e2a2cd0dc12a", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=02c9b9ccffc66ec68ad4c2a0786c00984563d863", "patch": "@@ -959,7 +959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up>\n-\t_Tp\n+\tconstexpr _Tp\n \tvalue_or(_Up&& __u) &&\n \t{\n \t  static_assert(is_move_constructible_v<_Tp>);"}, {"sha": "a085f53f8fab6be4f8c9bd6185bfb541f0a968d0", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/observers/4.cc", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fobservers%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fobservers%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fobservers%2F4.cc?ref=02c9b9ccffc66ec68ad4c2a0786c00984563d863", "patch": "@@ -25,10 +25,42 @@ struct value_type\n   int i;\n };\n \n-int main()\n+void test01()\n {\n   constexpr std::optional<value_type> o { value_type { 51 } };\n   constexpr value_type fallback { 3 };\n-  static_assert( o.value_or(fallback).i == 51, \"\" );\n-  static_assert( o.value_or(fallback).i == (*o).i, \"\" );\n+  static_assert( o.value_or(fallback).i == 51 );\n+  static_assert( o.value_or(fallback).i == (*o).i );\n+}\n+\n+void test02()\n+{\n+  constexpr std::optional<value_type> o;\n+  constexpr value_type fallback { 3 };\n+  static_assert( o.value_or(fallback).i == 3 );\n+}\n+\n+template<typename T>\n+  constexpr std::optional<value_type>\n+  make_rvalue(T t)\n+  { return std::optional<value_type>{t}; }\n+\n+void test03()\n+{\n+  constexpr value_type fallback { 3 };\n+  static_assert( make_rvalue(value_type{51}).value_or(fallback).i == 51 );\n+}\n+\n+void test04()\n+{\n+  constexpr value_type fallback { 3 };\n+  static_assert( make_rvalue(std::nullopt).value_or(fallback).i == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n }"}, {"sha": "5d608cdeaf7331a03212e712647c025ee2d8fc7c", "filename": "libstdc++-v3/testsuite/20_util/optional/observers/4.cc", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c9b9ccffc66ec68ad4c2a0786c00984563d863/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2F4.cc?ref=02c9b9ccffc66ec68ad4c2a0786c00984563d863", "patch": "@@ -26,10 +26,42 @@ struct value_type\n   int i;\n };\n \n-int main()\n+void test01()\n {\n   std::optional<value_type> o { value_type { 51 } };\n   value_type fallback { 3 };\n   VERIFY( o.value_or(fallback).i == 51 );\n   VERIFY( o.value_or(fallback).i == (*o).i );\n }\n+\n+void test02()\n+{\n+  std::optional<value_type> o;\n+  value_type fallback { 3 };\n+  VERIFY( o.value_or(fallback).i == 3 );\n+}\n+\n+void test03()\n+{\n+  std::optional<value_type> o { value_type { 51 } };\n+  value_type fallback { 3 };\n+  VERIFY( std::move(o).value_or(fallback).i == 51 );\n+  VERIFY( o.has_value() );\n+  VERIFY( std::move(o).value_or(fallback).i == (*o).i );\n+}\n+\n+void test04()\n+{\n+  std::optional<value_type> o;\n+  value_type fallback { 3 };\n+  VERIFY( std::move(o).value_or(fallback).i == 3 );\n+  VERIFY( !o.has_value() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}