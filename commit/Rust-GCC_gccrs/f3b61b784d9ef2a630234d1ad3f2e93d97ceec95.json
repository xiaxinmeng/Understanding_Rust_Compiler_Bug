{"sha": "f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiNjFiNzg0ZDllZjJhNjMwMjM0ZDFhZDNmMmU5M2Q5N2NlZWM5NQ==", "commit": {"author": {"name": "Enkovich Ilya", "email": "ilya.enkovich@intel.com", "date": "2011-11-07T08:47:15Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2011-11-07T08:47:15Z"}, "message": "re PR target/50962 (Additional opportunity for AGU stall avoidance optimization for Atom processor)\n\ngcc/\n\tPR target/50962\n\t* config/i386/i386-protos.h (ix86_use_lea_for_mov): New.\n\t* config/i386/i386.c (ix86_use_lea_for_mov): Likewise.\n\t* config/i386/i386.md (movsi_internal): Emit lea if profitable.\n\t(movdi_internal_rex64): Likewise.\n\nFrom-SVN: r181077", "tree": {"sha": "2501b8e1269ccfd5641293b19f8449fd7d94719f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2501b8e1269ccfd5641293b19f8449fd7d94719f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0f0ee74f00a58dc356ab1ac23638c97d505eb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f0ee74f00a58dc356ab1ac23638c97d505eb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f0ee74f00a58dc356ab1ac23638c97d505eb8d"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "6bfe13d47d6b529823de6dd1272417bf49f8d8c1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "patch": "@@ -93,6 +93,7 @@ extern bool ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n extern bool ix86_lea_outperforms (rtx, unsigned int, unsigned int,\n \t\t\t\t  unsigned int, unsigned int);\n extern bool ix86_avoid_lea_for_add (rtx, rtx[]);\n+extern bool ix86_use_lea_for_mov (rtx, rtx[]);\n extern bool ix86_avoid_lea_for_addr (rtx, rtx[]);\n extern void ix86_split_lea_for_addr (rtx[], enum machine_mode);\n extern bool ix86_lea_for_add_ok (rtx, rtx[]);"}, {"sha": "b735ab555e060ca90a503efefb34f54caebec136", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "patch": "@@ -16509,6 +16509,29 @@ ix86_avoid_lea_for_add (rtx insn, rtx operands[])\n     return !ix86_lea_outperforms (insn, regno0, regno1, regno2, 1);\n }\n \n+/* Return true if we should emit lea instruction instead of mov\n+   instruction.  */\n+\n+bool\n+ix86_use_lea_for_mov (rtx insn, rtx operands[])\n+{\n+  unsigned int regno0;\n+  unsigned int regno1;\n+\n+  /* Check if we need to optimize.  */\n+  if (!TARGET_OPT_AGU || optimize_function_for_size_p (cfun))\n+    return false;\n+\n+  /* Use lea for reg to reg moves only.  */\n+  if (!REG_P (operands[0]) || !REG_P (operands[1]))\n+    return false;\n+\n+  regno0 = true_regnum (operands[0]);\n+  regno1 = true_regnum (operands[1]);\n+\n+  return ix86_lea_outperforms (insn, regno0, regno1, -1, 0);\n+}\n+\n /* Return true if we need to split lea into a sequence of\n    instructions to avoid AGU stalls. */\n "}, {"sha": "d6a82b654cd102bc2cdd7eaff61bba92aa1a8308", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "patch": "@@ -2053,6 +2053,8 @@\n \treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n       else if (which_alternative == 2)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n+      else if (ix86_use_lea_for_mov(insn, operands))\n+\treturn \"lea{q}\\t{%a1, %0|%0, %a1}\";\n       else\n \treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n     }\n@@ -2288,7 +2290,10 @@\n \n     default:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n-      return \"mov{l}\\t{%1, %0|%0, %1}\";\n+      if (ix86_use_lea_for_mov(insn, operands))\n+\treturn \"lea{l}\\t{%a1, %0|%0, %a1}\";\n+      else\n+\treturn \"mov{l}\\t{%1, %0|%0, %1}\";\n     }\n }\n   [(set (attr \"type\")"}, {"sha": "66e56ee0aa5ca1427bcc7f3f4964f4e90ef99db3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3b61b784d9ef2a630234d1ad3f2e93d97ceec95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f3b61b784d9ef2a630234d1ad3f2e93d97ceec95", "patch": "@@ -1,3 +1,10 @@\n+2011-11-07  Enkovich Ilya  <ilya.enkovich@intel.com>\n+\n+\tPR target/50962\n+\t* config/i386/i386-protos.h (ix86_use_lea_for_mov): New.\n+\t* config/i386/i386.c (ix86_use_lea_for_mov): Likewise.\n+\t* config/i386/i386.md (movsi_internal): Emit lea if profitable.\n+\t(movdi_internal_rex64): Likewise.\n \n 2011-11-07  Sergey Ostanevich  <sergos.gnu@gmail.com>\n "}]}