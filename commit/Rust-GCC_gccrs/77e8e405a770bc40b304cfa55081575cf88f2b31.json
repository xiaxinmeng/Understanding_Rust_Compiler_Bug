{"sha": "77e8e405a770bc40b304cfa55081575cf88f2b31", "node_id": "C_kwDOANBUbNoAKDc3ZThlNDA1YTc3MGJjNDBiMzA0Y2ZhNTUwODE1NzVjZjg4ZjJiMzE", "commit": {"author": {"name": "LiaoShihua", "email": "shihua@iscas.ac.cn", "date": "2022-07-13T02:13:26Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-09-05T13:32:18Z"}, "message": "RISC-V: Support Zmmul extension\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.cc: Add Zmmul.\n\t* config/riscv/riscv-opts.h (MASK_ZMMUL): New.\n\t(TARGET_ZMMUL): Ditto.\n\t* config/riscv/riscv.cc (riscv_option_override):Ditto.\n\t* config/riscv/riscv.md: Add Zmmul\n\t* config/riscv/riscv.opt: Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zmmul-1.c: New test.\n\t* gcc.target/riscv/zmmul-2.c: New test.", "tree": {"sha": "31853e8c4944d08ddad96892935da179246bb06d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31853e8c4944d08ddad96892935da179246bb06d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77e8e405a770bc40b304cfa55081575cf88f2b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e8e405a770bc40b304cfa55081575cf88f2b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e8e405a770bc40b304cfa55081575cf88f2b31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e8e405a770bc40b304cfa55081575cf88f2b31/comments", "author": {"login": "Liaoshihua", "id": 43035022, "node_id": "MDQ6VXNlcjQzMDM1MDIy", "avatar_url": "https://avatars.githubusercontent.com/u/43035022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liaoshihua", "html_url": "https://github.com/Liaoshihua", "followers_url": "https://api.github.com/users/Liaoshihua/followers", "following_url": "https://api.github.com/users/Liaoshihua/following{/other_user}", "gists_url": "https://api.github.com/users/Liaoshihua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liaoshihua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liaoshihua/subscriptions", "organizations_url": "https://api.github.com/users/Liaoshihua/orgs", "repos_url": "https://api.github.com/users/Liaoshihua/repos", "events_url": "https://api.github.com/users/Liaoshihua/events{/privacy}", "received_events_url": "https://api.github.com/users/Liaoshihua/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178447296423ff7e1072621185438c45ab5b0a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178447296423ff7e1072621185438c45ab5b0a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178447296423ff7e1072621185438c45ab5b0a1d"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "120a03846867eac374f13009cc7d5310941ea6e9", "filename": "gcc/common/config/riscv/riscv-common.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -200,6 +200,8 @@ static const struct riscv_ext_version riscv_ext_version_table[] =\n   {\"zfh\",       ISA_SPEC_CLASS_NONE, 1, 0},\n   {\"zfhmin\",    ISA_SPEC_CLASS_NONE, 1, 0},\n \n+  {\"zmmul\", ISA_SPEC_CLASS_NONE, 1, 0},\n+\n   /* Terminate the list.  */\n   {NULL, ISA_SPEC_CLASS_NONE, 0, 0}\n };\n@@ -1214,6 +1216,8 @@ static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n   {\"zfhmin\",    &gcc_options::x_riscv_zf_subext, MASK_ZFHMIN},\n   {\"zfh\",       &gcc_options::x_riscv_zf_subext, MASK_ZFH},\n \n+  {\"zmmul\", &gcc_options::x_riscv_zm_subext, MASK_ZMMUL},\n+\n   {NULL, NULL, 0}\n };\n "}, {"sha": "55e0bc0a0e90020a8d711503f260e8794be2e758", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -159,6 +159,9 @@ enum stack_protector_guard {\n #define TARGET_ZFHMIN ((riscv_zf_subext & MASK_ZFHMIN) != 0)\n #define TARGET_ZFH    ((riscv_zf_subext & MASK_ZFH) != 0)\n \n+#define MASK_ZMMUL      (1 << 0)\n+#define TARGET_ZMMUL    ((riscv_zm_subext & MASK_ZMMUL) != 0)\n+\n /* Bit of riscv_zvl_flags will set contintuly, N-1 bit will set if N-bit is\n    set, e.g. MASK_ZVL64B has set then MASK_ZVL32B is set, so we can use\n    popcount to caclulate the minimal VLEN.  */"}, {"sha": "b5252b41df702fafe2b5f10c4f831db2e03fbdbb", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -5277,10 +5277,14 @@ riscv_option_override (void)\n   /* The presence of the M extension implies that division instructions\n      are present, so include them unless explicitly disabled.  */\n   if (TARGET_MUL && (target_flags_explicit & MASK_DIV) == 0)\n-    target_flags |= MASK_DIV;\n+    if(!TARGET_ZMMUL)\n+      target_flags |= MASK_DIV;\n   else if (!TARGET_MUL && TARGET_DIV)\n     error (\"%<-mdiv%> requires %<-march%> to subsume the %<M%> extension\");\n-\n+  \n+  if(TARGET_ZMMUL && !TARGET_MUL && TARGET_DIV)\n+    warning (0, \"%<-mdiv%> cannot be used when %<ZMMUL%> extension is present\");\n+  \n   /* Likewise floating-point division and square root.  */\n   if (TARGET_HARD_FLOAT && (target_flags_explicit & MASK_FDIV) == 0)\n     target_flags |= MASK_FDIV;"}, {"sha": "d2dfde28e318485f2824d3c4225932d2bf8829d6", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -743,7 +743,7 @@\n   [(set (match_operand:SI          0 \"register_operand\" \"=r\")\n \t(mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t (match_operand:SI 2 \"register_operand\" \" r\")))]\n-  \"TARGET_MUL\"\n+  \"TARGET_ZMMUL || TARGET_MUL\"\n   \"mul%~\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n@@ -752,7 +752,7 @@\n   [(set (match_operand:DI          0 \"register_operand\" \"=r\")\n \t(mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n \t\t (match_operand:DI 2 \"register_operand\" \" r\")))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"TARGET_ZMMUL || TARGET_MUL && TARGET_64BIT\"\n   \"mul\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n@@ -762,7 +762,7 @@\n \t(mult:GPR (match_operand:GPR 1 \"register_operand\" \" r\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \" r\")))\n    (label_ref (match_operand 3 \"\" \"\"))]\n-  \"TARGET_MUL\"\n+  \"TARGET_ZMMUL || TARGET_MUL\"\n {\n   if (TARGET_64BIT && <MODE>mode == SImode)\n     {\n@@ -807,7 +807,7 @@\n \t(mult:GPR (match_operand:GPR 1 \"register_operand\" \" r\")\n \t\t  (match_operand:GPR 2 \"register_operand\" \" r\")))\n    (label_ref (match_operand 3 \"\" \"\"))]\n-  \"TARGET_MUL\"\n+  \"TARGET_ZMMUL || TARGET_MUL\"\n {\n   if (TARGET_64BIT && <MODE>mode == SImode)\n     {\n@@ -853,7 +853,7 @@\n \t(sign_extend:DI\n \t    (mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t     (match_operand:SI 2 \"register_operand\" \" r\"))))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n   \"mulw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n@@ -864,7 +864,7 @@\n \t  (match_operator:SI 3 \"subreg_lowpart_operator\"\n \t    [(mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n \t\t      (match_operand:DI 2 \"register_operand\" \" r\"))])))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n   \"mulw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n@@ -882,7 +882,7 @@\n   [(set (match_operand:TI                         0 \"register_operand\")\n \t(mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t (any_extend:TI (match_operand:DI 2 \"register_operand\"))))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n {\n   rtx low = gen_reg_rtx (DImode);\n   emit_insn (gen_muldi3 (low, operands[1], operands[2]));\n@@ -904,7 +904,7 @@\n \t\t     (any_extend:TI\n \t\t       (match_operand:DI 2 \"register_operand\" \" r\")))\n \t    (const_int 64))))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n   \"mulh<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n@@ -913,7 +913,7 @@\n   [(set (match_operand:TI                          0 \"register_operand\")\n \t(mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t (sign_extend:TI (match_operand:DI 2 \"register_operand\"))))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n {\n   rtx low = gen_reg_rtx (DImode);\n   emit_insn (gen_muldi3 (low, operands[1], operands[2]));\n@@ -935,7 +935,7 @@\n \t\t     (sign_extend:TI\n \t\t       (match_operand:DI 2 \"register_operand\" \" r\")))\n \t    (const_int 64))))]\n-  \"TARGET_MUL && TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && TARGET_64BIT\"\n   \"mulhsu\\t%0,%2,%1\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n@@ -946,7 +946,7 @@\n \t\t   (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t (any_extend:DI\n \t\t   (match_operand:SI 2 \"register_operand\" \" r\"))))]\n-  \"TARGET_MUL && !TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && !TARGET_64BIT\"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   emit_insn (gen_mulsi3 (temp, operands[1], operands[2]));\n@@ -965,7 +965,7 @@\n \t\t     (any_extend:DI\n \t\t       (match_operand:SI 2 \"register_operand\" \" r\")))\n \t    (const_int 32))))]\n-  \"TARGET_MUL && !TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && !TARGET_64BIT\"\n   \"mulh<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n@@ -977,7 +977,7 @@\n \t\t   (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t (sign_extend:DI\n \t\t   (match_operand:SI 2 \"register_operand\" \" r\"))))]\n-  \"TARGET_MUL && !TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && !TARGET_64BIT\"\n {\n   rtx temp = gen_reg_rtx (SImode);\n   emit_insn (gen_mulsi3 (temp, operands[1], operands[2]));\n@@ -996,7 +996,7 @@\n \t\t     (sign_extend:DI\n \t\t       (match_operand:SI 2 \"register_operand\" \" r\")))\n \t    (const_int 32))))]\n-  \"TARGET_MUL && !TARGET_64BIT\"\n+  \"(TARGET_ZMMUL || TARGET_MUL) && !TARGET_64BIT\"\n   \"mulhsu\\t%0,%2,%1\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])"}, {"sha": "e3af561c153acf33ffa0b860fe0ad02142f09e1e", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -215,6 +215,9 @@ int riscv_zicmo_subext\n TargetVariable\n int riscv_zf_subext\n \n+TargetVariable\n+int riscv_zm_subext\n+\n Enum\n Name(isa_spec_class) Type(enum riscv_isa_spec_class)\n Supported ISA specs (for use with the -misa-spec= option):"}, {"sha": "cdae2cb55df97a2e883cdc63186012de46819c0f", "filename": "gcc/testsuite/gcc.target/riscv/zmmul-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-1.c?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64iafdc_zmmul -mabi=lp64\" } */\n+int foo1(int a, int b)\n+{\n+    return a*b;\n+}\n+\n+int foo2(int a, int b)\n+{\n+    return a/b;\n+}\n+\n+int foo3(int a, int b)\n+{\n+    return a%b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mulw\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"div\\t\" } } */\n+/* { dg-final { scan-assembler-not \"rem\\t\" } } */\n\\ No newline at end of file"}, {"sha": "dc6829da92e0fe4ff4491d1181da17594a43ac8d", "filename": "gcc/testsuite/gcc.target/riscv/zmmul-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e8e405a770bc40b304cfa55081575cf88f2b31/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzmmul-2.c?ref=77e8e405a770bc40b304cfa55081575cf88f2b31", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32iafdc_zmmul -mabi=ilp32\" } */\n+int foo1(int a, int b)\n+{\n+    return a*b;\n+}\n+\n+int foo2(int a, int b)\n+{\n+    return a/b;\n+}\n+\n+int foo3(int a, int b)\n+{\n+    return a%b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"div\\t\" } } */\n+/* { dg-final { scan-assembler-not \"rem\\t\" } } */\n\\ No newline at end of file"}]}