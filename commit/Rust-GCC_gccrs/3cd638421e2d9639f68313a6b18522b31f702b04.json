{"sha": "3cd638421e2d9639f68313a6b18522b31f702b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNjM4NDIxZTJkOTYzOWY2ODMxM2E2YjE4NTIyYjMxZjcwMmIwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-12T08:35:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-12T08:35:20Z"}, "message": "i386.md (isa): Add x64_avx512dq, enable if TARGET_64BIT && TARGET_AVX512DQ.\n\n\t* config/i386/i386.md (isa): Add x64_avx512dq, enable if\n\tTARGET_64BIT && TARGET_AVX512DQ.\n\t* config/i386/sse.md (*vec_extract<mode>): Add avx512bw alternatives.\n\t(*vec_extract<PEXTR_MODE12:mode>_zext): Add avx512bw alternative.\n\t(*vec_extract<ssevecmodelower>_0, *vec_extractv4si_0_zext,\n\t*vec_extractv2di_0_sse): Use v constraint instead of x constraint.\n\t(*vec_extractv4si): Add avx512dq and avx512bw alternatives.\n\t(*vec_extractv4si_zext): Add avx512dq alternative.\n\t(*vec_extractv2di_1): Add x64_avx512dq and avx512bw alternatives,\n\tuse v instead of x constraint in other alternatives where possible.\n\n\t* gcc.target/i386/avx512bw-vpextr-1.c: New test.\n\t* gcc.target/i386/avx512dq-vpextr-1.c: New test.\n\nFrom-SVN: r236167", "tree": {"sha": "6c298a6007a6c46887106e8ea8b961b4a81bd4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c298a6007a6c46887106e8ea8b961b4a81bd4ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd638421e2d9639f68313a6b18522b31f702b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd638421e2d9639f68313a6b18522b31f702b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd638421e2d9639f68313a6b18522b31f702b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd638421e2d9639f68313a6b18522b31f702b04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0247b635c78d12fbc335f7df19bf383ef50c7ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247b635c78d12fbc335f7df19bf383ef50c7ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0247b635c78d12fbc335f7df19bf383ef50c7ba5"}], "stats": {"total": 264, "additions": 226, "deletions": 38}, "files": [{"sha": "e47a12b00ec7504139de87e4e4b8d6a52c84dfb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -1,5 +1,16 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/i386.md (isa): Add x64_avx512dq, enable if\n+\tTARGET_64BIT && TARGET_AVX512DQ.\n+\t* config/i386/sse.md (*vec_extract<mode>): Add avx512bw alternatives.\n+\t(*vec_extract<PEXTR_MODE12:mode>_zext): Add avx512bw alternative.\n+\t(*vec_extract<ssevecmodelower>_0, *vec_extractv4si_0_zext,\n+\t*vec_extractv2di_0_sse): Use v constraint instead of x constraint.\n+\t(*vec_extractv4si): Add avx512dq and avx512bw alternatives.\n+\t(*vec_extractv4si_zext): Add avx512dq alternative.\n+\t(*vec_extractv2di_1): Add x64_avx512dq and avx512bw alternatives,\n+\tuse v instead of x constraint in other alternatives where possible.\n+\n \t* config/i386/sse.md (sse2_loadld): Use v instead of x\n \tconstraint in alternatives 0,1,4.\n "}, {"sha": "b2d4cb4de82b7e27df80c5ecf3d7dbae9272452c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -796,7 +796,7 @@\n \t\t    sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n \t\t    avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    fma_avx512f,avx512bw,noavx512bw,avx512dq,noavx512dq,\n-\t\t    avx512vl,noavx512vl\"\n+\t\t    avx512vl,noavx512vl,x64_avx512dq\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n@@ -807,6 +807,8 @@\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"x64_avx\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_AVX\")\n+\t (eq_attr \"isa\" \"x64_avx512dq\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"nox64\") (symbol_ref \"!TARGET_64BIT\")\n \t (eq_attr \"isa\" \"sse2\") (symbol_ref \"TARGET_SSE2\")\n \t (eq_attr \"isa\" \"sse2_noavx\")"}, {"sha": "d77227a7c27df85ece0842684f816322eaeea67b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -13036,39 +13036,44 @@\n   [(V16QI \"TARGET_SSE4_1\") V8HI])\n \n (define_insn \"*vec_extract<mode>\"\n-  [(set (match_operand:<ssescalarmode> 0 \"register_sse4nonimm_operand\" \"=r,m\")\n+  [(set (match_operand:<ssescalarmode> 0 \"register_sse4nonimm_operand\" \"=r,m,r,m\")\n \t(vec_select:<ssescalarmode>\n-\t  (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,x,v,v\")\n \t  (parallel\n \t    [(match_operand:SI 2 \"const_0_to_<ssescalarnummask>_operand\")])))]\n   \"TARGET_SSE2\"\n   \"@\n    %vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n-   %vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,sse4\")\n+   %vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\n+   vpextr<ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n+   vpextr<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,sse4,avx512bw,avx512bw\")\n    (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"0\")\n+       (and (eq_attr \"alternative\" \"0,2\")\n \t    (eq (const_string \"<MODE>mode\") (const_string \"V8HImode\")))\n        (const_string \"*\")\n        (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex,evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extract<PEXTR_MODE12:mode>_zext\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SWI48\n \t  (vec_select:<PEXTR_MODE12:ssescalarmode>\n-\t    (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x\")\n+\t    (match_operand:PEXTR_MODE12 1 \"register_operand\" \"x,v\")\n \t    (parallel\n \t      [(match_operand:SI 2\n \t\t\"const_0_to_<PEXTR_MODE12:ssescalarnummask>_operand\")]))))]\n   \"TARGET_SSE2\"\n-  \"%vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n+  \"@\n+   %vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\n+   vpextr<PEXTR_MODE12:ssemodesuffix>\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"isa\" \"*,avx512bw\")\n+   (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set (attr \"prefix_extra\")\n      (if_then_else\n@@ -13089,9 +13094,9 @@\n   \"#\")\n \n (define_insn \"*vec_extract<ssevecmodelower>_0\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,r,x ,m\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r ,r,v ,m\")\n \t(vec_select:SWI48\n-\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"mYj,x,xm,x\")\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"mYj,v,vm,v\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n@@ -13101,7 +13106,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (vec_select:SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC\"\n   \"#\"\n@@ -13110,9 +13115,9 @@\n   \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n (define_insn \"*vec_extractv2di_0_sse\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=x,m\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=v,m\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm,v\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !TARGET_64BIT\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -13128,46 +13133,49 @@\n   \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\")\n \n (define_insn \"*vec_extractv4si\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,Yr,*x,x\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm,Yr,*x,x,Yv\")\n \t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x,0,0,x\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x,v,0,0,x,v\")\n \t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n {\n   switch (which_alternative)\n     {\n     case 0:\n+    case 1:\n       return \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\";\n \n-    case 1:\n     case 2:\n-      operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n+    case 3:\n+      operands[2] = GEN_INT (INTVAL (operands[2]) * 4);\n       return \"psrldq\\t{%2, %0|%0, %2}\";\n \n-    case 3:\n-      operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n+    case 4:\n+    case 5:\n+      operands[2] = GEN_INT (INTVAL (operands[2]) * 4);\n       return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"*,noavx,noavx,avx\")\n-   (set_attr \"type\" \"sselog1,sseishft1,sseishft1,sseishft1\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*\")\n+  [(set_attr \"isa\" \"*,avx512dq,noavx,noavx,avx,avx512bw\")\n+   (set_attr \"type\" \"sselog1,sselog1,sseishft1,sseishft1,sseishft1,sseishft1\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*,*,*\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,orig,vex\")\n+   (set_attr \"prefix\" \"maybe_vex,evex,orig,orig,vex,evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extractv4si_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (vec_select:SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (match_operand:V4SI 1 \"register_operand\" \"x,v\")\n \t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")]))))]\n   \"TARGET_64BIT && TARGET_SSE4_1\"\n   \"%vpextrd\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog1\")\n+  [(set_attr \"isa\" \"*,avx512dq\")\n+   (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -13196,26 +13204,28 @@\n })\n \n (define_insn \"*vec_extractv2di_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=rm,m,x,x,x,x,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=rm,rm,m,x,x,Yv,x,v,r\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\"  \"x ,x,0,x,x,o,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\"  \"x ,v ,v,0,x, v,x,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    %vpextrq\\t{$1, %1, %0|%0, %1, 1}\n+   vpextrq\\t{$1, %1, %0|%0, %1, 1}\n    %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n+   vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n    movhlps\\t{%1, %0|%0, %1}\n    #\n    #\"\n-  [(set_attr \"isa\" \"x64_sse4,*,sse2_noavx,avx,noavx,*,x64\")\n-   (set_attr \"type\" \"sselog1,ssemov,sseishft1,sseishft1,ssemov,ssemov,imov\")\n-   (set_attr \"length_immediate\" \"1,*,1,1,*,*,*\")\n-   (set_attr \"prefix_rex\" \"1,*,*,*,*,*,*\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,vex,orig,*,*\")\n-   (set_attr \"mode\" \"TI,V2SF,TI,TI,V4SF,DI,DI\")])\n+  [(set_attr \"isa\" \"x64_sse4,x64_avx512dq,*,sse2_noavx,avx,avx512bw,noavx,*,x64\")\n+   (set_attr \"type\" \"sselog1,sselog1,ssemov,sseishft1,sseishft1,sseishft1,ssemov,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"1,1,*,1,1,1,*,*,*\")\n+   (set_attr \"prefix_rex\" \"1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,evex,maybe_vex,orig,vex,evex,orig,*,*\")\n+   (set_attr \"mode\" \"TI,TI,V2SF,TI,TI,TI,V4SF,DI,DI\")])\n \n (define_split\n   [(set (match_operand:<ssescalarmode> 0 \"register_operand\")"}, {"sha": "f4f2390bfc18e4a3b44a5813f6c80f945bf5c33a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -1,5 +1,8 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512bw-vpextr-1.c: New test.\n+\t* gcc.target/i386/avx512dq-vpextr-1.c: New test.\n+\n \t* gcc.target/i386/avx512bw-vpinsr-1.c: New test.\n \t* gcc.target/i386/avx512dq-vpinsr-1.c: New test.\n \t* gcc.target/i386/avx512vl-vpinsr-1.c: New test."}, {"sha": "f4eea9bf5115365d4e71767e4d300cded8430bdc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpextr-1.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpextr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpextr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpextr-1.c?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw\" } */\n+\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+void\n+f1 (v16qi a)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  register unsigned char e __asm (\"dl\");\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  e = ((unsigned char *) &d)[3];\n+  asm volatile (\"\" : : \"q\" (e));\n+}\n+\n+unsigned short\n+f2 (v8hi a)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  register unsigned short e __asm (\"dx\");\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  e = ((unsigned short *) &d)[3];\n+  asm volatile (\"\" : : \"r\" (e));\n+}\n+\n+unsigned int\n+f3 (v16qi a)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  return ((unsigned char *) &d)[3];\n+}\n+\n+unsigned int\n+f4 (v8hi a)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  return ((unsigned short *) &d)[3];\n+}\n+\n+unsigned long long\n+f5 (v16qi a)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  return ((unsigned char *) &d)[3];\n+}\n+\n+unsigned long long\n+f6 (v8hi a)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  return ((unsigned short *) &d)[3];\n+}\n+\n+void\n+f7 (v16qi a, unsigned char *p)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  *p = ((unsigned char *) &d)[3];\n+}\n+\n+void\n+f8 (v8hi a, unsigned short *p)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  *p = ((unsigned short *) &d)[3];\n+}\n+\n+void\n+f9 (v4si a)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  register unsigned int e __asm (\"xmm17\");\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  e = ((unsigned int *) &d)[3];\n+  asm volatile (\"\" : \"+v\" (e));\n+}\n+\n+void\n+f10 (v2di a)\n+{\n+  register v2di c __asm (\"xmm16\") = a;\n+  register unsigned long long e __asm (\"xmm17\");\n+  asm volatile (\"\" : \"+v\" (c));\n+  v2di d = c;\n+  e = ((unsigned long long *) &d)[1];\n+  asm volatile (\"\" : \"+v\" (e));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpextrb\\[^\\n\\r]*xmm16\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpextrw\\[^\\n\\r]*xmm16\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpsrldq\\[^\\n\\r]*xmm1\\[67\\]\\[^\\n\\r]*xmm1\\[67\\]\" 2 } } */"}, {"sha": "3c6abafc28f9b07f8f178fad9c1c9b7616dd8d23", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpextr-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpextr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd638421e2d9639f68313a6b18522b31f702b04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpextr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpextr-1.c?ref=3cd638421e2d9639f68313a6b18522b31f702b04", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512dq\" } */\n+\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+unsigned int\n+f1 (v4si a)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  return ((unsigned int *) &d)[3];\n+}\n+\n+unsigned long long\n+f2 (v2di a)\n+{\n+  register v2di c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v2di d = c;\n+  return ((unsigned long long *) &d)[1];\n+}\n+\n+unsigned long long\n+f3 (v4si a)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  return ((unsigned int *) &d)[3];\n+}\n+\n+void\n+f4 (v4si a, unsigned int *p)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  *p = ((unsigned int *) &d)[3];\n+}\n+\n+void\n+f5 (v2di a, unsigned long long *p)\n+{\n+  register v2di c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v2di d = c;\n+  *p = ((unsigned long long *) &d)[1];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpextrd\\[^\\n\\r]*xmm16\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpextrq\\[^\\n\\r]*xmm16\" 2 } } */"}]}