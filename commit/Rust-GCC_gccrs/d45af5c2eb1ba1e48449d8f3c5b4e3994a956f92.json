{"sha": "d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "node_id": "C_kwDOANBUbNoAKGQ0NWFmNWMyZWIxYmExZTQ4NDQ5ZDhmM2M1YjRlMzk5NGE5NTZmOTI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-15T19:56:56Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-17T17:18:27Z"}, "message": "Fortran: handle bad array ctors with typespec [PR93483, PR107216, PR107219]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/93483\n\tPR fortran/107216\n\tPR fortran/107219\n\t* arith.cc (reduce_unary): Handled expressions are EXP_CONSTANT and\n\tEXPR_ARRAY.  Do not attempt to reduce otherwise.\n\t(reduce_binary_ac): Likewise.\n\t(reduce_binary_ca): Likewise.\n\t(reduce_binary_aa): Moved check for EXP_CONSTANT and EXPR_ARRAY\n\tfrom here ...\n\t(reduce_binary): ... to here.\n\t(eval_intrinsic): Catch failed reductions.\n\t* gfortran.h (GFC_INTRINSIC_OPS): New enum ARITH_NOT_REDUCED to keep\n\ttrack of expressions that were not reduced by the arithmetic evaluation\n\tcode.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/93483\n\tPR fortran/107216\n\tPR fortran/107219\n\t* gfortran.dg/array_constructor_56.f90: New test.\n\t* gfortran.dg/array_constructor_57.f90: New test.\n\nCo-authored-by: Mikael Morin <mikael@gcc.gnu.org>", "tree": {"sha": "c26bf775b5a7f230f25333e19e859397bb7bb0a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26bf775b5a7f230f25333e19e859397bb7bb0a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34cecde675be67543b386b593132ce8b1bb0a3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34cecde675be67543b386b593132ce8b1bb0a3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34cecde675be67543b386b593132ce8b1bb0a3ab"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "fc9224ebc5c93ece75ef171e0f8307365afa7ca8", "filename": "gcc/fortran/arith.cc", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ffortran%2Farith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ffortran%2Farith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.cc?ref=d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "patch": "@@ -1315,14 +1315,14 @@ reduce_unary (arith (*eval) (gfc_expr *, gfc_expr **), gfc_expr *op,\n   if (op->expr_type == EXPR_CONSTANT)\n     return eval (op, result);\n \n+  if (op->expr_type != EXPR_ARRAY)\n+    return ARITH_NOT_REDUCED;\n+\n   rc = ARITH_OK;\n   head = gfc_constructor_copy (op->value.constructor);\n   for (c = gfc_constructor_first (head); c; c = gfc_constructor_next (c))\n     {\n-      if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n-\trc = ARITH_INVALID_TYPE;\n-      else\n-\trc = reduce_unary (eval, c->expr, &r);\n+      rc = reduce_unary (eval, c->expr, &r);\n \n       if (rc != ARITH_OK)\n \tbreak;\n@@ -1363,8 +1363,8 @@ reduce_binary_ac (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n \n       if (c->expr->expr_type == EXPR_CONSTANT)\n         rc = eval (c->expr, op2, &r);\n-      else if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n-\trc = ARITH_INVALID_TYPE;\n+      else if (c->expr->expr_type != EXPR_ARRAY)\n+\trc = ARITH_NOT_REDUCED;\n       else\n \trc = reduce_binary_ac (eval, c->expr, op2, &r);\n \n@@ -1417,8 +1417,8 @@ reduce_binary_ca (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n \n       if (c->expr->expr_type == EXPR_CONSTANT)\n \trc = eval (op1, c->expr, &r);\n-      else if (c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n-\trc = ARITH_INVALID_TYPE;\n+      else if (c->expr->expr_type != EXPR_ARRAY)\n+\trc = ARITH_NOT_REDUCED;\n       else\n \trc = reduce_binary_ca (eval, op1, c->expr, &r);\n \n@@ -1478,11 +1478,7 @@ reduce_binary_aa (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n        c && d;\n        c = gfc_constructor_next (c), d = gfc_constructor_next (d))\n     {\n-      if ((c->expr->expr_type == EXPR_OP && c->expr->ts.type == BT_UNKNOWN)\n-\t  || (d->expr->expr_type == EXPR_OP && d->expr->ts.type == BT_UNKNOWN))\n-\trc = ARITH_INVALID_TYPE;\n-      else\n-\trc = reduce_binary (eval, c->expr, d->expr, &r);\n+      rc = reduce_binary (eval, c->expr, d->expr, &r);\n \n       if (rc != ARITH_OK)\n \tbreak;\n@@ -1523,6 +1519,9 @@ reduce_binary (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   if (op1->expr_type == EXPR_ARRAY && op2->expr_type == EXPR_CONSTANT)\n     return reduce_binary_ac (eval, op1, op2, result);\n \n+  if (op1->expr_type != EXPR_ARRAY || op2->expr_type != EXPR_ARRAY)\n+    return ARITH_NOT_REDUCED;\n+\n   return reduce_binary_aa (eval, op1, op2, result);\n }\n \n@@ -1701,7 +1700,7 @@ eval_intrinsic (gfc_intrinsic_op op,\n   else\n     rc = reduce_binary (eval.f3, op1, op2, &result);\n \n-  if (rc == ARITH_INVALID_TYPE)\n+  if (rc == ARITH_INVALID_TYPE || rc == ARITH_NOT_REDUCED)\n     goto runtime;\n \n   /* Something went wrong.  */"}, {"sha": "6bd8800ecf8e57e39f44ec245ddce6df5eb35007", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "patch": "@@ -222,11 +222,12 @@ enum gfc_intrinsic_op\n    Assumptions are made about the numbering of the interface_op enums.  */\n #define GFC_INTRINSIC_OPS GFC_INTRINSIC_END\n \n-/* Arithmetic results.  */\n+/* Arithmetic results.  ARITH_NOT_REDUCED is used to keep track of expressions\n+   that were not reduced by the arithmetic evaluation code.  */\n enum arith\n { ARITH_OK = 1, ARITH_OVERFLOW, ARITH_UNDERFLOW, ARITH_NAN,\n   ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT,\n-  ARITH_WRONGCONCAT, ARITH_INVALID_TYPE\n+  ARITH_WRONGCONCAT, ARITH_INVALID_TYPE, ARITH_NOT_REDUCED\n };\n \n /* Statements.  */"}, {"sha": "4701fb36225cd32ec4090382047a69722cdfe94d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_56.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_56.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_56.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_56.f90?ref=d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+!\n+! Test the fix for the following:\n+! PR fortran/93483\n+! PR fortran/107216\n+! PR fortran/107219\n+!\n+! Contributed by G.Steinmetz\n+\n+program p\n+  real, parameter :: r0(*) = +[real :: +(1) ]\n+  real, parameter :: r1(*) = +[real :: +[1] ]\n+  real, parameter :: r2(*) = -[real :: [(1)]]\n+  real, parameter :: r3(*) = +[real :: [-(1)]]\n+  real, parameter :: r4(*) = -[real :: [[(1)]]]\n+  real, parameter :: r5(*) = -[real :: -[1, 2]]\n+  real, parameter :: r6(*) = +[real :: +[1, 2]]\n+  real, parameter :: r7(*) =  [real :: 1, 2] * [real :: 1, (2)]\n+  real, parameter :: r8(*) =  [real :: 1, (2)] * [real :: 1, 2]\n+  real, parameter :: r9(*) = +[real :: 1, 2] * [real :: 1, (2)]\n+  real, parameter :: rr(*) = -[real :: 1, (2)] * [real :: 1, 2]\n+end"}, {"sha": "1298c09cc40f31c0d50ce63d10fafb1a6f8ab01a", "filename": "gcc/testsuite/gfortran.dg/array_constructor_57.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_57.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_57.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_57.f90?ref=d45af5c2eb1ba1e48449d8f3c5b4e3994a956f92", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+! PR fortran/93483\n+!\n+! Verify that resolution (host associated parameter vs. contained function) works.\n+!\n+! Contributed by Mikael Morin\n+\n+module m\n+  implicit none\n+  integer, parameter :: a(*) = [ 7, 11 ]\n+contains\n+  subroutine bug\n+    real :: b(1), c(1)\n+    b = [ real :: (a(1)) ]\n+    c = [ real ::  a(1)  ]\n+    print *, b, c\n+    if (any (b /= [ 14. ])) stop 1\n+    if (any (c /= [ 14. ])) stop 2\n+  contains\n+    function a(c)\n+      integer :: a, c\n+      a = c + 13\n+    end function a\n+  end subroutine bug\n+end module m\n+\n+program p\n+  use m\n+  call bug\n+end program p"}]}