{"sha": "da66454436b819c50d0901a4da66aac3181f11de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2NjQ1NDQzNmI4MTljNTBkMDkwMWE0ZGE2NmFhYzMxODFmMTFkZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T17:45:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T17:45:22Z"}, "message": "internal-fn.c: Use rtx_insn and rtx_code_label\n\ngcc/\n\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check):\n\tStrengthen locals \"done_label\", \"do_error\" from rtx to\n\trtx_code_label *.\n\t(ubsan_expand_si_overflow_addsub_check): Strengthen local \"last\"\n\tfrom rtx to rtx_insn *.  Strengthen local \"sub_check from rtx to\n\trtx_code_label *.\n\t(ubsan_expand_si_overflow_neg_check): Likewise for locals\n\t\"done_label\", \"do_error\" to rtx_code_label * and local  \"last\" to\n\trtx_insn *.\n\t(ubsan_expand_si_overflow_mul_check): Likewise for locals\n\t\"done_label\", \"do_error\", \"large_op0\", \"small_op0_large_op1\",\n\t\"one_small_one_large\", \"both_ops_large\", \"after_hipart_neg\",\n\t\"after_lopart_neg\", \"do_overflow\", \"hipart_different\"  to\n\trtx_code_label * and local  \"last\" to rtx_insn *.\n\nFrom-SVN: r214338", "tree": {"sha": "c30d1534c01ca149ba2a00d187c943dddf903af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c30d1534c01ca149ba2a00d187c943dddf903af1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da66454436b819c50d0901a4da66aac3181f11de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da66454436b819c50d0901a4da66aac3181f11de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da66454436b819c50d0901a4da66aac3181f11de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da66454436b819c50d0901a4da66aac3181f11de/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44bd200667537f49acf0af66916d222d760294de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44bd200667537f49acf0af66916d222d760294de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44bd200667537f49acf0af66916d222d760294de"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "8b650f585d07cf12aa7635caf6a3ec4ba03803b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da66454436b819c50d0901a4da66aac3181f11de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da66454436b819c50d0901a4da66aac3181f11de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da66454436b819c50d0901a4da66aac3181f11de", "patch": "@@ -1,3 +1,20 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check):\n+\tStrengthen locals \"done_label\", \"do_error\" from rtx to\n+\trtx_code_label *.\n+\t(ubsan_expand_si_overflow_addsub_check): Strengthen local \"last\"\n+\tfrom rtx to rtx_insn *.  Strengthen local \"sub_check from rtx to\n+\trtx_code_label *.\n+\t(ubsan_expand_si_overflow_neg_check): Likewise for locals\n+\t\"done_label\", \"do_error\" to rtx_code_label * and local  \"last\" to\n+\trtx_insn *.\n+\t(ubsan_expand_si_overflow_mul_check): Likewise for locals\n+\t\"done_label\", \"do_error\", \"large_op0\", \"small_op0_large_op1\",\n+\t\"one_small_one_large\", \"both_ops_large\", \"after_hipart_neg\",\n+\t\"after_lopart_neg\", \"do_overflow\", \"hipart_different\"  to\n+\trtx_code_label * and local  \"last\" to rtx_insn *.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* init-regs.c (initialize_uninitialized_regs): Strengthen locals"}, {"sha": "c2a44b65f1d6a882ae8d7c55de25d8a50d855974", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da66454436b819c50d0901a4da66aac3181f11de/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da66454436b819c50d0901a4da66aac3181f11de/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=da66454436b819c50d0901a4da66aac3181f11de", "patch": "@@ -197,7 +197,8 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n {\n   rtx res, op0, op1;\n   tree lhs, fn, arg0, arg1;\n-  rtx done_label, do_error, target = NULL_RTX;\n+  rtx_code_label *done_label, *do_error;\n+  rtx target = NULL_RTX;\n \n   lhs = gimple_call_lhs (stmt);\n   arg0 = gimple_call_arg (stmt, 0);\n@@ -217,7 +218,7 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n   if (icode != CODE_FOR_nothing)\n     {\n       struct expand_operand ops[4];\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n \n       res = gen_reg_rtx (mode);\n       create_output_operand (&ops[0], res, mode);\n@@ -243,7 +244,7 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n \n   if (icode == CODE_FOR_nothing)\n     {\n-      rtx sub_check = gen_label_rtx ();\n+      rtx_code_label *sub_check = gen_label_rtx ();\n       int pos_neg = 3;\n \n       /* Compute the operation.  On RTL level, the addition is always\n@@ -345,7 +346,8 @@ ubsan_expand_si_overflow_neg_check (gimple stmt)\n {\n   rtx res, op1;\n   tree lhs, fn, arg1;\n-  rtx done_label, do_error, target = NULL_RTX;\n+  rtx_code_label *done_label, *do_error;\n+  rtx target = NULL_RTX;\n \n   lhs = gimple_call_lhs (stmt);\n   arg1 = gimple_call_arg (stmt, 1);\n@@ -363,7 +365,7 @@ ubsan_expand_si_overflow_neg_check (gimple stmt)\n   if (icode != CODE_FOR_nothing)\n     {\n       struct expand_operand ops[3];\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n \n       res = gen_reg_rtx (mode);\n       create_output_operand (&ops[0], res, mode);\n@@ -421,7 +423,8 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n {\n   rtx res, op0, op1;\n   tree lhs, fn, arg0, arg1;\n-  rtx done_label, do_error, target = NULL_RTX;\n+  rtx_code_label *done_label, *do_error;\n+  rtx target = NULL_RTX;\n \n   lhs = gimple_call_lhs (stmt);\n   arg0 = gimple_call_arg (stmt, 0);\n@@ -441,7 +444,7 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n   if (icode != CODE_FOR_nothing)\n     {\n       struct expand_operand ops[4];\n-      rtx last = get_last_insn ();\n+      rtx_insn *last = get_last_insn ();\n \n       res = gen_reg_rtx (mode);\n       create_output_operand (&ops[0], res, mode);\n@@ -499,14 +502,14 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n       else if (hmode != BLKmode\n \t       && 2 * GET_MODE_PRECISION (hmode) == GET_MODE_PRECISION (mode))\n \t{\n-\t  rtx large_op0 = gen_label_rtx ();\n-\t  rtx small_op0_large_op1 = gen_label_rtx ();\n-\t  rtx one_small_one_large = gen_label_rtx ();\n-\t  rtx both_ops_large = gen_label_rtx ();\n-\t  rtx after_hipart_neg = gen_label_rtx ();\n-\t  rtx after_lopart_neg = gen_label_rtx ();\n-\t  rtx do_overflow = gen_label_rtx ();\n-\t  rtx hipart_different = gen_label_rtx ();\n+\t  rtx_code_label *large_op0 = gen_label_rtx ();\n+\t  rtx_code_label *small_op0_large_op1 = gen_label_rtx ();\n+\t  rtx_code_label *one_small_one_large = gen_label_rtx ();\n+\t  rtx_code_label *both_ops_large = gen_label_rtx ();\n+\t  rtx_code_label *after_hipart_neg = gen_label_rtx ();\n+\t  rtx_code_label *after_lopart_neg = gen_label_rtx ();\n+\t  rtx_code_label *do_overflow = gen_label_rtx ();\n+\t  rtx_code_label *hipart_different = gen_label_rtx ();\n \n \t  unsigned int hprec = GET_MODE_PRECISION (hmode);\n \t  rtx hipart0 = expand_shift (RSHIFT_EXPR, mode, op0, hprec,"}]}