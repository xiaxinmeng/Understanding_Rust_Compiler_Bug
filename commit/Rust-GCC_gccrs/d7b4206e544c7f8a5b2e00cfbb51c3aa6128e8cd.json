{"sha": "d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiNDIwNmU1NDRjN2Y4YTViMmUwMGNmYmI1MWMzYWE2MTI4ZThjZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T23:51:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T23:51:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r508", "tree": {"sha": "6dc38710a2e8b65c62ac0d07e45ed9b94c1278ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc38710a2e8b65c62ac0d07e45ed9b94c1278ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd/comments", "author": null, "committer": null, "parents": [{"sha": "e87b4f3f4efbc1a4459a980e2c71f74e678e59c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87b4f3f4efbc1a4459a980e2c71f74e678e59c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87b4f3f4efbc1a4459a980e2c71f74e678e59c8"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "413e8eaf343c7f0cb02acebf41d0d2fa9c067dcc", "filename": "gcc/config/m68k/next.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd/gcc%2Fconfig%2Fm68k%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd/gcc%2Fconfig%2Fm68k%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext.h?ref=d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "patch": "@@ -59,12 +59,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n      } while (0)\n \n /* Wrap new method names in quotes so the assembler doesn't gag.\n-   Make Objective-C internal symbols local. */\n+   Make Objective-C internal symbols local.  */\n \n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n   do { if (NAME[0] == '+' || NAME[0] == '-') fprintf (FILE, \"\\\"%s\\\"\", NAME); \\\n        else if (!strncmp (NAME, \"_OBJC_\", 6)) fprintf (FILE, \"L%s\", NAME);   \\\n+       else if (!strncmp (NAME, \".objc_class_name_\", 17))\t\t\\\n+\t fprintf (FILE, \"%s\", NAME);\t\t\t\t\t\\\n        else fprintf (FILE, \"_%s\", NAME); } while (0)\n \n #undef STACK_BOUNDARY\n@@ -184,6 +186,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    ? fprintf (FILE, \"#0r%s99e999\", ((VALUE) > 0 ? \"\" : \"-\")) \\\n    : fprintf (FILE, \"#0r%.20g\", (VALUE)))\n \n+#if 0 /* This is for system verson 3.0, which isn't out yet.  */\n #define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n   do { constructor_section ();\t\t\t\\\n        ASM_OUTPUT_ALIGN (FILE, 1);\t\t\\\n@@ -197,6 +200,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n        fprintf (FILE, \"\\t.long \");\t\t\\\n        assemble_name (FILE, NAME);\t\t\\\n        fprintf (FILE, \"\\n\"); } while (0)\n+#endif\n \n /* How to parse #pragma's */\n \n@@ -412,19 +416,19 @@ SECTION_FUNCTION (objc_module_info_section,\t\\\n #undef CASE_VECTOR_PC_RELATIVE\n \n /* Don't treat addresses involving labels differently from symbol names.\n-   Previsouly, references to labels generated pc-relative addressing modes\n+   Previously, references to labels generated pc-relative addressing modes\n    while references to symbol names generated absolute addressing modes.  */\n \n #undef GO_IF_INDEXABLE_BASE(X, ADDR)\n #define GO_IF_INDEXABLE_BASE(X, ADDR)\t\\\n { if (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X)) goto ADDR; }\n \n-#define ALIGN_ASM_OP\t\t\"\\t.align\"\n+#define ALIGN_ASM_OP\t\t\".align\"\n \n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"%s %d\\n\", ALIGN_ASM_OP, (LOG))\n+    fprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG))\n \n /* The maximum alignment which the object file format can support.\n    For NeXT's Mach-O format, this is 2^15.  */"}, {"sha": "d30c9999a877da3624040719c497096406b36a94", "filename": "gcc/config/m68k/t-next", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd/gcc%2Fconfig%2Fm68k%2Ft-next", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd/gcc%2Fconfig%2Fm68k%2Ft-next", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-next?ref=d7b4206e544c7f8a5b2e00cfbb51c3aa6128e8cd", "patch": "@@ -1,2 +1,11 @@\n # libgcc1.c is not needed, since the standard library has these functions.\n LIBGCC1=\n+\n+# Use collect2 to link, until system version 3.0.\n+\n+EXTRA_PROGRAMS = ld\n+\n+ld : collect2\n+\trm -f ld\n+\tln collect2 ld\n+"}]}