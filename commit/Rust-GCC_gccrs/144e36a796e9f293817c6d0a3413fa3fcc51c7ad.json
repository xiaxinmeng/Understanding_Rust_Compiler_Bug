{"sha": "144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0ZTM2YTc5NmU5ZjI5MzgxN2M2ZDBhMzQxM2ZhM2ZjYzUxYzdhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-14T09:10:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-14T09:10:45Z"}, "message": "re PR sanitizer/81066 (sanitizer_stoptheworld_linux_libcdep.cc:276:22: error: aggregate \u2018sigaltstack handler_stack\u2019 has incomplete type and cannot be defined)\n\n\tPR sanitizer/81066\n\t* sanitizer_common/sanitizer_linux.h: Cherry-pick upstream r307969.\n\t* sanitizer_common/sanitizer_linux.cc: Likewise.\n\t* sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc: Likewise.\n\t* tsan/tsan_platform_linux.cc: Likewise.\n\nFrom-SVN: r250200", "tree": {"sha": "d07027f1c6c8e27b0786ba2cb884ab409a4dc9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07027f1c6c8e27b0786ba2cb884ab409a4dc9d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5cd5bc7132cd6d32f0e370d91ee6b380389c82"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "192318390d354a18c6b2d3fee3e3969af43bb352", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "patch": "@@ -1,3 +1,11 @@\n+2017-07-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/81066\n+\t* sanitizer_common/sanitizer_linux.h: Cherry-pick upstream r307969.\n+\t* sanitizer_common/sanitizer_linux.cc: Likewise.\n+\t* sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc: Likewise.\n+\t* tsan/tsan_platform_linux.cc: Likewise.\n+\n 2017-04-06  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/80166"}, {"sha": "5b6f18602e7dc0b0ba21ee7bb64af9415d87bbb5", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc?ref=144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "patch": "@@ -605,8 +605,7 @@ uptr internal_prctl(int option, uptr arg2, uptr arg3, uptr arg4, uptr arg5) {\n }\n #endif\n \n-uptr internal_sigaltstack(const struct sigaltstack *ss,\n-                         struct sigaltstack *oss) {\n+uptr internal_sigaltstack(const void *ss, void *oss) {\n   return internal_syscall(SYSCALL(sigaltstack), (uptr)ss, (uptr)oss);\n }\n "}, {"sha": "a42df576405279edb299485ae8a293444a8937fb", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.h?ref=144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "patch": "@@ -19,7 +19,6 @@\n #include \"sanitizer_platform_limits_posix.h\"\n \n struct link_map;  // Opaque type returned by dlopen().\n-struct sigaltstack;\n \n namespace __sanitizer {\n // Dirent structure for getdents(). Note that this structure is different from\n@@ -28,8 +27,7 @@ struct linux_dirent;\n \n // Syscall wrappers.\n uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);\n-uptr internal_sigaltstack(const struct sigaltstack* ss,\n-                          struct sigaltstack* oss);\n+uptr internal_sigaltstack(const void* ss, void* oss);\n uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,\n     __sanitizer_sigset_t *oldset);\n "}, {"sha": "234e8c652c6758ea3ac6d4acad745bf882a378df", "filename": "libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stoptheworld_linux_libcdep.cc?ref=144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "patch": "@@ -273,7 +273,7 @@ static int TracerThread(void* argument) {\n \n   // Alternate stack for signal handling.\n   InternalScopedBuffer<char> handler_stack_memory(kHandlerStackSize);\n-  struct sigaltstack handler_stack;\n+  stack_t handler_stack;\n   internal_memset(&handler_stack, 0, sizeof(handler_stack));\n   handler_stack.ss_sp = handler_stack_memory.data();\n   handler_stack.ss_size = kHandlerStackSize;"}, {"sha": "6f972ab0dd649eaacd1847c1df196d2469149a2c", "filename": "libsanitizer/tsan/tsan_platform_linux.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144e36a796e9f293817c6d0a3413fa3fcc51c7ad/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_platform_linux.cc?ref=144e36a796e9f293817c6d0a3413fa3fcc51c7ad", "patch": "@@ -287,7 +287,7 @@ void InitializePlatform() {\n int ExtractResolvFDs(void *state, int *fds, int nfd) {\n #if SANITIZER_LINUX && !SANITIZER_ANDROID\n   int cnt = 0;\n-  __res_state *statp = (__res_state*)state;\n+  struct __res_state *statp = (struct __res_state*)state;\n   for (int i = 0; i < MAXNS && cnt < nfd; i++) {\n     if (statp->_u._ext.nsaddrs[i] && statp->_u._ext.nssocks[i] != -1)\n       fds[cnt++] = statp->_u._ext.nssocks[i];"}]}