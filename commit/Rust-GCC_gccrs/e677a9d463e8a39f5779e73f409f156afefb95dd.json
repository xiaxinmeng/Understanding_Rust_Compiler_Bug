{"sha": "e677a9d463e8a39f5779e73f409f156afefb95dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3N2E5ZDQ2M2U4YTM5ZjU3NzllNzNmNDA5ZjE1NmFmZWZiOTVkZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-06-09T17:53:24Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-06-09T17:53:24Z"}, "message": "gcc-plugin.h: Move decls to plugin.h and include it.\n\n\n\t* gcc-plugin.h: Move decls to plugin.h and include it.\n\t* plugin.h: Relocate decls from gcc-plugin.h\n\t* ggc-page.c: Include required header files.\n\t* passes.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\nFrom-SVN: r224293", "tree": {"sha": "e1ddbb5eaad4595c4f1c81c3c18d199bef8e441b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ddbb5eaad4595c4f1c81c3c18d199bef8e441b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e677a9d463e8a39f5779e73f409f156afefb95dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e677a9d463e8a39f5779e73f409f156afefb95dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e677a9d463e8a39f5779e73f409f156afefb95dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e677a9d463e8a39f5779e73f409f156afefb95dd/comments", "author": null, "committer": null, "parents": [{"sha": "34f42d7bf400ba0facaa38ee9fee21b639d28146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f42d7bf400ba0facaa38ee9fee21b639d28146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f42d7bf400ba0facaa38ee9fee21b639d28146"}], "stats": {"total": 286, "additions": 151, "deletions": 135}, "files": [{"sha": "09fc9311bd57e43f98f50ccac9558263182df0a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -1,3 +1,11 @@\n+2015-06-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc-plugin.h: Move decls to plugin.h and include it.\n+\t* plugin.h: Relocate decls from gcc-plugin.h\n+\t* ggc-page.c: Include required header files.\n+\t* passes.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\n 2015-06-09  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-stdarg.c (expand_ifn_va_arg_1): Handle location."}, {"sha": "3aadf28dd314690d54aaf777fc5adbd51a8d178c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -176,6 +176,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n #include \"function.h\"\n #include \"basic-block.h\"\n+#include \"dominance.h\"\n+#include \"cfgcleanup.h\"\n+#include \"cfg.h\"\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\"\n #include \"gimple-fold.h\""}, {"sha": "bad508e0931ed09e8e11f48ae9fabdad8746c6b8", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 1, "deletions": 134, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -27,7 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"highlev-plugin-common.h\"\n #include \"tm.h\"\n #include \"hard-reg-set.h\"\n #include \"input.h\"\n@@ -49,138 +48,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-core.h\"\n #include \"fold-const.h\"\n #include \"tree-check.h\"\n-\n-/* Event names.  */\n-enum plugin_event\n-{\n-# define DEFEVENT(NAME) NAME,\n-# include \"plugin.def\"\n-# undef DEFEVENT\n-  PLUGIN_EVENT_FIRST_DYNAMIC\n-};\n-\n-/* All globals declared here have C linkage to reduce link compatibility\n-   issues with implementation language choice and mangling.  */\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-extern const char **plugin_event_name;\n-\n-struct plugin_argument\n-{\n-  char *key;    /* key of the argument.  */\n-  char *value;  /* value is optional and can be NULL.  */\n-};\n-\n-/* Additional information about the plugin. Used by --help and --version. */\n-\n-struct plugin_info\n-{\n-  const char *version;\n-  const char *help;\n-};\n-\n-/* Represents the gcc version. Used to avoid using an incompatible plugin. */\n-\n-struct plugin_gcc_version\n-{\n-  const char *basever;\n-  const char *datestamp;\n-  const char *devphase;\n-  const char *revision;\n-  const char *configuration_arguments;\n-};\n-\n-/* Object that keeps track of the plugin name and its arguments. */\n-struct plugin_name_args\n-{\n-  char *base_name;              /* Short name of the plugin (filename without\n-                                   .so suffix). */\n-  const char *full_name;        /* Path to the plugin as specified with\n-                                   -fplugin=. */\n-  int argc;                     /* Number of arguments specified with\n-                                   -fplugin-arg-... */\n-  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */\n-  const char *version;          /* Version string provided by plugin. */\n-  const char *help;             /* Help string provided by plugin. */\n-};\n-\n-/* The default version check. Compares every field in VERSION. */\n-\n-extern bool plugin_default_version_check (struct plugin_gcc_version *,\n-\t\t\t\t\t  struct plugin_gcc_version *);\n-\n-/* Function type for the plugin initialization routine. Each plugin module\n-   should define this as an externally-visible function with name\n-   \"plugin_init.\"\n-\n-   PLUGIN_INFO - plugin invocation information.\n-   VERSION     - the plugin_gcc_version symbol of GCC.\n-\n-   Returns 0 if initialization finishes successfully.  */\n-\n-typedef int (*plugin_init_func) (struct plugin_name_args *plugin_info,\n-                                 struct plugin_gcc_version *version);\n-\n-/* Declaration for \"plugin_init\" function so that it doesn't need to be\n-   duplicated in every plugin.  */\n-extern int plugin_init (struct plugin_name_args *plugin_info,\n-                        struct plugin_gcc_version *version);\n-\n-/* Function type for a plugin callback routine.\n-\n-   GCC_DATA  - event-specific data provided by GCC\n-   USER_DATA - plugin-specific data provided by the plugin  */\n-\n-typedef void (*plugin_callback_func) (void *gcc_data, void *user_data);\n-\n-/* Called from the plugin's initialization code. Register a single callback.\n-   This function can be called multiple times.\n-\n-   PLUGIN_NAME - display name for this plugin\n-   EVENT       - which event the callback is for\n-   CALLBACK    - the callback to be called at the event\n-   USER_DATA   - plugin-provided data.\n-*/\n-\n-/* Number of event ids / names registered so far.  */\n-\n-extern int get_event_last (void);\n-\n-int get_named_event_id (const char *name, enum insert_option insert);\n-\n-/* This is also called without a callback routine for the\n-   PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO and PLUGIN_REGISTER_GGC_ROOTS\n-   pseudo-events, with a specific user_data.\n-  */\n-\n-extern void register_callback (const char *plugin_name,\n-\t\t\t       int event,\n-                               plugin_callback_func callback,\n-                               void *user_data);\n-\n-extern int unregister_callback (const char *plugin_name, int event);\n-\n-\n-/* Retrieve the plugin directory name, as returned by the\n-   -fprint-file-name=plugin argument to the gcc program, which is the\n-   -iplugindir program argument to cc1.  */\n-extern const char* default_plugin_dir_name (void);\n-\n-#ifdef __cplusplus\n-}\n-#endif\n-\n-/* In case the C++ compiler does name mangling for globals, declare\n-   plugin_is_GPL_compatible extern \"C\" so that a later definition\n-   in a plugin file will have this linkage.  */\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-extern int plugin_is_GPL_compatible;\n-#ifdef __cplusplus\n-}\n-#endif\n+#include \"plugin.h\"\n \n #endif /* GCC_PLUGIN_H */"}, {"sha": "f5f09733833b0158d14a6e207d54592030af3f05", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"cfgloop.h\"\n #include \"plugin.h\"\n+#include \"predict.h\"\n #include \"basic-block.h\"\n \n /* Prefer MAP_ANON(YMOUS) to /dev/zero, since we don't need to keep a"}, {"sha": "d3ffe33540b886cf0a5f13c0000a72eb192b04b9", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -94,6 +94,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\" /* for dump_function_header */\n #include \"context.h\"\n #include \"pass_manager.h\"\n+#include \"dominance.h\"\n+#include \"cfg.h\"\n+#include \"cfgrtl.h\"\n #include \"tree-ssa-live.h\"  /* For remove_unused_locals.  */\n #include \"tree-cfgcleanup.h\"\n "}, {"sha": "d8a2a72a18cd07099dc69b30a60227d59e28e6bb", "filename": "gcc/plugin.h", "status": "modified", "additions": 135, "deletions": 1, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fplugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e677a9d463e8a39f5779e73f409f156afefb95dd/gcc%2Fplugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.h?ref=e677a9d463e8a39f5779e73f409f156afefb95dd", "patch": "@@ -20,7 +20,141 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef PLUGIN_H\n #define PLUGIN_H\n \n-#include \"gcc-plugin.h\"\n+#include \"highlev-plugin-common.h\"\n+\n+/* Event names.  */\n+enum plugin_event\n+{\n+# define DEFEVENT(NAME) NAME,\n+# include \"plugin.def\"\n+# undef DEFEVENT\n+  PLUGIN_EVENT_FIRST_DYNAMIC\n+};\n+\n+/* All globals declared here have C linkage to reduce link compatibility\n+   issues with implementation language choice and mangling.  */\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern const char **plugin_event_name;\n+\n+struct plugin_argument\n+{\n+  char *key;    /* key of the argument.  */\n+  char *value;  /* value is optional and can be NULL.  */\n+};\n+\n+/* Additional information about the plugin. Used by --help and --version. */\n+\n+struct plugin_info\n+{\n+  const char *version;\n+  const char *help;\n+};\n+\n+/* Represents the gcc version. Used to avoid using an incompatible plugin. */\n+\n+struct plugin_gcc_version\n+{\n+  const char *basever;\n+  const char *datestamp;\n+  const char *devphase;\n+  const char *revision;\n+  const char *configuration_arguments;\n+};\n+\n+/* Object that keeps track of the plugin name and its arguments. */\n+struct plugin_name_args\n+{\n+  char *base_name;              /* Short name of the plugin (filename without\n+                                   .so suffix). */\n+  const char *full_name;        /* Path to the plugin as specified with\n+                                   -fplugin=. */\n+  int argc;                     /* Number of arguments specified with\n+                                   -fplugin-arg-... */\n+  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */\n+  const char *version;          /* Version string provided by plugin. */\n+  const char *help;             /* Help string provided by plugin. */\n+};\n+\n+/* The default version check. Compares every field in VERSION. */\n+\n+extern bool plugin_default_version_check (struct plugin_gcc_version *,\n+\t\t\t\t\t  struct plugin_gcc_version *);\n+\n+/* Function type for the plugin initialization routine. Each plugin module\n+   should define this as an externally-visible function with name\n+   \"plugin_init.\"\n+\n+   PLUGIN_INFO - plugin invocation information.\n+   VERSION     - the plugin_gcc_version symbol of GCC.\n+\n+   Returns 0 if initialization finishes successfully.  */\n+\n+typedef int (*plugin_init_func) (struct plugin_name_args *plugin_info,\n+                                 struct plugin_gcc_version *version);\n+\n+/* Declaration for \"plugin_init\" function so that it doesn't need to be\n+   duplicated in every plugin.  */\n+extern int plugin_init (struct plugin_name_args *plugin_info,\n+                        struct plugin_gcc_version *version);\n+\n+/* Function type for a plugin callback routine.\n+\n+   GCC_DATA  - event-specific data provided by GCC\n+   USER_DATA - plugin-specific data provided by the plugin  */\n+\n+typedef void (*plugin_callback_func) (void *gcc_data, void *user_data);\n+\n+/* Called from the plugin's initialization code. Register a single callback.\n+   This function can be called multiple times.\n+\n+   PLUGIN_NAME - display name for this plugin\n+   EVENT       - which event the callback is for\n+   CALLBACK    - the callback to be called at the event\n+   USER_DATA   - plugin-provided data.\n+*/\n+\n+/* Number of event ids / names registered so far.  */\n+\n+extern int get_event_last (void);\n+\n+int get_named_event_id (const char *name, enum insert_option insert);\n+\n+/* This is also called without a callback routine for the\n+   PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO and PLUGIN_REGISTER_GGC_ROOTS\n+   pseudo-events, with a specific user_data.\n+  */\n+\n+extern void register_callback (const char *plugin_name,\n+\t\t\t       int event,\n+                               plugin_callback_func callback,\n+                               void *user_data);\n+\n+extern int unregister_callback (const char *plugin_name, int event);\n+\n+\n+/* Retrieve the plugin directory name, as returned by the\n+   -fprint-file-name=plugin argument to the gcc program, which is the\n+   -iplugindir program argument to cc1.  */\n+extern const char* default_plugin_dir_name (void);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* In case the C++ compiler does name mangling for globals, declare\n+   plugin_is_GPL_compatible extern \"C\" so that a later definition\n+   in a plugin file will have this linkage.  */\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern int plugin_is_GPL_compatible;\n+#ifdef __cplusplus\n+}\n+#endif\n+\n \n struct attribute_spec;\n struct scoped_attributes;"}]}