{"sha": "ad665deeafd31238b537139385e1e80b40c10e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2NjVkZWVhZmQzMTIzOGI1MzcxMzkzODVlMWU4MGI0MGMxMGUwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-23T07:57:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-23T09:53:15Z"}, "message": "tree-optimization/79334 - avoid PRE of possibly trapping array-ref\n\nThis replicates tree-eh.c in_array_bound_p into VNs\nvn_reference_may_trap to fix hoisting of a possibly trapping\nARRAY_REF across a call that might not return.\n\n2021-08-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79334\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Record\n\ta type also for COMPONENT_REFs.\n\t(vn_reference_may_trap): Check ARRAY_REF with constant index\n\tagainst the array domain.\n\n\t* gcc.dg/torture/pr79334-0.c: New testcase.\n\t* gcc.dg/torture/pr79334-1.c: Likewise.", "tree": {"sha": "5b0c5616fb3711b3393e31a5287aa248f657762e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0c5616fb3711b3393e31a5287aa248f657762e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad665deeafd31238b537139385e1e80b40c10e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad665deeafd31238b537139385e1e80b40c10e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad665deeafd31238b537139385e1e80b40c10e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad665deeafd31238b537139385e1e80b40c10e0c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c7ab5c487f392e04907ce8f22eb454b8d3c4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c7ab5c487f392e04907ce8f22eb454b8d3c4ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c7ab5c487f392e04907ce8f22eb454b8d3c4ff"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "fa45a6d77d066bcf4743bb99c3fc1731d0cabede", "filename": "gcc/testsuite/gcc.dg/torture/pr79334-0.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-0.c?ref=ad665deeafd31238b537139385e1e80b40c10e0c", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-additional-sources \"pr79334-1.c\" } */\n+\n+extern int d[][8];\n+\n+static void __attribute__((noinline))\n+func_that_exits (int flag)\n+{\n+  if (!flag)\n+    __builtin_exit (0);\n+}\n+\n+int main ()\n+{\n+  int e = 0;\n+  while (1)\n+    {\n+      func_that_exits (e);\n+      /* We do not know whether d[1024][0] will trap.  */\n+      e = d[1024][0];\n+    }\n+  return 0;\n+}"}, {"sha": "b1c8a27753eded0bfb22993fb3acf6e9c6304708", "filename": "gcc/testsuite/gcc.dg/torture/pr79334-1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr79334-1.c?ref=ad665deeafd31238b537139385e1e80b40c10e0c", "patch": "@@ -0,0 +1 @@\n+int d[1][8];"}, {"sha": "bf87cee38573064e552ec04e4fc1b3ec37f0cc02", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad665deeafd31238b537139385e1e80b40c10e0c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ad665deeafd31238b537139385e1e80b40c10e0c", "patch": "@@ -914,9 +914,8 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t  break;\n \tcase COMPONENT_REF:\n \t  /* The field decl is enough to unambiguously specify the field,\n-\t     a matching type is not necessary and a mismatching type\n-\t     is always a spurious difference.  */\n-\t  temp.type = NULL_TREE;\n+\t     so use its type here.  */\n+\t  temp.type = TREE_TYPE (TREE_OPERAND (ref, 1));\n \t  temp.op0 = TREE_OPERAND (ref, 1);\n \t  temp.op1 = TREE_OPERAND (ref, 2);\n \t  temp.reverse = (AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (ref, 0)))\n@@ -5873,10 +5872,33 @@ vn_reference_may_trap (vn_reference_t ref)\n \t    return true;\n \t  break;\n \tcase ARRAY_RANGE_REF:\n-\tcase ARRAY_REF:\n \t  if (TREE_CODE (op->op0) == SSA_NAME)\n \t    return true;\n \t  break;\n+\tcase ARRAY_REF:\n+\t  {\n+\t    if (TREE_CODE (op->op0) != INTEGER_CST)\n+\t      return true;\n+\n+\t    /* !in_array_bounds   */\n+\t    tree domain_type = TYPE_DOMAIN (ref->operands[i+1].type);\n+\t    if (!domain_type)\n+\t      return true;\n+\n+\t    tree min = op->op1;\n+\t    tree max = TYPE_MAX_VALUE (domain_type);\n+\t    if (!min\n+\t\t|| !max\n+\t\t|| TREE_CODE (min) != INTEGER_CST\n+\t\t|| TREE_CODE (max) != INTEGER_CST)\n+\t      return true;\n+\n+\t    if (tree_int_cst_lt (op->op0, min)\n+\t\t|| tree_int_cst_lt (max, op->op0))\n+\t      return true;\n+\n+\t    break;\n+\t  }\n \tcase MEM_REF:\n \t  /* Nothing interesting in itself, the base is separate.  */\n \t  break;"}]}