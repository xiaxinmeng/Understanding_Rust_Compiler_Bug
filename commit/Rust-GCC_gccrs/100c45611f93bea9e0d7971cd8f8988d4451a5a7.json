{"sha": "100c45611f93bea9e0d7971cd8f8988d4451a5a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwYzQ1NjExZjkzYmVhOWUwZDc5NzFjZDhmODk4OGQ0NDUxYTVhNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-11T06:15:37Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-11T06:15:37Z"}, "message": "rs6000.c (altivec_init_builtins): Handle __builtin_altivec_abs*.\n\n2002-02-06  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (altivec_init_builtins): Handle\n        __builtin_altivec_abs*.\n        (bdesc_abs): New.\n\n        * config/rs6000/rs6000.h (rs6000_builtins): Add\n        ALTIVEC_BUILTIN_ABS*.\n\n        * config/rs6000/altivec.h: Use const char for builtins expecting\n        literals.\n        (vec_abs): New versions for C and C++.\n        (vec_abss): Same.\n\nFrom-SVN: r49671", "tree": {"sha": "ca24709a38249b10a4215ce4f75bb18370e39155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca24709a38249b10a4215ce4f75bb18370e39155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100c45611f93bea9e0d7971cd8f8988d4451a5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100c45611f93bea9e0d7971cd8f8988d4451a5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100c45611f93bea9e0d7971cd8f8988d4451a5a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100c45611f93bea9e0d7971cd8f8988d4451a5a7/comments", "author": null, "committer": null, "parents": [{"sha": "cddd8b72ad0e84a6ede84aed0c96d62871ef1f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddd8b72ad0e84a6ede84aed0c96d62871ef1f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddd8b72ad0e84a6ede84aed0c96d62871ef1f20"}], "stats": {"total": 361, "additions": 301, "deletions": 60}, "files": [{"sha": "a25206d60f61e90defd6ebc8a63906ff5324e8a2", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 124, "deletions": 58, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=100c45611f93bea9e0d7971cd8f8988d4451a5a7", "patch": "@@ -70,6 +70,52 @@ extern int __altivec_link_error_invalid_argument ();\n \n #ifdef __cplusplus\n \n+/* vec_abs */\n+\n+inline vector signed char\n+vec_abs (vector signed char a1)\n+{\n+  return __builtin_altivec_abs_v16qi (a1);\n+}\n+\n+inline vector signed short\n+vec_abs (vector signed short a1)\n+{\n+  return __builtin_altivec_abs_v8hi (a1);\n+}\n+\n+inline vector signed int\n+vec_abs (vector signed int a1)\n+{\n+  return __builtin_altivec_abs_v4si (a1);\n+}\n+\n+inline vector float\n+vec_abs (vector float a1)\n+{\n+  return __builtin_altivec_abs_v4sf (a1);\n+}\n+\n+/* vec_abss */\n+\n+inline vector signed char\n+vec_abss (vector signed char a1)\n+{\n+  return __builtin_altivec_abss_v16qi (a1);\n+}\n+\n+inline vector signed short\n+vec_abss (vector signed short a1)\n+{\n+  return __builtin_altivec_abss_v8hi (a1);\n+}\n+\n+inline vector signed int\n+vec_abss (vector signed int a1)\n+{\n+  return __builtin_altivec_abss_v4si (a1);\n+}\n+\n /* vec_add */\n \n inline vector signed char\n@@ -621,39 +667,39 @@ vec_cmplt (vector float a1, vector float a2)\n /* vec_ctf */\n \n inline vector float\n-vec_ctf (vector unsigned int a1, int a2)\n+vec_ctf (vector unsigned int a1, const char a2)\n {\n-  return (vector float) __builtin_altivec_vcfux ((vector signed int) a1, (const char) a2);\n+  return (vector float) __builtin_altivec_vcfux ((vector signed int) a1, a2);\n }\n \n inline vector float\n-vec_ctf (vector signed int a1, int a2)\n+vec_ctf (vector signed int a1, const char a2)\n {\n-  return (vector float) __builtin_altivec_vcfsx ((vector signed int) a1, (const char) a2);\n+  return (vector float) __builtin_altivec_vcfsx ((vector signed int) a1, a2);\n }\n \n /* vec_cts */\n \n inline vector signed int\n-vec_cts (vector float a1, int a2)\n+vec_cts (vector float a1, const char a2)\n {\n-  return (vector signed int) __builtin_altivec_vctsxs ((vector float) a1, (const char) a2);\n+  return (vector signed int) __builtin_altivec_vctsxs ((vector float) a1, a2);\n }\n \n /* vec_ctu */\n \n inline vector unsigned int\n-vec_ctu (vector float a1, int a2)\n+vec_ctu (vector float a1, const char a2)\n {\n-  return (vector unsigned int) __builtin_altivec_vctuxs ((vector float) a1, (const char) a2);\n+  return (vector unsigned int) __builtin_altivec_vctuxs ((vector float) a1, a2);\n }\n \n /* vec_dss */\n \n inline void\n-vec_dss (int a1)\n+vec_dss (const char a1)\n {\n-  __builtin_altivec_dss ((const char) a1);\n+  __builtin_altivec_dss (a1);\n }\n \n /* vec_dssall */\n@@ -667,33 +713,33 @@ vec_dssall ()\n /* vec_dst */\n \n inline void\n-vec_dst (void *a1, int a2, int a3)\n+vec_dst (void *a1, int a2, const char a3)\n {\n-  __builtin_altivec_dst ((void *) a1, a2, (const char) a3);\n+  __builtin_altivec_dst ((void *) a1, a2, a3);\n }\n \n /* vec_dstst */\n \n inline void\n-vec_dstst (void *a1, int a2, int a3)\n+vec_dstst (void *a1, int a2, const char a3)\n {\n-  __builtin_altivec_dstst ((void *) a1, a2, (const char) a3);\n+  __builtin_altivec_dstst ((void *) a1, a2, a3);\n }\n \n /* vec_dststt */\n \n inline void\n-vec_dststt (void *a1, int a2, int a3)\n+vec_dststt (void *a1, int a2, const char a3)\n {\n-  __builtin_altivec_dststt ((void *) a1, a2, (const char) a3);\n+  __builtin_altivec_dststt ((void *) a1, a2, a3);\n }\n \n /* vec_dstt */\n \n inline void\n-vec_dstt (void *a1, int a2, int a3)\n+vec_dstt (void *a1, int a2, const char a3)\n {\n-  __builtin_altivec_dstt ((void *) a1, a2, (const char) a3);\n+  __builtin_altivec_dstt ((void *) a1, a2, a3);\n }\n \n /* vec_expte */\n@@ -1923,45 +1969,45 @@ vec_sl (vector unsigned int a1, vector unsigned int a2)\n /* vec_sld */\n \n inline vector float\n-vec_sld (vector float a1, vector float a2, int a3)\n+vec_sld (vector float a1, vector float a2, const char a3)\n {\n-  return (vector float) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector float) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector signed int\n-vec_sld (vector signed int a1, vector signed int a2, int a3)\n+vec_sld (vector signed int a1, vector signed int a2, const char a3)\n {\n-  return (vector signed int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector signed int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector unsigned int\n-vec_sld (vector unsigned int a1, vector unsigned int a2, int a3)\n+vec_sld (vector unsigned int a1, vector unsigned int a2, const char a3)\n {\n-  return (vector unsigned int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector unsigned int) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector signed short\n-vec_sld (vector signed short a1, vector signed short a2, int a3)\n+vec_sld (vector signed short a1, vector signed short a2, const char a3)\n {\n-  return (vector signed short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector signed short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector unsigned short\n-vec_sld (vector unsigned short a1, vector unsigned short a2, int a3)\n+vec_sld (vector unsigned short a1, vector unsigned short a2, const char a3)\n {\n-  return (vector unsigned short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector unsigned short) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector signed char\n-vec_sld (vector signed char a1, vector signed char a2, int a3)\n+vec_sld (vector signed char a1, vector signed char a2, const char a3)\n {\n-  return (vector signed char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector signed char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n inline vector unsigned char\n-vec_sld (vector unsigned char a1, vector unsigned char a2, int a3)\n+vec_sld (vector unsigned char a1, vector unsigned char a2, const char a3)\n {\n-  return (vector unsigned char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, (const char) a3);\n+  return (vector unsigned char) __builtin_altivec_vsldoi_4si ((vector signed int) a1, (vector signed int) a2, a3);\n }\n \n /* vec_sll */\n@@ -2163,93 +2209,93 @@ vec_slo (vector unsigned char a1, vector unsigned char a2)\n /* vec_splat */\n \n inline vector signed char\n-vec_splat (vector signed char a1, int a2)\n+vec_splat (vector signed char a1, const char a2)\n {\n-  return (vector signed char) __builtin_altivec_vspltb ((vector signed char) a1, (const char) a2);\n+  return (vector signed char) __builtin_altivec_vspltb ((vector signed char) a1,  a2);\n }\n \n inline vector unsigned char\n-vec_splat (vector unsigned char a1, int a2)\n+vec_splat (vector unsigned char a1, const char a2)\n {\n-  return (vector unsigned char) __builtin_altivec_vspltb ((vector signed char) a1, (const char) a2);\n+  return (vector unsigned char) __builtin_altivec_vspltb ((vector signed char) a1,  a2);\n }\n \n inline vector signed short\n-vec_splat (vector signed short a1, int a2)\n+vec_splat (vector signed short a1, const char a2)\n {\n-  return (vector signed short) __builtin_altivec_vsplth ((vector signed short) a1, (const char) a2);\n+  return (vector signed short) __builtin_altivec_vsplth ((vector signed short) a1,  a2);\n }\n \n inline vector unsigned short\n-vec_splat (vector unsigned short a1, int a2)\n+vec_splat (vector unsigned short a1, const char a2)\n {\n-  return (vector unsigned short) __builtin_altivec_vsplth ((vector signed short) a1, (const char) a2);\n+  return (vector unsigned short) __builtin_altivec_vsplth ((vector signed short) a1,  a2);\n }\n \n inline vector float\n-vec_splat (vector float a1, int a2)\n+vec_splat (vector float a1, const char a2)\n {\n-  return (vector float) __builtin_altivec_vspltw ((vector signed int) a1, (const char) a2);\n+  return (vector float) __builtin_altivec_vspltw ((vector signed int) a1,  a2);\n }\n \n inline vector signed int\n-vec_splat (vector signed int a1, int a2)\n+vec_splat (vector signed int a1, const char a2)\n {\n-  return (vector signed int) __builtin_altivec_vspltw ((vector signed int) a1, (const char) a2);\n+  return (vector signed int) __builtin_altivec_vspltw ((vector signed int) a1,  a2);\n }\n \n inline vector unsigned int\n-vec_splat (vector unsigned int a1, int a2)\n+vec_splat (vector unsigned int a1, const char a2)\n {\n-  return (vector unsigned int) __builtin_altivec_vspltw ((vector signed int) a1, (const char) a2);\n+  return (vector unsigned int) __builtin_altivec_vspltw ((vector signed int) a1,  a2);\n }\n \n /* vec_splat_s8 */\n \n inline vector signed char\n-vec_splat_s8 (int a1)\n+vec_splat_s8 (const char a1)\n {\n-  return (vector signed char) __builtin_altivec_vspltisb ((const char) a1);\n+  return (vector signed char) __builtin_altivec_vspltisb (a1);\n }\n \n /* vec_splat_s16 */\n \n inline vector signed short\n-vec_splat_s16 (int a1)\n+vec_splat_s16 (const char a1)\n {\n-  return (vector signed short) __builtin_altivec_vspltish ((const char) a1);\n+  return (vector signed short) __builtin_altivec_vspltish (a1);\n }\n \n /* vec_splat_s32 */\n \n inline vector signed int\n-vec_splat_s32 (int a1)\n+vec_splat_s32 (const char a1)\n {\n-  return (vector signed int) __builtin_altivec_vspltisw ((const char) a1);\n+  return (vector signed int) __builtin_altivec_vspltisw (a1);\n }\n \n /* vec_splat_u8 */\n \n inline vector unsigned char\n-vec_splat_u8 (int a1)\n+vec_splat_u8 (const char a1)\n {\n-  return (vector unsigned char) __builtin_altivec_vspltisb ((const char) a1);\n+  return (vector unsigned char) __builtin_altivec_vspltisb (a1);\n }\n \n /* vec_splat_u16 */\n \n inline vector unsigned short\n-vec_splat_u16 (int a1)\n+vec_splat_u16 (const char a1)\n {\n-  return (vector unsigned short) __builtin_altivec_vspltish ((const char) a1);\n+  return (vector unsigned short) __builtin_altivec_vspltish (a1);\n }\n \n /* vec_splat_u32 */\n \n inline vector unsigned int\n-vec_splat_u32 (int a1)\n+vec_splat_u32 (const char a1)\n {\n-  return (vector unsigned int) __builtin_altivec_vspltisw ((const char) a1);\n+  return (vector unsigned int) __builtin_altivec_vspltisw (a1);\n }\n \n /* vec_sr */\n@@ -4111,6 +4157,26 @@ struct __vec_step_help<vector float>\n /* \"... and so I think no man in a century will suffer as greatly as\n    you will.\"  */\n \n+#define vec_abs(a) \\\n+  __ch (__un_args_eq (vector signed char, a), \\\n+        (vector signed char) __builtin_altivec_abs_v16qi ((vector signed char) a), \\\n+  __ch (__un_args_eq (vector signed short, a), \\\n+        (vector signed short) __builtin_altivec_abs_v8hi ((vector signed short) a), \\\n+  __ch (__un_args_eq (vector signed int, a), \\\n+        (vector signed int) __builtin_altivec_abs_v4si ((vector signed int) a), \\\n+  __ch (__un_args_eq (vector float, a), \\\n+        (vector float) __builtin_altivec_abs_v4sf ((vector float) a), \\\n+  __altivec_link_error_invalid_argument ()))))\n+\n+#define vec_abss(a) \\\n+  __ch (__un_args_eq (vector signed char, a), \\\n+        (vector signed char) __builtin_altivec_abss_v16qi ((vector signed char) a), \\\n+  __ch (__un_args_eq (vector signed short, a), \\\n+        (vector signed short) __builtin_altivec_abss_v8hi ((vector signed short) a), \\\n+  __ch (__un_args_eq (vector signed int, a), \\\n+        (vector signed int) __builtin_altivec_abss_v4si ((vector signed int) a), \\\n+  __altivec_link_error_invalid_argument ())))\n+\n #define vec_step(t) \\\n   __ch (__builtin_types_compatible_p (t, vector signed int), 4,\t\t\\\n   __ch (__builtin_types_compatible_p (t, vector unsigned int), 4,\t\\"}, {"sha": "5817165cbb50afdc5fa25256db3d03c462f47ec0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 98, "deletions": 1, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=100c45611f93bea9e0d7971cd8f8988d4451a5a7", "patch": "@@ -163,6 +163,7 @@ static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int\n static rtx altivec_expand_builtin PARAMS ((tree, rtx));\n static rtx altivec_expand_unop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n+static rtx altivec_expand_abs_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_predicate_builtin PARAMS ((enum insn_code, const char *, tree, rtx));\n static rtx altivec_expand_ternop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_stv_builtin PARAMS ((enum insn_code, tree));\n@@ -3402,6 +3403,19 @@ static const struct builtin_description_predicates bdesc_altivec_preds[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P }\n };\n \n+/* ABS* opreations.  */\n+\n+static const struct builtin_description bdesc_abs[] =\n+{\n+  { MASK_ALTIVEC, CODE_FOR_absv4si2, \"__builtin_altivec_abs_v4si\", ALTIVEC_BUILTIN_ABS_V4SI },\n+  { MASK_ALTIVEC, CODE_FOR_absv8hi2, \"__builtin_altivec_abs_v8hi\", ALTIVEC_BUILTIN_ABS_V8HI },\n+  { MASK_ALTIVEC, CODE_FOR_absv4sf2, \"__builtin_altivec_abs_v4sf\", ALTIVEC_BUILTIN_ABS_V4SF },\n+  { MASK_ALTIVEC, CODE_FOR_absv16qi2, \"__builtin_altivec_abs_v16qi\", ALTIVEC_BUILTIN_ABS_V16QI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_abss_v4si, \"__builtin_altivec_abss_v4si\", ALTIVEC_BUILTIN_ABSS_V4SI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_abss_v8hi, \"__builtin_altivec_abss_v8hi\", ALTIVEC_BUILTIN_ABSS_V8HI },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_abss_v16qi, \"__builtin_altivec_abss_v16qi\", ALTIVEC_BUILTIN_ABSS_V16QI }\n+};\n+\n /* Simple unary operations: VECb = foo (unsigned literal) or VECb =\n    foo (VECa).  */\n \n@@ -3458,6 +3472,41 @@ altivec_expand_unop_builtin (icode, arglist, target)\n   return target;\n }\n \n+static rtx\n+altivec_expand_abs_builtin (icode, arglist, target)\n+     enum insn_code icode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat, scratch1, scratch2;\n+  tree arg0 = TREE_VALUE (arglist);\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+\n+  /* If we have invalid arguments, bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node)\n+    return NULL_RTX;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  scratch1 = gen_reg_rtx (mode0);\n+  scratch2 = gen_reg_rtx (mode0);\n+\n+  pat = GEN_FCN (icode) (target, op0, scratch1, scratch2);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  return target;\n+}\n+\n static rtx\n altivec_expand_binop_builtin (icode, arglist, target)\n      enum insn_code icode;\n@@ -3936,6 +3985,12 @@ altivec_expand_builtin (exp, target)\n \treturn NULL_RTX;\n       }\n \n+  /* Expand abs* operations.  */\n+  d = (struct builtin_description *) bdesc_abs;\n+  for (i = 0; i < sizeof (bdesc_abs) / sizeof *d; i++, d++)\n+    if (d->code == fcode)\n+      return altivec_expand_abs_builtin (d->icode, arglist, target);\n+\n   /* Handle simple unary operations.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n@@ -4322,6 +4377,18 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree v4si_ftype_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node, endlink));\n+\n+  tree v8hi_ftype_v8hi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node, endlink));\n+\n+  tree v16qi_ftype_v16qi\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node, endlink));\n+\n   tree v8hi_ftype_v16qi_v16qi\n     = build_function_type (V8HI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n@@ -4466,7 +4533,7 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_int_pvoid, ALTIVEC_BUILTIN_STVEHX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvewx\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVEWX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_int_pvoid, ALTIVEC_BUILTIN_STVXL);\n-  \n+\n   /* Add the simple ternary operators.  */\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < sizeof (bdesc_3arg) / sizeof *d; i++, d++)\n@@ -4713,6 +4780,36 @@ altivec_init_builtins (void)\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n+  /* Initialize the abs* operators.  */\n+  d = (struct builtin_description *) bdesc_abs;\n+  for (i = 0; i < sizeof (bdesc_abs) / sizeof *d; i++, d++)\n+    {\n+      enum machine_mode mode0;\n+      tree type;\n+\n+      mode0 = insn_data[d->icode].operand[0].mode;\n+\n+      switch (mode0)\n+\t{\n+\tcase V4SImode:\n+\t  type = v4si_ftype_v4si;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = v8hi_ftype_v8hi;\n+\t  break;\n+\tcase V16QImode:\n+\t  type = v16qi_ftype_v16qi;\n+\t  break;\n+\tcase V4SFmode:\n+\t  type = v4sf_ftype_v4sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      \n+      def_builtin (d->mask, d->name, type, d->code);\n+    }\n+\n   /* Add the simple unary operators.  */\n   d = (struct builtin_description *) bdesc_1arg;\n   for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)"}, {"sha": "815ab2a21884119a172c964d1884409910d38f58", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=100c45611f93bea9e0d7971cd8f8988d4451a5a7", "patch": "@@ -2971,5 +2971,12 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VCMPGTSW_P,\n   ALTIVEC_BUILTIN_VCMPGTUB_P,\n   ALTIVEC_BUILTIN_VCMPGTUH_P,\n-  ALTIVEC_BUILTIN_VCMPGTUW_P\n+  ALTIVEC_BUILTIN_VCMPGTUW_P,\n+  ALTIVEC_BUILTIN_ABSS_V4SI,\n+  ALTIVEC_BUILTIN_ABSS_V8HI,\n+  ALTIVEC_BUILTIN_ABSS_V16QI,\n+  ALTIVEC_BUILTIN_ABS_V4SI,\n+  ALTIVEC_BUILTIN_ABS_V4SF,\n+  ALTIVEC_BUILTIN_ABS_V8HI,\n+  ALTIVEC_BUILTIN_ABS_V16QI\n };"}, {"sha": "04c9ab5abb36317d871ce4deb4108ca83cb21829", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100c45611f93bea9e0d7971cd8f8988d4451a5a7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=100c45611f93bea9e0d7971cd8f8988d4451a5a7", "patch": "@@ -15033,6 +15033,7 @@\n   \"TARGET_ALTIVEC\"\n   \"vspltb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n+\n (define_insn \"altivec_vsplth\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n@@ -15565,3 +15566,73 @@\n   \"TARGET_ALTIVEC\"\n   \"stvewx %2,%0,%1\"\n   [(set_attr \"type\" \"vecstore\")])\n+\n+(define_insn \"absv16qi2\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(abs:V16QI (match_operand:V16QI 1 \"register_operand\" \"v\")))\n+   (clobber (match_scratch:V16QI 2 \"=v\"))\n+   (clobber (match_scratch:V16QI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsububm %3,%2,%1\\;vmaxsb %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"absv8hi2\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (abs:V8HI (match_operand:V8HI 1 \"register_operand\" \"v\")))\n+   (clobber (match_scratch:V8HI 2 \"=v\"))\n+   (clobber (match_scratch:V8HI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsubuhm %3,%2,%1\\;vmaxsh %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"absv4si2\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (abs:V4SI (match_operand:V4SI 1 \"register_operand\" \"v\")))\n+   (clobber (match_scratch:V4SI 2 \"=v\"))\n+   (clobber (match_scratch:V4SI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsubuwm %3,%2,%1\\;vmaxsw %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"absv4sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+        (abs:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")))\n+   (clobber (match_scratch:V4SF 2 \"=v\"))\n+   (clobber (match_scratch:V4SF 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisw %2, -1\\;vslw %3,%2,%2\\;vandc %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"altivec_abss_v16qi\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")] 210))\n+   (clobber (match_scratch:V16QI 2 \"=v\"))\n+   (clobber (match_scratch:V16QI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsubsbs %3,%2,%1\\;vmaxsb %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"altivec_abss_v8hi\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")] 211))\n+   (clobber (match_scratch:V8HI 2 \"=v\"))\n+   (clobber (match_scratch:V8HI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsubshs %3,%2,%1\\;vmaxsh %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])\n+\n+(define_insn \"altivec_abss_v4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")] 212))\n+   (clobber (match_scratch:V4SI 2 \"=v\"))\n+   (clobber (match_scratch:V4SI 3 \"=v\"))]\n+  \"TARGET_ALTIVEC\"\n+  \"vspltisb %2,0\\;vsubsws %3,%2,%1\\;vmaxsw %0,%1,%3\"\n+  [(set_attr \"type\" \"altivec\")\n+   (set_attr \"length\" \"12\")])"}]}