{"sha": "cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4NmIyYjZkYjhmOGE3NTQ3ZmM0YjE4NmRhNGM2ZjgxZDY3ODM1ZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-08-05T01:28:36Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-08-05T01:28:36Z"}, "message": "jvmti.cc: Added MAYBE_UNUSED to 'env' parameters.\n\n\t* jvmti.cc: Added MAYBE_UNUSED to 'env' parameters.\n\t(_Jv_JVMTI_GetObjectSize): Cast _Jv_GetArrayElementFromElementType\n\tresult to _Jv_uintptr_t.\n\nFrom-SVN: r115942", "tree": {"sha": "9ee0bd0e074327b6d6f5c267ecd2c22be77f879e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ee0bd0e074327b6d6f5c267ecd2c22be77f879e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e/comments", "author": null, "committer": null, "parents": [{"sha": "e97bfda89887c943882048f44484629993f0bd20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97bfda89887c943882048f44484629993f0bd20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97bfda89887c943882048f44484629993f0bd20"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "8cc483de85f28da644df5ca42cf38c56dddbdf82", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "patch": "@@ -1,3 +1,9 @@\n+2006-08-04  Tom Tromey  <tromey@redhat.com>\n+\n+\t* jvmti.cc: Added MAYBE_UNUSED to 'env' parameters.\n+\t(_Jv_JVMTI_GetObjectSize): Cast _Jv_GetArrayElementFromElementType\n+\tresult to _Jv_uintptr_t.\n+\n 2006-08-01  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/VMFrame.java: Update to Classpath 0.91."}, {"sha": "1b57336766a3a747e0f2478fe9d7361c14fc6976", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb86b2b6db8f8a7547fc4b186da4c6f81d67835e/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=cb86b2b6db8f8a7547fc4b186da4c6f81d67835e", "patch": "@@ -215,7 +215,8 @@ _Jv_JVMTI_Deallocate (MAYBE_UNUSED jvmtiEnv *env, unsigned char *mem)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetClassModifiers (jvmtiEnv *env, jclass klass, jint *mods)\n+_Jv_JVMTI_GetClassModifiers (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\t     jint *mods)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   // Don't bother checking KLASS' type.\n@@ -227,8 +228,8 @@ _Jv_JVMTI_GetClassModifiers (jvmtiEnv *env, jclass klass, jint *mods)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetClassMethods (jvmtiEnv *env, jclass klass, jint *count_ptr,\n-\t\t\t   jmethodID **methods_ptr)\n+_Jv_JVMTI_GetClassMethods (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\t   jint *count_ptr, jmethodID **methods_ptr)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   // FIXME: capability can_maintain_original_method_order\n@@ -249,7 +250,8 @@ _Jv_JVMTI_GetClassMethods (jvmtiEnv *env, jclass klass, jint *count_ptr,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_IsInterface (jvmtiEnv *env, jclass klass, jboolean *result)\n+_Jv_JVMTI_IsInterface (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t       jboolean *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (klass == NULL)\n@@ -260,7 +262,8 @@ _Jv_JVMTI_IsInterface (jvmtiEnv *env, jclass klass, jboolean *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_IsArrayClass (jvmtiEnv *env, jclass klass, jboolean *result)\n+_Jv_JVMTI_IsArrayClass (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\tjboolean *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (klass == NULL)\n@@ -271,7 +274,8 @@ _Jv_JVMTI_IsArrayClass (jvmtiEnv *env, jclass klass, jboolean *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetClassLoader (jvmtiEnv *env, jclass klass, jobject *result)\n+_Jv_JVMTI_GetClassLoader (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\t  jobject *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (klass == NULL)\n@@ -282,7 +286,8 @@ _Jv_JVMTI_GetClassLoader (jvmtiEnv *env, jclass klass, jobject *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetObjectHashCode (jvmtiEnv *env, jobject obj, jint *result)\n+_Jv_JVMTI_GetObjectHashCode (MAYBE_UNUSED jvmtiEnv *env, jobject obj,\n+\t\t\t     jint *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (obj == NULL)\n@@ -293,8 +298,8 @@ _Jv_JVMTI_GetObjectHashCode (jvmtiEnv *env, jobject obj, jint *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetFieldModifiers (jvmtiEnv *env, jclass klass, jfieldID field,\n-\t\t\t     jint *result)\n+_Jv_JVMTI_GetFieldModifiers (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\t     jfieldID field, jint *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (klass == NULL)\n@@ -307,8 +312,8 @@ _Jv_JVMTI_GetFieldModifiers (jvmtiEnv *env, jclass klass, jfieldID field,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_IsFieldSynthetic (jvmtiEnv *env, jclass klass, jfieldID field,\n-\t\t\t    jboolean *result)\n+_Jv_JVMTI_IsFieldSynthetic (MAYBE_UNUSED jvmtiEnv *env, jclass klass,\n+\t\t\t    jfieldID field, jboolean *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (klass == NULL)\n@@ -324,7 +329,8 @@ _Jv_JVMTI_IsFieldSynthetic (jvmtiEnv *env, jclass klass, jfieldID field,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetMethodModifiers (jvmtiEnv *env, jmethodID method, jint *result)\n+_Jv_JVMTI_GetMethodModifiers (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n+\t\t\t      jint *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (method == NULL)\n@@ -337,7 +343,8 @@ _Jv_JVMTI_GetMethodModifiers (jvmtiEnv *env, jmethodID method, jint *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_IsMethodNative (jvmtiEnv *env, jmethodID method, jboolean *result)\n+_Jv_JVMTI_IsMethodNative (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n+\t\t\t  jboolean *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (method == NULL)\n@@ -349,7 +356,8 @@ _Jv_JVMTI_IsMethodNative (jvmtiEnv *env, jmethodID method, jboolean *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_IsMethodSynthetic (jvmtiEnv *env, jmethodID method, jboolean *result)\n+_Jv_JVMTI_IsMethodSynthetic (MAYBE_UNUSED jvmtiEnv *env, jmethodID method,\n+\t\t\t     jboolean *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (method == NULL)\n@@ -364,7 +372,7 @@ _Jv_JVMTI_IsMethodSynthetic (jvmtiEnv *env, jmethodID method, jboolean *result)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetClassLoaderClasses (jvmtiEnv *env,\n+_Jv_JVMTI_GetClassLoaderClasses (MAYBE_UNUSED jvmtiEnv *env,\n \t\t\t\t jobject init_loader,\n \t\t\t\t jint *count_ptr,\n \t\t\t\t jclass **result_ptr)\n@@ -394,15 +402,15 @@ _Jv_JVMTI_GetClassLoaderClasses (jvmtiEnv *env,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_ForceGarbageCollection (jvmtiEnv *env)\n+_Jv_JVMTI_ForceGarbageCollection (MAYBE_UNUSED jvmtiEnv *env)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n   _Jv_RunGC();\n   return JVMTI_ERROR_NONE;\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_SetJNIFunctionTable (jvmtiEnv *env,\n+_Jv_JVMTI_SetJNIFunctionTable (MAYBE_UNUSED jvmtiEnv *env,\n \t\t\t       const jniNativeInterface *function_table)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n@@ -412,7 +420,7 @@ _Jv_JVMTI_SetJNIFunctionTable (jvmtiEnv *env,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetJNIFunctionTable (jvmtiEnv *env,\n+_Jv_JVMTI_GetJNIFunctionTable (MAYBE_UNUSED jvmtiEnv *env,\n \t\t\t       jniNativeInterface **function_table)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n@@ -432,7 +440,7 @@ _Jv_JVMTI_DisposeEnvironment (jvmtiEnv *env)\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetSystemProperty (jvmtiEnv *env, const char *property,\n+_Jv_JVMTI_GetSystemProperty (MAYBE_UNUSED jvmtiEnv *env, const char *property,\n \t\t\t     char **result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_ONLOAD | JVMTI_PHASE_LIVE);\n@@ -454,7 +462,7 @@ _Jv_JVMTI_GetSystemProperty (jvmtiEnv *env, const char *property,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_SetSystemProperty (jvmtiEnv *env, const char *property,\n+_Jv_JVMTI_SetSystemProperty (MAYBE_UNUSED jvmtiEnv *env, const char *property,\n \t\t\t     const char *value)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_ONLOAD);\n@@ -494,7 +502,8 @@ _Jv_JVMTI_GetAvailableProcessors (MAYBE_UNUSED jvmtiEnv *env,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_AddToBootstrapClassLoaderSearch (jvmtiEnv *env, const char *segment)\n+_Jv_JVMTI_AddToBootstrapClassLoaderSearch (MAYBE_UNUSED jvmtiEnv *env,\n+\t\t\t\t\t   const char *segment)\n {\n   using namespace java::lang;\n   using namespace java::net;\n@@ -542,7 +551,8 @@ _Jv_JVMTI_SetVerboseFlag (MAYBE_UNUSED jvmtiEnv *env, jvmtiVerboseFlag flag,\n }\n \n static jvmtiError JNICALL\n-_Jv_JVMTI_GetObjectSize (jvmtiEnv *env, jobject object, jlong *result)\n+_Jv_JVMTI_GetObjectSize (MAYBE_UNUSED jvmtiEnv *env, jobject object,\n+\t\t\t jlong *result)\n {\n   REQUIRE_PHASE (env, JVMTI_PHASE_START | JVMTI_PHASE_LIVE);\n   if (object == NULL)\n@@ -554,8 +564,8 @@ _Jv_JVMTI_GetObjectSize (jvmtiEnv *env, jobject object, jlong *result)\n     {\n       jclass comp = klass->getComponentType();\n       jint base\n-\t= (jint) _Jv_GetArrayElementFromElementType(NULL,\n-\t\t\t\t\t\t    klass->getComponentType());\n+\t= (jint) (_Jv_uintptr_t) _Jv_GetArrayElementFromElementType(NULL,\n+\t\t\t\t\t\t\t\t    klass->getComponentType());\n       // FIXME: correct for primitive types?\n       jint compSize = comp->size();\n       __JArray *array = (__JArray *) object;"}]}