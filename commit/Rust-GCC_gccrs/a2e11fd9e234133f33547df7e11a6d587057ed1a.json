{"sha": "a2e11fd9e234133f33547df7e11a6d587057ed1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlMTFmZDllMjM0MTMzZjMzNTQ3ZGY3ZTExYTZkNTg3MDU3ZWQxYQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2001-01-09T18:07:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-01-09T18:07:51Z"}, "message": "SWitch use if {save|restore}_machine_status with {init|free}_machine_status\n\nFrom-SVN: r38836", "tree": {"sha": "ec6244c8ffddc15a739a837ad9cf9fcb2552b6ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec6244c8ffddc15a739a837ad9cf9fcb2552b6ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e11fd9e234133f33547df7e11a6d587057ed1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e11fd9e234133f33547df7e11a6d587057ed1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e11fd9e234133f33547df7e11a6d587057ed1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e11fd9e234133f33547df7e11a6d587057ed1a/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ba478b87c50718ac4dd3af0e2cf42392dbb5641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba478b87c50718ac4dd3af0e2cf42392dbb5641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba478b87c50718ac4dd3af0e2cf42392dbb5641"}], "stats": {"total": 101, "additions": 65, "deletions": 36}, "files": [{"sha": "01a368be6ba1c140e04e167811efc4884aef4687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2e11fd9e234133f33547df7e11a6d587057ed1a", "patch": "@@ -1,3 +1,26 @@\n+2001-01-09  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_sysv_varargs_p): Delete.\n+\t(setup_incoming_varargs): Use sysv_varargs_p field of the\n+\tcfun->machine structure.\n+\t(struct machine_function): Move to rs6000.h\n+\t(rs6000_save_machine_status): Delete.\n+\t(rs6000_restore_machine_status): Delete.\n+\t(rs6000_init_machine_status): New Function.\n+\t(rs6000_free_machine_status): New Function.\n+\t(rs6000_init_expanders): Use new functions.\n+\n+\t* config/rs6000/rs6000.h (rs6000_sysv_varargs_p): Delete\n+\texport.\n+\t(struct machine_function): Move here.\n+\n+\t* config/rs6000/sysv4.h (RS6000_VARARGS_AREA): Use\n+\tsysv_varargs_p field of the cfun->machine structure.\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_save_machine_status):\n+\tRemove prototype.\n+\t(rs6000_restore_machine_status): Remove prototype.\n+\n 2001-01-09  Richard Henderson  <rth@redhat.com>\n \n \t* sched-int.h (struct deps): Add max_reg, reg_last_in_use; merge"}, {"sha": "3c02f10cb2c899f5b886597bbfb6950ad7a9621c", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=a2e11fd9e234133f33547df7e11a6d587057ed1a", "patch": "@@ -52,16 +52,9 @@ static void d30v_add_gc_roots PARAMS ((void));\n struct rtx_def *d30v_compare_op0;\n struct rtx_def *d30v_compare_op1;\n \n-/* Define the information needed to modify the epilogue for EH.  */\n-\n-rtx d30v_eh_epilogue_sp_ofs;\n-\n /* Cached value of d30v_stack_info */\n static d30v_stack_t *d30v_stack_cache = (d30v_stack_t *)0;\n \n-/* Cache for __builtin_return_addr */\n-static rtx d30v_return_addr_rtx;\n-\n /* Values of the -mbranch-cost=n string.  */\n int d30v_branch_cost = D30V_DEFAULT_BRANCH_COST;\n const char *d30v_branch_cost_string = (const char *)0;\n@@ -2594,7 +2587,7 @@ d30v_expand_epilogue ()\n   for (i = GPR_FIRST; i <= GPR_LAST; i++)\n     if (info->save_p[i] == 1)\n       {\n-\tif (d30v_eh_epilogue_sp_ofs && i == GPR_LINK)\n+\tif (cfun->machine->eh_epilogue_sp_ofs && i == GPR_LINK)\n \t  extra_stack = 4;\n \telse\n \t  {\n@@ -2615,15 +2608,15 @@ d30v_expand_epilogue ()\n \n   if (extra_stack)\n     {\n-      if (d30v_eh_epilogue_sp_ofs)\n-\temit_insn (gen_addsi3 (d30v_eh_epilogue_sp_ofs,\n-\t\t\t       d30v_eh_epilogue_sp_ofs,\n+      if (cfun->machine->eh_epilogue_sp_ofs)\n+\temit_insn (gen_addsi3 (cfun->machine->eh_epilogue_sp_ofs,\n+\t\t\t       cfun->machine->eh_epilogue_sp_ofs,\n \t\t\t       GEN_INT (extra_stack)));\n       else\n         emit_insn (gen_addsi3 (sp, sp, GEN_INT (extra_stack)));\n     }\n-  if (d30v_eh_epilogue_sp_ofs)\n-    emit_insn (gen_addsi3 (sp, sp, d30v_eh_epilogue_sp_ofs));\n+  if (cfun->machine->eh_epilogue_sp_ofs)\n+    emit_insn (gen_addsi3 (sp, sp, cfun->machine->eh_epilogue_sp_ofs));\n \n   /* Now emit the return instruction.  */\n   emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n@@ -3595,47 +3588,50 @@ d30v_adjust_cost (insn, link, dep_insn, cost)\n }\n \n \f\n-/* Functions to save and restore d30v_return_addr_rtx.  */\n-\n-struct machine_function\n-{\n-  rtx ra_rtx;\n-};\n+/* Routine to allocate, mark and free a per-function,\n+   machine specific structure.  */\n \n static void\n-d30v_save_machine_status (p)\n+d30v_init_machine_status (p)\n      struct function *p;\n {\n-  struct machine_function *machine =\n+  p->machine =\n     (struct machine_function *) xmalloc (sizeof (struct machine_function));\n+}\n \n-  p->machine = machine;\n-  machine->ra_rtx = d30v_return_addr_rtx;\n+static void\n+d30v_mark_machine_status (p)\n+     struct function * p;\n+{\n+  if (p->machine == NULL)\n+    return;\n+  \n+  ggc_mark_rtx (p->machine->ra_rtx);\n+  ggc_mark_rtx (p->machine->eh_epilogue_sp_ofs);\n }\n \n static void\n-d30v_restore_machine_status (p)\n+d30v_free_machine_status (p)\n      struct function *p;\n {\n   struct machine_function *machine = p->machine;\n \n-  d30v_return_addr_rtx = machine->ra_rtx;\n+  if (machine == NULL)\n+    return;\n \n   free (machine);\n-  p->machine = (struct machine_function *)0;\n+  p->machine = NULL;\n }\n \n /* Do anything needed before RTL is emitted for each function.  */\n \n void\n d30v_init_expanders ()\n {\n-  d30v_return_addr_rtx = NULL_RTX;\n-  d30v_eh_epilogue_sp_ofs = NULL_RTX;\n-\n   /* Arrange to save and restore machine status around nested functions.  */\n-  save_machine_status = d30v_save_machine_status;\n-  restore_machine_status = d30v_restore_machine_status;\n+  init_machine_status = d30v_init_machine_status;\n+  mark_machine_status = d30v_mark_machine_status;\n+  free_machine_status = d30v_free_machine_status;\n }\n \n /* Find the current function's return address.\n@@ -3650,11 +3646,13 @@ d30v_return_addr ()\n {\n   rtx ret;\n \n-  if ((ret = d30v_return_addr_rtx) == NULL)\n+  ret = cfun->machine->ra_rtx;\n+  \n+  if (ret == NULL)\n     {\n       rtx init;\n \n-      d30v_return_addr_rtx = ret = gen_reg_rtx (Pmode);\n+      cfun->machine->ra_rtx = ret = gen_reg_rtx (Pmode);\n \n       init = gen_rtx (SET, VOIDmode, ret, gen_rtx (REG, Pmode, GPR_LINK));\n       push_topmost_sequence ();\n@@ -3673,6 +3671,4 @@ d30v_add_gc_roots ()\n {\n   ggc_add_rtx_root (&d30v_compare_op0, 1);\n   ggc_add_rtx_root (&d30v_compare_op1, 1);\n-  ggc_add_rtx_root (&d30v_eh_epilogue_sp_ofs, 1);\n-  ggc_add_rtx_root (&d30v_return_addr_rtx, 1);\n }"}, {"sha": "890639a0376ab784961c76cee7db23aaf2f1be65", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=a2e11fd9e234133f33547df7e11a6d587057ed1a", "patch": "@@ -2870,6 +2870,16 @@ typedef int CUMULATIVE_ARGS;\n    varargs.  */\n /* #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) */\n \n+/* A C structure for machine-specific, per-function data.\n+   This is added to the cfun structure.  */\n+typedef struct machine_function\n+{\n+  /* Additionsl stack adjustment in __builtin_eh_throw.  */\n+  struct rtx_def * eh_epilogue_sp_ofs;\n+  /* Records __builtin_return address.  */\n+  struct rtx_def * ra_rtx;\n+} machine_function;\n+\n \f\n /* Generating Code for Profiling.  */\n "}, {"sha": "5892a1aff8f8988618e1d20a3cfca25fc0f4b7e0", "filename": "gcc/config/d30v/d30v.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e11fd9e234133f33547df7e11a6d587057ed1a/gcc%2Fconfig%2Fd30v%2Fd30v.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.md?ref=a2e11fd9e234133f33547df7e11a6d587057ed1a", "patch": "@@ -2971,7 +2971,7 @@\n   \"\"\n   \"\n {\n-  d30v_eh_epilogue_sp_ofs = operands[1];\n+  cfun->machine->eh_epilogue_sp_ofs = operands[1];\n   if (GET_CODE (operands[2]) != REG || REGNO (operands[2]) != GPR_LINK)\n     {\n       rtx ra = gen_rtx_REG (Pmode, GPR_LINK);"}]}