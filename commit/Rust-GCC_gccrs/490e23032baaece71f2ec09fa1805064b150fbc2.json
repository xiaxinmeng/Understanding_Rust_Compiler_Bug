{"sha": "490e23032baaece71f2ec09fa1805064b150fbc2", "node_id": "C_kwDOANBUbNoAKDQ5MGUyMzAzMmJhYWVjZTcxZjJlYzA5ZmExODA1MDY0YjE1MGZiYzI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:33:12Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:33:12Z"}, "message": "libstdc++: Use fast_float in std::from_chars for binary32/64\n\nThis makes our std::from_chars implementation use fast_float for decimal\nparsing of binary32/64 numbers.  For other floating-point formats we\nstill use the fallback implementation that goes through the strtod family\nof functions.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_from_chars.cc: (USE_LIB_FAST_FLOAT):\n\tConditionally define, and use it to conditionally include\n\tfast_float.\n\t(from_chars): Use fast_float for float and double when\n\tUSE_LIB_FAST_FLOAT.", "tree": {"sha": "1dd05a227a387dcfd145207bdcb28fd810a78a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dd05a227a387dcfd145207bdcb28fd810a78a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/490e23032baaece71f2ec09fa1805064b150fbc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490e23032baaece71f2ec09fa1805064b150fbc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490e23032baaece71f2ec09fa1805064b150fbc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490e23032baaece71f2ec09fa1805064b150fbc2/comments", "author": null, "committer": null, "parents": [{"sha": "40b0d4472a2591cf27f3a81aa3fba57dc4532648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b0d4472a2591cf27f3a81aa3fba57dc4532648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b0d4472a2591cf27f3a81aa3fba57dc4532648"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "3158a3a96d35bd53c2b6af4cc30824340083d437", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490e23032baaece71f2ec09fa1805064b150fbc2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490e23032baaece71f2ec09fa1805064b150fbc2/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=490e23032baaece71f2ec09fa1805064b150fbc2", "patch": "@@ -35,6 +35,7 @@\n #include <string>\n #include <memory_resource>\n #include <cfenv>\n+#include <cfloat>\n #include <cmath>\n #include <cstdlib>\n #include <cstring>\n@@ -53,6 +54,18 @@\n extern \"C\" __ieee128 __strtoieee128(const char*, char**);\n #endif\n \n+#if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n+# define USE_LIB_FAST_FLOAT 1\n+#endif\n+\n+#if USE_LIB_FAST_FLOAT\n+# define FASTFLOAT_DEBUG_ASSERT __glibcxx_assert\n+namespace\n+{\n+# include \"fast_float/fast_float.h\"\n+} // anon namespace\n+#endif\n+\n #if _GLIBCXX_HAVE_USELOCALE\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -773,8 +786,12 @@ from_chars(const char* first, const char* last, float& value,\n #if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n   if (fmt == chars_format::hex)\n     return __floating_from_chars_hex(first, last, value);\n-#endif\n-\n+  else\n+    {\n+      static_assert(USE_LIB_FAST_FLOAT);\n+      return fast_float::from_chars(first, last, value, fmt);\n+    }\n+#else\n   errc ec = errc::invalid_argument;\n #if _GLIBCXX_USE_CXX11_ABI\n   buffer_resource mr;\n@@ -795,6 +812,7 @@ from_chars(const char* first, const char* last, float& value,\n       fmt = chars_format{};\n     }\n   return make_result(first, len, fmt, ec);\n+#endif\n }\n \n from_chars_result\n@@ -804,8 +822,12 @@ from_chars(const char* first, const char* last, double& value,\n #if _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64\n   if (fmt == chars_format::hex)\n     return __floating_from_chars_hex(first, last, value);\n-#endif\n-\n+  else\n+    {\n+      static_assert(USE_LIB_FAST_FLOAT);\n+      return fast_float::from_chars(first, last, value, fmt);\n+    }\n+#else\n   errc ec = errc::invalid_argument;\n #if _GLIBCXX_USE_CXX11_ABI\n   buffer_resource mr;\n@@ -826,6 +848,7 @@ from_chars(const char* first, const char* last, double& value,\n       fmt = chars_format{};\n     }\n   return make_result(first, len, fmt, ec);\n+#endif\n }\n \n from_chars_result"}]}