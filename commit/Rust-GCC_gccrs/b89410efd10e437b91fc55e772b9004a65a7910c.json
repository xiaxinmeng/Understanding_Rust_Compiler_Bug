{"sha": "b89410efd10e437b91fc55e772b9004a65a7910c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5NDEwZWZkMTBlNDM3YjkxZmM1NWU3NzJiOTAwNGE2NWE3OTEwYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-02T23:25:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-02T23:25:06Z"}, "message": "[PATCH] Avoid more irreducible loops in FSM threader\n\n\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Also detect\n\tcases where the loop latch edge is in the middle of an FSM\n\tpath.\n\n\t* gcc.dg/tree-ssa/ssa-thread-11.c: Verify that we do not have\n\tirreducible loops in the CFG.\n\nFrom-SVN: r229685", "tree": {"sha": "b50082f4a1d618955ea699566fc26bd4874bb16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b50082f4a1d618955ea699566fc26bd4874bb16f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89410efd10e437b91fc55e772b9004a65a7910c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89410efd10e437b91fc55e772b9004a65a7910c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89410efd10e437b91fc55e772b9004a65a7910c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89410efd10e437b91fc55e772b9004a65a7910c/comments", "author": null, "committer": null, "parents": [{"sha": "58b2d87ea1d03d56e220e2cabfbee11561ea05c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b2d87ea1d03d56e220e2cabfbee11561ea05c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b2d87ea1d03d56e220e2cabfbee11561ea05c4"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "6a7d988c626d4aff8b8e92a28a6bab7b54bb0a69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89410efd10e437b91fc55e772b9004a65a7910c", "patch": "@@ -1,3 +1,9 @@\n+2015-11-02  Jeff Law <jeff@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Also detect\n+\tcases where the loop latch edge is in the middle of an FSM\n+\tpath.\n+\n 2015-11-03  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (make_restrict_var_constraints): Rename to ..."}, {"sha": "3dc4edcfd971d4fcf6d5e3fbff2a978a790610e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b89410efd10e437b91fc55e772b9004a65a7910c", "patch": "@@ -1,3 +1,8 @@\n+2015-11-02  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-thread-11.c: Verify that we do not have\n+\tirreducible loops in the CFG.\n+\n 2015-11-02  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tRevert:"}, {"sha": "a729f5637a53238b33ed1ddbb6ded2de81486919", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-11.c?ref=b89410efd10e437b91fc55e772b9004a65a7910c", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mep*-*-* bfin*-*-* v850*-*-* moxie*-*-* m32c*-*-* fr30*-*-* mcore*-*-* frv-*-* h8300-*-* m32r-*-* mn10300-*-* msp430-*-* pdp11-*-* rl78-*-* rx-*-* vax-*-*} } } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n+/* { dg-final { scan-tree-dump-not \"IRREDUCIBLE_LOOP\" \"vrp2\" } } */\n /* { dg-final { scan-tree-dump \"FSM\" \"vrp2\" } } */\n \n void abort (void);"}, {"sha": "68650e598fe8f3440cc14ef6e828ac573c9dfade", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89410efd10e437b91fc55e772b9004a65a7910c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=b89410efd10e437b91fc55e772b9004a65a7910c", "patch": "@@ -2547,29 +2547,38 @@ valid_jump_thread_path (vec<jump_thread_edge *> *path)\n {\n   unsigned len = path->length ();\n   bool multiway_branch = false;\n+  bool threaded_through_latch = false;\n \n   /* Check that the path is connected and see if there's a multi-way\n      branch on the path.  */\n   for (unsigned int j = 0; j < len - 1; j++)\n     {\n-      if ((*path)[j]->e->dest != (*path)[j+1]->e->src)\n+      edge e = (*path)[j]->e;\n+      struct loop *loop = e->dest->loop_father;\n+\n+      if (e->dest != (*path)[j+1]->e->src)\n         return false;\n-      gimple *last = last_stmt ((*path)[j]->e->dest);\n+\n+      /* If we're threading through the loop latch back into the\n+\t same loop and the destination does not dominate the loop\n+\t latch, then this thread would create an irreducible loop.  */\n+      if (loop->latch\n+\t  && loop_latch_edge (loop) == e\n+\t  && loop == path->last()->e->dest->loop_father\n+\t  && (determine_bb_domination_status (loop, path->last ()->e->dest)\n+\t       == DOMST_NONDOMINATING))\n+\tthreaded_through_latch = true;\n+\n+      gimple *last = last_stmt (e->dest);\n       multiway_branch |= (last && gimple_code (last) == GIMPLE_SWITCH);\n     }\n \n-  /* If we are trying to thread the loop latch to a block that does\n-     not dominate the loop latch, then that will create an irreducible\n-     loop.  We avoid that unless the jump thread has a multi-way\n+  /* If we are trying to thread through the loop latch to a block in the\n+     loop that does not dominate the loop latch, then that will create an\n+     irreducible loop.  We avoid that unless the jump thread has a multi-way\n      branch, in which case we have deemed it worth losing other\n      loop optimizations later if we can eliminate the multi-way branch.  */\n-  edge e = (*path)[0]->e;\n-  struct loop *loop = e->dest->loop_father;\n-  if (!multiway_branch\n-      && loop->latch\n-      && loop_latch_edge (loop) == e\n-      && (determine_bb_domination_status (loop, path->last ()->e->dest)\n-\t  == DOMST_NONDOMINATING))\n+  if (!multiway_branch && threaded_through_latch)\n     return false;\n \n   return true;"}]}