{"sha": "a3e6a37b65335d59140b5415cabcb34ca6951371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlNmEzN2I2NTMzNWQ1OTE0MGI1NDE1Y2FiY2IzNGNhNjk1MTM3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-01-05T20:20:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-05T20:20:57Z"}, "message": "re PR rtl-optimization/51767 (ICE with degenerated asm goto)\n\n\tPR rtl-optimization/51767\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Force addition\n\tof jump_block and add an extra edge for degenerated asm gotos.\n\n\t* gcc.c-torture/compile/pr51767.c: New test.\n\nFrom-SVN: r182922", "tree": {"sha": "990059fd6e94d825094e7d8bc0afd68533edad28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/990059fd6e94d825094e7d8bc0afd68533edad28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e6a37b65335d59140b5415cabcb34ca6951371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e6a37b65335d59140b5415cabcb34ca6951371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e6a37b65335d59140b5415cabcb34ca6951371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e6a37b65335d59140b5415cabcb34ca6951371/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36363ebb88950dc5b411ceb1fa53d7ee2edd0a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36363ebb88950dc5b411ceb1fa53d7ee2edd0a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36363ebb88950dc5b411ceb1fa53d7ee2edd0a38"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "1bd3bb2629564a5449bb801eb59dfd119057ba4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3e6a37b65335d59140b5415cabcb34ca6951371", "patch": "@@ -1,5 +1,9 @@\n 2012-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/51767\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Force addition\n+\tof jump_block and add an extra edge for degenerated asm gotos.\n+\n \tPR middle-end/51768\n \t* stmt.c (check_unique_operand_names): Don't ICE during error\n \treporting if i is from labels chain."}, {"sha": "635955b799033b058b55761a7ebabd092e4c345e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=a3e6a37b65335d59140b5415cabcb34ca6951371", "patch": "@@ -1,7 +1,7 @@\n /* Control flow graph manipulation code for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1129,6 +1129,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n   rtx note;\n   edge new_edge;\n   int abnormal_edge_flags = 0;\n+  bool asm_goto_edge = false;\n   int loc;\n \n   /* In the case the last instruction is conditional jump to the next\n@@ -1208,8 +1209,28 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n \t}\n     }\n \n-  if (EDGE_COUNT (e->src->succs) >= 2 || abnormal_edge_flags)\n+  /* If e->src ends with asm goto, see if any of the ASM_OPERANDS_LABELs\n+     don't point to target label.  */\n+  if (JUMP_P (BB_END (e->src))\n+      && target != EXIT_BLOCK_PTR\n+      && e->dest == target\n+      && (e->flags & EDGE_FALLTHRU)\n+      && (note = extract_asm_operands (PATTERN (BB_END (e->src)))))\n     {\n+      int i, n = ASM_OPERANDS_LABEL_LENGTH (note);\n+\n+      for (i = 0; i < n; ++i)\n+\tif (XEXP (ASM_OPERANDS_LABEL (note, i), 0) == BB_HEAD (target))\n+\t  {\n+\t    asm_goto_edge = true;\n+\t    break;\n+\t  }\n+    }\n+\n+  if (EDGE_COUNT (e->src->succs) >= 2 || abnormal_edge_flags || asm_goto_edge)\n+    {\n+      gcov_type count = e->count;\n+      int probability = e->probability;\n       /* Create the new structures.  */\n \n       /* If the old block ended with a tablejump, skip its table\n@@ -1220,7 +1241,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n       note = NEXT_INSN (note);\n \n       jump_block = create_basic_block (note, NULL, e->src);\n-      jump_block->count = e->count;\n+      jump_block->count = count;\n       jump_block->frequency = EDGE_FREQUENCY (e);\n       jump_block->loop_depth = target->loop_depth;\n \n@@ -1236,13 +1257,27 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n \n       /* Wire edge in.  */\n       new_edge = make_edge (e->src, jump_block, EDGE_FALLTHRU);\n-      new_edge->probability = e->probability;\n-      new_edge->count = e->count;\n+      new_edge->probability = probability;\n+      new_edge->count = count;\n \n       /* Redirect old edge.  */\n       redirect_edge_pred (e, jump_block);\n       e->probability = REG_BR_PROB_BASE;\n \n+      /* If asm goto has any label refs to target's label,\n+\t add also edge from asm goto bb to target.  */\n+      if (asm_goto_edge)\n+\t{\n+\t  new_edge->probability /= 2;\n+\t  new_edge->count /= 2;\n+\t  jump_block->count /= 2;\n+\t  jump_block->frequency /= 2;\n+\t  new_edge = make_edge (new_edge->src, target,\n+\t\t\t\te->flags & ~EDGE_FALLTHRU);\n+\t  new_edge->probability = probability - probability / 2;\n+\t  new_edge->count = count - count / 2;\n+\t}\n+\n       new_bb = jump_block;\n     }\n   else"}, {"sha": "8db8b22655a28dc11b2e9f019623988a1d6364e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3e6a37b65335d59140b5415cabcb34ca6951371", "patch": "@@ -1,5 +1,8 @@\n 2012-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/51767\n+\t* gcc.c-torture/compile/pr51767.c: New test.\n+\n \tPR middle-end/51768\n \t* c-c++-common/pr51768.c: New test.\n "}, {"sha": "62a192d660d8c13ce4c25ad34496983fa8c90185", "filename": "gcc/testsuite/gcc.c-torture/compile/pr51767.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51767.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e6a37b65335d59140b5415cabcb34ca6951371/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51767.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr51767.c?ref=a3e6a37b65335d59140b5415cabcb34ca6951371", "patch": "@@ -0,0 +1,23 @@\n+/* PR rtl-optimization/51767 */\n+\n+extern void fn1 (void), fn2 (void);\n+\n+static inline __attribute__((always_inline)) int\n+foo (int *x, long y)\n+{\n+  asm goto (\"\" : : \"r\" (x), \"r\" (y) : \"memory\" : lab);\n+  return 0;\n+lab:\n+  return 1;\n+}\n+\n+void\n+bar (int *x)\n+{\n+  if (foo (x, 23))\n+    fn1 ();\n+  else\n+    fn2 ();\n+\n+  foo (x, 2);\n+}"}]}