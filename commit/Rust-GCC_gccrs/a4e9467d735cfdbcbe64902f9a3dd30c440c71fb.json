{"sha": "a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlOTQ2N2Q3MzVjZmRiY2JlNjQ5MDJmOWEzZGQzMGM0NDBjNzFmYg==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2004-03-10T05:07:45Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-03-10T05:07:45Z"}, "message": "re PR bootstrap/12371 ([m68k-linux] bootstrap error in make compare)\n\n2004-03-10  Roman Zippel  <zippel@linux-m68k.org>\n\n        PR bootstrap/12371\n        * config/m68k/m68k.h (FIXED_REGISTERS): Add arg pointer.\n        (CALL_USED_REGISTERS): Likewise.\n        (REG_CLASS_CONTENTS): Likewise.\n        (REG_ALLOC_ORDER): New.\n        (REGNO_REG_CLASS): Use regno_reg_class.\n        * config/m68k/m68k.c: Add regno_reg_class array.\n\nFrom-SVN: r79221", "tree": {"sha": "d1fc766b33ad920f22ec9e64af6ea45acac2a805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1fc766b33ad920f22ec9e64af6ea45acac2a805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/comments", "author": null, "committer": null, "parents": [{"sha": "9aec7fb4a9fb06a694b629ca63690d92ba32060b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aec7fb4a9fb06a694b629ca63690d92ba32060b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aec7fb4a9fb06a694b629ca63690d92ba32060b"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "e6a791c8c6ac0be81adf8fc733d368c852aa6a6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "patch": "@@ -1,3 +1,13 @@\n+2004-03-10  Roman Zippel  <zippel@linux-m68k.org>\n+\n+\tPR bootstrap/12371\n+\t* config/m68k/m68k.h (FIXED_REGISTERS): Add arg pointer.\n+\t(CALL_USED_REGISTERS): Likewise.\n+        (REG_CLASS_CONTENTS): Likewise.\n+\t(REG_ALLOC_ORDER): New.\n+\t(REGNO_REG_CLASS): Use regno_reg_class.\n+\t* config/m68k/m68k.c: Add regno_reg_class array.\n+\n 2004-03-09  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.md (divsi3): Fix algorithm."}, {"sha": "69a62a6ee446eee192e882fc0502f94e52dbbd9d", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "patch": "@@ -44,6 +44,18 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"flags.h\"\n \n+enum reg_class regno_reg_class[] =\n+{\n+  DATA_REGS, DATA_REGS, DATA_REGS, DATA_REGS,\n+  DATA_REGS, DATA_REGS, DATA_REGS, DATA_REGS,\n+  ADDR_REGS, ADDR_REGS, ADDR_REGS, ADDR_REGS,\n+  ADDR_REGS, ADDR_REGS, ADDR_REGS, ADDR_REGS,\n+  FP_REGS, FP_REGS, FP_REGS, FP_REGS,\n+  FP_REGS, FP_REGS, FP_REGS, FP_REGS,\n+  ADDR_REGS\n+};\n+\n+\n /* The ASM_DOT macro allows easy string pasting to handle the differences\n    between MOTOROLA and MIT syntaxes in asm_fprintf(), which doesn't\n    support the %. option.  */"}, {"sha": "83ff83e3b2e9388834f079763f1223decf48d32b", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e9467d735cfdbcbe64902f9a3dd30c440c71fb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=a4e9467d735cfdbcbe64902f9a3dd30c440c71fb", "patch": "@@ -486,7 +486,10 @@ extern int target_flags;\n                                \\\n   /* Floating point registers  \\\n      (if available).  */       \\\n-  0, 0, 0, 0, 0, 0, 0, 0 }\n+  0, 0, 0, 0, 0, 0, 0, 0,      \\\n+                               \\\n+  /* Arg pointer.  */          \\\n+  1 }\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -497,7 +500,18 @@ extern int target_flags;\n #define CALL_USED_REGISTERS \\\n  {1, 1, 0, 0, 0, 0, 0, 0,   \\\n   1, 1, 0, 0, 0, 0, 0, 1,   \\\n-  1, 1, 0, 0, 0, 0, 0, 0 }\n+  1, 1, 0, 0, 0, 0, 0, 0, 1 }\n+\n+#define REG_ALLOC_ORDER\t\t\\\n+{ /* d0/d1/a0/a1 */\t\t\\\n+  0, 1, 8, 9,\t\t\t\\\n+  /* d2-d7 */\t\t\t\\\n+  2, 3, 4, 5, 6, 7,\t\t\\\n+  /* a2-a7/arg */\t\t\\\n+  10, 11, 12, 13, 14, 15, 24,\t\\\n+  /* fp0-fp7 */\t\t\t\\\n+  16, 17, 18, 19, 20, 21, 22, 23\\\n+}\n \n \n /* Make sure everything's fine if we *don't* have a given processor.\n@@ -636,20 +650,21 @@ enum reg_class {\n {\t\t\t\t\t\\\n   {0x00000000},  /* NO_REGS */\t\t\\\n   {0x000000ff},  /* DATA_REGS */\t\\\n-  {0x0000ff00},  /* ADDR_REGS */\t\\\n+  {0x0100ff00},  /* ADDR_REGS */\t\\\n   {0x00ff0000},  /* FP_REGS */\t\t\\\n-  {0x0000ffff},  /* GENERAL_REGS */\t\\\n+  {0x0100ffff},  /* GENERAL_REGS */\t\\\n   {0x00ff00ff},  /* DATA_OR_FP_REGS */\t\\\n-  {0x00ffff00},  /* ADDR_OR_FP_REGS */\t\\\n-  {0x00ffffff},  /* ALL_REGS */\t\t\\\n+  {0x01ffff00},  /* ADDR_OR_FP_REGS */\t\\\n+  {0x01ffffff},  /* ALL_REGS */\t\t\\\n }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO) (((REGNO)>>3)+1)\n+extern enum reg_class regno_reg_class[];\n+#define REGNO_REG_CLASS(REGNO) (regno_reg_class[(REGNO)])\n \n /* The class value for index registers, and the one for base regs.  */\n "}]}