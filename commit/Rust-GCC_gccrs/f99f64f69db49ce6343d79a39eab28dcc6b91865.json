{"sha": "f99f64f69db49ce6343d79a39eab28dcc6b91865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5ZjY0ZjY5ZGI0OWNlNjM0M2Q3OWEzOWVhYjI4ZGNjNmI5MTg2NQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-04-14T17:21:40Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-04-14T17:22:41Z"}, "message": "[PR100066] Check paradoxical subreg when splitting hard reg live range\n\nWhen splitting live range of a hard reg, LRA actually split multi-register\ncontaining the hard reg.  So we need to check the biggest used mode of the hard reg on\nparadoxical subregister when the natural and the biggest\nmode are ordered.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/100066\n\t* lra-constraints.c (split_reg): Check paradoxical_subreg_p for\n\tordered modes when choosing splitting mode for hard reg.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/100066\n\t* gcc.target/i386/pr100066.c: New.", "tree": {"sha": "a95377d136f83e701a5aadea095055ffd5bff60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a95377d136f83e701a5aadea095055ffd5bff60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99f64f69db49ce6343d79a39eab28dcc6b91865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99f64f69db49ce6343d79a39eab28dcc6b91865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99f64f69db49ce6343d79a39eab28dcc6b91865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99f64f69db49ce6343d79a39eab28dcc6b91865/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785209fc464ee3efec2b2a8e8244b7292c251ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785209fc464ee3efec2b2a8e8244b7292c251ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785209fc464ee3efec2b2a8e8244b7292c251ad8"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "9425f2d7e73920c9543f28c19bf0e680ea742497", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99f64f69db49ce6343d79a39eab28dcc6b91865/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99f64f69db49ce6343d79a39eab28dcc6b91865/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f99f64f69db49ce6343d79a39eab28dcc6b91865", "patch": "@@ -5797,10 +5797,14 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n       mode = lra_reg_info[hard_regno].biggest_mode;\n       machine_mode reg_rtx_mode = GET_MODE (regno_reg_rtx[hard_regno]);\n       /* A reg can have a biggest_mode of VOIDmode if it was only ever seen as\n-\t part of a multi-word register.  In that case, just use the reg_rtx.\n-\t Otherwise, limit the size to that of the biggest access in the\n-\t function.  */\n-      if (mode == VOIDmode)\n+\t part of a multi-word register.  In that case, just use the reg_rtx\n+\t mode.  Do the same also if the biggest mode was larger than a register\n+\t or we can not compare the modes.  Otherwise, limit the size to that of\n+\t the biggest access in the function.  */\n+      if (mode == VOIDmode\n+\t  || !ordered_p (GET_MODE_PRECISION (mode),\n+\t\t\t GET_MODE_PRECISION (reg_rtx_mode))\n+\t  || paradoxical_subreg_p (mode, reg_rtx_mode))\n \t{\n \t  original_reg = regno_reg_rtx[hard_regno];\n \t  mode = reg_rtx_mode;"}, {"sha": "a795864e172bd822e0a6d43064a266aae813d3ba", "filename": "gcc/testsuite/gcc.target/i386/pr100066.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99f64f69db49ce6343d79a39eab28dcc6b91865/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100066.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99f64f69db49ce6343d79a39eab28dcc6b91865/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100066.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100066.c?ref=f99f64f69db49ce6343d79a39eab28dcc6b91865", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { int128 } } } */\n+/* { dg-options \"-O1 -w\" } */\n+int pm;\n+\n+void\n+w3 (int, int, int);\n+\n+void\n+e6 (__int128 rt, long int mo)\n+{\n+  mo += rt / 0;\n+  w3 (pm / mo, pm, 0);\n+}"}]}