{"sha": "0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2YmY0OGMzZWEzYjQ4ZjQ2MmJlOTQ0ZTQ2Y2VkNGJmM2YwODg4NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-05-09T07:01:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-05-09T07:01:39Z"}, "message": "cgraphbuild.c (build_cgraph_edges): Do not finalize vars with VALUE_EXPR.\n\n\n\t* cgraphbuild.c (build_cgraph_edges): Do not finalize vars\n\twith VALUE_EXPR.\n\t* cgraph.h (varpool_can_remove_if_no_refs): Vars with VALUE_EXPR\n\tare removable.\n\t* toplev.c (wrapup_global_declaration_2): Vars with VALUE_EXPR\n\tneed to wrapup.\n\t(compile_file): Do not output variables.\n\t* cgraphbuild.c (varpool_finalize_decl): When var is finalized late,\n\toutput it.\n\t* langhooks.c: Include timevar.h\n\t(write_global_declarations): Finalize compilation unit after wrapup;\n\tset timevars correctly.\n\t* passes.c (rest_of_decl_compilation): Decls with VALUE_EXPR needs\n\tnot to be added to varpool.\n\t* varpool.c (varpool_assemble_decl): Sanity check that we are called\n\tonly on cases where it makes sense; skip constant pool and value expr\n\tvars.\n\n\t* lto.c (do_whole_program_analysis): Set timevars correctly.\n\t(lto_main): Likewise.\n\t\n\t* trans-common.c (create_common): Do not fake TREE_ASM_WRITTEN.\n\t* trans-decl.c (gfc_finish_cray_pointee): Likewise.\n\nFrom-SVN: r187314", "tree": {"sha": "e597dfea9b0d87794f19fd362d4d0233467a72af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e597dfea9b0d87794f19fd362d4d0233467a72af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/comments", "author": null, "committer": null, "parents": [{"sha": "36e0c0a5157a20eda403d230392327c73a9b9e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e0c0a5157a20eda403d230392327c73a9b9e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e0c0a5157a20eda403d230392327c73a9b9e12"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "4d154702361c9382d6a818254edffb3344b3fe4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -1,3 +1,23 @@\n+2012-05-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphbuild.c (build_cgraph_edges): Do not finalize vars\n+\twith VALUE_EXPR.\n+\t* cgraph.h (varpool_can_remove_if_no_refs): Vars with VALUE_EXPR\n+\tare removable.\n+\t* toplev.c (wrapup_global_declaration_2): Vars with VALUE_EXPR\n+\tneed to wrapup.\n+\t(compile_file): Do not output variables.\n+\t* cgraphbuild.c (varpool_finalize_decl): When var is finalized late,\n+\toutput it.\n+\t* langhooks.c: Include timevar.h\n+\t(write_global_declarations): Finalize compilation unit after wrapup;\n+\tset timevars correctly.\n+\t* passes.c (rest_of_decl_compilation): Decls with VALUE_EXPR needs\n+\tnot to be added to varpool.\n+\t* varpool.c (varpool_assemble_decl): Sanity check that we are called\n+\tonly on cases where it makes sense; skip constant pool and value expr\n+\tvars.\n+\n 2012-05-08  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/linux.h (LINK_SPEC): Don't pass \"-Y\" option."}, {"sha": "ca8650d4d8f719bff2b0185d4abfebf61eaaa63a", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -1126,6 +1126,7 @@ varpool_can_remove_if_no_refs (struct varpool_node *node)\n   return (!node->symbol.force_output && !node->symbol.used_from_other_partition\n   \t  && (DECL_COMDAT (node->symbol.decl)\n \t  || !node->symbol.externally_visible\n+\t  || DECL_HAS_VALUE_EXPR_P (node->symbol.decl)\n \t  || DECL_EXTERNAL (node->symbol.decl)));\n }\n "}, {"sha": "ea5351342c076c1c04ca35af6ffd0719cbafa418", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -356,7 +356,8 @@ build_cgraph_edges (void)\n   /* Look for initializers of constant variables and private statics.  */\n   FOR_EACH_LOCAL_DECL (cfun, ix, decl)\n     if (TREE_CODE (decl) == VAR_DECL\n-\t&& (TREE_STATIC (decl) && !DECL_EXTERNAL (decl)))\n+\t&& (TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n+\t&& !DECL_HAS_VALUE_EXPR_P (decl))\n       varpool_finalize_decl (decl);\n   record_eh_tables (node, cfun);\n "}, {"sha": "781ca4bda5ffcb2f732aa81b262f66ed15ac6de1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -834,6 +834,10 @@ varpool_finalize_decl (tree decl)\n     enqueue_node ((symtab_node)node);\n   if (cgraph_state >= CGRAPH_STATE_IPA_SSA)\n     varpool_analyze_node (node);\n+  /* Some frontends produce various interface variables after compilation\n+     finished.  */\n+  if (cgraph_state == CGRAPH_STATE_FINISHED)\n+    varpool_assemble_decl (node);\n }\n \n /* Discover all functions and variables that are trivially needed, analyze"}, {"sha": "b26b5c72735309364393547a0413b4935ff044b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -1,3 +1,8 @@\n+2012-05-08  Jan Hubicka  <jh@suse.cz>\n+\t\n+\t* trans-common.c (create_common): Do not fake TREE_ASM_WRITTEN.\n+\t* trans-decl.c (gfc_finish_cray_pointee): Likewise.\n+\n 2012-05-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53255"}, {"sha": "ce7114fb88dc8879c031dfaa12ca378576a934d6", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -697,8 +697,6 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n \tDECL_IGNORED_P (var_decl) = 1;\n       if (s->sym->attr.target)\n \tTREE_ADDRESSABLE (var_decl) = 1;\n-      /* This is a fake variable just for debugging purposes.  */\n-      TREE_ASM_WRITTEN (var_decl) = 1;\n       /* Fake variables are not visible from other translation units. */\n       TREE_PUBLIC (var_decl) = 0;\n "}, {"sha": "b03d393aa8e77d3b9516b6cb47f6d149c9d0af4c", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -457,8 +457,6 @@ gfc_finish_cray_pointee (tree decl, gfc_symbol *sym)\n   SET_DECL_VALUE_EXPR (decl, value);\n   DECL_HAS_VALUE_EXPR_P (decl) = 1;\n   GFC_DECL_CRAY_POINTEE (decl) = 1;\n-  /* This is a fake variable just for debugging purposes.  */\n-  TREE_ASM_WRITTEN (decl) = 1;\n }\n \n "}, {"sha": "340cc99fa2925691bb77f397eba1306fe62cdb0b", "filename": "gcc/langhooks.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree-diagnostic.h\"\n #include \"cgraph.h\"\n+#include \"timevar.h\"\n #include \"output.h\"\n \n /* Do nothing; in many cases the default hook.  */\n@@ -298,10 +299,7 @@ write_global_declarations (void)\n   tree globals, decl, *vec;\n   int len, i;\n \n-  /* This lang hook is dual-purposed, and also finalizes the\n-     compilation unit.  */\n-  finalize_compilation_unit ();\n-\n+  timevar_start (TV_PHASE_DEFERRED);\n   /* Really define vars that have had only a tentative definition.\n      Really output inline functions that must actually be callable\n      and have not been output so far.  */\n@@ -318,7 +316,17 @@ write_global_declarations (void)\n \n   wrapup_global_declarations (vec, len);\n   check_global_declarations (vec, len);\n+  timevar_stop (TV_PHASE_DEFERRED);\n+\n+  timevar_start (TV_PHASE_CGRAPH);\n+  /* This lang hook is dual-purposed, and also finalizes the\n+     compilation unit.  */\n+  finalize_compilation_unit ();\n+  timevar_stop (TV_PHASE_CGRAPH);\n+\n+  timevar_start (TV_PHASE_CHECK_DBGINFO);\n   emit_debug_global_declarations (vec, len);\n+  timevar_stop (TV_PHASE_CHECK_DBGINFO);\n \n   /* Clean up.  */\n   free (vec);"}, {"sha": "4be2f2b04c538082634e95c05bfd578ab11306f3", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -1,3 +1,8 @@\n+2012-05-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c (do_whole_program_analysis): Set timevars correctly.\n+\t(lto_main): Likewise.\n+\t\n 2012-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* lang.opt (fwpa): Do not mark as Optimization."}, {"sha": "00f623f6a0d61b549d7f1420959a4fcd4546877e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -1958,6 +1958,7 @@ materialize_cgraph (void)\n static void\n do_whole_program_analysis (void)\n {\n+  timevar_start (TV_PHASE_CGRAPH);\n   /* Note that since we are in WPA mode, materialize_cgraph will not\n      actually read in all the function bodies.  It only materializes\n      the decls and cgraph nodes so that analysis can be performed.  */\n@@ -2017,6 +2018,7 @@ do_whole_program_analysis (void)\n       dump_memory_report (false);\n     }\n \n+  timevar_stop (TV_PHASE_CGRAPH);\n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report)\n     print_lto_report ();\n@@ -2116,7 +2118,9 @@ lto_main (void)\n \n \t  /* Let the middle end know that we have read and merged all of\n \t     the input files.  */ \n+\t  timevar_start (TV_PHASE_CGRAPH);\n \t  compile ();\n+\t  timevar_stop (TV_PHASE_CGRAPH);\n \n \t  /* FIXME lto, if the processes spawned by WPA fail, we miss\n \t     the chance to print WPA's report, so WPA will call"}, {"sha": "c90c2231d7c354b89eb7c1a5975d3718100c9084", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -186,6 +186,7 @@ rest_of_decl_compilation (tree decl,\n       if ((at_end\n \t   || !DECL_DEFER_OUTPUT (decl)\n \t   || DECL_INITIAL (decl))\n+\t  && (TREE_CODE (decl) != VAR_DECL || !DECL_HAS_VALUE_EXPR_P (decl))\n \t  && !DECL_EXTERNAL (decl))\n \t{\n \t  /* When reading LTO unit, we also read varpool, so do not"}, {"sha": "90b22466a9196379bb29a80cd6c5d13726326134", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -364,7 +364,8 @@ wrapup_global_declaration_1 (tree decl)\n bool\n wrapup_global_declaration_2 (tree decl)\n {\n-  if (TREE_ASM_WRITTEN (decl) || DECL_EXTERNAL (decl))\n+  if (TREE_ASM_WRITTEN (decl) || DECL_EXTERNAL (decl)\n+      || (TREE_CODE (decl) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (decl)))\n     return false;\n \n   /* Don't write out static consts, unless we still need them.\n@@ -576,7 +577,6 @@ compile_file (void)\n      basically finished.  */\n   if (in_lto_p || !flag_lto || flag_fat_lto_objects)\n     {\n-      varpool_output_variables ();\n       finish_aliases_2 ();\n \n       /* Likewise for mudflap static object registrations.  */"}, {"sha": "5ab294bcd161c022d1b3fed6547c049fc9dd6931", "filename": "gcc/varpool.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d6bf48c3ea3b48f462be944e46ced4bf3f08884/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=0d6bf48c3ea3b48f462be944e46ced4bf3f08884", "patch": "@@ -269,24 +269,42 @@ assemble_aliases (struct varpool_node *node)\n }\n \n /* Output one variable, if necessary.  Return whether we output it.  */\n+\n bool\n varpool_assemble_decl (struct varpool_node *node)\n {\n   tree decl = node->symbol.decl;\n \n-  if (!TREE_ASM_WRITTEN (decl)\n-      && !node->alias\n-      && !node->symbol.in_other_partition\n-      && !DECL_EXTERNAL (decl)\n-      && (TREE_CODE (decl) != VAR_DECL || !DECL_HAS_VALUE_EXPR_P (decl)))\n+  /* Aliases are outout when their target is produced or by\n+     output_weakrefs.  */\n+  if (node->alias)\n+    return false;\n+\n+  /* Constant pool is output from RTL land when the reference\n+     survive till this level.  */\n+  if (DECL_IN_CONSTANT_POOL (decl))\n+    return false;\n+\n+  /* Decls with VALUE_EXPR should not be in the varpool at all.  They\n+     are not real variables, but just info for debugging and codegen.\n+     Unfortunately at the moment emutls is not updating varpool correctly\n+     after turning real vars into value_expr vars.  */\n+  if (DECL_HAS_VALUE_EXPR_P (decl)\n+      && !targetm.have_tls)\n+    return false;\n+\n+  gcc_checking_assert (!TREE_ASM_WRITTEN (decl)\n+\t\t       && TREE_CODE (decl) == VAR_DECL\n+\t\t       && !DECL_HAS_VALUE_EXPR_P (decl));\n+\n+  if (!node->symbol.in_other_partition\n+      && !DECL_EXTERNAL (decl))\n     {\n       assemble_variable (decl, 0, 1, 0);\n-      if (TREE_ASM_WRITTEN (decl))\n-\t{\n-\t  node->finalized = 1;\n-\t  assemble_aliases (node);\n-\t  return true;\n-\t}\n+      gcc_assert (TREE_ASM_WRITTEN (decl));\n+      node->finalized = 1;\n+      assemble_aliases (node);\n+      return true;\n     }\n \n   return false;"}]}