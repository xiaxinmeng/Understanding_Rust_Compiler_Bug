{"sha": "37074a02aee862ae15867e40aa5a12db616657b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwNzRhMDJhZWU4NjJhZTE1ODY3ZTQwYWE1YTEyZGI2MTY2NTdiNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-09T07:34:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-09T07:34:16Z"}, "message": "re PR lto/61886 (LTO breaks fread with _FORTIFY_SOURCE=2)\n\n\n\tPR ipa/61886\n\tPR middle-end/25140\n\t* ipa-reference.c (is_improper): Break out from ...\n\t(is_proper_for_analysis): ... here; fix WRT aliases.\n\t(analyze_function, generate_summary,\n\tipa_reference_write_optimization_summary,\n\tipa_reference_read_optimization_summary): Use ipa_reference_var_uid.\n\t* ipa-refrence.h (ipa_reference_var_uid): New inline.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1,\n\tcall_may_clobber_ref_p_1): Use ipa_reference_var_uid.\n\n\t* gcc.c-torture/execute/alias-3.c: New testcase.\n\nFrom-SVN: r231442", "tree": {"sha": "a589b3f752ddc9ef0c99801a8a2355889655a259", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a589b3f752ddc9ef0c99801a8a2355889655a259"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37074a02aee862ae15867e40aa5a12db616657b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37074a02aee862ae15867e40aa5a12db616657b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37074a02aee862ae15867e40aa5a12db616657b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37074a02aee862ae15867e40aa5a12db616657b6/comments", "author": null, "committer": null, "parents": [{"sha": "04d2fbcc5fa0a0464e847d1bf3faeb83d67711c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d2fbcc5fa0a0464e847d1bf3faeb83d67711c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d2fbcc5fa0a0464e847d1bf3faeb83d67711c2"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "be98cdc58930819b0d1f68115113d14ba24b2108", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=37074a02aee862ae15867e40aa5a12db616657b6", "patch": "@@ -167,8 +167,8 @@ set_reference_optimization_summary (struct cgraph_node *node,\n   ipa_reference_opt_sum_vector[node->uid] = info;\n }\n \n-/* Return a bitmap indexed by DECL_UID for the static variables that\n-   are *not* read during the execution of the function FN.  Returns\n+/* Return a bitmap indexed by ipa_reference_var_uid for the static variables\n+   that are *not* read during the execution of the function FN.  Returns\n    NULL if no data is available.  */\n \n bitmap\n@@ -187,8 +187,8 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n     return NULL;\n }\n \n-/* Return a bitmap indexed by DECL_UID for the static variables that\n-   are *not* written during the execution of the function FN.  Note\n+/* Return a bitmap indexed by ipa_reference_var_uid for the static variables\n+   that are *not* written during the execution of the function FN.  Note\n    that variables written may or may not be read during the function\n    call.  Returns NULL if no data is available.  */\n \n@@ -207,40 +207,51 @@ ipa_reference_get_not_written_global (struct cgraph_node *fn)\n   else\n     return NULL;\n }\n-\n \f\n-/* Return true if the variable T is the right kind of static variable to\n-   perform compilation unit scope escape analysis.  */\n \n-static inline bool\n-is_proper_for_analysis (tree t)\n+/* Hepler for is_proper_for_analysis.  */\n+static bool\n+is_improper (symtab_node *n, void *v ATTRIBUTE_UNUSED)\n {\n+  tree t = n->decl;\n   /* If the variable has the \"used\" attribute, treat it as if it had a\n      been touched by the devil.  */\n   if (DECL_PRESERVE_P (t))\n-    return false;\n+    return true;\n \n   /* Do not want to do anything with volatile except mark any\n      function that uses one to be not const or pure.  */\n   if (TREE_THIS_VOLATILE (t))\n-    return false;\n+    return true;\n \n   /* We do not need to analyze readonly vars, we already know they do not\n      alias.  */\n   if (TREE_READONLY (t))\n-    return false;\n+    return true;\n \n   /* We can not track variables with address taken.  */\n   if (TREE_ADDRESSABLE (t))\n-    return false;\n+    return true;\n \n-  /* TODO: We could track public variables that are not addressable, but currently\n-     frontends don't give us those.  */\n+  /* TODO: We could track public variables that are not addressable, but\n+     currently frontends don't give us those.  */\n   if (TREE_PUBLIC (t))\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return true if the variable T is the right kind of static variable to\n+   perform compilation unit scope escape analysis.  */\n+\n+static inline bool\n+is_proper_for_analysis (tree t)\n+{\n+  if (bitmap_bit_p (ignore_module_statics, ipa_reference_var_uid (t)))\n     return false;\n \n-  /* TODO: Check aliases.  */\n-  if (bitmap_bit_p (ignore_module_statics, DECL_UID (t)))\n+  if (symtab_node::get (t)\n+\t->call_for_symbol_and_aliases (is_improper, NULL, true))\n     return false;\n \n   return true;\n@@ -452,21 +463,22 @@ analyze_function (struct cgraph_node *fn)\n       /* This is a variable we care about.  Check if we have seen it\n \t before, and if not add it the set of variables we care about.  */\n       if (all_module_statics\n-\t  && bitmap_set_bit (all_module_statics, DECL_UID (var)))\n+\t  && bitmap_set_bit (all_module_statics, ipa_reference_var_uid (var)))\n \t{\n \t  if (dump_file)\n \t    splay_tree_insert (reference_vars_to_consider,\n-\t\t\t       DECL_UID (var), (splay_tree_value)var);\n+\t\t\t       ipa_reference_var_uid (var),\n+\t\t\t       (splay_tree_value)var);\n \t}\n       switch (ref->use)\n \t{\n \tcase IPA_REF_LOAD:\n-          bitmap_set_bit (local->statics_read, DECL_UID (var));\n+          bitmap_set_bit (local->statics_read, ipa_reference_var_uid (var));\n \t  break;\n \tcase IPA_REF_STORE:\n \t  if (ref->cannot_lead_to_return ())\n \t    break;\n-          bitmap_set_bit (local->statics_written, DECL_UID (var));\n+          bitmap_set_bit (local->statics_written, ipa_reference_var_uid (var));\n \t  break;\n \tcase IPA_REF_ADDR:\n \t  break;\n@@ -547,7 +559,7 @@ generate_summary (void)\n \t    var = ref->referred->decl;\n \t    if (!is_proper_for_analysis (var))\n \t      continue;\n-\t    bitmap_set_bit (ignore_module_statics, DECL_UID (var));\n+\t    bitmap_set_bit (ignore_module_statics, ipa_reference_var_uid (var));\n \t  }\n       }\n   FOR_EACH_DEFINED_FUNCTION (node)\n@@ -975,13 +987,15 @@ ipa_reference_write_optimization_summary (void)\n       symtab_node *snode = lto_symtab_encoder_deref (encoder, i);\n       varpool_node *vnode = dyn_cast <varpool_node *> (snode);\n       if (vnode\n-\t  && bitmap_bit_p (all_module_statics, DECL_UID (vnode->decl))\n+\t  && bitmap_bit_p (all_module_statics,\n+\t\t\t    ipa_reference_var_uid (vnode->decl))\n \t  && referenced_from_this_partition_p (vnode, encoder))\n \t{\n \t  tree decl = vnode->decl;\n-\t  bitmap_set_bit (ltrans_statics, DECL_UID (decl));\n+\t  bitmap_set_bit (ltrans_statics, ipa_reference_var_uid (decl));\n \t  splay_tree_insert (reference_vars_to_consider,\n-\t\t\t     DECL_UID (decl), (splay_tree_value)decl);\n+\t\t\t     ipa_reference_var_uid (decl),\n+\t\t\t     (splay_tree_value)decl);\n \t  ltrans_statics_bitcount ++;\n \t}\n     }\n@@ -1067,7 +1081,8 @@ ipa_reference_read_optimization_summary (void)\n \t      unsigned int var_index = streamer_read_uhwi (ib);\n \t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n \t\t\t\t\t\t\t     var_index);\n-\t      bitmap_set_bit (all_module_statics, DECL_UID (v_decl));\n+\t      bitmap_set_bit (all_module_statics,\n+\t\t\t      ipa_reference_var_uid (v_decl));\n \t      if (dump_file)\n \t\tfprintf (dump_file, \" %s\", fndecl_name (v_decl));\n \t    }\n@@ -1107,7 +1122,8 @@ ipa_reference_read_optimization_summary (void)\n \t\t    unsigned int var_index = streamer_read_uhwi (ib);\n \t\t    tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n \t\t\t\t\t\t\t\t   var_index);\n-\t\t    bitmap_set_bit (info->statics_not_read, DECL_UID (v_decl));\n+\t\t    bitmap_set_bit (info->statics_not_read,\n+\t\t\t\t    ipa_reference_var_uid (v_decl));\n \t\t    if (dump_file)\n \t\t      fprintf (dump_file, \" %s\", fndecl_name (v_decl));\n \t\t  }\n@@ -1129,7 +1145,8 @@ ipa_reference_read_optimization_summary (void)\n \t\t    unsigned int var_index = streamer_read_uhwi (ib);\n \t\t    tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n \t\t\t\t\t\t\t\t   var_index);\n-\t\t    bitmap_set_bit (info->statics_not_written, DECL_UID (v_decl));\n+\t\t    bitmap_set_bit (info->statics_not_written,\n+\t\t\t\t    ipa_reference_var_uid (v_decl));\n \t\t    if (dump_file)\n \t\t      fprintf (dump_file, \" %s\", fndecl_name (v_decl));\n \t\t  }"}, {"sha": "6e9d6e700170cc4d1d701d56270d454f707c5e58", "filename": "gcc/ipa-reference.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Fipa-reference.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Fipa-reference.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.h?ref=37074a02aee862ae15867e40aa5a12db616657b6", "patch": "@@ -26,5 +26,11 @@ bitmap ipa_reference_get_not_read_global (struct cgraph_node *fn);\n bitmap ipa_reference_get_not_written_global (struct cgraph_node *fn);\n void ipa_reference_c_finalize (void);\n \n+inline int\n+ipa_reference_var_uid (tree t)\n+{\n+  return DECL_UID (symtab_node::get (t)->ultimate_alias_target (NULL)->decl);\n+}\n+\n #endif  /* GCC_IPA_REFERENCE_H  */\n "}, {"sha": "68d9a2dcff416fd4a634b95f11993ae53452263d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37074a02aee862ae15867e40aa5a12db616657b6", "patch": "@@ -1,3 +1,9 @@\n+2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/61886\n+\tPR middle-end/25140\n+\t* gcc.c-torture/execute/alias-3.c: New testcase.\n+\n 2015-12-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/68711"}, {"sha": "9bae2689271a27e869ee44caeb805da7ed210c5d", "filename": "gcc/testsuite/gcc.c-torture/execute/alias-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-3.c?ref=37074a02aee862ae15867e40aa5a12db616657b6", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-alias \"\" } */\n+static int a=0;\n+extern int b __attribute__ ((alias(\"a\")));\n+__attribute__ ((noinline))\n+static inc()\n+{\n+  b++;\n+}\n+int\n+main()\n+{\n+  a=0;\n+  inc ();\n+  if (a!=1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "c859e3fcedfa17ebb7b7695bc4b184f000d5a573", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37074a02aee862ae15867e40aa5a12db616657b6/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=37074a02aee862ae15867e40aa5a12db616657b6", "patch": "@@ -1739,15 +1739,21 @@ ref_maybe_used_by_call_p_1 (gcall *call, ao_ref *ref)\n       && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n-      bitmap not_read;\n \n       /* FIXME: Callee can be an OMP builtin that does not have a call graph\n \t node yet.  We should enforce that there are nodes for all decls in the\n \t IL and remove this check instead.  */\n-      if (node\n-\t  && (not_read = ipa_reference_get_not_read_global (node))\n-\t  && bitmap_bit_p (not_read, DECL_UID (base)))\n-\tgoto process_args;\n+      if (node)\n+\t{\n+\t  enum availability avail;\n+\t  bitmap not_read;\n+\n+\t  node = node->ultimate_alias_target (&avail);\n+\t  if (avail >= AVAIL_AVAILABLE\n+\t      && (not_read = ipa_reference_get_not_read_global (node))\n+\t      && bitmap_bit_p (not_read, ipa_reference_var_uid (base)))\n+\t    goto process_args;\n+\t}\n     }\n \n   /* Check if the base variable is call-used.  */\n@@ -2128,12 +2134,18 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref)\n       && TREE_STATIC (base))\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n-      bitmap not_written;\n \n-      if (node\n-\t  && (not_written = ipa_reference_get_not_written_global (node))\n-\t  && bitmap_bit_p (not_written, DECL_UID (base)))\n-\treturn false;\n+      if (node)\n+\t{\n+\t  bitmap not_written;\n+\t  enum availability avail;\n+\n+\t  node = node->ultimate_alias_target (&avail);\n+\t  if (avail >= AVAIL_AVAILABLE\n+\t      && (not_written = ipa_reference_get_not_written_global (node))\n+\t      && bitmap_bit_p (not_written, ipa_reference_var_uid (base)))\n+\t    return false;\n+\t}\n     }\n \n   /* Check if the base variable is call-clobbered.  */"}]}