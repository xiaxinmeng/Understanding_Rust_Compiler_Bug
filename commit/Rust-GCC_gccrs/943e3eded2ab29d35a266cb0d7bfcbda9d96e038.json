{"sha": "943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzZTNlZGVkMmFiMjlkMzVhMjY2Y2IwZDdiZmNiZGE5ZDk2ZTAzOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-12-22T03:34:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-12-22T03:34:55Z"}, "message": "re PR c++/18378 (ICE when returning a copy of a packed member)\n\n\tPR c++/18378\n\t* call.c (convert_like_real): Do not permit the use of a copy\n\tconstructor to copy a packed field.\n\n\tPR c++/17413\n\t* decl.c (grokdeclarator): Return error_mark_node, not\n\tvoid_type_node, to indicate errors.\n\t* parser.c (cp_parser_template_parameter_list): Robustify.\n\t(cp_parser_template_parameter): Likewise.\n\n\tPR c++/19034\n\t* tree.c (cp_tree_equal): Handle OVERLOAD.\n\n\tPR c++/18378\n\t* g++.dg/ext/packed8.C: New test.\n\n\tPR c++/13268\n\t* g++.dg/template/crash31.C: New test.\n\n\tPR c++/19034\n\t* g++.dg/template/crash30.C: New test.\n\nFrom-SVN: r92486", "tree": {"sha": "3c4219827d7473d470169c52b58780a7e3078422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c4219827d7473d470169c52b58780a7e3078422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/comments", "author": null, "committer": null, "parents": [{"sha": "be99edf8839b914004bc3f96f5acdc515198db86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be99edf8839b914004bc3f96f5acdc515198db86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be99edf8839b914004bc3f96f5acdc515198db86"}], "stats": {"total": 117, "additions": 102, "deletions": 15}, "files": [{"sha": "d28a020523ac7815becb9ccd5c0f8e137e8fae2d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -1,3 +1,18 @@\n+2004-12-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18378\n+\t* call.c (convert_like_real): Do not permit the use of a copy\n+\tconstructor to copy a packed field.\n+\n+\tPR c++/17413\n+\t* decl.c (grokdeclarator): Return error_mark_node, not\n+\tvoid_type_node, to indicate errors.\n+\t* parser.c (cp_parser_template_parameter_list): Robustify.\n+\t(cp_parser_template_parameter): Likewise.\n+\n+\tPR c++/19034\n+\t* tree.c (cp_tree_equal): Handle OVERLOAD.\n+\n 2004-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* decl.c (define_label): Use POP_TIMEVAR_AND_RETURN."}, {"sha": "69e06e05d4289df8ee08e7540428c772e42371bb", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -4288,13 +4288,12 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tif (convs->need_temporary_p || !lvalue_p (expr))\n \t  {\n \t    tree type = convs->u.next->type;\n+\t    cp_lvalue_kind lvalue = real_lvalue_p (expr);\n \n \t    if (!CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (ref_type)))\n \t      {\n \t\t/* If the reference is volatile or non-const, we\n \t\t   cannot create a temporary.  */\n-\t\tcp_lvalue_kind lvalue = real_lvalue_p (expr);\n-\t\t\n \t\tif (lvalue & clk_bitfield)\n \t\t  error (\"cannot bind bitfield %qE to %qT\",\n \t\t\t expr, ref_type);\n@@ -4305,6 +4304,20 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t\t  error (\"cannot bind rvalue %qE to %qT\", expr, ref_type);\n \t\treturn error_mark_node;\n \t      }\n+\t    /* If the source is a packed field, and we must use a copy\n+\t       constructor, then building the target expr will require\n+\t       binding the field to the reference parameter to the\n+\t       copy constructor, and we'll end up with an infinite\n+\t       loop.  If we can use a bitwise copy, then we'll be\n+\t       OK.  */\n+\t    if ((lvalue & clk_packed) \n+\t\t&& CLASS_TYPE_P (type) \n+\t\t&& !TYPE_HAS_TRIVIAL_INIT_REF (type))\n+\t      {\n+\t\terror (\"cannot bind packed field %qE to %qT\",\n+\t\t       expr, ref_type);\n+\t\treturn error_mark_node;\n+\t      }\n \t    expr = build_target_expr_with_type (expr, type);\n \t  }\n "}, {"sha": "be1adddb862237cd941e2385726d1d78e1be823c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -6745,7 +6745,7 @@ grokdeclarator (const cp_declarator *declarator,\n       && ! (ctype && !declspecs->any_specifiers_p))\n     {\n       error (\"declaration of %qD as non-function\", dname);\n-      return void_type_node;\n+      return error_mark_node;\n     }\n \n   /* Anything declared one level down from the top level"}, {"sha": "5654f11dcd4520fc3b09a199a1ac898afee80f72", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -8016,9 +8016,10 @@ cp_parser_template_parameter_list (cp_parser* parser)\n       /* Parse the template-parameter.  */\n       parameter = cp_parser_template_parameter (parser, &is_non_type);\n       /* Add it to the list.  */\n-      parameter_list = process_template_parm (parameter_list,\n-\t\t\t\t\t      parameter,\n-\t\t\t\t\t      is_non_type);\n+      if (parameter != error_mark_node)\n+\tparameter_list = process_template_parm (parameter_list,\n+\t\t\t\t\t\tparameter,\n+\t\t\t\t\t\tis_non_type);\n       /* Peek at the next token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n       /* If it's not a `,', we're done.  */\n@@ -8037,15 +8038,17 @@ cp_parser_template_parameter_list (cp_parser* parser)\n      type-parameter\n      parameter-declaration\n \n-   Returns a TREE_LIST.  The TREE_VALUE represents the parameter.  The\n-   TREE_PURPOSE is the default value, if any.  *IS_NON_TYPE is set to\n-   true iff this parameter is a non-type parameter.  */\n+   If all goes well, returns a TREE_LIST.  The TREE_VALUE represents\n+   the parameter.  The TREE_PURPOSE is the default value, if any.\n+   Returns ERROR_MARK_NODE on failure.  *IS_NON_TYPE is set to true\n+   iff this parameter is a non-type parameter.  */\n \n static tree\n cp_parser_template_parameter (cp_parser* parser, bool *is_non_type)\n {\n   cp_token *token;\n   cp_parameter_declarator *parameter_declarator;\n+  tree parm;\n \n   /* Assume it is a type parameter or a template parameter.  */\n   *is_non_type = false;\n@@ -8094,12 +8097,13 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type)\n   parameter_declarator\n      = cp_parser_parameter_declaration (parser, /*template_parm_p=*/true,\n \t\t\t\t\t/*parenthesized_p=*/NULL);\n-  return (build_tree_list\n-\t  (parameter_declarator->default_argument,\n-\t   grokdeclarator (parameter_declarator->declarator,\n-\t\t\t   &parameter_declarator->decl_specifiers,\n-\t\t\t   PARM, /*initialized=*/0,\n-\t\t\t   /*attrlist=*/NULL)));\n+  parm = grokdeclarator (parameter_declarator->declarator,\n+\t\t\t &parameter_declarator->decl_specifiers,\n+\t\t\t PARM, /*initialized=*/0,\n+\t\t\t /*attrlist=*/NULL);\n+  if (parm == error_mark_node)\n+    return error_mark_node;\n+  return build_tree_list (parameter_declarator->default_argument, parm);\n }\n \n /* Parse a type-parameter."}, {"sha": "2b6ef71b0faa6d1431e787e4328289994e2ed79a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -1544,6 +1544,11 @@ cp_tree_equal (tree t1, tree t2)\n \n       return same_type_p (PTRMEM_CST_CLASS (t1), PTRMEM_CST_CLASS (t2));\n \n+    case OVERLOAD:\n+      if (OVL_FUNCTION (t1) != OVL_FUNCTION (t2))\n+\treturn false;\n+      return cp_tree_equal (OVL_CHAIN (t1), OVL_CHAIN (t2));\n+\n     default:\n       break;\n     }"}, {"sha": "74f7374a575a0185129508a69b8085f1b55f9200", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -1,3 +1,14 @@\n+2004-12-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18378\n+\t* g++.dg/ext/packed8.C: New test.\n+\n+\tPR c++/13268\n+\t* g++.dg/template/crash31.C: New test.\n+\t\n+\tPR c++/19034\n+\t* g++.dg/template/crash30.C: New test.\n+\n 2004-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C++/18984"}, {"sha": "a68fa2c8a41dcaf02e3151b15d3b97fa95cc209a", "filename": "gcc/testsuite/g++.dg/ext/packed8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked8.C?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/18378\n+\n+class A\n+{\n+public:\n+  int i;\n+\n+  A() {}\n+  A(const A& a) { i = a.i; }\n+};\n+\n+class B\n+{\n+  A a __attribute__((packed));\n+\n+public:\n+  B() {}\n+  A GetA() { return a; } // { dg-error \"\" }\n+};\n+"}, {"sha": "145b07673e9d73c009e5ac313f2ef9a4efd3e732", "filename": "gcc/testsuite/g++.dg/template/crash30.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash30.C?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/19034\n+\n+template< bool C > struct B\n+{\n+};\n+\n+template<typename S> int foo();\n+template<typename S> int foo1();\n+\n+template<typename T> struct bar : public B <(sizeof(foo<T>()) == 1)>\n+{\n+};\n+\n+template<typename T> struct bar1 : public B <(sizeof(foo1<T>()) == 1)>\n+{\n+};"}, {"sha": "7d66b1b890949cf63989aa2fb04259a5ba4631cf", "filename": "gcc/testsuite/g++.dg/template/crash31.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943e3eded2ab29d35a266cb0d7bfcbda9d96e038/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash31.C?ref=943e3eded2ab29d35a266cb0d7bfcbda9d96e038", "patch": "@@ -0,0 +1,3 @@\n+// PR c++/13268\n+\n+template<operator< struct A {}; // { dg-error \"\" }"}]}