{"sha": "1c31ca71a7923d16e6ccba733edf14db0b399be9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzMWNhNzFhNzkyM2QxNmU2Y2NiYTczM2VkZjE0ZGIwYjM5OWJlOQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-02-11T17:27:00Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-02-11T17:27:00Z"}, "message": "Revert \"Fix PR c++/47172\"\n\ngcc/cp/\n\n\t* pt.c (finish_call_expr, dependent_type_p)\n\t(type_dependent_expression_p): Revert the previous attempt to fix\n\tPR c++/47172.\n\ngcc/testsuite/\n\n    \t* g++.dg/template/inherit6.C: Reverted.\n\nFrom-SVN: r170055", "tree": {"sha": "534e733694d11ce3ec15911bf58220f2af194411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534e733694d11ce3ec15911bf58220f2af194411"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c31ca71a7923d16e6ccba733edf14db0b399be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31ca71a7923d16e6ccba733edf14db0b399be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c31ca71a7923d16e6ccba733edf14db0b399be9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c31ca71a7923d16e6ccba733edf14db0b399be9/comments", "author": null, "committer": null, "parents": [{"sha": "61502ca83754695ad954c8872379ae566f8e21e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61502ca83754695ad954c8872379ae566f8e21e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61502ca83754695ad954c8872379ae566f8e21e9"}], "stats": {"total": 56, "additions": 3, "deletions": 53}, "files": [{"sha": "c3f780abe0494e11994312330d4f25e0d9680f04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c31ca71a7923d16e6ccba733edf14db0b399be9", "patch": "@@ -1,10 +1,3 @@\n-2011-02-11  Dodji Seketeli  <dodji@redhat.com>\n-\n-\tPR c++/47172\n-\t* pt.c (finish_call_expr): Consider a call expression that has a\n-\tdependent \"this\" pointer as being dependent.  Add comments.\n-\t(dependent_type_p, type_dependent_expression_p): Update comments.\n-\n 2011-02-09  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_make_fname_decl): Set DECL_THIS_STATIC at toplevel."}, {"sha": "d59f32a7ea787e19cae8c8302957bace259dbae6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1c31ca71a7923d16e6ccba733edf14db0b399be9", "patch": "@@ -17912,7 +17912,7 @@ dependent_type_p_r (tree type)\n }\n \n /* Returns TRUE if TYPE is dependent, in the sense of\n-   [temp.dep.type].  Note that a NULL type is considered dependent.  */\n+   [temp.dep.type].  */\n \n bool\n dependent_type_p (tree type)\n@@ -18184,10 +18184,7 @@ value_dependent_expression_p (tree expression)\n }\n \n /* Returns TRUE if the EXPRESSION is type-dependent, in the sense of\n-   [temp.dep.expr].  Note that an expression with no type is\n-   considered dependent.  Other parts of the compiler arrange for an\n-   expression with type-dependent subexpressions to have no type, so\n-   this function doesn't have to be fully recursive.  */\n+   [temp.dep.expr].  */\n \n bool\n type_dependent_expression_p (tree expression)"}, {"sha": "58a59eecacf9b40edf5f74d503b3ed25fcfd1968", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1c31ca71a7923d16e6ccba733edf14db0b399be9", "patch": "@@ -2028,20 +2028,8 @@ finish_call_expr (tree fn, VEC(tree,gc) **args, bool disallow_virtual,\n \n   if (processing_template_decl)\n     {\n-      /* If the call expression is dependent, build a CALL_EXPR node\n-\t with no type; type_dependent_expression_p recognizes\n-\t expressions with no type as being dependent.  */\n       if (type_dependent_expression_p (fn)\n-\t  || any_type_dependent_arguments_p (*args)\n-\t  /* For a non-static member function, we need to specifically\n-\t     test the type dependency of the \"this\" pointer because it\n-\t     is not included in *ARGS even though it is considered to\n-\t     be part of the list of arguments.  Note that this is\n-\t     related to CWG issues 515 and 1005.  */\n-\t  || (TREE_CODE (fn) == FUNCTION_DECL\n-\t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n-\t      && current_class_ref\n-\t      && type_dependent_expression_p (current_class_ref)))\n+\t  || any_type_dependent_arguments_p (*args))\n \t{\n \t  result = build_nt_call_vec (fn, *args);\n \t  KOENIG_LOOKUP_P (result) = koenig_p;"}, {"sha": "fac52940dde8fb019a3a413d2ad453ab76a13ff2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c31ca71a7923d16e6ccba733edf14db0b399be9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c31ca71a7923d16e6ccba733edf14db0b399be9", "patch": "@@ -22,11 +22,6 @@\n \t* gcc.dg/ucnid-8.c: Likewise.\n \t* Adapt dg-warning line number.\n \n-2011-02-11  Dodji Seketeli  <dodji@redhat.com>\n-\n-\tPR c++/47172\n-\t* g++.dg/template/inherit6.C: New test.\n-\n 2011-02-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/parity-1.c: Use -march=k8."}, {"sha": "241a68e5e4a55572d595d223465f337b88287fd4", "filename": "gcc/testsuite/g++.dg/template/inherit6.C", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61502ca83754695ad954c8872379ae566f8e21e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61502ca83754695ad954c8872379ae566f8e21e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit6.C?ref=61502ca83754695ad954c8872379ae566f8e21e9", "patch": "@@ -1,23 +0,0 @@\n-// Origin PR c++/47172\n-// { dg-options \"-std=c++0x\" }\n-// { dg-do compile }\n-\n-struct A\n-{\n-    int f() const;\n-};\n-\n-template <class T>\n-struct B : A { };\n-\n-template <class T>\n-struct C : B<T>\n-{\n-    void g();\n-};\n-\n-template <class T>\n-void C<T>::g()\n-{\n-    A::f();\n-}"}]}