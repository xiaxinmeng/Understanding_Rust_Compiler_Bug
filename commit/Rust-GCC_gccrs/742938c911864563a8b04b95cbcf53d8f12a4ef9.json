{"sha": "742938c911864563a8b04b95cbcf53d8f12a4ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyOTM4YzkxMTg2NDU2M2E4YjA0Yjk1Y2JjZjUzZDhmMTJhNGVmOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-06-05T06:20:05Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-05T06:20:05Z"}, "message": "re PR c/49706 (No warning for (!x > 1) which is always false)\n\n\tPR c/49706\n\t* doc/invoke.texi: Document -Wlogical-not-parentheses.\nc-family/\n\t* c-common.c (warn_logical_not_parentheses): New function.\n\t* c-common.h (warn_logical_not_parentheses): Declare.\n\t* c.opt (Wlogical-not-parentheses): New option.\nc/\n\t* c-typeck.c (parser_build_binary_op): Warn when logical not is used\n\ton the left hand side operand of a comparison. \ncp/\n\t* parser.c (cp_parser_binary_expression): Warn when logical not is\n\tused on the left hand side operand of a comparison.\ntestsuite/\n\t* c-c++-common/pr49706.c: New test.\n\nFrom-SVN: r211255", "tree": {"sha": "10c8e02d49aad0155082bdf3d7725c4ee7041702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c8e02d49aad0155082bdf3d7725c4ee7041702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742938c911864563a8b04b95cbcf53d8f12a4ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742938c911864563a8b04b95cbcf53d8f12a4ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742938c911864563a8b04b95cbcf53d8f12a4ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742938c911864563a8b04b95cbcf53d8f12a4ef9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6447c55dea95705018ff2bb3de7a81c160a71d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6447c55dea95705018ff2bb3de7a81c160a71d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6447c55dea95705018ff2bb3de7a81c160a71d4e"}], "stats": {"total": 193, "additions": 191, "deletions": 2}, "files": [{"sha": "8cb47dd34e769d80e1dba0e20a6350d9ee18540c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49706\n+\t* doc/invoke.texi: Document -Wlogical-not-parentheses.\n+\n 2014-06-04  Tom de Vries  <tom@codesourcery.com>\n \n \t* config/s390/s390.md (\"addptrdi3\", \"addptrsi3\"): Use INTVAL only on"}, {"sha": "07bcdab2e4c90490c3a0a53c34211a11022093ca", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1,3 +1,10 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49706\n+\t* c-common.c (warn_logical_not_parentheses): New function.\n+\t* c-common.h (warn_logical_not_parentheses): Declare.\n+\t* c.opt (Wlogical-not-parentheses): New option.\n+\n 2014-06-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/30020"}, {"sha": "fb6c61204c3803aef32234c92954f24148e0800c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1722,6 +1722,29 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n     }\n }\n \n+/* Warn about logical not used on the left hand side operand of a comparison.\n+   This function assumes that the LHS is inside of TRUTH_NOT_EXPR.\n+   Do not warn if the LHS or RHS is of a boolean or a vector type.  */\n+\n+void\n+warn_logical_not_parentheses (location_t location, enum tree_code code,\n+\t\t\t      tree lhs, tree rhs)\n+{\n+  if (TREE_CODE_CLASS (code) != tcc_comparison)\n+    return;\n+  if (TREE_TYPE (lhs) == NULL_TREE\n+      || TREE_TYPE (rhs) == NULL_TREE)\n+    ;\n+  else if (TREE_CODE (TREE_TYPE (lhs)) == BOOLEAN_TYPE\n+\t   || TREE_CODE (TREE_TYPE (rhs)) == BOOLEAN_TYPE\n+\t   || VECTOR_TYPE_P (TREE_TYPE (lhs))\n+\t   || VECTOR_TYPE_P (TREE_TYPE (rhs)))\n+    return;\n+\n+  warning_at (location, OPT_Wlogical_not_parentheses,\n+\t      \"logical not is only applied to the left hand side of \"\n+\t      \"comparison\");\n+}\n \n /* Warn if EXP contains any computations whose results are not used.\n    Return true if a warning is printed; false otherwise.  LOCUS is the"}, {"sha": "83d5dee30e0861e90226f8038017343896b5beff", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -772,6 +772,8 @@ extern void overflow_warning (location_t, tree);\n extern bool warn_if_unused_value (const_tree, location_t);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n+extern void warn_logical_not_parentheses (location_t, enum tree_code, tree,\n+\t\t\t\t\t  tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool vector_types_compatible_elements_p (tree, tree);"}, {"sha": "76e67d78ac767db5d58ecf78ab31bfa1c99021a6", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -490,6 +490,10 @@ Wlogical-op\n C ObjC C++ ObjC++ Var(warn_logical_op) Init(0) Warning \n Warn when a logical operator is suspiciously always evaluating to true or false\n \n+Wlogical-not-parentheses\n+C ObjC C++ ObjC++ Var(warn_logical_not_paren) Warning\n+Warn when logical not is used on the left hand side operand of a comparison\n+\n Wlong-long\n C ObjC C++ ObjC++ Var(warn_long_long) Init(-1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic"}, {"sha": "732c9c1eb70f2aad9760b7c25a7588ddf0439470", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1,3 +1,9 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49706\n+\t* c-typeck.c (parser_build_binary_op): Warn when logical not is used\n+\ton the left hand side operand of a comparison. \n+\n 2014-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/48062"}, {"sha": "e0d3fdea0f124a134204addb698d21568ea60d84", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -3401,6 +3401,10 @@ parser_build_binary_op (location_t location, enum tree_code code,\n     warn_logical_operator (location, code, TREE_TYPE (result.value),\n \t\t\t   code1, arg1.value, code2, arg2.value);\n \n+  if (warn_logical_not_paren\n+      && code1 == TRUTH_NOT_EXPR)\n+    warn_logical_not_parentheses (location, code, arg1.value, arg2.value);\n+\n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */\n   if (code == EQ_EXPR || code == NE_EXPR)"}, {"sha": "a4dcdb2773edd74fa89edb53570793ef3940a3d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1,3 +1,9 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49706\n+\t* parser.c (cp_parser_binary_expression): Warn when logical not is\n+\tused on the left hand side operand of a comparison.\n+\n 2014-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/43453"}, {"sha": "60e6cda98a42a5d341db28683380831dd7e9bd2e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -7883,6 +7883,8 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n   enum tree_code rhs_type;\n   enum cp_parser_prec new_prec, lookahead_prec;\n   tree overload;\n+  bool parenthesized_not_lhs_warn\n+    = cp_lexer_next_token_is (parser->lexer, CPP_NOT);\n \n   /* Parse the first expression.  */\n   current.lhs = cp_parser_cast_expression (parser, /*address_p=*/false,\n@@ -7985,6 +7987,11 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n       else if (current.tree_type == TRUTH_ORIF_EXPR)\n \tc_inhibit_evaluation_warnings -= current.lhs == truthvalue_true_node;\n \n+      if (warn_logical_not_paren\n+\t  && parenthesized_not_lhs_warn)\n+\twarn_logical_not_parentheses (current.loc, current.tree_type,\n+\t\t\t\t      TREE_OPERAND (current.lhs, 0), rhs);\n+\n       overload = NULL;\n       /* ??? Currently we pass lhs_type == ERROR_MARK and rhs_type ==\n \t ERROR_MARK for everything that is not a binary expression."}, {"sha": "24311d5becbc94a6fe7b7426f987d08ffd925e4a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -256,7 +256,7 @@ Objective-C and Objective-C++ Dialects}.\n -Winit-self  -Winline -Wmaybe-uninitialized @gol\n -Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n -Winvalid-pch -Wlarger-than=@var{len}  -Wunsafe-loop-optimizations @gol\n--Wlogical-op -Wlong-long @gol\n+-Wlogical-op -Wlogical-not-parentheses -Wlong-long @gol\n -Wmain -Wmaybe-uninitialized -Wmissing-braces  -Wmissing-field-initializers @gol\n -Wmissing-include-dirs @gol\n -Wno-multichar  -Wnonnull  -Wno-overflow -Wopenmp-simd @gol\n@@ -3856,7 +3856,7 @@ expression to a type other than @code{bool}.  For example:\n @group\n switch ((int) (a == 4))\n   @{\n-  ...\n+  @dots{}\n   @}\n @end group\n @end smallexample\n@@ -4704,6 +4704,24 @@ Warn about suspicious uses of logical operators in expressions.\n This includes using logical operators in contexts where a\n bit-wise operator is likely to be expected.\n \n+@item -Wlogical-not-parentheses\n+@opindex Wlogical-not-parentheses\n+@opindex Wno-logical-not-parentheses\n+Warn about logical not used on the left hand side operand of a comparison.\n+This option does not warn if the LHS or RHS operand is of a boolean or\n+a vector type.  Its purpose is to detect suspicious code like the following:\n+@smallexample\n+int a;\n+@dots{}\n+if (!a > 1) @{ @dots{} @}\n+@end smallexample\n+\n+It is possible to suppress the warning by wrapping the LHS into\n+parentheses:\n+@smallexample\n+if ((!a) > 1) @{ @dots{} @}\n+@end smallexample\n+\n @item -Waggregate-return\n @opindex Waggregate-return\n @opindex Wno-aggregate-return"}, {"sha": "978a8e733deceabd4dae3c25c4ced788f2ad49d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -1,3 +1,8 @@\n+2014-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/49706\n+\t* c-c++-common/pr49706.c: New test.\n+\n 2014-06-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/48062"}, {"sha": "615f3e40a48553dce2d4908704447c2e00bc412d", "filename": "gcc/testsuite/c-c++-common/pr49706.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742938c911864563a8b04b95cbcf53d8f12a4ef9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c?ref=742938c911864563a8b04b95cbcf53d8f12a4ef9", "patch": "@@ -0,0 +1,102 @@\n+/* PR c/49706 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-not-parentheses\" } */\n+\n+#ifndef __cplusplus\n+#define bool _Bool\n+#endif\n+enum E { A, B };\n+bool b;\n+extern enum E foo_e (void);\n+extern bool foo_b (void);\n+extern int foo_i (void);\n+\n+#ifdef __cplusplus\n+template <class T, class U> bool f1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 15 } */\n+template <class T, class U> bool f2(T t, U u) { return ((!t) == u); }\n+template <class T, class U> bool f3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 17 } */\n+template <class T, class U> bool f4(T t, U u) { return ((!g(t)) == u); }\n+#endif\n+\n+void\n+fn1 (int i1, int i2, bool b1, bool b2)\n+{\n+  b = !i1 == i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 != i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 < i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 > i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 <= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 >= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = i1 == i2;\n+  b = i1 != i2;\n+  b = i1 < i2;\n+  b = i1 > i2;\n+  b = i1 <= i2;\n+  b = i1 >= i2;\n+\n+  /* Parens suppress the warning.  */\n+  b = (!i1) == i2;\n+  b = (!i1) != i2;\n+  b = (!i1) < i2;\n+  b = (!i1) > i2;\n+  b = (!i1) <= i2;\n+  b = (!i1) >= i2;\n+\n+  /* ...but not these parens.  */\n+  b = (!i1 == i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 != i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 < i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 > i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 <= i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 >= i2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = !b1 == b2;\n+  b = !b1 != b2;\n+  b = !b1 < b2;\n+  b = !b1 > b2;\n+  b = !b1 <= b2;\n+  b = !b1 >= b2;\n+\n+  b = !foo_i () == i1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!foo_i ()) == i1;\n+  b = !foo_b () == b1;\n+\n+  b = !!i1 == i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 != i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 < i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 > i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 <= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 >= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!foo_i () == i1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  /* Be careful here.  */\n+  b = (i1 == 0) != 0;\n+  b = (i1 == 0) == 0;\n+  b = (i1 != 0) != 0;\n+  b = (i1 != 0) == 0;\n+}\n+\n+void\n+fn2 (enum E e)\n+{\n+  b = e == B;\n+  b = e == foo_e ();\n+  b = foo_e () == A;\n+  b = foo_e () == foo_e ();\n+\n+  b = !e == A; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !e == foo_e (); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !foo_e () == A; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !foo_e () == foo_e (); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = !(e == A);\n+  b = !(e == foo_e ());\n+  b = !(foo_e () == A);\n+  b = !(foo_e () == foo_e ());\n+\n+  b = (!e) == A;\n+  b = (!e) == foo_e ();\n+  b = (!foo_e ()) == A;\n+  b = (!foo_e ()) == foo_e ();\n+}"}]}