{"sha": "1119902b6c7c1c50123ed85ec1def8be4772d68c", "node_id": "C_kwDOANBUbNoAKDExMTk5MDJiNmM3YzFjNTAxMjNlZDg1ZWMxZGVmOGJlNDc3MmQ2OGM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-21T08:05:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-21T08:10:03Z"}, "message": "openmp: Don't try to destruct DECL_OMP_PRIVATIZED_MEMBER vars [PR108180]\n\nDECL_OMP_PRIVATIZED_MEMBER vars are artificial vars with DECL_VALUE_EXPR\nof this->field used just during gimplification and omp lowering/expansion\nto privatize individual fields in methods when needed.\nAs the following testcase shows, when not in templates, they were handled\nright, but in templates we actually called cp_finish_decl on them and\nthat can result in their destruction, which is obviously undesirable,\nwe should only destruct the privatized copies of them created in omp\nlowering.\n\nFixed thusly.\n\n2022-12-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/108180\n\t* pt.cc (tsubst_expr): Don't call cp_finish_decl on\n\tDECL_OMP_PRIVATIZED_MEMBER vars.\n\n\t* testsuite/libgomp.c++/pr108180.C: New test.", "tree": {"sha": "1ba7afc4a41e3bcc01571d5ac240aa1af86cea8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba7afc4a41e3bcc01571d5ac240aa1af86cea8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1119902b6c7c1c50123ed85ec1def8be4772d68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1119902b6c7c1c50123ed85ec1def8be4772d68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1119902b6c7c1c50123ed85ec1def8be4772d68c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1119902b6c7c1c50123ed85ec1def8be4772d68c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1b5446bf17c14fce3428a005446539292fe27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1b5446bf17c14fce3428a005446539292fe27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1b5446bf17c14fce3428a005446539292fe27e"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "e68c74913f5d5bdb1ae655c7d5b01d474b29b985", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1119902b6c7c1c50123ed85ec1def8be4772d68c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1119902b6c7c1c50123ed85ec1def8be4772d68c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=1119902b6c7c1c50123ed85ec1def8be4772d68c", "patch": "@@ -18873,6 +18873,11 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t    tree asmspec_tree = NULL_TREE;\n \t\t    maybe_push_decl (decl);\n \n+\t\t    if (VAR_P (decl)\n+\t\t\t&& DECL_LANG_SPECIFIC (decl)\n+\t\t\t&& DECL_OMP_PRIVATIZED_MEMBER (decl))\n+\t\t      break;\n+\n \t\t    if (VAR_P (decl)\n \t\t\t&& DECL_DECOMPOSITION_P (decl)\n \t\t\t&& TREE_TYPE (pattern_decl) != error_mark_node)"}, {"sha": "452910cebebdc5623cbc879183670c65134026c4", "filename": "libgomp/testsuite/libgomp.c++/pr108180.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1119902b6c7c1c50123ed85ec1def8be4772d68c/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr108180.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1119902b6c7c1c50123ed85ec1def8be4772d68c/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr108180.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr108180.C?ref=1119902b6c7c1c50123ed85ec1def8be4772d68c", "patch": "@@ -0,0 +1,55 @@\n+// PR c++/108180\n+// { dg-do run }\n+\n+struct A {\n+  A () { ++a; }\n+  A (A &&) = delete;\n+  A (const A &) { ++a; }\n+  A &operator= (const A &) = delete;\n+  A &operator= (A &&) = delete;\n+  ~A () { --a; }\n+  static int a;\n+};\n+int A::a = 0;\n+\n+struct B {\n+  A a;\n+  template <int N>\n+  int\n+  foo ()\n+  {\n+    int res = 0;\n+    #pragma omp parallel for if(false) firstprivate(a)\n+    for (int i = 0; i < 64; ++i)\n+      res += i;\n+    return res;\n+  }\n+  int\n+  bar ()\n+  {\n+    int res = 0;\n+    #pragma omp parallel for if(false) firstprivate(a)\n+    for (int i = 0; i < 64; ++i)\n+      res += i;\n+    return res;\n+  }\n+};\n+\n+int\n+main ()\n+{\n+  {\n+    B b;\n+    if (b.foo<0> () != 2016)\n+      __builtin_abort ();\n+  }\n+  if (A::a != 0)\n+    __builtin_abort ();\n+  {\n+    B b;\n+    if (b.bar () != 2016)\n+      __builtin_abort ();\n+  }\n+  if (A::a != 0)\n+    __builtin_abort ();\n+}"}]}