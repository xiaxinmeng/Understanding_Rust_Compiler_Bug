{"sha": "3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4ZDIwMGU4ZDAwMzNjYTlkMmI4ZjcyYTA2OWVhODhiOTViODU4Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-29T22:05:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-29T22:05:03Z"}, "message": "i386.h (LIMIT_RELOAD_CLASS): Handle LEGACY_REGS and INDEX_REGS the same as GENERAL_REGS.\n\n\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Handle LEGACY_REGS\n\tand INDEX_REGS the same as GENERAL_REGS.\n\t(SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n\nFrom-SVN: r49327", "tree": {"sha": "a71d725afcbcc1caeffa4e0ce1861cbf88355df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71d725afcbcc1caeffa4e0ce1861cbf88355df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d3115eb53cf2bb3f63f5c94b8ab0b584b3b7dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3115eb53cf2bb3f63f5c94b8ab0b584b3b7dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3115eb53cf2bb3f63f5c94b8ab0b584b3b7dea"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "fc8ce5c39ccd9decda7a08bf7624f2ffe5225f4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "patch": "@@ -1,3 +1,9 @@\n+2002-01-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Handle LEGACY_REGS\n+\tand INDEX_REGS the same as GENERAL_REGS.\n+\t(SECONDARY_OUTPUT_RELOAD_CLASS): Likewise.\n+\n 2002-01-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * tree.c (build_nonstandard_integer_type): Correct prototype."}, {"sha": "58f65c11908fd45516391127f4c83f3e1a0ce6a4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8d200e8d0033ca9d2b8f72a069ea88b95b858b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3b8d200e8d0033ca9d2b8f72a069ea88b95b858b", "patch": "@@ -1456,7 +1456,8 @@ enum reg_class\n \n #define LIMIT_RELOAD_CLASS(MODE, CLASS) \t\t\t\\\n   ((MODE) == QImode && !TARGET_64BIT\t\t\t\t\\\n-   && ((CLASS) == ALL_REGS || (CLASS) == GENERAL_REGS) \t\t\\\n+   && ((CLASS) == ALL_REGS || (CLASS) == GENERAL_REGS\t\t\\\n+       || (CLASS) == LEGACY_REGS || (CLASS) == INDEX_REGS)\t\\\n    ? Q_REGS : (CLASS))\n \n /* Given an rtx X being reloaded into a reg required to be\n@@ -1485,7 +1486,8 @@ enum reg_class\n    pseudo.  */\n \n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, OUT)\t\t\t\\\n-  ((CLASS) == GENERAL_REGS && !TARGET_64BIT && (MODE) == QImode\t\t\\\n+  (((CLASS) == GENERAL_REGS || (CLASS) == LEGACY_REGS\t\t\t\\\n+    || (CLASS) == INDEX_REGS) && !TARGET_64BIT && (MODE) == QImode\t\\\n    ? Q_REGS : NO_REGS)\n \n /* Return the maximum number of consecutive registers"}]}