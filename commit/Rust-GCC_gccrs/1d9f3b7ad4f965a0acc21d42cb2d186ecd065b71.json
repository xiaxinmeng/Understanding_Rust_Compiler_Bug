{"sha": "1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5ZjNiN2FkNGY5NjVhMGFjYzIxZDQyY2IyZDE4NmVjZDA2NWI3MQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-09T20:53:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-09T20:53:01Z"}, "message": "analyzer: treat pointers written to *UNKNOWN as escaping [PR98575]\n\nPR analyzer/98575 describes an unexpected -Wanalyzer-malloc-leak false\npositive from gcc.dg/analyzer/pr94851-1.c on glibc < 2.28.\n\nThe issue is that a getchar call gets inlined into a call to _IO_getc,\nand \"_IO_getc\" is not in the set of FILE * functions the analyzer\n\"knows about\".  This leads to a global pointer\n  struct buf *curbp;\nbeing treated as UNKNOWN after the call to _IO_getc.  Later when a\nmalloced pointer is written to curbp->b_amark, the write is discarded\n(since curbp is unknown) without noting that the pointer has escaped,\nand so the pointer is erroneously treated as leaking when the function\nreturns.\n\nThis patch updates the handling of *UNKNOWN to treat pointers written\nto them as having escaped, fixing the false positive.\n\nThe patch stops the leak warning in gcc.dg/analyzer/explode-1.c.\nAfter merging states at the join-point after the first switch, pp has\nUNKNOWN value, and so *pp is a write through UNKNOWN, which with this\npatch is now treated as escaping - despite the fact that all possible\nvalues for *pp are on the stack.  There doesn't seem to be a good way\nto fix this, and the testcase is an artifically constructed one, so the\npatch simply removes the dg-warning directive.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/98575\n\t* store.cc (store::set_value): Treat a pointer written to *UNKNOWN\n\tas having escaped.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98575\n\t* gcc.dg/analyzer/explode-1.c: Remove expected leak warning.\n\t* gcc.dg/analyzer/pr94851-2.c: New test.\n\t* gcc.dg/analyzer/pr98575-1.c: New test.", "tree": {"sha": "f29febc84bd1917f5f84106415b7873c8e1b9691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f29febc84bd1917f5f84106415b7873c8e1b9691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f28986a8d3cad3c848d1e7da48f4bea7637298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f28986a8d3cad3c848d1e7da48f4bea7637298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f28986a8d3cad3c848d1e7da48f4bea7637298"}], "stats": {"total": 119, "additions": 115, "deletions": 4}, "files": [{"sha": "da5b5adb5b423383a48fd2254ad459d9b4f9ce8f", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "patch": "@@ -1820,9 +1820,20 @@ store::set_value (store_manager *mgr, const region *lhs_reg,\n   const region *lhs_base_reg = lhs_reg->get_base_region ();\n   binding_cluster *lhs_cluster;\n   if (lhs_base_reg->symbolic_for_unknown_ptr_p ())\n-    /* Reject attempting to bind values into a symbolic region\n-       for an unknown ptr; merely invalidate values below.  */\n-    lhs_cluster = NULL;\n+    {\n+      /* Reject attempting to bind values into a symbolic region\n+\t for an unknown ptr; merely invalidate values below.  */\n+      lhs_cluster = NULL;\n+\n+      /* The LHS of the write is *UNKNOWN.  If the RHS is a pointer,\n+\t then treat the region being pointed to as having escaped.  */\n+      if (const region_svalue *ptr_sval = rhs_sval->dyn_cast_region_svalue ())\n+\t{\n+\t  const region *ptr_dst = ptr_sval->get_pointee ();\n+\t  const region *ptr_base_reg = ptr_dst->get_base_region ();\n+\t  mark_as_escaped (ptr_base_reg);\n+\t}\n+    }\n   else\n     {\n       lhs_cluster = get_or_create_cluster (lhs_base_reg);"}, {"sha": "6b62e8e871c86fb4319680a8202ff744fab1c4d4", "filename": "gcc/testsuite/gcc.dg/analyzer/explode-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fexplode-1.c?ref=1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "patch": "@@ -47,7 +47,7 @@ void test (void)\n \t{\n \tdefault:\n \tcase 0:\n-\t  *pp = malloc (16); /* { dg-warning \"leak\" } */\n+\t  *pp = malloc (16);\n \t  break;\n \tcase 1:\n \t  free (*pp);"}, {"sha": "60947216b7f1eb49168b6341f78ed6f0365c3b60", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94851-2.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c?ref=1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "patch": "@@ -0,0 +1,54 @@\n+/* As pr94851-1.c, but verify that we don't get confused by a call to\n+   an unknown function (PR analyzer/98575).  */\n+\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+typedef struct AMARK {\n+  struct AMARK *m_next;\n+  char m_name;\n+} AMARK;\n+\n+struct buf {\n+  AMARK *b_amark;\n+};\n+\n+struct buf *curbp;\n+\n+extern void unknown_fn (void);\n+\n+int pamark(void) {\n+  int c;\n+\n+  AMARK *p = curbp->b_amark;\n+  AMARK *last = curbp->b_amark;\n+\n+  unknown_fn ();\n+\n+  c = getchar ();\n+\n+  while (p != (AMARK *)NULL && p->m_name != (char)c) {\n+    last = p;\n+    p = p->m_next;\n+  }\n+\n+  if (p != (AMARK *)NULL) {\n+    printf(\"over writing mark %c\\n\", c);\n+  } else {\n+    if ((p = (AMARK *)malloc(sizeof(AMARK))) == (AMARK *)NULL)\n+      return 0;\n+\n+    p->m_next = (AMARK *)NULL;\n+\n+    if (curbp->b_amark == (AMARK *)NULL)\n+      curbp->b_amark = p;\n+    else\n+      last->m_next = p;\n+  }\n+\n+  p->m_name = (char)c; /* { dg-bogus \"leak of 'p'\" \"bogus leak\" } */\n+\n+  return 1;\n+}"}, {"sha": "6472e762f0cfa68b586cd5cf7d6e9d839aebb857", "filename": "gcc/testsuite/gcc.dg/analyzer/pr98575-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98575-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98575-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr98575-1.c?ref=1d9f3b7ad4f965a0acc21d42cb2d186ecd065b71", "patch": "@@ -0,0 +1,46 @@\n+/* A malloced pointer that's written to a global pointer shouldn't be\n+   reported as leaking, even if an unknown function has been called\n+   (PR analyzer/98575).  */\n+\n+void **g;\n+\n+extern void unknown_fn (void);\n+\n+/* Without a call to unknown_fn.  */\n+\n+int test_1 (void)\n+{\n+  void *p;\n+  p = __builtin_malloc(1024);\n+  *g = p;\n+  return 0;\n+}\n+\n+/* With a call to unknown_fn in various places.  */\n+\n+int test_2 (void)\n+{\n+  void *p;\n+  unknown_fn ();\n+  p = __builtin_malloc(1024);\n+  *g = p;\n+  return 0;\n+}\n+\n+int test_3 (void)\n+{\n+  void *p;\n+  p = __builtin_malloc(1024);\n+  unknown_fn ();\n+  *g = p;\n+  return 0;\n+}\n+\n+int test_4 (void)\n+{\n+  void *p;\n+  p = __builtin_malloc(1024);\n+  *g = p;\n+  unknown_fn ();\n+  return 0;\n+}"}]}