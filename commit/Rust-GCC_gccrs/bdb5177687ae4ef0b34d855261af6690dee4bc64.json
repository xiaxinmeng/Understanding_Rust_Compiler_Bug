{"sha": "bdb5177687ae4ef0b34d855261af6690dee4bc64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiNTE3NzY4N2FlNGVmMGIzNGQ4NTUyNjFhZjY2OTBkZWU0YmM2NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-12-15T22:23:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-15T22:23:46Z"}, "message": "i386.md (ffs<mode>2): Generate CCCmode flags register for TARGET_BMI.\n\n\t* config/i386/i386.md (ffs<mode>2): Generate CCCmode flags register\n\tfor TARGET_BMI.\n\t(ffssi2_no_cmove): Ditto.\n\t(*tzcnt<mode>_1_falsedep_1): New insn_and_split pattern.\n\t(*tzcnt<mode>_1_falsedep): New insn pattern.\n\n\t(LT_ZCNT): New mode iterator.\n\t(lt_zcnt): New mode attribute.\n\t(lt_zcnt_type): New mode attribute.\n\t(<lt_zcnt>_<mode>): Macroize expander from bmi_tzcnt_<mode> and\n\tlzcnt_<mode> using LT_ZCNT mode iterator.\n\t(*<lt_zcnt>_<mode>_falsedep_1): Macroize insn from\n\t*bmi_tzcnt_<mode>_falsedep_1 and *lzcnt_<mode>_falsedep_1\n\tusing LT_ZCNT mode iterator.\n\t(*<lt_zcnt>_<mode>_falsedep): Macroize insn from\n\t*bmi_tzcnt_<mode>_falsedep and *lzcnt_<mode>_falsedep\n\tusing LT_ZCNT mode iterator.\n\t(*<lt_zcnt>_<mode>): Macroize insn from *bmi_tzcnt_<mode>\n\tand *lzcnt_<mode> using LT_ZCNT mode iterator.\n\t* config/i386/i386-builtin.def (__builtin_ia32_tzcnt_u16)\n\t(__builtin_ia32_tzcnt_u32, __builtin_ia32_tzcnt_u64, __builtin_ctzs):\n\tUpdate for rename.\n\nFrom-SVN: r243727", "tree": {"sha": "c2400582c09844d051355f609504351ea3d8dfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2400582c09844d051355f609504351ea3d8dfb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb5177687ae4ef0b34d855261af6690dee4bc64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5177687ae4ef0b34d855261af6690dee4bc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb5177687ae4ef0b34d855261af6690dee4bc64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5177687ae4ef0b34d855261af6690dee4bc64/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3e1097bc643f476d5cd0d697c186c15b23ae702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e1097bc643f476d5cd0d697c186c15b23ae702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e1097bc643f476d5cd0d697c186c15b23ae702"}], "stats": {"total": 267, "additions": 133, "deletions": 134}, "files": [{"sha": "18daeb9af74657c0c8accf55ce0d187c9641c07f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdb5177687ae4ef0b34d855261af6690dee4bc64", "patch": "@@ -1,3 +1,28 @@\n+2016-12-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ffs<mode>2): Generate CCCmode flags register\n+\tfor TARGET_BMI.\n+\t(ffssi2_no_cmove): Ditto.\n+\t(*tzcnt<mode>_1_falsedep_1): New insn_and_split pattern.\n+\t(*tzcnt<mode>_1_falsedep): New insn pattern.\n+\n+\t(LT_ZCNT): New mode iterator.\n+\t(lt_zcnt): New mode attribute.\n+\t(lt_zcnt_type): New mode attribute.\n+\t(<lt_zcnt>_<mode>): Macroize expander from bmi_tzcnt_<mode> and\n+\tlzcnt_<mode> using LT_ZCNT mode iterator.\n+\t(*<lt_zcnt>_<mode>_falsedep_1): Macroize insn from\n+\t*bmi_tzcnt_<mode>_falsedep_1 and *lzcnt_<mode>_falsedep_1\n+\tusing LT_ZCNT mode iterator.\n+\t(*<lt_zcnt>_<mode>_falsedep): Macroize insn from\n+\t*bmi_tzcnt_<mode>_falsedep and *lzcnt_<mode>_falsedep\n+\tusing LT_ZCNT mode iterator.\n+\t(*<lt_zcnt>_<mode>): Macroize insn from *bmi_tzcnt_<mode>\n+\tand *lzcnt_<mode> using LT_ZCNT mode iterator.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_tzcnt_u16)\n+\t(__builtin_ia32_tzcnt_u32, __builtin_ia32_tzcnt_u64, __builtin_ctzs):\n+\tUpdate for rename.\n+\n 2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* ipa-cp.c (class ipcp_bits_lattice): Formatting fixes."}, {"sha": "209f33d61b42b262a21999b6fa599300e3e29f15", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=bdb5177687ae4ef0b34d855261af6690dee4bc64", "patch": "@@ -1197,11 +1197,11 @@ BDESC (OPTION_MASK_ISA_LZCNT | OPTION_MASK_ISA_64BIT, CODE_FOR_lzcnt_di, \"__buil\n BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_si, \"__builtin_ia32_bextr_u32\", IX86_BUILTIN_BEXTR32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)\n BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, CODE_FOR_bmi_bextr_di, \"__builtin_ia32_bextr_u64\", IX86_BUILTIN_BEXTR64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64)\n \n-BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_tzcnt_hi, \"__builtin_ia32_tzcnt_u16\", IX86_BUILTIN_TZCNT16, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n+BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_tzcnt_hi, \"__builtin_ia32_tzcnt_u16\", IX86_BUILTIN_TZCNT16, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n /* Same as above, for backward compatibility.  */\n-BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_tzcnt_hi, \"__builtin_ctzs\", IX86_BUILTIN_CTZS, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n-BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_bmi_tzcnt_si, \"__builtin_ia32_tzcnt_u32\", IX86_BUILTIN_TZCNT32, UNKNOWN, (int) UINT_FTYPE_UINT)\n-BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, CODE_FOR_bmi_tzcnt_di, \"__builtin_ia32_tzcnt_u64\", IX86_BUILTIN_TZCNT64, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n+BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_tzcnt_hi, \"__builtin_ctzs\", IX86_BUILTIN_CTZS, UNKNOWN, (int) UINT16_FTYPE_UINT16)\n+BDESC (OPTION_MASK_ISA_BMI, CODE_FOR_tzcnt_si, \"__builtin_ia32_tzcnt_u32\", IX86_BUILTIN_TZCNT32, UNKNOWN, (int) UINT_FTYPE_UINT)\n+BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, CODE_FOR_tzcnt_di, \"__builtin_ia32_tzcnt_u64\", IX86_BUILTIN_TZCNT64, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n \n /* TBM */\n BDESC (OPTION_MASK_ISA_TBM, CODE_FOR_tbm_bextri_si, \"__builtin_ia32_bextri_u32\", IX86_BUILTIN_BEXTRI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)"}, {"sha": "e43173db96d4286b5dddb23c2d6c2b4a93e8e46e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 104, "deletions": 130, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb5177687ae4ef0b34d855261af6690dee4bc64/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bdb5177687ae4ef0b34d855261af6690dee4bc64", "patch": "@@ -12534,8 +12534,7 @@\n       DONE;\n     }\n \n-  flags_mode\n-    = (TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI) ? CCCmode : CCZmode;\n+  flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n \n   operands[2] = gen_reg_rtx (<MODE>mode);\n   operands[3] = gen_rtx_REG (flags_mode, FLAGS_REG);\n@@ -12561,8 +12560,7 @@\n    (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  machine_mode flags_mode\n-    = (TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI) ? CCCmode : CCZmode;\n+  machine_mode flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n \n   operands[3] = gen_lowpart (QImode, operands[2]);\n   operands[4] = gen_rtx_REG (flags_mode, FLAGS_REG);\n@@ -12571,13 +12569,53 @@\n   ix86_expand_clear (operands[2]);\n })\n \n+; False dependency happens when destination is only updated by tzcnt,\n+; lzcnt or popcnt.  There is no false dependency when destination is\n+; also used in source.\n+(define_insn_and_split \"*tzcnt<mode>_1_falsedep_1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (const_int 0)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_dup 1)))]\n+  \"TARGET_BMI\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (compare:CCC (match_dup 1) (const_int 0)))\n+     (set (match_dup 0)\n+\t  (ctz:SWI48 (match_dup 1)))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)])]\n+{\n+  if (!reg_mentioned_p (operands[0], operands[1]))\n+    ix86_expand_clear (operands[0]);\n+})\n+\n+(define_insn \"*tzcnt<mode>_1_falsedep\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (const_int 0)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_dup 1)))\n+   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)]\n+  \"TARGET_BMI\"\n+  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"btver2_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*tzcnt<mode>_1\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(ctz:SWI48 (match_dup 1)))]\n-  \"TARGET_BMI && !TARGET_AVOID_FALSE_DEP_FOR_BMI\"\n+  \"TARGET_BMI\"\n   \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n@@ -12619,7 +12657,7 @@\n {\n   rtx tmp = gen_reg_rtx (HImode);\n \n-  emit_insn (gen_bmi_tzcnt_hi (tmp, operands[1]));\n+  emit_insn (gen_tzcnt_hi (tmp, operands[1]));\n   emit_insn (gen_zero_extendhisi2 (operands[0], tmp));\n   DONE;\n })\n@@ -12695,68 +12733,41 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Version of tzcnt that is expanded from intrinsics.  This version provides\n-;; operand size as output when source operand is zero. \n-\n-(define_expand \"bmi_tzcnt_<mode>\"\n-  [(parallel\n-    [(set (match_operand:SWI248 0 \"register_operand\")\n-\t  (unspec:SWI248\n-\t    [(match_operand:SWI248 1 \"nonimmediate_operand\")]\n-\t    UNSPEC_TZCNT))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_BMI\")\n-\n-; False dependency happens when destination is only updated by tzcnt,\n-; lzcnt or popcnt.  There is no false dependency when destination is\n-; also used in source.\n-(define_insn_and_split \"*bmi_tzcnt_<mode>_falsedep_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(unspec:SWI48\n-\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_TZCNT))\n+(define_insn \"bsr_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(minus:DI (const_int 63)\n+\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\n-   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel\n-    [(set (match_dup 0)\n-\t  (unspec:SWI48 [(match_dup 1)] UNSPEC_TZCNT))\n-     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n-     (clobber (reg:CC FLAGS_REG))])]\n-{\n-  if (!reg_mentioned_p (operands[0], operands[1]))\n-    ix86_expand_clear (operands[0]);\n-})\n+  \"TARGET_64BIT\"\n+  \"bsr{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*bmi_tzcnt_<mode>_falsedep\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(unspec:SWI48\n-\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_TZCNT))\n-   (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n-\t   UNSPEC_INSN_FALSE_DEP)\n+(define_insn \"bsr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (const_int 31)\n+\t\t  (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\"\n-  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  \"\"\n+  \"bsr{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*bmi_tzcnt_<mode>\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(unspec:SWI248\n-\t  [(match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_TZCNT))\n+(define_insn \"*bsrhi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+\t(minus:HI (const_int 15)\n+\t\t  (clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_BMI\"\n-  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  \"\"\n+  \"bsr{w}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"znver1_decode\" \"vector\")\n+   (set_attr \"mode\" \"HI\")])\n \n (define_expand \"clz<mode>2\"\n   [(parallel\n@@ -12778,14 +12789,6 @@\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n })\n \n-(define_expand \"clz<mode>2_lzcnt\"\n-  [(parallel\n-    [(set (match_operand:SWI48 0 \"register_operand\")\n-\t  (clz:SWI48\n-\t    (match_operand:SWI48 1 \"nonimmediate_operand\")))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_LZCNT\")\n-\n (define_insn_and_split \"*clzhi2\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(clz:SI\n@@ -12839,75 +12842,82 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*clz<mode>2_lzcnt\"\n+(define_insn \"clz<mode>2_lzcnt\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(clz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+\t(clz:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_LZCNT\"\n   \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Version of lzcnt that is expanded from intrinsics.  This version provides\n-;; operand size as output when source operand is zero. \n+(define_int_iterator LT_ZCNT\n+\t[(UNSPEC_TZCNT \"TARGET_BMI\")\n+\t (UNSPEC_LZCNT \"TARGET_LZCNT\")])\n+\n+(define_int_attr lt_zcnt\n+\t[(UNSPEC_TZCNT \"tzcnt\")\n+\t (UNSPEC_LZCNT \"lzcnt\")])\n+\n+(define_int_attr lt_zcnt_type\n+\t[(UNSPEC_TZCNT \"alu1\")\n+\t (UNSPEC_LZCNT \"bitmanip\")])\n \n-(define_expand \"lzcnt_<mode>\"\n+;; Version of lzcnt/tzcnt that is expanded from intrinsics.  This version\n+;; provides operand size as output when source operand is zero. \n+\n+(define_expand \"<lt_zcnt>_<mode>\"\n   [(parallel\n     [(set (match_operand:SWI248 0 \"register_operand\")\n \t  (unspec:SWI248\n-\t    [(match_operand:SWI248 1 \"nonimmediate_operand\")]\n-\t    UNSPEC_LZCNT))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_LZCNT\")\n+\t    [(match_operand:SWI248 1 \"nonimmediate_operand\")] LT_ZCNT))\n+     (clobber (reg:CC FLAGS_REG))])])\n \n ; False dependency happens when destination is only updated by tzcnt,\n ; lzcnt or popcnt.  There is no false dependency when destination is\n ; also used in source.\n-(define_insn_and_split \"*lzcnt_<mode>_falsedep_1\"\n+(define_insn_and_split \"*<lt_zcnt>_<mode>_falsedep_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(unspec:SWI48\n-\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_LZCNT))\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")] LT_ZCNT))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_LZCNT\n-   && TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n+  \"TARGET_AVOID_FALSE_DEP_FOR_BMI && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n     [(set (match_dup 0)\n-\t  (unspec:SWI48 [(match_dup 1)] UNSPEC_LZCNT))\n+\t  (unspec:SWI48 [(match_dup 1)] LT_ZCNT))\n      (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n      (clobber (reg:CC FLAGS_REG))])]\n {\n   if (!reg_mentioned_p (operands[0], operands[1]))\n     ix86_expand_clear (operands[0]);\n })\n \n-(define_insn \"*lzcnt_<mode>_falsedep\"\n+(define_insn \"*<lt_zcnt>_<mode>_falsedep\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(unspec:SWI48\n-\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_LZCNT))\n+\t  [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")] LT_ZCNT))\n    (unspec [(match_operand:SWI48 2 \"register_operand\" \"0\")]\n \t   UNSPEC_INSN_FALSE_DEP)\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_LZCNT\"\n-  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n+  \"\"\n+  \"<lt_zcnt>{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"<lt_zcnt_type>\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*lzcnt_<mode>\"\n+(define_insn \"*<lt_zcnt>_<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(unspec:SWI248\n-\t  [(match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")]\n-\t  UNSPEC_LZCNT))\n+\t  [(match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")] LT_ZCNT))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_LZCNT\"\n-  \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n+  \"\"\n+  \"<lt_zcnt>{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"<lt_zcnt_type>\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -13206,42 +13216,6 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"bsr_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (const_int 63)\n-\t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"bsr{q}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"bsr\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (const_int 31)\n-\t\t  (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"bsr{l}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*bsrhi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(minus:HI (const_int 15)\n-\t\t  (clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"bsr{w}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"prefix_0f\" \"1\")\n-   (set_attr \"znver1_decode\" \"vector\")\n-   (set_attr \"mode\" \"HI\")])\n-\n (define_expand \"popcount<mode>2\"\n   [(parallel\n     [(set (match_operand:SWI248 0 \"register_operand\")"}]}