{"sha": "67fbb7f0fda1fc46253efc31592ffcdda0765098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmYmI3ZjBmZGExZmM0NjI1M2VmYzMxNTkyZmZjZGRhMDc2NTA5OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-12T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-12T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "baadfa38e47bcac36aab58e8752cd3bc312bd784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baadfa38e47bcac36aab58e8752cd3bc312bd784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67fbb7f0fda1fc46253efc31592ffcdda0765098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fbb7f0fda1fc46253efc31592ffcdda0765098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67fbb7f0fda1fc46253efc31592ffcdda0765098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fbb7f0fda1fc46253efc31592ffcdda0765098/comments", "author": null, "committer": null, "parents": [{"sha": "a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a958b2fc6dab3d8b01b6ee32178e2fccd97f77f8"}], "stats": {"total": 300, "additions": 299, "deletions": 1}, "files": [{"sha": "27cfeca187195df880c3b819a2293c2a8d62c15f", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1,3 +1,8 @@\n+2021-01-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* update-copyright.py: Port to python3 by guessing encoding\n+\t(first utf8, then iso8859). Add 2 more ignores: .png and .pyc.\n+\n 2021-01-06  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Add decode_path function."}, {"sha": "7002b24e66ed3d48b14b1bdfa6a4cee98a4213c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1,3 +1,179 @@\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (sdiv_pow2<mode>3): Extend from\n+\tSVE_FULL_I to SVE_I.  Generate an UNSPEC_PRED_X.\n+\t(*sdiv_pow2<mode>3): New pattern.\n+\t(@cond_<sve_int_op><mode>): Extend from SVE_FULL_I to SVE_I.\n+\tWrap the ASRD in an UNSPEC_PRED_X.\n+\t(*cond_<sve_int_op><mode>_2): Likewise.  Replace the UNSPEC_PRED_X\n+\tpredicate with a constant PTRUE, if it isn't already.\n+\t(*cond_<sve_int_op><mode>_z): Replace with...\n+\t(*cond_<sve_int_op><mode>_any): ...this new pattern.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*cond_bic<mode>_2): Extend from\n+\tSVE_FULL_I to SVE_I.\n+\t(*cond_bic<mode>_any): Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<su>mul<mode>3_highpart)\n+\t(@aarch64_pred_<MUL_HIGHPART:optab><mode>): Extend from SVE_FULL_I\n+\tto SVE_I.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<su>abd<mode>_3): Extend from\n+\tSVE_FULL_I to SVE_I.\n+\t(*aarch64_cond_<su>abd<mode>_2): Likewise.\n+\t(*aarch64_cond_<su>abd<mode>_any): Likewise.\n+\t(@aarch64_pred_<su>abd<mode>): Likewise.  Use UNSPEC_PRED_X\n+\tfor the max and min but not for the minus.\n+\t(*aarch64_cond_<su>abd<mode>_3): New pattern.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_24I): New iterator.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_adr<mode>_shift): Extend from\n+\tSVE_FULL_SDI to SVE_24I.  Use containers rather than elements.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (@cond_<SVE_INT_BINARY:optab><mode>)\n+\t(*cond_<SVE_INT_BINARY:optab><mode>_2): Extend from SVE_FULL_I\n+\tto SVE_I.\n+\t(*cond_<SVE_INT_BINARY:optab><mode>_3): Likewise.\n+\t(*cond_<SVE_INT_BINARY:optab><mode>_any): Likewise.\n+\t(*cond_<SVE_INT_BINARY:optab><mode>_2_const): Likewise.\n+\t(*cond_<SVE_INT_BINARY:optab><mode>_any_const): Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<SVE_INT_BINARY_IMM:optab><mode>3)\n+\t(@aarch64_pred_<SVE_INT_BINARY_IMM:optab><mode>)\n+\t(*post_ra_<SVE_INT_BINARY_IMM:optab><mode>3): Extend from SVE_FULL_I\n+\tto SVE_I.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (<ASHIFT:optab><mode>3)\n+\t(v<ASHIFT:optab><mode>3, @aarch64_pred_<optab><mode>)\n+\t(*post_ra_v<ASHIFT:optab><mode>3): Extend from SVE_FULL_I to SVE_I.\n+\n+2021-01-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR jit/98615\n+\t* symtab-clones.h (clone_info::release): Release\n+\tsymtab::m_clones with ggc_delete as it's a GGC memory.\n+\n+2021-01-11  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* Makefile.in (LINK_PROGRESS): Show the link target.\n+\n+2021-01-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91403\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Cap\n+\tsingle-element interleaving group size at 4096 elements.\n+\n+2021-01-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98526\n+\t* tree-vect-loop.c (vect_model_reduction_cost): Remove costing\n+\tof the actual reduction op for the regular case.\n+\t(vectorizable_reduction): Cost the stmts\n+\tvect_transform_reduction produces here.\n+\n+2021-01-11  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): For\n+\tbig-endian, use UNPACK[_FLOAT]_HI.\n+\n+2021-01-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (class complex_pattern,\n+\tclass complex_add_pattern): Add parameters to matches.\n+\t(complex_add_pattern::build): Free memory.\n+\t(complex_add_pattern::matches): Move validation end of match.\n+\t(complex_add_pattern::recognize): Likewise.\n+\n+2021-01-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (linear_loads_p): Fix externals.\n+\n+2021-01-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp-patterns.c (is_linear_load_p): Fix ambiguity.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95867\n+\t* tree-ssa-math-opts.h: New header.\n+\t* tree-ssa-math-opts.c: Include tree-ssa-math-opts.h.\n+\t(powi_as_mults): No longer static.  Use build_one_cst instead of\n+\tbuild_real.  Formatting fix.\n+\t* tree-ssa-reassoc.c: Include tree-ssa-math-opts.h.\n+\t(attempt_builtin_powi): Handle multiplication reassociation without\n+\tpowi_fndecl using powi_as_mults.\n+\t(reassociate_bb): For integral types don't require\n+\t-funsafe-math-optimizations to call attempt_builtin_powi.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95852\n+\t* tree-ssa-math-opts.c (maybe_optimize_guarding_check): Change\n+\tmul_stmts parameter type to vec<gimple *> &.  Before cond_stmt\n+\tallow in the bb any of the stmts in that vector, div_stmt and\n+\tup to 3 cast stmts.\n+\t(arith_cast_equal_p): New function.\n+\t(arith_overflow_check_p): Add cast_stmt argument, handle signed\n+\tmultiply overflow checks.\n+\t(match_arith_overflow): Adjust caller.  Handle signed multiply\n+\toverflow checks.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95852\n+\t* tree-ssa-math-opts.c (maybe_optimize_guarding_check): New function.\n+\t(uaddsub_overflow_check_p): Renamed to ...\n+\t(arith_overflow_check_p): ... this.  Handle also multiplication\n+\twith overflow check.\n+\t(match_uaddsub_overflow): Renamed to ...\n+\t(match_arith_overflow): ... this.  Add cfg_changed argument.  Handle\n+\talso multiplication with overflow check.  Adjust function comment.\n+\t(math_opts_dom_walker::after_dom_children): Adjust callers.  Call\n+\tmatch_arith_overflow also for MULT_EXPR.\n+\n+2021-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vmovl_s8): Reimplement using\n+\t__builtin_convertvector.\n+\t(vmovl_s16): Likewise.\n+\t(vmovl_s32): Likewise.\n+\t(vmovl_u8): Likewise.\n+\t(vmovl_u16): Likewise.\n+\t(vmovl_u32): Likewise.\n+\t(vmovn_s16): Likewise.\n+\t(vmovn_s32): Likewise.\n+\t(vmovn_s64): Likewise.\n+\t(vmovn_u16): Likewise.\n+\t(vmovn_u32): Likewise.\n+\t(vmovn_u64): Likewise.\n+\n+2021-01-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple-if-to-switch.cc (struct condition_info): Use auto_var.\n+\t(if_chain::is_beneficial): Delete clusters\n+\t(find_conditions): Make second argument of conditions_in_bbs a\n+\tpointer so that we control over it's lifetime.\n+\t(pass_if_to_switch::execute): Delete them.\n+\n+2021-01-11  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* ira.c (move_unallocated_pseudos): Check other_reg and skip if\n+\tit isn't set.\n+\n 2021-01-09  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* config/vax/vax.md (cc): Remove mode attribute."}, {"sha": "a99a4947a6b5c2f11701c569f1d9115bac8a23c8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1 +1 @@\n-20210111\n+20210112"}, {"sha": "94de1c00ef70041d40d0c8527d88f80a079f90ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1,3 +1,13 @@\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98481\n+\t* class.c (find_abi_tags_r): Set *walk_subtrees to 2 instead of 1\n+\tfor types.\n+\t(mark_abi_tags_r): Likewise.\n+\t* decl2.c (min_vis_r): Likewise.\n+\t* tree.c (cp_walk_subtrees): If *walk_subtrees_p is 2, look through\n+\ttypedefs.\n+\n 2021-01-08  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/98551"}, {"sha": "db5806f16542bee90bec555bf47a44d5125c21dc", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1,3 +1,13 @@\n+2021-01-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 2d3d13748.\n+\t* d-lang.cc (d_handle_option): Remove OPT_ftransition_checkimports and\n+\tOPT_ftransition_import.\n+\t* gdc.texi (Warnings): Remove documentation for -ftransition=import\n+\tand -ftransition=checkimports.\n+\t* lang.opt (ftransition=checkimports): Remove.\n+\t(ftransition=import): Remove.\n+\n 2021-01-09  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd cb1106ad5."}, {"sha": "02472784a6b59989aa46de99ee38052f004b9d25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fbb7f0fda1fc46253efc31592ffcdda0765098/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67fbb7f0fda1fc46253efc31592ffcdda0765098", "patch": "@@ -1,3 +1,100 @@\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/asrdiv_4.c: New test.\n+\t* gcc.target/aarch64/sve/cond_asrd_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_asrd_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_asrd_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_asrd_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_asrd_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_asrd_3_run.c: Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/cond_bic_1.C: New test.\n+\t* g++.target/aarch64/sve/cond_bic_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_bic_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_bic_4.C: Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mul_highpart_3.c: New test.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/abd_1.C: New test.\n+\t* g++.target/aarch64/sve/cond_abd_1.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_abd_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_abd_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_abd_4.C: Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/adr_6.c: New test.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.target/aarch64/sve/cond_arith_1.C: New test.\n+\t* g++.target/aarch64/sve/cond_arith_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_arith_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_arith_4.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_shift_1.C: New test.\n+\t* g++.target/aarch64/sve/cond_shift_2.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_shift_3.C: Likewise.\n+\t* g++.target/aarch64/sve/cond_shift_4.C: Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR testsuite/98602\n+\t* g++.target/aarch64/sve/max_1.C: New test.\n+\t* g++.target/aarch64/sve/min_1.C: Likewise.\n+\t* gcc.target/aarch64/sve/mul_2.c: Likewise.\n+\n+2021-01-11  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/shift_2.c: New test.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98481\n+\t* g++.dg/abi/abi-tag24.C: New test.\n+\n+2021-01-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91403\n+\t* gcc.dg/vect/pr91403.c: New testcase.\n+\n+2021-01-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR testsuite/98225\n+\t* gcc.misc-tests/outputs.exp: Unset MAKEFLAGS.\n+\tExpect .ld1_args only when GNU LD is used.\n+\tAdd an exception for *.gcc_args files.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95867\n+\t* gcc.dg/tree-ssa/pr95867.c: New test.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95852\n+\t* gcc.target/i386/pr95852-3.c: New test.\n+\t* gcc.target/i386/pr95852-4.c: New test.\n+\n+2021-01-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95852\n+\t* gcc.target/i386/pr95852-1.c: New test.\n+\t* gcc.target/i386/pr95852-2.c: New test.\n+\n+2021-01-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/98273\n+\t* lib/gcov.exp: Add run-gcov-pytest function which runs pytest.\n+\t* g++.dg/gcov/pr98273.C: New test.\n+\t* g++.dg/gcov/gcov.py: New test.\n+\t* g++.dg/gcov/test-pr98273.py: New test.\n+\n 2021-01-09  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* gcc.target/vax/cmpelim-eq-notsi.c: Use subtraction from a"}]}