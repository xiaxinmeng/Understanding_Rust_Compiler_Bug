{"sha": "4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhZTNjYjM1NTk4MDJmYWVlM2I1Y2I1OGQ5MzE1ZGNjNTAwMGJjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-02T18:25:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-02T18:25:57Z"}, "message": "Pass vec_perm_indices by reference\n\nThis patch makes functions take vec_perm_indices by reference rather\nthan value, since a later patch will turn vec_perm_indices into a class\nthat would be more expensive to copy.\n\n2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* optabs-query.h (can_vec_perm_p): Take a const vec_perm_indices *.\n\t* optabs-query.c (can_vec_perm_p): Likewise.\n\t* fold-const.c (fold_vec_perm): Take a const vec_perm_indices &\n\tinstead of vec_perm_indices.\n\t* tree-vectorizer.h (vect_gen_perm_mask_any): Likewise,\n\t(vect_gen_perm_mask_checked): Likewise,\n\t* tree-vect-stmts.c (vect_gen_perm_mask_any): Likewise,\n\t(vect_gen_perm_mask_checked): Likewise,\n\nFrom-SVN: r256090", "tree": {"sha": "1283f373029f83a2ce2f95fa81a4d7ca81e6826a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1283f373029f83a2ce2f95fa81a4d7ca81e6826a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/comments", "author": null, "committer": null, "parents": [{"sha": "3ea109a3479cdbbe8a47bf60b2d2d69072a1d51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea109a3479cdbbe8a47bf60b2d2d69072a1d51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea109a3479cdbbe8a47bf60b2d2d69072a1d51b"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "be819e2a71cd4eb31b1880edcfa14820cf9e6272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -1,3 +1,14 @@\n+2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* optabs-query.h (can_vec_perm_p): Take a const vec_perm_indices *.\n+\t* optabs-query.c (can_vec_perm_p): Likewise.\n+\t* fold-const.c (fold_vec_perm): Take a const vec_perm_indices &\n+\tinstead of vec_perm_indices.\n+\t* tree-vectorizer.h (vect_gen_perm_mask_any): Likewise,\n+\t(vect_gen_perm_mask_checked): Likewise,\n+\t* tree-vect-stmts.c (vect_gen_perm_mask_any): Likewise,\n+\t(vect_gen_perm_mask_checked): Likewise,\n+\n 2018-01-02  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* optabs-query.h (qimode_for_vec_perm): Declare."}, {"sha": "224c0854bdd1176be7001086dcef991f0c18cf3e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -8923,7 +8923,7 @@ vec_cst_ctor_to_array (tree arg, unsigned int nelts, tree *elts)\n    NULL_TREE otherwise.  */\n \n static tree\n-fold_vec_perm (tree type, tree arg0, tree arg1, vec_perm_indices sel)\n+fold_vec_perm (tree type, tree arg0, tree arg1, const vec_perm_indices &sel)\n {\n   unsigned int i;\n   bool need_ctor = false;"}, {"sha": "b8e7e314b0fbd65d9abf469e1f0e935edbc394c7", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -369,7 +369,7 @@ qimode_for_vec_perm (machine_mode mode)\n    zeroes; this case is not dealt with here.  */\n \n bool\n-can_vec_perm_p (machine_mode mode, bool variable, vec_perm_indices *sel)\n+can_vec_perm_p (machine_mode mode, bool variable, const vec_perm_indices *sel)\n {\n   machine_mode qimode;\n "}, {"sha": "392429645cd889207ca8d63bd61bd8e17c1cb6f8", "filename": "gcc/optabs-query.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Foptabs-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Foptabs-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.h?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -175,7 +175,7 @@ enum insn_code can_float_p (machine_mode, machine_mode, int);\n enum insn_code can_fix_p (machine_mode, machine_mode, int, bool *);\n bool can_conditionally_move_p (machine_mode mode);\n opt_machine_mode qimode_for_vec_perm (machine_mode);\n-bool can_vec_perm_p (machine_mode, bool, vec_perm_indices *);\n+bool can_vec_perm_p (machine_mode, bool, const vec_perm_indices *);\n /* Find a widening optab even if it doesn't widen as much as we want.  */\n #define find_widening_optab_handler(A, B, C) \\\n   find_widening_optab_handler_and_mode (A, B, C, NULL)"}, {"sha": "b0df11b930fb5c85ef81b4ae38c9f4e2d2f1aa2d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -6523,7 +6523,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n    vect_gen_perm_mask_checked.  */\n \n tree\n-vect_gen_perm_mask_any (tree vectype, vec_perm_indices sel)\n+vect_gen_perm_mask_any (tree vectype, const vec_perm_indices &sel)\n {\n   tree mask_elt_type, mask_type;\n \n@@ -6544,7 +6544,7 @@ vect_gen_perm_mask_any (tree vectype, vec_perm_indices sel)\n    i.e. that the target supports the pattern _for arbitrary input vectors_.  */\n \n tree\n-vect_gen_perm_mask_checked (tree vectype, vec_perm_indices sel)\n+vect_gen_perm_mask_checked (tree vectype, const vec_perm_indices &sel)\n {\n   gcc_assert (can_vec_perm_p (TYPE_MODE (vectype), false, &sel));\n   return vect_gen_perm_mask_any (vectype, sel);"}, {"sha": "6b75afc7c11628a94b81163bf6f28387c80d1477", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aae3cb3559802faee3b5cb58d9315dcc5000bc8/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=4aae3cb3559802faee3b5cb58d9315dcc5000bc8", "patch": "@@ -1212,8 +1212,8 @@ extern void vect_get_load_cost (struct data_reference *, int, bool,\n extern void vect_get_store_cost (struct data_reference *, int,\n \t\t\t\t unsigned int *, stmt_vector_for_cost *);\n extern bool vect_supportable_shift (enum tree_code, tree);\n-extern tree vect_gen_perm_mask_any (tree, vec_perm_indices);\n-extern tree vect_gen_perm_mask_checked (tree, vec_perm_indices);\n+extern tree vect_gen_perm_mask_any (tree, const vec_perm_indices &);\n+extern tree vect_gen_perm_mask_checked (tree, const vec_perm_indices &);\n extern void optimize_mask_stores (struct loop*);\n \n /* In tree-vect-data-refs.c.  */"}]}