{"sha": "f9968e3e146aaa27586b88fbf82075808552715a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5NjhlM2UxNDZhYWEyNzU4NmI4OGZiZjgyMDc1ODA4NTUyNzE1YQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.se", "date": "2005-07-01T10:04:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-07-01T10:04:10Z"}, "message": "cris.md (CRIS_CC0_REGNUM): New constant.\n\n\t* config/cris/cris.md (CRIS_CC0_REGNUM): New constant.\n\tSwap numbers for CRIS_AP_REGNUM and CRIS_MOF_REGNUM.\n\t* config/cris/cris.c (cris_conditional_register_usage): Adjust\n\treg_names[CRIS_CC0_REGNUM] for early CRIS versions.\n\t(cris_print_operand) <case REG>: Handle CRIS_CC0_REGNUM.\n\t(cris_md_asm_clobbers): Clobber CRIS_CC0_REGNUM for all asms.\n\t* config/cris/cris.h (CRIS_CANONICAL_CC0_REGNUM): New macro.\n\t(enum reg_class): New member CC0_REGS.\n\t(REG_CLASS_FROM_LETTER): Add 'c' for CC0_REGS.\n\t(FIRST_PSEUDO_REGISTER, CALL_USED_REGISTERS, REG_ALLOC_ORDER)\n\t(HARD_REGNO_MODE_OK, MODES_TIEABLE_P, REG_CLASS_NAMES)\n\t(CRIS_SPECIAL_REGS_CONTENTS, REG_CLASS_CONTENTS, REGNO_REG_CLASS)\n\t(PREFERRED_RELOAD_CLASS, REGISTER_NAMES, DBX_REGISTER_NUMBER):\n\tAdjust for register now described.\n\nFrom-SVN: r101502", "tree": {"sha": "4cae8bd5ad9ffca0d43bc9bb0906d01b77c6dfa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cae8bd5ad9ffca0d43bc9bb0906d01b77c6dfa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9968e3e146aaa27586b88fbf82075808552715a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9968e3e146aaa27586b88fbf82075808552715a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9968e3e146aaa27586b88fbf82075808552715a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9968e3e146aaa27586b88fbf82075808552715a/comments", "author": null, "committer": null, "parents": [{"sha": "c1806f89e0c83083fe36c344e674bbee27e09178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1806f89e0c83083fe36c344e674bbee27e09178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1806f89e0c83083fe36c344e674bbee27e09178"}], "stats": {"total": 90, "additions": 72, "deletions": 18}, "files": [{"sha": "31e740764f6086980dc0239b80cbf82961ffc99f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9968e3e146aaa27586b88fbf82075808552715a", "patch": "@@ -1,3 +1,20 @@\n+2005-07-01  Hans-Peter Nilsson  <hp@axis.se>\n+\n+\t* config/cris/cris.md (CRIS_CC0_REGNUM): New constant.\n+\tSwap numbers for CRIS_AP_REGNUM and CRIS_MOF_REGNUM.\n+\t* config/cris/cris.c (cris_conditional_register_usage): Adjust\n+\treg_names[CRIS_CC0_REGNUM] for early CRIS versions.\n+\t(cris_print_operand) <case REG>: Handle CRIS_CC0_REGNUM.\n+\t(cris_md_asm_clobbers): Clobber CRIS_CC0_REGNUM for all asms.\n+\t* config/cris/cris.h (CRIS_CANONICAL_CC0_REGNUM): New macro.\n+\t(enum reg_class): New member CC0_REGS.\n+\t(REG_CLASS_FROM_LETTER): Add 'c' for CC0_REGS.\n+\t(FIRST_PSEUDO_REGISTER, CALL_USED_REGISTERS, REG_ALLOC_ORDER)\n+\t(HARD_REGNO_MODE_OK, MODES_TIEABLE_P, REG_CLASS_NAMES)\n+\t(CRIS_SPECIAL_REGS_CONTENTS, REG_CLASS_CONTENTS, REGNO_REG_CLASS)\n+\t(PREFERRED_RELOAD_CLASS, REGISTER_NAMES, DBX_REGISTER_NUMBER):\n+\tAdjust for register now described.\n+\n 2005-07-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/22262"}, {"sha": "2fdfcf6d4f89808ab0007ebba29950356c1444fb", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=f9968e3e146aaa27586b88fbf82075808552715a", "patch": "@@ -398,6 +398,11 @@ cris_conditional_register_usage (void)\n \n   if (TARGET_HAS_MUL_INSNS)\n     fixed_regs[CRIS_MOF_REGNUM] = 0;\n+\n+  /* On early versions, we must use the 16-bit condition-code register,\n+     which has another name.  */\n+  if (cris_cpu_version < 8)\n+    reg_names[CRIS_CC0_REGNUM] = \"ccr\";\n }\n \n /* Return current_function_uses_pic_offset_table.  For use in cris.md,\n@@ -979,7 +984,8 @@ cris_print_operand (FILE *file, rtx x, int code)\n     case REG:\n       if (REGNO (operand) > 15\n \t  && REGNO (operand) != CRIS_MOF_REGNUM\n-\t  && REGNO (operand) != CRIS_SRP_REGNUM)\n+\t  && REGNO (operand) != CRIS_SRP_REGNUM\n+\t  && REGNO (operand) != CRIS_CC0_REGNUM)\n \tinternal_error (\"internal error: bad register: %d\", REGNO (operand));\n       fprintf (file, \"$%s\", reg_names[REGNO (operand)]);\n       return;\n@@ -3228,14 +3234,24 @@ cris_arg_partial_bytes (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n /* Worker function for TARGET_MD_ASM_CLOBBERS.  */\n \n static tree\n-cris_md_asm_clobbers (tree outputs, tree inputs, tree clobbers)\n+cris_md_asm_clobbers (tree outputs, tree inputs, tree in_clobbers)\n {\n   HARD_REG_SET mof_set;\n+  tree clobbers;\n   tree t;\n \n   CLEAR_HARD_REG_SET (mof_set);\n   SET_HARD_REG_BIT (mof_set, CRIS_MOF_REGNUM);\n \n+  /* For the time being, all asms clobber condition codes.  Revisit when\n+     there's a reasonable use for inputs/outputs that mention condition\n+     codes.  */\n+  clobbers\n+    = tree_cons (NULL_TREE,\n+\t\t build_string (strlen (reg_names[CRIS_CC0_REGNUM]),\n+\t\t\t       reg_names[CRIS_CC0_REGNUM]),\n+\t\t in_clobbers);\n+\n   for (t = outputs; t != NULL; t = TREE_CHAIN (t))\n     {\n       tree val = TREE_VALUE (t);"}, {"sha": "a7305dd8e000e3f86fb4ab7f56bc70834a96fd5d", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=f9968e3e146aaa27586b88fbf82075808552715a", "patch": "@@ -61,6 +61,10 @@ Boston, MA 02110-1301, USA.  */\n    When passing debug-info, we need the real hardware register number.  */\n #define CRIS_CANONICAL_SRP_REGNUM (16 + 11)\n #define CRIS_CANONICAL_MOF_REGNUM (16 + 7)\n+/* We have CCR in all models including v10, but that's 16 bits, so let's\n+   prefer the DCCR number, which is a DMA pointer in pre-v8, so we'll\n+   never clash with it for GCC purposes.  */\n+#define CRIS_CANONICAL_CC0_REGNUM (16 + 13)\n \n /* When generating PIC, these suffixes are added to the names of non-local\n    functions when being output.  Contrary to other ports, we have offsets\n@@ -422,21 +426,21 @@ extern int target_flags;\n /* Node: Register Basics */\n \n /*  We count all 16 non-special registers, SRP, a faked argument\n-    pointer register and MOF.  */\n-#define FIRST_PSEUDO_REGISTER (16 + 1 + 1 + 1)\n+    pointer register, MOF and CCR/DCCR.  */\n+#define FIRST_PSEUDO_REGISTER (16 + 1 + 1 + 1 + 1)\n \n /* For CRIS, these are r15 (pc) and r14 (sp). Register r8 is used as a\n    frame-pointer, but is not fixed.  SRP is not included in general\n    registers and will not be used automatically.  All other special\n    registers are fixed at the moment.  The faked argument pointer register\n    is fixed too.  */\n #define FIXED_REGISTERS \\\n- {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1}\n+ {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0}\n \n /* Register r9 is used for structure-address, r10-r13 for parameters,\n    r10- for return values.  */\n #define CALL_USED_REGISTERS \\\n- {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1}\n+ {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1}\n \n #define CONDITIONAL_REGISTER_USAGE cris_conditional_register_usage ()\n \n@@ -462,7 +466,7 @@ extern int target_flags;\n     Use struct-return address first, since very few functions use\n    structure return values so it is likely to be available.  */\n #define REG_ALLOC_ORDER \\\n- {9, 13, 12, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 18, 16, 17}\n+ {9, 13, 12, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 17, 16, 18, 19}\n \n \n /* Node: Values in Registers */\n@@ -473,10 +477,19 @@ extern int target_flags;\n  (MODE == VOIDmode \\\n   ? 1 : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n-/* CRIS permits all registers to hold all modes.  */\n-#define HARD_REGNO_MODE_OK(REGNO, MODE) 1\n+/* CRIS permits all registers to hold all modes.  Well, except for the\n+   condition-code register.  And we can't hold larger-than-register size\n+   modes in the last special register that can hold a full 32 bits.  */\n+#define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\\\n+ (((MODE) == CCmode\t\t\t\t\\\n+   || (REGNO) != CRIS_CC0_REGNUM)\t\t\\\n+  && (GET_MODE_SIZE (MODE) <= UNITS_PER_WORD\t\\\n+      || (REGNO) != CRIS_MOF_REGNUM))\n \n-#define MODES_TIEABLE_P(MODE1, MODE2)  1\n+/* Because CCmode isn't covered by the \"narrower mode\" statement in\n+   tm.texi, we can still say all modes are tieable despite not having an\n+   always 1 HARD_REGNO_MODE_OK.  */\n+#define MODES_TIEABLE_P(MODE1, MODE2) 1\n \n \n /* Node: Leaf Functions */\n@@ -491,30 +504,34 @@ extern int target_flags;\n enum reg_class \n   {\n     NO_REGS,\n-    MOF_REGS, SPECIAL_REGS, GENERAL_REGS, ALL_REGS,\n+    MOF_REGS, CC0_REGS, SPECIAL_REGS, GENERAL_REGS, ALL_REGS,\n     LIM_REG_CLASSES\n   };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n #define REG_CLASS_NAMES\t\t\t\t\t\t\t\\\n-  {\"NO_REGS\", \"MOF_REGS\", \"SPECIAL_REGS\", \"GENERAL_REGS\", \"ALL_REGS\"}\n+  {\"NO_REGS\",\t\t\t\t\t\t\t\t\\\n+   \"MOF_REGS\", \"CC0_REGS\", \"SPECIAL_REGS\", \"GENERAL_REGS\", \"ALL_REGS\"}\n \n #define CRIS_SPECIAL_REGS_CONTENTS\t\t\t\t\t\\\n- ((1 << CRIS_SRP_REGNUM) | (1 << CRIS_MOF_REGNUM))\n+ ((1 << CRIS_SRP_REGNUM) | (1 << CRIS_MOF_REGNUM) | (1 << CRIS_CC0_REGNUM))\n \n /* Count in the faked argument register in GENERAL_REGS.  Keep out SRP.  */\n #define REG_CLASS_CONTENTS\t\t\t\\\n   {\t\t\t\t\t\t\\\n    {0},\t\t\t\t\t\t\\\n    {1 << CRIS_MOF_REGNUM},\t\t\t\\\n+   {1 << CRIS_CC0_REGNUM},\t\t\t\\\n    {CRIS_SPECIAL_REGS_CONTENTS},\t\t\\\n-   {0x2ffff},\t\t\t\t\t\\\n-   {0x2ffff | CRIS_SPECIAL_REGS_CONTENTS}\t\\\n+   {0xffff | (1 << CRIS_AP_REGNUM)},\t\t\\\n+   {0xffff | (1 << CRIS_AP_REGNUM)\t\t\\\n+    | CRIS_SPECIAL_REGS_CONTENTS}\t\t\\\n   }\n \n #define REGNO_REG_CLASS(REGNO)\t\t\t\\\n   ((REGNO) == CRIS_MOF_REGNUM ? MOF_REGS :\t\\\n+   (REGNO) == CRIS_CC0_REGNUM ? CC0_REGS :\t\\\n    (REGNO) == CRIS_SRP_REGNUM ? SPECIAL_REGS :\t\\\n    GENERAL_REGS)\n \n@@ -526,6 +543,7 @@ enum reg_class\n   (\t\t\t\t\t\t\\\n    (C) == 'h' ? MOF_REGS :\t\t\t\\\n    (C) == 'x' ? SPECIAL_REGS :\t\t\t\\\n+   (C) == 'c' ? CC0_REGS :\t\t\t\\\n    NO_REGS\t\t\t\t\t\\\n   )\n \n@@ -550,6 +568,7 @@ enum reg_class\n    a bug.  */\n #define PREFERRED_RELOAD_CLASS(X, CLASS)\t\\\n  ((CLASS) != MOF_REGS\t\t\t\t\\\n+  && (CLASS) != CC0_REGS\t\t\t\\\n   && (CLASS) != SPECIAL_REGS\t\t\t\\\n   ? GENERAL_REGS : (CLASS))\n \n@@ -1247,7 +1266,7 @@ struct cum_args {int regs;};\n \n #define REGISTER_NAMES\t\t\t\t\t\\\n  {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\",\t\\\n-  \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"sp\", \"pc\", \"srp\", \"faked_ap\", \"mof\"}\n+  \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"sp\", \"pc\", \"srp\", \"mof\", \"faked_ap\", \"dccr\"}\n \n #define ADDITIONAL_REGISTER_NAMES \\\n  {{\"r14\", 14}, {\"r15\", 15}}\n@@ -1336,6 +1355,7 @@ struct cum_args {int regs;};\n #define DBX_REGISTER_NUMBER(REGNO)\t\t\t\t\\\n  ((REGNO) == CRIS_SRP_REGNUM ? CRIS_CANONICAL_SRP_REGNUM :\t\\\n   (REGNO) == CRIS_MOF_REGNUM ? CRIS_CANONICAL_MOF_REGNUM :\t\\\n+  (REGNO) == CRIS_CC0_REGNUM ? CRIS_CANONICAL_CC0_REGNUM :\t\\\n  (REGNO))\n \n /* FIXME: Investigate DEBUGGER_AUTO_OFFSET, DEBUGGER_ARG_OFFSET.  */"}, {"sha": "2ecfa63f908f98da214b7abc53e6a21c34c850a8", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9968e3e146aaa27586b88fbf82075808552715a/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=f9968e3e146aaa27586b88fbf82075808552715a", "patch": "@@ -73,8 +73,9 @@\n    (CRIS_FP_REGNUM 8)\n    (CRIS_SP_REGNUM 14)\n    (CRIS_SRP_REGNUM 16)\n-   (CRIS_AP_REGNUM 17)\n-   (CRIS_MOF_REGNUM 18)]\n+   (CRIS_MOF_REGNUM 17)\n+   (CRIS_AP_REGNUM 18)\n+   (CRIS_CC0_REGNUM 19)]\n )\n \n ;; We need an attribute to define whether an instruction can be put in"}]}