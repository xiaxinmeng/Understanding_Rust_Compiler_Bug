{"sha": "2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlNWFlNTdiYTYxNzdhZjRmZThiYTI5NTFlODg2NGM2YmRiN2M4Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-11T21:27:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-11T21:27:14Z"}, "message": "i386.c (tls_model_chars): Remove.\n\n        * config/i386/i386.c (tls_model_chars): Remove.\n        (ix86_encode_section_info, ix86_strip_name_encoding): Remove.\n        (local_symbolic_operand): Use SYMBOL_REF_LOCAL_P.\n        (tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n        (tls_symbolic_operand_1): Likewise.\n        (legitimate_pic_address_disp_p): Use SYMBOL_REF_LOCAL_P.\n        * config/i386/i386.h (TARGET_ENCODE_SECTION_INFO): Remove.\n        (TARGET_STRIP_NAME_ENCODING, ASM_OUTPUT_LABELREF): Remove.\n        * config/i386/winnt.c (i386_pe_encode_section_info): Replace\n        bits \"copied from i386.h\" with default_encode_section_info.\n\nFrom-SVN: r65480", "tree": {"sha": "2ecdcf3202af9e31823005a4bd43e00176e10171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecdcf3202af9e31823005a4bd43e00176e10171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/comments", "author": null, "committer": null, "parents": [{"sha": "52859c77e9752203d3d551275df65d4d6f223df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52859c77e9752203d3d551275df65d4d6f223df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52859c77e9752203d3d551275df65d4d6f223df8"}], "stats": {"total": 154, "additions": 22, "deletions": 132}, "files": [{"sha": "9e142f5b5085fd643d92733cb9697fc9f9af31e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "patch": "@@ -1,3 +1,16 @@\n+2003-04-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (tls_model_chars): Remove.\n+\t(ix86_encode_section_info, ix86_strip_name_encoding): Remove.\n+\t(local_symbolic_operand): Use SYMBOL_REF_LOCAL_P.\n+\t(tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n+\t(tls_symbolic_operand_1): Likewise.\n+\t(legitimate_pic_address_disp_p): Use SYMBOL_REF_LOCAL_P.\n+\t* config/i386/i386.h (TARGET_ENCODE_SECTION_INFO): Remove.\n+\t(TARGET_STRIP_NAME_ENCODING, ASM_OUTPUT_LABELREF): Remove.\n+\t* config/i386/winnt.c (i386_pe_encode_section_info): Replace\n+\tbits \"copied from i386.h\" with default_encode_section_info.\n+\n 2003-04-11  Richard Henderson  <rth@redhat.com>\n \n \t* rtl.def (SYMBOL_REF): Add two 0 fields."}, {"sha": "d01733d0edd30ec0c17f51297dd4ed43b42c568d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 109, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "patch": "@@ -668,10 +668,6 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n rtx ix86_compare_op0 = NULL_RTX;\n rtx ix86_compare_op1 = NULL_RTX;\n \n-/* The encoding characters for the four TLS models present in ELF.  */\n-\n-static char const tls_model_chars[] = \" GLil\";\n-\n #define MAX_386_STACK_LOCALS 3\n /* Size of the register save area.  */\n #define X86_64_VARARGS_SIZE (REGPARM_MAX * UNITS_PER_WORD + SSE_REGPARM_MAX * 16)\n@@ -845,10 +841,6 @@ static int ix86_address_cost PARAMS ((rtx));\n static bool ix86_cannot_force_const_mem PARAMS ((rtx));\n static rtx ix86_delegitimize_address PARAMS ((rtx));\n \n-static void ix86_encode_section_info PARAMS ((tree, int)) ATTRIBUTE_UNUSED;\n-static const char *ix86_strip_name_encoding PARAMS ((const char *))\n-     ATTRIBUTE_UNUSED;\n-\n struct builtin_description;\n static rtx ix86_expand_sse_comi PARAMS ((const struct builtin_description *,\n \t\t\t\t\t tree, rtx));\n@@ -3497,9 +3489,7 @@ local_symbolic_operand (op, mode)\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n \n-  /* These we've been told are local by varasm and encode_section_info\n-     respectively.  */\n-  if (CONSTANT_POOL_ADDRESS_P (op) || SYMBOL_REF_FLAG (op))\n+  if (SYMBOL_REF_LOCAL_P (op))\n     return 1;\n \n   /* There is, however, a not insubstantial body of code in the rest of\n@@ -3514,36 +3504,26 @@ local_symbolic_operand (op, mode)\n   return 0;\n }\n \n-/* Test for various thread-local symbols.  See ix86_encode_section_info. */\n+/* Test for various thread-local symbols.  */\n \n int\n tls_symbolic_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  const char *symbol_str;\n-\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n-  symbol_str = XSTR (op, 0);\n-\n-  if (symbol_str[0] != '%')\n-    return 0;\n-  return strchr (tls_model_chars, symbol_str[1]) - tls_model_chars;\n+  return SYMBOL_REF_TLS_MODEL (op);\n }\n \n-static int\n+static inline int\n tls_symbolic_operand_1 (op, kind)\n      rtx op;\n      enum tls_model kind;\n {\n-  const char *symbol_str;\n-\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n-  symbol_str = XSTR (op, 0);\n-\n-  return symbol_str[0] == '%' && symbol_str[1] == tls_model_chars[kind];\n+  return SYMBOL_REF_TLS_MODEL (op) == kind;\n }\n \n int\n@@ -5773,17 +5753,15 @@ legitimate_pic_address_disp_p (disp)\n \treturn 0;\n       if (GET_CODE (disp) == SYMBOL_REF\n \t  && ix86_cmodel == CM_SMALL_PIC\n-\t  && (CONSTANT_POOL_ADDRESS_P (disp)\n-\t      || SYMBOL_REF_FLAG (disp)))\n+\t  && SYMBOL_REF_LOCAL_P (disp))\n \treturn 1;\n       if (GET_CODE (disp) == LABEL_REF)\n \treturn 1;\n       if (GET_CODE (disp) == CONST\n \t  && GET_CODE (XEXP (disp, 0)) == PLUS\n \t  && ((GET_CODE (XEXP (XEXP (disp, 0), 0)) == SYMBOL_REF\n \t       && ix86_cmodel == CM_SMALL_PIC\n-\t       && (CONSTANT_POOL_ADDRESS_P (XEXP (XEXP (disp, 0), 0))\n-\t\t   || SYMBOL_REF_FLAG (XEXP (XEXP (disp, 0), 0))))\n+\t       && SYMBOL_REF_LOCAL_P (XEXP (XEXP (disp, 0), 0)))\n \t      || GET_CODE (XEXP (XEXP (disp, 0), 0)) == LABEL_REF)\n \t  && GET_CODE (XEXP (XEXP (disp, 0), 1)) == CONST_INT\n \t  && INTVAL (XEXP (XEXP (disp, 0), 1)) < 16*1024*1024\n@@ -6124,7 +6102,7 @@ ix86_GOT_alias_set ()\n \n    2. Static data references, constant pool addresses, and code labels\n       compute the address as an offset from the GOT, whose base is in\n-      the PIC reg.  Static data objects have SYMBOL_REF_FLAG set to\n+      the PIC reg.  Static data objects have SYMBOL_FLAG_LOCAL set to\n       differentiate them from global data objects.  The returned\n       address is the PIC reg + an unspec constant.\n \n@@ -6282,85 +6260,6 @@ legitimize_pic_address (orig, reg)\n     }\n   return new;\n }\n-\n-static void\n-ix86_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  bool local_p = (*targetm.binds_local_p) (decl);\n-  rtx rtl, symbol;\n-\n-  rtl = DECL_P (decl) ? DECL_RTL (decl) : TREE_CST_RTL (decl);\n-  if (GET_CODE (rtl) != MEM)\n-    return;\n-  symbol = XEXP (rtl, 0);\n-  if (GET_CODE (symbol) != SYMBOL_REF)\n-    return;\n-\n-  /* For basic x86, if using PIC, mark a SYMBOL_REF for a non-global\n-     symbol so that we may access it directly in the GOT.  */\n-\n-  if (flag_pic)\n-    SYMBOL_REF_FLAG (symbol) = local_p;\n-\n-  /* For ELF, encode thread-local data with %[GLil] for \"global dynamic\",\n-     \"local dynamic\", \"initial exec\" or \"local exec\" TLS models\n-     respectively.  */\n-\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n-    {\n-      const char *symbol_str;\n-      char *newstr;\n-      size_t len;\n-      enum tls_model kind = decl_tls_model (decl);\n-\n-      if (TARGET_64BIT && ! flag_pic)\n-\t{\n-\t  /* x86-64 doesn't allow non-pic code for shared libraries,\n-\t     so don't generate GD/LD TLS models for non-pic code.  */\n-\t  switch (kind)\n-\t    {\n-\t    case TLS_MODEL_GLOBAL_DYNAMIC:\n-\t      kind = TLS_MODEL_INITIAL_EXEC; break;\n-\t    case TLS_MODEL_LOCAL_DYNAMIC:\n-\t      kind = TLS_MODEL_LOCAL_EXEC; break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-\n-      symbol_str = XSTR (symbol, 0);\n-\n-      if (symbol_str[0] == '%')\n-\t{\n-\t  if (symbol_str[1] == tls_model_chars[kind])\n-\t    return;\n-\t  symbol_str += 2;\n-\t}\n-      len = strlen (symbol_str) + 1;\n-      newstr = alloca (len + 2);\n-\n-      newstr[0] = '%';\n-      newstr[1] = tls_model_chars[kind];\n-      memcpy (newstr + 2, symbol_str, len);\n-\n-      XSTR (symbol, 0) = ggc_alloc_string (newstr, len + 2 - 1);\n-    }\n-}\n-\n-/* Undo the above when printing symbol names.  */\n-\n-static const char *\n-ix86_strip_name_encoding (str)\n-     const char *str;\n-{\n-  if (str[0] == '%')\n-    str += 2;\n-  if (str [0] == '*')\n-    str += 1;\n-  return str;\n-}\n \f\n /* Load the thread pointer into a register.  */\n "}, {"sha": "fed00089e745a1f521b458fc9c459e2f25515d52", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "patch": "@@ -2496,21 +2496,6 @@ enum ix86_builtins\n   IX86_BUILTIN_MAX\n };\n \f\n-#define TARGET_ENCODE_SECTION_INFO  ix86_encode_section_info\n-#define TARGET_STRIP_NAME_ENCODING  ix86_strip_name_encoding\n-\n-#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-    const char *xname = (NAME);\t\t\t\\\n-    if (xname[0] == '%')\t\t\t\\\n-      xname += 2;\t\t\t\t\\\n-    if (xname[0] == '*')\t\t\t\\\n-      xname += 1;\t\t\t\t\\\n-    else\t\t\t\t\t\\\n-      fputs (user_label_prefix, FILE);\t\t\\\n-    fputs (xname, FILE);\t\t\t\\\n-  } while (0)\n-\f\n /* Max number of args passed in registers.  If this is more than 3, we will\n    have problems with ebx (register #4), since it is a caller save register and\n    is also used as the pic register in ELF.  So for now, don't allow more than"}, {"sha": "0751c7f888eaec07bcb2df2b30c207e555fcae00", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=2ae5ae57ba6177af4fe8ba2951e8864c6bdb7c87", "patch": "@@ -429,14 +429,7 @@ i386_pe_encode_section_info (decl, first)\n   if (!first)\n     return;\n \n-  /* This bit is copied from i386.h.  */\n-  if (optimize > 0 && TREE_CONSTANT (decl)\n-      && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n-    {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n-    }\n+  default_encode_section_info (decl, first);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {"}]}