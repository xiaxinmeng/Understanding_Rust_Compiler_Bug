{"sha": "cc248146c12018675f203f6be6b4d652765f0f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyNDgxNDZjMTIwMTg2NzVmMjAzZjZiZTZiNGQ2NTI3NjVmMGY3Ng==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-14T09:51:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:51:00Z"}, "message": "[Ada] Crash on precondition involving quantified expression\n\nThis patch fixes a compiler abort on a precondition whose condition\nincludes a quantified expression.\n\n2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (New_Copy_Tree, Visit_Entity): A quantified\n\texpression includes the implicit declaration of the loop\n\tparameter. When a quantified expression is copied during\n\texpansion, for example when building the precondition code from\n\tthe generated pragma, a new loop parameter must be created for\n\tthe new tree, to prevent duplicate declarations for the same\n\tsymbol.\n\ngcc/testsuite/\n\n\t* gnat.dg/predicate12.adb, gnat.dg/predicate12.ads: New\n\ttestcase.\n\nFrom-SVN: r274449", "tree": {"sha": "42d5a622c24b88563edc8a26c802e88b2146640f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d5a622c24b88563edc8a26c802e88b2146640f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc248146c12018675f203f6be6b4d652765f0f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc248146c12018675f203f6be6b4d652765f0f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc248146c12018675f203f6be6b4d652765f0f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc248146c12018675f203f6be6b4d652765f0f76/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bab15911661814606d18639ef53597ea9a843afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab15911661814606d18639ef53597ea9a843afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab15911661814606d18639ef53597ea9a843afa"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "e7bebe62554a2adc67451d6eddbaa2f800c6934e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc248146c12018675f203f6be6b4d652765f0f76", "patch": "@@ -1,3 +1,13 @@\n+2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (New_Copy_Tree, Visit_Entity): A quantified\n+\texpression includes the implicit declaration of the loop\n+\tparameter. When a quantified expression is copied during\n+\texpansion, for example when building the precondition code from\n+\tthe generated pragma, a new loop parameter must be created for\n+\tthe new tree, to prevent duplicate declarations for the same\n+\tsymbol.\n+\n 2019-08-14  Yannick Moy  <moy@adacore.com>\n \n \t* sem_disp.adb (Check_Dispatching_Operation): Update assertion"}, {"sha": "db9233a539173f640a5ddf6887f4eabe7d58ec48", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cc248146c12018675f203f6be6b4d652765f0f76", "patch": "@@ -20799,16 +20799,27 @@ package body Sem_Util is\n          --  this restriction leads to a performance penalty.\n \n          --  ??? this list is flaky, and may hide dormant bugs\n+         --  Should functions be included???\n+\n+         --  Loop parameters appear within quantified expressions and contain\n+         --  an entity declaration that must be replaced when the expander is\n+         --  active if the expression has been preanalyzed or analyzed.\n \n          elsif not Ekind_In (Id, E_Block,\n                                  E_Constant,\n                                  E_Label,\n+                                 E_Loop_Parameter,\n                                  E_Procedure,\n                                  E_Variable)\n            and then not Is_Type (Id)\n          then\n             return;\n \n+         elsif Ekind (Id) = E_Loop_Parameter\n+           and then No (Etype (Condition (Parent (Parent (Id)))))\n+         then\n+            return;\n+\n          --  Nothing to do when the entity was already visited\n \n          elsif NCT_Tables_In_Use\n@@ -21081,7 +21092,14 @@ package body Sem_Util is\n       begin\n          pragma Assert (Nkind (N) not in N_Entity);\n \n-         if Nkind (N) = N_Expression_With_Actions then\n+         --  If the node is a quantified expression and expander is active,\n+         --  it contains an implicit declaration that may require a new entity\n+         --  when the condition has already been (pre)analyzed.\n+\n+         if Nkind (N) = N_Expression_With_Actions\n+           or else\n+             (Nkind (N) = N_Quantified_Expression and then Expander_Active)\n+         then\n             EWA_Level := EWA_Level + 1;\n \n          elsif EWA_Level > 0\n@@ -21225,6 +21243,12 @@ package body Sem_Util is\n       --    * Semantic fields of nodes such as First_Real_Statement must be\n       --      updated to reference the proper replicated nodes.\n \n+      --  Finally, quantified expressions contain an implicit delaration for\n+      --  the bound variable. Given that quantified expressions appearing\n+      --  in contracts are copied to create pragmas and eventually checking\n+      --  procedures, a new bound variable must be created for each copy, to\n+      --  prevent multiple declarations of the same symbol.\n+\n       --  To meet all these demands, routine New_Copy_Tree is split into two\n       --  phases.\n "}, {"sha": "64819ad96824ca6af1f26eec66bb71a94f4ed63a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc248146c12018675f203f6be6b4d652765f0f76", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/predicate12.adb, gnat.dg/predicate12.ads: New\n+\ttestcase.\n+\n 2019-08-14  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat.dg/task5.adb: New testcase."}, {"sha": "3c076c01cab7210e27e20408d0f25fbc2d89ae7d", "filename": "gcc/testsuite/gnat.dg/predicate12.adb", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.adb?ref=cc248146c12018675f203f6be6b4d652765f0f76", "patch": "@@ -0,0 +1,6 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+package body Predicate12 is\n+   procedure Dummy is null;\n+end Predicate12;"}, {"sha": "f51e649e9f786685406fb6a91bd4f6242fb8e9d9", "filename": "gcc/testsuite/gnat.dg/predicate12.ads", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc248146c12018675f203f6be6b4d652765f0f76/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpredicate12.ads?ref=cc248146c12018675f203f6be6b4d652765f0f76", "patch": "@@ -0,0 +1,42 @@\n+package Predicate12 is\n+\n+   subtype Index_Type is Positive range 1 .. 100;\n+   type Array_Type is array(Index_Type) of Integer;\n+\n+   type Search_Engine is interface;\n+\n+   procedure Search\n+     (S           : in  Search_Engine;\n+      Search_Item : in  Integer;\n+      Items       : in  Array_Type;\n+      Found       : out Boolean;\n+      Result      : out Index_Type) is abstract\n+     with\n+       Pre'Class =>\n+         (for all J in Items'Range =>\n+           (for all K in J + 1 .. Items'Last => Items(J) <= Items(K))),\n+       Post'Class =>\n+         (if Found then Search_Item = Items(Result)\n+                   else (for all J in Items'Range => Items(J) /= Search_Item));\n+\n+   type Binary_Search_Engine is new Search_Engine with null record;\n+\n+   procedure Search\n+     (S           : in  Binary_Search_Engine;\n+      Search_Item : in  Integer;\n+      Items       : in  Array_Type;\n+      Found       : out Boolean;\n+      Result      : out Index_Type) is null;\n+\n+   type Forward_Search_Engine is new Search_Engine with null record;\n+\n+   procedure Search\n+     (S           : in  Forward_Search_Engine;\n+      Search_Item : in  Integer;\n+      Items       : in  Array_Type;\n+      Found       : out Boolean;\n+      Result      : out Index_Type) is null;\n+\n+   procedure Dummy;\n+\n+end Predicate12;"}]}