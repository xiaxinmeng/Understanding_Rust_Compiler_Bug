{"sha": "a05d02b293b299352b9523875e96bf697f96baf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1ZDAyYjI5M2IyOTkzNTJiOTUyMzg3NWU5NmJmNjk3Zjk2YmFmNA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-07-02T18:30:35Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-07-02T18:30:35Z"}, "message": "rs6000-builtin.def (CMPGE_16QI): New built-in definition.\n\n[gcc]\n\n2015-07-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (CMPGE_16QI): New built-in\n\tdefinition.\n\t(CMPGE_8HI): Likewise.\n\t(CMPGE_4SI): Likewise.\n\t(CMPGE_2DI): Likewise.\n\t(CMPGE_U16QI): Likewise.\n\t(CMPGE_U8HI): Likewise.\n\t(CMPGE_U4SI): Likewise.\n\t(CMPGE_U2DI): Likewise.\n\t(CMPLE_16QI): Likewise.\n\t(CMPLE_8HI): Likewise.\n\t(CMPLE_4SI): Likewise.\n\t(CMPLE_2DI): Likewise.\n\t(CMPLE_U16QI): Likewise.\n\t(CMPLE_U8HI): Likewise.\n\t(CMPLE_U4SI): Likewise.\n\t(CMPLE_U2DI): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\toverloads for ALTIVEC_BUILTIN_VEC_CMPGE and\n\tALTIVEC_BUILTIN_VEC_CMPLE.\n\t* config/rs6000/vector.md (vector_ge<mode>): Restrict to\n\tfloating-point vector modes.\n\t(vector_nlt<mode>): New define_expand.\n\t(vector_nltu<mode>): Likewise.\n\t(vector_ngt<mode>): Likewise.\n\t(vector_ngtu<mode>): Likewise.\n\n[gcc/testsuite]\n\n2015-07-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vec-cmp.c: New test.\n\nFrom-SVN: r225351", "tree": {"sha": "bb03c3548e8fccec3bac8f76ce2b724f4cc72506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb03c3548e8fccec3bac8f76ce2b724f4cc72506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a05d02b293b299352b9523875e96bf697f96baf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05d02b293b299352b9523875e96bf697f96baf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05d02b293b299352b9523875e96bf697f96baf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05d02b293b299352b9523875e96bf697f96baf4/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83eb71f4e4a081e25a5e953acfc8757c5f4e85fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83eb71f4e4a081e25a5e953acfc8757c5f4e85fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83eb71f4e4a081e25a5e953acfc8757c5f4e85fb"}], "stats": {"total": 261, "additions": 258, "deletions": 3}, "files": [{"sha": "9397b36bcd442fcb63929d0ec9b0358a3168138e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -1,3 +1,32 @@\n+2015-07-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (CMPGE_16QI): New built-in\n+\tdefinition.\n+\t(CMPGE_8HI): Likewise.\n+\t(CMPGE_4SI): Likewise.\n+\t(CMPGE_2DI): Likewise.\n+\t(CMPGE_U16QI): Likewise.\n+\t(CMPGE_U8HI): Likewise.\n+\t(CMPGE_U4SI): Likewise.\n+\t(CMPGE_U2DI): Likewise.\n+\t(CMPLE_16QI): Likewise.\n+\t(CMPLE_8HI): Likewise.\n+\t(CMPLE_4SI): Likewise.\n+\t(CMPLE_2DI): Likewise.\n+\t(CMPLE_U16QI): Likewise.\n+\t(CMPLE_U8HI): Likewise.\n+\t(CMPLE_U4SI): Likewise.\n+\t(CMPLE_U2DI): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\toverloads for ALTIVEC_BUILTIN_VEC_CMPGE and\n+\tALTIVEC_BUILTIN_VEC_CMPLE.\n+\t* config/rs6000/vector.md (vector_ge<mode>): Restrict to\n+\tfloating-point vector modes.\n+\t(vector_nlt<mode>): New define_expand.\n+\t(vector_nltu<mode>): Likewise.\n+\t(vector_ngt<mode>): Likewise.\n+\t(vector_ngtu<mode>): Likewise.\n+\n 2015-07-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/66706"}, {"sha": "fbc97efed1d551058f588b081d41c5f65a749d41", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -1284,6 +1284,24 @@ BU_VSX_2 (XVCVUXDDP_SCALE,    \"xvcvuxddp_scale\", CONST, vsx_xvcvuxddp_scale)\n BU_VSX_2 (XVCVDPSXDS_SCALE,   \"xvcvdpsxds_scale\", CONST, vsx_xvcvdpsxds_scale)\n BU_VSX_2 (XVCVDPUXDS_SCALE,   \"xvcvdpuxds_scale\", CONST, vsx_xvcvdpuxds_scale)\n \n+BU_VSX_2 (CMPGE_16QI,         \"cmpge_16qi\",     CONST,  vector_nltv16qi)\n+BU_VSX_2 (CMPGE_8HI,          \"cmpge_8hi\",      CONST,  vector_nltv8hi)\n+BU_VSX_2 (CMPGE_4SI,          \"cmpge_4si\",      CONST,  vector_nltv4si)\n+BU_VSX_2 (CMPGE_2DI,          \"cmpge_2di\",      CONST,  vector_nltv2di)\n+BU_VSX_2 (CMPGE_U16QI,        \"cmpge_u16qi\",    CONST,  vector_nltuv16qi)\n+BU_VSX_2 (CMPGE_U8HI,         \"cmpge_u8hi\",     CONST,  vector_nltuv8hi)\n+BU_VSX_2 (CMPGE_U4SI,         \"cmpge_u4si\",     CONST,  vector_nltuv4si)\n+BU_VSX_2 (CMPGE_U2DI,         \"cmpge_u2di\",     CONST,  vector_nltuv2di)\n+\n+BU_VSX_2 (CMPLE_16QI,         \"cmple_16qi\",     CONST,  vector_ngtv16qi)\n+BU_VSX_2 (CMPLE_8HI,          \"cmple_8hi\",      CONST,  vector_ngtv8hi)\n+BU_VSX_2 (CMPLE_4SI,          \"cmple_4si\",      CONST,  vector_ngtv4si)\n+BU_VSX_2 (CMPLE_2DI,          \"cmple_2di\",      CONST,  vector_ngtv2di)\n+BU_VSX_2 (CMPLE_U16QI,        \"cmple_u16qi\",    CONST,  vector_ngtuv16qi)\n+BU_VSX_2 (CMPLE_U8HI,         \"cmple_u8hi\",     CONST,  vector_ngtuv8hi)\n+BU_VSX_2 (CMPLE_U4SI,         \"cmple_u4si\",     CONST,  vector_ngtuv4si)\n+BU_VSX_2 (CMPLE_U2DI,         \"cmple_u2di\",     CONST,  vector_ngtuv2di)\n+\n /* VSX abs builtin functions.  */\n BU_VSX_A (XVABSDP,\t      \"xvabsdp\",\tCONST,\tabsv2df2)\n BU_VSX_A (XVNABSDP,\t      \"xvnabsdp\",\tCONST,\tvsx_nabsv2df2)"}, {"sha": "229213a754a0a0c10c88d32a6c9ff5cbd4d94d00", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -1096,6 +1096,26 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_XVCMPGEDP,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_U16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_U8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_U4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPGE, VSX_BUILTIN_CMPGE_U2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0},\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPGT, ALTIVEC_BUILTIN_VCMPGTSB,\n@@ -1146,6 +1166,26 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_XVCMPGEDP,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_U16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_U8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_U4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0},\n+  { ALTIVEC_BUILTIN_VEC_CMPLE, VSX_BUILTIN_CMPLE_U2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0},\n   { ALTIVEC_BUILTIN_VEC_CMPLT, ALTIVEC_BUILTIN_VCMPGTUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPLT, ALTIVEC_BUILTIN_VCMPGTSB,"}, {"sha": "40d596b43813141b793c03fca6b78ef106bc323c", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -446,26 +446,77 @@\n   \"\")\n \n (define_expand \"vector_ge<mode>\"\n-  [(set (match_operand:VEC_C 0 \"vlogical_operand\" \"\")\n-\t(ge:VEC_C (match_operand:VEC_C 1 \"vlogical_operand\" \"\")\n-\t\t  (match_operand:VEC_C 2 \"vlogical_operand\" \"\")))]\n+  [(set (match_operand:VEC_F 0 \"vlogical_operand\" \"\")\n+\t(ge:VEC_F (match_operand:VEC_F 1 \"vlogical_operand\" \"\")\n+\t\t  (match_operand:VEC_F 2 \"vlogical_operand\" \"\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n+; >= for integer vectors: swap operands and apply not-greater-than\n+(define_expand \"vector_nlt<mode>\"\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n+\t(gt:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\" \"\")\n+\t\t  (match_operand:VEC_I 1 \"vlogical_operand\" \"\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+        (not:VEC_I (match_dup 3)))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n+}\")\n+\n (define_expand \"vector_gtu<mode>\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(gtu:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t   (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n+; >= for integer vectors: swap operands and apply not-greater-than\n+(define_expand \"vector_nltu<mode>\"\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n+\t(gtu:VEC_I (match_operand:VEC_I 2 \"vlogical_operand\" \"\")\n+\t \t   (match_operand:VEC_I 1 \"vlogical_operand\" \"\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+        (not:VEC_I (match_dup 3)))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n+}\")\n+\n (define_expand \"vector_geu<mode>\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(geu:VEC_I (match_operand:VEC_I 1 \"vint_operand\" \"\")\n \t\t   (match_operand:VEC_I 2 \"vint_operand\" \"\")))]\n   \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n   \"\")\n \n+; <= for integer vectors: apply not-greater-than\n+(define_expand \"vector_ngt<mode>\"\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n+\t(gt:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\" \"\")\n+\t\t  (match_operand:VEC_I 2 \"vlogical_operand\" \"\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+        (not:VEC_I (match_dup 3)))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n+}\")\n+\n+(define_expand \"vector_ngtu<mode>\"\n+  [(set (match_operand:VEC_I 3 \"vlogical_operand\" \"\")\n+\t(gtu:VEC_I (match_operand:VEC_I 1 \"vlogical_operand\" \"\")\n+\t \t   (match_operand:VEC_I 2 \"vlogical_operand\" \"\")))\n+   (set (match_operand:VEC_I 0 \"vlogical_operand\" \"\")\n+        (not:VEC_I (match_dup 3)))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"\n+{\n+  operands[3] = gen_reg_rtx_and_attrs (operands[0]);\n+}\")\n+\n (define_insn_and_split \"*vector_uneq<mode>\"\n   [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n \t(uneq:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")"}, {"sha": "8d7005f4077675fcaf68f6af69c024b31c16167f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -1,3 +1,7 @@\n+2015-07-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vec-cmp.c: New test.\n+\n 2015-07-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/56520"}, {"sha": "4bcc15bf75ec4a4dcef4f8dce5bff20ff277d314", "filename": "gcc/testsuite/gcc.target/powerpc/vec-cmp.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05d02b293b299352b9523875e96bf697f96baf4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-cmp.c?ref=a05d02b293b299352b9523875e96bf697f96baf4", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-do compile { target { powerpc64*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc64*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -mcpu=power8\" } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtub\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtuw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtsd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 16 } } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+cmple_sc (vector signed char x, vector signed char y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool char\n+cmple_uc (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool short\n+cmple_ss (vector signed short x, vector signed short y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool short\n+cmple_us (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool int\n+cmple_si (vector signed int x, vector signed int y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool int\n+cmple_ui (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long\n+cmple_sl (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool long long\n+cmple_ul (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmple (x, y);\n+}\n+\n+vector bool char\n+cmpge_sc (vector signed char x, vector signed char y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool char\n+cmpge_uc (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool short\n+cmpge_ss (vector signed short x, vector signed short y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool short\n+cmpge_us (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+cmpge_si (vector signed int x, vector signed int y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool int\n+cmpge_ui (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long\n+cmpge_sl (vector signed long long x, vector signed long long y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+\n+vector bool long long\n+cmpge_ul (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_cmpge (x, y);\n+}\n+"}]}