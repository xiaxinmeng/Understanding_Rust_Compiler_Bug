{"sha": "0835f1d7fa977a52e01042f657ed3c988933f61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzNWYxZDdmYTk3N2E1MmUwMTA0MmY2NTdlZDNjOTg4OTMzZjYxZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T07:58:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:58:38Z"}, "message": "sem_cat.adb (Check_Categorization_Dependencies): Add more detail to error msgs for most common cases.\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_cat.adb (Check_Categorization_Dependencies): Add more detail to\n\terror msgs for most common cases.\n\tUse new errout insertion char < (conditional warning)\n\nFrom-SVN: r103877", "tree": {"sha": "92f48a732331641f4fb3b3936a1cb416d56d05e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92f48a732331641f4fb3b3936a1cb416d56d05e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0835f1d7fa977a52e01042f657ed3c988933f61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0835f1d7fa977a52e01042f657ed3c988933f61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0835f1d7fa977a52e01042f657ed3c988933f61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0835f1d7fa977a52e01042f657ed3c988933f61f/comments", "author": null, "committer": null, "parents": [{"sha": "c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "db7594cf3b8cc96b91873892a03b81c1bd668496", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0835f1d7fa977a52e01042f657ed3c988933f61f/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0835f1d7fa977a52e01042f657ed3c988933f61f/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=0835f1d7fa977a52e01042f657ed3c988933f61f", "patch": "@@ -118,9 +118,17 @@ package body Sem_Cat is\n    is\n       N : constant Node_Id := Info_Node;\n \n+      --  Here we define an enumeration type to represent categorization\n+      --  types, ordered so that a unit with a given categorization can\n+      --  only WITH units with lower or equal categorization type.\n+\n       type Categorization is\n-         (Pure, Shared_Passive, Remote_Types,\n-           Remote_Call_Interface, Pre_Elaborated, Normal);\n+        (Pure,\n+         Shared_Passive,\n+         Remote_Types,\n+         Remote_Call_Interface,\n+         Preelaborated,\n+         Normal);\n \n       Unit_Category : Categorization;\n       With_Category : Categorization;\n@@ -136,7 +144,7 @@ package body Sem_Cat is\n       function Get_Categorization (E : Entity_Id) return Categorization is\n       begin\n          if Is_Preelaborated (E) then\n-            return Pre_Elaborated;\n+            return Preelaborated;\n          elsif Is_Pure (E) then\n             return Pure;\n          elsif Is_Shared_Passive (E) then\n@@ -163,43 +171,57 @@ package body Sem_Cat is\n       Unit_Category := Get_Categorization (Unit_Entity);\n       With_Category := Get_Categorization (Depended_Entity);\n \n+      --  These messages are wanings in GNAT mode, to allow it to be\n+      --  judiciously turned off. Otherwise it is a real error.\n+\n+      Error_Msg_Warn := GNAT_Mode;\n+\n+      --  Check for possible error\n+\n       if With_Category > Unit_Category then\n+\n+         --  Special case: Remote_Types and Remote_Call_Interface are allowed\n+         --  to be with'ed in package body.\n+\n          if (Unit_Category = Remote_Types\n                or else Unit_Category = Remote_Call_Interface)\n            and then In_Package_Body (Unit_Entity)\n          then\n             null;\n \n-         --  Subunit error case. In GNAT mode, this is only a warning to allow\n-         --  it to be judiciously turned off. Otherwise it is a real error.\n+         --  Here we have an error\n \n-         elsif Is_Subunit then\n-            if GNAT_Mode then\n-               Error_Msg_NE\n-                 (\"?subunit cannot depend on& \" &\n-                  \"(parent has wrong categorization)\", N, Depended_Entity);\n-            else\n+         else\n+            if Is_Subunit then\n                Error_Msg_NE\n-                 (\"subunit cannot depend on& \" &\n+                 (\"<subunit cannot depend on& \" &\n                   \"(parent has wrong categorization)\", N, Depended_Entity);\n-            end if;\n \n-         --  Normal error case. In GNAT mode, this is only a warning to allow\n-         --  it to be judiciously turned off. Otherwise it is a real error.\n-\n-         else\n-            if GNAT_Mode then\n-               Error_Msg_NE\n-                 (\"?current unit cannot depend on& \" &\n-                  \"(wrong categorization)\", N, Depended_Entity);\n             else\n                Error_Msg_NE\n-                 (\"current unit cannot depend on& \" &\n+                 (\"<cannot depend on& \" &\n                   \"(wrong categorization)\", N, Depended_Entity);\n             end if;\n+\n+            --  Add further explanation for common cases\n+\n+            case Unit_Category is\n+               when Pure =>\n+                  Error_Msg_NE\n+                    (\"\\<pure unit cannot depend on non-pure unit\",\n+                    N, Depended_Entity);\n+\n+               when Preelaborated =>\n+                  Error_Msg_NE\n+                    (\"\\<preelaborated unit cannot depend on \" &\n+                     \"non-preelaborated unit\",\n+                     N, Depended_Entity);\n+\n+               when others =>\n+                  null;\n+            end case;\n          end if;\n       end if;\n-\n    end Check_Categorization_Dependencies;\n \n    -----------------------------------\n@@ -332,7 +354,7 @@ package body Sem_Cat is\n                       Nkind (Unit (Cunit (Current_Sem_Unit)));\n \n    begin\n-      --  There are no restrictions on the body of a Remote Types unit.\n+      --  There are no restrictions on the body of a Remote Types unit\n \n       return Is_Remote_Types (Unit_Entity)\n         and then (Ekind (Unit_Entity) = E_Package\n@@ -785,7 +807,7 @@ package body Sem_Cat is\n          return;\n       end if;\n \n-      --  Body of RCI unit does not need validation.\n+      --  Body of RCI unit does not need validation\n \n       if Is_Remote_Call_Interface (E)\n         and then (Nkind (N) = N_Package_Body\n@@ -817,10 +839,10 @@ package body Sem_Cat is\n          end loop;\n       end;\n \n-      --  Child depends on parent; therefore parent should also\n-      --  be categorized and satify the dependency hierarchy.\n+      --  Child depends on parent; therefore parent should also be categorized\n+      --  and satify the dependency hierarchy.\n \n-      --  Check if N is a child spec.\n+      --  Check if N is a child spec\n \n       if (K in N_Generic_Declaration              or else\n           K in N_Generic_Instantiation            or else\n@@ -833,8 +855,8 @@ package body Sem_Cat is\n       then\n          Check_Categorization_Dependencies (E, Scope (E), N, False);\n \n-         --  Verify that public child of an RCI library unit\n-         --  must also be an RCI library unit (RM E.2.3(15)).\n+         --  Verify that public child of an RCI library unit must also be an\n+         --  RCI library unit (RM E.2.3(15)).\n \n          if Is_Remote_Call_Interface (Scope (E))\n            and then not Private_Present (P)\n@@ -896,13 +918,9 @@ package body Sem_Cat is\n                --  In GNAT mode, this is a warning, allowing the run-time\n                --  to judiciously bypass this error condition.\n \n-               if GNAT_Mode then\n-                  Error_Msg_N\n-                    (\"?statements not allowed in preelaborated unit\", Item);\n-               else\n-                  Error_Msg_N\n-                    (\"statements not allowed in preelaborated unit\", Item);\n-               end if;\n+               Error_Msg_Warn := GNAT_Mode;\n+               Error_Msg_N\n+                 (\"<statements not allowed in preelaborated unit\", Item);\n \n                exit;\n             end if;\n@@ -1217,7 +1235,7 @@ package body Sem_Cat is\n                   Error_Node := Param_Spec;\n                end if;\n \n-               --  Report error only if declaration is in source program.\n+               --  Report error only if declaration is in source program\n \n                if Comes_From_Source\n                  (Defining_Entity (Specification (N)))\n@@ -1724,7 +1742,7 @@ package body Sem_Cat is\n       E : Entity_Id;\n \n       function Is_Primary (N : Node_Id) return Boolean;\n-      --  Determine whether node is syntactically a primary in an expression.\n+      --  Determine whether node is syntactically a primary in an expression\n \n       ----------------\n       -- Is_Primary --\n@@ -1782,7 +1800,7 @@ package body Sem_Cat is\n       --  discriminant specification, or actual in a record type initialization\n       --  call.\n \n-      --  Initialization call of internal types.\n+      --  Initialization call of internal types\n \n       elsif Nkind (Parent (N)) = N_Procedure_Call_Statement then\n "}]}