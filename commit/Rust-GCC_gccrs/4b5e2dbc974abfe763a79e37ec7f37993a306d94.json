{"sha": "4b5e2dbc974abfe763a79e37ec7f37993a306d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1ZTJkYmM5NzRhYmZlNzYzYTc5ZTM3ZWM3ZjM3OTkzYTMwNmQ5NA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2006-06-08T01:18:16Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2006-06-08T01:18:16Z"}, "message": "re PR middle-end/27793 (num_ssa_names inconsistent or immediate use iterator wrong)\n\n\n2006-06-07  Andrew MacLeod  <amacleod@redhat.com>\n\n\tPR middle-end/27793\n\t* tree-dfa.c (referenced_vars_dup_list): New.  List of duplicate \n\treferenced_variables with matching DECL_UID's.\n\t(find_referenced_vars): Make sure duplicate list is empty to start.\n\t(referenced_var_p): Remove.\n\t(referenced_var_check_and_insert): Renamed from referenced_var_insert.  \n\tCheck if var is in the list, and add if needed.  Update the duplicate\n\tlist if a different var is in the list with the same DECL_UID.\n\t(add_referenced_var): Call routine to check and insert.\n\t* tree-ssa.c (delete_tree_ssa): Clear var_ann's on duplicates.\n\t* tree-flow.h (referenced_vars_dup_list): External declaration.\n\nFrom-SVN: r114480", "tree": {"sha": "f792289fadf43fd192c8ce4c6629ffdae96b0e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f792289fadf43fd192c8ce4c6629ffdae96b0e3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b5e2dbc974abfe763a79e37ec7f37993a306d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5e2dbc974abfe763a79e37ec7f37993a306d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b5e2dbc974abfe763a79e37ec7f37993a306d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b5e2dbc974abfe763a79e37ec7f37993a306d94/comments", "author": null, "committer": null, "parents": [{"sha": "eb7a0591a30cd20fe1dc79ca3f0870eeb2ed7f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7a0591a30cd20fe1dc79ca3f0870eeb2ed7f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7a0591a30cd20fe1dc79ca3f0870eeb2ed7f78"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "6a44f7d5bc04036a8bd2b8738609623e255a35ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b5e2dbc974abfe763a79e37ec7f37993a306d94", "patch": "@@ -1,3 +1,17 @@\n+2006-06-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR middle-end/27793\n+\t* tree-dfa.c (referenced_vars_dup_list): New.  List of duplicate \n+\treferenced_variables with matching DECL_UID's.\n+\t(find_referenced_vars): Make sure duplicate list is empty to start.\n+\t(referenced_var_p): Remove.\n+\t(referenced_var_check_and_insert): Renamed from referenced_var_insert.  \n+\tCheck if var is in the list, and add if needed.  Update the duplicate\n+\tlist if a different var is in the list with the same DECL_UID.\n+\t(add_referenced_var): Call routine to check and insert.\n+\t* tree-ssa.c (delete_tree_ssa): Clear var_ann's on duplicates.\n+\t* tree-flow.h (referenced_vars_dup_list): External declaration.\n+\n 2006-06-07  Fred Fish  <fnf@specifix.com>\n \n \t* config/mips/t-elf (MULTILIB_MATCHES): Combine two entries"}, {"sha": "b5a01785eac49fe83656df92f381f51e080dcb57", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=4b5e2dbc974abfe763a79e37ec7f37993a306d94", "patch": "@@ -75,6 +75,8 @@ static tree find_vars_r (tree *, int *, void *);\n \n /* Array of all variables referenced in the function.  */\n htab_t referenced_vars;\n+/* List of referenced variables with duplicate UID's.  */\n+VEC(tree,gc) *referenced_vars_dup_list;\n \n /* Default definition for this symbols.  If set for symbol, it\n    means that the first reference to this variable in the function is a\n@@ -100,6 +102,7 @@ find_referenced_vars (void)\n   basic_block bb;\n   block_stmt_iterator si;\n \n+  gcc_assert (VEC_length (tree, referenced_vars_dup_list) == 0);\n   FOR_EACH_BB (bb)\n     for (si = bsi_start (bb); !bsi_end_p (si); bsi_next (&si))\n       {\n@@ -606,22 +609,6 @@ find_vars_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n   return NULL_TREE;\n }\n \n-/* Lookup VAR in the referenced_vars hashtable and return true if it is\n-   present.  */\n-\n-static inline bool\n-referenced_var_p (tree var)\n-{\n-  struct int_tree_map *h, in;\n-  in.uid = DECL_UID (var);\n-  h = (struct int_tree_map *) htab_find_with_hash (referenced_vars, \n-\t\t\t\t\t\t   &in, \n-\t\t\t\t\t\t   in.uid);\n-  if (h)\n-    return h->to != NULL_TREE;\n-  return false;\n-}\n-\n /* Lookup UID in the referenced_vars hashtable and return the associated\n    variable.  */\n \n@@ -637,22 +624,52 @@ referenced_var_lookup (unsigned int uid)\n   return NULL_TREE;\n }\n \n-/* Insert the pair UID, TO into the referenced_vars hashtable.  */\n+/* Check if TO is in the referenced_vars hash table and insert it if not.  \n+   Return true if it required insertion.  */\n \n-static void\n-referenced_var_insert (unsigned int uid, tree to)\n+static bool\n+referenced_var_check_and_insert (tree to)\n { \n-  struct int_tree_map *h;\n+  struct int_tree_map *h, in;\n   void **loc;\n+  unsigned int uid = DECL_UID (to);\n+\n+  in.uid = uid;\n+  in.to = to;\n+  h = (struct int_tree_map *) htab_find_with_hash (referenced_vars, &in, uid);\n+\n+  if (h)\n+    {\n+      unsigned u;\n+      tree t = NULL_TREE;\n+\n+      /* DECL_UID has already been entered in the table.  Verify that it is\n+\t the same entry as TO.  */\n+      gcc_assert (h->to != NULL);\n+      if (h->to == to)\n+        return false;\n+\n+      /* PRs 26757 and 27793.  Maintain a list of duplicate variable pointers\n+\t with the same DECL_UID.  There isn't usually very many.\n+\t TODO.  Once the C++ front end doesn't create duplicate DECL UID's, this\n+\t code can be removed.  */\n+      for (u = 0; u < VEC_length (tree, referenced_vars_dup_list); u++)\n+\t{\n+\t  t = VEC_index (tree, referenced_vars_dup_list, u);\n+\t  if (t == to)\n+\t    break;\n+\t}\n+      if (t != to)\n+\tVEC_safe_push (tree, gc, referenced_vars_dup_list, to);\n+      return false;\n+    }\n \n   h = GGC_NEW (struct int_tree_map);\n   h->uid = uid;\n   h->to = to;\n   loc = htab_find_slot_with_hash (referenced_vars, h, uid, INSERT);\n-  /* This assert can only trigger if a variable with the same UID has been \n-     inserted already.  */\n-  gcc_assert ((*(struct int_tree_map **)loc) == NULL);\n   *(struct int_tree_map **)  loc = h;\n+  return true;\n }\n \n /* Lookup VAR UID in the default_defs hashtable and return the associated\n@@ -715,13 +732,11 @@ add_referenced_var (tree var)\n   v_ann = get_var_ann (var);\n   gcc_assert (DECL_P (var));\n   \n-  if (!referenced_var_p (var))\n+  /* Insert VAR into the referenced_vars has table if it isn't present.  */\n+  if (referenced_var_check_and_insert (var))\n     {\n-      /* This is the first time we find this variable, add it to the\n-         REFERENCED_VARS array and annotate it with attributes that are\n-\t intrinsic to the variable.  */\n-      \n-      referenced_var_insert (DECL_UID (var), var);\n+      /* This is the first time we found this variable, annotate it with\n+\t attributes that are intrinsic to the variable.  */\n       \n       /* Tag's don't have DECL_INITIAL.  */\n       if (MTAG_P (var))"}, {"sha": "abb585aba1cb9ba380f8a932c70fe2954ec355e9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4b5e2dbc974abfe763a79e37ec7f37993a306d94", "patch": "@@ -419,6 +419,8 @@ typedef struct\n \n /* Array of all variables referenced in the function.  */\n extern GTY((param_is (struct int_tree_map))) htab_t referenced_vars;\n+/* List of referenced variables in the function with duplicate UID's.  */\n+extern VEC(tree,gc) *referenced_vars_dup_list;\n \n /* Default defs for undefined symbols. */\n extern GTY((param_is (struct int_tree_map))) htab_t default_defs;"}, {"sha": "9eb1b215d17fc01c0a07e780b3f98bb7c8d7eb0f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b5e2dbc974abfe763a79e37ec7f37993a306d94/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4b5e2dbc974abfe763a79e37ec7f37993a306d94", "patch": "@@ -853,6 +853,7 @@ delete_tree_ssa (void)\n   block_stmt_iterator bsi;\n   referenced_var_iterator rvi;\n   tree var;\n+  unsigned u;\n \n   /* Release any ssa_names still in use.  */\n   for (i = 0; i < num_ssa_names; i++)\n@@ -887,6 +888,16 @@ delete_tree_ssa (void)\n       ggc_free (var->common.ann);\n       var->common.ann = NULL;\n     }\n+\n+  /* Remove any referenced variables which had duplicate UID's.  */\n+  for (u = 0; u < VEC_length (tree, referenced_vars_dup_list); u++)\n+    {\n+      var = VEC_index (tree, referenced_vars_dup_list, u);\n+      ggc_free (var->common.ann);\n+      var->common.ann = NULL;\n+    }\n+  VEC_free (tree, gc, referenced_vars_dup_list);\n+\n   htab_delete (referenced_vars);\n   referenced_vars = NULL;\n "}]}