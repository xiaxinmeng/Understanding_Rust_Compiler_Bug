{"sha": "34144b6ec0548510df171956040f91a8742def29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxNDRiNmVjMDU0ODUxMGRmMTcxOTU2MDQwZjkxYTg3NDJkZWYyOQ==", "commit": {"author": {"name": "Than McIntosh", "email": "thanm@google.com", "date": "2016-09-09T18:27:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-09T18:27:42Z"}, "message": "compiler: add abstraction layer for sha1 checksums.\n\n    \n    Add new interface for the front end code to use when computing SHA1\n    checksums; the intent is to allow the different implementation in\n    different back ends.\n    \n    No change in functionality for gccgo; this is an enabling change to\n    permit the front end to be used with other back ends (e.g. LLVM).\n    \n    Reviewed-on: https://go-review.googlesource.com/28833\n\n\t* go-sha1.cc: New file.\n\t* Make-lang.in (GO_OBJS): Add go/go-sha1.o.\n\t(CFLAGS-go/go-sha1.o): New variable.\n\nFrom-SVN: r240053", "tree": {"sha": "8e69d15b9145f6056b170cf44fb802a3b9139ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e69d15b9145f6056b170cf44fb802a3b9139ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34144b6ec0548510df171956040f91a8742def29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34144b6ec0548510df171956040f91a8742def29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34144b6ec0548510df171956040f91a8742def29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34144b6ec0548510df171956040f91a8742def29/comments", "author": {"login": "thanm", "id": 12280172, "node_id": "MDQ6VXNlcjEyMjgwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/12280172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thanm", "html_url": "https://github.com/thanm", "followers_url": "https://api.github.com/users/thanm/followers", "following_url": "https://api.github.com/users/thanm/following{/other_user}", "gists_url": "https://api.github.com/users/thanm/gists{/gist_id}", "starred_url": "https://api.github.com/users/thanm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thanm/subscriptions", "organizations_url": "https://api.github.com/users/thanm/orgs", "repos_url": "https://api.github.com/users/thanm/repos", "events_url": "https://api.github.com/users/thanm/events{/privacy}", "received_events_url": "https://api.github.com/users/thanm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e81e83d04796b834c9f3e63d74b7202bca28e5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81e83d04796b834c9f3e63d74b7202bca28e5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81e83d04796b834c9f3e63d74b7202bca28e5c9"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "8214ece4b23dfc056ff98d031e9f5e72a41979d3", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -1,3 +1,9 @@\n+2016-09-09  Than McIntosh  <thanm@google.com>\n+\n+\t* go-sha1.cc: New file.\n+\t* Make-lang.in (GO_OBJS): Add go/go-sha1.o.\n+\t(CFLAGS-go/go-sha1.o): New variable.\n+\n 2016-09-01  Martin Sebor  <msebor@redhat.com>\n \n \t* gofrontend/expressions.cc: Increase buffer size to guarantee"}, {"sha": "e7011f9d2420303ea251198f3eb572b88219f33f", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -59,6 +59,7 @@ GO_OBJS = \\\n \tgo/go-lang.o \\\n \tgo/go-linemap.o \\\n \tgo/go-optimize.o \\\n+\tgo/go-sha1.o \\\n \tgo/go.o \\\n \tgo/gogo.o \\\n \tgo/import.o \\\n@@ -225,6 +226,7 @@ GOINCLUDES = -I $(srcdir)/go -I $(srcdir)/go/gofrontend\n \n CFLAGS-go/go-gcc.o += $(GOINCLUDES)\n CFLAGS-go/go-linemap.o += $(GOINCLUDES)\n+CFLAGS-go/go-sha1.o += $(GOINCLUDES)\n \n go/%.o: go/gofrontend/%.cc\n \t$(COMPILE) $(GOINCLUDES) $<"}, {"sha": "874b9635a767d99cd4d7665139193b15556ed7a3", "filename": "gcc/go/go-sha1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgo-sha1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgo-sha1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-sha1.cc?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -0,0 +1,71 @@\n+/* go-sha1.cc -- Go frontend interface to gcc backend.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"go-sha1.h\"\n+#include \"sha1.h\"\n+\n+class Gcc_sha1_helper : public Go_sha1_helper\n+{\n+ public:\n+\n+  Gcc_sha1_helper() : ctx_(new sha1_ctx) { sha1_init_ctx(this->ctx_); }\n+\n+  ~Gcc_sha1_helper();\n+\n+  // Incorporate 'len' bytes from 'buffer' into checksum.\n+  void\n+  process_bytes(const void* buffer, size_t len);\n+\n+  // Finalize checksum and return in the form of a string.\n+  std::string\n+  finish();\n+\n+ private:\n+  sha1_ctx *ctx_;\n+};\n+\n+Gcc_sha1_helper::~Gcc_sha1_helper()\n+{\n+  delete ctx_;\n+}\n+\n+void\n+Gcc_sha1_helper::process_bytes(const void* buffer, size_t len)\n+{\n+  sha1_process_bytes(buffer, len, this->ctx_);\n+}\n+\n+std::string\n+Gcc_sha1_helper::finish()\n+{\n+  // Use a union to provide the required alignment.\n+  union\n+  {\n+    char checksum[checksum_len];\n+    long align;\n+  } u;\n+  sha1_finish_ctx(this->ctx_, u.checksum);\n+  return std::string(u.checksum, checksum_len);\n+}\n+\n+Go_sha1_helper*\n+go_create_sha1_helper()\n+{\n+  return new Gcc_sha1_helper();\n+}"}, {"sha": "af731f1610f1f814ecc31f4d6051d730247a0ec5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -1,4 +1,4 @@\n-4de301275dfed034a1dd9dff3d1af8643ee5cb4b\n+2022ddc85f812b6990b72c7e95b8207e07ac8984\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "bec4c7ff978e1dde8d201f4181c882bc135e3c1a", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -6,8 +6,7 @@\n \n #include \"go-system.h\"\n \n-#include \"sha1.h\"\n-\n+#include \"go-sha1.h\"\n #include \"go-c.h\"\n \n #include \"gogo.h\"\n@@ -40,6 +39,7 @@ const int Export::checksum_len;\n Export::Export(Stream* stream)\n   : stream_(stream), type_refs_(), type_index_(1), packages_()\n {\n+  go_assert(Export::checksum_len == Go_sha1_helper::checksum_len);\n }\n \n // A functor to sort Named_object pointers by name.\n@@ -686,9 +686,8 @@ Export::register_builtin_type(Gogo* gogo, const char* name, Builtin_code code)\n \n Export::Stream::Stream()\n {\n-  this->checksum_ = new sha1_ctx;\n-  memset(this->checksum_, 0, sizeof(sha1_ctx));\n-  sha1_init_ctx(this->checksum_);\n+  this->sha1_helper_ = go_create_sha1_helper();\n+  go_assert(this->sha1_helper_ != NULL);\n }\n \n Export::Stream::~Stream()\n@@ -701,7 +700,7 @@ Export::Stream::~Stream()\n void\n Export::Stream::write_and_sum_bytes(const char* bytes, size_t length)\n {\n-  sha1_process_bytes(bytes, length, this->checksum_);\n+  this->sha1_helper_->process_bytes(bytes, length);\n   this->do_write(bytes, length);\n }\n \n@@ -710,14 +709,9 @@ Export::Stream::write_and_sum_bytes(const char* bytes, size_t length)\n std::string\n Export::Stream::checksum()\n {\n-  // Use a union to provide the required alignment.\n-  union\n-  {\n-    char checksum[Export::checksum_len];\n-    long align;\n-  } u;\n-  sha1_finish_ctx(this->checksum_, u.checksum);\n-  return std::string(u.checksum, Export::checksum_len);\n+  std::string rval = this->sha1_helper_->finish();\n+  delete this->sha1_helper_;\n+  return rval;\n }\n \n // Write the checksum string to the export data."}, {"sha": "fec73fbd75e1200ec60588cfd0d9d99c9b4c7a4a", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -9,7 +9,7 @@\n \n #include \"string-dump.h\"\n \n-struct sha1_ctx;\n+class Go_sha1_helper;\n class Gogo;\n class Import_init;\n class Bindings;\n@@ -109,8 +109,8 @@ class Export : public String_dump\n     void\n     write_and_sum_bytes(const char*, size_t);\n \n-    // The checksum.\n-    sha1_ctx* checksum_;\n+    // The checksum helper.\n+    Go_sha1_helper* sha1_helper_;\n   };\n \n   Export(Stream*);"}, {"sha": "22db5a2b4b95522039eb111be322a399ff5541be", "filename": "gcc/go/gofrontend/go-sha1.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fgo-sha1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34144b6ec0548510df171956040f91a8742def29/gcc%2Fgo%2Fgofrontend%2Fgo-sha1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo-sha1.h?ref=34144b6ec0548510df171956040f91a8742def29", "patch": "@@ -0,0 +1,33 @@\n+// go-sha1.h -- GCC specific sha1 checksum utilities.   -*- C++ -*-\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_SHA1_H\n+#define GO_SHA1_H\n+\n+#include \"go-system.h\"\n+\n+//\n+// Interface class for computation of SHA1 checksums. Front end requests\n+// one of these objects from the back end to use for computing\n+// checksums (each back end tends to have a different SHA1 implementation).\n+// Back ends are expected to create a new class that derives from this\n+// one containing an implementation.\n+//\n+\n+class Go_sha1_helper\n+{\n+ public:\n+  virtual ~Go_sha1_helper() { }\n+  virtual void process_bytes(const void* buffer, size_t len) = 0;\n+  virtual std::string finish() = 0;\n+  static const int checksum_len = 20;\n+};\n+\n+// Call to create and return a new sha1 helper (this routine defined\n+// by the backend). Caller is responsible for deletion.\n+extern Go_sha1_helper* go_create_sha1_helper();\n+\n+#endif // !defined(GO_SHA1_H)"}]}