{"sha": "b034930ffb2b6c44a85d7316b622cf4cc4df2737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzNDkzMGZmYjJiNmM0NGE4NWQ3MzE2YjYyMmNmNGNjNGRmMjczNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-27T14:48:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-27T14:48:02Z"}, "message": "arm.c (output_return_instruction): Only restore IP into SP if frame_pointer_needed.\n\n\t* config/arm/arm.c (output_return_instruction): Only restore IP\n\tinto SP if frame_pointer_needed.\n\n\t* gcc.dg/arm-mmx-1.c: New test.\n\nFrom-SVN: r76710", "tree": {"sha": "881e0f5d7ed2e65c7a43845def0bdf3df46207b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881e0f5d7ed2e65c7a43845def0bdf3df46207b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b034930ffb2b6c44a85d7316b622cf4cc4df2737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b034930ffb2b6c44a85d7316b622cf4cc4df2737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b034930ffb2b6c44a85d7316b622cf4cc4df2737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b034930ffb2b6c44a85d7316b622cf4cc4df2737/comments", "author": null, "committer": null, "parents": [{"sha": "be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be446dfc6bb52f0aecbc0c7fc71b7a8fbb35be4b"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "119c20ab6496dc4fe3cbf49c58d10cabae315cc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b034930ffb2b6c44a85d7316b622cf4cc4df2737", "patch": "@@ -1,3 +1,8 @@\n+2004-01-27  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* config/arm/arm.c (output_return_instruction): Only restore IP\n+\tinto SP if frame_pointer_needed.\n+\n 2004-01-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (function_arg_pass_by_reference): Return 1"}, {"sha": "b70e68b1e1822f57bc69f5471710a909f55913e0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b034930ffb2b6c44a85d7316b622cf4cc4df2737", "patch": "@@ -8260,15 +8260,25 @@ output_return_instruction (rtx operand, int really_return, int reverse)\n \treturn_reg = reg_names[LR_REGNUM];\n \n       if ((live_regs_mask & (1 << IP_REGNUM)) == (1 << IP_REGNUM))\n-\t/* There are two possible reasons for the IP register being saved.\n-\t   Either a stack frame was created, in which case IP contains the\n-\t   old stack pointer, or an ISR routine corrupted it.  If this in an\n-\t   ISR routine then just restore IP, otherwise restore IP into SP.  */\n-\tif (! IS_INTERRUPT (func_type))\n-\t  {\n-\t    live_regs_mask &= ~ (1 << IP_REGNUM);\n-\t    live_regs_mask |=   (1 << SP_REGNUM);\n-\t  }\n+\t{\n+\t  /* There are three possible reasons for the IP register\n+\t     being saved.  1) a stack frame was created, in which case\n+\t     IP contains the old stack pointer, or 2) an ISR routine\n+\t     corrupted it, or 3) it was saved to align the stack on\n+\t     iWMMXt.  In case 1, restore IP into SP, otherwise just\n+\t     restore IP.  */\n+\t  if (frame_pointer_needed)\n+\t    {\n+\t      live_regs_mask &= ~ (1 << IP_REGNUM);\n+\t      live_regs_mask |=   (1 << SP_REGNUM);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (! IS_INTERRUPT (func_type)\n+\t\t  && ! TARGET_REALLY_IWMMXT)\n+\t\tabort ();\n+\t    }\n+\t}\n \n       /* On some ARM architectures it is faster to use LDR rather than\n \t LDM to load a single register.  On other architectures, the"}, {"sha": "a89844292bde5531214ea9a33e3e5320e1365cd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b034930ffb2b6c44a85d7316b622cf4cc4df2737", "patch": "@@ -1,3 +1,7 @@\n+2004-01-27  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* gcc.dg/arm-mmx-1.c: New test.\n+\n 2004-01-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/20040127-1.c: New test."}, {"sha": "4f95d8d1fede22a87b7190495584bd7d69e31344", "filename": "gcc/testsuite/gcc.dg/arm-mmx-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b034930ffb2b6c44a85d7316b622cf4cc4df2737/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farm-mmx-1.c?ref=b034930ffb2b6c44a85d7316b622cf4cc4df2737", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that if IP is saved to ensure stack alignment, we don't load\n+   it into sp.  */\n+/* { dg-do compile { target arm*-*-* strongarm*-*-* xscale*-*-*} } */\n+/* { dg-options \"-O -mno-apcs-frame -mcpu=iwmmxt\" } */\n+/* { dg-final { scan-assembler \"ldmfd\\[ \t]sp!.*ip,\\[ ]*pc\" } } */\n+\n+/* This function uses all the call-saved registers, namely r4, r5, r6,\n+   r7, r8, r9, sl, fp.  Since we also save pc, that leaves an odd\n+   number of registers, and the compiler will push ip to align the\n+   stack.  Make sure that we restore ip into ip, not into sp as is\n+   done when using a frame pointer.  The -mno-apcs-frame option\n+   permits the frame pointer to be used as an ordinary register.  */\n+int\n+foo(int *a, int *b, int *c, int *d, int *tot)\n+{\n+  int i, j, k, l, m, n, o;\n+\n+  *tot = 0;\n+  for (i = *a; i < *b; i += *c)\n+    for (j = *a; j < *b; j += *d)\n+      for (k = *a; k < *c; k += *d)\n+\tfor (l = *b; k < *c; k += *d)\n+\t  for (m = *d; k < *c; k += *b)\n+\t    *tot += i + j + k + l + m;\n+  return *tot;\n+}"}]}