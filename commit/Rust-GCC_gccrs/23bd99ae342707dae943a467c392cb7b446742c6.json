{"sha": "23bd99ae342707dae943a467c392cb7b446742c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiZDk5YWUzNDI3MDdkYWU5NDNhNDY3YzM5MmNiN2I0NDY3NDJjNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-16T11:19:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-16T11:19:25Z"}, "message": "(optimize_bit_field_compare, decode_field_reference): Pass new arg to\nget_inner_reference.\n\nFrom-SVN: r13188", "tree": {"sha": "d7ab7b5f3079f911823057162f2cbb520c784f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ab7b5f3079f911823057162f2cbb520c784f3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23bd99ae342707dae943a467c392cb7b446742c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bd99ae342707dae943a467c392cb7b446742c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23bd99ae342707dae943a467c392cb7b446742c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23bd99ae342707dae943a467c392cb7b446742c6/comments", "author": null, "committer": null, "parents": [{"sha": "839c47964ea35b14d873a5c0774d85bcc0c5cbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839c47964ea35b14d873a5c0774d85bcc0c5cbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839c47964ea35b14d873a5c0774d85bcc0c5cbd9"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "2147e2eb5536ec2ace685616882682c14955b4e8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23bd99ae342707dae943a467c392cb7b446742c6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23bd99ae342707dae943a467c392cb7b446742c6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=23bd99ae342707dae943a467c392cb7b446742c6", "patch": "@@ -2312,6 +2312,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n   enum machine_mode lmode, rmode, lnmode, rnmode;\n   int lunsignedp, runsignedp;\n   int lvolatilep = 0, rvolatilep = 0;\n+  int alignment;\n   tree linner, rinner;\n   tree mask;\n   tree offset;\n@@ -2320,7 +2321,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n      if the same as the size of the underlying object, we aren't doing an\n      extraction at all and so can do nothing.  */\n   linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n-\t\t\t\t&lunsignedp, &lvolatilep);\n+\t\t\t\t&lunsignedp, &lvolatilep, &alignment);\n   if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n       || offset != 0)\n     return 0;\n@@ -2329,8 +2330,8 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n    {\n      /* If this is not a constant, we can only do something if bit positions,\n \tsizes, and signedness are the same.   */\n-     rinner = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset,\n-\t\t\t\t   &rmode, &runsignedp, &rvolatilep);\n+     rinner = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset, &rmode,\n+\t\t\t\t   &runsignedp, &rvolatilep, &alignment);\n \n      if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n \t || lunsignedp != runsignedp || offset != 0)\n@@ -2503,6 +2504,7 @@ decode_field_reference (exp, pbitsize, pbitpos, pmode, punsignedp,\n   tree mask, inner, offset;\n   tree unsigned_type;\n   int precision;\n+  int alignment;\n \n   /* All the optimizations using this function assume integer fields.  \n      There are problems with FP fields since the type_for_size call\n@@ -2523,7 +2525,7 @@ decode_field_reference (exp, pbitsize, pbitpos, pmode, punsignedp,\n \n \n   inner = get_inner_reference (exp, pbitsize, pbitpos, &offset, pmode,\n-\t\t\t       punsignedp, pvolatilep);\n+\t\t\t       punsignedp, pvolatilep, &alignment);\n   if ((inner == exp && and_mask == 0)\n       || *pbitsize < 0 || offset != 0)\n     return 0;"}]}