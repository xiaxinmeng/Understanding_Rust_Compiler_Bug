{"sha": "7955b06580a73bd6ad0d744928ab4775e4723c78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1NWIwNjU4MGE3M2JkNmFkMGQ3NDQ5MjhhYjQ3NzVlNDcyM2M3OA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-12T11:06:44Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-12T11:06:44Z"}, "message": "configure.ac: Move pthread affinity test to the place where '-pthread' passed to CFLAGS.\n\nlibcilkrts/\n\t* configure.ac: Move pthread affinity test to the place where\n\t'-pthread' passed to CFLAGS. Otherwise the test always fails.\n\t(XCFLAGS): New variable for correctly passing\n\t'-pthread'.\n\t(XLDFLAGS): New variable for passing the correct pthread lib.\n\t* configure: Regenerate.\n\t* Makefile.am (AM_CFLAGS): Add $XCFLAGS.\n\t(AM_LDFLAGS): Add $XLDFLAGS.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r213854", "tree": {"sha": "158a00fe3e709b3e54e467d019bdf2029d24f729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/158a00fe3e709b3e54e467d019bdf2029d24f729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7955b06580a73bd6ad0d744928ab4775e4723c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7955b06580a73bd6ad0d744928ab4775e4723c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7955b06580a73bd6ad0d744928ab4775e4723c78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7955b06580a73bd6ad0d744928ab4775e4723c78/comments", "author": null, "committer": null, "parents": [{"sha": "5435176b314566bf4b8907d323619bc9c73076b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5435176b314566bf4b8907d323619bc9c73076b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5435176b314566bf4b8907d323619bc9c73076b3"}], "stats": {"total": 178, "additions": 118, "deletions": 60}, "files": [{"sha": "ab10a0b596c4a44764d5ab01bef6abfc96f37365", "filename": "libcilkrts/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FChangeLog?ref=7955b06580a73bd6ad0d744928ab4775e4723c78", "patch": "@@ -1,3 +1,15 @@\n+2014-08-01  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* configure.ac: Move pthread affinity test to the place where\n+\t'-pthread' passed to CFLAGS. Otherwise the test always fails.\n+\t(XCFLAGS): New variable for correctly passing\n+\t'-pthread'.\n+\t(XLDFLAGS): New variable for passing the correct pthread lib.\n+\t* configure: Regenerate.\n+\t* Makefile.am (AM_CFLAGS): Add $XCFLAGS.\n+\t(AM_LDFLAGS): Add $XLDFLAGS.\n+\t* Makefile.in: Regenerate.\n+\n 2014-05-21  John Marino  <gnugcc@marino.st>\n \n \t* runtime/os-unix.c (__DragonFly__): New target."}, {"sha": "70538a21a50646403f45eacbaaab29db4957b92d", "filename": "libcilkrts/Makefile.am", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.am?ref=7955b06580a73bd6ad0d744928ab4775e4723c78", "patch": "@@ -43,9 +43,9 @@ GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime -I$(top_srcdir)/\n # Enable Intel Cilk Plus extension\n GENERAL_FLAGS += -fcilkplus\n \n-AM_CFLAGS = $(GENERAL_FLAGS) -std=c99\n+AM_CFLAGS = $(XCFLAGS) $(GENERAL_FLAGS) -std=c99\n AM_CPPFLAGS = $(GENERAL_FLAGS)\n-AM_LDFLAGS = -lpthread \n+AM_LDFLAGS = $(XLDFLAGS)\n \n # May be used by toolexeclibdir.\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n@@ -92,7 +92,8 @@ include include/internal/rev.mk\n \n #libcilkrts_la_LDFLAGS  = -rpath '$(libdir)'\n libcilkrts_la_LDFLAGS = -version-info 5:0:0\n-libcilkrts_la_LDFLAGS += -lpthread @lt_cv_dlopen_libs@\n+libcilkrts_la_LDFLAGS += @lt_cv_dlopen_libs@\n+libcilkrts_la_LDFLAGS += $(AM_LDFLAGS)\n \n # If we're building on Linux, use the Linux version script\n if LINUX_LINKER_SCRIPT"}, {"sha": "e1a54b57678dc768ae1313606406ebf36dfcaf68", "filename": "libcilkrts/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2FMakefile.in?ref=7955b06580a73bd6ad0d744928ab4775e4723c78", "patch": "@@ -270,6 +270,8 @@ SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n STRIP = @STRIP@\n VERSION = @VERSION@\n+XCFLAGS = @XCFLAGS@\n+XLDFLAGS = @XLDFLAGS@\n abs_builddir = @abs_builddir@\n abs_srcdir = @abs_srcdir@\n abs_top_builddir = @abs_top_builddir@\n@@ -344,9 +346,9 @@ ACLOCAL_AMFLAGS = -I .. -I ../config\n GENERAL_FLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/runtime \\\n \t-I$(top_srcdir)/runtime/config/$(config_dir) \\\n \t-DIN_CILK_RUNTIME=1 -fcilkplus\n-AM_CFLAGS = $(GENERAL_FLAGS) -std=c99\n+AM_CFLAGS = $(XCFLAGS) $(GENERAL_FLAGS) -std=c99\n AM_CPPFLAGS = $(GENERAL_FLAGS)\n-AM_LDFLAGS = -lpthread \n+AM_LDFLAGS = $(XLDFLAGS)\n \n # May be used by toolexeclibdir.\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n@@ -393,9 +395,8 @@ CILK_REVISION = 3902\n #libcilkrts_la_LDFLAGS  = -rpath '$(libdir)'\n \n # Hack for Cygwin\n-libcilkrts_la_LDFLAGS = -version-info 5:0:0 -lpthread \\\n-\t@lt_cv_dlopen_libs@ $(am__append_1) $(am__append_2) \\\n-\t-no-undefined\n+libcilkrts_la_LDFLAGS = -version-info 5:0:0 @lt_cv_dlopen_libs@ \\\n+\t$(AM_LDFLAGS) $(am__append_1) $(am__append_2) -no-undefined\n \n # C/C++ header files for Cilk.\n # cilkincludedir = $(includedir)/cilk"}, {"sha": "1e8eabd9bfbb7804cd346c9572a67f79308cc9ed", "filename": "libcilkrts/configure", "status": "modified", "additions": 57, "deletions": 34, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure?ref=7955b06580a73bd6ad0d744928ab4775e4723c78", "patch": "@@ -605,6 +605,8 @@ am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n link_cilkrts\n+XLDFLAGS\n+XCFLAGS\n lt_cv_dlopen_libs\n toolexeclibdir\n toolexecdir\n@@ -11057,7 +11059,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11060 \"configure\"\n+#line 11062 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11163,7 +11165,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11166 \"configure\"\n+#line 11168 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14421,40 +14423,11 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-# Check for pthread_{,attr_}[sg]etaffinity_np.\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#define _GNU_SOURCE\n-   #include <pthread.h>\n-int\n-main ()\n-{\n-cpu_set_t cpuset;\n-   pthread_attr_t attr;\n-   pthread_getaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n-   if (CPU_ISSET (0, &cpuset))\n-     CPU_SET (1, &cpuset);\n-   else\n-     CPU_ZERO (&cpuset);\n-   pthread_setaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n-   pthread_attr_init (&attr);\n-   pthread_attr_getaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n-   pthread_attr_setaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-\n-$as_echo \"#define HAVE_PTHREAD_AFFINITY_NP 1\" >>confdefs.h\n-\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-\n # Check to see if -pthread or -lpthread is needed.  Prefer the former.\n # Note that the CILK_SELF_SPEC in gcc.c may force -pthread.\n # In case the pthread.h system header is not found, this test will fail.\n+XCFLAGS=\"\"\n+XLDFLAGS=\"\"\n CFLAGS=\"$CFLAGS -pthread\"\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n@@ -14469,7 +14442,7 @@ pthread_t t; pthread_create(&t,NULL,g,NULL);\n }\n _ACEOF\n if ac_fn_c_try_link \"$LINENO\"; then :\n-\n+  XCFLAGS=\" -Wc,-pthread\"\n else\n   CFLAGS=\"$save_CFLAGS\" LIBS=\"-lpthread $LIBS\"\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -14495,6 +14468,56 @@ fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n \n+# Check for pthread_{,attr_}[sg]etaffinity_np.\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#define _GNU_SOURCE\n+   #include <pthread.h>\n+int\n+main ()\n+{\n+cpu_set_t cpuset;\n+   pthread_attr_t attr;\n+   pthread_getaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   if (CPU_ISSET (0, &cpuset))\n+     CPU_SET (1, &cpuset);\n+   else\n+     CPU_ZERO (&cpuset);\n+   pthread_setaffinity_np (pthread_self (), sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_init (&attr);\n+   pthread_attr_getaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n+   pthread_attr_setaffinity_np (&attr, sizeof (cpu_set_t), &cpuset);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_PTHREAD_AFFINITY_NP 1\" >>confdefs.h\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+# Every c++ lib is linking by default with -nostdlib, which leads to the\n+# fact, that proper pthread library will not be given at link time. We have\n+# to hard-code that.\n+case \"${target}\" in\n+\n+  *android*)\n+    XLDFLAGS=\"$XLDFLAGS -lc\"\n+     ;;\n+  *)\n+    XLDFLAGS=\"$XLDFLAGS -lpthread\"\n+    ;;\n+\n+esac\n+\n+\n+\n+\n+CFLAGS=\"$save_CFLAGS\"\n+\n if test $enable_shared = yes; then\n   link_cilkrts=\"-lcilkrts %{static: $LIBS}\"\n else"}, {"sha": "cc9a39f0533df453b582640bd328e349bca9be7d", "filename": "libcilkrts/configure.ac", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7955b06580a73bd6ad0d744928ab4775e4723c78/libcilkrts%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcilkrts%2Fconfigure.ac?ref=7955b06580a73bd6ad0d744928ab4775e4723c78", "patch": "@@ -164,6 +164,27 @@ AC_SUBST(toolexeclibdir)\n \n AC_SUBST(lt_cv_dlopen_libs)\n \n+# Check to see if -pthread or -lpthread is needed.  Prefer the former.\n+# Note that the CILK_SELF_SPEC in gcc.c may force -pthread.\n+# In case the pthread.h system header is not found, this test will fail.\n+XCFLAGS=\"\"\n+XLDFLAGS=\"\"\n+CFLAGS=\"$CFLAGS -pthread\"\n+AC_LINK_IFELSE(\n+ [AC_LANG_PROGRAM(\n+  [#include <pthread.h>\n+   void *g(void *d) { return NULL; }],\n+  [pthread_t t; pthread_create(&t,NULL,g,NULL);])],\n+ [XCFLAGS=\" -Wc,-pthread\"],\n+ [CFLAGS=\"$save_CFLAGS\" LIBS=\"-lpthread $LIBS\"\n+  AC_LINK_IFELSE(\n+   [AC_LANG_PROGRAM(\n+    [#include <pthread.h>\n+     void *g(void *d) { return NULL; }],\n+    [pthread_t t; pthread_create(&t,NULL,g,NULL);])],\n+   [],\n+   [AC_MSG_ERROR([Pthreads are required to build libcilkrts])])])\n+\n # Check for pthread_{,attr_}[sg]etaffinity_np.\n AC_LINK_IFELSE(\n  [AC_LANG_PROGRAM(\n@@ -183,24 +204,24 @@ AC_LINK_IFELSE(\n   AC_DEFINE(HAVE_PTHREAD_AFFINITY_NP, 1,\n [       Define if pthread_{,attr_}{g,s}etaffinity_np is supported.]))\n \n-# Check to see if -pthread or -lpthread is needed.  Prefer the former.\n-# Note that the CILK_SELF_SPEC in gcc.c may force -pthread.\n-# In case the pthread.h system header is not found, this test will fail.\n-CFLAGS=\"$CFLAGS -pthread\"\n-AC_LINK_IFELSE(\n- [AC_LANG_PROGRAM(\n-  [#include <pthread.h>\n-   void *g(void *d) { return NULL; }],\n-  [pthread_t t; pthread_create(&t,NULL,g,NULL);])],\n- [],\n- [CFLAGS=\"$save_CFLAGS\" LIBS=\"-lpthread $LIBS\"\n-  AC_LINK_IFELSE(\n-   [AC_LANG_PROGRAM(\n-    [#include <pthread.h>\n-     void *g(void *d) { return NULL; }],\n-    [pthread_t t; pthread_create(&t,NULL,g,NULL);])],\n-   [],\n-   [AC_MSG_ERROR([Pthreads are required to build libcilkrts])])])\n+# Every c++ lib is linking by default with -nostdlib, which leads to the\n+# fact, that proper pthread library will not be given at link time. We have\n+# to hard-code that.\n+case \"${target}\" in\n+\n+  *android*)\n+    XLDFLAGS=\"$XLDFLAGS -lc\"\n+     ;;\n+  *)\n+    XLDFLAGS=\"$XLDFLAGS -lpthread\"\n+    ;;\n+\n+esac\n+\n+AC_SUBST(XCFLAGS)\n+AC_SUBST(XLDFLAGS)\n+\n+CFLAGS=\"$save_CFLAGS\"\n \n if test $enable_shared = yes; then\n   link_cilkrts=\"-lcilkrts %{static: $LIBS}\""}]}