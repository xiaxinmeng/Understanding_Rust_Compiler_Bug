{"sha": "af06585ada1d837398cbbea0128ec06cf1ea780c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwNjU4NWFkYTFkODM3Mzk4Y2JiZWEwMTI4ZWMwNmNmMWVhNzgwYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2008-06-11T10:51:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2008-06-11T10:51:34Z"}, "message": "arm.c (arm_init_neon_builtins): Move initialization with function calls after declarations.\n\n\t* config/arm/arm.c (arm_init_neon_builtins): Move initialization\n\twith function calls after declarations.  Lay out\n\tneon_float_type_node before further use.\n\nFrom-SVN: r136660", "tree": {"sha": "c69ee7bdbed7452c0672a27e6d0f8c2806b07771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c69ee7bdbed7452c0672a27e6d0f8c2806b07771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af06585ada1d837398cbbea0128ec06cf1ea780c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af06585ada1d837398cbbea0128ec06cf1ea780c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af06585ada1d837398cbbea0128ec06cf1ea780c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af06585ada1d837398cbbea0128ec06cf1ea780c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10fbe77a1080c1af3b185ad1b9436c22bea688bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fbe77a1080c1af3b185ad1b9436c22bea688bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10fbe77a1080c1af3b185ad1b9436c22bea688bf"}], "stats": {"total": 216, "additions": 144, "deletions": 72}, "files": [{"sha": "8a8f88990e096e7eca4e6201d2004edff4edde8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af06585ada1d837398cbbea0128ec06cf1ea780c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af06585ada1d837398cbbea0128ec06cf1ea780c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af06585ada1d837398cbbea0128ec06cf1ea780c", "patch": "@@ -1,3 +1,9 @@\n+2008-06-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_init_neon_builtins): Move initialization\n+\twith function calls after declarations.  Lay out\n+\tneon_float_type_node before further use.\n+\n 2008-06-11  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (may_point_to_global_var): Declare."}, {"sha": "5df6a7722ed3be0f65e916d4a77bb46733fd9904", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 138, "deletions": 72, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af06585ada1d837398cbbea0128ec06cf1ea780c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af06585ada1d837398cbbea0128ec06cf1ea780c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=af06585ada1d837398cbbea0128ec06cf1ea780c", "patch": "@@ -15007,124 +15007,190 @@ arm_init_neon_builtins (void)\n {\n   unsigned int i, fcode = ARM_BUILTIN_NEON_BASE;\n \n+  tree neon_intQI_type_node;\n+  tree neon_intHI_type_node;\n+  tree neon_polyQI_type_node;\n+  tree neon_polyHI_type_node;\n+  tree neon_intSI_type_node;\n+  tree neon_intDI_type_node;\n+  tree neon_float_type_node;\n+\n+  tree intQI_pointer_node;\n+  tree intHI_pointer_node;\n+  tree intSI_pointer_node;\n+  tree intDI_pointer_node;\n+  tree float_pointer_node;\n+\n+  tree const_intQI_node;\n+  tree const_intHI_node;\n+  tree const_intSI_node;\n+  tree const_intDI_node;\n+  tree const_float_node;\n+\n+  tree const_intQI_pointer_node;\n+  tree const_intHI_pointer_node;\n+  tree const_intSI_pointer_node;\n+  tree const_intDI_pointer_node;\n+  tree const_float_pointer_node;\n+\n+  tree V8QI_type_node;\n+  tree V4HI_type_node;\n+  tree V2SI_type_node;\n+  tree V2SF_type_node;\n+  tree V16QI_type_node;\n+  tree V8HI_type_node;\n+  tree V4SI_type_node;\n+  tree V4SF_type_node;\n+  tree V2DI_type_node;\n+\n+  tree intUQI_type_node;\n+  tree intUHI_type_node;\n+  tree intUSI_type_node;\n+  tree intUDI_type_node;\n+\n+  tree intEI_type_node;\n+  tree intOI_type_node;\n+  tree intCI_type_node;\n+  tree intXI_type_node;\n+\n+  tree V8QI_pointer_node;\n+  tree V4HI_pointer_node;\n+  tree V2SI_pointer_node;\n+  tree V2SF_pointer_node;\n+  tree V16QI_pointer_node;\n+  tree V8HI_pointer_node;\n+  tree V4SI_pointer_node;\n+  tree V4SF_pointer_node;\n+  tree V2DI_pointer_node;\n+\n+  tree void_ftype_pv8qi_v8qi_v8qi;\n+  tree void_ftype_pv4hi_v4hi_v4hi;\n+  tree void_ftype_pv2si_v2si_v2si;\n+  tree void_ftype_pv2sf_v2sf_v2sf;\n+  tree void_ftype_pdi_di_di;\n+  tree void_ftype_pv16qi_v16qi_v16qi;\n+  tree void_ftype_pv8hi_v8hi_v8hi;\n+  tree void_ftype_pv4si_v4si_v4si;\n+  tree void_ftype_pv4sf_v4sf_v4sf;\n+  tree void_ftype_pv2di_v2di_v2di;\n+\n+  tree reinterp_ftype_dreg[5][5];\n+  tree reinterp_ftype_qreg[5][5];\n+  tree dreg_types[5], qreg_types[5];\n+\n   /* Create distinguished type nodes for NEON vector element types,\n      and pointers to values of such types, so we can detect them later.  */\n-  tree neon_intQI_type_node = make_signed_type (GET_MODE_PRECISION (QImode));\n-  tree neon_intHI_type_node = make_signed_type (GET_MODE_PRECISION (HImode));\n-  tree neon_polyQI_type_node = make_signed_type (GET_MODE_PRECISION (QImode));\n-  tree neon_polyHI_type_node = make_signed_type (GET_MODE_PRECISION (HImode));\n-  tree neon_intSI_type_node = make_signed_type (GET_MODE_PRECISION (SImode));\n-  tree neon_intDI_type_node = make_signed_type (GET_MODE_PRECISION (DImode));\n-  tree neon_float_type_node = make_node (REAL_TYPE);\n-\n-  tree intQI_pointer_node = build_pointer_type (neon_intQI_type_node);\n-  tree intHI_pointer_node = build_pointer_type (neon_intHI_type_node);\n-  tree intSI_pointer_node = build_pointer_type (neon_intSI_type_node);\n-  tree intDI_pointer_node = build_pointer_type (neon_intDI_type_node);\n-  tree float_pointer_node = build_pointer_type (neon_float_type_node);\n+  neon_intQI_type_node = make_signed_type (GET_MODE_PRECISION (QImode));\n+  neon_intHI_type_node = make_signed_type (GET_MODE_PRECISION (HImode));\n+  neon_polyQI_type_node = make_signed_type (GET_MODE_PRECISION (QImode));\n+  neon_polyHI_type_node = make_signed_type (GET_MODE_PRECISION (HImode));\n+  neon_intSI_type_node = make_signed_type (GET_MODE_PRECISION (SImode));\n+  neon_intDI_type_node = make_signed_type (GET_MODE_PRECISION (DImode));\n+  neon_float_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (neon_float_type_node) = FLOAT_TYPE_SIZE;\n+  layout_type (neon_float_type_node);\n+\n+  intQI_pointer_node = build_pointer_type (neon_intQI_type_node);\n+  intHI_pointer_node = build_pointer_type (neon_intHI_type_node);\n+  intSI_pointer_node = build_pointer_type (neon_intSI_type_node);\n+  intDI_pointer_node = build_pointer_type (neon_intDI_type_node);\n+  float_pointer_node = build_pointer_type (neon_float_type_node);\n \n   /* Next create constant-qualified versions of the above types.  */\n-  tree const_intQI_node = build_qualified_type (neon_intQI_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-  tree const_intHI_node = build_qualified_type (neon_intHI_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-  tree const_intSI_node = build_qualified_type (neon_intSI_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-  tree const_intDI_node = build_qualified_type (neon_intDI_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-  tree const_float_node = build_qualified_type (neon_float_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-\n-  tree const_intQI_pointer_node = build_pointer_type (const_intQI_node);\n-  tree const_intHI_pointer_node = build_pointer_type (const_intHI_node);\n-  tree const_intSI_pointer_node = build_pointer_type (const_intSI_node);\n-  tree const_intDI_pointer_node = build_pointer_type (const_intDI_node);\n-  tree const_float_pointer_node = build_pointer_type (const_float_node);\n+  const_intQI_node = build_qualified_type (neon_intQI_type_node,\n+\t\t\t\t\t   TYPE_QUAL_CONST);\n+  const_intHI_node = build_qualified_type (neon_intHI_type_node,\n+\t\t\t\t\t   TYPE_QUAL_CONST);\n+  const_intSI_node = build_qualified_type (neon_intSI_type_node,\n+\t\t\t\t\t   TYPE_QUAL_CONST);\n+  const_intDI_node = build_qualified_type (neon_intDI_type_node,\n+\t\t\t\t\t   TYPE_QUAL_CONST);\n+  const_float_node = build_qualified_type (neon_float_type_node,\n+\t\t\t\t\t   TYPE_QUAL_CONST);\n+\n+  const_intQI_pointer_node = build_pointer_type (const_intQI_node);\n+  const_intHI_pointer_node = build_pointer_type (const_intHI_node);\n+  const_intSI_pointer_node = build_pointer_type (const_intSI_node);\n+  const_intDI_pointer_node = build_pointer_type (const_intDI_node);\n+  const_float_pointer_node = build_pointer_type (const_float_node);\n \n   /* Now create vector types based on our NEON element types.  */\n   /* 64-bit vectors.  */\n-  tree V8QI_type_node =\n+  V8QI_type_node =\n     build_vector_type_for_mode (neon_intQI_type_node, V8QImode);\n-  tree V4HI_type_node =\n+  V4HI_type_node =\n     build_vector_type_for_mode (neon_intHI_type_node, V4HImode);\n-  tree V2SI_type_node =\n+  V2SI_type_node =\n     build_vector_type_for_mode (neon_intSI_type_node, V2SImode);\n-  tree V2SF_type_node =\n+  V2SF_type_node =\n     build_vector_type_for_mode (neon_float_type_node, V2SFmode);\n   /* 128-bit vectors.  */\n-  tree V16QI_type_node =\n+  V16QI_type_node =\n     build_vector_type_for_mode (neon_intQI_type_node, V16QImode);\n-  tree V8HI_type_node =\n+  V8HI_type_node =\n     build_vector_type_for_mode (neon_intHI_type_node, V8HImode);\n-  tree V4SI_type_node =\n+  V4SI_type_node =\n     build_vector_type_for_mode (neon_intSI_type_node, V4SImode);\n-  tree V4SF_type_node =\n+  V4SF_type_node =\n     build_vector_type_for_mode (neon_float_type_node, V4SFmode);\n-  tree V2DI_type_node =\n+  V2DI_type_node =\n     build_vector_type_for_mode (neon_intDI_type_node, V2DImode);\n \n   /* Unsigned integer types for various mode sizes.  */\n-  tree intUQI_type_node = make_unsigned_type (GET_MODE_PRECISION (QImode));\n-  tree intUHI_type_node = make_unsigned_type (GET_MODE_PRECISION (HImode));\n-  tree intUSI_type_node = make_unsigned_type (GET_MODE_PRECISION (SImode));\n-  tree intUDI_type_node = make_unsigned_type (GET_MODE_PRECISION (DImode));\n+  intUQI_type_node = make_unsigned_type (GET_MODE_PRECISION (QImode));\n+  intUHI_type_node = make_unsigned_type (GET_MODE_PRECISION (HImode));\n+  intUSI_type_node = make_unsigned_type (GET_MODE_PRECISION (SImode));\n+  intUDI_type_node = make_unsigned_type (GET_MODE_PRECISION (DImode));\n \n   /* Opaque integer types for structures of vectors.  */\n-  tree intEI_type_node = make_signed_type (GET_MODE_PRECISION (EImode));\n-  tree intOI_type_node = make_signed_type (GET_MODE_PRECISION (OImode));\n-  tree intCI_type_node = make_signed_type (GET_MODE_PRECISION (CImode));\n-  tree intXI_type_node = make_signed_type (GET_MODE_PRECISION (XImode));\n+  intEI_type_node = make_signed_type (GET_MODE_PRECISION (EImode));\n+  intOI_type_node = make_signed_type (GET_MODE_PRECISION (OImode));\n+  intCI_type_node = make_signed_type (GET_MODE_PRECISION (CImode));\n+  intXI_type_node = make_signed_type (GET_MODE_PRECISION (XImode));\n \n   /* Pointers to vector types.  */\n-  tree V8QI_pointer_node = build_pointer_type (V8QI_type_node);\n-  tree V4HI_pointer_node = build_pointer_type (V4HI_type_node);\n-  tree V2SI_pointer_node = build_pointer_type (V2SI_type_node);\n-  tree V2SF_pointer_node = build_pointer_type (V2SF_type_node);\n-  tree V16QI_pointer_node = build_pointer_type (V16QI_type_node);\n-  tree V8HI_pointer_node = build_pointer_type (V8HI_type_node);\n-  tree V4SI_pointer_node = build_pointer_type (V4SI_type_node);\n-  tree V4SF_pointer_node = build_pointer_type (V4SF_type_node);\n-  tree V2DI_pointer_node = build_pointer_type (V2DI_type_node);\n+  V8QI_pointer_node = build_pointer_type (V8QI_type_node);\n+  V4HI_pointer_node = build_pointer_type (V4HI_type_node);\n+  V2SI_pointer_node = build_pointer_type (V2SI_type_node);\n+  V2SF_pointer_node = build_pointer_type (V2SF_type_node);\n+  V16QI_pointer_node = build_pointer_type (V16QI_type_node);\n+  V8HI_pointer_node = build_pointer_type (V8HI_type_node);\n+  V4SI_pointer_node = build_pointer_type (V4SI_type_node);\n+  V4SF_pointer_node = build_pointer_type (V4SF_type_node);\n+  V2DI_pointer_node = build_pointer_type (V2DI_type_node);\n \n   /* Operations which return results as pairs.  */\n-  tree void_ftype_pv8qi_v8qi_v8qi =\n+  void_ftype_pv8qi_v8qi_v8qi =\n     build_function_type_list (void_type_node, V8QI_pointer_node, V8QI_type_node,\n   \t\t\t      V8QI_type_node, NULL);\n-  tree void_ftype_pv4hi_v4hi_v4hi =\n+  void_ftype_pv4hi_v4hi_v4hi =\n     build_function_type_list (void_type_node, V4HI_pointer_node, V4HI_type_node,\n   \t\t\t      V4HI_type_node, NULL);\n-  tree void_ftype_pv2si_v2si_v2si =\n+  void_ftype_pv2si_v2si_v2si =\n     build_function_type_list (void_type_node, V2SI_pointer_node, V2SI_type_node,\n   \t\t\t      V2SI_type_node, NULL);\n-  tree void_ftype_pv2sf_v2sf_v2sf =\n+  void_ftype_pv2sf_v2sf_v2sf =\n     build_function_type_list (void_type_node, V2SF_pointer_node, V2SF_type_node,\n   \t\t\t      V2SF_type_node, NULL);\n-  tree void_ftype_pdi_di_di =\n+  void_ftype_pdi_di_di =\n     build_function_type_list (void_type_node, intDI_pointer_node,\n \t\t\t      neon_intDI_type_node, neon_intDI_type_node, NULL);\n-  tree void_ftype_pv16qi_v16qi_v16qi =\n+  void_ftype_pv16qi_v16qi_v16qi =\n     build_function_type_list (void_type_node, V16QI_pointer_node,\n \t\t\t      V16QI_type_node, V16QI_type_node, NULL);\n-  tree void_ftype_pv8hi_v8hi_v8hi =\n+  void_ftype_pv8hi_v8hi_v8hi =\n     build_function_type_list (void_type_node, V8HI_pointer_node, V8HI_type_node,\n   \t\t\t      V8HI_type_node, NULL);\n-  tree void_ftype_pv4si_v4si_v4si =\n+  void_ftype_pv4si_v4si_v4si =\n     build_function_type_list (void_type_node, V4SI_pointer_node, V4SI_type_node,\n   \t\t\t      V4SI_type_node, NULL);\n-  tree void_ftype_pv4sf_v4sf_v4sf =\n+  void_ftype_pv4sf_v4sf_v4sf =\n     build_function_type_list (void_type_node, V4SF_pointer_node, V4SF_type_node,\n   \t\t\t      V4SF_type_node, NULL);\n-  tree void_ftype_pv2di_v2di_v2di =\n+  void_ftype_pv2di_v2di_v2di =\n     build_function_type_list (void_type_node, V2DI_pointer_node, V2DI_type_node,\n \t\t\t      V2DI_type_node, NULL);\n \n-  tree reinterp_ftype_dreg[5][5];\n-  tree reinterp_ftype_qreg[5][5];\n-  tree dreg_types[5], qreg_types[5];\n-\n-  TYPE_PRECISION (neon_float_type_node) = FLOAT_TYPE_SIZE;\n-  layout_type (neon_float_type_node);\n-\n   /* Define typedefs which exactly correspond to the modes we are basing vector\n      types on.  If you change these names you'll need to change\n      the table used by arm_mangle_type too.  */"}]}