{"sha": "776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2YTM3ZjZhYzU2ODJkYWU5YTFlZjA3YmMwNDU3MGVhODBmNDJjYQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-26T01:49:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-26T09:43:44Z"}, "message": "Delete dead code in ix86_expand_special_args_builtin\n\ngcc/ChangeLog:\n\t* config/i386/i386-expand.c\n\t(ix86_expand_special_args_builtin): Delete last_arg_constant\n\tand match.", "tree": {"sha": "c45984ef08155360dc9d377defd80888697d53b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c45984ef08155360dc9d377defd80888697d53b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776a37f6ac5682dae9a1ef07bc04570ea80f42ca/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3a8fad18324cd38c221bdb0ae2b690fc82ede0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3a8fad18324cd38c221bdb0ae2b690fc82ede0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3a8fad18324cd38c221bdb0ae2b690fc82ede0"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "4707ebff242c3726a0a6bdf3bc51bd8decb00295", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 25, "deletions": 39, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776a37f6ac5682dae9a1ef07bc04570ea80f42ca/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776a37f6ac5682dae9a1ef07bc04570ea80f42ca/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=776a37f6ac5682dae9a1ef07bc04570ea80f42ca", "patch": "@@ -10494,7 +10494,6 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       machine_mode mode;\n     } args[3];\n   enum insn_code icode = d->icode;\n-  bool last_arg_constant = false;\n   const struct insn_data_d *insn_p = &insn_data[icode];\n   machine_mode tmode = insn_p->operand[0].mode;\n   enum { load, store } klass;\n@@ -10818,54 +10817,41 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n   for (i = 0; i < nargs; i++)\n     {\n       machine_mode mode = insn_p->operand[i + 1].mode;\n-      bool match;\n \n       arg = CALL_EXPR_ARG (exp, i + arg_adjust);\n       op = expand_normal (arg);\n-      match = insn_p->operand[i + 1].predicate (op, mode);\n \n-      if (last_arg_constant && (i + 1) == nargs)\n+      if (i == memory)\n \t{\n-\t  if (!match)\n-\t    {\n-\t      error (\"the last argument must be an 8-bit immediate\");\n-\t      return const0_rtx;\n-\t    }\n+\t  /* This must be the memory operand.  */\n+\t  op = ix86_zero_extend_to_Pmode (op);\n+\t  op = gen_rtx_MEM (mode, op);\n+\t  /* op at this point has just BITS_PER_UNIT MEM_ALIGN\n+\t     on it.  Try to improve it using get_pointer_alignment,\n+\t     and if the special builtin is one that requires strict\n+\t     mode alignment, also from it's GET_MODE_ALIGNMENT.\n+\t     Failure to do so could lead to ix86_legitimate_combined_insn\n+\t     rejecting all changes to such insns.  */\n+\t  unsigned int align = get_pointer_alignment (arg);\n+\t  if (aligned_mem && align < GET_MODE_ALIGNMENT (mode))\n+\t    align = GET_MODE_ALIGNMENT (mode);\n+\t  if (MEM_ALIGN (op) < align)\n+\t    set_mem_align (op, align);\n \t}\n       else\n \t{\n-\t  if (i == memory)\n-\t    {\n-\t      /* This must be the memory operand.  */\n-\t      op = ix86_zero_extend_to_Pmode (op);\n-\t      op = gen_rtx_MEM (mode, op);\n-\t      /* op at this point has just BITS_PER_UNIT MEM_ALIGN\n-\t\t on it.  Try to improve it using get_pointer_alignment,\n-\t\t and if the special builtin is one that requires strict\n-\t\t mode alignment, also from it's GET_MODE_ALIGNMENT.\n-\t\t Failure to do so could lead to ix86_legitimate_combined_insn\n-\t\t rejecting all changes to such insns.  */\n-\t      unsigned int align = get_pointer_alignment (arg);\n-\t      if (aligned_mem && align < GET_MODE_ALIGNMENT (mode))\n-\t\talign = GET_MODE_ALIGNMENT (mode);\n-\t      if (MEM_ALIGN (op) < align)\n-\t\tset_mem_align (op, align);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* This must be register.  */\n-\t      if (VECTOR_MODE_P (mode))\n-\t\top = safe_vector_operand (op, mode);\n+\t  /* This must be register.  */\n+\t  if (VECTOR_MODE_P (mode))\n+\t    op = safe_vector_operand (op, mode);\n \n-\t      op = fixup_modeless_constant (op, mode);\n+\t  op = fixup_modeless_constant (op, mode);\n \n-\t      if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n-\t\top = copy_to_mode_reg (mode, op);\n-\t      else\n-\t        {\n-\t          op = copy_to_reg (op);\n-\t          op = lowpart_subreg (mode, op, GET_MODE (op));\n-\t        }\n+\t  if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n+\t    op = copy_to_mode_reg (mode, op);\n+\t  else\n+\t    {\n+\t      op = copy_to_reg (op);\n+\t      op = lowpart_subreg (mode, op, GET_MODE (op));\n \t    }\n \t}\n "}]}