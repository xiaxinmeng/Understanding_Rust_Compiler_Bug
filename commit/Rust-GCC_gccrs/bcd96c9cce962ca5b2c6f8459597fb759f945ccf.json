{"sha": "bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkOTZjOWNjZTk2MmNhNWIyYzZmODQ1OTU5N2ZiNzU5Zjk0NWNjZg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-05T18:30:34Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-05T18:30:34Z"}, "message": "PR fortran/95530, PR fortran/95537 - Buffer overflows with long symbols\n\nThe testcases for PR95090 and PR95106 trigger buffer overflows with long\nsymbols that were found with an instrumented compiler.  Enlarge the\naffected buffers, and add checks that the buffers will suffice.\n\n2020-06-05  Harald Anlauf  <anlauf@gmx.de>\n\ngcc/fortran/\n\tPR fortran/95530\n\tPR fortran/95537\n\t* decl.c (gfc_match_decl_type_spec): Enlarge buffer, and enhance\n\tstring copy to detect buffer overflow.\n\t* gfortran.h (gfc_common_head): Enlarge buffer.\n\t* trans-common.c (finish_equivalences): Enhance string copy to\n\tdetect buffer overflow.", "tree": {"sha": "b6cbc17be1ba2a7c27d6d2c462b85a31da62f251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6cbc17be1ba2a7c27d6d2c462b85a31da62f251"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608832716e27ca356ee38d14ae30b3ab525884ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608832716e27ca356ee38d14ae30b3ab525884ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608832716e27ca356ee38d14ae30b3ab525884ea"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "1c1626d3fa45670184bfbf3ad000e2bec0ae3e3f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "patch": "@@ -4094,7 +4094,8 @@ match_byte_typespec (gfc_typespec *ts)\n match\n gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n {\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  /* Provide sufficient space to hold \"pdtsymbol\".  */\n+  char name[GFC_MAX_SYMBOL_LEN + 1 + 3];\n   gfc_symbol *sym, *dt_sym;\n   match m;\n   char c;\n@@ -4284,7 +4285,11 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n \t    return m;\n \t  gcc_assert (!sym->attr.pdt_template && sym->attr.pdt_type);\n \t  ts->u.derived = sym;\n-\t  strcpy (name, gfc_dt_lower_string (sym->name));\n+\t  const char* lower = gfc_dt_lower_string (sym->name);\n+\t  size_t len = strnlen (lower, sizeof (name));\n+\t  gcc_assert (len < sizeof (name));\n+\t  memcpy (name, lower, len);\n+\t  name[len] = '\\0';\n \t}\n \n       if (sym && sym->attr.flavor == FL_STRUCT)"}, {"sha": "0ef7b1b0effb182d156eacda29eeeca5f8ced040", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "patch": "@@ -1677,7 +1677,8 @@ typedef struct gfc_common_head\n   char use_assoc, saved, threadprivate;\n   unsigned char omp_declare_target : 1;\n   unsigned char omp_declare_target_link : 1;\n-  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  /* Provide sufficient space to hold \"symbol.eq.1234567890\".  */\n+  char name[GFC_MAX_SYMBOL_LEN + 1 + 14];\n   struct gfc_symbol *head;\n   const char* binding_label;\n   int is_bind_c;"}, {"sha": "1acc336eacfef415e62584abe7326c67afa06ddc", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd96c9cce962ca5b2c6f8459597fb759f945ccf/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=bcd96c9cce962ca5b2c6f8459597fb759f945ccf", "patch": "@@ -1314,7 +1314,11 @@ finish_equivalences (gfc_namespace *ns)\n \t      c->where = ns->proc_name->declared_at;\n \t    else if (ns->is_block_data)\n \t      c->where = ns->sym_root->n.sym->declared_at;\n-\t    strcpy (c->name, z->module);\n+\n+\t    size_t len = strlen (z->module);\n+\t    gcc_assert (len < sizeof (c->name));\n+\t    memcpy (c->name, z->module, len);\n+\t    c->name[len] = '\\0';\n \t  }\n \telse\n \t  c = NULL;"}]}