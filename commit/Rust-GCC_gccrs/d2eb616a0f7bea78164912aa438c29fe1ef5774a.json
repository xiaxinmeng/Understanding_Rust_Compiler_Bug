{"sha": "d2eb616a0f7bea78164912aa438c29fe1ef5774a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlYjYxNmEwZjdiZWE3ODE2NDkxMmFhNDM4YzI5ZmUxZWY1Nzc0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T10:09:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-31T10:09:26Z"}, "message": "match.pd: Add clz(X) == 0 -> (int)X < 0 etc. simpifications [PR94802]\n\nThe following patch adds some clz simplifications.  If\nclz is 0, then the MSB of the argument is set, and if clz is prec-1, then\nthe argument is 1.\n\n2020-12-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94802\n\t* match.pd (clz(X) == 0 -> (int)X < 0): New simplification.\n\t(clz(X) == (prec-1) -> X == 1): Likewise.\n\n\t* gcc.dg/tree-ssa/pr94802-1.c: New test.", "tree": {"sha": "e8a936a3ca8918db0ea67a25b389229d551e53b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a936a3ca8918db0ea67a25b389229d551e53b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2eb616a0f7bea78164912aa438c29fe1ef5774a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2eb616a0f7bea78164912aa438c29fe1ef5774a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2eb616a0f7bea78164912aa438c29fe1ef5774a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2eb616a0f7bea78164912aa438c29fe1ef5774a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f12ce2ea3be12de4f83d3c419bdb1dc5036b202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f12ce2ea3be12de4f83d3c419bdb1dc5036b202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f12ce2ea3be12de4f83d3c419bdb1dc5036b202"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "529933f978bd389d67fc558dbf709c7be0a52b38", "filename": "gcc/match.pd", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2eb616a0f7bea78164912aa438c29fe1ef5774a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2eb616a0f7bea78164912aa438c29fe1ef5774a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d2eb616a0f7bea78164912aa438c29fe1ef5774a", "patch": "@@ -6226,6 +6226,39 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (single_use (@3))\n    (IFN_FMA @0 @1 @2))))\n \n+/* CLZ simplifications.  */\n+(for clz (CLZ)\n+ (for op (eq ne)\n+      cmp (lt ge)\n+  (simplify\n+   (op (clz:s @0) INTEGER_CST@1)\n+   (if (integer_zerop (@1))\n+    /* clz(X) == 0 is (int)X < 0 and clz(X) != 0 is (int)X >= 0.  */\n+    (with { tree stype = signed_type_for (TREE_TYPE (@0));\n+\t    HOST_WIDE_INT val = 0;\n+#ifdef CLZ_DEFINED_VALUE_AT_ZERO\n+\t    /* Punt on hypothetical weird targets.  */\n+\t    if (CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (TREE_TYPE (@0)),\n+\t\t\t\t\t   val) == 2\n+\t\t&& val == 0)\n+\t      stype = NULL_TREE;\n+#endif\n+\t  }\n+     (if (stype)\n+      (cmp (convert:stype @0) { build_zero_cst (stype); })))\n+    /* clz(X) == (prec-1) is X == 1 and clz(X) != (prec-1) is X != 1.  */\n+    (with { bool ok = true;\n+#ifdef CLZ_DEFINED_VALUE_AT_ZERO\n+\t    /* Punt on hypothetical weird targets.  */\n+\t    if (CLZ_DEFINED_VALUE_AT_ZERO (TYPE_MODE (TREE_TYPE (@0)),\n+\t\t\t\t\t   val) == 2\n+\t\t&& val == TYPE_PRECISION (TREE_TYPE (@0)) - 1)\n+\t      ok = false;\n+#endif\n+\t  }\n+     (if (ok && wi::to_wide (@1) == (TYPE_PRECISION (TREE_TYPE (@0)) - 1))\n+      (op @0 { build_one_cst (TREE_TYPE (@0)); })))))))\n+\n /* POPCOUNT simplifications.  */\n /* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */\n (simplify"}, {"sha": "8175704f40c7dc3707653e2f38d182d4f077759f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94802-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2eb616a0f7bea78164912aa438c29fe1ef5774a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94802-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2eb616a0f7bea78164912aa438c29fe1ef5774a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94802-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94802-1.c?ref=d2eb616a0f7bea78164912aa438c29fe1ef5774a", "patch": "@@ -0,0 +1,68 @@\n+/* PR tree-optimization/94802 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \" = __builtin_clz \" \"optimized\" } } */\n+\n+__attribute__((noipa)) int\n+f1 (int a, int b)\n+{\n+  return __builtin_clz (a - b) != 0;\n+}\n+\n+__attribute__((noipa)) int\n+f2 (int x)\n+{\n+  return __builtin_clz (x) == 0;\n+}\n+\n+__attribute__((noipa)) int\n+f3 (int x)\n+{\n+  return __builtin_clz (x) != 0;\n+}\n+\n+__attribute__((noipa)) int\n+f4 (int a, int b)\n+{\n+  return __builtin_clz (a - b) == sizeof (int) * __CHAR_BIT__ - 1;\n+}\n+\n+__attribute__((noipa)) int\n+f5 (int x)\n+{\n+  return __builtin_clz (x) == sizeof (int) * __CHAR_BIT__ - 1;\n+}\n+\n+__attribute__((noipa)) int\n+f6 (int x)\n+{\n+  return __builtin_clz (x) != sizeof (int) * __CHAR_BIT__ - 1;\n+}\n+\n+int\n+main ()\n+{\n+  if (f1 (5, 7) != 0\n+      || f1 (7, 5) != 1\n+      || f2 (1) != 0\n+      || f2 (137) != 0\n+      || f2 (-1) != 1\n+      || f2 (-137) != 1\n+      || f3 (1) != 1\n+      || f3 (137) != 1\n+      || f3 (-1) != 0\n+      || f3 (-137) != 0\n+      || f4 (5, 4) != 1\n+      || f4 (6, 4) != 0\n+      || f4 (4, 5) != 0\n+      || f5 (1) != 1\n+      || f5 (17) != 0\n+      || f5 (-1) != 0\n+      || f5 (-17) != 0\n+      || f6 (1) != 0\n+      || f6 (17) != 1\n+      || f6 (-1) != 1\n+      || f6 (-17) != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}