{"sha": "56ae6d778025d0f8a8438baed821a8adea1b7df6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhZTZkNzc4MDI1ZDBmOGE4NDM4YmFlZDgyMWE4YWRlYTFiN2RmNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-08-27T19:03:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-27T19:03:59Z"}, "message": "lex.c (handle_cp_pragma): Remove #pragma vtable.\n\n\t* lex.c (handle_cp_pragma): Remove #pragma vtable.\n\t* lang-options.h: Remove +e options.\n\t* decl2.c (lang_decode_option): Likewise.\n\t(import_export_vtable): Don't check write_virtuals.\n\t(finish_vtable_vardecl, finish_file): Likewise.\n\t* search.c (dfs_debug_mark): Likewise.\n\t* semantics.c (begin_class_definition): Likewise.\n\t* class.c (build_vtable, finish_vtbls, finish_struct_1): Likewise.\n\t* call.c (build_over_call): Check flag_elide_constructors.\n\t* decl2.c: flag_elide_constructors defaults to 1.\n\t* typeck.c (convert_arguments): Remove return_loc parm.\n\t(build_function_call_real): Adjust.\n\nFrom-SVN: r22027", "tree": {"sha": "beb01d2bd7dc8678a3be6eaec1429f01a860c37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb01d2bd7dc8678a3be6eaec1429f01a860c37b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56ae6d778025d0f8a8438baed821a8adea1b7df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ae6d778025d0f8a8438baed821a8adea1b7df6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ae6d778025d0f8a8438baed821a8adea1b7df6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ae6d778025d0f8a8438baed821a8adea1b7df6/comments", "author": null, "committer": null, "parents": [{"sha": "0603b640a0e4e416b219329d918e84859a39f57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0603b640a0e4e416b219329d918e84859a39f57c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0603b640a0e4e416b219329d918e84859a39f57c"}], "stats": {"total": 180, "additions": 49, "deletions": 131}, "files": [{"sha": "c048dabe10b3284e1180f4313b33062f209e7182", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -1,5 +1,19 @@\n 1998-08-27  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* lex.c (handle_cp_pragma): Remove #pragma vtable.\n+\t* lang-options.h: Remove +e options.\n+\t* decl2.c (lang_decode_option): Likewise.\n+\t(import_export_vtable): Don't check write_virtuals.\n+\t(finish_vtable_vardecl, finish_file): Likewise.\n+\t* search.c (dfs_debug_mark): Likewise.\n+\t* semantics.c (begin_class_definition): Likewise.\n+\t* class.c (build_vtable, finish_vtbls, finish_struct_1): Likewise.\n+\n+\t* call.c (build_over_call): Check flag_elide_constructors.\n+\t* decl2.c: flag_elide_constructors defaults to 1.\n+\t* typeck.c (convert_arguments): Remove return_loc parm.\n+\t(build_function_call_real): Adjust.\n+\n \t* search.c: Tear out all mi_matrix and memoize code.\n \t(lookup_field, lookup_fnfields): Use scratch_tree_cons.\n \t* lang-options.h: Remove documentation for -fhandle-exceptions,"}, {"sha": "bb0b71a40975c4b3f41f2b5e1e1f4041cbe1ce33", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -3409,8 +3409,11 @@ build_over_call (cand, args, flags)\n \n   /* Avoid actually calling copy constructors and copy assignment operators,\n      if possible.  */\n-  if (DECL_CONSTRUCTOR_P (fn)\n-      && TREE_VEC_LENGTH (convs) == 1\n+\n+  if (! flag_elide_constructors)\n+    /* Do things the hard way.  */;\n+  else if (DECL_CONSTRUCTOR_P (fn)\n+\t   && TREE_VEC_LENGTH (convs) == 1\n       && copy_args_p (fn))\n     {\n       tree targ;"}, {"sha": "da6c20ec9a28a228017327e23faa855e503093bc", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -678,9 +678,7 @@ build_vtable (binfo, type)\n   DECL_ALIGN (decl) = MAX (TYPE_ALIGN (double_type_node),\n \t\t\t   DECL_ALIGN (decl));\n \n-  /* Why is this conditional? (mrs) */\n-  if (binfo && write_virtuals >= 0)\n-    DECL_VIRTUAL_P (decl) = 1;\n+  DECL_VIRTUAL_P (decl) = 1;\n   DECL_CONTEXT (decl) = type;\n \n   binfo = TYPE_BINFO (type);\n@@ -2134,8 +2132,7 @@ finish_vtbls (binfo, do_self, t)\n \t  decl = BINFO_VTABLE (binfo);\n \t  context = DECL_CONTEXT (decl);\n \t  DECL_CONTEXT (decl) = 0;\n-\t  if (write_virtuals >= 0\n-\t      && DECL_INITIAL (decl) != BINFO_VIRTUALS (binfo))\n+\t  if (DECL_INITIAL (decl) != BINFO_VIRTUALS (binfo))\n \t    DECL_INITIAL (decl) = build_nt (CONSTRUCTOR, NULL_TREE,\n \t\t\t\t\t    BINFO_VIRTUALS (binfo));\n \t  cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n@@ -3963,8 +3960,7 @@ finish_struct_1 (t, warn_anon)\n       else if (has_virtual)\n \t{\n \t  TYPE_BINFO_VIRTUALS (t) = pending_virtuals;\n-\t  if (write_virtuals >= 0)\n-\t    DECL_VIRTUAL_P (TYPE_BINFO_VTABLE (t)) = 1;\n+\t  DECL_VIRTUAL_P (TYPE_BINFO_VTABLE (t)) = 1;\n \t}\n     }\n \n@@ -4130,14 +4126,9 @@ finish_struct_1 (t, warn_anon)\n \t references between translation units.  */\n       if (CLASSTYPE_METHOD_VEC (t))\n \t{\n-\t  extern tree pending_vtables;\n-\n \t  /* Don't output full info about any type\n \t     which does not have its implementation defined here.  */\n-\t  if (TYPE_VIRTUAL_P (t) && write_virtuals == 2)\n-\t    TYPE_DECL_SUPPRESS_DEBUG (TYPE_MAIN_DECL (t))\n-\t      = (value_member (TYPE_IDENTIFIER (t), pending_vtables) == 0);\n-\t  else if (CLASSTYPE_INTERFACE_ONLY (t))\n+\t  if (CLASSTYPE_INTERFACE_ONLY (t))\n \t    TYPE_DECL_SUPPRESS_DEBUG (TYPE_MAIN_DECL (t)) = 1;\n #if 0\n \t  /* XXX do something about this.  */"}, {"sha": "5ce5dd97998f7dc067124482882b057878eb8d53", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -3072,7 +3072,7 @@ extern tree get_member_function_from_ptrfunc\tPROTO((tree *, tree));\n extern tree build_function_call_real\t\tPROTO((tree, tree, int, int));\n extern tree build_function_call\t\t\tPROTO((tree, tree));\n extern tree build_function_call_maybe\t\tPROTO((tree, tree));\n-extern tree convert_arguments\t\t\tPROTO((tree, tree, tree, tree, int));\n+extern tree convert_arguments\t\t\tPROTO((tree, tree, tree, int));\n extern tree build_x_binary_op\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_binary_op\t\t\tPROTO((enum tree_code, tree, tree, int));\n extern tree build_binary_op_nodefault\t\tPROTO((enum tree_code, tree, tree, enum tree_code));"}, {"sha": "ebd942dbde92a5afb7dfd49f10e0b28ca81e26be", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 45, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -345,21 +345,14 @@ int flag_this_is_variable;\n \n /* 3 means write out only virtuals function tables `defined'\n    in this implementation file.\n-   2 means write out only specific virtual function tables\n-   and give them (C) public access.\n-   1 means write out virtual function tables and give them\n-   (C) public access.\n    0 means write out virtual function tables and give them\n-   (C) static access (default).\n-   -1 means declare virtual function tables extern.  */\n+   (C) static access (default).  */\n \n int write_virtuals;\n \n-/* Nonzero means we should attempt to elide constructors when possible.\n-   FIXME: This flag is obsolete, and should be torn out along with the\n-   old overloading code.  */\n+/* Nonzero means we should attempt to elide constructors when possible.  */\n \n-int flag_elide_constructors;\n+int flag_elide_constructors = 1;\n \n /* Nonzero means recognize and handle signature language constructs.  */\n \n@@ -542,22 +535,6 @@ lang_decode_option (argc, argv)\n \n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n     /* ignore */;\n-  /* The +e options are for cfront compatibility.  They come in as\n-     `-+eN', to kludge around gcc.c's argument handling.  */\n-  else if (p[0] == '-' && p[1] == '+' && p[2] == 'e')\n-    {\n-      int old_write_virtuals = write_virtuals;\n-      if (p[3] == '1')\n-\twrite_virtuals = 1;\n-      else if (p[3] == '0')\n-\twrite_virtuals = -1;\n-      else if (p[3] == '2')\n-\twrite_virtuals = 2;\n-      else error (\"invalid +e option\");\n-      if (old_write_virtuals != 0\n-\t  && write_virtuals != old_write_virtuals)\n-\terror (\"conflicting +e options given\");\n-    }\n   else if (p[0] == '-' && p[1] == 'f')\n     {\n       /* Some kind of -f option.\n@@ -2575,12 +2552,10 @@ import_export_vtable (decl, type, final)\n   if (DECL_INTERFACE_KNOWN (decl))\n     return;\n \n-  /* +e0 or +e1 */\n-  if (write_virtuals < 0 || write_virtuals == 1 || TYPE_FOR_JAVA (type))\n+  if (TYPE_FOR_JAVA (type))\n     {\n       TREE_PUBLIC (decl) = 1;\n-      if (write_virtuals < 0 || TYPE_FOR_JAVA (type))\n-\tDECL_EXTERNAL (decl) = 1;\n+      DECL_EXTERNAL (decl) = 1;\n       DECL_INTERFACE_KNOWN (decl) = 1;\n     }\n   else if (CLASSTYPE_INTERFACE_KNOWN (type))\n@@ -2702,8 +2677,7 @@ static int\n finish_vtable_vardecl (prev, vars)\n      tree prev, vars;\n {\n-  if (write_virtuals >= 0\n-      && ! DECL_EXTERNAL (vars)\n+  if (! DECL_EXTERNAL (vars)\n       && ((TREE_PUBLIC (vars) && ! DECL_WEAK (vars) && ! DECL_ONE_ONLY (vars))\n \t  || CLASSTYPE_EXPLICIT_INSTANTIATION (DECL_CONTEXT (vars))\n \t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars))\n@@ -3599,19 +3573,6 @@ finish_file ()\n   walk_vtables ((void (*) PROTO((tree, tree))) 0,\n \t\tprune_vtable_vardecl);\n \n-  if (write_virtuals == 2)\n-    {\n-      /* Now complain about an virtual function tables promised\n-\t but not delivered.  */\n-      while (pending_vtables)\n-\t{\n-\t  if (TREE_PURPOSE (pending_vtables) == NULL_TREE)\n-\t    error (\"virtual function table for `%s' not defined\",\n-\t\t   IDENTIFIER_POINTER (TREE_VALUE (pending_vtables)));\n-\t  pending_vtables = TREE_CHAIN (pending_vtables);\n-\t}\n-    }\n-\n   finish_repo ();\n \n   this_time = get_run_time ();"}, {"sha": "25f642f1307c718dacc841f0dc71d06e3002e5b9", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -23,9 +23,6 @@ DEFINE_LANG_NAME (\"C++\")\n /* This is the contribution to the `lang_options' array in gcc.c for\n    g++.  */\n \n-  { \"-+e0\", \"\" },\t\t/* gcc.c tacks the `-' on the front.  */\n-  { \"-+e1\", \"\" },\n-  { \"-+e2\", \"\" },\n   { \"-faccess-control\", \"\" },\n   { \"-fno-access-control\", \"Do not obey access control semantics\" },\n   { \"-fall-virtual\", \"Make all member functions virtual\" },\n@@ -41,7 +38,7 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fconst-strings\", \"\" },\n   { \"-fno-const-strings\", \"Make string literals `char[]' instead of `const char[]'\" },\n   { \"-fdefault-inline\", \"\" },\n-  { \"-fno-default-inline\", \"Do not inline mmeber functions be default\"},\n+  { \"-fno-default-inline\", \"Do not inline member functions by default\"},\n   { \"-frtti\", \"\" },\n   { \"-fno-rtti\", \"Do not generate run time type descriptor information\" },\n   { \"-felide-constructors\", \"\" },\n@@ -60,21 +57,21 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-handle-exceptions\", \"\" },\n   { \"-fhandle-signatures\", \"Handle signature language constructs\" },\n   { \"-fno-handle-signatures\", \"\" },\n-  { \"-fhonor-std\", \"Do not ignore the namespace standard\" },\n+  { \"-fhonor-std\", \"Treat the namespace `std' as a normal namespace\" },\n   { \"-fno-honor-std\", \"\" },\n   { \"-fhuge-objects\", \"Enable support for huge objects\" },\n   { \"-fno-huge-objects\", \"\" },\n   { \"-fimplement-inlines\", \"\" },\n   { \"-fno-implement-inlines\", \"Export functions even if they can be inlined\" },\n-  { \"-fimplicit-templates\", \"Emit implicit instatiations if needed\" },\n+  { \"-fimplicit-templates\", \"Emit implicit template instatiations when used\" },\n   { \"-fno-implicit-templates\", \"\" },\n   { \"-finit-priority\", \"Handle the init_priority attribute\" },\n   { \"-fno-init-priority\", \"\" },\n   { \"-flabels-ok\", \"Labels can be used as first class objects\" },\n   { \"-fno-labels-ok\", \"\" },\n   { \"-fmemoize-lookups\", \"\" },\n   { \"-fno-memoize-lookups\", \"\" },\n-  { \"-fname-mangling-version-\", \"Set the version of name mangling to use\" },\n+  { \"-fname-mangling-version-\", \"\" },\n   { \"-fnew-abi\", \"Enable experimental ABI changes\" },\n   { \"-fno-new-abi\", \"\" },\n   { \"-fnonnull-objects\", \"\" },"}, {"sha": "acb172822cabd4452c1cd2b8165a1e92ae30fc5a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -4712,33 +4712,7 @@ handle_cp_pragma (pname)\n {\n   register int token;\n \n-  if (! strcmp (pname, \"vtable\"))\n-    {\n-      extern tree pending_vtables;\n-\n-      /* More follows: it must be a string constant (class name).  */\n-      token = real_yylex ();\n-      if (token != STRING || TREE_CODE (yylval.ttype) != STRING_CST)\n-\t{\n-\t  error (\"invalid #pragma vtable\");\n-\t  return -1;\n-\t}\n-\n-      if (write_virtuals != 2)\n-\t{\n-\t  warning (\"use `+e2' option to enable #pragma vtable\");\n-\t  return -1;\n-\t}\n-      pending_vtables\n-\t= perm_tree_cons (NULL_TREE,\n-\t\t\t  get_identifier (TREE_STRING_POINTER (yylval.ttype)),\n-\t\t\t  pending_vtables);\n-      token = real_yylex ();\n-      if (token != END_OF_LINE)\n-\twarning (\"trailing characters ignored\");\n-      return 1;\n-    }\n-  else if (! strcmp (pname, \"unit\"))\n+  if (! strcmp (pname, \"unit\"))\n     {\n       /* More follows: it must be a string constant (unit name).  */\n       token = real_yylex ();"}, {"sha": "fe028c28e9c45685f06f79736ef210f9392fce39", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -2241,8 +2241,7 @@ dfs_debug_mark (binfo)\n \n   /* If interface info is known, either we've already emitted the debug\n      info or we don't need to.  */\n-  if (CLASSTYPE_INTERFACE_KNOWN (t)\n-      || (write_virtuals == 2 && TYPE_VIRTUAL_P (t)))\n+  if (CLASSTYPE_INTERFACE_KNOWN (t))\n     return;\n \n   /* If debug info is requested from this context for this type, supply it."}, {"sha": "24428261c55ee8afd9e865d60edeb2c74ed1856e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -1246,7 +1246,6 @@ begin_class_definition (t)\n   /* Don't change signatures.  */\n   if (! IS_SIGNATURE (t))\n     {\n-      extern tree pending_vtables;\n       int needs_writing;\n       tree name = TYPE_IDENTIFIER (t);\n       \n@@ -1258,24 +1257,13 @@ begin_class_definition (t)\n \t}\n       \n       /* Record how to set the access of this class's\n-\t virtual functions.  If write_virtuals == 2 or 3, then\n+\t virtual functions.  If write_virtuals == 3, then\n \t inline virtuals are ``extern inline''.  */\n-      switch (write_virtuals)\n-\t{\n-\tcase 0:\n-\tcase 1:\n-\t  needs_writing = 1;\n-\t  break;\n-\tcase 2:\n-\t  needs_writing = !! value_member (name, pending_vtables);\n-\t  break;\n-\tcase 3:\n-\t  needs_writing = ! CLASSTYPE_INTERFACE_ONLY (t)\n-\t    && CLASSTYPE_INTERFACE_KNOWN (t);\n-\t  break;\n-\tdefault:\n-\t  needs_writing = 0;\n-\t}\n+      if (write_virtuals == 3)\n+\tneeds_writing = ! CLASSTYPE_INTERFACE_ONLY (t)\n+\t  && CLASSTYPE_INTERFACE_KNOWN (t);\n+      else\n+\tneeds_writing = 1;\n       CLASSTYPE_VTABLE_NEEDS_WRITING (t) = needs_writing;\n     }\n #if 0"}, {"sha": "d589b5b531a61266648f3587ba21dabe76f98430", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ae6d778025d0f8a8438baed821a8adea1b7df6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=56ae6d778025d0f8a8438baed821a8adea1b7df6", "patch": "@@ -2916,10 +2916,10 @@ build_function_call_real (function, params, require_complete, flags)\n      function prototype, or apply default promotions.  */\n \n   if (flags & LOOKUP_COMPLAIN)\n-    coerced_params = convert_arguments (NULL_TREE, TYPE_ARG_TYPES (fntype),\n+    coerced_params = convert_arguments (TYPE_ARG_TYPES (fntype),\n \t\t\t\t\tparams, fndecl, LOOKUP_NORMAL);\n   else\n-    coerced_params = convert_arguments (NULL_TREE, TYPE_ARG_TYPES (fntype),\n+    coerced_params = convert_arguments (TYPE_ARG_TYPES (fntype),\n \t\t\t\t\tparams, fndecl, 0);\n \n   if (coerced_params == error_mark_node)\n@@ -2985,12 +2985,6 @@ build_function_call (function, params)\n    If parmdecls is exhausted, or when an element has NULL as its type,\n    perform the default conversions.\n \n-   RETURN_LOC is the location of the return value, if known, NULL_TREE\n-   otherwise.  This is useful in the case where we can avoid creating\n-   a temporary variable in the case where we can initialize the return\n-   value directly.  If we are not eliding constructors, then we set this\n-   to NULL_TREE to avoid this avoidance.\n-\n    NAME is an IDENTIFIER_NODE or 0.  It is used only for error messages.\n \n    This is also where warnings about wrong number of args are generated.\n@@ -3004,18 +2998,15 @@ build_function_call (function, params)\n    default arguments, if such were specified.  Do so here.  */\n \n tree\n-convert_arguments (return_loc, typelist, values, fndecl, flags)\n-     tree return_loc, typelist, values, fndecl;\n+convert_arguments (typelist, values, fndecl, flags)\n+     tree typelist, values, fndecl;\n      int flags;\n {\n   register tree typetail, valtail;\n   register tree result = NULL_TREE;\n   char *called_thing = 0;\n   int i = 0;\n \n-  if (! flag_elide_constructors)\n-    return_loc = 0;\n-\n   /* Argument passing is always copy-initialization.  */\n   flags |= LOOKUP_ONLYCONVERTING;\n \n@@ -3120,7 +3111,7 @@ convert_arguments (return_loc, typelist, values, fndecl, flags)\n \t  else\n \t    {\n \t      parmval = convert_for_initialization\n-\t\t(return_loc, type, val, flags,\n+\t\t(NULL_TREE, type, val, flags,\n \t\t \"argument passing\", fndecl, i);\n #ifdef PROMOTE_PROTOTYPES\n \t      if ((TREE_CODE (type) == INTEGER_TYPE\n@@ -7094,8 +7085,8 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   return error_mark_node;\n }\n \n-/* Convert RHS to be of type TYPE.  If EXP is non-zero,\n-   it is the target of the initialization.\n+/* Convert RHS to be of type TYPE.\n+   If EXP is non-zero, it is the target of the initialization.\n    ERRTYPE is a string to use in error messages.\n \n    Two major differences between the behavior of"}]}