{"sha": "8497934433cc8d0b01a658b8387ac7316f6d76fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5NzkzNDQzM2NjOGQwYjAxYTY1OGI4Mzg3YWM3MzE2ZjZkNzZmYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-03-08T17:59:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-03-08T17:59:14Z"}, "message": "std_limits.h: Move static const data members out of generic template...\n\n\n2002-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/std_limits.h: Move static const data members out of\n\tgeneric template, into base class __numeric_limits_base.\n\t* src/limits.cc: Add definitions.\n\t* config/linker-map.gnu: Add __numeric_limits_base.\n\t* testsuite/18_support/numeric_limits.cc: Declare test in scope.\n\nFrom-SVN: r50447", "tree": {"sha": "c0850a3fd68f4602375cb2f5657c34418bc20f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0850a3fd68f4602375cb2f5657c34418bc20f3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8497934433cc8d0b01a658b8387ac7316f6d76fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8497934433cc8d0b01a658b8387ac7316f6d76fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8497934433cc8d0b01a658b8387ac7316f6d76fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8497934433cc8d0b01a658b8387ac7316f6d76fb/comments", "author": null, "committer": null, "parents": [{"sha": "1e4e95d623d6f78528a54da2e6560fd458ce0065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4e95d623d6f78528a54da2e6560fd458ce0065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4e95d623d6f78528a54da2e6560fd458ce0065"}], "stats": {"total": 199, "additions": 70, "deletions": 129}, "files": [{"sha": "6222c1ec77da7e2f31dda27bd16aae77b692c80b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8497934433cc8d0b01a658b8387ac7316f6d76fb", "patch": "@@ -1,3 +1,11 @@\n+2002-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/std_limits.h: Move static const data members out of\n+\tgeneric template, into base class __numeric_limits_base.\n+\t* src/limits.cc: Add definitions.\n+\t* config/linker-map.gnu: Add __numeric_limits_base.\n+\t* testsuite/18_support/numeric_limits.cc: Declare test in scope.\n+\t\n 2002-03-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_alloc.h: Add extern implicit allocator"}, {"sha": "240ca0138eff14514315984e806547140ecaca46", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=8497934433cc8d0b01a658b8387ac7316f6d76fb", "patch": "@@ -33,7 +33,8 @@ GLIBCPP_3.1 {\n       std::__throw_*;\n       std::__basic_file*;\n       std::__num_base*;\n-      std::__timepunct*\n+      std::__timepunct*;\n+      std::__numeric_limits_base*\n     };\n \n     # Names not in an 'extern' block are mangled names."}, {"sha": "d2b57e39cc756069c94beaa1dea2fae9a18e8c43", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 33, "deletions": 121, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=8497934433cc8d0b01a658b8387ac7316f6d76fb", "patch": "@@ -908,140 +908,52 @@ namespace std\n   //\n   // The primary class traits\n   //\n+  struct __numeric_limits_base\n+  {\n+    static const bool is_specialized = false;\n+\n+    static const int digits = 0;\n+    static const int digits10 = 0;\n+    static const bool is_signed = false;\n+    static const bool is_integer = false;\n+    static const bool is_exact = false;\n+    static const int radix = 0;\n+\n+    static const int min_exponent = 0;\n+    static const int min_exponent10 = 0;\n+    static const int max_exponent = 0;\n+    static const int max_exponent10 = 0;\n+    \n+    static const bool has_infinity = false;\n+    static const bool has_quiet_NaN = false;\n+    static const bool has_signaling_NaN = false;\n+    static const float_denorm_style has_denorm = denorm_absent;\n+    static const bool has_denorm_loss = false;\n+\n+    static const bool is_iec559 = false;\n+    static const bool is_bounded = false;\n+    static const bool is_modulo = false;\n+\n+    static const bool traps = false;\n+    static const bool tinyness_before = false;\n+    static const float_round_style round_style = round_toward_zero;\n+  };\n+\n   template<typename _Tp> \n-    struct numeric_limits \n+    struct numeric_limits : public __numeric_limits_base \n     {\n-      static const bool is_specialized = false;\n-\n       static _Tp min() throw() { return static_cast<_Tp>(0); }\n       static _Tp max() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int digits = 0;\n-      static const int digits10 = 0;\n-      static const bool is_signed = false;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = 0;\n-\n       static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n       static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n       static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n       static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n       static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n       static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = false;\n-      static const bool is_modulo = false;\n-\n-      static const bool traps = false;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n     };\n \n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_specialized;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_signed;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_integer;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_exact;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::radix;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent10;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_infinity;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_quiet_NaN;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_signaling_NaN;\n-\n-  template<typename _Tp> \n-    const float_denorm_style\n-    numeric_limits<_Tp>::has_denorm;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_denorm_loss;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_iec559;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_bounded;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_modulo;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::traps;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::tinyness_before;\n-\n-  template<typename _Tp> \n-    const float_round_style\n-    numeric_limits<_Tp>::round_style;\n-\n   // Now there follow 15 explicit specializations.  Yes, 15.  Make sure\n-  // you get the count right.\n-  \n+  // you get the count right.  \n   template<>\n     struct numeric_limits<bool>\n     {"}, {"sha": "294673ea186999dd92e9268693e1121f944bbab5", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=8497934433cc8d0b01a658b8387ac7316f6d76fb", "patch": "@@ -1,6 +1,6 @@\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,6 +38,29 @@\n \n namespace std \n {\n+  const bool __numeric_limits_base::is_specialized;\n+  const int  __numeric_limits_base::digits;\n+  const int  __numeric_limits_base::digits10;\n+  const bool __numeric_limits_base::is_signed;\n+  const bool __numeric_limits_base::is_integer;\n+  const bool __numeric_limits_base::is_exact;\n+  const int  __numeric_limits_base::radix;\n+  const int  __numeric_limits_base::min_exponent;\n+  const int  __numeric_limits_base::min_exponent10;\n+  const int  __numeric_limits_base::max_exponent;\n+  const int  __numeric_limits_base::max_exponent10;\n+  const bool __numeric_limits_base::has_infinity;\n+  const bool __numeric_limits_base::has_quiet_NaN;\n+  const bool __numeric_limits_base::has_signaling_NaN;\n+  const float_denorm_style __numeric_limits_base::has_denorm;\n+  const bool __numeric_limits_base::has_denorm_loss;\n+  const bool __numeric_limits_base::is_iec559;\n+  const bool __numeric_limits_base::is_bounded;\n+  const bool __numeric_limits_base::is_modulo;\n+  const bool __numeric_limits_base::traps;\n+  const bool __numeric_limits_base::tinyness_before;\n+  const float_round_style __numeric_limits_base::round_style;\n+\n   // bool\n   const bool numeric_limits<bool>::is_specialized;\n   const int  numeric_limits<bool>::digits;"}, {"sha": "bf9d9e0c35d57fab0ac0c5fa5d57084e45b217de", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8497934433cc8d0b01a658b8387ac7316f6d76fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=8497934433cc8d0b01a658b8387ac7316f6d76fb", "patch": "@@ -55,6 +55,7 @@ DEFINE_EXTREMA(long double, LDBL_MIN, LDBL_MAX);\n template<typename T>\n void test_extrema()\n {\n+  bool test = true;\n   VERIFY( extrema<T>::min == std::numeric_limits<T>::min() );\n   VERIFY( extrema<T>::max == std::numeric_limits<T>::max() );\n }\n@@ -73,6 +74,7 @@ template<>\n void test_extrema<long double>()\n {\n   typedef long double T;\n+  bool test = true;\n   VERIFY( (extrema<T>::min - std::numeric_limits<T>::min())\n             < std::numeric_limits<T>::epsilon() );\n   VERIFY( (std::numeric_limits<T>::min() - extrema<T>::min)\n@@ -92,6 +94,7 @@ void test_extrema<long double>()\n \n void test_sign()\n {\n+  bool test = true;\n   VERIFY( std::numeric_limits<char>::is_signed == char_is_signed );\n   VERIFY( std::numeric_limits<signed char>::is_signed == true );\n   VERIFY( std::numeric_limits<unsigned char>::is_signed == false );\n@@ -230,9 +233,3 @@ int main()\n \n     return 0;\n }\n-\n-\n-\n-\n-\n-"}]}