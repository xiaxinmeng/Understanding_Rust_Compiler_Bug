{"sha": "24ef86d7ad359cbe86946ce7cbebe151169909c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlZjg2ZDdhZDM1OWNiZTg2OTQ2Y2U3Y2JlYmUxNTExNjk5MDljMQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T19:52:48Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T19:52:48Z"}, "message": "iq2000-protos.h (function_arg): Delete.\n\n\t* config/iq2000/iq2000-protos.h (function_arg): Delete.\n\t(function_arg_advance): Delete.\n\t* config/iq2000/iq2000.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/iq2000/iq2000.c (function_arg): Rename to...\n\t(iq2000_function_arg): ...this.  Make static.  Take a const_tree and\n\ta bool.\n\t(function_arg_advance): Rename to...\n\t(iq2000_function_arg_advance): ...this.  Make static.  Take a\n\tconst_tree and a bool.\n\t(iq2000_expand_prologue): Call iq2000_function_arg_advance and\n\tiq2000_function_arg.\n\t(iq2000_pass_by_reference): Call iq2000_function_arg).\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166035", "tree": {"sha": "41217902b7f925527c7b76b72bc7bd67491b504c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41217902b7f925527c7b76b72bc7bd67491b504c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24ef86d7ad359cbe86946ce7cbebe151169909c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ef86d7ad359cbe86946ce7cbebe151169909c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ef86d7ad359cbe86946ce7cbebe151169909c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ef86d7ad359cbe86946ce7cbebe151169909c1/comments", "author": null, "committer": null, "parents": [{"sha": "b60613c38a1b83f9abd69278dcc351647161e747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60613c38a1b83f9abd69278dcc351647161e747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60613c38a1b83f9abd69278dcc351647161e747"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "daae755efa21d2df870aa7cad9d886f6cdce36d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24ef86d7ad359cbe86946ce7cbebe151169909c1", "patch": "@@ -1,3 +1,19 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/iq2000/iq2000-protos.h (function_arg): Delete.\n+\t(function_arg_advance): Delete.\n+\t* config/iq2000/iq2000.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/iq2000/iq2000.c (function_arg): Rename to...\n+\t(iq2000_function_arg): ...this.  Make static.  Take a const_tree and\n+\ta bool.\n+\t(function_arg_advance): Rename to...\n+\t(iq2000_function_arg_advance): ...this.  Make static.  Take a\n+\tconst_tree and a bool.\n+\t(iq2000_expand_prologue): Call iq2000_function_arg_advance and\n+\tiq2000_function_arg.\n+\t(iq2000_pass_by_reference): Call iq2000_function_arg).\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/fr30/fr30-protos.h (fr30_num_arg_regs): Delete."}, {"sha": "067e80747d1b76bccc74c21b7a05b10f21109d17", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=24ef86d7ad359cbe86946ce7cbebe151169909c1", "patch": "@@ -42,8 +42,6 @@ extern void             gen_conditional_branch (rtx *, enum machine_mode);\n \n #ifdef TREE_CODE\n extern void             init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n-extern void             function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern struct rtx_def * function_arg (CUMULATIVE_ARGS *, enum machine_mode, const_tree, int);\n extern bool \t\tiq2000_function_value_regno_p (const unsigned int);\n #endif\n "}, {"sha": "5661fd4eb8f5d874ed1f56a9a3511463952bd176", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=24ef86d7ad359cbe86946ce7cbebe151169909c1", "patch": "@@ -164,6 +164,10 @@ static bool iq2000_pass_by_reference  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, bool);\n+static rtx iq2000_function_arg\t      (CUMULATIVE_ARGS *,\n+\t\t\t\t       enum machine_mode, const_tree, bool);\n+static void iq2000_function_arg_advance (CUMULATIVE_ARGS *,\n+\t\t\t\t\t enum machine_mode, const_tree, bool);\n static void iq2000_va_start\t      (tree, rtx);\n static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool iq2000_can_eliminate      (const int, const int);\n@@ -233,6 +237,10 @@ static const struct default_options iq2000_option_optimization_table[] =\n #define TARGET_CALLEE_COPIES\t\thook_callee_copies_named\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES\tiq2000_arg_partial_bytes\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG\t\tiq2000_function_arg\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE\tiq2000_function_arg_advance\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS\tiq2000_setup_incoming_varargs\n@@ -1132,9 +1140,9 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n /* Advance the argument of type TYPE and mode MODE to the next argument\n    position in CUM.  */\n \n-void\n-function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n-\t\t      int named)\n+static void\n+iq2000_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     const_tree type, bool named)\n {\n   if (TARGET_DEBUG_D_MODE)\n     {\n@@ -1201,9 +1209,9 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n /* Return an RTL expression containing the register for the given mode MODE\n    and type TYPE in CUM, or 0 if the argument is to be passed on the stack.  */\n \n-struct rtx_def *\n-function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, const_tree type,\n-\t      int named)\n+static rtx\n+iq2000_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t     const_tree type, bool named)\n {\n   rtx ret;\n   int regbase = -1;\n@@ -1939,9 +1947,11 @@ iq2000_expand_prologue (void)\n \t  passed_mode = Pmode;\n \t}\n \n-      entry_parm = FUNCTION_ARG (args_so_far, passed_mode, passed_type, 1);\n+      entry_parm = iq2000_function_arg (&args_so_far, passed_mode,\n+\t\t\t\t\tpassed_type, true);\n \n-      FUNCTION_ARG_ADVANCE (args_so_far, passed_mode, passed_type, 1);\n+      iq2000_function_arg_advance (&args_so_far, passed_mode,\n+\t\t\t\t   passed_type, true);\n       next_arg = DECL_CHAIN (cur_arg);\n \n       if (entry_parm && store_args_on_stack)\n@@ -1980,10 +1990,11 @@ iq2000_expand_prologue (void)\n \n   /* In order to pass small structures by value in registers we need to\n      shift the value into the high part of the register.\n-     Function_arg has encoded a PARALLEL rtx, holding a vector of\n-     adjustments to be made as the next_arg_reg variable, so we split up the\n-     insns, and emit them separately.  */\n-  next_arg_reg = FUNCTION_ARG (args_so_far, VOIDmode, void_type_node, 1);\n+     iq2000_unction_arg has encoded a PARALLEL rtx, holding a vector of\n+     adjustments to be made as the next_arg_reg variable, so we split up\n+     the insns, and emit them separately.  */\n+  next_arg_reg = iq2000_function_arg (&args_so_far, VOIDmode,\n+\t\t\t\t      void_type_node, true);\n   if (next_arg_reg != 0 && GET_CODE (next_arg_reg) == PARALLEL)\n     {\n       rtvec adjust = XVEC (next_arg_reg, 0);\n@@ -2293,7 +2304,7 @@ iq2000_pass_by_reference (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n        CUMULATIVE_ARGS temp;\n \n        temp = *cum;\n-       if (FUNCTION_ARG (temp, mode, type, named) != 0)\n+       if (iq2000_function_arg (&temp, mode, type, named) != 0)\n \t return 1;\n      }\n "}, {"sha": "716be5b7a671b9692de083c38069bb09b7c0c082", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24ef86d7ad359cbe86946ce7cbebe151169909c1/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=24ef86d7ad359cbe86946ce7cbebe151169909c1", "patch": "@@ -359,9 +359,6 @@ enum reg_class\n \f\n /* Function Arguments in Registers.  */\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (& CUM, MODE, TYPE, NAMED)\n-\n #define MAX_ARGS_IN_REGISTERS 8\n \n typedef struct iq2000_args\n@@ -383,9 +380,6 @@ typedef struct iq2000_args\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n   init_cumulative_args (& CUM, FNTYPE, LIBNAME)\t\t\t\t\\\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n-  function_arg_advance (& CUM, MODE, TYPE, NAMED)\n-\n #define FUNCTION_ARG_PADDING(MODE, TYPE)\t\t\t\t\\\n   (! BYTES_BIG_ENDIAN\t\t\t\t\t\t\t\\\n    ? upward\t\t\t\t\t\t\t\t\\"}]}