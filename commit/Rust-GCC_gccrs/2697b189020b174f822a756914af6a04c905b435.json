{"sha": "2697b189020b174f822a756914af6a04c905b435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5N2IxODkwMjBiMTc0ZjgyMmE3NTY5MTRhZjZhMDRjOTA1YjQzNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-04-20T09:32:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-04-20T09:32:45Z"}, "message": "re PR tree-optimization/70725 (Internal compiler error (ICE) on valid code)\n\n\tPR tree-optimization/70725\n\t* tree-if-conv.c (is_false_predicate): New function.\n\t(predicate_mem_writes): Use it.\n\n\t* gcc.dg/pr70725.c: New test.\n\nFrom-SVN: r235250", "tree": {"sha": "3b40c48a012b1dabf014a48b312fe99ac30a3f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b40c48a012b1dabf014a48b312fe99ac30a3f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2697b189020b174f822a756914af6a04c905b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2697b189020b174f822a756914af6a04c905b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2697b189020b174f822a756914af6a04c905b435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2697b189020b174f822a756914af6a04c905b435/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d566e90a165b8d8aeb74765fc1d845047200cf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d566e90a165b8d8aeb74765fc1d845047200cf45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d566e90a165b8d8aeb74765fc1d845047200cf45"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "576560a817ae9193b4677b03fb1bc3c24f861b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697b189020b174f822a756914af6a04c905b435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697b189020b174f822a756914af6a04c905b435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2697b189020b174f822a756914af6a04c905b435", "patch": "@@ -1,3 +1,9 @@\n+2016-04-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/70725\n+\t* tree-if-conv.c (is_false_predicate): New function.\n+\t(predicate_mem_writes): Use it.\n+\n 2016-04-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70726"}, {"sha": "b73790e183230295d58fdfb9368696877eb03719", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2697b189020b174f822a756914af6a04c905b435", "patch": "@@ -1,3 +1,8 @@\n+2016-04-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/70725\n+\t* gcc.dg/pr70725.c: New test.\n+\n 2016-04-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70726"}, {"sha": "fc7b674d7561ee0bcb6702034d5c868be6a7adf6", "filename": "gcc/testsuite/gcc.dg/pr70725.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70725.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70725.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70725.c?ref=2697b189020b174f822a756914af6a04c905b435", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/70725 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-additional-options \"-march=skylake-avx512\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+extern short a;\n+extern int b, d;\n+extern int c[100];\n+extern int e;\n+extern int f;\n+\n+void\n+fn1 ()\n+{\n+  for (; e < 2; e = e + 1)\n+    d = a;\n+  for (;;)\n+    for (int g = 0; g < 5; g = g + 1)\n+      for (int h = 0; h < 2; h = h + 1)\n+\tfor (int i = 0; i < 3; i = i + 1)\n+\t  c[f + i] = a && b;\n+}"}, {"sha": "a9fbab94a19319c7bc0c6156f5d79ec3c3fefaa4", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2697b189020b174f822a756914af6a04c905b435/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=2697b189020b174f822a756914af6a04c905b435", "patch": "@@ -262,6 +262,16 @@ ifc_temp_var (tree type, tree expr, gimple_stmt_iterator *gsi)\n   return new_name;\n }\n \n+/* Return true when COND is a false predicate.  */\n+\n+static inline bool\n+is_false_predicate (tree cond)\n+{\n+  return (cond == NULL_TREE\n+\t  || cond == boolean_false_node\n+\t  || integer_zerop (cond));\n+}\n+\n /* Return true when COND is a true predicate.  */\n \n static inline bool\n@@ -1988,7 +1998,7 @@ predicate_mem_writes (loop_p loop)\n       gimple *stmt;\n       int index;\n \n-      if (is_true_predicate (cond))\n+      if (is_true_predicate (cond) || is_false_predicate (cond))\n \tcontinue;\n \n       swap = false;"}]}