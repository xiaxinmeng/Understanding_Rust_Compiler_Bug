{"sha": "e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxYzhlZDYzZmE0ZDM3MmE3NDBjYTgwNDdiZjQyYzBiODY1OTNjNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-20T11:39:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-20T11:39:39Z"}, "message": "re PR tree-optimization/56396 (memory corruption in cc1)\n\n2013-02-20  Richard Biener  <rguenther@suse.de>\n\tJakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/56396\n\t* tree-ssa-ccp.c (n_const_val): New static variable.\n\t(get_value): Return NULL for SSA names we don't have a lattice\n\tentry for.\n\t(ccp_initialize): Initialize n_const_val.\n\t* tree-ssa-copy.c (n_copy_of): New static variable.\n\t(init_copy_prop): Initialize n_copy_of.\n\t(get_value): Return NULL_TREE for SSA names we don't have a\n\tlattice entry for.\n\n\t* gcc.dg/pr56396.c: New testcase.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r196170", "tree": {"sha": "a9f201aa86270f426a1e1a693b80027bb5c40590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f201aa86270f426a1e1a693b80027bb5c40590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d916479cf3b6ec9a2a81fece2996a54ebb314c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d916479cf3b6ec9a2a81fece2996a54ebb314c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d916479cf3b6ec9a2a81fece2996a54ebb314c3"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "5e18a6c5ad6a4aa3ceac12defbf76e2a3bdced1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "patch": "@@ -1,3 +1,16 @@\n+2013-02-20  Richard Biener  <rguenther@suse.de>\n+\tJakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56396\n+\t* tree-ssa-ccp.c (n_const_val): New static variable.\n+\t(get_value): Return NULL for SSA names we don't have a lattice\n+\tentry for.\n+\t(ccp_initialize): Initialize n_const_val.\n+\t* tree-ssa-copy.c (n_copy_of): New static variable.\n+\t(init_copy_prop): Initialize n_copy_of.\n+\t(get_value): Return NULL_TREE for SSA names we don't have a\n+\tlattice entry for.\n+\n 2013-02-20  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-cp.c (initialize_node_lattices): Fix dumping condition."}, {"sha": "838de3c15c3a467a5dee6d2d80df53620b774de3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "patch": "@@ -1,3 +1,9 @@\n+2013-02-20  Richard Biener  <rguenther@suse.de>\n+\tJakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56396\n+\t* gcc.dg/pr56396.c: New testcase.\n+\n 2013-02-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56373"}, {"sha": "d2ec8fa9bff00743828aa9e2df450852bdba4561", "filename": "gcc/testsuite/gcc.dg/pr56396.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56396.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56396.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56396.c?ref=e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/56396 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fpic -g\" } */\n+\n+struct S { char *s; int z; };\n+struct T { int t; } *c, u;\n+void bar (int, const char *);\n+\n+inline void *\n+foo (void *x, char *y, int z)\n+{\n+  struct S s;\n+  char b[256];\n+  s.s = b;\n+  s.z = __builtin___sprintf_chk (s.s, 1, __builtin_object_size (s.s, 2), \"Require\");\n+  if (s.z < 0)\n+    bar (u.t | c->t, \"rls\");\n+  if (foo (x, s.s, s.z))\n+    {\n+    }\n+  return (void *) 0;\n+}"}, {"sha": "b4faded0b509fa929baa6ed964480aacdc78fa6c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "patch": "@@ -162,6 +162,7 @@ typedef struct prop_value_d prop_value_t;\n    memory reference used to store (i.e., the LHS of the assignment\n    doing the store).  */\n static prop_value_t *const_val;\n+static unsigned n_const_val;\n \n static void canonicalize_float_value (prop_value_t *);\n static bool ccp_fold_stmt (gimple_stmt_iterator *);\n@@ -295,7 +296,8 @@ get_value (tree var)\n {\n   prop_value_t *val;\n \n-  if (const_val == NULL)\n+  if (const_val == NULL\n+      || SSA_NAME_VERSION (var) >= n_const_val)\n     return NULL;\n \n   val = &const_val[SSA_NAME_VERSION (var)];\n@@ -713,7 +715,8 @@ ccp_initialize (void)\n {\n   basic_block bb;\n \n-  const_val = XCNEWVEC (prop_value_t, num_ssa_names);\n+  n_const_val = num_ssa_names;\n+  const_val = XCNEWVEC (prop_value_t, n_const_val);\n \n   /* Initialize simulation flags for PHI nodes and statements.  */\n   FOR_EACH_BB (bb)"}, {"sha": "75a415454def12f59217a01628450285fa53b69c", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91c8ed63fa4d372a740ca8047bf42c0b86593c4/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=e91c8ed63fa4d372a740ca8047bf42c0b86593c4", "patch": "@@ -280,6 +280,7 @@ struct prop_value_d {\n typedef struct prop_value_d prop_value_t;\n \n static prop_value_t *copy_of;\n+static unsigned n_copy_of;\n \n \n /* Return true if this statement may generate a useful copy.  */\n@@ -664,7 +665,8 @@ init_copy_prop (void)\n {\n   basic_block bb;\n \n-  copy_of = XCNEWVEC (prop_value_t, num_ssa_names);\n+  n_copy_of = num_ssa_names;\n+  copy_of = XCNEWVEC (prop_value_t, n_copy_of);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -728,7 +730,10 @@ init_copy_prop (void)\n static tree\n get_value (tree name)\n {\n-  tree val = copy_of[SSA_NAME_VERSION (name)].value;\n+  tree val;\n+  if (SSA_NAME_VERSION (name) >= n_copy_of)\n+    return NULL_TREE;\n+  val = copy_of[SSA_NAME_VERSION (name)].value;\n   if (val && val != name)\n     return val;\n   return NULL_TREE;"}]}