{"sha": "1ae1325f24cea1698b56e4299d95446a1f7b90a2", "node_id": "C_kwDOANBUbNoAKDFhZTEzMjVmMjRjZWExNjk4YjU2ZTQyOTlkOTU0NDZhMWY3YjkwYTI", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-08-28T00:44:16Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-08-28T00:44:43Z"}, "message": "rs6000: Allow conversions of MMA pointer types [PR106017]\n\nGCC incorrectly disables conversions between MMA pointer types, which\nare allowed with clang.  The original intent was to disable conversions\nbetween MMA types and other other types, but pointer conversions should\nhave been allowed.  The fix is to just remove the MMA pointer conversion\nhandling code altogether.\n\ngcc/\n\tPR target/106017\n\t* config/rs6000/rs6000.cc (rs6000_invalid_conversion): Remove handling\n\tof MMA pointer conversions.\n\ngcc/testsuite/\n\tPR target/106017\n\t* gcc.target/powerpc/pr106017.c: New test.", "tree": {"sha": "e863efa4bcd44d1b344960afcee7b52f0d4d9782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e863efa4bcd44d1b344960afcee7b52f0d4d9782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ae1325f24cea1698b56e4299d95446a1f7b90a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae1325f24cea1698b56e4299d95446a1f7b90a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae1325f24cea1698b56e4299d95446a1f7b90a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae1325f24cea1698b56e4299d95446a1f7b90a2/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b226ef735f05264cdb51e3bc754d1b178108e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b226ef735f05264cdb51e3bc754d1b178108e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b226ef735f05264cdb51e3bc754d1b178108e3f"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "2f3146e56f870204a166f7c83caa6a6fea19f4f0", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae1325f24cea1698b56e4299d95446a1f7b90a2/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae1325f24cea1698b56e4299d95446a1f7b90a2/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=1ae1325f24cea1698b56e4299d95446a1f7b90a2", "patch": "@@ -28188,28 +28188,6 @@ rs6000_invalid_conversion (const_tree fromtype, const_tree totype)\n       if (tomode == OOmode)\n \treturn N_(\"invalid conversion to type %<__vector_pair%>\");\n     }\n-  else if (POINTER_TYPE_P (fromtype) && POINTER_TYPE_P (totype))\n-    {\n-      /* We really care about the modes of the base types.  */\n-      frommode = TYPE_MODE (TREE_TYPE (fromtype));\n-      tomode = TYPE_MODE (TREE_TYPE (totype));\n-\n-      /* Do not allow conversions to/from XOmode and OOmode pointer\n-\t types, except to/from void pointers.  */\n-      if (frommode != tomode\n-\t  && frommode != VOIDmode\n-\t  && tomode != VOIDmode)\n-\t{\n-\t  if (frommode == XOmode)\n-\t    return N_(\"invalid conversion from type %<__vector_quad *%>\");\n-\t  if (tomode == XOmode)\n-\t    return N_(\"invalid conversion to type %<__vector_quad *%>\");\n-\t  if (frommode == OOmode)\n-\t    return N_(\"invalid conversion from type %<__vector_pair *%>\");\n-\t  if (tomode == OOmode)\n-\t    return N_(\"invalid conversion to type %<__vector_pair *%>\");\n-\t}\n-    }\n \n   /* Conversion allowed.  */\n   return NULL;"}, {"sha": "46d6c7a4a33322cb13f2080cf6c8cc606f88c20b", "filename": "gcc/testsuite/gcc.target/powerpc/pr106017.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae1325f24cea1698b56e4299d95446a1f7b90a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106017.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae1325f24cea1698b56e4299d95446a1f7b90a2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106017.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106017.c?ref=1ae1325f24cea1698b56e4299d95446a1f7b90a2", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/106017 */\n+/* { dg-options \"-O1 -mdejagnu-cpu=power10\" } */\n+/* { dg-require-effective-target power10_ok } */\n+\n+/* Make sure we do not flag any errors on the following test cases.  */\n+\n+void takeacc(__vector_quad *);\n+void\n+foo (void)\n+{\n+  __vector_quad arr[4];\n+  takeacc (arr);\n+}\n+\n+unsigned char *\n+bar (__vector_quad *a)\n+{\n+  return (unsigned char *)a;\n+}"}]}