{"sha": "23a8ae8d463bc2658e382ed0c334d7da271617d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhOGFlOGQ0NjNiYzI2NThlMzgyZWQwYzMzNGQ3ZGEyNzE2MTdkMg==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-04-13T16:37:20Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-04-13T16:37:20Z"}, "message": "prims.cc (parse_verbose_args): Fix verbose argument parsing.\n\n2005-04-07  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* prims.cc (parse_verbose_args): Fix verbose argument parsing.\n\nFrom-SVN: r98097", "tree": {"sha": "8fcda03160ab247c86db3fb08227c6a610993c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fcda03160ab247c86db3fb08227c6a610993c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23a8ae8d463bc2658e382ed0c334d7da271617d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a8ae8d463bc2658e382ed0c334d7da271617d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a8ae8d463bc2658e382ed0c334d7da271617d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a8ae8d463bc2658e382ed0c334d7da271617d2/comments", "author": null, "committer": null, "parents": [{"sha": "4a36a3f164d87fbab8b7058921bffe084993c877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a36a3f164d87fbab8b7058921bffe084993c877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a36a3f164d87fbab8b7058921bffe084993c877"}], "stats": {"total": 107, "additions": 57, "deletions": 50}, "files": [{"sha": "1602046731d0841a7ddb877814a7debf4c9bf29c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a8ae8d463bc2658e382ed0c334d7da271617d2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a8ae8d463bc2658e382ed0c334d7da271617d2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=23a8ae8d463bc2658e382ed0c334d7da271617d2", "patch": "@@ -1,3 +1,7 @@\n+2005-04-07  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* prims.cc (parse_verbose_args): Fix verbose argument parsing.\n+\n 2005-04-12  Mike Stump  <mrs@apple.com>\n \n \t* configure: Regenerate."}, {"sha": "b62514581ddae69a7df14622920d2abaa3260019", "filename": "libjava/prims.cc", "status": "modified", "additions": 53, "deletions": 50, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a8ae8d463bc2658e382ed0c334d7da271617d2/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a8ae8d463bc2658e382ed0c334d7da271617d2/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=23a8ae8d463bc2658e382ed0c334d7da271617d2", "patch": "@@ -1049,7 +1049,7 @@ static jint\n parse_verbose_args (char* option_string,\n                     bool ignore_unrecognized)\n {\n-  size_t len = sizeof (\"-verbose\");\n+  size_t len = sizeof (\"-verbose\") - 1;\n \n   if (strlen (option_string) < len)\n     return -1;\n@@ -1058,69 +1058,72 @@ parse_verbose_args (char* option_string,\n       && option_string[len + 1] != '\\0')\n     {\n       char* verbose_args = option_string + len + 1;\n-      size_t last = 0;\n \n       do\n \t{\n \t  if (! strncmp (verbose_args,\n-\t\t\t \"gc\", (last = sizeof (\"gc\")) - 1)\n-\t      && (verbose_args[last] == '\\0'\n-\t\t  || verbose_args[last] == ','))\n-\t    {\n-\t      // FIXME: we should add functions to boehm-gc that\n-\t      // toggle GC_print_stats, GC_PRINT_ADDRESS_MAP and\n-\t      // GC_print_back_height.\n-\n-\t    }\n+\t\t\t \"gc\", sizeof (\"gc\") - 1))\n+            {\n+              if (verbose_args[sizeof (\"gc\") - 1] == '\\0'\n+                  || verbose_args[sizeof (\"gc\") - 1] == ',')\n+                {\n+                  // FIXME: we should add functions to boehm-gc that\n+                  // toggle GC_print_stats, GC_PRINT_ADDRESS_MAP and\n+                  // GC_print_back_height.\n+                  verbose_args += sizeof (\"gc\") - 1;\n+                }\n+              else\n+                {\n+                verbose_arg_err:\n+                  fprintf (stderr, \"libgcj: unknown verbose option: %s\\n\",\n+                           option_string);\n+                  return -1;\n+                }\n+            }\n \t  else if (! strncmp (verbose_args,\n \t\t\t      \"class\",\n-\t\t\t      (last = sizeof (\"class\")) - 1)\n-\t\t   && (verbose_args[last] == '\\0'\n-\t\t       || verbose_args[last] == ','))\n-\t    {\n-\t      gcj::verbose_class_flag = true;\n-\t    }\n+\t\t\t      sizeof (\"class\") - 1))\n+            {\n+              if (verbose_args[sizeof (\"class\") - 1] == '\\0'\n+                  || verbose_args[sizeof (\"class\") - 1] == ',')\n+                {\n+                  gcj::verbose_class_flag = true;\n+                  verbose_args += sizeof (\"class\") - 1;\n+                }\n+              else\n+                goto verbose_arg_err;\n+            }\n \t  else if (! strncmp (verbose_args, \"jni\",\n-\t\t\t      (last = sizeof (\"jni\")) - 1)\n-\t\t   && (verbose_args[last] == '\\0'\n-\t\t       || verbose_args[last] == ','))\n-\t    {\n-\t      // FIXME: enable JNI messages.\n-\t    }\n+\t\t\t      sizeof (\"jni\") - 1))\n+            {\n+              if (verbose_args[sizeof (\"jni\") - 1] == '\\0'\n+                  || verbose_args[sizeof (\"jni\") - 1] == ',')\n+                {\n+                  // FIXME: enable JNI messages.\n+                  verbose_args += sizeof (\"jni\") - 1;\n+                }\n+              else\n+                goto verbose_arg_err;\n+            }\n \t  else if (ignore_unrecognized\n \t\t   && verbose_args[0] == 'X')\n \t    {\n \t      // ignore unrecognized non-standard verbose option\n-\t      last = 0;\n-\t      while (verbose_args[last] != '\\0'\n-\t\t     && verbose_args[last++] != ',');\n+\t      while (verbose_args[0] != '\\0'\n+\t\t     && verbose_args[0] != ',')\n+                verbose_args++;\n \t    }\n+          else if (verbose_args[0] == ',')\n+            {\n+              verbose_args++;\n+            }\n+          else\n+            goto verbose_arg_err;\n \n-\t  if (strlen (verbose_args) >= last)\n-\t    {\n-\t      if (verbose_args[last] == ',')\n-\t\t{\n-\t\t  if (verbose_args[last + 1] == '\\0')\n-\t\t    // trailing comma\n-\t\t    return -1;\n-\t\t  else\n-\t\t    {\n-\t\t      verbose_args = verbose_args + last + 1;\n-\t\t      last = 0;\n-\t\t    }\n-\t\t}\n-\t      // here verbose_args[last] is either '\\0' or\n-\t      // the first character in the next verbose\n-\t      // argument.\n-\t    }\n-\t  else\n-\t    // partial option\n-\t    return -1;\n-\n-\t  // verbose_args[last] will be '\\0' here if we're\n-\t  // done.\n+          if (verbose_args[0] == ',')\n+            verbose_args++;\n \t}\n-      while (verbose_args[last] != '\\0');\n+      while (verbose_args[0] != '\\0');\n     }\n   else if (option_string[len] == 'g'\n \t   && option_string[len + 1] == 'c'"}]}