{"sha": "3950dcdfccd66e077b1be064826aac76122f4bb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1MGRjZGZjY2Q2NmUwNzdiMWJlMDY0ODI2YWFjNzYxMjJmNGJiNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-12-12T16:45:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-12-12T16:45:51Z"}, "message": "linux.h (IA64_GATE_AREA_END): Increase by 64K.\n\n\t* config/ia64/linux.h (IA64_GATE_AREA_END): Increase by 64K.\n\t(MD_FALLBACK_FRAME_STATE_FOR): Set fpsr_loc, br_loc[6] and\n\tbr_loc[7].  Update comment.\n\t(MD_HANDLE_UNWABI): Define.\n\t* config/ia64/unwind-ia64.c (struct unw_state_record): Add\n\tunwabi field.\n\t(struct _Unwind_Context): Increase br_loc array size to 8 entries.\n\t(desc_abi): Set unwabi.\n\t(uw_update_reg_address): Allow br up to 7.\n\t(uw_update_context): Invoke MD_HANDLE_UNWABI if defined.\n\t(uw_install_context): Load b1..b5 from correct locations.\n\tFix insn loading ar.fpsr.\n\t* doc/tm.texi: Document MD_HANDLE_UNWABI.\n\n\t* g++.dg/eh/ia64-1.C: New test.\n\nFrom-SVN: r74575", "tree": {"sha": "7cf80b3f7b176478613482e7bd4d3ba7eec2bfe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf80b3f7b176478613482e7bd4d3ba7eec2bfe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3950dcdfccd66e077b1be064826aac76122f4bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3950dcdfccd66e077b1be064826aac76122f4bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3950dcdfccd66e077b1be064826aac76122f4bb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3950dcdfccd66e077b1be064826aac76122f4bb4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3075b32758eafbf3cb6dadb9225d28bb2b6abfab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3075b32758eafbf3cb6dadb9225d28bb2b6abfab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3075b32758eafbf3cb6dadb9225d28bb2b6abfab"}], "stats": {"total": 180, "additions": 162, "deletions": 18}, "files": [{"sha": "1cb5de2585b696372706bb9acdc887c314a24efa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -1,3 +1,19 @@\n+2003-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/ia64/linux.h (IA64_GATE_AREA_END): Increase by 64K.\n+\t(MD_FALLBACK_FRAME_STATE_FOR): Set fpsr_loc, br_loc[6] and\n+\tbr_loc[7].  Update comment.\n+\t(MD_HANDLE_UNWABI): Define.\n+\t* config/ia64/unwind-ia64.c (struct unw_state_record): Add\n+\tunwabi field.\n+\t(struct _Unwind_Context): Increase br_loc array size to 8 entries.\n+\t(desc_abi): Set unwabi.\n+\t(uw_update_reg_address): Allow br up to 7.\n+\t(uw_update_context): Invoke MD_HANDLE_UNWABI if defined.\n+\t(uw_install_context): Load b1..b5 from correct locations.\n+\tFix insn loading ar.fpsr.\n+\t* doc/tm.texi: Document MD_HANDLE_UNWABI.\n+\n 2003-12-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/13037"}, {"sha": "d456ea5f52e30f9ed600649ec0450ef3ee68baff", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -63,7 +63,7 @@ do {\t\t\t\t\t\t\\\n #include <sys/ucontext.h>\n \n #define IA64_GATE_AREA_START 0xa000000000000100LL\n-#define IA64_GATE_AREA_END   0xa000000000020000LL\n+#define IA64_GATE_AREA_END   0xa000000000030000LL\n \n #define MD_FALLBACK_FRAME_STATE_FOR(CONTEXT, FS, SUCCESS)\t\t\\\n   if ((CONTEXT)->rp >= IA64_GATE_AREA_START\t\t\t\t\\\n@@ -90,10 +90,13 @@ do {\t\t\t\t\t\t\\\n \t  (CONTEXT)->ireg[i_ - 2].loc = &sc_->sc_gr[i_];\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n \t  \t\t\t\t\t\t\t\t\\\n+      (CONTEXT)->fpsr_loc = &(sc_->sc_ar_fpsr);\t\t\t\t\\\n       (CONTEXT)->pfs_loc = &(sc_->sc_ar_pfs);\t\t\t\t\\\n       (CONTEXT)->lc_loc = &(sc_->sc_ar_lc);\t\t\t\t\\\n       (CONTEXT)->unat_loc = &(sc_->sc_ar_unat);\t\t\t\t\\\n       (CONTEXT)->br_loc[0] = &(sc_->sc_br[0]);\t\t\t\t\\\n+      (CONTEXT)->br_loc[6] = &(sc_->sc_br[6]);\t\t\t\t\\\n+      (CONTEXT)->br_loc[7] = &(sc_->sc_br[7]);\t\t\t\t\\\n       (CONTEXT)->bsp = sc_->sc_ar_bsp;\t\t\t\t\t\\\n       (CONTEXT)->pr = sc_->sc_pr;\t\t\t\t\t\\\n       (CONTEXT)->psp = sc_->sc_gr[12];\t\t\t\t\t\\\n@@ -102,11 +105,10 @@ do {\t\t\t\t\t\t\\\n          other than what we adjust for below.\t  */\t\t\t\\\n       (FS) -> no_reg_stack_frame = 1;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* Don't touch the branch registers o.t. b0.  The kernel doesn't\t\\\n-\t pass the preserved branch registers in the sigcontext but\t\\\n-\t leaves them intact, so there's no need to do anything\t\t\\\n-\t with them here.  */\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n+      /* Don't touch the branch registers o.t. b0, b6 and b7.\t\t\\\n+\t The kernel doesn't pass the preserved branch registers\t\t\\\n+\t in the sigcontext but leaves them intact, so there's no\t\\\n+\t need to do anything with them here.  */\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tunsigned long sof = sc_->sc_cfm & 0x7f;\t\t\t\t\\\n \t(CONTEXT)->bsp = (unsigned long)\t\t\t\t\\\n@@ -120,4 +122,58 @@ do {\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       goto SUCCESS;\t\t\t\t\t\t\t\\\n     }\n+\n+#define MD_HANDLE_UNWABI(CONTEXT, FS)\t\t\t\t\t\\\n+  if ((FS)->unwabi == ((3 << 8) | 's')\t\t\t\t\t\\\n+      || (FS)->unwabi == ((0 << 8) | 's'))\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      struct sigframe {\t\t\t\t\t\t\t\\\n+\tchar scratch[16];\t\t\t\t\t\t\\\n+\tunsigned long sig_number;\t\t\t\t\t\\\n+\tstruct siginfo *info;\t\t\t\t\t\t\\\n+\tstruct sigcontext *sc;\t\t\t\t\t\t\\\n+      } *frame_ = (struct sigframe *)(CONTEXT)->psp;\t\t\t\\\n+      struct sigcontext *sc_ = frame_->sc;\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* Restore scratch registers in case the unwinder needs to\t\\\n+\t refer to a value stored in one of them.  */\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tint i_;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tfor (i_ = 2; i_ < 4; i_++)\t\t\t\t\t\\\n+\t  (CONTEXT)->ireg[i_ - 2].loc = &sc_->sc_gr[i_];\t\t\\\n+\tfor (i_ = 8; i_ < 12; i_++)\t\t\t\t\t\\\n+\t  (CONTEXT)->ireg[i_ - 2].loc = &sc_->sc_gr[i_];\t\t\\\n+\tfor (i_ = 14; i_ < 32; i_++)\t\t\t\t\t\\\n+\t  (CONTEXT)->ireg[i_ - 2].loc = &sc_->sc_gr[i_];\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t  \t\t\t\t\t\t\t\t\\\n+      (CONTEXT)->pfs_loc = &(sc_->sc_ar_pfs);\t\t\t\t\\\n+      (CONTEXT)->lc_loc = &(sc_->sc_ar_lc);\t\t\t\t\\\n+      (CONTEXT)->unat_loc = &(sc_->sc_ar_unat);\t\t\t\t\\\n+      (CONTEXT)->br_loc[0] = &(sc_->sc_br[0]);\t\t\t\t\\\n+      (CONTEXT)->br_loc[6] = &(sc_->sc_br[6]);\t\t\t\t\\\n+      (CONTEXT)->br_loc[7] = &(sc_->sc_br[7]);\t\t\t\t\\\n+      (CONTEXT)->bsp = sc_->sc_ar_bsp;\t\t\t\t\t\\\n+      (CONTEXT)->pr = sc_->sc_pr;\t\t\t\t\t\\\n+      (CONTEXT)->gp = sc_->sc_gr[1];\t\t\t\t\t\\\n+      /* Signal frame doesn't have an associated reg. stack frame \t\\\n+         other than what we adjust for below.\t  */\t\t\t\\\n+      (FS) -> no_reg_stack_frame = 1;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* Don't touch the branch registers o.t. b0, b6 and b7.\t\t\\\n+\t The kernel doesn't pass the preserved branch registers\t\t\\\n+\t in the sigcontext but leaves them intact, so there's no\t\\\n+\t need to do anything with them here.  */\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tunsigned long sof = sc_->sc_cfm & 0x7f;\t\t\t\t\\\n+\t(CONTEXT)->bsp = (unsigned long)\t\t\t\t\\\n+\t  ia64_rse_skip_regs ((unsigned long *)(sc_->sc_ar_bsp), -sof); \\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      /* pfs_loc already set above.  Without this pfs_loc would point\t\\\n+\t incorrectly to sc_cfm instead of sc_ar_pfs.  */\t\t\\\n+      (FS)->curr.reg[UNW_REG_PFS].where = UNW_WHERE_NONE;\t\t\\\n+    }\n+\n #endif /* IN_LIBGCC2 */"}, {"sha": "4de326383675c99a509941ef7b198e3e43ae029d", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -157,6 +157,7 @@ typedef struct unw_state_record\n \n   unsigned char gr_save_loc;\t/* next general register to use for saving */\n   unsigned char return_link_reg; /* branch register for return link */\n+  unsigned short unwabi;\n \n   struct unw_labeled_state *labeled_states;\t/* list of all labeled states */\n   struct unw_reg_state curr;\t/* current state */\n@@ -221,7 +222,7 @@ struct _Unwind_Context\n     } nat;\n   } ireg[32 - 2];\t/* Indexed by <register number> - 2 */\n \n-  unsigned long *br_loc[7];\n+  unsigned long *br_loc[8];\n   void *fr_loc[32 - 2];\n \n   /* ??? We initially point pri_unat_loc here.  The entire NAT bit\n@@ -621,11 +622,11 @@ desc_prologue (int body, unw_word rlen, unsigned char mask,\n  */\n \n static inline void\n-desc_abi (unsigned char abi __attribute__((unused)),\n-\t  unsigned char context __attribute__((unused)),\n-\t  struct unw_state_record *sr __attribute__((unused)))\n+desc_abi (unsigned char abi,\n+\t  unsigned char context,\n+\t  struct unw_state_record *sr)\n {\n-  /* Anything to do?  */\n+  sr->unwabi = (abi << 8) | context;\n }\n \n static inline void\n@@ -1814,9 +1815,9 @@ uw_update_reg_address (struct _Unwind_Context *context,\n \n     case UNW_WHERE_BR:\n       /* Note that while RVAL can only be 1-5 from normal descriptors,\n-\t we can want to look at B0 due to having manually unwound a\n+\t we can want to look at B0, B6 and B7 due to having manually unwound a\n \t signal frame.  */\n-      if (rval <= 5)\n+      if (rval < 8)\n \taddr = context->br_loc[rval];\n       else\n \tabort ();\n@@ -1930,6 +1931,10 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n   long i;\n \n+#ifdef MD_HANDLE_UNWABI\n+  MD_HANDLE_UNWABI (context, fs);\n+#endif\n+\n   context->sp = context->psp;\n \n   /* First, set PSP.  Subsequent instructions may depend on this value.  */\n@@ -2081,22 +2086,22 @@ uw_install_context (struct _Unwind_Context *current __attribute__((unused)),\n \t\";;\t\t\t\t\t\\n\\t\"\n \t\"(p6) ld8.fill r4 = [%1]\t\t\\n\\t\"\n \t\"(p7) ld8.fill r5 = [r20]\t\t\\n\\t\"\n-\t\"add r21 = uc_br_loc + 8, %0\t\t\\n\\t\"\n+\t\"add r21 = uc_br_loc + 16, %0\t\t\\n\\t\"\n \t\"adds %1 = 16, %1\t\t\t\\n\\t\"\n \t\"adds r20 = 16, r20\t\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n \t\"(p8) ld8.fill r6 = [%1]\t\t\\n\\t\"\n \t\"(p9) ld8.fill r7 = [r20]\t\t\\n\\t\"\n-\t\"add r20 = uc_br_loc, %0\t\t\\n\\t\"\n+\t\"add r20 = uc_br_loc + 8, %0\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n \t/* Load up call-saved branch registers.  */\n \t\"ld8 r22 = [r20], 16\t\t\t\\n\\t\"\n \t\"ld8 r23 = [r21], 16\t\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n \t\"ld8 r24 = [r20], 16\t\t\t\\n\\t\"\n-\t\"ld8 r25 = [r21], uc_fr_loc - (uc_br_loc + 24)\\n\\t\"\n+\t\"ld8 r25 = [r21], uc_fr_loc - (uc_br_loc + 32)\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n-\t\"ld8 r26 = [r20], uc_fr_loc + 8 - (uc_br_loc + 32)\\n\\t\"\n+\t\"ld8 r26 = [r20], uc_fr_loc + 8 - (uc_br_loc + 40)\\n\\t\"\n \t\"ld8 r27 = [r21], 24\t\t\t\\n\\t\"\n \t\"cmp.ne p6, p0 = r0, r22\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n@@ -2244,7 +2249,7 @@ uw_install_context (struct _Unwind_Context *current __attribute__((unused)),\n \t\"(p9) mov.i ar.lc = r29\t\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n \t\"mov.m r25 = ar.rsc\t\t\t\\n\\t\"\n-\t\"(p6) mov.i ar.fpsr = r30\t\t\\n\\t\"\n+\t\"(p6) mov.m ar.fpsr = r30\t\t\\n\\t\"\n \t\";;\t\t\t\t\t\\n\\t\"\n \t\"and r25 = 0x1c, r25\t\t\t\\n\\t\"\n \t\"mov b0 = r26\t\t\t\t\\n\\t\""}, {"sha": "5075a4c18b3df7b012eaf034e98c2d31ed632ba0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -3052,6 +3052,19 @@ For proper signal handling in Java this macro is accompanied by\n @code{MAKE_THROW_FRAME}, defined in @file{libjava/include/*-signal.h} headers.\n @end defmac\n \n+@defmac MD_HANDLE_UNWABI (@var{context}, @var{fs})\n+This macro allows the target to add operating system specific code to the\n+call-frame unwinder to handle the IA-64 @code{.unwabi} unwinding directive,\n+usually used for signal or interrupt frames.\n+\n+This macro is called from @code{uw_update_context} in @file{unwind-ia64.c}.\n+@var{context} is an @code{_Unwind_Context};\n+@var{fs} is an @code{_Unwind_FrameState}.  Examine @code{fs->unwabi}\n+for the abi and context in the @code{.unwabi} directive.  If the\n+@code{.unwabi} directive can be handled, the register save addresses should\n+be updated in @var{fs}.\n+@end defmac\n+\n @node Stack Checking\n @subsection Specifying How Stack Checking is Done\n "}, {"sha": "62c363e673ac5e1a561d5bd738fbc0086f7fc50d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -1,3 +1,7 @@\n+2003-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/eh/ia64-1.C: New test.\n+\n 2003-12-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/13037"}, {"sha": "a1b731c8d80877909f55e383f02612318afec338", "filename": "gcc/testsuite/g++.dg/eh/ia64-1.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3950dcdfccd66e077b1be064826aac76122f4bb4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fia64-1.C?ref=3950dcdfccd66e077b1be064826aac76122f4bb4", "patch": "@@ -0,0 +1,50 @@\n+// Test whether call saved float and branch regs are restored properly\n+// { dg-do run { target ia64-*-* } }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort (void);\n+\n+char buf[128];\n+\n+void __attribute__((noinline))\n+bar (void)\n+{\n+  throw 1;\n+}\n+\n+void __attribute__((noinline))\n+foo (void)\n+{\n+  bar ();\n+  bar ();\n+}\n+\n+int\n+main (void)\n+{\n+  register double f2 __asm (\"f2\");\n+  register double f3 __asm (\"f3\");\n+  register double f4 __asm (\"f4\");\n+  register double f5 __asm (\"f5\");\n+  register double f16 __asm (\"f16\");\n+  register double f17 __asm (\"f17\");\n+  register void *b1 __asm (\"b1\");\n+  register void *b2 __asm (\"b2\");\n+  register void *b3 __asm (\"b3\");\n+  register void *b4 __asm (\"b4\");\n+  register void *b5 __asm (\"b5\");\n+  f2 = 12.0; f3 = 13.0; f4 = 14.0; f5 = 15.0; f16 = 16.0; f17 = 17.0;\n+  b1 = &buf[1]; b2 = &buf[2]; b3 = &buf[3]; b4 = &buf[4]; b5 = &buf[5];\n+  try\n+    {\n+      foo ();\n+    }\n+  catch (...) {}\n+  if (f2 != 12.0 || f3 != 13.0 || f4 != 14.0\n+      || f5 != 15.0 || f16 != 16.0 || f17 != 17.0)\n+    abort ();\n+  if (b1 != &buf[1] || b2 != &buf[2] || b3 != &buf[3]\n+      || b4 != &buf[4] || b5 != &buf[5])\n+    abort ();\n+  return 0;\n+}"}]}