{"sha": "a091118d2c7bdd3a6fa2de0694aff47071051956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5MTExOGQyYzdiZGQzYTZmYTJkZTA2OTRhZmY0NzA3MTA1MTk1Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-07-20T17:31:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-07-20T17:31:46Z"}, "message": "oacc-parallel.c (GOACC_parallel): Move variadic handling into wait=-specific if.\n\n\t* oacc-parallel.c (GOACC_parallel): Move variadic handling into\n\twait=-specific if.\n\t(GOACC_enter_exit_data, GOACC_update): Use consistent num_waits\n\t!=0 condition.\n\t(goacc_waits): Move !num_waits handling to ...\n\t(GOACC_wait): ... here, the only caller that might have zero waits.\n\nFrom-SVN: r226011", "tree": {"sha": "828f194bd1d3ecfa54cee8c29cceabdc3b74ef9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/828f194bd1d3ecfa54cee8c29cceabdc3b74ef9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a091118d2c7bdd3a6fa2de0694aff47071051956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a091118d2c7bdd3a6fa2de0694aff47071051956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a091118d2c7bdd3a6fa2de0694aff47071051956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a091118d2c7bdd3a6fa2de0694aff47071051956/comments", "author": null, "committer": null, "parents": [{"sha": "53c1201606a2a8901544620eadc5965745b6e7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c1201606a2a8901544620eadc5965745b6e7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c1201606a2a8901544620eadc5965745b6e7de"}], "stats": {"total": 86, "additions": 34, "deletions": 52}, "files": [{"sha": "0628b77d5237ba412b6e629316f99b991461fdc7", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a091118d2c7bdd3a6fa2de0694aff47071051956/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a091118d2c7bdd3a6fa2de0694aff47071051956/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a091118d2c7bdd3a6fa2de0694aff47071051956", "patch": "@@ -1,5 +1,12 @@\n 2015-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* oacc-parallel.c (GOACC_parallel): Move variadic handling into\n+\twait=-specific if.\n+\t(GOACC_enter_exit_data, GOACC_update): Use consistent num_waits\n+\t!=0 condition.\n+\t(goacc_waits): Move !num_waits handling to ...\n+\t(GOACC_wait): ... here, the only caller that might have zero waits.\n+\n \t* plugin/plugin-nvptx.c (struct targ_fn_descriptor): Move later.\n \t(struct ptx_image_data): Move earlier, add fns field.\n \t(struct ptx_device): Add images and image_lock fields."}, {"sha": "e1ea2c62c44e366393bd4d254b9103430757c1ad", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 27, "deletions": 52, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a091118d2c7bdd3a6fa2de0694aff47071051956/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a091118d2c7bdd3a6fa2de0694aff47071051956/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=a091118d2c7bdd3a6fa2de0694aff47071051956", "patch": "@@ -105,13 +105,13 @@ GOACC_parallel (int device, void (*fn) (void *),\n       return;\n     }\n \n-  va_start (ap, num_waits);\n+  if (num_waits)\n+    {\n+      va_start (ap, num_waits);\n+      goacc_wait (async, num_waits, ap);\n+      va_end (ap);\n+    }\n   \n-  if (num_waits > 0)\n-    goacc_wait (async, num_waits, ap);\n-\n-  va_end (ap);\n-\n   acc_dev->openacc.async_set_async_func (async);\n \n   if (!(acc_dev->capabilities & GOMP_OFFLOAD_CAP_NATIVE_EXEC))\n@@ -225,14 +225,12 @@ GOACC_enter_exit_data (int device, size_t mapnum,\n       || host_fallback)\n     return;\n \n-  if (num_waits > 0)\n+  if (num_waits)\n     {\n       va_list ap;\n \n       va_start (ap, num_waits);\n-\n       goacc_wait (async, num_waits, ap);\n-\n       va_end (ap);\n     }\n \n@@ -350,47 +348,21 @@ goacc_wait (int async, int num_waits, va_list ap)\n {\n   struct goacc_thread *thr = goacc_thread ();\n   struct gomp_device_descr *acc_dev = thr->dev;\n-  int i;\n \n-  assert (num_waits >= 0);\n-\n-  if (async == acc_async_sync && num_waits == 0)\n-    {\n-      acc_wait_all ();\n-      return;\n-    }\n-\n-  if (async == acc_async_sync && num_waits)\n-    {\n-      for (i = 0; i < num_waits; i++)\n-        {\n-          int qid = va_arg (ap, int);\n-\n-          if (acc_async_test (qid))\n-            continue;\n-\n-          acc_wait (qid);\n-        }\n-      return;\n-    }\n-\n-  if (async == acc_async_noval && num_waits == 0)\n-    {\n-      acc_dev->openacc.async_wait_all_async_func (acc_async_noval);\n-      return;\n-    }\n-\n-  for (i = 0; i < num_waits; i++)\n+  while (num_waits--)\n     {\n       int qid = va_arg (ap, int);\n \n       if (acc_async_test (qid))\n \tcontinue;\n \n-      /* If we're waiting on the same asynchronous queue as we're launching on,\n-         the queue itself will order work as required, so there's no need to\n-\t wait explicitly.  */\n-      if (qid != async)\n+      if (async == acc_async_sync)\n+\tacc_wait (qid);\n+      else if (qid == async)\n+\t;/* If we're waiting on the same asynchronous queue as we're\n+\t    launching on, the queue itself will order work as\n+\t    required, so there's no need to wait explicitly.  */\n+      else\n \tacc_dev->openacc.async_wait_async_func (qid, async);\n     }\n }\n@@ -412,14 +384,12 @@ GOACC_update (int device, size_t mapnum,\n       || host_fallback)\n     return;\n \n-  if (num_waits > 0)\n+  if (num_waits)\n     {\n       va_list ap;\n \n       va_start (ap, num_waits);\n-\n       goacc_wait (async, num_waits, ap);\n-\n       va_end (ap);\n     }\n \n@@ -455,13 +425,18 @@ GOACC_update (int device, size_t mapnum,\n void\n GOACC_wait (int async, int num_waits, ...)\n {\n-  va_list ap;\n-\n-  va_start (ap, num_waits);\n-\n-  goacc_wait (async, num_waits, ap);\n+  if (num_waits)\n+    {\n+      va_list ap;\n \n-  va_end (ap);\n+      va_start (ap, num_waits);\n+      goacc_wait (async, num_waits, ap);\n+      va_end (ap);\n+    }\n+  else if (async == acc_async_sync)\n+    acc_wait_all ();\n+  else if (async == acc_async_noval)\n+    acc_dev->openacc.async_wait_all_async_func (acc_async_noval);\n }\n \n int"}]}