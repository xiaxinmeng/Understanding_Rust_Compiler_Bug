{"sha": "456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2ZDliMTc0ZDQ2ZjAzNGZhNGEwYWIyMWQ0NjcwZWJkYjdhYzI5Mg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-10-08T18:39:18Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-10-08T18:39:18Z"}, "message": "hyper.c: Remove file.\n\n\t* intrinsics/hyper.c: Remove file.\n\t* intrinsics/c99_functions.c: Add fallback functions asinhf,\n\tacoshf and atanhf.\n\t* Makefile.am: Remove file intrinsics/hyper.c.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r117560", "tree": {"sha": "8cd2f39c4b110855cbbed4135365949160a13206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd2f39c4b110855cbbed4135365949160a13206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ae47e29c7d0d80e5c83120167063eaafc10db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ae47e29c7d0d80e5c83120167063eaafc10db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ae47e29c7d0d80e5c83120167063eaafc10db9"}], "stats": {"total": 114, "additions": 40, "deletions": 74}, "files": [{"sha": "49990ab21154bb04fa59fe440f0198f870386066", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "patch": "@@ -1,3 +1,11 @@\n+2006-10-08  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* intrinsics/hyper.c: Remove file.\n+\t* intrinsics/c99_functions.c: Add fallback functions asinhf,\n+\tacoshf and atanhf.\n+\t* Makefile.am: Remove file intrinsics/hyper.c.\n+\t* Makefile.in: Regenerate.\n+\n 2006-10-08  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* c99_protos.h: Correctly protect definitions of prototypes for"}, {"sha": "21a7e603fbf0792ee28cb31c1b686d458f4c2f46", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "patch": "@@ -66,7 +66,6 @@ intrinsics/gerror.c \\\n intrinsics/getcwd.c \\\n intrinsics/getlog.c \\\n intrinsics/getXid.c \\\n-intrinsics/hyper.c \\\n intrinsics/hostnm.c \\\n intrinsics/kill.c \\\n intrinsics/ierrno.c \\"}, {"sha": "6b726fcc39bbcb44d4ff1b1a6e090b6d0335bb1d", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "patch": "@@ -167,14 +167,14 @@ am__objects_30 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n \tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n \tcshift0.lo ctime.lo date_and_time.lo env.lo erf.lo eoshift0.lo \\\n \teoshift2.lo etime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo \\\n-\tgerror.lo getcwd.lo getlog.lo getXid.lo hyper.lo hostnm.lo \\\n-\tkill.lo ierrno.lo ishftc.lo link.lo malloc.lo mvbits.lo \\\n-\tmove_alloc.lo pack_generic.lo perror.lo signal.lo size.lo \\\n-\tsleep.lo spread_generic.lo string_intrinsics.lo system.lo \\\n-\trand.lo random.lo rename.lo reshape_generic.lo \\\n-\treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n-\tstat.lo symlnk.lo system_clock.lo time.lo transpose_generic.lo \\\n-\ttty.lo umask.lo unlink.lo unpack_generic.lo in_pack_generic.lo \\\n+\tgerror.lo getcwd.lo getlog.lo getXid.lo hostnm.lo kill.lo \\\n+\tierrno.lo ishftc.lo link.lo malloc.lo mvbits.lo \\\n+\tpack_generic.lo perror.lo signal.lo size.lo sleep.lo \\\n+\tspread_generic.lo string_intrinsics.lo system.lo rand.lo \\\n+\trandom.lo rename.lo reshape_generic.lo reshape_packed.lo \\\n+\tselected_int_kind.lo selected_real_kind.lo stat.lo symlnk.lo \\\n+\tsystem_clock.lo time.lo transpose_generic.lo tty.lo umask.lo \\\n+\tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo\n am__objects_31 =\n am__objects_32 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n@@ -419,15 +419,13 @@ intrinsics/gerror.c \\\n intrinsics/getcwd.c \\\n intrinsics/getlog.c \\\n intrinsics/getXid.c \\\n-intrinsics/hyper.c \\\n intrinsics/hostnm.c \\\n intrinsics/kill.c \\\n intrinsics/ierrno.c \\\n intrinsics/ishftc.c \\\n intrinsics/link.c \\\n intrinsics/malloc.c \\\n intrinsics/mvbits.c \\\n-intrinsics/move_alloc.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n intrinsics/signal.c \\\n@@ -2386,9 +2384,6 @@ getlog.lo: intrinsics/getlog.c\n getXid.lo: intrinsics/getXid.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o getXid.lo `test -f 'intrinsics/getXid.c' || echo '$(srcdir)/'`intrinsics/getXid.c\n \n-hyper.lo: intrinsics/hyper.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hyper.lo `test -f 'intrinsics/hyper.c' || echo '$(srcdir)/'`intrinsics/hyper.c\n-\n hostnm.lo: intrinsics/hostnm.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hostnm.lo `test -f 'intrinsics/hostnm.c' || echo '$(srcdir)/'`intrinsics/hostnm.c\n \n@@ -2410,9 +2405,6 @@ malloc.lo: intrinsics/malloc.c\n mvbits.lo: intrinsics/mvbits.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mvbits.lo `test -f 'intrinsics/mvbits.c' || echo '$(srcdir)/'`intrinsics/mvbits.c\n \n-move_alloc.lo: intrinsics/move_alloc.c\n-\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o move_alloc.lo `test -f 'intrinsics/move_alloc.c' || echo '$(srcdir)/'`intrinsics/move_alloc.c\n-\n pack_generic.lo: intrinsics/pack_generic.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pack_generic.lo `test -f 'intrinsics/pack_generic.c' || echo '$(srcdir)/'`intrinsics/pack_generic.c\n "}, {"sha": "86867a20b9ff33a16d99b17eb776f1cc441997b5", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/456d9b174d46f034fa4a0ab21d4670ebdb7ac292/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=456d9b174d46f034fa4a0ab21d4670ebdb7ac292", "patch": "@@ -76,7 +76,6 @@ float complex clog10f(float complex);\n double complex clog10(double complex);\n long double complex clog10l(long double complex);\n \n-\n #ifndef HAVE_ACOSF\n #define HAVE_ACOSF 1\n float\n@@ -86,6 +85,14 @@ acosf(float x)\n }\n #endif\n \n+#if HAVE_ACOSH && !HAVE_ACOSHF\n+float\n+acoshf (float x)\n+{\n+  return (float) acosh ((double) x);\n+}\n+#endif\n+\n #ifndef HAVE_ASINF\n #define HAVE_ASINF 1\n float\n@@ -95,6 +102,14 @@ asinf(float x)\n }\n #endif\n \n+#if HAVE_ASINH && !HAVE_ASINHF\n+float\n+asinhf (float x)\n+{\n+  return (float) asinh ((double) x);\n+}\n+#endif\n+\n #ifndef HAVE_ATAN2F\n #define HAVE_ATAN2F 1\n float\n@@ -113,6 +128,14 @@ atanf(float x)\n }\n #endif\n \n+#if HAVE_ATANH && !HAVE_ATANHF\n+float\n+atanhf (float x)\n+{\n+  return (float) atanh ((double) x);\n+}\n+#endif\n+\n #ifndef HAVE_CEILF\n #define HAVE_CEILF 1\n float"}, {"sha": "ec7f27d3d018e2c64fef2581cbbf8465027342d8", "filename": "libgfortran/intrinsics/hyper.c", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ae47e29c7d0d80e5c83120167063eaafc10db9/libgfortran%2Fintrinsics%2Fhyper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ae47e29c7d0d80e5c83120167063eaafc10db9/libgfortran%2Fintrinsics%2Fhyper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fhyper.c?ref=22ae47e29c7d0d80e5c83120167063eaafc10db9", "patch": "@@ -1,56 +0,0 @@\n-/* Wrapper for systems without the C99 acosh(), asinh(), and atanh() functions\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n-\n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n-\n-Libgfortran is free software; you can redistribute it and/or\n-modify it under the terms of the GNU General Public\n-License as published by the Free Software Foundation; either\n-version 2 of the License, or (at your option) any later version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-Libgfortran is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public\n-License along with libgfortran; see the file COPYING.  If not,\n-write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-#include \"config.h\"\n-#include <math.h>\n-#include \"libgfortran.h\"\n-\n-#if HAVE_ACOSH && !HAVE_ACOSHF\n-float\n-acoshf (float x)\n-{\n-  return (float) acosh ((double) x);\n-}\n-#endif\n-\n-#if HAVE_ASINH && !HAVE_ASINHF\n-float\n-asinhf (float x)\n-{\n-  return (float) asinh ((double) x);\n-}\n-#endif\n-\n-#if HAVE_ATANH && !HAVE_ATANHF\n-float\n-atanhf (float x)\n-{\n-  return (float) atanh ((double) x);\n-}\n-#endif"}]}