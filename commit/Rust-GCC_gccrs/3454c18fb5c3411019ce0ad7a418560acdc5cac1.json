{"sha": "3454c18fb5c3411019ce0ad7a418560acdc5cac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1NGMxOGZiNWMzNDExMDE5Y2UwYWQ3YTQxODU2MGFjZGM1Y2FjMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-29T13:38:58Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-29T13:38:58Z"}, "message": "type_traits.h (__remove_unsigned): Fix up for signed char, bool, wchar_t, and floating point types.\n\n2006-09-29  Benjamin Kosnik  <bkoz@redhat.com>\n            Howard Hinnant  <hhinnant@apple.com>\n            Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/type_traits.h (__remove_unsigned): Fix up for signed\n\tchar, bool, wchar_t, and floating point types.\n\t(__add_unsigned): Same.\t\n\t* testsuite/ext/type_traits: New.\n\t* testsuite/ext/type_traits.cc: Move...\n\t* testsuite/ext/type_traits/numeric_traits.cc: ...here.\t\n\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: New.\n\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: New.\n\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: New.\n\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: New.\n\t* testsuite/ext/type_traits/add_unsigned.cc: New.\n\t* testsuite/ext/type_traits/remove_unsigned.cc: New.\n\t\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r117303", "tree": {"sha": "244e38f6261956ccf4a897d35f4cb4bfe4b924b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/244e38f6261956ccf4a897d35f4cb4bfe4b924b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3454c18fb5c3411019ce0ad7a418560acdc5cac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3454c18fb5c3411019ce0ad7a418560acdc5cac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3454c18fb5c3411019ce0ad7a418560acdc5cac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3454c18fb5c3411019ce0ad7a418560acdc5cac1/comments", "author": null, "committer": null, "parents": [{"sha": "4bd726d0bc325a1a52aeda349399f2bc0895a0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd726d0bc325a1a52aeda349399f2bc0895a0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd726d0bc325a1a52aeda349399f2bc0895a0c7"}], "stats": {"total": 331, "additions": 319, "deletions": 12}, "files": [{"sha": "9a5de15946d76e2d1536beb0917c515be2d0bfb2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -1,3 +1,20 @@\n+2006-09-29  Benjamin Kosnik  <bkoz@redhat.com>\n+            Howard Hinnant  <hhinnant@apple.com>\n+            Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/type_traits.h (__remove_unsigned): Fix up for signed\n+\tchar, bool, wchar_t, and floating point types.\n+\t(__add_unsigned): Same.\t\n+\t* testsuite/ext/type_traits: New.\n+\t* testsuite/ext/type_traits.cc: Move...\n+\t* testsuite/ext/type_traits/numeric_traits.cc: ...here.\t\n+\t* testsuite/ext/type_traits/add_unsigned_floating_neg.cc: New.\n+\t* testsuite/ext/type_traits/add_unsigned_integer_neg.cc: New.\n+\t* testsuite/ext/type_traits/remove_unsigned_floating_neg.cc: New.\n+\t* testsuite/ext/type_traits/remove_unsigned_integer_neg.cc: New.\n+\t* testsuite/ext/type_traits/add_unsigned.cc: New.\n+\t* testsuite/ext/type_traits/remove_unsigned.cc: New.\n+\t\n 2006-09-29  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* acinclude.m4 (enable_symvers): Default to no if unable to link."}, {"sha": "56aebebdf4eca17e447512b26ba6ec0a0816ae0d", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     struct __enable_if<true, _Tp>\n     { typedef _Tp __type; };\n \n-  // XXX What about std::tr1::true_type?\n+\n   // Conditional expression for types. If true, first, if false, second.\n   template<bool _Cond, typename _Iftrue, typename _Iffalse>\n     struct __conditional_type\n@@ -61,15 +61,25 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     { typedef _Iffalse __type; };\n \n \n-  // Given a builtin type, return the corresponding unsigned type.\n-  template<typename _Value>\n+  // Given an integral builtin type, return the corresponding unsigned type.\n+  template<typename _T>\n     struct __add_unsigned\n-    { typedef _Value __type; };\n+    { \n+    private:\n+      typedef __enable_if<std::__is_integer<_T>::__value, _T> __if_type;\n+      \n+    public:\n+      typedef typename __if_type::__type __type; \n+    };\n \n   template<>\n     struct __add_unsigned<char>\n     { typedef unsigned char __type; };\n \n+  template<>\n+    struct __add_unsigned<signed char>\n+    { typedef unsigned char __type; };\n+\n   template<>\n     struct __add_unsigned<short>\n     { typedef unsigned short __type; };\n@@ -82,20 +92,36 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     struct __add_unsigned<long>\n     { typedef unsigned long __type; };\n \n-#ifdef _GLIBCXX_USE_LONG_LONG\n   template<>\n     struct __add_unsigned<long long>\n     { typedef unsigned long long __type; };\n-#endif\n \n-  // Given an builtin type, return the corresponding signed type.\n-  template<typename _Value>\n+  // Declare but don't define.\n+  template<>\n+    struct __add_unsigned<bool>;\n+\n+  template<>\n+    struct __add_unsigned<wchar_t>;\n+\n+\n+  // Given an integral builtin type, return the corresponding signed type.\n+  template<typename _T>\n     struct __remove_unsigned\n-    { typedef _Value __type; };\n+    { \n+    private:\n+      typedef __enable_if<std::__is_integer<_T>::__value, _T> __if_type;\n+      \n+    public:\n+      typedef typename __if_type::__type __type; \n+    };\n+\n+  template<>\n+    struct __remove_unsigned<char>\n+    { typedef signed char __type; };\n \n   template<>\n     struct __remove_unsigned<unsigned char>\n-    { typedef char __type; };\n+    { typedef signed char __type; };\n \n   template<>\n     struct __remove_unsigned<unsigned short>\n@@ -109,11 +135,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     struct __remove_unsigned<unsigned long>\n     { typedef long __type; };\n \n-#ifdef _GLIBCXX_USE_LONG_LONG\n   template<>\n     struct __remove_unsigned<unsigned long long>\n     { typedef long long __type; };\n-#endif\n+\n+  // Declare but don't define.\n+  template<>\n+    struct __remove_unsigned<bool>;\n+\n+  template<>\n+    struct __remove_unsigned<wchar_t>;\n+\n \n   // Compile time constants for builtin types.\n   // Sadly std::numeric_limits member functions cannot be used for this."}, {"sha": "846bf09ee5581ce3fb301189d5bd77072c1600aa", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,49 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  check_add_unsigned()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    typedef typename __gnu_cxx::__add_unsigned<T>::__type unsigned_type;\n+    VERIFY( std::tr1::is_unsigned<unsigned_type>::value );\n+  }\n+\n+int main()\n+{\n+  check_add_unsigned<char>();\n+  check_add_unsigned<unsigned char>();\n+  check_add_unsigned<signed char>();\n+  check_add_unsigned<int>();\n+  check_add_unsigned<unsigned int>();\n+  check_add_unsigned<signed int>();\n+  check_add_unsigned<long>();\n+  check_add_unsigned<unsigned long>();\n+  check_add_unsigned<signed long>();\n+  check_add_unsigned<long long>();\n+  check_add_unsigned<unsigned long long>();\n+  check_add_unsigned<signed long long>();\n+  return 0;\n+}"}, {"sha": "e39f960ac331d657cbc9e1d9448ad5c4368244d6", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_floating_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_floating_neg.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+\n+template<typename T>\n+  void\n+  check_add_unsigned()\n+  {\n+    typedef typename __gnu_cxx::__add_unsigned<T>::__type unsigned_type;\n+  }\n+\n+int main()\n+{\n+  check_add_unsigned<float>();  // { dg-error \"instantiated from\" }\n+  return 0;\n+}\n+\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 29 } \n+// { dg-error \"no type\" \"\" { target *-*-* } 72 } \n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "0c55662bd4d08851ea23147e606887903a59530b", "filename": "libstdc++-v3/testsuite/ext/type_traits/add_unsigned_integer_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fadd_unsigned_integer_neg.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+\n+template<typename T>\n+  void\n+  check_add_unsigned()\n+  {\n+    typedef typename __gnu_cxx::__add_unsigned<T>::__type unsigned_type;\n+  }\n+\n+int main()\n+{\n+  check_add_unsigned<bool>();  // { dg-error \"instantiated from\" }\n+  check_add_unsigned<wchar_t>();  // { dg-error \"instantiated from\" }\n+  return 0;\n+}\n+\n+// { dg-error \"invalid use of incomplete\" \"\" { target *-*-* } 29 } \n+// { dg-error \"declaration of\" \"\" { target *-*-* } 67 } "}, {"sha": "ea58bb8afc70e253c9948af1d1c6b9a06be02768", "filename": "libstdc++-v3/testsuite/ext/type_traits/numeric_traits.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fnumeric_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fnumeric_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fnumeric_traits.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "previous_filename": "libstdc++-v3/testsuite/ext/type_traits.cc"}, {"sha": "2cad88afb9eb3050e5926fb3b0ea72bd5d84ba2e", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,49 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  check_remove_unsigned()\n+  {\n+    bool test __attribute__((unused)) = true;\n+    typedef typename __gnu_cxx::__remove_unsigned<T>::__type signed_type;\n+    VERIFY( std::tr1::is_signed<signed_type>::value );\n+  }\n+\n+int main()\n+{\n+  check_remove_unsigned<char>();\n+  check_remove_unsigned<unsigned char>();\n+  check_remove_unsigned<signed char>();\n+  check_remove_unsigned<int>();\n+  check_remove_unsigned<unsigned int>();\n+  check_remove_unsigned<signed int>();\n+  check_remove_unsigned<long>();\n+  check_remove_unsigned<unsigned long>();\n+  check_remove_unsigned<signed long>();\n+  check_remove_unsigned<long long>();\n+  check_remove_unsigned<unsigned long long>();\n+  check_remove_unsigned<signed long long>();\n+  return 0;\n+}"}, {"sha": "6f1b89a5230961b6002c0aa9e37c5c3e11a4faa1", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_floating_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_floating_neg.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+\n+template<typename T>\n+  void\n+  check_remove_unsigned()\n+  {\n+    typedef typename __gnu_cxx::__remove_unsigned<T>::__type signed_type;\n+  }\n+\n+int main()\n+{\n+  check_remove_unsigned<float>();  // { dg-error \"instantiated from\" }\n+  return 0;\n+}\n+\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 29 }\n+// { dg-error \"no type\" \"\" { target *-*-* } 115 }\n+// { dg-excess-errors \"In instantiation of\" }"}, {"sha": "826d2ec2f8745d62ad2554a3b1a3fed6dffd774a", "filename": "libstdc++-v3/testsuite/ext/type_traits/remove_unsigned_integer_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3454c18fb5c3411019ce0ad7a418560acdc5cac1/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Ftype_traits%2Fremove_unsigned_integer_neg.cc?ref=3454c18fb5c3411019ce0ad7a418560acdc5cac1", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ext/type_traits.h>\n+#include <tr1/type_traits>\n+\n+template<typename T>\n+  void\n+  check_remove_unsigned()\n+  {\n+    typedef typename __gnu_cxx::__remove_unsigned<T>::__type signed_type;\n+  }\n+\n+int main()\n+{\n+  check_remove_unsigned<bool>();  // { dg-error \"instantiated from\" }\n+  check_remove_unsigned<wchar_t>();  // { dg-error \"instantiated from\" }\n+  return 0;\n+}\n+\n+// { dg-error \"invalid use of incomplete\" \"\" { target *-*-* } 29 } \n+// { dg-error \"declaration of\" \"\" { target *-*-* } 110 } "}]}