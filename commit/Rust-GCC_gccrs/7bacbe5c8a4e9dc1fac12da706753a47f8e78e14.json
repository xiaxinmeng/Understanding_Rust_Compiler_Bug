{"sha": "7bacbe5c8a4e9dc1fac12da706753a47f8e78e14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhY2JlNWM4YTRlOWRjMWZhYzEyZGE3MDY3NTNhNDdmOGU3OGUxNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-04T04:32:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-04T04:32:07Z"}, "message": "compiler: expand arguments with multiple results for built-in functions.\n\nFixed https://code.google.com/p/go/issues/detail?id=5796. Official fixedbug will be added with change to gc.\n\nFrom-SVN: r202239", "tree": {"sha": "487d0fe7cb4c027c6d68284bde8fe22198fa4e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/487d0fe7cb4c027c6d68284bde8fe22198fa4e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14/comments", "author": null, "committer": null, "parents": [{"sha": "13ed1c03edbce472b634efd9a94824a8650a744e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ed1c03edbce472b634efd9a94824a8650a744e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ed1c03edbce472b634efd9a94824a8650a744e"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "0b01033422949a0e21420fba6dac680bdfa867f7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bacbe5c8a4e9dc1fac12da706753a47f8e78e14/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7bacbe5c8a4e9dc1fac12da706753a47f8e78e14", "patch": "@@ -9138,35 +9138,27 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n   // Because do_type will return an error type and thus prevent future\n   // errors, check for that case now to ensure that the error gets\n   // reported.\n-  if (this->get_function_type() == NULL)\n+  Function_type* fntype = this->get_function_type();\n+  if (fntype == NULL)\n     {\n       if (!this->fn_->type()->is_error())\n \tthis->report_error(_(\"expected function\"));\n       return Expression::make_error(loc);\n     }\n \n-  // Recognize a call to a builtin function.\n-  Func_expression* fne = this->fn_->func_expression();\n-  if (fne != NULL\n-      && fne->named_object()->is_function_declaration()\n-      && fne->named_object()->func_declaration_value()->type()->is_builtin())\n-    return new Builtin_call_expression(gogo, this->fn_, this->args_,\n-\t\t\t\t       this->is_varargs_, loc);\n-\n   // Handle an argument which is a call to a function which returns\n   // multiple results.\n   if (this->args_ != NULL\n       && this->args_->size() == 1\n-      && this->args_->front()->call_expression() != NULL\n-      && this->fn_->type()->function_type() != NULL)\n+      && this->args_->front()->call_expression() != NULL)\n     {\n-      Function_type* fntype = this->fn_->type()->function_type();\n       size_t rc = this->args_->front()->call_expression()->result_count();\n       if (rc > 1\n-\t  && fntype->parameters() != NULL\n-\t  && (fntype->parameters()->size() == rc\n-\t      || (fntype->is_varargs()\n-\t\t  && fntype->parameters()->size() - 1 <= rc)))\n+\t  && ((fntype->parameters() != NULL\n+               && (fntype->parameters()->size() == rc\n+                   || (fntype->is_varargs()\n+                       && fntype->parameters()->size() - 1 <= rc)))\n+              || fntype->is_builtin()))\n \t{\n \t  Call_expression* call = this->args_->front()->call_expression();\n \t  Expression_list* args = new Expression_list;\n@@ -9180,6 +9172,11 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n \t}\n     }\n \n+  // Recognize a call to a builtin function.\n+  if (fntype->is_builtin())\n+    return new Builtin_call_expression(gogo, this->fn_, this->args_,\n+\t\t\t\t       this->is_varargs_, loc);\n+\n   // If this call returns multiple results, create a temporary\n   // variable for each result.\n   size_t rc = this->result_count();\n@@ -9188,8 +9185,7 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n       std::vector<Temporary_statement*>* temps =\n \tnew std::vector<Temporary_statement*>;\n       temps->reserve(rc);\n-      const Typed_identifier_list* results =\n-\tthis->fn_->type()->function_type()->results();\n+      const Typed_identifier_list* results = fntype->results();\n       for (Typed_identifier_list::const_iterator p = results->begin();\n \t   p != results->end();\n \t   ++p)\n@@ -9204,10 +9200,8 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n \n   // Handle a call to a varargs function by packaging up the extra\n   // parameters.\n-  if (this->fn_->type()->function_type() != NULL\n-      && this->fn_->type()->function_type()->is_varargs())\n+  if (fntype->is_varargs())\n     {\n-      Function_type* fntype = this->fn_->type()->function_type();\n       const Typed_identifier_list* parameters = fntype->parameters();\n       go_assert(parameters != NULL && !parameters->empty());\n       Type* varargs_type = parameters->back().type();"}]}