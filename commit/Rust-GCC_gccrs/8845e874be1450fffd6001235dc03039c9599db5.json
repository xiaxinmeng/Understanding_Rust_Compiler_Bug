{"sha": "8845e874be1450fffd6001235dc03039c9599db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg0NWU4NzRiZTE0NTBmZmZkNjAwMTIzNWRjMDMwMzljOTU5OWRiNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-08-18T19:10:43Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-08-18T19:10:43Z"}, "message": "sh.md (fpu_switch0, [...]): Simplify.\n\n* config/sh/sh.md (fpu_switch0, fpu_switch1): Simplify.\n* config/sh/sh.c (fpscr_set_from_mem): Use them.\n\nFrom-SVN: r35792", "tree": {"sha": "79b5fd69dc7e93aa8817cbd7e08db822eff4d47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b5fd69dc7e93aa8817cbd7e08db822eff4d47b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8845e874be1450fffd6001235dc03039c9599db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8845e874be1450fffd6001235dc03039c9599db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8845e874be1450fffd6001235dc03039c9599db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8845e874be1450fffd6001235dc03039c9599db5/comments", "author": null, "committer": null, "parents": [{"sha": "a1c1fdd010f9cc7207d35b8c1726487f72b92558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c1fdd010f9cc7207d35b8c1726487f72b92558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c1fdd010f9cc7207d35b8c1726487f72b92558"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "0a5cb03e7b5e0699ec4af3a9fe2fe25448efabb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8845e874be1450fffd6001235dc03039c9599db5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8845e874be1450fffd6001235dc03039c9599db5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8845e874be1450fffd6001235dc03039c9599db5", "patch": "@@ -1,3 +1,8 @@\n+Fri Aug 18 16:01:18 2000  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (fpu_switch0, fpu_switch1): Simplify.\n+\t* config/sh/sh.c (fpscr_set_from_mem): Use them.\n+\n Fri Aug 18 14:23:18 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* regmove.c (perhaps_ends_bb_p): New function."}, {"sha": "3eeb183f84003b249af40d726f9f02d67ea50485", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8845e874be1450fffd6001235dc03039c9599db5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8845e874be1450fffd6001235dc03039c9599db5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8845e874be1450fffd6001235dc03039c9599db5", "patch": "@@ -5106,28 +5106,10 @@ fpscr_set_from_mem (mode, regs_live)\n      HARD_REG_SET regs_live;\n {\n   enum attr_fp_mode fp_mode = mode;\n-  rtx i;\n-  rtx sym;\n   rtx addr_reg = get_free_reg (regs_live);\n \n-  sym = gen_rtx_SYMBOL_REF (SImode, \"__fpscr_values\");\n-  i = gen_rtx_SET (VOIDmode, addr_reg, sym);\n-  emit_insn (i);\n-  if (fp_mode == (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE))\n-    {\n-      rtx r = addr_reg;\n-      addr_reg = get_free_reg (regs_live);\n-      i = gen_rtx_SET (VOIDmode, addr_reg,\n-\t\t       gen_rtx_PLUS (Pmode, r, GEN_INT (4)));\n-      emit_insn (i);\n-    }\n-  \n-  i = gen_rtx_SET (VOIDmode, \n- \t\t   get_fpscr_rtx (), \n-  \t\t   gen_rtx_MEM (PSImode, gen_rtx_POST_INC (Pmode, addr_reg)));\n-  i = emit_insn (i);\n-  REG_NOTES (i) = gen_rtx_EXPR_LIST (REG_DEAD, addr_reg, REG_NOTES (i));\n-  REG_NOTES (i) = gen_rtx_EXPR_LIST (REG_INC, addr_reg, REG_NOTES (i));\n+  emit_insn ((fp_mode == (TARGET_FPU_SINGLE ? FP_MODE_SINGLE : FP_MODE_DOUBLE)\n+\t      ? gen_fpu_switch1 : gen_fpu_switch0) (addr_reg));\n }\n \n /* Is the given character a logical line separator for the assembler?  */"}, {"sha": "87021144d323a04e371894fa1b7ecdd74e79c9bc", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8845e874be1450fffd6001235dc03039c9599db5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8845e874be1450fffd6001235dc03039c9599db5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=8845e874be1450fffd6001235dc03039c9599db5", "patch": "@@ -3884,27 +3884,25 @@\n ;; ??? All patterns should have a type attribute.\n \n (define_expand \"fpu_switch0\"\n-  [(set (match_operand:SI 0 \"\" \"\") (symbol_ref \"__fpscr_values\"))\n-   (set (match_dup 2) (match_dup 1))]\n+  [(set (match_operand:SI 0 \"\" \"\") (match_dup 2))\n+   (set (match_dup 1) (mem:PSI (match_dup 0)))]\n   \"\"\n   \"\n {\n-  operands[1] = gen_rtx (MEM, PSImode, operands[0]);\n-  RTX_UNCHANGING_P (operands[1]) = 1;\n-  operands[2] = get_fpscr_rtx ();\n+  operands[1] = get_fpscr_rtx ();\n+  operands[2] = gen_rtx_SYMBOL_REF (SImode, \\\"__fpscr_values\\\");\n }\")\n \n (define_expand \"fpu_switch1\"\n-  [(set (match_operand:SI 0 \"\" \"\") (symbol_ref \"__fpscr_values\"))\n-   (set (match_dup 1) (plus:SI (match_dup 0) (const_int 4)))\n-   (set (match_dup 3) (match_dup 2))]\n+  [(set (match_operand:SI 0 \"\" \"\") (match_dup 2))\n+   (set (match_dup 3) (plus:SI (match_dup 0) (const_int 4)))\n+   (set (match_dup 1) (mem:PSI (match_dup 3)))]\n   \"\"\n   \"\n {\n-  operands[1] = gen_reg_rtx (SImode);\n-  operands[2] = gen_rtx (MEM, PSImode, operands[1]);\n-  RTX_UNCHANGING_P (operands[2]) = 1;\n-  operands[3] = get_fpscr_rtx ();\n+  operands[1] = get_fpscr_rtx ();\n+  operands[2] = gen_rtx_SYMBOL_REF (SImode, \\\"__fpscr_values\\\");\n+  operands[3] = no_new_pseudos ? operands[0] : gen_reg_rtx (SImode);\n }\")\n \n (define_expand \"movpsi\""}]}