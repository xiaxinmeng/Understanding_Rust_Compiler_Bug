{"sha": "1d2d8a8f5a35b317abe53360082e275e44d3947b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQyZDhhOGY1YTM1YjMxN2FiZTUzMzYwMDgyZTI3NWU0NGQzOTQ3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:48:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:48:48Z"}, "message": "[multiple changes]\n\n2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Compatible_Types_In_Predicate): New function\n\tto handle cases where a formal of a predicate function and the\n\tcorresponding actual have different views of the same type.\n\n2016-07-04  Philippe Gil  <gil@adacore.com>\n\n\t* g-debpoo.adb (Free_Blocks) free blocks also until\n\tLogically_Deallocated less than Maximum_Logically_Freed_Memory\n\t(Dump) add dump of number of traceback & validity elements\n\talready allocated.\n\n2016-07-04  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch12.adb (Instantiate_Package_Body): Add\n\ta guard to ignore Itypes which fail when installing primitives.\n\nFrom-SVN: r237973", "tree": {"sha": "e812936d2406313b9dc6dbc4e53acba719c3368e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e812936d2406313b9dc6dbc4e53acba719c3368e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d2d8a8f5a35b317abe53360082e275e44d3947b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2d8a8f5a35b317abe53360082e275e44d3947b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2d8a8f5a35b317abe53360082e275e44d3947b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2d8a8f5a35b317abe53360082e275e44d3947b/comments", "author": null, "committer": null, "parents": [{"sha": "e49de265efb67ef2e21cb5ca623b5de264a492b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49de265efb67ef2e21cb5ca623b5de264a492b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49de265efb67ef2e21cb5ca623b5de264a492b7"}], "stats": {"total": 139, "additions": 112, "deletions": 27}, "files": [{"sha": "2e6926d006ad52c8a52ea5d6eefa84f710747a6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d2d8a8f5a35b317abe53360082e275e44d3947b", "patch": "@@ -1,3 +1,21 @@\n+2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Compatible_Types_In_Predicate): New function\n+\tto handle cases where a formal of a predicate function and the\n+\tcorresponding actual have different views of the same type.\n+\n+2016-07-04  Philippe Gil  <gil@adacore.com>\n+\n+\t* g-debpoo.adb (Free_Blocks) free blocks also until\n+\tLogically_Deallocated less than Maximum_Logically_Freed_Memory\n+\t(Dump) add dump of number of traceback & validity elements\n+\talready allocated.\n+\n+2016-07-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Add\n+\ta guard to ignore Itypes which fail when installing primitives.\n+\n 2016-07-04  Bob Duff  <duff@adacore.com>\n \n \t* sem_eval.adb (Decompose_Expr): Set 'out' parameters"}, {"sha": "f7d3c2df70eca879ca00a9c41cde0ba511cd7ced", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=1d2d8a8f5a35b317abe53360082e275e44d3947b", "patch": "@@ -101,6 +101,9 @@ package body GNAT.Debug_Pools is\n    --  If True, protects Deallocate against releasing memory allocated before\n    --  System_Memory_Debug_Pool_Enabled was set.\n \n+   Traceback_Count : Byte_Count := 0;\n+   --  Total number of traceback elements\n+\n    ---------------------------\n    -- Back Trace Hash Table --\n    ---------------------------\n@@ -332,6 +335,10 @@ package body GNAT.Debug_Pools is\n       pragma Inline (Set_Valid);\n       --  Mark the address Storage as being under control of the memory pool\n       --  (if Value is True), or not (if Value is False).\n+\n+      Validity_Count : Byte_Count := 0;\n+      --  Total number of validity elements\n+\n    end Validity;\n \n    use Validity;\n@@ -630,6 +637,7 @@ package body GNAT.Debug_Pools is\n                      Frees       => 0,\n                      Total_Frees => 0,\n                      Next        => null);\n+            Traceback_Count := Traceback_Count + 1;\n             Backtrace_Htable.Set (Elem);\n \n          else\n@@ -845,6 +853,7 @@ package body GNAT.Debug_Pools is\n \n             if Value then\n                Ptr := new Validity_Bits;\n+               Validity_Count := Validity_Count + 1;\n                Ptr.Valid :=\n                  To_Pointer (Alloc (size_t (Max_Validity_Byte_Index)));\n                Validy_Htable.Set (Block_Number, Ptr);\n@@ -1180,20 +1189,23 @@ package body GNAT.Debug_Pools is\n \n       begin\n          while Tmp /= System.Null_Address\n-           and then Total_Freed < Pool.Minimum_To_Free\n+           and then\n+             not (Total_Freed > Pool.Minimum_To_Free\n+                   and Pool.Logically_Deallocated <\n+                         Byte_Count (Pool.Maximum_Logically_Freed_Memory))\n          loop\n             Header := Header_Of (Tmp);\n \n             --  If we know, or at least assume, the block is no longer\n             --  referenced anywhere, we can free it physically.\n \n             if Ignore_Marks or else not Marked (Tmp) then\n-\n                declare\n                   pragma Suppress (All_Checks);\n                   --  Suppress the checks on this section. If they are overflow\n                   --  errors, it isn't critical, and we'd rather avoid a\n                   --  Constraint_Error in that case.\n+\n                begin\n                   --  Note that block_size < zero for freed blocks\n \n@@ -1238,7 +1250,7 @@ package body GNAT.Debug_Pools is\n                   Header_Of (Previous).Next := Next;\n                end if;\n \n-               Tmp  := Next;\n+               Tmp := Next;\n \n             else\n                Previous := Tmp;\n@@ -2018,6 +2030,9 @@ package body GNAT.Debug_Pools is\n       end Do_Report;\n \n    begin\n+      Put_Line (\"Traceback elements allocated: \" & Traceback_Count'Img);\n+      Put_Line (\"Validity elements allocated: \" & Validity_Count'Img);\n+      Put_Line (\"\");\n \n       Put_Line (\"Ada Allocs:\" & Pool.Allocated'Img\n                 & \" bytes in\" & Pool.Alloc_Count'Img & \" chunks\");"}, {"sha": "f21ebc52ba06641f8b95dd57a6481432442afe21", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1d2d8a8f5a35b317abe53360082e275e44d3947b", "patch": "@@ -10932,6 +10932,7 @@ package body Sem_Ch12 is\n             E := First_Entity (Act_Decl_Id);\n             while Present (E) loop\n                if Is_Type (E)\n+                 and then not Is_Itype (E)\n                  and then Is_Generic_Actual_Type (E)\n                  and then Is_Tagged_Type (E)\n                then\n@@ -12855,10 +12856,11 @@ package body Sem_Ch12 is\n       --  or in the declaration of the main unit, which in this last case must\n       --  be a body.\n \n-      return Current_Unit = Cunit (Main_Unit)\n-        or else Current_Unit = Library_Unit (Cunit (Main_Unit))\n-        or else (Present (Library_Unit (Current_Unit))\n-                  and then Is_In_Main_Unit (Library_Unit (Current_Unit)));\n+      return\n+        Current_Unit = Cunit (Main_Unit)\n+          or else Current_Unit = Library_Unit (Cunit (Main_Unit))\n+          or else (Present (Library_Unit (Current_Unit))\n+                    and then Is_In_Main_Unit (Library_Unit (Current_Unit)));\n    end Is_In_Main_Unit;\n \n    ----------------------------"}, {"sha": "17c6308f8ff7487b956c01a1b2633b83a1bf08be", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2d8a8f5a35b317abe53360082e275e44d3947b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=1d2d8a8f5a35b317abe53360082e275e44d3947b", "patch": "@@ -3087,6 +3087,21 @@ package body Sem_Ch4 is\n       Subp_Type   : constant Entity_Id := Etype (Nam);\n       Norm_OK     : Boolean;\n \n+      function Compatible_Types_In_Predicate\n+        (T1 : Entity_Id;\n+         T2 : Entity_Id) return Boolean;\n+      --  For an Ada 2012 predicate or invariant, a call may mention an\n+      --  incomplete type, while resolution of the corresponding predicate\n+      --  function may see the full view, as a consequence of the delayed\n+      --  resolution of the corresponding expressions. This may occur in\n+      --  the body of a predicate function, or in a call to such. Anomalies\n+      --  involving private and full views can also happen. In each case,\n+      --  rewrite node or add conversions to remove spurious type errors.\n+\n+      procedure Indicate_Name_And_Type;\n+      --  If candidate interpretation matches, indicate name and type of result\n+      --  on call node.\n+\n       function Operator_Hidden_By (Fun : Entity_Id) return Boolean;\n       --  There may be a user-defined operator that hides the current\n       --  interpretation. We must check for this independently of the\n@@ -3100,9 +3115,59 @@ package body Sem_Ch4 is\n       --  Finally, The abstract operations on address do not hide the\n       --  predefined operator (this is the purpose of making them abstract).\n \n-      procedure Indicate_Name_And_Type;\n-      --  If candidate interpretation matches, indicate name and type of\n-      --  result on call node.\n+      -----------------------------------\n+      -- Compatible_Types_In_Predicate --\n+      -----------------------------------\n+\n+      function Compatible_Types_In_Predicate\n+        (T1 : Entity_Id;\n+         T2 : Entity_Id) return Boolean\n+      is\n+         function Common_Type (T : Entity_Id) return Entity_Id;\n+         --  Find non-private full view if any, without going to ancestor type\n+         --  (as opposed to Underlying_Type).\n+\n+         -----------------\n+         -- Common_Type --\n+         -----------------\n+\n+         function Common_Type (T : Entity_Id) return Entity_Id is\n+         begin\n+            if Is_Private_Type (T) and then Present (Full_View (T)) then\n+               return Base_Type (Full_View (T));\n+            else\n+               return Base_Type (T);\n+            end if;\n+         end Common_Type;\n+\n+      --  Start of processing for Compatible_Types_In_Predicate\n+\n+      begin\n+         if (Ekind (Current_Scope) = E_Function\n+              and then Is_Predicate_Function (Current_Scope))\n+           or else\n+            (Ekind (Nam) = E_Function\n+              and then Is_Predicate_Function (Nam))\n+         then\n+            if Is_Incomplete_Type (T1)\n+              and then Present (Full_View (T1))\n+              and then Full_View (T1) = T2\n+            then\n+               Set_Etype (Formal, Etype (Actual));\n+               return True;\n+\n+            elsif Common_Type (T1) = Common_Type (T2) then\n+               Rewrite (Actual, Unchecked_Convert_To (Etype (Formal), Actual));\n+               return True;\n+\n+            else\n+               return False;\n+            end if;\n+\n+         else\n+            return False;\n+         end if;\n+      end Compatible_Types_In_Predicate;\n \n       ----------------------------\n       -- Indicate_Name_And_Type --\n@@ -3409,24 +3474,9 @@ package body Sem_Ch4 is\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n-               --  For an Ada 2012 predicate or invariant, a call may mention\n-               --  an incomplete type, while resolution of the corresponding\n-               --  predicate function may see the full view, as a consequence\n-               --  of the delayed resolution of the corresponding expressions.\n-               --  This can occur in the body of a predicate function, or in\n-               --  a call to such.\n-\n-               elsif ((Ekind (Current_Scope) = E_Function\n-                       and then Is_Predicate_Function (Current_Scope))\n-                   or else\n-                     (Ekind (Nam) = E_Function\n-                       and then Is_Predicate_Function (Nam)))\n-                 and then\n-                   (Base_Type (Underlying_Type (Etype (Formal))) =\n-                    Base_Type (Underlying_Type (Etype (Actual))))\n-                 and then Serious_Errors_Detected = 0\n+               elsif Compatible_Types_In_Predicate\n+                       (Etype (Formal), Etype (Actual))\n                then\n-                  Set_Etype (Formal, Etype (Actual));\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n "}]}