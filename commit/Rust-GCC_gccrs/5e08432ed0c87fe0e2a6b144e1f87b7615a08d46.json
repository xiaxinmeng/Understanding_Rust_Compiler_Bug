{"sha": "5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwODQzMmVkMGM4N2ZlMGUyYTZiMTQ0ZTFmODdiNzYxNWEwOGQ0Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-14T19:05:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-14T19:05:05Z"}, "message": "re PR c++/7019 ([3.3 only] SFINAE does not work with explicitally specified template arguments)\n\n\tPR c++/7019\n\t* cp-tree.h (lookup_qualified_name): Adjust prototype.\n\t* decl.c (lookup_qualified_name): Add complain parameter.  Adjust\n\tcall to is_aggr_type.\n\t* parser.c (cp_parser_lookup_name): Adjust call to\n\tlookup_qualified_name.\n\t* pt.c (tsubst_qualified_id): Likewise.\n\t(tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_qualified_id_expr): Deal with erroneous\n\texpressions.\n\n\tPR c++/7019\n\t* g++.dg/template/overload2.C: New test.\n\nFrom-SVN: r69342", "tree": {"sha": "cf301c886bb9f86fa5fd71ba555a1ae37357e0b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf301c886bb9f86fa5fd71ba555a1ae37357e0b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/comments", "author": null, "committer": null, "parents": [{"sha": "bda243ec50619e4b80e35a8c77a9ebc44647ca38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda243ec50619e4b80e35a8c77a9ebc44647ca38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda243ec50619e4b80e35a8c77a9ebc44647ca38"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "e84ea849f81b980295ec079ddf2b2e8482092860", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -1,3 +1,16 @@\n+2003-07-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7019\n+\t* cp-tree.h (lookup_qualified_name): Adjust prototype.\n+\t* decl.c (lookup_qualified_name): Add complain parameter.  Adjust\n+\tcall to is_aggr_type.\n+\t* parser.c (cp_parser_lookup_name): Adjust call to\n+\tlookup_qualified_name.\n+\t* pt.c (tsubst_qualified_id): Likewise.\n+\t(tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_qualified_id_expr): Deal with erroneous\n+\texpressions.\n+\n 2003-07-14  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \tPR c++/11510"}, {"sha": "acc4528f9efe7920efcd9ffb47f5d7cd9b241041", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -3679,7 +3679,7 @@ extern tree make_typename_type\t\t\t(tree, tree, tsubst_flags_t);\n extern tree make_unbound_class_template\t\t(tree, tree, tsubst_flags_t);\n extern tree lookup_name_nonclass\t\t(tree);\n extern tree lookup_function_nonclass            (tree, tree);\n-extern tree lookup_qualified_name               (tree, tree, bool);\n+extern tree lookup_qualified_name               (tree, tree, bool, bool);\n extern tree lookup_name\t\t\t\t(tree, int);\n extern tree lookup_name_current_level\t\t(tree);\n extern tree lookup_type_current_level\t\t(tree);"}, {"sha": "2daaee60c0e2b9c5efcddd5086e122e5be670375", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -5761,10 +5761,12 @@ qualify_lookup (tree val, int flags)\n    bindings.  \n \n    Returns a DECL (or OVERLOAD, or BASELINK) representing the\n-   declaration found.  */\n+   declaration found.  If no suitable declaration can be found,\n+   ERROR_MARK_NODE is returned.  Iif COMPLAIN is true and SCOPE is\n+   neither a class-type nor a namespace a diagnostic is issued.  */\n \n tree\n-lookup_qualified_name (tree scope, tree name, bool is_type_p)\n+lookup_qualified_name (tree scope, tree name, bool is_type_p, bool complain)\n {\n   int flags = 0;\n \n@@ -5776,15 +5778,19 @@ lookup_qualified_name (tree scope, tree name, bool is_type_p)\n       flags |= LOOKUP_COMPLAIN;\n       if (is_type_p)\n \tflags |= LOOKUP_PREFER_TYPES;\n-      if (!qualified_lookup_using_namespace (name, scope, &binding, \n-\t\t\t\t\t     flags))\n-\treturn NULL_TREE;\n-      return select_decl (&binding, flags);\n+      if (qualified_lookup_using_namespace (name, scope, &binding, \n+\t\t\t\t\t    flags))\n+\treturn select_decl (&binding, flags);\n     }\n-  else if (is_aggr_type (scope, /*or_else=*/1))\n-    return lookup_member (scope, name, 0, is_type_p);\n-  else\n-    return error_mark_node;\n+  else if (is_aggr_type (scope, complain))\n+    {\n+      tree t;\n+      t = lookup_member (scope, name, 0, is_type_p);\n+      if (t)\n+\treturn t;\n+    }\n+\n+  return error_mark_node;\n }\n \n /* Check to see whether or not DECL is a variable that would have been"}, {"sha": "bfce0ca8d34877096979cc5f40eb2d0564853043", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -12825,7 +12825,8 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \t     may be instantiated during name lookup.  In that case,\n \t     errors may be issued.  Even if we rollback the current\n \t     tentative parse, those errors are valid.  */\n-\t  decl = lookup_qualified_name (parser->scope, name, is_type);\n+\t  decl = lookup_qualified_name (parser->scope, name, is_type,\n+\t\t\t\t\t/*complain=*/true);\n \t  if (dependent_p)\n \t    pop_scope (parser->scope);\n \t}"}, {"sha": "1f7822ca72b1dcea9ee7aae9202bcefb22da0ea6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -7149,9 +7149,9 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     }\n   else\n     expr = name;\n-  if (!BASELINK_P (name)\n-      && !DECL_P (expr))\n-    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0);\n+  if (!BASELINK_P (name) && !DECL_P (expr))\n+    expr = lookup_qualified_name (scope, expr, /*is_type_p=*/0,\n+\t\t\t\t  (complain & tf_error) != 0);\n   if (DECL_P (expr))\n     check_accessibility_of_qualified_id (expr, \n \t\t\t\t\t /*object_type=*/NULL_TREE,\n@@ -7611,7 +7611,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    scope = tsubst_expr (scope, args, complain, in_decl);\n \t    do_local_using_decl (lookup_qualified_name (scope,\n \t\t\t\t\t\t\tname, \n-\t\t\t\t\t\t\t/*is_type_p=*/0));\n+\t\t\t\t\t\t\t/*is_type_p=*/0,\n+\t\t\t\t\t\t\t/*complain=*/true));\n \t  }\n \telse\n \t  {\n@@ -8285,7 +8286,8 @@ tsubst_copy_and_build (tree t,\n \t    args = TREE_OPERAND (TREE_OPERAND (member, 1), 1);\n \t    member = lookup_qualified_name (TREE_OPERAND (member, 0),\n \t\t\t\t\t    tmpl, \n-\t\t\t\t\t    /*is_type=*/0);\n+\t\t\t\t\t    /*is_type=*/0,\n+\t\t\t\t\t    /*complain=*/true);\n \t    if (BASELINK_P (member))\n \t      BASELINK_FUNCTIONS (member) \n \t\t= build_nt (TEMPLATE_ID_EXPR, BASELINK_FUNCTIONS (member),"}, {"sha": "9a9ae20e1bec756c8271da37218598f18b1aa6c4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -1343,6 +1343,9 @@ tree\n finish_qualified_id_expr (tree qualifying_class, tree expr, bool done,\n \t\t\t  bool address_p)\n {\n+  if (error_operand_p (expr))\n+    return error_mark_node;\n+\n   /* If EXPR occurs as the operand of '&', use special handling that\n      permits a pointer-to-member.  */\n   if (address_p && done)"}, {"sha": "9a4b06245eb284a25e611e55e0a8c6d788d4f3f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -1,3 +1,8 @@\n+2003-07-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7019\n+\t* g++.dg/template/overload2.C: New test.\n+\n 2003-07-14  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \tPR optimization/11440"}, {"sha": "253d055cdf674c2d98ebc3867682557dc0d56f75", "filename": "gcc/testsuite/g++.dg/template/overload2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e08432ed0c87fe0e2a6b144e1f87b7615a08d46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload2.C?ref=5e08432ed0c87fe0e2a6b144e1f87b7615a08d46", "patch": "@@ -0,0 +1,15 @@\n+template <class T, int (T::*)> struct foo;\n+\n+template <class T>\n+int f(foo<T,&T::ob_type>*);\n+\n+template <class T>\n+char* f(...);\n+\n+struct X { int ob_type; };\n+struct Y { char* ob_type; };\n+  int x = f<X>(0);\n+char* y = f<Y>(0);\n+char* z = f<int>(0);\n+\n+int main() { return 0; }"}]}