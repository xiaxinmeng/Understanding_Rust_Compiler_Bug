{"sha": "761f08559a620527018829cc343b9648d4b001a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxZjA4NTU5YTYyMDUyNzAxODgyOWNjMzQzYjk2NDhkNGIwMDFhOA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-10-31T08:43:17Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-10-31T08:43:17Z"}, "message": "memtemp77.C (main): Adjust comparison against.\n\ntestsuite/\n\t* g++.old-deja/g++.pt/memtemp77.C (main): Adjust comparison against.\n\t__PRETTY_FUNCTION__\n\ncp/\n\t* error.c: Move TFF_ macros into cp-tree.h.  Throughout, replace\n\tTS_* flags with corresponding TFF_*.  Adjust prototypes of\n\tfunctions (which used to take a tree_string_flags) to take an int.\n\n\t* cp-tree.h (enum tree_string_flags): Remove\n\t(TFF_PLAIN_IDENTIFIER, TFF_NAMESPACE_SCOPE, TFF_CLASS_SCOPE,\n\tTFF_CHASE_NAMESPACE_ALIAS, TFF_CHASE_TYPEDEF, TFF_DECL_SPECIFIERS,\n\tTFF_CLASS_KEY_OR_ENUM, TFF_RETURN_TYPE,\n\tTFF_FUNCTION_DEFAULT_ARGUMENTS, TFF_EXCEPTION_SPECIFICATION,\n\tTFF_TEMPLATE_HEADER, TFF_TEMPLATE_DEFAULT_ARGUMENTS,\n\tTFF_TEMPLATE_NAME, TFF_EXPR_IN_PARENS, TFF_SCOPE): New macros.\n\t(type_as_string, decl_as_string, expr_as_string,\n\tcontext_as_string): Adjust prototype.\n\n\t* class.c (dump_class_hierarchy_r): Use TFF_PLAIN_IDENTIFIER\n\tinstead of TS_PLAIN.\n\n\t* pt.c (mangle_class_name_for_template): Use TFF_CHASE_TYPEDEF\n\tinstead of TF_CHASE_TYPEDEFS. Use TFF_PLAIN_IDENTIFIER instead of\n\tplain `0'.\n\nFrom-SVN: r37152", "tree": {"sha": "b5b53201317520a4ada947507a23e9c66faaf4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b53201317520a4ada947507a23e9c66faaf4ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761f08559a620527018829cc343b9648d4b001a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761f08559a620527018829cc343b9648d4b001a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761f08559a620527018829cc343b9648d4b001a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761f08559a620527018829cc343b9648d4b001a8/comments", "author": null, "committer": null, "parents": [{"sha": "34791641f6a087aced2f3b2100f6e3347fac2c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34791641f6a087aced2f3b2100f6e3347fac2c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34791641f6a087aced2f3b2100f6e3347fac2c6e"}], "stats": {"total": 474, "additions": 237, "deletions": 237}, "files": [{"sha": "5a256c66a7a838b5ac839613c023822edf47d65f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -1,3 +1,26 @@\n+2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* error.c: Move TFF_ macros into cp-tree.h.  Throughout, replace\n+\tTS_* flags with corresponding TFF_*.  Adjust prototypes of\n+\tfunctions (which used to take a tree_string_flags) to take an int.\n+\n+\t* cp-tree.h (enum tree_string_flags): Remove\n+\t(TFF_PLAIN_IDENTIFIER, TFF_NAMESPACE_SCOPE, TFF_CLASS_SCOPE,\n+\tTFF_CHASE_NAMESPACE_ALIAS, TFF_CHASE_TYPEDEF, TFF_DECL_SPECIFIERS,\n+\tTFF_CLASS_KEY_OR_ENUM, TFF_RETURN_TYPE,\n+\tTFF_FUNCTION_DEFAULT_ARGUMENTS, TFF_EXCEPTION_SPECIFICATION,\n+\tTFF_TEMPLATE_HEADER, TFF_TEMPLATE_DEFAULT_ARGUMENTS,\n+\tTFF_TEMPLATE_NAME, TFF_EXPR_IN_PARENS, TFF_SCOPE): New macros.\n+\t(type_as_string, decl_as_string, expr_as_string,\n+\tcontext_as_string): Adjust prototype.\n+\n+\t* class.c (dump_class_hierarchy_r): Use TFF_PLAIN_IDENTIFIER\n+\tinstead of TS_PLAIN.\n+\n+\t* pt.c (mangle_class_name_for_template): Use TFF_CHASE_TYPEDEF\n+\tinstead of TF_CHASE_TYPEDEFS. Use TFF_PLAIN_IDENTIFIER instead of\n+\tplain `0'.\n+\n 2000-10-30  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DECL_EXTERNAL_LINKAGE_P): New macro."}, {"sha": "8ddc4749d832f37c0bbe4ff4aaad5aa582ed5956", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -6665,7 +6665,7 @@ dump_class_hierarchy_r (t, binfo, indent)\n \n   fprintf (stderr, \"%*s0x%lx (%s) \", indent, \"\",\n \t   (unsigned long) binfo,\n-\t   type_as_string (binfo, TS_PLAIN));\n+\t   type_as_string (binfo, TFF_PLAIN_IDENTIFIER));\n   fprintf (stderr, HOST_WIDE_INT_PRINT_DEC,\n \t   tree_low_cst (BINFO_OFFSET (binfo), 0));\n   if (TREE_VIA_VIRTUAL (binfo))"}, {"sha": "e7045e5f65ca11ee6c4a772f39a5965e6f7ac848", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -3674,29 +3674,42 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define TEMPLATE_TYPE_DECL(NODE) \\\n   (TEMPLATE_PARM_DECL (TEMPLATE_TYPE_PARM_INDEX (NODE)))\n \n-/* Control stringification of trees (types, decls & exprs).\n-   Bit or them together.  */\n-enum tree_string_flags\n-{\n-    TS_PLAIN,                    /* nothing special */\n-    TS_CHASE_TYPEDEFS = 1 <<  0, /* look through typedefs */\n-    TS_DECORATE       = 1 <<  1, /* decorate things */\n-    TS_FUNC_NORETURN  = 1 <<  2, /* inhibit function return type */\n-    TS_FUNC_THROW     = 1 <<  3, /* show throw spec */\n-    TS_PARM_DEFAULTS  = 1 <<  4, /* show parm defaults */\n-    TS_EXPR_PARENS    = 1 <<  5, /* enclose in parens */\n-    TS_AGGR_TAGS      = 1 <<  6, /* show struct tags */\n-    TS_DECL_TYPE      = 1 <<  7, /* show decl's type */\n-    TS_FUNC_SCOPE     = 1 <<  8, /* show function scope */\n-    TS_PEDANTIC_NAME  = 1 <<  9, /* pedantically name things */\n-    TS_TEMPLATE_PREFIX= 1 << 10, /* show template <parms> prefix */\n-\n-    /* Internal use flags */\n-    TS_TEMPLATE_PARM  = 1 << 11, /* decl is really a non-type template parm */\n-    TS_TEMPLATE_PLAIN = 1 << 12, /* don't decorate primary template_name */\n-\n-    TS_NEXT_BIT       = 13       /* next available bit */\n-};\n+/* These constants can used as bit flags in the process of tree formatting.\n+\n+   TFF_PLAIN_IDENTIFIER: unqualified part of a name.\n+   TFF_NAMESPACE_SCOPE: the complete qualified-id form of a name.\n+   TFF_CLASS_SCOPE: if possible, include the class-name part of a\n+        qualified-id.  This flag may be implied in some circumstances by\n+        TFF_NAMESPACE_SCOPE.\n+   TFF_SCOPE: the combinaison of the two above.\n+   TFF_CHASE_TYPEDEF: print the original type-id instead of the typedef-name.\n+   TFF_DECL_SPECIFIERS: print decl-specifiers.\n+   TFF_CLASS_KEY_OR_ENUM: precede a class-type name (resp. enum name) with\n+       a class-key (resp. `enum').\n+   TFF_RETURN_TYPE: include function return type.\n+   TFF_FUNCTION_DEFAULT_ARGUMENTS: include function default parameter values.\n+   TFF_EXCEPTION_SPECIFICATION: show function exception specification.\n+   TFF_TEMPLATE_HEADER: show the template<...> hearder in a\n+       template-declaration.\n+   TFF_TEMPLATE_DEFAULT_ARGUMENTS: show template paramter default values.\n+   TFF_TEMPLATE_NAME: show only template-name.\n+   TFF_EXPR_IN_PARENS: Parenthesize expressions.  */\n+\n+#define TFF_PLAIN_IDENTIFIER               (0)\n+#define TFF_NAMESPACE_SCOPE                (1)\n+#define TFF_CLASS_SCOPE                    (1 << 1)\n+#define TFF_CHASE_NAMESPACE_ALIAS          (1 << 2)\n+#define TFF_CHASE_TYPEDEF                  (1 << 3)\n+#define TFF_DECL_SPECIFIERS                (1 << 4)\n+#define TFF_CLASS_KEY_OR_ENUM              (1 << 5)\n+#define TFF_RETURN_TYPE                    (1 << 6)\n+#define TFF_FUNCTION_DEFAULT_ARGUMENTS     (1 << 7)\n+#define TFF_EXCEPTION_SPECIFICATION        (1 << 8)\n+#define TFF_TEMPLATE_HEADER                (1 << 9)\n+#define TFF_TEMPLATE_DEFAULT_ARGUMENTS     (1 << 10)\n+#define TFF_TEMPLATE_NAME                  (1 << 11)\n+#define TFF_EXPR_IN_PARENS                 (1 << 12)\n+#define TFF_SCOPE (TFF_NAMESPACE_SCOPE | TFF_CLASS_SCOPE)\n \n /* Returns the TEMPLATE_DECL associated to a TEMPLATE_TEMPLATE_PARM\n    node.  */\n@@ -4032,10 +4045,10 @@ extern void cp_deprecated                       PARAMS ((const char*));\n \n /* in error.c */\n extern void init_error\t\t\t\tPARAMS ((void));\n-extern const char *type_as_string\t\tPARAMS ((tree, enum tree_string_flags));\n-extern const char *decl_as_string\t\tPARAMS ((tree, enum tree_string_flags));\n-extern const char *expr_as_string\t\tPARAMS ((tree, enum tree_string_flags));\n-extern const char *context_as_string            PARAMS ((tree, enum tree_string_flags));\n+extern const char *type_as_string\t\tPARAMS ((tree, int));\n+extern const char *decl_as_string\t\tPARAMS ((tree, int));\n+extern const char *expr_as_string\t\tPARAMS ((tree, int));\n+extern const char *context_as_string            PARAMS ((tree, int));\n extern const char *lang_decl_name\t\tPARAMS ((tree, int));\n extern const char *cp_file_of\t\t\tPARAMS ((tree));\n extern int cp_line_of\t\t\t\tPARAMS ((tree));"}, {"sha": "70198999d3a227537a80fa81b78f07c70bf236ef", "filename": "gcc/cp/error.c", "status": "modified", "additions": 163, "deletions": 204, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -29,39 +29,6 @@ Boston, MA 02111-1307, USA.  */\n \n enum pad { none, before, after };\n \n-/* These constants can used as bit flags in the process of tree formatting.\n-\n-   TFF_PLAIN_IDENTIFER: unqualified part of a name.\n-   TFF_NAMESPACE_SCOPE: the complete qualified-id form of a name.\n-   TFF_CLASS_SCOPE: if possible, include the class-name part of a\n-        qualified-id.  This flag may be implied in some circumstances by\n-        TFF_NAMESPACE_SCOPE.\n-   TFF_SCOPE: the combinaison of the two above.\n-   TFF_CHASE_TYPDEF: print the original type-id instead of the typedef-name.\n-   TFF_DECL_SPECIFIERS: print decl-specifiers.\n-   TFF_CLASS_KEY_OR_ENUM: precede a class-type name (resp. enum name) with\n-       a class-key (resp. `enum').\n-   TFF_RETURN_TYPE: include function return type.\n-   TFF_FUNCTION_DEFAULT_ARGUMENTS: include function default parameter values.\n-   TFF_EXCEPTION_SPECIFICATION: show function exception specification.\n-   TFF_TEMPLATE_HEADER: show the template<...> hearder in a\n-       template-declaration.\n-   TFF_TEMPLATE_DEFAULT_ARGUMENTS: show template paramter default values.  */\n-\n-#define TFF_PLAIN_IDENTIFIER               (0)\n-#define TFF_NAMESPACE_SCOPE                (1)\n-#define TFF_CLASS_SCOPE                    (1 << 1)\n-#define TFF_CHASE_NAMESPACE_ALIAS          (1 << 2)\n-#define TFF_CHASE_TYPEDEF                  (1 << 3)\n-#define TFF_DECL_SPECIFIERS                (1 << 4)\n-#define TFF_CLASS_KEY_OR_ENUM              (1 << 5)\n-#define TFF_RETURN_TYPE                    (1 << 6)\n-#define TFF_FUNCTION_DEFAULT_ARGUMENTS     (1 << 7)\n-#define TFF_EXCEPTION_SPECIFICATION        (1 << 8)\n-#define TFF_TEMPLATE_HEADER                (1 << 9)\n-#define TFF_TEMPLATE_DEFAULT_ARGUMENTS     (1 << 10)\n-#define TFF_SCOPE (TFF_NAMESPACE_SCOPE | TFF_CLASS_SCOPE)\n-\n /* This data structure bundles altogether, all the information necessary\n    for pretty-printing a C++ source-level entity represented by a tree.  */\n typedef struct\n@@ -120,33 +87,33 @@ static const char *op_to_string\t\t\tPARAMS ((enum tree_code, int));\n static const char *parm_to_string\t\tPARAMS ((int, int));\n static const char *type_to_string\t\tPARAMS ((tree, int));\n \n-static void dump_type PARAMS ((tree, enum tree_string_flags));\n-static void dump_typename PARAMS ((tree, enum tree_string_flags));\n-static void dump_simple_decl PARAMS ((tree, tree, enum tree_string_flags));\n-static void dump_decl PARAMS ((tree, enum tree_string_flags));\n-static void dump_template_decl PARAMS ((tree, enum tree_string_flags));\n-static void dump_function_decl PARAMS ((tree, enum tree_string_flags));\n-static void dump_expr PARAMS ((tree, enum tree_string_flags));\n-static void dump_unary_op PARAMS ((const char *, tree, enum tree_string_flags));\n-static void dump_binary_op PARAMS ((const char *, tree, enum tree_string_flags));\n-static void dump_aggr_type PARAMS ((tree, enum tree_string_flags));\n-static enum pad dump_type_prefix PARAMS ((tree, enum tree_string_flags));\n-static void dump_type_suffix PARAMS ((tree, enum tree_string_flags));\n-static void dump_function_name PARAMS ((tree, enum tree_string_flags));\n-static void dump_expr_list PARAMS ((tree, enum tree_string_flags));\n+static void dump_type PARAMS ((tree, int));\n+static void dump_typename PARAMS ((tree, int));\n+static void dump_simple_decl PARAMS ((tree, tree, int));\n+static void dump_decl PARAMS ((tree, int));\n+static void dump_template_decl PARAMS ((tree, int));\n+static void dump_function_decl PARAMS ((tree, int));\n+static void dump_expr PARAMS ((tree, int));\n+static void dump_unary_op PARAMS ((const char *, tree, int));\n+static void dump_binary_op PARAMS ((const char *, tree, int));\n+static void dump_aggr_type PARAMS ((tree, int));\n+static enum pad dump_type_prefix PARAMS ((tree, int));\n+static void dump_type_suffix PARAMS ((tree, int));\n+static void dump_function_name PARAMS ((tree, int));\n+static void dump_expr_list PARAMS ((tree, int));\n static void dump_global_iord PARAMS ((tree));\n static enum pad dump_qualifiers PARAMS ((tree, enum pad));\n static void dump_char PARAMS ((int));\n-static void dump_parameters PARAMS ((tree, enum tree_string_flags));\n-static void dump_exception_spec PARAMS ((tree, enum tree_string_flags));\n+static void dump_parameters PARAMS ((tree, int));\n+static void dump_exception_spec PARAMS ((tree, int));\n static const char *class_key_or_enum PARAMS ((tree));\n static tree ident_fndecl PARAMS ((tree));\n-static void dump_template_argument PARAMS ((tree, enum tree_string_flags));\n-static void dump_template_argument_list PARAMS ((tree, enum tree_string_flags));\n-static void dump_template_parameter PARAMS ((tree, enum tree_string_flags));\n+static void dump_template_argument PARAMS ((tree, int));\n+static void dump_template_argument_list PARAMS ((tree, int));\n+static void dump_template_parameter PARAMS ((tree, int));\n static void dump_template_bindings PARAMS ((tree, tree));\n-static void dump_scope PARAMS ((tree, enum tree_string_flags));\n-static void dump_template_parms PARAMS ((tree, int, enum tree_string_flags));\n+static void dump_scope PARAMS ((tree, int));\n+static void dump_template_parms PARAMS ((tree, int, int));\n \n static const char *function_category PARAMS ((tree));\n static void lang_print_error_function PARAMS ((const char *));\n@@ -237,33 +204,30 @@ init_error ()\n static void\n dump_scope (scope, flags)\n      tree scope;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n+  int f = ~TFF_RETURN_TYPE & (TFF_DECL_SPECIFIERS\n+                              | (flags & (TFF_SCOPE | TFF_CHASE_TYPEDEF)));\n+\n   if (scope == NULL_TREE)\n     return;\n \n   if (TREE_CODE (scope) == NAMESPACE_DECL)\n     {\n       if (scope != global_namespace)\n         {\n-          dump_decl (scope, (flags & (TS_PEDANTIC_NAME | TS_FUNC_SCOPE | TS_CHASE_TYPEDEFS))\n-                             | TS_FUNC_NORETURN | TS_DECL_TYPE);\n+          dump_decl (scope, f);\n           print_scope_operator (scratch_buffer);\n         }\n-      else if (flags & TS_PEDANTIC_NAME)\n-        print_scope_operator (scratch_buffer);\n     }\n   else if (AGGREGATE_TYPE_P (scope))\n     {\n-      dump_type (scope, (flags & (TS_PEDANTIC_NAME | TS_FUNC_SCOPE | TS_CHASE_TYPEDEFS))\n-                           | TS_FUNC_NORETURN | TS_DECL_TYPE);\n+      dump_type (scope, f);\n       print_scope_operator (scratch_buffer);\n     }\n-  else if ((flags & (TS_PEDANTIC_NAME | TS_FUNC_SCOPE))\n-            && TREE_CODE (scope) == FUNCTION_DECL)\n+  else if ((flags & TFF_SCOPE) && TREE_CODE (scope) == FUNCTION_DECL)\n     {\n-      dump_function_decl (scope, (flags & (TS_PEDANTIC_NAME | TS_FUNC_SCOPE | TS_CHASE_TYPEDEFS))\n-                           | TS_FUNC_NORETURN | TS_DECL_TYPE);\n+      dump_function_decl (scope, f);\n       print_scope_operator (scratch_buffer);\n     }\n }\n@@ -311,12 +275,12 @@ static char digit_buffer[128];\n static void\n dump_template_argument (arg, flags)\n      tree arg;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   if (TYPE_P (arg) || TREE_CODE (arg) == TEMPLATE_DECL)\n-    dump_type (arg, flags & ~TS_AGGR_TAGS);\n+    dump_type (arg, flags & ~TFF_CLASS_KEY_OR_ENUM);\n   else\n-    dump_expr (arg, (flags | TS_EXPR_PARENS) & ~TS_AGGR_TAGS);\n+    dump_expr (arg, (flags | TFF_EXPR_IN_PARENS) & ~TFF_CLASS_KEY_OR_ENUM);\n }\n \n /* Dump a template-argument-list ARGS (always a TREE_VEC) under control\n@@ -325,7 +289,7 @@ dump_template_argument (arg, flags)\n static void\n dump_template_argument_list (args, flags)\n      tree args;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   int n = TREE_VEC_LENGTH (args);\n   int need_comma = 0;\n@@ -345,14 +309,14 @@ dump_template_argument_list (args, flags)\n static void\n dump_template_parameter (parm, flags)\n      tree parm;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree p = TREE_VALUE (parm);\n   tree a = TREE_PURPOSE (parm);\n \n   if (TREE_CODE (p) == TYPE_DECL)\n     {\n-      if (flags & TS_DECL_TYPE)\n+      if (flags & TFF_DECL_SPECIFIERS)\n         {\n           print_identifier (scratch_buffer, \"class\");\n           if (DECL_NAME (p))\n@@ -367,15 +331,15 @@ dump_template_parameter (parm, flags)\n         print_identifier (scratch_buffer, \"{template default argument error}\");\n     }\n   else\n-    dump_decl (p, flags | TS_DECL_TYPE);\n+    dump_decl (p, flags | TFF_DECL_SPECIFIERS);\n \n-  if ((flags & TS_PARM_DEFAULTS) && a != NULL_TREE)\n+  if ((flags & TFF_FUNCTION_DEFAULT_ARGUMENTS) && a != NULL_TREE)\n     {\n       output_add_string (scratch_buffer, \" = \");\n       if (TREE_CODE (a) == TYPE_DECL || TREE_CODE (a) == TEMPLATE_DECL)\n-        dump_type (a, flags & ~TS_CHASE_TYPEDEFS);\n+        dump_type (a, flags & ~TFF_CHASE_TYPEDEF);\n       else\n-        dump_expr (a, flags | TS_EXPR_PARENS);\n+        dump_expr (a, flags | TFF_EXPR_IN_PARENS);\n     }\n }\n \n@@ -410,10 +374,10 @@ dump_template_bindings (parms, args)\n \n \t  if (need_comma)\n \t    separate_with_comma (scratch_buffer);\n-\t  dump_template_parameter (TREE_VEC_ELT (p, i), TS_PLAIN);\n+\t  dump_template_parameter (TREE_VEC_ELT (p, i), TFF_PLAIN_IDENTIFIER);\n \t  output_add_string (scratch_buffer, \" = \");\n \t  if (arg)\n-\t    dump_template_argument (arg, TS_PLAIN);\n+\t    dump_template_argument (arg, TFF_PLAIN_IDENTIFIER);\n \t  else\n \t    print_identifier (scratch_buffer, \"<missing>\");\n \n@@ -431,7 +395,7 @@ dump_template_bindings (parms, args)\n static void\n dump_type (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   if (t == NULL_TREE)\n     return;\n@@ -465,7 +429,7 @@ dump_type (t, flags)\n       break;\n \n     case TYPE_DECL:\n-      if (flags & TS_CHASE_TYPEDEFS)\n+      if (flags & TFF_CHASE_TYPEDEF)\n         {\n           dump_type (DECL_ORIGINAL_TYPE (t)\n                      ? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t), flags);\n@@ -475,7 +439,7 @@ dump_type (t, flags)\n \n     case TEMPLATE_DECL:\n     case NAMESPACE_DECL:\n-      dump_decl (t, flags & ~TS_DECL_TYPE);\n+      dump_decl (t, flags & ~TFF_DECL_SPECIFIERS);\n       break;\n \n     case COMPLEX_TYPE:\n@@ -496,7 +460,7 @@ dump_type (t, flags)\n       {\n \ttree type;\n \tdump_qualifiers (t, after);\n-\ttype = flags & TS_CHASE_TYPEDEFS ? TYPE_MAIN_VARIANT (t) : t;\n+\ttype = flags & TFF_CHASE_TYPEDEF ? TYPE_MAIN_VARIANT (t) : t;\n \tif (TYPE_NAME (type) && TYPE_IDENTIFIER (type))\n \t  print_tree_identifier (scratch_buffer, TYPE_IDENTIFIER (type));\n \telse\n@@ -557,7 +521,7 @@ dump_type (t, flags)\n \n     case TYPEOF_TYPE:\n       output_add_string (scratch_buffer, \"__typeof (\");\n-      dump_expr (TYPE_FIELDS (t), flags & ~TS_EXPR_PARENS);\n+      dump_expr (TYPE_FIELDS (t), flags & ~TFF_EXPR_IN_PARENS);\n       print_left_paren (scratch_buffer);\n       break;\n \n@@ -577,14 +541,14 @@ dump_type (t, flags)\n static void\n dump_typename (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree ctx = TYPE_CONTEXT (t);\n \n   if (TREE_CODE (ctx) == TYPENAME_TYPE)\n     dump_typename (ctx, flags);\n   else\n-    dump_type (ctx, flags & ~TS_AGGR_TAGS);\n+    dump_type (ctx, flags & ~TFF_CLASS_KEY_OR_ENUM);\n   print_scope_operator (scratch_buffer);\n   dump_decl (TYPENAME_TYPE_FULLNAME (t), flags);\n }\n@@ -611,7 +575,7 @@ class_key_or_enum (t)\n static void\n dump_aggr_type (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree name;\n   const char *variety = class_key_or_enum (t);\n@@ -620,13 +584,13 @@ dump_aggr_type (t, flags)\n \n   dump_qualifiers (t, after);\n \n-  if (flags & TS_AGGR_TAGS)\n+  if (flags & TFF_CLASS_KEY_OR_ENUM)\n     {\n       print_identifier (scratch_buffer, variety);\n       output_add_space (scratch_buffer);\n     }\n \n-  if (flags & TS_CHASE_TYPEDEFS)\n+  if (flags & TFF_CHASE_TYPEDEF)\n     t = TYPE_MAIN_VARIANT (t);\n \n   name = TYPE_NAME (t);\n@@ -640,7 +604,7 @@ dump_aggr_type (t, flags)\n                     || TREE_CODE (CLASSTYPE_TI_TEMPLATE (t)) != TEMPLATE_DECL\n                     || DECL_TEMPLATE_SPECIALIZATION (CLASSTYPE_TI_TEMPLATE (t))\n                     || PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)));\n-      dump_scope (CP_DECL_CONTEXT (name), flags | TS_FUNC_SCOPE);\n+      dump_scope (CP_DECL_CONTEXT (name), flags | TFF_SCOPE);\n       if (tmplate)\n         {\n           /* Because the template names are mangled, we have to locate\n@@ -656,7 +620,7 @@ dump_aggr_type (t, flags)\n \n   if (name == 0 || ANON_AGGRNAME_P (name))\n     {\n-      if (flags & TS_AGGR_TAGS)\n+      if (flags & TFF_CLASS_KEY_OR_ENUM)\n         print_identifier (scratch_buffer, \"<anonymous>\");\n       else\n         output_printf (scratch_buffer, \"<anonymous %s>\", variety);\n@@ -666,7 +630,7 @@ dump_aggr_type (t, flags)\n   if (tmplate)\n     dump_template_parms (TYPE_TEMPLATE_INFO (t),\n                          !CLASSTYPE_USE_TEMPLATE (t),\n-                         flags & ~TS_TEMPLATE_PREFIX);\n+                         flags & ~TFF_TEMPLATE_HEADER);\n }\n \n /* Dump into the obstack the initial part of the output for a given type.\n@@ -686,7 +650,7 @@ dump_aggr_type (t, flags)\n static enum pad\n dump_type_prefix (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   enum pad padding = before;\n \n@@ -804,7 +768,7 @@ dump_type_prefix (t, flags)\n static void\n dump_type_suffix (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   if (TYPE_PTRMEMFUNC_P (t))\n     t = TYPE_PTRMEMFUNC_FN_TYPE (t);\n@@ -832,7 +796,7 @@ dump_type_suffix (t, flags)\n \n \t/* Function pointers don't have default args.  Not in standard C++,\n \t   anyway; they may in g++, but we'll just pretend otherwise.  */\n-\tdump_parameters (arg, flags & ~TS_PARM_DEFAULTS);\n+\tdump_parameters (arg, flags & ~TFF_FUNCTION_DEFAULT_ARGUMENTS);\n \n \tif (TREE_CODE (t) == METHOD_TYPE)\n \t  dump_qualifiers\n@@ -852,12 +816,12 @@ dump_type_suffix (t, flags)\n                tree_low_cst (TYPE_MAX_VALUE (TYPE_DOMAIN (t)), 0) + 1);\n \t  else if (TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (t))) == MINUS_EXPR)\n \t    dump_expr (TREE_OPERAND (TYPE_MAX_VALUE (TYPE_DOMAIN (t)), 0),\n-\t               flags & ~TS_EXPR_PARENS);\n+\t               flags & ~TFF_EXPR_IN_PARENS);\n \t  else\n \t    dump_expr (fold (cp_build_binary_op\n \t\t\t     (PLUS_EXPR, TYPE_MAX_VALUE (TYPE_DOMAIN (t)),\n \t\t\t      integer_one_node)),\n-\t               flags & ~TS_EXPR_PARENS);\n+\t               flags & ~TFF_EXPR_IN_PARENS);\n \t}\n       print_right_bracket (scratch_buffer);\n       dump_type_suffix (TREE_TYPE (t), flags);\n@@ -947,9 +911,9 @@ static void\n dump_simple_decl (t, type, flags)\n      tree t;\n      tree type;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n-  if (flags & TS_DECL_TYPE)\n+  if (flags & TFF_DECL_SPECIFIERS)\n     {\n       if (dump_type_prefix (type, flags) != none)\n         output_add_space (scratch_buffer);\n@@ -960,7 +924,7 @@ dump_simple_decl (t, type, flags)\n     dump_decl (DECL_NAME (t), flags);\n   else\n     print_identifier (scratch_buffer, \"<anonymous>\");\n-  if (flags & TS_DECL_TYPE)\n+  if (flags & TFF_DECL_SPECIFIERS)\n     dump_type_suffix (type, flags);\n }\n \n@@ -969,7 +933,7 @@ dump_simple_decl (t, type, flags)\n static void\n dump_decl (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   if (t == NULL_TREE)\n     return;\n@@ -981,7 +945,7 @@ dump_decl (t, flags)\n \t/* Don't say 'typedef class A' */\n         if (DECL_ARTIFICIAL (t))\n \t  {\n-\t    if ((flags & TS_DECL_TYPE)\n+\t    if ((flags & TFF_DECL_SPECIFIERS)\n \t        && TREE_CODE (TREE_TYPE (t)) == TEMPLATE_TYPE_PARM)\n \t      /* Say `class T' not just `T'. */\n \t      output_add_string (scratch_buffer, \"class \");\n@@ -990,7 +954,7 @@ dump_decl (t, flags)\n \t    break;\n \t  }\n       }\n-      if (flags & TS_DECORATE)\n+      if (flags & TFF_DECL_SPECIFIERS)\n \toutput_add_string (scratch_buffer, \"typedef \");\n       dump_simple_decl (t, DECL_ORIGINAL_TYPE (t)\n \t\t\t? DECL_ORIGINAL_TYPE (t) : TREE_TYPE (t),\n@@ -1030,7 +994,7 @@ dump_decl (t, flags)\n       break;\n \n     case SCOPE_REF:\n-      dump_decl (TREE_OPERAND (t, 0), flags & ~TS_DECL_TYPE);\n+      dump_decl (TREE_OPERAND (t, 0), flags & ~TFF_DECL_SPECIFIERS);\n       print_scope_operator (scratch_buffer); \n       dump_decl (TREE_OPERAND (t, 1), flags);\n       break;\n@@ -1085,16 +1049,11 @@ dump_decl (t, flags)\n \tdump_global_iord (DECL_ASSEMBLER_NAME (t));\n       else if (! DECL_LANG_SPECIFIC (t))\n \tprint_identifier (scratch_buffer, \"<internal>\");\n-      else if (flags & TS_PEDANTIC_NAME)\n-        dump_function_decl (t, flags | TS_FUNC_NORETURN | TS_DECL_TYPE);\n       else\n         dump_function_decl (t, flags);\n       break;\n \n     case TEMPLATE_DECL:\n-      if (flags & TS_PEDANTIC_NAME)\n-        dump_template_decl (t, flags | TS_FUNC_NORETURN | TS_DECL_TYPE);\n-      else\n         dump_template_decl (t, flags);\n       break;\n \n@@ -1132,7 +1091,7 @@ dump_decl (t, flags)\n       else if (DECL_NAME (t))\n \tdump_decl (DECL_NAME (t), flags);\n       else if (DECL_INITIAL (t))\n-\tdump_expr (DECL_INITIAL (t), flags | TS_EXPR_PARENS);\n+\tdump_expr (DECL_INITIAL (t), flags | TFF_EXPR_IN_PARENS);\n       else\n \tprint_identifier (scratch_buffer, \"enumerator\");\n       break;\n@@ -1160,13 +1119,13 @@ dump_decl (t, flags)\n static void\n dump_template_decl (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree orig_parms = DECL_TEMPLATE_PARMS (t);\n   tree parms;\n   int i;\n \n-  if (flags & TS_TEMPLATE_PREFIX)\n+  if (flags & TFF_TEMPLATE_HEADER)\n     {\n       for (parms = orig_parms = nreverse (orig_parms);\n            parms;\n@@ -1188,47 +1147,47 @@ dump_template_decl (t, flags)\n       nreverse(orig_parms);\n       /* If we've shown the template<args> prefix, we'd better show the\n \t decl's type too.  */\n-      flags |= TS_DECL_TYPE;\n+      flags |= TFF_DECL_SPECIFIERS;\n     }\n   if (TREE_CODE (DECL_TEMPLATE_RESULT (t)) == TYPE_DECL)\n     dump_type (TREE_TYPE (t),\n-               ((flags & ~TS_AGGR_TAGS) | TS_TEMPLATE_PLAIN\n-                | (flags & TS_DECL_TYPE ? TS_AGGR_TAGS : 0)));\n+               ((flags & ~TFF_CLASS_KEY_OR_ENUM) | TFF_TEMPLATE_NAME\n+                | (flags & TFF_DECL_SPECIFIERS ? TFF_CLASS_KEY_OR_ENUM : 0)));\n   else if (TREE_CODE (DECL_TEMPLATE_RESULT (t)) == VAR_DECL)\n-    dump_decl (DECL_TEMPLATE_RESULT (t), flags | TS_TEMPLATE_PLAIN);\n+    dump_decl (DECL_TEMPLATE_RESULT (t), flags | TFF_TEMPLATE_NAME);\n   else if (TREE_TYPE (t) == NULL_TREE)\n     my_friendly_abort (353);\n   else\n     switch (NEXT_CODE (t))\n     {\n       case METHOD_TYPE:\n       case FUNCTION_TYPE:\n-        dump_function_decl (t, flags | TS_TEMPLATE_PLAIN);\n+        dump_function_decl (t, flags | TFF_TEMPLATE_NAME);\n         break;\n       default:\n         /* This case can occur with some illegal code.  */\n         dump_type (TREE_TYPE (t),\n-                   (flags & ~TS_AGGR_TAGS) | TS_TEMPLATE_PLAIN\n-                   | (flags & TS_DECL_TYPE ? TS_AGGR_TAGS : 0));\n+                   (flags & ~TFF_CLASS_KEY_OR_ENUM) | TFF_TEMPLATE_NAME\n+                   | (flags & TFF_DECL_SPECIFIERS ? TFF_CLASS_KEY_OR_ENUM : 0));\n     }\n }\n \n /* Pretty print a function decl. There are several ways we want to print a\n-   function declaration. The TS_FUNC bits in FLAGS tells us how to behave.\n+   function declaration. The TFF_ bits in FLAGS tells us how to behave.\n    As cp_error can only apply the '#' flag once to give 0 and 1 for V, there\n    is %D which doesn't print the throw specs, and %F which does. */\n \n static void\n dump_function_decl (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree fntype;\n   tree parmtypes;\n   tree cname = NULL_TREE;\n   tree template_args = NULL_TREE;\n   tree template_parms = NULL_TREE;\n-  int show_return = !(flags & TS_FUNC_NORETURN) && (flags & TS_DECL_TYPE);\n+  int show_return = flags & TFF_RETURN_TYPE || flags & TFF_DECL_SPECIFIERS;\n \n   if (TREE_CODE (t) == TEMPLATE_DECL)\n     t = DECL_TEMPLATE_RESULT (t);\n@@ -1256,7 +1215,7 @@ dump_function_decl (t, flags)\n   else if (TREE_CODE (fntype) == METHOD_TYPE)\n     cname = TREE_TYPE (TREE_VALUE (parmtypes));\n \n-  if (!(flags & TS_DECORATE))\n+  if (!(flags & TFF_DECL_SPECIFIERS))\n     /* OK */;\n   else if (DECL_STATIC_FUNCTION_P (t))\n     print_identifier (scratch_buffer, \"static \");\n@@ -1284,7 +1243,7 @@ dump_function_decl (t, flags)\n \n   dump_function_name (t, flags);\n \n-  if (flags & TS_DECL_TYPE) \n+  if (flags & TFF_DECL_SPECIFIERS) \n     {\n       if (TREE_CODE (fntype) == METHOD_TYPE && parmtypes)\n \t/* Skip \"this\" parameter.  */\n@@ -1303,7 +1262,7 @@ dump_function_decl (t, flags)\n \tdump_qualifiers (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (fntype))),\n \t\t\t before);\n \n-      if (flags & TS_FUNC_THROW)\n+      if (flags & TFF_EXCEPTION_SPECIFICATION)\n \tdump_exception_spec (TYPE_RAISES_EXCEPTIONS (fntype), flags);\n     }\n \n@@ -1323,7 +1282,7 @@ dump_function_decl (t, flags)\n static void\n dump_parameters (parmtypes, flags)\n      tree parmtypes;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   int first;\n \n@@ -1342,10 +1301,10 @@ dump_parameters (parmtypes, flags)\n         }\n       dump_type (TREE_VALUE (parmtypes), flags);\n \n-      if ((flags & TS_PARM_DEFAULTS) && TREE_PURPOSE (parmtypes))\n+      if ((flags & TFF_FUNCTION_DEFAULT_ARGUMENTS) && TREE_PURPOSE (parmtypes))\n         {\n           output_add_string (scratch_buffer, \" = \");\n-          dump_expr (TREE_PURPOSE (parmtypes), flags | TS_EXPR_PARENS);\n+          dump_expr (TREE_PURPOSE (parmtypes), flags | TFF_EXPR_IN_PARENS);\n         }\n     }\n \n@@ -1357,7 +1316,7 @@ dump_parameters (parmtypes, flags)\n static void\n dump_exception_spec (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   if (t)\n     {\n@@ -1381,14 +1340,14 @@ dump_exception_spec (t, flags)\n static void\n dump_function_name (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree name = DECL_NAME (t);\n \n   if (DECL_DESTRUCTOR_P (t))\n     {\n       output_add_character (scratch_buffer, '~');\n-      dump_decl (name, TS_PLAIN);\n+      dump_decl (name, TFF_PLAIN_IDENTIFIER);\n     }\n   else if (DECL_CONV_FN_P (t))\n     {\n@@ -1425,13 +1384,13 @@ static void\n dump_template_parms (info, primary, flags)\n      tree info;\n      int primary;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   tree args = info ? TI_ARGS (info) : NULL_TREE;\n \n-  if (primary && flags & TS_TEMPLATE_PLAIN)\n+  if (primary && flags & TFF_TEMPLATE_NAME)\n     return;\n-  flags &= ~(TS_AGGR_TAGS | TS_TEMPLATE_PLAIN);\n+  flags &= ~(TFF_CLASS_KEY_OR_ENUM | TFF_TEMPLATE_NAME);\n   print_template_argument_list_start (scratch_buffer);\n \n   /* Be careful only to print things when we have them, so as not\n@@ -1491,7 +1450,7 @@ dump_template_parms (info, primary, flags)\n           if (ix)\n             separate_with_comma (scratch_buffer);\n \n-          dump_decl (parm, flags & ~TS_DECL_TYPE);\n+          dump_decl (parm, flags & ~TFF_DECL_SPECIFIERS);\n         }\n     }\n   print_template_argument_list_end (scratch_buffer);\n@@ -1549,11 +1508,11 @@ dump_char (c)\n static void\n dump_expr_list (l, flags)\n      tree l;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   while (l)\n     {\n-      dump_expr (TREE_VALUE (l), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_VALUE (l), flags | TFF_EXPR_IN_PARENS);\n       l = TREE_CHAIN (l);\n       if (l)\n \tseparate_with_comma (scratch_buffer);\n@@ -1565,7 +1524,7 @@ dump_expr_list (l, flags)\n static void\n dump_expr (t, flags)\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   switch (TREE_CODE (t))\n     {\n@@ -1577,7 +1536,7 @@ dump_expr (t, flags)\n     case TEMPLATE_DECL:\n     case NAMESPACE_DECL:\n     case OVERLOAD:\n-      dump_decl (t, flags & ~TS_DECL_TYPE);\n+      dump_decl (t, flags & ~TFF_DECL_SPECIFIERS);\n       break;\n \n     case INTEGER_CST:\n@@ -1688,19 +1647,19 @@ dump_expr (t, flags)\n \n     case COMPOUND_EXPR:\n       print_left_paren (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       separate_with_comma (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       print_right_paren (scratch_buffer);\n       break;\n \n     case COND_EXPR:\n       print_left_paren (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       output_add_string (scratch_buffer, \" ? \");\n-      dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       output_add_string (scratch_buffer, \" : \");\n-      dump_expr (TREE_OPERAND (t, 2), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 2), flags | TFF_EXPR_IN_PARENS);\n       print_right_paren (scratch_buffer);\n       break;\n \n@@ -1712,7 +1671,7 @@ dump_expr (t, flags)\n \t}\n       else\n \t{\n-\t  dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+\t  dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n \t}\n       break;\n \n@@ -1753,18 +1712,18 @@ dump_expr (t, flags)\n \t    tree ob = TREE_VALUE (args);\n \t    if (TREE_CODE (ob) == ADDR_EXPR)\n \t      {\n-\t\tdump_expr (TREE_OPERAND (ob, 0), flags | TS_EXPR_PARENS);\n+\t\tdump_expr (TREE_OPERAND (ob, 0), flags | TFF_EXPR_IN_PARENS);\n \t\toutput_add_character (scratch_buffer, '.');\n \t      }\n \t    else if (TREE_CODE (ob) != PARM_DECL\n \t\t     || strcmp (IDENTIFIER_POINTER (DECL_NAME (ob)), \"this\"))\n \t      {\n-\t\tdump_expr (ob, flags | TS_EXPR_PARENS);\n+\t\tdump_expr (ob, flags | TFF_EXPR_IN_PARENS);\n \t\toutput_add_string (scratch_buffer, \"->\");\n \t      }\n \t    args = TREE_CHAIN (args);\n \t  }\n-\tdump_expr (fn, flags | TS_EXPR_PARENS);\n+\tdump_expr (fn, flags | TFF_EXPR_IN_PARENS);\n \tprint_left_paren (scratch_buffer);\n \tdump_expr_list (args, flags);\n \tprint_right_paren (scratch_buffer);\n@@ -1806,7 +1765,7 @@ dump_expr (t, flags)\n \t default argument.  Note we may have cleared out the first\n \t operand in expand_expr, so don't go killing ourselves.  */\n       if (TREE_OPERAND (t, 1))\n-\tdump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+\tdump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       break;\n \n     case INIT_EXPR:\n@@ -1857,23 +1816,23 @@ dump_expr (t, flags)\n \t    if (TREE_CODE (ob) != PARM_DECL\n \t\t|| strcmp (IDENTIFIER_POINTER (DECL_NAME (ob)), \"this\"))\n \t      {\n-\t\tdump_expr (ob, flags | TS_EXPR_PARENS);\n+\t\tdump_expr (ob, flags | TFF_EXPR_IN_PARENS);\n \t\toutput_add_string (scratch_buffer, \"->\");\n \t      }\n \t  }\n \telse\n \t  {\n-\t    dump_expr (ob, flags | TS_EXPR_PARENS);\n+\t    dump_expr (ob, flags | TFF_EXPR_IN_PARENS);\n \t    output_add_character (scratch_buffer, '.');\n \t  }\n-\tdump_expr (TREE_OPERAND (t, 1), flags & ~TS_EXPR_PARENS);\n+\tdump_expr (TREE_OPERAND (t, 1), flags & ~TFF_EXPR_IN_PARENS);\n       }\n       break;\n \n     case ARRAY_REF:\n-      dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       print_left_bracket (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       print_right_bracket (scratch_buffer);\n       break;\n \n@@ -1897,7 +1856,7 @@ dump_expr (t, flags)\n \t     that the expression has pointer type.  */\n \t  || (TREE_TYPE (t)\n \t      && TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE))\n-\tdump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+\tdump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       else\n \tdump_unary_op (\"&\", t, flags);\n       break;\n@@ -1907,7 +1866,7 @@ dump_expr (t, flags)\n \t{\n \t  t = TREE_OPERAND (t, 0);\n \t  my_friendly_assert (TREE_CODE (t) == CALL_EXPR, 237);\n-\t  dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+\t  dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n \t  print_left_paren (scratch_buffer);\n \t  dump_expr_list (TREE_CHAIN (TREE_OPERAND (t, 1)), flags);\n \t  print_right_paren (scratch_buffer);\n@@ -1934,7 +1893,7 @@ dump_expr (t, flags)\n     case POSTDECREMENT_EXPR:\n     case POSTINCREMENT_EXPR:\n       print_left_paren (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       print_identifier\n         (scratch_buffer, operator_name_info[(int)TREE_CODE (t)].name);\n       print_right_paren (scratch_buffer);\n@@ -1953,17 +1912,17 @@ dump_expr (t, flags)\n \n \t  if (TREE_CODE (next) == FUNCTION_TYPE)\n \t    {\n-\t      if (flags & TS_EXPR_PARENS)\n+\t      if (flags & TFF_EXPR_IN_PARENS)\n \t        print_left_paren (scratch_buffer);\n \t      output_add_character (scratch_buffer, '*');\n-\t      dump_expr (TREE_OPERAND (t, 0), flags & ~TS_EXPR_PARENS);\n-\t      if (flags & TS_EXPR_PARENS)\n+\t      dump_expr (TREE_OPERAND (t, 0), flags & ~TFF_EXPR_IN_PARENS);\n+\t      if (flags & TFF_EXPR_IN_PARENS)\n \t        print_right_paren (scratch_buffer);\n \t      break;\n \t    }\n \t  /* else FALLTHRU */\n \t}\n-      dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n       break;\n \n     case NOP_EXPR:\n@@ -1982,7 +1941,7 @@ dump_expr (t, flags)\n \t  if (integer_all_onesp (idx))\n \t    {\n \t      tree pfn = PFN_FROM_PTRMEMFUNC (t);\n-\t      dump_unary_op (\"&\", pfn, flags | TS_EXPR_PARENS);\n+\t      dump_unary_op (\"&\", pfn, flags | TFF_EXPR_IN_PARENS);\n \t      break;\n \t    }\n \t  else if (TREE_CODE (idx) == INTEGER_CST\n@@ -2017,7 +1976,7 @@ dump_expr (t, flags)\n \t      if (virtuals)\n \t\t{\n \t\t  dump_expr (BV_FN (virtuals),\n-\t                     flags | TS_EXPR_PARENS);\n+\t                     flags | TFF_EXPR_IN_PARENS);\n \t\t  break;\n \t\t}\n \t    }\n@@ -2035,31 +1994,31 @@ dump_expr (t, flags)\n \t    t = TREE_OPERAND (t, 1);\n \t    if (TREE_CODE (t) == FUNCTION_DECL)\n \t      /* A::f */\n-\t      dump_expr (t, flags | TS_EXPR_PARENS);\n+\t      dump_expr (t, flags | TFF_EXPR_IN_PARENS);\n \t    else if (BASELINK_P (t))\n-\t      dump_expr (OVL_CURRENT (TREE_VALUE (t)), flags | TS_EXPR_PARENS);\n+\t      dump_expr (OVL_CURRENT (TREE_VALUE (t)), flags | TFF_EXPR_IN_PARENS);\n \t    else\n \t      dump_decl (t, flags);\n \t  }\n \telse\n \t  {\n \t    if (TREE_CODE (ob) == INDIRECT_REF)\n \t      {\n-\t\tdump_expr (TREE_OPERAND (ob, 0), flags | TS_EXPR_PARENS);\n+\t\tdump_expr (TREE_OPERAND (ob, 0), flags | TFF_EXPR_IN_PARENS);\n \t\toutput_add_string (scratch_buffer, \"->*\");\n \t      }\n \t    else\n \t      {\n-\t\tdump_expr (ob, flags | TS_EXPR_PARENS);\n+\t\tdump_expr (ob, flags | TFF_EXPR_IN_PARENS);\n \t\toutput_add_string (scratch_buffer, \".*\");\n \t      }\n-\t    dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+\t    dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n \t  }\n \tbreak;\n       }\n \n     case TEMPLATE_PARM_INDEX:\n-      dump_decl (TEMPLATE_PARM_DECL (t), flags & ~TS_DECL_TYPE);\n+      dump_decl (TEMPLATE_PARM_DECL (t), flags & ~TFF_DECL_SPECIFIERS);\n       break;\n \n     case IDENTIFIER_NODE:\n@@ -2069,7 +2028,7 @@ dump_expr (t, flags)\n     case SCOPE_REF:\n       dump_type (TREE_OPERAND (t, 0), flags);\n       print_scope_operator (scratch_buffer);\n-      dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       break;\n \n     case CAST_EXPR:\n@@ -2112,7 +2071,7 @@ dump_expr (t, flags)\n       if (TYPE_P (TREE_OPERAND (t, 0)))\n \tdump_type (TREE_OPERAND (t, 0), flags);\n       else\n-\tdump_unary_op (\"*\", t, flags | TS_EXPR_PARENS);\n+\tdump_unary_op (\"*\", t, flags | TFF_EXPR_IN_PARENS);\n       print_right_paren (scratch_buffer);\n       break;\n \n@@ -2146,19 +2105,19 @@ dump_expr (t, flags)\n \n     case BIND_EXPR:\n       output_add_character (scratch_buffer, '}');\n-      dump_expr (TREE_OPERAND (t, 1), flags & ~TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 1), flags & ~TFF_EXPR_IN_PARENS);\n       output_add_character (scratch_buffer, '}');\n       break;\n \n     case LOOP_EXPR:\n       output_add_string (scratch_buffer, \"while (1) { \");\n-      dump_expr (TREE_OPERAND (t, 0), flags & ~TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags & ~TFF_EXPR_IN_PARENS);\n       output_add_character (scratch_buffer, '}');\n       break;\n \n     case EXIT_EXPR:\n       output_add_string (scratch_buffer, \"if (\");\n-      dump_expr (TREE_OPERAND (t, 0), flags & ~TS_EXPR_PARENS);\n+      dump_expr (TREE_OPERAND (t, 0), flags & ~TFF_EXPR_IN_PARENS);\n       output_add_string (scratch_buffer, \") break; \");\n       break;\n \n@@ -2186,41 +2145,41 @@ static void\n dump_binary_op (opstring, t, flags)\n      const char *opstring;\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   print_left_paren (scratch_buffer);\n-  dump_expr (TREE_OPERAND (t, 0), flags | TS_EXPR_PARENS);\n+  dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n   output_add_space (scratch_buffer);\n   if (opstring)\n     print_identifier (scratch_buffer, opstring);\n   else\n     print_identifier (scratch_buffer, \"<unknown operator>\");\n   output_add_space (scratch_buffer);\n-  dump_expr (TREE_OPERAND (t, 1), flags | TS_EXPR_PARENS);\n+  dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n   print_right_paren (scratch_buffer);\n }\n \n static void\n dump_unary_op (opstring, t, flags)\n      const char *opstring;\n      tree t;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n-  if (flags & TS_EXPR_PARENS)\n+  if (flags & TFF_EXPR_IN_PARENS)\n     print_left_paren (scratch_buffer);\n   print_identifier (scratch_buffer, opstring);\n-  dump_expr (TREE_OPERAND (t, 0), flags & ~TS_EXPR_PARENS);\n-  if (flags & TS_EXPR_PARENS)\n+  dump_expr (TREE_OPERAND (t, 0), flags & ~TFF_EXPR_IN_PARENS);\n+  if (flags & TFF_EXPR_IN_PARENS)\n     print_right_paren (scratch_buffer);\n }\n \n-/* Exported interface to stringifying types, exprs and decls under TS_*\n+/* Exported interface to stringifying types, exprs and decls under TFF_*\n    control.  */\n \n const char *\n type_as_string (typ, flags)\n      tree typ;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2232,7 +2191,7 @@ type_as_string (typ, flags)\n const char *\n expr_as_string (decl, flags)\n      tree decl;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2244,7 +2203,7 @@ expr_as_string (decl, flags)\n const char *\n decl_as_string (decl, flags)\n      tree decl;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2256,7 +2215,7 @@ decl_as_string (decl, flags)\n const char *\n context_as_string (context, flags)\n      tree context;\n-     enum tree_string_flags flags;\n+     int flags;\n {\n   reinit_global_formatting_buffer ();\n \n@@ -2273,20 +2232,20 @@ lang_decl_name (decl, v)\n      int v;\n {\n   if (v >= 2)\n-    return decl_as_string (decl, TS_DECL_TYPE);\n+    return decl_as_string (decl, TFF_DECL_SPECIFIERS);\n \n   reinit_global_formatting_buffer ();\n \n   if (v == 1 && DECL_CLASS_SCOPE_P (decl))\n     {\n-      dump_type (CP_DECL_CONTEXT (decl), TS_PLAIN);\n+      dump_type (CP_DECL_CONTEXT (decl), TFF_PLAIN_IDENTIFIER);\n       print_scope_operator (scratch_buffer);\n     }\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n-    dump_function_name (decl, TS_PLAIN);\n+    dump_function_name (decl, TFF_PLAIN_IDENTIFIER);\n   else\n-    dump_decl (DECL_NAME (decl), TS_PLAIN);\n+    dump_decl (DECL_NAME (decl), TFF_PLAIN_IDENTIFIER);\n \n   return output_finalize_message (scratch_buffer);\n }\n@@ -2330,24 +2289,24 @@ cp_line_of (t)\n }\n \n /* Now the interfaces from cp_error et al to dump_type et al. Each takes an\n-   on/off VERBOSE flag and supply the appropriate TS_ flags to a dump_\n+   on/off VERBOSE flag and supply the appropriate TFF_ flags to a dump_\n    function.  */\n \n static const char *\n decl_to_string (decl, verbose)\n      tree decl;\n      int verbose;\n {\n-  enum tree_string_flags flags = 0;\n+  int flags = 0;\n \n   if (TREE_CODE (decl) == TYPE_DECL || TREE_CODE (decl) == RECORD_TYPE\n       || TREE_CODE (decl) == UNION_TYPE || TREE_CODE (decl) == ENUMERAL_TYPE)\n-    flags = TS_AGGR_TAGS;\n+    flags = TFF_CLASS_KEY_OR_ENUM;\n   if (verbose)\n-    flags |= TS_DECL_TYPE | TS_DECORATE | TS_PARM_DEFAULTS;\n+    flags |= TFF_DECL_SPECIFIERS | TFF_FUNCTION_DEFAULT_ARGUMENTS;\n   else if (TREE_CODE (decl) == FUNCTION_DECL)\n-    flags |= TS_DECL_TYPE | TS_FUNC_NORETURN;\n-  flags |= TS_TEMPLATE_PREFIX;\n+    flags |= TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE;\n+  flags |= TFF_TEMPLATE_HEADER;\n \n   reinit_global_formatting_buffer ();\n \n@@ -2373,11 +2332,11 @@ fndecl_to_string (fndecl, verbose)\n      tree fndecl;\n      int verbose;\n {\n-  enum tree_string_flags flags;\n+  int flags;\n \n-  flags = TS_FUNC_THROW | TS_DECL_TYPE;\n+  flags = TFF_EXCEPTION_SPECIFICATION | TFF_DECL_SPECIFIERS;\n   if (verbose)\n-    flags |= TS_PARM_DEFAULTS;\n+    flags |= TFF_FUNCTION_DEFAULT_ARGUMENTS;\n   reinit_global_formatting_buffer ();\n \n   dump_decl (fndecl, flags);\n@@ -2446,12 +2405,12 @@ type_to_string (typ, verbose)\n      tree typ;\n      int verbose;\n {\n-  enum tree_string_flags flags;\n+  int flags;\n \n   flags = 0;\n   if (verbose)\n-    flags |= TS_AGGR_TAGS;\n-  flags |= TS_TEMPLATE_PREFIX;\n+    flags |= TFF_CLASS_KEY_OR_ENUM;\n+  flags |= TFF_TEMPLATE_HEADER;\n \n   reinit_global_formatting_buffer ();\n \n@@ -2476,9 +2435,9 @@ args_to_string (p, verbose)\n      tree p;\n      int verbose;\n {\n-  enum tree_string_flags flags = 0;\n+  int flags = 0;\n   if (verbose)\n-    flags |= TS_AGGR_TAGS;\n+    flags |= TFF_CLASS_KEY_OR_ENUM;\n \n   if (p == NULL_TREE)\n     return \"\";\n@@ -2624,7 +2583,7 @@ print_instantiation_full_context (buffer)\n \t  else\n \t    output_verbatim (buffer, \"%s: In instantiation of `%s':\\n\", file,\n                              decl_as_string (TINST_DECL (p),\n-                                             TS_DECL_TYPE | TS_FUNC_NORETURN));\n+                                             TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n \n \t  line = TINST_LINE (p);\n \t  file = TINST_FILE (p);\n@@ -2647,7 +2606,7 @@ print_instantiation_partial_context (buffer, t, file, line)\n     {\n       output_verbatim\n         (buffer, \"%s:%d:   instantiated from `%s'\\n\", file, line,\n-         decl_as_string (TINST_DECL (t), TS_DECL_TYPE | TS_FUNC_NORETURN));\n+         decl_as_string (TINST_DECL (t), TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n       line = TINST_LINE (t);\n       file = TINST_FILE (t);\n     }"}, {"sha": "9465a1d7c12cb3ad15435f8e971c0156aabf8495", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -3534,7 +3534,7 @@ mangle_class_name_for_template (name, parms, arglist)\n \n       if (TREE_CODE (parm) == TYPE_DECL)\n \t{\n-\t  cat (type_as_string (arg, TS_CHASE_TYPEDEFS));\n+\t  cat (type_as_string (arg, TFF_CHASE_TYPEDEF));\n \t  continue;\n \t}\n       else if (TREE_CODE (parm) == TEMPLATE_DECL)\n@@ -3551,14 +3551,14 @@ mangle_class_name_for_template (name, parms, arglist)\n                   my_friendly_assert (TREE_CODE (context) == NAMESPACE_DECL\n                                       || CLASS_TYPE_P (context), \n                                       980422);\n-\t\t  cat(decl_as_string (DECL_CONTEXT (arg), 0));\n+\t\t  cat(decl_as_string (DECL_CONTEXT (arg), TFF_PLAIN_IDENTIFIER));\n \t\t  cat(\"::\");\n \t\t}\n \t      cat (IDENTIFIER_POINTER (DECL_NAME (arg)));\n \t    }\n \t  else\n \t    /* Output the parameter declaration */\n-\t    cat (type_as_string (arg, TS_CHASE_TYPEDEFS));\n+\t    cat (type_as_string (arg, TFF_CHASE_TYPEDEF));\n \t  continue;\n \t}\n       else\n@@ -3573,7 +3573,7 @@ mangle_class_name_for_template (name, parms, arglist)\n \t}\n       /* No need to check arglist against parmlist here; we did that\n \t in coerce_template_parms, called from lookup_template_class.  */\n-      cat (expr_as_string (arg, 0));\n+      cat (expr_as_string (arg, TFF_PLAIN_IDENTIFIER));\n     }\n   {\n     char *bufp = obstack_next_free (&scratch_obstack);"}, {"sha": "bb486a497bc193ae558b5cf0764116f8fa6439c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -1,3 +1,8 @@\n+2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/memtemp77.C (main): Adjust comparison against.\n+\t__PRETTY_FUNCTION__\n+\n 2000-10-29  Neil Booth  <neilb@earthling.net>\n \n \t* gcc.dg/cpp/defined.c, include1.c, paste11.c, skipping.c:"}, {"sha": "d8d70c51f8fc0d2a6837a16474b7a421f4808ec4", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp77.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761f08559a620527018829cc343b9648d4b001a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761f08559a620527018829cc343b9648d4b001a8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp77.C?ref=761f08559a620527018829cc343b9648d4b001a8", "patch": "@@ -18,7 +18,7 @@ const char* S3<char>::h(int) { return __PRETTY_FUNCTION__; }\n int main()\n {\n   if (strcmp (S3<double>::h(7), \n-\t      \"const char* S3<T>::h(U) [with U = int, T = double]\") == 0)\n+\t      \"static const char* S3<T>::h(U) [with U = int, T = double]\") == 0)\n     return 0;\n   else \n     return 1;"}]}