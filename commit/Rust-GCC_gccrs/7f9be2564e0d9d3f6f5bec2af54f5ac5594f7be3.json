{"sha": "7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5YmUyNTY0ZTBkOWQzZjZmNWJlYzJhZjU0ZjVhYzU1OTRmN2JlMw==", "commit": {"author": {"name": "Thiemo Seufer", "email": "seufer@csv.ica.uni-stuttgart.de", "date": "2004-02-11T10:15:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-02-11T10:15:17Z"}, "message": "mips.h (TARGET_OLDABI): Define.\n\n\t* config/mips/mips.h (TARGET_OLDABI): Define. Use TARGET_NEWABI and\n\tTARGET_LODABI consistently.\n\t* config/mips/mips.c (function_arg,mips_setup_incoming_varargs,\n\tmips_va_arg,override_options,compute_frame_size,\n\tmips_initial_elimination_offset,mips16_fp_args,build_mips16_call_stub\n\t,mips_return_in_memory,mips_strict_argument_naming): Use TARGET_NEWABI\n\tand TARGET_LODABI consistently.\n\t* config/mips/mips.md (exception_receiver): Likewise.\n\t* config/mips/linux64.h: Likewise.\n\nFrom-SVN: r77643", "tree": {"sha": "eb6f5996b9d181e53787abe0d079b47febd9c57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb6f5996b9d181e53787abe0d079b47febd9c57f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/comments", "author": null, "committer": null, "parents": [{"sha": "6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0ef01e47ee5fa08d471d5801417942ecfdb3f9"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "a87df987f4dc22284a6bebeb8b9fb450a4997ab2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "patch": "@@ -1,3 +1,15 @@\n+2004-02-11  Thiemo Seufer  <seufer@csv.ica.uni-stuttgart.de>\n+\n+\t* config/mips/mips.h (TARGET_OLDABI): Define. Use TARGET_NEWABI and\n+\tTARGET_LODABI consistently.\n+\t* config/mips/mips.c (function_arg,mips_setup_incoming_varargs,\n+\tmips_va_arg,override_options,compute_frame_size,\n+\tmips_initial_elimination_offset,mips16_fp_args,build_mips16_call_stub\n+\t,mips_return_in_memory,mips_strict_argument_naming): Use TARGET_NEWABI\n+\tand TARGET_LODABI consistently.\n+\t* config/mips/mips.md (exception_receiver): Likewise.\n+\t* config/mips/linux64.h: Likewise.\n+\n 2004-02-11  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* gcc/config/rs6000/rs6000.c (rs6000_override_options)"}, {"sha": "99ca55e7f398606a057d2ace10b8d149d9fd2775", "filename": "gcc/config/mips/linux64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux64.h?ref=7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "patch": "@@ -74,8 +74,7 @@ Boston, MA 02111-1307, USA.  */\n %{mabi=32:-melf32%{EB:b}%{EL:l}tsmip}\"\n \n #undef LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX ((mips_abi == ABI_32 || mips_abi == ABI_O64) \\\n-\t\t\t    ? \"$\" : \".\")\n+#define LOCAL_LABEL_PREFIX (TARGET_OLDABI ? \"$\" : \".\")\n \n /* The size in bytes of a DWARF field indicating an offset or length\n    relative to a debug info section, specified to be 4 bytes in the DWARF-2"}, {"sha": "4d3a5bfda5593b3873b46a23ef530128b3ca5574", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "patch": "@@ -3795,7 +3795,7 @@ function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   if (type != 0\n       && TREE_CODE (type) == RECORD_TYPE\n-      && (mips_abi == ABI_N32 || mips_abi == ABI_64)\n+      && TARGET_NEWABI\n       && TYPE_SIZE_UNIT (type)\n       && host_integerp (TYPE_SIZE_UNIT (type), 1)\n       && named)\n@@ -4002,7 +4002,7 @@ mips_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t    }\n \t}\n     }\n-  if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n+  if (TARGET_OLDABI)\n     {\n       /* No need for pretend arguments: the register parameter area was\n \t allocated by the caller.  */\n@@ -4392,8 +4392,7 @@ mips_va_arg (tree valist, tree type)\n \t that alignments <= UNITS_PER_WORD are preserved by the va_arg\n \t increment mechanism.  */\n \n-      if ((mips_abi == ABI_N32 || mips_abi == ABI_64)\n-\t  && TYPE_ALIGN (type) > 64)\n+      if (TARGET_NEWABI && TYPE_ALIGN (type) > 64)\n \talign = 16;\n       else if (TARGET_64BIT)\n \talign = 8;\n@@ -4742,7 +4741,7 @@ override_options (void)\n \t}\n     }\n \n-  if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n+  if (!TARGET_OLDABI)\n     flag_pcc_struct_return = 0;\n \n #if defined(USE_COLLECT2)\n@@ -6425,7 +6424,7 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   /* Add in space reserved on the stack by the callee for storing arguments\n      passed in registers.  */\n-  if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n+  if (!TARGET_OLDABI)\n     total_size += MIPS_STACK_ALIGN (current_function_pretend_args_size);\n \n   /* Save other computed information.  */\n@@ -6496,7 +6495,7 @@ mips_initial_elimination_offset (int from, int to)\n \n     case ARG_POINTER_REGNUM:\n       offset = cfun->machine->frame.total_size;\n-      if (mips_abi == ABI_N32 || mips_abi == ABI_64)\n+      if (TARGET_NEWABI)\n \toffset -= current_function_pretend_args_size;\n       break;\n \n@@ -7854,7 +7853,7 @@ mips16_fp_args (FILE *file, int fp_code, int from_fp_p)\n   unsigned int f;\n \n   /* This code only works for the original 32 bit ABI and the O64 ABI.  */\n-  if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n+  if (!TARGET_OLDABI)\n     abort ();\n \n   if (from_fp_p)\n@@ -8051,7 +8050,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n \n   /* This code will only work for o32 and o64 abis.  The other ABI's\n      require more sophisticated support.  */\n-  if (mips_abi != ABI_32 && mips_abi != ABI_O64)\n+  if (!TARGET_OLDABI)\n     abort ();\n \n   /* We can only handle SFmode and DFmode floating point return\n@@ -9357,7 +9356,7 @@ mips_hard_regno_nregs (int regno, enum machine_mode mode)\n static bool\n mips_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n {\n-  if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n+  if (TARGET_OLDABI)\n     return (TYPE_MODE (type) == BLKmode);\n   else\n     return ((int_size_in_bytes (type) > (2 * UNITS_PER_WORD))\n@@ -9367,7 +9366,7 @@ mips_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n static bool\n mips_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n {\n-  return (mips_abi != ABI_32 && mips_abi != ABI_O64);\n+  return !TARGET_OLDABI;\n }\n \n static int"}, {"sha": "616557c5e9b71fa2b967d287c16a08d2851a654e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "patch": "@@ -347,6 +347,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1)\n #define TUNE_SR71K                  (mips_tune == PROCESSOR_SR71000)\n \n+#define TARGET_OLDABI\t\t    (mips_abi == ABI_32 || mips_abi == ABI_O64)\n #define TARGET_NEWABI\t\t    (mips_abi == ABI_N32 || mips_abi == ABI_64)\n \n /* IRIX specific stuff.  */\n@@ -798,9 +799,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n /* True if the ABI can only work with 64-bit integer registers.  We\n    generally allow ad-hoc variations for TARGET_SINGLE_FLOAT, but\n    otherwise floating-point registers must also be 64-bit.  */\n-#define ABI_NEEDS_64BIT_REGS\t(mips_abi == ABI_64\t\t\t\\\n-\t\t\t\t || mips_abi == ABI_O64\t\t\t\\\n-\t\t\t\t || mips_abi == ABI_N32)\n+#define ABI_NEEDS_64BIT_REGS\t(TARGET_NEWABI || mips_abi == ABI_O64)\n \n /* Likewise for 32-bit regs.  */\n #define ABI_NEEDS_32BIT_REGS\t(mips_abi == ABI_32)\n@@ -1334,8 +1333,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n-#define LONG_DOUBLE_TYPE_SIZE \\\n-  (mips_abi == ABI_N32 || mips_abi == ABI_64 ? 128 : 64)\n+#define LONG_DOUBLE_TYPE_SIZE (TARGET_NEWABI ? 128 : 64)\n \n /* long double is not a fixed mode, but the idea is that, if we\n    support long double, we also want a 128-bit integer type.  */\n@@ -1358,8 +1356,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define POINTERS_EXTEND_UNSIGNED 0\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n-#define PARM_BOUNDARY ((mips_abi == ABI_O64 || mips_abi == ABI_N32 \\\n-\t\t\t|| mips_abi == ABI_64 \\\n+#define PARM_BOUNDARY ((mips_abi == ABI_O64 \\\n+\t\t\t|| TARGET_NEWABI \\\n \t\t\t|| (mips_abi == ABI_EABI && TARGET_64BIT)) ? 64 : 32)\n \n \n@@ -2164,7 +2162,7 @@ extern enum reg_class mips_char_to_class[256];\n \n /* o32 and o64 reserve stack space for all argument registers.  */\n #define REG_PARM_STACK_SPACE(FNDECL) \t\t\t\\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64)\t\t\\\n+  (TARGET_OLDABI\t\t\t\t\t\\\n    ? (MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD)\t\t\\\n    : 0)\n \n@@ -2175,10 +2173,7 @@ extern enum reg_class mips_char_to_class[256];\n    `current_function_outgoing_args_size'.  */\n #define OUTGOING_REG_PARM_STACK_SPACE\n \n-#define STACK_BOUNDARY \\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64 || mips_abi == ABI_EABI) \\\n-   ? 64 : 128)\n-\n+#define STACK_BOUNDARY ((TARGET_OLDABI || mips_abi == ABI_EABI) ? 64 : 128)\n \f\n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n \n@@ -2188,8 +2183,7 @@ extern enum reg_class mips_char_to_class[256];\n #define GP_RETURN (GP_REG_FIRST + 2)\n #define FP_RETURN ((TARGET_SOFT_FLOAT) ? GP_RETURN : (FP_REG_FIRST + 0))\n \n-#define MAX_ARGS_IN_REGISTERS \\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64) ? 4 : 8)\n+#define MAX_ARGS_IN_REGISTERS (TARGET_OLDABI ? 4 : 8)\n \n /* Largest possible value of MAX_ARGS_IN_REGISTERS.  */\n \n@@ -2373,7 +2367,7 @@ typedef struct mips_args {\n /* Treat LOC as a byte offset from the stack pointer and round it up\n    to the next fully-aligned offset.  */\n #define MIPS_STACK_ALIGN(LOC)\t\t\t\t\t\t\\\n-  ((mips_abi == ABI_32 || mips_abi == ABI_O64 || mips_abi == ABI_EABI)\t\\\n+  ((TARGET_OLDABI || mips_abi == ABI_EABI)\t\t\t\t\\\n    ? ((LOC) + 7) & ~7\t\t\t\t\t\t\t\\\n    : ((LOC) + 15) & ~15)\n \n@@ -2396,7 +2390,7 @@ typedef struct mips_args {\n   fprintf (FILE, \"\\t.set\\tnoat\\n\");\t\t\t\t\t\\\n   fprintf (FILE, \"\\tmove\\t%s,%s\\t\\t# save current return address\\n\",\t\\\n \t   reg_names[GP_REG_FIRST + 1], reg_names[GP_REG_FIRST + 31]);\t\\\n-  if (mips_abi != ABI_N32 && mips_abi != ABI_64)\t\t\t\\\n+  if (!TARGET_NEWABI)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (FILE,\t\t\t\t\t\t\t\\\n \t       \"\\t%s\\t%s,%s,%d\\t\\t# _mcount pops 2 words from  stack\\n\", \\\n@@ -3386,9 +3380,7 @@ while (0)\n /* See mips_expand_prologue's use of loadgp for when this should be\n    true.  */\n \n-#define DONT_ACCESS_GBLS_AFTER_EPILOGUE (TARGET_ABICALLS \t\t\\\n-\t\t\t\t\t && mips_abi != ABI_32\t\t\\\n-\t\t\t\t\t && mips_abi != ABI_O64)\n+#define DONT_ACCESS_GBLS_AFTER_EPILOGUE (TARGET_ABICALLS && !TARGET_OLDABI)\n \f\n \n #define DFMODE_NAN \\"}, {"sha": "a1b083fa27b3b75c3f25471af9fb2a54dd956b93", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7f9be2564e0d9d3f6f5bec2af54f5ac5594f7be3", "patch": "@@ -8318,7 +8318,7 @@ ld\\t%2,%1-%S1(%2)\\;daddu\\t%2,%2,$31\\;%*j\\t%2%/\"\n (define_insn \"exception_receiver\"\n   [(set (reg:SI 28)\n \t(unspec_volatile:SI [(const_int 0)] UNSPEC_EH_RECEIVER))]\n-  \"TARGET_ABICALLS && (mips_abi == ABI_32 || mips_abi == ABI_O64)\"\n+  \"TARGET_ABICALLS && TARGET_OLDABI\"\n {\n   operands[0] = pic_offset_table_rtx;\n   operands[1] = mips_gp_save_slot ();"}]}