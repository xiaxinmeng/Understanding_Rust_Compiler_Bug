{"sha": "ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "node_id": "C_kwDOANBUbNoAKGFjNzRiM2Y4MmIzMzk1NjliMzRkYzlkMTMzMGMyZmFmNzRhMWM4MmE", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-05-12T13:11:20Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-16T19:33:59Z"}, "message": "RISC-V: Split \"(a & (1UL << bitno)) ? 0 : 1\" to bext + xori\n\nWe avoid reassociating \"(~(a >> BIT_NO)) & 1\" into \"((~a) >> BIT_NO) & 1\"\nby splitting it into a zero-extraction (bext) and an xori.  This both\navoids burning a register on a temporary and generates a sequence that\nclearly captures 'extract bit, then invert bit'.\n\nThis change improves the previously generated\n    srl   a0,a0,a1\n    not\t  a0,a0\n    andi  a0,a0,1\ninto\n    bext  a0,a0,a1\n    xori  a0,a0,1\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@vrull.eu>\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Add split covering\n\t\"(a & (1 << BIT_NO)) ? 0 : 1\".\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bext.c: Add testcases.\n\t* gcc.target/riscv/zbs-bexti.c: Add testcases.", "tree": {"sha": "26f835ee3d901e962166843fe7ad78d6628b48d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26f835ee3d901e962166843fe7ad78d6628b48d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32462550f2803aafb726b5ae20d4d95ce36dcd9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32462550f2803aafb726b5ae20d4d95ce36dcd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32462550f2803aafb726b5ae20d4d95ce36dcd9c"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "fb062f6eb43c4d19064f7bbc7996feae9fb5ebbe", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "patch": "@@ -414,3 +414,18 @@\n   \"TARGET_ZBS && UINTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n   \"bexti\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n+\n+;; Split for \"(a & (1 << BIT_NO)) ? 0 : 1\":\n+;; We avoid reassociating \"(~(a >> BIT_NO)) & 1\" into \"((~a) >> BIT_NO) & 1\",\n+;; so we don't have to use a temporary.  Instead we extract the bit and then\n+;; invert bit 0 (\"a ^ 1\") only.\n+(define_split\n+  [(set (match_operand:X 0 \"register_operand\")\n+\t(and:X (not:X (lshiftrt:X (match_operand:X 1 \"register_operand\")\n+\t\t\t\t  (subreg:QI (match_operand:X 2 \"register_operand\") 0)))\n+\t       (const_int 1)))]\n+  \"TARGET_ZBS\"\n+  [(set (match_dup 0) (zero_extract:X (match_dup 1)\n+\t\t\t\t      (const_int 1)\n+\t\t\t\t      (match_dup 2)))\n+   (set (match_dup 0) (xor:X (match_dup 0) (const_int 1)))])"}, {"sha": "a8aadb60390994bfe4f52f2566881a27aa8971c5", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bext.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c?ref=ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "patch": "@@ -23,16 +23,22 @@ long bext64_1(long a, char bitno)\n \n long bext64_2(long a, char bitno)\n {\n-  return (a & (1UL << bitno)) ? 0 : -1;\n+  return (a & (1UL << bitno)) ? 0 : 1;\n }\n \n long bext64_3(long a, char bitno)\n+{\n+  return (a & (1UL << bitno)) ? 0 : -1;\n+}\n+\n+long bext64_4(long a, char bitno)\n {\n   return (a & (1UL << bitno)) ? -1 : 0;\n }\n \n /* { dg-final { scan-assembler-times \"bexti\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bext\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"bext\\t\" 5 } } */\n+/* { dg-final { scan-assembler-times \"xori\\t|snez\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"addi\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"neg\\t\" 1 } } */\n /* { dg-final { scan-assembler-not \"andi\" } } */\n\\ No newline at end of file"}, {"sha": "c15098eb6ccdd0524883d598d03fe5aae1a2768f", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bexti.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac74b3f82b339569b34dc9d1330c2faf74a1c82a/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bexti.c?ref=ac74b3f82b339569b34dc9d1330c2faf74a1c82a", "patch": "@@ -12,14 +12,20 @@ long bexti64_1(long a, char bitno)\n \n long bexti64_2(long a, char bitno)\n {\n-  return (a & (1UL << BIT_NO)) ? 0 : -1;\n+  return (a & (1UL << BIT_NO)) ? 0 : 1;\n }\n \n long bexti64_3(long a, char bitno)\n+{\n+  return (a & (1UL << BIT_NO)) ? 0 : -1;\n+}\n+\n+long bexti64_4(long a, char bitno)\n {\n   return (a & (1UL << BIT_NO)) ? -1 : 0;\n }\n \n-/* { dg-final { scan-assembler-times \"bexti\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"bexti\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xori\\t|snez\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"addi\\t\" 1 } } */\n /* { dg-final { scan-assembler-times \"neg\\t\" 1 } } */"}]}