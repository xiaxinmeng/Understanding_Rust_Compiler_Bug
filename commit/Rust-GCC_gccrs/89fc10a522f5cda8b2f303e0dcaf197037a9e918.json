{"sha": "89fc10a522f5cda8b2f303e0dcaf197037a9e918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmYzEwYTUyMmY1Y2RhOGIyZjMwM2UwZGNhZjE5NzAzN2E5ZTkxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-13T16:52:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-11-13T16:52:37Z"}, "message": "Duh, missed this.\n\nFrom-SVN: r46989", "tree": {"sha": "400db512bc04b2ad66268418c2df81a7d1beef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400db512bc04b2ad66268418c2df81a7d1beef27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89fc10a522f5cda8b2f303e0dcaf197037a9e918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89fc10a522f5cda8b2f303e0dcaf197037a9e918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89fc10a522f5cda8b2f303e0dcaf197037a9e918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89fc10a522f5cda8b2f303e0dcaf197037a9e918/comments", "author": null, "committer": null, "parents": [{"sha": "630036c6a3f9d08629ee070b58890837d6c5c476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630036c6a3f9d08629ee070b58890837d6c5c476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630036c6a3f9d08629ee070b58890837d6c5c476"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "05ad48f6cbee09ba63b426d9887aa2f8f07b2c6a", "filename": "gcc/expr.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89fc10a522f5cda8b2f303e0dcaf197037a9e918/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89fc10a522f5cda8b2f303e0dcaf197037a9e918/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=89fc10a522f5cda8b2f303e0dcaf197037a9e918", "patch": "@@ -627,14 +627,26 @@ extern rtx change_address PARAMS ((rtx, enum machine_mode, rtx));\n /* Return a memory reference like MEMREF, but with its mode changed\n    to MODE and its address offset by OFFSET bytes.  */\n #define adjust_address(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 1)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 1, 1)\n \n /* Likewise, but the reference is not required to be valid.  */\n #define adjust_address_nv(MEMREF, MODE, OFFSET) \\\n-  adjust_address_1 (MEMREF, MODE, OFFSET, 0)\n+  adjust_address_1 (MEMREF, MODE, OFFSET, 0, 1)\n+\n+/* Return a memory reference like MEMREF, but with its mode changed\n+   to MODE and its address changed to ADDR, which is assumed to be\n+   increased by OFFSET bytes from MEMREF.  */\n+#define adjust_automodify_address(MEMREF, MODE, ADDR, OFFSET) \\\n+  adjust_automodify_address_1 (MEMREF, MODE, ADDR, OFFSET, 1)\n+\n+/* Likewise, but the reference is not required to be valid.  */\n+#define adjust_automodify_address_nv(MEMREF, MODE, ADDR, OFFSET) \\\n+  adjust_automodify_address_1 (MEMREF, MODE, ADDR, OFFSET, 0)\n \n extern rtx adjust_address_1 PARAMS ((rtx, enum machine_mode, HOST_WIDE_INT,\n-\t\t\t\t     int));\n+\t\t\t\t     int, int));\n+extern rtx adjust_automodify_address_1 PARAMS ((rtx, enum machine_mode,\n+\t\t\t\t\t\trtx, HOST_WIDE_INT, int));\n \n /* Return a memory reference like MEMREF, but whose address is changed by\n    adding OFFSET, an RTX, to it.  POW2 is the highest power of two factor"}]}