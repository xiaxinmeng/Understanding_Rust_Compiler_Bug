{"sha": "8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGExNTYxYmNkMDdjOGU2MzBmMWU3NDkyYzM2NGE2NjRkZDZmM2Q2OQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2010-06-30T16:34:22Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-06-30T16:34:22Z"}, "message": "re PR bootstrap/44699 (Bootstrap failure for x86_64-apple-darwin10: ICE while compiling genmodes.c)\n\n\tPR bootstrap/44699\n\t* tree-vrp.c (vrp_finalize): Deal with changing num_ssa_names.\n\t* gimple-fold.c (gimplify_and_update_call_from_tree): If LHS is\n\ta gimple reg, attach the original VDEF to the last store in the\n\tsequence.\n\ntestsuite/\n\tPR bootstrap/44699\n\t* gcc.dg/pr44699.c: New test.\n\nFrom-SVN: r161614", "tree": {"sha": "2852023f84692231142ea669a9e5ceed97a70395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2852023f84692231142ea669a9e5ceed97a70395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b180c51344c45d4b0b4a792de68b634f4a354cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b180c51344c45d4b0b4a792de68b634f4a354cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b180c51344c45d4b0b4a792de68b634f4a354cd"}], "stats": {"total": 201, "additions": 193, "deletions": 8}, "files": [{"sha": "ff37f0cbcb4ca3700ae046d9866a56fdae282fa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "patch": "@@ -1,3 +1,11 @@\n+2010-06-30  Michael Matz  <matz@suse.de>\n+\n+\tPR bootstrap/44699\n+\t* tree-vrp.c (vrp_finalize): Deal with changing num_ssa_names.\n+\t* gimple-fold.c (gimplify_and_update_call_from_tree): If LHS is\n+\ta gimple reg, attach the original VDEF to the last store in the\n+\tsequence.\n+\n 2010-06-30  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR other/44034"}, {"sha": "a1fc0201473ee2d4d2dd6f6b34d121d31703fecf", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "patch": "@@ -1133,7 +1133,8 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n       if (gimple_vdef (stmt) && laststore)\n \t{\n \t  gimple_set_vdef (laststore, gimple_vdef (stmt));\n-\t  move_ssa_defining_stmt_for_defs (laststore, stmt);\n+\t  if (TREE_CODE (gimple_vdef (stmt)) == SSA_NAME)\n+\t    SSA_NAME_DEF_STMT (gimple_vdef (stmt)) = laststore;\n \t  update_stmt (laststore);\n \t}\n       else\n@@ -1150,17 +1151,30 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n \t  gsi_insert_before (si_p, last, GSI_NEW_STMT);\n \t  gsi_next (si_p);\n \t}\n-      if (laststore)\n+      if (laststore && is_gimple_reg (lhs))\n+\t{\n+\t  gimple_set_vdef (laststore, gimple_vdef (stmt));\n+\t  update_stmt (laststore);\n+\t  if (TREE_CODE (gimple_vdef (stmt)) == SSA_NAME)\n+\t    SSA_NAME_DEF_STMT (gimple_vdef (stmt)) = laststore;\n+\t  laststore = NULL;\n+\t}\n+      else if (laststore)\n \t{\n \t  reaching_vuse = make_ssa_name (gimple_vop (cfun), laststore);\n \t  gimple_set_vdef (laststore, reaching_vuse);\n \t  update_stmt (laststore);\n \t  laststore = NULL;\n \t}\n       new_stmt = gimple_build_assign (lhs, tmp);\n-      gimple_set_vuse (new_stmt, reaching_vuse);\n-      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n-      move_ssa_defining_stmt_for_defs (new_stmt, stmt);\n+      if (!is_gimple_reg (tmp))\n+\tgimple_set_vuse (new_stmt, reaching_vuse);\n+      if (!is_gimple_reg (lhs))\n+\t{\n+\t  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t  if (TREE_CODE (gimple_vdef (stmt)) == SSA_NAME)\n+\t    SSA_NAME_DEF_STMT (gimple_vdef (stmt)) = new_stmt;\n+\t}\n     }\n \n   gimple_set_location (new_stmt, gimple_location (stmt));"}, {"sha": "136c37b57a900d5779ea7da573dd872472cd2ce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "patch": "@@ -1,3 +1,8 @@\n+2010-06-30  Michael Matz  <matz@suse.de>\n+\n+\tPR bootstrap/44699\n+\t* gcc.dg/pr44699.c: New test.\n+\n 2010-06-30  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR tree-optimization/39799"}, {"sha": "601cc78f5726ea159e9ea51e314c7c842797a9ad", "filename": "gcc/testsuite/gcc.dg/pr44699.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44699.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44699.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44699.c?ref=8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+typedef long unsigned int size_t;\n+typedef long int intmax_t;\n+typedef long unsigned int uintmax_t;\n+extern void *xmalloc (size_t) __attribute__ ((__malloc__));\n+extern const char *trim_filename (const char *);\n+\n+static __inline void *\n+__inline_memcpy_chk (void *__dest, const void *__src, size_t __len)\n+{\n+  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));\n+}\n+\n+typedef unsigned int hashval_t;\n+typedef hashval_t (*htab_hash) (const void *);\n+typedef int (*htab_eq) (const void *, const void *);\n+typedef void (*htab_del) (void *);\n+typedef int (*htab_trav) (void **, void *);\n+typedef void *(*htab_alloc) (size_t, size_t);\n+typedef void (*htab_free) (void *);\n+\n+typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);\n+typedef void (*htab_free_with_arg) (void *, void *);\n+struct htab {\n+  htab_hash hash_f;\n+  htab_eq eq_f;\n+  htab_del del_f;\n+  void ** entries;\n+  size_t size;\n+  size_t n_elements;\n+  size_t n_deleted;\n+  unsigned int searches;\n+  unsigned int collisions;\n+  htab_alloc alloc_f;\n+  htab_free free_f;\n+  void * alloc_arg;\n+  htab_alloc_with_arg alloc_with_arg_f;\n+  htab_free_with_arg free_with_arg_f;\n+  unsigned int size_prime_index;\n+};\n+\n+typedef struct htab *htab_t;\n+enum insert_option {NO_INSERT, INSERT};\n+extern void * htab_find (htab_t, const void *);\n+extern void ** htab_find_slot (htab_t, const void *, enum insert_option);\n+\n+enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };\n+\n+static const char *const mode_class_names[MAX_MODE_CLASS] =\n+{\n+  \"MODE_RANDOM\", \"MODE_CC\", \"MODE_INT\", \"MODE_PARTIAL_INT\", \"MODE_FRACT\", \"MODE_UFRACT\", \"MODE_ACCUM\", \"MODE_UACCUM\", \"MODE_FLOAT\", \"MODE_DECIMAL_FLOAT\", \"MODE_COMPLEX_INT\", \"MODE_COMPLEX_FLOAT\", \"MODE_VECTOR_INT\", \"MODE_VECTOR_FRACT\", \"MODE_VECTOR_UFRACT\", \"MODE_VECTOR_ACCUM\", \"MODE_VECTOR_UACCUM\", \"MODE_VECTOR_FLOAT\"\n+};\n+struct mode_data\n+{\n+  struct mode_data *next;\n+\n+  const char *name;\n+  enum mode_class cl;\n+  unsigned int precision;\n+  unsigned int bytesize;\n+  unsigned int ncomponents;\n+  unsigned int alignment;\n+  const char *format;\n+\n+  struct mode_data *component;\n+  struct mode_data *wider;\n+  struct mode_data *wider_2x;\n+\n+  struct mode_data *contained;\n+\n+  struct mode_data *next_cont;\n+\n+  const char *file;\n+  unsigned int line;\n+  unsigned int counter;\n+  unsigned int ibit;\n+  unsigned int fbit;\n+};\n+\n+static struct mode_data *modes[MAX_MODE_CLASS];\n+static unsigned int n_modes[MAX_MODE_CLASS];\n+static struct mode_data *void_mode;\n+\n+static const struct mode_data blank_mode = {\n+  0, \"<unknown>\", MAX_MODE_CLASS,\n+  -1U, -1U, -1U, -1U,\n+  0, 0, 0, 0, 0, 0,\n+  \"<unknown>\", 0, 0, 0, 0\n+};\n+\n+static htab_t modes_by_name;\n+\n+static __inline__ struct mode_data *\n+find_mode (const char *name)\n+{\n+  struct mode_data key;\n+\n+  key.name = name;\n+  return (struct mode_data *) htab_find (modes_by_name, &key);\n+}\n+\n+static struct mode_data *\n+new_mode (enum mode_class cl, const char *name,\n+   const char *file, unsigned int line)\n+{\n+  struct mode_data *m;\n+  static unsigned int count = 0;\n+\n+  m = find_mode (name);\n+  if (m)\n+    {\n+      error (\"%s:%d: duplicate definition of mode \\\"%s\\\"\",\n+      trim_filename (file), line, name);\n+      error (\"%s:%d: previous definition here\", m->file, m->line);\n+      return m;\n+    }\n+\n+  m = ((struct mode_data *) xmalloc (sizeof (struct mode_data)));\n+  ((__builtin_object_size (m, 0) != (size_t) -1) ? __builtin___memcpy_chk (m, &blank_mode, sizeof (struct mode_data), __builtin_object_size (m, 0)) : __inline_memcpy_chk (m, &blank_mode, sizeof (struct mode_data)));\n+  m->cl = cl;\n+  m->name = name;\n+  if (file)\n+    m->file = trim_filename (file);\n+  m->line = line;\n+  m->counter = count++;\n+\n+  m->next = modes[cl];\n+  modes[cl] = m;\n+  n_modes[cl]++;\n+\n+  *htab_find_slot (modes_by_name, m, INSERT) = m;\n+\n+  return m;\n+}\n+\n+static void\n+make_int_mode (const char *name,\n+        unsigned int precision, unsigned int bytesize,\n+        const char *file, unsigned int line)\n+{\n+  struct mode_data *m = new_mode (MODE_INT, name, file, line);\n+  m->bytesize = bytesize;\n+  m->precision = precision;\n+}\n+\n+static void\n+create_modes (void)\n+{\n+make_int_mode (\"HI\", -1U, 2, \"../../work/gcc/machmode.def\", 182);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  create_modes ();\n+}"}, {"sha": "3da2dc84e9d75aeef2843cf17fee3de0441953a2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a1561bcd07c8e630f1e7492c364a664dd6f3d69/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8a1561bcd07c8e630f1e7492c364a664dd6f3d69", "patch": "@@ -7315,6 +7315,7 @@ vrp_finalize (void)\n   size_t i;\n   prop_value_t *single_val_range;\n   bool do_value_subst_p;\n+  unsigned num = num_ssa_names;\n \n   if (dump_file)\n     {\n@@ -7326,10 +7327,10 @@ vrp_finalize (void)\n   /* We may have ended with ranges that have exactly one value.  Those\n      values can be substituted as any other const propagated\n      value using substitute_and_fold.  */\n-  single_val_range = XCNEWVEC (prop_value_t, num_ssa_names);\n+  single_val_range = XCNEWVEC (prop_value_t, num);\n \n   do_value_subst_p = false;\n-  for (i = 0; i < num_ssa_names; i++)\n+  for (i = 0; i < num; i++)\n     if (vr_value[i]\n \t&& vr_value[i]->type == VR_RANGE\n \t&& vr_value[i]->min == vr_value[i]->max\n@@ -7357,7 +7358,7 @@ vrp_finalize (void)\n   identify_jump_threads ();\n \n   /* Free allocated memory.  */\n-  for (i = 0; i < num_ssa_names; i++)\n+  for (i = 0; i < num; i++)\n     if (vr_value[i])\n       {\n \tBITMAP_FREE (vr_value[i]->equiv);"}]}