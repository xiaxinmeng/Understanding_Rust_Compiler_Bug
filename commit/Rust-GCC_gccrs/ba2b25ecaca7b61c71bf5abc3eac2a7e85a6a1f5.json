{"sha": "ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyYjI1ZWNhY2E3YjYxYzcxYmY1YWJjM2VhYzJhN2U4NWE2YTFmNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-20T14:40:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-20T14:40:09Z"}, "message": "loop.c (emit_iv_add_mult): Simplify it's input and emit REG_EQUAL note explaining the calculated value.\n\n\t* loop.c (emit_iv_add_mult):  Simplify it's input and emit\n\tREG_EQUAL note explaining the calculated value.\n\nFrom-SVN: r33283", "tree": {"sha": "09436f851ad49462ce2072e4d8a9c2fa862584fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09436f851ad49462ce2072e4d8a9c2fa862584fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5/comments", "author": null, "committer": null, "parents": [{"sha": "a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "d863072038fc72ec3dcd92d79a1a6ba9856e3b05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "patch": "@@ -1,5 +1,8 @@\n Thu Apr 20 14:19:18 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n+\t* loop.c (emit_iv_add_mult):  Simplify it's input and emit\n+\tREG_EQUAL note explaining the calculated value.\n+\n \t* calls.c (expand_call): Avoid unnecesary precalculation\n \tand outgoing parameters space guarding for sibling calls.\n \t(store_one_arg): Likewise."}, {"sha": "7dd557da20a3609bf910597f8d3a603d7561f461", "filename": "gcc/loop.c", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ba2b25ecaca7b61c71bf5abc3eac2a7e85a6a1f5", "patch": "@@ -7640,11 +7640,24 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n {\n   rtx seq;\n   rtx result;\n+  rtx last;\n+  rtx set;\n+  rtx exp;\n+  enum machine_mode mode = GET_MODE (reg);\n \n   /* Prevent unexpected sharing of these rtx.  */\n   a = copy_rtx (a);\n   b = copy_rtx (b);\n \n+  /* We may be faced to (plus (symbol_ref) (const_int)).  We want to simplify\n+     this to CONST rtx.  */\n+  exp = simplify_rtx (a);\n+  if (exp)\n+    a = exp;\n+  exp = simplify_rtx (b);\n+  if (exp)\n+    b = exp;\n+\n   /* Increase the lifetime of any invariants moved further in code.  */\n   update_reg_last_use (a, insert_before);\n   update_reg_last_use (b, insert_before);\n@@ -7657,7 +7670,7 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n   seq = gen_sequence ();\n   end_sequence ();\n \n-  emit_insn_before (seq, insert_before);\n+  last = emit_insn_before (seq, insert_before);\n \n   /* It is entirely possible that the expansion created lots of new \n      registers.  Iterate over the sequence we just created and \n@@ -7668,14 +7681,47 @@ emit_iv_add_mult (b, m, a, reg, insert_before)\n       int i;\n       for (i = 0; i < XVECLEN (seq, 0); ++i)\n \t{\n-\t  rtx set = single_set (XVECEXP (seq, 0, i));\n+\t  set = single_set (XVECEXP (seq, 0, i));\n \t  if (set && GET_CODE (SET_DEST (set)) == REG)\n \t    record_base_value (REGNO (SET_DEST (set)), SET_SRC (set), 0);\n \t}\n+      last = XVECEXP (seq, 0, i - 1);\n     }\n-  else if (GET_CODE (seq) == SET\n-\t   && GET_CODE (SET_DEST (seq)) == REG)\n-    record_base_value (REGNO (SET_DEST (seq)), SET_SRC (seq), 0);\n+  else\n+    {\n+      set = single_set (last);\n+      if (set && GET_CODE (SET_DEST (set)) == REG)\n+        record_base_value (REGNO (SET_DEST (set)), SET_SRC (set), 0);\n+    }\n+  if (!last)\n+    return;\n+  /* Sequence really ought to end by set storing final value to the register.\n+    \n+     Attach note indicating expression we've just calculated to it.  This is\n+     important for second run of loop optimizer to understand strength reduced\n+     givs from the first run.  */\n+  if (GET_CODE (last) != INSN)\n+    abort();\n+  set = single_set (last);\n+  if (!set)\n+    return;\n+  if (SET_DEST (set) != reg)\n+    abort();\n+\n+  /* In case we start to emit some usefull notes to these insns, get abort\n+     here, since we need to decide what information is more important.  */\n+  if (find_reg_note (last, REG_EQUIV, NULL_RTX)\n+      || find_reg_note (last, REG_EQUAL, NULL_RTX))\n+    abort();\n+\n+  /* Expression we've just caluclated.  */\n+  exp = simplify_gen_binary (PLUS, mode,\n+\t\t\t     simplify_gen_binary (MULT, mode, b, m),\n+\t\t\t     a);\n+  REG_NOTES (last)\n+\t= gen_rtx_EXPR_LIST (REG_EQUAL,\n+\t    \t\t     exp,\n+\t    \t\t     REG_NOTES (last));\n }\n \f\n /* Test whether A * B can be computed without"}]}