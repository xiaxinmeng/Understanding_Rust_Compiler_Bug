{"sha": "08af82b017a63c7a91937af2d6c72232a53de47d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhhZjgyYjAxN2E2M2M3YTkxOTM3YWYyZDZjNzIyMzJhNTNkZTQ3ZA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2013-11-26T16:58:40Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2013-11-26T16:58:40Z"}, "message": "Remove parameter keep_aligning from get_inner_reference.\n\n2013-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Remove parameter keep_aligning from get_inner_reference.\n        * tree.h (get_inner_reference): Adjust header.\n        * expr.c (get_inner_reference): Remove parameter keep_aligning.\n        (get_bit_range, expand_assignment,\n        expand_expr_addr_expr_1, expand_expr_real_1): Adjust.\n        * asan.c (instrument_derefs): Adjust.\n        * builtins.c (get_object_alignment_2): Adjust. Remove handling of\n        VIEW_CONVERT_EXPR.\n        * cfgexpand.c (expand_debug_expr): Adjust.\n        * dbxout.c (dbxout_expand_expr): Adjust.\n        * dwarf2out.c (loc_list_for_address_of_addr_expr_of_indirect_ref,\n        loc_list_from_tree, fortran_common): Adjust.\n        * fold-const.c (optimize_bit_field_compare,\n        decode_field_reference, fold_unary_loc, fold_comparison,\n        split_address_to_core_and_offset): Adjust.\n        * gimple-ssa-strength-reduction.c (slsr_process_ref): Adjust.\n        * simplifx-rtx.c (delegitimize_mem_from_attrs): Adjust.\n        * tree-affine.c (tree_to_aff_combination,\n        get_inner_reference_aff): Adjust.\n        * tree-data-ref.c (split_constant_offset_1,\n        dr_analyze_innermost): Adjust.\n        * tree-vect-data-refs.c (vect_check_gather,\n        vect_analyze_data_refs): Adjust.\n        * tree-scalar-evolution.c (interpret_rhs_expr): Adjust.\n        * tree-ssa-loop-ivopts.c (may_be_unaligned_p,\n        split_address_cost): Adjust.\n        * tsan.c (instrument_expr): Adjust.\n        * ada/gcc-interface/decl.c (elaborate_expression_1): Adjust.\n        * ada/gcc-interface/trans.c (Attribute_to_gnu): Adjust.\n        * ada/gcc-interface/utils2.c (build_unary_op): Adjust.\n        * config/mips/mips.c (r10k_safe_mem_expr_p): Adjust.\n\nFrom-SVN: r205398", "tree": {"sha": "83e80b72a625b55464fa9b30bf680242b4e80a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e80b72a625b55464fa9b30bf680242b4e80a5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08af82b017a63c7a91937af2d6c72232a53de47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08af82b017a63c7a91937af2d6c72232a53de47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08af82b017a63c7a91937af2d6c72232a53de47d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08af82b017a63c7a91937af2d6c72232a53de47d/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97c34bdbe2aa20ef2e74326e0799466176af8c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c34bdbe2aa20ef2e74326e0799466176af8c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c34bdbe2aa20ef2e74326e0799466176af8c5f"}], "stats": {"total": 141, "additions": 72, "deletions": 69}, "files": [{"sha": "11994746d9f098bf7a47b6c8b36a3e4972891d87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -1,3 +1,37 @@\n+2013-11-26  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tRemove parameter keep_aligning from get_inner_reference.\n+\t* tree.h (get_inner_reference): Adjust header.\n+\t* expr.c (get_inner_reference): Remove parameter keep_aligning.\n+\t(get_bit_range, expand_assignment,\n+\texpand_expr_addr_expr_1, expand_expr_real_1): Adjust.\n+\t* asan.c (instrument_derefs): Adjust.\n+\t* builtins.c (get_object_alignment_2): Adjust. Remove handling of\n+\tVIEW_CONVERT_EXPR.\n+\t* cfgexpand.c (expand_debug_expr): Adjust.\n+\t* dbxout.c (dbxout_expand_expr): Adjust.\n+\t* dwarf2out.c (loc_list_for_address_of_addr_expr_of_indirect_ref,\n+\tloc_list_from_tree, fortran_common): Adjust.\n+\t* fold-const.c (optimize_bit_field_compare,\n+\tdecode_field_reference, fold_unary_loc, fold_comparison,\n+\tsplit_address_to_core_and_offset): Adjust.\n+\t* gimple-ssa-strength-reduction.c (slsr_process_ref): Adjust.\n+\t* simplifx-rtx.c (delegitimize_mem_from_attrs): Adjust.\n+\t* tree-affine.c (tree_to_aff_combination,\n+\tget_inner_reference_aff): Adjust.\n+\t* tree-data-ref.c (split_constant_offset_1,\n+\tdr_analyze_innermost): Adjust.\n+\t* tree-vect-data-refs.c (vect_check_gather,\n+\tvect_analyze_data_refs): Adjust.\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Adjust.\n+\t* tree-ssa-loop-ivopts.c (may_be_unaligned_p,\n+\tsplit_address_cost): Adjust.\n+\t* tsan.c (instrument_expr): Adjust.\n+\t* ada/gcc-interface/decl.c (elaborate_expression_1): Adjust.\n+\t* ada/gcc-interface/trans.c (Attribute_to_gnu): Adjust.\n+\t* ada/gcc-interface/utils2.c (build_unary_op): Adjust.\n+\t* config/mips/mips.c (r10k_safe_mem_expr_p): Adjust.\n+\n 2013-11-26  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/arm/arm.c (arm_legitimize_address): Check xop1 is not"}, {"sha": "51adf18e0a32ac058b744f0a9cb765e4bf9f6f34", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -6269,7 +6269,7 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t  int unsignedp, volatilep;\n \n \t  inner = get_inner_reference (inner, &bitsize, &bitpos, &offset,\n-\t\t\t\t       &mode, &unsignedp, &volatilep, false);\n+\t\t\t\t       &mode, &unsignedp, &volatilep);\n \t  /* If the offset is variable, err on the side of caution.  */\n \t  if (offset)\n \t    inner = NULL_TREE;"}, {"sha": "6c7a418662fedc637a9608c04884a29c7e977ec7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -2060,7 +2060,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t\t  && TREE_CODE (gnu_prefix) == FIELD_DECL));\n \n \tget_inner_reference (gnu_prefix, &bitsize, &bitpos, &gnu_offset,\n-\t\t\t     &mode, &unsignedp, &volatilep, false);\n+\t\t\t     &mode, &unsignedp, &volatilep);\n \n \tif (TREE_CODE (gnu_prefix) == COMPONENT_REF)\n \t  {"}, {"sha": "b6299cbeefada57746aa7be27861e152632c34ed", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -1312,8 +1312,7 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t      int unsignedp, volatilep;\n \n \t      inner = get_inner_reference (operand, &bitsize, &bitpos, &offset,\n-\t\t\t\t\t   &mode, &unsignedp, &volatilep,\n-\t\t\t\t\t   false);\n+\t\t\t\t\t   &mode, &unsignedp, &volatilep);\n \n \t      /* If INNER is a padding type whose field has a self-referential\n \t\t size, convert to that inner type.  We know the offset is zero"}, {"sha": "c901e1da380f43a946322a27f84e0bd002e50034", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -1488,7 +1488,7 @@ instrument_derefs (gimple_stmt_iterator *iter, tree t,\n   enum machine_mode mode;\n   int volatilep = 0, unsignedp = 0;\n   tree inner = get_inner_reference (t, &bitsize, &bitpos, &offset,\n-\t\t\t\t    &mode, &unsignedp, &volatilep, false);\n+\t\t\t\t    &mode, &unsignedp, &volatilep);\n   if (bitpos % (size_in_bytes * BITS_PER_UNIT)\n       || bitsize != size_in_bytes * BITS_PER_UNIT)\n     {"}, {"sha": "912c14c1174f73a24b4c5ac27596daabb946c44b", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -329,7 +329,7 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n   /* Get the innermost object and the constant (bitpos) and possibly\n      variable (offset) offset of the access.  */\n   exp = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t     &mode, &unsignedp, &volatilep, true);\n+\t\t\t     &mode, &unsignedp, &volatilep);\n \n   /* Extract alignment information from the innermost object and\n      possibly adjust bitpos and offset.  */\n@@ -360,10 +360,6 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       align = DECL_ALIGN (exp);\n       known_alignment = true;\n     }\n-  else if (TREE_CODE (exp) == VIEW_CONVERT_EXPR)\n-    {\n-      align = TYPE_ALIGN (TREE_TYPE (exp));\n-    }\n   else if (TREE_CODE (exp) == INDIRECT_REF\n \t   || TREE_CODE (exp) == MEM_REF\n \t   || TREE_CODE (exp) == TARGET_MEM_REF)"}, {"sha": "98983f40b3b1da443e848ae6693328bac458b549", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -3941,7 +3941,7 @@ expand_debug_expr (tree exp)\n \ttree offset;\n \tint volatilep = 0;\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t\t\t&mode1, &unsignedp, &volatilep, false);\n+\t\t\t\t\t&mode1, &unsignedp, &volatilep);\n \trtx orig_op0;\n \n \tif (bitsize == 0)"}, {"sha": "69e67be49739fb58d57755c858456e8e516176b6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -14948,7 +14948,7 @@ r10k_safe_mem_expr_p (tree expr, unsigned HOST_WIDE_INT offset)\n   int unsigned_p, volatile_p;\n \n   inner = get_inner_reference (expr, &bitsize, &bitoffset, &var_offset, &mode,\n-\t\t\t       &unsigned_p, &volatile_p, false);\n+\t\t\t       &unsigned_p, &volatile_p);\n   if (!DECL_P (inner) || !DECL_SIZE_UNIT (inner) || var_offset)\n     return false;\n "}, {"sha": "5988c7e1bd4085acc44b4b5b39346ca61ae805da", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -2515,7 +2515,7 @@ dbxout_expand_expr (tree expr)\n \trtx x;\n \n \ttem = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n-\t\t\t\t   &mode, &unsignedp, &volatilep, true);\n+\t\t\t\t   &mode, &unsignedp, &volatilep);\n \n \tx = dbxout_expand_expr (tem);\n \tif (x == NULL || !MEM_P (x))"}, {"sha": "6376306802ab46869e39a97bc46cb7fc7c6b2c6e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -13934,7 +13934,7 @@ loc_list_for_address_of_addr_expr_of_indirect_ref (tree loc, bool toplev)\n \n   obj = get_inner_reference (TREE_OPERAND (loc, 0),\n \t\t\t     &bitsize, &bitpos, &offset, &mode,\n-\t\t\t     &unsignedp, &volatilep, false);\n+\t\t\t     &unsignedp, &volatilep);\n   STRIP_NOPS (obj);\n   if (bitpos % BITS_PER_UNIT)\n     {\n@@ -14211,7 +14211,7 @@ loc_list_from_tree (tree loc, int want_address)\n \tint unsignedp, volatilep = 0;\n \n \tobj = get_inner_reference (loc, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t\t   &unsignedp, &volatilep, false);\n+\t\t\t\t   &unsignedp, &volatilep);\n \n \tgcc_assert (obj != loc);\n \n@@ -15521,7 +15521,7 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n     return NULL_TREE;\n \n   cvar = get_inner_reference (val_expr, &bitsize, &bitpos, &offset,\n-\t\t\t      &mode, &unsignedp, &volatilep, true);\n+\t\t\t      &mode, &unsignedp, &volatilep);\n \n   if (cvar == NULL_TREE\n       || TREE_CODE (cvar) != VAR_DECL"}, {"sha": "dc379dc1094bd59269a4a32dfb8360c3d061ed38", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -4648,7 +4648,7 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n       int unsignedp;\n       int volatilep = 0;\n       get_inner_reference (TREE_OPERAND (exp, 0), &rbitsize, &rbitpos,\n-\t\t\t   &roffset, &rmode, &unsignedp, &volatilep, false);\n+\t\t\t   &roffset, &rmode, &unsignedp, &volatilep);\n       if ((rbitpos % BITS_PER_UNIT) != 0)\n \t{\n \t  *bitstart = *bitend = 0;\n@@ -4802,7 +4802,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \n       push_temp_slots ();\n       tem = get_inner_reference (to, &bitsize, &bitpos, &offset, &mode1,\n-\t\t\t\t &unsignedp, &volatilep, true);\n+\t\t\t\t &unsignedp, &volatilep);\n \n       /* Make sure bitpos is not negative, it can wreak havoc later.  */\n       if (bitpos < 0)\n@@ -6644,27 +6644,13 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \n    If the field describes a variable-sized object, *PMODE is set to\n    BLKmode and *PBITSIZE is set to -1.  An access cannot be made in\n-   this case, but the address of the object can be found.\n-\n-   If KEEP_ALIGNING is true and the target is STRICT_ALIGNMENT, we don't\n-   look through nodes that serve as markers of a greater alignment than\n-   the one that can be deduced from the expression.  These nodes make it\n-   possible for front-ends to prevent temporaries from being created by\n-   the middle-end on alignment considerations.  For that purpose, the\n-   normal operating mode at high-level is to always pass FALSE so that\n-   the ultimate containing object is really returned; moreover, the\n-   associated predicate handled_component_p will always return TRUE\n-   on these nodes, thus indicating that they are essentially handled\n-   by get_inner_reference.  TRUE should only be passed when the caller\n-   is scanning the expression in order to build another representation\n-   and specifically knows how to handle these nodes; as such, this is\n-   the normal operating mode in the RTL expanders.  */\n+   this case, but the address of the object can be found.  */\n \n tree\n get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t\t     HOST_WIDE_INT *pbitpos, tree *poffset,\n \t\t     enum machine_mode *pmode, int *punsignedp,\n-\t\t     int *pvolatilep, bool keep_aligning)\n+\t\t     int *pvolatilep)\n {\n   tree size_tree = 0;\n   enum machine_mode mode = VOIDmode;\n@@ -6784,14 +6770,6 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \t  break;\n \n \tcase VIEW_CONVERT_EXPR:\n-\t  if (keep_aligning && STRICT_ALIGNMENT\n-\t      && (TYPE_ALIGN (TREE_TYPE (exp))\n-\t       > TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t      && (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-\t\t  < BIGGEST_ALIGNMENT)\n-\t      && (TYPE_ALIGN_OK (TREE_TYPE (exp))\n-\t\t  || TYPE_ALIGN_OK (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n-\t    goto done;\n \t  break;\n \n \tcase MEM_REF:\n@@ -7656,7 +7634,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n \t they won't change the final object whose address will be returned\n \t (they actually exist only for that purpose).  */\n       inner = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t\t   &mode1, &unsignedp, &volatilep, false);\n+\t\t\t\t   &mode1, &unsignedp, &volatilep);\n       break;\n     }\n \n@@ -9933,7 +9911,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \ttree offset;\n \tint volatilep = 0, must_force_mem;\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n-\t\t\t\t\t&mode1, &unsignedp, &volatilep, true);\n+\t\t\t\t\t&mode1, &unsignedp, &volatilep);\n \trtx orig_op0, memloc;\n \tbool mem_attrs_from_type = false;\n \n@@ -10294,8 +10272,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tint volatilep = 0;\n \ttree tem\n \t  = get_inner_reference (treeop0, &bitsize, &bitpos,\n-\t\t\t\t &offset, &mode1, &unsignedp, &volatilep,\n-\t\t\t\t true);\n+\t\t\t\t &offset, &mode1, &unsignedp, &volatilep);\n \trtx orig_op0;\n \n \t/* ??? We should work harder and deal with non-zero offsets.  */"}, {"sha": "2289ba41c4ff2d6d184e3d608ebcdf3bf20d6c34", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -3488,7 +3488,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n      do anything if the inner expression is a PLACEHOLDER_EXPR since we\n      then will no longer be able to replace it.  */\n   linner = get_inner_reference (lhs, &lbitsize, &lbitpos, &offset, &lmode,\n-\t\t\t\t&lunsignedp, &lvolatilep, false);\n+\t\t\t\t&lunsignedp, &lvolatilep);\n   if (linner == lhs || lbitsize == GET_MODE_BITSIZE (lmode) || lbitsize < 0\n       || offset != 0 || TREE_CODE (linner) == PLACEHOLDER_EXPR || lvolatilep)\n     return 0;\n@@ -3498,7 +3498,7 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n      /* If this is not a constant, we can only do something if bit positions,\n \tsizes, and signedness are the same.  */\n      rinner = get_inner_reference (rhs, &rbitsize, &rbitpos, &offset, &rmode,\n-\t\t\t\t   &runsignedp, &rvolatilep, false);\n+\t\t\t\t   &runsignedp, &rvolatilep);\n \n      if (rinner == rhs || lbitpos != rbitpos || lbitsize != rbitsize\n \t || lunsignedp != runsignedp || offset != 0\n@@ -3672,7 +3672,7 @@ decode_field_reference (location_t loc, tree exp, HOST_WIDE_INT *pbitsize,\n     }\n \n   inner = get_inner_reference (exp, pbitsize, pbitpos, &offset, pmode,\n-\t\t\t       punsignedp, pvolatilep, false);\n+\t\t\t       punsignedp, pvolatilep);\n   if ((inner == exp && and_mask == 0)\n       || *pbitsize < 0 || offset != 0\n       || TREE_CODE (inner) == PLACEHOLDER_EXPR)\n@@ -8056,7 +8056,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t  int unsignedp, volatilep;\n           tree base = TREE_OPERAND (op0, 0);\n \t  base = get_inner_reference (base, &bitsize, &bitpos, &offset,\n-\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\t\t\t\t      &mode, &unsignedp, &volatilep);\n \t  /* If the reference was to a (constant) zero offset, we can use\n \t     the address of the base if it has the same base type\n \t     as the result type and the pointer type is unqualified.  */\n@@ -9081,7 +9081,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t{\n \t  base0 = get_inner_reference (TREE_OPERAND (arg0, 0),\n \t\t\t\t       &bitsize, &bitpos0, &offset0, &mode,\n-\t\t\t\t       &unsignedp, &volatilep, false);\n+\t\t\t\t       &unsignedp, &volatilep);\n \t  if (TREE_CODE (base0) == INDIRECT_REF)\n \t    base0 = TREE_OPERAND (base0, 0);\n \t  else\n@@ -9115,7 +9115,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t{\n \t  base1 = get_inner_reference (TREE_OPERAND (arg1, 0),\n \t\t\t\t       &bitsize, &bitpos1, &offset1, &mode,\n-\t\t\t\t       &unsignedp, &volatilep, false);\n+\t\t\t\t       &unsignedp, &volatilep);\n \t  if (TREE_CODE (base1) == INDIRECT_REF)\n \t    base1 = TREE_OPERAND (base1, 0);\n \t  else\n@@ -16982,8 +16982,7 @@ split_address_to_core_and_offset (tree exp,\n   if (TREE_CODE (exp) == ADDR_EXPR)\n     {\n       core = get_inner_reference (TREE_OPERAND (exp, 0), &bitsize, pbitpos,\n-\t\t\t\t  poffset, &mode, &unsignedp, &volatilep,\n-\t\t\t\t  false);\n+\t\t\t\t  poffset, &mode, &unsignedp, &volatilep);\n       core = build_fold_addr_expr_loc (loc, core);\n     }\n   else"}, {"sha": "1f88135002141ad11ee9a82d1c0559ced20dcd9c", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -940,7 +940,7 @@ slsr_process_ref (gimple gs)\n     return;\n \n   base = get_inner_reference (ref_expr, &bitsize, &bitpos, &offset, &mode,\n-\t\t\t      &unsignedp, &volatilep, false);\n+\t\t\t      &unsignedp, &volatilep);\n   index = double_int::from_uhwi (bitpos);\n \n   if (!restructure_reference (&base, &offset, &index, &type))"}, {"sha": "f680e1773a7c0594b070f1ea58adcc50bc5913c7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -296,7 +296,7 @@ delegitimize_mem_from_attrs (rtx x)\n \t    int unsignedp, volatilep = 0;\n \n \t    decl = get_inner_reference (decl, &bitsize, &bitpos, &toffset,\n-\t\t\t\t\t&mode, &unsignedp, &volatilep, false);\n+\t\t\t\t\t&mode, &unsignedp, &volatilep);\n \t    if (bitsize != GET_MODE_BITSIZE (mode)\n \t\t|| (bitpos % BITS_PER_UNIT)\n \t\t|| (toffset && !tree_fits_shwi_p (toffset)))"}, {"sha": "ea80e7593e6d43cf56b89611169285e8879058c1", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -325,8 +325,7 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n \t  return;\n \t}\n       core = get_inner_reference (TREE_OPERAND (expr, 0), &bitsize, &bitpos,\n-\t\t\t\t  &toffset, &mode, &unsignedp, &volatilep,\n-\t\t\t\t  false);\n+\t\t\t\t  &toffset, &mode, &unsignedp, &volatilep);\n       if (bitpos % BITS_PER_UNIT != 0)\n \tbreak;\n       aff_combination_const (comb, type,\n@@ -895,7 +894,7 @@ get_inner_reference_aff (tree ref, aff_tree *addr, double_int *size)\n   int uns, vol;\n   aff_tree tmp;\n   tree base = get_inner_reference (ref, &bitsize, &bitpos, &toff, &mode,\n-\t\t\t\t   &uns, &vol, false);\n+\t\t\t\t   &uns, &vol);\n   tree base_addr = build_fold_addr_expr (base);\n \n   /* ADDR = &BASE + TOFF + BITPOS / BITS_PER_UNIT.  */"}, {"sha": "559a546d29f2de3dae229bb2f5426015cea10cc7", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -619,7 +619,7 @@ split_constant_offset_1 (tree type, tree op0, enum tree_code code, tree op1,\n \n \top0 = TREE_OPERAND (op0, 0);\n \tbase = get_inner_reference (op0, &pbitsize, &pbitpos, &poffset,\n-\t\t\t\t    &pmode, &punsignedp, &pvolatilep, false);\n+\t\t\t\t    &pmode, &punsignedp, &pvolatilep);\n \n \tif (pbitpos % BITS_PER_UNIT != 0)\n \t  return false;\n@@ -769,7 +769,7 @@ dr_analyze_innermost (struct data_reference *dr, struct loop *nest)\n     fprintf (dump_file, \"analyze_innermost: \");\n \n   base = get_inner_reference (ref, &pbitsize, &pbitpos, &poffset,\n-\t\t\t      &pmode, &punsignedp, &pvolatilep, false);\n+\t\t\t      &pmode, &punsignedp, &pvolatilep);\n   gcc_assert (base != NULL_TREE);\n \n   if (pbitpos % BITS_PER_UNIT != 0)"}, {"sha": "ddea81b3b8e4f5153eeb09229d83b529afd73cf3", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -1658,7 +1658,7 @@ interpret_rhs_expr (struct loop *loop, gimple at_stmt,\n \n \t  base = get_inner_reference (TREE_OPERAND (rhs1, 0),\n \t\t\t\t      &bitsize, &bitpos, &offset,\n-\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\t\t\t\t      &mode, &unsignedp, &volatilep);\n \n \t  if (TREE_CODE (base) == MEM_REF)\n \t    {"}, {"sha": "f790bb180cd01f4b9a4d76a33c76494917c0f126", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -1684,7 +1684,7 @@ may_be_unaligned_p (tree ref, tree step)\n      does to check whether the object must be loaded by parts when\n      STRICT_ALIGNMENT is true.  */\n   base = get_inner_reference (ref, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t      &unsignedp, &volatilep, true);\n+\t\t\t      &unsignedp, &volatilep);\n   base_type = TREE_TYPE (base);\n   base_align = get_object_alignment (base);\n   base_align = MAX (base_align, TYPE_ALIGN (base_type));\n@@ -3781,7 +3781,7 @@ split_address_cost (struct ivopts_data *data,\n   int unsignedp, volatilep;\n \n   core = get_inner_reference (addr, &bitsize, &bitpos, &toffset, &mode,\n-\t\t\t      &unsignedp, &volatilep, false);\n+\t\t\t      &unsignedp, &volatilep);\n \n   if (toffset != 0\n       || bitpos % BITS_PER_UNIT != 0"}, {"sha": "82616450e1e82460def7175297dd8f7d0e6917a4", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -2970,7 +2970,7 @@ vect_check_gather (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n      SSA_NAME OFF and put the loop invariants into a tree BASE\n      that can be gimplified before the loop.  */\n   base = get_inner_reference (DR_REF (dr), &pbitsize, &pbitpos, &off,\n-\t\t\t      &pmode, &punsignedp, &pvolatilep, false);\n+\t\t\t      &pmode, &punsignedp, &pvolatilep);\n   gcc_assert (base != NULL_TREE && (pbitpos % BITS_PER_UNIT) == 0);\n \n   if (TREE_CODE (base) == MEM_REF)\n@@ -3466,7 +3466,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n \t    }\n \n \t  outer_base = get_inner_reference (inner_base, &pbitsize, &pbitpos,\n-\t\t          &poffset, &pmode, &punsignedp, &pvolatilep, false);\n+\t\t          &poffset, &pmode, &punsignedp, &pvolatilep);\n \t  gcc_assert (outer_base != NULL_TREE);\n \n \t  if (pbitpos % BITS_PER_UNIT != 0)"}, {"sha": "be57f651fd60b0754be8366e894c6e222c716ea8", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -4511,8 +4511,7 @@ extern tree build_personality_function (const char *);\n    look for the ultimate containing object, which is returned and specify\n    the access position and size.  */\n extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n-\t\t\t\t tree *, enum machine_mode *, int *, int *,\n-\t\t\t\t bool);\n+\t\t\t\t tree *, enum machine_mode *, int *, int *);\n \n /* Return a tree representing the lower bound of the array mentioned in\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */"}, {"sha": "10b74fd96ee3079f56dcb75051b9068795bf066d", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08af82b017a63c7a91937af2d6c72232a53de47d/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=08af82b017a63c7a91937af2d6c72232a53de47d", "patch": "@@ -121,7 +121,7 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   enum machine_mode mode;\n   int volatilep = 0, unsignedp = 0;\n   base = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n-\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\t\t\t      &mode, &unsignedp, &volatilep);\n \n   /* No need to instrument accesses to decls that don't escape,\n      they can't escape to other threads then.  */"}]}