{"sha": "ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0NTQ3YmJmYThjZTVlMWFjNDBjNTRmZDlhN2ViMjNhYzFiNTAwYw==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@tele2.fr", "date": "2008-12-15T18:08:42Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2008-12-15T18:08:42Z"}, "message": "re PR fortran/38487 (Bogus Warning: INTENT(INOUT) actual argument might interfere with actual argument)\n\n2008-12-15  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/38487\n\t* gfortran.dg/elemental_dependency_2.f90: New test.\n\n2008-12-15  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/38487\n\t* dependency.c (gfc_is_data_pointer): New function.\n\t(gfc_check_argument_var_dependency): Disable the warning\n\tin the pointer case.\n\t(gfc_check_dependency): Use gfc_is_data_pointer.\n\nFrom-SVN: r142766", "tree": {"sha": "9b1c2ba274c6fd3d9600078c86f3f6a63a321681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1c2ba274c6fd3d9600078c86f3f6a63a321681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/comments", "author": null, "committer": null, "parents": [{"sha": "5c08ab4eae1ecfa3b00dd077722fc457cff15d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c08ab4eae1ecfa3b00dd077722fc457cff15d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c08ab4eae1ecfa3b00dd077722fc457cff15d66"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "e3cacc2b175d9b36e1a1e318f817a7bea55a6e19", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "patch": "@@ -1,3 +1,11 @@\n+2008-12-15  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/38487\n+\t* dependency.c (gfc_is_data_pointer): New function.\n+\t(gfc_check_argument_var_dependency): Disable the warning\n+\tin the pointer case.\n+\t(gfc_check_dependency): Use gfc_is_data_pointer.\n+\n 2008-12-15  Mikael Morin  <mikael.morin@tele2.fr>\n \n \tPR fortran/38113"}, {"sha": "56a6d368035371ea0e6d30744b0b88f124e7d5e2", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "patch": "@@ -422,6 +422,24 @@ gfc_ref_needs_temporary_p (gfc_ref *ref)\n }\n \n \n+static int\n+gfc_is_data_pointer (gfc_expr *e)\n+{\n+  gfc_ref *ref;\n+\n+  if (e->expr_type != EXPR_VARIABLE)\n+    return 0;\n+\n+  if (e->symtree->n.sym->attr.pointer)\n+    return 1;\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n+      return 1;\n+\n+  return 0;\n+}\n+\n+\n /* Return true if array variable VAR could be passed to the same function\n    as argument EXPR without interfering with EXPR.  INTENT is the intent\n    of VAR.\n@@ -447,7 +465,9 @@ gfc_check_argument_var_dependency (gfc_expr *var, sym_intent intent,\n       if (gfc_ref_needs_temporary_p (expr->ref)\n \t  || gfc_check_dependency (var, expr, !elemental))\n \t{\n-\t  if (elemental == ELEM_DONT_CHECK_VARIABLE)\n+\t  if (elemental == ELEM_DONT_CHECK_VARIABLE\n+\t      && !gfc_is_data_pointer (var)\n+\t      && !gfc_is_data_pointer (expr))\n \t    {\n \t      /* Elemental procedures forbid unspecified intents, \n \t\t and we don't check dependencies for INTENT_IN args.  */\n@@ -664,7 +684,6 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)\n {\n   gfc_actual_arglist *actual;\n   gfc_constructor *c;\n-  gfc_ref *ref;\n   int n;\n \n   gcc_assert (expr1->expr_type == EXPR_VARIABLE);\n@@ -700,17 +719,8 @@ gfc_check_dependency (gfc_expr *expr1, gfc_expr *expr2, bool identical)\n \n \t  /* If either variable is a pointer, assume the worst.  */\n \t  /* TODO: -fassume-no-pointer-aliasing */\n-\t  if (expr1->symtree->n.sym->attr.pointer)\n-\t    return 1;\n-\t  for (ref = expr1->ref; ref; ref = ref->next)\n-\t    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n-\t      return 1;\n-\n-\t  if (expr2->symtree->n.sym->attr.pointer)\n+\t  if (gfc_is_data_pointer (expr1) || gfc_is_data_pointer (expr2))\n \t    return 1;\n-\t  for (ref = expr2->ref; ref; ref = ref->next)\n-\t    if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)\n-\t      return 1;\n \n \t  /* Otherwise distinct symbols have no dependencies.  */\n \t  return 0;"}, {"sha": "fcb0a40431f16eaadfbd6e93c5c6c031e6bf9e3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "patch": "@@ -1,3 +1,8 @@\n+2008-12-15  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/38487\n+\t* gfortran.dg/elemental_dependency_2.f90: New test.\n+\n 2008-12-14  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35937"}, {"sha": "2282e8821f751c17261fcb1643eeba6e5cef2da3", "filename": "gcc/testsuite/gfortran.dg/elemental_dependency_2.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_2.f90?ref=ea4547bbfa8ce5e1ac40c54fd9a7eb23ac1b500c", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+!\n+! PR fortran/38487\n+! Spurious warning on pointers as elemental subroutine actual arguments\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+module gfcbug82\n+  implicit none\n+  type t\n+    real, pointer :: q(:) =>NULL()\n+    real, pointer :: r(:) =>NULL()\n+  end type t\n+  type (t), save :: x, y\n+  real, dimension(:), pointer, save :: a => NULL(), b => NULL()\n+  real, save :: c(5), d\n+contains\n+  elemental subroutine add (q, r)\n+    real, intent (inout) :: q\n+    real, intent (in)    :: r\n+    q = q + r\n+  end subroutine add\n+\n+  subroutine foo ()\n+      call add (y% q, x% r)\n+      call add (y% q, b   )\n+      call add (a   , x% r)\n+      call add (a   , b   )\n+      call add (y% q, d   )\n+      call add (a   , d   )\n+      call add (c   , x% r)\n+      call add (c   , b   )\n+  end subroutine foo\n+end module gfcbug82\n+\n+! { dg-final { cleanup-modules \"gfcbug82\" } }"}]}