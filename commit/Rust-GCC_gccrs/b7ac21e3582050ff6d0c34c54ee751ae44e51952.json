{"sha": "b7ac21e3582050ff6d0c34c54ee751ae44e51952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhYzIxZTM1ODIwNTBmZjZkMGMzNGM1NGVlNzUxYWU0NGU1MTk1Mg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T22:57:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T22:57:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1454", "tree": {"sha": "8fb71c2c5fd4d9552f0223b223c8280f093704b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb71c2c5fd4d9552f0223b223c8280f093704b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ac21e3582050ff6d0c34c54ee751ae44e51952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac21e3582050ff6d0c34c54ee751ae44e51952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ac21e3582050ff6d0c34c54ee751ae44e51952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ac21e3582050ff6d0c34c54ee751ae44e51952/comments", "author": null, "committer": null, "parents": [{"sha": "47429a02bb92d9c9f48cfe6e82308c16f2e93275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47429a02bb92d9c9f48cfe6e82308c16f2e93275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47429a02bb92d9c9f48cfe6e82308c16f2e93275"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "c050c5eec026486154dbe77fa7592586f6dad32f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac21e3582050ff6d0c34c54ee751ae44e51952/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac21e3582050ff6d0c34c54ee751ae44e51952/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b7ac21e3582050ff6d0c34c54ee751ae44e51952", "patch": "@@ -95,7 +95,7 @@ GCC_FOR_TARGET = ./xgcc\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n # It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n-GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -B./ -B$(tooldir)/\n+GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -B./ -B$(tooldir)/bin/\n \n # Special flags for compiling enquire.\n # We disable optimization to make floating point more reliable.\n@@ -418,9 +418,9 @@ Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n \n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n-all.cross: native gcc-cross cross-test $(EXTRA_PARTS)\n+all.cross: native gcc-cross libgcc.a cross-test $(EXTRA_PARTS)\n # This is what must be made before installing GCC and converting libraries.\n-start.encap: native xgcc specs $(LIBGCC1_TARGET)\n+start.encap: native xgcc specs $(LIBGCC1)\n # Use this to make a GCC that will be used only to recompile GCC.\n for-bootstrap: start.encap libgcc.a\n # These can't be made, with COFF encapsulation, until after GCC can run.\n@@ -453,7 +453,7 @@ rest.cross: libgcc.a float.h specs\n \n # Verify that it works to compile and link cross-test.\n # If it does, then there are sufficient replacements for libgcc1.a.\n-cross-test: cross-test.o native gcc-cross\n+cross-test: cross-test.o native gcc-cross libgcc.a\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) cross-test.o -o $@\n cross-test.o: cross-test.c native gcc-cross\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) -c $(srcdir)/cross-test.c\n@@ -520,6 +520,14 @@ libgcc1.null: $(CROSS_TOOLS) $(GCC_PASSES)\n \t$(OLDAR) $(OLDAR_FLAGS) libgcc1.null dummy.o\n \trm -f dummy.o dummy.c\n \n+# This is $(LIBGCC1) for a cross-compiler.\n+# We have no automatic way of building libgcc1.a, \n+# so it's up to the installer to find a way to do that.\n+# This rule deliberately does not depend on libgcc1.a\n+# so that it will fail if the installer hasn't provided it.\n+libgcc1.cross:\n+\tmv libgcc1.a libgcc1.cross || (echo You must find a way to make libgcc1.a; false)\n+\n # Compile the library of arithmetic subroutines with the native compiler.\n # Don't compile it with GCC!\n # (That would cause most arithmetic functions to call themselves.)\n@@ -685,7 +693,7 @@ cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n $(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n \t@echo expect 30 shift/reduce conflicts and 14 reduce/reduce conflicts\n \tcd $(srcdir); $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y\n-\tcd $(srcdir); grep '^#define[ \t]*YYEMPTY' cp-parse.c >>cp-parse.y\n+\tcd $(srcdir); grep '^#define[ \t]*YYEMPTY' cp-parse.c >>cp-parse.h\n \n cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n    $(srcdir)/cp-parse.h flags.h\n@@ -767,7 +775,8 @@ fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h\n toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h input.h \\\n    insn-attr.h xcoffout.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-  $(MAYBE_USE_COLLECT2) -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n+\t  $(MAYBE_TARGET_DEFAULT) $(MAYBE_USE_COLLECT2) \\\n+\t  -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n \n rtl.o : rtl.c $(CONFIG_H) $(RTL_H)\n \n@@ -841,7 +850,7 @@ sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \\\n    flags.h insn-config.h insn-attr.h\n final.o : final.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h regs.h \\\n    recog.h conditions.h insn-config.h insn-attr.h real.h output.h \\\n-   hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h\n+   hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h\n recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n    regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n    insn-flags.h insn-codes.h real.h\n@@ -857,7 +866,7 @@ aux-output.o : aux-output.c $(CONFIG_H) \\\n # from the GNU Emacs distribution.\n alloca.o:\talloca.c\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(ALLOCA_FLAGS) \\\n-\t  -Demacs `echo $(srcdir)/alloca.c | sed 's,^\\./,,'`\n+\t  -Demacs -c `echo $(srcdir)/alloca.c | sed 's,^\\./,,'`\n \t$(ALLOCA_FINISH)\n \f\n # Generate header and source files from the machine description, "}, {"sha": "6ec4a9a9016fa869c93eb6a561a7afb1ef49d310", "filename": "gcc/cross-make", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ac21e3582050ff6d0c34c54ee751ae44e51952/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ac21e3582050ff6d0c34c54ee751ae44e51952/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=b7ac21e3582050ff6d0c34c54ee751ae44e51952", "patch": "@@ -1,5 +1,6 @@\n-# Don't build or use libgcc1.\n-LIBGCC1 = \n+# Expect user to provide libgcc1.a,\n+# and give up immediately if the user has not done so.\n+LIBGCC1 = libgcc1.cross\n \n # Specify tools and options for manipulating libraries for the target machine.\n AR = $(AR_FOR_TARGET)"}]}