{"sha": "89da39ee52cca8ee670f4c9c43384caa62c4e44b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkYTM5ZWU1MmNjYThlZTY3MGY0YzljNDMzODRjYWE2MmM0ZTQ0Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-20T13:22:30Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-20T13:22:30Z"}, "message": "re PR target/37169 (Inefficent code for _mm_cvtsi64_si128)\n\ngcc/\n\n2008-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/37169\n\t* config/i386/i386.c (ix86_expand_vector_init_one_nonzero): In\n\tV2DI mode, for SSE4.1, use movq instead of vector set if the\n\tsecond element is zero and inter-unit moves are OK.\n\ngcc/testsuite/\n\n2008-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/37169\n\t* i386/sse2-init-v2di-2.c: New.\n\nFrom-SVN: r139289", "tree": {"sha": "58abde3569e15f354222d934ef9100b85e19f4d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58abde3569e15f354222d934ef9100b85e19f4d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89da39ee52cca8ee670f4c9c43384caa62c4e44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89da39ee52cca8ee670f4c9c43384caa62c4e44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89da39ee52cca8ee670f4c9c43384caa62c4e44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89da39ee52cca8ee670f4c9c43384caa62c4e44b/comments", "author": null, "committer": null, "parents": [{"sha": "4fedf870f576c5981624c815c140130c76821f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fedf870f576c5981624c815c140130c76821f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fedf870f576c5981624c815c140130c76821f0f"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "afe8e5950e8016aba9285bccc52fc641005c5ebf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89da39ee52cca8ee670f4c9c43384caa62c4e44b", "patch": "@@ -1,3 +1,10 @@\n+2008-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/37169\n+\t* config/i386/i386.c (ix86_expand_vector_init_one_nonzero): In\n+\tV2DI mode, for SSE4.1, use movq instead of vector set if the\n+\tsecond element is zero and inter-unit moves are OK.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): More\n@@ -16,7 +23,7 @@\n \tsupport of this feature.  Do not assume that a sufficiently new\n \tassembler will support the feature regardless of the target type.\n \t(HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): Likewise.\n-        * configure: Regenerate.\n+\t* configure: Regenerate.\n \n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n@@ -389,24 +396,24 @@\n \n \t* config/s390/2097.md New file.\n \t* config/s390/s390.md (\"z10prop\" attribute): Define none,\n-        z10_super, z10_super_E1, z10_super_A1, z10_super_c,\n-        z10_super_c_E1, z10_fwd, z10_fwd_A1, z10_fwd_A3, z10_fwd_E1,\n-        z10_rec, z10_fr, z10_fr_A3, z10_fr_E1, z10_c, and z10_cobra as\n-        possible values and apply them to insns as appropriate.\n-        (\"type\" attribute): Removed itof and added ftrunctf,ftruncdf,\n-        ftruncsd, ftruncdd, itoftf, itofdf, itofsf, itofdd, itoftd,\n-        fdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd, fsimpdd,\n-        fsimpsd, fsimptd, fstoredd, fstoresd, ftoidfp as possible\n-        values.\n+\tz10_super, z10_super_E1, z10_super_A1, z10_super_c,\n+\tz10_super_c_E1, z10_fwd, z10_fwd_A1, z10_fwd_A3, z10_fwd_E1,\n+\tz10_rec, z10_fr, z10_fr_A3, z10_fr_E1, z10_c, and z10_cobra as\n+\tpossible values and apply them to insns as appropriate.\n+\t(\"type\" attribute): Removed itof and added ftrunctf,ftruncdf,\n+\tftruncsd, ftruncdd, itoftf, itofdf, itofsf, itofdd, itoftd,\n+\tfdivdd, fdivtd, floaddd, floadsd, fmuldd, fmultd, fsimpdd,\n+\tfsimpsd, fsimptd, fstoredd, fstoresd, ftoidfp as possible\n+\tvalues.\n \t(\"bfp\" mode attribute): Removed.  Every occurence replaced\n \twith <mode>.\n \t* config/s390/s390.c (struct \"z10_cost\"): Updated entries.\n \t* config/s390/2084.md (insn_reservation \"x_itof\"): Updated\n-          type attribute.\n+\t  type attribute.\n \n 2008-08-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n-        PR c/28152\n+\tPR c/28152\n \t* c-parser.c (c_lex_one_token): Do not store the canonical spelling\n \tfor keywords.\n \t"}, {"sha": "13d81476370fe38a1e24767a6ae7a84d5dfbb8ab", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=89da39ee52cca8ee670f4c9c43384caa62c4e44b", "patch": "@@ -25104,7 +25104,13 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n   switch (mode)\n     {\n     case V2DImode:\n-      use_vector_set = TARGET_64BIT && TARGET_SSE4_1;\n+      /* For SSE4.1, we normally use vector set.  But if the second\n+\t element is zero and inter-unit moves are OK, we use movq\n+\t instead.  */\n+      use_vector_set = (TARGET_64BIT\n+\t\t\t&& TARGET_SSE4_1\n+\t\t\t&& !(TARGET_INTER_UNIT_MOVES\n+\t\t\t     && one_var == 0));\n       break;\n     case V16QImode:\n     case V4SImode:"}, {"sha": "ac215ebf7f4c95a6fe662dc2017ddb9c6b878d70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89da39ee52cca8ee670f4c9c43384caa62c4e44b", "patch": "@@ -1,3 +1,8 @@\n+2008-08-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/37169\n+\t* i386/sse2-init-v2di-2.c: New.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/forwprop-9.c: Scan FRE dump as well.\n@@ -47,7 +52,7 @@\n \n 2008-08-20  Victor Kaplansky  <victork@il.ibm.com>\n \n-        * gcc.dg/vect/vect-multitypes-15.c: Fix typo.\n+\t* gcc.dg/vect/vect-multitypes-15.c: Fix typo.\n \t* gcc/testsuite/lib/target-supports.exp\n \t   (check_effective_target_vect_long_long): Remove spu-*-*.\n \t* gcc.dg/vect/vect-multitypes-16.c: Make init loop unvectorizable.\n@@ -278,7 +283,7 @@\n \n 2008-08-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n-        PR c/28152\n+\tPR c/28152\n \t* gcc.dg/parser-pr28152.c: New.\n \t* gcc.dg/parser-pr28152-2.c: New.\n "}, {"sha": "da36efa1d9d197c3badd17c972ef984ce612ddc1", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89da39ee52cca8ee670f4c9c43384caa62c4e44b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c?ref=89da39ee52cca8ee670f4c9c43384caa62c4e44b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -msse4 -march=core2\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128i\n+test (long long b)\n+{\n+  return _mm_cvtsi64_si128 (b); \n+}\n+\n+/* { dg-final { scan-assembler \"movq\" } } */"}]}