{"sha": "b7b3378f91c0641f2ef4d88db22af62a571c9359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiMzM3OGY5MWMwNjQxZjJlZjRkODhkYjIyYWY2MmE1NzFjOTM1OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-05T14:38:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-05T14:38:49Z"}, "message": "i386: Omit clobbers from vzeroupper until final [PR92190]\n\nAs mentioned in the PR, the CLOBBERs in vzeroupper are added there even for\nregisters that aren't ever live in the function before and break the\nprologue/epilogue expansion with ms ABI (normal ABIs are fine, as they\nconsider all [xyz]mm registers call clobbered, but the ms ABI considers\nxmm0-15 call used but the bits above low 128 ones call clobbered).\nThe following patch fixes it by not adding the clobbers during vzeroupper\npass (before pro_and_epilogue), but adding them for -fipa-ra purposes only\nduring the final output.  Perhaps we could add some CLOBBERs early (say for\ndf_regs_ever_live_p regs that aren't live in the live_regs bitmap, or\ndepending on the ABI either add all of them immediately, or for ms ABI add\nCLOBBERs for xmm0-xmm5 if they don't have a SET) and add the rest later.\nAnd the addition could be perhaps done at other spots, e.g. in an\nepilogue_completed guarded splitter.\n\n2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/92190\n\t* config/i386/i386-features.c (ix86_add_reg_usage_to_vzeroupper): Only\n\tinclude sets and not clobbers in the vzeroupper pattern.\n\t* config/i386/sse.md (*avx_vzeroupper): Require in insn condition that\n\tthe parallel has 17 (64-bit) or 9 (32-bit) elts.\n\t(*avx_vzeroupper_1): New define_insn_and_split.\n\n\t* gcc.target/i386/pr92190.c: New test.", "tree": {"sha": "3f47e7a32bb80b008ba7438ae86e74a685d20738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f47e7a32bb80b008ba7438ae86e74a685d20738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b3378f91c0641f2ef4d88db22af62a571c9359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b3378f91c0641f2ef4d88db22af62a571c9359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b3378f91c0641f2ef4d88db22af62a571c9359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b3378f91c0641f2ef4d88db22af62a571c9359/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a2e8c0918c2ddda82ace9ed17464906f96633d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a2e8c0918c2ddda82ace9ed17464906f96633d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a2e8c0918c2ddda82ace9ed17464906f96633d"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "a5ae52acbb6e5e78ed0a2c83fbca02fb4f73e79f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7b3378f91c0641f2ef4d88db22af62a571c9359", "patch": "@@ -1,5 +1,12 @@\n 2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/92190\n+\t* config/i386/i386-features.c (ix86_add_reg_usage_to_vzeroupper): Only\n+\tinclude sets and not clobbers in the vzeroupper pattern.\n+\t* config/i386/sse.md (*avx_vzeroupper): Require in insn condition that\n+\tthe parallel has 17 (64-bit) or 9 (32-bit) elts.\n+\t(*avx_vzeroupper_1): New define_insn_and_split.\n+\n \tPR target/92190\n \t* recog.c (pass_split_after_reload::gate): For STACK_REGS targets,\n \tdon't run when !optimize."}, {"sha": "6919c839605c240d00b1528ea6743cc4a9e51ab3", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=b7b3378f91c0641f2ef4d88db22af62a571c9359", "patch": "@@ -1764,29 +1764,32 @@ convert_scalars_to_vector (bool timode_p)\n \n      (set (reg:V2DF R) (reg:V2DF R))\n \n-   which preserves the low 128 bits but clobbers the upper bits.\n-   For a dead register we just use:\n-\n-     (clobber (reg:V2DF R))\n-\n-   which invalidates any previous contents of R and stops R from becoming\n-   live across the vzeroupper in future.  */\n+   which preserves the low 128 bits but clobbers the upper bits.  */\n \n static void\n ix86_add_reg_usage_to_vzeroupper (rtx_insn *insn, bitmap live_regs)\n {\n   rtx pattern = PATTERN (insn);\n   unsigned int nregs = TARGET_64BIT ? 16 : 8;\n-  rtvec vec = rtvec_alloc (nregs + 1);\n-  RTVEC_ELT (vec, 0) = XVECEXP (pattern, 0, 0);\n+  unsigned int npats = nregs;\n   for (unsigned int i = 0; i < nregs; ++i)\n     {\n       unsigned int regno = GET_SSE_REGNO (i);\n+      if (!bitmap_bit_p (live_regs, regno))\n+\tnpats--;\n+    }\n+  if (npats == 0)\n+    return;\n+  rtvec vec = rtvec_alloc (npats + 1);\n+  RTVEC_ELT (vec, 0) = XVECEXP (pattern, 0, 0);\n+  for (unsigned int i = 0, j = 0; i < nregs; ++i)\n+    {\n+      unsigned int regno = GET_SSE_REGNO (i);\n+      if (!bitmap_bit_p (live_regs, regno))\n+\tcontinue;\n       rtx reg = gen_rtx_REG (V2DImode, regno);\n-      if (bitmap_bit_p (live_regs, regno))\n-\tRTVEC_ELT (vec, i + 1) = gen_rtx_SET (reg, reg);\n-      else\n-\tRTVEC_ELT (vec, i + 1) = gen_rtx_CLOBBER (VOIDmode, reg);\n+      ++j;\n+      RTVEC_ELT (vec, j) = gen_rtx_SET (reg, reg);\n     }\n   XVEC (pattern, 0) = vec;\n   df_insn_rescan (insn);"}, {"sha": "ac4cf5be686b2e82eaa01eab522a0ce4c9d6161b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b7b3378f91c0641f2ef4d88db22af62a571c9359", "patch": "@@ -19818,7 +19818,7 @@\n (define_insn \"*avx_vzeroupper\"\n   [(match_parallel 0 \"vzeroupper_pattern\"\n      [(unspec_volatile [(const_int 0)] UNSPECV_VZEROUPPER)])]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && XVECLEN (operands[0], 0) == (TARGET_64BIT ? 16 : 8) + 1\"\n   \"vzeroupper\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"modrm\" \"0\")\n@@ -19827,6 +19827,44 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx_vzeroupper_1\"\n+  [(match_parallel 0 \"vzeroupper_pattern\"\n+     [(unspec_volatile [(const_int 0)] UNSPECV_VZEROUPPER)])]\n+  \"TARGET_AVX && XVECLEN (operands[0], 0) != (TARGET_64BIT ? 16 : 8) + 1\"\n+  \"#\"\n+  \"&& epilogue_completed\"\n+  [(match_dup 0)]\n+{\n+  /* For IPA-RA purposes, make it clear the instruction clobbers\n+     even XMM registers not mentioned explicitly in the pattern.  */\n+  unsigned int nregs = TARGET_64BIT ? 16 : 8;\n+  unsigned int npats = XVECLEN (operands[0], 0);\n+  rtvec vec = rtvec_alloc (nregs + 1);\n+  RTVEC_ELT (vec, 0) = XVECEXP (operands[0], 0, 0);\n+  for (unsigned int i = 0, j = 1; i < nregs; ++i)\n+    {\n+      unsigned int regno = GET_SSE_REGNO (i);\n+      if (j < npats\n+\t  && REGNO (SET_DEST (XVECEXP (operands[0], 0, j))) == regno)\n+\t{\n+\t  RTVEC_ELT (vec, i + 1) = XVECEXP (operands[0], 0, j);\n+\t  j++;\n+\t}\n+      else\n+\t{\n+\t  rtx reg = gen_rtx_REG (V2DImode, regno);\n+\t  RTVEC_ELT (vec, i + 1) = gen_rtx_CLOBBER (VOIDmode, reg);\n+\t}\n+    }\n+  operands[0] = gen_rtx_PARALLEL (VOIDmode, vec);\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"modrm\" \"0\")\n+   (set_attr \"memory\" \"none\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"btver2_decode\" \"vector\")\n+   (set_attr \"mode\" \"OI\")])\n+\n (define_mode_attr pbroadcast_evex_isa\n   [(V64QI \"avx512bw\") (V32QI \"avx512bw\") (V16QI \"avx512bw\")\n    (V32HI \"avx512bw\") (V16HI \"avx512bw\") (V8HI \"avx512bw\")"}, {"sha": "ff47b94fc3803b2d6a019fabb963ba85c0312ca8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7b3378f91c0641f2ef4d88db22af62a571c9359", "patch": "@@ -1,3 +1,8 @@\n+2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/92190\n+\t* gcc.target/i386/pr92190.c: New test.\n+\n 2020-02-05  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/92177"}, {"sha": "c13c515e35cb3bf56220e1f3e674a1f61d42c2e0", "filename": "gcc/testsuite/gcc.target/i386/pr92190.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92190.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b3378f91c0641f2ef4d88db22af62a571c9359/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92190.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92190.c?ref=b7b3378f91c0641f2ef4d88db22af62a571c9359", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/92190 */\n+/* { dg-do compile { target { *-*-linux* && lp64 } } } */\n+/* { dg-options \"-mabi=ms -O2 -mavx512f\" } */\n+\n+typedef char VC __attribute__((vector_size (16)));\n+typedef int VI __attribute__((vector_size (16 * sizeof 0)));\n+VC a;\n+VI b;\n+void bar (VI);\n+void baz (VC);\n+\n+void\n+foo (void)\n+{\n+  VC k = a;\n+  VI n = b;\n+  bar (n);\n+  baz (k);\n+}"}]}