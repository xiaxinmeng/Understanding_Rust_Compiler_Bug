{"sha": "9ec080cb2152ca831307b8c4fd825d9acecc4a45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjMDgwY2IyMTUyY2E4MzEzMDdiOGM0ZmQ4MjVkOWFjZWNjNGE0NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:40:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:40:04Z"}, "message": "[multiple changes]\n\n2011-09-05  Marc Sango  <sango@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Remove\n\tthe wrong test and add the correct test to detect the violation\n\tof illegal use of unconstrained string type in SPARK mode.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iteration_Specification): Improve error\n\tmessage on an iterator over an array.\n\n2011-09-05  Robert Dewar  <dewar@adacore.com>\n\n\t* lib-xref-alfa.adb: Minor reformatting.\n\nFrom-SVN: r178538", "tree": {"sha": "f6cdb02884910b21f8b1c6e72a3d780e87a56745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cdb02884910b21f8b1c6e72a3d780e87a56745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ec080cb2152ca831307b8c4fd825d9acecc4a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec080cb2152ca831307b8c4fd825d9acecc4a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec080cb2152ca831307b8c4fd825d9acecc4a45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec080cb2152ca831307b8c4fd825d9acecc4a45/comments", "author": null, "committer": null, "parents": [{"sha": "94bbf008bae624219030c93f6b74def28677e0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bbf008bae624219030c93f6b74def28677e0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bbf008bae624219030c93f6b74def28677e0a7"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "e267e9b48bc372b57ab5fad6e02a35cda3a9f8c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9ec080cb2152ca831307b8c4fd825d9acecc4a45", "patch": "@@ -1,3 +1,18 @@\n+2011-09-05  Marc Sango  <sango@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Remove\n+\tthe wrong test and add the correct test to detect the violation\n+\tof illegal use of unconstrained string type in SPARK mode.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iteration_Specification): Improve error\n+\tmessage on an iterator over an array.\n+\n+2011-09-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-xref-alfa.adb: Minor reformatting.\n+\n 2011-09-05  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_res.adb, par.adb, par-ch6.adb, g-comlin.adb,"}, {"sha": "cc0aa3ac84dbaba060872bc192fbba24155a6d46", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=9ec080cb2152ca831307b8c4fd825d9acecc4a45", "patch": "@@ -586,10 +586,12 @@ package body Alfa is\n          function Is_Alfa_Reference\n            (E   : Entity_Id;\n             Typ : Character) return Boolean;\n-         --  Return whether the reference is adequate for this entity\n+         --  Return whether entity reference E meets Alfa requirements. Typ\n+         --  is the reference type.\n \n          function Is_Alfa_Scope (E : Entity_Id) return Boolean;\n-         --  Return whether the entity or reference scope is adequate\n+         --  Return whether the entity or reference scope meets requirements\n+         --  for being an Alfa scope.\n \n          function Is_Global_Constant (E : Entity_Id) return Boolean;\n          --  Return True if E is a global constant for which we should ignore\n@@ -604,35 +606,33 @@ package body Alfa is\n             Typ : Character) return Boolean\n          is\n          begin\n+            --  The only references of interest on callable entities are calls.\n+            --  On non-callable entities, the only references of interest are\n+            --  reads and writes.\n \n             if Ekind (E) in Overloadable_Kind then\n-\n-               --  The only references of interest on callable entities are\n-               --  calls.  On non-callable entities, the only references of\n-               --  interest are reads and writes.\n-\n                return Typ = 's';\n \n-            elsif Is_Constant_Object (E) then\n-\n-               --  References to constant objects are not considered in Alfa\n-               --  section, as these will be translated as constants in the\n-               --  intermediate language for formal verification, and should\n-               --  therefore never appear in frame conditions.\n+            --  References to constant objects are not considered in Alfa\n+            --  section, as these will be translated as constants in the\n+            --  intermediate language for formal verification, and should\n+            --  therefore never appear in frame conditions.\n \n+            elsif Is_Constant_Object (E) then\n                   return False;\n \n-            elsif Present (Etype (E)) and then\n-               Ekind (Etype (E)) in Concurrent_Kind then\n-\n-               --  Objects of Task type or protected type are not Alfa\n-               --  references.\n+            --  Objects of Task type or protected type are not Alfa references\n \n+            elsif Present (Etype (E))\n+              and then Ekind (Etype (E)) in Concurrent_Kind\n+            then\n                return False;\n \n+            --  In all other cases, result is true for reference/modify cases,\n+            --  and false for all other cases.\n+\n             else\n                return Typ = 'r' or else Typ = 'm';\n-\n             end if;\n          end Is_Alfa_Reference;\n "}, {"sha": "2953141d30d2e002b586ec1b9febadf87a731fc3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9ec080cb2152ca831307b8c4fd825d9acecc4a45", "patch": "@@ -3267,6 +3267,16 @@ package body Sem_Ch3 is\n \n       if Is_Indefinite_Subtype (T) then\n \n+         --  In SPARK, a declaration of unconstrained type is allowed\n+         --  only for constants of type string.\n+\n+         if Is_String_Type (T)\n+           and then not Constant_Present (Original_Node (N)) then\n+            Check_SPARK_Restriction\n+              (\"declaration of object of unconstrained type not allowed\",\n+               N);\n+         end if;\n+\n          --  Nothing to do in deferred constant case\n \n          if Constant_Present (N) and then No (E) then\n@@ -3313,21 +3323,10 @@ package body Sem_Ch3 is\n          --  Case of initialization present\n \n          else\n-            --  Check restrictions in Ada 83 and SPARK modes\n+            --  Check restrictions in Ada 83\n \n             if not Constant_Present (N) then\n \n-               --  In SPARK, a declaration of unconstrained type is allowed\n-               --  only for constants of type string.\n-\n-               --  Isn't following check the wrong way round???\n-\n-               if Nkind (E) = N_String_Literal then\n-                  Check_SPARK_Restriction\n-                    (\"declaration of object of unconstrained type not allowed\",\n-                     E);\n-               end if;\n-\n                --  Unconstrained variables not allowed in Ada 83 mode\n \n                if Ada_Version = Ada_83"}, {"sha": "81153fa7d3024e349697eb2e6c9a49e3ba78d706", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec080cb2152ca831307b8c4fd825d9acecc4a45/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=9ec080cb2152ca831307b8c4fd825d9acecc4a45", "patch": "@@ -2336,13 +2336,18 @@ package body Sem_Ch5 is\n       if Is_Array_Type (Typ) then\n          if Of_Present (N) then\n             Set_Etype (Def_Id, Component_Type (Typ));\n+\n+         elsif Ada_Version < Ada_2012 then\n+            Error_Msg_N\n+              (\"missing Range attribute in iteration over an array\", N);\n+\n          else\n             Error_Msg_N\n               (\"to iterate over the elements of an array, use OF\", N);\n \n             --  Prevent cascaded errors\n \n-            Set_Ekind (Def_Id, E_Constant);\n+            Set_Ekind (Def_Id, E_Loop_Parameter);\n             Set_Etype (Def_Id, Etype (First_Index (Typ)));\n          end if;\n "}]}