{"sha": "d54be5ad210b05274fbe43f9f61f9e903aabefb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU0YmU1YWQyMTBiMDUyNzRmYmU0M2Y5ZjYxZjllOTAzYWFiZWZiMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-01-07T13:39:02Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-01-07T13:39:55Z"}, "message": "i386: Merge various insn name mapping code attributes\n\n2021-01-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386.md (insn): Merge from plusminus_insn, shift_insn,\n\trotate_insn and optab code attributes.\n\tUpdate all uses to merged code attribute.\n\t* config/i386/sse.md: Update all uses to merged code attribute.\n\t* config/i386/mmx.md: Update all uses to merged code attribute.", "tree": {"sha": "2c4ade7560d9cd0349ebff35dafb1f1b09de446d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4ade7560d9cd0349ebff35dafb1f1b09de446d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d54be5ad210b05274fbe43f9f61f9e903aabefb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54be5ad210b05274fbe43f9f61f9e903aabefb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54be5ad210b05274fbe43f9f61f9e903aabefb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54be5ad210b05274fbe43f9f61f9e903aabefb0/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02a8b63e5aef49ab6973c64a2225236895763a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02a8b63e5aef49ab6973c64a2225236895763a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02a8b63e5aef49ab6973c64a2225236895763a1"}], "stats": {"total": 193, "additions": 94, "deletions": 99}, "files": [{"sha": "6f6af8c3cbffda7a478ebc4ff64e3b6b5eed3b61", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 51, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d54be5ad210b05274fbe43f9f61f9e903aabefb0", "patch": "@@ -869,7 +869,8 @@\n \t (eq_attr \"isa\" \"avx512vl\") (symbol_ref \"TARGET_AVX512VL\")\n \t (eq_attr \"isa\" \"noavx512vl\") (symbol_ref \"!TARGET_AVX512VL\")\n \t (eq_attr \"isa\" \"avxvnni\") (symbol_ref \"TARGET_AVXVNNI\")\n-\t (eq_attr \"isa\" \"avx512vnnivl\") (symbol_ref \"TARGET_AVX512VNNI && TARGET_AVX512VL\")\n+\t (eq_attr \"isa\" \"avx512vnnivl\")\n+\t   (symbol_ref \"TARGET_AVX512VNNI && TARGET_AVX512VL\")\n \n \t (eq_attr \"mmx_isa\" \"native\")\n \t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")\n@@ -894,17 +895,13 @@\n \n (define_code_iterator sat_plusminus [ss_plus us_plus ss_minus us_minus])\n \n-(define_code_iterator multdiv [mult div])\n-\n-;; Base name for define_insn\n-(define_code_attr plusminus_insn\n-  [(plus \"add\") (ss_plus \"ssadd\") (us_plus \"usadd\")\n-   (minus \"sub\") (ss_minus \"sssub\") (us_minus \"ussub\")])\n-\n ;; Base name for insn mnemonic.\n (define_code_attr plusminus_mnemonic\n   [(plus \"add\") (ss_plus \"adds\") (us_plus \"addus\")\n    (minus \"sub\") (ss_minus \"subs\") (us_minus \"subus\")])\n+\n+(define_code_iterator multdiv [mult div])\n+\n (define_code_attr multdiv_mnemonic\n   [(mult \"mul\") (div \"div\")])\n \n@@ -951,20 +948,13 @@\n ;; Mapping of all shift operators\n (define_code_iterator any_shift [ashift lshiftrt ashiftrt])\n \n-;; Base name for define_insn\n-(define_code_attr shift_insn\n-  [(ashift \"ashl\") (lshiftrt \"lshr\") (ashiftrt \"ashr\")])\n-\n ;; Base name for insn mnemonic.\n (define_code_attr shift [(ashift \"sll\") (lshiftrt \"shr\") (ashiftrt \"sar\")])\n (define_code_attr vshift [(ashift \"sll\") (lshiftrt \"srl\") (ashiftrt \"sra\")])\n \n ;; Mapping of rotate operators\n (define_code_iterator any_rotate [rotate rotatert])\n \n-;; Base name for define_insn\n-(define_code_attr rotate_insn [(rotate \"rotl\") (rotatert \"rotr\")])\n-\n ;; Base name for insn mnemonic.\n (define_code_attr rotate [(rotate \"rol\") (rotatert \"ror\")])\n \n@@ -977,13 +967,9 @@\n ;; Base name for x87 insn mnemonic.\n (define_code_attr absneg_mnemonic [(abs \"fabs\") (neg \"fchs\")])\n \n-;; Used in signed and unsigned widening multiplications.\n+;; Mapping of extend operators\n (define_code_iterator any_extend [sign_extend zero_extend])\n \n-;; Used for representing standard name for extend\n-(define_code_attr optab [(sign_extend \"extend\")\n-\t\t\t (zero_extend \"zero_extend\")])\n-\n ;; Prefix for insn menmonic.\n (define_code_attr sgnprefix [(sign_extend \"i\") (zero_extend \"\")\n \t\t\t     (div \"i\") (udiv \"\")])\n@@ -997,7 +983,8 @@\n ;; Used in signed and unsigned truncations.\n (define_code_iterator any_truncate [ss_truncate truncate us_truncate])\n ;; Instruction suffix for truncations.\n-(define_code_attr trunsuffix [(ss_truncate \"s\") (truncate \"\") (us_truncate \"us\")])\n+(define_code_attr trunsuffix\n+  [(ss_truncate \"s\") (truncate \"\") (us_truncate \"us\")])\n \n ;; Used in signed and unsigned fix.\n (define_code_iterator any_fix [fix unsigned_fix])\n@@ -1011,6 +998,14 @@\n (define_code_attr floatunssuffix [(float \"\") (unsigned_float \"uns\")])\n (define_code_attr floatprefix [(float \"s\") (unsigned_float \"u\")])\n \n+;; Base name for expression\n+(define_code_attr insn\n+  [(plus \"add\") (ss_plus \"ssadd\") (us_plus \"usadd\")\n+   (minus \"sub\") (ss_minus \"sssub\") (us_minus \"ussub\")\n+   (sign_extend \"extend\") (zero_extend \"zero_extend\")\n+   (ashift \"ashl\") (lshiftrt \"lshr\") (ashiftrt \"ashr\")\n+   (rotate \"rotl\") (rotatert \"rotr\")])\n+\n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n \n@@ -7460,14 +7455,14 @@\n \n ;; The patterns that match these are at the end of this file.\n \n-(define_expand \"<plusminus_insn>xf3\"\n+(define_expand \"<insn>xf3\"\n   [(set (match_operand:XF 0 \"register_operand\")\n \t(plusminus:XF\n \t  (match_operand:XF 1 \"register_operand\")\n \t  (match_operand:XF 2 \"register_operand\")))]\n   \"TARGET_80387\")\n \n-(define_expand \"<plusminus_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n \t(plusminus:MODEF\n \t  (match_operand:MODEF 1 \"register_operand\")\n@@ -11399,15 +11394,15 @@\n \n ;; See comment above `ashl<mode>3' about how this works.\n \n-(define_expand \"<shift_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:SDWIM 0 \"<shift_operand>\")\n \t(any_shiftrt:SDWIM (match_operand:SDWIM 1 \"<shift_operand>\")\n \t\t\t   (match_operand:QI 2 \"nonmemory_operand\")))]\n   \"\"\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*<shift_insn><mode>3_mask\"\n+(define_insn_and_split \"*<insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n@@ -11430,7 +11425,7 @@\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\"\n   [(set_attr \"isa\" \"*,bmi2\")])\n \n-(define_insn_and_split \"*<shift_insn><mode>3_mask_1\"\n+(define_insn_and_split \"*<insn><mode>3_mask_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n@@ -11452,7 +11447,7 @@\n   \"\"\n   [(set_attr \"isa\" \"*,bmi2\")])\n \n-(define_insn_and_split \"*<shift_insn><dwi>3_doubleword_mask\"\n+(define_insn_and_split \"*<insn><dwi>3_doubleword_mask\"\n   [(set (match_operand:<DWI> 0 \"register_operand\")\n \t(any_shiftrt:<DWI>\n \t  (match_operand:<DWI> 1 \"register_operand\")\n@@ -11494,7 +11489,7 @@\n     emit_move_insn (operands[4], operands[5]);\n })\n \n-(define_insn_and_split \"*<shift_insn><dwi>3_doubleword_mask_1\"\n+(define_insn_and_split \"*<insn><dwi>3_doubleword_mask_1\"\n   [(set (match_operand:<DWI> 0 \"register_operand\")\n \t(any_shiftrt:<DWI>\n \t  (match_operand:<DWI> 1 \"register_operand\")\n@@ -11533,7 +11528,7 @@\n     emit_move_insn (operands[4], operands[5]);\n })\n \n-(define_insn_and_split \"*<shift_insn><mode>3_doubleword\"\n+(define_insn_and_split \"*<insn><mode>3_doubleword\"\n   [(set (match_operand:DWI 0 \"register_operand\" \"=&r\")\n \t(any_shiftrt:DWI (match_operand:DWI 1 \"register_operand\" \"0\")\n \t\t\t (match_operand:QI 2 \"nonmemory_operand\" \"<S>c\")))\n@@ -11542,7 +11537,7 @@\n   \"#\"\n   \"epilogue_completed\"\n   [(const_int 0)]\n-  \"ix86_split_<shift_insn> (operands, NULL_RTX, <MODE>mode); DONE;\"\n+  \"ix86_split_<insn> (operands, NULL_RTX, <MODE>mode); DONE;\"\n   [(set_attr \"type\" \"multi\")])\n \n ;; By default we don't ask for a scratch register, because when DWImode\n@@ -11559,7 +11554,7 @@\n    (match_dup 3)]\n   \"TARGET_CMOVE\"\n   [(const_int 0)]\n-  \"ix86_split_<shift_insn> (operands, operands[3], <DWI>mode); DONE;\")\n+  \"ix86_split_<insn> (operands, operands[3], <DWI>mode); DONE;\")\n \n (define_insn \"x86_64_shrd\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n@@ -11663,7 +11658,7 @@\n   DONE;\n })\n \n-(define_insn \"*bmi2_<shift_insn><mode>3_1\"\n+(define_insn \"*bmi2_<insn><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(any_shiftrt:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t\t   (match_operand:SWI48 2 \"register_operand\" \"r\")))]\n@@ -11672,7 +11667,7 @@\n   [(set_attr \"type\" \"ishiftx\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shift_insn><mode>3_1\"\n+(define_insn \"*<insn><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(any_shiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -11715,7 +11710,7 @@\n \t(any_shiftrt:SWI48 (match_dup 1) (match_dup 2)))]\n   \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\")\n \n-(define_insn \"*bmi2_<shift_insn>si3_1_zext\"\n+(define_insn \"*bmi2_<insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n@@ -11725,7 +11720,7 @@\n   [(set_attr \"type\" \"ishiftx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<shift_insn>si3_1_zext\"\n+(define_insn \"*<insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -11769,7 +11764,7 @@\n \t(zero_extend:DI (any_shiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n \n-(define_insn \"*<shift_insn><mode>3_1\"\n+(define_insn \"*<insn><mode>3_1\"\n   [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(any_shiftrt:SWI12\n \t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n@@ -11793,7 +11788,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shift_insn><mode>3_1_slp\"\n+(define_insn \"*<insn><mode>3_1_slp\"\n   [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>\"))\n \t(any_shiftrt:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0\")\n \t\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))\n@@ -11821,7 +11816,7 @@\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n-(define_insn \"*<shift_insn><mode>3_cmp\"\n+(define_insn \"*<insn><mode>3_cmp\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SWI\n@@ -11853,7 +11848,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shift_insn>si3_cmp_zext\"\n+(define_insn \"*<insn>si3_cmp_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -11885,7 +11880,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<shift_insn><mode>3_cconly\"\n+(define_insn \"*<insn><mode>3_cconly\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SWI\n@@ -11917,22 +11912,22 @@\n \f\n ;; Rotate instructions\n \n-(define_expand \"<rotate_insn>ti3\"\n+(define_expand \"<insn>ti3\"\n   [(set (match_operand:TI 0 \"register_operand\")\n \t(any_rotate:TI (match_operand:TI 1 \"register_operand\")\n \t\t       (match_operand:QI 2 \"nonmemory_operand\")))]\n   \"TARGET_64BIT\"\n {\n   if (const_1_to_63_operand (operands[2], VOIDmode))\n-    emit_insn (gen_ix86_<rotate_insn>ti3_doubleword\n+    emit_insn (gen_ix86_<insn>ti3_doubleword\n \t\t(operands[0], operands[1], operands[2]));\n   else\n     FAIL;\n \n   DONE;\n })\n \n-(define_expand \"<rotate_insn>di3\"\n+(define_expand \"<insn>di3\"\n   [(set (match_operand:DI 0 \"shiftdi_operand\")\n \t(any_rotate:DI (match_operand:DI 1 \"shiftdi_operand\")\n \t\t       (match_operand:QI 2 \"nonmemory_operand\")))]\n@@ -11941,23 +11936,23 @@\n   if (TARGET_64BIT)\n     ix86_expand_binary_operator (<CODE>, DImode, operands);\n   else if (const_1_to_31_operand (operands[2], VOIDmode))\n-    emit_insn (gen_ix86_<rotate_insn>di3_doubleword\n+    emit_insn (gen_ix86_<insn>di3_doubleword\n \t\t(operands[0], operands[1], operands[2]));\n   else\n     FAIL;\n \n   DONE;\n })\n \n-(define_expand \"<rotate_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:SWIM124 0 \"nonimmediate_operand\")\n \t(any_rotate:SWIM124 (match_operand:SWIM124 1 \"nonimmediate_operand\")\n \t\t\t    (match_operand:QI 2 \"nonmemory_operand\")))]\n   \"\"\n   \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n ;; Avoid useless masking of count operand.\n-(define_insn_and_split \"*<rotate_insn><mode>3_mask\"\n+(define_insn_and_split \"*<insn><mode>3_mask\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n@@ -11995,7 +11990,7 @@\n \t\t\t (subreg:QI (match_dup 2) 0)))]\n  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n \n-(define_insn_and_split \"*<rotate_insn><mode>3_mask_1\"\n+(define_insn_and_split \"*<insn><mode>3_mask_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\")\n@@ -12102,7 +12097,7 @@\n   [(set_attr \"type\" \"rotatex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<rotate_insn><mode>3_1\"\n+(define_insn \"*<insn><mode>3_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(any_rotate:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -12169,7 +12164,7 @@\n   [(set_attr \"type\" \"rotatex\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<rotate_insn>si3_1_zext\"\n+(define_insn \"*<insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI\n \t  (any_rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n@@ -12228,7 +12223,7 @@\n   [(set (match_dup 0)\n \t(zero_extend:DI (rotatert:SI (match_dup 1) (match_dup 2))))])\n \n-(define_insn \"*<rotate_insn><mode>3_1\"\n+(define_insn \"*<insn><mode>3_1\"\n   [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(any_rotate:SWI12 (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n \t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n@@ -12251,7 +12246,7 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<rotate_insn><mode>3_1_slp\"\n+(define_insn \"*<insn><mode>3_1_slp\"\n   [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>\"))\n \t(any_rotate:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0\")\n \t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI\")))"}, {"sha": "a6ddc710a8464b7844989995658c01a7fc715c10", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=d54be5ad210b05274fbe43f9f61f9e903aabefb0", "patch": "@@ -1135,23 +1135,23 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"mmx_<plusminus_insn><mode>3\"\n+(define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\")\n \t(plusminus:MMXMODEI8\n \t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\")\n \t  (match_operand:MMXMODEI8 2 \"register_mmxmem_operand\")))]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_expand \"<plusminus_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(plusminus:MMXMODEI\n \t  (match_operand:MMXMODEI 1 \"register_operand\")\n \t  (match_operand:MMXMODEI 2 \"register_operand\")))]\n   \"TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*mmx_<plusminus_insn><mode>3\"\n+(define_insn \"*mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y,x,Yv\")\n         (plusminus:MMXMODEI8\n \t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\" \"<comm>0,0,Yv\")\n@@ -1167,15 +1167,15 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_expand \"mmx_<plusminus_insn><mode>3\"\n+(define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\")\n \t(sat_plusminus:MMXMODE12\n \t  (match_operand:MMXMODE12 1 \"register_mmxmem_operand\")\n \t  (match_operand:MMXMODE12 2 \"register_mmxmem_operand\")))]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*mmx_<plusminus_insn><mode>3\"\n+(define_insn \"*mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y,x,Yv\")\n         (sat_plusminus:MMXMODE12\n \t  (match_operand:MMXMODE12 1 \"register_mmxmem_operand\" \"<comm>0,0,Yv\")\n@@ -1508,7 +1508,7 @@\n \t  (match_operand:DI 2 \"nonmemory_operand\")))]\n   \"TARGET_MMX_WITH_SSE\")\n \n-(define_insn \"mmx_<shift_insn><mode>3\"\n+(define_insn \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y,x,Yv\")\n         (any_lshift:MMXMODE248\n \t  (match_operand:MMXMODE248 1 \"register_operand\" \"0,0,Yv\")\n@@ -1527,7 +1527,7 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_expand \"<shift_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:MMXMODE248 0 \"register_operand\")\n         (any_lshift:MMXMODE248\n \t  (match_operand:MMXMODE248 1 \"register_operand\")"}, {"sha": "928eff5e05e6384d3b942d5396cb449958f326c2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d54be5ad210b05274fbe43f9f61f9e903aabefb0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d54be5ad210b05274fbe43f9f61f9e903aabefb0", "patch": "@@ -1854,15 +1854,15 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx,avx\")])\n \n-(define_expand \"<plusminus_insn><mode>3<mask_name><round_name>\"\n+(define_expand \"<insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\")\n \t(plusminus:VF\n \t  (match_operand:VF 1 \"<round_nimm_predicate>\")\n \t  (match_operand:VF 2 \"<round_nimm_predicate>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<plusminus_insn><mode>3<mask_name><round_name>\"\n+(define_insn \"*<insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VF\n \t  (match_operand:VF 1 \"<bcst_round_nimm_predicate>\" \"<comm>0,v\")\n@@ -1879,7 +1879,7 @@\n \n ;; Standard scalar operation patterns which preserve the rest of the\n ;; vector for combiner.\n-(define_insn \"*<sse>_vm<plusminus_insn><mode>3\"\n+(define_insn \"*<sse>_vm<insn><mode>3\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (vec_duplicate:VF_128\n@@ -1899,7 +1899,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"<sse>_vm<plusminus_insn><mode>3<mask_scalar_name><round_scalar_name>\"\n+(define_insn \"<sse>_vm<insn><mode>3<mask_scalar_name><round_scalar_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,v\")\n \t(vec_merge:VF_128\n \t  (plusminus:VF_128\n@@ -2569,7 +2569,7 @@\n   operands[5] = GEN_INT (ival);\n })\n \n-(define_insn \"avx_h<plusminus_insn>v4df3\"\n+(define_insn \"avx_h<insn>v4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V4DF\n \t  (vec_concat:V2DF\n@@ -2698,7 +2698,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n-(define_insn \"avx_h<plusminus_insn>v8sf3\"\n+(define_insn \"avx_h<insn>v8sf3\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V8SF\n \t  (vec_concat:V4SF\n@@ -2741,7 +2741,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"sse3_h<plusminus_insn>v4sf3\"\n+(define_insn \"sse3_h<insn>v4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V4SF\n \t  (vec_concat:V2SF\n@@ -11489,15 +11489,15 @@\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n-(define_expand \"<plusminus_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")\n \t(plusminus:VI_AVX2\n \t  (match_operand:VI_AVX2 1 \"vector_operand\")\n \t  (match_operand:VI_AVX2 2 \"vector_operand\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_expand \"<plusminus_insn><mode>3_mask\"\n+(define_expand \"<insn><mode>3_mask\"\n   [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n \t(vec_merge:VI48_AVX512VL\n \t  (plusminus:VI48_AVX512VL\n@@ -11508,7 +11508,7 @@\n   \"TARGET_AVX512F\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_expand \"<plusminus_insn><mode>3_mask\"\n+(define_expand \"<insn><mode>3_mask\"\n   [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n \t(vec_merge:VI12_AVX512VL\n \t  (plusminus:VI12_AVX512VL\n@@ -11519,7 +11519,7 @@\n   \"TARGET_AVX512BW\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<plusminus_insn><mode>3\"\n+(define_insn \"*<insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VI_AVX2\n \t  (match_operand:VI_AVX2 1 \"bcst_vector_operand\" \"<comm>0,v\")\n@@ -11534,7 +11534,7 @@\n    (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<plusminus_insn><mode>3_mask\"\n+(define_insn \"*<insn><mode>3_mask\"\n   [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI48_AVX512VL\n \t  (plusminus:VI48_AVX512VL\n@@ -11548,7 +11548,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<plusminus_insn><mode>3_mask\"\n+(define_insn \"*<insn><mode>3_mask\"\n   [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI12_AVX512VL\n \t  (plusminus:VI12_AVX512VL\n@@ -11562,15 +11562,15 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n+(define_expand \"<sse2_avx2>_<insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\")\n \t(sat_plusminus:VI12_AVX2_AVX512BW\n \t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\")\n \t  (match_operand:VI12_AVX2_AVX512BW 2 \"vector_operand\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>\"\n+(define_insn \"*<sse2_avx2>_<insn><mode>3<mask_name>\"\n   [(set (match_operand:VI12_AVX2_AVX512BW 0 \"register_operand\" \"=x,v\")\n \t(sat_plusminus:VI12_AVX2_AVX512BW\n \t  (match_operand:VI12_AVX2_AVX512BW 1 \"vector_operand\" \"<comm>0,v\")\n@@ -12316,7 +12316,7 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<mask_codefor><shift_insn><mode>3<mask_name>\"\n+(define_insn \"<mask_codefor><insn><mode>3<mask_name>\"\n   [(set (match_operand:VI248_AVX512BW_2 0 \"register_operand\" \"=v,v\")\n \t(any_lshift:VI248_AVX512BW_2\n \t  (match_operand:VI248_AVX512BW_2 1 \"nonimmediate_operand\" \"v,vm\")\n@@ -12330,7 +12330,7 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<shift_insn><mode>3\"\n+(define_insn \"<insn><mode>3\"\n   [(set (match_operand:VI248_AVX2 0 \"register_operand\" \"=x,x\")\n \t(any_lshift:VI248_AVX2\n \t  (match_operand:VI248_AVX2 1 \"register_operand\" \"0,x\")\n@@ -12349,7 +12349,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<shift_insn><mode>3<mask_name>\"\n+(define_insn \"<insn><mode>3<mask_name>\"\n   [(set (match_operand:VI248_AVX512BW 0 \"register_operand\" \"=v,v\")\n \t(any_lshift:VI248_AVX512BW\n \t  (match_operand:VI248_AVX512BW 1 \"nonimmediate_operand\" \"v,m\")\n@@ -12390,7 +12390,7 @@\n   operands[4] = gen_lowpart (<MODE>mode, operands[3]);\n })\n \n-(define_insn \"avx512bw_<shift_insn><mode>3\"\n+(define_insn \"avx512bw_<insn><mode>3\"\n   [(set (match_operand:VIMAX_AVX512VL 0 \"register_operand\" \"=v\")\n \t(any_lshift:VIMAX_AVX512VL\n \t (match_operand:VIMAX_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n@@ -12405,7 +12405,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<sse2_avx2>_<shift_insn><mode>3\"\n+(define_insn \"<sse2_avx2>_<insn><mode>3\"\n   [(set (match_operand:VIMAX_AVX2 0 \"register_operand\" \"=x,v\")\n \t(any_lshift:VIMAX_AVX2\n \t (match_operand:VIMAX_AVX2 1 \"register_operand\" \"0,v\")\n@@ -17611,7 +17611,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<optab>v16qiv16hi2\"\n+(define_expand \"<insn>v16qiv16hi2\"\n   [(set (match_operand:V16HI 0 \"register_operand\")\n \t(any_extend:V16HI\n \t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n@@ -17628,7 +17628,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<optab>v32qiv32hi2\"\n+(define_expand \"<insn>v32qiv32hi2\"\n   [(set (match_operand:V32HI 0 \"register_operand\")\n \t(any_extend:V32HI\n \t  (match_operand:V32QI 1 \"nonimmediate_operand\")))]\n@@ -17683,7 +17683,7 @@\n \t(any_extend:V8HI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<optab>v8qiv8hi2\"\n+(define_expand \"<insn>v8qiv8hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(any_extend:V8HI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -17707,7 +17707,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<optab>v16qiv16si2\"\n+(define_expand \"<insn>v16qiv16si2\"\n   [(set (match_operand:V16SI 0 \"register_operand\")\n \t(any_extend:V16SI\n \t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n@@ -17760,7 +17760,7 @@\n \t(any_extend:V8SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<optab>v8qiv8si2\"\n+(define_expand \"<insn>v8qiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\")\n \t(any_extend:V8SI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -17823,7 +17823,7 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n-(define_expand \"<optab>v4qiv4si2\"\n+(define_expand \"<insn>v4qiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\")\n \t(any_extend:V4SI\n \t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n@@ -17847,7 +17847,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<optab>v16hiv16si2\"\n+(define_expand \"<insn>v16hiv16si2\"\n   [(set (match_operand:V16SI 0 \"register_operand\")\n \t(any_extend:V16SI\n \t  (match_operand:V16HI 1 \"nonimmediate_operand\")))]\n@@ -17864,7 +17864,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<optab>v8hiv8si2\"\n+(define_expand \"<insn>v8hiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\")\n \t(any_extend:V8SI\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n@@ -17915,7 +17915,7 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n-(define_expand \"<optab>v4hiv4si2\"\n+(define_expand \"<insn>v4hiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\")\n \t(any_extend:V4SI\n \t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n@@ -17973,7 +17973,7 @@\n \t(any_extend:V8DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<optab>v8qiv8di2\"\n+(define_expand \"<insn>v8qiv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\")\n \t(any_extend:V8DI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -18034,7 +18034,7 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n-(define_expand \"<optab>v4qiv4di2\"\n+(define_expand \"<insn>v4qiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n \t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n@@ -18062,7 +18062,7 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<optab>v2qiv2di2\"\n+(define_expand \"<insn>v2qiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2QI 1 \"register_operand\")))]\n@@ -18083,7 +18083,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<optab>v8hiv8di2\"\n+(define_expand \"<insn>v8hiv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\")\n \t(any_extend:V8DI\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n@@ -18132,7 +18132,7 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n-(define_expand \"<optab>v4hiv4di2\"\n+(define_expand \"<insn>v4hiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n \t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n@@ -18193,7 +18193,7 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2HImode, 0);\")\n \n-(define_expand \"<optab>v2hiv2di2\"\n+(define_expand \"<insn>v2hiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2HI 1 \"nonimmediate_operand\")))]\n@@ -18217,7 +18217,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<optab>v8siv8di2\"\n+(define_expand \"<insn>v8siv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n \t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -18234,7 +18234,7 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<optab>v4siv4di2\"\n+(define_expand \"<insn>v4siv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n \t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -18283,7 +18283,7 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2SImode, 0);\")\n \n-(define_expand \"<optab>v2siv2di2\"\n+(define_expand \"<insn>v2siv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2SI 1 \"nonimmediate_operand\")))]\n@@ -19822,7 +19822,7 @@\n    (set_attr \"prefix_extra\" \"2\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<shift_insn><mode>3\"\n+(define_expand \"<insn><mode>3\"\n   [(set (match_operand:VI1_AVX512 0 \"register_operand\")\n \t(any_shift:VI1_AVX512\n \t  (match_operand:VI1_AVX512 1 \"register_operand\")\n@@ -21575,7 +21575,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx2_avx512>_<shift_insn>v<mode><mask_name>\"\n+(define_insn \"<avx2_avx512>_<insn>v<mode><mask_name>\"\n   [(set (match_operand:VI48_AVX512F 0 \"register_operand\" \"=v\")\n \t(any_lshift:VI48_AVX512F\n \t  (match_operand:VI48_AVX512F 1 \"register_operand\" \"v\")\n@@ -21586,7 +21586,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx2_avx512>_<shift_insn>v<mode><mask_name>\"\n+(define_insn \"<avx2_avx512>_<insn>v<mode><mask_name>\"\n   [(set (match_operand:VI2_AVX512VL 0 \"register_operand\" \"=v\")\n \t(any_lshift:VI2_AVX512VL\n \t  (match_operand:VI2_AVX512VL 1 \"register_operand\" \"v\")"}]}