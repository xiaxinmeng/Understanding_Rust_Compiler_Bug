{"sha": "a647c005908d79bc6b50739c43b7ac105bc193a9", "node_id": "C_kwDOANBUbNoAKGE2NDdjMDA1OTA4ZDc5YmM2YjUwNzM5YzQzYjdhYzEwNWJjMTkzYTk", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-20T16:35:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-05-23T10:27:24Z"}, "message": "Make TyTy::BaseType::destructure recursive\n\nIn the case of Generic Associated Types we end up\n\n  placeholders->projections->generic-param->i32\n\nThis means we need to keep destructuring the TyTy object until we finally\nget the real type at the end. In order to do this safely we need to ensure\nwe add in recursion limits and apply this where it matters such as\ncompiling types in general too.", "tree": {"sha": "7c197b54d3e150c643b46ebfadb709ef83befa73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c197b54d3e150c643b46ebfadb709ef83befa73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a647c005908d79bc6b50739c43b7ac105bc193a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a647c005908d79bc6b50739c43b7ac105bc193a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a647c005908d79bc6b50739c43b7ac105bc193a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a647c005908d79bc6b50739c43b7ac105bc193a9/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9204e7a1ac617126b65c27668524aebf8f65f134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9204e7a1ac617126b65c27668524aebf8f65f134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9204e7a1ac617126b65c27668524aebf8f65f134"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "102bc0a3f65bbc83f465093c0d7e403c3bd4a9a4", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=a647c005908d79bc6b50739c43b7ac105bc193a9", "patch": "@@ -112,9 +112,15 @@ TyTyResolveCompile::visit (const TyTy::PlaceholderType &type)\n void\n TyTyResolveCompile::visit (const TyTy::ParamType &param)\n {\n-  // FIXME make this reuse the same machinery from constexpr code\n-  recursion_count++;\n-  rust_assert (recursion_count < kDefaultRecusionLimit);\n+  if (recurisve_ops++ >= rust_max_recursion_depth)\n+    {\n+      rust_error_at (Location (),\n+\t\t     \"%<recursion depth%> count exceeds limit of %i (use \"\n+\t\t     \"%<frust-max-recursion-depth=%> to increase the limit)\",\n+\t\t     rust_max_recursion_depth);\n+      translated = error_mark_node;\n+      return;\n+    }\n \n   param.resolve ()->accept_vis (*this);\n }"}, {"sha": "262b8fc51a08c571759f43509ef517099b3c75b2", "filename": "gcc/rust/backend/rust-compile-type.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.h?ref=a647c005908d79bc6b50739c43b7ac105bc193a9", "patch": "@@ -63,16 +63,13 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n private:\n   TyTyResolveCompile (Context *ctx, bool trait_object_mode)\n     : ctx (ctx), trait_object_mode (trait_object_mode),\n-      translated (error_mark_node), recursion_count (0)\n+      translated (error_mark_node), recurisve_ops (0)\n   {}\n \n   Context *ctx;\n   bool trait_object_mode;\n   tree translated;\n-\n-  // FIXME this needs to be derived from the gcc config option\n-  size_t recursion_count;\n-  static const size_t kDefaultRecusionLimit = 5;\n+  int recurisve_ops;\n };\n \n } // namespace Compile"}, {"sha": "58ec9a75e9a39db9347a89d5a3186389c24049c9", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=a647c005908d79bc6b50739c43b7ac105bc193a9", "patch": "@@ -66,6 +66,10 @@ frust-dump-\n Rust Joined RejectNegative\n -frust-dump-<type>\tDump Rust frontend internal information.\n \n+frust-max-recursion-depth=\n+Rust RejectNegative Type(int) Var(rust_max_recursion_depth) Init(64)\n+-frust-max-recursion-depth=integer\n+\n frust-mangling=\n Rust Joined RejectNegative Enum(frust_mangling) Var(flag_rust_mangling)\n -frust-mangling=[legacy|v0]     Choose which version to use for name mangling"}, {"sha": "f03bc8234c8227dda8fd2d330a99d10acc25d365", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a647c005908d79bc6b50739c43b7ac105bc193a9/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a647c005908d79bc6b50739c43b7ac105bc193a9", "patch": "@@ -252,33 +252,49 @@ BaseType::get_root () const\n const BaseType *\n BaseType::destructure () const\n {\n-  switch (get_kind ())\n+  int recurisve_ops = 0;\n+  const BaseType *x = this;\n+  while (true)\n     {\n-      case TyTy::TypeKind::PARAM: {\n-\tconst TyTy::ParamType *p = static_cast<const TyTy::ParamType *> (this);\n-\treturn p->resolve ();\n-      }\n-      break;\n-\n-      case TyTy::TypeKind::PLACEHOLDER: {\n-\tconst TyTy::PlaceholderType *p\n-\t  = static_cast<const TyTy::PlaceholderType *> (this);\n-\trust_assert (p->can_resolve ());\n-\treturn p->resolve ();\n-      }\n-      break;\n-\n-      case TyTy::TypeKind::PROJECTION: {\n-\tconst TyTy::ProjectionType *p\n-\t  = static_cast<const TyTy::ProjectionType *> (this);\n-\treturn p->get ();\n-      }\n+      if (recurisve_ops++ >= rust_max_recursion_depth)\n+\t{\n+\t  rust_error_at (\n+\t    Location (),\n+\t    \"%<recursion depth%> count exceeds limit of %i (use \"\n+\t    \"%<frust-max-recursion-depth=%> to increase the limit)\",\n+\t    rust_max_recursion_depth);\n+\t  return new ErrorType (get_ref ());\n+\t}\n \n-    default:\n-      return this;\n+      switch (x->get_kind ())\n+\t{\n+\t  case TyTy::TypeKind::PARAM: {\n+\t    const TyTy::ParamType *p = static_cast<const TyTy::ParamType *> (x);\n+\t    x = p->resolve ();\n+\t  }\n+\t  break;\n+\n+\t  case TyTy::TypeKind::PLACEHOLDER: {\n+\t    const TyTy::PlaceholderType *p\n+\t      = static_cast<const TyTy::PlaceholderType *> (x);\n+\t    rust_assert (p->can_resolve ());\n+\t    x = p->resolve ();\n+\t  }\n+\t  break;\n+\n+\t  case TyTy::TypeKind::PROJECTION: {\n+\t    const TyTy::ProjectionType *p\n+\t      = static_cast<const TyTy::ProjectionType *> (x);\n+\t    x = p->get ();\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  return x;\n+\t}\n     }\n \n-  return this;\n+  return x;\n }\n \n TyVar::TyVar (HirId ref) : ref (ref)"}]}