{"sha": "d5726973a7a4fbeb898d9ba35235f8559295b8c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3MjY5NzNhN2E0ZmJlYjg5OGQ5YmEzNTIzNWY4NTU5Mjk1YjhjNw==", "commit": {"author": {"name": "Jim Wilson", "email": "jim.wilson@linaro.org", "date": "2015-06-03T00:46:19Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2015-06-03T00:46:19Z"}, "message": "re PR target/66258 (compiling a stdarg function with arch +nofp generates an ICE)\n\ngcc/\n\tPR target/66258\n\t* config/aarch64/aarch64.c (aarch64_function_value_regno_p): Change\n\t!TARGET_GENERAL_REGS_ONLY to TARGET_FLOAT.\n\t(aarch64_secondary_reload): Likewise\n\t(aarch64_expand_builtin_va_start): Change TARGET_GENERAL_REGS_ONLY\n\tto !TARGET_FLOAT.\n\t(aarch64_gimplify_va_arg_expr, aarch64_setup_incoming_varargs):\n\tLikewise.\n\nFrom-SVN: r224054", "tree": {"sha": "83fcd57a10461092cab429be54c0299f02770056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83fcd57a10461092cab429be54c0299f02770056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5726973a7a4fbeb898d9ba35235f8559295b8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5726973a7a4fbeb898d9ba35235f8559295b8c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5726973a7a4fbeb898d9ba35235f8559295b8c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5726973a7a4fbeb898d9ba35235f8559295b8c7/comments", "author": null, "committer": null, "parents": [{"sha": "b20b17b1c4e71678919006a09d68418eaeb04eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20b17b1c4e71678919006a09d68418eaeb04eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20b17b1c4e71678919006a09d68418eaeb04eea"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "8d25dc90168d988fcb690713a815f37f920cb6f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5726973a7a4fbeb898d9ba35235f8559295b8c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5726973a7a4fbeb898d9ba35235f8559295b8c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5726973a7a4fbeb898d9ba35235f8559295b8c7", "patch": "@@ -1,3 +1,14 @@\n+2015-06-02  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\tPR target/66258\n+\t* config/aarch64/aarch64.c (aarch64_function_value_regno_p): Change\n+\t!TARGET_GENERAL_REGS_ONLY to TARGET_FLOAT.\n+\t(aarch64_secondary_reload): Likewise\n+\t(aarch64_expand_builtin_va_start): Change TARGET_GENERAL_REGS_ONLY\n+\tto !TARGET_FLOAT.\n+\t(aarch64_gimplify_va_arg_expr, aarch64_setup_incoming_varargs):\n+\tLikewise.\n+\n 2015-06-03  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n "}, {"sha": "968a6b606fced6f46b7b91fffeec841817f9981d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5726973a7a4fbeb898d9ba35235f8559295b8c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5726973a7a4fbeb898d9ba35235f8559295b8c7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d5726973a7a4fbeb898d9ba35235f8559295b8c7", "patch": "@@ -1666,7 +1666,7 @@ aarch64_function_value_regno_p (const unsigned int regno)\n   /* Up to four fp/simd registers can return a function value, e.g. a\n      homogeneous floating-point aggregate having four members.  */\n   if (regno >= V0_REGNUM && regno < V0_REGNUM + HA_MAX_NUM_FLDS)\n-    return !TARGET_GENERAL_REGS_ONLY;\n+    return TARGET_FLOAT;\n \n   return false;\n }\n@@ -4783,7 +4783,7 @@ aarch64_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x,\n   /* A TFmode or TImode memory access should be handled via an FP_REGS\n      because AArch64 has richer addressing modes for LDR/STR instructions\n      than LDP/STP instructions.  */\n-  if (!TARGET_GENERAL_REGS_ONLY && rclass == GENERAL_REGS\n+  if (TARGET_FLOAT && rclass == GENERAL_REGS\n       && GET_MODE_SIZE (mode) == 16 && MEM_P (x))\n     return FP_REGS;\n \n@@ -7571,7 +7571,7 @@ aarch64_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   vr_save_area_size\n     = (NUM_FP_ARG_REGS - cum->aapcs_nvrn) * UNITS_PER_VREG;\n \n-  if (TARGET_GENERAL_REGS_ONLY)\n+  if (!TARGET_FLOAT)\n     {\n       if (cum->aapcs_nvrn > 0)\n \tsorry (\"%qs and floating point or vector arguments\",\n@@ -7681,7 +7681,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t\t\t\t       &is_ha))\n     {\n       /* TYPE passed in fp/simd registers.  */\n-      if (TARGET_GENERAL_REGS_ONLY)\n+      if (!TARGET_FLOAT)\n \tsorry (\"%qs and floating point or vector arguments\",\n \t       \"-mgeneral-regs-only\");\n \n@@ -7918,7 +7918,7 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n   gr_saved = NUM_ARG_REGS - local_cum.aapcs_ncrn;\n   vr_saved = NUM_FP_ARG_REGS - local_cum.aapcs_nvrn;\n \n-  if (TARGET_GENERAL_REGS_ONLY)\n+  if (!TARGET_FLOAT)\n     {\n       if (local_cum.aapcs_nvrn > 0)\n \tsorry (\"%qs and floating point or vector arguments\","}]}