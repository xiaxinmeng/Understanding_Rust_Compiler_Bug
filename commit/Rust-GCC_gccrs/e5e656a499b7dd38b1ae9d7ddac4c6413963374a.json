{"sha": "e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlNjU2YTQ5OWI3ZGQzOGIxYWU5ZDdkZGFjNGM2NDEzOTYzMzc0YQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-04-11T18:55:47Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-04-11T18:55:47Z"}, "message": "re PR tree-optimization/20612 (ICE in verify_ssa for -ftree-loop-linear)\n\n2005-04-11  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/20612\n\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Fix increment\n\thandling\n\t(perfect_nestify): preheaderbb is *not* part of loop of the\n\told destination.\n\nFrom-SVN: r97979", "tree": {"sha": "9b4105c0a8a37d97ca82b634c1476dd065030f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b4105c0a8a37d97ca82b634c1476dd065030f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e656a499b7dd38b1ae9d7ddac4c6413963374a/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3010d7286ad5f894ef662ea189c201f2a724290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3010d7286ad5f894ef662ea189c201f2a724290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3010d7286ad5f894ef662ea189c201f2a724290"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "1a723feafa562520ec785d256e67670d97e61e60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e656a499b7dd38b1ae9d7ddac4c6413963374a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e656a499b7dd38b1ae9d7ddac4c6413963374a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "patch": "@@ -1,3 +1,11 @@\n+2005-04-11  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR tree-optimization/20612\n+\t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Fix increment\n+\thandling\n+\t(perfect_nestify): preheaderbb is *not* part of loop of the\n+\told destination.\n+\n 2005-04-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* tree-ssa-alias.c (may_alias_p): If the variable"}, {"sha": "5b23d6d5fa136995210c9e245ed8ba4c35168270", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e656a499b7dd38b1ae9d7ddac4c6413963374a/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e656a499b7dd38b1ae9d7ddac4c6413963374a/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=e5e656a499b7dd38b1ae9d7ddac4c6413963374a", "patch": "@@ -1874,6 +1874,7 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       lambda_linear_expression offset;\n       tree type;\n       bool insert_after;\n+      tree inc_stmt;\n \n       oldiv = VEC_index (tree, old_ivs, i);\n       type = TREE_TYPE (oldiv);\n@@ -1922,7 +1923,20 @@ lambda_loopnest_to_gcc_loopnest (struct loop *old_loopnest,\n       create_iv (newlowerbound,\n \t\t build_int_cst (type, LL_STEP (newloop)),\n \t\t ivvar, temp, &bsi, insert_after, &ivvar,\n-\t\t &ivvarinced);\n+\t\t NULL);\n+\n+      /* Unfortunately, the incremented ivvar that create_iv inserted may not\n+\t dominate the block containing the exit condition.\n+\t So we simply create our own incremented iv to use in the new exit\n+\t test,  and let redundancy elimination sort it out.  */\n+      inc_stmt = build (PLUS_EXPR, type, \n+\t\t\tivvar, build_int_cst (type, LL_STEP (newloop)));\n+      inc_stmt = build (MODIFY_EXPR, void_type_node, SSA_NAME_VAR (ivvar),\n+\t\t\tinc_stmt);\n+      ivvarinced = make_ssa_name (SSA_NAME_VAR (ivvar), inc_stmt);\n+      TREE_OPERAND (inc_stmt, 0) = ivvarinced;\n+      bsi = bsi_for_stmt (exitcond);\n+      bsi_insert_before (&bsi, inc_stmt, BSI_SAME_STMT);\n \n       /* Replace the exit condition with the new upper bound\n          comparison.  */\n@@ -2375,7 +2389,6 @@ perfect_nestify (struct loops *loops,\n   add_bb_to_loop (latchbb, newloop);\n   add_bb_to_loop (bodybb, newloop);\n   add_bb_to_loop (headerbb, newloop);\n-  add_bb_to_loop (preheaderbb, olddest->loop_father);\n   set_immediate_dominator (CDI_DOMINATORS, bodybb, headerbb);\n   set_immediate_dominator (CDI_DOMINATORS, headerbb, preheaderbb);\n   set_immediate_dominator (CDI_DOMINATORS, preheaderbb, "}]}