{"sha": "2e023647c8e5733305471da13cc5144e1cc3d42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwMjM2NDdjOGU1NzMzMzA1NDcxZGExM2NjNTE0NGUxY2MzZDQyYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-03T18:58:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-03T18:58:00Z"}, "message": "PR libstdc++/85632 fix wraparound in filesystem::space\n\nOn 32-bit targets any values over 4GB would wrap and produce the wrong\nresult.\n\n\tPR libstdc++/85632 use uintmax_t for arithmetic\n\t* src/filesystem/ops.cc (experimental::filesystem::space): Perform\n\tarithmetic in result type.\n\t* src/filesystem/std-ops.cc (filesystem::space): Likewise.\n\t* testsuite/27_io/filesystem/operations/space.cc: Check total capacity\n\tis greater than free space.\n\t* testsuite/experimental/filesystem/operations/space.cc: New.\n\nFrom-SVN: r259901", "tree": {"sha": "17215da3d46876570a25807283d69460939f54a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17215da3d46876570a25807283d69460939f54a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e023647c8e5733305471da13cc5144e1cc3d42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e023647c8e5733305471da13cc5144e1cc3d42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e023647c8e5733305471da13cc5144e1cc3d42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e023647c8e5733305471da13cc5144e1cc3d42b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18734b5adea54ddd004e51b8d2593752133596c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18734b5adea54ddd004e51b8d2593752133596c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18734b5adea54ddd004e51b8d2593752133596c"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "c2a224da55bbd375e8d498107a37cf21c6fef552", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e023647c8e5733305471da13cc5144e1cc3d42b", "patch": "@@ -1,5 +1,13 @@\n 2018-05-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/85632 use uintmax_t for arithmetic\n+\t* src/filesystem/ops.cc (experimental::filesystem::space): Perform\n+\tarithmetic in result type.\n+\t* src/filesystem/std-ops.cc (filesystem::space): Likewise.\n+\t* testsuite/27_io/filesystem/operations/space.cc: Check total capacity\n+\tis greater than free space.\n+\t* testsuite/experimental/filesystem/operations/space.cc: New.\n+\n \t* testsuite/20_util/remove_cvref/requirements/alias_decl.cc: New.\n \t* testsuite/20_util/remove_cvref/requirements/explicit_instantiation.cc:\n \tNew."}, {"sha": "4a9e265d1d641baefbf614356e3338846f322ae1", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=2e023647c8e5733305471da13cc5144e1cc3d42b", "patch": "@@ -1132,10 +1132,11 @@ fs::space(const path& p, error_code& ec) noexcept\n       ec.assign(errno, std::generic_category());\n   else\n     {\n+      uintmax_t fragment_size = f.f_frsize;\n       info = space_info{\n-\tf.f_blocks * f.f_frsize,\n-\tf.f_bfree * f.f_frsize,\n-\tf.f_bavail * f.f_frsize\n+\tf.f_blocks * fragment_size,\n+\tf.f_bfree * fragment_size,\n+\tf.f_bavail * fragment_size\n       };\n       ec.clear();\n     }"}, {"sha": "74868cd48e6dddb41185814c5b53f3867ce4095c", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=2e023647c8e5733305471da13cc5144e1cc3d42b", "patch": "@@ -1378,10 +1378,11 @@ fs::space(const path& p, error_code& ec) noexcept\n       ec.assign(errno, std::generic_category());\n   else\n     {\n+      uintmax_t fragment_size = f.f_frsize;\n       info = space_info{\n-\tf.f_blocks * f.f_frsize,\n-\tf.f_bfree * f.f_frsize,\n-\tf.f_bavail * f.f_frsize\n+\tf.f_blocks * fragment_size,\n+\tf.f_bfree * fragment_size,\n+\tf.f_bavail * fragment_size\n       };\n       ec.clear();\n     }"}, {"sha": "3d64342fb8f3a5a3eb10b3e1c3ebcfe65f179019", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/space.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc?ref=2e023647c8e5733305471da13cc5144e1cc3d42b", "patch": "@@ -32,15 +32,24 @@ test01()\n   std::error_code ec = make_error_code(std::errc::invalid_argument);\n   s = std::filesystem::space(\"/\", ec);\n   VERIFY( !ec );\n+\n   s = std::filesystem::space(__gnu_test::nonexistent_path(), ec);\n   VERIFY( ec );\n   VERIFY( s.capacity ==  static_cast<uintmax_t>(-1) );\n   VERIFY( s.free ==  static_cast<uintmax_t>(-1) );\n   VERIFY( s.available ==  static_cast<uintmax_t>(-1) );\n }\n \n+void\n+test02()\n+{\n+  std::filesystem::space_info s = std::filesystem::space(\".\");\n+  VERIFY( s.capacity >= s.free );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "aa6a6aeaa602a2ab7836cda6ddd399f71fbd59a3", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/space.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e023647c8e5733305471da13cc5144e1cc3d42b/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc?ref=2e023647c8e5733305471da13cc5144e1cc3d42b", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2017-2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// 30.10.14.3 Permissions [fs.op.space]\n+\n+#include <experimental/filesystem>\n+#include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  fs::space_info s = fs::space(\"/\");\n+  std::error_code ec = make_error_code(std::errc::invalid_argument);\n+  s = fs::space(\"/\", ec);\n+  VERIFY( !ec );\n+\n+  s = fs::space(__gnu_test::nonexistent_path(), ec);\n+  VERIFY( ec );\n+  VERIFY( s.capacity ==  static_cast<uintmax_t>(-1) );\n+  VERIFY( s.free ==  static_cast<uintmax_t>(-1) );\n+  VERIFY( s.available ==  static_cast<uintmax_t>(-1) );\n+}\n+\n+void\n+test02()\n+{\n+  fs::space_info s = fs::space(\".\");\n+  VERIFY( s.capacity >= s.free );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}