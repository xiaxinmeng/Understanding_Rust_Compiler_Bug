{"sha": "42002dfec374c429569796c275001f1b0635e674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwMDJkZmVjMzc0YzQyOTU2OTc5NmMyNzUwMDFmMWIwNjM1ZTY3NA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-01-07T19:45:33Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-07T19:45:33Z"}, "message": "attr-alloc_size-3.c: Remove regex made redundant by r243461.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/attr-alloc_size-3.c: Remove regex made redundant by r243461.\n\t* gcc.dg/attr-alloc_size-4.c: Same.\n\nFrom-SVN: r244197", "tree": {"sha": "3f72a395bb311125d47f35badf9f0f92ead56640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f72a395bb311125d47f35badf9f0f92ead56640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42002dfec374c429569796c275001f1b0635e674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42002dfec374c429569796c275001f1b0635e674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42002dfec374c429569796c275001f1b0635e674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42002dfec374c429569796c275001f1b0635e674/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de91486c745d5ff6aff491cb9bd1a78875bf090c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de91486c745d5ff6aff491cb9bd1a78875bf090c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de91486c745d5ff6aff491cb9bd1a78875bf090c"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "340ec41053902058baa7ff1d0c27a02084cc5daa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42002dfec374c429569796c275001f1b0635e674", "patch": "@@ -1,3 +1,8 @@\n+2017-01-07  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/attr-alloc_size-3.c: Remove regex made redundant by r243461.\n+\t* gcc.dg/attr-alloc_size-4.c: Same.\n+\n 2017-01-07  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* gfortran.dg/coarray/ptr_comp_1.f08: New test."}, {"sha": "a124a8791ad6e046a59fe1eec130123b935316bd", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-3.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c?ref=42002dfec374c429569796c275001f1b0635e674", "patch": "@@ -410,21 +410,21 @@ test_size_cst (void)\n \n   sink (f_size_1 (0));\n   sink (f_size_1 (1));\n-  sink (f_size_1 (max - 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_1 (max));      /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_1 (max - 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_1 (max));      /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n \n-  sink (f_size_2 (0, max - 1));  /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (max - 1, 0));  /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (1, max - 1));  /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (max - 1, 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (max - 1, max - 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" \"argument 2\" { target *-*-* } .-1 } */\n+  sink (f_size_2 (0, max - 1));  /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (max - 1, 0));  /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (1, max - 1));  /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (max - 1, 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (max - 1, max - 1));  /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" \"argument 2\" { target *-*-* } .-1 } */\n \n-  sink (f_size_2 (0, max));      /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (max, 0));      /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (0, max));      /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (max, 0));      /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size \\[0-9\\]+\" } */\n \n-  sink (f_size_2 (max / 2, 2));      /* { dg-warning \"product .\\[0-9\\]+\\[lu\\]* \\\\* \\[0-9\\]+\\[lu\\]*. of arguments 1 and 2 exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (max / 2, 3));      /* { dg-warning \"product .\\[0-9\\]+\\[lu\\]* \\\\* \\[0-9\\]+\\[lu\\]*. of arguments 1 and 2 exceeds .SIZE_MAX.\" } */\n+  sink (f_size_2 (max / 2, 2));      /* { dg-warning \"product .\\[0-9\\]+ \\\\* \\[0-9\\]+. of arguments 1 and 2 exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (max / 2, 3));      /* { dg-warning \"product .\\[0-9\\]+ \\\\* \\[0-9\\]+. of arguments 1 and 2 exceeds .SIZE_MAX.\" } */\n }\n \n void\n@@ -445,7 +445,7 @@ test_size_range (size_t ui, ptrdiff_t si)\n   sink (f_size_1 (UAR (1, 1)));\n   /* Since the only valid argument in the anti-range below is zero\n      a warning is expected even though -Walloc-zero is not specified.  */\n-  sink (f_size_1 (UAR (1, umax / 2)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n+  sink (f_size_1 (UAR (1, umax / 2)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n   /* The only valid argument in this range is 1.  */\n   sink (f_size_1 (UAR (2, umax / 2)));\n \n@@ -456,14 +456,14 @@ test_size_range (size_t ui, ptrdiff_t si)\n   sink (f_size_2 (umax / 2, ui));\n   sink (f_size_2 (umax / 2, si));\n \n-  sink (f_size_2 (UR (0, 1), umax));   /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size \" } */\n+  sink (f_size_2 (UR (0, 1), umax));   /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size \" } */\n   sink (f_size_2 (UR (0, 1), umax / 2));\n   sink (f_size_2 (UR (0, umax / 2), umax / 2));\n \n-  sink (f_size_2 (UR (umax / 2 + 1, umax / 2 + 2), ui));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n-  sink (f_size_2 (ui, UR (umax / 2 + 1, umax / 2 + 2)));  /* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n-  sink (f_size_2 (UR (umax / 2 + 1, umax), UR (umax / 2 + 1, umax)));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n-/* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" \"argument 2\" { target *-*-* } .-1 } */\n+  sink (f_size_2 (UR (umax / 2 + 1, umax / 2 + 2), ui));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n+  sink (f_size_2 (ui, UR (umax / 2 + 1, umax / 2 + 2)));  /* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n+  sink (f_size_2 (UR (umax / 2 + 1, umax), UR (umax / 2 + 1, umax)));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n+/* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" \"argument 2\" { target *-*-* } .-1 } */\n \n   sink (f_size_2 (SR (smin, 1), 1));\n   sink (f_size_2 (SR (smin, 1), umax / 2));"}, {"sha": "6b70a85835cbddbacb2363b981b311da5d5d22b4", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-4.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42002dfec374c429569796c275001f1b0635e674/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c?ref=42002dfec374c429569796c275001f1b0635e674", "patch": "@@ -129,7 +129,7 @@ test_int_range (int n)\n   sink (f_int_1 (SR (min, 1234)));\n   sink (f_int_1 (SR (-2, -1)));   /* { dg-warning \"argument 1 range \\\\\\[-2, -1\\\\\\] is negative\" } */\n   sink (f_int_1 (SR (1235, 2345)));  /* { dg-warning \"argument 1 range \\\\\\[1235, 2345\\\\\\] exceeds maximum object size 1234\" } */\n-  sink (f_int_1 (SR (max - 1, max)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size 1234\" } */\n+  sink (f_int_1 (SR (max - 1, max)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size 1234\" } */\n \n   sink (f_int_1 (SAR (-1, 1)));\n   sink (f_int_1 (SAR (-2, 12)));\n@@ -149,12 +149,12 @@ test_size_cst (void)\n \n   sink (f_size_2 (   0, 1234));\n   sink (f_size_2 (   1, 1234));\n-  sink (f_size_2 (   2, 1234));  /* { dg-warning \"product .2\\[lu\\]* \\\\* 1234\\[lu\\]*. of arguments 1 and 2 exceeds maximum object size \\[0-9\\]+\" } */\n-  sink (f_size_2 (1234, 1234));  /* { dg-warning \"product .1234\\[lu\\]* \\\\* 1234\\[lu\\]*. of arguments 1 and 2 exceeds maximum object size 1234\" } */\n-  sink (f_size_2 (1235, 1234));  /* { dg-warning \"argument 1 value .1235\\[lu\\]*. exceeds maximum object size 1234\" } */\n-  sink (f_size_2 (1234, 1235));  /* { dg-warning \"argument 2 value .1235\\[lu\\]*. exceeds maximum object size 1234\" } */\n-  sink (f_size_2 (1234, max));  /* { dg-warning \"argument 2 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size 1234\" } */\n-  sink (f_size_2 (max, 1234));  /* { dg-warning \"argument 1 value .\\[0-9\\]+\\[lu\\]*. exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (   2, 1234));  /* { dg-warning \"product .2 \\\\* 1234. of arguments 1 and 2 exceeds maximum object size \\[0-9\\]+\" } */\n+  sink (f_size_2 (1234, 1234));  /* { dg-warning \"product .1234 \\\\* 1234. of arguments 1 and 2 exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (1235, 1234));  /* { dg-warning \"argument 1 value .1235. exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (1234, 1235));  /* { dg-warning \"argument 2 value .1235. exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (1234, max));  /* { dg-warning \"argument 2 value .\\[0-9\\]+. exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (max, 1234));  /* { dg-warning \"argument 1 value .\\[0-9\\]+. exceeds maximum object size 1234\" } */\n }\n \n void\n@@ -172,7 +172,7 @@ test_size_range (size_t n)\n   sink (f_size_1 (UAR (1, 1)));\n   /* Since the only valid argument in the anti-range below is zero\n      a warning is expected even though -Walloc-zero is not specified.  */\n-  sink (f_size_1 (UAR (1, 1234)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n+  sink (f_size_1 (UAR (1, 1234)));   /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n   /* The only valid argument in this range is 1.  */\n   sink (f_size_1 (UAR (2, max / 2)));\n \n@@ -181,11 +181,11 @@ test_size_range (size_t n)\n   sink (f_size_2 (1234, n));\n \n   sink (f_size_2 (UR (0, 1), 1234));\n-  sink (f_size_2 (UR (0, 1), 1235));   /* { dg-warning \"argument 2 value .1235\\[lu\\]*. exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (UR (0, 1), 1235));   /* { dg-warning \"argument 2 value .1235. exceeds maximum object size 1234\" } */\n \n-  sink (f_size_2 (UR (1235, 1236), n));  /* { dg-warning \"argument 1 range \\\\\\[1235\\[lu\\]*, 1236\\[lu\\]*\\\\\\] exceeds maximum object size 1234\" } */\n+  sink (f_size_2 (UR (1235, 1236), n));  /* { dg-warning \"argument 1 range \\\\\\[1235, 1236\\\\\\] exceeds maximum object size 1234\" } */\n \n-  sink (f_size_2 (UR (1235, 1236), UR (max / 2, max)));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" } */\n-/* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+\\[lu\\]*, \\[0-9\\]+\\[lu\\]*\\\\\\] exceeds maximum object size \" \"argument 2\" { target *-*-* } .-1 } */\n+  sink (f_size_2 (UR (1235, 1236), UR (max / 2, max)));  /* { dg-warning \"argument 1 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" } */\n+/* { dg-warning \"argument 2 range \\\\\\[\\[0-9\\]+, \\[0-9\\]+\\\\\\] exceeds maximum object size \" \"argument 2\" { target *-*-* } .-1 } */\n \n }"}]}