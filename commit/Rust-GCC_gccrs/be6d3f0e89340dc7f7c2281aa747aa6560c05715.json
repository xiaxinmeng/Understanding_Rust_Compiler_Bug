{"sha": "be6d3f0e89340dc7f7c2281aa747aa6560c05715", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2ZDNmMGU4OTM0MGRjN2Y3YzIyODFhYTc0N2FhNjU2MGMwNTcxNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-25T09:43:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-25T09:43:59Z"}, "message": "invoke.texi: Document -Ofast.\n\n2010-05-25  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi: Document -Ofast.\n\t* target.h (struct gcc_target): Add handle_ofast.\n\t* target-def.h (TARGET_HANDLE_OFAST): Add.\n\t(TARGET_INITIALIZER): Adjust.\n\t* opts.c (decode_options): Handle -Ofast.  Enable\n\t-ffast-math with it.\n\t* common.opt (Ofast): Add.\n\nFrom-SVN: r159815", "tree": {"sha": "dd1f2d3dad086f5e1ff288dfa3a8011ce6cd30b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd1f2d3dad086f5e1ff288dfa3a8011ce6cd30b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6d3f0e89340dc7f7c2281aa747aa6560c05715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6d3f0e89340dc7f7c2281aa747aa6560c05715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6d3f0e89340dc7f7c2281aa747aa6560c05715", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6d3f0e89340dc7f7c2281aa747aa6560c05715/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac5eda130d2cb1948a618873440e67216806e5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5eda130d2cb1948a618873440e67216806e5d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5eda130d2cb1948a618873440e67216806e5d9"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "3ac6da341543921e13a0c315bbcede0d74c27602", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -1,3 +1,13 @@\n+2010-05-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi: Document -Ofast.\n+\t* target.h (struct gcc_target): Add handle_ofast.\n+\t* target-def.h (TARGET_HANDLE_OFAST): Add.\n+\t(TARGET_INITIALIZER): Adjust.\n+\t* opts.c (decode_options): Handle -Ofast.  Enable\n+\t-ffast-math with it.\n+\t* common.opt (Ofast): Add.\n+\n 2010-05-25  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/tm.texi (STORE_FLAG_VALUE): Do not refer to sCC patterns."}, {"sha": "49044815509da641b2e04e6a120c5a8078906dc4", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -69,6 +69,10 @@ Os\n Common Optimization\n Optimize for space rather than speed\n \n+Ofast\n+Common Optimization\n+Optimize for speed disregarding exact standards compliance\n+\n W\n Common RejectNegative Var(extra_warnings) Warning\n This switch is deprecated; use -Wextra instead"}, {"sha": "e9b3eab1f335cbebeb99fe1919545800f63d9db2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -393,7 +393,7 @@ Objective-C and Objective-C++ Dialects}.\n -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb @gol\n -fwhole-program -fwhopr[=@var{n}] -fwpa -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n--O  -O0  -O1  -O2  -O3  -Os}\n+-O  -O0  -O1  -O2  -O3  -Os -Ofast}\n \n @item Preprocessor Options\n @xref{Preprocessor Options,,Options Controlling the Preprocessor}.\n@@ -5891,6 +5891,13 @@ optimizations designed to reduce code size.\n -falign-labels  -freorder-blocks  -freorder-blocks-and-partition @gol\n -fprefetch-loop-arrays  -ftree-vect-loop-version}\n \n+@item -Ofast\n+@opindex Ofast\n+Disregard strict standards compliance.  @option{-Ofast} enables all\n+@option{-O3} optimizations.  It also enables optimizations that are not\n+valid for all standard compliant programs.\n+It turns on @option{-ffast-math}.\n+\n If you use multiple @option{-O} options, with or without level numbers,\n the last such option is the one that is effective.\n @end table"}, {"sha": "2e788d28fddb1ffbb345284a55ad414f64c45007", "filename": "gcc/opts.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -63,7 +63,7 @@ bool warn_larger_than;\n HOST_WIDE_INT larger_than_size;\n \n /* True to warn about any function whose frame size is larger\n- * than N bytes. */\n+   than N bytes. */\n bool warn_frame_larger_than;\n HOST_WIDE_INT frame_larger_than_size;\n \n@@ -804,6 +804,7 @@ decode_options (unsigned int argc, const char **argv)\n   int opt2;\n   int opt3;\n   int opt1_max;\n+  int ofast = 0;\n \n   if (first_time_p)\n     {\n@@ -831,6 +832,7 @@ decode_options (unsigned int argc, const char **argv)\n \t{\n \t  optimize = 1;\n \t  optimize_size = 0;\n+\t  ofast = 0;\n \t}\n       else if (argv[i][0] == '-' && argv[i][1] == 'O')\n \t{\n@@ -843,6 +845,14 @@ decode_options (unsigned int argc, const char **argv)\n \n \t      /* Optimizing for size forces optimize to be 2.  */\n \t      optimize = 2;\n+\t      ofast = 0;\n+\t    }\n+\t  else if (strcmp (p, \"fast\") == 0)\n+\t    {\n+\t      /* -Ofast only adds flags to -O3.  */\n+\t      optimize_size = 0;\n+\t      optimize = 3;\n+\t      ofast = 1;\n \t    }\n \t  else\n \t    {\n@@ -853,6 +863,7 @@ decode_options (unsigned int argc, const char **argv)\n \t\t  if ((unsigned int) optimize > 255)\n \t\t    optimize = 255;\n \t\t  optimize_size = 0;\n+\t\t  ofast = 0;\n \t\t}\n \t    }\n \t}\n@@ -967,6 +978,17 @@ decode_options (unsigned int argc, const char **argv)\n   else\n     set_param_value (\"min-crossjump-insns\", initial_min_crossjump_insns);\n \n+  /* -Ofast adds optimizations to -O3.  */\n+  if (ofast)\n+    {\n+      /* Which is -ffast-math for now.  */\n+      set_fast_math_flags (1);\n+      /* Allow targets to enable extra options with -Ofast\n+\t before general options processing so disabling them\n+\t again afterwards works.  */\n+      targetm.handle_ofast ();\n+    }\n+\n   /* Enable -Werror=coverage-mismatch by default */\n   enable_warning_as_error(\"coverage-mismatch\", 1, lang_mask);\n "}, {"sha": "4db3997ad114565d2163481f23eb7c2c615269b4", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -431,6 +431,7 @@\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook_void_void\n \n #define TARGET_HANDLE_OPTION hook_bool_size_t_constcharptr_int_true\n+#define TARGET_HANDLE_OFAST hook_void_void\n #define TARGET_HELP NULL\n \n /* In except.c */\n@@ -939,6 +940,7 @@\n   TARGET_DEFAULT_TARGET_FLAGS,\t\t\t\\\n   TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE,\t\t\\\n   TARGET_HANDLE_OPTION,\t\t\t\t\\\n+  TARGET_HANDLE_OFAST,\t\t\t\t\\\n   TARGET_HELP,\t\t\t\t\t\\\n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n   TARGET_LIBGCC_CMP_RETURN_MODE,                \\"}, {"sha": "6f045da12996bb66783d884c12dc978361a47e9e", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6d3f0e89340dc7f7c2281aa747aa6560c05715/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=be6d3f0e89340dc7f7c2281aa747aa6560c05715", "patch": "@@ -531,6 +531,9 @@ struct gcc_target\n      form was.  Return true if the switch was valid.  */\n   bool (* handle_option) (size_t code, const char *arg, int value);\n \n+  /* Handle target-specific parts of specifying -Ofast.  */\n+  void (* handle_ofast) (void);\n+\n   /* Display extra, target specific information in response to a\n      --target-help switch.  */\n   void (* target_help) (void);"}]}