{"sha": "0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkZDlkY2Y3NmYwNDNhNDJiZDM2ODk1ZWRkOWY5NjU1ZDYwZmU4ZA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-21T22:57:19Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-21T22:57:19Z"}, "message": "Rename gcc_type_for_clast_* into type_for_clast_*\n\n2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (gcc_type_for_interval): Renamed\n\ttype_for_interval.\n\t(gcc_type_for_value): Renamed type_for_value.\n\t(gcc_type_for_clast_term): Renamed type_for_clast_term.\n\t(gcc_type_for_clast_expr): Renamed type_for_clast_expr.\n\t(gcc_type_for_clast_red): Renamed type_for_clast_red.\n\t(gcc_type_for_clast_bin): Renamed type_for_clast_bin.\n\t(gcc_type_for_clast_eq): Renamed type_for_clast_eq.\n\t(graphite_translate_clast_equation): Update calls.\n\t(compute_type_for_level): Renamed type_for_level.\n\t(gcc_type_for_iv_of_clast_loop): Renamed type_for_clast_for.\n\t(build_iv_mapping): Update calls.\n\t(graphite_create_new_loop_guard): Same.\n\nFrom-SVN: r176601", "tree": {"sha": "52f09a7dee0eef24035e8f589b789b9051e32d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f09a7dee0eef24035e8f589b789b9051e32d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aab43a09f9734632be650e404c02af8df0d5615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aab43a09f9734632be650e404c02af8df0d5615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aab43a09f9734632be650e404c02af8df0d5615"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "0ebc79529e74f38fac68658cfd30f775ab9709e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "patch": "@@ -1,3 +1,19 @@\n+2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (gcc_type_for_interval): Renamed\n+\ttype_for_interval.\n+\t(gcc_type_for_value): Renamed type_for_value.\n+\t(gcc_type_for_clast_term): Renamed type_for_clast_term.\n+\t(gcc_type_for_clast_expr): Renamed type_for_clast_expr.\n+\t(gcc_type_for_clast_red): Renamed type_for_clast_red.\n+\t(gcc_type_for_clast_bin): Renamed type_for_clast_bin.\n+\t(gcc_type_for_clast_eq): Renamed type_for_clast_eq.\n+\t(graphite_translate_clast_equation): Update calls.\n+\t(compute_type_for_level): Renamed type_for_level.\n+\t(gcc_type_for_iv_of_clast_loop): Renamed type_for_clast_for.\n+\t(build_iv_mapping): Update calls.\n+\t(graphite_create_new_loop_guard): Same.\n+\n 2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (clast_get_body_of_loop): Add fixme"}, {"sha": "b1d682abab5304f5f07a51240be762fe260bcb9f", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdd9dcf76f043a42bd36895edd9f9655d60fe8d/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=0cdd9dcf76f043a42bd36895edd9f9655d60fe8d", "patch": "@@ -398,7 +398,7 @@ clast_to_gcc_expression (tree type, struct clast_expr *e, ivs_params_p ip)\n /* Return a type that could represent the values between V1 and V2.  */\n \n static tree\n-gcc_type_for_interval (mpz_t v1, mpz_t v2)\n+type_for_interval (mpz_t v1, mpz_t v2)\n {\n   bool unsigned_p;\n   tree type;\n@@ -434,48 +434,46 @@ gcc_type_for_interval (mpz_t v1, mpz_t v2)\n    otherwise return NULL_TREE.  */\n \n static tree\n-gcc_type_for_value (mpz_t val)\n+type_for_value (mpz_t val)\n {\n-  return gcc_type_for_interval (val, val);\n+  return type_for_interval (val, val);\n }\n \n /* Return the type for the clast_term T used in STMT.  */\n \n static tree\n-gcc_type_for_clast_term (struct clast_term *t,\n-\t\t\t ivs_params_p ip)\n+type_for_clast_term (struct clast_term *t, ivs_params_p ip)\n {\n   gcc_assert (t->expr.type == clast_expr_term);\n \n   if (!t->var)\n-    return gcc_type_for_value (t->val);\n+    return type_for_value (t->val);\n \n   return TREE_TYPE (clast_name_to_gcc (t->var, ip));\n }\n \n static tree\n-gcc_type_for_clast_expr (struct clast_expr *, ivs_params_p);\n+type_for_clast_expr (struct clast_expr *, ivs_params_p);\n \n /* Return the type for the clast_reduction R used in STMT.  */\n \n static tree\n-gcc_type_for_clast_red (struct clast_reduction *r,\n-\t\t\tivs_params_p ip)\n+type_for_clast_red (struct clast_reduction *r, ivs_params_p ip)\n {\n   int i;\n   tree type = NULL_TREE;\n \n   if (r->n == 1)\n-    return gcc_type_for_clast_expr (r->elts[0], ip);\n+    return type_for_clast_expr (r->elts[0], ip);\n \n   switch (r->type)\n     {\n     case clast_red_sum:\n     case clast_red_min:\n     case clast_red_max:\n-      type = gcc_type_for_clast_expr (r->elts[0], ip);\n+      type = type_for_clast_expr (r->elts[0], ip);\n       for (i = 1; i < r->n; i++)\n-\ttype = max_precision_type (type, gcc_type_for_clast_expr\n+\ttype = max_precision_type (type, type_for_clast_expr\n \t\t\t\t   (r->elts[i], ip));\n \n       return type;\n@@ -491,30 +489,29 @@ gcc_type_for_clast_red (struct clast_reduction *r,\n /* Return the type for the clast_binary B used in STMT.  */\n \n static tree\n-gcc_type_for_clast_bin (struct clast_binary *b, ivs_params_p ip)\n+type_for_clast_bin (struct clast_binary *b, ivs_params_p ip)\n {\n-  tree l = gcc_type_for_clast_expr ((struct clast_expr *) b->LHS, ip);\n-  tree r = gcc_type_for_value (b->RHS);\n+  tree l = type_for_clast_expr ((struct clast_expr *) b->LHS, ip);\n+  tree r = type_for_value (b->RHS);\n   return max_signed_precision_type (l, r);\n }\n \n /* Returns the type for the CLAST expression E when used in statement\n    STMT.  */\n \n static tree\n-gcc_type_for_clast_expr (struct clast_expr *e,\n-\t\t\t ivs_params_p ip)\n+type_for_clast_expr (struct clast_expr *e, ivs_params_p ip)\n {\n   switch (e->type)\n     {\n     case clast_expr_term:\n-      return gcc_type_for_clast_term ((struct clast_term *) e, ip);\n+      return type_for_clast_term ((struct clast_term *) e, ip);\n \n     case clast_expr_red:\n-      return gcc_type_for_clast_red ((struct clast_reduction *) e, ip);\n+      return type_for_clast_red ((struct clast_reduction *) e, ip);\n \n     case clast_expr_bin:\n-      return gcc_type_for_clast_bin ((struct clast_binary *) e, ip);\n+      return type_for_clast_bin ((struct clast_binary *) e, ip);\n \n     default:\n       gcc_unreachable ();\n@@ -526,11 +523,10 @@ gcc_type_for_clast_expr (struct clast_expr *e,\n /* Returns the type for the equation CLEQ.  */\n \n static tree\n-gcc_type_for_clast_eq (struct clast_equation *cleq,\n-\t\t       ivs_params_p ip)\n+type_for_clast_eq (struct clast_equation *cleq, ivs_params_p ip)\n {\n-  tree l = gcc_type_for_clast_expr (cleq->LHS, ip);\n-  tree r = gcc_type_for_clast_expr (cleq->RHS, ip);\n+  tree l = type_for_clast_expr (cleq->LHS, ip);\n+  tree r = type_for_clast_expr (cleq->RHS, ip);\n   return max_precision_type (l, r);\n }\n \n@@ -541,7 +537,7 @@ graphite_translate_clast_equation (struct clast_equation *cleq,\n \t\t\t\t   ivs_params_p ip)\n {\n   enum tree_code comp;\n-  tree type = gcc_type_for_clast_eq (cleq, ip);\n+  tree type = type_for_clast_eq (cleq, ip);\n   tree lhs = clast_to_gcc_expression (type, cleq->LHS, ip);\n   tree rhs = clast_to_gcc_expression (type, cleq->RHS, ip);\n \n@@ -623,7 +619,7 @@ compute_bounds_for_level (poly_bb_p pbb, int level, mpz_t low, mpz_t up)\n    statement PBB, based on the transformed schedule of PBB.  */\n \n static tree\n-compute_type_for_level (poly_bb_p pbb, int level)\n+type_for_level (poly_bb_p pbb, int level)\n {\n   mpz_t low, up;\n   tree type;\n@@ -632,7 +628,7 @@ compute_type_for_level (poly_bb_p pbb, int level)\n   mpz_init (up);\n \n   compute_bounds_for_level (pbb, level, low, up);\n-  type = gcc_type_for_interval (low, up);\n+  type = type_for_interval (low, up);\n \n   mpz_clear (low);\n   mpz_clear (up);\n@@ -682,17 +678,18 @@ clast_get_body_of_loop (struct clast_stmt *stmt)\n    from STMT_FOR.  */\n \n static tree\n-gcc_type_for_iv_of_clast_loop (struct clast_for *stmt_for, int level,\n-\t\t\t       tree lb_type, tree ub_type)\n+type_for_clast_for (struct clast_for *stmt_for, int level,\n+\t\t    ivs_params_p ip)\n {\n   struct clast_stmt *stmt = (struct clast_stmt *) stmt_for;\n   struct clast_user_stmt *body = clast_get_body_of_loop (stmt);\n   CloogStatement *cs = body->statement;\n   poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (cs);\n+  tree lb_type = type_for_clast_expr (stmt_for->LB, ip);\n+  tree ub_type = type_for_clast_expr (stmt_for->UB, ip);\n \n   return max_signed_precision_type (lb_type, max_precision_type\n-\t\t\t\t    (ub_type, compute_type_for_level\n-\t\t\t\t     (pbb, level)));\n+\t\t\t\t    (ub_type, type_for_level (pbb, level)));\n }\n \n /* Creates a new LOOP corresponding to Cloog's STMT.  Inserts an\n@@ -740,7 +737,7 @@ build_iv_mapping (VEC (tree, heap) *iv_map, struct clast_user_stmt *user_stmt,\n     {\n       struct clast_expr *expr = (struct clast_expr *)\n        ((struct clast_assignment *)t)->RHS;\n-      tree type = gcc_type_for_clast_expr (expr, ip);\n+      tree type = type_for_clast_expr (expr, ip);\n       tree new_name = clast_to_gcc_expression (type, expr, ip);\n       loop_p old_loop = gbb_loop_at_index (gbb, ip->region, depth);\n \n@@ -877,10 +874,8 @@ graphite_create_new_loop_guard (edge entry_edge, struct clast_for *stmt,\n {\n   tree cond_expr;\n   edge exit_edge;\n-  tree lb_type = gcc_type_for_clast_expr (stmt->LB, ip);\n-  tree ub_type = gcc_type_for_clast_expr (stmt->UB, ip);\n \n-  *type = gcc_type_for_iv_of_clast_loop (stmt, level, lb_type, ub_type);\n+  *type = type_for_clast_for (stmt, level, ip);\n   *lb = clast_to_gcc_expression (*type, stmt->LB, ip);\n   *ub = clast_to_gcc_expression (*type, stmt->UB, ip);\n "}]}