{"sha": "c0c24aa47091e72b753c922c01f071a72e531eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjMjRhYTQ3MDkxZTcyYjc1M2M5MjJjMDFmMDcxYTcyZTUzMWVlZQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-21T18:51:34Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-21T18:51:34Z"}, "message": "re PR objc/25965 (Allows duplicate member names in objc subclasses)\n\nPR objc/25965\nIn gcc/objc/:\n       * objc-act.c (objc_get_interface_ivars): New function.\n       (objc_collecting_ivars): New variable.\n       (continue_class): Set and reset objc_collecting_ivars for context.\nIn gcc/:\n       * c-decl.c (detect_field_duplicates): If compiling Objective-C,\n       call objc_get_interface_ivars ().\n       * c-family/c-common.h (objc_get_interface_ivars): New declaration.\n       * c-family/stub-objc.c (objc_get_interface_ivars): New stub.\nIn gcc/objcp/:\n       * objcp-decl.c (objcp_finish_struct): Call\n       objc_get_interface_ivars() and check for duplicate ivars.\n\nIn gcc/testsuite/:\n       Merge from 'apple/trunk' branch on FSF servers.\n\n       2005-10-11  Fariborz Jahanian <fjahanian@apple.com>\n\n               Radar 4291785\n\n               objc.dg/naming-4.m: New\n               objc.dg/naming-5.m: New\n               obj-c++.dg/naming-1.mm: New\n               obj-c++.dg/naming-2.mm: New\n\nFrom-SVN: r164491", "tree": {"sha": "897f0bbb69ee50c5f581e4a8d83c36076bdc3738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/897f0bbb69ee50c5f581e4a8d83c36076bdc3738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0c24aa47091e72b753c922c01f071a72e531eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c24aa47091e72b753c922c01f071a72e531eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c24aa47091e72b753c922c01f071a72e531eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c24aa47091e72b753c922c01f071a72e531eee/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f997b875dd00aaa75f85bbefa2e90ebfba7b6808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f997b875dd00aaa75f85bbefa2e90ebfba7b6808"}], "stats": {"total": 240, "additions": 240, "deletions": 0}, "files": [{"sha": "eb4e36ab922f6196dd07efedf785f01c52233c2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -1,3 +1,11 @@\n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/25965\n+\t* c-decl.c (detect_field_duplicates): If compiling Objective-C,\n+\tcall objc_get_interface_ivars ().\n+\t* c-family/c-common.h (objc_get_interface_ivars): New declaration.\n+\t* c-family/stub-objc.c (objc_get_interface_ivars): New stub.\n+\t\n 2010-09-21  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR target/45694"}, {"sha": "f8be06b479f5a97f7d31f510de48d62e6d9716f6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -6718,6 +6718,17 @@ detect_field_duplicates (tree fieldlist)\n   tree x, y;\n   int timeout = 10;\n \n+  /* If the struct is the list of instance variables of an Objective-C\n+     class, then we need to add all the instance variables of\n+     superclasses before checking for duplicates (since you can't have\n+     an instance variable in a subclass with the same name as an\n+     instance variable in a superclass).  objc_get_interface_ivars()\n+     leaves fieldlist unchanged if we are not in this case, so in that\n+     case nothing changes compared to C.\n+  */\n+  if (c_dialect_objc ())\n+    fieldlist = objc_get_interface_ivars (fieldlist);\n+\n   /* First, see if there are more than \"a few\" fields.\n      This is trivially true if there are zero or one fields.  */\n   if (!fieldlist)"}, {"sha": "ae31b7cf55f7155af1e798b3f16948ee87066a5b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -962,6 +962,7 @@ extern tree objc_build_string_object (tree);\n extern tree objc_get_protocol_qualified_type (tree, tree);\n extern tree objc_get_class_reference (tree);\n extern tree objc_get_class_ivars (tree);\n+extern tree objc_get_interface_ivars (tree);\n extern void objc_start_class_interface (tree, tree, tree);\n extern void objc_start_category_interface (tree, tree, tree);\n extern void objc_start_protocol (tree, tree);"}, {"sha": "3cb45d0734afd26b859c1d17ff747b974a15f352", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -247,6 +247,12 @@ objc_get_class_reference (tree ARG_UNUSED (name))\n   return 0;\n }\n \n+tree\n+objc_get_interface_ivars (tree ARG_UNUSED (fieldlist))\n+{\n+  return 0;\n+}\n+\n tree\n objc_get_protocol_qualified_type (tree ARG_UNUSED (name),\n \t\t\t\t  tree ARG_UNUSED (protos))"}, {"sha": "87dcec853bf58699399bbd91ad0fa4e2deb53a3f", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -1,3 +1,10 @@\n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/25965\n+\t* objc-act.c (objc_get_interface_ivars): New function.\n+\t(objc_collecting_ivars): New variable.\n+\t(continue_class): Set and reset objc_collecting_ivars for context.\n+\t\n 2010-09-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "57942380934e8993d0a6794118b79c66cb1fff4e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -371,6 +371,8 @@ int objc_public_flag;\n /* Use to generate method labels.  */\n static int method_slot = 0;\n \n+static int objc_collecting_ivars = 0;\n+\n #define BUFSIZE\t\t1024\n \n static char *errbuf;\t/* Buffer for error diagnostics */\n@@ -3453,6 +3455,21 @@ objc_get_class_ivars (tree class_name)\n   return error_mark_node;\n }\n \n+/* Called when checking the variables in a struct.  If we are not\n+   doing the ivars list inside an @interface context, then returns\n+   fieldlist unchanged.  Else, returns the list of class ivars.\n+*/\n+tree\n+objc_get_interface_ivars (tree fieldlist)\n+{\n+  if (!objc_collecting_ivars || !objc_interface_context \n+      || TREE_CODE (objc_interface_context) != CLASS_INTERFACE_TYPE\n+      || CLASS_SUPER_NAME (objc_interface_context) == NULL_TREE)\n+    return fieldlist;\n+\n+  return get_class_ivars (objc_interface_context, true);\n+}\n+\n /* Used by: build_private_template, continue_class,\n    and for @defs constructs.  */\n \n@@ -7714,7 +7731,9 @@ continue_class (tree klass)\n       push_lang_context (lang_name_c);\n #endif /* OBJCPLUS */\n \n+      objc_collecting_ivars = 1;\n       build_private_template (klass);\n+      objc_collecting_ivars = 0;\n \n #ifdef OBJCPLUS\n       pop_lang_context ();"}, {"sha": "e7fe12bcf0baf1791c51be80350149c59c7a2784", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -1,3 +1,9 @@\n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/25965\t\n+\t* objcp-decl.c (objcp_finish_struct): Call\n+\tobjc_get_interface_ivars() and check for duplicate ivars.\n+\n 2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* objcp-lang.c: Do not include except.h."}, {"sha": "af19a05382303bca1cf44eb1cd776980d1f82bf9", "filename": "gcc/objcp/objcp-decl.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjcp%2Fobjcp-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Fobjcp%2Fobjcp-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.c?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"cp-tree.h\"\n+#include \"hashtab.h\"\n \n #include \"objc-act.h\"\n #include \"objcp-decl.h\"\n@@ -63,6 +64,39 @@ objcp_finish_struct (location_t loc ATTRIBUTE_UNUSED,\n     finish_member_declaration (field);\n   }\n   t = finish_struct (t, attributes);\n+\n+  /* If we are inside an @interface and are generating the list of\n+     ivars, we need to check for duplicate ivars.\n+  */\n+  if (fieldlist)\n+    {\n+      tree original_fieldlist = fieldlist;\n+      fieldlist = objc_get_interface_ivars (fieldlist);\n+      if (fieldlist != original_fieldlist)\n+\t{\n+\t  /* Minimal implementation of the equivalent of the C\n+\t     front-end's detect_field_duplicates().\n+\t  */\n+\t  htab_t htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n+\t  tree x, y;\n+\t  void **slot;\n+\t  \n+\t  for (x = fieldlist; x ; x = DECL_CHAIN (x))\n+\t    if ((y = DECL_NAME (x)) != 0)\n+\t      {\n+\t\tslot = htab_find_slot (htab, y, INSERT);\n+\t\tif (*slot)\n+\t\t  {\n+\t\t    error (\"duplicate member %q+D\", x);\n+\t\t    DECL_NAME (x) = NULL_TREE;\n+\t\t  }\n+\t\t*slot = y;\n+\t      }\n+\t  \n+\t  htab_delete (htab);\n+\t}\n+    }\n+\n   pop_lang_context ();\n \n   return t;"}, {"sha": "b9ca99da59ba546fd6305cf2caf4f0768d976a3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -1,3 +1,16 @@\n+2010-09-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tMerge from 'apple/trunk' branch on FSF servers.\n+\n+\t2005-10-11  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\t        Radar 4291785\n+\t        \n+\t        objc.dg/naming-4.m: New\n+\t        objc.dg/naming-5.m: New\n+\t        obj-c++.dg/naming-1.mm: New\n+\t        obj-c++.dg/naming-2.mm: New\n+\n 2010-09-21  Jonathan Wakely  <redi@gcc.gnu.org>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>\n "}, {"sha": "aed2fd517afb0e0cab7d2b3f92bd53cc29334c1f", "filename": "gcc/testsuite/obj-c++.dg/naming-1.mm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-1.mm?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -0,0 +1,26 @@\n+/* Testing for detecting duplicate ivars. */\n+/* { dg-do compile } */\n+\n+typedef struct S { int i; } NSDictionary;\n+\n+@interface A \n+{\n+    NSDictionary * _userInfo;\n+}\n+@end\n+\n+@interface B : A\n+{\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+}\n+@end\n+\n+@interface C : A\n+@end\n+\n+@interface D : C\n+{\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+}\n+@end\n+"}, {"sha": "4b7860e10ddd7532b0bf0c0bf2bdaa58e82252fd", "filename": "gcc/testsuite/obj-c++.dg/naming-2.mm", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fnaming-2.mm?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -0,0 +1,40 @@\n+/* Testing for detecting duplicate ivars. */\n+/* { dg-do compile } */\n+\n+typedef struct S { int i; } NSDictionary;\n+\n+@interface A \n+{\n+    NSDictionary * _userInfo;\n+    int i1;\n+    int i2;\n+    int i3;\n+    int i4;\n+    int i5;\n+    int i6;\n+    int i7;\n+}\n+@end\n+\n+@interface B : A\n+{\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+    int ii1;\n+    int ii2;\n+    int ii3;\n+    int ii4;\n+    int ii5;\n+    int ii6;\n+    int ii7;\n+}\t\n+@end\n+\n+@interface C : A\n+@end\n+\n+@interface D : C\n+{\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+}\n+@end\n+"}, {"sha": "9a85229f6a73d348805b6cc63999086d7ada94dc", "filename": "gcc/testsuite/objc.dg/naming-4.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-4.m?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -0,0 +1,27 @@\n+/* Testing for detecting duplicate ivars. */\n+/* { dg-do compile } */\n+\n+typedef struct S { int i; } NSDictionary;\n+\n+@interface A \n+{\n+    NSDictionary * _userInfo;\n+}\n+@end\n+\n+@interface B : A\n+{\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+}\n+@end\n+\n+@interface C : A\n+@end\n+\n+@interface D : C\n+{\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+}\n+@end"}, {"sha": "2e2786c41dee4279d17867b46d89c9ec33ad6e6b", "filename": "gcc/testsuite/objc.dg/naming-5.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0c24aa47091e72b753c922c01f071a72e531eee/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-5.m?ref=c0c24aa47091e72b753c922c01f071a72e531eee", "patch": "@@ -0,0 +1,42 @@\n+/* Testing for detecting duplicate ivars. */\n+/* { dg-do compile } */\n+\n+typedef struct S { int i; } NSDictionary;\n+\n+@interface A \n+{\n+    NSDictionary * _userInfo;\n+    int i1;\n+    int i2;\n+    int i3;\n+    int i4;\n+    int i5;\n+    int i6;\n+    int i7;\n+}\n+@end\n+\n+@interface B : A\n+{\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+    int ii1;\n+    int ii2;\n+    int ii3;\n+    int ii4;\n+    int ii5;\n+    int ii6;\n+    int ii7;\n+    NSDictionary * _userInfo;\t/* { dg-error \"duplicate member\" } */\n+}\n+@end\n+\n+@interface C : A\n+@end\n+\n+@interface D : C\n+{\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+    NSDictionary * _userInfo;   /* { dg-error \"duplicate member\" } */\n+}\t\n+@end\n+"}]}