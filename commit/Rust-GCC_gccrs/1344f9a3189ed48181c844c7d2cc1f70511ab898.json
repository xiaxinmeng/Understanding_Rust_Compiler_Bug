{"sha": "1344f9a3189ed48181c844c7d2cc1f70511ab898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0NGY5YTMxODllZDQ4MTgxYzg0NGM3ZDJjYzFmNzA1MTFhYjg5OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-12-04T21:45:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-12-04T21:45:41Z"}, "message": "c-common.c (binary_op_error): Do not allow NOP_EXPR.\n\n\t* c-common.c (binary_op_error): Do not allow NOP_EXPR.\n\t(c_common_truthvalue_conversion): Handle NOP_EXPR the same as\n\tCONVERT_EXPR.\n\t(check_function_arguments_recurse): Allow both NOP_EXPR and\n\tCONVERT_EXPR but check conversions preserve precision.\n\t* c-typeck.c (pointer_diff): Allow both NOP_EXPR and CONVERT_EXPR\n\tbut check conversions preserve precision.\n\t(build_unary_op): Don't allow NOP_EXPR.  Use gcc_unreachable () in\n\tdefault case.\n\ntestsuite:\n\t* gcc.dg/format/cast-1.c: New test.\n\nFrom-SVN: r108020", "tree": {"sha": "09a78feaae42dbb50fdaf694eca604caa1029b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a78feaae42dbb50fdaf694eca604caa1029b35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1344f9a3189ed48181c844c7d2cc1f70511ab898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1344f9a3189ed48181c844c7d2cc1f70511ab898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1344f9a3189ed48181c844c7d2cc1f70511ab898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1344f9a3189ed48181c844c7d2cc1f70511ab898/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77314ece616e1a2626ebd2f6abf55ecda0b440f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77314ece616e1a2626ebd2f6abf55ecda0b440f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77314ece616e1a2626ebd2f6abf55ecda0b440f"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "31ac7608d96f797b2c90ae8f6dda8cb04246e853", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1344f9a3189ed48181c844c7d2cc1f70511ab898", "patch": "@@ -1,3 +1,15 @@\n+2005-12-04  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (binary_op_error): Do not allow NOP_EXPR.\n+\t(c_common_truthvalue_conversion): Handle NOP_EXPR the same as\n+\tCONVERT_EXPR.\n+\t(check_function_arguments_recurse): Allow both NOP_EXPR and\n+\tCONVERT_EXPR but check conversions preserve precision.\n+\t* c-typeck.c (pointer_diff): Allow both NOP_EXPR and CONVERT_EXPR\n+\tbut check conversions preserve precision.\n+\t(build_unary_op): Don't allow NOP_EXPR.  Use gcc_unreachable () in\n+\tdefault case.\n+\n 2005-12-04  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/7776"}, {"sha": "27934dd6a0accef48909e7616c7f5e605113a4e5", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1344f9a3189ed48181c844c7d2cc1f70511ab898", "patch": "@@ -1862,8 +1862,7 @@ min_precision (tree value, int unsignedp)\n }\n \f\n /* Print an error message for invalid operands to arith operation\n-   CODE.  NOP_EXPR is used as a special case (see\n-   c_common_truthvalue_conversion).  */\n+   CODE.  */\n \n void\n binary_op_error (enum tree_code code)\n@@ -1872,10 +1871,6 @@ binary_op_error (enum tree_code code)\n \n   switch (code)\n     {\n-    case NOP_EXPR:\n-      error (\"invalid truth-value expression\");\n-      return;\n-\n     case PLUS_EXPR:\n       opname = \"+\"; break;\n     case MINUS_EXPR:\n@@ -2467,13 +2462,12 @@ c_common_truthvalue_conversion (tree expr)\n \t\tc_common_truthvalue_conversion (TREE_OPERAND (expr, 2)));\n \n     case CONVERT_EXPR:\n+    case NOP_EXPR:\n       /* Don't cancel the effect of a CONVERT_EXPR from a REFERENCE_TYPE,\n \t since that affects how `default_conversion' will behave.  */\n       if (TREE_CODE (TREE_TYPE (expr)) == REFERENCE_TYPE\n \t  || TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == REFERENCE_TYPE)\n \tbreak;\n-      /* Fall through....  */\n-    case NOP_EXPR:\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n \t  >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (expr, 0))))\n@@ -5614,7 +5608,9 @@ check_function_arguments_recurse (void (*callback)\n \t\t\t\t  void *ctx, tree param,\n \t\t\t\t  unsigned HOST_WIDE_INT param_num)\n {\n-  if (TREE_CODE (param) == NOP_EXPR)\n+  if ((TREE_CODE (param) == NOP_EXPR || TREE_CODE (param) == CONVERT_EXPR)\n+      && (TYPE_PRECISION (TREE_TYPE (param))\n+\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (param, 0)))))\n     {\n       /* Strip coercion.  */\n       check_function_arguments_recurse (callback, ctx,"}, {"sha": "e4e21dc101d330f99239ed533f1f30f28ecd82f3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1344f9a3189ed48181c844c7d2cc1f70511ab898", "patch": "@@ -2601,8 +2601,18 @@ pointer_diff (tree op0, tree op1)\n      different mode in place.)\n      So first try to find a common term here 'by hand'; we want to cover\n      at least the cases that occur in legal static initializers.  */\n-  con0 = TREE_CODE (op0) == NOP_EXPR ? TREE_OPERAND (op0, 0) : op0;\n-  con1 = TREE_CODE (op1) == NOP_EXPR ? TREE_OPERAND (op1, 0) : op1;\n+  if ((TREE_CODE (op0) == NOP_EXPR || TREE_CODE (op0) == CONVERT_EXPR)\n+      && (TYPE_PRECISION (TREE_TYPE (op0))\n+\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))))\n+    con0 = TREE_OPERAND (op0, 0);\n+  else\n+    con0 = op0;\n+  if ((TREE_CODE (op1) == NOP_EXPR || TREE_CODE (op1) == CONVERT_EXPR)\n+      && (TYPE_PRECISION (TREE_TYPE (op1))\n+\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op1, 0)))))\n+    con1 = TREE_OPERAND (op1, 0);\n+  else\n+    con1 = op1;\n \n   if (TREE_CODE (con0) == PLUS_EXPR)\n     {\n@@ -2761,9 +2771,6 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n       arg = c_objc_common_truthvalue_conversion (arg);\n       return invert_truthvalue (arg);\n \n-    case NOP_EXPR:\n-      break;\n-\n     case REALPART_EXPR:\n       if (TREE_CODE (arg) == COMPLEX_CST)\n \treturn TREE_REALPART (arg);\n@@ -2941,7 +2948,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n       return val;\n \n     default:\n-      break;\n+      gcc_unreachable ();\n     }\n \n   if (argtype == 0)"}, {"sha": "93e36dc12bca348b561c30416c267c7fd200a33b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1344f9a3189ed48181c844c7d2cc1f70511ab898", "patch": "@@ -1,3 +1,7 @@\n+2005-12-04  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/format/cast-1.c: New test.\n+\n 2005-12-04  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/7776"}, {"sha": "78a4f527d9baf03fc67796b6ee413038eb4415f7", "filename": "gcc/testsuite/gcc.dg/format/cast-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1344f9a3189ed48181c844c7d2cc1f70511ab898/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fcast-1.c?ref=1344f9a3189ed48181c844c7d2cc1f70511ab898", "patch": "@@ -0,0 +1,16 @@\n+/* Test for strings cast through integer types: should not be treated\n+   as format strings unless the types are of the same width as\n+   pointers (intptr_t or similar).  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+f (int x)\n+{\n+  printf(\"%s\", x); /* { dg-warning \"format\" } */\n+  printf((char *)(size_t)\"%s\", x); /* { dg-warning \"format\" } */\n+  printf((char *)(char)\"%s\", x);\n+}"}]}