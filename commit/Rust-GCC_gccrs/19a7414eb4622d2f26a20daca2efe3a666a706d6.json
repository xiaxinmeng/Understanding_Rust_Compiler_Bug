{"sha": "19a7414eb4622d2f26a20daca2efe3a666a706d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhNzQxNGViNDYyMmQyZjI2YTIwZGFjYTJlZmUzYTY2NmE3MDZkNg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2003-02-13T00:41:28Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2003-02-13T00:41:28Z"}, "message": "varray.c (element_size): Remove.\n\n\t* varray.c (element_size): Remove.\n\t(uses_ggc): Remove.\n\t(element): Add.\n\t(varray_init): Use new interface.\n\t(varray_grow): Use new interface.\n\t(varray_clear): Use new interface.\n\nFrom-SVN: r62810", "tree": {"sha": "b1bf73cd9643905414122b24725cc7cdbbeba848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1bf73cd9643905414122b24725cc7cdbbeba848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19a7414eb4622d2f26a20daca2efe3a666a706d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a7414eb4622d2f26a20daca2efe3a666a706d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a7414eb4622d2f26a20daca2efe3a666a706d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a7414eb4622d2f26a20daca2efe3a666a706d6/comments", "author": null, "committer": null, "parents": [{"sha": "e3c3342556933263f1c8e2817548337ae6789a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c3342556933263f1c8e2817548337ae6789a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c3342556933263f1c8e2817548337ae6789a4a"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "0623ea4dacb8eade9742a7c21a865174ad1697f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19a7414eb4622d2f26a20daca2efe3a666a706d6", "patch": "@@ -1,3 +1,12 @@\n+2003-02-12  Mike Stump  <mrs@apple.com>\n+\n+\t* varray.c (element_size): Remove.\n+\t(uses_ggc): Remove.\n+\t(element): Add.\n+\t(varray_init): Use new interface.\n+\t(varray_grow): Use new interface.\n+\t(varray_clear): Use new interface.\n+\n 2003-02-12  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/spe.h: Add casts to the arguments of the following"}, {"sha": "8eb6a6235203536638b1de09929e703b40ad1426", "filename": "gcc/varray.c", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=19a7414eb4622d2f26a20daca2efe3a666a706d6", "patch": "@@ -29,34 +29,33 @@\n \n #define VARRAY_HDR_SIZE (sizeof (struct varray_head_tag) - sizeof (varray_data))\n \n-static const size_t element_size[NUM_VARRAY_DATA] = {\n-  sizeof (char),\n-  sizeof (unsigned char),\n-  sizeof (short),\n-  sizeof (unsigned short),\n-  sizeof (int),\n-  sizeof (unsigned int),\n-  sizeof (long),\n-  sizeof (unsigned long),\n-  sizeof (HOST_WIDE_INT),\n-  sizeof (unsigned HOST_WIDE_INT),\n-  sizeof (PTR),\n-  sizeof (char *),\n-  sizeof (struct rtx_def *),\n-  sizeof (struct rtvec_def *),\n-  sizeof (union tree_node *),\n-  sizeof (struct bitmap_head_def *),\n-  sizeof (struct reg_info_def *),\n-  sizeof (struct const_equiv_data),\n-  sizeof (struct basic_block_def *),\n-  sizeof (struct elt_list *)\n-};\n-\n-static const int uses_ggc[NUM_VARRAY_DATA] = {\n-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* unsigned HOST_WIDE_INT */\n-  1, /* PTR */\n-  1, 1, 1, 1, 1, /* bitmap_head_def */\n-  0, 0, 0, 1\n+/* Do not add any more non-GC items here.  Please either remove or GC those items that\n+   are not GCed.  */\n+\n+static const struct {\n+  unsigned char size;\n+  bool uses_ggc;\n+} element[NUM_VARRAY_DATA] = {\n+  { sizeof (char), 1 },\n+  { sizeof (unsigned char), 1 },\n+  { sizeof (short), 1 },\n+  { sizeof (unsigned short), 1 },\n+  { sizeof (int), 1 },\n+  { sizeof (unsigned int), 1 },\n+  { sizeof (long), 1 },\n+  { sizeof (unsigned long), 1 },\n+  { sizeof (HOST_WIDE_INT), 1 },\n+  { sizeof (unsigned HOST_WIDE_INT), 1 },\n+  { sizeof (PTR), 1 },\n+  { sizeof (char *), 1 },\n+  { sizeof (struct rtx_def *), 1 },\n+  { sizeof (struct rtvec_def *), 1 },\n+  { sizeof (union tree_node *), 1 },\n+  { sizeof (struct bitmap_head_def *), 1 },\n+  { sizeof (struct reg_info_def *), 0 },\n+  { sizeof (struct const_equiv_data), 0 },\n+  { sizeof (struct basic_block_def *), 0 },\n+  { sizeof (struct elt_list *), 1 },\n };\n \n /* Allocate a virtual array with NUM_ELEMENT elements, each of which is\n@@ -67,9 +66,9 @@ varray_init (num_elements, element_kind, name)\n      enum varray_data_enum element_kind;\n      const char *name;\n {\n-  size_t data_size = num_elements * element_size[element_kind];\n+  size_t data_size = num_elements * element[element_kind].size;\n   varray_type ptr;\n-  if (uses_ggc [element_kind])\n+  if (element[element_kind].uses_ggc)\n     ptr = (varray_type) ggc_alloc_cleared (VARRAY_HDR_SIZE + data_size);\n   else\n     ptr = (varray_type) xcalloc (VARRAY_HDR_SIZE + data_size, 1);\n@@ -92,11 +91,11 @@ varray_grow (va, n)\n \n   if (n != old_elements)\n     {\n-      size_t elem_size = element_size[va->type];\n+      size_t elem_size = element[va->type].size;\n       size_t old_data_size = old_elements * elem_size;\n       size_t data_size = n * elem_size;\n \n-      if (uses_ggc[va->type])\n+      if (element[va->type].uses_ggc)\n \tva = (varray_type) ggc_realloc (va, VARRAY_HDR_SIZE + data_size);\n       else\n \tva = (varray_type) xrealloc ((char *) va, VARRAY_HDR_SIZE + data_size);\n@@ -113,7 +112,7 @@ void\n varray_clear (va)\n      varray_type va;\n {\n-  size_t data_size = element_size[va->type] * va->num_elements;\n+  size_t data_size = element[va->type].size * va->num_elements;\n \n   memset (va->data.c, 0, data_size);\n   va->elements_used = 0;"}, {"sha": "7351c2af4c4beb5c9b2140229d8228b651901c1d", "filename": "gcc/varray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a7414eb4622d2f26a20daca2efe3a666a706d6/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=19a7414eb4622d2f26a20daca2efe3a666a706d6", "patch": "@@ -57,7 +57,7 @@ struct const_equiv_data GTY(()) {\n };\n \n /* Enum indicating what the varray contains.  \n-   If this is changed, `element_size' in varray.c needs to be updated.  */\n+   If this is changed, `element' in varray.c needs to be updated.  */\n \n enum varray_data_enum {\n   VARRAY_DATA_C,"}]}