{"sha": "f9562f27ffae26afb22f320d27eca41f36de95a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk1NjJmMjdmZmFlMjZhZmIyMmYzMjBkMjdlY2E0MWYzNmRlOTVhMg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-10-11T00:39:30Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-10-11T00:39:30Z"}, "message": "rs6000.md (movstrsi_?reg): Use preferred rD/rS = r5 form.\n\n        * rs6000.md (movstrsi_?reg): Use preferred rD/rS = r5 form.\n        (scc patterns): Disable most SImode variants if TARGET_POWERPC64.\n        * rs6000.c (expand_block_move): Match movstrsi_?reg register\n        changes.\n\nFrom-SVN: r29895", "tree": {"sha": "372ddd16b2e1c604067ba348a86c045355138647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/372ddd16b2e1c604067ba348a86c045355138647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9562f27ffae26afb22f320d27eca41f36de95a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9562f27ffae26afb22f320d27eca41f36de95a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9562f27ffae26afb22f320d27eca41f36de95a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9562f27ffae26afb22f320d27eca41f36de95a2/comments", "author": null, "committer": null, "parents": [{"sha": "c46a37c4175e5dc851903b6af00323cd21f13ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46a37c4175e5dc851903b6af00323cd21f13ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46a37c4175e5dc851903b6af00323cd21f13ae3"}], "stats": {"total": 438, "additions": 348, "deletions": 90}, "files": [{"sha": "ef282fe9cd6840e01d84cc2905f874e00a5b0a5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9562f27ffae26afb22f320d27eca41f36de95a2", "patch": "@@ -1,3 +1,10 @@\n+Sun Oct 10 20:05:21 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (movstrsi_?reg): Use preferred rD/rS = r5 form.\n+\t(scc patterns): Disable most SImode variants if TARGET_POWERPC64.\n+\t* rs6000.c (expand_block_move): Match movstrsi_?reg register\n+\tchanges.\n+\n Sun Oct 10 16:37:01 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* haifa-sched.c (sched_reg_n_calls_crossed): Delete.\n@@ -242,7 +249,7 @@ Thu Oct  7 22:53:00 1999  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n         (make_lang_type_fn): Likewise.\n         * rs6000.c (rs6000_build_va_list): Use make_lang_type.\n \n-Thu Oct  7 00:36:17 MDT 1999\tDiego Novillo <dnovillo@cygnus.com>\n+Thu Oct  7 00:36:17 1999  Diego Novillo  <dnovillo@cygnus.com>\n \n \t* config/rs6000/rs6000.c (secondary_reload_class): For TARGET_ELF\n \tmake sure that HIGH instructions are copied into BASE_REGS."}, {"sha": "c2de411b8490653f0632aa85c45cd69242fe6491", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f9562f27ffae26afb22f320d27eca41f36de95a2", "patch": "@@ -2136,12 +2136,12 @@ expand_block_move (operands)\n \t\t\t\t\t    align_rtx));\n \t    }\n \t  else if (bytes > 16\t/* move up to 24 bytes at a time */\n+\t\t   && ! fixed_regs[5]\n+\t\t   && ! fixed_regs[6]\n \t\t   && ! fixed_regs[7]\n \t\t   && ! fixed_regs[8]\n \t\t   && ! fixed_regs[9]\n-\t\t   && ! fixed_regs[10]\n-\t\t   && ! fixed_regs[11]\n-\t\t   && ! fixed_regs[12])\n+\t\t   && ! fixed_regs[10])\n \t    {\n \t      move_bytes = (bytes > 24) ? 24 : bytes;\n \t      emit_insn (gen_movstrsi_6reg (expand_block_move_mem (BLKmode,\n@@ -2154,10 +2154,10 @@ expand_block_move (operands)\n \t\t\t\t\t    align_rtx));\n \t    }\n \t  else if (bytes > 8\t/* move up to 16 bytes at a time */\n-\t\t   && ! fixed_regs[9]\n-\t\t   && ! fixed_regs[10]\n-\t\t   && ! fixed_regs[11]\n-\t\t   && ! fixed_regs[12])\n+\t\t   && ! fixed_regs[5]\n+\t\t   && ! fixed_regs[6]\n+\t\t   && ! fixed_regs[7]\n+\t\t   && ! fixed_regs[8])\n \t    {\n \t      move_bytes = (bytes > 16) ? 16 : bytes;\n \t      emit_insn (gen_movstrsi_4reg (expand_block_move_mem (BLKmode,"}, {"sha": "5cc70c2fffbadcf5d45b97bc6eb3bcee257c71c5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 333, "deletions": 82, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9562f27ffae26afb22f320d27eca41f36de95a2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f9562f27ffae26afb22f320d27eca41f36de95a2", "patch": "@@ -7348,7 +7348,8 @@\n }\")\n \n ;; Move up to 32 bytes at a time.  The fixed registers are needed because the\n-;; register allocator doesn't have a clue about allocating 8 word registers\n+;; register allocator doesn't have a clue about allocating 8 word registers.\n+;; rD/rS = r5 is preferred, efficient form.\n (define_expand \"movstrsi_8reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n@@ -7381,7 +7382,8 @@\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n-   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32) || INTVAL (operands[2]) == 0)\n+   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32)\n+       || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n    && REGNO (operands[4]) == 5\"\n@@ -7404,7 +7406,8 @@\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && ! TARGET_POWER\n-   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32) || INTVAL (operands[2]) == 0)\n+   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32)\n+       || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n    && REGNO (operands[4]) == 5\"\n@@ -7413,18 +7416,19 @@\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 24 bytes at a time.  The fixed registers are needed because the\n-;; register allocator doesn't have a clue about allocating 6 word registers\n+;; register allocator doesn't have a clue about allocating 6 word registers.\n+;; rD/rS = r5 is preferred, efficient form.\n (define_expand \"movstrsi_6reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (use (match_operand 3 \"\" \"\"))\n+\t      (clobber (reg:SI  5))\n+\t      (clobber (reg:SI  6))\n \t      (clobber (reg:SI  7))\n \t      (clobber (reg:SI  8))\n \t      (clobber (reg:SI  9))\n \t      (clobber (reg:SI 10))\n-\t      (clobber (reg:SI 11))\n-\t      (clobber (reg:SI 12))\n \t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n@@ -7435,17 +7439,17 @@\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (reg:SI  6))\n+   (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n-   (clobber (reg:SI 11))\n-   (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24\n-   && (REGNO (operands[0]) < 7 || REGNO (operands[0]) > 12)\n-   && (REGNO (operands[1]) < 7 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[4]) == 7\"\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n+   && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n@@ -7456,32 +7460,33 @@\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (reg:SI  6))\n+   (clobber (reg:SI  7))\n    (clobber (reg:SI  8))\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n-   (clobber (reg:SI 11))\n-   (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && ! TARGET_POWER\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\n-   && (REGNO (operands[0]) < 7 || REGNO (operands[0]) > 12)\n-   && (REGNO (operands[1]) < 7 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[4]) == 7\"\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n+   && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n \n-;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill problems\n-;; with TImode\n+;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill\n+;; problems with TImode.\n+;; rD/rS = r5 is preferred, efficient form.\n (define_expand \"movstrsi_4reg\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (match_operand 1 \"\" \"\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (use (match_operand 3 \"\" \"\"))\n-\t      (clobber (reg:SI  9))\n-\t      (clobber (reg:SI 10))\n-\t      (clobber (reg:SI 11))\n-\t      (clobber (reg:SI 12))\n+\t      (clobber (reg:SI 5))\n+\t      (clobber (reg:SI 6))\n+\t      (clobber (reg:SI 7))\n+\t      (clobber (reg:SI 8))\n \t      (clobber (match_scratch:SI 4 \"\"))])]\n   \"TARGET_STRING\"\n   \"\")\n@@ -7492,15 +7497,15 @@\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n-   (clobber (reg:SI 10))\n-   (clobber (reg:SI 11))\n-   (clobber (reg:SI 12))\n+   (clobber (reg:SI 6))\n+   (clobber (reg:SI 7))\n+   (clobber (reg:SI 8))\n    (clobber (match_scratch:SI 5 \"=q\"))]\n   \"TARGET_STRING && TARGET_POWER\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n-   && (REGNO (operands[0]) < 9 || REGNO (operands[0]) > 12)\n-   && (REGNO (operands[1]) < 9 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[4]) == 9\"\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n+   && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n@@ -7511,15 +7516,15 @@\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n-   (clobber (reg:SI 10))\n-   (clobber (reg:SI 11))\n-   (clobber (reg:SI 12))\n+   (clobber (reg:SI 6))\n+   (clobber (reg:SI 7))\n+   (clobber (reg:SI 8))\n    (clobber (match_scratch:SI 5 \"X\"))]\n   \"TARGET_STRING && ! TARGET_POWER\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n-   && (REGNO (operands[0]) < 9 || REGNO (operands[0]) > 12)\n-   && (REGNO (operands[1]) < 9 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[4]) == 9\"\n+   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n+   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n+   && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"8\")])\n@@ -7532,7 +7537,7 @@\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (match_scratch:DI 4 \"\"))\n \t      (clobber (match_scratch:SI 5 \"\"))])]\n-  \"TARGET_STRING && ! TARGET_64BIT\"\n+  \"TARGET_STRING && ! TARGET_POWERPC64\"\n   \"\")\n \n (define_insn \"\"\n@@ -7542,7 +7547,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER && ! TARGET_64BIT\n+  \"TARGET_STRING && TARGET_POWER && ! TARGET_POWERPC64\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n@@ -7555,7 +7560,7 @@\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER && ! TARGET_64BIT\n+  \"TARGET_STRING && ! TARGET_POWER && ! TARGET_POWERPC64\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"load\")\n@@ -9210,7 +9215,7 @@\n \t(eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\")))\n    (clobber (match_scratch:SI 3 \"=r,&r,r,r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n    {sfi|subfic} %3,%1,0\\;{ae|adde} %0,%3,%1\n@@ -9242,7 +9247,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(eq:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=r,&r,r,r,r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n    {sfi|subfic} %3,%1,0\\;{ae.|adde.} %0,%3,%1\n@@ -9292,7 +9297,7 @@\n \t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze|addze} %0,%3\n    {sfi|subfic} %4,%1,0\\;{aze|addze} %0,%3\n@@ -9310,7 +9315,7 @@\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n    {sfi|subfic} %4,%1,0\\;{aze.|addze.} %4,%3\n@@ -9331,7 +9336,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(plus:SI (eq:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %0,%3\n    {sfi|subfic} %4,%1,0\\;{aze.|addze.} %0,%3\n@@ -9345,7 +9350,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    xor %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,-1\\;{sfe|subfe} %0,%0,%0\n@@ -9382,7 +9387,7 @@\n \t\t  (const_int 31))\n \t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{ai|addic} %3,%1,-1\\;{aze|addze} %0,%2\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -9406,7 +9411,7 @@\n \t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{ai|addic} %3,%1,-1\\;{aze.|addze.} %3,%2\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n@@ -9437,7 +9442,7 @@\n \t(plus:SI (lshiftrt:SI (neg:SI (abs:SI (match_dup 1))) (const_int 31))\n \t\t (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{ai|addic} %3,%1,-1\\;{aze.|addze.} %0,%2\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n@@ -9544,10 +9549,31 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;li %0,0\\;adde %0,%0,%0\"\n+  [(set_attr \"length\" \"12\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(leu:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -9556,18 +9582,31 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(leu:SI (match_dup 1) (match_dup 2)))]\n-   \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(leu:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{aze|addze} %0,%3\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -9579,7 +9618,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{aze.|addze.} %4,%3\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n@@ -9594,7 +9633,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{aze.|addze.} %0,%3\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n@@ -9603,7 +9642,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\"\n    [(set_attr \"length\" \"12\")])\n \n@@ -9614,7 +9653,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))\n \t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;andc %0,%3,%4\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -9627,7 +9666,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n@@ -9643,7 +9682,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;andc. %0,%3,%4\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n@@ -9719,7 +9758,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n@@ -9733,7 +9772,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ltu:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\"\n@@ -9746,7 +9785,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n \t\t (match_operand:SI 3 \"reg_or_short_operand\" \"rI,rI\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n   {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf%I3|subf%I3c} %0,%4,%3\n   {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf%I3|subf%I3c} %0,%4,%3\"\n@@ -9760,7 +9799,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\"\n@@ -9777,7 +9816,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %0,%4,%3\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %0,%4,%3\"\n@@ -9788,7 +9827,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(neg:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n@@ -9864,6 +9903,7 @@\n   [(set_attr \"length\" \"12\")])\n \n ;; This is (and (neg (ge X (const_int 0))) Y).\n+;; srawi sign-extends, so these patterrns are 64-bit safe.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (neg:SI\n@@ -9876,6 +9916,18 @@\n   \"{srai|srawi} %3,%1,31\\;andc %0,%2,%3\"\n   [(set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(and:DI (neg:DI\n+\t\t (lshiftrt:DI\n+\t\t  (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t  (const_int 63)))\n+\t\t(match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (match_scratch:DI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"sradi %3,%1,63\\;andc %0,%2,%3\"\n+  [(set_attr \"length\" \"8\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -9891,6 +9943,21 @@\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (and:DI (neg:DI\n+\t\t  (lshiftrt:DI\n+\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t   (const_int 63)))\n+\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:DI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"sradi %3,%1,63\\;andc. %3,%2,%3\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"8\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -9910,16 +9977,45 @@\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (and:DI (neg:DI\n+\t\t  (lshiftrt:DI\n+\t\t   (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\"))\n+\t\t   (const_int 63)))\n+\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(and:DI (neg:DI (lshiftrt:SI (not:DI (match_dup 1))\n+\t\t\t\t     (const_int 63)))\n+\t\t(match_dup 2)))\n+   (clobber (match_scratch:SI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"sradi %3,%1,63\\;andc. %0,%2,%3\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"8\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   subfc %0,%2,%1\\;li %0,0\\;adde %0,%0,%0\n+   addic %0,%1,%n2\\;li %0,0\\;adde %0,%0,%0\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x\")\n \t(compare:CC\n@@ -9928,20 +10024,35 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x\")\n+\t(compare:CC\n+\t (geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t (match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(geu:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   subfc %0,%2,%1\\;li %0,0\\;adde. %0,%0,%0\n+   addic %0,%1,%n2\\;li %0,0\\;adde. %0,%0,%0\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{aze|addze} %0,%3\n    {ai|addic} %4,%1,%n2\\;{aze|addze} %0,%3\"\n@@ -9955,7 +10066,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{aze.|addze.} %4,%3\n    {ai|addic} %4,%1,%n2\\;{aze.|addze.} %4,%3\"\n@@ -9972,7 +10083,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{aze.|addze.} %0,%3\n    {ai|addic} %4,%1,%n2\\;{aze.|addze.} %0,%3\"\n@@ -9983,7 +10094,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(neg:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\n    {sfi|subfic} %0,%1,-1\\;{a%I2|add%I2c} %0,%0,%2\\;{sfe|subfe} %0,%0,%0\"\n@@ -9996,7 +10107,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))\n \t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;andc %0,%3,%4\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;andc %0,%3,%4\"\n@@ -10011,7 +10122,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\"\n@@ -10029,7 +10140,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;andc. %0,%3,%4\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;andc. %0,%3,%4\"\n@@ -10040,10 +10151,18 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t       (const_int 0)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{sri|srwi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t       (const_int 0)))]\n+  \"TARGET_POWERPC64\"\n+  \"subfic %0,%1,0\\;addme %0,%0\\;srdi %0,%0,63\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -10052,11 +10171,24 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:SI (match_dup 1) (const_int 0)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{sri.|srwi.} %0,%0,31\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t(const_int 0))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(gt:DI (match_dup 1) (const_int 0)))]\n+  \"TARGET_POWERPC64\"\n+  \"subfic %0,%1,0\\;addme %0,%0\\;srdi. %0,%0,63\"\n+  [(set_attr \"type\" \"delayed_compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n@@ -10084,10 +10216,20 @@\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{a|addc} %3,%1,%1\\;{sfe|subfe} %3,%1,%3\\;{aze|addze} %0,%2\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t(const_int 0))\n+\t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n+   (clobber (match_scratch:DI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"addc %3,%1,%1\\;subfe %3,%1,%3\\;addze %0,%2\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -10096,11 +10238,24 @@\n \t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{a|addc} %3,%1,%1\\;{sfe|subfe} %3,%1,%3\\;{aze.|addze.} %3,%2\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t (const_int 0))\n+\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:DI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"addc %3,%1,%1\\;subfe %3,%1,%3\\;addze. %3,%2\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -10111,11 +10266,26 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0)) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{a|addc} %3,%1,%1\\;{sfe|subfe} %3,%1,%3\\;{aze.|addze.} %0,%2\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t (const_int 0))\n+\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(plus:DI (gt:DI (match_dup 1) (const_int 0)) (match_dup 2)))\n+   (clobber (match_scratch:DI 3 \"=&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"addc %3,%1,%1\\;subfe %3,%1,%3\\;addze. %0,%2\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n@@ -10158,10 +10328,18 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (const_int 0))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t       (const_int 0))))]\n+  \"TARGET_POWERPC64\"\n+  \"subfic %0,%1,0\\;addme %0,%0\\;sradi} %0,%0,63\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n@@ -10174,10 +10352,18 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg %0,%0\"\n+  [(set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(compare:CC\n@@ -10186,23 +10372,48 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gtu:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t(compare:CC\n+\t (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(gtu:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg. %0,%0\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"I,rI\"))\n \t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,rI\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {ai|addic} %4,%1,%k2\\;{aze|addze} %0,%3\n    {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf%I3|subf%I3c} %0,%4,%3\"\n   [(set_attr \"length\" \"8,12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"I,rI\"))\n+\t\t (match_operand:DI 3 \"reg_or_short_operand\" \"r,rI\")))\n+   (clobber (match_scratch:DI 4 \"=&r,&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   addic %4,%1,%k2\\;addze %0,%3\n+   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subf%I3c %0,%4,%3\"\n+  [(set_attr \"length\" \"8,12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x\")\n \t(compare:CC\n@@ -10211,13 +10422,28 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {ai|addic} %4,%1,%k2\\;{aze.|addze.} %4,%3\n    {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x\")\n+\t(compare:CC\n+\t (plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t  (match_operand:DI 2 \"reg_or_short_operand\" \"I,r\"))\n+\t\t  (match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:DI 4 \"=&r,&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   addic %4,%1,%k2\\;addze. %4,%3\n+   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subfc. %4,%4,%3\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"8,12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 5 \"cc_reg_operand\" \"=x,x\")\n \t(compare:CC\n@@ -10228,20 +10454,45 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (gtu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"@\n    {ai|addic} %4,%1,%k2\\;{aze.|addze.} %0,%3\n    {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %0,%4,%3\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:CC 5 \"cc_reg_operand\" \"=x,x\")\n+\t(compare:CC\n+\t (plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n+\t\t\t  (match_operand:DI 2 \"reg_or_short_operand\" \"I,r\"))\n+\t\t  (match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(plus:DI (gtu:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (clobber (match_scratch:DI 4 \"=&r,&r\"))]\n+  \"TARGET_POWERPC64\"\n+  \"@\n+   addic %4,%1,%k2\\;addze. %0,%3\n+   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subfc. %0,%4,%3\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"8,12\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"\"\n+  \"! TARGET_POWERPC64\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"length\" \"8\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))))]\n+  \"TARGET_POWERPC64\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\"\n+  [(set_attr \"length\" \"8\")])\n \f\n ;; Define both directions of branch and return.  If we need a reload\n ;; register, we'd rather use CR0 since it is much easier to copy a"}]}