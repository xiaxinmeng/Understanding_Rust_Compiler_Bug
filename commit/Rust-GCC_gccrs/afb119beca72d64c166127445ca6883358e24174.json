{"sha": "afb119beca72d64c166127445ca6883358e24174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiMTE5YmVjYTcyZDY0YzE2NjEyNzQ0NWNhNjg4MzM1OGUyNDE3NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-10T07:52:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-10T07:52:25Z"}, "message": "tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do not disable peeling when we version for aliasing.\n\n2013-05-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do not\n\tdisable peeling when we version for aliasing.\n\t(vector_alignment_reachable_p): Honor explicit user alignment.\n\t(vect_supportable_dr_alignment): Likewise.\n\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Use\n\tSTMT_VINFO_LOOP_PHI_EVOLUTION_PART instead of recomputing it.\n\t* tree-vect-loop.c (vect_transform_loop): First apply versioning,\n\tthen peeling to arrange for the cost-model check to come first.\n\n\t* gcc.target/i386/avx256-unaligned-load-2.c: Make well-defined.\n\t* gcc.target/i386/l_fma_double_1.c: Adjust.\n\t* gcc.target/i386/l_fma_double_2.c: Likewise.\n\t* gcc.target/i386/l_fma_double_3.c: Likewise.\n\t* gcc.target/i386/l_fma_double_4.c: Likewise.\n\t* gcc.target/i386/l_fma_double_5.c: Likewise.\n\t* gcc.target/i386/l_fma_double_6.c: Likewise.\n\t* gcc.target/i386/l_fma_float_1.c: Likewise.\n\t* gcc.target/i386/l_fma_float_2.c: Likewise.\n\t* gcc.target/i386/l_fma_float_3.c: Likewise.\n\t* gcc.target/i386/l_fma_float_4.c: Likewise.\n\t* gcc.target/i386/l_fma_float_5.c: Likewise.\n\t* gcc.target/i386/l_fma_float_6.c: Likewise.\n\nFrom-SVN: r198767", "tree": {"sha": "b74da88625d1181dbe2a76c0891227920028cbd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b74da88625d1181dbe2a76c0891227920028cbd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb119beca72d64c166127445ca6883358e24174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb119beca72d64c166127445ca6883358e24174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb119beca72d64c166127445ca6883358e24174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb119beca72d64c166127445ca6883358e24174/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01ae486155f3c4fb45a52bb4e95527d072b84966", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ae486155f3c4fb45a52bb4e95527d072b84966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ae486155f3c4fb45a52bb4e95527d072b84966"}], "stats": {"total": 283, "additions": 141, "deletions": 142}, "files": [{"sha": "c7d6db9a744d5169e420745c60d51c69d63b47a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -1,3 +1,14 @@\n+2013-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Do not\n+\tdisable peeling when we version for aliasing.\n+\t(vector_alignment_reachable_p): Honor explicit user alignment.\n+\t(vect_supportable_dr_alignment): Likewise.\n+\t* tree-vect-loop-manip.c (vect_can_advance_ivs_p): Use\n+\tSTMT_VINFO_LOOP_PHI_EVOLUTION_PART instead of recomputing it.\n+\t* tree-vect-loop.c (vect_transform_loop): First apply versioning,\n+\tthen peeling to arrange for the cost-model check to come first.\n+\n 2013-05-10  Alan Modra  <amodra@gmail.com>\n \n \t* configure.ac (HAVE_AS_TLS): Swap powerpc64 and powerpc cases."}, {"sha": "7656de9b0ab574aeca17cb93b81f3bc1417f970d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -1,3 +1,19 @@\n+2013-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/avx256-unaligned-load-2.c: Make well-defined.\n+\t* gcc.target/i386/l_fma_double_1.c: Adjust.\n+\t* gcc.target/i386/l_fma_double_2.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_3.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_4.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_5.c: Likewise.\n+\t* gcc.target/i386/l_fma_double_6.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_1.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_2.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_3.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_4.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_5.c: Likewise.\n+\t* gcc.target/i386/l_fma_float_6.c: Likewise.\n+\n 2013-05-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51226"}, {"sha": "e3ec8542e0111750a808467065b40b1e99e82e11", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-2.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-2.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -1,26 +1,13 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O3 -dp -mavx -mavx256-split-unaligned-load\" } */\n \n-#define N 1024\n-\n-char **ep;\n-char **fp;\n-\n void\n-avx_test (void)\n+avx_test (char **cp, char **ep)\n {\n   int i;\n-  char **ap;\n-  char **bp;\n-  char **cp;\n-\n-  ap = ep;\n-  bp = fp;\n-  for (i = 128; i >= 0; i--)\n-    {\n-      *ap++ = *cp++;\n-      *bp++ = 0;\n-    }\n+  char **ap = __builtin_assume_aligned (ep, 32);\n+  for (i = 128; i > 0; i--)\n+    *ap++ = *cp++;\n }\n \n /* { dg-final { scan-assembler-not \"avx_loaddqu256\" } } */"}, {"sha": "b3ffcf2c00fa5587410aa5b7ca09475115458cc4", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_1.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_1.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,23 +4,24 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_1.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub213sd\" 16  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 28  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub213sd\" 28 } } */"}, {"sha": "713b24b7c27beaa787a793bf63a87379ffd94533", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_2.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,15 +4,16 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_2.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 56 } } */"}, {"sha": "cbc6ef832aa53fb230e066fcf72fe743d692472b", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_3.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_3.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,23 +4,24 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_3.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231pd\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub231pd\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd213sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 16  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub213sd\" 16  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd213sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 28 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub213sd\" 28 } } */"}, {"sha": "d571aca1b01ecd74105c8deb57347ad94695787c", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_4.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_4.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,15 +4,16 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_4.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 56 } } */"}, {"sha": "56d86369bc3373b0eb726aa4a2fafd04a6bf2691", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_5.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_5.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,15 +4,16 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_5.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 56  } } */"}, {"sha": "f22763d6f99166eda8f889497b2bffa5b7bae942", "filename": "gcc/testsuite/gcc.target/i386/l_fma_double_6.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_double_6.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -4,15 +4,16 @@\n /* Test that the compiler properly optimizes floating point multiply\n    and add instructions into FMA3 instructions.  */\n \n-#define TYPE double\n+typedef double adouble __attribute__((aligned(sizeof (double))));\n+#define TYPE adouble\n \n #include \"l_fma_6.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132pd\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132pd\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132sd\" 32 } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132sd\" 56 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132sd\" 56  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132sd\" 56  } } */"}, {"sha": "b2f58ac2f95e713288456fca4d283826495be50f", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_1.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_1.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -9,18 +9,18 @@\n #include \"l_fma_1.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub213ss\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd213ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 60 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub213ss\" 60 } } */"}, {"sha": "6377585bffecc38f1826956cb9c2b0fa886c62a3", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_2.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 64  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 120  } } */"}, {"sha": "878babb31c51df67f6fd218f7518d8915e946a77", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_3.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_3.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -9,18 +9,18 @@\n #include \"l_fma_3.h\"\n \n /* { dg-final { scan-assembler-times \"vfmadd132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd231ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub231ps\" 4  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd231ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 4  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub231ps\" 4  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd213ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 32  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub213ss\" 32  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd213ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub213ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd213ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 60  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub213ss\" 60  } } */"}, {"sha": "bacb01e7f3ffbd8119a3bf39c3efacc1badb7ca1", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_4.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 64  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 120  } } */"}, {"sha": "a32fc41d9f9c4f8b18f705074698ee7f754ca7e8", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_5.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_5.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 64  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 120  } } */"}, {"sha": "a7a74fb42227ed804a022bec81111bb13356b691", "filename": "gcc/testsuite/gcc.target/i386/l_fma_float_6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fl_fma_float_6.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -12,7 +12,7 @@\n /* { dg-final { scan-assembler-times \"vfmsub132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmadd132ps\" 8  } } */\n /* { dg-final { scan-assembler-times \"vfnmsub132ps\" 8  } } */\n-/* { dg-final { scan-assembler-times \"vfmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfmsub132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 64  } } */\n-/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 64  } } */\n+/* { dg-final { scan-assembler-times \"vfmadd132ss\" 120 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd132ss\" 120  } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub132ss\" 120  } } */"}, {"sha": "bf0b510db44d1af2b4fcfebf8a5aec072cbbd84d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -1024,7 +1024,8 @@ vector_alignment_reachable_p (struct data_reference *dr)\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location, \n                          \"Unknown misalignment, is_packed = %d\",is_packed);\n-      if (targetm.vectorize.vector_alignment_reachable (type, is_packed))\n+      if ((TYPE_USER_ALIGN (type) && !is_packed)\n+\t  || targetm.vectorize.vector_alignment_reachable (type, is_packed))\n \treturn true;\n       else\n \treturn false;\n@@ -1323,7 +1324,6 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n   bool stat;\n   gimple stmt;\n   stmt_vec_info stmt_info;\n-  int vect_versioning_for_alias_required;\n   unsigned int npeel = 0;\n   bool all_misalignments_unknown = true;\n   unsigned int vf = LOOP_VINFO_VECT_FACTOR (loop_vinfo);\n@@ -1510,15 +1510,8 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n         }\n     }\n \n-  vect_versioning_for_alias_required\n-    = LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo);\n-\n-  /* Temporarily, if versioning for alias is required, we disable peeling\n-     until we support peeling and versioning.  Often peeling for alignment\n-     will require peeling for loop-bound, which in turn requires that we\n-     know how to adjust the loop ivs after the loop.  */\n-  if (vect_versioning_for_alias_required\n-      || !vect_can_advance_ivs_p (loop_vinfo)\n+  /* Check if we can possibly peel the loop.  */\n+  if (!vect_can_advance_ivs_p (loop_vinfo)\n       || !slpeel_can_duplicate_loop_p (loop, single_exit (loop)))\n     do_peeling = false;\n \n@@ -4722,9 +4715,10 @@ vect_supportable_dr_alignment (struct data_reference *dr,\n       if (!known_alignment_for_access_p (dr))\n \tis_packed = not_size_aligned (DR_REF (dr));\n \n-      if (targetm.vectorize.\n-\t  support_vector_misalignment (mode, type,\n-\t\t\t\t       DR_MISALIGNMENT (dr), is_packed))\n+      if ((TYPE_USER_ALIGN (type) && !is_packed)\n+\t  || targetm.vectorize.\n+\t       support_vector_misalignment (mode, type,\n+\t\t\t\t\t    DR_MISALIGNMENT (dr), is_packed))\n \t/* Can't software pipeline the loads, but can at least do them.  */\n \treturn dr_unaligned_supported;\n     }\n@@ -4736,9 +4730,10 @@ vect_supportable_dr_alignment (struct data_reference *dr,\n       if (!known_alignment_for_access_p (dr))\n \tis_packed = not_size_aligned (DR_REF (dr));\n \n-     if (targetm.vectorize.\n-         support_vector_misalignment (mode, type,\n-\t\t\t\t      DR_MISALIGNMENT (dr), is_packed))\n+     if ((TYPE_USER_ALIGN (type) && !is_packed)\n+\t || targetm.vectorize.\n+\t      support_vector_misalignment (mode, type,\n+\t\t\t\t\t   DR_MISALIGNMENT (dr), is_packed))\n        return dr_unaligned_supported;\n     }\n "}, {"sha": "82e724f1d9c1013e41790735d19989e94dbb5b2f", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -1555,7 +1555,6 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n     dump_printf_loc (MSG_NOTE, vect_location, \"vect_can_advance_ivs_p:\");\n   for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n-      tree access_fn = NULL;\n       tree evolution_part;\n \n       phi = gsi_stmt (gsi);\n@@ -1588,31 +1587,13 @@ vect_can_advance_ivs_p (loop_vec_info loop_vinfo)\n \n       /* Analyze the evolution function.  */\n \n-      access_fn = instantiate_parameters\n-\t(loop, analyze_scalar_evolution (loop, PHI_RESULT (phi)));\n-\n-      if (!access_fn)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                             \"No Access function.\");\n-\t  return false;\n-\t}\n-\n-      STRIP_NOPS (access_fn);\n-      if (dump_enabled_p ())\n-        {\n-\t  dump_printf_loc (MSG_NOTE, vect_location,\n-                           \"Access function of PHI: \");\n-\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, access_fn);\n-        }\n-\n-      evolution_part = evolution_part_in_loop_num (access_fn, loop->num);\n-\n+      evolution_part\n+\t= STMT_VINFO_LOOP_PHI_EVOLUTION_PART (vinfo_for_stmt (phi));\n       if (evolution_part == NULL_TREE)\n         {\n \t  if (dump_enabled_p ())\n-\t    dump_printf (MSG_MISSED_OPTIMIZATION, \"No evolution.\");\n+\t    dump_printf (MSG_MISSED_OPTIMIZATION,\n+\t\t\t \"No access function or evolution.\");\n \t  return false;\n         }\n "}, {"sha": "0fb2daed3700e0025d8aec457a82949fc68ec6b0", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb119beca72d64c166127445ca6883358e24174/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=afb119beca72d64c166127445ca6883358e24174", "patch": "@@ -5499,19 +5499,22 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n       check_profitability = true;\n     }\n \n-  /* Peel the loop if there are data refs with unknown alignment.\n-     Only one data ref with unknown store is allowed.  */\n+  /* Version the loop first, if required, so the profitability check\n+     comes first.  */\n \n-  if (LOOP_PEELING_FOR_ALIGNMENT (loop_vinfo))\n+  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n+      || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n     {\n-      vect_do_peeling_for_alignment (loop_vinfo, th, check_profitability);\n+      vect_loop_versioning (loop_vinfo, th, check_profitability);\n       check_profitability = false;\n     }\n \n-  if (LOOP_REQUIRES_VERSIONING_FOR_ALIGNMENT (loop_vinfo)\n-      || LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n+  /* Peel the loop if there are data refs with unknown alignment.\n+     Only one data ref with unknown store is allowed.  */\n+\n+  if (LOOP_PEELING_FOR_ALIGNMENT (loop_vinfo))\n     {\n-      vect_loop_versioning (loop_vinfo, th, check_profitability);\n+      vect_do_peeling_for_alignment (loop_vinfo, th, check_profitability);\n       check_profitability = false;\n     }\n "}]}