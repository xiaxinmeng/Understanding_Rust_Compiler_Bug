{"sha": "a48b501cb5f9255780d5570c32a2823d9097f36b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ4YjUwMWNiNWY5MjU1NzgwZDU1NzBjMzJhMjgyM2Q5MDk3ZjM2Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-09-05T10:51:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-09-05T10:51:34Z"}, "message": "optabs.c (libfunc_entry): Change optab to integer.\n\n\n\t* optabs.c (libfunc_entry): Change optab to integer.\n\t(hash_libfunc, convert_optab_libfunc, optab_libfunc,\n\tset_optab_libfunc, set_conv_libfunc): Use optable indexes instead\n\tof pointers for hashing.\n\nFrom-SVN: r128128", "tree": {"sha": "28398b07d9c542a0222a47acedca2b72e7519999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28398b07d9c542a0222a47acedca2b72e7519999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a48b501cb5f9255780d5570c32a2823d9097f36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48b501cb5f9255780d5570c32a2823d9097f36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48b501cb5f9255780d5570c32a2823d9097f36b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48b501cb5f9255780d5570c32a2823d9097f36b/comments", "author": null, "committer": null, "parents": [{"sha": "330618621be1e450c58f13fcc9bd29a355494afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/330618621be1e450c58f13fcc9bd29a355494afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/330618621be1e450c58f13fcc9bd29a355494afb"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "760ba372191834736b73d9ed969c808ebea260ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48b501cb5f9255780d5570c32a2823d9097f36b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48b501cb5f9255780d5570c32a2823d9097f36b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a48b501cb5f9255780d5570c32a2823d9097f36b", "patch": "@@ -1,3 +1,10 @@\n+2007-09-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* optabs.c (libfunc_entry): Change optab to integer.\n+\t(hash_libfunc, convert_optab_libfunc, optab_libfunc,\n+\tset_optab_libfunc, set_conv_libfunc): Use optable indexes instead\n+\tof pointers for hashing.\n+\n 2007-09-05  Jan Hubicka  <jh@suse.cz>\n \n \t* regrename.c (pass_regrename, pass_cprop_hardreg): Add RTL sharing"}, {"sha": "32f397cdbbca05188bc8b1b2a4022944c145678d", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a48b501cb5f9255780d5570c32a2823d9097f36b/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a48b501cb5f9255780d5570c32a2823d9097f36b/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a48b501cb5f9255780d5570c32a2823d9097f36b", "patch": "@@ -123,7 +123,7 @@ void debug_optab_libfuncs (void);\n    optab.  In the first case mode2 is unused.  */\n struct libfunc_entry GTY(())\n {\n-  void * GTY((skip)) optab;\n+  size_t optab;\n   enum machine_mode mode1, mode2;\n   rtx libfunc;\n };\n@@ -139,7 +139,7 @@ hash_libfunc (const void *p)\n   const struct libfunc_entry *const e = (const struct libfunc_entry *) p;\n \n   return (((int) e->mode1 + (int) e->mode2 * NUM_MACHINE_MODES)\n-\t  ^ htab_hash_pointer (e->optab));\n+\t  ^ e->optab);\n }\n \n /* Used for optab_hash.  */\n@@ -165,7 +165,7 @@ convert_optab_libfunc (convert_optab optab, enum machine_mode mode1,\n   struct libfunc_entry e;\n   struct libfunc_entry **slot;\n \n-  e.optab = optab;\n+  e.optab = (size_t) (convert_optab_table[0] - optab);\n   e.mode1 = mode1;\n   e.mode2 = mode2;\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, NO_INSERT);\n@@ -194,7 +194,7 @@ optab_libfunc (optab optab, enum machine_mode mode)\n   struct libfunc_entry e;\n   struct libfunc_entry **slot;\n \n-  e.optab = optab;\n+  e.optab = (size_t) (optab_table[0] - optab);\n   e.mode1 = mode;\n   e.mode2 = VOIDmode;\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, NO_INSERT);\n@@ -5938,7 +5938,7 @@ set_optab_libfunc (optab optable, enum machine_mode mode, const char *name)\n   rtx val;\n   struct libfunc_entry e;\n   struct libfunc_entry **slot;\n-  e.optab = optable;\n+  e.optab = (size_t) (optab_table[0] - optable);\n   e.mode1 = mode;\n   e.mode2 = VOIDmode;\n \n@@ -5949,7 +5949,7 @@ set_optab_libfunc (optab optable, enum machine_mode mode, const char *name)\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, INSERT);\n   if (*slot == NULL)\n     *slot = ggc_alloc (sizeof (struct libfunc_entry));\n-  (*slot)->optab = optable;\n+  (*slot)->optab = (size_t) (optab_table[0] - optable);\n   (*slot)->mode1 = mode;\n   (*slot)->mode2 = VOIDmode;\n   (*slot)->libfunc = val;\n@@ -5965,7 +5965,7 @@ set_conv_libfunc (convert_optab optable, enum machine_mode tmode,\n   rtx val;\n   struct libfunc_entry e;\n   struct libfunc_entry **slot;\n-  e.optab = optable;\n+  e.optab = (size_t) (convert_optab_table[0] - optable);\n   e.mode1 = tmode;\n   e.mode2 = fmode;\n \n@@ -5976,7 +5976,7 @@ set_conv_libfunc (convert_optab optable, enum machine_mode tmode,\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, INSERT);\n   if (*slot == NULL)\n     *slot = ggc_alloc (sizeof (struct libfunc_entry));\n-  (*slot)->optab = optable;\n+  (*slot)->optab = (size_t) (convert_optab_table[0] - optable);\n   (*slot)->mode1 = tmode;\n   (*slot)->mode2 = fmode;\n   (*slot)->libfunc = val;"}]}