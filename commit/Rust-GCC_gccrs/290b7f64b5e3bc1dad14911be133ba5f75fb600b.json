{"sha": "290b7f64b5e3bc1dad14911be133ba5f75fb600b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwYjdmNjRiNWUzYmMxZGFkMTQ5MTFiZTEzM2JhNWY3NWZiNjAwYg==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-04-09T17:40:20Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-04-09T17:40:20Z"}, "message": "re PR libgcj/23758 (java::lang::ConcreteProcess::nativeSpawn unsafe)\n\n\tPR libgcj/23758\n\t* java/lang/natPosixProcess.cc (nativeSpawn): Move building of\n\tenvironment before the fork.\n\t* testsuite/libjava.lang/Process_7.java: New test.\n\t* testsuite/libjava.lang/Process_7.out: Its expected results.\n\t* testsuite/libjava.lang/Process_7.jar: Generated file.\n\nFrom-SVN: r123676", "tree": {"sha": "b1c737c188f5f8453ba34c21ec12226fd1b5c954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c737c188f5f8453ba34c21ec12226fd1b5c954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/290b7f64b5e3bc1dad14911be133ba5f75fb600b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290b7f64b5e3bc1dad14911be133ba5f75fb600b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290b7f64b5e3bc1dad14911be133ba5f75fb600b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290b7f64b5e3bc1dad14911be133ba5f75fb600b/comments", "author": null, "committer": null, "parents": [{"sha": "22931aa4a943c3c937f4bf728917236ba27f975e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22931aa4a943c3c937f4bf728917236ba27f975e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22931aa4a943c3c937f4bf728917236ba27f975e"}], "stats": {"total": 135, "additions": 105, "deletions": 30}, "files": [{"sha": "361877ee1eba02b223c7310cf8b12dc4d27aaae2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=290b7f64b5e3bc1dad14911be133ba5f75fb600b", "patch": "@@ -1,3 +1,12 @@\n+2007-04-08  David Daney  <ddaney@avtrex.com>\n+\n+\tPR libgcj/23758\n+\t* java/lang/natPosixProcess.cc (nativeSpawn): Move building of\n+\tenvironment before the fork.\n+\t* testsuite/libjava.lang/Process_7.java: New test.\n+\t* testsuite/libjava.lang/Process_7.out: Its expected results.\n+\t* testsuite/libjava.lang/Process_7.jar: Generated file.\n+\n 2007-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* prims.cc (load_jvmti_agent): Add the missing `,'."}, {"sha": "252da6e80abd5b136dc29e1244f19f2b00de3472", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=290b7f64b5e3bc1dad14911be133ba5f75fb600b", "patch": "@@ -1,6 +1,7 @@\n // natPosixProcess.cc - Native side of POSIX process code.\n \n-/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007\n+  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -248,16 +249,57 @@ java::lang::PosixProcess::nativeSpawn ()\n \n       if (envp)\n \t{\n-\t  env = (char **) _Jv_Malloc ((envp->length + 1) * sizeof (char *));\n+          bool need_path = true;\n+          bool need_ld_library_path = true;\n+          int i;\n+\n+          // Preserve PATH and LD_LIBRARY_PATH unless specified\n+          // explicitly.  We need three extra slots.  Potentially PATH\n+          // and LD_LIBRARY_PATH will be added plus the NULL\n+          // termination.\n+\t  env = (char **) _Jv_Malloc ((envp->length + 3) * sizeof (char *));\n \t  elts = elements (envp);\n \n \t  // Initialize so we can gracefully recover.\n-\t  for (int i = 0; i <= envp->length; ++i)\n+\t  for (i = 0; i < envp->length + 3; ++i)\n \t    env[i] = NULL;\n \n-\t  for (int i = 0; i < envp->length; ++i)\n-\t    env[i] = new_string (elts[i]);\n-\t  env[envp->length] = NULL;\n+\t  for (i = 0; i < envp->length; ++i)\n+            {\n+              env[i] = new_string (elts[i]);\n+              if (!strncmp (env[i], \"PATH=\", sizeof(\"PATH=\")))\n+                need_path = false;\n+              if (!strncmp (env[i], \"LD_LIBRARY_PATH=\",\n+                            sizeof(\"LD_LIBRARY_PATH=\")))\n+                need_ld_library_path = false;\n+            }\n+\n+          if (need_path)\n+            {\n+\t      char *path_val = getenv (\"PATH\");\n+              if (path_val)\n+                {\n+                  env[i] = (char *) _Jv_Malloc (strlen (path_val) +\n+                                                sizeof(\"PATH=\") + 1);\n+                  strcpy (env[i], \"PATH=\");\n+                  strcat (env[i], path_val);\n+                  i++;\n+                }\n+            }\n+          if (need_ld_library_path)\n+            {\n+\t      char *path_val = getenv (\"LD_LIBRARY_PATH\");\n+              if (path_val)\n+                {\n+                  env[i] =\n+                    (char *) _Jv_Malloc (strlen (path_val) +\n+                                         sizeof(\"LD_LIBRARY_PATH=\") + 1);\n+                  strcpy (env[i], \"LD_LIBRARY_PATH=\");\n+                  strcat (env[i], path_val);\n+                  i++;\n+                }\n+            }\n+\t  env[i] = NULL;\n \t}\n \n       // We allocate this here because we can't call malloc() after\n@@ -303,29 +345,7 @@ java::lang::PosixProcess::nativeSpawn ()\n \t{\n \t  // Child process, so remap descriptors, chdir and exec.\n \t  if (envp)\n-\t    {\n-\t      // Preserve PATH and LD_LIBRARY_PATH unless specified\n-\t      // explicitly.\n-\t      char *path_val = getenv (\"PATH\");\n-\t      char *ld_path_val = getenv (\"LD_LIBRARY_PATH\");\n-\t      environ = env;\n-\t      if (path_val && getenv (\"PATH\") == NULL)\n-\t\t{\n-\t\tchar *path_env =\n-                  (char *) _Jv_Malloc (strlen (path_val) + 5 + 1);\n-\t\t  strcpy (path_env, \"PATH=\");\n-\t\t  strcat (path_env, path_val);\n-\t\t  putenv (path_env);\n-\t\t}\n-\t      if (ld_path_val && getenv (\"LD_LIBRARY_PATH\") == NULL)\n-\t\t{\n-\t\tchar *ld_path_env =\n-                  (char *) _Jv_Malloc (strlen (ld_path_val) + 16 + 1);\n-\t\t  strcpy (ld_path_env, \"LD_LIBRARY_PATH=\");\n-\t\t  strcat (ld_path_env, ld_path_val);\n-\t\t  putenv (ld_path_env);\n-\t\t}\n-\t    }\n+            environ = env;\n \n \t  // We ignore errors from dup2 because they should never occur.\n \t  dup2 (outp[0], 0);\n@@ -344,7 +364,7 @@ java::lang::PosixProcess::nativeSpawn ()\n \t  close (outp[0]);\n \t  close (outp[1]);\n \t  close (msgp[0]);\n-          \n+\n \t  // Change directory.\n \t  if (path != NULL)\n \t    {"}, {"sha": "261578e8a546534a78e7bb73abfe95b5bc5e0f84", "filename": "libjava/testsuite/libjava.lang/Process_7.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.jar?ref=290b7f64b5e3bc1dad14911be133ba5f75fb600b"}, {"sha": "d6f654eb2e0d4d645aa4e766495f5511e0cb2269", "filename": "libjava/testsuite/libjava.lang/Process_7.java", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.java?ref=290b7f64b5e3bc1dad14911be133ba5f75fb600b", "patch": "@@ -0,0 +1,45 @@\n+// Verify we can modify the environment.\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.Map;\n+\n+\n+\n+public class Process_7\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+        ProcessBuilder pb = new ProcessBuilder(\"env\");\n+        Map<String, String> e = pb.environment();\n+        e.clear();\n+        String v = \"process7_value\";\n+        String k = \"PROCESS_7_KEY\";\n+        e.put(k, v);\n+\tProcess p = pb.start();\n+\tInputStream is = p.getInputStream();\n+\tInputStreamReader isr = new InputStreamReader(is);\n+\tBufferedReader br = new BufferedReader(isr);\n+        boolean found = false;\n+\n+\tString result;\n+        while ((result = br.readLine()) != null)\n+          {\n+            if (result.equals(k + '=' + v))\n+              found = true;\n+          }\n+\tif (!found)\n+\t  {\n+\t    System.out.println(\"bad\");\n+\t    return;\n+\t  }\n+\tSystem.out.println(\"ok\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_7.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290b7f64b5e3bc1dad14911be133ba5f75fb600b/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_7.out?ref=290b7f64b5e3bc1dad14911be133ba5f75fb600b", "patch": "@@ -0,0 +1 @@\n+ok"}]}