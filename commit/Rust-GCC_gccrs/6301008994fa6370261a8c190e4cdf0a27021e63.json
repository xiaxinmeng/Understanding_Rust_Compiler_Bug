{"sha": "6301008994fa6370261a8c190e4cdf0a27021e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMTAwODk5NGZhNjM3MDI2MWE4YzE5MGU0Y2RmMGEyNzAyMWU2Mw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-06-28T12:45:59Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-06-28T12:45:59Z"}, "message": "Introduce IntegerRange for options (PR driver/79659).\n\n2017-06-28  Martin Liska  <mliska@suse.cz>\n\n\tPR driver/79659\n\t* common.opt: Add IntegerRange to various options.\n\t* opt-functions.awk (integer_range_info): New function.\n\t* optc-gen.awk: Add integer_range_info to cl_options struct.\n\t* opts-common.c (decode_cmdline_option): Handle\n\tCL_ERR_INT_RANGE_ARG.\n\t(cmdline_handle_error): Likewise.\n\t* opts.c (print_filtered_help): Show valid interval in\n\twhen --help is provided.\n\t* opts.h (struct cl_option): Add range_min and range_max fields.\n\t* config/i386/i386.opt: Add IntegerRange for -mbranch-cost.\n2017-06-28  Martin Liska  <mliska@suse.cz>\n\n\tPR driver/79659\n\t* c.opt: Add IntegerRange to various options.\n2017-06-28  Martin Liska  <mliska@suse.cz>\n\n\tPR driver/79659\n\t* g++.dg/opt/pr79659.C: New test.\n\nFrom-SVN: r249734", "tree": {"sha": "95e68b86727f13f74cf2fc3286161cf1780cce3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e68b86727f13f74cf2fc3286161cf1780cce3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6301008994fa6370261a8c190e4cdf0a27021e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6301008994fa6370261a8c190e4cdf0a27021e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6301008994fa6370261a8c190e4cdf0a27021e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6301008994fa6370261a8c190e4cdf0a27021e63/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1cac008e2629fc225a6ed6a6e748e6caec4dc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1cac008e2629fc225a6ed6a6e748e6caec4dc26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1cac008e2629fc225a6ed6a6e748e6caec4dc26"}], "stats": {"total": 106, "additions": 86, "deletions": 20}, "files": [{"sha": "87a978bf81582ba0bfd2154b255415722253c2fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -1,3 +1,17 @@\n+2017-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/79659\n+\t* common.opt: Add IntegerRange to various options.\n+\t* opt-functions.awk (integer_range_info): New function.\n+\t* optc-gen.awk: Add integer_range_info to cl_options struct.\n+\t* opts-common.c (decode_cmdline_option): Handle\n+\tCL_ERR_INT_RANGE_ARG.\n+\t(cmdline_handle_error): Likewise.\n+\t* opts.c (print_filtered_help): Show valid interval in\n+\twhen --help is provided.\n+\t* opts.h (struct cl_option): Add range_min and range_max fields.\n+\t* config/i386/i386.opt: Add IntegerRange for -mbranch-cost.\n+\n 2017-06-28  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd ((X & ~Y) | (~X & Y)): Generalize to + and ^."}, {"sha": "dec28bbf251fbb458520c842c61166f0de2ba19c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -1,3 +1,8 @@\n+2017-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/79659\n+\t* c.opt: Add IntegerRange to various options.\n+\n 2017-06-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/80116"}, {"sha": "05766c4785633a9576c0340792b569b333b41e4f", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -541,7 +541,7 @@ C ObjC C++ ObjC++ Var(warn_format_nonliteral) Warning LangEnabledBy(C ObjC C++ O\n Warn about format strings that are not literals.\n \n Wformat-overflow\n-C ObjC C++ LTO ObjC++ Warning Alias(Wformat-overflow=, 1, 0)\n+C ObjC C++ LTO ObjC++ Warning Alias(Wformat-overflow=, 1, 0) IntegerRange(0, 2)\n Warn about function calls with format strings that write past the end\n of the destination region.  Same as -Wformat-overflow=1.\n \n@@ -567,16 +567,16 @@ C ObjC C++ ObjC++ Var(warn_format_zero_length) Warning LangEnabledBy(C ObjC C++\n Warn about zero-length formats.\n \n Wformat=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0) IntegerRange(0, 2)\n Warn about printf/scanf/strftime/strfmon format string anomalies.\n \n Wformat-overflow=\n-C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_format_overflow) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+C ObjC C++ LTO ObjC++ Joined RejectNegative UInteger Var(warn_format_overflow) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0) IntegerRange(0, 2)\n Warn about function calls with format strings that write past the end\n of the destination region.\n \n Wformat-truncation=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_trunc) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_trunc) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0) IntegerRange(0, 2)\n Warn about calls to snprintf and similar functions that truncate output.\n \n Wignored-qualifiers\n@@ -732,7 +732,7 @@ Warn about buffer overflow in string manipulation functions like memcpy\n and strcpy.\n \n Wstringop-overflow=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_stringop_overflow) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++, Wall)\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_stringop_overflow) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++, Wall) IntegerRange(0, 4)\n Under the control of Object Size type, warn about buffer overflow in string\n manipulation functions like memcpy and strcpy.\n \n@@ -936,7 +936,7 @@ C++ Warning Alias(Wplacement-new=, 1, 0)\n Warn for placement new expressions with undefined behavior.\n \n Wplacement-new=\n-C++ Joined RejectNegative UInteger Var(warn_placement_new) Init(-1) Warning\n+C++ Joined RejectNegative UInteger Var(warn_placement_new) Init(-1) Warning IntegerRange(0, 2)\n Warn for placement new expressions with undefined behavior.\n \n Wredundant-decls\n@@ -976,7 +976,7 @@ C ObjC C++ ObjC++ Warning Alias(Wshift-overflow=, 1, 0)\n Warn if left shift of a signed value overflows.\n \n Wshift-overflow=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_shift_overflow) Init(-1) Warning\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_shift_overflow) Init(-1) Warning IntegerRange(0, 2)\n Warn if left shift of a signed value overflows.\n \n Wshift-count-negative\n@@ -1016,11 +1016,11 @@ C ObjC Var(warn_strict_prototypes) Warning\n Warn about unprototyped function declarations.\n \n Wstrict-aliasing=\n-C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 3, 0)\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 3, 0) IntegerRange(0, 3)\n ;\n \n Wstrict-overflow=\n-C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0) IntegerRange(0, 5)\n ;\n \n Wstrict-selector-match\n@@ -1108,7 +1108,7 @@ C ObjC C++ ObjC++ Warning Alias(Wunused-const-variable=, 2, 0)\n Warn when a const variable is unused.\n \n Wunused-const-variable=\n-C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_unused_const_variable) Warning LangEnabledBy(C ObjC,Wunused-variable, 1, 0)\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_unused_const_variable) Warning LangEnabledBy(C ObjC,Wunused-variable, 1, 0) IntegerRange(0, 2)\n Warn when a const variable is unused.\n \n Wvariadic-macros"}, {"sha": "e81165c488bc78cac478fe320db9ed093b91b830", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -546,7 +546,7 @@ Common Var(warn_array_bounds) Warning\n Warn if an array is accessed out of bounds.\n \n Warray-bounds=\n-Common Joined RejectNegative UInteger Var(warn_array_bounds) Warning\n+Common Joined RejectNegative UInteger Var(warn_array_bounds) Warning IntegerRange(0, 2)\n Warn if an array is accessed out of bounds.\n \n Wattributes\n@@ -601,7 +601,7 @@ Wimplicit-fallthrough\n Common Alias(Wimplicit-fallthrough=,3,0) Warning\n \n Wimplicit-fallthrough=\n-Common Var(warn_implicit_fallthrough) RejectNegative Joined UInteger Warning\n+Common Var(warn_implicit_fallthrough) RejectNegative Joined UInteger Warning IntegerRange(0, 5)\n Warn when a switch case falls through.\n \n Winline\n@@ -1778,7 +1778,7 @@ Specify the algorithm to partition symbols and vars at linktime.\n \n ; The initial value of -1 comes from Z_DEFAULT_COMPRESSION in zlib.h.\n flto-compression-level=\n-Common Joined RejectNegative UInteger Var(flag_lto_compression_level) Init(-1)\n+Common Joined RejectNegative UInteger Var(flag_lto_compression_level) Init(-1) IntegerRange(0, 9)\n -flto-compression-level=<number>\tUse zlib compression level <number> for IL.\n \n flto-odr-type-merging\n@@ -2061,7 +2061,7 @@ Tell DSE that the storage for a C++ object is dead when the constructor\n starts and when the destructor finishes.\n \n flifetime-dse=\n-Common Joined RejectNegative UInteger Var(flag_lifetime_dse) Optimization\n+Common Joined RejectNegative UInteger Var(flag_lifetime_dse) Optimization IntegerRange(0, 2)\n \n flive-range-shrinkage\n Common Report Var(flag_live_range_shrinkage) Init(0) Optimization"}, {"sha": "90eadbc4e1865a3c606a14b4e840626d5add9bf0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -267,8 +267,8 @@ EnumValue\n Enum(asm_dialect) String(att) Value(ASM_ATT)\n \n mbranch-cost=\n-Target RejectNegative Joined UInteger Var(ix86_branch_cost)\n-Branches are this expensive (1-5, arbitrary units).\n+Target RejectNegative Joined UInteger Var(ix86_branch_cost) IntegerRange(1, 5)\n+Branches are this expensive (arbitrary units).\n \n mlarge-data-threshold=\n Target RejectNegative Joined UInteger Var(ix86_section_threshold) Init(DEFAULT_LARGE_SECTION_THRESHOLD)"}, {"sha": "ad0b52c090323913be0e8538893a34c5159d8f39", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -314,6 +314,17 @@ function search_var_name(name, opt_numbers, opts, flags, n_opts)\n     return \"\"\n }\n \n+function integer_range_info(range_option)\n+{\n+    if (range_option != \"\") {\n+\tstart = nth_arg(0, range_option);\n+\tend = nth_arg(1, range_option);\n+\treturn start \", \" end\n+    }\n+    else\n+        return \"-1, -1\"\n+}\n+\n # Handle LangEnabledBy(ENABLED_BY_LANGS, ENABLEDBY_NAME, ENABLEDBY_POSARG,\n # ENABLEDBY_NEGARG). This function does not return anything.\n function lang_enabled_by(enabledby_langs, enabledby_name, enabledby_posarg, enabledby_negarg)"}, {"sha": "45b1b95e7ec2f7a01afa6f4e26d769ff8c3c219d", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -399,8 +399,8 @@ for (i = 0; i < n_opts; i++) {\n \t\tprintf(\"    %s,\\n\" \\\n \t\t       \"    0, %s,\\n\",\n \t\t       cl_flags, cl_bit_fields)\n-\tprintf(\"    %s, %s }%s\\n\", var_ref(opts[i], flags[i]),\n-\t       var_set(flags[i]), comma)\n+\tprintf(\"    %s, %s, %s }%s\\n\", var_ref(opts[i], flags[i]),\n+\t       var_set(flags[i]), integer_range_info(opt_args(\"IntegerRange\", flags[i])), comma)\n }\n \n print \"};\""}, {"sha": "0cab42a021cc5f05e1b480763df484e6901f5233", "filename": "gcc/opts-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -661,6 +661,11 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n       value = integral_argument (arg);\n       if (value == -1)\n \terrors |= CL_ERR_UINT_ARG;\n+\n+      /* Reject value out of a range.  */\n+      if (option->range_max != -1\n+\t  && (value < option->range_min || value > option->range_max))\n+\terrors |= CL_ERR_INT_RANGE_ARG;\n     }\n \n   /* If the switch takes an enumerated argument, convert it.  */\n@@ -1137,6 +1142,13 @@ cmdline_handle_error (location_t loc, const struct cl_option *option,\n       return true;\n     }\n \n+  if (errors & CL_ERR_INT_RANGE_ARG)\n+    {\n+      error_at (loc, \"argument to %qs is not between %d and %d\",\n+\t\toption->opt_text, option->range_min, option->range_max);\n+      return true;\n+    }\n+\n   if (errors & CL_ERR_ENUM_ARG)\n     {\n       const struct cl_enum *e = &cl_enums[option->var_enum];"}, {"sha": "7460c2be1b6a47f7e1e6df448d746e0e78324627", "filename": "gcc/opts.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -1253,6 +1253,15 @@ print_filtered_help (unsigned int include_flags,\n \t  help = new_help;\n \t}\n \n+      if (option->range_max != -1)\n+\t{\n+\t  char b[128];\n+\t  snprintf (b, sizeof (b), \"<%d,%d>\", option->range_min,\n+\t\t    option->range_max);\n+\t  opt = concat (opt, b, NULL);\n+\t  len += strlen (b);\n+\t}\n+\n       wrap_help (help, opt, len, columns);\n       displayed = true;\n "}, {"sha": "5599711cc7678bfd18a5ae8831ead79c00588f13", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -110,6 +110,10 @@ struct cl_option\n   enum cl_var_type var_type;\n   /* Value or bit-mask with which to set a field.  */\n   HOST_WIDE_INT var_value;\n+  /* Range info minimum, or -1.  */\n+  int range_min;\n+  /* Range info maximum, or -1.  */\n+  int range_max;\n };\n \n /* Records that the state of an option consists of SIZE bytes starting\n@@ -200,8 +204,9 @@ extern const unsigned int cl_enums_count;\n #define CL_ERR_MISSING_ARG\t(1 << 1) /* Argument required but missing.  */\n #define CL_ERR_WRONG_LANG\t(1 << 2) /* Option for wrong language.  */\n #define CL_ERR_UINT_ARG\t\t(1 << 3) /* Bad unsigned integer argument.  */\n-#define CL_ERR_ENUM_ARG\t\t(1 << 4) /* Bad enumerated argument.  */\n-#define CL_ERR_NEGATIVE\t\t(1 << 5) /* Negative form of option\n+#define CL_ERR_INT_RANGE_ARG\t(1 << 4) /* Bad unsigned integer argument.  */\n+#define CL_ERR_ENUM_ARG\t\t(1 << 5) /* Bad enumerated argument.  */\n+#define CL_ERR_NEGATIVE\t\t(1 << 6) /* Negative form of option\n \t\t\t\t\t    not permitted (together\n \t\t\t\t\t    with OPT_SPECIAL_unknown).  */\n "}, {"sha": "9433ee709c6f804a3c8ca8c5282bdf743fc9ca22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -1,3 +1,8 @@\n+2017-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/79659\n+\t* g++.dg/opt/pr79659.C: New test.\n+\n 2017-06-28  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.dg/tree-ssa/copy-sign-1.c: Add c99_runtime effective target"}, {"sha": "132d5c1e7f7011def09fd6d33b8129211cd68c26", "filename": "gcc/testsuite/g++.dg/opt/pr79659.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79659.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6301008994fa6370261a8c190e4cdf0a27021e63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79659.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr79659.C?ref=6301008994fa6370261a8c190e4cdf0a27021e63", "patch": "@@ -0,0 +1,5 @@\n+// PR target/79659\n+// { dg-do compile }\n+// { dg-options \"-flifetime-dse=123456\" }\n+\n+// { dg-error \"is not between 0 and 2\" \"\" { target *-*-* } 0 }"}]}