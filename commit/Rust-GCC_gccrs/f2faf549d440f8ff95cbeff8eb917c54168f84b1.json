{"sha": "f2faf549d440f8ff95cbeff8eb917c54168f84b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJmYWY1NDlkNDQwZjhmZjk1Y2JlZmY4ZWI5MTdjNTQxNjhmODRiMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-09T05:47:14Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-09T05:47:14Z"}, "message": "Handle long options by translation to old-style ones.\n\n(translate_options): New function.\n(option_map): New table.\n\nFrom-SVN: r3686", "tree": {"sha": "ea371e81c0531d64b3dd84dd775c003f0d63b7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea371e81c0531d64b3dd84dd775c003f0d63b7b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2faf549d440f8ff95cbeff8eb917c54168f84b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2faf549d440f8ff95cbeff8eb917c54168f84b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2faf549d440f8ff95cbeff8eb917c54168f84b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2faf549d440f8ff95cbeff8eb917c54168f84b1/comments", "author": null, "committer": null, "parents": [{"sha": "c6e758972b19fad6f10a05d1fb3866d3db86cdbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e758972b19fad6f10a05d1fb3866d3db86cdbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e758972b19fad6f10a05d1fb3866d3db86cdbb"}], "stats": {"total": 210, "additions": 209, "deletions": 1}, "files": [{"sha": "e72669e3d25e63b4bb5f4a2e232cf40ec29d5aca", "filename": "gcc/gcc.c", "status": "modified", "additions": 209, "deletions": 1, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2faf549d440f8ff95cbeff8eb917c54168f84b1/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2faf549d440f8ff95cbeff8eb917c54168f84b1/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f2faf549d440f8ff95cbeff8eb917c54168f84b1", "patch": "@@ -613,6 +613,211 @@ static char **linker_options;\n static int n_assembler_options;\n static char **assembler_options;\n \f\n+/* Define how to map long options into short ones.  */\n+\n+/* This structure describes one mapping.  */\n+struct option_map\n+{\n+  /* The long option's name.  */\n+  char *name;\n+  /* The equivalent short option.  */\n+  char *equivalent;\n+  /* Argument info.  A string of flag chars; NULL equals no options.\n+     a => argument required.\n+     o => argument optional.\n+     j => join argument to equivalent, making one word.\n+     * => allow other text after NAME as an argument.  */\n+  char *arg_info;\n+};\n+\n+/* This is the table of mappings.  Mappings are tried sequentially\n+   for each option encountered; the first one that matches, wins.  */\n+\n+struct option_map option_map[] =\n+ {\n+   {\"--profile-blocks\", \"-a\", 0},\n+   {\"--target\", \"-b\", \"a\"},\n+   {\"--compile\", \"-c\", 0},\n+   {\"--dump\", \"-d\", \"a\"},\n+   {\"--entry\", \"-e\", 0},\n+   {\"--debug\", \"-g\", \"oj\"},\n+   {\"--include\", \"-include\", \"a\"},\n+   {\"--imacros\", \"-imacros\", \"a\"},\n+   {\"--include-prefix\", \"-iprefix\", \"a\"},\n+   {\"--include-directory-after\", \"-idirafter\", \"a\"},\n+   {\"--include-with-prefix\", \"-iwithprefix\", \"a\"},\n+   {\"--machine-\", \"-m\", \"*j\"},\n+   {\"--machine\", \"-m\", \"aj\"},\n+   {\"--no-standard-includes\", \"-nostdinc\", 0},\n+   {\"--no-standard-libraries\", \"-nostdlib\", 0},\n+   {\"--no-precompiled-includes\", \"-noprecomp\", 0},\n+   {\"--output\", \"-o\", \"a\"},\n+   {\"--profile\", \"-p\", 0},\n+   {\"--quiet\", \"-q\", 0},\n+   {\"--silent\", \"-q\", 0},\n+   {\"--force-link\", \"-u\", \"a\"},\n+   {\"--verbose\", \"-v\", 0},\n+   {\"--no-warnings\", \"-w\", 0},\n+   {\"--language\", \"-x\", \"a\"},\n+\n+   {\"--assert\", \"-A\", \"a\"},\n+   {\"--prefix\", \"-B\", \"a\"},\n+   {\"--comments\", \"-C\", 0},\n+   {\"--define-macro\", \"-D\", \"a\"},\n+   {\"--preprocess\", \"-E\", 0},\n+   {\"--trace-includes\", \"-H\", 0},\n+   {\"--include-directory\", \"-I\", \"a\"},\n+   {\"--include-barrier\", \"-I-\", 0},\n+   {\"--library-directory\", \"-L\", \"a\"},\n+   {\"--dependencies\", \"-M\", 0},\n+   {\"--user-dependencies\", \"-MM\", 0},\n+   {\"--write-dependencies\", \"-MD\", 0},\n+   {\"--write-user-dependencies\", \"-MMD\", 0},\n+   {\"--optimize\", \"-O\", \"oj\"},\n+   {\"--no-line-commands\", \"-P\", 0},\n+   {\"--assemble\", \"-S\", 0},\n+   {\"--undefine-macro\", \"-U\", \"a\"},\n+   {\"--version\", \"-V\", \"a\"},\n+   {\"--for-assembler\", \"-Wa\", \"a\"},\n+   {\"--extra-warnings\", \"-W\", 0},\n+   {\"--all-warnings\", \"-Wall\", 0},\n+   {\"--warn-\", \"-W\", \"*j\"},\n+   {\"--for-linker\", \"-Xlinker\", \"a\"},\n+\n+   {\"--ansi\", \"-ansi\", 0},\n+   {\"--traditional\", \"-traditional\", 0},\n+   {\"--traditional-cpp\", \"-traditional-cpp\", 0},\n+   {\"--trigraphs\", \"-trigraphs\", 0},\n+   {\"--pipe\", \"-pipe\", 0},\n+   {\"--dumpbase\", \"-dumpbase\", \"a\"},\n+   {\"--pedantic\", \"-pedantic\", 0},\n+   {\"--pedantic-errors\", \"-pedantic-errors\", 0},\n+   {\"--save-temps\", \"-save-temps\", 0},\n+   {\"--print-libgcc-file-name\", \"-print-libgcc-file-name\", 0},\n+   {\"--static\", \"-static\", 0},\n+   {\"--shared\", \"-shared\", 0},\n+   {\"--symbolic\", \"-symbolic\", 0},\n+   {\"--\", \"-f\", \"*j\"}\n+ };\n+\f\n+/* Translate the options described by *ARGCP and *ARGVP.\n+   Make a new vector and store it back in *ARGVP,\n+   and store its length in *ARGVC.  */\n+\n+static void\n+translate_options (argcp, argvp)\n+     int *argcp;\n+     char ***argvp;\n+{\n+  int i, j;\n+  int argc = *argcp;\n+  char **argv = *argvp;\n+  char **newv = (char **) xmalloc ((argc + 2) * 2 * sizeof (char *));\n+  int newindex = 0;\n+\n+  i = 0;\n+  newv[newindex++] = argv[i++];\n+\n+  while (i < argc)\n+    {\n+      /* Translate -- options.  */\n+      if (argv[i][0] == '-' && argv[i][1] == '-')\n+\t{\n+\t  /* Find a mapping that applies to this option.  */\n+\t  for (j = 0; j < sizeof (option_map) / sizeof (option_map[0]); j++)\n+\t    {\n+\t      int optlen = strlen (option_map[j].name);\n+\t      int complen = strlen (argv[i]);\n+\t      if (complen > optlen)\n+\t\tcomplen = optlen;\n+\t      if (!strncmp (argv[i], option_map[j].name, complen))\n+\t\t{\n+\t\t  int extra = strlen (argv[i]) > optlen;\n+\t\t  char *arg = 0;\n+\n+\t\t  if (extra)\n+\t\t    {\n+\t\t      /* If the option has an argument, accept that.  */\n+\t\t      if (argv[i][optlen] == '=')\n+\t\t\targ = argv[i] + optlen + 1;\n+\t\t      /* If this mapping allows extra text at end of name,\n+\t\t\t accept that as \"argument\".  */\n+\t\t      else if (index (option_map[j].arg_info, '*') != 0)\n+\t\t\targ = argv[i] + optlen;\n+\t\t      /* Otherwise, extra text at end means mismatch.\n+\t\t\t Try other mappings.  */\n+\t\t      else\n+\t\t\tcontinue;\n+\t\t    }\n+\t\t  else if (index (option_map[j].arg_info, '*') != 0)\n+\t\t    error (\"Incomplete `%s' option\", option_map[j].name);\n+\n+\t\t  /* Handle arguments.  */\n+\t\t  if (index (option_map[j].arg_info, 'o') != 0)\n+\t\t    {\n+\t\t      if (arg == 0)\n+\t\t\t{\n+\t\t\t  if (i + 1 == argc)\n+\t\t\t    error (\"Missing argument to `%s' option\",\n+\t\t\t\t   option_map[j].name);\n+\t\t\t  arg = argv[++i];\n+\t\t\t}\n+\t\t    }\n+\t\t  else if (index (option_map[j].arg_info, 'a') == 0)\n+\t\t    {\n+\t\t      if (arg != 0)\n+\t\t\terror (\"Extraneous argument to `%s' option\",\n+\t\t\t       option_map[j].name);\n+\t\t      arg = 0;\n+\t\t    }\n+\n+\t\t  /* Store the translation as one argv elt or as two.  */\n+\t\t  if (arg != 0 && index (option_map[j].arg_info, 'j') != 0)\n+\t\t    newv[newindex++] = concat (option_map[j].equivalent,\n+\t\t\t\t\t       arg, \"\");\n+\t\t  else if (arg != 0)\n+\t\t    {\n+\t\t      newv[newindex++] = option_map[j].equivalent;\n+\t\t      newv[newindex++] = arg;\n+\t\t    }\n+\t\t  else\n+\t\t    newv[newindex++] = option_map[j].equivalent;\n+\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  i++;\n+\t}\n+      /* Handle old-fashioned options--just copy them through,\n+\t with their arguments.  */\n+      else if (argv[i][0] == '-')\n+\t{\n+\t  char *p = argv[i] + 1;\n+\t  int c = *p;\n+\t  int nskip = 1;\n+\n+\t  if (SWITCH_TAKES_ARG (c) > (p[1] != 0))\n+\t    nskip += SWITCH_TAKES_ARG (c) - (p[1] != 0);\n+\t  else if (WORD_SWITCH_TAKES_ARG (p))\n+\t    nskip += WORD_SWITCH_TAKES_ARG (p);\n+\n+\t  while (nskip > 0)\n+\t    {\n+\t      newv[newindex++] = argv[i++];\n+\t      nskip--;\n+\t    }\n+\t}\n+      else\n+\t/* Ordinary operands, or +e options.  */\n+\tnewv[newindex++] = argv[i++];\n+    }\n+\n+  newv[newindex] = 0;\n+\n+  *argvp = newv;\n+  *argcp = newindex;\n+}\n+\f\n /* Read compilation specs from a file named FILENAME,\n    replacing the default ones.\n \n@@ -1962,6 +2167,9 @@ process_command (argc, argv)\n \t}\n     }\n \n+  /* Convert new-style -- options to old-style.  */\n+  translate_options (&argc, &argv);\n+\n   /* Scan argv twice.  Here, the first time, just count how many switches\n      there will be in their vector, and how many input files in theirs.\n      Here we also parse the switches that cc itself uses (e.g. -v).  */\n@@ -2074,7 +2282,7 @@ process_command (argc, argv)\n \t  assembler_options[n_assembler_options - 1] = argv[i] + prev;\n \t}\n       else if (argv[i][0] == '+' && argv[i][1] == 'e')\n-\t/* Compensate for the +e options to the C++ front-end.  */\n+\t/* The +e options to the C++ front-end.  */\n \tn_switches++;\n       else if (argv[i][0] == '-' && argv[i][1] != 0 && argv[i][1] != 'l')\n \t{"}]}