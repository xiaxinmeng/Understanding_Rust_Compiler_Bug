{"sha": "837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM3ZWRkNWYxMThmMGMwOTRmYTUyZTVjYjljYTJhMjk5YTViMWQ1Yw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-07-10T23:08:52Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-07-10T23:08:52Z"}, "message": "re PR bootstrap/32617 (explow.c references DECL_ALIGN of a FUNCTION_DECL)\n\n2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR 32617\n\t* c-common.c (c_alignof_expr): Look at DECL_ALIGN of\n\tFUNCTION_DECLs.\n\t(handle_aligned_attribute): Allow use on FUNCTION_DECLs.\n\t* varasm.c (assemble_start_function): Honor DECL_ALIGN\n\tfor FUNCTION_DECLs.  Don't use align_functions_log if\n\tDECL_USER_ALIGN.\n\t* print-tree.c (print_node): Print DECL_ALIGN and DECL_USER_ALIGN\n\teven for FUNCTION_DECLs.\n\t* c-decl.c (merge_decls): Propagate DECL_ALIGN even for\n\tFUNCTION_DECLs.\n\t* tree.h (DECL_ALIGN): Update for new location of 'align'.\n\t(DECL_FUNCTION_CODE): Update for new location and name of\n\t'function_code'.\n\t(DECL_OFFSET_ALIGN): Update for new location of 'off_align'.\n\t(struct tree_decl_common): Move 'align' and 'off_align' out\n\tof union, ensure they're still on a 32-bit boundary.  Remove\n\tother fields in union 'u1'.\n\t(struct tree_function_decl): Add field 'function_code' replacing\n\t'u1.f' in tree_decl_common.\n\t* tree.c (build_decl_stat): Set initial value of DECL_ALIGN.\n\t* doc/extend.texi (Function Attributes): Add 'aligned' attribute.\n\t(Variable Attributes): Cross-reference 'aligned' attribute\n\tto Function Attributes.\n\t* flags.h (force_align_functions_log): Delete.\n\t* toplev.c (force_align_functions_log): Delete.\n\nIndex: gcc/testsuite/ChangeLog\n2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR 32617\n\t* gcc.c-torture/execute/align-3.c: New.\n\nIndex: gcc/java/ChangeLog\n2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR 32617\n\t* lang.c (java_init): Remove setting of force_align_functions_log.\n\t* class.c (add_method_1): Set DECL_ALIGN of non-static method\n\tto cope with ptrmemfunc_vbit_in_pfn.\n\nIndex: gcc/cp/ChangeLog\n2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n\n\tPR 32617\n\t* decl.c (cxx_init_decl_processing): Don't set\n\tforce_align_functions_log.\n\t(grokfndecl): Honour ptrmemfunc_vbit_in_pfn.\n\t* typeck.c (cxx_alignof_expr): When alignof is used on a plain\n\tFUNCTION_DECL, return its alignment.\n\nFrom-SVN: r126529", "tree": {"sha": "4b25914785f1c180a9b1d207bac7c0dc0a43c6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b25914785f1c180a9b1d207bac7c0dc0a43c6bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55f0dee2ea7701b0ae5241d2f76eea602774a223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f0dee2ea7701b0ae5241d2f76eea602774a223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f0dee2ea7701b0ae5241d2f76eea602774a223"}], "stats": {"total": 244, "additions": 169, "deletions": 75}, "files": [{"sha": "8a29cb35de80ef2f4744e45d3f439529ce1c1c55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1,3 +1,32 @@\n+2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 32617\n+\t* c-common.c (c_alignof_expr): Look at DECL_ALIGN of\n+\tFUNCTION_DECLs.\n+\t(handle_aligned_attribute): Allow use on FUNCTION_DECLs.\n+\t* varasm.c (assemble_start_function): Honor DECL_ALIGN\n+\tfor FUNCTION_DECLs.  Don't use align_functions_log if\n+\tDECL_USER_ALIGN.\n+\t* print-tree.c (print_node): Print DECL_ALIGN and DECL_USER_ALIGN\n+\teven for FUNCTION_DECLs.\n+\t* c-decl.c (merge_decls): Propagate DECL_ALIGN even for\n+\tFUNCTION_DECLs.\n+\t* tree.h (DECL_ALIGN): Update for new location of 'align'.\n+\t(DECL_FUNCTION_CODE): Update for new location and name of\n+\t'function_code'.\n+\t(DECL_OFFSET_ALIGN): Update for new location of 'off_align'.\n+\t(struct tree_decl_common): Move 'align' and 'off_align' out\n+\tof union, ensure they're still on a 32-bit boundary.  Remove\n+\tother fields in union 'u1'.\n+\t(struct tree_function_decl): Add field 'function_code' replacing\n+\t'u1.f' in tree_decl_common.\n+\t* tree.c (build_decl_stat): Set initial value of DECL_ALIGN.\n+\t* doc/extend.texi (Function Attributes): Add 'aligned' attribute.\n+\t(Variable Attributes): Cross-reference 'aligned' attribute\n+\tto Function Attributes.\n+\t* flags.h (force_align_functions_log): Delete.\n+\t* toplev.c (force_align_functions_log): Delete.\n+\n 2007-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32708"}, {"sha": "b884be913f9b44a50083ccd4778566917b3f06f7", "filename": "gcc/c-common.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -3245,16 +3245,16 @@ c_sizeof_or_alignof_type (tree type, bool is_sizeof, int complain)\n }\n \n /* Implement the __alignof keyword: Return the minimum required\n-   alignment of EXPR, measured in bytes.  For VAR_DECL's and\n-   FIELD_DECL's return DECL_ALIGN (which can be set from an\n-   \"aligned\" __attribute__ specification).  */\n+   alignment of EXPR, measured in bytes.  For VAR_DECLs,\n+   FUNCTION_DECLs and FIELD_DECLs return DECL_ALIGN (which can be set\n+   from an \"aligned\" __attribute__ specification).  */\n \n tree\n c_alignof_expr (tree expr)\n {\n   tree t;\n \n-  if (TREE_CODE (expr) == VAR_DECL)\n+  if (VAR_OR_FUNCTION_DECL_P (expr))\n     t = size_int (DECL_ALIGN_UNIT (expr));\n \n   else if (TREE_CODE (expr) == COMPONENT_REF\n@@ -5206,12 +5206,24 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       TYPE_ALIGN (*type) = (1 << i) * BITS_PER_UNIT;\n       TYPE_USER_ALIGN (*type) = 1;\n     }\n-  else if (TREE_CODE (decl) != VAR_DECL\n+  else if (! VAR_OR_FUNCTION_DECL_P (decl)\n \t   && TREE_CODE (decl) != FIELD_DECL)\n     {\n       error (\"alignment may not be specified for %q+D\", decl);\n       *no_add_attrs = true;\n     }\n+  else if (TREE_CODE (decl) == FUNCTION_DECL\n+\t   && DECL_ALIGN (decl) > (1 << i) * BITS_PER_UNIT)\n+    {\n+      if (DECL_USER_ALIGN (decl))\n+\terror (\"alignment for %q+D was previously specified as %d \"\n+\t       \"and may not be decreased\", decl,\n+\t       DECL_ALIGN (decl) / BITS_PER_UNIT);\n+      else\n+\terror (\"alignment for %q+D must be at least %d\", decl,\n+\t       DECL_ALIGN (decl) / BITS_PER_UNIT);\n+      *no_add_attrs = true;\n+    }\n   else\n     {\n       DECL_ALIGN (decl) = (1 << i) * BITS_PER_UNIT;"}, {"sha": "82e7c7352aaae00a5a323042f574c05b0f2fa38a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1664,12 +1664,11 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n       DECL_SIZE (newdecl) = DECL_SIZE (olddecl);\n       DECL_SIZE_UNIT (newdecl) = DECL_SIZE_UNIT (olddecl);\n       DECL_MODE (newdecl) = DECL_MODE (olddecl);\n-      if (TREE_CODE (olddecl) != FUNCTION_DECL)\n-\tif (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n-\t  {\n-\t    DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n-\t    DECL_USER_ALIGN (newdecl) |= DECL_ALIGN (olddecl);\n-\t  }\n+      if (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n+\t{\n+\t  DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t  DECL_USER_ALIGN (newdecl) |= DECL_ALIGN (olddecl);\n+\t}\n     }\n \n "}, {"sha": "c9314be5c13497f4b7a01e2a1cff254464f58211", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1,3 +1,12 @@\n+2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 32617\n+\t* decl.c (cxx_init_decl_processing): Don't set\n+\tforce_align_functions_log.\n+\t(grokfndecl): Honour ptrmemfunc_vbit_in_pfn.\n+\t* typeck.c (cxx_alignof_expr): When alignof is used on a plain\n+\tFUNCTION_DECL, return its alignment.\n+\n 2007-07-09  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (start_preparsed_function): Do not promote return type."}, {"sha": "8b6684c2e308415ea6c4a5ddd9ae5ee958b51156", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -3182,12 +3182,6 @@ cxx_init_decl_processing (void)\n   if (flag_visibility_ms_compat)\n     default_visibility = VISIBILITY_HIDDEN;\n \n-  /* Force minimum function alignment if using the least significant\n-     bit of function pointers to store the virtual bit.  */\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && force_align_functions_log < 1)\n-    force_align_functions_log = 1;\n-\n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n \n@@ -6146,6 +6140,14 @@ grokfndecl (tree ctype,\n       break;\n     }\n \n+  /* If pointers to member functions use the least significant bit to\n+     indicate whether a function is virtual, ensure a pointer\n+     to this function will have that bit clear.  */\n+  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n+      && TREE_CODE (type) == METHOD_TYPE\n+      && DECL_ALIGN (decl) < 2 * BITS_PER_UNIT)\n+    DECL_ALIGN (decl) = 2 * BITS_PER_UNIT;\n+\n   if (friendp\n       && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n     {"}, {"sha": "3b8b914864e46525c5a4c89a44eaff5afe6b2034", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1361,7 +1361,10 @@ cxx_alignof_expr (tree e)\n     {\n       pedwarn (\"ISO C++ forbids applying %<__alignof%> to an expression of \"\n \t       \"function type\");\n-      t = size_one_node;\n+      if (TREE_CODE (e) == FUNCTION_DECL)\n+\tt = size_int (DECL_ALIGN_UNIT (e));\n+      else\n+\tt = size_one_node;\n     }\n   else if (type_unknown_p (e))\n     {"}, {"sha": "f6fbbfaebf2a746573d873af667b7176841b1335", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1605,18 +1605,19 @@ The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n-@code{alloc_size}, @code{noreturn}, @code{returns_twice}, @code{noinline},\n-@code{always_inline}, @code{flatten}, @code{pure}, @code{const},\n-@code{nothrow}, @code{sentinel}, @code{format}, @code{format_arg},\n+@code{aligned}, @code{alloc_size}, @code{noreturn},\n+@code{returns_twice}, @code{noinline}, @code{always_inline},\n+@code{flatten}, @code{pure}, @code{const}, @code{nothrow},\n+@code{sentinel}, @code{format}, @code{format_arg},\n @code{no_instrument_function}, @code{section}, @code{constructor},\n @code{destructor}, @code{used}, @code{unused}, @code{deprecated},\n @code{weak}, @code{malloc}, @code{alias}, @code{warn_unused_result},\n @code{nonnull}, @code{gnu_inline} and @code{externally_visible},\n @code{hot}, @code{cold}.\n-Several other attributes are defined for functions on particular target\n-systems.  Other attributes, including @code{section} are supported for\n-variables declarations (@pxref{Variable Attributes}) and for types (@pxref{Type\n-Attributes}).\n+Several other attributes are defined for functions on particular\n+target systems.  Other attributes, including @code{section} are\n+supported for variables declarations (@pxref{Variable Attributes}) and\n+for types (@pxref{Type Attributes}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -1645,6 +1646,27 @@ is not defined in the same translation unit.\n \n Not all target machines support this attribute.\n \n+@item aligned (@var{alignment})\n+@cindex @code{aligned} attribute\n+This attribute specifies a minimum alignment for the function,\n+measured in bytes.\n+\n+You cannot use this attribute to decrease the alignment of a function,\n+only to increase it.  However, when you explicitly specify a function\n+alignment this will override the effect of the\n+@option{-falign-functions} (@pxref{Optimize Options}) option for this\n+function.\n+\n+Note that the effectiveness of @code{aligned} attributes may be\n+limited by inherent limitations in your linker.  On many systems, the\n+linker is only able to arrange for functions to be aligned up to a\n+certain maximum alignment.  (For some linkers, the maximum supported\n+alignment may be very very small.)  See your linker documentation for\n+further information.\n+\n+The @code{aligned} attribute can also be used for variables and fields\n+(@pxref{Variable Attributes}.)\n+\n @item alloc_size\n @cindex @code{alloc_size} attribute\n The @code{alloc_size} attribute is used to tell the compiler that the\n@@ -3202,6 +3224,9 @@ up to a maximum of 8 byte alignment, then specifying @code{aligned(16)}\n in an @code{__attribute__} will still only provide you with 8 byte\n alignment.  See your linker documentation for further information.\n \n+The @code{aligned} attribute can also be used for functions \n+(@pxref{Function Attributes}.)\n+\n @item cleanup (@var{cleanup_function})\n @cindex @code{cleanup} attribute\n The @code{cleanup} attribute runs a function when the variable goes"}, {"sha": "7927523bb0936733ba748cc5e75adbdbbceb63f6", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -250,10 +250,6 @@ extern int align_labels_log;\n extern int align_labels_max_skip;\n extern int align_functions_log;\n \n-/* Like align_functions_log above, but used by front-ends to force the\n-   minimum function alignment.  Zero means no alignment is forced.  */\n-extern int force_align_functions_log;\n-\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n "}, {"sha": "f60c2bdd3a1476888c24f87640e981ce771cdd08", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1,3 +1,10 @@\n+2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 32617\n+\t* lang.c (java_init): Remove setting of force_align_functions_log.\n+\t* class.c (add_method_1): Set DECL_ALIGN of non-static method\n+\tto cope with ptrmemfunc_vbit_in_pfn.\n+\n 2007-07-03  David Daney  <ddaney@avtrex.com>\n \n \t* java/Make-lang.in (doc/gcj.info): Add $(gcc_docdir) to "}, {"sha": "bbfe4f26993400cc312636bb2380ccaa2dcb2972", "filename": "gcc/java/class.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -725,6 +725,14 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n   TREE_CHAIN (fndecl) = TYPE_METHODS (this_class);\n   TYPE_METHODS (this_class) = fndecl;\n \n+  /* If pointers to member functions use the least significant bit to\n+     indicate whether a function is virtual, ensure a pointer\n+     to this function will have that bit clear.  */\n+  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n+      && !(access_flags & ACC_STATIC)\n+      && DECL_ALIGN (fndecl) < 2 * BITS_PER_UNIT)\n+    DECL_ALIGN (fndecl) = 2 * BITS_PER_UNIT;\n+\n   /* Notice that this is a finalizer and update the class type\n      accordingly. This is used to optimize instance allocation. */\n   if (name == finalize_identifier_node"}, {"sha": "6a57cd2d3dfa54b37ed84e0a89d121f71c0d4b77", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -355,13 +355,6 @@ java_init (void)\n   if (!flag_indirect_dispatch)\n     flag_indirect_classes = false;\n \n-  /* Force minimum function alignment if g++ uses the least significant\n-     bit of function pointers to store the virtual bit. This is required\n-     to keep vtables compatible.  */\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && force_align_functions_log < 1)\n-    force_align_functions_log = 1;\n-\n   jcf_path_seal (v_flag);\n \n   java_init_decl_processing ();"}, {"sha": "daa2451097c0037088bc7dcf6594a2df8130e8f3", "filename": "gcc/print-tree.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -441,17 +441,15 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t      || DECL_INLINE (node) || DECL_BUILT_IN (node))\n \t    indent_to (file, indent + 3);\n \t  \n-\t  if (TREE_CODE (node) != FUNCTION_DECL)\n-\t    {\n-\t      if (DECL_USER_ALIGN (node))\n-\t\tfprintf (file, \" user\");\n-\t      \n-\t      fprintf (file, \" align %d\", DECL_ALIGN (node));\n-\t      if (TREE_CODE (node) == FIELD_DECL)\n-\t\tfprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t\t DECL_OFFSET_ALIGN (node));\n-\t    }\n-\t  else if (DECL_BUILT_IN (node))\n+\t  if (DECL_USER_ALIGN (node))\n+\t    fprintf (file, \" user\");\n+\t  \n+\t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n+\t  if (TREE_CODE (node) == FIELD_DECL)\n+\t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t     DECL_OFFSET_ALIGN (node));\n+\n+\t  if (TREE_CODE (node) == FUNCTION_DECL && DECL_BUILT_IN (node))\n \t    {\n \t      if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_MD)\n \t\tfprintf (file, \" built-in BUILT_IN_MD %d\", DECL_FUNCTION_CODE (node));"}, {"sha": "6463310b59cb3ae2e9849620fce11640dbc9de98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1,3 +1,8 @@\n+2007-07-09  Geoffrey Keating  <geoffk@apple.com>\n+\n+\tPR 32617\n+\t* gcc.c-torture/execute/align-3.c: New.\n+\n 2007-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32708"}, {"sha": "12bb1464711806ef98c7ac490b3ba0817c7bcaaa", "filename": "gcc/testsuite/gcc.c-torture/execute/align-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-3.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -0,0 +1,14 @@\n+void func(void) __attribute__((aligned(256)));\n+\n+void func(void) \n+{\n+}\n+\n+int main()\n+{\n+  if (((long)func & 0xFF) != 0)\n+    abort ();\n+  if (__alignof__(func) != 256)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "c421e56658aea864be09bf18b52f4869bdd18eea", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -357,10 +357,6 @@ int align_labels_log;\n int align_labels_max_skip;\n int align_functions_log;\n \n-/* Like align_functions_log above, but used by front-ends to force the\n-   minimum function alignment.  Zero means no alignment is forced.  */\n-int force_align_functions_log;\n-\n typedef struct\n {\n   const char *const string;"}, {"sha": "6359ff9cec5692c24277f51cd4959d890c833e1e", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -3312,7 +3312,10 @@ build_decl_stat (enum tree_code code, tree name, tree type MEM_STAT_DECL)\n   if (code == VAR_DECL || code == PARM_DECL || code == RESULT_DECL)\n     layout_decl (t, 0);\n   else if (code == FUNCTION_DECL)\n-    DECL_MODE (t) = FUNCTION_MODE;\n+    {\n+      DECL_MODE (t) = FUNCTION_MODE;\n+      DECL_ALIGN (t) = FUNCTION_BOUNDARY;\n+    }\n \n   return t;\n }"}, {"sha": "318980c375508ca0aeebca4be0a7cf1855e12347", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -2586,7 +2586,7 @@ struct tree_memory_partition_tag GTY(())\n /* Likewise for the size in bytes.  */\n #define DECL_SIZE_UNIT(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size_unit)\n /* Holds the alignment required for the datum, in bits.  */\n-#define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.u1.a.align)\n+#define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)\n /* The alignment of NODE, in bytes.  */\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)\n /* For FIELD_DECLs, off_align holds the number of low-order bits of\n@@ -2603,7 +2603,8 @@ struct tree_memory_partition_tag GTY(())\n    operation it is.  Note, however, that this field is overloaded, with\n    DECL_BUILT_IN_CLASS as the discriminant, so the latter must always be\n    checked before any access to the former.  */\n-#define DECL_FUNCTION_CODE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl_common.u1.f)\n+#define DECL_FUNCTION_CODE(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.function_code)\n #define DECL_DEBUG_EXPR_IS_FROM(NODE) \\\n   (DECL_COMMON_CHECK (NODE)->decl_common.debug_expr_is_from)\n \n@@ -2735,21 +2736,12 @@ struct tree_decl_common GTY(())\n   unsigned gimple_reg_flag : 1;\n   /* In a DECL with pointer type, set if no TBAA should be done.  */\n   unsigned no_tbaa_flag : 1;\n+  /* Padding so that 'align' can be on a 32-bit boundary.  */\n+  unsigned decl_common_unused : 2;\n \n-  union tree_decl_u1 {\n-    /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n-       DECL_FUNCTION_CODE.  */\n-    enum built_in_function f;\n-    /* In a FUNCTION_DECL for which DECL_BUILT_IN does not hold, this\n-       is used by language-dependent code.  */\n-    HOST_WIDE_INT i;\n-    /* DECL_ALIGN and DECL_OFFSET_ALIGN.  (These are not used for\n-       FUNCTION_DECLs).  */\n-    struct tree_decl_u1_a {\n-      unsigned int align : 24;\n-      unsigned int off_align : 8;\n-    } a;\n-  } GTY ((skip)) u1;\n+  unsigned int align : 24;\n+  /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n+  unsigned int off_align : 8;\n \n   tree size_unit;\n   tree initial;\n@@ -2834,11 +2826,11 @@ struct tree_decl_with_rtl GTY(())\n    DECL_OFFSET_ALIGN thus returns the alignment that DECL_FIELD_OFFSET\n    has.  */\n #define DECL_OFFSET_ALIGN(NODE) \\\n-  (((unsigned HOST_WIDE_INT)1) << FIELD_DECL_CHECK (NODE)->decl_common.u1.a.off_align)\n+  (((unsigned HOST_WIDE_INT)1) << FIELD_DECL_CHECK (NODE)->decl_common.off_align)\n \n /* Specify that DECL_ALIGN(NODE) is a multiple of X.  */\n #define SET_DECL_OFFSET_ALIGN(NODE, X) \\\n-  (FIELD_DECL_CHECK (NODE)->decl_common.u1.a.off_align = exact_log2 ((X) & -(X)))\n+  (FIELD_DECL_CHECK (NODE)->decl_common.off_align = exact_log2 ((X) & -(X)))\n /* 1 if the alignment for this type was requested by \"aligned\" attribute,\n    0 if it is the default for this type.  */\n \n@@ -3277,6 +3269,10 @@ struct tree_function_decl GTY(())\n {\n   struct tree_decl_non_common common;\n \n+  /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is\n+     DECL_FUNCTION_CODE.  Otherwise unused.  */\n+  enum built_in_function function_code;\n+\n   unsigned static_ctor_flag : 1;\n   unsigned static_dtor_flag : 1;\n   unsigned uninlinable : 1;"}, {"sha": "854a80df3c64273834fa3d1b18e2a623714cb858", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=837edd5f118f0c094fa52e5cb9ca2a299a5b1d5c", "patch": "@@ -1679,18 +1679,17 @@ assemble_start_function (tree decl, const char *fnname)\n     ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_label);\n \n   /* Tell assembler to move to target machine's alignment for functions.  */\n-  align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-  if (align < force_align_functions_log)\n-    align = force_align_functions_log;\n+  align = floor_log2 (DECL_ALIGN (decl) / BITS_PER_UNIT);\n   if (align > 0)\n     {\n       ASM_OUTPUT_ALIGN (asm_out_file, align);\n     }\n \n   /* Handle a user-specified function alignment.\n-     Note that we still need to align to FUNCTION_BOUNDARY, as above,\n+     Note that we still need to align to DECL_ALIGN, as above,\n      because ASM_OUTPUT_MAX_SKIP_ALIGN might not do any alignment at all.  */\n-  if (align_functions_log > align\n+  if (! DECL_USER_ALIGN (decl)\n+      && align_functions_log > align\n       && cfun->function_frequency != FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n     {\n #ifdef ASM_OUTPUT_MAX_SKIP_ALIGN"}]}