{"sha": "8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyODZkZDExOGE1YmQxNmY3YWUwZmI5ZGZjZGNmZDAyMGJlYTgwMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-14T15:25:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-14T16:05:02Z"}, "message": "x86: Default CET run-time support to auto\n\nCET has been added since GCC 8.  This patch defaults CET run-time support\nto auto.  It enables CET run-time support if asssembler supports CET\ninstructions and multi-byte NOPs are enabled via SSE2.\n\nconfig/\n\n\t* cet.m4 (GCC_CET_FLAGS): Change default to auto.\n\ngcc/\n\n\t* configure: Regenerated.\n\nlibatomic/\n\n\t* configure: Regenerated.\n\nlibbacktrace/\n\n\t* configure: Regenerated.\n\nlibcc1/\n\n\t* configure: Regenerated.\n\nlibcpp/\n\n\t* configure: Regenerated.\n\nlibdecnumber/\n\n\t* configure: Regenerated.\n\nlibgcc/\n\n\t* configure: Regenerated.\n\nlibgfortran/\n\n\t* configure: Regenerated.\n\nlibgomp/\n\n\t* configure: Regenerated.\n\nlibitm/\n\n\t* configure: Regenerated.\n\nlibobjc/\n\n\t* configure: Regenerated.\n\nlibquadmath/\n\n\t* configure: Regenerated.\n\nlibsanitizer/\n\n\t* configure: Regenerated.\n\nlibssp/\n\n\t* configure: Regenerated.\n\nlibstdc++-v3/\n\n\t* configure: Regenerated.\n\nlibvtv/\n\n\t* configure: Regenerated.\n\nzlib/\n\n\t* configure: Regenerated.", "tree": {"sha": "ab2ce2b5fbec75efcf5ac324b2499c81cb95210c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2ce2b5fbec75efcf5ac324b2499c81cb95210c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4036327e4cab5c9a0235bb784b02d5a06a614065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4036327e4cab5c9a0235bb784b02d5a06a614065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4036327e4cab5c9a0235bb784b02d5a06a614065"}], "stats": {"total": 325, "additions": 274, "deletions": 51}, "files": [{"sha": "d36c5bb497623ecdf488af172fded068a80258d5", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* cet.m4 (GCC_CET_FLAGS): Change default to auto.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94998"}, {"sha": "63c6ea9ee02d3a35295c618d2db87cff01d13656", "filename": "config/cet.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -3,7 +3,7 @@ dnl GCC_CET_FLAGS\n dnl    (SHELL-CODE_HANDLER)\n dnl\n AC_DEFUN([GCC_CET_FLAGS],[dnl\n-GCC_ENABLE(cet, no, ,[enable Intel CET in target libraries],\n+GCC_ENABLE(cet, auto, ,[enable Intel CET in target libraries],\n \t   permit yes|no|auto)\n AC_MSG_CHECKING([for CET support])\n "}, {"sha": "97e48e49cc8e34554d38cf5123398095906f5421", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-14  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* config/arm/arm.c (reg_needs_saving_p): New function."}, {"sha": "8f0f67494fe22a8cd69abfb39cee407ff775e1e1", "filename": "gcc/configure", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -30839,7 +30839,8 @@ rm -f core conftest.err conftest.$ac_objext \\\n fi\n \n if test x$may_have_cet = xyes; then\n-  if test \"$cross_compiling\" = yes; then :\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -30884,9 +30885,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\""}, {"sha": "38d5ef3dabbef13f2b06d1bdb0bc47ceaf253778", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/fenv.c (__math_force_eval): Remove."}, {"sha": "c4b4714abc00defb11542cbdc82e65bfa8e46e0f", "filename": "libatomic/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1455,7 +1455,7 @@ Optional Features:\n                           sometimes confusing) to the casual installer\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -15582,7 +15582,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "81fa56e5ba5b5de6061c1edde7101fdea601484a", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-13  Ian Lance Taylor  <iant@golang.org>\n \n \t* ztest.c (test_large): Mark state ATTRIBUTE_UNUSED."}, {"sha": "95d06c60be11b23c989140ace8a0424dcc7c2f16", "filename": "libbacktrace/configure", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libbacktrace%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libbacktrace%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1436,7 +1436,7 @@ Optional Features:\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --disable-largefile     omit support for large files\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-host-shared    build host code as shared libraries\n   --enable-cet            enable Intel CET in host libraries [default=auto]\n \n@@ -12156,7 +12156,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n \n@@ -12486,7 +12486,8 @@ rm -f core conftest.err conftest.$ac_objext \\\n fi\n \n if test x$may_have_cet = xyes; then\n-  if test \"$cross_compiling\" = yes; then :\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -12531,9 +12532,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\""}, {"sha": "24d324629e9588220b2e75330bd2d965b7622ada", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.am (AM_CXXFLAGS): Add $(CET_HOST_FLAGS)."}, {"sha": "5e790db36b0a1e5448b9b15a7497d2bcf04a7780", "filename": "libcc1/configure", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcc1%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcc1%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -14619,10 +14619,35 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n-  if test \"$cross_compiling\" = yes; then :\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -14667,10 +14692,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\"\n@@ -14680,6 +14709,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n \n "}, {"sha": "a802408eb5704c5e74db4183e0fc31e2a998fb87", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-13  Jason Merrill  <jason@redhat.com>\n \n \t* include/cpplib.h (enum c_lang): Change CXX2A to CXX20."}, {"sha": "7f02d6b4a9ee39166d58426b5d0a3287123a7545", "filename": "libcpp/configure", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -7525,10 +7525,35 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n-  if test \"$cross_compiling\" = yes; then :\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -7573,10 +7598,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\"\n@@ -7586,6 +7615,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n case x$enable_languages in\n *jit*)"}, {"sha": "75627e4825d0914ea2bb33308fca8c47cfd52022", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (CET_HOST_FLAGS): New."}, {"sha": "c2c8040f5f3cab97b50c59ee903f634960211ecf", "filename": "libdecnumber/configure", "status": "modified", "additions": 83, "deletions": 6, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1904,6 +1904,52 @@ rm -f conftest.val\n   as_fn_set_status $ac_retval\n \n } # ac_fn_c_compute_int\n+\n+# ac_fn_c_try_link LINENO\n+# -----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_c_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_c_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_try_link\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -5132,10 +5178,35 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n-  if test \"$cross_compiling\" = yes; then :\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  if test x$cross_compiling = xno; then\n+    if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error $? \"cannot run test program while cross compiling\n@@ -5180,10 +5251,14 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n-  if test x$enable_cet = xno -a x$have_cet = xyes; then\n-    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    if test x$enable_cet = xno -a x$have_cet = xyes; then\n+      as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+    fi\n   fi\n+else\n+  # Enable CET in cross compiler if possible so that it will run on both\n+  # CET and non-CET hosts.\n+  have_cet=yes\n fi\n if test x$enable_cet = xyes; then\n   CET_HOST_FLAGS=\"-fcf-protection\"\n@@ -5193,6 +5268,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n case x$enable_languages in\n *jit*)"}, {"sha": "b0a432f32363a2d2c8fa3e1473d0fcf3a9b46c1a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config.host: Remove support for crisv32-*-* and cris*-*-linux."}, {"sha": "a5d5ab84607ab64b6fd5ae1dba5b15a4ab5f4d6b", "filename": "libgcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1353,7 +1353,7 @@ Optional Features:\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-explicit-exception-frame-registration\n                           register exception tables explicitly at module\n                           start, for use e.g. for compatibility with\n@@ -4900,7 +4900,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "1cbdaf393fb33eb69cb6e1ab71877ac09fa0315c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/fpu-387.h (__math_force_eval): Remove."}, {"sha": "3c8be061ede44a12ba6be80ad62e9f90be5f4f6f", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1466,7 +1466,7 @@ Optional Features:\n                           do not reject slow dependency extractors\n   --disable-dependency-tracking\n                           speeds up one-time build\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --disable-symvers       disable symbol versioning for libgfortran\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n@@ -6001,7 +6001,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "8a66266d7c6fd50e661777093ab6cf6bfe7ec4fc", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/target-40.c: New test."}, {"sha": "4a0e1498415f44407f6e265bf3db12f79fe0bbc9", "filename": "libgomp/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1501,7 +1501,7 @@ Optional Features:\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -16740,7 +16740,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "3c384113d0797c1c42f2a7f4e641491fbccf04ef", "filename": "libitm/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-12  Nathan Sidwell  <nathan@acm.org>\n \n \tFix throw specifiers on interface."}, {"sha": "2c451fb0a981ebabb31602ae8dc522cefc775c4e", "filename": "libitm/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1468,7 +1468,7 @@ Optional Features:\n   --enable-tls            Use thread-local storage [default=yes]\n   --enable-symvers=STYLE  enables symbol versioning of the shared library\n                           [default=yes]\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -17877,7 +17877,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "accabfbd37926236ed3e3b86f490a5b514058dc7", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libstdc++/79193"}, {"sha": "018c9db76e8128d838b28e4a1cfcac358c24b317", "filename": "libobjc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1383,7 +1383,7 @@ Optional Features:\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory\n   --enable-multilib       build many library versions (default)\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n@@ -3453,7 +3453,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "fbb548e8b048dba2f168b351f666d50c17b9584c", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libstdc++/79193"}, {"sha": "d995a2cfd25f89f0f415175ca8fafb10827bbbf7", "filename": "libquadmath/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1439,7 +1439,7 @@ Optional Features:\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n   --disable-symvers       disable symbol versioning for libquadmath\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-generated-files-in-srcdir\n                           put copies of generated files in source dir intended\n                           for creating source tarballs for users without\n@@ -13026,7 +13026,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "7bb6269e65062a54056884fa1081bd2846ad6440", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-01  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* configure.tgt: Add x86_64- and i?86-*-freebsd* targets."}, {"sha": "8d1aa6db492c9248fd0ec8c77779cce520732af5", "filename": "libsanitizer/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1466,7 +1466,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -16849,7 +16849,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "43fe3fe35fedffd43a52262b0fb71a195622d125", "filename": "libssp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libstdc++/79193"}, {"sha": "7e54b16bfafe974b3eb34555038e6861e07c384f", "filename": "libssp/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libssp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libssp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1419,7 +1419,7 @@ Optional Features:\n                           do not reject slow dependency extractors\n   --disable-dependency-tracking\n                           speeds up one-time build\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --disable-symvers       disable symbol versioning for libssp\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n@@ -4325,7 +4325,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "a6f5d6f09de1b5c3bdea6fc4cbcd973336ad7112", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-13  Alexandre Oliva <oliva@adacore.com>\n \n \tPR libstdc++/77691"}, {"sha": "24cc51c8befc7a8de467c628af2377ba2a8ca8b3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1643,7 +1643,7 @@ Optional Features:\n                           enable C++11 threads support [default=auto]\n   --enable-libstdcxx-filesystem-ts\n                           turns on ISO/IEC TS 18822 support [default=auto]\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -77475,7 +77475,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "96c417c4042c59b13b8d3fd1426bd3aee3e24c55", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-01-24  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure.ac: Handle `--with-toolexeclibdir='."}, {"sha": "9d42cb88fb2035db2f871dc201148ea0ecf2975a", "filename": "libvtv/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libvtv%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/libvtv%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1446,7 +1446,7 @@ Optional Features:\n   --enable-fast-install[=PKGS]\n                           optimize for fast installation [default=yes]\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -15667,7 +15667,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}, {"sha": "1057533823bc02c2a41c6b282d24ca6fe5656560", "filename": "zlib/ChangeLog.gcj", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/zlib%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/zlib%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog.gcj?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure: Regenerated.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.am (AM_CFLAGS): New."}, {"sha": "65005f131dc9b1d238e2ff5c0d9cefbfa35f40fc", "filename": "zlib/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803", "patch": "@@ -1413,7 +1413,7 @@ Optional Features:\n                           do not reject slow dependency extractors\n   --disable-dependency-tracking\n                           speeds up one-time build\n-  --enable-cet            enable Intel CET in target libraries [default=no]\n+  --enable-cet            enable Intel CET in target libraries [default=auto]\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n   --enable-fast-install[=PKGS]\n@@ -4156,7 +4156,7 @@ if test \"${enable_cet+set}\" = set; then :\n                           esac\n \n else\n-  enable_cet=no\n+  enable_cet=auto\n fi\n \n "}]}