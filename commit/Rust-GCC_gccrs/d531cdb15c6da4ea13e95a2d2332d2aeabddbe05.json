{"sha": "d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUzMWNkYjE1YzZkYTRlYTEzZTk1YTJkMjMzMmQyYWVhYmRkYmUwNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-04T03:44:24Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-04T03:44:24Z"}, "message": "inclhack.def (solaris_math_5, [...]): Delete fixes.\n\n\t* inclhack.def (solaris_math_5, solaris_math_6, solaris_math_7):\n\tDelete fixes.\n\t* tests/base/iso/math_c99.h: Delete associated test baselines.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r127198", "tree": {"sha": "4a128e69117b5a32dca739d96076f748a37e0e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a128e69117b5a32dca739d96076f748a37e0e79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/comments", "author": null, "committer": null, "parents": [{"sha": "f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87000d0c4f42ac54d913c7c3d6acf53bc6302cb"}], "stats": {"total": 295, "additions": 17, "deletions": 278}, "files": [{"sha": "44a2c1176744ffbf9014cc6d2fe31d56129b66d1", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "patch": "@@ -1,3 +1,10 @@\n+2007-08-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* inclhack.def (solaris_math_5, solaris_math_6, solaris_math_7):\n+\tDelete fixes.\n+\t* tests/base/iso/math_c99.h: Delete associated test baselines.\n+\t* fixincl.x: Regenerate.\n+\n 2007-07-24  Krister Walfridsson  <cato@df.lth.se>\n \n \tPR target/30058"}, {"sha": "93f2ae087259be6d3a9d7c4d89978b9c11bef9a5", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 10, "deletions": 177, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Wednesday July 25, 2007 at 12:50:31 PM CEST\n+ * It has been AutoGen-ed  Friday August  3, 2007 at 09:50:46 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Jul 25 12:50:31 CEST 2007\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Fri Aug  3 21:50:46 EDT 2007\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 211 fixup descriptions.\n+ * This file contains 208 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -26,19 +26,18 @@\n  *  \n  *  You may redistribute it and/or modify it under the terms of the\n  *  GNU General Public License, as published by the Free Software\n- *  Foundation; either version 2 of the License, or (at your option)\n- *  any later version.\n+ *  Foundation; either version 2, or (at your option) any later version.\n  *  \n  *  inclhack is distributed in the hope that it will be useful,\n  *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  *  See the GNU General Public License for more details.\n  *  \n  *  You should have received a copy of the GNU General Public License\n- *  along with inclhack.  If not, write to:\n- *  \tThe Free Software Foundation, Inc.,\n- *  \t51 Franklin Street, Fifth Floor\n- *  \tBoston, MA  02110-1301, USA.\n+ *  along with inclhack.  See the file \"COPYING\".  If not,\n+ *  write to:  The Free Software Foundation, Inc.,\n+ *             59 Temple Place - Suite 330,\n+ *             Boston,  MA  02111-1307, USA.\n  */\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -5684,154 +5683,6 @@ static const char* apzSolaris_Math_4Patch[] = {\n     \"^#define[ \\t]+fpclassify\\\\(x\\\\)[ \\t]+__builtin_fpclassify\\\\(x\\\\)\",\n     (char*)NULL };\n \n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Math_5 fix\n- */\n-tSCC zSolaris_Math_5Name[] =\n-     \"solaris_math_5\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Math_5List[] =\n-  \"iso/math_c99.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-#define apzSolaris_Math_5Machs (const char**)NULL\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Math_5Select0[] =\n-       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSolaris_Math_5Bypass0[] =\n-       \"__GNUC__\";\n-\n-#define    SOLARIS_MATH_5_TEST_CT  2\n-static tTestDesc aSolaris_Math_5Tests[] = {\n-  { TT_NEGREP,   zSolaris_Math_5Bypass0, (regex_t*)NULL },\n-  { TT_EGREP,    zSolaris_Math_5Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Math_5\n- */\n-static const char* apzSolaris_Math_5Patch[] = {\n-    \"format\",\n-    \"#define\\tisfinite(x) \\\\\\n\\\n-  __extension__ ({ const __typeof (x) __x_f = (x); \\\\\\n\\\n-\\t\\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\\\\n\\\n-\\t\\t\\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\\\\n\\\n-\\t\\t\\t  : sizeof(__x_f) == sizeof(long double) \\\\\\n\\\n-\\t\\t\\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\\\\n\\\n-\\t\\t\\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\",\n-    \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Math_6 fix\n- */\n-tSCC zSolaris_Math_6Name[] =\n-     \"solaris_math_6\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Math_6List[] =\n-  \"iso/math_c99.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-#define apzSolaris_Math_6Machs (const char**)NULL\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Math_6Select0[] =\n-       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSolaris_Math_6Bypass0[] =\n-       \"__GNUC__\";\n-\n-#define    SOLARIS_MATH_6_TEST_CT  2\n-static tTestDesc aSolaris_Math_6Tests[] = {\n-  { TT_NEGREP,   zSolaris_Math_6Bypass0, (regex_t*)NULL },\n-  { TT_EGREP,    zSolaris_Math_6Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Math_6\n- */\n-static const char* apzSolaris_Math_6Patch[] = {\n-    \"format\",\n-    \"#define\\tisinf(x) \\\\\\n\\\n-  __extension__ ({ const __typeof (x) __x_i = (x); \\\\\\n\\\n-\\t\\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\\\\n\\\n-\\t\\t\\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\\\\n\\\n-\\t\\t\\t  : sizeof(__x_i) == sizeof(long double) \\\\\\n\\\n-\\t\\t\\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\\\\n\\\n-\\t\\t\\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\",\n-    \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\",\n-    (char*)NULL };\n-\n-/* * * * * * * * * * * * * * * * * * * * * * * * * *\n- *\n- *  Description of Solaris_Math_7 fix\n- */\n-tSCC zSolaris_Math_7Name[] =\n-     \"solaris_math_7\";\n-\n-/*\n- *  File name selection pattern\n- */\n-tSCC zSolaris_Math_7List[] =\n-  \"iso/math_c99.h\\0\";\n-/*\n- *  Machine/OS name selection pattern\n- */\n-#define apzSolaris_Math_7Machs (const char**)NULL\n-\n-/*\n- *  content selection pattern - do fix if pattern found\n- */\n-tSCC zSolaris_Math_7Select0[] =\n-       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-\n-/*\n- *  content bypass pattern - skip fix if pattern found\n- */\n-tSCC zSolaris_Math_7Bypass0[] =\n-       \"__GNUC__\";\n-\n-#define    SOLARIS_MATH_7_TEST_CT  2\n-static tTestDesc aSolaris_Math_7Tests[] = {\n-  { TT_NEGREP,   zSolaris_Math_7Bypass0, (regex_t*)NULL },\n-  { TT_EGREP,    zSolaris_Math_7Select0, (regex_t*)NULL }, };\n-\n-/*\n- *  Fix Command Arguments for Solaris_Math_7\n- */\n-static const char* apzSolaris_Math_7Patch[] = {\n-    \"format\",\n-    \"#define\\tisnormal(x) \\\\\\n\\\n-  __extension__ ({ const __typeof(x) __x_n = (x); \\\\\\n\\\n-\\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\\\n-\\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\\\n-\\t\\t\\t\\t\\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\\\\n\\\n-\\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\\\n-\\t\\t\\t\\t\\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\\\\n\\\n-\\t\\t\\t\\t\\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\",\n-    \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\",\n-    (char*)NULL };\n-\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Math_8 fix\n@@ -8605,9 +8456,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          256\n+#define REGEX_COUNT          250\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            211\n+#define FIX_COUNT            208\n \n /*\n  *  Enumerate the fixes\n@@ -8751,9 +8602,6 @@ typedef enum {\n     SOLARIS_MATH_2_FIXIDX,\n     SOLARIS_MATH_3_FIXIDX,\n     SOLARIS_MATH_4_FIXIDX,\n-    SOLARIS_MATH_5_FIXIDX,\n-    SOLARIS_MATH_6_FIXIDX,\n-    SOLARIS_MATH_7_FIXIDX,\n     SOLARIS_MATH_8_FIXIDX,\n     SOLARIS_MATH_9_FIXIDX,\n     SOLARIS_MUTEX_INIT_1_FIXIDX,\n@@ -9517,21 +9365,6 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_MATH_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Math_4Tests,   apzSolaris_Math_4Patch, 0 },\n \n-  {  zSolaris_Math_5Name,    zSolaris_Math_5List,\n-     apzSolaris_Math_5Machs,\n-     SOLARIS_MATH_5_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Math_5Tests,   apzSolaris_Math_5Patch, 0 },\n-\n-  {  zSolaris_Math_6Name,    zSolaris_Math_6List,\n-     apzSolaris_Math_6Machs,\n-     SOLARIS_MATH_6_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Math_6Tests,   apzSolaris_Math_6Patch, 0 },\n-\n-  {  zSolaris_Math_7Name,    zSolaris_Math_7List,\n-     apzSolaris_Math_7Machs,\n-     SOLARIS_MATH_7_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n-     aSolaris_Math_7Tests,   apzSolaris_Math_7Patch, 0 },\n-\n   {  zSolaris_Math_8Name,    zSolaris_Math_8List,\n      apzSolaris_Math_8Machs,\n      SOLARIS_MATH_8_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "fde081652fe263e85eb94324d5b45327f414e8b6", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "patch": "@@ -3124,67 +3124,6 @@ fix = {\n     \"#define\tfpclassify(x)\t__builtin_fpclassify(x)\";\n };\n \n-fix = {\n-    hackname = solaris_math_5;\n-    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    bypass = \"__GNUC__\";\n-    files = iso/math_c99.h;\n-    c_fix = format;\n-    c_fix_arg = \"#define\\tisfinite(x) \\\\\\n\"\n-                \"  __extension__ ({ const __typeof (x) __x_f = (x); \\\\\\n\"\n-                \"\\t\\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\\\\n\"\n-                \"\\t\\t\\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\\\\n\"\n-                \"\\t\\t\\t  : sizeof(__x_f) == sizeof(long double) \\\\\\n\"\n-                \"\\t\\t\\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\\\\n\"\n-                \"\\t\\t\\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\";\n-    c_fix_arg = \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\";\n-    test_text =\n-    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n-    \"#undef\tisfinite\\n\"\n-    \"#define\tisfinite(x)\t__builtin_isfinite(x)\";\n-};\n-\n-fix = {\n-    hackname = solaris_math_6;\n-    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    bypass = \"__GNUC__\";\n-    files = iso/math_c99.h;\n-    c_fix = format;\n-    c_fix_arg = \"#define\\tisinf(x) \\\\\\n\"\n-                \"  __extension__ ({ const __typeof (x) __x_i = (x); \\\\\\n\"\n-                \"\\t\\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\\\\n\"\n-                \"\\t\\t\\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\\\\n\"\n-                \"\\t\\t\\t  : sizeof(__x_i) == sizeof(long double) \\\\\\n\"\n-                \"\\t\\t\\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\\\\n\"\n-                \"\\t\\t\\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\";\n-    c_fix_arg = \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\";\n-    test_text =\n-    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n-    \"#undef\tisinf\\n\"\n-    \"#define\tisinf(x)\t__builtin_isinf(x)\";\n-};\n-\n-fix = {\n-    hackname = solaris_math_7;\n-    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n-    bypass = \"__GNUC__\";\n-    files = iso/math_c99.h;\n-    c_fix = format;\n-    c_fix_arg = \"#define\\tisnormal(x) \\\\\\n\"\n-                \"  __extension__ ({ const __typeof(x) __x_n = (x); \\\\\\n\"\n-                \"\\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\"\n-                \"\\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\\\\n\"\n-                \"\\t\\t\\t\\t\\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\";\n-    c_fix_arg = \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\";\n-    test_text =\n-    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n-    \"#undef\tisnormal\\n\"\n-    \"#define\tisnormal(x)\t__builtin_isnormal(x)\";\n-};\n-\n fix = {\n     hackname = solaris_math_8;\n     select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";"}, {"sha": "e87ca8742762b70dcef929cae3cb979c41fab75b", "filename": "fixincludes/tests/base/iso/math_c99.h", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d531cdb15c6da4ea13e95a2d2332d2aeabddbe05/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h?ref=d531cdb15c6da4ea13e95a2d2332d2aeabddbe05", "patch": "@@ -51,46 +51,6 @@\n #endif  /* SOLARIS_MATH_4_CHECK */\n \n \n-#if defined( SOLARIS_MATH_5_CHECK )\n-#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n-#undef\tisfinite\n-#define\tisfinite(x) \\\n-  __extension__ ({ const __typeof (x) __x_f = (x); \\\n-\t\t    __builtin_expect(sizeof(__x_f) == sizeof(float) \\\n-\t\t\t  ? islessequal(__builtin_fabsf(__x_f),__FLT_MAX__) \\\n-\t\t\t  : sizeof(__x_f) == sizeof(long double) \\\n-\t\t\t    ? islessequal(__builtin_fabsl(__x_f),__LDBL_MAX__) \\\n-\t\t\t    : islessequal(__builtin_fabs(__x_f),__DBL_MAX__), 1); })\n-#endif  /* SOLARIS_MATH_5_CHECK */\n-\n-\n-#if defined( SOLARIS_MATH_6_CHECK )\n-#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n-#undef\tisinf\n-#define\tisinf(x) \\\n-  __extension__ ({ const __typeof (x) __x_i = (x); \\\n-\t\t    __builtin_expect(sizeof(__x_i) == sizeof(float) \\\n-\t\t\t  ? isgreater(__builtin_fabsf(__x_i),__FLT_MAX__) \\\n-\t\t\t  : sizeof(__x_i) == sizeof(long double) \\\n-\t\t\t    ? isgreater(__builtin_fabsl(__x_i),__LDBL_MAX__) \\\n-\t\t\t    : isgreater(__builtin_fabs(__x_i),__DBL_MAX__), 0); })\n-#endif  /* SOLARIS_MATH_6_CHECK */\n-\n-\n-#if defined( SOLARIS_MATH_7_CHECK )\n-#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n-#undef\tisnormal\n-#define\tisnormal(x) \\\n-  __extension__ ({ const __typeof(x) __x_n = (x); \\\n-\t\t   __builtin_expect(isfinite(__x_n) \\\n-\t\t\t\t    && (sizeof(__x_n) == sizeof(float) \\\n-\t\t\t\t\t  ? isgreaterequal(__builtin_fabsf(__x_n),__FLT_MIN__) \\\n-\t\t\t\t\t  : sizeof(__x_n) == sizeof(long double) \\\n-\t\t\t\t\t    ? isgreaterequal(__builtin_fabsl(__x_n),__LDBL_MIN__) \\\n-\t\t\t\t\t    : isgreaterequal(__builtin_fabs(__x_n),__DBL_MIN__)), 1); })\n-#endif  /* SOLARIS_MATH_7_CHECK */\n-\n-\n #if defined( SOLARIS_MATH_8_CHECK )\n #ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n #undef\tsignbit"}]}