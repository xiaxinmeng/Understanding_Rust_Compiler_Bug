{"sha": "0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4MmE0Yjg3MmFhMGY4YzBkM2VjOGY4Y2Y2NmFlYWYwYmU5NzM4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-05-11T19:25:36Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-05-11T19:25:36Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r9623", "tree": {"sha": "d96b57b759e9164245a2d7d04c69def51160876f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96b57b759e9164245a2d7d04c69def51160876f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380/comments", "author": null, "committer": null, "parents": [{"sha": "f5acdcc1786fd73accb1d303a724793d440a1434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5acdcc1786fd73accb1d303a724793d440a1434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5acdcc1786fd73accb1d303a724793d440a1434"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "644807d0b43b083054c3915253a795464f91792d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0982a4b872aa0f8c0d3ec8f8cf66aeaf0be97380", "patch": "@@ -1741,7 +1741,8 @@ operand_equal_for_comparison_p (arg0, arg1, other)\n   if (operand_equal_p (arg0, arg1, 0))\n     return 1;\n \n-  if (! INTEGRAL_TYPE_P (TREE_TYPE (arg0)))\n+  if (! INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n+      || ! INTEGRAL_TYPE_P (TREE_TYPE (arg1)))\n     return 0;\n \n   /* Duplicate what shorten_compare does to ARG1 and see if that gives the\n@@ -5053,16 +5054,29 @@ fold (expr)\n \ttree arg00 = TREE_OPERAND (arg0, 0);\n \ttree arg01;\n \n-\tif (kind0 == '1')\n+\tif (kind0 == '1' || code0 == TRUTH_NOT_EXPR)\n \t  return fold (build1 (code0, type, \n \t\t\t       fold (build1 (CLEANUP_POINT_EXPR,\n \t\t\t\t\t     TREE_TYPE (arg00), arg00))));\n-\tif ((kind0 == '<' || kind0 == '2')\n-\t    && ! TREE_SIDE_EFFECTS (arg01 = TREE_OPERAND (arg0, 1)))\n-\t  return fold (build (code0, type,\n-\t\t\t      fold (build1 (CLEANUP_POINT_EXPR,\n-\t\t\t\t\t    TREE_TYPE (arg00), arg00)),\n-\t\t\t      arg01));\n+\n+\tif (kind0 == '<' || kind0 == '2'\n+\t    || code0 == TRUTH_ANDIF_EXPR || code0 == TRUTH_ORIF_EXPR\n+\t    || code0 == TRUTH_AND_EXPR   || code0 == TRUTH_OR_EXPR\n+\t    || code0 == TRUTH_XOR_EXPR)\n+\t  {\n+\t    arg01 = TREE_OPERAND (arg0, 1);\n+\n+\t    if (! TREE_SIDE_EFFECTS (arg00))\n+\t      return fold (build (code0, type, arg00,\n+\t\t\t\t  fold (build1 (CLEANUP_POINT_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (arg01), arg01))));\n+\n+\t    if (! TREE_SIDE_EFFECTS (arg01))\n+\t      return fold (build (code0, type,\n+\t\t\t\t  fold (build1 (CLEANUP_POINT_EXPR,\n+\t\t\t\t\t\tTREE_TYPE (arg00), arg00)),\n+\t\t\t\t  arg01));\n+\t  }\n \n \treturn t;\n       }"}]}