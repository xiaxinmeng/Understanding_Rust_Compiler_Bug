{"sha": "bfb0586ebdb696efa9e59cb8da1d977c5880653b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiMDU4NmViZGI2OTZlZmE5ZTU5Y2I4ZGExZDk3N2M1ODgwNjUzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T12:53:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-16T14:03:03Z"}, "message": "libstdc++: Simplify numeric_limits<__max_size_type>\n\nIf __int128 is supported then __int_traits<__int128> is guaranteed to be\nspecialized, so we can remove the preprocessor condition inside the\nstd::numeric_traits<__detail::__max_size_type> specialization. Simply\nusing __int_traits<_Sp::__rep> gives the right answer.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/max_size_type.h (numeric_limits<__max_size_type>):\n\tUse __int_traits unconditionally.", "tree": {"sha": "5a07e977dd388d3b54b7855c617d4bc506632648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a07e977dd388d3b54b7855c617d4bc506632648"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb0586ebdb696efa9e59cb8da1d977c5880653b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0586ebdb696efa9e59cb8da1d977c5880653b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb0586ebdb696efa9e59cb8da1d977c5880653b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb0586ebdb696efa9e59cb8da1d977c5880653b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95891ca020591196cde50c4cde4cab14783a3c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95891ca020591196cde50c4cde4cab14783a3c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95891ca020591196cde50c4cde4cab14783a3c00"}], "stats": {"total": 8, "additions": 1, "deletions": 7}, "files": [{"sha": "11721b30b6178406a4337930ddbfdb60b1d34c9c", "filename": "libstdc++-v3/include/bits/max_size_type.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb0586ebdb696efa9e59cb8da1d977c5880653b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb0586ebdb696efa9e59cb8da1d977c5880653b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmax_size_type.h?ref=bfb0586ebdb696efa9e59cb8da1d977c5880653b", "patch": "@@ -771,14 +771,8 @@ namespace ranges\n       static constexpr bool is_signed = false;\n       static constexpr bool is_integer = true;\n       static constexpr bool is_exact = true;\n-#if __SIZEOF_INT128__\n-      static_assert(__extension__ same_as<_Sp::__rep, __uint128_t>);\n-      static constexpr int digits = 129;\n-#else\n-      static_assert(same_as<_Sp::__rep, unsigned long long>);\n       static constexpr int digits\n-\t= __gnu_cxx::__int_traits<unsigned long long>::__digits + 1;\n-#endif\n+\t= __gnu_cxx::__int_traits<_Sp::__rep>::__digits + 1;\n       static constexpr int digits10\n \t= static_cast<int>(digits * numbers::ln2 / numbers::ln10);\n "}]}