{"sha": "74956337e8276e5bc9524104b01c147374dd94e7", "node_id": "C_kwDOANBUbNoAKDc0OTU2MzM3ZTgyNzZlNWJjOTUyNDEwNGIwMWMxNDczNzRkZDk0ZTc", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-26T05:09:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-06-28T17:24:59Z"}, "message": "compiler: use package path with embedded builtin type\n\nThe test case is https://go.dev/cl/414235.\n\nFixes golang/go#52856\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/414294", "tree": {"sha": "8dc0c411ab96c58e6913ebbb39c6dede11061d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dc0c411ab96c58e6913ebbb39c6dede11061d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74956337e8276e5bc9524104b01c147374dd94e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74956337e8276e5bc9524104b01c147374dd94e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74956337e8276e5bc9524104b01c147374dd94e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74956337e8276e5bc9524104b01c147374dd94e7/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c4ef1e3cc103ce5bdf1d9923144e93b523102a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c4ef1e3cc103ce5bdf1d9923144e93b523102a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c4ef1e3cc103ce5bdf1d9923144e93b523102a"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "13cb6ea4046f4cbaffe8183d455d0ab59efe0b9f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74956337e8276e5bc9524104b01c147374dd94e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74956337e8276e5bc9524104b01c147374dd94e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=74956337e8276e5bc9524104b01c147374dd94e7", "patch": "@@ -1,4 +1,4 @@\n-d5b4abed2f206e492890acc20738e89617ea542c\n+c7238f58a26131b7611eff6f555cab02af8a623c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dac7f20f5c186faf9aa09136015f9553fcc7b3ca", "filename": "gcc/go/gofrontend/names.cc", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74956337e8276e5bc9524104b01c147374dd94e7/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74956337e8276e5bc9524104b01c147374dd94e7/gcc%2Fgo%2Fgofrontend%2Fnames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fnames.cc?ref=74956337e8276e5bc9524104b01c147374dd94e7", "patch": "@@ -831,15 +831,28 @@ Struct_type::do_mangled_name(Gogo* gogo, std::string* ret,\n \t      ret->push_back(' ');\n \t    }\n \n-\t  // For an anonymous field with an alias type, the field name\n-\t  // is the alias name.\n-\t  if (p->is_anonymous()\n-\t      && p->type()->named_type() != NULL\n-\t      && p->type()->named_type()->is_alias())\n-\t    p->type()->named_type()->append_symbol_type_name(gogo, true, ret,\n-\t\t\t\t\t\t\t     is_non_identifier);\n+\t  const Type* ft = p->type();\n+\t  const Named_type* nt = ft->named_type();\n+\n+\t  if (p->is_anonymous() && nt != NULL && nt->is_builtin())\n+\t    {\n+\t      // For an embedded field with a builtin type, we must\n+\t      // include a package path.  Otherwise embedding builtin\n+\t      // types in different packages will produce identical\n+\t      // types, which shouldn't happen because the builtin\n+\t      // types are not exported.\n+\t      ret->append(gogo->pkgpath());\n+\t      ret->push_back('.');\n+\t      nt->append_symbol_type_name(gogo, true, ret, is_non_identifier);\n+\t    }\n+\t  else if (p->is_anonymous() && nt != NULL && nt->is_alias())\n+\t    {\n+\t      // For an anonymous field with an alias type, the field name\n+\t      // is the alias name.\n+\t      nt->append_symbol_type_name(gogo, true, ret, is_non_identifier);\n+\t    }\n \t  else\n-\t    this->append_mangled_name(p->type(), gogo, ret, is_non_identifier);\n+\t    this->append_mangled_name(ft, gogo, ret, is_non_identifier);\n \n \t  if (p->has_tag())\n \t    {"}]}