{"sha": "10839133ce6c196c9f338086ede5b3b192fc1944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4MzkxMzNjZTZjMTk2YzlmMzM4MDg2ZWRlNWIzYjE5MmZjMTk0NA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2019-02-13T19:08:52Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-02-13T19:08:52Z"}, "message": "[PR86379] do not use TREE_TYPE for USING_DECL_SCOPE\n\nIt's too risky to reuse the type field for USING_DECL_SCOPE.\nLanguage-independent parts of the compiler, such as location and\nnon-lvalue wrappers, happily take the TREE_TYPE of a USING_DECL as if\nit was a type rather than an unrelated scope.\n\nFor better or worse, USING_DECLs use the non-common struct so we can\nuse the otherwise unused result field.  Adjust fallout, from uses of\nTREE_TYPE that were supposed to be USING_DECL_SCOPE, to other\naccidental uses of TREE_TYPE of a USING_DECL.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/86379\n\t* cp-tree.h (USING_DECL_SCOPE): Use result rather than type.\n\t* name-lookup.c (strip_using_decl): Use USING_DECL_SCOPE.\n\t* search.c (protected_accessible_p): Follow USING_DECL_DECLS.\n\t(shared_member_p): Likewise.\n\t(lookup_member): Likewise.\n\t* decl.c (grok_special_member_properties): Skip USING_DECLs.\n\t* semantics.c (finish_omp_declare_simd_methods): Likewise.\n\t(finish_qualified_id_expr): Do not call shared_member_p with\n\ta dependent expr.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/86379\n\t* g++.dg/cpp0x/pr86379.C: New.\n\nFrom-SVN: r268851", "tree": {"sha": "54e2d383f0b27c7412bfbe76403065f4ca8ce94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e2d383f0b27c7412bfbe76403065f4ca8ce94b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10839133ce6c196c9f338086ede5b3b192fc1944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10839133ce6c196c9f338086ede5b3b192fc1944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10839133ce6c196c9f338086ede5b3b192fc1944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10839133ce6c196c9f338086ede5b3b192fc1944/comments", "author": null, "committer": null, "parents": [{"sha": "60378a964a2a6b32b9d05de053e181d691f68d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60378a964a2a6b32b9d05de053e181d691f68d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60378a964a2a6b32b9d05de053e181d691f68d52"}], "stats": {"total": 253, "additions": 245, "deletions": 8}, "files": [{"sha": "ef51d9a46e6f45c203056314f46ab7d67d2d4250", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -1,5 +1,16 @@\n 2019-02-13  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/86379\n+\t* cp-tree.h (USING_DECL_SCOPE): Use result rather than type.\n+\t* name-lookup.c (strip_using_decl): Use USING_DECL_SCOPE.\n+\t* search.c (protected_accessible_p): Follow USING_DECL_DECLS.\n+\t(shared_member_p): Likewise.\n+\t(lookup_member): Likewise.\n+\t* decl.c (grok_special_member_properties): Skip USING_DECLs.\n+\t* semantics.c (finish_omp_declare_simd_methods): Likewise.\n+\t(finish_qualified_id_expr): Do not call shared_member_p with\n+\ta dependent expr.\n+\n \tPR c++/87322\n \t* pt.c (tsubst_lambda_expr): Avoid duplicate tsubsting.\n \tMove cp_evaluated resetting before signature tsubsting."}, {"sha": "44a3620a539fc09af9bb2dadb35ddc946993a21b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -3293,7 +3293,7 @@ struct GTY(()) lang_decl {\n #define DECL_DEPENDENT_P(NODE) DECL_LANG_FLAG_0 (USING_DECL_CHECK (NODE))\n \n /* The scope named in a using decl.  */\n-#define USING_DECL_SCOPE(NODE) TREE_TYPE (USING_DECL_CHECK (NODE))\n+#define USING_DECL_SCOPE(NODE) DECL_RESULT_FLD (USING_DECL_CHECK (NODE))\n \n /* The decls named by a using decl.  */\n #define USING_DECL_DECLS(NODE) DECL_INITIAL (USING_DECL_CHECK (NODE))"}, {"sha": "8fe547c3ac58a93ad7659881c1e3578649acaa81", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -13317,7 +13317,8 @@ grok_special_member_properties (tree decl)\n {\n   tree class_type;\n \n-  if (!DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+  if (TREE_CODE (decl) == USING_DECL\n+      || !DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n     return;\n \n   class_type = DECL_CONTEXT (decl);"}, {"sha": "959f43b0238443dd1c8b1b32273c562f2a913c25", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -2100,7 +2100,7 @@ strip_using_decl (tree decl)\n \t     \n \t using typename :: [opt] nested-name-specifier unqualified-id ;\n       */\n-      decl = make_typename_type (TREE_TYPE (decl),\n+      decl = make_typename_type (USING_DECL_SCOPE (decl),\n \t\t\t\t DECL_NAME (decl),\n \t\t\t\t typename_type, tf_error);\n       if (decl != error_mark_node)"}, {"sha": "4c3fffda717c21db0b6c6bae32330b2cd9238ddf", "filename": "gcc/cp/search.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -623,6 +623,11 @@ protected_accessible_p (tree decl, tree derived, tree type, tree otype)\n   if (!DERIVED_FROM_P (type, derived))\n     return 0;\n \n+  /* DECL_NONSTATIC_MEMBER_P won't work for USING_DECLs.  */\n+  decl = strip_using_decl (decl);\n+  /* We don't expect or support dependent decls.  */\n+  gcc_assert (TREE_CODE (decl) != USING_DECL);\n+\n   /* [class.protected]\n \n      When a friend or a member function of a derived class references\n@@ -928,8 +933,13 @@ shared_member_p (tree t)\n   if (is_overloaded_fn (t))\n     {\n       for (ovl_iterator iter (get_fns (t)); iter; ++iter)\n-\tif (DECL_NONSTATIC_MEMBER_FUNCTION_P (*iter))\n-\t  return 0;\n+\t{\n+\t  tree decl = strip_using_decl (*iter);\n+\t  /* We don't expect or support dependent decls.  */\n+\t  gcc_assert (TREE_CODE (decl) != USING_DECL);\n+\t  if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+\t    return 0;\n+\t}\n       return 1;\n     }\n   return 0;\n@@ -1177,7 +1187,10 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type,\n       && !really_overloaded_fn (rval))\n     {\n       tree decl = is_overloaded_fn (rval) ? get_first_fn (rval) : rval;\n-      if (!DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n+      decl = strip_using_decl (decl);\n+      /* A dependent USING_DECL will be checked after tsubsting.  */\n+      if (TREE_CODE (decl) != USING_DECL\n+\t  && !DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n \t  && !perform_or_defer_access_check (basetype_path, decl, decl,\n \t\t\t\t\t     complain, afi))\n \trval = error_mark_node;"}, {"sha": "89ea438ebeefb3f62469fa258c2355d1e7065314", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -2096,7 +2096,8 @@ finish_qualified_id_expr (tree qualifying_class,\n     {\n       /* See if any of the functions are non-static members.  */\n       /* If so, the expression may be relative to 'this'.  */\n-      if (!shared_member_p (expr)\n+      if ((type_dependent_expression_p (expr)\n+\t   || !shared_member_p (expr))\n \t  && current_class_ptr\n \t  && DERIVED_FROM_P (qualifying_class,\n \t\t\t     current_nonlambda_class_type ()))\n@@ -5867,7 +5868,8 @@ finish_omp_declare_simd_methods (tree t)\n \n   for (tree x = TYPE_FIELDS (t); x; x = DECL_CHAIN (x))\n     {\n-      if (TREE_CODE (TREE_TYPE (x)) != METHOD_TYPE)\n+      if (TREE_CODE (x) == USING_DECL\n+\t  || !DECL_NONSTATIC_MEMBER_FUNCTION_P (x))\n \tcontinue;\n       tree ods = lookup_attribute (\"omp declare simd\", DECL_ATTRIBUTES (x));\n       if (!ods || !TREE_VALUE (ods))"}, {"sha": "74d0ad3e0e69844c036a12011622bcbf1af7eb1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -1,5 +1,8 @@\n 2019-02-13  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/86379\n+\t* g++.dg/cpp0x/pr86379.C: New.\n+\n \tPR c++/87322\n \t* g++.dg/cpp1y/pr87322.C: New.\n \t* g++.dg/cpp0x/lambda/lambda-variadic5.C: Test that we"}, {"sha": "82282eae8e52be4d4381ecfbc20d52f1e9bcb097", "filename": "gcc/testsuite/g++.dg/cpp0x/pr86379.C", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86379.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10839133ce6c196c9f338086ede5b3b192fc1944/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86379.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86379.C?ref=10839133ce6c196c9f338086ede5b3b192fc1944", "patch": "@@ -0,0 +1,207 @@\n+// { dg-do compile { target c++11 } }\n+\n+// Reduced from Mozilla SpiderMonkey, licensed under MPL-2.0.\n+\n+template<typename T, unsigned N>\n+class Vector\n+{\n+  public:\n+    Vector() {}\n+    unsigned length() const { return 0; }\n+};\n+\n+class TokenStreamShared\n+{\n+};\n+\n+template<typename CharT, class AnyCharsAccess>\n+class TokenStreamSpecific;\n+\n+class TokenStreamAnyChars\n+  : public TokenStreamShared\n+{\n+  public:\n+    TokenStreamAnyChars() {}\n+};\n+\n+template<typename CharT>\n+class SourceUnits\n+{\n+  public:\n+    SourceUnits() {}\n+\n+    bool atEnd() const { return true; }\n+    unsigned offset() const { return 0; }\n+    bool matchCodeUnit(CharT c) { return true; }\n+};\n+\n+class TokenStreamCharsShared\n+{\n+    using CharBuffer = Vector<char16_t, 32>;\n+\n+  protected:\n+    CharBuffer charBuffer;\n+\n+  protected:\n+    explicit TokenStreamCharsShared() {}\n+};\n+\n+template<typename CharT>\n+class TokenStreamCharsBase\n+  : public TokenStreamCharsShared\n+{\n+  public:\n+    TokenStreamCharsBase()\n+      : TokenStreamCharsShared(), sourceUnits()\n+    {}\n+\n+    using SourceUnits = ::SourceUnits<CharT>;\n+\n+    bool matchCodeUnit(int expect) { return true; }\n+\n+  protected:\n+    SourceUnits sourceUnits;\n+};\n+\n+template<typename CharT, class AnyCharsAccess>\n+class GeneralTokenStreamChars\n+  : public TokenStreamCharsBase<CharT>\n+{\n+    using CharsBase = TokenStreamCharsBase<CharT>;\n+\n+  protected:\n+    using CharsBase::CharsBase;\n+\n+    TokenStreamAnyChars& anyCharsAccess();\n+    const TokenStreamAnyChars& anyCharsAccess() const;\n+};\n+\n+template<typename CharT, class AnyCharsAccess> class TokenStreamChars;\n+\n+template<class AnyCharsAccess>\n+class TokenStreamChars<char16_t, AnyCharsAccess>\n+  : public GeneralTokenStreamChars<char16_t, AnyCharsAccess>\n+{\n+  private:\n+    using CharsBase = TokenStreamCharsBase<char16_t>;\n+    using GeneralCharsBase = GeneralTokenStreamChars<char16_t, AnyCharsAccess>;\n+    using Self = TokenStreamChars<char16_t, AnyCharsAccess>;\n+\n+  protected:\n+    using GeneralCharsBase::anyCharsAccess;\n+    using CharsBase::sourceUnits;\n+\n+    using typename GeneralCharsBase::SourceUnits;\n+\n+  protected:\n+    using GeneralCharsBase::GeneralCharsBase;\n+\n+    bool getFullAsciiCodePoint(int lead, int* codePoint) {\n+        if (lead == '\\r') {\n+            bool isAtEnd = sourceUnits.atEnd();\n+            if (!isAtEnd)\n+                sourceUnits.matchCodeUnit('\\n');\n+        } else if (lead != '\\n') {\n+            *codePoint = lead;\n+            return true;\n+        }\n+\n+        *codePoint = '\\n';\n+        return true;\n+    }\n+};\n+\n+template<typename CharT, class AnyCharsAccess>\n+class TokenStreamSpecific\n+  : public TokenStreamChars<CharT, AnyCharsAccess>,\n+    public TokenStreamShared\n+{\n+  public:\n+    using CharsBase = TokenStreamCharsBase<CharT>;\n+    using GeneralCharsBase = GeneralTokenStreamChars<CharT, AnyCharsAccess>;\n+    using SpecializedCharsBase = TokenStreamChars<CharT, AnyCharsAccess>;\n+\n+  public:\n+    using GeneralCharsBase::anyCharsAccess;\n+\n+  private:\n+    using typename CharsBase::SourceUnits;\n+\n+  private:\n+    using TokenStreamCharsShared::charBuffer;\n+    using CharsBase::sourceUnits;\n+\n+  public:\n+    TokenStreamSpecific()\n+      : SpecializedCharsBase()\n+    {}\n+\n+  public:\n+    bool advance(unsigned position) {\n+        bool t = charBuffer.length() + 1 > 0;\n+        auto offs = sourceUnits.offset();\n+        return t && offs > 0;\n+    }\n+};\n+\n+class TokenStreamAnyCharsAccess\n+{\n+};\n+\n+class TokenStream final\n+  : public TokenStreamAnyChars,\n+    public TokenStreamSpecific<char16_t, TokenStreamAnyCharsAccess>\n+{\n+    using CharT = char16_t;\n+\n+  public:\n+    TokenStream()\n+    : TokenStreamAnyChars(),\n+      TokenStreamSpecific<CharT, TokenStreamAnyCharsAccess>()\n+    {}\n+};\n+\n+class SyntaxParseHandler {};\n+\n+class ParserBase\n+{\n+  public:\n+    TokenStreamAnyChars anyChars;\n+};\n+\n+template<class ParseHandler, typename CharT> class GeneralParser;\n+\n+template <class ParseHandler>\n+class PerHandlerParser : public ParserBase\n+{\n+};\n+\n+template<class Parser>\n+class ParserAnyCharsAccess\n+{\n+};\n+\n+template <class ParseHandler, typename CharT>\n+class Parser;\n+\n+template <class ParseHandler, typename CharT>\n+class GeneralParser\n+  : public PerHandlerParser<ParseHandler>\n+{\n+  public:\n+    TokenStreamSpecific<CharT, ParserAnyCharsAccess<GeneralParser>> tokenStream;\n+\n+  public:\n+    GeneralParser();\n+};\n+\n+\n+template class TokenStreamCharsBase<char16_t>;\n+\n+template class TokenStreamChars<char16_t, TokenStreamAnyCharsAccess>;\n+\n+template class\n+TokenStreamChars<char16_t, ParserAnyCharsAccess<GeneralParser<SyntaxParseHandler, char16_t>>>;\n+\n+template class\n+TokenStreamSpecific<char16_t, ParserAnyCharsAccess<GeneralParser<SyntaxParseHandler, char16_t>>>;"}]}