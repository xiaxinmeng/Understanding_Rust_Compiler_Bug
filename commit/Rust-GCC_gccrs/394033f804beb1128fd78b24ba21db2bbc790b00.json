{"sha": "394033f804beb1128fd78b24ba21db2bbc790b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0MDMzZjgwNGJlYjExMjhmZDc4YjI0YmEyMWRiMmJiYzc5MGIwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-17T21:21:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-17T21:21:13Z"}, "message": "cpp_type_traits.h (__is_byte): Add.\n\n2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/cpp_type_traits.h (__is_byte): Add.\n\t* include/bits/stl_algobase.h (struct __fill, struct __fill_n,\n\t__fill_aux, __fill_n_aux): Remove.\n\t(__fill_a, __fill_n_a): Add.\n\t(fill, fill_n): Adjust.\n\nFrom-SVN: r129421", "tree": {"sha": "6061491e09d503d9f34170f470e2e09253649ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6061491e09d503d9f34170f470e2e09253649ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394033f804beb1128fd78b24ba21db2bbc790b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394033f804beb1128fd78b24ba21db2bbc790b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394033f804beb1128fd78b24ba21db2bbc790b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394033f804beb1128fd78b24ba21db2bbc790b00/comments", "author": null, "committer": null, "parents": [{"sha": "f8da819086c1b1b62df6e190a1f9948ec6c48846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8da819086c1b1b62df6e190a1f9948ec6c48846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8da819086c1b1b62df6e190a1f9948ec6c48846"}], "stats": {"total": 180, "additions": 81, "deletions": 99}, "files": [{"sha": "91db12e18de85cc6ad849b0754f6a0822ca53a2c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=394033f804beb1128fd78b24ba21db2bbc790b00", "patch": "@@ -1,3 +1,11 @@\n+2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/cpp_type_traits.h (__is_byte): Add.\n+\t* include/bits/stl_algobase.h (struct __fill, struct __fill_n,\n+\t__fill_aux, __fill_n_aux): Remove.\n+\t(__fill_a, __fill_n_a): Add.\n+\t(fill, fill_n): Adjust.\n+\n 2007-10-17  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_iterator.h (back_insert_iterator<>::operator="}, {"sha": "4948f6c8d858b9675856c64fb5b7d6ba078526c8", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=394033f804beb1128fd78b24ba21db2bbc790b00", "patch": "@@ -353,6 +353,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n+  template<typename _Tp>\n+    struct __is_byte\n+    {\n+      enum { __value = 0 };\n+      typedef __false_type __type;\n+    };\n+\n+  template<>\n+    struct __is_byte<char>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+\n+  template<>\n+    struct __is_byte<signed char>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+\n+  template<>\n+    struct __is_byte<unsigned char>\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "55c0eb24e501cc8e039f76db97c8f734087b10e4", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 45, "deletions": 99, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394033f804beb1128fd78b24ba21db2bbc790b00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=394033f804beb1128fd78b24ba21db2bbc790b00", "patch": "@@ -500,56 +500,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n \n-  template<bool>\n-    struct __fill\n-    {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        fill(_ForwardIterator __first, _ForwardIterator __last,\n-\t     const _Tp& __value)\n-        {\n-\t  for (; __first != __last; ++__first)\n-\t    *__first = __value;\n-\t}\n-    };\n-\n-  template<>\n-    struct __fill<true>\n+  template<typename _ForwardIterator, typename _Tp>\n+    inline typename\n+    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type\n+    __fill_a(_ForwardIterator __first, _ForwardIterator __last,\n+ \t     const _Tp& __value)\n     {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        fill(_ForwardIterator __first, _ForwardIterator __last,\n-\t     const _Tp& __value)\n-        {\n-\t  const _Tp __tmp = __value;\n-\t  for (; __first != __last; ++__first)\n-\t    *__first = __tmp;\n-\t}\n-    };\n-\n+      for (; __first != __last; ++__first)\n+\t*__first = __value;\n+    }\n+    \n   template<typename _ForwardIterator, typename _Tp>\n-    inline void\n-    __fill_aux(_ForwardIterator __first, _ForwardIterator __last,\n-\t       const _Tp& __value)\n+    inline typename\n+    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type\n+    __fill_a(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)\n     {\n-      const bool __scalar = __is_scalar<_Tp>::__value;\n-      std::__fill<__scalar>::fill(__first, __last, __value);\n+      for (; __first != __last; ++__first)\n+\t*__first = __value;\n     }\n \n   // Specialization: for char types we can use memset.\n-  inline void\n-  __fill_aux(unsigned char* __first, unsigned char* __last, unsigned char __c)\n-  { __builtin_memset(__first, __c, __last - __first); }\n-\n-  inline void\n-  __fill_aux(signed char* __first, signed char* __last, signed char __c)\n-  { __builtin_memset(__first, static_cast<unsigned char>(__c),\n-\t\t     __last - __first); }\n-\n-  inline void\n-  __fill_aux(char* __first, char* __last, char __c)\n-  { __builtin_memset(__first, static_cast<unsigned char>(__c),\n-\t\t     __last - __first); }\n+  template<typename _Tp>\n+    inline typename\n+    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type\n+    __fill_a(_Tp* __first, _Tp* __last, _Tp __c)\n+    { __builtin_memset(__first, static_cast<unsigned char>(__c),\n+\t\t       __last - __first); }\n \n   /**\n    *  @brief Fills the range [first,last) with copies of value.\n@@ -571,66 +547,36 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ForwardIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      std::__fill_aux(__niter_base<_ForwardIterator>::__b(__first),\n-\t\t      __niter_base<_ForwardIterator>::__b(__last), __value);\n+      std::__fill_a(std::__niter_base<_ForwardIterator>::__b(__first),\n+\t\t    std::__niter_base<_ForwardIterator>::__b(__last), __value);\n     }\n \n-  template<bool>\n-    struct __fill_n\n-    {\n-      template<typename _OutputIterator, typename _Size, typename _Tp>\n-        static _OutputIterator\n-        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n-        {\n-\t  for (; __n > 0; --__n, ++__first)\n-\t    *__first = __value;\n-\t  return __first;\n-\t}\n-    };\n-\n-  template<>\n-    struct __fill_n<true>\n-    {\n-      template<typename _OutputIterator, typename _Size, typename _Tp>\n-        static _OutputIterator\n-        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n-        {\n-\t  const _Tp __tmp = __value;\n-\t  for (; __n > 0; --__n, ++__first)\n-\t    *__first = __tmp;\n-\t  return __first;\t  \n-\t}\n-    };\n-\n   template<typename _OutputIterator, typename _Size, typename _Tp>\n-    inline _OutputIterator\n-    __fill_n_aux(_OutputIterator __first, _Size __n, const _Tp& __value)\n-    {\n-      const bool __scalar = __is_scalar<_Tp>::__value;\n-      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);\n-    }\n-\n-  template<typename _Size>\n-    inline unsigned char*\n-    __fill_n_aux(unsigned char* __first, _Size __n, unsigned char __c)\n+    inline typename\n+    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type\n+    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)\n     {\n-      std::__fill_aux(__first, __first + __n, __c);\n-      return __first + __n;\n+      for (; __n > 0; --__n, ++__first)\n+\t*__first = __value;\n+      return __first;\n     }\n \n-  template<typename _Size>\n-    inline signed char*\n-    __fill_n_aux(signed char* __first, _Size __n, signed char __c)\n+  template<typename _OutputIterator, typename _Size, typename _Tp>\n+    inline typename\n+    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type\n+    __fill_n_a(_OutputIterator __first, _Size __n, _Tp __value)\n     {\n-      std::__fill_aux(__first, __first + __n, __c);\n-      return __first + __n;\n+      for (; __n > 0; --__n, ++__first)\n+\t*__first = __value;\n+      return __first;\n     }\n \n-  template<typename _Size>\n-    inline char*\n-    __fill_n_aux(char* __first, _Size __n, char __c)\n+  template<typename _Size, typename _Tp>\n+    inline typename\n+    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type\n+    __fill_n_a(_Tp* __first, _Size __n, _Tp __c)\n     {\n-      std::__fill_aux(__first, __first + __n, __c);\n+      std::__fill_a(__first, __first + __n, __c);\n       return __first + __n;\n     }\n \n@@ -652,8 +598,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n \n-      return _OI(std::__fill_n_aux(__niter_base<_OI>::__b(__first), __n,\n-\t\t\t\t   __value));\n+      return _OI(std::__fill_n_a(std::__niter_base<_OI>::__b(__first),\n+\t\t\t\t __n, __value));\n     }\n \n   template<bool _BoolType>\n@@ -803,9 +749,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n \t    typename iterator_traits<_II2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      return std::__equal_aux(__niter_base<_II1>::__b(__first1),\n-\t\t\t      __niter_base<_II1>::__b(__last1),\n-\t\t\t      __niter_base<_II2>::__b(__first2));\n+      return std::__equal_aux(std::__niter_base<_II1>::__b(__first1),\n+\t\t\t      std::__niter_base<_II1>::__b(__last1),\n+\t\t\t      std::__niter_base<_II2>::__b(__first2));\n     }\n \n   /**"}]}