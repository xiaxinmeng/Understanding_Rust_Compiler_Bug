{"sha": "174e0b00c1875420014bd7f32bffd5070f5d5cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc0ZTBiMDBjMTg3NTQyMDAxNGJkN2YzMmJmZmQ1MDcwZjVkNWNiYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-10-10T13:50:10Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-10-10T13:50:10Z"}, "message": "[4/4] ARMv8.2-A testsuite for new scalar intrinsics\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc: Support FMT64.\n\t* gcc.target/aarch64/advsimd-intrinsics/vabdh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcageh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcagth_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcaleh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcalth_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vceqh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vceqzh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgeh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgezh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgth_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgtzh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcleh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vclezh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vclth_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcltzh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s64_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u64_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s64_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u64_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u16_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfmash_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmaxh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vminh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulh_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulxh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulxh_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrecpeh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrecpsh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrecpxh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrteh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrtsh_f16_1.c: New.\n\nFrom-SVN: r240924", "tree": {"sha": "2a1211afdd526b154563b6fb0d4579a33c4f516c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a1211afdd526b154563b6fb0d4579a33c4f516c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/174e0b00c1875420014bd7f32bffd5070f5d5cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174e0b00c1875420014bd7f32bffd5070f5d5cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174e0b00c1875420014bd7f32bffd5070f5d5cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174e0b00c1875420014bd7f32bffd5070f5d5cba/comments", "author": null, "committer": null, "parents": [{"sha": "4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc63138bc01244b1ea0eb04ffb0b62870865a0e"}], "stats": {"total": 1916, "additions": 1916, "deletions": 0}, "files": [{"sha": "20c7aec71ba7e67ba1d3b164042658c8dd0f4441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -1,3 +1,65 @@\n+2016-10-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc: Support FMT64.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vabdh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcageh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcagth_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcaleh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcalth_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vceqh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vceqzh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgeh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgezh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgth_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgtzh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcleh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vclezh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vclth_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcltzh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s64_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u64_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s64_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u64_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u16_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfmash_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmaxh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vminh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulh_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulxh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulxh_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrecpeh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrecpsh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrecpxh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrteh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrtsh_f16_1.c: New.\n+\n 2016-10-10  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vdiv_f16_1.c: New."}, {"sha": "66c89068f610e0a7ed7ffed4ff36a84db6617e78", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -64,6 +64,7 @@ extern void abort ();\n /* Format strings for error reporting.  */\n #define FMT16 \"0x%04x\"\n #define FMT32 \"0x%08x\"\n+#define FMT64 \"0x%016x\"\n #define FMT CAT (FMT,OUTPUT_TYPE_SIZE)\n \n /* Type construction: forms TS_t, where T is the base type and S the size in"}, {"sha": "3a5efa58088b029a726374dee7bf02b48088f7a3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabdh_f16_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabdh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabdh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabdh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results.\n+   Absolute difference between INPUT1 and INPUT2 in binary_scalar_op.inc.  */\n+uint16_t expected[] =\n+{\n+  0x3C00,\n+  0x3C00,\n+  0x4654,\n+  0x560E,\n+  0x4900,\n+  0x36B8,\n+  0x419a,\n+  0x4848,\n+  0x3d34,\n+  0x4cec,\n+  0x4791,\n+  0x3f34,\n+  0x484d,\n+  0x4804,\n+  0x469c,\n+  0x4ceb,\n+  0x7c00,\n+  0x7c00\n+};\n+\n+#define TEST_MSG \"VABDH_F16\"\n+#define INSN_NAME vabdh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "0bebec76248ccf5407fa9e8f62fe0248883a92e2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcageh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcageh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcageh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcageh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,\n+\t\t\t0xFFFF};\n+\n+#define TEST_MSG \"VCAGEH_F16\"\n+#define INSN_NAME vcageh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "68ce599719e1910c515130ca6c4156f080e84d39", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcagth_f16_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagth_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagth_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagth_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0x0};\n+\n+#define TEST_MSG \"VCAGTH_F16\"\n+#define INSN_NAME vcagth_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "1b5a09b4629bf01e6604a3d7b4341734519b1376", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcaleh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcaleh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcaleh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcaleh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0x0,\n+\t\t\t0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0x0,\n+\t\t\t0x0, 0xFFFF, 0xFFFF};\n+\n+#define TEST_MSG \"VCALEH_F16\"\n+#define INSN_NAME vcaleh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "766c783f3b043c4285366bba89767643ecba9a17", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcalth_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalth_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalth_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalth_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0x0,\n+\t\t\t0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0x0,\n+\t\t\t0x0, 0x0, 0x0};\n+\n+#define TEST_MSG \"VCALTH_F16\"\n+#define INSN_NAME vcalth_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "8f5c14b4349e08f533d16819656bf3342356e1aa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vceqh_f16_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};\n+\n+#define TEST_MSG \"VCEQH_F16\"\n+#define INSN_NAME vceqh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "ccfecf429996f5a5fa5060e6ffab33cc560f38a6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vceqzh_f16_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqzh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqzh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqzh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};\n+\n+#define TEST_MSG \"VCEQZH_F16\"\n+#define INSN_NAME vceqzh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "161c7a04e1e47982bc45544a590b041e5e5384e1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgeh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgeh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgeh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgeh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0xFFFF, 0x0};\n+\n+#define TEST_MSG \"VCGEH_F16\"\n+#define INSN_NAME vcgeh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "2d3cd8ad56ac76077e4ee438f6bb6d9966c025cc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgezh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgezh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgezh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgezh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0,\n+\t\t\t0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,\n+\t\t\t0x0, 0xFFFF, 0xFFFF, 0x0};\n+\n+#define TEST_MSG \"VCGEZH_F16\"\n+#define INSN_NAME vcgezh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "0d353859b4d90ff82dce305ab97c17c6bf756e80", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgth_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgth_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgth_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgth_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0xFFFF, 0x0};\n+\n+#define TEST_MSG \"VCGTH_F16\"\n+#define INSN_NAME vcgth_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "ca23e3f00139034eb6a368ce8256a49793dcd329", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgtzh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtzh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtzh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtzh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0,\n+\t\t\t0xFFFF, 0xFFFF, 0x0};\n+\n+#define TEST_MSG \"VCGTZH_F16\"\n+#define INSN_NAME vcgtzh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "f51cac356356957671a8b25870226bf3df34e80d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcleh_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcleh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcleh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcleh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0x0,\n+\t\t\t0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF, 0x0, 0x0,\n+\t\t\t0xFFFF};\n+\n+#define TEST_MSG \"VCLEH_F16\"\n+#define INSN_NAME vcleh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "57901c8bd45fbbec4be26f4065695aedf6838e61", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclezh_f16_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclezh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclezh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclezh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF};\n+\n+#define TEST_MSG \"VCLEZH_F16\"\n+#define INSN_NAME vclezh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "32188732deb06c63975096f2f355c4bfac0e0e6c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclth_f16_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclth_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclth_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclth_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0x0,\n+\t\t\t0xFFFF, 0xFFFF, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF, 0x0, 0x0,\n+\t\t\t0xFFFF};\n+\n+#define TEST_MSG \"VCLTH_F16\"\n+#define INSN_NAME vclth_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "af6a5b64414d8b3dca1721b5f12077ad186ce12b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcltzh_f16_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltzh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltzh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltzh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0x0, 0xFFFF,\n+\t\t\t0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFF, 0x0, 0x0, 0xFFFF};\n+\n+#define TEST_MSG \"VCltZH_F16\"\n+#define INSN_NAME vcltzh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "2084c3038c39387ee33868da6a091a230c10e864", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int16_t expected[] = { 124, -57, 1, 25, -64, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTAH_S16_F16\"\n+#define INSN_NAME vcvtah_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "a27871bbf2a6430672274afc5a0b7f807cefd243", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int64_t expected[] = { 124, -57, 1, 25, -64, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTAH_S64_F16\"\n+#define INSN_NAME vcvtah_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "0642ae037ece0e94f77c2a14c065ad1374f48826", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint16_t expected[] = { 124, 57, 1, 25, 64, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTAH_u16_F16\"\n+#define INSN_NAME vcvtah_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "2d197b4eab3bf5ce8a1ae938f59c0e27b662808c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint64_t expected[] = { 124, 57, 1, 25, 64, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTAH_u64_F16\"\n+#define INSN_NAME vcvtah_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "540b637fbfedc6945bc847eb662bb7e49e120283", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s16_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+int16_t input[] = { 123, -567, 0, 1024, -63, 169, -4, 77 };\n+uint16_t expected[] = { 0x57B0 /* 123.0.  */, 0xE06E /* -567.0.  */,\n+\t\t\t0x0000 /* 0.0.  */, 0x6400 /* 1024.  */,\n+\t\t\t0xD3E0 /* -63.  */, 0x5948 /* 169.  */,\n+\t\t\t0xC400 /* -4.  */, 0x54D0 /* 77.  */ };\n+\n+#define TEST_MSG \"VCVTH_F16_S16\"\n+#define INSN_NAME vcvth_f16_s16\n+\n+#define EXPECTED expected\n+\n+#define INPUT input\n+#define INPUT_TYPE int16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "5f17dbe9cc35732f8c4cac722e12af8c0c5a4d05", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s64_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s64_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+int64_t input[] = { 123, -567, 0, 1024, -63, 169, -4, 77 };\n+uint16_t expected[] = { 0x57B0 /* 123.0.  */, 0xE06E /* -567.0.  */,\n+\t\t\t0x0000 /* 0.0.  */, 0x6400 /* 1024.  */,\n+\t\t\t0xD3E0 /* -63.  */, 0x5948 /* 169.  */,\n+\t\t\t0xC400 /* -4.  */, 0x54D0 /* 77.  */ };\n+\n+#define TEST_MSG \"VCVTH_F16_S64\"\n+#define INSN_NAME vcvth_f16_s64\n+\n+#define EXPECTED expected\n+\n+#define INPUT input\n+#define INPUT_TYPE int64_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "426700cef0b01638c21adeae6d23c67930963458", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u16_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t input[] = { 123, 567, 0, 1024, 63, 169, 4, 77 };\n+uint16_t expected[] = { 0x57B0 /* 123.0.  */, 0x606E /* 567.0.  */,\n+\t\t\t0x0000 /* 0.0.  */, 0x6400 /* 1024.0.  */,\n+\t\t\t0x53E0 /* 63.0.  */, 0x5948 /* 169.0.  */,\n+\t\t\t0x4400 /* 4.0.  */, 0x54D0 /* 77.0.  */ };\n+\n+#define TEST_MSG \"VCVTH_F16_U16\"\n+#define INSN_NAME vcvth_f16_u16\n+\n+#define EXPECTED expected\n+\n+#define INPUT input\n+#define INPUT_TYPE uint16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "3413de021a03abb055290c9b6ea2ebcc1172414c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u64_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u64_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+uint64_t input[] = { 123, 567, 0, 1024, 63, 169, 4, 77 };\n+uint16_t expected[] = { 0x57B0 /* 123.0.  */, 0x606E /* 567.0.  */,\n+\t\t\t0x0000 /* 0.0.  */, 0x6400 /* 1024.0.  */,\n+\t\t\t0x53E0 /* 63.0.  */, 0x5948 /* 169.0.  */,\n+\t\t\t0x4400 /* 4.0.  */, 0x54D0 /* 77.0.  */ };\n+\n+#define TEST_MSG \"VCVTH_F16_U64\"\n+#define INSN_NAME vcvth_f16_u64\n+\n+#define EXPECTED expected\n+\n+#define INPUT input\n+#define INPUT_TYPE uint64_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "25265d19e7a594679af67bd3dd3762c3ec0861a0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s16_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+int16_t input[] = { 1, 10, 48, 100, -1, -10, 7, -7 };\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] = { 0x3800 /* 0.5.  */,\n+\t\t\t  0x4500 /* 5.  */,\n+\t\t\t  0x4E00 /* 24.  */,\n+\t\t\t  0x5240 /* 50.  */,\n+\t\t\t  0xB800 /* -0.5.  */,\n+\t\t\t  0xC500 /* -5.  */,\n+\t\t\t  0x4300 /* 3.5.  */,\n+\t\t\t  0xC300 /* -3.5.  */ };\n+\n+uint16_t expected_2[] = { 0x3400 /* 0.25.  */,\n+\t\t\t  0x4100 /* 2.5.  */,\n+\t\t\t  0x4A00 /* 12.  */,\n+\t\t\t  0x4E40 /* 25.  */,\n+\t\t\t  0xB400 /* -0.25.  */,\n+\t\t\t  0xC100 /* -2.5.  */,\n+\t\t\t  0x3F00 /* 1.75.  */,\n+\t\t\t  0xBF00 /* -1.75.  */ };\n+\n+#define TEST_MSG \"VCVTH_N_F16_S16\"\n+#define INSN_NAME vcvth_n_f16_s16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE int16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "f0adb097e8cab725f96bd3c05de54a85b8db4d5f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s64_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s64_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+int64_t input[] = { 1, 10, 48, 100, -1, -10, 7, -7 };\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] = { 0x3800 /* 0.5.  */,\n+\t\t\t  0x4500 /* 5.  */,\n+\t\t\t  0x4E00 /* 24.  */,\n+\t\t\t  0x5240 /* 50.  */,\n+\t\t\t  0xB800 /* -0.5.  */,\n+\t\t\t  0xC500 /* -5.  */,\n+\t\t\t  0x4300 /* 3.5.  */,\n+\t\t\t  0xC300 /* -3.5.  */ };\n+\n+uint16_t expected_2[] = { 0x3400 /* 0.25.  */,\n+\t\t\t  0x4100 /* 2.5.  */,\n+\t\t\t  0x4A00 /* 12.  */,\n+\t\t\t  0x4E40 /* 25.  */,\n+\t\t\t  0xB400 /* -0.25.  */,\n+\t\t\t  0xC100 /* -2.5.  */,\n+\t\t\t  0x3F00 /* 1.75.  */,\n+\t\t\t  0xBF00 /* -1.75.  */ };\n+\n+#define TEST_MSG \"VCVTH_N_F16_S64\"\n+#define INSN_NAME vcvth_n_f16_s64\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE int64_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "74c4e60d50df5c3e1ff3505672ef908882c1f564", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u16_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+uint16_t input[] = { 1, 10, 48, 100, 1000, 0, 500, 9 };\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] = { 0x3800 /* 0.5.  */,\n+\t\t\t  0x4500 /* 5.  */,\n+\t\t\t  0x4E00 /* 24.  */,\n+\t\t\t  0x5240 /* 50.  */,\n+\t\t\t  0x5FD0 /* 500.  */,\n+\t\t\t  0x0000 /* 0.0.  */,\n+\t\t\t  0x5BD0 /* 250.  */,\n+\t\t\t  0x4480 /* 4.5.  */ };\n+\n+uint16_t expected_2[] = { 0x3400 /* 0.25.  */,\n+\t\t\t  0x4100 /* 2.5.  */,\n+\t\t\t  0x4A00 /* 12.  */,\n+\t\t\t  0x4E40 /* 25.  */,\n+\t\t\t  0x5BD0 /* 250.  */,\n+\t\t\t  0x0000 /* 0.0.  */,\n+\t\t\t  0x57D0 /* 125.  */,\n+\t\t\t  0x4080 /* 2.25.  */ };\n+\n+#define TEST_MSG \"VCVTH_N_F16_U16\"\n+#define INSN_NAME vcvth_n_f16_u16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE uint16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "b393767b356db50b2b536fa438af5a4eff788123", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u64_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u64_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+uint64_t input[] = { 1, 10, 48, 100, 1000, 0, 500, 9 };\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] = { 0x3800 /* 0.5.  */,\n+\t\t\t  0x4500 /* 5.  */,\n+\t\t\t  0x4E00 /* 24.  */,\n+\t\t\t  0x5240 /* 50.  */,\n+\t\t\t  0x5FD0 /* 500.  */,\n+\t\t\t  0x0000 /* 0.0.  */,\n+\t\t\t  0x5BD0 /* 250.  */,\n+\t\t\t  0x4480 /* 4.5.  */ };\n+\n+uint16_t expected_2[] = { 0x3400 /* 0.25.  */,\n+\t\t\t  0x4100 /* 2.5.  */,\n+\t\t\t  0x4A00 /* 12.  */,\n+\t\t\t  0x4E40 /* 25.  */,\n+\t\t\t  0x5BD0 /* 250.  */,\n+\t\t\t  0x0000 /* 0.0.  */,\n+\t\t\t  0x57D0 /* 125.  */,\n+\t\t\t  0x4080 /* 2.25.  */ };\n+\n+#define TEST_MSG \"VCVTH_N_F16_U64\"\n+#define INSN_NAME vcvth_n_f16_u64\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE uint64_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "247f7c9fe6829b9ea9558237794e82906e047553", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s16_f16_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 2.5, 100, 7.1, -9.9, -5.0, 9.1, -4.8, 77 };\n+int16_t expected_1[] = { 5, 200, 14, -19, -10, 18, -9, 154 };\n+int16_t expected_2[] = { 10, 400, 28, -39, -20, 36, -19, 308 };\n+\n+#define TEST_MSG \"VCVTH_N_S16_F16\"\n+#define INSN_NAME vcvth_n_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "27502c220f6b24d794c3b185caf77da91130b535", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s64_f16_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 2.5, 100, 7.1, -9.9, -5.0, 9.1, -4.8, 77 };\n+int64_t expected_1[] = { 5, 200, 14, -19, -10, 18, -9, 154 };\n+int64_t expected_2[] = { 10, 400, 28, -39, -20, 36, -19, 308 };\n+\n+#define TEST_MSG \"VCVTH_N_S64_F16\"\n+#define INSN_NAME vcvth_n_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "e5f57f12c6b386d828a8be2841255435be073230", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u16_f16_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 2.5, 100, 7.1, 9.9, 5.0, 9.1, 4.8, 77 };\n+uint16_t expected_1[] = {5, 200, 14, 19, 10, 18, 9, 154};\n+uint16_t expected_2[] = {10, 400, 28, 39, 20, 36, 19, 308};\n+\n+#define TEST_MSG \"VCVTH_N_U16_F16\"\n+#define INSN_NAME vcvth_n_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "cfc33c24e64349e0ec74714ecd411ac5253d4a79", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u64_f16_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 2.5, 100, 7.1, 9.9, 5.0, 9.1, 4.8, 77 };\n+uint64_t expected_1[] = { 5, 200, 14, 19, 10, 18, 9, 154 };\n+uint64_t expected_2[] = { 10, 400, 28, 39, 20, 36, 19, 308 };\n+\n+#define TEST_MSG \"VCVTH_N_U64_F16\"\n+#define INSN_NAME vcvth_n_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "99656544533f753932bb5dc86dc6746e8f968f57", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int16_t expected[] = { 123, -56, 0, 24, -63, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTH_S16_F16\"\n+#define INSN_NAME vcvth_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "c7b3d17469be5f3e6a4010552dda420b254a5b9b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int64_t expected[] = { 123, -56, 0, 24, -63, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTH_S64_F16\"\n+#define INSN_NAME vcvth_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "e3c5d3a0b7308065da8e20053b8006b1cafea7d1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint16_t expected[] = { 123, 56, 0, 24, 63, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTH_u16_F16\"\n+#define INSN_NAME vcvth_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "a904e5e472a6025a06ca2ce3d04541c1e8e63936", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint64_t expected[] = { 123, 56, 0, 24, 63, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTH_u64_F16\"\n+#define INSN_NAME vcvth_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "ef0132a1ccdb91670e6443f1531d42581e4814ef", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int16_t expected[] = { 123, -57, 0, 24, -64, 169, -5, 77 };\n+\n+#define TEST_MSG \"VCVTMH_S16_F16\"\n+#define INSN_NAME vcvtmh_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "7b5b16ff5698e00170af9fb1d6752dcc5b8227f2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int64_t expected[] = { 123, -57, 0, 24, -64, 169, -5, 77 };\n+\n+#define TEST_MSG \"VCVTMH_S64_F16\"\n+#define INSN_NAME vcvtmh_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "db56171da3e465878fbfbed6ae907da377f9cce3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint16_t expected[] = { 123, 56, 0, 24, 63, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTMH_u16_F16\"\n+#define INSN_NAME vcvtmh_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "cae69a347047f2a56e34aedf4e64622a636628a0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint64_t expected[] = { 123, 56, 0, 24, 63, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTMH_u64_F16\"\n+#define INSN_NAME vcvtmh_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "dec8d857036d219aae876e3e08384e806b2f4b5a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int16_t expected[] = { 124, -57, 1, 25, -64, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTNH_S16_F16\"\n+#define INSN_NAME vcvtnh_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "0048b5bf153e81ceeaece7ecd2bdf09705b5f78e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int64_t expected[] = { 124, -57, 1, 25, -64, 169, -4, 77 };\n+\n+#define TEST_MSG \"VCVTNH_S64_F16\"\n+#define INSN_NAME vcvtnh_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "0a95cea635210eac6801517b7e0b5c4f13019140", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint16_t expected[] = { 124, 57, 1, 25, 64, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTNH_u16_F16\"\n+#define INSN_NAME vcvtnh_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "3b1b273b6459f6edc2ffc761c0028ad75fc4024d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint64_t expected[] = { 124, 57, 1, 25, 64, 169, 4, 77 };\n+\n+#define TEST_MSG \"VCVTNH_u64_F16\"\n+#define INSN_NAME vcvtnh_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "5ff0d226077b6bf67f9a7c6e4ae27f41c2245ab2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int16_t expected[] = { 124, -56, 1, 25, -63, 170, -4, 77 };\n+\n+#define TEST_MSG \"VCVTPH_S16_F16\"\n+#define INSN_NAME vcvtph_s16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "290c5b13a7ca9e83f6f158855c207a8cf8ccb754", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, -56.8, 0.7, 24.6, -63.5, 169.4, -4.3, 77.0 };\n+int64_t expected[] = { 124, -56, 1, 25, -63, 170, -4, 77 };\n+\n+#define TEST_MSG \"VCVTPH_S64_F16\"\n+#define INSN_NAME vcvtph_s64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "e367dad8e5c675a23723977720a7547980a7f72e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u16_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u16_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u16_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u16_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint16_t expected[] = { 124, 57, 1, 25, 64, 170, 5, 77 };\n+\n+#define TEST_MSG \"VCVTPH_u16_F16\"\n+#define INSN_NAME vcvtph_u16_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "02290991a9aa671af4a00825654d1743ea9ff23c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u64_f16_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u64_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u64_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u64_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.9, 56.8, 0.7, 24.6, 63.5, 169.4, 4.3, 77.0 };\n+uint64_t expected[] = { 124, 57, 1, 25, 64, 170, 5, 77 };\n+\n+#define TEST_MSG \"VCVTPH_u64_F16\"\n+#define INSN_NAME vcvtph_u64_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint64_t\n+#define OUTPUT_TYPE_SIZE 64\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "ea751da72b23364f01bd710b62ebef744d953107", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfmash_lane_f16_1.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmash_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmash_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmash_lane_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (123.4)\n+#define B0 FP16_C (-5.8)\n+#define C0 FP16_C (-3.8)\n+#define D0 FP16_C (10)\n+\n+#define A1 FP16_C (12.4)\n+#define B1 FP16_C (-5.8)\n+#define C1 FP16_C (90.8)\n+#define D1 FP16_C (24)\n+\n+#define A2 FP16_C (23.4)\n+#define B2 FP16_C (-5.8)\n+#define C2 FP16_C (8.9)\n+#define D2 FP16_C (4)\n+\n+#define E0 FP16_C (3.4)\n+#define F0 FP16_C (-55.8)\n+#define G0 FP16_C (-31.8)\n+#define H0 FP16_C (2)\n+\n+#define E1 FP16_C (123.4)\n+#define F1 FP16_C (-5.8)\n+#define G1 FP16_C (-3.8)\n+#define H1 FP16_C (102)\n+\n+#define E2 FP16_C (4.9)\n+#define F2 FP16_C (-15.8)\n+#define G2 FP16_C (39.8)\n+#define H2 FP16_C (49)\n+\n+extern void abort ();\n+\n+float16_t src1[8] = { A0, B0, C0, D0, E0, F0, G0, H0 };\n+float16_t src2[8] = { A1, B1, C1, D1, E1, F1, G1, H1 };\n+VECT_VAR_DECL (src3, float, 16, 4) [] = { A2, B2, C2, D2 };\n+VECT_VAR_DECL (src3, float, 16, 8) [] = { A2, B2, C2, D2, E2, F2, G2, H2 };\n+\n+/* Expected results for vfmah_lane_f16.  */\n+uint16_t expected[4] = { 0x5E76 /* A0 + A1 * A2.  */,\n+\t\t\t 0x4EF6 /* B0 + B1 * B2.  */,\n+\t\t\t 0x6249 /* C0 + C1 * C2.  */,\n+\t\t\t 0x56A0 /* D0 + D1 * D2.  */ };\n+\n+/* Expected results for vfmah_laneq_f16.  */\n+uint16_t expected_laneq[8] = { 0x5E76 /* A0 + A1 * A2.  */,\n+\t\t\t       0x4EF6 /* B0 + B1 * B2.  */,\n+\t\t\t       0x6249 /* C0 + C1 * C2.  */,\n+\t\t\t       0x56A0 /* D0 + D1 * D2.  */,\n+\t\t\t       0x60BF /* E0 + E1 * E2.  */,\n+\t\t\t       0x507A /* F0 + F1 * F2.  */,\n+\t\t\t       0xD9B9 /* G0 + G1 * G2.  */,\n+\t\t\t       0x6CE2 /* H0 + H1 * H2.  */ };\n+\n+/* Expected results for vfmsh_lane_f16.  */\n+uint16_t expected_fms[4] = { 0xD937 /* A0 + -A1 * A2.  */,\n+\t\t\t     0xD0EE /* B0 + -B1 * B2.  */,\n+\t\t\t     0xE258 /* C0 + -C1 * C2.  */,\n+\t\t\t     0xD560 /* D0 + -D1 * D2.  */ };\n+\n+/* Expected results for vfmsh_laneq_f16.  */\n+uint16_t expected_fms_laneq[8] = { 0xD937 /* A0 + -A1 * A2.  */,\n+\t\t\t\t   0xD0EE /* B0 + -B1 * B2.  */,\n+\t\t\t\t   0xE258 /* C0 + -C1 * C2.  */,\n+\t\t\t\t   0xD560 /* D0 + -D1 * D2.  */,\n+\t\t\t\t   0xE0B2 /* E0 + -E1 * E2.  */,\n+\t\t\t\t   0xD89C /* F0 + -F1 * F2.  */,\n+\t\t\t\t   0x5778 /* G0 + -G1 * G2.  */,\n+\t\t\t\t   0xECE1 /* H0 + -H1 * H2.  */ };\n+\n+void exec_vfmash_lane_f16 (void)\n+{\n+#define CHECK_LANE(N) \\\n+  ret = vfmah_lane_f16 (src1[N], src2[N], VECT_VAR (vsrc3, float, 16, 4), N);\\\n+  if (*(uint16_t *) &ret != expected[N])\\\n+    abort ();\n+\n+  DECL_VARIABLE(vsrc3, float, 16, 4);\n+  VLOAD (vsrc3, src3, , float, f, 16, 4);\n+  float16_t ret;\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+\n+#undef CHECK_LANE\n+#define CHECK_LANE(N) \\\n+  ret = vfmah_laneq_f16 (src1[N], src2[N], VECT_VAR (vsrc3, float, 16, 8), N);\\\n+  if (*(uint16_t *) &ret != expected_laneq[N]) \\\n+\t  abort ();\n+\n+  DECL_VARIABLE(vsrc3, float, 16, 8);\n+  VLOAD (vsrc3, src3, q, float, f, 16, 8);\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+  CHECK_LANE(4)\n+  CHECK_LANE(5)\n+  CHECK_LANE(6)\n+  CHECK_LANE(7)\n+\n+#undef CHECK_LANE\n+#define CHECK_LANE(N) \\\n+  ret = vfmsh_lane_f16 (src1[N], src2[N], VECT_VAR (vsrc3, float, 16, 4), N);\\\n+  if (*(uint16_t *) &ret != expected_fms[N])\\\n+    abort ();\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+\n+#undef CHECK_LANE\n+#define CHECK_LANE(N) \\\n+  ret = vfmsh_laneq_f16 (src1[N], src2[N], VECT_VAR (vsrc3, float, 16, 8), N);\\\n+  if (*(uint16_t *) &ret != expected_fms_laneq[N]) \\\n+\t  abort ();\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+  CHECK_LANE(4)\n+  CHECK_LANE(5)\n+  CHECK_LANE(6)\n+  CHECK_LANE(7)\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vfmash_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "182463ed74e404d963a4ef1eb1e8bcb3c3b6960b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmaxh_f16_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 123.4\n+#define B -567.8\n+#define C -34.8\n+#define D 1024\n+#define E 663.1\n+#define F 169.1\n+#define G -4.8\n+#define H 77\n+\n+float16_t input_1[] = { A, B, C, D };\n+float16_t input_2[] = { E, F, G, H };\n+float16_t expected[] = { E, F, G, D };\n+\n+#define TEST_MSG \"VMAXH_F16\"\n+#define INSN_NAME vmaxh_f16\n+\n+#define INPUT_1 input_1\n+#define INPUT_2 input_2\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "d8efbcac693937ee4775d0be9348323d9e0999ba", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vminh_f16_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 123.4\n+#define B -567.8\n+#define C -34.8\n+#define D 1024\n+#define E 663.1\n+#define F 169.1\n+#define G -4.8\n+#define H 77\n+\n+float16_t input_1[] = { A, B, C, D };\n+float16_t input_2[] = { E, F, G, H };\n+float16_t expected[] = { A, B, C, H };\n+\n+#define TEST_MSG \"VMINH_F16\"\n+#define INSN_NAME vminh_f16\n+\n+#define INPUT_1 input_1\n+#define INPUT_2 input_2\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "4cd5c37c632def4b2bb8dc1783640c53ec76f42f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulh_lane_f16_1.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_lane_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (-56.8)\n+#define C FP16_C (-34.8)\n+#define D FP16_C (12)\n+#define E FP16_C (63.1)\n+#define F FP16_C (19.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (77)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-8)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (-9.7)\n+\n+extern void abort ();\n+\n+float16_t src1[8] = { A, B, C, D, I, J, K, L };\n+VECT_VAR_DECL (src2, float, 16, 4) [] = { E, F, G, H };\n+VECT_VAR_DECL (src2, float, 16, 8) [] = { E, F, G, H, M, N, O, P };\n+\n+/* Expected results for vmulh_lane.  */\n+uint16_t expected[4] = { 0x629B /* A * E.  */, 0xE43D /* B * F.  */,\n+\t\t\t 0x5939 /* C * G.  */, 0x6338 /* D * H.  */ };\n+\n+\n+/* Expected results for vmulh_lane.  */\n+uint16_t expected_laneq[8] = { 0x629B /* A * E.  */,\n+\t\t\t       0xE43D /* B * F.  */,\n+\t\t\t       0x5939 /* C * G.  */,\n+\t\t\t       0x6338 /* D * H.  */,\n+\t\t\t       0x53A0 /* I * M.  */,\n+\t\t\t       0x60E0 /* J * N.  */,\n+\t\t\t       0xCA2C /* K * O.  */,\n+\t\t\t       0xE36E /* L * P.  */ };\n+\n+void exec_vmulh_lane_f16 (void)\n+{\n+#define CHECK_LANE(N)\\\n+  ret = vmulh_lane_f16 (src1[N], VECT_VAR (vsrc2, float, 16, 4), N);\\\n+  if (*(uint16_t *) &ret != expected[N])\\\n+    abort ();\n+\n+  DECL_VARIABLE(vsrc2, float, 16, 4);\n+  VLOAD (vsrc2, src2, , float, f, 16, 4);\n+  float16_t ret;\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+\n+#undef CHECK_LANE\n+#define CHECK_LANE(N)\\\n+  ret = vmulh_laneq_f16 (src1[N], VECT_VAR (vsrc2, float, 16, 8), N);\\\n+  if (*(uint16_t *) &ret != expected_laneq[N])\\\n+    abort ();\n+\n+  DECL_VARIABLE(vsrc2, float, 16, 8);\n+  VLOAD (vsrc2, src2, q, float, f, 16, 8);\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+  CHECK_LANE(4)\n+  CHECK_LANE(5)\n+  CHECK_LANE(6)\n+  CHECK_LANE(7)\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmulh_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "66c744ce1c0229966daf05e80d02385aa8cb2338", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulxh_f16_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 13.4\n+#define B __builtin_inff ()\n+#define C -34.8\n+#define D -__builtin_inff ()\n+#define E 63.1\n+#define F 0.0\n+#define G -4.8\n+#define H 0.0\n+\n+#define I 0.7\n+#define J -__builtin_inff ()\n+#define K 11.23\n+#define L 98\n+#define M 87.1\n+#define N -0.0\n+#define O -1.1\n+#define P 7\n+\n+float16_t input_1[] = { A, B, C, D, I, J, K, L };\n+float16_t input_2[] = { E, F, G, H, M, N, O, P };\n+uint16_t expected[] = { 0x629B /* A * E.  */,\n+\t\t\t0x4000 /* FP16_C (2.0f).  */,\n+\t\t\t0x5939 /* C * G.  */,\n+\t\t\t0xC000 /* FP16_C (-2.0f).  */,\n+\t\t\t0x53A0 /* I * M.  */,\n+\t\t\t0x4000 /* FP16_C (2.0f).  */,\n+\t\t\t0xCA2C /* K * O.  */,\n+\t\t\t0x615C /* L * P.  */ };\n+\n+#define TEST_MSG \"VMULXH_F16\"\n+#define INSN_NAME vmulxh_f16\n+\n+#define INPUT_1 input_1\n+#define INPUT_2 input_2\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "90a5be8de4fcac4c226039fa3734b07a5b48c0cf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulxh_lane_f16_1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulxh_lane_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (__builtin_inff ())\n+#define C FP16_C (-34.8)\n+#define D FP16_C (-__builtin_inff ())\n+#define E FP16_C (63.1)\n+#define F FP16_C (0.0)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (0.0)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-__builtin_inff ())\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-0.0)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (7)\n+\n+extern void abort ();\n+\n+float16_t src1[8] = { A, B, C, D, I, J, K, L };\n+VECT_VAR_DECL (src2, float, 16, 4) [] = { E, F, G, H };\n+VECT_VAR_DECL (src2, float, 16, 8) [] = { E, F, G, H, M, N, O, P };\n+\n+/* Expected results for vmulxh_lane.  */\n+uint16_t expected[4] = { 0x629B /* A * E.  */,\n+\t\t\t 0x4000 /* FP16_C (2.0f).  */,\n+\t\t\t 0x5939 /* C * G.  */,\n+\t\t\t 0xC000 /* FP16_C (-2.0f).  */ };\n+\n+/* Expected results for vmulxh_lane.  */\n+uint16_t expected_laneq[8] = { 0x629B /* A * E.  */,\n+\t\t\t       0x4000 /* FP16_C (2.0f).  */,\n+\t\t\t       0x5939 /* C * G.  */,\n+\t\t\t       0xC000 /* FP16_C (-2.0f).  */,\n+\t\t\t       0x53A0 /* I * M.  */,\n+\t\t\t       0x4000 /* FP16_C (2.0f).  */,\n+\t\t\t       0xCA2C /* K * O.  */,\n+\t\t\t       0x615C /* L * P.  */ };\n+\n+void exec_vmulxh_lane_f16 (void)\n+{\n+#define CHECK_LANE(N)\\\n+  ret = vmulxh_lane_f16 (src1[N], VECT_VAR (vsrc2, float, 16, 4), N);\\\n+  if (*(uint16_t *) &ret != expected[N])\\\n+    abort ();\n+\n+  DECL_VARIABLE(vsrc2, float, 16, 4);\n+  VLOAD (vsrc2, src2, , float, f, 16, 4);\n+  float16_t ret;\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+\n+#undef CHECK_LANE\n+#define CHECK_LANE(N)\\\n+  ret = vmulxh_laneq_f16 (src1[N], VECT_VAR (vsrc2, float, 16, 8), N);\\\n+  if (*(uint16_t *) &ret != expected_laneq[N])\\\n+    abort ();\n+\n+  DECL_VARIABLE(vsrc2, float, 16, 8);\n+  VLOAD (vsrc2, src2, q, float, f, 16, 8);\n+\n+  CHECK_LANE(0)\n+  CHECK_LANE(1)\n+  CHECK_LANE(2)\n+  CHECK_LANE(3)\n+  CHECK_LANE(4)\n+  CHECK_LANE(5)\n+  CHECK_LANE(6)\n+  CHECK_LANE(7)\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmulxh_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "3740d6afa681786762d25bf039bba38f18d0a0f0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecpeh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpeh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpeh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpeh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 123.4\n+#define B 567.8\n+#define C 34.8\n+#define D 1024\n+#define E 663.1\n+#define F 144.0\n+#define G 4.8\n+#define H 77\n+\n+#define RECP_A 0x2028 /* 1/A.  */\n+#define RECP_B 0x1734 /* 1/B.  */\n+#define RECP_C 0x275C /* 1/C.  */\n+#define RECP_D 0x13FC /* 1/D.  */\n+#define RECP_E 0x162C /* 1/E.  */\n+#define RECP_F 0x1F18 /* 1/F.  */\n+#define RECP_G 0x32A8 /* 1/G.  */\n+#define RECP_H 0x22A4 /* 1/H.  */\n+\n+float16_t input[] = { A, B, C, D, E, F, G, H };\n+uint16_t expected[] = { RECP_A, RECP_B, RECP_C, RECP_D,\n+\t\t        RECP_E, RECP_F, RECP_G, RECP_H };\n+\n+#define TEST_MSG \"VRECPEH_F16\"\n+#define INSN_NAME vrecpeh_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "3e6b24e43788bc3700362ebb05cb81ae18067964", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecpsh_f16_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpsh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpsh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpsh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 12.4\n+#define B -5.8\n+#define C -3.8\n+#define D 10\n+#define E 66.1\n+#define F 16.1\n+#define G -4.8\n+#define H -77\n+\n+#define I 0.7\n+#define J -78\n+#define K 10.23\n+#define L 98\n+#define M 87\n+#define N -87.81\n+#define O -1.1\n+#define P 47.8\n+\n+float16_t input_1[] = { A, B, C, D, I, J, K, L };\n+float16_t input_2[] = { E, F, G, H, M, N, O, P };\n+uint16_t expected[] = { 0xE264 /* 2.0f - A * E.  */,\n+\t\t\t0x55F6 /* 2.0f - B * F.  */,\n+\t\t\t0xCC10 /* 2.0f - C * G.  */,\n+\t\t\t0x6208 /* 2.0f - D * H.  */,\n+\t\t\t0xD35D /* 2.0f - I * M.  */,\n+\t\t\t0xEEB0 /* 2.0f - J * N.  */,\n+\t\t\t0x4A9F /* 2.0f - K * O.  */,\n+\t\t\t0xEC93 /* 2.0f - L * P.  */ };\n+\n+#define TEST_MSG \"VRECPSH_F16\"\n+#define INSN_NAME vrecpsh_f16\n+\n+#define INPUT_1 input_1\n+#define INPUT_2 input_2\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "fc02b6b77600214b3edc71c0be8eab8ecc0a1292", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecpxh_f16_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpxh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpxh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpxh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+\n+float16_t input[] = { 123.4, 567.8, 34.8, 1024, 663.1, 144.0, 4.8, 77 };\n+/*  Expected results are calculated by:\n+  for (index = 0; index < 8; index++)\n+    {\n+      uint16_t src_cast = * (uint16_t *) &src[index];\n+      * (uint16_t *) &expected[index] =\n+\t(src_cast & 0x8000) | (~src_cast & 0x7C00);\n+    }  */\n+uint16_t expected[8] = { 0x2800, 0x1C00, 0x2C00, 0x1800,\n+\t\t\t 0x1C00, 0x2400, 0x3800, 0x2800 };\n+\n+#define TEST_MSG \"VRECPXH_F16\"\n+#define INSN_NAME vrecpxh_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "7c0e6195be69525e3106bba2648dde8bf783b16e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsqrteh_f16_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrteh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrteh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrteh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] = { 123.4, 67.8, 34.8, 24.0, 66.1, 144.0, 4.8, 77.0 };\n+uint16_t expected[] = { 0x2DC4 /* FP16_C (1/__builtin_sqrtf (123.4)).  */,\n+\t\t\t0x2FC8 /* FP16_C (1/__builtin_sqrtf (67.8)).  */,\n+\t\t\t0x316C /* FP16_C (1/__builtin_sqrtf (34.8)).  */,\n+\t\t\t0x3288 /* FP16_C (1/__builtin_sqrtf (24.0)).  */,\n+\t\t\t0x2FDC /* FP16_C (1/__builtin_sqrtf (66.1)).  */,\n+\t\t\t0x2D54 /* FP16_C (1/__builtin_sqrtf (144.0)).  */,\n+\t\t\t0x3750 /* FP16_C (1/__builtin_sqrtf (4.8)).  */,\n+\t\t\t0x2F48 /* FP16_C (1/__builtin_sqrtf (77.0)).  */ };\n+\n+#define TEST_MSG \"VRSQRTEH_F16\"\n+#define INSN_NAME vrsqrteh_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "a9753a4df063fb629abca90c8a4cb4cced691837", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsqrtsh_f16_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrtsh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/174e0b00c1875420014bd7f32bffd5070f5d5cba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrtsh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrtsh_f16_1.c?ref=174e0b00c1875420014bd7f32bffd5070f5d5cba", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+#define A 12.4\n+#define B -5.8\n+#define C -3.8\n+#define D 10\n+#define E 66.1\n+#define F 16.1\n+#define G -4.8\n+#define H -77\n+\n+#define I 0.7\n+#define J -78\n+#define K 10.23\n+#define L 98\n+#define M 87\n+#define N -87.81\n+#define O -1.1\n+#define P 47.8\n+\n+float16_t input_1[] = { A, B, C, D, I, J, K, L };\n+float16_t input_2[] = { E, F, G, H, M, N, O, P };\n+uint16_t expected[] = { 0xDE62 /* (3.0f + (-A) * E) / 2.0f.  */,\n+\t\t\t0x5206 /* (3.0f + (-B) * F) / 2.0f.  */,\n+\t\t\t0xC7A0 /* (3.0f + (-C) * G) / 2.0f.  */,\n+\t\t\t0x5E0A /* (3.0f + (-D) * H) / 2.0f.  */,\n+\t\t\t0xCF3D /* (3.0f + (-I) * M) / 2.0f.  */,\n+\t\t\t0xEAB0 /* (3.0f + (-J) * N) / 2.0f.  */,\n+\t\t\t0x471F /* (3.0f + (-K) * O) / 2.0f.  */,\n+\t\t\t0xE893 /* (3.0f + (-L) * P) / 2.0f.  */ };\n+\n+#define TEST_MSG \"VRSQRTSH_F16\"\n+#define INSN_NAME vrsqrtsh_f16\n+\n+#define INPUT_1 input_1\n+#define INPUT_2 input_2\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}]}