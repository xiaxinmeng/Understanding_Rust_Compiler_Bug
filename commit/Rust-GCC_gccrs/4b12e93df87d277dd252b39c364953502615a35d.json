{"sha": "4b12e93df87d277dd252b39c364953502615a35d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxMmU5M2RmODdkMjc3ZGQyNTJiMzljMzY0OTUzNTAyNjE1YTM1ZA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2012-03-26T09:35:18Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2012-03-26T09:35:18Z"}, "message": "vms.h (LINK_SPEC): Simplify.\n\nlibgcc/\n2012-03-26  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/alpha/vms.h (LINK_SPEC): Simplify.\n\t(STARTFILE_SPEC): Remove -mvms-return-codes handling.\n\t(NAME__MAIN, SYMBOL__MAIN): Remove.\n\t(VMS_DEBUG_MAIN_POINTER): Remove.\n\t* config/ia64/vms.h: Likewise.\n\t* config/alpha/alpha.c (alpha_start_function): Move vms_debug_main\n\tcode to vms.c.  Call vms_start_function.\n\t* config/ia64/ia64.c (ia64_start_function): Likewise.\n\t* config/vms/vms-protos.h (vms_start_function): Declare.\n\t* config/vms/vms.c (vms_start_function): New function.\n\t* config/vms/vms.h (MATH_LIBRARY): Define.\n\t(VMS_DEBUG_MAIN_POINTER): Define.\n\ngcc/\n2012-03-26  Tristan Gingold  <gingold@adacore.com>\n\n\t* config/alpha/vms.h (LINK_SPEC): Simplify.\n\t(STARTFILE_SPEC): Remove -mvms-return-codes handling.\n\t(NAME__MAIN, SYMBOL__MAIN): Remove.\n\t(VMS_DEBUG_MAIN_POINTER): Remove.\n\t* config/ia64/vms.h: Likewise.\n\t* config/alpha/alpha.c (alpha_start_function): Move vms_debug_main\n\tcode to vms.c.  Call vms_start_function.\n\t* config/ia64/ia64.c (ia64_start_function): Likewise.\n\t* config/vms/vms-protos.h (vms_start_function): Declare.\n\t* config/vms/vms.c (vms_start_function): New function.\n\t* config/vms/vms.h (MATH_LIBRARY): Define.\n\t(VMS_DEBUG_MAIN_POINTER): Define.\n\nFrom-SVN: r185791", "tree": {"sha": "a973198f8cc041f46894699052afb7913081bb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a973198f8cc041f46894699052afb7913081bb3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b12e93df87d277dd252b39c364953502615a35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b12e93df87d277dd252b39c364953502615a35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b12e93df87d277dd252b39c364953502615a35d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b12e93df87d277dd252b39c364953502615a35d/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db9f46a92723506a064fba0b58e27fd1c2f1a1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9f46a92723506a064fba0b58e27fd1c2f1a1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9f46a92723506a064fba0b58e27fd1c2f1a1d8"}], "stats": {"total": 243, "additions": 147, "deletions": 96}, "files": [{"sha": "daa9b83c6ed870cfc037b9b2cb86b3c418977fd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -1,3 +1,18 @@\n+2012-03-26  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/alpha/vms.h (LINK_SPEC): Simplify.\n+\t(STARTFILE_SPEC): Remove -mvms-return-codes handling.\n+\t(NAME__MAIN, SYMBOL__MAIN): Remove.\n+\t(VMS_DEBUG_MAIN_POINTER): Remove.\n+\t* config/ia64/vms.h: Likewise.\n+\t* config/alpha/alpha.c (alpha_start_function): Move vms_debug_main\n+\tcode to vms.c.  Call vms_start_function.\n+\t* config/ia64/ia64.c (ia64_start_function): Likewise.\n+\t* config/vms/vms-protos.h (vms_start_function): Declare.\n+\t* config/vms/vms.c (vms_start_function): New function.\n+\t* config/vms/vms.h (MATH_LIBRARY): Define.\n+\t(VMS_DEBUG_MAIN_POINTER): Define.\n+\n 2012-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/52629"}, {"sha": "c52fc503b5610ff58fded5df63a22499ecd0da05", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -7866,14 +7866,7 @@ alpha_start_function (FILE *file, const char *fnname,\n   int i;\n \n #if TARGET_ABI_OPEN_VMS\n-  if (vms_debug_main\n-      && strncmp (vms_debug_main, fnname, strlen (vms_debug_main)) == 0)\n-    {\n-      targetm.asm_out.globalize_label (asm_out_file, VMS_DEBUG_MAIN_POINTER);\n-      ASM_OUTPUT_DEF (asm_out_file, VMS_DEBUG_MAIN_POINTER, fnname);\n-      switch_to_section (text_section);\n-      vms_debug_main = NULL;\n-    }\n+  vms_start_function (fnname);\n #endif\n \n   alpha_fnname = fnname;"}, {"sha": "8caec548ef851a96337f52e824de8d90f1dacadc", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -43,8 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n         builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-#define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n-\n #undef PCC_STATIC_STRUCT_RETURN\n \n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n@@ -279,21 +277,14 @@ do {                                                \\\n #else\n /* Link with vms-dwarf2.o if -g (except -g0). This causes the\n    VMS link to pull all the dwarf2 debug sections together.  */\n-#define LINK_SPEC \"%{g:-g vms-dwarf2.o%s} %{g0} %{g1:-g1 vms-dwarf2.o%s} \\\n-%{g2:-g2 vms-dwarf2.o%s} %{g3:-g3 vms-dwarf2.o%s} %{shared} %{v} %{map}\"\n+#define LINK_SPEC \"%{g0} %{g*:-g vms-dwarf2.o%s} %{shared} %{v} %{map}\"\n #endif\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-\"%{!shared:%{mvms-return-codes:vcrt0.o%s} %{!mvms-return-codes:pcrt0.o%s} \\\n-    crtbegin.o%s} \\\n+#define STARTFILE_SPEC \"%{!shared:crt0.o%s crtbegin.o%s} \\\n  %{!static:%{shared:crtbeginS.o%s}}\"\n \n-#define ENDFILE_SPEC \\\n-\"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n-\n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n+#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n \n #define INIT_SECTION_ASM_OP \"\\t.section LIB$INITIALIZE,GBL,NOWRT\"\n "}, {"sha": "98a6120c9757e4827cd03385e5c0d39c1a422895", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -3649,16 +3649,8 @@ void\n ia64_start_function (FILE *file, const char *fnname,\n \t\t     tree decl ATTRIBUTE_UNUSED)\n {\n-#if VMS_DEBUGGING_INFO\n-  if (vms_debug_main\n-      && debug_info_level > DINFO_LEVEL_NONE\n-      && strncmp (vms_debug_main, fnname, strlen (vms_debug_main)) == 0)\n-    {\n-      targetm.asm_out.globalize_label (asm_out_file, VMS_DEBUG_MAIN_POINTER);\n-      ASM_OUTPUT_DEF (asm_out_file, VMS_DEBUG_MAIN_POINTER, fnname);\n-      dwarf2out_vms_debug_main_pointer ();\n-      vms_debug_main = 0;\n-    }\n+#if TARGET_ABI_OPEN_VMS\n+  vms_start_function (fnname);\n #endif\n \n   fputs (\"\\t.proc \", file);"}, {"sha": "3e0c653168617314cceda4faabbc130253c2359c", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -30,8 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)\n \n-#define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n-\n #undef MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n \n@@ -55,19 +53,16 @@ do {                                          \\\n } while (0)\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-\"%{!shared:%{mvms-return-codes:vcrt0.o%s} %{!mvms-return-codes:pcrt0.o%s} \\\n-    crtbegin.o%s} \\\n+#define STARTFILE_SPEC \"%{!shared:crt0.o%s crtbegin.o%s} \\\n  %{!static:%{shared:crtinitS.o%s crtbeginS.o%s}}\"\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-\"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n+#define ENDFILE_SPEC \"%{!shared:crtend.o%s} %{!static:%{shared:crtendS.o%s}}\"\n \n #define LINK_GCC_C_SEQUENCE_SPEC \"%G\"\n \n #undef LINK_SPEC\n-#define LINK_SPEC \"%{g*} %{map} %{save-temps} %{shared} %{v}\"\n+#define LINK_SPEC \"%{g0} %{g*:-g} %{map} %{save-temps} %{shared} %{v}\"\n \n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n@@ -89,9 +84,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS ia64_vms_init_libfuncs\n \n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n-\n #define CTOR_LIST_BEGIN asm (\".global\\tLIB$INITIALIZE#\\n\");                  \\\n STATIC func_ptr __CTOR_LIST__[1]                                             \\\n   __attribute__ ((__unused__, section(\".ctors\"), aligned(sizeof(func_ptr)))) \\"}, {"sha": "dcff82474f71524e566a2b4ba25a0eae3f82f2e7", "filename": "gcc/config/vms/vms-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-protos.h?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -31,4 +31,5 @@ extern section *vms_function_section (tree decl ATTRIBUTE_UNUSED,\n                                       enum node_frequency freq ATTRIBUTE_UNUSED,\n                                       bool startup ATTRIBUTE_UNUSED,\n                                       bool exit ATTRIBUTE_UNUSED);\n+extern void vms_start_function (const char *fname);\n #endif /* TREE_CODE */"}, {"sha": "a85fb3fb2097580d9010dba32a620a8eecde56a3", "filename": "gcc/config/vms/vms.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.c?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -23,8 +23,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"vms-protos.h\"\n-#include \"tm.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"output.h\"\n \n /* Correlation of standard CRTL names with DECCRTL function names.  */\n \n@@ -194,4 +195,43 @@ vms_function_section (tree decl ATTRIBUTE_UNUSED,\n   return NULL;\n }\n \n+/* Additionnal VMS specific code for start_function.  */\n+\n+/* Must be kept in sync with libgcc/config/vms/vms-ucrt0.c  */\n+#define VMS_MAIN_FLAGS_SYMBOL \"__gcc_main_flags\"\n+#define MAIN_FLAG_64BIT (1 << 0)\n+#define MAIN_FLAG_POSIX (1 << 1)\n+\n+void\n+vms_start_function (const char *fnname)\n+{\n+#if VMS_DEBUGGING_INFO\n+  if (vms_debug_main\n+      && debug_info_level > DINFO_LEVEL_NONE\n+      && strncmp (vms_debug_main, fnname, strlen (vms_debug_main)) == 0)\n+    {\n+      targetm.asm_out.globalize_label (asm_out_file, VMS_DEBUG_MAIN_POINTER);\n+      ASM_OUTPUT_DEF (asm_out_file, VMS_DEBUG_MAIN_POINTER, fnname);\n+      dwarf2out_vms_debug_main_pointer ();\n+      vms_debug_main = 0;\n+    }\n+#endif\n+\n+  /* Registers flags used for function main.  This is necessary for\n+     crt0 code.  */\n+  if (strcmp (fnname, \"main\") == 0)\n+    {\n+      unsigned int flags = 0;\n+\n+      if (flag_vms_pointer_size == VMS_POINTER_SIZE_64)\n+\tflags |= MAIN_FLAG_64BIT;\n+      if (!flag_vms_return_codes)\n+\tflags |= MAIN_FLAG_POSIX;\n+\n+      targetm.asm_out.globalize_label (asm_out_file, VMS_MAIN_FLAGS_SYMBOL);\n+      assemble_name (asm_out_file, VMS_MAIN_FLAGS_SYMBOL);\n+      fprintf (asm_out_file, \" = %u\\n\", flags);\n+    }\n+}\n+\n #include \"gt-vms.h\""}, {"sha": "8eb5606b09ee438b9bfd55a4cc8b666b15b2a201", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -75,10 +75,15 @@ extern void vms_c_register_includes (const char *, const char *, int);\n #define C_COMMON_OVERRIDE_OPTIONS vms_c_common_override_options ()\n \n /* VMS doesn't support other sections than .text for code.  */\n-\n #define TARGET_ASM_FUNCTION_SECTION vms_function_section\n \n /* Always use 8 bytes addresses in dwarf2 debug info.  The default value doesn't\n    work as it may be 4 bytes, which won't match gas default (8 bytes for ia64),\n    and will thus produce incorrect values.  */\n #define DWARF2_ADDR_SIZE 8\n+\n+/* No libm on VMS.  */\n+#define MATH_LIBRARY \"\"\n+\n+/* Special VMS debugger symbol to record the entry point.  */\n+#define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\""}, {"sha": "13ca113bcd7ef07bf6d1bb3ea0c41c9ff55d9b27", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -1,3 +1,13 @@\n+2012-03-26  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config/vms/vms-ucrt0.c: Update copyright years.\n+\tAdd a sanity check.\n+\t(___gcc_main_flags): Declare.\n+\t(__main): Check flags to remap argv and exit code.\n+\t* config.host (*-*-*vms*): Adjust extra_parts.\n+\t* config/vms/t-vms (vcrt0.o, pcrt0.o): Remove.\n+\t(crt0.o): Add.\n+\n 2012-03-22  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm/lib1funcs.asm (ctzsi2): New function."}, {"sha": "fdafc486e15acc0d00b1c51ae908e3994f868fc6", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -255,7 +255,7 @@ case ${host} in\n   ;;\n *-*-*vms*)\n   tmake_file=\"vms/t-vms\"\n-  extra_parts=\"vcrt0.o pcrt0.o crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n+  extra_parts=\"crt0.o crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n   ;;\n *-*-vxworks*)\n   tmake_file=t-vxworks"}, {"sha": "21e09ff4acd9bd523494f203c90018a4e8b5f34f", "filename": "libgcc/config/vms/t-vms", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvms%2Ft-vms?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -1,6 +1,3 @@\n-# Assemble startup files.\n-vcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c\n-\t$(gcc_compile) -c $<\n-\n-pcrt0.o: $(srcdir)/config/vms/vms-ucrt0.c\n-\t$(gcc_compile) -c -DCRT0_POSIX_EXIT $<\n+# Assemble startup file.\n+crt0.o: $(srcdir)/config/vms/vms-ucrt0.c\n+\t$(gcc_compile) -mpointer-size=64 -c $<"}, {"sha": "02b7bdbabe25a9840eafb0482fefa74b960a03ca", "filename": "libgcc/config/vms/vms-ucrt0.c", "status": "modified", "additions": 61, "deletions": 46, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b12e93df87d277dd252b39c364953502615a35d/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvms%2Fvms-ucrt0.c?ref=4b12e93df87d277dd252b39c364953502615a35d", "patch": "@@ -1,5 +1,5 @@\n /* VMS crt0 returning Unix style condition codes.\n-   Copyright (C) 2001, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2009, 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n \n    This file is part of GCC.\n@@ -25,12 +25,16 @@\n \n #include <stdlib.h>\n \n+/* Sanity check.  */\n+#if __INITIAL_POINTER_SIZE != 64\n+#error \"vms-ucrt0.c must be compiled with -mpointer-size=64\"\n+#endif\n+\n /* Lots of cheat to handle 32bits/64bits pointer conversions.\n    We use 'long long' for 64 bits pointers and 'int' for 32 bits pointers.  */\n \n-extern void decc$main (void *arg1, void *arg2, void *arg3,\n-                       void *image_file_desc, void *arg5, void *arg6,\n-                       int *, int *, int *);\n+extern void decc$main (void *, void *, void *, void *, unsigned int,\n+\t\t       unsigned int, int *, int *, int *);\n extern int main (int, char **, char **);\n extern int _malloc32 (int);\n \n@@ -40,88 +44,99 @@ extern int _malloc32 (int);\n #define MAIN_ASM_NAME\n #endif\n \n-int __main (void *arg1, void *arg2, void *arg3,\n-            void *image_file_desc, void *arg5, void *arg6) MAIN_ASM_NAME;\n+int __main (void *, void *, void *, void *,\n+\t    unsigned int, unsigned int) MAIN_ASM_NAME;\n \n /* From errnodef.h, but we need to emulate the globalval.  */\n extern int C$_EXIT1;\n \n /* From stsdef.h  */\n #define STS$V_MSG_NO 0x03\n #define STS$M_INHIB_MSG 0x10000000\n+/* Symbol defined while main() is compiled to record the flags used.\n+   (Note that the symbol defines the value, ie extract the bits from the\n+    address).\n+   bit 0 set for 64 bit pointers\n+   bit 1 set for posix return value.  */\n+extern char __gcc_main_flags;\n \n /* From ssdef.h  */\n #define SS$_NORMAL 1\n+#define MAIN_FLAG_64BIT (1 << 0)\n+#define MAIN_FLAG_POSIX (1 << 1)\n \n int\n-__main (void *arg1, void *arg2, void *arg3,\n-        void *image_file_desc, void *arg5, void *arg6)\n+__main (void *progxfer, void *cli_util, void *imghdr, void *image_file_desc,\n+\tunsigned int linkflag, unsigned int cliflag)\n {\n   int argc;\n   int argv;\n   int envp;\n   int status;\n-  int i;\n-  long long *long_argv;\n-  long long *long_envp;\n+  char **argv64;\n+  char **envp64;\n+  unsigned int flags = (unsigned __int64)&__gcc_main_flags;\n \n   /* The argv and envp arrays are 32 bits pointers to 32 bits pointers.  */\n-  decc$main (arg1, arg2, arg3, image_file_desc,\n-\t     arg5, arg6, &argc, &argv, &envp);\n+  decc$main (progxfer, cli_util, imghdr, image_file_desc,\n+\t     linkflag, cliflag, &argc, &argv, &envp);\n \n-  if (sizeof (void *) == 8)\n+  if (flags & MAIN_FLAG_64BIT)\n     {\n+      int i;\n+\n       /* Reallocate argv and envp with 64 bit pointers.  */\n-      long_argv = (long long *)\n-        (long long) _malloc32 (sizeof (long long) * (argc + 1));\n+      argv64 = (char **) _malloc32 (sizeof (char *) * (argc + 1));\n \n       for (i = 0; i < argc; i++)\n-        long_argv[i] = ((int *) (long long) argv)[i];\n+        argv64[i] = (char *) (__int64)(((int *) (__int64) argv)[i]);\n \n-      long_argv[argc] = 0;\n+      argv64[argc] = NULL;\n \n-      for (i = 0; ((int *) (long long) envp)[i]; i++)\n+      for (i = 0; ((int *) (__int64) envp)[i]; i++)\n         ;\n-      long_envp = (long long *)\n-        (long long) _malloc32 (sizeof (long long) * (i + 1));\n+      envp64 = (char **) _malloc32 (sizeof (char *) * (i + 1));\n \n-      for (i = 0; ((int *) (long long) envp)[i]; i++)\n-        long_envp[i] = ((int *) (long long) envp)[i];\n+      for (i = 0; ((int *) (__int64) envp)[i]; i++)\n+        envp64[i] = (char *)(__int64)(((int *) (__int64) envp)[i]);\n \n-      long_envp[i] = 0;\n+      envp64[i] = NULL;\n     }\n   else\n     {\n-      long_argv = (long long *) argv;\n-      long_envp = (long long *) envp;\n+      argv64 = (char **)(__int64)argv;\n+      envp64 = (char **)(__int64)envp;\n     }\n-  status = main (argc, (char **)long_argv, (char **)long_envp);\n \n-#ifdef CRT0_POSIX_EXIT\n-  /* Map into a range of 0 - 255.  */\n-  status = status & 255;\n+  status = main (argc, argv64, envp64);\n \n-  if (status > 0)\n+  if (flags & MAIN_FLAG_POSIX)\n     {\n-      int save_status = status;\n+      /* Map into a range of 0 - 255.  */\n+      status &= 255;\n \n-      status = (long) &C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n-\n-      /* An exit failure status requires a \"severe\" error.  All status values\n-\t are defined in errno with a successful (1) severity but can be\n-\t changed to an error (2) severity by adding 1.  In addition for\n-\t compatibility with UNIX exit() routines we inhibit a run-time error\n-\t message from being generated on exit(1).  */\n-\n-      if (save_status == 1)\n+      if (status != 0)\n \t{\n-\t  status++;\n-\t  status |= STS$M_INHIB_MSG;\n+\t  int save_status = status;\n+\n+\t  status = (__int64) &C$_EXIT1 + ((status - 1) << STS$V_MSG_NO);\n+\n+\t  /* An exit failure status requires a \"severe\" error.  All\n+\t     status values are defined in errno with a successful (1)\n+\t     severity but can be changed to an error (2) severity by\n+\t     adding 1.  In addition for compatibility with UNIX exit()\n+\t     routines we inhibit a run-time error message from being\n+\t     generated on exit(1).  */\n+\n+\t  if (save_status == 1)\n+\t    {\n+\t      status++;\n+\t      status |= STS$M_INHIB_MSG;\n+\t    }\n \t}\n+      else\n+\tstatus = SS$_NORMAL;\n     }\n-  else\n-    status = SS$_NORMAL;\n-#endif /* CRT0_POSIX_EXIT */\n \n   return status;\n }"}]}