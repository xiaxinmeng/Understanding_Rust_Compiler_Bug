{"sha": "bdf2ced9051950168dda357983e58f234363ef28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmMmNlZDkwNTE5NTAxNjhkZGEzNTc5ODNlNThmMjM0MzYzZWYyOA==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "2000-04-09T04:52:43Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-04-09T04:52:43Z"}, "message": "StringBuffer.java (ensureCapacity): Don't call Math::max.\n\n2000-04-08  Anthony Green  <green@cygnus.com>\n\n\t* java/lang/StringBuffer.java (ensureCapacity): Don't call Math::max.\n\t(ensureCapacity_unsynchronized): New private method.\n\t(append): Use ensureCapacity_unsynchronized.\n\nFrom-SVN: r33036", "tree": {"sha": "6c21e60540a8bcebe9639736b0a59fd718b68044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c21e60540a8bcebe9639736b0a59fd718b68044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf2ced9051950168dda357983e58f234363ef28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf2ced9051950168dda357983e58f234363ef28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf2ced9051950168dda357983e58f234363ef28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf2ced9051950168dda357983e58f234363ef28/comments", "author": null, "committer": null, "parents": [{"sha": "3dbc07b651f517fa2d07de91473a30b4216d091b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbc07b651f517fa2d07de91473a30b4216d091b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbc07b651f517fa2d07de91473a30b4216d091b"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "e0a3a742279bb56abce69630007e7e07d34c0396", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf2ced9051950168dda357983e58f234363ef28/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf2ced9051950168dda357983e58f234363ef28/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bdf2ced9051950168dda357983e58f234363ef28", "patch": "@@ -1,3 +1,9 @@\n+2000-04-08  Anthony Green  <green@cygnus.com>\n+\n+\t* java/lang/StringBuffer.java (ensureCapacity): Don't call Math::max.\n+\t(ensureCapacity_unsynchronized): New private method.\n+\t(append): Use ensureCapacity_unsynchronized.\n+\n 2000-04-08  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "4034e79a2f2b42700984ad342bd090d02de07df0", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf2ced9051950168dda357983e58f234363ef28/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf2ced9051950168dda357983e58f234363ef28/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=bdf2ced9051950168dda357983e58f234363ef28", "patch": "@@ -28,7 +28,7 @@ public StringBuffer append (boolean bool)\n \n   public synchronized StringBuffer append (char ch)\n     {\n-      ensureCapacity (count + 1);\n+      ensureCapacity_unsynchronized (count + 1);\n       value[count++] = ch;\n       return this;\n     }\n@@ -63,7 +63,7 @@ public synchronized StringBuffer append (String str)\n       if (str == null)\n \tstr = \"null\";\n       int len = str.length();\n-      ensureCapacity (count + len);\n+      ensureCapacity_unsynchronized (count + len);\n       str.getChars(0, len, value, count);\n       count += len;\n       return this;\n@@ -76,7 +76,7 @@ public StringBuffer append (char[] data)\n \n   public synchronized StringBuffer append (char[] data, int offset, int count)\n     {\n-      ensureCapacity (this.count + count);\n+      ensureCapacity_unsynchronized (this.count + count);\n       System.arraycopy(data, offset, value, this.count, count);\n       this.count += count;\n       return this;\n@@ -104,7 +104,27 @@ public synchronized void ensureCapacity (int minimumCapacity)\n \t  int max = (minimumCapacity > value.length\n \t\t     ? value.length*2+2\n \t\t     : value.length);\n-\t  minimumCapacity = Math.max(minimumCapacity, max);\n+\t  minimumCapacity = (minimumCapacity < max ? max : minimumCapacity);\n+\t  char[] nb = new char[minimumCapacity];\n+\t  System.arraycopy(value, 0, nb, 0, count);\n+\t  value = nb;\n+\t  shared = false;\n+\t}\n+    }\n+\n+  // ensureCapacity is used by several synchronized methods in StringBuffer.\n+  // There's no need to synchronize again.\n+  private void ensureCapacity_unsynchronized (int minimumCapacity)\n+    {\n+      if (shared || minimumCapacity > value.length)\n+\t{\n+\t  // We don't want to make a larger vector when `shared' is\n+\t  // set.  If we do, then setLength becomes very inefficient\n+\t  // when repeatedly reusing a StringBuffer in a loop.\n+\t  int max = (minimumCapacity > value.length\n+\t\t     ? value.length*2+2\n+\t\t     : value.length);\n+\t  minimumCapacity = (minimumCapacity < max ? max : minimumCapacity);\n \t  char[] nb = new char[minimumCapacity];\n \t  System.arraycopy(value, 0, nb, 0, count);\n \t  value = nb;\n@@ -132,7 +152,7 @@ public synchronized StringBuffer insert (int offset, char ch)\n     {\n       if (offset < 0 || offset > count)\n \tthrow new StringIndexOutOfBoundsException (offset);\n-      ensureCapacity (count+1);\n+      ensureCapacity_unsynchronized (count+1);\n       System.arraycopy(value, offset, value, offset+1, count-offset);\n       value[offset] = ch;\n       count++;\n@@ -172,7 +192,7 @@ public synchronized StringBuffer insert (int offset, String str)\n       if (str == null)\n \tstr = \"null\";\n       int len = str.length();\n-      ensureCapacity(count+len);\n+      ensureCapacity_unsynchronized (count+len);\n       System.arraycopy(value, offset, value, offset+len, count-offset);\n       str.getChars(0, len, value, offset);\n       count += len;\n@@ -184,7 +204,7 @@ public synchronized StringBuffer insert (int offset, char[] data)\n       if (offset < 0 || offset > count)\n \tthrow new StringIndexOutOfBoundsException (offset);\n       int len = data.length;\n-      ensureCapacity (count+len);\n+      ensureCapacity_unsynchronized (count+len);\n       System.arraycopy(value, offset, value, offset+len, count-offset);\n       System.arraycopy(data, 0, value, offset, len);\n       count += len;\n@@ -212,7 +232,7 @@ public synchronized void setCharAt (int index, char ch)\n       if (index < 0 || index >= count)\n \tthrow new StringIndexOutOfBoundsException (index);\n       // Call ensureCapacity to enforce copy-on-write.\n-      ensureCapacity (count);\n+      ensureCapacity_unsynchronized (count);\n       value[index] = ch;\n     }\n \n@@ -221,7 +241,7 @@ public synchronized void setLength (int newLength)\n       if (newLength < 0)\n \tthrow new StringIndexOutOfBoundsException (newLength);\n \n-      ensureCapacity (newLength);\n+      ensureCapacity_unsynchronized (newLength);\n       for (int i = count; i < newLength; ++i)\n \tvalue[i] = '\\0';\n       count = newLength;"}]}