{"sha": "1352ea192513e9a45808b8034df62b9434c674a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1MmVhMTkyNTEzZTlhNDU4MDhiODAzNGRmNjJiOTQzNGM2NzRhNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-06T15:55:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-06T16:24:16Z"}, "message": "libstdc++: Inline std::exception_ptr members [PR 90295]\n\nThis inlines most members of std::exception_ptr so that all operations\non a null exception_ptr can be optimized away. This benefits code like\nstd::future and coroutines where an exception_ptr object is present to\ncope with exceptional cases, but is usually not used and remains null.\n\nSince those functions were previously non-inline we have to continue to\nexport them from the library, for objects that were compiled against the\nold headers and expect to find definitions in the library.\n\nIn order to inline the copy constructor and destructor we need to export\nthe _M_addref() and _M_release() members that increment/decrement the\nreference count when copying/destroying a non-null exception_ptr. The\ncopy ctor and dtor check for null and don't call _M_addref and\n_M_release unless they need to. The checks for null pointers in\n_M_addref and _M_release are still needed because old code might call\nthem without checking for null first. But we can use __builtin_expect to\npredict that they are usually called for the non-null case.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/90295\n\t* config/abi/pre/gnu.ver (CXXABI_1.3.13): New symbol version.\n\t(exception_ptr::_M_addref(), exception_ptr::_M_release()):\n\tExport symbols.\n\t* libsupc++/eh_ptr.cc (exception_ptr::exception_ptr()):\n\tRemove out-of-line definition.\n\t(exception_ptr::exception_ptr(const exception_ptr&)):\n\tLikewise.\n\t(exception_ptr::~exception_ptr()): Likewise.\n\t(exception_ptr::operator=(const exception_ptr&)):\n\tLikewise.\n\t(exception_ptr::swap(exception_ptr&)): Likewise.\n\t(exception_ptr::_M_addref()): Add branch prediction.\n\t* libsupc++/exception_ptr.h (exception_ptr::operator bool):\n\tAdd noexcept.\n\t[!_GLIBCXX_EH_PTR_COMPAT] (operator==, operator!=): Define\n\tinline as hidden friends. Remove declarations at namespace\n\tscope.\n\t(exception_ptr::exception_ptr()): Define inline.\n\t(exception_ptr::exception_ptr(const exception_ptr&)):\n\tLikewise.\n\t(exception_ptr::~exception_ptr()): Likewise.\n\t(exception_ptr::operator=(const exception_ptr&)):\n\tLikewise.\n\t(exception_ptr::swap(exception_ptr&)): Likewise.\n\t* testsuite/util/testsuite_abi.cc: Add CXXABI_1.3.13.\n\t* testsuite/18_support/exception_ptr/90295.cc: New test.", "tree": {"sha": "5ae519fb53c29663b6444110c24b4246fffb6ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae519fb53c29663b6444110c24b4246fffb6ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1352ea192513e9a45808b8034df62b9434c674a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1352ea192513e9a45808b8034df62b9434c674a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1352ea192513e9a45808b8034df62b9434c674a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1352ea192513e9a45808b8034df62b9434c674a7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c650cd899496c4f9bc069d03d0d7ecfb632176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c650cd899496c4f9bc069d03d0d7ecfb632176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c650cd899496c4f9bc069d03d0d7ecfb632176"}], "stats": {"total": 196, "additions": 143, "deletions": 53}, "files": [{"sha": "a7f437aef7b3f3266adbe96395c89b77789db11a", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=1352ea192513e9a45808b8034df62b9434c674a7", "patch": "@@ -2625,6 +2625,15 @@ CXXABI_1.3.12 {\n \n } CXXABI_1.3.11;\n \n+CXXABI_1.3.13 {\n+\n+    # std::exception_ptr::_M_addref()\n+    _ZNSt15__exception_ptr13exception_ptr9_M_addrefEv;\n+    # std::exception_ptr::_M_release()\n+    _ZNSt15__exception_ptr13exception_ptr10_M_releaseEv;\n+\n+} CXXABI_1.3.12;\n+\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}, {"sha": "c41bdca234c7943c6ad22f64b3c4aa867ba17ca7", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=1352ea192513e9a45808b8034df62b9434c674a7", "patch": "@@ -61,41 +61,18 @@ static_assert( adjptr<__cxa_exception>()\n #endif\n }\n \n-std::__exception_ptr::exception_ptr::exception_ptr() noexcept\n-: _M_exception_object(0) { }\n-\n-\n std::__exception_ptr::exception_ptr::exception_ptr(void* obj) noexcept\n : _M_exception_object(obj)  { _M_addref(); }\n \n \n std::__exception_ptr::exception_ptr::exception_ptr(__safe_bool) noexcept\n-: _M_exception_object(0) { }\n-\n-\n-std::__exception_ptr::\n-exception_ptr::exception_ptr(const exception_ptr& other) noexcept\n-: _M_exception_object(other._M_exception_object)\n-{ _M_addref(); }\n-\n-\n-std::__exception_ptr::exception_ptr::~exception_ptr() noexcept\n-{ _M_release(); }\n-\n-\n-std::__exception_ptr::exception_ptr&\n-std::__exception_ptr::\n-exception_ptr::operator=(const exception_ptr& other) noexcept\n-{\n-  exception_ptr(other).swap(*this);\n-  return *this;\n-}\n+: _M_exception_object(nullptr) { }\n \n \n void\n std::__exception_ptr::exception_ptr::_M_addref() noexcept\n {\n-  if (_M_exception_object)\n+  if (__builtin_expect(_M_exception_object != nullptr, true))\n     {\n       __cxa_refcounted_exception *eh =\n \t__get_refcounted_exception_header_from_obj (_M_exception_object);\n@@ -107,7 +84,7 @@ std::__exception_ptr::exception_ptr::_M_addref() noexcept\n void\n std::__exception_ptr::exception_ptr::_M_release() noexcept\n {\n-  if (_M_exception_object)\n+  if (__builtin_expect(_M_exception_object != nullptr, true))\n     {\n       __cxa_refcounted_exception *eh =\n \t__get_refcounted_exception_header_from_obj (_M_exception_object);\n@@ -117,7 +94,7 @@ std::__exception_ptr::exception_ptr::_M_release() noexcept\n \t    eh->exc.exceptionDestructor (_M_exception_object);\n \n           __cxa_free_exception (_M_exception_object);\n-          _M_exception_object = 0;\n+          _M_exception_object = nullptr;\n         }\n     }\n }\n@@ -128,14 +105,6 @@ std::__exception_ptr::exception_ptr::_M_get() const noexcept\n { return _M_exception_object; }\n \n \n-void\n-std::__exception_ptr::exception_ptr::swap(exception_ptr &other) noexcept\n-{\n-  void *tmp = _M_exception_object;\n-  _M_exception_object = other._M_exception_object;\n-  other._M_exception_object = tmp;\n-}\n-\n \n // Retained for compatibility with CXXABI_1.3.\n void\n@@ -145,32 +114,33 @@ std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() noexcept { }\n // Retained for compatibility with CXXABI_1.3.\n bool\n std::__exception_ptr::exception_ptr::operator!() const noexcept\n-{ return _M_exception_object == 0; }\n+{ return _M_exception_object == nullptr; }\n \n \n // Retained for compatibility with CXXABI_1.3.\n std::__exception_ptr::exception_ptr::operator __safe_bool() const noexcept\n {\n-  return _M_exception_object ? &exception_ptr::_M_safe_bool_dummy : 0;\n+  return _M_exception_object ? &exception_ptr::_M_safe_bool_dummy : nullptr;\n }\n \n-\n const std::type_info*\n std::__exception_ptr::exception_ptr::__cxa_exception_type() const noexcept\n {\n   __cxa_exception *eh = __get_exception_header_from_obj (_M_exception_object);\n   return eh->exceptionType;\n }\n \n-\n-bool std::__exception_ptr::operator==(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs) noexcept\n+// Retained for compatibility with CXXABI_1.3.12.\n+bool\n+std::__exception_ptr::operator==(const exception_ptr& lhs,\n+\t\t\t\t const exception_ptr& rhs) noexcept\n { return lhs._M_exception_object == rhs._M_exception_object; }\n \n-\n-bool std::__exception_ptr::operator!=(const exception_ptr& lhs,\n-\t\t\t\t      const exception_ptr& rhs) noexcept\n-{ return !(lhs == rhs);}\n+// Retained for compatibility with CXXABI_1.3.12.\n+bool\n+std::__exception_ptr::operator!=(const exception_ptr& lhs,\n+\t\t\t\t const exception_ptr& rhs) noexcept\n+{ return !(lhs == rhs); }\n \n \n std::exception_ptr"}, {"sha": "a053122d48e7cee7e2241c41805d83df08a110d6", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=1352ea192513e9a45808b8034df62b9434c674a7", "patch": "@@ -100,12 +100,12 @@ namespace std\n \n #if __cplusplus >= 201103L\n       exception_ptr(nullptr_t) noexcept\n-      : _M_exception_object(0)\n+      : _M_exception_object(nullptr)\n       { }\n \n       exception_ptr(exception_ptr&& __o) noexcept\n       : _M_exception_object(__o._M_exception_object)\n-      { __o._M_exception_object = 0; }\n+      { __o._M_exception_object = nullptr; }\n #endif\n \n #if (__cplusplus < 201103L) || defined (_GLIBCXX_EH_PTR_COMPAT)\n@@ -142,35 +142,96 @@ namespace std\n #endif\n \n #if __cplusplus >= 201103L\n-      explicit operator bool() const\n+      explicit operator bool() const noexcept\n       { return _M_exception_object; }\n #endif\n \n-      friend bool \n+#ifdef _GLIBCXX_EH_PTR_COMPAT\n+      friend bool\n       operator==(const exception_ptr&, const exception_ptr&)\n \t_GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n+#elif __cpp_impl_three_way_comparison >= 201907L\n+      friend bool\n+      operator==(const exception_ptr&, const exception_ptr&) noexcept = default;\n+#else\n+      friend bool\n+      operator==(const exception_ptr& __x, const exception_ptr& __y)\n+      _GLIBCXX_USE_NOEXCEPT\n+      { return __x._M_exception_object == __y._M_exception_object; }\n+\n+      friend bool\n+      operator!=(const exception_ptr& __x, const exception_ptr& __y)\n+      _GLIBCXX_USE_NOEXCEPT\n+      { return __x._M_exception_object != __y._M_exception_object; }\n+#endif\n \n       const class std::type_info*\n       __cxa_exception_type() const _GLIBCXX_USE_NOEXCEPT\n \t__attribute__ ((__pure__));\n     };\n \n-    /// @relates exception_ptr @{\n+#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    inline\n+#endif\n+    exception_ptr::exception_ptr() _GLIBCXX_NOEXCEPT\n+    : _M_exception_object(0)\n+    { }\n+\n+#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    inline\n+#endif\n+    exception_ptr::exception_ptr(const exception_ptr& other) _GLIBCXX_NOEXCEPT\n+    : _M_exception_object(other._M_exception_object)\n+    {\n+      if (_M_exception_object)\n+\t_M_addref();\n+    }\n+\n+#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    inline\n+#endif\n+    exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT\n+    {\n+      if (_M_exception_object)\n+\t_M_release();\n+    }\n+\n+#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    inline\n+#endif\n+    exception_ptr&\n+    exception_ptr::operator=(const exception_ptr& other) _GLIBCXX_USE_NOEXCEPT\n+    {\n+      exception_ptr(other).swap(*this);\n+      return *this;\n+    }\n \n+#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    inline\n+#endif\n+    void\n+    exception_ptr::swap(exception_ptr &other) _GLIBCXX_USE_NOEXCEPT\n+    {\n+      void *tmp = _M_exception_object;\n+      _M_exception_object = other._M_exception_object;\n+      other._M_exception_object = tmp;\n+    }\n+\n+#ifdef _GLIBCXX_EH_PTR_COMPAT\n     bool \n     operator==(const exception_ptr&, const exception_ptr&)\n       _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n     bool \n     operator!=(const exception_ptr&, const exception_ptr&)\n       _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n+#endif\n \n+    /// @relates exception_ptr\n     inline void\n     swap(exception_ptr& __lhs, exception_ptr& __rhs)\n     { __lhs.swap(__rhs); }\n \n-    // @}\n-\n     /// @cond undocumented\n     template<typename _Ex>\n       inline void"}, {"sha": "fa62ff1cf1a885502b59da3a941da823c88de61d", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/90295.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F90295.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F90295.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F90295.cc?ref=1352ea192513e9a45808b8034df62b9434c674a7", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O1 -g0\" }\n+// { dg-final { scan-assembler-not \"St15__exception_ptr13exception_ptr\" } }\n+\n+#include <exception>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/90295\n+  // Operations on null exception_ptr objects should be optimised away.\n+\n+  std::exception_ptr p1;\n+  if (!(p1 == nullptr))\n+    std::rethrow_exception(p1);\n+\n+  std::exception_ptr p2 = p1;\n+  if (!(p2 == p1))\n+    std::rethrow_exception(p2);\n+\n+  p1 = p2;\n+  if (p1 != p2)\n+    std::rethrow_exception(p1);\n+\n+  swap(p1, p2);\n+  if (nullptr != p1)\n+    std::rethrow_exception(p1);\n+\n+  p1 = std::exception_ptr(nullptr);\n+  if (!(p1 == p2))\n+    std::rethrow_exception(p1);\n+}"}, {"sha": "33b9ec159355579c1562fda9f4e8ebfdfbe3fe9b", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1352ea192513e9a45808b8034df62b9434c674a7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=1352ea192513e9a45808b8034df62b9434c674a7", "patch": "@@ -225,6 +225,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.10\");\n       known_versions.push_back(\"CXXABI_1.3.11\");\n       known_versions.push_back(\"CXXABI_1.3.12\");\n+      known_versions.push_back(\"CXXABI_1.3.13\");\n       known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_FLOAT128\");\n     }\n@@ -246,7 +247,7 @@ check_version(symbol& test, bool added)\n \t  // XXX remove next line when GLIBCXX_3.4.30 is added and baselines\n \t  // have been regenerated to include GLIBCXX_LDBL_3.4.29 symbols:\n \t\t     || test.version_name == \"GLIBCXX_LDBL_3.4.29\"\n-\t\t     || test.version_name == \"CXXABI_1.3.12\"\n+\t\t     || test.version_name == \"CXXABI_1.3.13\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");\n       if (added && !latestp)"}]}