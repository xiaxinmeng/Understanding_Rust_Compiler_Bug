{"sha": "fbe23ee7418e3a909ef68eae235c040b9c31402e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlMjNlZTc0MThlM2E5MDllZjY4ZWFlMjM1YzA0MGI5YzMxNDAyZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-09T00:00:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-09T00:00:06Z"}, "message": "(finish_enum): Store layout results into variant types.\n\nFrom-SVN: r4045", "tree": {"sha": "fd3ff0dde4571aca0c02bc85c61bc81a2767b53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd3ff0dde4571aca0c02bc85c61bc81a2767b53d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe23ee7418e3a909ef68eae235c040b9c31402e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe23ee7418e3a909ef68eae235c040b9c31402e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe23ee7418e3a909ef68eae235c040b9c31402e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe23ee7418e3a909ef68eae235c040b9c31402e/comments", "author": null, "committer": null, "parents": [{"sha": "6d9efc7bd691b2cec9c35fd80bf9a03c62dd8044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9efc7bd691b2cec9c35fd80bf9a03c62dd8044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9efc7bd691b2cec9c35fd80bf9a03c62dd8044"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "ba722bc5046e07913e38fcc7b9d39b81d168f628", "filename": "gcc/c-decl.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe23ee7418e3a909ef68eae235c040b9c31402e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe23ee7418e3a909ef68eae235c040b9c31402e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=fbe23ee7418e3a909ef68eae235c040b9c31402e", "patch": "@@ -5384,7 +5384,7 @@ tree\n finish_enum (enumtype, values)\n      register tree enumtype, values;\n {\n-  register tree pair;\n+  register tree pair, tem;\n   tree minnode = 0, maxnode = 0;\n   register HOST_WIDE_INT maxvalue = 0;\n   register HOST_WIDE_INT minvalue = 0;\n@@ -5474,6 +5474,19 @@ finish_enum (enumtype, values)\n \n   TYPE_VALUES (enumtype) = values;\n \n+  /* Fix up all variant types of this enum type.  */\n+  for (tem = TYPE_MAIN_VARIANT (enumtype); tem; tem = TYPE_NEXT_VARIANT (tem))\n+    {\n+      TYPE_VALUES (tem) = TYPE_VALUES (enumtype);\n+      TYPE_MIN_VALUE (tem) = TYPE_MIN_VALUE (enumtype);\n+      TYPE_MAX_VALUE (tem) = TYPE_MAX_VALUE (enumtype);\n+      TYPE_SIZE (tem) = TYPE_SIZE (enumtype);\n+      TYPE_MODE (tem) = TYPE_MODE (enumtype);\n+      TYPE_PRECISION (tem) = TYPE_PRECISION (enumtype);\n+      TYPE_ALIGN (tem) = TYPE_ALIGN (enumtype);\n+      TREE_UNSIGNED (tem) = TREE_UNSIGNED (enumtype);\n+    }\n+\n   /* Finish debugging output for this type.  */\n   rest_of_type_compilation (enumtype, toplevel);\n "}]}