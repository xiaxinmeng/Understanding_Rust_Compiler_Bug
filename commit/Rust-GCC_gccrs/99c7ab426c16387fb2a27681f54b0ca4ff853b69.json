{"sha": "99c7ab426c16387fb2a27681f54b0ca4ff853b69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTljN2FiNDI2YzE2Mzg3ZmIyYTI3NjgxZjU0YjBjYTRmZjg1M2I2OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-30T17:26:40Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-11-30T17:26:40Z"}, "message": "[multiple changes]\n\n2005-11-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/15809\n\t* trans-decl.c (gfc_get_symbol_decl):  In the case of automatic\n\tcharacter length, dummy pointer arrays, build an expression for\n\tunit size of the array elements, to be picked up and used in the\n\tdescriptor dtype.\n\t* trans-io.c (gfc_trans_transfer):  Modify the detection of\n\tcomponents of derived type arrays to use the gfc_expr references\n\tinstead of the array descriptor dtype.  This allows the latter\n\tto contain expressions.\n\n2005-11-30  Erik Edelmann  <erik.edelmann@iki.fi>\n\n\tPR fortran/15809\n\t* trans-array.c (gfc_trans_deferred_array):  Allow PARM_DECLs past\n\tin addition to VAR_DECLs.\n\n2005-11-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/15809\n\t*  gfortran.dg/auto_char_dummy_array.f90: New test.\n\nFrom-SVN: r107727", "tree": {"sha": "4cab46bed130eb0f0b7437bac89bbc2298702409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cab46bed130eb0f0b7437bac89bbc2298702409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99c7ab426c16387fb2a27681f54b0ca4ff853b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c7ab426c16387fb2a27681f54b0ca4ff853b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c7ab426c16387fb2a27681f54b0ca4ff853b69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c7ab426c16387fb2a27681f54b0ca4ff853b69/comments", "author": null, "committer": null, "parents": [{"sha": "e541c31f4ca60209f17d3b44d365cfee4659b899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541c31f4ca60209f17d3b44d365cfee4659b899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e541c31f4ca60209f17d3b44d365cfee4659b899"}], "stats": {"total": 141, "additions": 116, "deletions": 25}, "files": [{"sha": "a55a82898d396eca96814c0bcb281b9d884af388", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -1,3 +1,21 @@\n+2005-11-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/15809\n+\t* trans-decl.c (gfc_get_symbol_decl):  In the case of automatic\n+\tcharacter length, dummy pointer arrays, build an expression for\n+\tunit size of the array elements, to be picked up and used in the\n+\tdescriptor dtype.\n+\t* trans-io.c (gfc_trans_transfer):  Modify the detection of\n+\tcomponents of derived type arrays to use the gfc_expr references\n+\tinstead of the array descriptor dtype.  This allows the latter\n+\tto contain expressions.\n+\n+2005-11-30  Erik Edelmann  <erik.edelmann@iki.fi>\n+\n+\tPR fortran/15809\n+\t* trans-array.c (gfc_trans_deferred_array):  Allow PARM_DECLs past\n+\tin addition to VAR_DECLs.\n+\n 2005-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* io.c (gfc_resolve_open): RESOLVE_TAG access field as well."}, {"sha": "a94d7e86f4066090682880e8a11eb100a9b23288", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -4173,7 +4173,9 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n \n   gfc_init_block (&fnblock);\n \n-  gcc_assert (TREE_CODE (sym->backend_decl) == VAR_DECL);\n+  gcc_assert (TREE_CODE (sym->backend_decl) == VAR_DECL\n+                || TREE_CODE (sym->backend_decl) == PARM_DECL);\n+\n   if (sym->ts.type == BT_CHARACTER\n       && !INTEGER_CST_P (sym->ts.cl->backend_decl))\n     gfc_trans_init_string_length (sym->ts.cl, &fnblock);"}, {"sha": "63320ae6dd443652816e2a7e3ed206b5d6b36b5e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -809,7 +809,9 @@ tree\n gfc_get_symbol_decl (gfc_symbol * sym)\n {\n   tree decl;\n+  tree etype = NULL_TREE;\n   tree length = NULL_TREE;\n+  tree tmp = NULL_TREE;\n   int byref;\n \n   gcc_assert (sym->attr.referenced);\n@@ -845,6 +847,22 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t      if (TREE_CODE (length) != INTEGER_CST)\n \t\t{\n \t\t  gfc_finish_var_decl (length, sym);\n+\n+\t\t  /* Set the element size of automatic character length\n+\t\t     length, dummy, pointer arrays.  */\n+\t\t  if (sym->attr.pointer && sym->attr.dummy\n+\t\t\t&& sym->attr.dimension)\n+\t\t    {\n+\t\t      tmp = gfc_build_indirect_ref (sym->backend_decl);\n+\t\t      etype = gfc_get_element_type (TREE_TYPE (tmp));\n+\t\t      if (TYPE_SIZE_UNIT (etype) == NULL_TREE)\n+\t\t\t{\n+\t\t\t  tmp = TYPE_SIZE_UNIT (gfc_character1_type_node);\n+\t\t\t  tmp = fold_convert (TREE_TYPE (tmp), length);\n+\t\t\t  TYPE_SIZE_UNIT (etype) = tmp;\n+\t\t\t}\n+\t\t    }\n+\n \t\t  gfc_defer_symbol_init (sym);\n \t\t}\n \t    }"}, {"sha": "98c1d1fcf8b2be73a2178d8b94c0e9419f5fb495", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -1768,6 +1768,7 @@ gfc_trans_transfer (gfc_code * code)\n   stmtblock_t block, body;\n   gfc_loopinfo loop;\n   gfc_expr *expr;\n+  gfc_ref *ref;\n   gfc_ss *ss;\n   gfc_se se;\n   tree tmp;\n@@ -1778,6 +1779,7 @@ gfc_trans_transfer (gfc_code * code)\n   expr = code->expr;\n   ss = gfc_walk_expr (expr);\n \n+  ref = NULL;\n   gfc_init_se (&se, NULL);\n \n   if (ss == gfc_ss_terminator)\n@@ -1788,33 +1790,23 @@ gfc_trans_transfer (gfc_code * code)\n     }\n   else\n     {\n-      /* Transfer an array. There are 3 options:\n-      1) An array of an intrinsic type. This is handled by transfering\n-\t the descriptor to the library.\n-      2) A derived type containing an array. Scalarized by the frontend.\n-      3) An array of derived type. Scalarized by the frontend.\n-      */\n-      if (expr->ts.type != BT_DERIVED)\n+      /* Transfer an array. If it is an array of an intrinsic\n+\t type, pass the descriptor to the library.  Otherwise\n+\t scalarize the transfer.  */\n+      if (expr->ref)\n+\t{\n+\t  for (ref = expr->ref; ref && ref->type != REF_ARRAY;\n+\t\t ref = ref->next);\n+\t  gcc_assert (ref->type == REF_ARRAY);\n+\t}\n+\n+      if (expr->ts.type != BT_DERIVED && ref && ref->next == NULL)\n \t{\n \t  /* Get the descriptor.  */\n \t  gfc_conv_expr_descriptor (&se, expr, ss);\n-\t  /* If it's not an array of derived type, transfer the array\n-\t     descriptor to the library.  */\n-\t  tmp = gfc_get_dtype (TREE_TYPE (se.expr));\n-\t  if (((TREE_INT_CST_LOW (tmp) & GFC_DTYPE_TYPE_MASK) \n-\t       >> GFC_DTYPE_TYPE_SHIFT) != GFC_DTYPE_DERIVED)\n-\t    {\n-\t      tmp = gfc_build_addr_expr (NULL, se.expr);\n-\t      transfer_array_desc (&se, &expr->ts, tmp);\n-\t      goto finish_block_label;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Cleanup the mess getting the descriptor caused.  */\n-\t      expr = code->expr;\n-\t      ss = gfc_walk_expr (expr);\n-\t      gfc_init_se (&se, NULL);\n-\t    }\n+\t  tmp = gfc_build_addr_expr (NULL, se.expr);\n+\t  transfer_array_desc (&se, &expr->ts, tmp);\n+\t  goto finish_block_label;\n \t}\n       \n       /* Initialize the scalarizer.  */"}, {"sha": "df3cbed6d930af5a10e53565a658bfa42ec5119c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -1,3 +1,8 @@\n+2005-11-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/15809\n+\t*  gfortran.dg/auto_char_dummy_array.f90: New test.\n+\n 2005-11-30  Jeff Law  <law@redhat.com>\n \n \t* g++.old-deja/g++.law/pr25000.C: New test."}, {"sha": "2ee98cfcc806498cfd666b1eb30ecb447620d06f", "filename": "gcc/testsuite/gfortran.dg/auto_char_dummy_array_1.f90", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c7ab426c16387fb2a27681f54b0ca4ff853b69/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90?ref=99c7ab426c16387fb2a27681f54b0ca4ff853b69", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+! This tests the fix for pr15809 in which automatic character length,\n+! dummy, pointer arrays were broken.\n+!\n+! contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+module global\n+  character(12), dimension(2), target :: t\n+end module global\n+\n+program oh_no_not_pr15908_again\n+  character(12), dimension(:), pointer :: ptr\n+\n+  call a (ptr, 12)\n+  if (.not.associated (ptr) ) call abort ()\n+  if (any (ptr.ne.\"abc\")) call abort ()\n+\n+  ptr => null ()              ! ptr points to 't' here.\n+  allocate (ptr(3))\n+  ptr = \"xyz\"\n+  call a (ptr, 12)\n+\n+  if (.not.associated (ptr)) call abort ()\n+  if (any (ptr.ne.\"lmn\")) call abort ()\n+\n+  call a (ptr, 0)\n+\n+  if (associated (ptr)) call abort ()\n+\n+contains\n+\n+  subroutine a (p, l)\n+    use global\n+    character(l), dimension(:), pointer :: p\n+    character(l), dimension(3)          :: s\n+\n+    s = \"lmn\"\n+\n+    if (l.ne.12) then\n+      deallocate (p)           ! ptr was allocated in main.\n+      p => null ()\n+      return\n+    end if\n+\n+    if (.not.associated (p)) then\n+      t = \"abc\"\n+      p => t\n+    else\n+      if (size (p,1).ne.3) call abort ()\n+      if (any (p.ne.\"xyz\")) call abort ()\n+      p = s\n+    end if\n+  end subroutine a\n+\n+end program oh_no_not_pr15908_again\n+"}]}