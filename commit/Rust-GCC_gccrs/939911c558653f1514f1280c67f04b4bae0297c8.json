{"sha": "939911c558653f1514f1280c67f04b4bae0297c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5OTExYzU1ODY1M2YxNTE0ZjEyODBjNjdmMDRiNGJhZTAyOTdjOA==", "commit": {"author": {"name": "Allan Sandfeld Jensen", "email": "sandfeld@kde.org", "date": "2015-01-25T18:17:46Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-01-25T18:17:46Z"}, "message": "i386.c (get_builtin_code_for_version): Add support for BMI and BMI2 multiversion functions.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.c (get_builtin_code_for_version): Add\n\tsupport for BMI and BMI2 multiversion functions.\n\t(fold_builtin_cpu): Add F_BMI and F_BMI2.\n\nlibgcc/ChangeLog:\n\n\t* config/i386/cpuinfo.c (enum processor_features): Add FEATURE_BMI and\n\tFEATURE_BMI2.\n\t(get_available_features): Detect FEATURE_BMI and FEATURE_BMI2.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/funcspec-5.c: Test new multiversion targets.\n\t* g++.dg/ext/mv17.C: Test BMI/BMI2 multiversion dispatcher.\n\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r220095", "tree": {"sha": "3c8bca97d45d736dc6840d8b8fed8493f6285dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8bca97d45d736dc6840d8b8fed8493f6285dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/939911c558653f1514f1280c67f04b4bae0297c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939911c558653f1514f1280c67f04b4bae0297c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939911c558653f1514f1280c67f04b4bae0297c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939911c558653f1514f1280c67f04b4bae0297c8/comments", "author": null, "committer": null, "parents": [{"sha": "5eb1643c2c252821621580cc1a5aeb42516926f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb1643c2c252821621580cc1a5aeb42516926f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb1643c2c252821621580cc1a5aeb42516926f0"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "f35e3c701441cb7e6be7aac26b33a0d5f112e6af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -1,3 +1,9 @@\n+2015-01-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (get_builtin_code_for_version): Add\n+\tsupport for BMI and BMI2 multiversion functions.\n+\n 2015-01-25  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* emit-rtl.h (store_bit_field): Move prototype to expmed.h."}, {"sha": "441911d9b7ef56eb35af756792a0a16c7ab76c64", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -34289,15 +34289,18 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n     P_PROC_SSE4_A,\n     P_SSE4_1,\n     P_SSE4_2,\n-    P_PROC_SSE4_2,\n     P_POPCNT,\n+    P_PROC_SSE4_2,\n     P_AVX,\n     P_PROC_AVX,\n+    P_BMI,\n+    P_PROC_BMI,\n     P_FMA4,\n     P_XOP,\n     P_PROC_XOP,\n     P_FMA,    \n     P_PROC_FMA,\n+    P_BMI2,\n     P_AVX2,\n     P_PROC_AVX2,\n     P_AVX512F,\n@@ -34323,12 +34326,14 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n       {\"sse4a\", P_SSE4_A},\n       {\"ssse3\", P_SSSE3},\n       {\"sse4.1\", P_SSE4_1},\n-      {\"sse4.2\", P_SSE4_2},\n       {\"popcnt\", P_POPCNT},\n+      {\"sse4.2\", P_SSE4_2},\n       {\"avx\", P_AVX},\n+      {\"bmi\", P_BMI},\n       {\"fma4\", P_FMA4},\n       {\"xop\", P_XOP},\n       {\"fma\", P_FMA},\n+      {\"bmi2\", P_BMI2},\n       {\"avx2\", P_AVX2},\n       {\"avx512f\", P_AVX512F}\n     };\n@@ -34423,7 +34428,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      break;\n \t    case PROCESSOR_BTVER2:\n \t      arg_str = \"btver2\";\n-\t      priority = P_PROC_AVX;\n+\t      priority = P_PROC_BMI;\n \t      break;\n \t    case PROCESSOR_BDVER1:\n \t      arg_str = \"bdver1\";\n@@ -35310,6 +35315,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     F_XOP,\n     F_FMA,\n     F_AVX512F,\n+    F_BMI,\n+    F_BMI2,\n     F_MAX\n   };\n \n@@ -35403,7 +35410,9 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"xop\",    F_XOP},\n       {\"fma\",    F_FMA},\n       {\"avx2\",   F_AVX2},\n-      {\"avx512f\",F_AVX512F}\n+      {\"avx512f\",F_AVX512F},\n+      {\"bmi\",    F_BMI},\n+      {\"bmi2\",   F_BMI2}\n     };\n \n   tree __processor_model_type = build_processor_model_struct ();"}, {"sha": "6f062e3d2be27e2ada1675ccb2007efe84316eca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -1,3 +1,8 @@\n+2015-01-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\n+\t* gcc.target/i386/funcspec-5.c: Test new multiversion targets.\n+\t* g++.dg/ext/mv17.C: Test BMI/BMI2 multiversion dispatcher.\n+\n 2015-01-25  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "87c13246ed2a2d2ca86dd3c98c714b7edb2fcdfc", "filename": "gcc/testsuite/g++.dg/ext/mv17.C", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fmv17.C?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -0,0 +1,93 @@\n+// Test case to check if Multiversioning works for BMI and BMI2.\n+\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-require-ifunc \"\" }\n+// { dg-options \"-O2\" }\n+\n+#include <assert.h>\n+\n+// Check BMI feature selection works\n+int foo () __attribute__((target(\"default\")));\n+int foo () __attribute__((target(\"bmi\")));\n+int foo () __attribute__((target(\"bmi2\")));\n+\n+// Check specialized versions for archs with BMI is chosen over generic BMI versions.\n+int bar () __attribute__((target(\"default\")));\n+int bar () __attribute__((target(\"bmi\")));\n+int bar () __attribute__((target(\"bmi2\")));\n+int bar () __attribute__((target(\"arch=btver2\")));\n+int bar () __attribute__((target(\"arch=haswell\")));\n+\n+int main ()\n+{\n+  int val = foo ();\n+\n+  if (__builtin_cpu_supports (\"bmi2\"))\n+    assert (val == 2);\n+  else if (__builtin_cpu_supports (\"bmi\"))\n+    assert (val == 1);\n+  else\n+    assert (val == 0);\n+\n+  val = bar ();\n+\n+  if (__builtin_cpu_is (\"btver2\"))\n+    assert (val == 5);\n+  else if (__builtin_cpu_is (\"haswell\"))\n+    assert (val == 6);\n+  else if (__builtin_cpu_supports (\"bmi2\"))\n+    assert (val == 2);\n+  else if (__builtin_cpu_supports (\"bmi\"))\n+    assert (val == 1);\n+  else\n+    assert (val == 0);\n+\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"bmi\")))\n+foo ()\n+{\n+  return 1;\n+}\n+int __attribute__ ((target(\"bmi2\")))\n+foo ()\n+{\n+  return 2;\n+}\n+\n+int __attribute__ ((target(\"default\")))\n+bar ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"bmi\")))\n+bar ()\n+{\n+  return 1;\n+}\n+int __attribute__ ((target(\"bmi2\")))\n+bar ()\n+{\n+  return 2;\n+}\n+\n+int __attribute__ ((target(\"arch=btver2\")))\n+bar ()\n+{\n+  return 5;\n+}\n+\n+int __attribute__ ((target(\"arch=haswell\")))\n+bar ()\n+{\n+  return 6;\n+}\n+"}, {"sha": "7185b5cb3297e3f9d9ffe209fdb69017349227b6", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -25,6 +25,8 @@ extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n extern void test_avx (void)\t\t\t__attribute__((__target__(\"avx\")));\n extern void test_avx2 (void)\t\t\t__attribute__((__target__(\"avx2\")));\n extern void test_avx512f (void)\t\t\t__attribute__((__target__(\"avx512f\")));\n+extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n+extern void test_bmi2 (void)\t\t\t__attribute__((__target__(\"bmi2\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n@@ -48,6 +50,8 @@ extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n extern void test_no_avx (void)\t\t\t__attribute__((__target__(\"no-avx\")));\n extern void test_no_avx2 (void)   \t\t__attribute__((__target__(\"no-avx2\")));\n extern void test_no_avx512f (void)   \t\t__attribute__((__target__(\"no-avx512f\")));\n+extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n+extern void test_no_bmi2 (void)\t\t\t__attribute__((__target__(\"no-bmi2\")));\n \n extern void test_arch_i386 (void)\t\t__attribute__((__target__(\"arch=i386\")));\n extern void test_arch_i486 (void)\t\t__attribute__((__target__(\"arch=i486\")));"}, {"sha": "be24ed4c9bec4fb816732bb4ec80f6e4cac9475c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -1,3 +1,9 @@\n+2015-01-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\n+\t* config/i386/cpuinfo.c (enum processor_features): Add FEATURE_BMI and\n+\tFEATURE_BMI2.\n+\t(get_available_features): Detect FEATURE_BMI and FEATURE_BMI2.\n+\n 2015-01-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/cpuinfo.c (processor_subtypes): Add"}, {"sha": "eaf2f100d59c050db91700e0e9f5e78761bd0782", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/939911c558653f1514f1280c67f04b4bae0297c8/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/939911c558653f1514f1280c67f04b4bae0297c8/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=939911c558653f1514f1280c67f04b4bae0297c8", "patch": "@@ -98,7 +98,9 @@ enum processor_features\n   FEATURE_FMA4,\n   FEATURE_XOP,\n   FEATURE_FMA,\n-  FEATURE_AVX512F\n+  FEATURE_AVX512F,\n+  FEATURE_BMI,\n+  FEATURE_BMI2\n };\n \n struct __processor_model\n@@ -289,8 +291,12 @@ get_available_features (unsigned int ecx, unsigned int edx,\n     {\n       unsigned int eax, ebx, ecx, edx;\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+      if (ebx & bit_BMI)\n+        features |= (1 << FEATURE_BMI);\n       if (ebx & bit_AVX2)\n \tfeatures |= (1 << FEATURE_AVX2);\n+      if (ebx & bit_BMI2)\n+        features |= (1 << FEATURE_BMI2);\n       if (ebx & bit_AVX512F)\n \tfeatures |= (1 << FEATURE_AVX512F);\n     }"}]}