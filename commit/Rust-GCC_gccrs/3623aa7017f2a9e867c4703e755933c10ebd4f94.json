{"sha": "3623aa7017f2a9e867c4703e755933c10ebd4f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYyM2FhNzAxN2YyYTllODY3YzQ3MDNlNzU1OTMzYzEwZWJkNGY5NA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2005-04-08T13:09:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2005-04-08T13:09:26Z"}, "message": "tree-ssa-operands.c (correct_use_link): Remove linear scan.\n\n\n2005-04-08  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* tree-ssa-operands.c (correct_use_link): Remove linear scan.\n\nFrom-SVN: r97827", "tree": {"sha": "c0b293e3155dd2e5c5cd33a337e3764d90136d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b293e3155dd2e5c5cd33a337e3764d90136d92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3623aa7017f2a9e867c4703e755933c10ebd4f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3623aa7017f2a9e867c4703e755933c10ebd4f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3623aa7017f2a9e867c4703e755933c10ebd4f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3623aa7017f2a9e867c4703e755933c10ebd4f94/comments", "author": null, "committer": null, "parents": [{"sha": "627aa08ae96fd7dfad7e6f0ff6af638f70d58ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/627aa08ae96fd7dfad7e6f0ff6af638f70d58ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/627aa08ae96fd7dfad7e6f0ff6af638f70d58ceb"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "33d84cf10fd56e5a1b2e7294a7c082bb11cfffe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3623aa7017f2a9e867c4703e755933c10ebd4f94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3623aa7017f2a9e867c4703e755933c10ebd4f94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3623aa7017f2a9e867c4703e755933c10ebd4f94", "patch": "@@ -1,3 +1,7 @@\n+2005-04-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa-operands.c (correct_use_link): Remove linear scan.\n+\n 2005-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h: Revert last change."}, {"sha": "5d5f6bac4e25c2432caed9ebbc372c6f239ad5ee", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3623aa7017f2a9e867c4703e755933c10ebd4f94/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3623aa7017f2a9e867c4703e755933c10ebd4f94/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=3623aa7017f2a9e867c4703e755933c10ebd4f94", "patch": "@@ -456,7 +456,8 @@ finalize_ssa_defs (def_optype *old_ops_p, tree stmt)\n    changed what this pointer points to via TREE_OPERANDS (exp, 0) = <...>.\n    THe contents are different, but the the pointer is still the same.  This\n    routine will check to make sure PTR is in the correct list, and if it isn't\n-   put it in the correct list.  */\n+   put it in the correct list.  We cannot simply check the previous node \n+   because all nodes in the same stmt might have be changed.  */\n \n static inline void\n correct_use_link (ssa_imm_use_t *ptr, tree stmt)\n@@ -471,10 +472,28 @@ correct_use_link (ssa_imm_use_t *ptr, tree stmt)\n   prev = ptr->prev;\n   if (prev)\n     {\n-      /* find the root, which has a non-NULL stmt, and a NULL use.  */\n-      while (prev->stmt == NULL || prev->use != NULL)\n-        prev = prev->prev;\n-      root = prev->stmt;\n+      bool stmt_mod = true;\n+      /* Find the first element which isn't a SAFE iterator, is in a sifferent\n+\t stmt, and is not a a modified stmt,  That node is in the correct list,\n+\t see if we are too.  */\n+\n+      while (stmt_mod)\n+\t{\n+\t  while (prev->stmt == stmt || prev->stmt == NULL)\n+\t    prev = prev->prev;\n+\t  if (prev->use == NULL)\n+\t    stmt_mod = false;\n+\t  else\n+\t    if ((stmt_mod = stmt_modified_p (prev->stmt)))\n+\t      prev = prev->prev;\n+\t}\n+\n+      /* Get the ssa_name of the list the node is in.  */\n+      if (prev->use == NULL)\n+\troot = prev->stmt;\n+      else\n+\troot = *(prev->use);\n+      /* If its the right list, simply return.  */\n       if (root == *(ptr->use))\n \treturn;\n     }"}]}