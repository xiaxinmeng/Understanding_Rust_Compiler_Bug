{"sha": "0b86943aca51175968e40bbb6f2662dfe3fbfe59", "node_id": "C_kwDOANBUbNoAKDBiODY5NDNhY2E1MTE3NTk2OGU0MGJiYjZmMjY2MmRmZTNmYmZlNTk", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-05-09T15:34:34Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2022-05-09T15:36:16Z"}, "message": "i386: Adjust -fzero-call-used-regs to always use XOR [PR101891]\n\nCurrently on i386, -fzero-call-used-regs uses a pattern of:\n\nXOR regA,regA\nMOV regA,regB\nMOV regA,regC\n...\nRET\n\nHowever, this introduces both a register ordering dependency (e.g. the CPU\ncannot clear regB without clearing regA first), and while greatly reduces\navailable ROP gadgets, it does technically leave a set of \"MOV\" ROP gadgets\nat the end of functions (e.g. \"MOV regA,regC; RET\").\n\nThis patch will switch to always use XOR on i386:\n\nXOR regA,regA\nXOR regB,regB\nXOR regC,regC\n...\nRET\n\ngcc/ChangeLog:\n\n\tPR target/101891\n\t* config/i386/i386.cc (zero_call_used_regno_mode): use V2SImode\n\tas a generic MMX mode instead of V4HImode.\n\t(zero_all_mm_registers): Use SET to zero instead of MOV for\n\tzeroing scratch registers.\n\t(ix86_zero_call_used_regs): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/zero-scratch-regs-1.c: Add -fno-stack-protector\n\t-fno-PIC.\n\t* gcc.target/i386/zero-scratch-regs-10.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-13.c: Add -msse.\n\t* gcc.target/i386/zero-scratch-regs-14.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-15.c: Add -fno-stack-protector\n\t-fno-PIC.\n\t* gcc.target/i386/zero-scratch-regs-16.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-17.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-18.c: Add -fno-stack-protector\n\t-fno-PIC, adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-19.c: Add -fno-stack-protector\n\t-fno-PIC.\n\t* gcc.target/i386/zero-scratch-regs-2.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-20.c: Add -msse.\n\t* gcc.target/i386/zero-scratch-regs-21.c: Add -fno-stack-protector\n\t-fno-PIC, Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-22.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-23.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-26.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-27.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-28.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-3.c: Add -fno-stack-protector.\n\t* gcc.target/i386/zero-scratch-regs-31.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-4.c: Add -fno-stack-protector\n\t-fno-PIC.\n\t* gcc.target/i386/zero-scratch-regs-5.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-6.c: Add -fno-stack-protector.\n\t* gcc.target/i386/zero-scratch-regs-7.c: Likewise.\n\t* gcc.target/i386/zero-scratch-regs-8.c: Adjust mov to xor.\n\t* gcc.target/i386/zero-scratch-regs-9.c: Add -fno-stack-protector.", "tree": {"sha": "63f1586005129c704a1b015f9bf907e194a59c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f1586005129c704a1b015f9bf907e194a59c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b86943aca51175968e40bbb6f2662dfe3fbfe59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b86943aca51175968e40bbb6f2662dfe3fbfe59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b86943aca51175968e40bbb6f2662dfe3fbfe59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b86943aca51175968e40bbb6f2662dfe3fbfe59/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a742a5db601585c2a30252b215faa88dbc18e8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a742a5db601585c2a30252b215faa88dbc18e8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a742a5db601585c2a30252b215faa88dbc18e8db"}], "stats": {"total": 372, "additions": 180, "deletions": 192}, "files": [{"sha": "86752a6516a4a984ea2cb62308ed20928690c6da", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -3706,7 +3706,7 @@ zero_call_used_regno_mode (const unsigned int regno)\n   else if (MASK_REGNO_P (regno))\n     return HImode;\n   else if (MMX_REGNO_P (regno))\n-    return V4HImode;\n+    return V2SImode;\n   else\n     gcc_unreachable ();\n }\n@@ -3826,19 +3826,12 @@ zero_all_mm_registers (HARD_REG_SET need_zeroed_hardregs,\n   if (!need_zero_all_mm)\n     return false;\n \n-  rtx zero_mmx = NULL_RTX;\n-  machine_mode mode = V4HImode;\n+  machine_mode mode = V2SImode;\n   for (unsigned int regno = FIRST_MMX_REG; regno <= LAST_MMX_REG; regno++)\n     if (regno != ret_mmx_regno)\n       {\n \trtx reg = gen_rtx_REG (mode, regno);\n-\tif (zero_mmx == NULL_RTX)\n-\t  {\n-\t    zero_mmx = reg;\n-\t    emit_insn (gen_rtx_SET (reg, CONST0_RTX (mode)));\n-\t  }\n-\telse\n-\t  emit_move_insn (reg, zero_mmx);\n+\temit_insn (gen_rtx_SET (reg, CONST0_RTX (mode)));\n       }\n   return true;\n }\n@@ -3908,11 +3901,6 @@ ix86_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n \n   /* Now, generate instructions to zero all the other registers.  */\n \n-  rtx zero_gpr = NULL_RTX;\n-  rtx zero_vector = NULL_RTX;\n-  rtx zero_mask = NULL_RTX;\n-  rtx zero_mmx = NULL_RTX;\n-\n   for (unsigned int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     {\n       if (!TEST_HARD_REG_BIT (need_zeroed_hardregs, regno))\n@@ -3923,59 +3911,34 @@ ix86_zero_call_used_regs (HARD_REG_SET need_zeroed_hardregs)\n \n       SET_HARD_REG_BIT (zeroed_hardregs, regno);\n \n-      rtx reg, tmp, zero_rtx;\n       machine_mode mode = zero_call_used_regno_mode (regno);\n \n-      reg = gen_rtx_REG (mode, regno);\n-      zero_rtx = CONST0_RTX (mode);\n+      rtx reg = gen_rtx_REG (mode, regno);\n+      rtx tmp = gen_rtx_SET (reg, CONST0_RTX (mode));\n \n-      if (mode == SImode)\n-\tif (zero_gpr == NULL_RTX)\n-\t  {\n-\t    zero_gpr = reg;\n-\t    tmp = gen_rtx_SET (reg, zero_rtx);\n-\t    if (!TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n-\t      {\n-\t\trtx clob = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t    gen_rtx_REG (CCmode,\n-\t\t\t\t\t\t\t FLAGS_REG));\n-\t\ttmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n-\t\t\t\t\t\t\t     tmp,\n-\t\t\t\t\t\t\t     clob));\n-\t      }\n-\t    emit_insn (tmp);\n-\t  }\n-\telse\n-\t  emit_move_insn (reg, zero_gpr);\n-      else if (mode == V4SFmode)\n-\tif (zero_vector == NULL_RTX)\n-\t  {\n-\t    zero_vector = reg;\n-\t    tmp = gen_rtx_SET (reg, zero_rtx);\n-\t    emit_insn (tmp);\n-\t  }\n-\telse\n-\t  emit_move_insn (reg, zero_vector);\n-      else if (mode == HImode)\n-\tif (zero_mask == NULL_RTX)\n-\t  {\n-\t    zero_mask = reg;\n-\t    tmp = gen_rtx_SET (reg, zero_rtx);\n-\t    emit_insn (tmp);\n-\t  }\n-\telse\n-\t  emit_move_insn (reg, zero_mask);\n-      else if (mode == V4HImode)\n-\tif (zero_mmx == NULL_RTX)\n-\t  {\n-\t    zero_mmx = reg;\n-\t    tmp = gen_rtx_SET (reg, zero_rtx);\n-\t    emit_insn (tmp);\n-\t  }\n-\telse\n-\t  emit_move_insn (reg, zero_mmx);\n-      else\n-\tgcc_unreachable ();\n+      switch (mode)\n+\t{\n+\tcase E_SImode:\n+\t  if (!TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n+\t    {\n+\t      rtx clob = gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\t  gen_rtx_REG (CCmode,\n+\t\t\t\t\t\t       FLAGS_REG));\n+\t      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n+\t\t\t\t\t\t\t   tmp,\n+\t\t\t\t\t\t\t   clob));\n+\t    }\n+\t  /* FALLTHRU.  */\n+\n+\tcase E_V4SFmode:\n+\tcase E_HImode:\n+\tcase E_V2SImode:\n+\t  emit_insn (tmp);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n     }\n   return zeroed_hardregs;\n }"}, {"sha": "818a56f1116c859a13e70b882fb24b7ea34cf04d", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-1.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=used\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=used -fno-stack-protector -fno-PIC\" } */\n \n void\n foo (void)"}, {"sha": "01f6857fb565a8d639c6e4379334feed208dedbb", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-10.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-10.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -11,11 +11,11 @@ foo (int x)\n \n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n-/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[\\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "4ed036e9f881a3c76dfd4956aec06bc75c33d4ff", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-13.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-13.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,21 +1,34 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=all -march=corei7\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=all -march=corei7 -msse\" } */\n \n void\n foo (void)\n {\n }\n \n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n-/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n-/* { dg-final { scan-assembler-times \"movaps\\[ \\t\\]+%xmm0, %xmm\\[0-9\\]+\" 7 { target { ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movaps\\[ \\t\\]+%xmm0, %xmm\\[0-9\\]+\" 15 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm3, %xmm3\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm4, %xmm4\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm5, %xmm5\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm6, %xmm6\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm7, %xmm7\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm8, %xmm8\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm9, %xmm9\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm10, %xmm10\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm11, %xmm11\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm12, %xmm12\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm13, %xmm13\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm14, %xmm14\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm15, %xmm15\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "c361c0b3afdd0781acee51be9354284392f50fbb", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-14.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-14.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -9,11 +9,11 @@ foo (void)\n /* { dg-final { scan-assembler-times \"vzeroall\" 1 } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "4d45fa56b2a96e8d92693f32f45c595ffb2b64b2", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-15.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=skip\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=skip -fno-stack-protector -fno-PIC\" } */\n \n extern void foo (void) __attribute__ ((zero_call_used_regs(\"used\")));\n "}, {"sha": "fb5e6ddc1cdbbca3d0a917b42aedcf11ef7a30ff", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-16.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=all\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=all -fno-stack-protector -fno-PIC\" } */\n \n extern void foo (void) __attribute__ ((zero_call_used_regs(\"skip\")));\n "}, {"sha": "10cfa12f9ca86101979d54b6691d3dc22b7673d9", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-17.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=used\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=used -fno-stack-protector\" } */\n \n int\n foo (int x)"}, {"sha": "0e399d4ebb0a58654d72a9a2a69c9ce4c2221258", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-18.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=used -march=corei7\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=used -march=corei7 -fno-stack-protector -fno-PIC\" } */\n \n float\n foo (float z, float y, float x)\n@@ -9,5 +9,5 @@ foo (float z, float y, float x)\n \n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm1, %xmm2\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"xorl\\[ \\t\\]+%\" } } */"}, {"sha": "cb0d5ebce04189042387d796d100aa3fc58e810f", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-19.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=used -march=corei7\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=used -march=corei7 -fno-stack-protector -fno-PIC\" } */\n \n float\n foo (float z, float y, float x)"}, {"sha": "cb93209a8bafe0a6a10899636576f176a13f0054", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-2.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -9,11 +9,11 @@ foo (void)\n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "123bd05b51e7b4171e486c8c5a23ea79b2085c75", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-20.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-20.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=all -march=corei7\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=all -march=corei7 -msse\" } */\n \n float\n foo (float z, float y, float x)\n@@ -8,16 +8,28 @@ foo (float z, float y, float x)\n }\n \n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n-/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" { target { ia32 } } } } */\n-/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movaps\\[ \\t\\]+%xmm0, %xmm\\[0-9\\]+\" 7 { target { ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movaps\\[ \\t\\]+%xmm1, %xmm\\[0-9\\]+\" 14 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm0, %xmm0\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm1, %xmm1\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm2, %xmm2\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm3, %xmm3\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm4, %xmm4\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm5, %xmm5\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm6, %xmm6\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm7, %xmm7\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm8, %xmm8\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm9, %xmm9\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm10, %xmm10\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm11, %xmm11\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm12, %xmm12\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm13, %xmm13\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm14, %xmm14\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm15, %xmm15\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "e8c3d9b5f3d46d7646d71668fe5e1dd57433a48e", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-21.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=skip -march=corei7\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=skip -march=corei7 -fno-stack-protector -fno-PIC\" } */\n \n __attribute__ ((zero_call_used_regs(\"used\")))\n float\n@@ -10,5 +10,5 @@ foo (float z, float y, float x)\n \n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm1, %xmm1\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm1, %xmm2\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm2, %xmm2\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"xorl\\[ \\t\\]+%\" } } */"}, {"sha": "63adbb9d356bcf0f4f8d8f543f830999bc0662aa", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-22.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-22.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -11,11 +11,11 @@ foo (void)\n /* { dg-final { scan-assembler-times \"fstp\\[ \\t\\]+%st\\\\(0\\\\)\" 8 } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "a3285bed8a092c4bbe90144a0cd2b01f74bf3eb9", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-23.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-23.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -11,19 +11,19 @@ foo (void)\n /* { dg-final { scan-assembler-times \"fstp\\[ \\t\\]+%st\\\\(0\\\\)\" 8 } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k0, %k0, %k0\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k1\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k2\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k3\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k4\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k5\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k6\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\t\\]+%k0, %k7\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k1, %k1, %k1\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k2, %k2, %k2\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k3, %k3, %k3\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k4, %k4, %k4\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k5, %k5, %k5\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k6, %k6, %k6\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"kxorw\\[ \\t\\]+%k7, %k7, %k7\" { target { ! ia32 } } } } */"}, {"sha": "3f22375d2fa1f1096105513397a90d74546df91c", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-26.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-26.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -8,16 +8,16 @@ foo (int x)\n }\n \n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%xmm0, %xmm0\" } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm1\" } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm2\" } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm3\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm4\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm5\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm6\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movaps\\[ \\t\\]+%xmm0, %xmm7\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm0, %xmm0\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm1, %xmm1\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm2, %xmm2\" } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm3, %xmm3\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm4, %xmm4\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm5, %xmm5\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm6, %xmm6\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[a-z\\]*xor\\[a-z\\]*\\[ \\t\\]+%xmm7, %xmm7\" { target { ! ia32 } } } } */"}, {"sha": "b307d10731913a58e837f54632b368e07f4ff687", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-27.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-27.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -8,8 +8,8 @@ foo (int x)\n }\n \n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */"}, {"sha": "dfa8e01dc387f5c708cc297ac24bda49fd2e4c0f", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-28.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-28.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -10,9 +10,9 @@ __v2si ret_mmx (void)\n }\n \n /* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm1, %mm1\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm2\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm3\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm4\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm5\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm6\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm7\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm2, %mm2\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm3, %mm3\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm4, %mm4\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm5, %mm5\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm6, %mm6\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm7, %mm7\" } } */"}, {"sha": "6cd5c4cb067ec18e8dbdd6a0f3d190b266662e15", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-3.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=skip\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=skip -fno-stack-protector\" } */\n \n void\n foo (void)"}, {"sha": "5a0e53110e65897c8f9c847be7aef7364d022eab", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-31.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-31.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -10,5 +10,5 @@ __v2si ret_mmx (void)\n }\n \n /* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm1, %mm1\" } } */\n-/* { dg-final { scan-assembler \"movq\\[ \\t\\]+%mm1, %mm2\" } } */\n-/* { dg-final { scan-assembler-not \"movq\\[ \\t\\]+%mm1, %mm\\[34567\\]\" } } */\n+/* { dg-final { scan-assembler \"pxor\\[ \\t\\]+%mm2, %mm2\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\\[ \\t\\]+%mm\\[34567\\], %mm\\[34567\\]\" } } */"}, {"sha": "becc5b8b4380864b43cc10eed6a470a654522a5b", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-4.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=skip\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=skip -fno-stack-protector -fno-PIC\" } */\n \n extern void foo (void) __attribute__ ((zero_call_used_regs(\"used-gpr\")));\n "}, {"sha": "4367f96a8597343dddccfa4aafcdf8b6b4fa314a", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-5.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-5.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -10,11 +10,11 @@ foo (void)\n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%eax, %eax\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%eax, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "88e3156b1321c5abc27cf549f93cb78c5473aad6", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-6.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=all-gpr\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=all-gpr -fno-stack-protector\" } */\n \n extern void foo (void) __attribute__ ((zero_call_used_regs(\"skip\")));\n "}, {"sha": "460c301ec125b6758475e712ed307d5f00613d3f", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-7.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=used-gpr\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=used-gpr -fno-stack-protector\" } */\n \n int\n foo (int x)"}, {"sha": "0eab76933f539daf521090754d4b994b5065cd52", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-8.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-8.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -10,10 +10,10 @@ foo (int x)\n /* { dg-final { scan-assembler-not \"vzeroall\" } } */\n /* { dg-final { scan-assembler-not \"%xmm\" } } */\n /* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edx, %edx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %ecx\" } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %esi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %edi\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r8d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r9d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r10d\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler \"movl\\[ \\t\\]+%edx, %r11d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%ecx, %ecx\" } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%esi, %esi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%edi, %edi\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r8d, %r8d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r9d, %r9d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r10d, %r10d\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\t\\]+%r11d, %r11d\" { target { ! ia32 } } } } */"}, {"sha": "42dcaea4988ac6b6f6c8a5f441810289b850f57a", "filename": "gcc/testsuite/gcc.target/i386/zero-scratch-regs-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b86943aca51175968e40bbb6f2662dfe3fbfe59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzero-scratch-regs-9.c?ref=0b86943aca51175968e40bbb6f2662dfe3fbfe59", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target *-*-linux* } } */\n-/* { dg-options \"-O2 -fzero-call-used-regs=skip\" } */\n+/* { dg-options \"-O2 -fzero-call-used-regs=skip -fno-stack-protector\" } */\n \n extern int foo (int) __attribute__ ((zero_call_used_regs(\"used-gpr\")));\n "}]}