{"sha": "2f5934326542b3f303db91cc4cd432cd488f0258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1OTM0MzI2NTQyYjNmMzAzZGI5MWNjNGNkNDMyY2Q0ODhmMDI1OA==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2018-08-01T15:39:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-01T15:39:45Z"}, "message": "Report early wakeup of condition_variable::wait_until as no_timeout\n\nAs currently implemented, condition_variable always ultimately waits\nagainst std::chrono::system_clock. This clock can be changed in arbitrary\nways by the user which may result in us waking up too early or too late\nwhen measured against the caller-supplied clock.\n\nWe can't (yet) do much about waking up too late (PR 41861), but\nif we wake up too early we must return cv_status::no_timeout to indicate a\nspurious wakeup rather than incorrectly returning cv_status::timeout.\n\n2018-08-01  Mike Crowe  <mac@mcrowe.com>\n\n\t* include/std/condition_variable (wait_until): Only report timeout\n\tif we really have timed out when measured against the\n\tcaller-supplied clock.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Add test\n\tcase to confirm above behaviour.\n\nFrom-SVN: r263224", "tree": {"sha": "1d909cf9f46064af55af5dae9bb10e0263463b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d909cf9f46064af55af5dae9bb10e0263463b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5934326542b3f303db91cc4cd432cd488f0258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5934326542b3f303db91cc4cd432cd488f0258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5934326542b3f303db91cc4cd432cd488f0258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5934326542b3f303db91cc4cd432cd488f0258/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5534096c09d8d8bc4e12b73d1db179ccd7c60671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5534096c09d8d8bc4e12b73d1db179ccd7c60671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5534096c09d8d8bc4e12b73d1db179ccd7c60671"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "dc4cc14153044e1becaa1d46f01aeae8885e1c71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f5934326542b3f303db91cc4cd432cd488f0258", "patch": "@@ -1,3 +1,11 @@\n+2018-08-01  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* include/std/condition_variable (wait_until): Only report timeout\n+\tif we really have timed out when measured against the\n+\tcaller-supplied clock.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Add test\n+\tcase to confirm above behaviour.\n+\n 2018-08-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60555"}, {"sha": "c00afa2b7ae2169f7ba81ade07544381a7ec050a", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=2f5934326542b3f303db91cc4cd432cd488f0258", "patch": "@@ -117,7 +117,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconst auto __delta = __atime - __c_entry;\n \tconst auto __s_atime = __s_entry + __delta;\n \n-\treturn __wait_until_impl(__lock, __s_atime);\n+\tif (__wait_until_impl(__lock, __s_atime) == cv_status::no_timeout)\n+\t  return cv_status::no_timeout;\n+\t// We got a timeout when measured against __clock_t but\n+\t// we need to check against the caller-supplied clock\n+\t// to tell whether we should return a timeout.\n+\tif (_Clock::now() < __atime)\n+\t  return cv_status::no_timeout;\n+\treturn cv_status::timeout;\n       }\n \n     template<typename _Clock, typename _Duration, typename _Predicate>"}, {"sha": "09a717801e1e589e881b1961b7b136d5784edb3f", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5934326542b3f303db91cc4cd432cd488f0258/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=2f5934326542b3f303db91cc4cd432cd488f0258", "patch": "@@ -51,8 +51,60 @@ void test01()\n     }\n }\n \n+struct slow_clock\n+{\n+  using rep = std::chrono::system_clock::rep;\n+  using period = std::chrono::system_clock::period;\n+  using duration = std::chrono::system_clock::duration;\n+  using time_point = std::chrono::time_point<slow_clock, duration>;\n+  static constexpr bool is_steady = false;\n+\n+  static time_point now()\n+  {\n+    auto real = std::chrono::system_clock::now();\n+    return time_point{real.time_since_epoch() / 3};\n+  }\n+};\n+\n+\n+void test01_alternate_clock()\n+{\n+  try\n+    {\n+      std::condition_variable c1;\n+      std::mutex m;\n+      std::unique_lock<std::mutex> l(m);\n+      auto const expire = slow_clock::now() + std::chrono::seconds(1);\n+\n+      while (slow_clock::now() < expire)\n+       {\n+         auto const result = c1.wait_until(l, expire);\n+\n+         // If wait_until returns before the timeout has expired when\n+         // measured against the supplied clock, then wait_until must\n+         // return no_timeout.\n+         if (slow_clock::now() < expire)\n+           VERIFY(result == std::cv_status::no_timeout);\n+\n+         // If wait_until returns timeout then the timeout must have\n+         // expired.\n+         if (result == std::cv_status::timeout)\n+           VERIFY(slow_clock::now() >= expire);\n+       }\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n int main()\n {\n   test01();\n+  test01_alternate_clock();\n   return 0;\n }"}]}