{"sha": "3b4c6e67710b09beccb7d0acf7f7257564d8a6f5", "node_id": "C_kwDOANBUbNoAKDNiNGM2ZTY3NzEwYjA5YmVjY2I3ZDBhY2Y3ZjcyNTc1NjRkOGE2ZjU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-10T15:09:44Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-16T14:44:55Z"}, "message": "ada: Fix pessimization of some CW objects initialized with function call\n\nThe recent removal of the unconditional call to Remove_Side_Effects on the\nexpression of an object declaration or an allocator with a class-wide type\nhas introduced a pessimization in the former case for function calls that\nreturn a specific tagged type, because the object ultimately created on the\nprimary stack has changed from being of a specific tagged type to being of\nthe class-wide type, the latter type always formally requiring finalization.\n\nWith the current finalization machinery, this means that a dispatching call\nto the Deep_Finalize routine is generated, which is unnecessary.  Although\nthis is a generic finalization issue with class-wide objects, this restores\nthe previous behavior in this case to fix the pessimization for now.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): For a class-wide non-\n\tinterface stand-alone object initialized by a function call, call\n\tRemove_Side_Effects on the expression to capture the result.", "tree": {"sha": "c47c8e0bd37c2dd0c0b88143cf8dcf23daa2dd16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c47c8e0bd37c2dd0c0b88143cf8dcf23daa2dd16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a7b603380c6f4383357a6ae1d6c516dc677f29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a7b603380c6f4383357a6ae1d6c516dc677f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a7b603380c6f4383357a6ae1d6c516dc677f29"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "6886bde7bd1ca9dd289a82739c118ae013016c50", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4c6e67710b09beccb7d0acf7f7257564d8a6f5/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3b4c6e67710b09beccb7d0acf7f7257564d8a6f5", "patch": "@@ -7797,6 +7797,25 @@ package body Exp_Ch3 is\n          --  Common case of explicit object initialization\n \n          else\n+            --  Small optimization: if the expression is a function call and\n+            --  the object is stand-alone, not declared at library level and of\n+            --  a class-wide type, then we capture the result of the call into\n+            --  a temporary, with the benefit that, if the result's type does\n+            --  not need finalization, nothing will be finalized and, if it\n+            --  does, the temporary only will be finalized by means of a direct\n+            --  call to the Finalize primitive if the result's type is not a\n+            --  class-wide type; whereas, in both cases, the stand-alone object\n+            --  itself would be finalized by means of a dispatching call to the\n+            --  Deep_Finalize routine.\n+\n+            if Nkind (Expr_Q) = N_Function_Call\n+              and then not Special_Ret_Obj\n+              and then not Is_Library_Level_Entity (Def_Id)\n+              and then Is_Class_Wide_Type (Typ)\n+            then\n+               Remove_Side_Effects (Expr_Q);\n+            end if;\n+\n             --  In most cases, we must check that the initial value meets any\n             --  constraint imposed by the declared type. However, there is one\n             --  very important exception to this rule. If the entity has an"}]}