{"sha": "3ff5f682dc883c9508606535cd3ec981ac151362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmNWY2ODJkYzg4M2M5NTA4NjA2NTM1Y2QzZWM5ODFhYzE1MTM2Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-12T15:10:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-12T15:10:50Z"}, "message": "builtins.c (built_in_decls): New array.\n\n\t* builtins.c (built_in_decls): New array.\n\t(expand_builtin_fputs): New function.\n\t(expand_builtin): Handle BUILT_IN_FPUTC and BUILT_IN_FPUTS.\n\n\t* builtins.def (BUILT_IN_FPUTC, BUILT_IN_FPUTS): New members.\n\n\t* c-common.c (c_common_nodes_and_builtins): Handle fputc/fputs.\n\n\t* tree.h (built_in_decls): New array.\n\nFrom-SVN: r36363", "tree": {"sha": "81ed5460f20e5d5f8b0cf6d084e31c932f791371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ed5460f20e5d5f8b0cf6d084e31c932f791371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff5f682dc883c9508606535cd3ec981ac151362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff5f682dc883c9508606535cd3ec981ac151362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff5f682dc883c9508606535cd3ec981ac151362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff5f682dc883c9508606535cd3ec981ac151362/comments", "author": null, "committer": null, "parents": [{"sha": "208b0ab1c8273e0944e240e42c65dc309bc1b6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208b0ab1c8273e0944e240e42c65dc309bc1b6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208b0ab1c8273e0944e240e42c65dc309bc1b6b7"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "642d2374290f9be4be9b4c0f777cbed83e517198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ff5f682dc883c9508606535cd3ec981ac151362", "patch": "@@ -1,3 +1,15 @@\n+2000-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (built_in_decls): New array.\n+\t(expand_builtin_fputs): New function.\n+\t(expand_builtin): Handle BUILT_IN_FPUTC and BUILT_IN_FPUTS.\n+\n+\t* builtins.def (BUILT_IN_FPUTC, BUILT_IN_FPUTS): New members.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Handle fputc/fputs.\n+\n+\t* tree.h (built_in_decls): New array.\n+\n Tue Sep 12 08:53:57 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* convex.md: Use \"+\" instead of \"=\" for outputs wrapped in a"}, {"sha": "cc818977b47e805e51cf215b1d93e5d36d5297d1", "filename": "gcc/builtins.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3ff5f682dc883c9508606535cd3ec981ac151362", "patch": "@@ -67,6 +67,15 @@ const char *const built_in_names[(int) END_BUILTINS] =\n };\n #undef DEF_BUILTIN\n \n+/* Setup an array of _DECL trees, make sure each element is\n+   initialized to NULL_TREE.  */\n+#define DEF_BUILTIN(x) NULL_TREE,\n+tree built_in_decls[(int) END_BUILTINS] =\n+{\n+#include \"builtins.def\"\n+};\n+#undef DEF_BUILTIN\n+\n tree (*lang_type_promotes_to) PARAMS ((tree));\n \n static int get_pointer_alignment\tPARAMS ((tree, unsigned));\n@@ -102,6 +111,7 @@ static rtx expand_builtin_strlen\tPARAMS ((tree, rtx,\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n+static rtx expand_builtin_fputs\t\tPARAMS ((tree, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n \n@@ -2310,6 +2320,60 @@ expand_builtin_ffs (arglist, target, subtarget)\n   return target;\n }\n \n+/* If the string passed to fputs is a constant and is one character\n+   long, we attempt to transform this call into __builtin_fputc(). */\n+static rtx\n+expand_builtin_fputs (arglist, ignore)\n+     tree arglist;\n+     int ignore;\n+{\n+  tree call_expr, len, stripped_string, newarglist;\n+  tree fn = built_in_decls[BUILT_IN_FPUTC];\n+\n+  /* If the return value is used, or the replacement _DECL isn't\n+     initialized, don't do the transformation. */\n+  if (!ignore || !fn)\n+    return 0;\n+\n+  /* Verify the arguments in the original call. */\n+  if (arglist == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE))\n+    return 0;\n+\n+  /* Get the length of the string passed to fputs. */\n+  len = c_strlen (TREE_VALUE (arglist));\n+  \n+  /* If the length != 1, punt. */\n+  if (len == 0 || compare_tree_int (len, 1))\n+    return 0;\n+\n+  stripped_string = TREE_VALUE (arglist);\n+  STRIP_NOPS (stripped_string);\n+  if (stripped_string && TREE_CODE (stripped_string) == ADDR_EXPR)\n+    stripped_string = TREE_OPERAND (stripped_string, 0);\n+\n+  /* New argument list transforming fputs(string, stream) to\n+     fputc(string[0], stream).  */\n+  newarglist = build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist)));\n+  newarglist =\n+    tree_cons (NULL_TREE, \n+\t       build_int_2 (TREE_STRING_POINTER (stripped_string)[0], 0),\n+\t       newarglist);\n+  \n+#ifdef TEST_STDIO_OPTS\n+  warning (\"Converted fputs(one-char-string, FILE*) -> fputc(char, FILE*)\");\n+#endif\n+\n+  call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t     call_expr, newarglist, NULL_TREE);\n+  TREE_SIDE_EFFECTS (call_expr) = 1;\n+  return expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n+}\n+\n /* Expand a call to __builtin_expect.  We return our argument and\n    emit a NOTE_INSN_EXPECTED_VALUE note.  */\n \n@@ -2383,7 +2447,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n-\t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS))\n+\t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n+\t  || fcode == BUILT_IN_FPUTC || fcode == BUILT_IN_FPUTS))\n     return expand_call (exp, target, ignore);\n \n   switch (fcode)\n@@ -2596,6 +2661,15 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_barrier ();\n       return const0_rtx;\n \n+    case BUILT_IN_FPUTC:\n+      break;\n+      \n+    case BUILT_IN_FPUTS:\n+      target = expand_builtin_fputs (arglist, ignore);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n       /* Various hooks for the DWARF 2 __throw routine.  */\n     case BUILT_IN_UNWIND_INIT:\n       expand_builtin_unwind_init ();"}, {"sha": "40ae59c3d734b74eaf84daead8fdd8a0e6aaf613", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=3ff5f682dc883c9508606535cd3ec981ac151362", "patch": "@@ -58,6 +58,10 @@ DEF_BUILTIN(BUILT_IN_SETJMP)\n DEF_BUILTIN(BUILT_IN_LONGJMP)\n DEF_BUILTIN(BUILT_IN_TRAP)\n \n+  /* Stdio builtins.  */\n+DEF_BUILTIN(BUILT_IN_FPUTC)\n+DEF_BUILTIN(BUILT_IN_FPUTS)\n+\n   /* ISO C99 floating point unordered comparisons.  */\n DEF_BUILTIN(BUILT_IN_ISGREATER)\n DEF_BUILTIN(BUILT_IN_ISGREATEREQUAL)"}, {"sha": "c4efbc81bbeb771d4d17439b9b97938a069e5131", "filename": "gcc/c-common.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3ff5f682dc883c9508606535cd3ec981ac151362", "patch": "@@ -4136,6 +4136,17 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\");\n   builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble,\n \t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cosl\");\n+  /* We declare these without argument so that the initial declaration\n+     for these identifiers is a builtin.  That allows us to redeclare\n+     them later with argument without worrying about the explicit\n+     declarations in stdio.h being taken as the initial declaration.\n+     Also, save the _DECL for these so we can use them later.  */\n+  built_in_decls[BUILT_IN_FPUTC] =\n+    builtin_function (\"__builtin_fputc\", int_ftype_any,\n+\t\t      BUILT_IN_FPUTC, BUILT_IN_NORMAL, \"fputc\");\n+  built_in_decls[BUILT_IN_FPUTS] =\n+    builtin_function (\"__builtin_fputs\", int_ftype_any,\n+\t\t      BUILT_IN_FPUTS, BUILT_IN_NORMAL, \"fputs\");\n \n   if (! no_builtins)\n     {\n@@ -4179,6 +4190,15 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      /* We declare these without argument so that the initial\n+         declaration for these identifiers is a builtin.  That allows\n+         us to redeclare them later with argument without worrying\n+         about the explicit declarations in stdio.h being taken as the\n+         initial declaration.  */\n+      builtin_function (\"fputc\", int_ftype_any, BUILT_IN_FPUTC,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"fputs\", int_ftype_any, BUILT_IN_FPUTS,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n \n       /* Declare these functions volatile\n \t to avoid spurious \"control drops through\" warnings.  */"}, {"sha": "330e28c16eaa1111476641149b0205a22ae71683", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff5f682dc883c9508606535cd3ec981ac151362/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3ff5f682dc883c9508606535cd3ec981ac151362", "patch": "@@ -96,6 +96,9 @@ enum built_in_function\n \n /* Names for the above.  */\n extern const char *const built_in_names[(int) END_BUILTINS];\n+\n+/* An array of _DECL trees for the above.  */\n+extern union tree_node *built_in_decls[(int) END_BUILTINS];\n \f\n /* The definition of tree nodes fills the next several pages.  */\n "}]}