{"sha": "b21aa448a4595208415e269aa1080846064029c8", "node_id": "C_kwDOANBUbNoAKGIyMWFhNDQ4YTQ1OTUyMDg0MTVlMjY5YWExMDgwODQ2MDY0MDI5Yzg", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-06-02T16:26:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-08T12:32:35Z"}, "message": "expand: Add in order trait expansion\n\nAdd in order trait expansion using derive macros. Remove expansion of\nouter attributes.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (get_traits_to_derive): Change\n\tthe function to get traits in a given attribute instead of an\n\tattribute vector.\n\t(ExpandVisitor::expand_struct_fields): Remove call in visitor.\n\t(ExpandVisitor::expand_function_params): Likewise.\n\t(ExpandVisitor::expand_closure_params): Likewise.\n\t(ExpandVisitor::visit): Likewise.\n\t(ExpandVisitor::expand_outer_attribute): Remove function.\n\t(ExpandVisitor::visit_outer_attrs): Remove function.\n\n\t* expand/rust-expand-visitor.h: Remove function prototypes.\n\t(ExpandVisitor::visit_outer_attrs): Remove function.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "77f71f27547ad743d34504809d0d12f3abf01a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f71f27547ad743d34504809d0d12f3abf01a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21aa448a4595208415e269aa1080846064029c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21aa448a4595208415e269aa1080846064029c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21aa448a4595208415e269aa1080846064029c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21aa448a4595208415e269aa1080846064029c8/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9829370cfbd9657ff7963e8a5d4cf0f63178fda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9829370cfbd9657ff7963e8a5d4cf0f63178fda8"}], "stats": {"total": 276, "additions": 75, "deletions": 201}, "files": [{"sha": "b63e3ba82c947d37914edb20e883d71ce29c6b17", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 75, "deletions": 193, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21aa448a4595208415e269aa1080846064029c8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21aa448a4595208415e269aa1080846064029c8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=b21aa448a4595208415e269aa1080846064029c8", "patch": "@@ -53,75 +53,44 @@ ExpandVisitor::go (AST::Crate &crate)\n }\n \n /**\n- * Returns a list of all the derive macros to apply, as well as the Attribute\n- * they are from.\n+ * Returns a list of traits to derive from within a given attribute.\n  *\n- * ```rust\n- * #[derive(Clone, Copy)] // attr1\n- * struct S;\n- *\n- * // returns [{Clone, &attr1}, {Copy, &attr1}]\n- *\n- * #[derive(Clone)] // attr1\n- * #[derive(Copy, PartialEq, Ord)] // attr2\n- * struct S;\n- *\n- * // returns [{Clone, &attr1}, {Copy, &attr2}, {PartialEq, &attr2}, {Ord,\n- * &attr2}]\n- * ```\n- *\n- * @param outer_attrs The list of attributes on the item to derive\n+ * @param attrs The attributes on the item to derive\n  */\n-static std::vector<\n-  std::pair<std::string, std::reference_wrapper<const AST::Attribute>>>\n-get_traits_to_derive (std::vector<AST::Attribute> &outer_attrs)\n-{\n-  std::vector<\n-    std::pair<std::string, std::reference_wrapper<const AST::Attribute>>>\n-    to_derive;\n-  for (auto it = outer_attrs.begin (); it != outer_attrs.end ();)\n-    {\n-      auto &attr = *it;\n-\n-      if (is_derive (attr))\n-\t{\n-\t  auto &input = attr.get_attr_input ();\n-\t  switch (input.get_attr_input_type ())\n-\t    {\n-\t      // isn't there a better way to do this?? like parse it or\n-\t      // something idk. some function I'm not thinking of?\n-\t      case AST::AttrInput::TOKEN_TREE: {\n-\t\tauto &tokens = static_cast<AST::DelimTokenTree &> (input)\n-\t\t\t\t .get_token_trees ();\n-\n-\t\t// erase the delimiters\n-\t\trust_assert (tokens.size () >= 3);\n-\t\ttokens.erase (tokens.begin ());\n-\t\ttokens.pop_back ();\n-\n-\t\tfor (auto &token : tokens)\n-\t\t  {\n-\t\t    // skip commas, as they are part of the token stream\n-\t\t    if (token->as_string () == \",\")\n-\t\t      continue;\n-\n-\t\t    to_derive.emplace_back (token->as_string (), attr);\n-\t\t  }\n-\t\tbreak;\n-\t      }\n-\t    case AST::AttrInput::LITERAL:\n-\t    case AST::AttrInput::META_ITEM:\n-\t    case AST::AttrInput::MACRO:\n-\t      gcc_unreachable ();\n-\t      break;\n-\t    }\n+static std::vector<std::string>\n+get_traits_to_derive (AST::Attribute &attr)\n+{\n+  std::vector<std::string> to_derive;\n \n-\t  it = outer_attrs.erase (it);\n-\t}\n-      else\n-\t{\n-\t  it++;\n-\t}\n+  auto &input = attr.get_attr_input ();\n+  switch (input.get_attr_input_type ())\n+    {\n+      // isn't there a better way to do this?? like parse it or\n+      // something idk. some function I'm not thinking of?\n+      case AST::AttrInput::TOKEN_TREE: {\n+\tauto &tokens\n+\t  = static_cast<AST::DelimTokenTree &> (input).get_token_trees ();\n+\n+\t// erase the delimiters\n+\trust_assert (tokens.size () >= 3);\n+\ttokens.erase (tokens.begin ());\n+\ttokens.pop_back ();\n+\n+\tfor (auto &token : tokens)\n+\t  {\n+\t    // skip commas, as they are part of the token stream\n+\t    if (token->as_string () == \",\")\n+\t      continue;\n+\n+\t    to_derive.emplace_back (token->as_string ());\n+\t  }\n+\tbreak;\n+      }\n+    case AST::AttrInput::LITERAL:\n+    case AST::AttrInput::META_ITEM:\n+    case AST::AttrInput::MACRO:\n+      gcc_unreachable ();\n+      break;\n     }\n \n   return to_derive;\n@@ -168,28 +137,44 @@ ExpandVisitor::expand_inner_items (\n       auto &item = *it;\n       if (item->has_outer_attrs ())\n \t{\n-\t  auto traits_to_derive\n-\t    = get_traits_to_derive (item->get_outer_attrs ());\n+\t  auto &attrs = item->get_outer_attrs ();\n \n-\t  for (auto &to_derive : traits_to_derive)\n+\t  for (auto attr_it = attrs.begin (); attr_it != attrs.end ();\n+\t       /* erase => No increment*/)\n \t    {\n-\t      auto &name = to_derive.first;\n-\t      auto &attr = to_derive.second;\n+\t      auto current = *attr_it;\n \n-\t      auto maybe_builtin = MacroBuiltin::builtins.lookup (name);\n-\t      if (MacroBuiltin::builtins.is_iter_ok (maybe_builtin))\n+\t      if (is_derive (current))\n \t\t{\n-\t\t  auto new_item\n-\t\t    = builtin_derive_item (item, attr, maybe_builtin->second);\n-\t\t  // this inserts the derive *before* the item - is it a\n-\t\t  // problem?\n-\t\t  it = items.insert (it, std::move (new_item));\n+\t\t  attr_it = attrs.erase (attr_it);\n+\t\t  // Get traits to derive in the current attribute\n+\t\t  auto traits_to_derive = get_traits_to_derive (current);\n+\t\t  for (auto &to_derive : traits_to_derive)\n+\t\t    {\n+\t\t      auto maybe_builtin\n+\t\t\t= MacroBuiltin::builtins.lookup (to_derive);\n+\t\t      if (MacroBuiltin::builtins.is_iter_ok (maybe_builtin))\n+\t\t\t{\n+\t\t\t  auto new_item\n+\t\t\t    = builtin_derive_item (item, current,\n+\t\t\t\t\t\t   maybe_builtin->second);\n+\t\t\t  // this inserts the derive *before* the item - is it a\n+\t\t\t  // problem?\n+\t\t\t  it = items.insert (it, std::move (new_item));\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  auto new_items\n+\t\t\t    = derive_item (item, to_derive, expander);\n+\t\t\t  std::move (new_items.begin (), new_items.end (),\n+\t\t\t\t     std::inserter (items, it));\n+\t\t\t}\n+\t\t    }\n \t\t}\n-\t      else\n+\t      else /* Attribute */\n \t\t{\n-\t\t  auto new_items = derive_item (item, name, expander);\n-\t\t  std::move (new_items.begin (), new_items.end (),\n-\t\t\t     std::inserter (items, it));\n+\t\t  // Ignore for now\n+\t\t  attr_it++;\n \t\t}\n \t    }\n \t}\n@@ -278,7 +263,6 @@ ExpandVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n {\n   for (auto &field : fields)\n     {\n-      visit_outer_attrs (field);\n       maybe_expand_type (field.get_field_type ());\n     }\n }\n@@ -296,7 +280,6 @@ ExpandVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n {\n   for (auto &param : params)\n     {\n-      visit_outer_attrs (param);\n       maybe_expand_type (param.get_type ());\n     }\n }\n@@ -346,7 +329,6 @@ ExpandVisitor::expand_closure_params (std::vector<AST::ClosureParam> &params)\n {\n   for (auto &param : params)\n     {\n-      visit_outer_attrs (param);\n       if (param.has_type_given ())\n \tmaybe_expand_type (param.get_type ());\n     }\n@@ -424,9 +406,7 @@ ExpandVisitor::visit (AST::AttrInputMetaItemContainer &)\n \n void\n ExpandVisitor::visit (AST::IdentifierExpr &ident_expr)\n-{\n-  visit_outer_attrs (ident_expr);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::Lifetime &)\n@@ -450,7 +430,6 @@ ExpandVisitor::visit (AST::MacroInvocation &macro_invoc)\n void\n ExpandVisitor::visit (AST::PathInExpression &path)\n {\n-  visit_outer_attrs (path);\n   for (auto &segment : path.get_segments ())\n     if (segment.has_generic_args ())\n       expand_generic_args (segment.get_generic_args ());\n@@ -486,7 +465,6 @@ ExpandVisitor::visit (AST::TypePath &path)\n void\n ExpandVisitor::visit (AST::QualifiedPathInExpression &path)\n {\n-  visit_outer_attrs (path);\n   expand_qualified_path_type (path.get_qualified_path_type ());\n \n   for (auto &segment : path.get_segments ())\n@@ -506,9 +484,7 @@ ExpandVisitor::visit (AST::QualifiedPathInType &path)\n \n void\n ExpandVisitor::visit (AST::LiteralExpr &expr)\n-{\n-  visit_outer_attrs (expr);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::AttrInputLiteral &)\n@@ -531,59 +507,51 @@ ExpandVisitor::visit (AST::MetaItemPathLit &)\n void\n ExpandVisitor::visit (AST::BorrowExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_borrowed_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::DereferenceExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_dereferenced_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ErrorPropagationExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_propagating_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::NegationExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_negated_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ComparisonExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::LazyBooleanExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::TypeCastExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_casted_expr ());\n \n   visit (expr.get_type_to_cast_to ());\n@@ -592,23 +560,20 @@ ExpandVisitor::visit (AST::TypeCastExpr &expr)\n void\n ExpandVisitor::visit (AST::AssignmentExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::CompoundAssignmentExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_left_expr ());\n   maybe_expand_expr (expr.get_right_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::GroupedExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_expr_in_parens ());\n }\n \n@@ -629,40 +594,34 @@ ExpandVisitor::visit (AST::ArrayElemsCopied &elems)\n void\n ExpandVisitor::visit (AST::ArrayExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_array_elems ());\n }\n \n void\n ExpandVisitor::visit (AST::ArrayIndexExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_array_expr ());\n   visit (expr.get_index_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::TupleExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   for (auto &element : expr.get_tuple_elems ())\n     visit (element);\n }\n \n void\n ExpandVisitor::visit (AST::TupleIndexExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_tuple_expr ());\n \n   // We can't have macro invocations for tuple indexes, right? Need a test!\n }\n \n void\n ExpandVisitor::visit (AST::StructExprStruct &expr)\n-{\n-  visit_outer_attrs (expr);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::StructExprFieldIdentifier &)\n@@ -699,7 +658,6 @@ ExpandVisitor::visit (AST::StructExprStructBase &expr)\n void\n ExpandVisitor::visit (AST::CallExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_function_expr ());\n \n   for (auto &param : expr.get_params ())\n@@ -709,7 +667,6 @@ ExpandVisitor::visit (AST::CallExpr &expr)\n void\n ExpandVisitor::visit (AST::MethodCallExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_receiver_expr ());\n \n   for (auto &param : expr.get_params ())\n@@ -719,14 +676,12 @@ ExpandVisitor::visit (AST::MethodCallExpr &expr)\n void\n ExpandVisitor::visit (AST::FieldAccessExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_receiver_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::ClosureExprInner &expr)\n {\n-  visit_outer_attrs (expr);\n   expand_closure_params (expr.get_params ());\n \n   visit (expr.get_definition_expr ());\n@@ -748,7 +703,6 @@ ExpandVisitor::visit (AST::BlockExpr &expr)\n void\n ExpandVisitor::visit (AST::ClosureExprInnerTyped &expr)\n {\n-  visit_outer_attrs (expr);\n   expand_closure_params (expr.get_params ());\n \n   maybe_expand_type (expr.get_return_type ());\n@@ -758,14 +712,11 @@ ExpandVisitor::visit (AST::ClosureExprInnerTyped &expr)\n \n void\n ExpandVisitor::visit (AST::ContinueExpr &expr)\n-{\n-  visit_outer_attrs (expr);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::BreakExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   if (expr.has_break_expr ())\n     visit (expr.get_break_expr ());\n }\n@@ -809,22 +760,19 @@ ExpandVisitor::visit (AST::RangeToInclExpr &expr)\n void\n ExpandVisitor::visit (AST::ReturnExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   if (expr.has_returned_expr ())\n     visit (expr.get_returned_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::UnsafeBlockExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_block_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::LoopExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_loop_block ());\n }\n \n@@ -838,7 +786,6 @@ ExpandVisitor::visit (AST::WhileLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::WhileLetLoopExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   for (auto &pattern : expr.get_patterns ())\n     visit (pattern);\n \n@@ -849,7 +796,6 @@ ExpandVisitor::visit (AST::WhileLetLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::ForLoopExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_pattern ());\n   visit (expr.get_iterator_expr ());\n   visit (expr.get_loop_block ());\n@@ -858,7 +804,6 @@ ExpandVisitor::visit (AST::ForLoopExpr &expr)\n void\n ExpandVisitor::visit (AST::IfExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_condition_expr ());\n \n   visit (expr.get_if_block ());\n@@ -876,7 +821,6 @@ ExpandVisitor::visit (AST::IfExprConseqElse &expr)\n void\n ExpandVisitor::visit (AST::IfLetExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   maybe_expand_expr (expr.get_value_expr ());\n \n   visit (expr.get_if_block ());\n@@ -894,13 +838,11 @@ ExpandVisitor::visit (AST::IfLetExprConseqElse &expr)\n void\n ExpandVisitor::visit (AST::MatchExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_scrutinee_expr ());\n \n   for (auto &match_case : expr.get_match_cases ())\n     {\n       auto &arm = match_case.get_arm ();\n-      visit_outer_attrs (arm);\n \n       for (auto &pattern : arm.get_patterns ())\n \tvisit (pattern);\n@@ -915,14 +857,12 @@ ExpandVisitor::visit (AST::MatchExpr &expr)\n void\n ExpandVisitor::visit (AST::AwaitExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_awaited_expr ());\n }\n \n void\n ExpandVisitor::visit (AST::AsyncBlockExpr &expr)\n {\n-  visit_outer_attrs (expr);\n   visit (expr.get_block_expr ());\n }\n \n@@ -952,7 +892,6 @@ ExpandVisitor::visit (AST::TypeBoundWhereClauseItem &item)\n void\n ExpandVisitor::visit (AST::Method &method)\n {\n-  visit_outer_attrs (method);\n   for (auto &param : method.get_generic_params ())\n     visit (param);\n \n@@ -971,7 +910,6 @@ ExpandVisitor::visit (AST::Method &method)\n void\n ExpandVisitor::visit (AST::Module &module)\n {\n-  visit_outer_attrs (module);\n   if (module.get_kind () == AST::Module::ModuleKind::LOADED)\n     {\n       visit_inner_attrs (module);\n@@ -982,9 +920,7 @@ ExpandVisitor::visit (AST::Module &module)\n \n void\n ExpandVisitor::visit (AST::ExternCrate &crate)\n-{\n-  visit_outer_attrs (crate);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::UseTreeGlob &)\n@@ -1000,14 +936,11 @@ ExpandVisitor::visit (AST::UseTreeRebind &)\n \n void\n ExpandVisitor::visit (AST::UseDeclaration &use_decl)\n-{\n-  visit_outer_attrs (use_decl);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::Function &function)\n {\n-  visit_outer_attrs (function);\n   visit_inner_using_attrs (function,\n \t\t\t   function.get_definition ()->get_inner_attrs ());\n   for (auto &param : function.get_generic_params ())\n@@ -1027,14 +960,12 @@ ExpandVisitor::visit (AST::Function &function)\n void\n ExpandVisitor::visit (AST::TypeAlias &type_alias)\n {\n-  visit_outer_attrs (type_alias);\n   visit (type_alias.get_type_aliased ());\n }\n \n void\n ExpandVisitor::visit (AST::StructStruct &struct_item)\n {\n-  visit_outer_attrs (struct_item);\n   for (auto &generic : struct_item.get_generic_params ())\n     visit (generic);\n \n@@ -1047,7 +978,6 @@ ExpandVisitor::visit (AST::StructStruct &struct_item)\n void\n ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n {\n-  visit_outer_attrs (tuple_struct);\n   for (auto &generic : tuple_struct.get_generic_params ())\n     visit (generic);\n \n@@ -1059,9 +989,7 @@ ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n \n void\n ExpandVisitor::visit (AST::EnumItem &item)\n-{\n-  visit_outer_attrs (item);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::EnumItemTuple &item)\n@@ -1084,7 +1012,6 @@ ExpandVisitor::visit (AST::EnumItemDiscriminant &item)\n void\n ExpandVisitor::visit (AST::Enum &enum_item)\n {\n-  visit_outer_attrs (enum_item);\n   for (auto &generic : enum_item.get_generic_params ())\n     visit (generic);\n \n@@ -1095,7 +1022,6 @@ ExpandVisitor::visit (AST::Enum &enum_item)\n void\n ExpandVisitor::visit (AST::Union &union_item)\n {\n-  visit_outer_attrs (union_item);\n   for (auto &generic : union_item.get_generic_params ())\n     visit (generic);\n \n@@ -1105,7 +1031,6 @@ ExpandVisitor::visit (AST::Union &union_item)\n void\n ExpandVisitor::visit (AST::ConstantItem &const_item)\n {\n-  visit_outer_attrs (const_item);\n   maybe_expand_type (const_item.get_type ());\n \n   visit (const_item.get_expr ());\n@@ -1114,7 +1039,6 @@ ExpandVisitor::visit (AST::ConstantItem &const_item)\n void\n ExpandVisitor::visit (AST::StaticItem &static_item)\n {\n-  visit_outer_attrs (static_item);\n   maybe_expand_type (static_item.get_type ());\n \n   visit (static_item.get_expr ());\n@@ -1157,7 +1081,6 @@ ExpandVisitor::visit (AST::TraitItemType &item)\n void\n ExpandVisitor::visit (AST::Trait &trait)\n {\n-  visit_outer_attrs (trait);\n   for (auto &generic : trait.get_generic_params ())\n     visit (generic);\n \n@@ -1181,7 +1104,6 @@ ExpandVisitor::visit (AST::Trait &trait)\n void\n ExpandVisitor::visit (AST::InherentImpl &impl)\n {\n-  visit_outer_attrs (impl);\n   visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &generic : impl.get_generic_params ())\n@@ -1207,7 +1129,6 @@ ExpandVisitor::visit (AST::InherentImpl &impl)\n void\n ExpandVisitor::visit (AST::TraitImpl &impl)\n {\n-  visit_outer_attrs (impl);\n   visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &param : impl.get_generic_params ())\n@@ -1266,7 +1187,6 @@ ExpandVisitor::visit (AST::ExternalFunctionItem &item)\n void\n ExpandVisitor::visit (AST::ExternBlock &block)\n {\n-  visit_outer_attrs (block);\n   visit_inner_attrs (block);\n   std::function<std::unique_ptr<AST::ExternalItem> (AST::SingleASTNode)>\n     extractor\n@@ -1291,9 +1211,7 @@ ExpandVisitor::visit (AST::MacroMatcher &)\n \n void\n ExpandVisitor::visit (AST::MacroRulesDefinition &rules_def)\n-{\n-  visit_outer_attrs (rules_def);\n-}\n+{}\n \n void\n ExpandVisitor::visit (AST::MetaItemPath &)\n@@ -1565,49 +1483,13 @@ ExpandVisitor::visit (AST::BareFunctionType &type)\n {\n   for (auto &param : type.get_function_params ())\n     {\n-      visit_outer_attrs (param);\n       maybe_expand_type (param.get_type ());\n     }\n \n   if (type.has_return_type ())\n     visit (type.get_return_type ());\n }\n \n-template <typename T>\n-void\n-ExpandVisitor::expand_outer_attribute (T &item, AST::SimplePath &path)\n-{\n-  // FIXME: Retrieve path from segments + local use statements instead of string\n-  expander.expand_attribute_proc_macro (item, path);\n-}\n-\n-template <typename T>\n-void\n-ExpandVisitor::visit_outer_attrs (T &item, std::vector<AST::Attribute> &attrs)\n-{\n-  for (auto it = attrs.begin (); it != attrs.end (); /* erase => No increment*/)\n-    {\n-      auto &current = *it;\n-\n-      if (!is_builtin (current) && !is_derive (current))\n-\t{\n-\t  it = attrs.erase (it);\n-\t  expand_outer_attribute (item, current.get_path ());\n-\t}\n-      else\n-\t{\n-\t  it++;\n-\t}\n-    }\n-}\n-\n-template <typename T>\n-void\n-ExpandVisitor::visit_outer_attrs (T &item)\n-{\n-  visit_outer_attrs (item, item.get_outer_attrs ());\n-}\n-\n template <typename T>\n void\n ExpandVisitor::expand_inner_attribute (T &item, AST::SimplePath &path)"}, {"sha": "630b601759450b927bb19fc58389fe20a665b333", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21aa448a4595208415e269aa1080846064029c8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21aa448a4595208415e269aa1080846064029c8/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=b21aa448a4595208415e269aa1080846064029c8", "patch": "@@ -349,14 +349,6 @@ class ExpandVisitor : public AST::ASTVisitor\n   void visit (AST::InferredType &) override;\n   void visit (AST::BareFunctionType &type) override;\n \n-  template <typename T>\n-  void expand_outer_attribute (T &item, AST::SimplePath &path);\n-\n-  template <typename T>\n-  void visit_outer_attrs (T &item, std::vector<AST::Attribute> &attrs);\n-\n-  template <typename T> void visit_outer_attrs (T &item);\n-\n   template <typename T>\n   void expand_inner_attribute (T &item, AST::SimplePath &Path);\n "}]}