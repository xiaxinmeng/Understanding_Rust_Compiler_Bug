{"sha": "9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4NGRiZTZiYWNlYmM4Zjk0N2NjMGJiMmJmZmU4NmZkOGFlYjVmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-27T02:13:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-27T02:13:00Z"}, "message": "re PR c++/45012 (Invalid ambiguity on partial class specialization matching)\n\n\tPR c++/45102\n\t* pt.c (tsubst_copy_and_build) [CONST_DECL]: Don't pull out\n\tconstant value if we're still in a template.\n\nFrom-SVN: r179230", "tree": {"sha": "6b5c05b831d06418be10d3a2edb54708d1dfc3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b5c05b831d06418be10d3a2edb54708d1dfc3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69d28b4f42a1226adb8507083314915dd4a69192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d28b4f42a1226adb8507083314915dd4a69192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d28b4f42a1226adb8507083314915dd4a69192"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "22f3ddebd865d95cbf3d3b066e425a12e7f9f840", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "patch": "@@ -1,5 +1,9 @@\n 2011-09-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45102\n+\t* pt.c (tsubst_copy_and_build) [CONST_DECL]: Don't pull out\n+\tconstant value if we're still in a template.\n+\n \tPR c++/46105\n \t* typeck.c (structural_comptypes): Ignore cv-quals on typename scope.\n "}, {"sha": "4d57f94d2b141b5171a56e444403d480b7f1825a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "patch": "@@ -13916,7 +13916,7 @@ tsubst_copy_and_build (tree t,\n       t = tsubst_copy (t, args, complain, in_decl);\n       /* As in finish_id_expression, we resolve enumeration constants\n \t to their underlying values.  */\n-      if (TREE_CODE (t) == CONST_DECL)\n+      if (TREE_CODE (t) == CONST_DECL && !processing_template_decl)\n \t{\n \t  used_types_insert (TREE_TYPE (t));\n \t  return DECL_INITIAL (t);"}, {"sha": "3c12f6113199b13d342420996921a959e545a5ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "patch": "@@ -1,5 +1,8 @@\n 2011-09-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/45012\n+\t* g++.dg/template/partial13.C: New.\n+\n \tPR c++/46105\n \t* g++.dg/template/partial12.C: New.\n "}, {"sha": "bfbe2e0286470b3d5979ffd9162f62e98e8d6876", "filename": "gcc/testsuite/g++.dg/template/partial13.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial13.C?ref=9d84dbe6bacebc8f947cc0bb2bffe86fd8aeb5f0", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/45012\n+\n+template <bool B, class T=void> struct enable_if;\n+\n+template <class T>\n+struct enable_if<true,T>\n+{\n+  typedef T type;\n+};\n+\n+enum { RUNTIME = 0 };\n+// it compiles with the previous line commented out and the next commented in\n+// static const int RUNTIME=0;\n+\n+template <class T, class U, class EN=void> struct foo;\n+\n+template <template<int> class V, int M>\n+struct foo<V<M>,V<M>, typename enable_if<M==RUNTIME||M==2>::type> {};\n+\n+template <template<int> class V1, template<int> class V2, int M>\n+struct foo<V1<M>,V2<M>, typename enable_if<M==RUNTIME||M==2>::type> {};\n+\n+template <int M> struct bar {};\n+\n+foo<bar<2>,bar<2> > x;"}]}