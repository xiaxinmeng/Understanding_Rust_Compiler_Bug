{"sha": "afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiOWI3MTA4MTA0YTczZThhYzdhOWI4ZTY4NzU4NzBlNWNhNGJiYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-01T17:20:57Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-01T17:20:57Z"}, "message": "i386: Use generic division to generate INVALID and DIVZERO exceptions\n\nIntroduce math_force_eval to evaluate generic division to generate\nINVALID and DIVZERO exceptions.\n\nlibgcc/ChangeLog:\n\n\t* config/i386/sfp-exceptions.c (__math_force_eval): New define.\n\t(__sfp_handle_exceptions): Use __math_force_eval to evaluete\n\tgeneric division to generate INVALID and DIVZERO exceptions.\n\nlibatomic/ChangeLog:\n\n\t* config/x86/fenv.c (__math_force_eval): New define.\n\t(__atomic_feraiseexcept): Use __math_force_eval to evaluete\n\tgeneric division to generate INVALID and DIVZERO exceptions.\n\nlibgfortran/ChangeLog:\n\n\t* config/fpu-387.h (__math_force_eval): New define.\n\t(local_feraiseexcept): Use __math_force_eval to evaluete\n\tgeneric division to generate INVALID and DIVZERO exceptions.", "tree": {"sha": "07fa9ec4b94921a6b90d301357f4eb4ef50a06a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07fa9ec4b94921a6b90d301357f4eb4ef50a06a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d730fd95eebaecad8e26f9e089c7df4630e94f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d730fd95eebaecad8e26f9e089c7df4630e94f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d730fd95eebaecad8e26f9e089c7df4630e94f1c"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "48c115de49f2b35149ef1dc630c33f1d9c873bf7", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/x86/fenv.c (__math_force_eval): New define.\n+\t(__atomic_feraiseexcept): Use __math_force_eval to evaluete\n+\tgeneric division to generate INVALID and DIVZERO exceptions.\n+\n 2020-04-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/fenv.c (__atomic_feraiseexcept) [__SSE_MATH__]:"}, {"sha": "d972a99f5943bfa0b6016823bb3a41185dae9b46", "filename": "libatomic/config/x86/fenv.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libatomic%2Fconfig%2Fx86%2Ffenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libatomic%2Fconfig%2Fx86%2Ffenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Fx86%2Ffenv.c?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -47,6 +47,12 @@ struct fenv\n   unsigned short int __unused5;\n };\n \n+#ifdef __SSE_MATH__\n+# define __math_force_eval(x) asm volatile (\"\" : : \"x\" (x));\n+#else\n+# define __math_force_eval(x) asm volatile (\"\" : : \"f\" (x));\n+#endif\n+\n /* Raise the supported floating-point exceptions from EXCEPTS.  Other\n    bits in EXCEPTS are ignored.  */\n \n@@ -56,12 +62,7 @@ __atomic_feraiseexcept (int excepts)\n   if (excepts & FE_INVALID)\n     {\n       float f = 0.0f;\n-#ifdef __SSE_MATH__\n-      asm volatile (\"%vdivss\\t{%0, %d0|%d0, %0}\" : \"+x\" (f));\n-#else\n-      asm volatile (\"fdiv\\t{%y0, %0|%0, %y0}\" : \"+t\" (f));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / f);\n     }\n   if (excepts & FE_DENORM)\n     {\n@@ -74,12 +75,7 @@ __atomic_feraiseexcept (int excepts)\n   if (excepts & FE_DIVBYZERO)\n     {\n       float f = 1.0f, g = 0.0f;\n-#ifdef __SSE_MATH__\n-      asm volatile (\"%vdivss\\t{%1, %d0|%d0, %1}\" : \"+x\" (f) : \"xm\" (g));\n-#else\n-      asm volatile (\"fdivs\\t%1\" : \"+t\" (f) : \"m\" (g));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / g);\n     }\n   if (excepts & FE_OVERFLOW)\n     {"}, {"sha": "02b36d3a380912a89da653519a14e5c1ea06e51f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sfp-exceptions.c (__math_force_eval): New define.\n+\t(__sfp_handle_exceptions): Use __math_force_eval to evaluete\n+\tgeneric division to generate INVALID and DIVZERO exceptions.\n+\n 2020-04-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rs6000/crtresfpr.S: Use .machine ppc."}, {"sha": "4b3a7a08da124dcee465384d56138ac8822ab1f2", "filename": "libgcc/config/i386/sfp-exceptions.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgcc%2Fconfig%2Fi386%2Fsfp-exceptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgcc%2Fconfig%2Fi386%2Fsfp-exceptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsfp-exceptions.c?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -41,18 +41,19 @@ struct fenv\n   unsigned short int __unused5;\n };\n \n+#ifdef __SSE_MATH__\n+# define __math_force_eval(x) asm volatile (\"\" : : \"x\" (x));\n+#else\n+# define __math_force_eval(x) asm volatile (\"\" : : \"f\" (x));\n+#endif\n+\n void\n __sfp_handle_exceptions (int _fex)\n {\n   if (_fex & FP_EX_INVALID)\n     {\n       float f = 0.0f;\n-#ifdef __SSE_MATH__\n-      asm volatile (\"%vdivss\\t{%0, %d0|%d0, %0}\" : \"+x\" (f));\n-#else\n-      asm volatile (\"fdiv\\t{%y0, %0|%0, %y0}\" : \"+t\" (f));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / f);\n     }\n   if (_fex & FP_EX_DENORM)\n     {\n@@ -65,12 +66,7 @@ __sfp_handle_exceptions (int _fex)\n   if (_fex & FP_EX_DIVZERO)\n     {\n       float f = 1.0f, g = 0.0f;\n-#ifdef __SSE_MATH__\n-      asm volatile (\"%vdivss\\t{%1, %d0|%d0, %1}\" : \"+x\" (f) : \"xm\" (g));\n-#else\n-      asm volatile (\"fdivs\\t%1\" : \"+t\" (f) : \"m\" (g));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / g);\n     }\n   if (_fex & FP_EX_OVERFLOW)\n     {"}, {"sha": "eecfb904f551767c9f4a266cb70fe5f2c029c788", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/fpu-387.h (__math_force_eval): New define.\n+\t(local_feraiseexcept): Use __math_force_eval to evaluete\n+\tgeneric division to generate INVALID and DIVZERO exceptions.\n+\n 2020-04-22  Fritz Reese  <foreese@gcc.gnu.org>\n \n \t* intrinsics/trigd.c, intrinsics/trigd_lib.inc, intrinsics/trigd.inc:"}, {"sha": "41b82bc809858ef170ca3760e3e3af4b2912cfc2", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=afb9b7108104a73e8ac7a9b8e6875870e5ca4bbb", "patch": "@@ -91,6 +91,11 @@ my_fenv_t;\n _Static_assert (sizeof(my_fenv_t) <= (size_t) GFC_FPE_STATE_BUFFER_SIZE,\n \t\t\"GFC_FPE_STATE_BUFFER_SIZE is too small\");\n \n+#ifdef __SSE_MATH__\n+# define __math_force_eval(x) __asm__ __volatile__ (\"\" : : \"x\" (x));\n+#else\n+# define __math_force_eval(x) __asm__ __volatile__ (\"\" : : \"f\" (x));\n+#endif\n \n /* Raise the supported floating-point exceptions from EXCEPTS.  Other\n    bits in EXCEPTS are ignored.  Code originally borrowed from\n@@ -102,12 +107,7 @@ local_feraiseexcept (int excepts)\n   if (excepts & _FPU_MASK_IM)\n     {\n       float f = 0.0f;\n-#ifdef __SSE_MATH__\n-      __asm__ __volatile__ (\"%vdivss\\t{%0, %d0|%d0, %0}\" : \"+x\" (f));\n-#else\n-      __asm__ __volatile__ (\"fdiv\\t{%y0, %0|%0, %y0}\" : \"+t\" (f));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / f);\n     }\n   if (excepts & _FPU_MASK_DM)\n     {\n@@ -120,12 +120,7 @@ local_feraiseexcept (int excepts)\n   if (excepts & _FPU_MASK_ZM)\n     {\n       float f = 1.0f, g = 0.0f;\n-#ifdef __SSE_MATH__\n-      __asm__ __volatile__ (\"%vdivss\\t{%1, %d0|%d0, %1}\" : \"+x\" (f) : \"xm\" (g));\n-#else\n-      __asm__ __volatile__ (\"fdivs\\t%1\" : \"+t\" (f) : \"m\" (g));\n-      /* No need for fwait, exception is triggered by emitted fstp.  */\n-#endif\n+      __math_force_eval (f / g);\n     }\n   if (excepts & _FPU_MASK_OM)\n     {"}]}