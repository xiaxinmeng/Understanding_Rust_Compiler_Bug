{"sha": "96f46444e146883a2edbf66ba29a911e08e05037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmNDY0NDRlMTQ2ODgzYTJlZGJmNjZiYTI5YTkxMWUwOGUwNTAzNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-12-08T12:42:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-12-08T12:42:44Z"}, "message": "bfin.c (effective_address_32bit_p): Return true for anything involving the GOT.\n\n\t* config/bfin/bfin.c (effective_address_32bit_p): Return true for\n\tanything involving the GOT.\n\t(bfin_adjust_cost): Don't take the REGNO of a MEM.\n\t(trapping_loads_p): Look inside the pattern of an insn to find the\n\tSET.\n\t* config/bfin/bfin.md (attr \"type\"): Add movcc.\n\t(insn_reservation \"alu\"): Likewise.\n\t(movsicc_insn1, movsicc_insn2): Change type to movcc.\n\nFrom-SVN: r119655", "tree": {"sha": "1ae5ecb308b61fabc103e1bde34bdcf3bd241232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae5ecb308b61fabc103e1bde34bdcf3bd241232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f46444e146883a2edbf66ba29a911e08e05037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f46444e146883a2edbf66ba29a911e08e05037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f46444e146883a2edbf66ba29a911e08e05037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f46444e146883a2edbf66ba29a911e08e05037/comments", "author": null, "committer": null, "parents": [{"sha": "5fecd26633731c86f37ef89b40012ed6ca1daa6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fecd26633731c86f37ef89b40012ed6ca1daa6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fecd26633731c86f37ef89b40012ed6ca1daa6c"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "998d8c9f6a3a5d8edf3924ecbdd2cbc390166947", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96f46444e146883a2edbf66ba29a911e08e05037", "patch": "@@ -1,3 +1,14 @@\n+2006-12-08  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.c (effective_address_32bit_p): Return true for\n+\tanything involving the GOT.\n+\t(bfin_adjust_cost): Don't take the REGNO of a MEM.\n+\t(trapping_loads_p): Look inside the pattern of an insn to find the\n+\tSET.\n+\t* config/bfin/bfin.md (attr \"type\"): Add movcc.\n+\t(insn_reservation \"alu\"): Likewise.\n+\t(movsicc_insn1, movsicc_insn2): Change type to movcc.\n+\n 2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* config/spu/spu-c.c (spu_build_overload_builtin): Delete."}, {"sha": "e31ced12bd323027cf293cd4f79ce6253ecb225d", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=96f46444e146883a2edbf66ba29a911e08e05037", "patch": "@@ -1097,6 +1097,9 @@ effective_address_32bit_p (rtx op, enum machine_mode mode)\n       return 0;\n     }\n \n+  if (GET_CODE (XEXP (op, 1)) == UNSPEC)\n+    return 1;\n+\n   offset = INTVAL (XEXP (op, 1));\n \n   /* All byte loads use a 16 bit offset.  */\n@@ -2997,7 +3000,8 @@ bfin_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n       rtx pat = PATTERN (dep_insn);\n       rtx dest = SET_DEST (pat);\n       rtx src = SET_SRC (pat);\n-      if (! ADDRESS_REGNO_P (REGNO (dest)) || ! D_REGNO_P (REGNO (src)))\n+      if (! ADDRESS_REGNO_P (REGNO (dest))\n+\t  || ! (MEM_P (src) || D_REGNO_P (REGNO (src))))\n \treturn cost;\n       return cost + (dep_insn_type == TYPE_MOVE ? 4 : 3);\n     }\n@@ -3918,10 +3922,12 @@ trapping_loads_p (rtx insn)\n     {\n       enum attr_type t;\n       t = get_attr_type (XVECEXP (pat, 0, 1));\n-      if (t == TYPE_MCLD && may_trap_p (SET_SRC (XVECEXP (pat, 0, 1))))\n+      if (t == TYPE_MCLD\n+\t  && may_trap_p (SET_SRC (PATTERN (XVECEXP (pat, 0, 1)))))\n \treturn true;\n       t = get_attr_type (XVECEXP (pat, 0, 2));\n-      if (t == TYPE_MCLD && may_trap_p (SET_SRC (XVECEXP (pat, 0, 2))))\n+      if (t == TYPE_MCLD\n+\t  && may_trap_p (SET_SRC (PATTERN (XVECEXP (pat, 0, 2)))))\n \treturn true;\n       return false;\n     }"}, {"sha": "8a59ce8fd9ab986bec0ee2ac690d2525e56e54e8", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f46444e146883a2edbf66ba29a911e08e05037/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=96f46444e146883a2edbf66ba29a911e08e05037", "patch": "@@ -159,7 +159,7 @@\n    (MACFLAG_IH 10)])\n \n (define_attr \"type\"\n-  \"move,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy\"\n+  \"move,movcc,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy\"\n   (const_string \"misc\"))\n \n (define_attr \"addrtype\" \"32bit,preg,ireg\"\n@@ -198,7 +198,7 @@\n (define_reservation \"core\" \"slot0+slot1+slot2\")\n \n (define_insn_reservation \"alu\" 1\n-  (eq_attr \"type\" \"move,mvi,alu0,shft,brcc,br,call,misc,sync,compare\")\n+  (eq_attr \"type\" \"move,movcc,mvi,alu0,shft,brcc,br,call,misc,sync,compare\")\n   \"core\")\n \n (define_insn_reservation \"imul\" 3\n@@ -352,7 +352,7 @@\n     if cc %0 =%2; /* movsicc-1b */\n     if !cc %0 =%1; if cc %0=%2; /* movsicc-1 */\"\n   [(set_attr \"length\" \"2,2,4\")\n-   (set_attr \"type\" \"move\")\n+   (set_attr \"type\" \"movcc\")\n    (set_attr \"seq_insns\" \"*,*,multi\")])\n \n (define_insn \"*movsicc_insn2\"\n@@ -368,7 +368,7 @@\n    if cc %0 =%1; /* movsicc-2a */\n    if cc %0 =%1; if !cc %0=%2; /* movsicc-1 */\"\n   [(set_attr \"length\" \"2,2,4\")\n-   (set_attr \"type\" \"move\")\n+   (set_attr \"type\" \"movcc\")\n    (set_attr \"seq_insns\" \"*,*,multi\")])\n \n ;; Insns to load HIGH and LO_SUM"}]}