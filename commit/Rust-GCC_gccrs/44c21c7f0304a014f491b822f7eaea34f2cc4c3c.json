{"sha": "44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRjMjFjN2YwMzA0YTAxNGY0OTFiODIyZjdlYWVhMzRmMmNjNGMzYw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-05-25T03:59:00Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-05-25T03:59:00Z"}, "message": "c-common.c (unsigned_conversion_warning): Move warning control from if() to warning(OPT_*).\n\n* c-common.c (unsigned_conversion_warning): Move warning control\nfrom if() to warning(OPT_*).\n(c_common_truthvalue_conversion): Likewise.\n(c_do_switch_warnings): Likewise.\n* c-decl.c (diagnose_mismatched_decls): Likewise.\n(diagnose_mismatched_decls): Likewise.\n(define_label): Likewise.\n(grokdeclarator): Likewise.\n* c-format.c (check_format_info): Likewise.\n* c-lex.c (interpret_integer): Likwise.\n(lex_string): Likewise.\n* c-opts.c (c_common_post_options): Likewise.\n* c-parser.c (c_parser_unary_expression): Likewise.\n* c-pragma.c (handle_pragma_redefine_extname): Likewise.\n(handle_pragma_extern_prefix): Likewise.\n* c-typeck.c (build_binary_op): Likewise.\n* gcse.c (is_too_expensive): Likewise.\n* opts.c (decode_options): Likewise.\n* stor-layout.c (place_field): Likewise.\n* tree-cfg.c (remove_bb): Likewise.\n\n* c.opt (-Wreturn-type): Add Var(warn_return_type).\n* flags.h (warn_return_type): Remove.\n* toplev.c (warn_return_type): Likewise.\n\nFrom-SVN: r100135", "tree": {"sha": "9643535c0dbab111233baa2e45e430fa4ca4774d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9643535c0dbab111233baa2e45e430fa4ca4774d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/comments", "author": null, "committer": null, "parents": [{"sha": "32a5d31dead6b6a3386cd8f792f3556b1f780b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a5d31dead6b6a3386cd8f792f3556b1f780b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a5d31dead6b6a3386cd8f792f3556b1f780b2d"}], "stats": {"total": 183, "additions": 109, "deletions": 74}, "files": [{"sha": "256fbf5f289fdb6fdfcec5ffc16fcd72325da331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -1,3 +1,30 @@\n+2005-05-24  DJ Delorie  <dj@redhat.com>\n+\n+\t* c-common.c (unsigned_conversion_warning): Move warning control\n+\tfrom if() to warning(OPT_*).\n+\t(c_common_truthvalue_conversion): Likewise.\n+\t(c_do_switch_warnings): Likewise.\n+\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n+\t(diagnose_mismatched_decls): Likewise.\n+\t(define_label): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* c-format.c (check_format_info): Likewise.\n+\t* c-lex.c (interpret_integer): Likwise.\n+\t(lex_string): Likewise.\n+\t* c-opts.c (c_common_post_options): Likewise.\n+\t* c-parser.c (c_parser_unary_expression): Likewise.\n+\t* c-pragma.c (handle_pragma_redefine_extname): Likewise.\n+\t(handle_pragma_extern_prefix): Likewise.\n+\t* c-typeck.c (build_binary_op): Likewise.\n+\t* gcse.c (is_too_expensive): Likewise.\n+\t* opts.c (decode_options): Likewise.\n+\t* stor-layout.c (place_field): Likewise.\n+\t* tree-cfg.c (remove_bb): Likewise.\n+\n+\t* c.opt (-Wreturn-type): Add Var(warn_return_type).\n+\t* flags.h (warn_return_type): Remove.\n+\t* toplev.c (warn_return_type): Likewise.\n+\n 2005-05-24  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* configure.ac: Don't use gcc_AC_C_LONG_LONG.  Check for"}, {"sha": "17efd336e05361ea900550d048f1ae7142b32ebc", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -945,8 +945,9 @@ unsigned_conversion_warning (tree result, tree operand)\n       if (!int_fits_type_p (operand, c_common_signed_type (type)))\n \t/* This detects cases like converting -129 or 256 to unsigned char.  */\n \twarning (0, \"large integer implicitly truncated to unsigned type\");\n-      else if (warn_conversion)\n-\twarning (0, \"negative integer implicitly converted to unsigned type\");\n+      else\n+\twarning (OPT_Wconversion,\n+\t\t \"negative integer implicitly converted to unsigned type\");\n     }\n }\n \n@@ -2470,8 +2471,9 @@ c_common_truthvalue_conversion (tree expr)\n       break;\n \n     case MODIFY_EXPR:\n-      if (warn_parentheses && !TREE_NO_WARNING (expr))\n-\twarning (0, \"suggest parentheses around assignment used as truth value\");\n+      if (!TREE_NO_WARNING (expr))\n+\twarning (OPT_Wparentheses,\n+\t\t \"suggest parentheses around assignment used as truth value\");\n       break;\n \n     default:\n@@ -3725,8 +3727,9 @@ c_do_switch_warnings (splay_tree cases, location_t switch_location,\n     return;\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n-  if (warn_switch_default && !default_node)\n-    warning (0, \"%Hswitch missing default case\", &switch_location);\n+  if (!default_node)\n+    warning (OPT_Wswitch_default, \"%Hswitch missing default case\",\n+\t     &switch_location);\n \n   /* If the switch expression was an enumerated type, check that\n      exactly all enumeration literals are covered by the cases."}, {"sha": "efbd512d062e51de4f4c3407a10be8ad9d0b47c2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -1154,9 +1154,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       else if (TREE_PUBLIC (newdecl))\n \twarning (0, \"%Jbuilt-in function %qD declared as non-function\",\n \t\t newdecl, newdecl);\n-      else if (warn_shadow)\n-\twarning (0, \"%Jdeclaration of %qD shadows a built-in function\",\n-\t\t newdecl, newdecl);\n+      else\n+\twarning (OPT_Wshadow, \"%Jdeclaration of %qD shadows \"\n+\t\t \"a built-in function\", newdecl, newdecl);\n       return false;\n     }\n \n@@ -1270,9 +1270,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      || (DECL_INITIAL (newdecl)\n \t\t  && !TYPE_ARG_TYPES (TREE_TYPE (newdecl)))))\n \t{\n-\t  if (warn_shadow)\n-\t    warning (0, \"%Jdeclaration of %qD shadows a built-in function\",\n-\t\t     newdecl, newdecl);\n+\t  warning (OPT_Wshadow, \"%Jdeclaration of %qD shadows \"\n+\t\t   \"a built-in function\", newdecl, newdecl);\n \t  /* Discard the old built-in function.  */\n \t  return false;\n \t}\n@@ -2543,9 +2542,9 @@ define_label (location_t location, tree name)\n \t    /*invisible=*/false, /*nested=*/false);\n     }\n \n-  if (warn_traditional && !in_system_header && lookup_name (name))\n-    warning (0, \"%Htraditional C lacks a separate namespace for labels, \"\n-             \"identifier %qE conflicts\", &location, name);\n+  if (!in_system_header && lookup_name (name))\n+    warning (OPT_Wtraditional, \"%Htraditional C lacks a separate namespace \"\n+             \"for labels, identifier %qE conflicts\", &location, name);\n \n   nlist_se = XOBNEW (&parser_obstack, struct c_label_list);\n   nlist_se->next = label_context_stack_se->labels_def;\n@@ -4271,8 +4270,9 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t   them for noreturn functions.  */\n \t\tif (VOID_TYPE_P (type) && really_funcdef)\n \t\t  pedwarn (\"function definition has qualified void return type\");\n-\t\telse if (warn_return_type)\n-\t\t  warning (0, \"type qualifiers ignored on function return type\");\n+\t\telse\n+\t\t  warning (OPT_Wreturn_type,\n+\t\t\t   \"type qualifiers ignored on function return type\");\n \t\t\n \t\ttype = c_build_qualified_type (type, type_quals);\n \t      }\n@@ -6079,7 +6079,8 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n #endif\n \n   if (!in_system_header)\n-    warning (OPT_Wold_style_definition, \"%Jold-style function definition\", fndecl);\n+    warning (OPT_Wold_style_definition, \"%Jold-style function definition\",\n+\t     fndecl);\n \n   /* Match each formal parameter name with its declaration.  Save each\n      decl in the appropriate TREE_PURPOSE slot of the parmids chain.  */"}, {"sha": "f413e39d411b692420a9c6a9ddef13e0889fa867", "filename": "gcc/c-format.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -1140,8 +1140,8 @@ check_format_info (function_format_info *info, tree params)\n \t{\n \t  /* For strftime-like formats, warn for not checking the format\n \t     string; but there are no arguments to check.  */\n-\t  if (warn_format_nonliteral)\n-\t    warning (0, \"format not a string literal, format string not checked\");\n+\t  warning (OPT_Wformat_nonliteral,\n+\t\t   \"format not a string literal, format string not checked\");\n \t}\n       else if (info->first_arg_num != 0)\n \t{\n@@ -1154,10 +1154,15 @@ check_format_info (function_format_info *info, tree params)\n \t      params = TREE_CHAIN (params);\n \t      ++arg_num;\n \t    }\n-\t  if (params == 0 && (warn_format_nonliteral || warn_format_security))\n-\t    warning (0, \"format not a string literal and no format arguments\");\n-\t  else if (warn_format_nonliteral)\n-\t    warning (0, \"format not a string literal, argument types not checked\");\n+\t  if (params == 0 && warn_format_security)\n+\t    warning (OPT_Wformat_security,\n+\t\t     \"format not a string literal and no format arguments\");\n+\t  else if (params == 0 && warn_format_nonliteral)\n+\t    warning (OPT_Wformat_nonliteral,\n+\t\t     \"format not a string literal and no format arguments\");\n+\t  else\n+\t    warning (OPT_Wformat_nonliteral,\n+\t\t     \"format not a string literal, argument types not checked\");\n \t}\n     }\n "}, {"sha": "052c3f691221dfbe2e2734bc20d3da73be9d0f02", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -599,8 +599,9 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n \t\t  itk = itk_u;\n \t\t  warning (0, \"this decimal constant is unsigned only in ISO C90\");\n \t\t}\n-\t      else if (warn_traditional)\n-\t\twarning (0, \"this decimal constant would be unsigned in ISO C90\");\n+\t      else\n+\t\twarning (OPT_Wtraditional,\n+\t\t\t \"this decimal constant would be unsigned in ISO C90\");\n \t    }\n \t}\n     }\n@@ -763,8 +764,9 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n   if (concats)\n     strs = (cpp_string *) obstack_finish (&str_ob);\n \n-  if (concats && !objc_string && warn_traditional && !in_system_header)\n-    warning (0, \"traditional C rejects string constant concatenation\");\n+  if (concats && !objc_string && !in_system_header)\n+    warning (OPT_Wtraditional,\n+\t     \"traditional C rejects string constant concatenation\");\n \n   if ((c_lex_string_translate\n        ? cpp_interpret_string : cpp_interpret_string_notranslate)"}, {"sha": "a79933359feed8e27499390f86281e39184f7a1f", "filename": "gcc/c-opts.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -979,18 +979,21 @@ c_common_post_options (const char **pfilename)\n \n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n-  if (warn_format_y2k && !warn_format)\n-    warning (0, \"-Wformat-y2k ignored without -Wformat\");\n-  if (warn_format_extra_args && !warn_format)\n-    warning (0, \"-Wformat-extra-args ignored without -Wformat\");\n-  if (warn_format_zero_length && !warn_format)\n-    warning (0, \"-Wformat-zero-length ignored without -Wformat\");\n-  if (warn_format_nonliteral && !warn_format)\n-    warning (0, \"-Wformat-nonliteral ignored without -Wformat\");\n-  if (warn_format_security && !warn_format)\n-    warning (0, \"-Wformat-security ignored without -Wformat\");\n-  if (warn_missing_format_attribute && !warn_format)\n-    warning (0, \"-Wmissing-format-attribute ignored without -Wformat\");\n+  if (!warn_format)\n+    {\n+      warning (OPT_Wformat_y2k,\n+\t       \"-Wformat-y2k ignored without -Wformat\");\n+      warning (OPT_Wformat_extra_args,\n+\t       \"-Wformat-extra-args ignored without -Wformat\");\n+      warning (OPT_Wformat_zero_length,\n+\t       \"-Wformat-zero-length ignored without -Wformat\");\n+      warning (OPT_Wformat_nonliteral,\n+\t       \"-Wformat-nonliteral ignored without -Wformat\");\n+      warning (OPT_Wformat_security,\n+\t       \"-Wformat-security ignored without -Wformat\");\n+      warning (OPT_Wmissing_format_attribute,\n+\t       \"-Wmissing-format-attribute ignored without -Wformat\");\n+    }\n \n   /* C99 requires special handling of complex multiplication and division;\n      -ffast-math and -fcx-limited-range are handled in process_options.  */"}, {"sha": "04fffd1a23f3de1d95f9147dfd599cf1d998a51a", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -4518,8 +4518,9 @@ c_parser_unary_expression (c_parser *parser)\n       return ret;\n     case CPP_PLUS:\n       c_parser_consume_token (parser);\n-      if (!c_dialect_objc () && warn_traditional && !in_system_header)\n-\twarning (0, \"traditional C rejects the unary plus operator\");\n+      if (!c_dialect_objc () && !in_system_header)\n+\twarning (OPT_Wtraditional,\n+\t\t \"traditional C rejects the unary plus operator\");\n       return parser_build_unary_op (CONVERT_EXPR,\n \t\t\t\t    c_parser_cast_expression (parser, NULL));\n     case CPP_MINUS:"}, {"sha": "f4801e87c06f6c599e4cda6a7c66a4432c0c7024", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -418,7 +418,8 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n   if (!flag_mudflap && !targetm.handle_pragma_redefine_extname)\n     {\n       if (warn_unknown_pragmas > in_system_header)\n-\twarning (0, \"#pragma redefine_extname not supported on this target\");\n+\twarning (OPT_Wunknown_pragmas,\n+\t\t \"#pragma redefine_extname not supported on this target\");\n       return;\n     }\n \n@@ -486,7 +487,8 @@ handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n     /* Note that the length includes the null terminator.  */\n     pragma_extern_prefix = (TREE_STRING_LENGTH (prefix) > 1 ? prefix : NULL);\n   else if (warn_unknown_pragmas > in_system_header)\n-    warning (0, \"#pragma extern_prefix not supported on this target\");\n+    warning (OPT_Wunknown_pragmas,\n+\t     \"#pragma extern_prefix not supported on this target\");\n }\n \n /* Hook from the front ends to apply the results of one of the preceding"}, {"sha": "00f701093ec7444a3991ffa2841c7e0a9a03b9bf", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -7523,8 +7523,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case EXACT_DIV_EXPR:\n       /* Floating point division by zero is a legitimate way to obtain\n \t infinities and NaNs.  */\n-      if (warn_div_by_zero && skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (0, \"division by zero\");\n+      if (skip_evaluation == 0 && integer_zerop (op1))\n+\twarning (OPT_Wdiv_by_zero, \"division by zero\");\n \n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n@@ -7562,8 +7562,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n-      if (warn_div_by_zero && skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (0, \"division by zero\");\n+      if (skip_evaluation == 0 && integer_zerop (op1))\n+\twarning (OPT_Wdiv_by_zero, \"division by zero\");\n \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{\n@@ -7655,8 +7655,9 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n     case EQ_EXPR:\n     case NE_EXPR:\n-      if (warn_float_equal && (code0 == REAL_TYPE || code1 == REAL_TYPE))\n-\twarning (0, \"comparing floating point with == or != is unsafe\");\n+      if (code0 == REAL_TYPE || code1 == REAL_TYPE)\n+\twarning (OPT_Wfloat_equal,\n+\t\t \"comparing floating point with == or != is unsafe\");\n       /* Result of comparison is always int,\n \t but don't convert the args to int!  */\n       build_type = integer_type_node;"}, {"sha": "a055216e70630d3ca993ccd5fab8acb20d92db9d", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -339,7 +339,7 @@ C++ ObjC++ Var(warn_reorder)\n Warn when the compiler reorders code\n \n Wreturn-type\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(warn_return_type)\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)\n \n Wselector"}, {"sha": "c28e16bd91e1b0a3ca44067f78d328e9589c846d", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -101,11 +101,6 @@ extern bool extra_warnings;\n \n extern void set_Wunused (int setting);\n \n-/* Nonzero means warn about function definitions that default the return type\n-   or that use a null return and have a return-type other than void.  */\n-\n-extern int warn_return_type;\n-\n /* Nonzero means warn about any objects definitions whose size is larger\n    than N bytes.  Also want about function definitions whose returned\n    values are larger than N bytes. The value N is in `larger_than_size'.  */"}, {"sha": "39b18bf146970733f4d29b4377f6f1c7a17f1c4a", "filename": "gcc/gcse.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -6529,9 +6529,9 @@ is_too_expensive (const char *pass)\n      graceful degradation.  */\n   if (n_edges > 20000 + n_basic_blocks * 4)\n     {\n-      if (warn_disabled_optimization)\n-\twarning (0, \"%s: %d basic blocks and %d edges/basic block\",\n-\t\t pass, n_basic_blocks, n_edges / n_basic_blocks);\n+      warning (OPT_Wdisabled_optimization,\n+\t       \"%s: %d basic blocks and %d edges/basic block\",\n+\t       pass, n_basic_blocks, n_edges / n_basic_blocks);\n \n       return true;\n     }\n@@ -6542,9 +6542,9 @@ is_too_expensive (const char *pass)\n        * SBITMAP_SET_SIZE (max_reg_num ())\n        * sizeof (SBITMAP_ELT_TYPE)) > MAX_GCSE_MEMORY)\n     {\n-      if (warn_disabled_optimization)\n-\twarning (0, \"%s: %d basic blocks and %d registers\",\n-\t\t pass, n_basic_blocks, max_reg_num ());\n+      warning (OPT_Wdisabled_optimization,\n+\t       \"%s: %d basic blocks and %d registers\",\n+\t       pass, n_basic_blocks, max_reg_num ());\n \n       return true;\n     }"}, {"sha": "5004cbf3775525aadbb47e3d8882ea609b2e72cf", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -668,7 +668,8 @@ decode_options (unsigned int argc, const char **argv)\n \t this to `2' if -Wall is used, so we can avoid giving out\n \t lots of errors for people who don't realize what -Wall does.  */\n       if (warn_uninitialized == 1)\n-\twarning (0, \"-Wuninitialized is not supported without -O\");\n+\twarning (OPT_Wuninitialized,\n+\t\t \"-Wuninitialized is not supported without -O\");\n     }\n \n   if (flag_really_no_inline == 2)"}, {"sha": "65d98f8f3ad1fb466b06dc7ab4c54289cd16fc8d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -869,8 +869,7 @@ place_field (record_layout_info rli, tree field)\n       /* No, we need to skip space before this field.\n \t Bump the cumulative size to multiple of field alignment.  */\n \n-      if (warn_padded)\n-\twarning (0, \"%Jpadding struct to align %qD\", field, field);\n+      warning (OPT_Wpadded, \"%Jpadding struct to align %qD\", field, field);\n \n       /* If the alignment is still within offset_align, just align\n \t the bit position.  */"}, {"sha": "91cef0506079871be900d928fb47063bd51be5ba", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -403,11 +403,6 @@ static const struct\n target_options[] = TARGET_OPTIONS;\n #endif\n \n-/* Nonzero means warn about function definitions that default the return type\n-   or that use a null return and have a return-type other than void.  */\n-\n-int warn_return_type;\n-\n /* Output files for assembler code (real compiler output)\n    and debugging dumps.  */\n "}, {"sha": "22215a391277561f6aa65c060f64b620c88f928e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c21c7f0304a014f491b822f7eaea34f2cc4c3c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "patch": "@@ -2110,11 +2110,11 @@ remove_bb (basic_block bb)\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n #ifdef USE_MAPPED_LOCATION\n-  if (warn_notreached && loc > BUILTINS_LOCATION)\n-    warning (0, \"%Hwill never be executed\", &loc);\n+  if (loc > BUILTINS_LOCATION)\n+    warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n #else\n-  if (warn_notreached && loc)\n-    warning (0, \"%Hwill never be executed\", loc);\n+  if (loc)\n+    warning (OPT_Wunreachable_code, \"%Hwill never be executed\", loc);\n #endif\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);"}]}