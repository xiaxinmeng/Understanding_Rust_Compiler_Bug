{"sha": "58646b77eddc64f8b2cb6041180c3680d85c1faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2NDZiNzdlZGRjNjRmOGIyY2I2MDQxMTgwYzM2ODBkODVjMWZhZg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-05-02T16:02:52Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-05-02T16:02:52Z"}, "message": "c-common.c (resolve_overloaded_builtin): Forward to target hook for BUILT_IN_MD built-ins.\n\n2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n\n        * c-common.c (resolve_overloaded_builtin): Forward to target\n        hook for BUILT_IN_MD built-ins.\n        * c-typeck.c (finish_call_expr): Call resolve_overloaded_builtin\n        for all types of built-in.\n        * target-def.h (TARGET_RESOLVE_OVERLOADED_BUILTIN): New.  Use it\n        in the definition of the target hooks struct.\n        * target.h (struct gcc_target): Add resolve_overloaded_builtin.\n        * config/rs6000/altivec.h: Rewritten.\n        * config/rs6000/rs6000-c.c (struct altivec_builtin_types,\n        altivec_resolve_overloaded_builtin, altivec_build_resolved_builtin,\n        rs6000_builtin_type, rs6000_builtin_type_compatible,\n        altivec_overloaded_builtins, rs6000_builtin_type,\n        rs6000_builtin_type_compatible): New.\n        * config/rs6000/rs6000.c (rs6000_builtin_types, rs6000_builtin_decls):\n        New.\n        (def_builtin): Turn into a function.  Check for duplicates and store\n        the builtin into rs6000_builtin_decls.\n        (bdesc_3arg, bdesc_dst, bdesc_altivec_preds, bdesc_2arg,\n        bdesc_1arg): Add overloaded builtins.\n        (altivec_expand_builtin): Check for unresolved overloaded builtins,\n        do not support ALTIVEC_COMPILETIME_ERROR.\n        (rs6000_init_builtins): Add opaque 128-bit vector, and internal\n        nodes to represent front-end types.\n        (altivec_init_builtins, rs6000_common_init_builtins): Create builtins\n        with opaque arguments and/or return values.\n        * config/rs6000/rs6000.h (enum rs6000_builtins): Remove\n        ALTIVEC_COMPILETIME_ERROR and add Altivec overloaded builtins.\n        (rs6000_builtin_type_index): New.\n        (is_ev64_opaque_type): Rename to...\n        (rs6000_is_opaque_type): ... this.\n        (rs6000_cpu_cpp_builtins): Install the resolve_overloaded_builtin\n        target hook.\n\ncp:\n2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n\n        * semantics.c (finish_call_expr): Call resolve_overloaded_builtin\n        for BUILT_IN_MD built-ins.\n\ntestsuite:\n2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n\n        * gcc.dg/altivec-3.c (vec_store): Do not use the old\n        __builtin_altivec_st_internal_4si built-in.\n\nFrom-SVN: r99103", "tree": {"sha": "e40a83be7177af1bedc673ba3dca92cacef69468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e40a83be7177af1bedc673ba3dca92cacef69468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58646b77eddc64f8b2cb6041180c3680d85c1faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58646b77eddc64f8b2cb6041180c3680d85c1faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58646b77eddc64f8b2cb6041180c3680d85c1faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58646b77eddc64f8b2cb6041180c3680d85c1faf/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "985484fde55fdc51170944750f729dab92964319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985484fde55fdc51170944750f729dab92964319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985484fde55fdc51170944750f729dab92964319"}], "stats": {"total": 15066, "additions": 3512, "deletions": 11554}, "files": [{"sha": "162ce09a1ab9a271d053057d0dc7d1fdb1c0749e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -1,3 +1,38 @@\n+2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * c-common.c (resolve_overloaded_builtin): Forward to target\n+        hook for BUILT_IN_MD built-ins.\n+        * c-typeck.c (finish_call_expr): Call resolve_overloaded_builtin\n+        for all types of built-in.\n+        * target-def.h (TARGET_RESOLVE_OVERLOADED_BUILTIN): New.  Use it\n+        in the definition of the target hooks struct.\n+        * target.h (struct gcc_target): Add resolve_overloaded_builtin.\n+        * config/rs6000/altivec.h: Rewritten.\n+        * config/rs6000/rs6000-c.c (struct altivec_builtin_types,\n+        altivec_resolve_overloaded_builtin, altivec_build_resolved_builtin,\n+        rs6000_builtin_type, rs6000_builtin_type_compatible,\n+        altivec_overloaded_builtins, rs6000_builtin_type,\n+        rs6000_builtin_type_compatible): New.\n+        * config/rs6000/rs6000.c (rs6000_builtin_types, rs6000_builtin_decls):\n+        New.\n+        (def_builtin): Turn into a function.  Check for duplicates and store\n+        the builtin into rs6000_builtin_decls.\n+        (bdesc_3arg, bdesc_dst, bdesc_altivec_preds, bdesc_2arg,\n+        bdesc_1arg): Add overloaded builtins.\n+        (altivec_expand_builtin): Check for unresolved overloaded builtins,\n+        do not support ALTIVEC_COMPILETIME_ERROR.\n+        (rs6000_init_builtins): Add opaque 128-bit vector, and internal\n+        nodes to represent front-end types.\n+        (altivec_init_builtins, rs6000_common_init_builtins): Create builtins\n+        with opaque arguments and/or return values.\n+        * config/rs6000/rs6000.h (enum rs6000_builtins): Remove\n+        ALTIVEC_COMPILETIME_ERROR and add Altivec overloaded builtins.\n+        (rs6000_builtin_type_index): New.\n+        (is_ev64_opaque_type): Rename to...\n+        (rs6000_is_opaque_type): ... this.\n+        (rs6000_cpu_cpp_builtins): Install the resolve_overloaded_builtin\n+        target hook.\n+\n 2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* function.c (reorder_blocks, reorder_blocks_1): Use VEC"}, {"sha": "0e373775485e1ecbcd2b4b4613b6f123beefb78b", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -5979,6 +5979,20 @@ tree\n resolve_overloaded_builtin (tree function, tree params)\n {\n   enum built_in_function orig_code = DECL_FUNCTION_CODE (function);\n+  switch (DECL_BUILT_IN_CLASS (function))\n+    {\n+    case BUILT_IN_NORMAL:\n+      break;\n+    case BUILT_IN_MD:\n+      if (targetm.resolve_overloaded_builtin)\n+        return targetm.resolve_overloaded_builtin (function, params);\n+      else\n+        return NULL_TREE;\n+    default:\n+      return NULL_TREE;\n+    }\n+    \n+  /* Handle BUILT_IN_NORMAL here.  */\n   switch (orig_code)\n     {\n     case BUILT_IN_FETCH_AND_ADD_N:\n@@ -6017,7 +6031,7 @@ resolve_overloaded_builtin (tree function, tree params)\n       }\n \n     default:\n-      return NULL;\n+      return NULL_TREE;\n     }\n }\n "}, {"sha": "07471c7fd899bae1e86ab5a02afd963a9aa43e99", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -1979,12 +1979,13 @@ build_function_call (tree function, tree params)\n   /* Convert anything with function type to a pointer-to-function.  */\n   if (TREE_CODE (function) == FUNCTION_DECL)\n     {\n-      if (DECL_BUILT_IN_CLASS (function) == BUILT_IN_NORMAL)\n-\t{\n-\t  tem = resolve_overloaded_builtin (function, params);\n-\t  if (tem)\n-\t    return tem;\n-\t}\n+      /* Implement type-directed function overloading for builtins.\n+\t resolve_overloaded_builtin and targetm.resolve_overloaded_builtin\n+\t handle all the type checking.  The result is a complete expression\n+\t that implements this function call.  */\n+      tem = resolve_overloaded_builtin (function, params);\n+      if (tem)\n+\treturn tem;\n \n       name = DECL_NAME (function);\n "}, {"sha": "13148d1eb87c7f0f85dd3e043e192c0113efe0e7", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 354, "deletions": 11466, "changes": 11820, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf"}, {"sha": "50c994104ee1d17e7be3ddc55a211b65675c1c15", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 2433, "deletions": 0, "changes": 2433, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf"}, {"sha": "2b8c2651bf9c9852c82918f94761c25a7c56a743", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 350, "deletions": 76, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -230,28 +230,10 @@ int rs6000_debug_arg;\t\t/* debug argument handling */\n /* Value is TRUE if register/mode pair is acceptable.  */\n bool rs6000_hard_regno_mode_ok_p[NUM_MACHINE_MODES][FIRST_PSEUDO_REGISTER];\n \n-/* Opaque types.  */\n-static GTY(()) tree opaque_V2SI_type_node;\n-static GTY(()) tree opaque_V2SF_type_node;\n-static GTY(()) tree opaque_p_V2SI_type_node;\n-static GTY(()) tree V16QI_type_node;\n-static GTY(()) tree V2SI_type_node;\n-static GTY(()) tree V2SF_type_node;\n-static GTY(()) tree V4HI_type_node;\n-static GTY(()) tree V4SI_type_node;\n-static GTY(()) tree V4SF_type_node;\n-static GTY(()) tree V8HI_type_node;\n-static GTY(()) tree unsigned_V16QI_type_node;\n-static GTY(()) tree unsigned_V8HI_type_node;\n-static GTY(()) tree unsigned_V4SI_type_node;\n-static GTY(()) tree bool_char_type_node;\t/* __bool char */\n-static GTY(()) tree bool_short_type_node;\t/* __bool short */\n-static GTY(()) tree bool_int_type_node;\t\t/* __bool int */\n-static GTY(()) tree pixel_type_node;\t\t/* __pixel */\n-static GTY(()) tree bool_V16QI_type_node;\t/* __vector __bool char */\n-static GTY(()) tree bool_V8HI_type_node;\t/* __vector __bool short */\n-static GTY(()) tree bool_V4SI_type_node;\t/* __vector __bool int */\n-static GTY(()) tree pixel_V8HI_type_node;\t/* __vector __pixel */\n+/* Built in types.  */\n+\n+tree rs6000_builtin_types[RS6000_BTI_MAX];\n+tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];\n \n int rs6000_warn_altivec_long = 1;\t\t/* On by default. */\n const char *rs6000_warn_altivec_long_switch;\n@@ -686,6 +668,7 @@ static void rs6000_sched_finish (FILE *, int);\n static int rs6000_use_sched_lookahead (void);\n static tree rs6000_builtin_mask_for_load (void);\n \n+static void def_builtin (int, const char *, tree, int);\n static void rs6000_init_builtins (void);\n static rtx rs6000_expand_unop_builtin (enum insn_code, tree, rtx);\n static rtx rs6000_expand_binop_builtin (enum insn_code, tree, rtx);\n@@ -728,7 +711,7 @@ static void compute_save_world_info (rs6000_stack_t *info_ptr);\n static void is_altivec_return_reg (rtx, void *);\n static rtx generate_set_vrsave (rtx, rs6000_stack_t *, int);\n int easy_vector_constant (rtx, enum machine_mode);\n-static bool is_ev64_opaque_type (tree);\n+static bool rs6000_is_opaque_type (tree);\n static rtx rs6000_dwarf_register_span (rtx);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n static rtx rs6000_tls_get_addr (void);\n@@ -962,7 +945,7 @@ static const char alt_reg_names[][8] =\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n #undef TARGET_VECTOR_OPAQUE_P\n-#define TARGET_VECTOR_OPAQUE_P is_ev64_opaque_type\n+#define TARGET_VECTOR_OPAQUE_P rs6000_is_opaque_type\n \n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n@@ -5478,12 +5461,19 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \n /* Builtins.  */\n \n-#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags)\t\t\t\t\t\t\\\n-    lang_hooks.builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n-\t\t\t\t NULL, NULL_TREE);\t\t\t\\\n-} while (0)\n+static void\n+def_builtin (int mask, const char *name, tree type, int code)\n+{\n+  if (mask & target_flags)\n+    {\n+      if (rs6000_builtin_decls[code])\n+\tabort ();\n+\n+      rs6000_builtin_decls[code] =\n+        lang_hooks.builtin_function (name, type, code, BUILT_IN_MD,\n+\t\t\t\t     NULL, NULL_TREE);\n+    }\n+}\n \n /* Simple ternary operations: VECd = foo (VECa, VECb, VECc).  */\n \n@@ -5512,6 +5502,22 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_v8hi, \"__builtin_altivec_vsldoi_8hi\", ALTIVEC_BUILTIN_VSLDOI_8HI },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_v4si, \"__builtin_altivec_vsldoi_4si\", ALTIVEC_BUILTIN_VSLDOI_4SI },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsldoi_v4sf, \"__builtin_altivec_vsldoi_4sf\", ALTIVEC_BUILTIN_VSLDOI_4SF },\n+\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_madd\", ALTIVEC_BUILTIN_VEC_MADD },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_madds\", ALTIVEC_BUILTIN_VEC_MADDS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mladd\", ALTIVEC_BUILTIN_VEC_MLADD },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mradds\", ALTIVEC_BUILTIN_VEC_MRADDS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_msum\", ALTIVEC_BUILTIN_VEC_MSUM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsumshm\", ALTIVEC_BUILTIN_VEC_VMSUMSHM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsumuhm\", ALTIVEC_BUILTIN_VEC_VMSUMUHM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsummbm\", ALTIVEC_BUILTIN_VEC_VMSUMMBM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsumubm\", ALTIVEC_BUILTIN_VEC_VMSUMUBM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_msums\", ALTIVEC_BUILTIN_VEC_MSUMS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsumshs\", ALTIVEC_BUILTIN_VEC_VMSUMSHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmsumuhs\", ALTIVEC_BUILTIN_VEC_VMSUMUHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_nmsub\", ALTIVEC_BUILTIN_VEC_NMSUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_perm\", ALTIVEC_BUILTIN_VEC_PERM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sel\", ALTIVEC_BUILTIN_VEC_SEL },\n };\n \n /* DST operations: void foo (void *, const int, const char).  */\n@@ -5521,7 +5527,12 @@ static const struct builtin_description bdesc_dst[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_dst, \"__builtin_altivec_dst\", ALTIVEC_BUILTIN_DST },\n   { MASK_ALTIVEC, CODE_FOR_altivec_dstt, \"__builtin_altivec_dstt\", ALTIVEC_BUILTIN_DSTT },\n   { MASK_ALTIVEC, CODE_FOR_altivec_dstst, \"__builtin_altivec_dstst\", ALTIVEC_BUILTIN_DSTST },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_dststt, \"__builtin_altivec_dststt\", ALTIVEC_BUILTIN_DSTSTT }\n+  { MASK_ALTIVEC, CODE_FOR_altivec_dststt, \"__builtin_altivec_dststt\", ALTIVEC_BUILTIN_DSTSTT },\n+\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_dst\", ALTIVEC_BUILTIN_VEC_DST },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_dstt\", ALTIVEC_BUILTIN_VEC_DSTT },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_dstst\", ALTIVEC_BUILTIN_VEC_DSTST },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_dststt\", ALTIVEC_BUILTIN_VEC_DSTSTT }\n };\n \n /* Simple binary operations: VECc = foo (VECa, VECb).  */\n@@ -5642,6 +5653,134 @@ static struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n   { MASK_ALTIVEC, CODE_FOR_xorv4si3, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n \n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_add\", ALTIVEC_BUILTIN_VEC_ADD },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddfp\", ALTIVEC_BUILTIN_VEC_VADDFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vadduwm\", ALTIVEC_BUILTIN_VEC_VADDUWM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vadduhm\", ALTIVEC_BUILTIN_VEC_VADDUHM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddubm\", ALTIVEC_BUILTIN_VEC_VADDUBM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_addc\", ALTIVEC_BUILTIN_VEC_ADDC },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_adds\", ALTIVEC_BUILTIN_VEC_ADDS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddsws\", ALTIVEC_BUILTIN_VEC_VADDSWS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vadduws\", ALTIVEC_BUILTIN_VEC_VADDUWS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddshs\", ALTIVEC_BUILTIN_VEC_VADDSHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vadduhs\", ALTIVEC_BUILTIN_VEC_VADDUHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddsbs\", ALTIVEC_BUILTIN_VEC_VADDSBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vaddubs\", ALTIVEC_BUILTIN_VEC_VADDUBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_and\", ALTIVEC_BUILTIN_VEC_AND },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_andc\", ALTIVEC_BUILTIN_VEC_ANDC },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_avg\", ALTIVEC_BUILTIN_VEC_AVG },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavgsw\", ALTIVEC_BUILTIN_VEC_VAVGSW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavguw\", ALTIVEC_BUILTIN_VEC_VAVGUW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavgsh\", ALTIVEC_BUILTIN_VEC_VAVGSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavguh\", ALTIVEC_BUILTIN_VEC_VAVGUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavgsb\", ALTIVEC_BUILTIN_VEC_VAVGSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vavgub\", ALTIVEC_BUILTIN_VEC_VAVGUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmpb\", ALTIVEC_BUILTIN_VEC_CMPB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmpeq\", ALTIVEC_BUILTIN_VEC_CMPEQ },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpeqfp\", ALTIVEC_BUILTIN_VEC_VCMPEQFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpequw\", ALTIVEC_BUILTIN_VEC_VCMPEQUW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpequh\", ALTIVEC_BUILTIN_VEC_VCMPEQUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpequb\", ALTIVEC_BUILTIN_VEC_VCMPEQUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmpge\", ALTIVEC_BUILTIN_VEC_CMPGE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmpgt\", ALTIVEC_BUILTIN_VEC_CMPGT },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtfp\", ALTIVEC_BUILTIN_VEC_VCMPGTFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtsw\", ALTIVEC_BUILTIN_VEC_VCMPGTSW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtuw\", ALTIVEC_BUILTIN_VEC_VCMPGTUW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtsh\", ALTIVEC_BUILTIN_VEC_VCMPGTSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtuh\", ALTIVEC_BUILTIN_VEC_VCMPGTUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtsb\", ALTIVEC_BUILTIN_VEC_VCMPGTSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vcmpgtub\", ALTIVEC_BUILTIN_VEC_VCMPGTUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmple\", ALTIVEC_BUILTIN_VEC_CMPLE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_cmplt\", ALTIVEC_BUILTIN_VEC_CMPLT },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_max\", ALTIVEC_BUILTIN_VEC_MAX },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxfp\", ALTIVEC_BUILTIN_VEC_VMAXFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxsw\", ALTIVEC_BUILTIN_VEC_VMAXSW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxuw\", ALTIVEC_BUILTIN_VEC_VMAXUW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxsh\", ALTIVEC_BUILTIN_VEC_VMAXSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxuh\", ALTIVEC_BUILTIN_VEC_VMAXUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxsb\", ALTIVEC_BUILTIN_VEC_VMAXSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmaxub\", ALTIVEC_BUILTIN_VEC_VMAXUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mergeh\", ALTIVEC_BUILTIN_VEC_MERGEH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrghw\", ALTIVEC_BUILTIN_VEC_VMRGHW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrghh\", ALTIVEC_BUILTIN_VEC_VMRGHH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrghb\", ALTIVEC_BUILTIN_VEC_VMRGHB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mergel\", ALTIVEC_BUILTIN_VEC_MERGEL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrglw\", ALTIVEC_BUILTIN_VEC_VMRGLW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrglh\", ALTIVEC_BUILTIN_VEC_VMRGLH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmrglb\", ALTIVEC_BUILTIN_VEC_VMRGLB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_min\", ALTIVEC_BUILTIN_VEC_MIN },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminfp\", ALTIVEC_BUILTIN_VEC_VMINFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminsw\", ALTIVEC_BUILTIN_VEC_VMINSW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminuw\", ALTIVEC_BUILTIN_VEC_VMINUW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminsh\", ALTIVEC_BUILTIN_VEC_VMINSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminuh\", ALTIVEC_BUILTIN_VEC_VMINUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminsb\", ALTIVEC_BUILTIN_VEC_VMINSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vminub\", ALTIVEC_BUILTIN_VEC_VMINUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mule\", ALTIVEC_BUILTIN_VEC_MULE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmuleub\", ALTIVEC_BUILTIN_VEC_VMULEUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmulesb\", ALTIVEC_BUILTIN_VEC_VMULESB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmuleuh\", ALTIVEC_BUILTIN_VEC_VMULEUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmulesh\", ALTIVEC_BUILTIN_VEC_VMULESH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mulo\", ALTIVEC_BUILTIN_VEC_MULO },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmulosh\", ALTIVEC_BUILTIN_VEC_VMULOSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmulouh\", ALTIVEC_BUILTIN_VEC_VMULOUH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmulosb\", ALTIVEC_BUILTIN_VEC_VMULOSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vmuloub\", ALTIVEC_BUILTIN_VEC_VMULOUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_nor\", ALTIVEC_BUILTIN_VEC_NOR },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_or\", ALTIVEC_BUILTIN_VEC_OR },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_pack\", ALTIVEC_BUILTIN_VEC_PACK },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkuwum\", ALTIVEC_BUILTIN_VEC_VPKUWUM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkuhum\", ALTIVEC_BUILTIN_VEC_VPKUHUM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_packpx\", ALTIVEC_BUILTIN_VEC_PACKPX },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_packs\", ALTIVEC_BUILTIN_VEC_PACKS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkswss\", ALTIVEC_BUILTIN_VEC_VPKSWSS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkuwus\", ALTIVEC_BUILTIN_VEC_VPKUWUS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkshss\", ALTIVEC_BUILTIN_VEC_VPKSHSS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkuhus\", ALTIVEC_BUILTIN_VEC_VPKUHUS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_packsu\", ALTIVEC_BUILTIN_VEC_PACKSU },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkswus\", ALTIVEC_BUILTIN_VEC_VPKSWUS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vpkshus\", ALTIVEC_BUILTIN_VEC_VPKSHUS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_rl\", ALTIVEC_BUILTIN_VEC_RL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vrlw\", ALTIVEC_BUILTIN_VEC_VRLW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vrlh\", ALTIVEC_BUILTIN_VEC_VRLH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vrlb\", ALTIVEC_BUILTIN_VEC_VRLB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sl\", ALTIVEC_BUILTIN_VEC_SL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vslw\", ALTIVEC_BUILTIN_VEC_VSLW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vslh\", ALTIVEC_BUILTIN_VEC_VSLH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vslb\", ALTIVEC_BUILTIN_VEC_VSLB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sll\", ALTIVEC_BUILTIN_VEC_SLL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_slo\", ALTIVEC_BUILTIN_VEC_SLO },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sr\", ALTIVEC_BUILTIN_VEC_SR },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsrw\", ALTIVEC_BUILTIN_VEC_VSRW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsrh\", ALTIVEC_BUILTIN_VEC_VSRH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsrb\", ALTIVEC_BUILTIN_VEC_VSRB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sra\", ALTIVEC_BUILTIN_VEC_SRA },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsraw\", ALTIVEC_BUILTIN_VEC_VSRAW },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsrah\", ALTIVEC_BUILTIN_VEC_VSRAH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsrab\", ALTIVEC_BUILTIN_VEC_VSRAB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_srl\", ALTIVEC_BUILTIN_VEC_SRL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sro\", ALTIVEC_BUILTIN_VEC_SRO },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sub\", ALTIVEC_BUILTIN_VEC_SUB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubfp\", ALTIVEC_BUILTIN_VEC_VSUBFP },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubuwm\", ALTIVEC_BUILTIN_VEC_VSUBUWM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubuhm\", ALTIVEC_BUILTIN_VEC_VSUBUHM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsububm\", ALTIVEC_BUILTIN_VEC_VSUBUBM },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_subc\", ALTIVEC_BUILTIN_VEC_SUBC },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_subs\", ALTIVEC_BUILTIN_VEC_SUBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubsws\", ALTIVEC_BUILTIN_VEC_VSUBSWS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubuws\", ALTIVEC_BUILTIN_VEC_VSUBUWS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubshs\", ALTIVEC_BUILTIN_VEC_VSUBSHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubuhs\", ALTIVEC_BUILTIN_VEC_VSUBUHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsubsbs\", ALTIVEC_BUILTIN_VEC_VSUBSBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsububs\", ALTIVEC_BUILTIN_VEC_VSUBUBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sum4s\", ALTIVEC_BUILTIN_VEC_SUM4S },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsum4shs\", ALTIVEC_BUILTIN_VEC_VSUM4SHS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsum4sbs\", ALTIVEC_BUILTIN_VEC_VSUM4SBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vsum4ubs\", ALTIVEC_BUILTIN_VEC_VSUM4UBS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sum2s\", ALTIVEC_BUILTIN_VEC_SUM2S },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sums\", ALTIVEC_BUILTIN_VEC_SUMS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_xor\", ALTIVEC_BUILTIN_VEC_XOR },\n+\n   /* Place holder, leave as first spe builtin.  */\n   { 0, CODE_FOR_spe_evaddw, \"__builtin_spe_evaddw\", SPE_BUILTIN_EVADDW },\n   { 0, CODE_FOR_spe_evand, \"__builtin_spe_evand\", SPE_BUILTIN_EVAND },\n@@ -5784,7 +5923,7 @@ static struct builtin_description bdesc_2arg[] =\n   { 0, CODE_FOR_spe_brinc, \"__builtin_spe_brinc\", SPE_BUILTIN_BRINC },\n \n   /* Place-holder.  Leave as last binary SPE builtin.  */\n-  { 0, CODE_FOR_xorv2si3, \"__builtin_spe_evxor\", SPE_BUILTIN_EVXOR },\n+  { 0, CODE_FOR_xorv2si3, \"__builtin_spe_evxor\", SPE_BUILTIN_EVXOR }\n };\n \n /* AltiVec predicates.  */\n@@ -5812,7 +5951,11 @@ static const struct builtin_description_predicates bdesc_altivec_preds[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v8hi, \"*vcmpequh.\", \"__builtin_altivec_vcmpequh_p\", ALTIVEC_BUILTIN_VCMPEQUH_P },\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpequb.\", \"__builtin_altivec_vcmpequb_p\", ALTIVEC_BUILTIN_VCMPEQUB_P },\n   { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtsb.\", \"__builtin_altivec_vcmpgtsb_p\", ALTIVEC_BUILTIN_VCMPGTSB_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P }\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P },\n+\n+  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpeq_p\", ALTIVEC_BUILTIN_VCMPEQ_P },\n+  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpgt_p\", ALTIVEC_BUILTIN_VCMPGT_P },\n+  { MASK_ALTIVEC, 0, NULL, \"__builtin_vec_vcmpge_p\", ALTIVEC_BUILTIN_VCMPGE_P }\n };\n \n /* SPE predicates.  */\n@@ -5887,6 +6030,26 @@ static struct builtin_description bdesc_1arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vupklpx, \"__builtin_altivec_vupklpx\", ALTIVEC_BUILTIN_VUPKLPX },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vupklsh, \"__builtin_altivec_vupklsh\", ALTIVEC_BUILTIN_VUPKLSH },\n \n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_abs\", ALTIVEC_BUILTIN_VEC_ABS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_abss\", ALTIVEC_BUILTIN_VEC_ABSS },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_ceil\", ALTIVEC_BUILTIN_VEC_CEIL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_expte\", ALTIVEC_BUILTIN_VEC_EXPTE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_floor\", ALTIVEC_BUILTIN_VEC_FLOOR },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_loge\", ALTIVEC_BUILTIN_VEC_LOGE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_mtvscr\", ALTIVEC_BUILTIN_VEC_MTVSCR },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_re\", ALTIVEC_BUILTIN_VEC_RE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_round\", ALTIVEC_BUILTIN_VEC_ROUND },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_rsqrte\", ALTIVEC_BUILTIN_VEC_RSQRTE },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_trunc\", ALTIVEC_BUILTIN_VEC_TRUNC },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_unpackh\", ALTIVEC_BUILTIN_VEC_UNPACKH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupkhsh\", ALTIVEC_BUILTIN_VEC_VUPKHSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupkhpx\", ALTIVEC_BUILTIN_VEC_VUPKHPX },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupkhsb\", ALTIVEC_BUILTIN_VEC_VUPKHSB },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_unpackl\", ALTIVEC_BUILTIN_VEC_UNPACKL },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupklpx\", ALTIVEC_BUILTIN_VEC_VUPKLPX },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupklsh\", ALTIVEC_BUILTIN_VEC_VUPKLSH },\n+  { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_vupklsb\", ALTIVEC_BUILTIN_VEC_VUPKLSB },\n+\n   /* The SPE unary builtins must start with SPE_BUILTIN_EVABS and\n      end with SPE_BUILTIN_EVSUBFUSIAAW.  */\n   { 0, CODE_FOR_spe_evabs, \"__builtin_spe_evabs\", SPE_BUILTIN_EVABS },\n@@ -5919,7 +6082,7 @@ static struct builtin_description bdesc_1arg[] =\n   { 0, CODE_FOR_spe_evsubfumiaaw, \"__builtin_spe_evsubfumiaaw\", SPE_BUILTIN_EVSUBFUMIAAW },\n \n   /* Place-holder.  Leave as last unary SPE builtin.  */\n-  { 0, CODE_FOR_spe_evsubfusiaaw, \"__builtin_spe_evsubfusiaaw\", SPE_BUILTIN_EVSUBFUSIAAW },\n+  { 0, CODE_FOR_spe_evsubfusiaaw, \"__builtin_spe_evsubfusiaaw\", SPE_BUILTIN_EVSUBFUSIAAW }\n };\n \n static rtx\n@@ -6515,6 +6678,14 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n   enum machine_mode tmode, mode0;\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n \n+  if (fcode >= ALTIVEC_BUILTIN_OVERLOADED_FIRST\n+      && fcode <= ALTIVEC_BUILTIN_OVERLOADED_LAST)\n+    {\n+      *expandedp = true;\n+      error (\"unresolved overload for Altivec builtin %qE\", fndecl);\n+      return const0_rtx;\n+    }\n+\n   target = altivec_expand_ld_builtin (exp, target, expandedp);\n   if (*expandedp)\n     return target;\n@@ -6602,16 +6773,6 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n       emit_insn (gen_altivec_dss (op0));\n       return NULL_RTX;\n-\n-    case ALTIVEC_BUILTIN_COMPILETIME_ERROR:\n-      arg0 = TREE_VALUE (arglist);\n-      while (TREE_CODE (arg0) == NOP_EXPR || TREE_CODE (arg0) == ADDR_EXPR\n-\t     || TREE_CODE (arg0) == ARRAY_REF)\n-\targ0 = TREE_OPERAND (arg0, 0);\n-      error (\"invalid parameter combination for %qs AltiVec intrinsic\",\n-\t     TREE_STRING_POINTER (arg0));\n-\n-      return const0_rtx;\n     }\n \n   /* Expand abs* operations.  */\n@@ -7107,6 +7268,7 @@ rs6000_init_builtins (void)\n   opaque_V2SF_type_node = build_opaque_vector_type (float_type_node, 2);\n   opaque_V2SI_type_node = build_opaque_vector_type (intSI_type_node, 2);\n   opaque_p_V2SI_type_node = build_pointer_type (opaque_V2SI_type_node);\n+  opaque_V4SI_type_node = copy_node (V4SI_type_node);\n \n   /* The 'vector bool ...' types must be kept distinct from 'vector unsigned ...'\n      types, especially in C++ land.  Similarly, 'vector pixel' is distinct from\n@@ -7117,6 +7279,17 @@ rs6000_init_builtins (void)\n   bool_int_type_node = build_distinct_type_copy (unsigned_intSI_type_node);\n   pixel_type_node = build_distinct_type_copy (unsigned_intHI_type_node);\n \n+  long_integer_type_internal_node = long_integer_type_node;\n+  long_unsigned_type_internal_node = long_unsigned_type_node;\n+  intQI_type_internal_node = intQI_type_node;\n+  uintQI_type_internal_node = unsigned_intQI_type_node;\n+  intHI_type_internal_node = intHI_type_node;\n+  uintHI_type_internal_node = unsigned_intHI_type_node;\n+  intSI_type_internal_node = intSI_type_node;\n+  uintSI_type_internal_node = unsigned_intSI_type_node;\n+  float_type_internal_node = float_type_node;\n+  void_type_internal_node = void_type_node;\n+\n   (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n \t\t\t\t\t    get_identifier (\"__bool char\"),\n \t\t\t\t\t    bool_char_type_node));\n@@ -7447,6 +7620,21 @@ altivec_init_builtins (void)\n \n   tree pcvoid_type_node = build_pointer_type (build_qualified_type (void_type_node, TYPE_QUAL_CONST));\n \n+  tree int_ftype_opaque\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\topaque_V4SI_type_node, NULL_TREE);\n+\n+  tree opaque_ftype_opaque_int\n+    = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\topaque_V4SI_type_node, integer_type_node, NULL_TREE);\n+  tree opaque_ftype_opaque_opaque_int\n+    = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\topaque_V4SI_type_node, opaque_V4SI_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree int_ftype_int_opaque_opaque\n+    = build_function_type_list (integer_type_node,\n+                                integer_type_node, opaque_V4SI_type_node,\n+                                opaque_V4SI_type_node, NULL_TREE);\n   tree int_ftype_int_v4si_v4si\n     = build_function_type_list (integer_type_node,\n \t\t\t\tinteger_type_node, V4SI_type_node,\n@@ -7480,6 +7668,9 @@ altivec_init_builtins (void)\n   tree void_ftype_int\n     = build_function_type_list (void_type_node, integer_type_node, NULL_TREE);\n \n+  tree opaque_ftype_long_pcvoid\n+    = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n   tree v16qi_ftype_long_pcvoid\n     = build_function_type_list (V16QI_type_node,\n \t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n@@ -7490,6 +7681,10 @@ altivec_init_builtins (void)\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tlong_integer_type_node, pcvoid_type_node, NULL_TREE);\n \n+  tree void_ftype_opaque_long_pvoid\n+    = build_function_type_list (void_type_node,\n+\t\t\t\topaque_V4SI_type_node, long_integer_type_node,\n+\t\t\t\tpvoid_type_node, NULL_TREE);\n   tree void_ftype_v4si_long_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV4SI_type_node, long_integer_type_node,\n@@ -7526,9 +7721,6 @@ altivec_init_builtins (void)\n     = build_function_type_list (void_type_node,\n \t\t\t\tpcvoid_type_node, integer_type_node,\n \t\t\t\tinteger_type_node, NULL_TREE);\n-  tree int_ftype_pcchar\n-    = build_function_type_list (integer_type_node,\n-\t\t\t\tpcchar_type_node, NULL_TREE);\n \n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_ld_internal_4sf\", v4sf_ftype_pcfloat,\n \t       ALTIVEC_BUILTIN_LD_INTERNAL_4sf);\n@@ -7562,10 +7754,33 @@ altivec_init_builtins (void)\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvxl\", void_ftype_v4si_long_pvoid, ALTIVEC_BUILTIN_STVXL);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvebx\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_STVEBX);\n   def_builtin (MASK_ALTIVEC, \"__builtin_altivec_stvehx\", void_ftype_v8hi_long_pvoid, ALTIVEC_BUILTIN_STVEHX);\n-\n-  /* See altivec.h for usage of \"__builtin_altivec_compiletime_error\".  */\n-  def_builtin (MASK_ALTIVEC, \"__builtin_altivec_compiletime_error\", int_ftype_pcchar,\n-\t       ALTIVEC_BUILTIN_COMPILETIME_ERROR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_ld\", opaque_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LD);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lde\", opaque_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LDE);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_ldl\", opaque_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LDL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvsl\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVSL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvsr\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVSR);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvebx\", v16qi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvehx\", v8hi_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVEHX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_lvewx\", v4si_ftype_long_pcvoid, ALTIVEC_BUILTIN_VEC_LVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_st\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_ST);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_ste\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STE);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_stl\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STL);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvewx\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STVEWX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvebx\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STVEBX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_stvehx\", void_ftype_opaque_long_pvoid, ALTIVEC_BUILTIN_VEC_STVEHX);\n+\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_step\", int_ftype_opaque, ALTIVEC_BUILTIN_VEC_STEP);\n+\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_sld\", opaque_ftype_opaque_opaque_int, ALTIVEC_BUILTIN_VEC_SLD);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_splat\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_SPLAT);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_vspltw\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_VSPLTW);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_vsplth\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_VSPLTH);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_vspltb\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_VSPLTB);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_ctf\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTF);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_vcfsx\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_VCFSX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_vcfux\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_VCFUX);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_cts\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTS);\n+  def_builtin (MASK_ALTIVEC, \"__builtin_vec_ctu\", opaque_ftype_opaque_int, ALTIVEC_BUILTIN_VEC_CTU);\n \n   /* Add the DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;\n@@ -7578,11 +7793,19 @@ altivec_init_builtins (void)\n     {\n       enum machine_mode mode1;\n       tree type;\n+      bool is_overloaded = dp->code >= ALTIVEC_BUILTIN_OVERLOADED_FIRST\n+\t\t\t   && dp->code <= ALTIVEC_BUILTIN_OVERLOADED_LAST;\n \n-      mode1 = insn_data[dp->icode].operand[1].mode;\n+      if (is_overloaded)\n+\tmode1 = VOIDmode;\n+      else\n+\tmode1 = insn_data[dp->icode].operand[1].mode;\n \n       switch (mode1)\n \t{\n+\tcase VOIDmode:\n+\t  type = int_ftype_int_opaque_opaque;\n+\t  break;\n \tcase V4SImode:\n \t  type = int_ftype_int_v4si_v4si;\n \t  break;\n@@ -7698,6 +7921,10 @@ rs6000_common_init_builtins (void)\n \t\t\t\tinteger_type_node, integer_type_node,\n \t\t\t\tNULL_TREE);\n \n+  tree opaque_ftype_opaque\n+    = build_function_type_list (opaque_V4SI_type_node,\n+\t\t\t\topaque_V4SI_type_node, NULL_TREE);\n+\n   tree v2si_ftype_v2si\n     = build_function_type_list (opaque_V2SI_type_node,\n \t\t\t\topaque_V2SI_type_node, NULL_TREE);\n@@ -7732,6 +7959,9 @@ rs6000_common_init_builtins (void)\n \t\t\t\tinteger_type_node, integer_type_node,\n \t\t\t\tNULL_TREE);\n \n+  tree opaque_ftype_opaque_opaque\n+    = build_function_type_list (opaque_V4SI_type_node,\n+                                opaque_V4SI_type_node, opaque_V4SI_type_node, NULL_TREE);\n   tree v4si_ftype_v4si_v4si\n     = build_function_type_list (V4SI_type_node,\n \t\t\t\tV4SI_type_node, V4SI_type_node, NULL_TREE);\n@@ -7769,6 +7999,10 @@ rs6000_common_init_builtins (void)\n   tree v4sf_ftype_v4sf_v4sf\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node, NULL_TREE);\n+  tree opaque_ftype_opaque_opaque_opaque\n+    = build_function_type_list (opaque_V4SI_type_node,\n+                                opaque_V4SI_type_node, opaque_V4SI_type_node,\n+                                opaque_V4SI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf_v4sf_v4si\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V4SF_type_node,\n@@ -7842,23 +8076,37 @@ rs6000_common_init_builtins (void)\n   d = (struct builtin_description *) bdesc_3arg;\n   for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n     {\n-\n       enum machine_mode mode0, mode1, mode2, mode3;\n       tree type;\n+      bool is_overloaded = d->code >= ALTIVEC_BUILTIN_OVERLOADED_FIRST\n+\t\t\t   && d->code <= ALTIVEC_BUILTIN_OVERLOADED_LAST;\n \n-      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n-\tcontinue;\n-\n-      mode0 = insn_data[d->icode].operand[0].mode;\n-      mode1 = insn_data[d->icode].operand[1].mode;\n-      mode2 = insn_data[d->icode].operand[2].mode;\n-      mode3 = insn_data[d->icode].operand[3].mode;\n+      if (is_overloaded)\n+\t{\n+          mode0 = VOIDmode;\n+          mode1 = VOIDmode;\n+          mode2 = VOIDmode;\n+          mode3 = VOIDmode;\n+\t}\n+      else\n+\t{\n+          if (d->name == 0 || d->icode == CODE_FOR_nothing)\n+\t    continue;\n \n+          mode0 = insn_data[d->icode].operand[0].mode;\n+          mode1 = insn_data[d->icode].operand[1].mode;\n+          mode2 = insn_data[d->icode].operand[2].mode;\n+          mode3 = insn_data[d->icode].operand[3].mode;\n+\t}\n+      \n       /* When all four are of the same mode.  */\n       if (mode0 == mode1 && mode1 == mode2 && mode2 == mode3)\n \t{\n \t  switch (mode0)\n \t    {\n+\t    case VOIDmode:\n+\t      type = opaque_ftype_opaque_opaque_opaque;\n+\t      break;\n \t    case V4SImode:\n \t      type = v4si_ftype_v4si_v4si_v4si;\n \t      break;\n@@ -7937,19 +8185,33 @@ rs6000_common_init_builtins (void)\n     {\n       enum machine_mode mode0, mode1, mode2;\n       tree type;\n+      bool is_overloaded = d->code >= ALTIVEC_BUILTIN_OVERLOADED_FIRST\n+\t\t\t   && d->code <= ALTIVEC_BUILTIN_OVERLOADED_LAST;\n \n-      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n-\tcontinue;\n+      if (is_overloaded)\n+\t{\n+\t  mode0 = VOIDmode;\n+\t  mode1 = VOIDmode;\n+\t  mode2 = VOIDmode;\n+\t}\n+      else\n+\t{ \n+          if (d->name == 0 || d->icode == CODE_FOR_nothing)\n+\t    continue;\n \n-      mode0 = insn_data[d->icode].operand[0].mode;\n-      mode1 = insn_data[d->icode].operand[1].mode;\n-      mode2 = insn_data[d->icode].operand[2].mode;\n+          mode0 = insn_data[d->icode].operand[0].mode;\n+          mode1 = insn_data[d->icode].operand[1].mode;\n+          mode2 = insn_data[d->icode].operand[2].mode;\n+\t}\n \n       /* When all three operands are of the same mode.  */\n       if (mode0 == mode1 && mode1 == mode2)\n \t{\n \t  switch (mode0)\n \t    {\n+\t    case VOIDmode:\n+\t      type = opaque_ftype_opaque_opaque;\n+\t      break;\n \t    case V4SFmode:\n \t      type = v4sf_ftype_v4sf_v4sf;\n \t      break;\n@@ -8071,19 +8333,31 @@ rs6000_common_init_builtins (void)\n     {\n       enum machine_mode mode0, mode1;\n       tree type;\n-\n-      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n-\tcontinue;\n-\n-      mode0 = insn_data[d->icode].operand[0].mode;\n-      mode1 = insn_data[d->icode].operand[1].mode;\n+      bool is_overloaded = d->code >= ALTIVEC_BUILTIN_OVERLOADED_FIRST\n+\t\t\t   && d->code <= ALTIVEC_BUILTIN_OVERLOADED_LAST;\n+\n+      if (is_overloaded)\n+        {\n+          mode0 = VOIDmode;\n+          mode1 = VOIDmode;\n+        }\n+      else\n+        {\n+          if (d->name == 0 || d->icode == CODE_FOR_nothing)\n+\t    continue;\n+      \n+          mode0 = insn_data[d->icode].operand[0].mode;\n+          mode1 = insn_data[d->icode].operand[1].mode;\n+        }\n \n       if (mode0 == V4SImode && mode1 == QImode)\n \ttype = v4si_ftype_int;\n       else if (mode0 == V8HImode && mode1 == QImode)\n \ttype = v8hi_ftype_int;\n       else if (mode0 == V16QImode && mode1 == QImode)\n \ttype = v16qi_ftype_int;\n+      else if (mode0 == VOIDmode && mode1 == VOIDmode)\n+\ttype = opaque_ftype_opaque;\n       else if (mode0 == V4SFmode && mode1 == V4SFmode)\n \ttype = v4sf_ftype_v4sf;\n       else if (mode0 == V8HImode && mode1 == V16QImode)\n@@ -17629,15 +17903,15 @@ rs6000_initial_elimination_offset (int from, int to)\n   return offset;\n }\n \n-/* Return true if TYPE is of type __ev64_opaque__.  */\n+/* Return true if TYPE is a SPE or AltiVec opaque type.  */\n \n static bool\n-is_ev64_opaque_type (tree type)\n+rs6000_is_opaque_type (tree type)\n {\n-  return (TARGET_SPE\n-\t  && (type == opaque_V2SI_type_node\n+  return (type == opaque_V2SI_type_node\n \t      || type == opaque_V2SF_type_node\n-\t      || type == opaque_p_V2SI_type_node));\n+\t      || type == opaque_p_V2SI_type_node\n+\t      || type == opaque_V4SI_type_node);\n }\n \n static rtx"}, {"sha": "6898da223ca960b3a73e44c6015c28fc4835a1da", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 296, "deletions": 2, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -2765,10 +2765,225 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_ABS_V4SF,\n   ALTIVEC_BUILTIN_ABS_V8HI,\n   ALTIVEC_BUILTIN_ABS_V16QI,\n-  ALTIVEC_BUILTIN_COMPILETIME_ERROR,\n   ALTIVEC_BUILTIN_MASK_FOR_LOAD,\n   ALTIVEC_BUILTIN_MASK_FOR_STORE,\n \n+  /* Altivec overloaded builtins.  */\n+  ALTIVEC_BUILTIN_VCMPEQ_P,\n+  ALTIVEC_BUILTIN_OVERLOADED_FIRST = ALTIVEC_BUILTIN_VCMPEQ_P,\n+  ALTIVEC_BUILTIN_VCMPGT_P,\n+  ALTIVEC_BUILTIN_VCMPGE_P,\n+  ALTIVEC_BUILTIN_VEC_ABS,\n+  ALTIVEC_BUILTIN_VEC_ABSS,\n+  ALTIVEC_BUILTIN_VEC_ADD,\n+  ALTIVEC_BUILTIN_VEC_ADDC,\n+  ALTIVEC_BUILTIN_VEC_ADDS,\n+  ALTIVEC_BUILTIN_VEC_AND,\n+  ALTIVEC_BUILTIN_VEC_ANDC,\n+  ALTIVEC_BUILTIN_VEC_AVG,\n+  ALTIVEC_BUILTIN_VEC_CEIL,\n+  ALTIVEC_BUILTIN_VEC_CMPB,\n+  ALTIVEC_BUILTIN_VEC_CMPEQ,\n+  ALTIVEC_BUILTIN_VEC_CMPEQUB,\n+  ALTIVEC_BUILTIN_VEC_CMPEQUH,\n+  ALTIVEC_BUILTIN_VEC_CMPEQUW,\n+  ALTIVEC_BUILTIN_VEC_CMPGE,\n+  ALTIVEC_BUILTIN_VEC_CMPGT,\n+  ALTIVEC_BUILTIN_VEC_CMPLE,\n+  ALTIVEC_BUILTIN_VEC_CMPLT,\n+  ALTIVEC_BUILTIN_VEC_CTF,\n+  ALTIVEC_BUILTIN_VEC_CTS,\n+  ALTIVEC_BUILTIN_VEC_CTU,\n+  ALTIVEC_BUILTIN_VEC_DST,\n+  ALTIVEC_BUILTIN_VEC_DSTST,\n+  ALTIVEC_BUILTIN_VEC_DSTSTT,\n+  ALTIVEC_BUILTIN_VEC_DSTT,\n+  ALTIVEC_BUILTIN_VEC_EXPTE,\n+  ALTIVEC_BUILTIN_VEC_FLOOR,\n+  ALTIVEC_BUILTIN_VEC_LD,\n+  ALTIVEC_BUILTIN_VEC_LDE,\n+  ALTIVEC_BUILTIN_VEC_LDL,\n+  ALTIVEC_BUILTIN_VEC_LOGE,\n+  ALTIVEC_BUILTIN_VEC_LVEBX,\n+  ALTIVEC_BUILTIN_VEC_LVEHX,\n+  ALTIVEC_BUILTIN_VEC_LVEWX,\n+  ALTIVEC_BUILTIN_VEC_LVSL,\n+  ALTIVEC_BUILTIN_VEC_LVSR,\n+  ALTIVEC_BUILTIN_VEC_MADD,\n+  ALTIVEC_BUILTIN_VEC_MADDS,\n+  ALTIVEC_BUILTIN_VEC_MAX,\n+  ALTIVEC_BUILTIN_VEC_MERGEH,\n+  ALTIVEC_BUILTIN_VEC_MERGEL,\n+  ALTIVEC_BUILTIN_VEC_MIN,\n+  ALTIVEC_BUILTIN_VEC_MLADD,\n+  ALTIVEC_BUILTIN_VEC_MPERM,\n+  ALTIVEC_BUILTIN_VEC_MRADDS,\n+  ALTIVEC_BUILTIN_VEC_MRGHB,\n+  ALTIVEC_BUILTIN_VEC_MRGHH,\n+  ALTIVEC_BUILTIN_VEC_MRGHW,\n+  ALTIVEC_BUILTIN_VEC_MRGLB,\n+  ALTIVEC_BUILTIN_VEC_MRGLH,\n+  ALTIVEC_BUILTIN_VEC_MRGLW,\n+  ALTIVEC_BUILTIN_VEC_MSUM,\n+  ALTIVEC_BUILTIN_VEC_MSUMS,\n+  ALTIVEC_BUILTIN_VEC_MTVSCR,\n+  ALTIVEC_BUILTIN_VEC_MULE,\n+  ALTIVEC_BUILTIN_VEC_MULO,\n+  ALTIVEC_BUILTIN_VEC_NMSUB,\n+  ALTIVEC_BUILTIN_VEC_NOR,\n+  ALTIVEC_BUILTIN_VEC_OR,\n+  ALTIVEC_BUILTIN_VEC_PACK,\n+  ALTIVEC_BUILTIN_VEC_PACKPX,\n+  ALTIVEC_BUILTIN_VEC_PACKS,\n+  ALTIVEC_BUILTIN_VEC_PACKSU,\n+  ALTIVEC_BUILTIN_VEC_PERM,\n+  ALTIVEC_BUILTIN_VEC_RE,\n+  ALTIVEC_BUILTIN_VEC_RL,\n+  ALTIVEC_BUILTIN_VEC_ROUND,\n+  ALTIVEC_BUILTIN_VEC_RSQRTE,\n+  ALTIVEC_BUILTIN_VEC_SEL,\n+  ALTIVEC_BUILTIN_VEC_SL,\n+  ALTIVEC_BUILTIN_VEC_SLD,\n+  ALTIVEC_BUILTIN_VEC_SLL,\n+  ALTIVEC_BUILTIN_VEC_SLO,\n+  ALTIVEC_BUILTIN_VEC_SPLAT,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_S16,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_S32,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_S8,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_U16,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_U32,\n+  ALTIVEC_BUILTIN_VEC_SPLAT_U8,\n+  ALTIVEC_BUILTIN_VEC_SPLTB,\n+  ALTIVEC_BUILTIN_VEC_SPLTH,\n+  ALTIVEC_BUILTIN_VEC_SPLTW,\n+  ALTIVEC_BUILTIN_VEC_SR,\n+  ALTIVEC_BUILTIN_VEC_SRA,\n+  ALTIVEC_BUILTIN_VEC_SRL,\n+  ALTIVEC_BUILTIN_VEC_SRO,\n+  ALTIVEC_BUILTIN_VEC_ST,\n+  ALTIVEC_BUILTIN_VEC_STE,\n+  ALTIVEC_BUILTIN_VEC_STL,\n+  ALTIVEC_BUILTIN_VEC_STVEBX,\n+  ALTIVEC_BUILTIN_VEC_STVEHX,\n+  ALTIVEC_BUILTIN_VEC_STVEWX,\n+  ALTIVEC_BUILTIN_VEC_SUB,\n+  ALTIVEC_BUILTIN_VEC_SUBC,\n+  ALTIVEC_BUILTIN_VEC_SUBS,\n+  ALTIVEC_BUILTIN_VEC_SUM2S,\n+  ALTIVEC_BUILTIN_VEC_SUM4S,\n+  ALTIVEC_BUILTIN_VEC_SUMS,\n+  ALTIVEC_BUILTIN_VEC_TRUNC,\n+  ALTIVEC_BUILTIN_VEC_UNPACKH,\n+  ALTIVEC_BUILTIN_VEC_UNPACKL,\n+  ALTIVEC_BUILTIN_VEC_VADDFP,\n+  ALTIVEC_BUILTIN_VEC_VADDSBS,\n+  ALTIVEC_BUILTIN_VEC_VADDSHS,\n+  ALTIVEC_BUILTIN_VEC_VADDSWS,\n+  ALTIVEC_BUILTIN_VEC_VADDUBM,\n+  ALTIVEC_BUILTIN_VEC_VADDUBS,\n+  ALTIVEC_BUILTIN_VEC_VADDUHM,\n+  ALTIVEC_BUILTIN_VEC_VADDUHS,\n+  ALTIVEC_BUILTIN_VEC_VADDUWM,\n+  ALTIVEC_BUILTIN_VEC_VADDUWS,\n+  ALTIVEC_BUILTIN_VEC_VAVGSB,\n+  ALTIVEC_BUILTIN_VEC_VAVGSH,\n+  ALTIVEC_BUILTIN_VEC_VAVGSW,\n+  ALTIVEC_BUILTIN_VEC_VAVGUB,\n+  ALTIVEC_BUILTIN_VEC_VAVGUH,\n+  ALTIVEC_BUILTIN_VEC_VAVGUW,\n+  ALTIVEC_BUILTIN_VEC_VCFSX,\n+  ALTIVEC_BUILTIN_VEC_VCFUX,\n+  ALTIVEC_BUILTIN_VEC_VCMPEQFP,\n+  ALTIVEC_BUILTIN_VEC_VCMPEQUB,\n+  ALTIVEC_BUILTIN_VEC_VCMPEQUH,\n+  ALTIVEC_BUILTIN_VEC_VCMPEQUW,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTFP,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTSB,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTSH,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTSW,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTUB,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTUH,\n+  ALTIVEC_BUILTIN_VEC_VCMPGTUW,\n+  ALTIVEC_BUILTIN_VEC_VMAXFP,\n+  ALTIVEC_BUILTIN_VEC_VMAXSB,\n+  ALTIVEC_BUILTIN_VEC_VMAXSH,\n+  ALTIVEC_BUILTIN_VEC_VMAXSW,\n+  ALTIVEC_BUILTIN_VEC_VMAXUB,\n+  ALTIVEC_BUILTIN_VEC_VMAXUH,\n+  ALTIVEC_BUILTIN_VEC_VMAXUW,\n+  ALTIVEC_BUILTIN_VEC_VMINFP,\n+  ALTIVEC_BUILTIN_VEC_VMINSB,\n+  ALTIVEC_BUILTIN_VEC_VMINSH,\n+  ALTIVEC_BUILTIN_VEC_VMINSW,\n+  ALTIVEC_BUILTIN_VEC_VMINUB,\n+  ALTIVEC_BUILTIN_VEC_VMINUH,\n+  ALTIVEC_BUILTIN_VEC_VMINUW,\n+  ALTIVEC_BUILTIN_VEC_VMRGHB,\n+  ALTIVEC_BUILTIN_VEC_VMRGHH,\n+  ALTIVEC_BUILTIN_VEC_VMRGHW,\n+  ALTIVEC_BUILTIN_VEC_VMRGLB,\n+  ALTIVEC_BUILTIN_VEC_VMRGLH,\n+  ALTIVEC_BUILTIN_VEC_VMRGLW,\n+  ALTIVEC_BUILTIN_VEC_VMSUMMBM,\n+  ALTIVEC_BUILTIN_VEC_VMSUMSHM,\n+  ALTIVEC_BUILTIN_VEC_VMSUMSHS,\n+  ALTIVEC_BUILTIN_VEC_VMSUMUBM,\n+  ALTIVEC_BUILTIN_VEC_VMSUMUHM,\n+  ALTIVEC_BUILTIN_VEC_VMSUMUHS,\n+  ALTIVEC_BUILTIN_VEC_VMULESB,\n+  ALTIVEC_BUILTIN_VEC_VMULESH,\n+  ALTIVEC_BUILTIN_VEC_VMULEUB,\n+  ALTIVEC_BUILTIN_VEC_VMULEUH,\n+  ALTIVEC_BUILTIN_VEC_VMULOSB,\n+  ALTIVEC_BUILTIN_VEC_VMULOSH,\n+  ALTIVEC_BUILTIN_VEC_VMULOUB,\n+  ALTIVEC_BUILTIN_VEC_VMULOUH,\n+  ALTIVEC_BUILTIN_VEC_VPKSHSS,\n+  ALTIVEC_BUILTIN_VEC_VPKSHUS,\n+  ALTIVEC_BUILTIN_VEC_VPKSWSS,\n+  ALTIVEC_BUILTIN_VEC_VPKSWUS,\n+  ALTIVEC_BUILTIN_VEC_VPKUHUM,\n+  ALTIVEC_BUILTIN_VEC_VPKUHUS,\n+  ALTIVEC_BUILTIN_VEC_VPKUWUM,\n+  ALTIVEC_BUILTIN_VEC_VPKUWUS,\n+  ALTIVEC_BUILTIN_VEC_VRLB,\n+  ALTIVEC_BUILTIN_VEC_VRLH,\n+  ALTIVEC_BUILTIN_VEC_VRLW,\n+  ALTIVEC_BUILTIN_VEC_VSLB,\n+  ALTIVEC_BUILTIN_VEC_VSLH,\n+  ALTIVEC_BUILTIN_VEC_VSLW,\n+  ALTIVEC_BUILTIN_VEC_VSPLTB,\n+  ALTIVEC_BUILTIN_VEC_VSPLTH,\n+  ALTIVEC_BUILTIN_VEC_VSPLTW,\n+  ALTIVEC_BUILTIN_VEC_VSRAB,\n+  ALTIVEC_BUILTIN_VEC_VSRAH,\n+  ALTIVEC_BUILTIN_VEC_VSRAW,\n+  ALTIVEC_BUILTIN_VEC_VSRB,\n+  ALTIVEC_BUILTIN_VEC_VSRH,\n+  ALTIVEC_BUILTIN_VEC_VSRW,\n+  ALTIVEC_BUILTIN_VEC_VSUBFP,\n+  ALTIVEC_BUILTIN_VEC_VSUBSBS,\n+  ALTIVEC_BUILTIN_VEC_VSUBSHS,\n+  ALTIVEC_BUILTIN_VEC_VSUBSWS,\n+  ALTIVEC_BUILTIN_VEC_VSUBUBM,\n+  ALTIVEC_BUILTIN_VEC_VSUBUBS,\n+  ALTIVEC_BUILTIN_VEC_VSUBUHM,\n+  ALTIVEC_BUILTIN_VEC_VSUBUHS,\n+  ALTIVEC_BUILTIN_VEC_VSUBUWM,\n+  ALTIVEC_BUILTIN_VEC_VSUBUWS,\n+  ALTIVEC_BUILTIN_VEC_VSUM4SBS,\n+  ALTIVEC_BUILTIN_VEC_VSUM4SHS,\n+  ALTIVEC_BUILTIN_VEC_VSUM4UBS,\n+  ALTIVEC_BUILTIN_VEC_VUPKHPX,\n+  ALTIVEC_BUILTIN_VEC_VUPKHSB,\n+  ALTIVEC_BUILTIN_VEC_VUPKHSH,\n+  ALTIVEC_BUILTIN_VEC_VUPKLPX,\n+  ALTIVEC_BUILTIN_VEC_VUPKLSB,\n+  ALTIVEC_BUILTIN_VEC_VUPKLSH,\n+  ALTIVEC_BUILTIN_VEC_XOR,\n+  ALTIVEC_BUILTIN_VEC_STEP,\n+  ALTIVEC_BUILTIN_OVERLOADED_LAST = ALTIVEC_BUILTIN_VEC_STEP,\n+\n   /* SPE builtins.  */\n   SPE_BUILTIN_EVADDW,\n   SPE_BUILTIN_EVAND,\n@@ -3002,5 +3217,84 @@ enum rs6000_builtins\n   SPE_BUILTIN_EVMWHGUMIAN,\n   SPE_BUILTIN_MTSPEFSCR,\n   SPE_BUILTIN_MFSPEFSCR,\n-  SPE_BUILTIN_BRINC\n+  SPE_BUILTIN_BRINC,\n+\n+  RS6000_BUILTIN_COUNT\n+};\n+\n+enum rs6000_builtin_type_index\n+{\n+  RS6000_BTI_NOT_OPAQUE,\n+  RS6000_BTI_opaque_V2SI,\n+  RS6000_BTI_opaque_V2SF,\n+  RS6000_BTI_opaque_p_V2SI,\n+  RS6000_BTI_opaque_V4SI,\n+  RS6000_BTI_V16QI,\n+  RS6000_BTI_V2SI,\n+  RS6000_BTI_V2SF,\n+  RS6000_BTI_V4HI,\n+  RS6000_BTI_V4SI,\n+  RS6000_BTI_V4SF,\n+  RS6000_BTI_V8HI,\n+  RS6000_BTI_unsigned_V16QI,\n+  RS6000_BTI_unsigned_V8HI,\n+  RS6000_BTI_unsigned_V4SI,\n+  RS6000_BTI_bool_char,          /* __bool char */\n+  RS6000_BTI_bool_short,         /* __bool short */\n+  RS6000_BTI_bool_int,           /* __bool int */\n+  RS6000_BTI_pixel,              /* __pixel */\n+  RS6000_BTI_bool_V16QI,         /* __vector __bool char */\n+  RS6000_BTI_bool_V8HI,          /* __vector __bool short */\n+  RS6000_BTI_bool_V4SI,          /* __vector __bool int */\n+  RS6000_BTI_pixel_V8HI,         /* __vector __pixel */\n+  RS6000_BTI_long,\t         /* long_integer_type_node */\n+  RS6000_BTI_unsigned_long,      /* long_unsigned_type_node */\n+  RS6000_BTI_INTQI,\t         /* intQI_type_node */\n+  RS6000_BTI_UINTQI,\t\t /* unsigned_intQI_type_node */\n+  RS6000_BTI_INTHI,\t         /* intHI_type_node */\n+  RS6000_BTI_UINTHI,\t\t /* unsigned_intHI_type_node */\n+  RS6000_BTI_INTSI,\t\t /* intSI_type_node */\n+  RS6000_BTI_UINTSI,\t\t /* unsigned_intSI_type_node */\n+  RS6000_BTI_float,\t         /* float_type_node */\n+  RS6000_BTI_void,\t         /* void_type_node */\n+  RS6000_BTI_MAX\n };\n+\n+\n+#define opaque_V2SI_type_node         (rs6000_builtin_types[RS6000_BTI_opaque_V2SI])\n+#define opaque_V2SF_type_node         (rs6000_builtin_types[RS6000_BTI_opaque_V2SF])\n+#define opaque_p_V2SI_type_node       (rs6000_builtin_types[RS6000_BTI_opaque_p_V2SI])\n+#define opaque_V4SI_type_node         (rs6000_builtin_types[RS6000_BTI_opaque_V4SI])\n+#define V16QI_type_node               (rs6000_builtin_types[RS6000_BTI_V16QI])\n+#define V2SI_type_node                (rs6000_builtin_types[RS6000_BTI_V2SI])\n+#define V2SF_type_node                (rs6000_builtin_types[RS6000_BTI_V2SF])\n+#define V4HI_type_node                (rs6000_builtin_types[RS6000_BTI_V4HI])\n+#define V4SI_type_node                (rs6000_builtin_types[RS6000_BTI_V4SI])\n+#define V4SF_type_node                (rs6000_builtin_types[RS6000_BTI_V4SF])\n+#define V8HI_type_node                (rs6000_builtin_types[RS6000_BTI_V8HI])\n+#define unsigned_V16QI_type_node      (rs6000_builtin_types[RS6000_BTI_unsigned_V16QI])\n+#define unsigned_V8HI_type_node       (rs6000_builtin_types[RS6000_BTI_unsigned_V8HI])\n+#define unsigned_V4SI_type_node       (rs6000_builtin_types[RS6000_BTI_unsigned_V4SI])\n+#define bool_char_type_node           (rs6000_builtin_types[RS6000_BTI_bool_char])\n+#define bool_short_type_node          (rs6000_builtin_types[RS6000_BTI_bool_short])\n+#define bool_int_type_node            (rs6000_builtin_types[RS6000_BTI_bool_int])\n+#define pixel_type_node               (rs6000_builtin_types[RS6000_BTI_pixel])\n+#define bool_V16QI_type_node\t      (rs6000_builtin_types[RS6000_BTI_bool_V16QI])\n+#define bool_V8HI_type_node\t      (rs6000_builtin_types[RS6000_BTI_bool_V8HI])\n+#define bool_V4SI_type_node\t      (rs6000_builtin_types[RS6000_BTI_bool_V4SI])\n+#define pixel_V8HI_type_node\t      (rs6000_builtin_types[RS6000_BTI_pixel_V8HI])\n+\n+#define long_integer_type_internal_node  (rs6000_builtin_types[RS6000_BTI_long])\n+#define long_unsigned_type_internal_node (rs6000_builtin_types[RS6000_BTI_unsigned_long])\n+#define intQI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_INTQI])\n+#define uintQI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_UINTQI])\n+#define intHI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_INTHI])\n+#define uintHI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_UINTHI])\n+#define intSI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_INTSI])\n+#define uintSI_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_UINTSI])\n+#define float_type_internal_node\t (rs6000_builtin_types[RS6000_BTI_float])\n+#define void_type_internal_node\t\t (rs6000_builtin_types[RS6000_BTI_void])\n+\n+extern GTY(()) tree rs6000_builtin_types[RS6000_BTI_MAX];\n+extern GTY(()) tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];\n+"}, {"sha": "a3c529ed0116ae6be91eecfd2f6be86d04e821b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -1,3 +1,8 @@\n+2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * semantics.c (finish_call_expr): Call resolve_overloaded_builtin\n+        for BUILT_IN_MD built-ins.\n+\n 2005-05-02  Michael Matz  <matz@suse.de>\n \n \tPR c++/19542"}, {"sha": "25286852e658d822626b6f865a49efd360383e3b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -1837,7 +1837,8 @@ finish_call_expr (tree fn, tree args, bool disallow_virtual, bool koenig_p)\n     {\n       /* If the function is an overloaded builtin, resolve it.  */\n       if (TREE_CODE (fn) == FUNCTION_DECL\n-\t  && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL)\n+\t  && (DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL\n+\t      || DECL_BUILT_IN_CLASS (fn) == BUILT_IN_MD))\n         result = resolve_overloaded_builtin (fn, args);\n \n       if (!result)"}, {"sha": "27e851123f2af91d8ed18b895403c3f32366f107", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -296,6 +296,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n+#define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n #define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n \n /* In varasm.c.  */\n@@ -515,6 +516,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_ALIGN_ANON_BITFIELD,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n+  TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\\n   TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\\n   TARGET_INIT_LIBFUNCS,\t\t\t\t\\"}, {"sha": "f141f04095f4bde8ad777b28c16b6eee33ac2f17", "filename": "gcc/target.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -345,9 +345,15 @@ struct gcc_target\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);\n \n+  /* Select a replacement for a target-specific builtin.  This is done\n+     *before* regular type checking, and so allows the target to implement\n+     a crude form of function overloading.  The result is a complete\n+     expression that implements the operation.  */\n+  tree (*resolve_overloaded_builtin) (tree decl, tree params);\n+\n   /* Fold a target-specific builtin.  */\n   tree (* fold_builtin) (tree fndecl, tree arglist, bool ignore);\n-\n+  \n   /* For a vendor-specific fundamental TYPE, return a pointer to\n      a statically-allocated string containing the C++ mangling for\n      TYPE.  In all other cases, return NULL.  */"}, {"sha": "7c5caab0e0587b79f5a7f5637078c9c7d2f9a04b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -1,3 +1,8 @@\n+2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * gcc.dg/altivec-3.c (vec_store): Do not use the old\n+        __builtin_altivec_st_internal_4si built-in.\n+\n 2005-05-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15875"}, {"sha": "f1105d51b26efad146542f30e885fb8aabfc7c0e", "filename": "gcc/testsuite/gcc.dg/altivec-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58646b77eddc64f8b2cb6041180c3680d85c1faf/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c?ref=58646b77eddc64f8b2cb6041180c3680d85c1faf", "patch": "@@ -19,7 +19,7 @@ float h3[4] __attribute__((aligned(16)));\n float g3[4] __attribute__((aligned(16)));\n \n #define vec_store(dst, src) \\\n-  __builtin_altivec_st_internal_4si ((int *) dst, (int4) src)\n+  __builtin_vec_st (src, 0, (__typeof__ (src) *) dst)\n \n #define vec_add_int4(x, y) \\\n   __builtin_altivec_vaddsws (x, y)"}]}