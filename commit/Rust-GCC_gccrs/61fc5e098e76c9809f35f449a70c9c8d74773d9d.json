{"sha": "61fc5e098e76c9809f35f449a70c9c8d74773d9d", "node_id": "C_kwDOANBUbNoAKDYxZmM1ZTA5OGU3NmM5ODA5ZjM1ZjQ0OWE3MGM5YzhkNzQ3NzNkOWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-18T10:34:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-22T06:48:31Z"}, "message": "tree-optimization/104582 - Simplify vectorizer cost API and fixes\n\nThis simplifies the vectorizer cost API by providing overloads\nto add_stmt_cost and record_stmt_cost suitable for scalar stmt\nand branch stmt costing which do not need information like\na vector type or alignment.  It also fixes two mistakes where\ncosts for versioning tests were recorded as vector stmt rather\nthan scalar stmt.\n\nThis is a first patch to simplify the actual fix for PR104582.\n\n2022-02-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104582\n\t* tree-vectorizer.h (add_stmt_cost): New overload.\n\t(record_stmt_cost): Likewise.\n\t* tree-vect-loop.cc (vect_compute_single_scalar_iteration_cost):\n\tUse add_stmt_costs.\n\t(vect_get_known_peeling_cost): Use new overloads.\n\t(vect_estimate_min_profitable_iters): Likewise.  Consistently\n\tuse scalar_stmt for costing versioning checks.\n\t* tree-vect-stmts.cc (record_stmt_cost): New overload.", "tree": {"sha": "88ba61d8bf23b71c317bf909b8adc8b8cad4d84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88ba61d8bf23b71c317bf909b8adc8b8cad4d84e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fc5e098e76c9809f35f449a70c9c8d74773d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fc5e098e76c9809f35f449a70c9c8d74773d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fc5e098e76c9809f35f449a70c9c8d74773d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fc5e098e76c9809f35f449a70c9c8d74773d9d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0435b978f95971e139882549f5a1765c50682216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0435b978f95971e139882549f5a1765c50682216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0435b978f95971e139882549f5a1765c50682216"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "5c7b163f01cb438cef87aa2049f91863e67fc601", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=61fc5e098e76c9809f35f449a70c9c8d74773d9d", "patch": "@@ -1323,13 +1323,8 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n \n   /* Now accumulate cost.  */\n   loop_vinfo->scalar_costs = init_cost (loop_vinfo, true);\n-  stmt_info_for_cost *si;\n-  int j;\n-  FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo),\n-\t\t    j, si)\n-    (void) add_stmt_cost (loop_vinfo->scalar_costs, si->count,\n-\t\t\t  si->kind, si->stmt_info, si->vectype,\n-\t\t\t  si->misalign, si->where);\n+  add_stmt_costs (loop_vinfo->scalar_costs,\n+\t\t  &LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo));\n   loop_vinfo->scalar_costs->finish_cost (nullptr);\n }\n \n@@ -3873,10 +3868,10 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n \t iterations are unknown, count a taken branch per peeled loop.  */\n       if (peel_iters_prologue > 0)\n \tretval = record_stmt_cost (prologue_cost_vec, 1, cond_branch_taken,\n-\t\t\t\t   NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t\t   vect_prologue);\n       if (*peel_iters_epilogue > 0)\n \tretval += record_stmt_cost (epilogue_cost_vec, 1, cond_branch_taken,\n-\t\t\t\t    NULL, NULL_TREE, 0, vect_epilogue);\n+\t\t\t\t    vect_epilogue);\n     }\n \n   stmt_info_for_cost *si;\n@@ -3946,8 +3941,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       unsigned len = LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo).length ();\n-      (void) add_stmt_cost (target_cost_data, len, vector_stmt,\n-\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n+      (void) add_stmt_cost (target_cost_data, len, scalar_stmt, vect_prologue);\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n \t\t     \"cost model: Adding cost of checks for loop \"\n@@ -3959,13 +3953,12 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     {\n       /*  FIXME: Make cost depend on complexity of individual check.  */\n       unsigned len = LOOP_VINFO_COMP_ALIAS_DDRS (loop_vinfo).length ();\n-      (void) add_stmt_cost (target_cost_data, len, vector_stmt,\n-\t\t\t    NULL, NULL_TREE, 0, vect_prologue);\n+      (void) add_stmt_cost (target_cost_data, len, scalar_stmt, vect_prologue);\n       len = LOOP_VINFO_CHECK_UNEQUAL_ADDRS (loop_vinfo).length ();\n       if (len)\n \t/* Count LEN - 1 ANDs and LEN comparisons.  */\n \t(void) add_stmt_cost (target_cost_data, len * 2 - 1,\n-\t\t\t      scalar_stmt, NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t      scalar_stmt, vect_prologue);\n       len = LOOP_VINFO_LOWER_BOUNDS (loop_vinfo).length ();\n       if (len)\n \t{\n@@ -3976,7 +3969,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t    if (!LOOP_VINFO_LOWER_BOUNDS (loop_vinfo)[i].unsigned_p)\n \t      nstmts += 1;\n \t  (void) add_stmt_cost (target_cost_data, nstmts,\n-\t\t\t\tscalar_stmt, NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t\tscalar_stmt, vect_prologue);\n \t}\n       if (dump_enabled_p ())\n \tdump_printf (MSG_NOTE,\n@@ -3998,7 +3991,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n   if (LOOP_REQUIRES_VERSIONING (loop_vinfo))\n     (void) add_stmt_cost (target_cost_data, 1, cond_branch_taken,\n-\t\t\t  NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t  vect_prologue);\n \n   /* Count statements in scalar loop.  Using this as scalar cost for a single\n      iteration for now.\n@@ -4104,21 +4097,19 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \n   if (prologue_need_br_taken_cost)\n     (void) add_stmt_cost (target_cost_data, 1, cond_branch_taken,\n-\t\t\t  NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t  vect_prologue);\n \n   if (prologue_need_br_not_taken_cost)\n     (void) add_stmt_cost (target_cost_data, 1,\n-\t\t\t  cond_branch_not_taken, NULL, NULL_TREE, 0,\n-\t\t\t  vect_prologue);\n+\t\t\t  cond_branch_not_taken, vect_prologue);\n \n   if (epilogue_need_br_taken_cost)\n     (void) add_stmt_cost (target_cost_data, 1, cond_branch_taken,\n-\t\t\t  NULL, NULL_TREE, 0, vect_epilogue);\n+\t\t\t  vect_epilogue);\n \n   if (epilogue_need_br_not_taken_cost)\n     (void) add_stmt_cost (target_cost_data, 1,\n-\t\t\t  cond_branch_not_taken, NULL, NULL_TREE, 0,\n-\t\t\t  vect_epilogue);\n+\t\t\t  cond_branch_not_taken, vect_epilogue);\n \n   /* Take care of special costs for rgroup controls of partial vectors.  */\n   if (LOOP_VINFO_FULLY_MASKED_P (loop_vinfo))\n@@ -4204,9 +4195,9 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t  }\n \n       (void) add_stmt_cost (target_cost_data, prologue_stmts,\n-\t\t\t    scalar_stmt, NULL, NULL_TREE, 0, vect_prologue);\n+\t\t\t    scalar_stmt, vect_prologue);\n       (void) add_stmt_cost (target_cost_data, body_stmts,\n-\t\t\t    scalar_stmt, NULL, NULL_TREE, 0, vect_body);\n+\t\t\t    scalar_stmt, vect_body);\n     }\n \n   /* FORNOW: The scalar outside cost is incremented in one of the"}, {"sha": "6b3dde1c8969f498b3561abed174e8dfe89c2895", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=61fc5e098e76c9809f35f449a70c9c8d74773d9d", "patch": "@@ -109,6 +109,17 @@ record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n       (builtin_vectorization_cost (kind, vectype, misalign) * count);\n }\n \n+unsigned\n+record_stmt_cost (stmt_vector_for_cost *body_cost_vec, int count,\n+\t\t  enum vect_cost_for_stmt kind,\n+\t\t  enum vect_cost_model_location where)\n+{\n+  gcc_assert (kind == cond_branch_taken || kind == cond_branch_not_taken\n+\t      || kind == scalar_stmt);\n+  return record_stmt_cost (body_cost_vec, count, kind, NULL,\n+\t\t\t   NULL_TREE, 0, where);\n+}\n+\n /* Return a variable of type ELEM_TYPE[NELEMS].  */\n \n static tree"}, {"sha": "da99f28c0dcc9ffc172d59f46815359f7ff51b3f", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fc5e098e76c9809f35f449a70c9c8d74773d9d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=61fc5e098e76c9809f35f449a70c9c8d74773d9d", "patch": "@@ -1762,6 +1762,15 @@ add_stmt_cost (vector_costs *costs, int count,\n   return cost;\n }\n \n+static inline unsigned\n+add_stmt_cost (vector_costs *costs, int count, enum vect_cost_for_stmt kind,\n+\t       enum vect_cost_model_location where)\n+{\n+  gcc_assert (kind == cond_branch_taken || kind == cond_branch_not_taken\n+\t      || kind == scalar_stmt);\n+  return add_stmt_cost (costs, count, kind, NULL, NULL_TREE, 0, where);\n+}\n+\n /* Alias targetm.vectorize.add_stmt_cost.  */\n \n static inline unsigned\n@@ -2120,6 +2129,9 @@ extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt, stmt_vec_info,\n \t\t\t\t  tree, int, enum vect_cost_model_location);\n+extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n+\t\t\t\t  enum vect_cost_for_stmt,\n+\t\t\t\t  enum vect_cost_model_location);\n \n /* Overload of record_stmt_cost with VECTYPE derived from STMT_INFO.  */\n "}]}