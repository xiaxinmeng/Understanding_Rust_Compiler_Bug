{"sha": "a3483a77e5dd55112bd97543c8dd00275c16b345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0ODNhNzdlNWRkNTUxMTJiZDk3NTQzYzhkZDAwMjc1YzE2YjM0NQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-27T12:26:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:32Z"}, "message": "[Ada] Enable Put_Image in pre-Ada-2020 modes\n\n2020-06-12  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Put_Image): Remove assertion. This assertion is\n\tFalse in mixed-Ada-version programs.\n\t* exp_put_image.adb (Tagged_Put_Image_Enabled): New flag to make\n\tit easy to experiment with Put_Image on tagged types. False in\n\tthis version.\n\t(Enable_Put_Image): Enable in pre-2020.  Workarounds: Disable\n\tfor tagged types if Tagged_Put_Image_Enabled is False. Disable\n\tfor access-to-subprogram types.  Disable if errors have been\n\tdetected, or Sink is unavailable.\n\t(Preload_Sink): Move all conditionals here, from Sem_Ch10, so\n\tthey can be nearby related code in Enable_Put_Image.  Load Sink\n\tonly if we have seen a tagged type.  This removes the dilemma\n\tabout calling Preload_Sink when compiling the compiler, which\n\tcaused unwanted dependences.\n\t* exp_put_image.ads (Preload_Sink): New formal Compilation_Unit,\n\tneeded to move all conditionals here, from Sem_Ch10.\n\t* libgnat/a-stouut.adb (Put_UTF_8): Make this suitable for\n\tinlining, so we don't get warnings about inlining in some tests.\n\tAnd so it can be inlined!\n\t* opt.ads (Tagged_Seen): New flag (see Preload_Sink).\n\t* scng.adb (Scan): Set new Tagged_Seen flag.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Move conditionals and\n\tcomments regarding Preload_Sink into Preload_Sink.", "tree": {"sha": "4c3dd338f369a87fd909486c61f5965a6f986dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c3dd338f369a87fd909486c61f5965a6f986dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3483a77e5dd55112bd97543c8dd00275c16b345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3483a77e5dd55112bd97543c8dd00275c16b345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3483a77e5dd55112bd97543c8dd00275c16b345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3483a77e5dd55112bd97543c8dd00275c16b345/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3961bedab9b39baa27cd7844ec4a1be5db348a11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961bedab9b39baa27cd7844ec4a1be5db348a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3961bedab9b39baa27cd7844ec4a1be5db348a11"}], "stats": {"total": 115, "additions": 80, "deletions": 35}, "files": [{"sha": "5faa1cee01a5823818f2eb36ba63069bc4031d1c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -5471,9 +5471,6 @@ package body Exp_Attr is\n          if No (Pname) then\n             if Is_Tagged_Type (U_Type) and then Is_Derived_Type (U_Type) then\n                Pname := Find_Optional_Prim_Op (U_Type, TSS_Put_Image);\n-               pragma Assert\n-                 (Has_Interfaces (U_Type) -- ????interfaces not yet supported\n-                    or else Enable_Put_Image (U_Type) = Present (Pname));\n             else\n                Pname := Find_Inherited_TSS (U_Type, TSS_Put_Image);\n             end if;"}, {"sha": "0d1325890b2ec6afbb8da910598987e977c93aa5", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -44,6 +44,9 @@ with Uintp;    use Uintp;\n \n package body Exp_Put_Image is\n \n+   Tagged_Put_Image_Enabled : constant Boolean := False;\n+   --  ???Set True to enable Put_Image for at least some tagged types\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -816,12 +819,6 @@ package body Exp_Put_Image is\n \n    function Enable_Put_Image (Typ : Entity_Id) return Boolean is\n    begin\n-      --  Disable in pre-2020 versions for now???\n-\n-      if Ada_Version < Ada_2020 then\n-         return False;\n-      end if;\n-\n       --  There's a bit of a chicken&egg problem. The compiler is likely to\n       --  have trouble if we refer to the Put_Image of Sink itself, because\n       --  Sink is part of the parameter profile:\n@@ -846,14 +843,37 @@ package body Exp_Put_Image is\n       --  Put_Image on tagged types triggers some bugs.\n       --\n       --  Put_Image doesn't work for private types whose full type is real.\n+      --  Disable for all real types, for simplicity.\n+      --\n+      --  Put_Image doesn't work for access-to-protected types, because of\n+      --  confusion over their size. Disable for all access-to-subprogram\n+      --  types, just in case.\n \n       if Is_Remote_Types (Scope (Typ))\n         or else (Is_Tagged_Type (Typ) and then In_Predefined_Unit (Typ))\n+        or else (Is_Tagged_Type (Typ) and then not Tagged_Put_Image_Enabled)\n         or else Is_Real_Type (Typ)\n+        or else Is_Access_Subprogram_Type (Typ)\n       then\n          return False;\n       end if;\n \n+      --  End of workarounds.\n+\n+      --  No sense in generating code for Put_Image if there are errors. This\n+      --  avoids certain cascade errors.\n+\n+      if Total_Errors_Detected > 0 then\n+         return False;\n+      end if;\n+\n+      --  If type Sink is unavailable in this runtime, disable Put_Image\n+      --  altogether.\n+\n+      if No_Run_Time_Mode or else not RTE_Available (RE_Sink) then\n+         return False;\n+      end if;\n+\n       --  ???Disable Put_Image on type Sink declared in\n       --  Ada.Strings.Text_Output. Note that we can't call Is_RTU on\n       --  Ada_Strings_Text_Output, because it's not known yet (we might be\n@@ -911,9 +931,25 @@ package body Exp_Put_Image is\n    -- Preload_Sink --\n    ------------------\n \n-   procedure Preload_Sink is\n+   procedure Preload_Sink (Compilation_Unit : Node_Id) is\n    begin\n-      if RTE_Available (RE_Sink) then\n+      --  We can't call RTE (RE_Sink) for at least some predefined units,\n+      --  because it would introduce cyclic dependences. The package where Sink\n+      --  is declared, for example, and things it depends on.\n+      --\n+      --  It's only needed for tagged types, so don't do it unless Put_Image is\n+      --  enabled for tagged types, and we've seen a tagged type. Note that\n+      --  Tagged_Seen is set True by the parser if the \"tagged\" reserved word\n+      --  is seen; this flag tells us whether we have any tagged types.\n+      --\n+      --  Don't do it if type Sink is unavailable in the runtime.\n+\n+      if not In_Predefined_Unit (Compilation_Unit)\n+        and then Tagged_Put_Image_Enabled\n+        and then Tagged_Seen\n+        and then not No_Run_Time_Mode\n+        and then RTE_Available (RE_Sink)\n+      then\n          declare\n             Ignore : constant Entity_Id := RTE (RE_Sink);\n          begin"}, {"sha": "3ee8f8b42cc98cef8ab8c7c4bb4d1faaae897af6", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -85,10 +85,10 @@ package Exp_Put_Image is\n    function Build_Unknown_Put_Image_Call (N : Node_Id) return Node_Id;\n    --  Build a call to Put_Image_Unknown\n \n-   procedure Preload_Sink;\n-   --  Call RTE (RE_Sink), to load the packages involved in Put_Image. We\n-   --  need to do this explicitly, fairly early during compilation, because\n-   --  otherwise it happens during freezing, which triggers visibility bugs\n-   --  in generic instantiations.\n+   procedure Preload_Sink (Compilation_Unit : Node_Id);\n+   --  Call RTE (RE_Sink) if necessary, to load the packages involved in\n+   --  Put_Image. We need to do this explicitly, fairly early during\n+   --  compilation, because otherwise it happens during freezing, which\n+   --  triggers visibility bugs in generic instantiations.\n \n end Exp_Put_Image;"}, {"sha": "89d6c6e298fc81a17255a8d66e6b3810e614d910", "filename": "gcc/ada/libgnat/a-stouut.adb", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stouut.adb?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -40,6 +40,10 @@ package body Ada.Strings.Text_Output.Utils is\n    procedure Adjust_Column (S : in out Sink'Class) with Inline;\n    --  Adjust the column for a non-NL character.\n \n+   procedure Put_UTF_8_Outline (S : in out Sink'Class; Item : UTF_8);\n+   --  Out-of-line portion of Put_UTF_8. This exists solely to make Put_UTF_8\n+   --  small enough to reasonably inline it.\n+\n    procedure Full (S : in out Sink'Class) is\n    begin\n       pragma Assert (S.Last = S.Chunk_Length);\n@@ -132,16 +136,9 @@ package body Ada.Strings.Text_Output.Utils is\n       end if;\n    end Put_Wide_Wide_Character;\n \n-   procedure Put_UTF_8 (S : in out Sink'Class; Item : UTF_8) is\n+   procedure Put_UTF_8_Outline (S : in out Sink'Class; Item : UTF_8) is\n    begin\n-      Adjust_Column (S);\n-\n-      if S.Last + Item'Length < S.Chunk_Length then\n-         --  Item fits in current chunk\n-\n-         S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n-         S.Last := S.Last + Item'Length;\n-      elsif S.Last + Item'Length = S.Chunk_Length then\n+      if S.Last + Item'Length = S.Chunk_Length then\n          --  Item fits exactly in current chunk\n \n          S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n@@ -168,6 +165,20 @@ package body Ada.Strings.Text_Output.Utils is\n             Put_UTF_8 (S, Right); -- This might call Full, but probably not.\n          end;\n       end if;\n+   end Put_UTF_8_Outline;\n+\n+   procedure Put_UTF_8 (S : in out Sink'Class; Item : UTF_8) is\n+   begin\n+      Adjust_Column (S);\n+\n+      if S.Last + Item'Length < S.Chunk_Length then\n+         --  Item fits in current chunk\n+\n+         S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n+         S.Last := S.Last + Item'Length;\n+      else\n+         Put_UTF_8_Outline (S, Item);\n+      end if;\n    end Put_UTF_8;\n \n    procedure Put_UTF_8_Lines (S : in out Sink'Class; Item : UTF_8_Lines) is"}, {"sha": "864b60b18db79dee117df72da31b04f7dcac1759", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -2178,6 +2178,10 @@ package Opt is\n    --  be in the spec of Expander, but it is referenced by Errout, and it\n    --  really seems wrong for Errout to depend on Expander.\n \n+   Tagged_Seen : Boolean := False;\n+   --  Set True by the parser if the \"tagged\" reserved word is seen. This is\n+   --  needed in Exp_Put_Image (see that package for documentation).\n+\n    -----------------------------------\n    -- Modes for Formal Verification --\n    -----------------------------------"}, {"sha": "fd3dacc9af17d506539bb7b14e144fabed95c4a5", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -2568,6 +2568,12 @@ package body Scng is\n             Accumulate_Token_Checksum;\n             Token := Token_Type'Val (Get_Name_Table_Byte (Token_Name));\n \n+            --  See Exp_Put_Image for documentation of Tagged_Seen\n+\n+            if Token = Tok_Tagged then\n+               Tagged_Seen := True;\n+            end if;\n+\n             --  Keyword style checks\n \n             if Style_Check then"}, {"sha": "28f4674ceebea3ab2c724decdda1d96a84333e86", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3483a77e5dd55112bd97543c8dd00275c16b345/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=a3483a77e5dd55112bd97543c8dd00275c16b345", "patch": "@@ -622,16 +622,7 @@ package body Sem_Ch10 is\n    --  Start of processing for Analyze_Compilation_Unit\n \n    begin\n-      --  We can't call Preload_Sink for at least some predefined units,\n-      --  because it would introduce cyclic dependences. The package where Sink\n-      --  is declared, for example, and things it depends on. See Exp_Put_Image\n-      --  for documentation. We don't call Preload_Sink in pre-2020 Ada\n-      --  versions, because the default Put_Image is disabled in those\n-      --  versions, at least for now.\n-\n-      if Ada_Version >= Ada_2020 and then not In_Predefined_Unit (N) then\n-         Exp_Put_Image.Preload_Sink;\n-      end if;\n+      Exp_Put_Image.Preload_Sink (N);\n \n       Process_Compilation_Unit_Pragmas (N);\n "}]}