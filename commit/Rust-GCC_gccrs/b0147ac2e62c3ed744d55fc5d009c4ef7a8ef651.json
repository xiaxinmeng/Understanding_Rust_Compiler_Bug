{"sha": "b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxNDdhYzJlNjJjM2VkNzQ0ZDU1ZmM1ZDAwOWM0ZWY3YThlZjY1MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-23T18:15:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-01-23T18:15:22Z"}, "message": "re PR go/79037 (gccgo: Binaries crash with parforsetup: pos is not aligned on m68k)\n\n\tPR go/79037\n    compiler, runtime: align gc data for m68k\n    \n    The current GC requires that the gc data be aligned to at least a 4\n    byte boundary, because it uses the lower two bits of the address for\n    flags (see LOOP and PRECISE in runtime/mgc0.c).  As the gc data is\n    stored as a [...]uintptr, that is normally always true.  However, on\n    m68k, that only guarantees 2 byte alignment.  Fix it by forcing the\n    alignment.\n    \n    The parfor code used by the current GC requires that the parfor data\n    be aligned to at least an 8 byte boundary.  The code in parfor.c\n    verifies this.  This is normally true, as the data uses uint64_t\n    values, but, again, this must be enforced explicitly on m68k.\n    \n    Fixes GCC PR 79037.\n    \n    Reviewed-on: https://go-review.googlesource.com/35478\n\nFrom-SVN: r244824", "tree": {"sha": "807c3b6f6779fa8ab24d85323f1593d91af510de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/807c3b6f6779fa8ab24d85323f1593d91af510de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/comments", "author": null, "committer": null, "parents": [{"sha": "a0488df43613f596dffc3f18118a0e3216f2f842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0488df43613f596dffc3f18118a0e3216f2f842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0488df43613f596dffc3f18118a0e3216f2f842"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "03586265b45d73d4fb8cf1b68e74da1aecefcf19", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "patch": "@@ -1,4 +1,4 @@\n-6d8ef03e760ff737ff2c613642142290b0f02e0e\n+0655e25d8e4acfac50c6b1422dc32eca3e30803a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9423ef6327689653ffc7072059ab16f922938c0e", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "patch": "@@ -2468,13 +2468,28 @@ Type::make_gc_symbol_var(Gogo* gogo)\n       is_common = true;\n     }\n \n+  // The current garbage collector requires that the GC symbol be\n+  // aligned to at least a four byte boundary.  See the use of PRECISE\n+  // and LOOP in libgo/runtime/mgc0.c.\n+  int64_t align;\n+  if (!sym_init->type()->backend_type_align(gogo, &align))\n+    go_assert(saw_errors());\n+  if (align < 4)\n+    align = 4;\n+  else\n+    {\n+      // Use default alignment.\n+      align = 0;\n+    }\n+\n   // Since we are building the GC symbol in this package, we must create the\n   // variable before converting the initializer to its backend representation\n   // because the initializer may refer to the GC symbol for this type.\n   std::string asm_name(go_selectively_encode_id(sym_name));\n   this->gc_symbol_var_ =\n       gogo->backend()->implicit_variable(sym_name, asm_name,\n-                                         sym_btype, false, true, is_common, 0);\n+\t\t\t\t\t sym_btype, false, true, is_common,\n+\t\t\t\t\t align);\n   if (phash != NULL)\n     *phash = this->gc_symbol_var_;\n "}, {"sha": "cce2e95ac289307dcf78366f6aa960e976cd5473", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "patch": "@@ -36,7 +36,8 @@ static const String reflection_string =\n   sizeof REFLECTION - 1\n };\n \n-const uintptr unsafe_Pointer_gc[] = {sizeof(void*), GC_APTR, 0, GC_END};\n+const uintptr unsafe_Pointer_gc[] __attribute__((aligned(4))) =\n+  {sizeof(void*), GC_APTR, 0, GC_END};\n \n extern const FuncVal runtime_pointerhash_descriptor\n   __asm__ (GOSYM_PREFIX \"runtime.pointerhash$descriptor\");"}, {"sha": "d64d74ccd3600e7732a18ff7cb470012f83750e1", "filename": "libgo/runtime/parfor.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fparfor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fparfor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fparfor.c?ref=b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "patch": "@@ -11,7 +11,7 @@\n struct ParForThread\n {\n \t// the thread's iteration space [32lsb, 32msb)\n-\tuint64 pos;\n+\tuint64 pos __attribute__((aligned(8)));\n \t// stats\n \tuint64 nsteal;\n \tuint64 nstealcnt;"}, {"sha": "644fe9286541ca15b36347e001da49edef4fbfb2", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=b0147ac2e62c3ed744d55fc5d009c4ef7a8ef651", "patch": "@@ -191,7 +191,7 @@ struct ParFor\n \t\t\t\t\t// otherwise parfor may return while other threads are still working\n \tParForThread *thr;\t\t// array of thread descriptors\n \t// stats\n-\tuint64 nsteal;\n+\tuint64 nsteal __attribute__((aligned(8))); // force alignment for m68k\n \tuint64 nstealcnt;\n \tuint64 nprocyield;\n \tuint64 nosyield;"}]}