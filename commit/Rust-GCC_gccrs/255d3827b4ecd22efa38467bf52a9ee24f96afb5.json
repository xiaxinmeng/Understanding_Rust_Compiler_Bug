{"sha": "255d3827b4ecd22efa38467bf52a9ee24f96afb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1ZDM4MjdiNGVjZDIyZWZhMzg0NjdiZjUyYTllZTI0Zjk2YWZiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-03T19:57:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-03T19:57:32Z"}, "message": "re PR c/39983 (ICE: type mismatch in address expression)\n\n2009-05-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR c/39983\n\t* c-typeck.c (array_to_pointer_conversion): Do not built\n\tADDR_EXPRs of arrays of pointer-to-element type.\n\t* c-gimplify.c (c_gimplify_expr): Revert change fixing\n\tup wrong ADDR_EXPRs after-the-fact.\n\t* c-common.c (strict_aliasing_warning): Strip pointer\n\tconversions for obtaining the original type.\n\t* builtins.c (fold_builtin_memset): Handle array types.\n\t(fold_builtin_memory_op): Handle folded POINTER_PLUS_EXPRs\n\tand array types\n\n\t* gcc.c-torture/compile/pr39983.c: New testcase.\n\nFrom-SVN: r147083", "tree": {"sha": "c4e6b2079d241859aabc7e14a7760df92602eee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e6b2079d241859aabc7e14a7760df92602eee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255d3827b4ecd22efa38467bf52a9ee24f96afb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255d3827b4ecd22efa38467bf52a9ee24f96afb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255d3827b4ecd22efa38467bf52a9ee24f96afb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255d3827b4ecd22efa38467bf52a9ee24f96afb5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16c337707b0c71829fcad74fdc82d85b1f103eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c337707b0c71829fcad74fdc82d85b1f103eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c337707b0c71829fcad74fdc82d85b1f103eaf"}], "stats": {"total": 116, "additions": 80, "deletions": 36}, "files": [{"sha": "5ac28ebde3aaff543d1d41f5368d3fe3cc95296d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -1,3 +1,16 @@\n+2009-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/39983\n+\t* c-typeck.c (array_to_pointer_conversion): Do not built\n+\tADDR_EXPRs of arrays of pointer-to-element type.\n+\t* c-gimplify.c (c_gimplify_expr): Revert change fixing\n+\tup wrong ADDR_EXPRs after-the-fact.\n+\t* c-common.c (strict_aliasing_warning): Strip pointer\n+\tconversions for obtaining the original type.\n+\t* builtins.c (fold_builtin_memset): Handle array types.\n+\t(fold_builtin_memory_op): Handle folded POINTER_PLUS_EXPRs\n+\tand array types\n+\n 2009-05-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/23329"}, {"sha": "e3c91dc635b812064a25321818a4e4ef3c46bcf3", "filename": "gcc/builtins.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -8737,7 +8737,7 @@ var_decl_component_p (tree var)\n static tree\n fold_builtin_memset (tree dest, tree c, tree len, tree type, bool ignore)\n {\n-  tree var, ret;\n+  tree var, ret, etype;\n   unsigned HOST_WIDE_INT length, cval;\n \n   if (! validate_arg (dest, POINTER_TYPE)\n@@ -8764,15 +8764,19 @@ fold_builtin_memset (tree dest, tree c, tree len, tree type, bool ignore)\n   if (TREE_THIS_VOLATILE (var))\n     return NULL_TREE;\n \n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (var))\n-      && !POINTER_TYPE_P (TREE_TYPE (var)))\n+  etype = TREE_TYPE (var);\n+  if (TREE_CODE (etype) == ARRAY_TYPE)\n+    etype = TREE_TYPE (etype);\n+\n+  if (!INTEGRAL_TYPE_P (etype)\n+      && !POINTER_TYPE_P (etype))\n     return NULL_TREE;\n \n   if (! var_decl_component_p (var))\n     return NULL_TREE;\n \n   length = tree_low_cst (len, 1);\n-  if (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (var))) != length\n+  if (GET_MODE_SIZE (TYPE_MODE (etype)) != length\n       || get_pointer_alignment (dest, BIGGEST_ALIGNMENT) / BITS_PER_UNIT\n \t < (int) length)\n     return NULL_TREE;\n@@ -8794,8 +8798,10 @@ fold_builtin_memset (tree dest, tree c, tree len, tree type, bool ignore)\n       cval |= (cval << 31) << 1;\n     }\n \n-  ret = build_int_cst_type (TREE_TYPE (var), cval);\n-  ret = build2 (MODIFY_EXPR, TREE_TYPE (var), var, ret);\n+  ret = build_int_cst_type (etype, cval);\n+  var = build_fold_indirect_ref (fold_convert (build_pointer_type (etype),\n+\t\t\t\t\t       dest));\n+  ret = build2 (MODIFY_EXPR, etype, var, ret);\n   if (ignore)\n     return ret;\n \n@@ -8947,8 +8953,37 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t Perhaps we ought to inherit type from non-VOID argument here?  */\n       STRIP_NOPS (src);\n       STRIP_NOPS (dest);\n+      /* As we fold (void *)(p + CST) to (void *)p + CST undo this here.  */\n+      if (TREE_CODE (src) == POINTER_PLUS_EXPR)\n+\t{\n+\t  tree tem = TREE_OPERAND (src, 0);\n+\t  STRIP_NOPS (tem);\n+\t  if (tem != TREE_OPERAND (src, 0))\n+\t    src = build1 (NOP_EXPR, TREE_TYPE (tem), src);\n+\t}\n+      if (TREE_CODE (dest) == POINTER_PLUS_EXPR)\n+\t{\n+\t  tree tem = TREE_OPERAND (dest, 0);\n+\t  STRIP_NOPS (tem);\n+\t  if (tem != TREE_OPERAND (dest, 0))\n+\t    dest = build1 (NOP_EXPR, TREE_TYPE (tem), dest);\n+\t}\n       srctype = TREE_TYPE (TREE_TYPE (src));\n+      if (srctype\n+\t  && TREE_CODE (srctype) == ARRAY_TYPE)\n+\t{\n+\t  srctype = TREE_TYPE (srctype);\n+\t  STRIP_NOPS (src);\n+\t  src = build1 (NOP_EXPR, build_pointer_type (srctype), src);\n+\t}\n       desttype = TREE_TYPE (TREE_TYPE (dest));\n+      if (desttype\n+\t  && TREE_CODE (desttype) == ARRAY_TYPE)\n+\t{\n+\t  desttype = TREE_TYPE (desttype);\n+\t  STRIP_NOPS (dest);\n+\t  dest = build1 (NOP_EXPR, build_pointer_type (desttype), dest);\n+\t}\n       if (!srctype || !desttype\n \t  || !TYPE_SIZE_UNIT (srctype)\n \t  || !TYPE_SIZE_UNIT (desttype)"}, {"sha": "ff8e83afdc1d84ad79e3c1a9ec079025736531ab", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -1762,6 +1762,10 @@ warn_logical_operator (location_t location, enum tree_code code,\n bool\n strict_aliasing_warning (tree otype, tree type, tree expr)\n {\n+  /* Strip pointer conversion chains and get to the correct original type.  */\n+  STRIP_NOPS (expr);\n+  otype = TREE_TYPE (expr);\n+\n   if (!(flag_strict_aliasing\n \t&& POINTER_TYPE_P (type)\n \t&& POINTER_TYPE_P (otype)"}, {"sha": "9cb4a0b2d17bbfe9750b5f63d7b5744286493941", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -196,20 +196,5 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n       && !warn_init_self)\n     TREE_NO_WARNING (DECL_EXPR_DECL (*expr_p)) = 1;\n \n-  /* The C frontend is the only one producing &ARRAY with pointer-to-element\n-     type.  This is invalid in gimple, so produce a properly typed\n-     ADDR_EXPR instead and wrap a conversion around it.  */\n-  if (code == ADDR_EXPR\n-      && TREE_CODE (TREE_TYPE (TREE_OPERAND (*expr_p, 0))) == ARRAY_TYPE\n-      && !lang_hooks.types_compatible_p (TREE_TYPE (TREE_TYPE (*expr_p)),\n-\t\t\t\t\t TREE_TYPE (TREE_OPERAND (*expr_p, 0))))\n-    {\n-      tree type = TREE_TYPE (*expr_p);\n-      TREE_TYPE (*expr_p)\n-\t= build_pointer_type (TREE_TYPE (TREE_OPERAND (*expr_p, 0)));\n-      *expr_p = build1 (NOP_EXPR, type, *expr_p);\n-      return GS_OK;\n-    }\n-\n   return GS_UNHANDLED;\n }"}, {"sha": "f00e0dbcf5ef82aa19f5447a497604ac47464c7d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -1634,21 +1634,6 @@ array_to_pointer_conversion (tree exp)\n   if (TREE_CODE (exp) == INDIRECT_REF)\n     return convert (ptrtype, TREE_OPERAND (exp, 0));\n \n-  if (TREE_CODE (exp) == VAR_DECL)\n-    {\n-      /* We are making an ADDR_EXPR of ptrtype.  This is a valid\n-\t ADDR_EXPR because it's the best way of representing what\n-\t happens in C when we take the address of an array and place\n-\t it in a pointer to the element type.  */\n-      adr = build1 (ADDR_EXPR, ptrtype, exp);\n-      if (!c_mark_addressable (exp))\n-\treturn error_mark_node;\n-      TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n-      return adr;\n-    }\n-\n-  /* This way is better for a COMPONENT_REF since it can\n-     simplify the offset for a component.  */\n   adr = build_unary_op (EXPR_LOCATION (exp), ADDR_EXPR, exp, 1);\n   return convert (ptrtype, adr);\n }"}, {"sha": "ded72e9b3559b67751d7bd09bf4ea2a037161483", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -1,3 +1,8 @@\n+2009-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/39983\n+\t* gcc.c-torture/compile/pr39983.c: New testcase.\n+\n 2009-05-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c99-complex-3.c: New test."}, {"sha": "67081211ccaa327e1d1b109ccfa442834f74da82", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39983.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39983.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255d3827b4ecd22efa38467bf52a9ee24f96afb5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39983.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39983.c?ref=255d3827b4ecd22efa38467bf52a9ee24f96afb5", "patch": "@@ -0,0 +1,17 @@\n+typedef struct {\n+    int *p;\n+} *A;\n+\n+extern const int a[1];\n+extern const int b[1];\n+\n+void foo()\n+{\n+  A x;\n+  A y;\n+  static const int * const c[] = { b };\n+\n+  x->p = (int*)c[0];\n+  y->p = (int*)a;\n+}\n+"}]}