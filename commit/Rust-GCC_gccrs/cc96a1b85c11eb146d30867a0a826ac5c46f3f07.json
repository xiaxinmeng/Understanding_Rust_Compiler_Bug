{"sha": "cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5NmExYjg1YzExZWIxNDZkMzA4NjdhMGE4MjZhYzVjNDZmM2YwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-02T14:45:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-02T14:45:58Z"}, "message": "[multiple changes]\n\n2011-12-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb: Minor change in error message.\n\n2011-12-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch9.adb, prj-part.adb, vms_data.ads, sem_ch8.adb: Minor\n\treformatting.\n\n2011-12-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Constrain_Access): Enable on Ada 2005 mode the\n\tstatic check of the rule of general access types whose designated\n\ttype has discriminants.\n\t* sem_util.ads, sem_util.adb\n\t(Effectively_Has_Constrained_Partial_View): New subprogram.\n\t(In_Generic_Body): New subprogram.\n\t* einfo.ads (Has_Constrained_Partial_View): Adding documentation.\n\t* sem_prag.adb (Inside_Generic_Body): Removed. Replaced by new\n\tsubprogram In_Generic_Body.\n\t* exp_attr.adb, checks.adb, sem_attr.adb, exp_ch4.adb,\n\tsem_ch4.adb: In addition, this patch replaces the occurrences of\n\tHas_Constrained_Partial_View by\n\tEffectively_Has_Constrained_Partial_View.\n\n2011-12-02  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-comutr.adb, a-cimutr.adb, a-cbmutr.adb (Iterator): Rename\n\tPosition component.\n\t(Finalize): Remove unnecessary access check.\n\t(First): Forward to First_Child.\n\t(Last): Forward to Last_Child.\n\t(Iterate): Check preconditions for parent node parameter.\n\t(Next): Forward to Next_Sibling.\n\t(Previous): Forward to Previous_Sibling.\n\nFrom-SVN: r181914", "tree": {"sha": "bbed7d7ebe6eeb89d99e6704f8353abb0cbc973d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbed7d7ebe6eeb89d99e6704f8353abb0cbc973d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/comments", "author": null, "committer": null, "parents": [{"sha": "35fae080e6722415f3308bb3375236f657022b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fae080e6722415f3308bb3375236f657022b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fae080e6722415f3308bb3375236f657022b61"}], "stats": {"total": 396, "additions": 247, "deletions": 149}, "files": [{"sha": "cff6725faad790d7614f0ef4cefd95b64d37a30f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1,3 +1,39 @@\n+2011-12-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb: Minor change in error message.\n+\n+2011-12-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch9.adb, prj-part.adb, vms_data.ads, sem_ch8.adb: Minor\n+\treformatting.\n+\n+2011-12-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Access): Enable on Ada 2005 mode the\n+\tstatic check of the rule of general access types whose designated\n+\ttype has discriminants.\n+\t* sem_util.ads, sem_util.adb\n+\t(Effectively_Has_Constrained_Partial_View): New subprogram.\n+\t(In_Generic_Body): New subprogram.\n+\t* einfo.ads (Has_Constrained_Partial_View): Adding documentation.\n+\t* sem_prag.adb (Inside_Generic_Body): Removed. Replaced by new\n+\tsubprogram In_Generic_Body.\n+\t* exp_attr.adb, checks.adb, sem_attr.adb, exp_ch4.adb,\n+\tsem_ch4.adb: In addition, this patch replaces the occurrences of\n+\tHas_Constrained_Partial_View by\n+\tEffectively_Has_Constrained_Partial_View.\n+\n+2011-12-02  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-comutr.adb, a-cimutr.adb, a-cbmutr.adb (Iterator): Rename\n+\tPosition component.\n+\t(Finalize): Remove unnecessary access check.\n+\t(First): Forward to First_Child.\n+\t(Last): Forward to Last_Child.\n+\t(Iterate): Check preconditions for parent node parameter.\n+\t(Next): Forward to Next_Sibling.\n+\t(Previous): Forward to Previous_Sibling.\n+\n 2011-12-02  Robert Dewar  <dewar@adacore.com>\n \n \t* a-coinve.adb, a-coorma.adb, freeze.adb, a-coorse.adb, a-comutr.adb,"}, {"sha": "aee67f02a2ff0183a5342234ea77a3667fbee181", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -55,7 +55,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n-      Position  : Cursor;\n+      Parent    : Count_Type;\n    end record;\n \n    overriding procedure Finalize (Object : in out Child_Iterator);\n@@ -1243,25 +1243,15 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n    --------------\n \n    procedure Finalize (Object : in out Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    procedure Finalize (Object : in out Child_Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    ----------\n@@ -1294,10 +1284,8 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n    end First;\n \n    function First (Object : Child_Iterator) return Cursor is\n-      Node : Count_Type'Base;\n    begin\n-      Node := Object.Container.Nodes (Object.Position.Node).Children.First;\n-      return (Object.Container, Node);\n+      return First_Child (Cursor'(Object.Container, Object.Parent));\n    end First;\n \n    -----------------\n@@ -1876,13 +1864,22 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Parent    : Cursor)\n       return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+      C : constant Tree_Access := Container'Unrestricted_Access;\n+      B : Natural renames C.Busy;\n \n    begin\n+      if Parent = No_Element then\n+         raise Constraint_Error with \"Parent cursor has no element\";\n+      end if;\n+\n+      if Parent.Container /= C then\n+         raise Program_Error with \"Parent cursor not in container\";\n+      end if;\n+\n       return It : constant Child_Iterator :=\n                     Child_Iterator'(Limited_Controlled with\n-                                      Container => Parent.Container,\n-                                      Position  => Parent)\n+                                      Container => C,\n+                                      Parent    => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1965,7 +1962,7 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n \n    overriding function Last (Object : Child_Iterator) return Cursor is\n    begin\n-      return Last_Child (Object.Position);\n+      return Last_Child (Cursor'(Object.Container, Object.Parent));\n    end Last;\n \n    ----------------\n@@ -2089,13 +2086,18 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       end if;\n    end Next;\n \n-   function Next\n+   overriding function Next\n      (Object   : Child_Iterator;\n       Position : Cursor) return Cursor\n    is\n    begin\n-      if Object.Container /= Position.Container then\n-         raise Program_Error;\n+      if Position.Container = null then\n+         return No_Element;\n+      end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong tree\";\n       end if;\n \n       return Next_Sibling (Position);\n@@ -2255,8 +2257,13 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Position : Cursor) return Cursor\n    is\n    begin\n-      if Object.Container /= Position.Container then\n-         raise Program_Error;\n+      if Position.Container = null then\n+         return No_Element;\n+      end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Previous designates wrong tree\";\n       end if;\n \n       return Previous_Sibling (Position);"}, {"sha": "01929bbf3736c88321467f50adb1de30f7814318", "filename": "gcc/ada/a-cimutr.adb", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cimutr.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -45,7 +45,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n      Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n-      Position  : Cursor;\n+      Parent    : Tree_Node_Access;\n    end record;\n \n    overriding procedure Finalize (Object : in out Iterator);\n@@ -937,25 +937,15 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    --------------\n \n    procedure Finalize (Object : in out Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    procedure Finalize (Object : in out Child_Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    ----------\n@@ -988,7 +978,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n \n    function First (Object : Child_Iterator) return Cursor is\n    begin\n-      return (Object.Container, Object.Position.Node.Children.First);\n+      return First_Child (Cursor'(Object.Container, Object.Parent));\n    end First;\n \n    -----------------\n@@ -1433,13 +1423,22 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n       Parent    : Cursor)\n      return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+      C : constant Tree_Access := Container'Unrestricted_Access;\n+      B : Natural renames C.Busy;\n \n    begin\n+      if Parent = No_Element then\n+         raise Constraint_Error with \"Parent cursor has no element\";\n+      end if;\n+\n+      if Parent.Container /= C then\n+         raise Program_Error with \"Parent cursor not in container\";\n+      end if;\n+\n       return It : constant Child_Iterator :=\n                     Child_Iterator'(Limited_Controlled with\n-                                      Container => Parent.Container,\n-                                      Position  => Parent)\n+                                      Container => C,\n+                                      Parent    => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1516,7 +1515,7 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n \n    overriding function Last (Object : Child_Iterator) return Cursor is\n    begin\n-      return (Object.Container, Object.Position.Node.Children.Last);\n+      return Last_Child (Cursor'(Object.Container, Object.Parent));\n    end Last;\n \n    ----------------\n@@ -1646,18 +1645,20 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    end Next;\n \n    function Next\n-     (Object : Child_Iterator;\n+     (Object   : Child_Iterator;\n       Position : Cursor) return Cursor\n    is\n-      C : constant Tree_Node_Access := Position.Node.Next;\n-\n    begin\n-      if C = null then\n+      if Position.Container = null then\n          return No_Element;\n+      end if;\n \n-      else\n-         return (Object.Container, C);\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong tree\";\n       end if;\n+\n+      return Next_Sibling (Position);\n    end Next;\n \n    ------------------\n@@ -1787,18 +1788,20 @@ package body Ada.Containers.Indefinite_Multiway_Trees is\n    --------------\n \n    overriding function Previous\n-     (Object : Child_Iterator;\n+     (Object   : Child_Iterator;\n       Position : Cursor) return Cursor\n    is\n-      C : constant Tree_Node_Access := Position.Node.Prev;\n-\n    begin\n-      if C = null then\n+      if Position.Container = null then\n          return No_Element;\n+      end if;\n \n-      else\n-         return (Object.Container, C);\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Previous designates wrong tree\";\n       end if;\n+\n+      return Previous_Sibling (Position);\n    end Previous;\n \n    ----------------------"}, {"sha": "b18b15f7534f0a4171c10c5a954cff9223165075", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -46,7 +46,7 @@ package body Ada.Containers.Multiway_Trees is\n      Tree_Iterator_Interfaces.Reversible_Iterator with\n    record\n       Container : Tree_Access;\n-      Position  : Cursor;\n+      Parent    : Tree_Node_Access;\n    end record;\n \n    overriding procedure Finalize (Object : in out Iterator);\n@@ -910,25 +910,15 @@ package body Ada.Containers.Multiway_Trees is\n    --------------\n \n    procedure Finalize (Object : in out Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    procedure Finalize (Object : in out Child_Iterator) is\n+      B : Natural renames Object.Container.Busy;\n    begin\n-      if Object.Container /= null then\n-         declare\n-            B : Natural renames Object.Container.all.Busy;\n-         begin\n-            B := B - 1;\n-         end;\n-      end if;\n+      B := B - 1;\n    end Finalize;\n \n    ----------\n@@ -960,7 +950,7 @@ package body Ada.Containers.Multiway_Trees is\n \n    function First (Object : Child_Iterator) return Cursor is\n    begin\n-      return (Object.Container, Object.Position.Node.Children.First);\n+      return First_Child (Cursor'(Object.Container, Object.Parent));\n    end First;\n \n    -----------------\n@@ -1461,12 +1451,22 @@ package body Ada.Containers.Multiway_Trees is\n       Parent    : Cursor)\n       return Tree_Iterator_Interfaces.Reversible_Iterator'Class\n    is\n-      B : Natural renames Container'Unrestricted_Access.all.Busy;\n+      C : constant Tree_Access := Container'Unrestricted_Access;\n+      B : Natural renames C.Busy;\n+\n    begin\n+      if Parent = No_Element then\n+         raise Constraint_Error with \"Parent cursor has no element\";\n+      end if;\n+\n+      if Parent.Container /= C then\n+         raise Program_Error with \"Parent cursor not in container\";\n+      end if;\n+\n       return It : constant Child_Iterator :=\n                     Child_Iterator'(Limited_Controlled with\n-                                      Container => Parent.Container,\n-                                      Position  => Parent)\n+                                      Container => C,\n+                                      Parent    => Parent.Node)\n       do\n          B := B + 1;\n       end return;\n@@ -1542,7 +1542,7 @@ package body Ada.Containers.Multiway_Trees is\n \n    overriding function Last (Object : Child_Iterator) return Cursor is\n    begin\n-      return (Object.Container, Object.Position.Node.Children.Last);\n+      return Last_Child (Cursor'(Object.Container, Object.Parent));\n    end Last;\n \n    ----------------\n@@ -1675,9 +1675,17 @@ package body Ada.Containers.Multiway_Trees is\n      (Object   : Child_Iterator;\n       Position : Cursor) return Cursor\n    is\n-      C : constant Tree_Node_Access := Position.Node.Next;\n    begin\n-      return (if C = null then No_Element else (Object.Container, C));\n+      if Position.Container = null then\n+         return No_Element;\n+      end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong tree\";\n+      end if;\n+\n+      return Next_Sibling (Position);\n    end Next;\n \n    ------------------\n@@ -1807,9 +1815,17 @@ package body Ada.Containers.Multiway_Trees is\n      (Object   : Child_Iterator;\n       Position : Cursor) return Cursor\n    is\n-      C : constant Tree_Node_Access := Position.Node.Prev;\n    begin\n-      return (if C = null then No_Element else (Object.Container, C));\n+      if Position.Container = null then\n+         return No_Element;\n+      end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Previous designates wrong tree\";\n+      end if;\n+\n+      return Previous_Sibling (Position);\n    end Previous;\n \n    ----------------------"}, {"sha": "ceaae4a96a8a5f891e9a98075f4091f4df9f3b45", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1240,7 +1240,7 @@ package body Checks is\n       --  partial view that is constrained.\n \n       elsif Ada_Version >= Ada_2005\n-        and then Has_Constrained_Partial_View (Base_Type (T_Typ))\n+        and then Effectively_Has_Constrained_Partial_View (Base_Type (T_Typ))\n       then\n          return;\n       end if;"}, {"sha": "46ea04e81d69090094335104399e96cd3aa30664", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1420,6 +1420,8 @@ package Einfo is\n --       type has no discriminants and the full view has discriminants with\n --       defaults. In Ada 2005 heap-allocated objects of such types are not\n --       constrained, and can change their discriminants with full assignment.\n+--       Sem_Util.Effectively_Has_Constrained_Partial_View should be always\n+--       used by callers, rather than reading this attribute directly.\n \n --    Has_Contiguous_Rep (Flag181)\n --       Present in enumeration types. True if the type as a representation"}, {"sha": "bb44a303fe8fee42074c89ee0acfa4916762a8fb", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1559,10 +1559,11 @@ package body Exp_Attr is\n                return Is_Aliased_View (Obj)\n                         and then\n                       (Is_Constrained (Etype (Obj))\n-                         or else (Nkind (Obj) = N_Explicit_Dereference\n-                                    and then\n-                                      not Has_Constrained_Partial_View\n-                                            (Base_Type (Etype (Obj)))));\n+                         or else\n+                           (Nkind (Obj) = N_Explicit_Dereference\n+                              and then\n+                                not Effectively_Has_Constrained_Partial_View\n+                                      (Base_Type (Etype (Obj)))));\n             end if;\n          end Is_Constrained_Aliased_View;\n \n@@ -1684,7 +1685,8 @@ package body Exp_Attr is\n                     or else\n                      (Nkind (Pref) = N_Explicit_Dereference\n                        and then\n-                         not Has_Constrained_Partial_View (Base_Type (Ptyp)))\n+                         not Effectively_Has_Constrained_Partial_View\n+                               (Base_Type (Ptyp)))\n                     or else Is_Constrained (Underlying_Type (Ptyp))\n                     or else (Ada_Version >= Ada_2012\n                               and then Is_Tagged_Type (Underlying_Type (Ptyp))"}, {"sha": "55214a1afbc7064a90bf2c2440f550b4f897d264", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -3903,8 +3903,9 @@ package body Exp_Ch4 is\n                        and then Present (Discriminant_Default_Value\n                                           (First_Discriminant (Typ)))\n                        and then (Ada_Version < Ada_2005\n-                                  or else\n-                                    not Has_Constrained_Partial_View (Typ))\n+                                  or else not\n+                                    Effectively_Has_Constrained_Partial_View\n+                                      (Typ))\n                      then\n                         Typ := Build_Default_Subtype (Typ, N);\n                         Set_Expression (N, New_Reference_To (Typ, Loc));"}, {"sha": "f3650f0b04c54dc83e3a9640cab1798a55d0ab7f", "filename": "gcc/ada/prj-part.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fprj-part.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fprj-part.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -374,13 +374,15 @@ package body Prj.Part is\n       declare\n          Org_With_Clause : Project_Node_Id := Extension_Withs;\n          New_With_Clause : Project_Node_Id := Empty_Node;\n+\n       begin\n          while Present (Org_With_Clause) loop\n             New_With_Clause :=\n               Copy_With_Clause (Org_With_Clause, In_Tree, New_With_Clause);\n \n             Org_With_Clause := Next_With_Clause_Of (Org_With_Clause, In_Tree);\n          end loop;\n+\n          Set_First_With_Clause_Of (Virtual_Project, In_Tree, New_With_Clause);\n       end;\n \n@@ -442,10 +444,10 @@ package body Prj.Part is\n       With_Clause : Project_Node_Id := Empty_Node;\n       --  Node for a with clause of Proj\n \n-      Imported    : Project_Node_Id := Empty_Node;\n+      Imported : Project_Node_Id := Empty_Node;\n       --  Node for a project imported by Proj\n \n-      Extended    : Project_Node_Id := Empty_Node;\n+      Extended : Project_Node_Id := Empty_Node;\n       --  Node for the eventual project extended by Proj\n \n       Extends_All : Boolean := False;\n@@ -457,6 +459,7 @@ package body Prj.Part is\n       --  Nothing to do if Proj is undefined or has already been processed\n \n       if Present (Proj) and then not Processed_Hash.Get (Proj) then\n+\n          --  Make sure the project will not be processed again\n \n          Processed_Hash.Set (Proj, True);\n@@ -478,7 +481,6 @@ package body Prj.Part is\n          --  Now check the projects it imports\n \n          With_Clause := First_With_Clause_Of (Proj, In_Tree);\n-\n          while Present (With_Clause) loop\n             Imported := Project_Node_Of (With_Clause, In_Tree);\n \n@@ -488,6 +490,7 @@ package body Prj.Part is\n             end if;\n \n             if Extends_All then\n+\n                --  This is an EXTENDS ALL project: prepend each of its WITH\n                --  clauses to the currently active list of extension deps.\n \n@@ -757,7 +760,7 @@ package body Prj.Part is\n          end if;\n \n          if Limited_With then\n-            Scan (In_Tree);  --  scan past LIMITED\n+            Scan (In_Tree);  --  past LIMITED\n             Expect (Tok_With, \"WITH\");\n             exit With_Loop when Token /= Tok_With;\n          end if;\n@@ -801,7 +804,7 @@ package body Prj.Part is\n \n                --  End of (possibly multiple) with clause;\n \n-               Scan (In_Tree); -- past the semicolon\n+               Scan (In_Tree); -- past semicolon\n                exit Comma_Loop;\n \n             elsif Token = Tok_Comma then"}, {"sha": "45dd822c7a576cc3355b67312c1750d4be97eb63", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -8632,7 +8632,7 @@ package body Sem_Attr is\n                  and then\n                    (Ada_Version < Ada_2005\n                      or else\n-                       not Has_Constrained_Partial_View\n+                       not Effectively_Has_Constrained_Partial_View\n                              (Designated_Type (Base_Type (Typ))))\n                then\n                   null;"}, {"sha": "2a0f032df10cfd58e8af553c8602506b7b771e2b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -10674,8 +10674,7 @@ package body Sem_Ch3 is\n             return;\n          end if;\n \n-         if (Ekind (T) = E_General_Access_Type\n-              or else Ada_Version >= Ada_2005)\n+         if Ekind (T) = E_General_Access_Type\n            and then Has_Private_Declaration (Desig_Type)\n            and then In_Open_Scopes (Scope (Desig_Type))\n            and then Has_Discriminants (Desig_Type)\n@@ -10687,11 +10686,6 @@ package body Sem_Ch3 is\n             --  (Defect Report 8652/0008, Technical Corrigendum 1, checked\n             --  by ACATS B371001).\n \n-            --  Rule updated for Ada 2005: the private type is said to have\n-            --  a constrained partial view, given that objects of the type\n-            --  can be declared. Furthermore, the rule applies to all access\n-            --  types, unlike the rule concerning default discriminants.\n-\n             declare\n                Pack  : constant Node_Id :=\n                          Unit_Declaration_Node (Scope (Desig_Type));"}, {"sha": "acd03a9545acb541dccc5332524e90e2fc397091", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -576,10 +576,10 @@ package body Sem_Ch4 is\n                --  and the allocated object is unconstrained.\n \n                elsif Ada_Version >= Ada_2005\n-                 and then Has_Constrained_Partial_View (Base_Typ)\n+                 and then Effectively_Has_Constrained_Partial_View (Base_Typ)\n                then\n                   Error_Msg_N\n-                    (\"constraint no allowed when type \" &\n+                    (\"constraint not allowed when type \" &\n                       \"has a constrained partial view\", Constraint (E));\n                end if;\n "}, {"sha": "a47a2dc02b623a6102a387951a4d6a54280c8f01", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1487,7 +1487,7 @@ package body Sem_Ch6 is\n          if Returns_Object then\n             if Nkind (N) = N_Extended_Return_Statement then\n                Error_Msg_N\n-                 (\"extended return statements cannot be nested; use `RETURN;`\",\n+                 (\"extended return statement cannot be nested (use `RETURN;`)\",\n                   N);\n \n             --  Case of a simple return statement with a value inside extended\n@@ -1496,7 +1496,7 @@ package body Sem_Ch6 is\n             else\n                Error_Msg_N\n                  (\"return nested in extended return statement cannot return \" &\n-                  \"value; use `RETURN;`\", N);\n+                  \"value (use `RETURN;`)\", N);\n             end if;\n          end if;\n "}, {"sha": "296e3edfd3a6f6492c1fe25f0c5a14849a37fe7a", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -2850,7 +2850,8 @@ package body Sem_Ch8 is\n       end if;\n \n       --  Implementation-defined aspect specifications can appear in a renaming\n-      --  declaration, but not language-defined ones.\n+      --  declaration, but not language-defined ones. The call to procedure\n+      --  Analyze_Aspect_Specifications will take care of this error check.\n \n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, New_S);"}, {"sha": "f9aab6a235db6a926e0c877ed205d84205552aca", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -953,7 +953,7 @@ package body Sem_Ch9 is\n                Error_Msg_N (\"entry family low bound must be '>'= ^!\", D_Sdef);\n             end if;\n \n-            <<Skip_LB>>\n+         <<Skip_LB>>\n             if Is_Generic_Type (Etype (D_Sdef))\n               or else In_Instance\n               or else Error_Posted (D_Sdef)\n@@ -979,7 +979,7 @@ package body Sem_Ch9 is\n                Error_Msg_N (\"entry family high bound must be '<'= ^!\", D_Sdef);\n             end if;\n \n-            <<Skip_UB>>\n+         <<Skip_UB>>\n             null;\n          end;\n       end if;"}, {"sha": "c8daa8c531233290ae37af5ae91238f6ea1a713e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -1314,34 +1314,6 @@ package body Sem_Prag is\n                      Subtype_Indication (Component_Definition (Comp));\n          Typ     : constant Entity_Id := Etype (Comp_Id);\n \n-         function Inside_Generic_Body (Id : Entity_Id) return Boolean;\n-         --  Determine whether entity Id appears inside a generic body.\n-         --  Shouldn't this be in a more general place ???\n-\n-         -------------------------\n-         -- Inside_Generic_Body --\n-         -------------------------\n-\n-         function Inside_Generic_Body (Id : Entity_Id) return Boolean is\n-            S : Entity_Id;\n-\n-         begin\n-            S := Id;\n-            while Present (S) and then S /= Standard_Standard loop\n-               if Ekind (S) = E_Generic_Package\n-                 and then In_Package_Body (S)\n-               then\n-                  return True;\n-               end if;\n-\n-               S := Scope (S);\n-            end loop;\n-\n-            return False;\n-         end Inside_Generic_Body;\n-\n-      --  Start of processing for Check_Component\n-\n       begin\n          --  Ada 2005 (AI-216): If a component subtype is subject to a per-\n          --  object constraint, then the component type shall be an Unchecked_\n@@ -1363,7 +1335,7 @@ package body Sem_Prag is\n          --  the formal part of the generic unit.\n \n          elsif Ada_Version >= Ada_2012\n-           and then Inside_Generic_Body (UU_Typ)\n+           and then In_Generic_Body (UU_Typ)\n            and then In_Variant_Part\n            and then Is_Private_Type (Typ)\n            and then Is_Generic_Type (Typ)"}, {"sha": "c1a79275e4e91ec497f14dcaad7053c9d11934fa", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -3039,6 +3039,24 @@ package body Sem_Util is\n       return Extra_Accessibility (Id);\n    end Effective_Extra_Accessibility;\n \n+   ----------------------------------------------\n+   -- Effectively_Has_Constrained_Partial_View --\n+   ----------------------------------------------\n+\n+   function Effectively_Has_Constrained_Partial_View\n+     (Typ  : Entity_Id;\n+      Scop : Entity_Id := Current_Scope) return Boolean is\n+   begin\n+      return Has_Constrained_Partial_View (Typ)\n+        or else (In_Generic_Body (Scop)\n+                   and then Is_Generic_Type (Base_Type (Typ))\n+                   and then Is_Private_Type (Base_Type (Typ))\n+                   and then not Is_Tagged_Type (Typ)\n+                   and then not (Is_Array_Type (Typ)\n+                                   and then not Is_Constrained (Typ))\n+                   and then Has_Discriminants (Typ));\n+   end Effectively_Has_Constrained_Partial_View;\n+\n    --------------------------\n    -- Enclosing_CPP_Parent --\n    --------------------------\n@@ -6088,6 +6106,38 @@ package body Sem_Util is\n       return False;\n    end Implements_Interface;\n \n+   ---------------------\n+   -- In_Generic_Body --\n+   ---------------------\n+\n+   function In_Generic_Body (Id : Entity_Id) return Boolean is\n+      S : Entity_Id := Id;\n+\n+   begin\n+      while Present (S) and then S /= Standard_Standard loop\n+\n+         --  Generic package body\n+\n+         if Ekind (S) = E_Generic_Package\n+           and then In_Package_Body (S)\n+         then\n+            return True;\n+\n+         --  Generic subprogram body\n+\n+         elsif Is_Subprogram (S)\n+           and then Nkind (Unit_Declaration_Node (S))\n+                      = N_Generic_Subprogram_Declaration\n+         then\n+            return True;\n+         end if;\n+\n+         S := Scope (S);\n+      end loop;\n+\n+      return False;\n+   end In_Generic_Body;\n+\n    -----------------\n    -- In_Instance --\n    -----------------\n@@ -6945,7 +6995,7 @@ package body Sem_Util is\n                   --  designated object is known to be constrained.\n \n                   if Ekind (Prefix_Type) = E_Access_Type\n-                    and then not Has_Constrained_Partial_View\n+                    and then not Effectively_Has_Constrained_Partial_View\n                                    (Designated_Type (Prefix_Type))\n                   then\n                      return False;"}, {"sha": "b2b6cbfa7ee4071b5e21f98d8db1937629d0f71f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -368,6 +368,14 @@ package Sem_Util is\n    --  Same as Einfo.Extra_Accessibility except thtat object renames\n    --  are looked through.\n \n+   function Effectively_Has_Constrained_Partial_View\n+     (Typ  : Entity_Id;\n+      Scop : Entity_Id := Current_Scope) return Boolean;\n+   --  Return True if Typ has attribute Has_Constrained_Partial_View set to\n+   --  True; in addition, within a generic body, return True if a subtype is\n+   --  a descendant of an untagged generic formal private or derived type, and\n+   --  the subtype is not an unconstrained array subtype (RM 3.3(23.10/3)).\n+\n    function Enclosing_CPP_Parent (Typ : Entity_Id) return Entity_Id;\n    --  Returns the closest ancestor of Typ that is a CPP type.\n \n@@ -717,6 +725,9 @@ package Sem_Util is\n       Exclude_Parents : Boolean := False) return Boolean;\n    --  Returns true if the Typ_Ent implements interface Iface_Ent\n \n+   function In_Generic_Body (Id : Entity_Id) return Boolean;\n+   --  Determine whether entity Id appears inside a generic body\n+\n    function In_Instance return Boolean;\n    --  Returns True if the current scope is within a generic instance\n "}, {"sha": "12eca51a7b0def198731bbaa31147aececf1c0e5", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc96a1b85c11eb146d30867a0a826ac5c46f3f07/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=cc96a1b85c11eb146d30867a0a826ac5c46f3f07", "patch": "@@ -6388,18 +6388,18 @@ package VMS_Data is\n                                                  \"-ntM\";\n    --        /TYPE_CASING=name-option\n    --\n-   --   Specify the casing of type and subtype. If not specified, the\n-   --   casing of these names is defined by the NAME_CASING option.\n-   --   'name-option' may be one of:\n+   --   Specify the casing of subtype names (including first subtypes from\n+   --   type declarations). If not specified, the casing of these names is\n+   --   defined by the NAME_CASING option. 'name-option' is one of:\n    --\n-   --      AS_DECLARED       Name casing for defining occurrences are\n-   --                        as they appear in the source file.\n+   --      AS_DECLARED       Names are cased as they appear in the declaration\n+   --                        in the source file.\n    --\n-   --      LOWER_CASE        Namess are in lower case.\n+   --      LOWER_CASE        Names are in lower case.\n    --\n-   --      UPPER_CASE        Namess are in upper case.\n+   --      UPPER_CASE        Names are in upper case.\n    --\n-   --      MIXED_CASE        Namess are in mixed case.\n+   --      MIXED_CASE        Names are in mixed case.\n \n    S_Pretty_Verbose   : aliased constant S := \"/VERBOSE \"                  &\n                                               \"-v\";"}]}