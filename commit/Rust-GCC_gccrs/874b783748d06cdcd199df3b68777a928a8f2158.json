{"sha": "874b783748d06cdcd199df3b68777a928a8f2158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0Yjc4Mzc0OGQwNmNkY2QxOTlkZjNiNjg3NzdhOTI4YThmMjE1OA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-28T20:06:54Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-05T17:19:26Z"}, "message": "Add type bound name resolution\n\nResolve the type-bound to the trait.", "tree": {"sha": "cbc69e94c889c031bfedbbb39ffbadbf34af4c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc69e94c889c031bfedbbb39ffbadbf34af4c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/874b783748d06cdcd199df3b68777a928a8f2158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874b783748d06cdcd199df3b68777a928a8f2158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874b783748d06cdcd199df3b68777a928a8f2158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874b783748d06cdcd199df3b68777a928a8f2158/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443d4d1f7cf6aa1570670e728b0cb59aada0e10f"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "46ebdc42d9a5f59ddb8762f930dd1a8dcb8a8a80", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/874b783748d06cdcd199df3b68777a928a8f2158/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/874b783748d06cdcd199df3b68777a928a8f2158/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=874b783748d06cdcd199df3b68777a928a8f2158", "patch": "@@ -297,6 +297,42 @@ class ResolveType : public ResolverBase\n   bool ok;\n };\n \n+class ResolveTypeBound : public ResolverBase\n+{\n+  using Rust::Resolver::ResolverBase::visit;\n+\n+public:\n+  static NodeId go (AST::TypeParamBound *type, NodeId parent,\n+\t\t    bool canonicalize_type_with_generics = false)\n+  {\n+    ResolveTypeBound resolver (parent, canonicalize_type_with_generics);\n+    type->accept_vis (resolver);\n+    if (!resolver.ok)\n+      rust_error_at (type->get_locus_slow (), \"unresolved type bound\");\n+\n+    return resolver.resolved_node;\n+  };\n+\n+  void visit (AST::TraitBound &bound) override\n+  {\n+    resolved_node = ResolveType::go (&bound.get_type_path (), parent,\n+\t\t\t\t     canonicalize_type_with_generics);\n+    ok = resolved_node != UNKNOWN_NODEID;\n+  }\n+\n+  void visit (AST::Lifetime &bound) override { ok = true; }\n+\n+private:\n+  ResolveTypeBound (NodeId parent, bool canonicalize_type_with_generics)\n+    : ResolverBase (parent),\n+      canonicalize_type_with_generics (canonicalize_type_with_generics),\n+      ok (false)\n+  {}\n+\n+  bool canonicalize_type_with_generics;\n+  bool ok;\n+};\n+\n class ResolveGenericParam : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;\n@@ -326,6 +362,14 @@ class ResolveGenericParam : public ResolverBase\n     if (param.has_type ())\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n \n+    if (param.has_type_param_bounds ())\n+      {\n+\tfor (auto &bound : param.get_type_param_bounds ())\n+\t  {\n+\t    ResolveTypeBound::go (bound.get (), param.get_node_id ());\n+\t  }\n+      }\n+\n     // for now lets focus on handling the basics: like struct<T> { a:T, ....}\n     resolver->get_type_scope ().insert (\n       CanonicalPath::new_seg (param.get_node_id (),"}]}