{"sha": "7a3f38a966a52893fb5bae301a1a3d56961358fb", "node_id": "C_kwDOANBUbNoAKDdhM2YzOGE5NjZhNTI4OTNmYjViYWUzMDFhMWEzZDU2OTYxMzU4ZmI", "commit": {"author": {"name": "Giuliano Belinassi", "email": "gbelinassi@suse.de", "date": "2022-05-07T02:37:52Z"}, "committer": {"name": "Giuliano Belinassi", "email": "gbelinassi@suse.de", "date": "2022-05-17T17:34:21Z"}, "message": "PR105169 Fix references to discarded sections\n\nWhen -fpatchable-function-entry= is enabled, certain C++ codes fails to\nlink because of generated references to discarded sections in\n__patchable_function_entry section. This commit fixes this problem by\nputing those references in a COMDAT section.\n\n2022-05-06  Giuliano Belinassi  <gbelinassi@suse.de>\n\ngcc/ChangeLog\n\tPR c++/105169\n\t* targhooks.cc (default_print_patchable_function_entry_1): Handle COMDAT case.\n\t* varasm.cc (switch_to_comdat_section): New\n\t(handle_vtv_comdat_section): Call switch_to_comdat_section.\n\t* varasm.h: Declare switch_to_comdat_section.\n\ngcc/testsuite/ChangeLog\n2022-05-06  Giuliano Belinassi  <gbelinassi@suse.de>\n\n\tPR c++/105169\n\t* g++.dg/modules/pr105169.h: New file.\n\t* g++.dg/modules/pr105169_a.C: New test.\n\t* g++.dg/modules/pr105169_b.C: New file.", "tree": {"sha": "df14ac7daa89f5beeed9584761f482d3d5be9985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df14ac7daa89f5beeed9584761f482d3d5be9985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3f38a966a52893fb5bae301a1a3d56961358fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3f38a966a52893fb5bae301a1a3d56961358fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3f38a966a52893fb5bae301a1a3d56961358fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3f38a966a52893fb5bae301a1a3d56961358fb/comments", "author": null, "committer": null, "parents": [{"sha": "941efd87e22b1b88e3488b8e681d14d0d66e45ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941efd87e22b1b88e3488b8e681d14d0d66e45ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941efd87e22b1b88e3488b8e681d14d0d66e45ac"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "b15ae19bcb60c59ae8112e67b5f06a241a9bdbf1", "filename": "gcc/targhooks.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftarghooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftarghooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.cc?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -2009,8 +2009,12 @@ default_print_patchable_function_entry_1 (FILE *file,\n       patch_area_number++;\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\", patch_area_number);\n \n-      switch_to_section (get_section (\"__patchable_function_entries\",\n-\t\t\t\t      flags, current_function_decl));\n+      section *sect = get_section (\"__patchable_function_entries\",\n+\t\t\t\t  flags, current_function_decl);\n+      if (HAVE_COMDAT_GROUP && DECL_COMDAT_GROUP (current_function_decl))\n+\tswitch_to_comdat_section (sect, current_function_decl);\n+      else\n+\tswitch_to_section (sect);\n       assemble_align (POINTER_SIZE);\n       fputs (asm_op, file);\n       assemble_name_raw (file, buf);"}, {"sha": "a7e762705313873522d26b9d66d4c4fa6f3e9a35", "filename": "gcc/testsuite/g++.dg/modules/pr105169.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169.h?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -0,0 +1,22 @@\n+class IPXAddressClass\n+{\n+public:\n+    IPXAddressClass(void);\n+};\n+\n+class WinsockInterfaceClass\n+{\n+\n+public:\n+    WinsockInterfaceClass(void);\n+\n+    virtual void Set_Broadcast_Address(void*){};\n+\n+    virtual int Get_Protocol(void)\n+    {\n+        return 0;\n+    };\n+\n+protected:\n+};\n+"}, {"sha": "66dc4b7901f07700e34d36944cff8ea4bbf76bee", "filename": "gcc/testsuite/g++.dg/modules/pr105169_a.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_a.C?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-module-do link } */\n+/* { dg-options \"-std=c++11 -fpatchable-function-entry=1 -O2\" } */\n+/* { dg-additional-options \"-std=c++11 -fpatchable-function-entry=1 -O2\" } */\n+\n+/* This test is in the \"modules\" package because it supports multiple files\n+   linkage.  */\n+\n+#include \"pr105169.h\"\n+\n+WinsockInterfaceClass* PacketTransport;\n+\n+IPXAddressClass::IPXAddressClass(void)\n+{\n+}\n+\n+int function()\n+{\n+  return PacketTransport->Get_Protocol();\n+}\n+\n+int main()\n+{\n+  IPXAddressClass ipxaddr;\n+  return 0;\n+}"}, {"sha": "5f8b00dfe5169fb4269d39f3c827d1c929635b19", "filename": "gcc/testsuite/g++.dg/modules/pr105169_b.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr105169_b.C?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-module-do link } */\n+/* { dg-options \"-std=c++11 -fpatchable-function-entry=1 -O2\" } */\n+/* { dg-additional-options \"-std=c++11 -fpatchable-function-entry=1 -O2\" } */\n+\n+/* This test is in the \"modules\" package because it supports multiple files\n+   linkage.  */\n+\n+#include \"pr105169.h\"\n+\n+WinsockInterfaceClass::WinsockInterfaceClass(void)\n+{\n+}"}, {"sha": "6454f1ce519140af478246e793314cc3e4c1eb36", "filename": "gcc/varasm.cc", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -8457,25 +8457,21 @@ default_asm_output_ident_directive (const char *ident_str)\n     fprintf (asm_out_file, \"%s\\\"%s\\\"\\n\", ident_asm_op, ident_str);\n }\n \n-\n-/* This function ensures that vtable_map variables are not only\n-   in the comdat section, but that each variable has its own unique\n-   comdat name.  Without this the variables end up in the same section\n-   with a single comdat name.\n-\n+/* Switch to a COMDAT section with COMDAT name of decl.\n+   \n    FIXME:  resolve_unique_section needs to deal better with\n    decls with both DECL_SECTION_NAME and DECL_ONE_ONLY.  Once\n    that is fixed, this if-else statement can be replaced with\n    a single call to \"switch_to_section (sect)\".  */\n \n-static void\n-handle_vtv_comdat_section (section *sect, const_tree decl ATTRIBUTE_UNUSED)\n+void\n+switch_to_comdat_section (section *sect, tree decl)\n {\n #if defined (OBJECT_FORMAT_ELF)\n   targetm.asm_out.named_section (sect->named.name,\n \t\t\t\t sect->named.common.flags\n \t\t\t\t | SECTION_LINKONCE,\n-\t\t\t\t DECL_NAME (decl));\n+\t\t\t\t decl);\n   in_section = sect;\n #else\n   /* Neither OBJECT_FORMAT_PE, nor OBJECT_FORMAT_COFF is set here.\n@@ -8490,23 +8486,34 @@ handle_vtv_comdat_section (section *sect, const_tree decl ATTRIBUTE_UNUSED)\n     {\n       char *name;\n \n-      if (TREE_CODE (DECL_NAME (decl)) == IDENTIFIER_NODE)\n+      if (TREE_CODE (decl) == IDENTIFIER_NODE)\n \tname = ACONCAT ((sect->named.name, \"$\",\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (decl)), NULL));\n+\t\t\t IDENTIFIER_POINTER (decl), NULL));\n       else\n \tname = ACONCAT ((sect->named.name, \"$\",\n-\t\t\t IDENTIFIER_POINTER (DECL_COMDAT_GROUP (DECL_NAME (decl))),\n+\t\t\t IDENTIFIER_POINTER (DECL_COMDAT_GROUP (decl)),\n \t\t\t NULL));\n \n       targetm.asm_out.named_section (name,\n \t\t\t\t     sect->named.common.flags\n \t\t\t\t     | SECTION_LINKONCE,\n-\t\t\t\t     DECL_NAME (decl));\n+\t\t\t\t     decl);\n       in_section = sect;\n     }\n   else\n     switch_to_section (sect);\n #endif\n }\n \n+/* This function ensures that vtable_map variables are not only\n+   in the comdat section, but that each variable has its own unique\n+   comdat name.  Without this the variables end up in the same section\n+   with a single comdat name.  */\n+\n+static void\n+handle_vtv_comdat_section (section *sect, const_tree decl ATTRIBUTE_UNUSED)\n+{\n+  switch_to_comdat_section(sect, DECL_NAME (decl));\n+}\n+\n #include \"gt-varasm.h\""}, {"sha": "8ba8374e779fe2cc035647eaddc51d1dea4224f3", "filename": "gcc/varasm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Fvarasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3f38a966a52893fb5bae301a1a3d56961358fb/gcc%2Fvarasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.h?ref=7a3f38a966a52893fb5bae301a1a3d56961358fb", "patch": "@@ -79,4 +79,6 @@ extern rtx assemble_static_space (unsigned HOST_WIDE_INT);\n \n extern rtx assemble_trampoline_template (void);\n \n+extern void switch_to_comdat_section (section *, tree);\n+\n #endif  // GCC_VARASM_H"}]}