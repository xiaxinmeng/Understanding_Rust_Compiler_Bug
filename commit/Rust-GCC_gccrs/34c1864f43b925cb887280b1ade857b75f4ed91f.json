{"sha": "34c1864f43b925cb887280b1ade857b75f4ed91f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjMTg2NGY0M2I5MjVjYjg4NzI4MGIxYWRlODU3Yjc1ZjRlZDkxZg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-09-03T19:47:10Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-09-03T19:47:10Z"}, "message": "config.gcc (ia64*-*-hpux*): Add ia64-c.o to c_target and cxx_target.\n\n\t* config.gcc (ia64*-*-hpux*): Add ia64-c.o to c_target and\n\tcxx_target.\n\t* config/ia64/hpux.h (REGISTER_TARGET_PRAGMAS): Register pragma\n\thandling routine for builtin pragma.\n\t* config/ia64/ia64-protos.h (ia64_hpux_handle_builtin_pragma):\n\tRegistered pragma handling routine.\n\t* ia64-c.c (ia64_hpux_handle_builtin_pragma): Ditto.\n\t(ia64_hpux_add_pragma_builtin) New subroutine used by above.\n\tIf builtin pragma seen for math routine and C89 conformance is\n\trequested use different math function in order to set errno.\n\t* t-ia64 (ia64-c.o): Add new rule for new file.\n\nFrom-SVN: r56767", "tree": {"sha": "2e7e665af5f41169eb8a56ede13109271e180749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7e665af5f41169eb8a56ede13109271e180749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34c1864f43b925cb887280b1ade857b75f4ed91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c1864f43b925cb887280b1ade857b75f4ed91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c1864f43b925cb887280b1ade857b75f4ed91f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c1864f43b925cb887280b1ade857b75f4ed91f/comments", "author": null, "committer": null, "parents": [{"sha": "9b7c75b99342a2d854340417b14228e5e9ded3b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7c75b99342a2d854340417b14228e5e9ded3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7c75b99342a2d854340417b14228e5e9ded3b0"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "c393be4dc3cbf49b933ff938daaa00cfc20935f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -1,3 +1,17 @@\n+2002-09-03  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config.gcc (ia64*-*-hpux*): Add ia64-c.o to c_target and\n+\tcxx_target.\n+\t* config/ia64/hpux.h (REGISTER_TARGET_PRAGMAS): Register pragma\n+\thandling routine for builtin pragma.\n+\t* config/ia64/ia64-protos.h (ia64_hpux_handle_builtin_pragma):\n+\tRegistered pragma handling routine.\n+\t* ia64-c.c (ia64_hpux_handle_builtin_pragma): Ditto.\n+\t(ia64_hpux_add_pragma_builtin) New subroutine used by above.\n+\tIf builtin pragma seen for math routine and C89 conformance is\n+\trequested use different math function in order to set errno.\n+\t* t-ia64 (ia64-c.o): Add new rule for new file.\n+\n 2002-09-03  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (\"movti\"): Add Q->Q alternative."}, {"sha": "87eaa6225eb52b8efef88933a1a300baf57ccd65", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -1429,6 +1429,8 @@ ia64*-*-hpux*)\n \tfi\n \tuse_collect2=no\n \tfloat_format=i128\n+\tc_target_objs=\"ia64-c.o\"\n+\tcxx_target_objs=\"ia64-c.o\"\n \t;;\n ip2k-*-elf)\n \t;;"}, {"sha": "1d4aaea07e43cb0466c950c55c7f9c40879c4ce4", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -121,3 +121,6 @@ Boston, MA 02111-1307, USA.  */\n \n #undef PAD_VARARGS_DOWN\n #define PAD_VARARGS_DOWN (!AGGREGATE_TYPE_P (type))\n+\n+#define REGISTER_TARGET_PRAGMAS(PFILE) \\\n+  cpp_register_pragma (PFILE, 0, \"builtin\", ia64_hpux_handle_builtin_pragma)"}, {"sha": "c19a5860532600b4e82f70f08f927ea0520790fb", "filename": "gcc/config/ia64/ia64-c.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fia64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fia64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.c?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -0,0 +1,190 @@\n+/* Definitions of C specific functions for GNU compiler.\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Steve Ellcey <sje@cup.hp.com>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"cpplib.h\"\n+#include \"c-common.h\"\n+#include \"c-pragma.h\"\n+#include \"toplev.h\"\n+\n+static void ia64_hpux_add_pragma_builtin PARAMS ((tree func));\n+\n+void\n+ia64_hpux_handle_builtin_pragma (pfile)\n+\tcpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+  /* #pragma builtin name, name, name */\n+\n+  enum cpp_ttype type;\n+  tree x;\n+\n+  type = c_lex (&x);\n+  while (type == CPP_NAME)\n+    {\n+      ia64_hpux_add_pragma_builtin (x);\n+      type = c_lex (&x);\n+      if (type == CPP_COMMA)\n+\ttype = c_lex (&x);\n+    }\n+  if (type != CPP_EOF)\n+    warning (\"malformed #pragma builtin\");\n+}\n+\n+/* List of standard math functions which do not set matherr by default\n+   and which have a different version which does set errno and which we\n+   want to call *if* we have seen an extern for the routine and we have\n+   asked for strict C89 compatibility.  */\n+\n+typedef struct c89_mathlib_names\n+{\n+        const char *realname; /* User visible function name.  */\n+        const char *c89name;  /* libm special name needed to set errno. */\n+} c89_mathlib_names;\n+\n+static const c89_mathlib_names c89_mathlib_name_list [] =\n+{\n+\t{\"acos\", \"_Acos_e#\"},\n+\t{\"acosd\", \"_Acosd_e#\"},\n+\t{\"acosdf\", \"_Acosdf_e#\"},\n+\t{\"acosdl\", \"_Acosdl_e#\"},\n+\t{\"acosdw\", \"_Acosdw_e#\"},\n+\t{\"acosf\", \"_Acosf_e#\"},\n+\t{\"acosh\", \"_Acosh_e#\"},\n+\t{\"acoshf\", \"_Acoshf_e#\"},\n+\t{\"acoshl\", \"_Acoshl_e#\"},\n+\t{\"acoshw\", \"_Acoshw_e#\"},\n+\t{\"acosl\", \"_Acosl_e#\"},\n+\t{\"acosw\", \"_Acosw_e#\"},\n+\t{\"asin\", \"_Asin_e#\"},\n+\t{\"asind\", \"_Asind_e#\"},\n+\t{\"asindf\", \"_Asindf_e#\"},\n+\t{\"asindl\", \"_Asindl_e#\"},\n+\t{\"asindw\", \"_Asindw_e#\"},\n+\t{\"asinf\", \"_Asinf_e#\"},\n+\t{\"asinl\", \"_Asinl_e#\"},\n+\t{\"asinw\", \"_Asinw_e#\"},\n+\t{\"atanh\", \"_Atanh_e#\"},\n+\t{\"atanhf\", \"_Atanhf_e#\"},\n+\t{\"atanhl\", \"_Atanhl_e#\"},\n+\t{\"atanhw\", \"_Atanhw_e#\"},\n+\t{\"cosh\", \"_Cosh_e#\"},\n+\t{\"coshf\", \"_Coshf_e#\"},\n+\t{\"coshl\", \"_Coshl_e#\"},\n+\t{\"coshw\", \"_Coshw_e#\"},\n+\t{\"exp2\", \"_Exp2_e#\"},\n+\t{\"exp2f\", \"_Exp2f_e#\"},\n+\t{\"exp2l\", \"_Exp2l_e#\"},\n+\t{\"exp2w\", \"_Exp2w_e#\"},\n+\t{\"exp\", \"_Exp_e#\"},\n+\t{\"expf\", \"_Expf_e#\"},\n+\t{\"expl\", \"_Expl_e#\"},\n+\t{\"expm1\", \"_Expm1_e#\"},\n+\t{\"expm1f\", \"_Expm1f_e#\"},\n+\t{\"expm1l\", \"_Expm1l_e#\"},\n+\t{\"expm1w\", \"_Expm1w_e#\"},\n+\t{\"expw\", \"_Expw_e#\"},\n+\t{\"fmod\", \"_Fmod_e#\"},\n+\t{\"fmodf\", \"_Fmodf_e#\"},\n+\t{\"fmodl\", \"_Fmodl_e#\"},\n+\t{\"fmodw\", \"_Fmodw_e#\"},\n+\t{\"gamma\", \"_Gamma_e#\"},\n+\t{\"gammaf\", \"_Gammaf_e#\"},\n+\t{\"gammal\", \"_Gammal_e#\"},\n+\t{\"gammaw\", \"_Gammaw_e#\"},\n+\t{\"ldexp\", \"_Ldexp_e#\"},\n+\t{\"ldexpf\", \"_Ldexpf_e#\"},\n+\t{\"ldexpl\", \"_Ldexpl_e#\"},\n+\t{\"ldexpw\", \"_Ldexpw_e#\"},\n+\t{\"lgamma\", \"_Lgamma_e#\"},\n+\t{\"lgammaf\", \"_Lgammaf_e#\"},\n+\t{\"lgammal\", \"_Lgammal_e#\"},\n+\t{\"lgammaw\", \"_Lgammaw_e#\"},\n+\t{\"log10\", \"_Log10_e#\"},\n+\t{\"log10f\", \"_Log10f_e#\"},\n+\t{\"log10l\", \"_Log10l_e#\"},\n+\t{\"log10w\", \"_Log10w_e#\"},\n+\t{\"log1p\", \"_Log1p_e#\"},\n+\t{\"log1pf\", \"_Log1pf_e#\"},\n+\t{\"log1pl\", \"_Log1pl_e#\"},\n+\t{\"log1pw\", \"_Log1pw_e#\"},\n+\t{\"log2\", \"_Log2_e#\"},\n+\t{\"log2f\", \"_Log2f_e#\"},\n+\t{\"log2l\", \"_Log2l_e#\"},\n+\t{\"log2w\", \"_Log2w_e#\"},\n+\t{\"log\", \"_Log_e#\"},\n+\t{\"logb\", \"_Logb_e#\"},\n+\t{\"logbf\", \"_Logbf_e#\"},\n+\t{\"logbl\", \"_Logbl_e#\"},\n+\t{\"logbw\", \"_Logbw_e#\"},\n+\t{\"logf\", \"_Logf_e#\"},\n+\t{\"logl\", \"_Logl_e#\"},\n+\t{\"logw\", \"_Logw_e#\"},\n+\t{\"nextafter\", \"_Nextafter_e#\"},\n+\t{\"nextafterf\", \"_Nextafterf_e#\"},\n+\t{\"nextafterl\", \"_Nextafterl_e#\"},\n+\t{\"nextafterw\", \"_Nextafterw_e#\"},\n+\t{\"pow\", \"_Pow_e#\"},\n+\t{\"powf\", \"_Powf_e#\"},\n+\t{\"powl\", \"_Powl_e#\"},\n+\t{\"poww\", \"_Poww_e#\"},\n+\t{\"remainder\", \"_Remainder_e#\"},\n+\t{\"remainderf\", \"_Remainderf_e#\"},\n+\t{\"remainderl\", \"_Remainderl_e#\"},\n+\t{\"remainderw\", \"_Remainderw_e#\"},\n+\t{\"scalb\", \"_Scalb_e#\"},\n+\t{\"scalbf\", \"_Scalbf_e#\"},\n+\t{\"scalbl\", \"_Scalbl_e#\"},\n+\t{\"scalbw\", \"_Scalbw_e#\"},\n+\t{\"sinh\", \"_Sinh_e#\"},\n+\t{\"sinhf\", \"_Sinhf_e#\"},\n+\t{\"sinhl\", \"_Sinhl_e#\"},\n+\t{\"sinhw\", \"_Sinhw_e#\"},\n+\t{\"sqrt\", \"_Sqrt_e#\"},\n+\t{\"sqrtf\", \"_Sqrtf_e#\"},\n+\t{\"sqrtl\", \"_Sqrtl_e#\"},\n+\t{\"sqrtw\", \"_Sqrtw_e#\"},\n+\t{\"tgamma\", \"_Tgamma_e#\"},\n+\t{\"tgammaf\", \"_Tgammaf_e#\"},\n+\t{\"tgammal\", \"_Tgammal_e#\"},\n+\t{\"tgammaw\", \"_Tgammaw_e#\"}\n+};\n+\n+static void\n+ia64_hpux_add_pragma_builtin (func)\n+\ttree func;\n+{\n+  size_t i;\n+\n+  if (!flag_isoc94 && flag_iso)\n+    {\n+\tfor (i = 0; i < ARRAY_SIZE (c89_mathlib_name_list); i++)\n+\t  {\n+\t    if (!strcmp(c89_mathlib_name_list[i].realname,\n+\t\t\tIDENTIFIER_POINTER (func)))\n+\t      {\n+\t\tadd_to_renaming_pragma_list(func,\n+\t\t\tget_identifier(c89_mathlib_name_list[i].c89name));\n+\t      }\n+\t  }\n+    }\n+}"}, {"sha": "f4d264cef6fad72660ef4bc18f42c8b8dd8c9fba", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -144,3 +144,7 @@ extern void sbss_section PARAMS ((void));\n /* expr.h defines ARGS_SIZE_RTX and `enum direction'.  */\n extern enum direction ia64_hpux_function_arg_padding PARAMS ((enum machine_mode, tree));\n #endif /* ARGS_SIZE_RTX */\n+\n+#ifdef GCC_C_PRAGMA_H\n+extern void ia64_hpux_handle_builtin_pragma PARAMS ((cpp_reader *));\n+#endif"}, {"sha": "1987bd0f131712149101430a349cf31577213f56", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c1864f43b925cb887280b1ade857b75f4ed91f/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=34c1864f43b925cb887280b1ade857b75f4ed91f", "patch": "@@ -40,3 +40,7 @@ crtfastmath.o: $(srcdir)/config/ia64/crtfastmath.c $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -c -o crtfastmath.o $(srcdir)/config/ia64/crtfastmath.c\n \n LIB2ADDEH = $(srcdir)/config/ia64/unwind-ia64.c $(srcdir)/unwind-sjlj.c\n+\n+ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n+    $(TREE_H) $(CPPLIB_H) $(C_COMMON_H) c-pragma.h toplev.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}