{"sha": "1583720a6d2c09225ae999114808fa145ff8863b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4MzcyMGE2ZDJjMDkyMjVhZTk5OTExNDgwOGZhMTQ1ZmY4ODYzYg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-01-16T22:07:23Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-01-16T22:07:23Z"}, "message": "Initial revision\n\nFrom-SVN: r13501", "tree": {"sha": "ac8cfbef95370209461397e1d9b03ff85d6987bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8cfbef95370209461397e1d9b03ff85d6987bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1583720a6d2c09225ae999114808fa145ff8863b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1583720a6d2c09225ae999114808fa145ff8863b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1583720a6d2c09225ae999114808fa145ff8863b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1583720a6d2c09225ae999114808fa145ff8863b/comments", "author": null, "committer": null, "parents": [{"sha": "4f5ab7e303962ff740bc073152225dd2fe1d0e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5ab7e303962ff740bc073152225dd2fe1d0e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5ab7e303962ff740bc073152225dd2fe1d0e69"}], "stats": {"total": 351, "additions": 351, "deletions": 0}, "files": [{"sha": "f48d7f3e01786e15774586190946dbe92f87b363", "filename": "gcc/config/sparc/linux-aout.h", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=1583720a6d2c09225ae999114808fa145ff8863b", "patch": "@@ -0,0 +1,116 @@\n+/* Definitions for SPARC running Linux with a.out\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Contributed by Eddie C. Dost (ecd@skynet.be)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <aoutos.h>\n+#include <sparc/sparc.h>\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef HAVE_ATEXIT\n+#define HAVE_ATEXIT\n+\n+/* Linux uses ctype from glibc.a. I am not sure how complete it is.\n+   For now, we play safe. It may change later. */\n+\n+#if 0\n+#undef MULTIBYTE_CHARS\n+#define MULTIBYTE_CHARS 1\n+#endif\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+/* We need that too. */\n+#define HANDLE_SYSV_PRAGMA\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)                                            \\\n+  do {                                                                  \\\n+        output_file_directive (FILE, main_input_filename);              \\\n+        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n+  } while (0)\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC  \"%{pg:gcrt0.o%s} %{!pg:%{p:gcrt0.o%s} %{!p:crt0.o%s}} %{static:-static}\"\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc Linux/a.out)\");\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} %{msupersparc:-D__supersparc__ -D__sparc_v8__} %{posix:-D_POSIX_SOURCE}\"\n+\n+/* Don't default to pcc-struct-return, because gcc is the only compiler,\n+   and we want to retain compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+#undef LIB_SPEC\n+\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default. If you\n+ * want to profile or debug the Linux C library, please add\n+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.\n+ */\n+#define LIB_SPEC \\\n+\"%{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} %{!ggdb:-lc} %{ggdb:-lg}\"\n+#else    \n+#define LIB_SPEC \\\n+\"%{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \\\n+ %{!p:%{!pg:%{!g*:-lc} %{g*:-lg -static}}}\" \n+#endif\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC\t\"-m sparclinux\"\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used. */\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{V} %{v:%{!V:-V}} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\"\n+\n+#if 0\n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   Sparc ABI says that long double is 4 words. Linux does not support\n+   long double yet.  */\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+#endif"}, {"sha": "0a3420de4872939565d23c4a88c8b6ab36f4c78a", "filename": "gcc/config/sparc/linux.h", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=1583720a6d2c09225ae999114808fa145ff8863b", "patch": "@@ -0,0 +1,212 @@\n+/* Definitions for SPARC running Linux with ELF\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Contributed by Eddie C. Dost (ecd@skynet.be)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define LINUX_DEFAULT_ELF\n+\n+/* Don't assume anything about the header files. */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+#undef HAVE_ATEXIT\n+#define HAVE_ATEXIT\n+\n+/* Linux uses ctype from glibc.a. I am not sure how complete it is.\n+   For now, we play safe. It may change later. */\n+\n+#if 0\n+#undef MULTIBYTE_CHARS\n+#define MULTIBYTE_CHARS 1\n+#endif\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  wilson@cygnus.com says # is right.  */\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+/* Use stabs instead of DWARF debug format.  */\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+#include <sparc/sysv4.h>\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE)                                            \\\n+  do {                                                                  \\\n+        output_file_directive (FILE, main_input_filename);              \\\n+        fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\");                      \\\n+  } while (0)\n+\n+#undef  LIBGCC_SPEC\n+#define LIBGCC_SPEC \\\n+  \"%{!shared:-lgcc}\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for Linux.  Here we add\n+   the Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'. */\n+   \n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for Linux.  Here we tack on\n+   the Linux magical crtend.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main', followed by a normal\n+   Linux \"finalizer\" file, `crtn.o'.  */\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc Linux/ELF)\");\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+ \n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+  \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+   \n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD\n+    \n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__ELF__ -Dunix -Dsparc -Dlinux -Asystem(unix) -Asystem(posix) -Acpu(sparc) -Amachine(sparc)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} %{msupersparc:-D__supersparc__ -D__sparc_v8__} %{posix:-D_POSIX_SOURCE}\"\n+\n+#undef LIB_SPEC\n+#if 1\n+/* We no longer link with libc_p.a or libg.a by default. If you\n+ * want to profile or debug the Linux C library, please add\n+ * -lc_p or -ggdb to LDFLAGS at the link time, respectively.\n+ */\n+#define LIB_SPEC \\\n+  \"%{!shared: %{mieee-fp:-lieee} %{p:-lgmon} %{pg:-lgmon} \\\n+     %{!ggdb:-lc} %{ggdb:-lg}}\"\n+#else\n+#define LIB_SPEC \\\n+  \"%{!shared: \\\n+     %{mieee-fp:-lieee} %{p:-lgmon -lc_p} %{pg:-lgmon -lc_p} \\\n+       %{!p:%{!pg:%{!g*:-lc} %{g*:-lg}}}}\"\n+#endif\n+\n+/* Provide a LINK_SPEC appropriate for Linux.  Here we provide support\n+   for the special GCC options -static and -shared, which allow us to\n+   link things in one of these three modes by applying the appropriate\n+   combinations of options at link-time. We like to support here for\n+   as many of the other GNU linker options as possible. But I don't\n+   have the time to search for those flags. I am sure how to add\n+   support for -soname shared_object_name. H.J.\n+\n+   I took out %{v:%{!V:-V}}. It is too much :-(. They can use\n+   -Wl,-V.\n+\n+   When the -shared link option is used a final link is not being\n+   done.  */\n+\n+/* If ELF is the default format, we should not use /lib/elf. */\n+\n+#undef  LINK_SPEC\n+#ifndef LINUX_DEFAULT_ELF\n+#define LINK_SPEC \"-m elf32_sparc -Y P,/usr/lib %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+        %{rdynamic:-export-dynamic} \\\n+        %{!dynamic-linker:-dynamic-linker /lib/elf/ld-linux.so.1} \\\n+        %{!rpath:-rpath /lib/elf/}} %{static:-static}}}\"\n+#else\n+#define LINK_SPEC \"-m elf32_sparc -Y P,/usr/lib %{shared:-shared} \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+        %{rdynamic:-export-dynamic} \\\n+        %{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.1}} \\\n+        %{static:-static}}}\"\n+#endif\n+\n+/* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n+   It's safe to pass -s always, even if -g is not used. */\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\"\n+\n+/* Same as sparc.h */\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+\n+/* We use stabs-in-elf for debugging, because that is what the native\n+   toolchain uses.  XXX */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#undef ASM_OUTPUT_ALIGNED_LOCAL\n+#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  fputs (\"\\t.local\\t\", (FILE));\t\t\\\n+  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+  putc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n+} while (0)\n+\n+#undef COMMON_ASM_OP\n+#define COMMON_ASM_OP \"\\t.common\"\n+\n+/* This is how to output a definition of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to output a reference to an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#undef  ASM_OUTPUT_INTERNAL_LABELREF\n+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".L%s%d\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#undef  ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \"*.L%s%d\", PREFIX, NUM)\n+\n+\f\n+#if 0\n+/* Define for support of TFmode long double and REAL_ARITHMETIC.\n+   Sparc ABI says that long double is 4 words. Linux does not support\n+   long double yet.  */\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+#endif"}, {"sha": "c960af9bbb067599c531108e00e6a930f94df9a6", "filename": "gcc/config/sparc/xm-linux.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1583720a6d2c09225ae999114808fa145ff8863b/gcc%2Fconfig%2Fsparc%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-linux.h?ref=1583720a6d2c09225ae999114808fa145ff8863b", "patch": "@@ -0,0 +1,23 @@\n+/* Configuration for GCC for Intel i386 running Linux.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Contributed by Eddie C. Dost (ecd@skynet.be)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include <sparc/xm-sparc.h>\n+#include <xm-linux.h>"}]}