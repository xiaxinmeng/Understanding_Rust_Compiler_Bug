{"sha": "0550e306d4b5aaf7bdb6e908d265dbaa63344271", "node_id": "C_kwDOANBUbNoAKDA1NTBlMzA2ZDRiNWFhZjdiZGI2ZTkwOGQyNjVkYmFhNjMzNDQyNzE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-31T12:41:29Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-01T11:19:08Z"}, "message": "Implement ranger folder for __builtin_signbit.\n\nNow that we keep track of the signbit, we can use it to fold __builtin_signbit.\n\nI am assuming I don't have try too hard to get the actual signbit\nnumber and 1 will do.  Especially, since we're inconsistent in trunk whether\nwe fold the builtin or whether we calculate it at runtime.\n\nabulafia:~$ cat a.c\nfloat nzero = -0.0;\n\nmain(){\n    printf(\"0x%x\\n\", __builtin_signbit(-0.0));\n    printf(\"0x%x\\n\", __builtin_signbit(nzero));\n}\nabulafia:~$ gcc a.c -w && ./a.out\n0x1\n0x80000000\n\nIt is amazing that we've been failing to fold something as simple as\nthis:\n\n\tif (x > 5.0)\n\t  num = __builtin_signbit (x);\n\nIt does the right thing now :-P.\n\ngcc/ChangeLog:\n\n\t* gimple-range-fold.cc\n\t(fold_using_range::range_of_builtin_int_call): Add case for\n\tCFN_BUILT_IN_SIGNBIT.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/vrp-float-signbit-1.c: New test.", "tree": {"sha": "e61be0d9aa862d268cae28a2f69c4bcf8f89aed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e61be0d9aa862d268cae28a2f69c4bcf8f89aed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0550e306d4b5aaf7bdb6e908d265dbaa63344271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550e306d4b5aaf7bdb6e908d265dbaa63344271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0550e306d4b5aaf7bdb6e908d265dbaa63344271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550e306d4b5aaf7bdb6e908d265dbaa63344271/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b0dd2afe7a9e8a3033340dfa26ec606930eef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b0dd2afe7a9e8a3033340dfa26ec606930eef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b0dd2afe7a9e8a3033340dfa26ec606930eef5"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "d8497fc9be709d9cdf7e27c9e53d0732e68fd29e", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550e306d4b5aaf7bdb6e908d265dbaa63344271/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550e306d4b5aaf7bdb6e908d265dbaa63344271/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=0550e306d4b5aaf7bdb6e908d265dbaa63344271", "patch": "@@ -1023,6 +1023,26 @@ fold_using_range::range_of_builtin_int_call (irange &r, gcall *call,\n \tbreak;\n       }\n \n+    case CFN_BUILT_IN_SIGNBIT:\n+      {\n+\targ = gimple_call_arg (call, 0);\n+\tfrange tmp;\n+\tif (src.get_operand (tmp, arg))\n+\t  {\n+\t    if (tmp.get_signbit ().varying_p ())\n+\t      return false;\n+\t    if (tmp.get_signbit ().yes_p ())\n+\t      {\n+\t\ttree one = build_one_cst (type);\n+\t\tr.set (one, one);\n+\t      }\n+\t    else\n+\t      r.set_zero (type);\n+\t    return true;\n+\t  }\n+\tbreak;\n+      }\n+\n     case CFN_BUILT_IN_TOUPPER:\n       {\n \targ = gimple_call_arg (call, 0);"}, {"sha": "3fa783ec460312fbef0eee157496449873cc3753", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp-float-signbit-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0550e306d4b5aaf7bdb6e908d265dbaa63344271/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0550e306d4b5aaf7bdb6e908d265dbaa63344271/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp-float-signbit-1.c?ref=0550e306d4b5aaf7bdb6e908d265dbaa63344271", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fdump-tree-evrp\" }\n+\n+int num;\n+\n+void func(float x)\n+{\n+  if (x > 5.0)\n+    num = __builtin_signbit (x);\n+}\n+\n+// { dg-final { scan-tree-dump-times \"num = 0;\" 1 \"evrp\" } }"}]}