{"sha": "a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4ZDQ3NjlkNWQ1NDQ5ZTNlZDNhNTI0MTQzYjM3ZTZjOGEwNDVlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2006-10-09T16:27:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-10-09T16:27:14Z"}, "message": "Revert emutls patch.\n\nFrom-SVN: r117578", "tree": {"sha": "3b365f54da686b951378eabd14acdaf98bd0eb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b365f54da686b951378eabd14acdaf98bd0eb15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/comments", "author": null, "committer": null, "parents": [{"sha": "5771bd91eccb16e766ed13f533bdb4695c705da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5771bd91eccb16e766ed13f533bdb4695c705da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5771bd91eccb16e766ed13f533bdb4695c705da7"}], "stats": {"total": 694, "additions": 97, "deletions": 597}, "files": [{"sha": "d54a35880b2524d51efd718ac863443a532039bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,3 +1,7 @@\n+2006-10-09  Richard Henderson  <rth@redhat.com>\n+\n+\tRevert emutls patch.\n+\n 2006-10-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/29254"}, {"sha": "082d0f726a32df98a193e06b35dd21cc977d1660", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1422,9 +1422,9 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \tLIBGCOV='$(LIBGCOV)' \\\n \tLIB2ADD='$(LIB2ADD)' \\\n \tLIB2ADD_ST='$(LIB2ADD_ST)' \\\n-\tLIB2ADDEH='$(LIB2ADDEH) $(srcdir)/emutls.c' \\\n-\tLIB2ADDEHSTATIC='$(LIB2ADDEHSTATIC) $(srcdir)/emutls.c' \\\n-\tLIB2ADDEHSHARED='$(LIB2ADDEHSHARED) $(srcdir)/emutls.c' \\\n+\tLIB2ADDEH='$(LIB2ADDEH)' \\\n+\tLIB2ADDEHSTATIC='$(LIB2ADDEHSTATIC)' \\\n+\tLIB2ADDEHSHARED='$(LIB2ADDEHSHARED)' \\\n \tLIB2ADDEHDEP='$(LIB2ADDEHDEP)' \\\n \tLIB2_SIDITI_CONV_FUNCS='$(LIB2_SIDITI_CONV_FUNCS)' \\\n \tLIBUNWIND='$(LIBUNWIND)' \\\n@@ -1469,8 +1469,8 @@ LIBGCC_DEPS = $(GCC_PASSES) stmp-int-hdrs $(STMP_FIXPROTO) \\\n \t$(MACHMODE_H) longlong.h gbl-ctors.h config.status $(srcdir)/libgcc2.h \\\n \ttsystem.h $(FPBIT) $(DPBIT) $(TPBIT) $(LIB2ADD) \\\n \tconfig/dfp-bit.h config/dfp-bit.c \\\n-\t$(LIB2ADD_ST) $(LIB2ADDEH) $(srcdir)/emutls.c $(LIB2ADDEHDEP) \\\n-\t$(EXTRA_PARTS) $(srcdir)/config/$(LIB1ASMSRC) \\\n+\t$(LIB2ADD_ST) $(LIB2ADDEH) $(LIB2ADDEHDEP) $(EXTRA_PARTS) \\\n+\t$(srcdir)/config/$(LIB1ASMSRC) \\\n \t$(srcdir)/gcov-io.h $(srcdir)/gcov-io.c gcov-iov.h $(SFP_MACHINE)\n \n libgcov.a: libgcc.a; @true"}, {"sha": "d6330b156525f9beea6a6cc2002487102d92ce89", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -75,7 +75,7 @@ DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_ULONGLONG, long_long_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n-DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 1))\n+DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE, long_double_type_node)\n@@ -376,8 +376,6 @@ DEF_FUNCTION_TYPE_4 (BT_FN_INT_FILEPTR_INT_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_FILEPTR, BT_INT, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_4 (BT_FN_VOID_OMPFN_PTR_UINT_UINT,\n \t\t     BT_VOID, BT_PTR_FN_VOID_PTR, BT_PTR, BT_UINT, BT_UINT)\n-DEF_FUNCTION_TYPE_4 (BT_FN_VOID_PTR_WORD_WORD_PTR,\n-\t\t     BT_VOID, BT_PTR, BT_WORD, BT_WORD, BT_PTR)\n \n DEF_FUNCTION_TYPE_5 (BT_FN_INT_STRING_INT_SIZE_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_STRING, BT_INT, BT_SIZE, BT_CONST_STRING,"}, {"sha": "0e73cf440a40fb17e8e0f063c13d8624cf3b5022", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,6 +1,6 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -723,10 +723,6 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_VPRINTF_CHK, \"__vprintf_chk\", BT_FN_INT_INT_CON\n DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_ENTER, \"profile_func_enter\")\n DEF_BUILTIN_STUB (BUILT_IN_PROFILE_FUNC_EXIT, \"profile_func_exit\")\n \n-/* TLS emulation.  */\n-DEF_EXT_LIB_BUILTIN (BUILT_IN_EMUTLS_GET_ADDRESS, \"__emutls_get_address\", BT_FN_PTR_PTR, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_EXT_LIB_BUILTIN (BUILT_IN_EMUTLS_REGISTER_COMMON, \"__emutls_register_common\", BT_FN_VOID_PTR_WORD_WORD_PTR, ATTR_NOTHROW_LIST)\n-\n /* Synchronization Primitives.  */\n #include \"sync-builtins.def\"\n "}, {"sha": "3897bea36b6532b96e5e17ce99b5626b6a6ef44b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -4838,7 +4838,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  }\n \n \tif (threadp)\n-\t  DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t  {\n+\t    if (targetm.have_tls)\n+\t      DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t    else\n+\t      /* A mere warning is sure to result in improper semantics\n+\t\t at runtime.  Don't bother to allow this to compile.  */\n+\t      error (\"thread-local storage not supported for this target\");\n+\t  }\n       }\n \n     if (storage_class == csc_extern"}, {"sha": "852025392833ceb813663d00f0978fd16a8b96c1", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -7801,6 +7801,9 @@ c_parser_omp_threadprivate (c_parser *parser)\n   c_parser_consume_pragma (parser);\n   vars = c_parser_omp_var_list_parens (parser, 0, NULL);\n \n+  if (!targetm.have_tls)\n+    sorry (\"threadprivate variables not supported in this target\");\n+\n   /* Mark every variable in VARS to be assigned thread local storage.  */\n   for (t = vars; t; t = TREE_CHAIN (t))\n     {"}, {"sha": "3e5dab1f94eb789bb23aa63f2b534fa2d5a6b13f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -939,7 +939,7 @@ bool\n decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)\n {\n   /* If the user told us it is used, then it must be so.  */\n-  if (node->externally_visible || node->force_output)\n+  if (node->externally_visible)\n     return true;\n   if (!flag_unit_at_a_time\n       && lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n@@ -963,17 +963,6 @@ decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)\n       && !DECL_EXTERNAL (decl))\n     return true;\n \n-  /* When emulating tls, we actually see references to the control\n-     variable, rather than the user-level variable.  */\n-  if (!targetm.have_tls\n-      && TREE_CODE (decl) == VAR_DECL\n-      && DECL_THREAD_LOCAL_P (decl))\n-    {\n-      tree control = emutls_decl (decl);\n-      if (decide_is_variable_needed (cgraph_varpool_node (control), control))\n-\treturn true;\n-    }\n-\n   /* When not reordering top level variables, we have to assume that\n      we are going to keep everything.  */\n   if (flag_unit_at_a_time && flag_toplevel_reorder)"}, {"sha": "10c52ea42849b5935a5defceab12152f00ceafeb", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -328,7 +328,10 @@ cgraph_varpool_remove_unreferenced_decls (void)\n       node->needed = 0;\n \n       if (node->finalized\n-\t  && (decide_is_variable_needed (node, decl)\n+\t  && ((DECL_ASSEMBLER_NAME_SET_P (decl)\n+\t       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n+\t      || node->force_output\n+\t      || decide_is_variable_needed (node, decl)\n \t      /* ??? Cgraph does not yet rule the world with an iron hand,\n \t\t and does not control the emission of debug information.\n \t\t After a variable has its DECL_RTL set, we must assume that\n@@ -1709,7 +1712,6 @@ cgraph_build_static_cdtor (char which, tree body, int priority)\n     {\n       tree_lowering_passes (decl);\n       tree_rest_of_compilation (decl);\n-      cgraph_varpool_assemble_pending_decls ();\n     }\n   else\n     cgraph_finalize_function (decl, 0);"}, {"sha": "d07e0c63685cf658f77fc14ecc1a9daf39e62f81", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02110-1301, USA.  */\n     {\t\t\t\t\t\t\t\t\\\n       HOST_WIDE_INT size;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-      if (targetm.have_tls && DECL_THREAD_LOCAL_P (DECL))\t\\\n+      if (DECL_THREAD_LOCAL_P (DECL))\t\t\t\t\\\n \tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"tls_object\");\t\\\n       else\t\t\t\t\t\t\t\\\n \tASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\\"}, {"sha": "615f53c49e8cfb6d790c9d497b378757702e2833", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,3 +1,7 @@\n+2006-10-09  Richard Henderson  <rth@redhat.com>\n+\n+\tRevert emutls patch.\n+\n 2006-10-04  Richard Henderson  <rth@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "84f2aaa49b3e15dfcf1c45f873b33c3aba6a7dfd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -6321,7 +6321,14 @@ grokvardecl (tree type,\n     }\n \n   if (declspecs->specs[(int)ds_thread])\n-    DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+    {\n+      if (targetm.have_tls)\n+\tDECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+      else\n+\t/* A mere warning is sure to result in improper semantics\n+\t   at runtime.  Don't bother to allow this to compile.  */\n+\terror (\"thread-local storage not supported for this target\");\n+    }\n \n   if (TREE_PUBLIC (decl))\n     {\n@@ -8449,7 +8456,15 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tDECL_EXTERNAL (decl) = 1;\n \n \t\tif (thread_p)\n-\t\t  DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t\t  {\n+\t\t    if (targetm.have_tls)\n+\t\t      DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n+\t\t    else\n+\t\t      /* A mere warning is sure to result in improper\n+\t\t\t semantics at runtime.  Don't bother to allow this to\n+\t\t\t compile.  */\n+\t\t      error (\"thread-local storage not supported for this target\");\n+\t\t  }\n \t      }\n \t    else\n \t      {"}, {"sha": "2672f15afba7609839506e26d522377de22d7532", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -18964,6 +18964,9 @@ cp_parser_omp_threadprivate (cp_parser *parser, cp_token *pragma_tok)\n   vars = cp_parser_omp_var_list (parser, 0, NULL);\n   cp_parser_require_pragma_eol (parser, pragma_tok);\n \n+  if (!targetm.have_tls)\n+    sorry (\"threadprivate variables not supported in this target\");\n+\n   finish_omp_threadprivate (vars);\n }\n "}, {"sha": "0b655b44d51214df691c495e8ed76a524f28e77e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -9130,7 +9130,7 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \t  rtx rtl;\n \n \t  /* If this is not defined, we have no way to emit the data.  */\n-\t  if (!targetm.have_tls || !targetm.asm_out.output_dwarf_dtprel)\n+\t  if (!targetm.asm_out.output_dwarf_dtprel)\n \t    return 0;\n \n \t  /* The way DW_OP_GNU_push_tls_address is specified, we can only"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/emutls.c", "status": "modified", "additions": 0, "deletions": 193, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Femutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Femutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femutls.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,193 +0,0 @@\n-/* TLS emulation.\n-   Copyright (C) 2006 Free Software Foundation, Inc.\n-   Contributed by Jakub Jelinek <jakub@redhat.com>.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-In addition to the permissions in the GNU General Public License, the\n-Free Software Foundation gives you unlimited permission to link the\n-compiled version of this file into combinations with other programs,\n-and to distribute those combinations without any restriction coming\n-from the use of this file.  (The General Public License restrictions\n-do apply in other respects; for example, they cover modification of\n-the file, and distribution when not linked into a combine\n-executable.)\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301, USA.  */\n-\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"gthr.h\"\n-\n-typedef unsigned int word __attribute__((mode(word)));\n-typedef unsigned int pointer __attribute__((mode(pointer)));\n-\n-struct __emutls_object\n-{\n-  word size;\n-  word align;\n-  union {\n-    pointer offset;\n-    void *ptr;\n-  } loc;\n-  void *templ;\n-};\n-\n-#ifdef __GTHREADS\n-#ifdef __GTHREAD_MUTEX_INIT\n-static __gthread_mutex_t emutls_mutex = __GTHREAD_MUTEX_INIT;\n-#else\n-static __gthread_mutex_t emutls_mutex;\n-#endif\n-static __gthread_key_t emutls_key;\n-static pointer emutls_size;\n-\n-static void\n-emutls_destroy (void *ptr)\n-{\n-  void ***arr = (void ***) ptr;\n-  unsigned long int size = (unsigned long int) arr[0];\n-  ++arr;\n-  while (--size)\n-    {\n-      if (*arr)\n-\tfree ((*arr)[-1]);\n-      ++arr;\n-    }\n-  free (ptr);\n-}\n-\n-static void\n-emutls_init (void)\n-{\n-#ifndef __GTHREAD_MUTEX_INIT\n-  __GTHREAD_MUTEX_INIT_FUNCTION (&emutls_mutex);\n-#endif\n-  if (__gthread_key_create (&emutls_key, emutls_destroy) != 0)\n-    abort ();\n-}\n-#endif\n-\n-static void *\n-emutls_alloc (struct __emutls_object *obj)\n-{\n-  void *ptr;\n-  void *ret;\n-\n-  /* We could use here posix_memalign if available and adjust\n-     emutls_destroy accordingly.  */\n-  if (obj->align <= sizeof (void *))\n-    {\n-      ptr = malloc (obj->size + sizeof (void *));\n-      if (ptr == NULL)\n-\tabort ();\n-      ((void **) ptr)[0] = ptr;\n-      ret = ptr + sizeof (void *);\n-    }\n-  else\n-    {\n-      ptr = malloc (obj->size + sizeof (void *) + obj->align - 1);\n-      if (ptr == NULL)\n-\tabort ();\n-      ret = (void *) (((pointer) (ptr + sizeof (void *) + obj->align - 1))\n-\t\t      & ~(pointer)(obj->align - 1));\n-      ((void **) ret)[-1] = ptr;\n-    }\n-\n-  if (obj->templ)\n-    memcpy (ret, obj->templ, obj->size);\n-  else\n-    memset (ret, 0, obj->size);\n-\n-  return ret;\n-}\n-\n-void *\n-__emutls_get_address (struct __emutls_object *obj)\n-{\n-  if (! __gthread_active_p ())\n-    {\n-      if (__builtin_expect (obj->loc.ptr == NULL, 0))\n-\tobj->loc.ptr = emutls_alloc (obj);\n-      return obj->loc.ptr;\n-    }\n-\n-#ifndef __GTHREADS\n-  abort ();\n-#else\n-  pointer offset;\n-\n-  if (__builtin_expect (obj->loc.offset == 0, 0))\n-    {\n-      static __gthread_once_t once = __GTHREAD_ONCE_INIT;\n-      __gthread_once (&once, emutls_init);\n-      __gthread_mutex_lock (&emutls_mutex);\n-      offset = ++emutls_size;\n-      obj->loc.offset = offset;\n-      __gthread_mutex_unlock (&emutls_mutex);\n-    }\n-  else\n-    offset = obj->loc.offset;\n-\n-  void **arr = (void **) __gthread_getspecific (emutls_key);\n-  if (__builtin_expect (arr == NULL, 0))\n-    {\n-      pointer size = offset + 32;\n-      arr = calloc (size, sizeof (void *));\n-      if (arr == NULL)\n-\tabort ();\n-      arr[0] = (void *) size;\n-      __gthread_setspecific (emutls_key, (void *) arr);\n-    }\n-  else if (__builtin_expect (offset >= (pointer) arr[0], 0))\n-    {\n-      pointer orig_size = (pointer) arr[0];\n-      pointer size = orig_size * 2;\n-      if (offset >= size)\n-\tsize = offset + 32;\n-      arr = realloc (arr, size * sizeof (void *));\n-      if (arr == NULL)\n-\tabort ();\n-      memset (arr + orig_size, 0, (size - orig_size) * sizeof (void *));\n-      __gthread_setspecific (emutls_key, (void *) arr);\n-    }\n-\n-  void *ret = arr[offset];\n-  if (__builtin_expect (ret == NULL, 0))\n-    {\n-      ret = emutls_alloc (obj);\n-      arr[offset] = ret;\n-    }\n-  return ret;\n-#endif\n-}\n-\n-void\n-__emutls_register_common (struct __emutls_object *obj,\n-\t\t\t  word size, word align, void *templ)\n-{\n-  if (obj->size < size)\n-    {\n-      obj->size = size;\n-      obj->templ = NULL;\n-    }\n-  if (obj->align < align)\n-    obj->align = align;\n-  if (templ && size == obj->size)\n-    obj->templ = templ;\n-}"}, {"sha": "a0dc9c360f08fffa55629f1b9b1ef9560a0171d5", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -6360,19 +6360,6 @@ highest_pow2_factor_for_target (tree target, tree exp)\n   return MAX (factor, target_align);\n }\n \f\n-/* Return &VAR expression for emulated thread local VAR.  */\n-\n-static tree\n-emutls_var_address (tree var)\n-{\n-  tree emuvar = emutls_decl (var);\n-  tree fn = built_in_decls [BUILT_IN_EMUTLS_GET_ADDRESS];\n-  tree arg = build_fold_addr_expr_with_type (emuvar, ptr_type_node);\n-  tree arglist = build_tree_list (NULL_TREE, arg);\n-  tree call = build_function_call_expr (fn, arglist);\n-  return fold_convert (build_pointer_type (TREE_TYPE (var)), call);\n-}\n-\f\n /* Expands variable VAR.  */\n \n void\n@@ -6501,18 +6488,6 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n       inner = TREE_OPERAND (exp, 0);\n       break;\n \n-    case VAR_DECL:\n-      /* TLS emulation hook - replace __thread VAR's &VAR with\n-\t __emutls_get_address (&_emutls.VAR).  */\n-      if (! targetm.have_tls\n-\t  && TREE_CODE (exp) == VAR_DECL\n-\t  && DECL_THREAD_LOCAL_P (exp))\n-\t{\n-\t  exp = emutls_var_address (exp);\n-\t  return expand_expr (exp, target, tmode, modifier);\n-\t}\n-      /* Fall through.  */\n-\n     default:\n       /* If the object is a DECL, then expand it for its rtl.  Don't bypass\n \t expand_expr, as that can have various side effects; LABEL_DECLs for\n@@ -6878,16 +6853,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  && (TREE_STATIC (exp) || DECL_EXTERNAL (exp)))\n \tlayout_decl (exp, 0);\n \n-      /* TLS emulation hook - replace __thread vars with\n-\t *__emutls_get_address (&_emutls.var).  */\n-      if (! targetm.have_tls\n-\t  && TREE_CODE (exp) == VAR_DECL\n-\t  && DECL_THREAD_LOCAL_P (exp))\n-\t{\n-\t  exp = build_fold_indirect_ref (emutls_var_address (exp));\n-\t  return expand_expr_real_1 (exp, target, tmode, modifier, NULL);\n-\t}\n-\n       /* ... fall through ...  */\n \n     case FUNCTION_DECL:"}, {"sha": "85c9533ffcf2f2422fec6b3066762e776280d603", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,3 +1,7 @@\n+2006-10-09  Richard Henderson  <rth@redhat.com>\n+\n+\tRevert emutls patch.\n+\n 2006-10-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsic.c (add_sym_0s, add_sym_1s, add_sym_2s, add_sym_3s,"}, {"sha": "6dc00da63a3782d2ac03b017755facc24f812fe7", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1102,14 +1102,6 @@ gfc_init_builtin_functions (void)\n \t\t      BUILT_IN_TRAP, NULL, false);\n   TREE_THIS_VOLATILE (built_in_decls[BUILT_IN_TRAP]) = 1;\n \n-  gfc_define_builtin (\"__emutls_get_address\",\n-\t\t      builtin_types[BT_FN_PTR_PTR], BUILT_IN_EMUTLS_GET_ADDRESS,\n-\t\t      \"__emutls_get_address\", true);\n-  gfc_define_builtin (\"__emutls_register_common\",\n-\t\t      builtin_types[BT_FN_VOID_PTR_WORD_WORD_PTR],\n-\t\t      BUILT_IN_EMUTLS_REGISTER_COMMON,\n-\t\t      \"__emutls_register_common\", false);\n-\n   build_common_builtin_nodes ();\n   targetm.init_builtins ();\n }"}, {"sha": "09ec255974cc8f787fbdbe60964427264bed39ae", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -465,6 +465,12 @@ gfc_match_omp_threadprivate (void)\n   if (m != MATCH_YES)\n     return m;\n \n+  if (!targetm.have_tls)\n+    {\n+      sorry (\"threadprivate variables not supported in this target\");\n+      goto cleanup;\n+    }\n+\n   for (;;)\n     {\n       m = gfc_match_symbol (&sym, 0);"}, {"sha": "5350eacdef05c14f6fb7e304ea747938b9cd655c", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -388,7 +388,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n \n       gfc_set_decl_location (decl, &com->where);\n \n-      if (com->threadprivate)\n+      if (com->threadprivate && targetm.have_tls)\n \tDECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n \n       /* Place the back end declaration for this common block in"}, {"sha": "72500229558818ab87ef2f4fdd7da84d5d55142f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -522,7 +522,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n     TREE_STATIC (decl) = 1;\n \n   /* Handle threadprivate variables.  */\n-  if (sym->attr.threadprivate\n+  if (sym->attr.threadprivate && targetm.have_tls\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n     DECL_TLS_MODEL (decl) = decl_default_tls_model (decl);\n }"}, {"sha": "5a3e5d72221c6daaed44212a56ffd27f29dd8b1c", "filename": "gcc/fortran/types.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ffortran%2Ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftypes.def?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -55,7 +55,6 @@ DEF_PRIMITIVE_TYPE (BT_BOOL, boolean_type_node)\n DEF_PRIMITIVE_TYPE (BT_INT, integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT, unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONG, long_integer_type_node)\n-DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 1))\n \n DEF_PRIMITIVE_TYPE (BT_I1, builtin_type_for_size (BITS_PER_UNIT*1, 1))\n DEF_PRIMITIVE_TYPE (BT_I2, builtin_type_for_size (BITS_PER_UNIT*2, 1))\n@@ -82,7 +81,6 @@ DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTRPTR, BT_VOID, BT_PTR_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_VPTR, BT_VOID, BT_VOLATILE_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT_UINT, BT_UINT, BT_UINT)\n-DEF_FUNCTION_TYPE_1 (BT_FN_PTR_PTR, BT_PTR, BT_PTR)\n \n DEF_POINTER_TYPE (BT_PTR_FN_VOID_PTR, BT_FN_VOID_PTR)\n \n@@ -115,8 +113,6 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_OMPFN_PTR_UINT, BT_VOID, BT_PTR_FN_VOID_PTR,\n \n DEF_FUNCTION_TYPE_4 (BT_FN_VOID_OMPFN_PTR_UINT_UINT,\n                      BT_VOID, BT_PTR_FN_VOID_PTR, BT_PTR, BT_UINT, BT_UINT)\n-DEF_FUNCTION_TYPE_4 (BT_FN_VOID_PTR_WORD_WORD_PTR,\n-\t\t     BT_VOID, BT_PTR, BT_WORD, BT_WORD, BT_PTR)\n \n DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_LONG_LONG_LONG_LONGPTR_LONGPTR,\n                      BT_BOOL, BT_LONG, BT_LONG, BT_LONG,"}, {"sha": "f8e9e52d0820d24ee70cbe6deebeff4dcb757fae", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -273,6 +273,4 @@ GCC_4.2.0 {\n   __floatuntixf\n   __floatuntitf\n   _Unwind_GetIPInfo\n-  __emutls_get_address\n-  __emutls_register_common\n }"}, {"sha": "3cfe32c93cfb56bac3c867d464e9296edd07209b", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -158,9 +158,6 @@ extern void merge_weak (tree, tree);\n /* Emit any pending weak declarations.  */\n extern void weak_finish (void);\n \n-/* Emit any pending emutls declarations and initializations.  */\n-extern void emutls_finish (void);\n-\n /* Decode an `asm' spec for a declaration as a register name.\n    Return the register number, or -1 if nothing specified,\n    or -2 if the ASMSPEC is not `cc' or `memory' and is not recognized,"}, {"sha": "f60a8ee51c6492d1afe163b266e64ed6bbb5c887", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,3 +1,7 @@\n+2006-10-09  Richard Henderson  <rth@redhat.com>\n+\n+\tRevert emutls patch.\n+\n 2006-10-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/29254"}, {"sha": "28cb47e504190dcac02a68636152c250eb1ad0f9", "filename": "gcc/testsuite/gcc.dg/tls/alias-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Falias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Falias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Falias-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do link } */\n /* { dg-require-alias \"\" } */\n /* { dg-require-visibility \"\" } */\n+/* { dg-require-effective-target tls } */\n /* Test that encode_section_info handles the change from externally\n    defined to locally defined (via hidden).   Extracted from glibc.  */\n "}, {"sha": "b77e550d7bf7f29976b3f5e8d6242182379a1170", "filename": "gcc/testsuite/gcc.dg/tls/asm-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fasm-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* { dg-options \"-Werror\" } */\n+/* { dg-require-effective-target tls } */\n __thread int i;\n \n int foo ()"}, {"sha": "67d7be69cc50c8be3658c30440dce591e61b3449", "filename": "gcc/testsuite/gcc.dg/tls/debug-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdebug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdebug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdebug-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do assemble } */\n /* { dg-options \"-g\" } */\n+/* { dg-require-effective-target tls } */\n \n __thread int i;"}, {"sha": "56b570c94a5c74803232ad254ba9e661fe429a34", "filename": "gcc/testsuite/gcc.dg/tls/diag-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* Valid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n \n __thread int g1;\n extern __thread int g2;"}, {"sha": "8276cb3be4902553c2da9b5d64685480bcf9e51a", "filename": "gcc/testsuite/gcc.dg/tls/diag-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-2.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* Invalid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n \n __thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n __thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */"}, {"sha": "45d89b43722b74566620b43767408c45282fb043", "filename": "gcc/testsuite/gcc.dg/tls/diag-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-3.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* Report invalid extern and __thread combinations.  */\n+/* { dg-require-effective-target tls } */\n \n extern int j;\t\t/* { dg-error \"previous declaration\" } */\n __thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */"}, {"sha": "fed2f3accd33fcfd9e9a341b479b8ac302df760f", "filename": "gcc/testsuite/gcc.dg/tls/diag-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-4.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* Invalid __thread specifiers.  As diag-4.c but some cases in\n    different orders.  */\n+/* { dg-require-effective-target tls } */\n \n __thread typedef int g4;\t/* { dg-error \"'__thread' used with 'typedef'\" } */\n "}, {"sha": "219396d768ae3fc8eb837cb5694b02a34f2aefb2", "filename": "gcc/testsuite/gcc.dg/tls/diag-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fdiag-5.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,3 +1,4 @@\n /* __thread specifiers on empty declarations.  */\n+/* { dg-require-effective-target tls } */\n \n __thread struct foo; /* { dg-warning \"warning: useless '__thread' in empty declaration\" } */"}, {"sha": "fa4208dce0c1cac31e44f54446e70bfb5ef69678", "filename": "gcc/testsuite/gcc.dg/tls/init-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Finit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Finit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Finit-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,4 +1,5 @@\n /* Invalid initializations.  */\n+/* { dg-require-effective-target tls } */\n \n extern __thread int i;\n int *p = &i;\t/* { dg-error \"initializer element is not constant\" } */"}, {"sha": "9c592a985563850b4ab8158c8aefa3294155860f", "filename": "gcc/testsuite/gcc.dg/tls/nonpic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fnonpic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fnonpic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fnonpic-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftls-model=initial-exec\" } */\n+/* { dg-require-effective-target tls } */\n \n extern __thread long e1;\n extern __thread int e2;"}, {"sha": "a710a062ca376113342f8ef7a0b35825d18e13a2", "filename": "gcc/testsuite/gcc.dg/tls/opt-10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-10.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fpic\" } */\n+/* { dg-require-effective-target tls } */\n \n /* The web pass was creating unrecognisable pic_load_dot_plus_four insns\n    on ARM.  */"}, {"sha": "0604f3253c11cc50e2fd428ac6f242bbafe5ff90", "filename": "gcc/testsuite/gcc.dg/tls/opt-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls } */\n /* Sched1 moved {load_tp} pattern between strlen call and the copy\n    of the hard return value to its pseudo.  This resulted in a\n    reload abort, since the hard register was not spillable.  */"}, {"sha": "8a01c019c10b99cc4e9080ea268ff8fa7d59b94e", "filename": "gcc/testsuite/gcc.dg/tls/opt-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-6.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls } */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "a7331115352c632de00727174fa651717fac326d", "filename": "gcc/testsuite/gcc.dg/tls/opt-8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-8.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,6 +1,7 @@\n /* PR 18910 */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls } */\n \n static __thread void *foo [2];\n void"}, {"sha": "cc62ef57a5dfd0ff41346a063bd33e811e284c3a", "filename": "gcc/testsuite/gcc.dg/tls/opt-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-9.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,6 +1,7 @@\n /* PR 21412 */\n /* { dg-do compile */\n /* { dg-options \"-O2 -fPIC\" } */\n+/* { dg-require-effective-target tls } */\n \n struct S { int x[10]; };\n extern __thread struct S s;"}, {"sha": "bcd42bd8572cef972854a7faddd06b87852d92ab", "filename": "gcc/testsuite/gcc.dg/tls/pic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpic-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fpic -ftls-model=global-dynamic\" } */\n+/* { dg-require-effective-target tls } */\n \n extern __thread long e1;\n extern __thread int e2;"}, {"sha": "5fd6be439055902d3dfc8892a0d8229dc9fae329", "filename": "gcc/testsuite/gcc.dg/tls/struct-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fstruct-1.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -2,6 +2,7 @@\n    to allow addends for @dtpoff relocs or not.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fpic\" } */\n+/* { dg-require-effective-target tls } */\n \n struct S {\n   int s0, s1, s2, s3;"}, {"sha": "96b8e49a665c4bd2323ef28269c01ac120e98824", "filename": "gcc/testsuite/gcc.dg/tls/trivial.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Ftrivial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Ftrivial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Ftrivial.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1 +1,3 @@\n+/* { dg-require-effective-target tls } */\n+\n __thread int i;"}, {"sha": "7776cb4f687d9deb3b31b055c45cce9257110ce9", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -384,7 +384,7 @@ proc check_effective_target_pcc_bitfield_type_matters { } {\n     }]\n }\n \n-# Return 1 if *native* thread local storage (TLS) is supported, 0 otherwise.\n+# Return 1 if thread local storage (TLS) is supported, 0 otherwise.\n #\n # This won't change for different subtargets so cache the result.\n \n@@ -406,19 +406,11 @@ proc check_effective_target_tls {} {\n \tclose $f\n \n \t# Test for thread-local data supported by the platform.\n-\tset comp_output [${tool}_target_compile $src $asm assembly \"\"]\n+\tset comp_output \\\n+\t    [${tool}_target_compile $src $asm assembly \"\"]\n \tfile delete $src\n \tif { [string match \"*not supported*\" $comp_output] } {\n \t    set et_tls_saved 0\n-\t} else {\n-\t    set fd [open $asm r]\n-\t    set text [read $fd]\n-\t    close $fd\n-\t    if { [string match \"*emutls*\" $text]} {\n-\t\tset et_tls_saved 0\n-\t    } else {\n-\t\tset et_tls_saved 1\n-\t    }\n \t}\n \tremove-build-file $asm\n     }"}, {"sha": "53fcdfe580c830bd125b6683dad61a8e173f71e8", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1056,14 +1056,11 @@ compile_file (void)\n   if (flag_mudflap)\n     mudflap_finish_file ();\n \n-  /* Likewise for emulated thread-local storage.  */\n-  if (!targetm.have_tls)\n-    emutls_finish ();\n-\n   output_shared_constant_pool ();\n   output_object_blocks ();\n \n   /* Write out any pending weak symbol declarations.  */\n+\n   weak_finish ();\n \n   /* Do dbx symbols.  */"}, {"sha": "9dbc399d2cd885cad361474dfc109b7bea896b3f", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -1,5 +1,5 @@\n /* Memory address lowering and addressing mode selection.\n-   Copyright (C) 2004, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n    \n This file is part of GCC.\n    \n@@ -134,15 +134,10 @@ gen_addr_rtx (rtx symbol, rtx base, rtx index, rtx step, rtx offset,\n       act_elem = symbol;\n       if (offset)\n \t{\n-\t  act_elem = gen_rtx_PLUS (Pmode, act_elem, offset);\n-\n+\t  act_elem = gen_rtx_CONST (Pmode,\n+\t\t\t\t    gen_rtx_PLUS (Pmode, act_elem, offset));\n \t  if (offset_p)\n-\t    *offset_p = &XEXP (act_elem, 1);\n-\n-\t  if (GET_CODE (symbol) == SYMBOL_REF\n-\t      || GET_CODE (symbol) == LABEL_REF\n-\t      || GET_CODE (symbol) == CONST)\n-\t    act_elem = gen_rtx_CONST (Pmode, act_elem);\n+\t    *offset_p = &XEXP (XEXP (act_elem, 0), 1);\n \t}\n \n       if (*addr)"}, {"sha": "c2ea4798a5947123c7fd07f1f9105e71d3ab2d1c", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -4460,7 +4460,6 @@ extern void set_user_assembler_name (tree, const char *);\n extern void process_pending_assemble_externals (void);\n extern void finish_aliases_1 (void);\n extern void finish_aliases_2 (void);\n-extern tree emutls_decl (tree);\n \n /* In stmt.c */\n extern void expand_computed_goto (tree);"}, {"sha": "819add8afba633de0c219abc5c410bdf4a05a6cb", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 293, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98d4769d5d5449e3ed3a524143b37e6c8a045ec/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a98d4769d5d5449e3ed3a524143b37e6c8a045ec", "patch": "@@ -53,7 +53,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"cgraph.h\"\n #include \"cfglayout.h\"\n #include \"basic-block.h\"\n-#include \"tree-iterator.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data\n@@ -201,236 +200,6 @@ static GTY(()) int anchor_labelno;\n /* A pool of constants that can be shared between functions.  */\n static GTY(()) struct rtx_constant_pool *shared_constant_pool;\n \n-/* TLS emulation.  */\n-\n-static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n-     htab_t emutls_htab;\n-static GTY (()) tree emutls_object_type;\n-\n-#ifndef NO_DOT_IN_LABEL\n-# define EMUTLS_VAR_PREFIX\t\"__emutls_v.\"\n-# define EMUTLS_TMPL_PREFIX\t\"__emutls_t.\"\n-#elif !defined NO_DOLLAR_IN_LABEL\n-# define EMUTLS_VAR_PREFIX\t\"__emutls_v$\"\n-# define EMUTLS_TMPL_PREFIX\t\"__emutls_t$\"\n-#else\n-# define EMUTLS_VAR_PREFIX\t\"__emutls_v_\"\n-# define EMUTLS_TMPL_PREFIX\t\"__emutls_t_\"\n-#endif\n-\n-/* Create an identifier for the struct __emutls_object, given an identifier\n-   of the DECL_ASSEMBLY_NAME of the original object.  */\n-\n-static tree\n-get_emutls_object_name (tree name)\n-{\n-  char *toname = alloca (strlen (IDENTIFIER_POINTER (name))\n-\t\t\t + sizeof (EMUTLS_VAR_PREFIX));\n-  strcpy (toname, EMUTLS_VAR_PREFIX);\n-  strcpy (toname + sizeof (EMUTLS_VAR_PREFIX) - 1, IDENTIFIER_POINTER (name));\n-\n-  return get_identifier (toname);\n-}\n-\n-/* Create the structure for struct __emutls_object.  This should match the\n-   structure at the top of emutls.c, modulo the union there.  */\n-\n-static tree\n-get_emutls_object_type (void)\n-{\n-  tree type, type_name, field, next_field, word_type_node;\n-\n-  type = emutls_object_type;\n-  if (type)\n-    return type;\n-\n-  emutls_object_type = type = lang_hooks.types.make_type (RECORD_TYPE);\n-  type_name = get_identifier (\"__emutls_object\");\n-  type_name = build_decl (TYPE_DECL, type_name, type);\n-  TYPE_NAME (type) = type_name;\n-\n-  field = build_decl (FIELD_DECL, get_identifier (\"__templ\"), ptr_type_node);\n-  DECL_CONTEXT (field) = type;\n-  next_field = field;\n-\n-  field = build_decl (FIELD_DECL, get_identifier (\"__offset\"), ptr_type_node);\n-  DECL_CONTEXT (field) = type;\n-  TREE_CHAIN (field) = next_field;\n-  next_field = field;\n-\n-  word_type_node = lang_hooks.types.type_for_mode (word_mode, 1);\n-  field = build_decl (FIELD_DECL, get_identifier (\"__align\"), word_type_node);\n-  DECL_CONTEXT (field) = type;\n-  TREE_CHAIN (field) = next_field;\n-  next_field = field;\n-\n-  field = build_decl (FIELD_DECL, get_identifier (\"__size\"), word_type_node);\n-  DECL_CONTEXT (field) = type;\n-  TREE_CHAIN (field) = next_field;\n-\n-  TYPE_FIELDS (type) = field;\n-  layout_type (type);\n-\n-  return type;\n-}\n-\n-/* Create a read-only variable like DECL, with the same DECL_INITIAL.\n-   This will be used for initializing the emulated tls data area.  */\n-\n-static tree\n-get_emutls_init_templ_addr (tree decl)\n-{\n-  tree name, to;\n-  char *toname;\n-\n-  if (!DECL_INITIAL (decl))\n-    return null_pointer_node;\n-\n-  name = DECL_ASSEMBLER_NAME (decl);\n-  toname = alloca (strlen (IDENTIFIER_POINTER (name))\n-\t\t   + sizeof (EMUTLS_TMPL_PREFIX));\n-  strcpy (toname, EMUTLS_TMPL_PREFIX);\n-  strcpy (toname + sizeof (EMUTLS_TMPL_PREFIX) - 1, IDENTIFIER_POINTER (name));\n-  name = get_identifier (toname);\n-\n-  to = build_decl (VAR_DECL, name, TREE_TYPE (decl));\n-  SET_DECL_ASSEMBLER_NAME (to, DECL_NAME (to));\n-\n-  DECL_ARTIFICIAL (to) = 1;\n-  TREE_USED (to) = TREE_USED (decl);\n-  TREE_READONLY (to) = 1;\n-  DECL_IGNORED_P (to) = 1;\n-  DECL_CONTEXT (to) = DECL_CONTEXT (decl);\n-  DECL_WEAK (to) = DECL_WEAK (decl);\n-  if (DECL_ONE_ONLY (decl))\n-    {\n-      make_decl_one_only (to);\n-      TREE_STATIC (to) = TREE_STATIC (decl);\n-      TREE_PUBLIC (to) = TREE_PUBLIC (decl);\n-      DECL_VISIBILITY (to) = DECL_VISIBILITY (decl);\n-    }\n-  else\n-    TREE_STATIC (to) = 1;\n-      \n-  DECL_INITIAL (to) = DECL_INITIAL (decl);\n-  DECL_INITIAL (decl) = NULL;\n-\n-  cgraph_varpool_finalize_decl (to);\n-  return build_fold_addr_expr (to);\n-}\n-\n-/* When emulating tls, we use a control structure for use by the runtime.\n-   Create and return this structure.  */\n-\n-tree\n-emutls_decl (tree decl)\n-{\n-  tree name, to;\n-  struct tree_map *h, in;\n-  void **loc;\n-\n-  if (targetm.have_tls || decl == NULL || decl == error_mark_node\n-      || TREE_CODE (decl) != VAR_DECL || ! DECL_THREAD_LOCAL_P (decl))\n-    return decl;\n-\n-  /* Look up the object in the hash; return the control structure if\n-     it has already been created.  */\n-  if (! emutls_htab)\n-    emutls_htab = htab_create_ggc (512, tree_map_hash, tree_map_eq, 0);\n-\n-  name = DECL_ASSEMBLER_NAME (decl);\n-\n-  /* Note that we use the hash of the decl's name, rather than a hash\n-     of the decl's pointer.  In emutls_finish we iterate through the\n-     hash table, and we want this traversal to be predictable.  */\n-  in.hash = htab_hash_string (IDENTIFIER_POINTER (name));\n-  in.from = decl;\n-  loc = htab_find_slot_with_hash (emutls_htab, &in, in.hash, INSERT);\n-  h = *loc;\n-  if (h != NULL)\n-    to = h->to;\n-  else\n-    {\n-      to = build_decl (VAR_DECL, get_emutls_object_name (name),\n-\t\t       get_emutls_object_type ());\n-\n-      h = ggc_alloc (sizeof (struct tree_map));\n-      h->hash = in.hash;\n-      h->from = decl;\n-      h->to = to;\n-      *(struct tree_map **) loc = h;\n-\n-      DECL_ARTIFICIAL (to) = 1;\n-      DECL_IGNORED_P (to) = 1;\n-      TREE_READONLY (to) = 0;\n-\n-      SET_DECL_ASSEMBLER_NAME (to, DECL_NAME (to));\n-      if (DECL_ONE_ONLY (decl))\n-\tmake_decl_one_only (to);\n-      DECL_CONTEXT (to) = DECL_CONTEXT (decl);\n-    }\n-\n-  /* Note that these fields may need to be updated from time to time from\n-     the original decl.  Consider:\n-\textern __thread int i;\n-\tint foo() { return i; }\n-\t__thread int i = 1;\n-     in which I goes from external to locally defined and initialized.  */\n-\n-  TREE_STATIC (to) = TREE_STATIC (decl);\n-  TREE_USED (to) = TREE_USED (decl);\n-  TREE_PUBLIC (to) = TREE_PUBLIC (decl);\n-  DECL_EXTERNAL (to) = DECL_EXTERNAL (decl);\n-  DECL_COMMON (to) = DECL_COMMON (decl);\n-  DECL_WEAK (to) = DECL_WEAK (decl);\n-  DECL_VISIBILITY (to) = DECL_VISIBILITY (decl);\n-\n-  return to;\n-}\n-\n-static int\n-emutls_common_1 (void **loc, void *xstmts)\n-{\n-  struct tree_map *h = *(struct tree_map **) loc;\n-  tree args, x, *pstmts = (tree *) xstmts;\n-  tree word_type_node;\n-\n-  if (!DECL_COMMON (h->from))\n-    return 1;\n-\n-  word_type_node = lang_hooks.types.type_for_mode (word_mode, 1);\n-  \n-  x = get_emutls_init_templ_addr (h->from);\n-  args = tree_cons (NULL, x, NULL);\n-  x = build_int_cst (word_type_node, DECL_ALIGN_UNIT (h->from));\n-  args = tree_cons (NULL, x, args);\n-  x = fold_convert (word_type_node, DECL_SIZE_UNIT (h->from));\n-  args = tree_cons (NULL, x, args);\n-  x = build_fold_addr_expr (h->to);\n-  args = tree_cons (NULL, x, args);\n-\n-  x = built_in_decls[BUILT_IN_EMUTLS_REGISTER_COMMON];\n-  x = build_function_call_expr (x, args);\n-\n-  append_to_statement_list (x, pstmts);\n-  return 1;\n-}\n-\n-void\n-emutls_finish (void)\n-{\n-  tree body = NULL_TREE;\n-\n-  if (emutls_htab == NULL)\n-    return;\n-\n-  htab_traverse_noresize (emutls_htab, emutls_common_1, &body);\n-  if (body == NULL_TREE)\n-    return;\n-\n-  cgraph_build_static_cdtor ('I', body, DEFAULT_INIT_PRIORITY);\n-}\n-\n /* Helper routines for maintaining section_htab.  */\n \n static int\n@@ -1964,50 +1733,6 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   rtx decl_rtl, symbol;\n   section *sect;\n \n-  if (! targetm.have_tls\n-      && TREE_CODE (decl) == VAR_DECL\n-      && DECL_THREAD_LOCAL_P (decl))\n-    {\n-      tree to = emutls_decl (decl);\n-\n-      /* If this variable is defined locally, then we need to initialize the\n-         control structure with size and alignment information.  We do this\n-\t at the last moment because tentative definitions can take a locally\n-\t defined but uninitialized variable and initialize it later, which\n-\t would result in incorrect contents.  */\n-      if (! DECL_EXTERNAL (to) && ! DECL_COMMON (to))\n-\t{\n-\t  VEC(constructor_elt,gc) *v = VEC_alloc (constructor_elt, gc, 4);\n-\t  constructor_elt *elt;\n-\t  tree type = TREE_TYPE (to);\n-\t  tree field = TYPE_FIELDS (type);\n-\n-\t  elt = VEC_quick_push (constructor_elt, v, NULL);\n-\t  elt->index = field;\n-\t  elt->value = fold_convert (TREE_TYPE (field), DECL_SIZE_UNIT (decl));\n-\n-\t  elt = VEC_quick_push (constructor_elt, v, NULL);\n-\t  field = TREE_CHAIN (field);\n-\t  elt->index = field;\n-\t  elt->value = build_int_cst (TREE_TYPE (field),\n-\t\t\t\t      DECL_ALIGN_UNIT (decl));\n-\n-\t  elt = VEC_quick_push (constructor_elt, v, NULL);\n-\t  field = TREE_CHAIN (field);\n-\t  elt->index = field;\n-\t  elt->value = null_pointer_node;\n-\n-\t  elt = VEC_quick_push (constructor_elt, v, NULL);\n-\t  field = TREE_CHAIN (field);\n-\t  elt->index = field;\n-\t  elt->value = get_emutls_init_templ_addr (decl);\n-\n-\t  DECL_INITIAL (to) = build_constructor (type, v);\n-\t}\n-\n-      decl = to;\n-    }\n-\n   if (lang_hooks.decls.prepare_assemble_variable)\n     lang_hooks.decls.prepare_assemble_variable (decl);\n \n@@ -5135,14 +4860,6 @@ do_assemble_alias (tree decl, tree target)\n     {\n       ultimate_transparent_alias_target (&target);\n \n-      if (!targetm.have_tls\n-\t  && TREE_CODE (decl) == VAR_DECL\n-\t  && DECL_THREAD_LOCAL_P (decl))\n-\t{\n-\t  decl = emutls_decl (decl);\n-\t  target = get_emutls_object_name (target);\n-\t}\n-\n       if (!TREE_SYMBOL_REFERENCED (target))\n \tweakref_targets = tree_cons (decl, target, weakref_targets);\n \n@@ -5160,14 +4877,6 @@ do_assemble_alias (tree decl, tree target)\n       return;\n     }\n \n-  if (!targetm.have_tls\n-      && TREE_CODE (decl) == VAR_DECL\n-      && DECL_THREAD_LOCAL_P (decl))\n-    {\n-      decl = emutls_decl (decl);\n-      target = get_emutls_object_name (target);\n-    }\n-\n #ifdef ASM_OUTPUT_DEF\n   /* Make name accessible from other files, if appropriate.  */\n \n@@ -6050,8 +5759,7 @@ default_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n     flags |= SYMBOL_FLAG_FUNCTION;\n   if (targetm.binds_local_p (decl))\n     flags |= SYMBOL_FLAG_LOCAL;\n-  if (targetm.have_tls && TREE_CODE (decl) == VAR_DECL\n-      && DECL_THREAD_LOCAL_P (decl))\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n     flags |= DECL_TLS_MODEL (decl) << SYMBOL_FLAG_TLS_SHIFT;\n   else if (targetm.in_small_data_p (decl))\n     flags |= SYMBOL_FLAG_SMALL;"}]}