{"sha": "1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2", "node_id": "C_kwDOANBUbNoAKDFjMTJhM2NmZGZhYmY2N2M3OTYyZWU2NTMyZTAwMWU0ZDQ4ZTdmYzI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-30T16:06:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-30T20:52:02Z"}, "message": "libstdc++: Optimize operator>> for std::bitset\n\nWe can improve performance by using a char buffer instead of\nbasic_string. The loop bound already means we can't overflow the buffer,\nand we don't need to keep writing a null character after every character\nwritten to the buffer.\n\nWe could just use basic_string::resize(N) to zero-init the whole string,\nthen overwrite those chars. But that zero-init of all N chars would be\nwasted in the case where we are writing to a bitset<N> with large N, but\nonly end up extracting one or two chars from the stream.\n\nWith this change we just use buffer of uninitialized chars.  For a\nsmall-ish bitset (currently <= 256) we can improve performance further\nby using alloca instead of the heap.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/bitset (operator>>): Use a simple buffer instead\n\tof std::basic_string.", "tree": {"sha": "a7097f8c7d1f1181f079e1dfd43951c73d132223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7097f8c7d1f1181f079e1dfd43951c73d132223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb46f453cc74adf0055dae35cec41f4a4c4be5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb46f453cc74adf0055dae35cec41f4a4c4be5b"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "1038cc65138ccf3c1e46802dc94348b5341f41f7", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=1c12a3cfdfabf67c7962ee6532e001e4d48e7fc2", "patch": "@@ -1563,8 +1563,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n       typedef typename __istream_type::ios_base    __ios_base;\n \n-      std::basic_string<_CharT, _Traits> __tmp;\n-      __tmp.reserve(_Nb);\n+      struct _Buffer\n+      {\n+\t_Buffer()\n+\t: _M_base(_Nb > 256 ? new _CharT[_Nb] : (_CharT*)__builtin_alloca(_Nb))\n+\t{ }\n+\n+\t~_Buffer()\n+\t{\n+\t  if _GLIBCXX17_CONSTEXPR (_Nb > 256)\n+\t    delete[] _M_base;\n+\t}\n+\n+\t_CharT* const _M_base;\n+      };\n+      _Buffer __buf;\n+      _CharT* __ptr = __buf._M_base;\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 303. Bitset input operator underspecified\n@@ -1591,9 +1605,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t    {\n \t\t      const char_type __c2 = _Traits::to_char_type(__c1);\n \t\t      if (_Traits::eq(__c2, __zero))\n-\t\t\t__tmp.push_back(__zero);\n+\t\t\t*__ptr++ = __zero;\n \t\t      else if (_Traits::eq(__c2, __one))\n-\t\t\t__tmp.push_back(__one);\n+\t\t\t*__ptr++ = __one;\n \t\t      else if (_Traits::\n \t\t\t       eq_int_type(__is.rdbuf()->sputbackc(__c2),\n \t\t\t\t\t   __eof))\n@@ -1613,11 +1627,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    { __is._M_setstate(__ios_base::badbit); }\n \t}\n \n-      if (__tmp.empty() && _Nb)\n-\t__state |= __ios_base::failbit;\n-      else if _GLIBCXX17_CONSTEXPR (_Nb)\n-\t__x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb,\n-\t\t\t\t__zero, __one);\n+      if _GLIBCXX17_CONSTEXPR (_Nb)\n+      {\n+\tif (size_t __len = __ptr - __buf._M_base)\n+\t  __x.template _M_copy_from_ptr<_CharT, _Traits>(__buf._M_base, __len,\n+\t\t\t\t\t\t\t 0, __len,\n+\t\t\t\t\t\t\t __zero, __one);\n+\telse\n+\t  __state |= __ios_base::failbit;\n+      }\n       if (__state)\n \t__is.setstate(__state);\n       return __is;"}]}