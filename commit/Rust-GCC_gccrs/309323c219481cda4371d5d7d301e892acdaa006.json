{"sha": "309323c219481cda4371d5d7d301e892acdaa006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5MzIzYzIxOTQ4MWNkYTQzNzFkNWQ3ZDMwMWU4OTJhY2RhYTAwNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-06-09T15:05:09Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-06-09T15:05:09Z"}, "message": "{aix43.h,aix5.1} (ASM_CPU_SPEC): Add power3 synonym for 630.\n\n        * config/rs6000/{aix43.h,aix5.1} (ASM_CPU_SPEC): Add power3\n        synonym for 630.  Add power4.  Remove embedded processors.  Use -m604\n        assembler option.\n        (CPP_CPU_SPEC): Add power3 and power4.\n        (PROCESSOR_DEFAULT): Change to 604e.\n        * config/rs6000/rs6000.h (ASM_CPU_SPEC): Similar additions.\n        (CPP_CPU_SPEC): Similar additions.\n        (enum process_type): Add POWER4.\n        (RTX_COSTS): Add POWER4.\n        (CPP_CPU_SPEC): Similar additions.\n        * config/rs6000/linux64.h (PROCESSOR_DEFAULT): Define.\n        * config/rs6000/rs6000.c (rs6000_override_options): Add power4.\n        (rs6000_adjust_cost): Add 603, 604, 604e, 620, 630, Power4 to\n        branch adjustment.\n        (rs6000_issue_rate): Add Power4.\n        * config/rs6000/rs6000.md (cpu attr): Add power4.\n        (iu compare): Remove 604, 604e, 620, 630.\n        Add basic Power4 scheduling information.\n        (mfcr/mtcrf): Change type attribute to cr_logical.\n\nFrom-SVN: r54405", "tree": {"sha": "1a228d77f8f585ce2b552d886920878e89b83260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a228d77f8f585ce2b552d886920878e89b83260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/309323c219481cda4371d5d7d301e892acdaa006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309323c219481cda4371d5d7d301e892acdaa006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309323c219481cda4371d5d7d301e892acdaa006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309323c219481cda4371d5d7d301e892acdaa006/comments", "author": null, "committer": null, "parents": [{"sha": "739dd3dd83b99672577e8dca801c30acc1564eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/739dd3dd83b99672577e8dca801c30acc1564eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/739dd3dd83b99672577e8dca801c30acc1564eb8"}], "stats": {"total": 268, "additions": 206, "deletions": 62}, "files": [{"sha": "cee2dc2cf8fe91a5f14f88369c62682e29ddc685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -1,3 +1,25 @@\n+2002-06-09  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/{aix43.h,aix5.1} (ASM_CPU_SPEC): Add power3\n+\tsynonym for 630.  Add power4.  Remove embedded processors.  Use -m604\n+\tassembler option.\n+\t(CPP_CPU_SPEC): Add power3 and power4.\n+\t(PROCESSOR_DEFAULT): Change to 604e.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Similar additions.\n+\t(CPP_CPU_SPEC): Similar additions.\n+\t(enum process_type): Add POWER4.\n+\t(RTX_COSTS): Add POWER4.\n+\t(CPP_CPU_SPEC): Similar additions.\n+\t* config/rs6000/linux64.h (PROCESSOR_DEFAULT): Define.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Add power4.\n+\t(rs6000_adjust_cost): Add 603, 604, 604e, 620, 630, Power4 to\n+\tbranch adjustment.\n+\t(rs6000_issue_rate): Add Power4.\n+\t* config/rs6000/rs6000.md (cpu attr): Add power4.\n+\t(iu compare): Remove 604, 604e, 620, 630.\n+\tAdd basic Power4 scheduling information.\n+\t(mfcr/mtcrf): Change type attribute to cr_logical.\n+\n 2002-06-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gengtype.h (error_at_line): Use PARAMS, not VPARAMS.  Add"}, {"sha": "19421cce63692378c320783ac8f9e0900e59ef30", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -75,25 +75,23 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=common: -mcom} \\\n %{mcpu=power: -mpwr} \\\n %{mcpu=power2: -mpwr2} \\\n+%{mcpu=power3: -m604} \\\n+%{mcpu=power4: -m604} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n %{mcpu=rios2: -mpwr2} \\\n %{mcpu=rsc: -mpwr} \\\n %{mcpu=rsc1: -mpwr} \\\n %{mcpu=rs64a: -mppc} \\\n-%{mcpu=403: -mppc} \\\n-%{mcpu=505: -mppc} \\\n %{mcpu=601: -m601} \\\n %{mcpu=602: -mppc} \\\n %{mcpu=603: -m603} \\\n %{mcpu=603e: -m603} \\\n %{mcpu=604: -m604} \\\n %{mcpu=604e: -m604} \\\n %{mcpu=620: -mppc} \\\n-%{mcpu=630: -mppc} \\\n-%{mcpu=821: -mppc} \\\n-%{mcpu=860: -mppc}\"\n+%{mcpu=630: -m604}\"\n \n #undef\tASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"-mcom\"\n@@ -135,24 +133,22 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=common: -D_ARCH_COM} \\\n %{mcpu=power: -D_ARCH_PWR} \\\n %{mcpu=power2: -D_ARCH_PWR2} \\\n+%{mcpu=power3: -D_ARCH_PPC} \\\n+%{mcpu=power4: -D_ARCH_PPC} \\\n %{mcpu=powerpc: -D_ARCH_PPC} \\\n %{mcpu=rios: -D_ARCH_PWR} \\\n %{mcpu=rios1: -D_ARCH_PWR} \\\n %{mcpu=rios2: -D_ARCH_PWR2} \\\n %{mcpu=rsc: -D_ARCH_PWR} \\\n %{mcpu=rsc1: -D_ARCH_PWR} \\\n %{mcpu=rs64a: -D_ARCH_PPC} \\\n-%{mcpu=403: -D_ARCH_PPC} \\\n-%{mcpu=505: -D_ARCH_PPC} \\\n %{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n %{mcpu=602: -D_ARCH_PPC} \\\n %{mcpu=603: -D_ARCH_PPC} \\\n %{mcpu=603e: -D_ARCH_PPC} \\\n %{mcpu=604: -D_ARCH_PPC} \\\n %{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=630: -D_ARCH_PPC} \\\n-%{mcpu=821: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC}\"\n+%{mcpu=630: -D_ARCH_PPC}\"\n \n #undef\tCPP_DEFAULT_SPEC\n #define CPP_DEFAULT_SPEC \"-D_ARCH_COM\"\n@@ -161,7 +157,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_DEFAULT MASK_NEW_MNEMONICS\n \n #undef PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_PPC604\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n \n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are"}, {"sha": "8b3fb2982c7b4b5d442cdf2319249b19461b5765", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -75,25 +75,23 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=common: -mcom} \\\n %{mcpu=power: -mpwr} \\\n %{mcpu=power2: -mpwr2} \\\n+%{mcpu=power3: -m604} \\\n+%{mcpu=power4: -m604} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n %{mcpu=rios2: -mpwr2} \\\n %{mcpu=rsc: -mpwr} \\\n %{mcpu=rsc1: -mpwr} \\\n %{mcpu=rs64a: -mppc} \\\n-%{mcpu=403: -mppc} \\\n-%{mcpu=505: -mppc} \\\n %{mcpu=601: -m601} \\\n %{mcpu=602: -mppc} \\\n %{mcpu=603: -m603} \\\n %{mcpu=603e: -m603} \\\n %{mcpu=604: -m604} \\\n %{mcpu=604e: -m604} \\\n %{mcpu=620: -mppc} \\\n-%{mcpu=630: -mppc} \\\n-%{mcpu=821: -mppc} \\\n-%{mcpu=860: -mppc}\"\n+%{mcpu=630: -m604}\"\n \n #undef\tASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"-mcom\"\n@@ -135,24 +133,22 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{mcpu=common: -D_ARCH_COM} \\\n %{mcpu=power: -D_ARCH_PWR} \\\n %{mcpu=power2: -D_ARCH_PWR2} \\\n+%{mcpu=power3: -D_ARCH_PPC} \\\n+%{mcpu=power4: -D_ARCH_PPC} \\\n %{mcpu=powerpc: -D_ARCH_PPC} \\\n %{mcpu=rios: -D_ARCH_PWR} \\\n %{mcpu=rios1: -D_ARCH_PWR} \\\n %{mcpu=rios2: -D_ARCH_PWR2} \\\n %{mcpu=rsc: -D_ARCH_PWR} \\\n %{mcpu=rsc1: -D_ARCH_PWR} \\\n %{mcpu=rs64a: -D_ARCH_PPC} \\\n-%{mcpu=403: -D_ARCH_PPC} \\\n-%{mcpu=505: -D_ARCH_PPC} \\\n %{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n %{mcpu=602: -D_ARCH_PPC} \\\n %{mcpu=603: -D_ARCH_PPC} \\\n %{mcpu=603e: -D_ARCH_PPC} \\\n %{mcpu=604: -D_ARCH_PPC} \\\n %{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=630: -D_ARCH_PPC} \\\n-%{mcpu=821: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC}\"\n+%{mcpu=630: -D_ARCH_PPC}\"\n \n #undef\tCPP_DEFAULT_SPEC\n #define CPP_DEFAULT_SPEC \"-D_ARCH_COM\"\n@@ -161,7 +157,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define TARGET_DEFAULT MASK_NEW_MNEMONICS\n \n #undef PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_PPC604\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n \n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are"}, {"sha": "c605847ac84f16b64b071303f0c581ecd129fda0", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -31,6 +31,9 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT \\\n   (MASK_POWERPC | MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)\n \n+#undef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_PPC630\n+\n #undef  CPP_DEFAULT_SPEC\n #define CPP_DEFAULT_SPEC \"-D_ARCH_PPC64\"\n "}, {"sha": "6dbb7e0cb52d26687547cb9ce900dfb499d6a948", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -353,6 +353,9 @@ rs6000_override_options (default_cpu)\n \t {\"power3\", PROCESSOR_PPC630,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | MASK_PPC_GPOPT},\n+\t {\"power4\", PROCESSOR_POWER4,\n+\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+\t    POWER_MASKS | MASK_PPC_GPOPT},\n \t {\"powerpc\", PROCESSOR_POWERPC,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n@@ -10696,18 +10699,24 @@ rs6000_adjust_cost (insn, link, dep_insn, cost)\n       switch (get_attr_type (insn))\n \t{\n \tcase TYPE_JMPREG:\n-          /* Tell the first scheduling pass about the latency between\n+\t  /* Tell the first scheduling pass about the latency between\n \t     a mtctr and bctr (and mtlr and br/blr).  The first\n \t     scheduling pass will not know about this latency since\n \t     the mtctr instruction, which has the latency associated\n \t     to it, will be generated by reload.  */\n-          return TARGET_POWER ? 5 : 4;\n+\t  return TARGET_POWER ? 5 : 4;\n \tcase TYPE_BRANCH:\n \t  /* Leave some extra cycles between a compare and its\n \t     dependent branch, to inhibit expensive mispredicts.  */\n-\t  if ((rs6000_cpu_attr == CPU_PPC750\n-               || rs6000_cpu_attr == CPU_PPC7400\n-               || rs6000_cpu_attr == CPU_PPC7450)\n+\t  if ((rs6000_cpu_attr == CPU_PPC603\n+\t       || rs6000_cpu_attr == CPU_PPC604\n+\t       || rs6000_cpu_attr == CPU_PPC604E\n+\t       || rs6000_cpu_attr == CPU_PPC620\n+\t       || rs6000_cpu_attr == CPU_PPC630\n+\t       || rs6000_cpu_attr == CPU_PPC750\n+\t       || rs6000_cpu_attr == CPU_PPC7400\n+\t       || rs6000_cpu_attr == CPU_PPC7450\n+\t       || rs6000_cpu_attr == CPU_POWER4)\n \t      && recog_memoized (dep_insn)\n \t      && (INSN_CODE (dep_insn) >= 0)\n \t      && (get_attr_type (dep_insn) == TYPE_COMPARE\n@@ -10788,6 +10797,7 @@ rs6000_issue_rate ()\n   case CPU_PPC604E:\n   case CPU_PPC620:\n   case CPU_PPC630:\n+  case CPU_POWER4:\n     return 4;\n   default:\n     return 1;"}, {"sha": "61046415bfd3dd750d54e2f2cf7af2c90ac42873", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -58,6 +58,8 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=common: -D_ARCH_COM} \\\n %{mcpu=power: -D_ARCH_PWR} \\\n %{mcpu=power2: -D_ARCH_PWR2} \\\n+%{mcpu=power3: -D_ARCH_PPC} \\\n+%{mcpu=power4: -D_ARCH_PPC} \\\n %{mcpu=powerpc: -D_ARCH_PPC} \\\n %{mcpu=rios: -D_ARCH_PWR} \\\n %{mcpu=rios1: -D_ARCH_PWR} \\\n@@ -98,6 +100,8 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=common: -mcom} \\\n %{mcpu=power: -mpwr} \\\n %{mcpu=power2: -mpwrx} \\\n+%{mcpu=power3: -m604} \\\n+%{mcpu=power4: -m604} \\\n %{mcpu=powerpc: -mppc} \\\n %{mcpu=rios: -mpwr} \\\n %{mcpu=rios1: -mpwr} \\\n@@ -116,6 +120,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=604: -mppc} \\\n %{mcpu=604e: -mppc} \\\n %{mcpu=620: -mppc} \\\n+%{mcpu=630: -m604} \\\n %{mcpu=740: -mppc} \\\n %{mcpu=7400: -mppc} \\\n %{mcpu=7450: -mppc} \\\n@@ -395,7 +400,8 @@ enum processor_type\n    PROCESSOR_PPC630,\n    PROCESSOR_PPC750,\n    PROCESSOR_PPC7400,\n-   PROCESSOR_PPC7450\n+   PROCESSOR_PPC7450,\n+   PROCESSOR_POWER4\n };\n \n extern enum processor_type rs6000_cpu;\n@@ -2298,6 +2304,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n         return COSTS_N_INSNS (4);\t\t\t\t\t\\\n       case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC630:\t\t\t\t\t\t\\\n+      case PROCESSOR_POWER4:\t\t\t\t\t\t\\\n         return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n \t\t? GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n \t\t? COSTS_N_INSNS (5) : COSTS_N_INSNS (7)\t\t\t\\\n@@ -2337,6 +2344,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \treturn COSTS_N_INSNS (20);\t\t\t\t\t\\\n       case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC630:\t\t\t\t\t\t\\\n+      case PROCESSOR_POWER4:\t\t\t\t\t\t\\\n         return (GET_MODE (XEXP (X, 1)) != DImode\t\t\t\\\n \t\t? COSTS_N_INSNS (21)\t\t\t\t\t\\\n \t\t: COSTS_N_INSNS (37));\t\t\t\t\t\\"}, {"sha": "9b7ba97c3273af1f8666008f7ead1428a6a49b10", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 143, "deletions": 34, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/309323c219481cda4371d5d7d301e892acdaa006/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=309323c219481cda4371d5d7d301e892acdaa006", "patch": "@@ -56,7 +56,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,power4\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n ; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n@@ -375,42 +375,52 @@\n   (and (eq_attr \"type\" \"cr_logical\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   1 1)\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecsimple\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   1 2 [(eq_attr \"type\" \"vecsimple\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecsimple\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   1 1 [(eq_attr \"type\" \"!vecsimple\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccomplex\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   4 2 [(eq_attr \"type\" \"veccomplex\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccomplex\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   4 1 [(eq_attr \"type\" \"!veccomplex\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccmp\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   2 2 [(eq_attr \"type\" \"veccmp\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"veccmp\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   2 1 [(eq_attr \"type\" \"!veccmp\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecfloat\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   4 2 [(eq_attr \"type\" \"vecfloat\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecfloat\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   4 1 [(eq_attr \"type\" \"!vecfloat\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecperm\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n   2 2 [(eq_attr \"type\" \"vecperm\")])\n+\n (define_function_unit \"vec_alu2\" 2 0\n   (and (eq_attr \"type\" \"vecperm\")\n        (eq_attr \"cpu\" \"ppc7450\"))\n@@ -489,7 +499,7 @@\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc405,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630\"))\n+       (eq_attr \"cpu\" \"rs64a,mpccore,ppc403,ppc405,ppc601,ppc603\"))\n   3 1)\n \n ; some extra cycles added by TARGET_SCHED_ADJUST_COST between compare\n@@ -699,22 +709,12 @@\n \n ; RIOS2 has two symmetric FPUs.\n (define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"rios2\"))\n-  2 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc630\"))\n-  3 1)\n-\n-(define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"dmul\")\n+  (and (eq_attr \"type\" \"fp,dmul\")\n        (eq_attr \"cpu\" \"rios2\"))\n   2 1)\n \n (define_function_unit \"fpu2\" 2 0\n-  (and (eq_attr \"type\" \"dmul\")\n+  (and (eq_attr \"type\" \"fp,dmul\")\n        (eq_attr \"cpu\" \"ppc630\"))\n   3 1)\n \n@@ -748,6 +748,107 @@\n        (eq_attr \"cpu\" \"ppc630\"))\n   26 26)\n \n+;; Power4\n+(define_function_unit \"lsu2\" 2 0\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  3 1)\n+\n+(define_function_unit \"lsu2\" 2 0\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  5 1)\n+\n+(define_function_unit \"lsu2\" 2 0\n+  (and (eq_attr \"type\" \"store,fpstore\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  1 1)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  2 1)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul,lmul\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  7 6)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul2\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  5 4)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul3\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  4 3)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  36 35)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  68 67)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  36 35)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  68 67)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"compare,delayed_compare\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  2 1)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  3 1)\n+\n+(define_function_unit \"bpu\" 1 0\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  3 1)\n+\n+(define_function_unit \"bpu\" 1 0\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  2 1)\n+\n+(define_function_unit \"cru\" 1 0\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  4 1)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  6 1)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  8 2)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"sdiv,ddiv\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  33 28)\n+\n+(define_function_unit \"fpu2\" 2 0\n+  (and (eq_attr \"type\" \"ssqrt,dsqrt\")\n+       (eq_attr \"cpu\" \"power4\"))\n+  40 35)\n+\n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n ;; complex forms.  Basic data transfer is done later.\n@@ -7778,7 +7879,7 @@\n    mr %0,%1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n    {st%U0%U1|stw%U0%U1} %1,%0\"\n-  [(set_attr \"type\" \"*,*,*,compare,*,*,load,store\")\n+  [(set_attr \"type\" \"cr_logical,cr_logical,cr_logical,cr_logical,cr_logical,*,load,store\")\n    (set_attr \"length\" \"*,*,12,*,8,*,*,*\")])\n \f\n ;; For floating-point, we normally deal with the floating-point registers\n@@ -10585,7 +10686,8 @@\n \t\t\t    (const_int 0)]))]\n   \"\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n-  [(set_attr \"length\" \"12\")])\n+  [(set_attr \"type\" \"cr_logical\")\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -10594,7 +10696,8 @@\n \t\t\t    (const_int 0)]))]\n   \"TARGET_POWERPC64\"\n   \"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n-  [(set_attr \"length\" \"12\")])\n+  [(set_attr \"type\" \"cr_logical\")\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -10650,7 +10753,8 @@\n \n   return \\\"%D1mfcr %0\\;{rlinm|rlwinm} %0,%0,%4,%5,%5\\\";\n }\"\n- [(set_attr \"length\" \"12\")])\n+  [(set_attr \"type\" \"cr_logical\")\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -10719,9 +10823,10 @@\n \t(match_operator:SI 4 \"scc_comparison_operator\"\n \t\t\t   [(match_operand 5 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n-   \"REGNO (operands[2]) != REGNO (operands[5])\"\n-   \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n-   [(set_attr \"length\" \"20\")])\n+  \"REGNO (operands[2]) != REGNO (operands[5])\"\n+  \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n+  [(set_attr \"type\" \"cr_logical\")\n+   (set_attr \"length\" \"20\")])\n \n (define_peephole\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -10732,9 +10837,10 @@\n \t(match_operator:DI 4 \"scc_comparison_operator\"\n \t\t\t   [(match_operand 5 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n-   \"TARGET_POWERPC64 && REGNO (operands[2]) != REGNO (operands[5])\"\n-   \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n-   [(set_attr \"length\" \"20\")])\n+  \"TARGET_POWERPC64 && REGNO (operands[2]) != REGNO (operands[5])\"\n+  \"%D1%D4mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n+  [(set_attr \"type\" \"cr_logical\")\n+   (set_attr \"length\" \"20\")])\n \n ;; There are some scc insns that can be done directly, without a compare.\n ;; These are faster because they don't involve the communications between\n@@ -13727,7 +13833,8 @@\n         (unspec:SI [(reg:CC 68) (reg:CC 69) (reg:CC 70) (reg:CC 71) \n \t\t    (reg:CC 72)\t(reg:CC 73) (reg:CC 74) (reg:CC 75)] 19))]\n   \"\"\n-  \"mfcr %0\")\n+  \"mfcr %0\"\n+  [(set_attr \"type\" \"cr_logical\")])\n \n (define_insn \"*stmw\"\n  [(match_parallel 0 \"stmw_operation\"\n@@ -13799,17 +13906,19 @@\n     mask |= INTVAL (XVECEXP (SET_SRC (XVECEXP (operands[0], 0, i)), 0, 1));\n   operands[4] = GEN_INT (mask);\n   return \\\"mtcrf %4,%2\\\";\n-}\")\n+}\"\n+  [(set_attr \"type\" \"cr_logical\")])\n \n (define_insn \"\"\n- [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-       (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t   (match_operand 2 \"immediate_operand\" \"n\")] 20))]\n- \"GET_CODE (operands[0]) == REG \n-  && CR_REGNO_P (REGNO (operands[0]))\n-  && GET_CODE (operands[2]) == CONST_INT\n-  && INTVAL (operands[2]) == 1 << (75 - REGNO (operands[0]))\"\n- \"mtcrf %R0,%1\")\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+        (unspec:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t    (match_operand 2 \"immediate_operand\" \"n\")] 20))]\n+  \"GET_CODE (operands[0]) == REG \n+   && CR_REGNO_P (REGNO (operands[0]))\n+   && GET_CODE (operands[2]) == CONST_INT\n+   && INTVAL (operands[2]) == 1 << (75 - REGNO (operands[0]))\"\n+  \"mtcrf %R0,%1\"\n+  [(set_attr \"type\" \"cr_logical\")])\n \n ; The load-multiple instructions have similar properties.\n ; Note that \"load_multiple\" is a name known to the machine-independent"}]}