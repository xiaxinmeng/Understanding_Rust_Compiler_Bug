{"sha": "77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdkYzUyOTcyMWFlYjNhM2Y5YTFjOWJhYzg2MGFlOTZmZTA4OWE1ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-27T13:16:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-27T13:16:54Z"}, "message": "re PR target/56114 (x86_64-linux-gnu-gcc generate wrong asm instruction MOVABS for intel syntax)\n\n\tPR target/56114\n\t* config/i386/i386.md (*movabs<mode>_1): Add square brackets around\n\toperand 0 in movabs insn template for -masm=intel asm alternative.\n\t(*movabs<mode>_2): Ditto for operand 1.\n\ntestsuite/ChangeLog:\n\n\tPR target/56114\n\t* gcc.target/i386/pr56114.c: New test.\n\nFrom-SVN: r195494", "tree": {"sha": "69e3a0ec7f7aa47fb74a45a5a589ec9d276b1c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e3a0ec7f7aa47fb74a45a5a589ec9d276b1c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/comments", "author": null, "committer": null, "parents": [{"sha": "ca3227497d1c87eeb275cc2d5f85af3b02436c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3227497d1c87eeb275cc2d5f85af3b02436c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3227497d1c87eeb275cc2d5f85af3b02436c9c"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "05f66351856eb60ba808a9477be515505d5d148e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "patch": "@@ -1,3 +1,10 @@\n+2013-01-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/56114\n+\t* config/i386/i386.md (*movabs<mode>_1): Add square brackets around\n+\toperand 0 in movabs insn template for -masm=intel asm alternative.\n+\t(*movabs<mode>_2): Ditto for operand 1.\n+\n 2013-01-26  David Holsgrove <david.holsgrove@xilinx.com>\n \n \tPR target/54663\n@@ -38,8 +45,8 @@\n \n \t* config/aarch64/aarch64-simd-builtins.def: Separate sq<r>dmulh_lane\n \tentries into lane and laneq entries.\n-\t* config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_lane<mode>): Remove\n-\tAdvSIMD scalar modes.\n+\t* config/aarch64/aarch64-simd.md (aarch64_sq<r>dmulh_lane<mode>):\n+\tRemove AdvSIMD scalar modes.\n \t(aarch64_sq<r>dmulh_laneq<mode>): New.\n \t(aarch64_sq<r>dmulh_lane<mode>): New RTL pattern for Scalar AdvSIMD\n \tmodes.\n@@ -91,8 +98,7 @@\n \n 2013-01-24  Diego Novillo  <dnovillo@google.com>\n \n-\t* Makefile.in (GGC): Remove.  Replace all instances with\n-\tggc-page.o.\n+\t* Makefile.in (GGC): Remove.  Replace all instances with ggc-page.o.\n \t(ggc-zone.o): Remove.\n \t* configure.ac: Remove option --with-gc.\n \t* configure: Re-generate.\n@@ -102,28 +108,23 @@\n \t(output_type_enum): Remove.  Update all users.\n \t(write_enum_defn): Remove.  Update all users.\n \t(enum alloc_zone): Remove.  Update all users.\n-\t(write_splay_tree_allocator_def): Remove generation of gt_e_*\n-\targument.\n+\t(write_splay_tree_allocator_def): Remove generation of gt_e_* argument.\n \t* ggc-common.c (ggc_splay_alloc): Remove first argument.\n \tUpdate all callers.\n \t(struct ptr_data): Remove field TYPE.  Update all users.\n-\t(gt_pch_note_object): Remove argument TYPE.  Update all\n-\tusers.\n+\t(gt_pch_note_object): Remove argument TYPE.  Update all users.\n \t* ggc-internal.h (ggc_pch_alloc_object): Remove last argument.\n \tUpdate all users.\n \t* ggc-none.c (ggc_alloc_typed_stat): Remove.\n \t(struct alloc_zone): Remove.\n \t(ggc_internal_alloc_zone_stat): Remove.\n \t(ggc_internal_cleared_alloc_zone_stat): Remove.\n \t* ggc-page.c (ggc_alloc_typed_stat): Remove.\n-\t(ggc_pch_count_object): Remove last argument.  Update all\n-\tusers.\n-\t(ggc_pch_alloc_object): Remove last argument.  Update all\n-\tusers.\n+\t(ggc_pch_count_object): Remove last argument.  Update all users.\n+\t(ggc_pch_alloc_object): Remove last argument.  Update all users.\n \t(struct alloc_zone): Remove.\n \t* ggc-zone.c: Remove.\n-\t* ggc.h (gt_pch_note_object): Remove last argument.  Update\n-\tall users.\n+\t* ggc.h (gt_pch_note_object): Remove last argument.  Update all users.\n \t(struct alloc_zone): Remove.\n \t(ggc_alloc_typed_stat): Remove.\n \t(ggc_alloc_typed): Remove.\n@@ -132,11 +133,9 @@\n \t(tree_zone): Remove.  Update all users.\n \t(tree_id_zone): Remove.  Update all users.\n \t(ggc_internal_zone_alloc_stat): Remove.  Update all users.\n-\t(ggc_internal_zone_cleared_alloc_stat): Remove.  Update all\n-\tusers.\n+\t(ggc_internal_zone_cleared_alloc_stat): Remove.  Update all users.\n \t(ggc_internal_zone_vec_alloc_stat): Remove.  Update all users.\n-\t* tree-ssanames.c: Remove references to zone allocator in\n-\tcomments.\n+\t* tree-ssanames.c: Remove references to zone allocator in comments.\n \n 2013-01-24  Georg-Johann Lay  <avr@gjlay.de>\n \n@@ -179,7 +178,8 @@\n \n 2013-01-23  Kostya Serebryany  <kcc@google.com>\n \n-\t* config/darwin.h: remove dependency on CoreFoundation (asan on Mac OS).\n+\t* config/darwin.h: remove dependency on\n+\tCoreFoundation (asan on Mac OS).\n \n 2013-01-23  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "59b5b69b13b11db37a967a8bf9738b65cbfb67e4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "patch": "@@ -2308,7 +2308,7 @@\n \t(match_operand:SWI1248x 1 \"nonmemory_operand\" \"a,r<i>\"))]\n   \"TARGET_LP64 && ix86_check_movabs (insn, 0)\"\n   \"@\n-   movabs{<imodesuffix>}\\t{%1, %P0|%P0, %1}\n+   movabs{<imodesuffix>}\\t{%1, %P0|[%P0], %1}\n    mov{<imodesuffix>}\\t{%1, %a0|%a0, %1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0,*\")\n@@ -2322,7 +2322,7 @@\n         (mem:SWI1248x (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n   \"TARGET_LP64 && ix86_check_movabs (insn, 1)\"\n   \"@\n-   movabs{<imodesuffix>}\\t{%P1, %0|%0, %P1}\n+   movabs{<imodesuffix>}\\t{%P1, %0|%0, [%P1]}\n    mov{<imodesuffix>}\\t{%a1, %0|%0, %a1}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0,*\")"}, {"sha": "e5e194919971425e7ab5c483aaa6e1f502b44ff1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "patch": "@@ -1,3 +1,8 @@\n+2013-01-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/56114\n+\t* gcc.target/i386/pr56114.c: New test.\n+\n 2013-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/55984"}, {"sha": "43e62ae3b731c00e941d57a66f9a1492e38f969d", "filename": "gcc/testsuite/gcc.target/i386/pr56114.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77dc529721aeb3a3f9a1c9bac860ae96fe089a5e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56114.c?ref=77dc529721aeb3a3f9a1c9bac860ae96fe089a5e", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -masm=intel\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target masm_intel } */\n+\n+long\n+foo2 (void)\n+{\n+  return *(volatile int *) 0xFEE00000;\n+}"}]}