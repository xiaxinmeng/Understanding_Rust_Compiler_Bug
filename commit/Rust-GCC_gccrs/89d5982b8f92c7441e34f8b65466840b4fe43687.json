{"sha": "89d5982b8f92c7441e34f8b65466840b4fe43687", "node_id": "C_kwDOANBUbNoAKDg5ZDU5ODJiOGY5MmM3NDQxZTM0ZjhiNjU0NjY4NDBiNGZlNDM2ODc", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-12-27T06:30:12Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-12-27T15:38:38Z"}, "message": "xtensa: Tabify, and trim trailing spaces\n\nCosmetic and no functional changes.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/elf.h: Tabify, and trim trailing spaces.\n\t* config/xtensa/linux.h: Likewise.\n\t* config/xtensa/uclinux.h: Likewise.\n\t* config/xtensa/xtensa-dynconfig.c: Likewise.\n\t* config/xtensa/xtensa.cc: Likewise.\n\t* config/xtensa/xtensa.h: Likewise.\n\t* config/xtensa/xtensa.md: Likewise.", "tree": {"sha": "672cda627041d9690636c9612b0b5cb1991ed65a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/672cda627041d9690636c9612b0b5cb1991ed65a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d5982b8f92c7441e34f8b65466840b4fe43687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d5982b8f92c7441e34f8b65466840b4fe43687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d5982b8f92c7441e34f8b65466840b4fe43687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d5982b8f92c7441e34f8b65466840b4fe43687/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d365acf982e50588f944c46a46ec2fff59f5798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d365acf982e50588f944c46a46ec2fff59f5798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d365acf982e50588f944c46a46ec2fff59f5798"}], "stats": {"total": 229, "additions": 113, "deletions": 116}, "files": [{"sha": "1edc1761d74d62d93ff116a6ab987fe87a51c71b", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -59,7 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n   \"crt1-sim%O%s crt0%O%s crti%O%s crtbegin%O%s _vectors%O%s\"\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"crtend%O%s crtn%O%s\"  \n+#define ENDFILE_SPEC \"crtend%O%s crtn%O%s\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \\\n@@ -86,19 +86,17 @@ along with GCC; see the file COPYING3.  If not see\n /* Search for headers in $tooldir/arch/include and for libraries and\n    startfiles in $tooldir/arch/lib.  */\n #define GCC_DRIVER_HOST_INITIALIZATION \\\n-do \\\n-{ \\\n-  char *tooldir, *archdir; \\\n-  tooldir = concat (tooldir_base_prefix, spec_machine, \\\n-\t\t    dir_separator_str, NULL); \\\n-  if (!IS_ABSOLUTE_PATH (tooldir)) \\\n-    tooldir = concat (standard_exec_prefix, spec_machine, dir_separator_str, \\\n-\t\t      spec_version, dir_separator_str, tooldir, NULL); \\\n-  archdir = concat (tooldir, \"arch\", dir_separator_str, NULL); \\\n-  add_prefix (&startfile_prefixes, \\\n-\t      concat (archdir, \"lib\", dir_separator_str, NULL), \\\n-\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, 1); \\\n-  add_prefix (&include_prefixes, archdir, \\\n-\t      \"GCC\", PREFIX_PRIORITY_LAST, 0, 0); \\\n-  } \\\n-while (0)\n+  do { \\\n+    char *tooldir, *archdir; \\\n+    tooldir = concat (tooldir_base_prefix, spec_machine, \\\n+\t\t      dir_separator_str, NULL); \\\n+    if (!IS_ABSOLUTE_PATH (tooldir)) \\\n+      tooldir = concat (standard_exec_prefix, spec_machine, dir_separator_str, \\\n+\t\t\tspec_version, dir_separator_str, tooldir, NULL); \\\n+    archdir = concat (tooldir, \"arch\", dir_separator_str, NULL); \\\n+    add_prefix (&startfile_prefixes, \\\n+\t\tconcat (archdir, \"lib\", dir_separator_str, NULL), \\\n+\t\t\"GCC\", PREFIX_PRIORITY_LAST, 0, 1); \\\n+    add_prefix (&include_prefixes, archdir, \\\n+\t\t\"GCC\", PREFIX_PRIORITY_LAST, 0, 0); \\\n+  } while (0)"}, {"sha": "198edfe0553175665dc4ae3f3361cdb5a63cf606", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -69,4 +69,3 @@ along with GCC; see the file COPYING3.  If not see\n #define XTENSA_ALWAYS_PIC 1\n \n #undef DEBUGGER_REGNO\n-"}, {"sha": "5787b2f1ab957ff6790308bc7bd1623da0bece19", "filename": "gcc/config/xtensa/uclinux.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fuclinux.h?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -71,4 +71,3 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n \n #undef DEBUGGER_REGNO\n-"}, {"sha": "0a611fd14b03e58446a541a72ba060c3f8458900", "filename": "gcc/config/xtensa/xtensa-dynconfig.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-dynconfig.c?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -35,7 +35,7 @@\n \n #if !defined (HAVE_DLFCN_H) && defined (_WIN32)\n \n-#define RTLD_LAZY 0      /* Dummy value.  */\n+#define RTLD_LAZY 0\t/* Dummy value.  */\n \n static void *\n dlopen (const char *file, int mode ATTRIBUTE_UNUSED)\n@@ -142,8 +142,8 @@ XTENSA_CONFIG_INSTANCE_LIST;\n #define XTENSA_CONFIG_ENTRY(a) \"__\" #a \"=\" STRINGIFY(a)\n \n static const char * const xtensa_config_strings[] = {\n-    XTENSA_CONFIG_ENTRY_LIST,\n-    NULL,\n+  XTENSA_CONFIG_ENTRY_LIST,\n+  NULL,\n };\n \n const struct xtensa_config_v1 *xtensa_get_config_v1 (void)"}, {"sha": "178d16a784621a9dad8e8474e5a5a2c0c3901632", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -176,7 +176,7 @@ static bool constantpool_address_p (const_rtx addr);\n static bool xtensa_legitimate_constant_p (machine_mode, rtx);\n static void xtensa_reorg (void);\n static bool xtensa_can_use_doloop_p (const widest_int &, const widest_int &,\n-                                     unsigned int, bool);\n+\t\t\t\t     unsigned int, bool);\n static const char *xtensa_invalid_within_doloop (const rtx_insn *);\n \n static bool xtensa_member_type_forces_blk (const_tree,\n@@ -2115,7 +2115,7 @@ xtensa_emit_loop_end (rtx_insn *insn, rtx *operands)\n \t      done = 1;\n \t  }\n \t  break;\n-        }\n+\t}\n     }\n \n   output_asm_insn (\"%1_LEND:\", operands);\n@@ -2314,7 +2314,7 @@ xtensa_tls_module_base (void)\n       xtensa_tls_module_base_symbol =\n \tgen_rtx_SYMBOL_REF (Pmode, \"_TLS_MODULE_BASE_\");\n       SYMBOL_REF_FLAGS (xtensa_tls_module_base_symbol)\n-        |= TLS_MODEL_GLOBAL_DYNAMIC << SYMBOL_FLAG_TLS_SHIFT;\n+\t|= TLS_MODEL_GLOBAL_DYNAMIC << SYMBOL_FLAG_TLS_SHIFT;\n     }\n \n   return xtensa_tls_module_base_symbol;\n@@ -3409,7 +3409,7 @@ xtensa_expand_prologue (void)\n \t    }\n \t}\n       else\n-        {\n+\t{\n \t  insn = emit_insn (gen_movsi (hard_frame_pointer_rtx,\n \t\t\t\t       stack_pointer_rtx));\n \t  if (!TARGET_WINDOWED_ABI)\n@@ -3532,11 +3532,12 @@ xtensa_set_return_address (rtx address, rtx scratch)\n \t\t\t  gen_rtx_REG (SImode, A0_REG));\n   rtx insn;\n \n-  if (total_size > 1024) {\n-    emit_move_insn (scratch, GEN_INT (total_size - UNITS_PER_WORD));\n-    emit_insn (gen_addsi3 (scratch, frame, scratch));\n-    a0_addr = scratch;\n-  }\n+  if (total_size > 1024)\n+    {\n+      emit_move_insn (scratch, GEN_INT (total_size - UNITS_PER_WORD));\n+      emit_insn (gen_addsi3 (scratch, frame, scratch));\n+      a0_addr = scratch;\n+    }\n \n   insn = emit_move_insn (gen_frame_mem (SImode, a0_addr), address);\n   RTX_FRAME_RELATED_P (insn) = 1;\n@@ -3818,8 +3819,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   /* Check if the argument is in registers:\n \n      if ((AP).__va_ndx <= __MAX_ARGS_IN_REGISTERS * 4\n-         && !must_pass_in_stack (type))\n-        __array = (AP).__va_reg; */\n+\t && !must_pass_in_stack (type))\n+\t__array = (AP).__va_reg; */\n \n   array = create_tmp_var (ptr_type_node);\n \n@@ -4515,8 +4516,8 @@ xtensa_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n /* Worker function for TARGET_FUNCTION_VALUE.  */\n \n rtx\n-xtensa_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED, \n-                      bool outgoing)\n+xtensa_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n+\t\t       bool outgoing)\n {\n   return gen_rtx_REG ((INTEGRAL_TYPE_P (valtype)\n                       && TYPE_PRECISION (valtype) < BITS_PER_WORD)\n@@ -4719,7 +4720,7 @@ xtensa_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n \n static bool\n xtensa_can_use_doloop_p (const widest_int &, const widest_int &,\n-                         unsigned int loop_depth, bool entered_at_top)\n+\t\t\t unsigned int loop_depth, bool entered_at_top)\n {\n   /* Considering limitations in the hardware, only use doloop\n      for innermost loops which must be entered from the top.  */\n@@ -4758,41 +4759,41 @@ hwloop_optimize (hwloop_info loop)\n   if (loop->depth > 1)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d is not innermost\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d is not innermost\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n   if (!loop->incoming_dest)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d has more than one entry\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d has more than one entry\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n   if (loop->incoming_dest != loop->head)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d is not entered from head\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d is not entered from head\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n   if (loop->has_call || loop->has_asm)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d has invalid insn\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d has invalid insn\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n   /* Scan all the blocks to make sure they don't use iter_reg.  */\n   if (loop->iter_reg_used || loop->iter_reg_used_outside)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d uses iterator\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d uses iterator\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n@@ -4804,8 +4805,8 @@ hwloop_optimize (hwloop_info loop)\n   if (!insn)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \";; loop %d start_label not before loop_end\\n\",\n-                 loop->loop_no);\n+\tfprintf (dump_file, \";; loop %d start_label not before loop_end\\n\",\n+\t\t loop->loop_no);\n       return false;\n     }\n \n@@ -4829,8 +4830,8 @@ hwloop_optimize (hwloop_info loop)\n   start_sequence ();\n \n   insn = emit_insn (gen_zero_cost_loop_start (loop->iter_reg,\n-                                              loop->start_label,\n-                                              loop->iter_reg));\n+\t\t\t\t\t      loop->start_label,\n+\t\t\t\t\t      loop->iter_reg));\n \n   seq = get_insns ();\n \n@@ -4846,21 +4847,21 @@ hwloop_optimize (hwloop_info loop)\n       seq = emit_label_before (gen_label_rtx (), seq);\n       new_bb = create_basic_block (seq, insn, entry_bb);\n       FOR_EACH_EDGE (e, ei, loop->incoming)\n-        {\n-          if (!(e->flags & EDGE_FALLTHRU))\n-            redirect_edge_and_branch_force (e, new_bb);\n-          else\n-            redirect_edge_succ (e, new_bb);\n-        }\n+\t{\n+\t  if (!(e->flags & EDGE_FALLTHRU))\n+\t    redirect_edge_and_branch_force (e, new_bb);\n+\t  else\n+\t    redirect_edge_succ (e, new_bb);\n+\t}\n \n       make_edge (new_bb, loop->head, 0);\n     }\n   else\n     {\n       while (DEBUG_INSN_P (entry_after)\n-             || (NOTE_P (entry_after)\n+\t     || (NOTE_P (entry_after)\n \t\t && NOTE_KIND (entry_after) != NOTE_INSN_BASIC_BLOCK))\n-        entry_after = PREV_INSN (entry_after);\n+\tentry_after = PREV_INSN (entry_after);\n \n       emit_insn_after (seq, entry_after);\n     }\n@@ -4881,15 +4882,15 @@ hwloop_fail (hwloop_info loop)\n   rtx_insn *insn = loop->loop_end;\n \n   emit_insn_before (gen_addsi3 (loop->iter_reg,\n-                                loop->iter_reg,\n-                                constm1_rtx),\n-                    loop->loop_end);\n+\t\t\t\tloop->iter_reg,\n+\t\t\t\tconstm1_rtx),\n+\t\t    loop->loop_end);\n \n   test = gen_rtx_NE (VOIDmode, loop->iter_reg, const0_rtx);\n   insn = emit_jump_insn_before (gen_cbranchsi4 (test,\n-                                                loop->iter_reg, const0_rtx,\n-                                                loop->start_label),\n-                                loop->loop_end);\n+\t\t\t\t\t\tloop->iter_reg, const0_rtx,\n+\t\t\t\t\t\tloop->start_label),\n+\t\t\t\tloop->loop_end);\n \n   JUMP_LABEL (insn) = loop->start_label;\n   LABEL_NUSES (loop->start_label)++;"}, {"sha": "60d3fdfbc706a6bdf1262e852451587093248dfb", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_S32C1I\t\tXCHAL_HAVE_S32C1I\n #define TARGET_ABSOLUTE_LITERALS XSHAL_USE_ABSOLUTE_LITERALS\n #define TARGET_THREADPTR\tXCHAL_HAVE_THREADPTR\n-#define TARGET_LOOPS\t        XCHAL_HAVE_LOOPS\n+#define TARGET_LOOPS\t\tXCHAL_HAVE_LOOPS\n #define TARGET_WINDOWED_ABI_DEFAULT (XSHAL_ABI == XTHAL_ABI_WINDOWED)\n #define TARGET_WINDOWED_ABI\txtensa_windowed_abi\n #define TARGET_DEBUG\t\tXCHAL_HAVE_DEBUG\n@@ -286,7 +286,7 @@ extern int leaf_function;\n \n /* Coprocessor registers */\n #define BR_REG_FIRST 18\n-#define BR_REG_LAST  18 \n+#define BR_REG_LAST  18\n #define BR_REG_NUM   (BR_REG_LAST - BR_REG_FIRST + 1)\n \n /* 16 floating-point registers */\n@@ -742,7 +742,7 @@ typedef struct xtensa_args\n \n \n /* Define output to appear before the constant pool.  */\n-#define ASM_OUTPUT_POOL_PROLOGUE(FILE, FUNNAME, FUNDECL, SIZE)          \\\n+#define ASM_OUTPUT_POOL_PROLOGUE(FILE, FUNNAME, FUNDECL, SIZE)\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if ((SIZE) > 0 || !TARGET_WINDOWED_ABI)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a77d3285bad129fe63ac91c36a22778e91dd6eb1", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d5982b8f92c7441e34f8b65466840b4fe43687/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=89d5982b8f92c7441e34f8b65466840b4fe43687", "patch": "@@ -70,13 +70,13 @@\n \n ;; This code iterator is for floating-point comparisons.\n (define_code_iterator any_scc_sf [eq lt le uneq unlt unle unordered])\n-(define_code_attr scc_sf [(eq \"oeq\") (lt \"olt\") (le \"ole\") \n+(define_code_attr scc_sf [(eq \"oeq\") (lt \"olt\") (le \"ole\")\n \t\t\t  (uneq \"ueq\") (unlt \"ult\") (unle \"ule\")\n \t\t\t  (unordered \"un\")])\n \n ;; This iterator and attribute allow to combine most atomic operations.\n (define_code_iterator ATOMIC [and ior xor plus minus mult])\n-(define_code_attr atomic [(and \"and\") (ior \"ior\") (xor \"xor\") \n+(define_code_attr atomic [(and \"and\") (ior \"ior\") (xor \"xor\")\n \t\t\t  (plus \"add\") (minus \"sub\") (mult \"nand\")])\n \n ;; This mode iterator allows the HI and QI patterns to be defined from\n@@ -195,7 +195,7 @@\n \n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"\"\n   \"sub\\t%0, %1, %2\"\n@@ -434,7 +434,7 @@\n \n (define_insn \"<code>si3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (any_minmax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t(any_minmax:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n \t\t       (match_operand:SI 2 \"register_operand\" \"r\")))]\n   \"TARGET_MINMAX\"\n   \"<minmax>\\t%0, %1, %2\"\n@@ -507,7 +507,7 @@\n \n (define_expand \"bswapsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (bswap:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n+\t(bswap:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"!optimize_debug && optimize > 1\"\n {\n   /* GIMPLE manual byte-swapping recognition is now activated.\n@@ -1022,7 +1022,7 @@\n    %v0s32i\\t%1, %0\n    rsr\\t%0, ACCLO\n    wsr\\t%1, ACCLO\"\n-  [(set_attr \"type\" \"move,move,move,load,store,store,move,move,move,move,move,load,load,store,rsr,wsr\")\n+  [(set_attr \"type\"\t\"move,move,move,load,store,store,move,move,move,move,move,load,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,3,6,3,3,3,3,3\")])\n \n@@ -1170,7 +1170,7 @@\n   \"((register_operand (operands[0], SFmode)\n      || register_operand (operands[1], SFmode))\n     && !(FP_REG_P (xt_true_regnum (operands[0]))\n-         && (constantpool_mem_p (operands[1]) || CONSTANT_P (operands[1]))))\"\n+\t && (constantpool_mem_p (operands[1]) || CONSTANT_P (operands[1]))))\"\n   \"@\n    mov.s\\t%0, %1\n    %v1lsi\\t%0, %1\n@@ -1355,7 +1355,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,a\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"J,r\")))]\n-  \"\"      \n+  \"\"\n   \"@\n    slli\\t%0, %1, %R2\n    ssl\\t%2\\;sll\\t%0, %1\"\n@@ -1941,13 +1941,13 @@\n \n (define_insn \"zero_cost_loop_start\"\n   [(set (pc)\n-        (if_then_else (ne (match_operand:SI 2 \"register_operand\" \"0\")\n-                          (const_int 1))\n-                      (label_ref (match_operand 1 \"\" \"\"))\n-                      (pc)))\n+\t(if_then_else (ne (match_operand:SI 2 \"register_operand\" \"0\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))\n    (set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (plus (match_dup 0)\n-              (const_int -1)))\n+\t(plus (match_dup 0)\n+\t      (const_int -1)))\n    (unspec [(const_int 0)] UNSPEC_LSETUP_START)]\n   \"TARGET_LOOPS && optimize\"\n   \"loop\\t%0, %l1_LEND\"\n@@ -1957,13 +1957,13 @@\n \n (define_insn \"zero_cost_loop_end\"\n   [(set (pc)\n-        (if_then_else (ne (match_operand:SI 2 \"nonimmediate_operand\" \"0,0\")\n-                          (const_int 1))\n-                      (label_ref (match_operand 1 \"\" \"\"))\n-                      (pc)))\n+\t(if_then_else (ne (match_operand:SI 2 \"nonimmediate_operand\" \"0,0\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=a,m\")\n-        (plus (match_dup 0)\n-              (const_int -1)))\n+\t(plus (match_dup 0)\n+\t      (const_int -1)))\n    (unspec [(const_int 0)] UNSPEC_LSETUP_END)\n    (clobber (match_scratch:SI 3 \"=X,&r\"))]\n   \"TARGET_LOOPS && optimize\"\n@@ -1974,13 +1974,13 @@\n \n (define_insn \"loop_end\"\n   [(set (pc)\n-        (if_then_else (ne (match_operand:SI 2 \"register_operand\" \"0\")\n-                          (const_int 1))\n-                      (label_ref (match_operand 1 \"\" \"\"))\n-                      (pc)))\n+\t(if_then_else (ne (match_operand:SI 2 \"register_operand\" \"0\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))\n    (set (match_operand:SI 0 \"register_operand\" \"=a\")\n-        (plus (match_dup 0)\n-              (const_int -1)))\n+\t(plus (match_dup 0)\n+\t      (const_int -1)))\n    (unspec [(const_int 0)] UNSPEC_LSETUP_END)]\n   \"TARGET_LOOPS && optimize\"\n {\n@@ -1993,13 +1993,13 @@\n \n (define_split\n   [(set (pc)\n-        (if_then_else (ne (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-                          (const_int 1))\n-                      (label_ref (match_operand 1 \"\" \"\"))\n-                      (pc)))\n+\t(if_then_else (ne (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t\t\t  (const_int 1))\n+\t\t      (label_ref (match_operand 1 \"\" \"\"))\n+\t\t      (pc)))\n    (set (match_operand:SI 2 \"nonimmediate_operand\" \"\")\n-        (plus:SI (match_dup 0)\n-                 (const_int -1)))\n+\t(plus:SI (match_dup 0)\n+\t\t (const_int -1)))\n    (unspec [(const_int 0)] UNSPEC_LSETUP_END)\n    (clobber (match_scratch 3))]\n   \"TARGET_LOOPS && optimize && reload_completed\"\n@@ -2015,7 +2015,7 @@\n       emit_move_insn (operands[0], operands[3]);\n       test = gen_rtx_NE (VOIDmode, operands[3], const0_rtx);\n       emit_jump_insn (gen_cbranchsi4 (test, operands[3],\n-                                      const0_rtx, operands[1]));\n+\t\t\t\t      const0_rtx, operands[1]));\n     }\n   else\n     {\n@@ -2029,15 +2029,15 @@\n ; operand 1 is the label to jump to at the top of the loop\n (define_expand \"doloop_end\"\n   [(parallel [(set (pc) (if_then_else\n-                          (ne (match_operand:SI 0 \"\" \"\")\n-                              (const_int 1))\n-                          (label_ref (match_operand 1 \"\" \"\"))\n-                          (pc)))\n-              (set (match_dup 0)\n-                   (plus:SI (match_dup 0)\n-                            (const_int -1)))\n-              (unspec [(const_int 0)] UNSPEC_LSETUP_END)\n-              (clobber (match_dup 2))])] ; match_scratch\n+\t\t\t  (ne (match_operand:SI 0 \"\" \"\")\n+\t\t\t      (const_int 1))\n+\t\t\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t\t\t  (pc)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:SI (match_dup 0)\n+\t\t\t    (const_int -1)))\n+\t      (unspec [(const_int 0)] UNSPEC_LSETUP_END)\n+\t      (clobber (match_dup 2))])] ; match_scratch\n   \"TARGET_LOOPS && optimize\"\n {\n   /* The loop optimizer doesn't check the predicates... */\n@@ -2276,8 +2276,8 @@\n \n (define_insn \"call_value_internal\"\n   [(set (match_operand 0 \"register_operand\" \"=a\")\n-        (call (mem (match_operand:SI 1 \"call_insn_operand\" \"nir\"))\n-              (match_operand 2 \"\" \"i\")))]\n+\t(call (mem (match_operand:SI 1 \"call_insn_operand\" \"nir\"))\n+\t      (match_operand 2 \"\" \"i\")))]\n   \"!SIBLING_CALL_P (insn)\"\n {\n   return xtensa_emit_call (1, operands);\n@@ -2382,9 +2382,9 @@\n \n (define_expand \"allocate_stack\"\n   [(set (match_operand 0 \"nonimmed_operand\")\n-        (minus (reg A1_REG) (match_operand 1 \"add_operand\")))\n+\t(minus (reg A1_REG) (match_operand 1 \"add_operand\")))\n    (set (reg A1_REG)\n-        (minus (reg A1_REG) (match_dup 1)))]\n+\t(minus (reg A1_REG) (match_dup 1)))]\n   \"TARGET_WINDOWED_ABI\"\n {\n   if (CONST_INT_P (operands[1]))\n@@ -2509,7 +2509,7 @@\n \n (define_expand \"frame_blockage\"\n   [(set (match_dup 0)\n-        (unspec:BLK [(match_dup 1)] UNSPEC_FRAME_BLOCKAGE))]\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_FRAME_BLOCKAGE))]\n   \"\"\n {\n   operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n@@ -2519,7 +2519,7 @@\n \n (define_insn \"*frame_blockage\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n-        (unspec:BLK [(match_operand:SI 1 \"\" \"\")] UNSPEC_FRAME_BLOCKAGE))]\n+\t(unspec:BLK [(match_operand:SI 1 \"\" \"\")] UNSPEC_FRAME_BLOCKAGE))]\n   \"\"\n   \"\"\n   [(set_attr \"type\"\t\"nop\")\n@@ -2796,7 +2796,7 @@\n (define_expand \"sync_new_<atomic><mode>\"\n   [(set (match_operand:HQI 0 \"register_operand\")\n \t(ATOMIC:HQI (match_operand:HQI 1 \"memory_operand\")\n-\t\t    (match_operand:HQI 2 \"register_operand\"))) \n+\t\t    (match_operand:HQI 2 \"register_operand\")))\n    (set (match_dup 1) (ATOMIC:HQI (match_dup 1) (match_dup 2)))]\n   \"TARGET_S32C1I\"\n {"}]}