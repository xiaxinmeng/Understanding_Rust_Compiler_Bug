{"sha": "646e979c43b8c84f0f70ea8f1709dfa2909726cd", "node_id": "C_kwDOANBUbNoAKDY0NmU5NzljNDNiOGM4NGYwZjcwZWE4ZjE3MDlkZmEyOTA5NzI2Y2Q", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-28T11:22:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-09T00:32:45Z"}, "message": "libstdc++: Add [[nodiscard]] to chrono conversion functions\n\nAlso add doxygen comments.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/chrono.h (duration_cast, floor, round, abs, ceil)\n\t(time_point_cast): Add [[nodiscard]] attribute and doxygen\n\tcomments.\n\t(treat_as_floating_point): Add doxygen commen.", "tree": {"sha": "3626e6dc32fbd6f458b94ed4818770576b2be666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3626e6dc32fbd6f458b94ed4818770576b2be666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646e979c43b8c84f0f70ea8f1709dfa2909726cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646e979c43b8c84f0f70ea8f1709dfa2909726cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646e979c43b8c84f0f70ea8f1709dfa2909726cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646e979c43b8c84f0f70ea8f1709dfa2909726cd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eec3114ebe8d4c55c64b4e47546d3d8f95eb09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eec3114ebe8d4c55c64b4e47546d3d8f95eb09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eec3114ebe8d4c55c64b4e47546d3d8f95eb09b"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "22c0be3fbe6de4b7eba35366011005f5bc0ed662", "filename": "libstdc++-v3/include/bits/chrono.h", "status": "modified", "additions": 123, "deletions": 16, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646e979c43b8c84f0f70ea8f1709dfa2909726cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646e979c43b8c84f0f70ea8f1709dfa2909726cd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h?ref=646e979c43b8c84f0f70ea8f1709dfa2909726cd", "patch": "@@ -246,8 +246,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// @endcond\n \n-    /// duration_cast\n+    /** Convert a `duration` to type `ToDur`.\n+     *\n+     * If the duration cannot be represented accurately in the result type,\n+     * returns the result of integer truncation (i.e., rounded towards zero).\n+     *\n+     * @tparam _ToDur The result type must be a `duration`.\n+     * @param __d A duration.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++11\n+     */\n     template<typename _ToDur, typename _Rep, typename _Period>\n+      _GLIBCXX_NODISCARD\n       constexpr __enable_if_is_duration<_ToDur>\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n@@ -260,7 +270,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __dc::__cast(__d);\n       }\n \n-    /// treat_as_floating_point\n+    /** Trait indicating whether to treat a type as a floating-point type.\n+     *\n+     * The chrono library uses this trait to tell whether a `duration` can\n+     * represent fractional values of the given precision, or only integral\n+     * values.\n+     *\n+     * You should specialize this trait for your own numeric types that are\n+     * used with `duration` and can represent non-integral values.\n+     *\n+     * @since C++11\n+     */\n     template<typename _Rep>\n       struct treat_as_floating_point\n       : is_floating_point<_Rep>\n@@ -320,8 +340,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201703L\n # define __cpp_lib_chrono 201611L\n \n+    /** Convert a `duration` to type `ToDur` and round down.\n+     *\n+     * If the duration cannot be represented exactly in the result type,\n+     * returns the closest value that is less than the argument.\n+     *\n+     * @tparam _ToDur The result type must be a `duration`.\n+     * @param __d A duration.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template<typename _ToDur, typename _Rep, typename _Period>\n-      constexpr __enable_if_is_duration<_ToDur>\n+      [[nodiscard]] constexpr __enable_if_is_duration<_ToDur>\n       floor(const duration<_Rep, _Period>& __d)\n       {\n \tauto __to = chrono::duration_cast<_ToDur>(__d);\n@@ -330,8 +360,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __to;\n       }\n \n+    /** Convert a `duration` to type `ToDur` and round up.\n+     *\n+     * If the duration cannot be represented exactly in the result type,\n+     * returns the closest value that is greater than the argument.\n+     *\n+     * @tparam _ToDur The result type must be a `duration`.\n+     * @param __d A duration.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template<typename _ToDur, typename _Rep, typename _Period>\n-      constexpr __enable_if_is_duration<_ToDur>\n+      [[nodiscard]] constexpr __enable_if_is_duration<_ToDur>\n       ceil(const duration<_Rep, _Period>& __d)\n       {\n \tauto __to = chrono::duration_cast<_ToDur>(__d);\n@@ -340,8 +380,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __to;\n       }\n \n+    /** Convert a `duration` to type `ToDur` and round to the closest value.\n+     *\n+     * If the duration cannot be represented exactly in the result type,\n+     * returns the closest value, rounding ties to even.\n+     *\n+     * @tparam _ToDur The result type must be a `duration` with a\n+     *                non-floating-point `rep` type.\n+     * @param __d A duration.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template <typename _ToDur, typename _Rep, typename _Period>\n-      constexpr enable_if_t<\n+      [[nodiscard]] constexpr\n+      enable_if_t<\n \t__and_<__is_duration<_ToDur>,\n \t       __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,\n \t_ToDur>\n@@ -352,18 +404,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tauto __diff0 = __d - __t0;\n \tauto __diff1 = __t1 - __d;\n \tif (__diff0 == __diff1)\n-\t{\n+\t  {\n \t    if (__t0.count() & 1)\n-\t\treturn __t1;\n+\t      return __t1;\n \t    return __t0;\n-\t}\n+\t  }\n \telse if (__diff0 < __diff1)\n-\t    return __t0;\n+\t  return __t0;\n \treturn __t1;\n       }\n \n+    /** The absolute (non-negative) value of a duration.\n+     *\n+     * @param __d A duration with a signed `rep` type.\n+     * @return A duration of the same type as the argument, with value |d|.\n+     * @since C++17\n+     */\n     template<typename _Rep, typename _Period>\n-      constexpr\n+      [[nodiscard]] constexpr\n       enable_if_t<numeric_limits<_Rep>::is_signed, duration<_Rep, _Period>>\n       abs(duration<_Rep, _Period> __d)\n       {\n@@ -925,37 +983,86 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tduration __d;\n       };\n \n-    /// time_point_cast\n+    /** Convert a `time_point` to use `duration` type `ToDur`.\n+     *\n+     * The result is the same time point as measured by the same clock, but\n+     * using the specified `duration` to represent the time.\n+     * If the time point cannot be represented accurately in the result type,\n+     * returns the result of integer truncation (i.e., rounded towards zero).\n+     *\n+     * @tparam _ToDur The `duration` type to use for the result.\n+     * @param __t A time point.\n+     * @return The value of `__t` converted to use type `_ToDur`.\n+     * @since C++11\n+     */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n-      constexpr typename enable_if<__is_duration<_ToDur>::value,\n-\t\t\t\t   time_point<_Clock, _ToDur>>::type\n+      _GLIBCXX_NODISCARD constexpr\n+      __enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n       time_point_cast(const time_point<_Clock, _Dur>& __t)\n       {\n \ttypedef time_point<_Clock, _ToDur>\t\t\t__time_point;\n \treturn __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));\n       }\n \n #if __cplusplus > 201402L\n+    /** Convert a `time_point` to type `ToDur` and round down.\n+     *\n+     * The result is the same time point as measured by the same clock, but\n+     * using the specified `duration` to represent the time.\n+     * If the time point cannot be represented exactly in the result type,\n+     * returns the closest value that is less than the argument.\n+     *\n+     * @tparam _ToDur The `duration` type to use for the result.\n+     * @param __t A time point.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n-      constexpr\n+      [[nodiscard]] constexpr\n       enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n       floor(const time_point<_Clock, _Dur>& __tp)\n       {\n \treturn time_point<_Clock, _ToDur>{\n \t    chrono::floor<_ToDur>(__tp.time_since_epoch())};\n       }\n \n+    /** Convert a `time_point` to type `ToDur` and round up.\n+     *\n+     * The result is the same time point as measured by the same clock, but\n+     * using the specified `duration` to represent the time.\n+     * If the time point cannot be represented exactly in the result type,\n+     * returns the closest value that is greater than the argument.\n+     *\n+     * @tparam _ToDur The `duration` type to use for the result.\n+     * @param __t A time point.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n-      constexpr\n+      [[nodiscard]] constexpr\n       enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n       ceil(const time_point<_Clock, _Dur>& __tp)\n       {\n \treturn time_point<_Clock, _ToDur>{\n \t    chrono::ceil<_ToDur>(__tp.time_since_epoch())};\n       }\n \n+    /** Convert a `time_point` to type `ToDur` and round to the closest value.\n+     *\n+     * The result is the same time point as measured by the same clock, but\n+     * using the specified `duration` to represent the time.\n+     * If the time point cannot be represented exactly in the result type,\n+     * returns the closest value, rounding ties to even.\n+     *\n+     * @tparam _ToDur The `duration` type to use for the result,\n+     *                which must have a non-floating-point `rep` type.\n+     * @param __t A time point.\n+     * @return The value of `__d` converted to type `_ToDur`.\n+     * @since C++17\n+     */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n-      constexpr enable_if_t<\n+      [[nodiscard]] constexpr\n+      enable_if_t<\n \t__and_<__is_duration<_ToDur>,\n \t       __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,\n \ttime_point<_Clock, _ToDur>>"}]}