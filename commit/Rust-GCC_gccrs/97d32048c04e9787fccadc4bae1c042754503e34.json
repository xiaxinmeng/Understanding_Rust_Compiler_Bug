{"sha": "97d32048c04e9787fccadc4bae1c042754503e34", "node_id": "C_kwDOANBUbNoAKDk3ZDMyMDQ4YzA0ZTk3ODdmY2NhZGM0YmFlMWMwNDI3NTQ1MDNlMzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-29T07:49:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-07-29T07:49:11Z"}, "message": "openmp: Fix up handling of non-rectangular simd loops with pointer type iterators [PR106449]\n\nThere were 2 issues visible on this new testcase, one that we didn't have\nspecial POINTER_TYPE_P handling in a few spots of expand_omp_simd - for\npointers we need to use POINTER_PLUS_EXPR and need to have the non-pointer\npart in sizetype, for non-rectangular loop on the other side we can rely on\nmultiplication factor 1, pointers can't be multiplied, without those changes\nwe'd ICE.  The other issue was that we put n2 expression directly into a\ncomparison in a condition and regimplified that, for the &a[512] case that\nand with gimplification being destructed that unfortunately meant modification\nof original fd->loops[?].n2.  Fixed by unsharing the expression.  This was\ncausing a runtime failure on the testcase.\n\n2022-07-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/106449\n\t* omp-expand.cc (expand_omp_simd): Fix up handling of pointer\n\titerators in non-rectangular simd loops.  Unshare fd->loops[i].n2\n\tor n2 before regimplifying it inside of a condition.\n\n\t* testsuite/libgomp.c-c++-common/pr106449.c: New test.", "tree": {"sha": "fc4aa18b0034c09ed0614d1757add4a0fbaedcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4aa18b0034c09ed0614d1757add4a0fbaedcaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97d32048c04e9787fccadc4bae1c042754503e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d32048c04e9787fccadc4bae1c042754503e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d32048c04e9787fccadc4bae1c042754503e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d32048c04e9787fccadc4bae1c042754503e34/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4796d16de657d7c2720471e61432de0f4a5cb6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4796d16de657d7c2720471e61432de0f4a5cb6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4796d16de657d7c2720471e61432de0f4a5cb6df"}], "stats": {"total": 119, "additions": 101, "deletions": 18}, "files": [{"sha": "936adff7f45ff85f3c2277fa5b4c866e92b71f3d", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d32048c04e9787fccadc4bae1c042754503e34/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d32048c04e9787fccadc4bae1c042754503e34/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=97d32048c04e9787fccadc4bae1c042754503e34", "patch": "@@ -6696,7 +6696,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       if (fd->loops[i].m2)\n \tt = n2v = create_tmp_var (itype);\n       else\n-\tt = fold_convert (itype, fd->loops[i].n2);\n+\tt = fold_convert (itype, unshare_expr (fd->loops[i].n2));\n       t = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t\t    false, GSI_CONTINUE_LINKING);\n       tree v = fd->loops[i].v;\n@@ -6710,7 +6710,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       if (fd->collapse > 1 && !broken_loop)\n \tt = n2var;\n       else\n-\tt = fold_convert (type, n2);\n+\tt = fold_convert (type, unshare_expr (n2));\n       t = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t\t    false, GSI_CONTINUE_LINKING);\n       tree v = fd->loop.v;\n@@ -6819,7 +6819,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  if (fd->loops[i].m2)\n \t    t = nextn2v = create_tmp_var (itype);\n \t  else\n-\t    t = fold_convert (itype, fd->loops[i].n2);\n+\t    t = fold_convert (itype, unshare_expr (fd->loops[i].n2));\n \t  t = force_gimple_operand_gsi (&gsi, t, true, NULL_TREE,\n \t\t\t\t\tfalse, GSI_CONTINUE_LINKING);\n \t  tree v = fd->loops[i].v;\n@@ -6849,17 +6849,25 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  ne->probability = e->probability.invert ();\n \n \t  gsi = gsi_after_labels (init_bb);\n-\t  t = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n-\t\t\t    fd->loops[i + 1].n1);\n \t  if (fd->loops[i + 1].m1)\n \t    {\n-\t      tree t2 = fold_convert (TREE_TYPE (t),\n+\t      tree t2 = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n \t\t\t\t      fd->loops[i + 1\n \t\t\t\t\t\t- fd->loops[i + 1].outer].v);\n-\t      tree t3 = fold_convert (TREE_TYPE (t), fd->loops[i + 1].m1);\n-\t      t2 = fold_build2 (MULT_EXPR, TREE_TYPE (t), t2, t3);\n-\t      t = fold_build2 (PLUS_EXPR, TREE_TYPE (t), t, t2);\n+\t      if (POINTER_TYPE_P (TREE_TYPE (t2)))\n+\t\tt = fold_build_pointer_plus (t2, fd->loops[i + 1].n1);\n+\t      else\n+\t\t{\n+\t\t  t = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n+\t\t\t\t    fd->loops[i + 1].n1);\n+\t\t  tree t3 = fold_convert (TREE_TYPE (t), fd->loops[i + 1].m1);\n+\t\t  t2 = fold_build2 (MULT_EXPR, TREE_TYPE (t), t2, t3);\n+\t\t  t = fold_build2 (PLUS_EXPR, TREE_TYPE (t), t, t2);\n+\t\t}\n \t    }\n+\t  else\n+\t    t = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n+\t\t\t      fd->loops[i + 1].n1);\n \t  expand_omp_build_assign (&gsi, fd->loops[i + 1].v, t);\n \t  if (fd->loops[i + 1].m2)\n \t    {\n@@ -6868,14 +6876,19 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t\t  gcc_assert (n2v == NULL_TREE);\n \t\t  n2v = create_tmp_var (TREE_TYPE (fd->loops[i + 1].v));\n \t\t}\n-\t      t = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n-\t\t\t\tfd->loops[i + 1].n2);\n-\t      tree t2 = fold_convert (TREE_TYPE (t),\n+\t      tree t2 = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n \t\t\t\t      fd->loops[i + 1\n \t\t\t\t\t\t- fd->loops[i + 1].outer].v);\n-\t      tree t3 = fold_convert (TREE_TYPE (t), fd->loops[i + 1].m2);\n-\t      t2 = fold_build2 (MULT_EXPR, TREE_TYPE (t), t2, t3);\n-\t      t = fold_build2 (PLUS_EXPR, TREE_TYPE (t), t, t2);\n+\t      if (POINTER_TYPE_P (TREE_TYPE (t2)))\n+\t\tt = fold_build_pointer_plus (t2, fd->loops[i + 1].n2);\n+\t      else\n+\t\t{\n+\t\t  t = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n+\t\t\t\t    fd->loops[i + 1].n2);\n+\t\t  tree t3 = fold_convert (TREE_TYPE (t), fd->loops[i + 1].m2);\n+\t\t  t2 = fold_build2 (MULT_EXPR, TREE_TYPE (t), t2, t3);\n+\t\t  t = fold_build2 (PLUS_EXPR, TREE_TYPE (t), t, t2);\n+\t\t}\n \t      expand_omp_build_assign (&gsi, n2v, t);\n \t    }\n \t  if (i + 2 == fd->collapse && n2var)\n@@ -6891,17 +6904,25 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t      tree t2 = fold_build2 (MINUS_EXPR, type, n2, fd->loop.v);\n \t      if (fd->loops[i + 1].m1 || fd->loops[i + 1].m2)\n \t\t{\n+\t\t  tree itype = TREE_TYPE (fd->loops[i].v);\n+\t\t  if (POINTER_TYPE_P (itype))\n+\t\t    itype = signed_type_for (itype);\n \t\t  t = build_int_cst (itype, (fd->loops[i + 1].cond_code\n \t\t\t\t\t     == LT_EXPR ? -1 : 1));\n \t\t  t = fold_build2 (PLUS_EXPR, itype,\n \t\t\t\t   fold_convert (itype,\n \t\t\t\t\t\t fd->loops[i + 1].step), t);\n-\t\t  if (fd->loops[i + 1].m2)\n-\t\t    t = fold_build2 (PLUS_EXPR, itype, t, n2v);\n-\t\t  else\n+\t\t  if (fd->loops[i + 1].m2 == NULL_TREE)\n \t\t    t = fold_build2 (PLUS_EXPR, itype, t,\n \t\t\t\t     fold_convert (itype,\n \t\t\t\t\t\t   fd->loops[i + 1].n2));\n+\t\t  else if (POINTER_TYPE_P (TREE_TYPE (n2v)))\n+\t\t    {\n+\t\t      t = fold_build_pointer_plus (n2v, t);\n+\t\t      t = fold_convert (itype, t);\n+\t\t    }\n+\t\t  else\n+\t\t    t = fold_build2 (PLUS_EXPR, itype, t, n2v);\n \t\t  t = fold_build2 (MINUS_EXPR, itype, t,\n \t\t\t\t   fold_convert (itype, fd->loops[i + 1].v));\n \t\t  tree step = fold_convert (itype, fd->loops[i + 1].step);"}, {"sha": "ea3cd827cee8d918cf0c3acea622a6428f347119", "filename": "libgomp/testsuite/libgomp.c-c++-common/pr106449.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97d32048c04e9787fccadc4bae1c042754503e34/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106449.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97d32048c04e9787fccadc4bae1c042754503e34/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106449.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr106449.c?ref=97d32048c04e9787fccadc4bae1c042754503e34", "patch": "@@ -0,0 +1,62 @@\n+/* PR middle-end/106449 */\n+/* { dg-do run } */\n+\n+void\n+foo (void)\n+{\n+  int a[1024], *b[65536];\n+  int *p, *q, **r = &b[0], i;\n+  #pragma omp simd collapse(2) linear(r : 2)\n+  for (p = &a[0]; p < &a[512]; p++)\n+    for (q = p + 64; q < p + 128; q++)\n+      {\n+        *r++ = p;\n+        *r++ = q;\n+      }\n+  for (i = 0; i < 32768; i++)\n+    if (b[2 * i] != &a[i / 64] || b[2 * i + 1] != &a[(i / 64) + 64 + (i % 64)])\n+      __builtin_abort ();\n+}\n+\n+void\n+bar (int n, int m)\n+{\n+  int a[1024], *b[65536];\n+  int *p, *q, **r = &b[0], i;\n+  #pragma omp parallel for simd collapse(2) linear(r : 2)\n+  for (p = &a[0]; p < &a[512]; p++)\n+    for (q = p + n; q < p + m; q++)\n+      {\n+        *r++ = p;\n+        *r++ = q;\n+      }\n+  for (i = 0; i < 32768; i++)\n+    if (b[2 * i] != &a[i / 64] || b[2 * i + 1] != &a[(i / 64) + 64 + (i % 64)])\n+      __builtin_abort ();\n+}\n+\n+void\n+baz (int n, int m)\n+{\n+  int a[1024], *b[8192];\n+  int *p, *q, **r = &b[0], i;\n+  #pragma omp parallel for simd collapse(2) linear(r : 2)\n+  for (p = &a[0]; p < &a[512]; p += 4)\n+    for (q = p + n; q < p + m; q += 2)\n+      {\n+        *r++ = p;\n+        *r++ = q;\n+      }\n+  for (i = 0; i < 4096; i++)\n+    if (b[2 * i] != &a[(i / 32) * 4] || b[2 * i + 1] != &a[(i / 32) * 4 + 64 + (i % 32) * 2])\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  bar (64, 128);\n+  baz (64, 128);\n+  return 0;\n+}"}]}