{"sha": "257caa552bf930e2770100de70a459a4ede837c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU3Y2FhNTUyYmY5MzBlMjc3MDEwMGRlNzBhNDU5YTRlZGU4MzdjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-20T08:54:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-20T08:54:03Z"}, "message": "Add a pass_by_reference flag to function_arg_info\n\nThis patch adds a flag that tells targets whether an argument\nhas been converted to pass-by-reference form.  This replaces\nassign_parm_data_one::passed_pointer in function.c.\n\nThe flag is set automatically for places that call\napply_pass_by_reference_rules.  Places that apply\npass-by-reference manually need to set it themselves.\n\n(After previous changes, no targets apply pass-by-reference\nmanually.  They all go through apply_pass_by_reference_rules.)\n\n2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* calls.h (function_arg_info): Add a pass_by_reference field,\n\tdefaulting to false.\n\t* calls.c (apply_pass_by_reference_rules): Set pass_by_reference\n\twhen applying pass-by-reference semantics.\n\t(initialize_argument_information): Likewise.\n\t(emit_library_call_value_1): Likewise.\n\t* function.c (assign_parm_data_one): Remove passed_pointer field.\n\t(assign_parm_find_data_types): Don't set it.\n\t(assign_parm_find_stack_rtl, assign_parm_adjust_stack_rtl)\n\t(assign_parm_setup_reg, assign_parms, gimplify_parameters): Use\n\targ.pass_by_reference instead of passed_pointer.\n\nFrom-SVN: r274707", "tree": {"sha": "f451a876ef90a91912575133c1f26b0708b25830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f451a876ef90a91912575133c1f26b0708b25830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/257caa552bf930e2770100de70a459a4ede837c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257caa552bf930e2770100de70a459a4ede837c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/257caa552bf930e2770100de70a459a4ede837c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/257caa552bf930e2770100de70a459a4ede837c0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf0d189eb989906d17010ca7c0b07f1763d5fde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0d189eb989906d17010ca7c0b07f1763d5fde5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0d189eb989906d17010ca7c0b07f1763d5fde5"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "dd9838f2678b9fc061ae35123f6cfd4a8b612441", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257caa552bf930e2770100de70a459a4ede837c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257caa552bf930e2770100de70a459a4ede837c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=257caa552bf930e2770100de70a459a4ede837c0", "patch": "@@ -1,3 +1,17 @@\n+2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* calls.h (function_arg_info): Add a pass_by_reference field,\n+\tdefaulting to false.\n+\t* calls.c (apply_pass_by_reference_rules): Set pass_by_reference\n+\twhen applying pass-by-reference semantics.\n+\t(initialize_argument_information): Likewise.\n+\t(emit_library_call_value_1): Likewise.\n+\t* function.c (assign_parm_data_one): Remove passed_pointer field.\n+\t(assign_parm_find_data_types): Don't set it.\n+\t(assign_parm_find_stack_rtl, assign_parm_adjust_stack_rtl)\n+\t(assign_parm_setup_reg, assign_parms, gimplify_parameters): Use\n+\targ.pass_by_reference instead of passed_pointer.\n+\n 2019-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* calls.c (emit_library_call_value_1): Merge arg and orig_arg"}, {"sha": "6eefeec17d9455a0ccd9094f52b02466c17d4eda", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=257caa552bf930e2770100de70a459a4ede837c0", "patch": "@@ -946,6 +946,7 @@ apply_pass_by_reference_rules (CUMULATIVE_ARGS *ca, function_arg_info &arg)\n     {\n       arg.type = build_pointer_type (arg.type);\n       arg.mode = TYPE_MODE (arg.type);\n+      arg.pass_by_reference = true;\n       return true;\n     }\n   return false;\n@@ -2125,6 +2126,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t\t\t\t\t      \"argument must be passed\"\n \t\t\t\t\t      \" by copying\");\n \t    }\n+\t  arg.pass_by_reference = true;\n \t}\n \n       unsignedp = TYPE_UNSIGNED (type);\n@@ -4957,6 +4959,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t\t\t\t\t     call_fusage);\n \n \t  arg.mode = Pmode;\n+\t  arg.pass_by_reference = true;\n \t  val = force_operand (XEXP (slot, 0), NULL_RTX);\n \t}\n "}, {"sha": "a782a7d3695acccb5c68c0925dcd532baa43292a", "filename": "gcc/calls.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=257caa552bf930e2770100de70a459a4ede837c0", "patch": "@@ -34,21 +34,25 @@ along with GCC; see the file COPYING3.  If not see\n class function_arg_info\n {\n public:\n-  function_arg_info () : type (NULL_TREE), mode (VOIDmode), named (false) {}\n+  function_arg_info ()\n+    : type (NULL_TREE), mode (VOIDmode), named (false),\n+      pass_by_reference (false)\n+  {}\n \n   /* Initialize an argument of mode MODE, either before or after promotion.  */\n   function_arg_info (machine_mode mode, bool named)\n-    : type (NULL_TREE), mode (mode), named (named)\n+    : type (NULL_TREE), mode (mode), named (named), pass_by_reference (false)\n   {}\n \n   /* Initialize an unpromoted argument of type TYPE.  */\n   function_arg_info (tree type, bool named)\n-    : type (type), mode (TYPE_MODE (type)), named (named)\n+    : type (type), mode (TYPE_MODE (type)), named (named),\n+      pass_by_reference (false)\n   {}\n \n   /* Initialize an argument with explicit properties.  */\n   function_arg_info (tree type, machine_mode mode, bool named)\n-    : type (type), mode (mode), named (named)\n+    : type (type), mode (mode), named (named), pass_by_reference (false)\n   {}\n \n   /* Return true if the gimple-level type is an aggregate.  */\n@@ -100,6 +104,10 @@ class function_arg_info\n      treated as an unnamed variadic argument (i.e. one passed through\n      \"...\").  See also TARGET_STRICT_ARGUMENT_NAMING.  */\n   unsigned int named : 1;\n+\n+  /* True if we have decided to pass the argument by reference, in which case\n+     the function_arg_info describes a pointer to the original argument.  */\n+  unsigned int pass_by_reference : 1;\n };\n \n extern int flags_from_decl_or_type (const_tree);"}, {"sha": "4bc4052fb2db332e58ea126f04db42bde143e0ea", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/257caa552bf930e2770100de70a459a4ede837c0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=257caa552bf930e2770100de70a459a4ede837c0", "patch": "@@ -2271,7 +2271,6 @@ struct assign_parm_data_one\n   machine_mode passed_mode;\n   struct locate_and_pad_arg_data locate;\n   int partial;\n-  BOOL_BITFIELD passed_pointer : 1;\n };\n \n /* A subroutine of assign_parms.  Initialize ALL.  */\n@@ -2453,7 +2452,6 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n   if (apply_pass_by_reference_rules (&all->args_so_far_v, data->arg))\n     {\n       data->nominal_type = data->arg.type;\n-      data->passed_pointer = true;\n       data->passed_mode = data->nominal_mode = data->arg.mode;\n     }\n \n@@ -2653,7 +2651,7 @@ assign_parm_find_stack_rtl (tree parm, struct assign_parm_data_one *data)\n     stack_parm = gen_rtx_PLUS (Pmode, stack_parm, offset_rtx);\n   stack_parm = gen_rtx_MEM (data->arg.mode, stack_parm);\n \n-  if (!data->passed_pointer)\n+  if (!data->arg.pass_by_reference)\n     {\n       set_mem_attributes (stack_parm, parm, 1);\n       /* set_mem_attributes could set MEM_SIZE to the passed mode's size,\n@@ -2827,7 +2825,7 @@ assign_parm_adjust_stack_rtl (struct assign_parm_data_one *data)\n      pointers in their passed stack slots.  */\n   else if (crtl->stack_protect_guard\n \t   && (flag_stack_protect == 2\n-\t       || data->passed_pointer\n+\t       || data->arg.pass_by_reference\n \t       || POINTER_TYPE_P (data->nominal_type)))\n     stack_parm = NULL;\n \n@@ -3140,7 +3138,7 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \n   /* If this was an item that we received a pointer to,\n      set rtl appropriately.  */\n-  if (data->passed_pointer)\n+  if (data->arg.pass_by_reference)\n     {\n       rtl = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (data->arg.type)), parmreg);\n       set_mem_attributes (rtl, parm, 1);\n@@ -3310,7 +3308,7 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \n   /* If we were passed a pointer but the actual value can safely live\n      in a register, retrieve it and use it directly.  */\n-  if (data->passed_pointer && TYPE_MODE (TREE_TYPE (parm)) != BLKmode)\n+  if (data->arg.pass_by_reference && TYPE_MODE (TREE_TYPE (parm)) != BLKmode)\n     {\n       /* We can't use nominal_mode, because it will have been set to\n \t Pmode above.  We must use the actual mode of the parm.  */\n@@ -3630,7 +3628,7 @@ assign_parms (tree fndecl)\n \t  assign_parm_adjust_entry_rtl (&data);\n \t}\n       /* Record permanently how this parm was passed.  */\n-      if (data.passed_pointer)\n+      if (data.arg.pass_by_reference)\n \t{\n \t  rtx incoming_rtl\n \t    = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (data.arg.type)),\n@@ -3644,7 +3642,7 @@ assign_parms (tree fndecl)\n \n       if (assign_parm_setup_block_p (&data))\n \tassign_parm_setup_block (&all, parm, &data);\n-      else if (data.passed_pointer || use_register_for_decl (parm))\n+      else if (data.arg.pass_by_reference || use_register_for_decl (parm))\n \tassign_parm_setup_reg (&all, parm, &data);\n       else\n \tassign_parm_setup_stack (&all, parm, &data);\n@@ -3855,7 +3853,7 @@ gimplify_parameters (gimple_seq *cleanup)\n \t  gimplify_one_sizepos (&DECL_SIZE_UNIT (parm), &stmts);\n \t}\n \n-      if (data.passed_pointer)\n+      if (data.arg.pass_by_reference)\n \t{\n \t  tree type = TREE_TYPE (data.arg.type);\n \t  function_arg_info orig_arg (type, data.arg.named);"}]}