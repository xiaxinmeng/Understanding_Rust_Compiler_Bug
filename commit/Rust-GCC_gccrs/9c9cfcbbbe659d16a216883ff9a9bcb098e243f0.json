{"sha": "9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5Y2ZjYmJiZTY1OWQxNmEyMTY4ODNmZjlhOWJjYjA5OGUyNDNmMA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-12-19T15:55:28Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-12-19T15:55:28Z"}, "message": "c/c++, asm: Write the asm-qualifier loop without \"done\" boolean\n\nAs suggested by Jason.\n\n\nc/\n\t* c-parser.c (c_parser_asm_statement): Rewrite the loop to work without\n\t\"done\" boolean variable.\n\ncp/\n\t* parser.c (cp_parser_asm_definition): Rewrite the loop to work without\n\t\"done\" boolean variable.\n\nFrom-SVN: r267277", "tree": {"sha": "8742fec0642ba8d01a47615e005f61c5bfe5e384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8742fec0642ba8d01a47615e005f61c5bfe5e384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c40a3b7ce64665f8b4552a45c0cdd9564598cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c40a3b7ce64665f8b4552a45c0cdd9564598cc"}], "stats": {"total": 146, "additions": 72, "deletions": 74}, "files": [{"sha": "d1beffaac6241be870e299c6ba5c6a25f942e1d0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "patch": "@@ -1,3 +1,8 @@\n+2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* c-parser.c (c_parser_asm_statement): Rewrite the loop to work without\n+\t\"done\" boolean variable.\n+\n 2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/87504"}, {"sha": "835c0d8b879b5ea9534e946d0a5858eb7dac98ad", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "patch": "@@ -6372,40 +6372,37 @@ c_parser_asm_statement (c_parser *parser)\n   is_volatile = false;\n   is_inline = false;\n   is_goto = false;\n-  for (bool done = false; !done; )\n-    switch (c_parser_peek_token (parser)->keyword)\n-      {\n-      case RID_VOLATILE:\n-\tif (!is_volatile)\n-\t  {\n-\t    is_volatile = true;\n-\t    quals = c_parser_peek_token (parser)->value;\n-\t    c_parser_consume_token (parser);\n-\t  }\n-\telse\n-\t  done = true;\n-\tbreak;\n-      case RID_INLINE:\n-\tif (!is_inline)\n-\t  {\n-\t    is_inline = true;\n-\t    c_parser_consume_token (parser);\n-\t  }\n-\telse\n-\t  done = true;\n-\tbreak;\n-      case RID_GOTO:\n-\tif (!is_goto)\n-\t  {\n-\t    is_goto = true;\n-\t    c_parser_consume_token (parser);\n-\t  }\n-\telse\n-\t  done = true;\n-\tbreak;\n-      default:\n-\tdone = true;\n-      }\n+  for (;;)\n+    {\n+      switch (c_parser_peek_token (parser)->keyword)\n+\t{\n+\tcase RID_VOLATILE:\n+\t  if (is_volatile)\n+\t    break;\n+\t  is_volatile = true;\n+\t  quals = c_parser_peek_token (parser)->value;\n+\t  c_parser_consume_token (parser);\n+\t  continue;\n+\n+\tcase RID_INLINE:\n+\t  if (is_inline)\n+\t    break;\n+\t  is_inline = true;\n+\t  c_parser_consume_token (parser);\n+\t  continue;\n+\n+\tcase RID_GOTO:\n+\t  if (is_goto)\n+\t    break;\n+\t  is_goto = true;\n+\t  c_parser_consume_token (parser);\n+\t  continue;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+    }\n \n   /* ??? Follow the C++ parser rather than using the\n      lex_untranslated_string kludge.  */"}, {"sha": "44ac2a96ff0291f4bd5469e9a84250a5568826d6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "patch": "@@ -1,3 +1,8 @@\n+2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* parser.c (cp_parser_asm_definition): Rewrite the loop to work without\n+\t\"done\" boolean variable.\n+\n 2018-12-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/88375"}, {"sha": "0e4716ff0d5e86b7ae0bdfea9eb2da42d63b1651", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 31, "deletions": 40, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c9cfcbbbe659d16a216883ff9a9bcb098e243f0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9c9cfcbbbe659d16a216883ff9a9bcb098e243f0", "patch": "@@ -19698,47 +19698,38 @@ cp_parser_asm_definition (cp_parser* parser)\n       cp_function_chain->invalid_constexpr = true;\n     }\n \n-  /* See if the next token is `volatile'.  */\n+  /* Handle the asm-qualifier-list.  */\n   if (cp_parser_allow_gnu_extensions_p (parser))\n-    for (bool done = false; !done ; )\n-      switch (cp_lexer_peek_token (parser->lexer)->keyword)\n-\t{\n-\tcase RID_VOLATILE:\n-\t  if (!volatile_p)\n-\t    {\n-\t      /* Remember that we saw the `volatile' keyword.  */\n-\t      volatile_p = true;\n-\t      /* Consume the token.  */\n-\t      cp_lexer_consume_token (parser->lexer);\n-\t    }\n-\t  else\n-\t    done = true;\n-\t  break;\n-\tcase RID_INLINE:\n-\t  if (!inline_p && parser->in_function_body)\n-\t    {\n-\t      /* Remember that we saw the `inline' keyword.  */\n-\t      inline_p = true;\n-\t      /* Consume the token.  */\n-\t      cp_lexer_consume_token (parser->lexer);\n-\t    }\n-\t  else\n-\t    done = true;\n-\t  break;\n-\tcase RID_GOTO:\n-\t  if (!goto_p && parser->in_function_body)\n-\t    {\n-\t      /* Remember that we saw the `goto' keyword.  */\n-\t      goto_p = true;\n-\t      /* Consume the token.  */\n-\t      cp_lexer_consume_token (parser->lexer);\n-\t    }\n-\t  else\n-\t    done = true;\n-\t  break;\n-\tdefault:\n-\t  done = true;\n-\t}\n+    for (;;)\n+      {\n+\tswitch (cp_lexer_peek_token (parser->lexer)->keyword)\n+\t  {\n+\t  case RID_VOLATILE:\n+\t    if (volatile_p)\n+\t      break;\n+\t    volatile_p = true;\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    continue;\n+\n+\t  case RID_INLINE:\n+\t    if (inline_p || !parser->in_function_body)\n+\t      break;\n+\t    inline_p = true;\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    continue;\n+\n+\t  case RID_GOTO:\n+\t    if (goto_p || !parser->in_function_body)\n+\t      break;\n+\t    goto_p = true;\n+\t    cp_lexer_consume_token (parser->lexer);\n+\t    continue;\n+\n+\t  default:\n+\t    break;\n+\t  }\n+\tbreak;\n+      }\n \n   /* Look for the opening `('.  */\n   if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))"}]}