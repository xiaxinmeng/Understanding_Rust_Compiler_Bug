{"sha": "4ffe6e87dc5f2aecddf83192b7528202f647faaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmZTZlODdkYzVmMmFlY2RkZjgzMTkyYjc1MjgyMDJmNjQ3ZmFhYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-01-29T18:22:37Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-01-29T18:22:37Z"}, "message": "enc_filebuf.h: Resurrect, update.\n\n2007-01-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/enc_filebuf.h: Resurrect, update.\n\t* include/ext/codecvt_specializations.h: Remove\n        _GLIBCXX_USE_ICONV, _GLIBCXX_USE_ENCODING_STATE.\n\t* include/bits/localefwd.h: Remove declaration for __enc_traits.\n\t* docs/html/22_locale/codecvt.html: Change __enc_traits to\n\tencoding_state.\n\t* scripts/testsuite_flags.in: Remove ICONV.\n\n\t* configure.ac: Remove GLIBCXX_CHECK_ICONV_SUPPORT.\n\t* acinclude.m4 (GLIBCXX_CHECK_ICONV_SUPPORT): Remove.\n\t* crossconfig.m4: Remove use of GLIBCXX_CHECK_ICONV_SUPPORT.\n\t* config.h.in: Remove HAVE_ICONV_CLOSE, HAVE_ICONV_OPEN,\n\tHAVE_NL_LANGINFO, _GLIBCXX_USE_ICONV.\n\t* include/Makefile.am: Uglify ICONV_CONST.\n\t* configure: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.in: Regenerate.\n\t* po/Makefile.in: Regenerate.\n\t* libmath/Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\n\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: Use\n\tdg-require-iconv, fix up for encoding_state changes.\n\t* testsuite/ext/enc_filebuf/char/13189.cc: Same.\n\t* testsuite/ext/enc_filebuf/char/13598.cc: Same.\n\t* testsuite/22_locale/codecvt/unicode: Move...\n\t* testsuite/22_locale/codecvt/unicode/char.cc: Move...\n\t* testsuite/22_locale/codecvt/unicode/1.cc: Move...\n\t* testsuite/22_locale/codecvt/unicode/wchar_t.cc: Move...\n\t* testsuite/ext/codecvt: New.\n\t* testsuite/ext/codecvt/char-1.cc: ...here. Also, use dg-require-iconv.\n\t* testsuite/ext/codecvt/char-2.cc: ...here. Same.\n\t* testsuite/ext/codecvt/1.cc: ...here. Same.\n\t* testsuite/ext/codecvt/wchar_t.cc: ...here. Same.\n\t* testsuite/22_locale/locale/cons/unicode: Delete directory.\n\t* testsuite/22_locale/locale/cons/unicode/1.cc: Move...\n\t* testsuite/22_locale/locale/cons/unicode.cc: ...here.\n\nFrom-SVN: r121297", "tree": {"sha": "da98ca8f6597468843b19cf9367201ffebc2b1e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da98ca8f6597468843b19cf9367201ffebc2b1e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ffe6e87dc5f2aecddf83192b7528202f647faaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffe6e87dc5f2aecddf83192b7528202f647faaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ffe6e87dc5f2aecddf83192b7528202f647faaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ffe6e87dc5f2aecddf83192b7528202f647faaa/comments", "author": null, "committer": null, "parents": [{"sha": "68254f23e8c232a4da9b6f0e3fdabe1800a4b014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68254f23e8c232a4da9b6f0e3fdabe1800a4b014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68254f23e8c232a4da9b6f0e3fdabe1800a4b014"}], "stats": {"total": 7235, "additions": 1434, "deletions": 5801}, "files": [{"sha": "4a19bde11d01b2acd9bac3150062f44088801a4e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,3 +1,46 @@\n+2007-01-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/enc_filebuf.h: Resurrect, update.\n+\t* include/ext/codecvt_specializations.h: Remove\n+        _GLIBCXX_USE_ICONV, _GLIBCXX_USE_ENCODING_STATE.\n+\t* include/bits/localefwd.h: Remove declaration for __enc_traits.\n+\t* docs/html/22_locale/codecvt.html: Change __enc_traits to\n+\tencoding_state.\n+\t* scripts/testsuite_flags.in: Remove ICONV.\n+\n+\t* configure.ac: Remove GLIBCXX_CHECK_ICONV_SUPPORT.\n+\t* acinclude.m4 (GLIBCXX_CHECK_ICONV_SUPPORT): Remove.\n+\t* crossconfig.m4: Remove use of GLIBCXX_CHECK_ICONV_SUPPORT.\n+\t* config.h.in: Remove HAVE_ICONV_CLOSE, HAVE_ICONV_OPEN,\n+\tHAVE_NL_LANGINFO, _GLIBCXX_USE_ICONV.\n+\t* include/Makefile.am: Uglify ICONV_CONST.\n+\t* configure: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* libmath/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+\t* testsuite/ext/enc_filebuf/wchar_t/13189.cc: Use\n+\tdg-require-iconv, fix up for encoding_state changes.\n+\t* testsuite/ext/enc_filebuf/char/13189.cc: Same.\n+\t* testsuite/ext/enc_filebuf/char/13598.cc: Same.\n+\t* testsuite/22_locale/codecvt/unicode: Move...\n+\t* testsuite/22_locale/codecvt/unicode/char.cc: Move...\n+\t* testsuite/22_locale/codecvt/unicode/1.cc: Move...\n+\t* testsuite/22_locale/codecvt/unicode/wchar_t.cc: Move...\n+\t* testsuite/ext/codecvt: New.\n+\t* testsuite/ext/codecvt/char-1.cc: ...here. Also, use dg-require-iconv.\n+\t* testsuite/ext/codecvt/char-2.cc: ...here. Same.\n+\t* testsuite/ext/codecvt/1.cc: ...here. Same.\n+\t* testsuite/ext/codecvt/wchar_t.cc: ...here. Same.\n+\t* testsuite/22_locale/locale/cons/unicode: Delete directory.\n+\t* testsuite/22_locale/locale/cons/unicode/1.cc: Move...\n+\t* testsuite/22_locale/locale/cons/unicode.cc: ...here.\n+\n 2007-01-28  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (num_get<>::do_get(iter_type,"}, {"sha": "cb77cbc80096bd41b2291199a385e5b42330e490", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -46,7 +46,11 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../config.guess \\\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -171,6 +175,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "a74a52334b1b77a1dd1334f3e1e85429c8e5e0cc", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -309,64 +309,6 @@ AC_DEFUN([GLIBCXX_CHECK_LINKER_FEATURES], [\n ])\n \n \n-dnl\n-dnl Check to see if this target can enable the iconv specializations.\n-dnl If --disable-c-mbchar was given, no wchar_t specialization is enabled.  \n-dnl (This must have been previously checked, along with the rest of C99 \n-dnl support.) By default, iconv support is disabled.\n-dnl\n-dnl Defines:\n-dnl  _GLIBCXX_USE_ICONV if all the bits are found.\n-dnl Substs:\n-dnl  LIBICONV to a -l string containing the iconv library, if needed.\n-dnl\n-AC_DEFUN([GLIBCXX_CHECK_ICONV_SUPPORT], [\n-\n-  enable_iconv=no\n-  # Only continue checking if the ISO C99 headers exist and support is on.\n-  if test x\"$enable_wchar_t\" = xyes; then\n-\n-    # From Bruno Haible's AM_ICONV, but without link tests.\n-    # Check for existence of libiconv.a providing XPG2 wchar_t support.\n-    # Some systems have iconv in libc, some have it in libiconv (OSF/1 and\n-    # those with the standalone portable GNU libiconv installed).\n-    AC_ARG_WITH([libiconv-prefix],\n-[  --with-libiconv-prefix=DIR  search for libiconv in DIR/include and DIR/lib], [  for dir in `echo \"$withval\" | tr : ' '`; do\n-      if test -d $dir/include; then CPPFLAGS=\"$CPPFLAGS -I$dir/include\"; fi\n-      if test -d $dir/lib; then LIBICONV=\"$LIBICONV -L$dir/lib\"; fi\n-    done\n-    LIBICONV=\"$LIBICONV -liconv\"\n-   ])\n-   if test x\"$LIBICONV\" != x; then\n-     AC_MSG_NOTICE([--with-libiconv-prefix is $LIBICONV])\n-   fi\n-\n-    # Use iconv for wchar_t to char conversions. As such, check for\n-    # X/Open Portability Guide, version 2 features (XPG2).\n-    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-\n-    ac_save_LIBS=\"$LIBS\"\n-    LIBS=\"$LIBS $LIBICONV\"\n-    AC_CHECK_FUNCS([iconv_open iconv_close iconv nl_langinfo],\n-    [ac_XPG2funcs=yes], [ac_XPG2funcs=no])\n-    LIBS=\"$ac_save_LIBS\"\n-\n-    if test x\"$ac_has_iconv_h\" = xyes &&\n-       test x\"$ac_has_langinfo_h\" = xyes &&\n-       test x\"$ac_XPG2funcs\" = xyes;\n-    then\n-      AC_DEFINE([_GLIBCXX_USE_ICONV],1,\n-\t        [Define if iconv and related functions exist and are usable.])\n-      enable_iconv=yes\n-      AC_SUBST(LIBICONV)\n-    fi\n-  fi\n-  AC_MSG_CHECKING([for enabled iconv specializations])\n-  AC_MSG_RESULT($enable_iconv)\n-])\n-\n-\n dnl\n dnl Check for headers for, and arguments to, the setrlimit() function.\n dnl Used only in testsuite_hooks.h.  Called from GLIBCXX_CONFIGURE_TESTSUITE."}, {"sha": "0d1f2938c24d199c9c5a2eb12a6aa32b13dd8625", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -581,7 +581,11 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/enable.m4])\n+m4_include([../config/iconv.m4])\n m4_include([../config/lead-dot.m4])\n+m4_include([../config/lib-ld.m4])\n+m4_include([../config/lib-link.m4])\n+m4_include([../config/lib-prefix.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/no-executables.m4])\n m4_include([../config/unwind_ipinfo.m4])"}, {"sha": "ceb08fad428fa2bb4c574eb24005f565e5e1423c", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -130,15 +130,9 @@\n /* Define to 1 if you have the `hypotl' function. */\n #undef HAVE_HYPOTL\n \n-/* Define to 1 if you have the `iconv' function. */\n+/* Define if you have the iconv() function. */\n #undef HAVE_ICONV\n \n-/* Define to 1 if you have the `iconv_close' function. */\n-#undef HAVE_ICONV_CLOSE\n-\n-/* Define to 1 if you have the `iconv_open' function. */\n-#undef HAVE_ICONV_OPEN\n-\n /* Define to 1 if you have the <ieeefp.h> header file. */\n #undef HAVE_IEEEFP_H\n \n@@ -241,9 +235,6 @@\n /* Define to 1 if you have the <nan.h> header file. */\n #undef HAVE_NAN_H\n \n-/* Define to 1 if you have the `nl_langinfo' function. */\n-#undef HAVE_NL_LANGINFO\n-\n /* Define if poll is available in <poll.h>. */\n #undef HAVE_POLL\n \n@@ -634,6 +625,9 @@\n /* Define to 1 if you have the `__signbitl' function. */\n #undef HAVE___SIGNBITL\n \n+/* Define as const if the declaration of iconv() needs const. */\n+#undef ICONV_CONST\n+\n /* Name of package */\n #undef PACKAGE\n \n@@ -735,9 +729,6 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_STDINT_TR1\n \n-/* Define if iconv and related functions exist and are usable. */\n-#undef _GLIBCXX_USE_ICONV\n-\n /* Define if LFS support is available. */\n #undef _GLIBCXX_USE_LFS\n "}, {"sha": "551bff5ad5e91b77bd0643ece1588902ed5fff1a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 816, "deletions": 4997, "changes": 5813, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa"}, {"sha": "82e8b851e09519590274b3056ef70fa141fdc783", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -86,6 +86,7 @@ AC_LIBTOOL_DLOPEN\n AM_PROG_LIBTOOL\n AC_SUBST(enable_shared)\n AC_SUBST(enable_static)\n+AM_ICONV\n \n # Possibly disable most of the library.\n ## TODO: Consider skipping unncessary tests altogether in this case, rather\n@@ -140,7 +141,6 @@ if $GLIBCXX_IS_NATIVE; then\n   GLIBCXX_CHECK_MATH_SUPPORT\n   GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n   GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-  GLIBCXX_CHECK_ICONV_SUPPORT\n   GLIBCXX_CHECK_STDLIB_SUPPORT\n \n   # For showmanyc_helper()."}, {"sha": "ff8db7797354773233634b68c1b528a096018cd3", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -21,7 +21,6 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n \n     # For showmanyc_helper().\n@@ -55,7 +54,6 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n     GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n     AC_DEFINE(HAVE_WRITEV)\n@@ -70,7 +68,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_LC_MESSAGES)\n     AC_DEFINE(HAVE_GETPAGESIZE)\n     AC_DEFINE(HAVE_SETENV)\n@@ -125,7 +122,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FREXPF)\n@@ -152,7 +148,6 @@ case \"${host}\" in\n     GLIBCXX_CHECK_MATH_SUPPORT\n     GLIBCXX_CHECK_BUILTIN_MATH_SUPPORT\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     GLIBCXX_CHECK_STDLIB_SUPPORT\n \n     # For LFS.\n@@ -181,7 +176,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FINITEF)\n@@ -205,7 +199,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_HYPOT)\n     AC_DEFINE(HAVE_ISINF)\n     AC_DEFINE(HAVE_ISNAN)\n@@ -224,7 +217,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS) \n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COSF)\n     AC_DEFINE(HAVE_COSL)\n     AC_DEFINE(HAVE_COSHF)\n@@ -257,16 +249,8 @@ case \"${host}\" in\n          AC_DEFINE(HAVE_FINITE)\n          AC_DEFINE(HAVE_FPCLASS)\n          AC_DEFINE(HAVE_GETPAGESIZE)\n-         AC_DEFINE(HAVE_NL_LANGINFO)\n-         AC_DEFINE(HAVE_ICONV)\n-         AC_DEFINE(HAVE_ICONV_CLOSE)\n-         AC_DEFINE(HAVE_ICONV_OPEN)\n-         # Look for the pieces required for wchar_t support in order to\n-         # get all the right HAVE_* macros defined.\n-         GLIBCXX_CHECK_ICONV_SUPPORT\n          # All of the dependencies for wide character support are here, so\n-         # turn it on.  This requires some syncronization with the\n-         # GLIBCXX_CHECK_ICONV_SUPPORT in acinclude.m4\n+         # turn it on. \n          AC_DEFINE(_GLIBCXX_USE_WCHAR_T) \n          # Are these tested for even when cross?\n          AC_DEFINE(HAVE_FLOAT_H)\n@@ -321,7 +305,6 @@ case \"${host}\" in\n     AC_SUBST(SECTION_FLAGS)\n     GLIBCXX_CHECK_LINKER_FEATURES\n     GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT\n-    GLIBCXX_CHECK_ICONV_SUPPORT\n     AC_DEFINE(HAVE_COPYSIGN)\n     AC_DEFINE(HAVE_COPYSIGNF)\n     AC_DEFINE(HAVE_FINITE)"}, {"sha": "b2e10b13292eba33d6f24d166b14c6fefcc2817c", "filename": "libstdc++-v3/docs/html/22_locale/codecvt.html", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fcodecvt.html?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -315,7 +315,7 @@ <h2>\n <p>\n Neither of these two required specializations deals with Unicode\n characters. As such, libstdc++-v3 implements a partial specialization\n-of the codecvt class with and iconv wrapper class, __enc_traits as the\n+of the codecvt class with and iconv wrapper class, encoding_state as the\n third template parameter.\n </p>\n \n@@ -331,19 +331,19 @@ <h2>\n </p>\n \n <p>\n-As such, the type __enc_traits is defined as a non-templatized, POD\n+As such, the type encoding_state is defined as a non-templatized, POD\n type to be used as the third type of a codecvt instantiation. This\n type is just a wrapper class for iconv, and provides an easy interface\n to iconv functionality.\n </p>\n \n <p>\n-There are two constructors for __enc_traits:\n+There are two constructors for encoding_state:\n </p>\n \n <p>\n <code> \n-__enc_traits() : __in_desc(0), __out_desc(0)\n+encoding_state() : __in_desc(0), __out_desc(0)\n </code>\n </p>\n <p>\n@@ -354,7 +354,7 @@ <h2>\n \n <p>\n <code> \n-__enc_traits(const char* __int, const char* __ext)\n+encoding_state(const char* __int, const char* __ext)\n </code>\n </p>\n <p>\n@@ -382,7 +382,7 @@ <h2>\n </p>\n <p>\n Strangely enough, this member function attempts to open conversion\n-descriptors for a given __enc_traits object. If the conversion\n+descriptors for a given encoding_state object. If the conversion\n descriptors are not valid, the conversion descriptors returned will\n not be valid and the resulting calls to the codecvt conversion\n functions will return error.\n@@ -395,7 +395,7 @@ <h2>\n </code>\n </p>\n <p>\n-Provides a way to see if the given __enc_traits object has been\n+Provides a way to see if the given encoding_state object has been\n properly initialized. If the string literals describing the desired\n internal and external encoding are not valid, initialization will\n fail, and this will return false. If the internal and external\n@@ -406,7 +406,7 @@ <h2>\n \n <p>\n <code> \n-__enc_traits(const __enc_traits&amp;)\n+encoding_state(const encoding_state&amp;)\n </code>\n </p>\n <p>\n@@ -419,7 +419,7 @@ <h2>\n <p>\n Definitions for all the required codecvt member functions are provided\n for this specialization, and usage of codecvt&lt;internal character type,\n-external character type, __enc_traits&gt; is consistent with other\n+external character type, encoding_state&gt; is consistent with other\n codecvt usage.\n </p>\n \n@@ -436,8 +436,8 @@ <h2>\n   typedef unsigned short                        unicode_t;\n   typedef unicode_t                             int_type;\n   typedef char                                  ext_type;\n-  typedef __enc_traits                          enc_type;\n-  typedef codecvt&lt;int_type, ext_type, enc_type&gt; unicode_codecvt;\n+  typedef encoding_state                          state_type;\n+  typedef codecvt&lt;int_type, ext_type, state_type&gt; unicode_codecvt;\n \n   const ext_type*       e_lit = \"black pearl jasmine tea\";\n   int                   size = strlen(e_lit);"}, {"sha": "33533a8706841e35d24f770421666d980bb996a3", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -490,6 +490,7 @@ ext_headers = \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n+\t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -956,6 +957,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\"}, {"sha": "c3dd4a5d393fbf41336281b0f8c556711abe2d83", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -41,7 +41,11 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n subdir = include\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -139,6 +143,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\n@@ -711,6 +716,7 @@ ext_headers = \\\n \t${ext_srcdir}/codecvt_specializations.h \\\n \t${ext_srcdir}/concurrence.h \\\n \t${ext_srcdir}/debug_allocator.h \\\n+\t${ext_srcdir}/enc_filebuf.h \\\n \t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/stdio_sync_filebuf.h \\\n \t${ext_srcdir}/functional \\\n@@ -1331,6 +1337,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\"}, {"sha": "0a926b94fd5630afb9c1d2ddda698381e7e8091b", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -118,7 +118,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // NB: Specialized for char and wchar_t in locale_facets.h.\n \n   class codecvt_base;\n-  class __enc_traits;\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt;\n   template<> class codecvt<char, char, mbstate_t>;"}, {"sha": "c0563acb4eeb162d52377d54a930f7a18c634c05", "filename": "libstdc++-v3/include/ext/codecvt_specializations.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fcodecvt_specializations.h?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,6 +1,6 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n //  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,16 +42,9 @@\n #define _EXT_CODECVT_SPECIALIZATIONS_H 1\n \n #include <bits/c++config.h>\n-\n-#ifdef _GLIBCXX_USE_ICONV\n-\n #include <locale>\n #include <iconv.h>\n \n-  // XXX\n-  // Define this here so codecvt.cc can have _S_max_size definition.\n-#define _GLIBCXX_USE_ENCODING_STATE 1\n-\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /// @brief  Extension to use icov for dealing with character encodings.\n@@ -517,5 +510,3 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n _GLIBCXX_END_NAMESPACE\n \n #endif\n-\n-#endif"}, {"sha": "bba78e06be4e0a05e575c06c1248639f2a204d9b", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -0,0 +1,67 @@\n+// filebuf with encoding state type -*- C++ -*-\n+\n+// Copyright (C) 2002, 2003, 2004, 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ext/enc_filebuf.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_ENC_FILEBUF_H\n+#define _EXT_ENC_FILEBUF_H 1\n+\n+#include <fstream>\n+#include <locale>\n+#include <ext/codecvt_specializations.h>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  /// @brief  class enc_filebuf.\n+  template<typename _CharT>\n+    class enc_filebuf\n+    : public std::basic_filebuf<_CharT, encoding_char_traits<_CharT> >\n+    {\n+    public:\n+      typedef encoding_char_traits<_CharT>     \ttraits_type;\n+      typedef typename traits_type::state_type\tstate_type;\n+      typedef typename traits_type::pos_type\tpos_type;\n+\n+      enc_filebuf(state_type& __state)\n+      : std::basic_filebuf<_CharT, encoding_char_traits<_CharT> >()\n+      { this->_M_state_beg = __state; }\n+\n+    private:\n+      // concept requirements:\n+      // Set state type to something useful.\n+      // Something more than copyconstructible is needed here, so\n+      // require default and copy constructible + assignment operator.\n+      __glibcxx_class_requires(state_type, _SGIAssignableConcept)\n+    };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "a6ec5fd456ea7f515fb559564a9fe504b42f2238", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -41,7 +41,11 @@ subdir = libmath\n DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -156,6 +160,7 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n # Only compiling \"C\" sources in this directory.\n LIBTOOL = @LIBTOOL@ --tag CC\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "4c9f181d6ebca0cc13098cc4183acbc4854524ae", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -43,7 +43,11 @@ DIST_COMMON = $(glibcxxinstall_HEADERS) $(srcdir)/Makefile.am \\\n subdir = libsupc++\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -195,6 +199,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "e606aca7c0fc87fe84a34e25c16a66e44a43c9cc", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -41,7 +41,11 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n subdir = po\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -139,6 +143,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "4b841ca5275fe349cb2b030969f977469cdc51f9", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -58,7 +58,7 @@ case ${query} in\n       echo ${PCHFLAGS}\n       ;;\n     --cxxldflags)\n-      SECTIONLDFLAGS=\"@SECTION_LDFLAGS@ @LIBICONV@\"\n+      SECTIONLDFLAGS=\"@SECTION_LDFLAGS@\"\n       echo ${SECTIONLDFLAGS}\n       ;;\n     *)"}, {"sha": "7946506148c0f4aca10c0280ea497b87be6b186c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -41,7 +41,11 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n subdir = src\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -189,6 +193,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "3bd27dd61b4d02012b2a7a3339022a9646d2bb41", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/1.cc", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2F1.cc?ref=68254f23e8c232a4da9b6f0e3fdabe1800a4b014", "patch": "@@ -1,147 +0,0 @@\n-// 2003-02-06  Petur Runolfsson  <peturr02@ru.is>\n-\n-// Copyright (C) 2003 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n-\n-#include <locale>\n-#include <testsuite_hooks.h>\n-\n-\n-\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n-\n-// Need some char_traits specializations for this to work.\n-typedef unsigned short\t\t\tunicode_t;\n-\n-namespace std\n-{\n-  template<>\n-    struct char_traits<unicode_t>\n-    {\n-      typedef unicode_t \tchar_type;\n-      // Unsigned as wint_t is unsigned.\n-      typedef unsigned long  \tint_type;\n-      typedef streampos \tpos_type;\n-      typedef streamoff \toff_type;\n-      typedef mbstate_t \tstate_type;\n-      \n-      static void \n-      assign(char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      eq(const char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      lt(const char_type& __c1, const char_type& __c2);\n-\n-      static int \n-      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return memcmp(__s1, __s2, __n); }\n-\n-      static size_t\n-      length(const char_type* __s);\n-\n-      static const char_type* \n-      find(const char_type* __s, size_t __n, const char_type& __a);\n-\n-      static char_type* \n-      move(char_type* __s1, const char_type* __s2, size_t __n);\n-\n-      static char_type* \n-      copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      {  return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n-\n-      static char_type* \n-      assign(char_type* __s, size_t __n, char_type __a);\n-\n-      static char_type \n-      to_char_type(const int_type& __c);\n-\n-      static int_type \n-      to_int_type(const char_type& __c);\n-\n-      static bool \n-      eq_int_type(const int_type& __c1, const int_type& __c2);\n-\n-      static int_type \n-      eof(); \n-\n-      static int_type \n-      not_eof(const int_type& __c);\n-    };\n-}\n-\n-void\n-initialize_state(std::__enc_traits& state)\n-{ state._M_init(); }\n-\n-bool length_called = false;\n-\n-class length_codecvt : public std::codecvt<unicode_t, char, std::__enc_traits>\n-{\n-  typedef std::codecvt<unicode_t, char, std::__enc_traits> unicode_codecvt;\n-\n-public:\n-  // DR75: type of first argument of do_length is state_type&\n-  virtual int do_length(state_type& state, const extern_type* from,\n-                        const extern_type* end, std::size_t max) const\n-  {\n-    length_called = true;\n-    return unicode_codecvt::do_length(state, from, end, max);\n-  }\n-};\n-\n-// Partial specialization using __enc_traits.\n-// codecvt<unicode_t, char, __enc_traits>\n-// UNICODE - UCS2 (big endian)\n-void test01()\n-{\n-  using namespace std;\n-  typedef unicode_t\t\t\t\tint_type;\n-  typedef char\t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n-\n-  bool test __attribute__((unused)) = true;\n-  const ext_type* \te_lit = \"black pearl jasmine tea\";\n-  int \t\t\tsize = strlen(e_lit);\n-\n-  // construct a locale object with the specialized facet.\n-  locale \t\tloc(locale::classic(), new length_codecvt);\n-  // sanity check the constructed locale has the specialized facet.\n-  VERIFY( has_facet<unicode_codecvt>(loc) );\n-  const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n-\n-  unicode_codecvt::state_type state04(\"UCS-2BE\", \"ISO-8859-15\", 0xfeff, 0);\n-  initialize_state(state04);\n-  length_called = false;\n-  cvt.length(state04, e_lit, e_lit + size, 5);\n-  VERIFY( length_called );\n-}\n-#endif // _GLIBCXX_USE___ENC_TRAITS\n-\n-int main ()\n-{\n-#if _GLIBCXX_USE___ENC_TRAITS\n-  test01();\n-#endif \n-\n-  return 0;\n-}"}, {"sha": "e6e4f336eef3a99ca803804c302366ac7b2956ef", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/char.cc", "status": "removed", "additions": 0, "deletions": 300, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc?ref=68254f23e8c232a4da9b6f0e3fdabe1800a4b014", "patch": "@@ -1,300 +0,0 @@\n-// 2000-08-22 Benjamin Kosnik <bkoz@cygnus.com>\n-\n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n-#include <locale>\n-#include <testsuite_hooks.h>\n-\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n-\n-// Need some char_traits specializations for this to work.\n-typedef unsigned short\t\t\tunicode_t;\n-\n-namespace std\n-{\n-  template<>\n-    struct char_traits<unicode_t>\n-    {\n-      typedef unicode_t \tchar_type;\n-      // Unsigned as wint_t is unsigned.\n-      typedef unsigned long  \tint_type;\n-      typedef streampos \tpos_type;\n-      typedef streamoff \toff_type;\n-      typedef mbstate_t \tstate_type;\n-      \n-      static void \n-      assign(char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      eq(const char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      lt(const char_type& __c1, const char_type& __c2);\n-\n-      static int \n-      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return memcmp(__s1, __s2, __n); }\n-\n-      static size_t\n-      length(const char_type* __s);\n-\n-      static const char_type* \n-      find(const char_type* __s, size_t __n, const char_type& __a);\n-\n-      static char_type* \n-      move(char_type* __s1, const char_type* __s2, size_t __n);\n-\n-      static char_type* \n-      copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      {  return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n-\n-      static char_type* \n-      assign(char_type* __s, size_t __n, char_type __a);\n-\n-      static char_type \n-      to_char_type(const int_type& __c);\n-\n-      static int_type \n-      to_int_type(const char_type& __c);\n-\n-      static bool \n-      eq_int_type(const int_type& __c1, const int_type& __c2);\n-\n-      static int_type \n-      eof(); \n-\n-      static int_type \n-      not_eof(const int_type& __c);\n-    };\n-}\n-\n-/*\n-> how do I check that these conversions are correct? \n-Very easy.  Since all the characters are from ASCII you simply\n-zero-extend the values.\n-\n-drepper$ echo 'black pearl jasmine tea' | od -t x1\n-0000000 62 6c 61 63 6b 20 70 65 61 72 6c 20 6a 61 73 6d\n-0000020 69 6e 65 20 74 65 61 0a\n-\n-So the UCS-2 string is\n-\n-0x0062, 0x006c, 0x0061, ...\n-\n-You get the idea.  With iconv() you have to take care of the\n-byte-order, though.  UCS-2 can mean little- or big endian.  Looking at\n-your result\n-\n-> $9 = 25856\n-\n-it shows that the other byte-order is used (25856 == 0x6500).\n-*/\n-\n-\n-void\n-initialize_state(std::__enc_traits& state)\n-{ state._M_init(); }\n-\n-// Partial specialization using __enc_traits.\n-// codecvt<unicode_t, char, __enc_traits>\n-// UNICODE - UCS2 (big endian)\n-void test01()\n-{\n-  using namespace std;\n-  typedef codecvt_base::result\t\t\tresult;\n-  typedef unicode_t\t\t\t\tint_type;\n-  typedef char\t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n-  typedef char_traits<int_type>\t\t\tint_traits;\n-  typedef char_traits<ext_type>\t\t\text_traits;\n-\n-  bool test __attribute__((unused)) = true;\n-  const ext_type* \te_lit = \"black pearl jasmine tea\";\n-  int \t\t\tsize = strlen(e_lit);\n-\n-  char  i_lit_base[50] __attribute__((aligned(__alignof__(int_type)))) = \n-  { \n-    0x00, 0x62, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x20,\n-    0x00, 0x70, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x20,\n-    0x00, 0x6a, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e,\n-    0x00, 0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x61, 0x00, 0xa0\n-  };\n-  const int_type* \ti_lit = reinterpret_cast<int_type*>(i_lit_base);\n-\n-  const ext_type*       efrom_next;\n-  const int_type*       ifrom_next;\n-  ext_type* \t\te_arr = new ext_type[size + 1];\n-  ext_type*\t\teto_next;\n-  int_type* \t\ti_arr = new int_type[size + 1];\n-  int_type*\t\tito_next;\n-\n-  // construct a locale object with the specialized facet.\n-  locale \t\tloc(locale::classic(), new unicode_codecvt);\n-  // sanity check the constructed locale has the specialized facet.\n-  VERIFY( has_facet<unicode_codecvt>(loc) );\n-  const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n-\n-  // in\n-  //  unicode_codecvt::state_type state01(\"UCS-2BE\", \"ISO-8859-15\", 0xfeff, 0);\n-  unicode_codecvt::state_type state01(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state01);\n-  // internal encoding is bigger because of bom\n-  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n-\t\t     i_arr, i_arr + size + 1, ito_next);\n-  VERIFY( r1 == codecvt_base::ok );\n-  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n-  VERIFY( efrom_next == e_lit + size );\n-  VERIFY( ito_next == i_arr + size );\n-\n-  // out\n-  unicode_codecvt::state_type state02(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state02);  \n-  result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n-\t\t       e_arr, e_arr + size, eto_next);\n-  VERIFY( r2 == codecvt_base::ok );\n-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n-  VERIFY( ifrom_next == i_lit + size );\n-  VERIFY( eto_next == e_arr + size );\n-\n-  // unshift\n-  ext_traits::copy(e_arr, e_lit, size);\n-  unicode_codecvt::state_type state03(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state03);\n-  result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n-  VERIFY( r3 == codecvt_base::noconv );\n-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n-  VERIFY( eto_next == e_arr );\n-\n-  int i = cvt.encoding();\n-  VERIFY( i == 2 ); // Target-dependent.\n-\n-  VERIFY( !cvt.always_noconv() );\n-\n-  unicode_codecvt::state_type state04(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state04);\n-  int j = cvt.length(state03, e_lit, e_lit + size, 5);\n-  VERIFY( j == 5 );\n-\n-  int k = cvt.max_length();\n-  VERIFY( k == 1 );\n-\n-  delete [] e_arr;\n-  delete [] i_arr;\n-}\n-\n-// Partial specialization using __enc_traits.\n-// codecvt<unicode_t, char, __enc_traits>\n-// UNICODE - UCS2 (little endian)\n-void test02()\n-{\n-  using namespace std;\n-  typedef codecvt_base::result\t\t\tresult;\n-  typedef unsigned short\t\t\tunicode_t;\n-  typedef unicode_t\t\t\t\tint_type;\n-  typedef char\t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n-  typedef char_traits<int_type>\t\t\tint_traits;\n-  typedef char_traits<ext_type>\t\t\text_traits;\n-\n-  bool test __attribute__((unused)) = true;\n-  const ext_type* \te_lit = \"black pearl jasmine tea\";\n-  int \t\t\tsize = strlen(e_lit);\n-\n-  char  i_lit_base[50] __attribute__((aligned(__alignof__(int_type)))) = \n-  { \n-    0x62, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x20, 0x00,\n-    0x70, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x20, 0x00,\n-    0x6a, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00,\n-    0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x61, 0x00, 0xa0, 0x00\n-  };\n-  const int_type* \ti_lit = reinterpret_cast<int_type*>(i_lit_base);\n-\n-  const ext_type*       efrom_next;\n-  const int_type*       ifrom_next;\n-  ext_type* \t\te_arr = new ext_type[size + 1];\n-  ext_type*\t\teto_next;\n-  int_type* \t\ti_arr = new int_type[size + 1];\n-  int_type*\t\tito_next;\n-\n-  // construct a locale object with the specialized facet.\n-  locale \t\tloc(locale::classic(), new unicode_codecvt);\n-  // sanity check the constructed locale has the specialized facet.\n-  VERIFY( has_facet<unicode_codecvt>(loc) );\n-  const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n-\n-  // in\n-  unicode_codecvt::state_type state01(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state01);\n-  // internal encoding is bigger because of bom\n-  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n-\t\t     i_arr, i_arr + size + 1, ito_next);\n-  VERIFY( r1 == codecvt_base::ok );\n-  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n-  VERIFY( efrom_next == e_lit + size );\n-  VERIFY( ito_next == i_arr + size );\n-\n-  // out\n-  unicode_codecvt::state_type state02(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state02);  \n-  result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n-\t\t       e_arr, e_arr + size, eto_next);\n-  VERIFY( r2 == codecvt_base::ok );\n-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n-  VERIFY( ifrom_next == i_lit + size );\n-  VERIFY( eto_next == e_arr + size );\n-\n-  // unshift\n-  ext_traits::copy(e_arr, e_lit, size);\n-  unicode_codecvt::state_type state03(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state03);\n-  result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n-  VERIFY( r3 == codecvt_base::noconv );\n-  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n-  VERIFY( eto_next == e_arr );\n-\n-  int i = cvt.encoding();\n-  VERIFY( i == 2 ); // Target-dependent.\n-\n-  VERIFY( !cvt.always_noconv() );\n-\n-  unicode_codecvt::state_type state04(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n-  initialize_state(state04);\n-  int j = cvt.length(state03, e_lit, e_lit + size, 5);\n-  VERIFY( j == 5 );\n-\n-  int k = cvt.max_length();\n-  VERIFY( k == 1 );\n-\n-  delete [] e_arr;\n-  delete [] i_arr;\n-}\n-\n-#endif // _GLIBCXX_USE___ENC_TRAITS\n-\n-int main ()\n-{\n-#if _GLIBCXX_USE___ENC_TRAITS\n-  test01();\n-  test02();\n-#endif \n-  return 0;\n-}"}, {"sha": "95f1f9d176d9ebecd4ec74ec192d9d187610ca7a", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/unicode.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -0,0 +1,81 @@\n+// { dg-require-iconv \"ISO-8859-1\" }\n+\n+// Copyright (C) 2006, 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+#include <ext/codecvt_specializations.h>\n+\n+typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+typedef std::codecvt<wchar_t, char, std::mbstate_t>\t      w_codecvt;\n+#endif\n+\n+class gnu_facet: public std::locale::facet\n+{\n+public:\n+  static std::locale::id id;\n+};\n+\n+std::locale::id gnu_facet::id;\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef unsigned short       \t\t\t\tint_type;\n+  typedef char\t\t\t\t\t\text_type;\n+  typedef __gnu_cxx::encoding_state\t       \t\tstate_type;\n+  typedef codecvt<int_type, ext_type, state_type>\tunicode_codecvt;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // unicode_codecvt\n+  locale loc01(locale::classic());\n+  locale loc13(locale::classic(), new unicode_codecvt);  \n+  VERIFY( loc01 != loc13 );\n+  VERIFY( loc13.name() == \"*\" );\n+  try \n+    {\n+      VERIFY( has_facet<c_codecvt>(loc13) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+      VERIFY( has_facet<w_codecvt>(loc13) );\n+#endif\n+      VERIFY( has_facet<unicode_codecvt>(loc13) );\n+    }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    { use_facet<gnu_facet>(loc13); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "02ef036a282c82cc0e71224dcb489a7f2aac185c", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/unicode/1.cc", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68254f23e8c232a4da9b6f0e3fdabe1800a4b014/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode%2F1.cc?ref=68254f23e8c232a4da9b6f0e3fdabe1800a4b014", "patch": "@@ -1,142 +0,0 @@\n-// Copyright (C) 2006 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n-\n-#include <cwchar> // for mbstate_t\n-#include <locale>\n-#include <stdexcept>\n-#include <testsuite_hooks.h>\n-\n-#if _GLIBCXX_USE___ENC_TRAITS\n-typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-typedef std::codecvt<wchar_t, char, std::mbstate_t>\t      w_codecvt;\n-#endif\n-\n-class gnu_facet: public std::locale::facet\n-{\n-public:\n-  static std::locale::id id;\n-};\n-\n-std::locale::id gnu_facet::id;\n-\n-// Need some char_traits specializations for this to work.\n-typedef unsigned short\t\t\tunicode_t;\n-\n-namespace std\n-{\n-  template<>\n-    struct char_traits<unicode_t>\n-    {\n-      typedef unicode_t \tchar_type;\n-      // Unsigned as wint_t is unsigned.\n-      typedef unsigned long  \tint_type;\n-      typedef streampos \tpos_type;\n-      typedef streamoff \toff_type;\n-      typedef mbstate_t \tstate_type;\n-      \n-      static void \n-      assign(char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      eq(const char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      lt(const char_type& __c1, const char_type& __c2);\n-\n-      static int \n-      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return memcmp(__s1, __s2, __n); }\n-\n-      static size_t\n-      length(const char_type* __s);\n-\n-      static const char_type* \n-      find(const char_type* __s, size_t __n, const char_type& __a);\n-\n-      static char_type* \n-      move(char_type* __s1, const char_type* __s2, size_t __n);\n-\n-      static char_type* \n-      copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n-\n-      static char_type* \n-      assign(char_type* __s, size_t __n, char_type __a);\n-\n-      static char_type \n-      to_char_type(const int_type& __c);\n-\n-      static int_type \n-      to_int_type(const char_type& __c);\n-\n-      static bool \n-      eq_int_type(const int_type& __c1, const int_type& __c2);\n-\n-      static int_type \n-      eof(); \n-\n-      static int_type \n-      not_eof(const int_type& __c);\n-    };\n-}\n-\n-void test01()\n-{\n-  using namespace std;\n-  typedef unicode_t\t\t\t\tint_type;\n-  typedef char\t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n-\n-  bool test __attribute__((unused)) = true;\n-\n-  // unicode_codecvt\n-  locale loc13(locale::classic(), new unicode_codecvt);  \n-  VERIFY( loc01 != loc13 );\n-  VERIFY( loc13.name() == \"*\" );\n-  try \n-    {\n-      VERIFY( has_facet<c_codecvt>(loc13) );\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-      VERIFY( has_facet<w_codecvt>(loc13) );\n-#endif\n-      VERIFY( has_facet<unicode_codecvt>(loc13) );\n-    }\n-  catch(...)\n-    { VERIFY( false ); }\n-\n-  try \n-    { use_facet<gnu_facet>(loc13); }\n-  catch(bad_cast& obj)\n-    { VERIFY( true ); }\n-  catch(...)\n-    { VERIFY( false ); }\n-}\n-#endif // _GLIBCXX_USE___ENC_TRAITS\n-\n-int main()\n-{\n-#if _GLIBCXX_USE___ENC_TRAITS\n-  test01();\n-#endif \n-  return 0;\n-}"}, {"sha": "c71e43d22e2bbfaa1776bf72f8e1a4c87b7137ec", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -41,7 +41,11 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n subdir = testsuite\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n@@ -143,6 +147,7 @@ LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@"}, {"sha": "2e3fb746bef5fa140e0af8cca3f027c30e85edc6", "filename": "libstdc++-v3/testsuite/ext/codecvt/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2F1.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -0,0 +1,58 @@\n+// { dg-require-iconv \"UCS-2BE\" }\n+// { dg-require-iconv \"ISO-8859-15\" }\n+// 2003-02-06  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003, 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+#include <ext/codecvt_specializations.h>\n+\n+// Partial specialization using encoding_state\n+// codecvt<unicode_t, char, encoding_state>\n+// UNICODE - UCS2 (big endian)\n+void test01()\n+{\n+  using namespace std;\n+  typedef unsigned short       \t\t      \t\tint_type;\n+  typedef char\t\t\t\t\t\text_type;\n+  typedef __gnu_cxx::encoding_state    \t\t\tstate_type;\n+  typedef codecvt<int_type, ext_type, state_type>\tunicode_codecvt;\n+\n+  bool test __attribute__((unused)) = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  int \t\t\tsize = strlen(e_lit);\n+\n+  // construct a locale object with the specialized facet.\n+  locale \t\tloc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet<unicode_codecvt>(loc) );\n+  const unicode_codecvt& cvt = use_facet<unicode_codecvt>(loc); \n+\n+  unicode_codecvt::state_type state04(\"UCS-2BE\", \"ISO-8859-15\", 0xfeff, 0);\n+  cvt.length(state04, e_lit, e_lit + size, 5);\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "507d7136ee7f5b181d81444f9826d447bf990329", "filename": "libstdc++-v3/testsuite/ext/codecvt/char-1.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-1.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -0,0 +1,140 @@\n+// { dg-require-iconv \"UCS-2BE\" }\n+// { dg-require-iconv \"ISO-8859-15\" }\n+\n+// 2000-08-22 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003, 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+#include <locale>\n+#include <testsuite_hooks.h>\n+#include <ext/codecvt_specializations.h>\n+\n+/*\n+> how do I check that these conversions are correct? \n+Very easy.  Since all the characters are from ASCII you simply\n+zero-extend the values.\n+\n+drepper$ echo 'black pearl jasmine tea' | od -t x1\n+0000000 62 6c 61 63 6b 20 70 65 61 72 6c 20 6a 61 73 6d\n+0000020 69 6e 65 20 74 65 61 0a\n+\n+So the UCS-2 string is\n+\n+0x0062, 0x006c, 0x0061, ...\n+\n+You get the idea.  With iconv() you have to take care of the\n+byte-order, though.  UCS-2 can mean little- or big endian.  Looking at\n+your result\n+\n+> $9 = 25856\n+\n+it shows that the other byte-order is used (25856 == 0x6500).\n+*/\n+\n+// Partial specialization using encoding_state.\n+// codecvt<unicode_t, char, encoding_state>\n+// UNICODE - UCS2 (big endian)\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef unsigned short\t       \t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef __gnu_cxx::encoding_state\t       \t\tstate_type;\n+  typedef codecvt<int_type, ext_type, state_type>\tunicode_codecvt;\n+  typedef char_traits<int_type>\t\t\tint_traits;\n+  typedef char_traits<ext_type>\t\t\text_traits;\n+\n+  bool test __attribute__((unused)) = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  int \t\t\tsize = strlen(e_lit);\n+\n+  char  i_lit_base[50] __attribute__((aligned(__alignof__(int_type)))) = \n+  { \n+    0x00, 0x62, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x20,\n+    0x00, 0x70, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x20,\n+    0x00, 0x6a, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e,\n+    0x00, 0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x61, 0x00, 0xa0\n+  };\n+  const int_type* \ti_lit = reinterpret_cast<int_type*>(i_lit_base);\n+\n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  // construct a locale object with the specialized facet.\n+  locale \t\tloc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet<unicode_codecvt>(loc) );\n+  const unicode_codecvt& cvt = use_facet<unicode_codecvt>(loc); \n+\n+  // in\n+  //  unicode_codecvt::state_type state01(\"UCS-2BE\", \"ISO-8859-15\", 0xfeff, 0);\n+  unicode_codecvt::state_type state01(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n+\n+  // internal encoding is bigger because of bom\n+  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n+\t\t     i_arr, i_arr + size + 1, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+\n+  // out\n+  unicode_codecvt::state_type state02(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n+  result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n+\t\t       e_arr, e_arr + size, eto_next);\n+  VERIFY( r2 == codecvt_base::ok );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( ifrom_next == i_lit + size );\n+  VERIFY( eto_next == e_arr + size );\n+\n+  // unshift\n+  ext_traits::copy(e_arr, e_lit, size);\n+  unicode_codecvt::state_type state03(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n+  result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n+  VERIFY( r3 == codecvt_base::noconv );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( eto_next == e_arr );\n+\n+  int i = cvt.encoding();\n+  VERIFY( i == 2 ); // Target-dependent.\n+\n+  VERIFY( !cvt.always_noconv() );\n+\n+  unicode_codecvt::state_type state04(\"UCS-2BE\", \"ISO-8859-15\", 0, 0);\n+  int j = cvt.length(state03, e_lit, e_lit + size, 5);\n+  VERIFY( j == 5 );\n+\n+  int k = cvt.max_length();\n+  VERIFY( k == 1 );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "19e28aa024ba947f3a96984957a1ec8aad0d762f", "filename": "libstdc++-v3/testsuite/ext/codecvt/char-2.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fchar-2.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -0,0 +1,138 @@\n+// { dg-require-iconv \"UCS-2LE\" }\n+// { dg-require-iconv \"ISO-8859-15\" }\n+\n+// 2000-08-22 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003, 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+#include <locale>\n+#include <testsuite_hooks.h>\n+#include <ext/codecvt_specializations.h>\n+\n+/*\n+> how do I check that these conversions are correct? \n+Very easy.  Since all the characters are from ASCII you simply\n+zero-extend the values.\n+\n+drepper$ echo 'black pearl jasmine tea' | od -t x1\n+0000000 62 6c 61 63 6b 20 70 65 61 72 6c 20 6a 61 73 6d\n+0000020 69 6e 65 20 74 65 61 0a\n+\n+So the UCS-2 string is\n+\n+0x0062, 0x006c, 0x0061, ...\n+\n+You get the idea.  With iconv() you have to take care of the\n+byte-order, though.  UCS-2 can mean little- or big endian.  Looking at\n+your result\n+\n+> $9 = 25856\n+\n+it shows that the other byte-order is used (25856 == 0x6500).\n+*/\n+\n+// Partial specialization using encoding_state.\n+// codecvt<unicode_t, char, encoding_state>\n+// UNICODE - UCS2 (little endian)\n+void test02()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef unsigned short\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef __gnu_cxx::encoding_state\t       \t\tstate_type;\n+  typedef codecvt<int_type, ext_type, state_type>\tunicode_codecvt;\n+  typedef char_traits<int_type>\t\t\tint_traits;\n+  typedef char_traits<ext_type>\t\t\text_traits;\n+\n+  bool test __attribute__((unused)) = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  int \t\t\tsize = strlen(e_lit);\n+\n+  char  i_lit_base[50] __attribute__((aligned(__alignof__(int_type)))) = \n+  { \n+    0x62, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6b, 0x00, 0x20, 0x00,\n+    0x70, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x20, 0x00,\n+    0x6a, 0x00, 0x61, 0x00, 0x73, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00,\n+    0x65, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x61, 0x00, 0xa0, 0x00\n+  };\n+  const int_type* \ti_lit = reinterpret_cast<int_type*>(i_lit_base);\n+\n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  // construct a locale object with the specialized facet.\n+  locale \t\tloc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet<unicode_codecvt>(loc) );\n+  const unicode_codecvt& cvt = use_facet<unicode_codecvt>(loc); \n+\n+  // in\n+  unicode_codecvt::state_type state01(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n+  // internal encoding is bigger because of bom\n+  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n+\t\t     i_arr, i_arr + size + 1, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+\n+  // out\n+  unicode_codecvt::state_type state02(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n+  result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n+\t\t       e_arr, e_arr + size, eto_next);\n+  VERIFY( r2 == codecvt_base::ok );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( ifrom_next == i_lit + size );\n+  VERIFY( eto_next == e_arr + size );\n+\n+  // unshift\n+  ext_traits::copy(e_arr, e_lit, size);\n+  unicode_codecvt::state_type state03(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n+  result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n+  VERIFY( r3 == codecvt_base::noconv );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( eto_next == e_arr );\n+\n+  int i = cvt.encoding();\n+  VERIFY( i == 2 ); // Target-dependent.\n+\n+  VERIFY( !cvt.always_noconv() );\n+\n+  unicode_codecvt::state_type state04(\"UCS-2LE\", \"ISO-8859-15\", 0, 0);\n+  int j = cvt.length(state03, e_lit, e_lit + size, 5);\n+  VERIFY( j == 5 );\n+\n+  int k = cvt.max_length();\n+  VERIFY( k == 1 );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "fcc3d0220f0a86c3b8b85314cc2eecbb737823a4", "filename": "libstdc++-v3/testsuite/ext/codecvt/wchar_t.cc", "status": "renamed", "additions": 11, "deletions": 81, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fwchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fwchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fcodecvt%2Fwchar_t.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,6 +1,9 @@\n+// { dg-require-iconv \"UCS-2BE\" }\n+// { dg-require-iconv \"UCS-4BE\" }\n+\n // 2000-08-23 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003, 2007 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,84 +25,18 @@\n \n #include <locale>\n #include <testsuite_hooks.h>\n+#include <ext/codecvt_specializations.h>\n \n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n-\n-// Need some char_traits specializations for this to work.\n-typedef unsigned short\t\t\tunicode_t;\n-\n-namespace std\n-{\n-  template<>\n-    struct char_traits<unicode_t>\n-    {\n-      typedef unicode_t \tchar_type;\n-      // Unsigned as wint_t is unsigned.\n-      typedef unsigned long  \tint_type;\n-      typedef streampos \tpos_type;\n-      typedef streamoff \toff_type;\n-      typedef mbstate_t \tstate_type;\n-      \n-      static void \n-      assign(char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      eq(const char_type& __c1, const char_type& __c2);\n-\n-      static bool \n-      lt(const char_type& __c1, const char_type& __c2);\n-\n-      static int \n-      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return memcmp(__s1, __s2, __n); }\n-\n-      static size_t\n-      length(const char_type* __s);\n-\n-      static const char_type* \n-      find(const char_type* __s, size_t __n, const char_type& __a);\n-\n-      static char_type* \n-      move(char_type* __s1, const char_type* __s2, size_t __n);\n-\n-      static char_type* \n-      copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      {  return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n-\n-      static char_type* \n-      assign(char_type* __s, size_t __n, char_type __a);\n-\n-      static char_type \n-      to_char_type(const int_type& __c);\n-\n-      static int_type \n-      to_int_type(const char_type& __c);\n-\n-      static bool \n-      eq_int_type(const int_type& __c1, const int_type& __c2);\n-\n-      static int_type \n-      eof(); \n-\n-      static int_type \n-      not_eof(const int_type& __c);\n-    };\n-}\n-\n-void\n-initialize_state(std::__enc_traits& state)\n-{ state._M_init(); }\n-\n-// Partial specialization using __enc_traits.\n-// codecvt<unicode_t, wchar_t, __enc_traits>\n+// Partial specialization using encoding_state.\n+// codecvt<unicode_t, wchar_t, encoding_state>\n void test01()\n {\n   using namespace std;\n   typedef codecvt_base::result\t\t\tresult;\n-  typedef unicode_t\t\t\t\tint_type;\n+  typedef unsigned short       \t\t\tint_type;\n   typedef wchar_t\t\t\t\text_type;\n-  typedef __enc_traits\t\t\t\tenc_type;\n-  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n+  typedef __gnu_cxx::encoding_state\t       \t\tstate_type;\n+  typedef codecvt<int_type, ext_type, state_type>\tunicode_codecvt;\n   typedef char_traits<int_type>\t\t\tint_traits;\n   typedef char_traits<ext_type>\t\t\text_traits;\n \n@@ -138,12 +75,11 @@ void test01()\n   locale \t\tloc(locale::classic(), new unicode_codecvt);\n   // sanity check the constructed locale has the specialized facet.\n   VERIFY( has_facet<unicode_codecvt>(loc) );\n-  const unicode_codecvt&\tcvt = use_facet<unicode_codecvt>(loc); \n+  const unicode_codecvt& cvt = use_facet<unicode_codecvt>(loc); \n \n   // in\n   //  unicode_codecvt::state_type state01(\"UCS-2BE\", \"UCS-4BE\", 0xfeff, 0);\n   unicode_codecvt::state_type state01(\"UCS-2BE\", \"UCS-4BE\", 0, 0);\n-  initialize_state(state01);\n   result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n \t\t     i_arr, i_arr + size + 1, ito_next);\n   VERIFY( r1 == codecvt_base::ok );\n@@ -153,7 +89,6 @@ void test01()\n \n   // out\n   unicode_codecvt::state_type state02(\"UCS-2BE\", \"UCS-4BE\", 0, 0);\n-  initialize_state(state02);  \n   result r2 = cvt.out(state02, i_lit, i_lit + size, ifrom_next, \n \t\t       e_arr, e_arr + size, eto_next);   \n   VERIFY( r2 == codecvt_base::ok ); // XXX?\n@@ -164,7 +99,6 @@ void test01()\n   // unshift\n   ext_traits::copy(e_arr, e_lit, size);\n   unicode_codecvt::state_type state03(\"UCS-2BE\", \"UCS-4BE\", 0, 0);\n-  initialize_state(state03);\n   result r3 = cvt.unshift(state03, e_arr, e_arr + size, eto_next);\n   VERIFY( r3 == codecvt_base::noconv );\n   VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n@@ -176,7 +110,6 @@ void test01()\n   VERIFY( !cvt.always_noconv() );\n \n   unicode_codecvt::state_type state04(\"UCS-2BE\", \"UCS-4BE\", 0, 0);\n-  initialize_state(state04);\n   int j = cvt.length(state03, e_lit, e_lit + size, 5);\n   VERIFY( j == 5 );\n \n@@ -186,13 +119,10 @@ void test01()\n   delete [] e_arr;\n   delete [] i_arr;\n }\n-#endif // _GLIBCXX_USE___ENC_TRAITS\n \n int main ()\n {\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n   test01();\n-#endif \n   return 0;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/wchar_t.cc"}, {"sha": "461bdf9ee87a47082ef2c3ca7773174c78c2cc4b", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13189.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13189.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,4 +1,6 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n+// { dg-require-iconv \"ISO-8859-1\" }\n+\n+// Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,17 +19,14 @@\n // USA.\n \n #include <testsuite_hooks.h>\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n #include <ext/enc_filebuf.h>\n-#endif\n \n void test01()\n {\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n   using namespace std;\n-  typedef __enc_traits state_type;\n   typedef char char_type;\n   typedef __gnu_cxx::enc_filebuf<char_type> filebuf_type;\n+  typedef filebuf_type::state_type state_type;\n   typedef codecvt<char_type, char, state_type> enc_codecvt;\n \n   bool test __attribute__((unused)) = true;\n@@ -47,7 +46,6 @@ void test01()\n   catch(...)\n     {\n     }\n-#endif\n }\n \n int main() "}, {"sha": "3aa7de8cd82ce069135e3021d156e0ac193d1cb0", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/char/13598.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fchar%2F13598.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,4 +1,6 @@\n-// Copyright (C) 2004 Free Software Foundation\n+// { dg-require-iconv \"ISO-8859-1\" }\n+\n+// Copyright (C) 2004, 2007 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,20 +21,20 @@\n #include <locale>\n #include <cstring>\n #include <testsuite_hooks.h>\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n #include <ext/enc_filebuf.h>\n-#endif\n \n int main()\n {\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n   bool test __attribute__((unused)) = true;\n+  typedef char char_type;\n+  typedef __gnu_cxx::enc_filebuf<char_type> filebuf_type;\n+  typedef filebuf_type::state_type state_type;\n \n   const char* str = \"Hello, world!\\n\";\n   std::locale loc(std::locale::classic(),\n-\t\t  new std::codecvt<char, char, std::__enc_traits>());\n-  std::__enc_traits st(\"ISO-8859-1\", \"ISO-8859-1\");\n-  __gnu_cxx::enc_filebuf<char> fb(st);\n+\t\t  new std::codecvt<char, char, __gnu_cxx::encoding_state>());\n+  state_type st(\"ISO-8859-1\", \"ISO-8859-1\");\n+  filebuf_type fb(st);\n   fb.pubimbue(loc);\n \n   fb.open(\"tmp_13598\", std::ios_base::out);\n@@ -42,7 +44,6 @@ int main()\n   \n   VERIFY( n == std::strlen(str) );\n   VERIFY( s == 0 );\n-#endif\n   \n   return 0;\n }"}, {"sha": "9dc4152692f7e02b4fbe75f78a0bf0e96e25d5e6", "filename": "libstdc++-v3/testsuite/ext/enc_filebuf/wchar_t/13189.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ffe6e87dc5f2aecddf83192b7528202f647faaa/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fenc_filebuf%2Fwchar_t%2F13189.cc?ref=4ffe6e87dc5f2aecddf83192b7528202f647faaa", "patch": "@@ -1,4 +1,6 @@\n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n+// { dg-require-iconv \"ISO-8859-1\" }\n+\n+// Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -17,17 +19,14 @@\n // USA.\n \n #include <testsuite_hooks.h>\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n #include <ext/enc_filebuf.h>\n-#endif\n \n void test01()\n {\n-#ifdef _GLIBCXX_USE___ENC_TRAITS\n   using namespace std;\n-  typedef __enc_traits state_type;\n   typedef wchar_t char_type;\n   typedef __gnu_cxx::enc_filebuf<char_type> filebuf_type;\n+  typedef filebuf_type::state_type state_type;\n   typedef codecvt<char_type, char, state_type> enc_codecvt;\n \n   bool test __attribute__((unused)) = true;\n@@ -47,7 +46,6 @@ void test01()\n   catch(...)\n     {\n     }\n-#endif\n }\n \n int main() "}]}