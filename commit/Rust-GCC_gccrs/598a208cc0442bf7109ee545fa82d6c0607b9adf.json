{"sha": "598a208cc0442bf7109ee545fa82d6c0607b9adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4YTIwOGNjMDQ0MmJmNzEwOWVlNTQ1ZmE4MmQ2YzA2MDdiOWFkZg==", "commit": {"author": {"name": "Casey Carter", "email": "casey@carter.net", "date": "2016-03-14T19:57:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-14T19:57:54Z"}, "message": "P08184R0: Generalizing the Range-Based For Loop\n\n\t* parser.c (cp_convert_range_for): Set the type of __end separately.\n\t(cp_parser_perform_range_for_lookup): Allow different begin/end\n\ttypes if they are comparable.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r234191", "tree": {"sha": "34ab5c82e313155f42a5d0b7684c3fda07a35970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ab5c82e313155f42a5d0b7684c3fda07a35970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598a208cc0442bf7109ee545fa82d6c0607b9adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a208cc0442bf7109ee545fa82d6c0607b9adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598a208cc0442bf7109ee545fa82d6c0607b9adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598a208cc0442bf7109ee545fa82d6c0607b9adf/comments", "author": {"login": "CaseyCarter", "id": 456873, "node_id": "MDQ6VXNlcjQ1Njg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/456873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaseyCarter", "html_url": "https://github.com/CaseyCarter", "followers_url": "https://api.github.com/users/CaseyCarter/followers", "following_url": "https://api.github.com/users/CaseyCarter/following{/other_user}", "gists_url": "https://api.github.com/users/CaseyCarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaseyCarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaseyCarter/subscriptions", "organizations_url": "https://api.github.com/users/CaseyCarter/orgs", "repos_url": "https://api.github.com/users/CaseyCarter/repos", "events_url": "https://api.github.com/users/CaseyCarter/events{/privacy}", "received_events_url": "https://api.github.com/users/CaseyCarter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cbf012a4007511b8989d90e9450a93d4c75a8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbf012a4007511b8989d90e9450a93d4c75a8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbf012a4007511b8989d90e9450a93d4c75a8a6"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "1a668e89fdcfe78ddebcfed22681bbd66584c6af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=598a208cc0442bf7109ee545fa82d6c0607b9adf", "patch": "@@ -1,3 +1,11 @@\n+2016-03-14  Casey Carter  <casey@carter.net>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tP08184R0: Generalizing the Range-Based For Loop\n+\t* parser.c (cp_convert_range_for): Set the type of __end separately.\n+\t(cp_parser_perform_range_for_lookup): Allow different begin/end\n+\ttypes if they are comparable.\n+\n 2016-03-12  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/70106"}, {"sha": "d38f1dd9a5c228bdbadda028bfdddb12fe3173bb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=598a208cc0442bf7109ee545fa82d6c0607b9adf", "patch": "@@ -11353,6 +11353,8 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n \t\t  /*is_constant_init*/false, NULL_TREE,\n \t\t  LOOKUP_ONLYCONVERTING);\n \n+  if (cxx_dialect >= cxx1z)\n+    iter_type = cv_unqualified (TREE_TYPE (end_expr));\n   end = build_decl (input_location, VAR_DECL,\n \t\t    get_identifier (\"__for_end\"), iter_type);\n   TREE_USED (end) = 1;\n@@ -11488,9 +11490,21 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t  /* The unqualified type of the __begin and __end temporaries should\n \t     be the same, as required by the multiple auto declaration.  */\n \t  if (!same_type_p (iter_type, cv_unqualified (TREE_TYPE (*end))))\n-\t    error (\"inconsistent begin/end types in range-based %<for%> \"\n-\t\t   \"statement: %qT and %qT\",\n-\t\t   TREE_TYPE (*begin), TREE_TYPE (*end));\n+\t    {\n+\t      if (cxx_dialect >= cxx1z\n+\t\t  && (build_x_binary_op (input_location, NE_EXPR,\n+\t\t\t\t\t *begin, ERROR_MARK,\n+\t\t\t\t\t *end, ERROR_MARK,\n+\t\t\t\t\t NULL, tf_none)\n+\t\t      != error_mark_node))\n+\t\t/* P08184R0 allows __begin and __end to have different types,\n+\t\t   but make sure they are comparable so we can give a better\n+\t\t   diagnostic.  */;\n+\t      else\n+\t\terror (\"inconsistent begin/end types in range-based %<for%> \"\n+\t\t       \"statement: %qT and %qT\",\n+\t\t       TREE_TYPE (*begin), TREE_TYPE (*end));\n+\t    }\n \t  return iter_type;\n \t}\n     }"}, {"sha": "2a20db47599cdc440f4bc45b7e1537ec16e06dd9", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for5.C?ref=598a208cc0442bf7109ee545fa82d6c0607b9adf", "patch": "@@ -31,7 +31,7 @@ struct Explicit\n void test1()\n {\n   container c;\n-  for (int x : c) // { dg-error \"inconsistent|conversion\" }\n+  for (int x : c) // { dg-error \"inconsistent|conversion|comparison\" }\n     ;\n \n   int a[2] = {1,2};"}, {"sha": "370381ab60f9489679e8847e0bd798e50462aa8b", "filename": "gcc/testsuite/g++.dg/cpp1z/range-for1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598a208cc0442bf7109ee545fa82d6c0607b9adf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C?ref=598a208cc0442bf7109ee545fa82d6c0607b9adf", "patch": "@@ -0,0 +1,23 @@\n+// P08184R0: Generalizing the Range-Based For Loop\n+// { dg-options \"-std=c++1z\" }\n+\n+struct A {\n+  int ar[4];\n+  int *begin() { return ar; }\n+  struct end_t {\n+    int *p;\n+    friend bool operator!= (int *p, end_t e) { return p != e.p; }\n+  };\n+  end_t end() { return { &ar[4] }; }\n+};\n+\n+int main()\n+{\n+  A a { 1, 2, 3, 4 };\n+  int i = 1;\n+  for (auto x: a)\n+    if (x != i++)\n+      __builtin_abort ();\n+  if (i != 5)\n+    __builtin_abort ();\n+}"}]}