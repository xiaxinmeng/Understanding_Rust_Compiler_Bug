{"sha": "e939885ff55dc2a789f35c222ae2ef8066da91f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzOTg4NWZmNTVkYzJhNzg5ZjM1YzIyMmFlMmVmODA2NmRhOTFmNQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-01-30T21:20:40Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-01-30T21:20:40Z"}, "message": "java-interp.h (insn_index): New declaration.\n\n        * include/java-interp.h (insn_index): New declaration.\n        (num_insn_slots): New private variable.\n        (get_line_table): New declaration.\n        * interpret.cc (insn_index): New function.\n        (get_line_table): New function.\n\nFrom-SVN: r110411", "tree": {"sha": "968bcb2cb0b7db70800e52126823c1196c8c4bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/968bcb2cb0b7db70800e52126823c1196c8c4bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e939885ff55dc2a789f35c222ae2ef8066da91f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e939885ff55dc2a789f35c222ae2ef8066da91f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e939885ff55dc2a789f35c222ae2ef8066da91f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e939885ff55dc2a789f35c222ae2ef8066da91f5/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f34312c23cde2f7cb65ad7e7a7e996278d4d1566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34312c23cde2f7cb65ad7e7a7e996278d4d1566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34312c23cde2f7cb65ad7e7a7e996278d4d1566"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "bb1ca39f46dacd9a3745ac5bd6a2dfd000f2e366", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e939885ff55dc2a789f35c222ae2ef8066da91f5", "patch": "@@ -1,3 +1,11 @@\n+2006-01-30  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-interp.h (insn_index): New declaration.\n+\t(num_insn_slots): New private variable.\n+\t(get_line_table): New declaration.\n+\t* interpret.cc (insn_index): New function.\n+\t(get_line_table): New function.\n+\n 2006-01-24  Archit Shah  <ashah@redhat.com>\n \t    Tom Tromey  <tromey@redhat.com>\n "}, {"sha": "73ab2fe0ae67f697098871d0aa9b373274ca2946", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=e939885ff55dc2a789f35c222ae2ef8066da91f5", "patch": "@@ -145,6 +145,7 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   _Jv_LineTableEntry *line_table;\n \n   void *prepared;\n+  int number_insn_slots;\n \n   unsigned char* bytecode () \n   {\n@@ -182,9 +183,24 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   // number info is unavailable.\n   int get_source_line(pc_t mpc);\n \n+#ifdef DIRECT_THREADED\n+  // Convenience function for indexing bytecode PC/insn slots in\n+  // line tables for JDWP\n+  jlong insn_index (pc_t pc);\n+#endif\n+\n  public:\n   static void dump_object(jobject o);\n \n+  /* Get the line table for this method.\n+   * start  is the lowest index in the method\n+   * end    is the  highest index in the method\n+   * line_numbers is an array to hold the list of source line numbers\n+   * code_indices is an array to hold the corresponding list of code indices\n+   */\n+  void get_line_table (jlong& start, jlong& end, jintArray& line_numbers,\n+\t\t       jlongArray& code_indices);\n+\n #ifdef DIRECT_THREADED\n   friend void _Jv_CompileMethod (_Jv_InterpMethod*);\n #endif"}, {"sha": "87d357c94c2c7583b17000421f57cafb515da5ec", "filename": "libjava/interpret.cc", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e939885ff55dc2a789f35c222ae2ef8066da91f5/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=e939885ff55dc2a789f35c222ae2ef8066da91f5", "patch": "@@ -330,6 +330,7 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n       if (! first_pass)\n \t{\n \t  insns = (insn_slot *) _Jv_AllocBytes (sizeof (insn_slot) * next);\n+\t  number_insn_slots = next;\n \t  next = 0;\n \t}\n \n@@ -3672,6 +3673,80 @@ _Jv_InterpMethod::ncode ()\n   return self->ncode;\n }\n \n+#ifdef DIRECT_THREADED\n+/* Find the index of the given insn in the array of insn slots\n+   for this method. Returns -1 if not found. */\n+jlong\n+_Jv_InterpMethod::insn_index (pc_t pc)\n+{\n+  jlong left = 0;\n+  jlong right = number_insn_slots;\n+  insn_slot* slots = reinterpret_cast<insn_slot*> (prepared);\n+\n+  while (right >= 0)\n+    {\n+      jlong mid = (left + right) / 2;\n+      if (&slots[mid] == pc)\n+\treturn mid;\n+\n+      if (pc < &slots[mid])\n+\tright = mid - 1;\n+      else\n+        left = mid + 1;\n+    }\n+\n+  return -1;\n+}\n+#endif // DIRECT_THREADED\n+\n+void\n+_Jv_InterpMethod::get_line_table (jlong& start, jlong& end,\n+\t\t\t\t  jintArray& line_numbers,\n+\t\t\t\t  jlongArray& code_indices)\n+{\n+#ifdef DIRECT_THREADED\n+  /* For the DIRECT_THREADED case, if the method has not yet been\n+   * compiled, the linetable will change to insn slots instead of\n+   * bytecode PCs. It is probably easiest, in this case, to simply\n+   * compile the method and guarantee that we are using insn\n+   * slots.\n+   */\n+  _Jv_CompileMethod (this);\n+\n+  if (line_table_len > 0)\n+    {\n+      start = 0;\n+      end = number_insn_slots;\n+      line_numbers = JvNewIntArray (line_table_len);\n+      code_indices = JvNewLongArray (line_table_len);\n+\n+      jint* lines = elements (line_numbers);\n+      jlong* indices = elements (code_indices);\n+      for (int i = 0; i < line_table_len; ++i)\n+\t{\n+\t  lines[i] = line_table[i].line;\n+\t  indices[i] = insn_index (line_table[i].pc);\n+\t}\n+    }\n+#else // !DIRECT_THREADED\n+  if (line_table_len > 0)\n+    {\n+      start = 0;\n+      end = code_length;\n+      line_numbers = JvNewIntArray (line_table_len);\n+      code_indices = JvNewLongArray (line_table_len);\n+\n+      jint* lines = elements (line_numbers);\n+      jlong* indices = elements (code_indices);\n+      for (int i = 0; i < line_table_len; ++i)\n+\t{\n+\t  lines[i] = line_table[i].line;\n+\t  indices[i] = (jlong) line_table[i].bytecode_pc;\n+\t}\n+    }\n+#endif // !DIRECT_THREADED\n+}\n+\n void *\n _Jv_JNIMethod::ncode ()\n {"}]}