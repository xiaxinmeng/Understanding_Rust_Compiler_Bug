{"sha": "a1ca758fd5e98d87d382958e92af1d5733fe066b", "node_id": "C_kwDOANBUbNoAKGExY2E3NThmZDVlOThkODdkMzgyOTU4ZTkyYWYxZDU3MzNmZTA2NmI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-05T08:27:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:23Z"}, "message": "RISC-V: Add vsaddu.vx overloaded API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-3.C: New test.", "tree": {"sha": "c44da1b7a437ab186c1258af3731b28afd7833d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c44da1b7a437ab186c1258af3731b28afd7833d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ca758fd5e98d87d382958e92af1d5733fe066b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ca758fd5e98d87d382958e92af1d5733fe066b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ca758fd5e98d87d382958e92af1d5733fe066b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ca758fd5e98d87d382958e92af1d5733fe066b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3762ff2450c41b4e3ea5eabdffe344259f03bb22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3762ff2450c41b4e3ea5eabdffe344259f03bb22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3762ff2450c41b4e3ea5eabdffe344259f03bb22"}], "stats": {"total": 5670, "additions": 5670, "deletions": 0}, "files": [{"sha": "213bb204d89aa400e8c7eaa77e6d5e984e7e6a1a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "68adbefa3c9b0173a7e7e6a6fe3dacab55c04787", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "7f1dfa8052b59e6bba8d1c8c11127d46a1a9b7b8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv32-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "2282029601bb565fabf13be7fd0d862f9464f3b2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b9caac68d35d9abd96536eb54f1fd472df83abad", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "0e4ac04ccc8448c862ac18beb272f3fcc4ed8dbf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_mu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_mu_rv64-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "0012f95a740afb8b9015a82aa850cf1d5e9d8d0a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv32-1.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "f344fdfeec2538d0dfdda8995a28bed6556c9b46", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv32-2.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "045b54dd660ff335e0e5b81a5af6826514d8ad5a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv32-3.C", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv32-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,308 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "ca612649879e04a56ae30a637ffcd2cedc7e1112", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv64-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "692e4f6350973d026d8360be3e54a414e98e33e9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv64-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d2e3cc27d357c219fec0eb324b15ea4f32ea1be0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_rv64-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_rv64-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsaddu(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "399b070c3955c810337c675cca0f5260d6aa8409", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "50931f4928fd40d6a718620263dc72ea6c71c8f5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "08364b94462cec765a7d3d6d67ec4bc06289b066", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv32-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 4 } } */"}, {"sha": "e2f989cbbd8b44422bc0453246752f1dea961420", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "857562681a3740de7431b5718e7b304d5ef0280e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "eae32aa538903ef7b7359331d60b9fe613471b4c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tu_rv64-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "a887b4093f0d6424f02cc5b1d61922f1fc962f9b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "1d0abbccc74c6e27f25bd23593588a474b9bbc6d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "b6a9f9c7391cc80d7801a78aa4d67dc47a2053db", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv32-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "a280b4d69c25f76828c7927492f435b7a1cd54d9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5cb8c99572aa257aa6c81c723d5c83109c23ba71", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1b8c7637409f53d12c85b94747dc0c25b0f35b7a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tum_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tum_rv64-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "917be338eb0aa0dfc8da6b4e3d78c6ffd9566fe1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-1.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "739cb6843ba8d34984c8f761ec891f15208db825", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-2.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "c949432ec3134127d8464cb5316d853c533708bf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv32-3.C", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv32-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 4 } } */"}, {"sha": "7dd1bbfc197f29e665c36496fc0f5868188fd1e2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-1.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8511d8dcf4db6120485a3cb66013152278d82b6d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-2.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1d0d68831d83b5abd59dea275e42d8f70461bf8e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsaddu_vx_tumu_rv64-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ca758fd5e98d87d382958e92af1d5733fe066b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsaddu_vx_tumu_rv64-3.C?ref=a1ca758fd5e98d87d382958e92af1d5733fe066b", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsaddu_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsaddu_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsaddu_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsaddu_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsaddu_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsaddu_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsaddu_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vsaddu_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsaddu\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}