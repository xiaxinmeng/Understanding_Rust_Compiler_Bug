{"sha": "56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmZTdiMDUyZGRhMTEzOWQyNWJkZGFkMmU5ZmU5Y2I2ZWEyMjJiZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-20T08:14:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-20T08:14:36Z"}, "message": "trans.c (call_to_gnu): When creating the copy for a non-addressable parameter passed by reference...\n\n\t* gcc-interface/trans.c (call_to_gnu): When creating the copy for a\n\tnon-addressable parameter passed by reference, do not convert the\n\tactual if its type is already the nominal type, unless it is of\n\tself-referential size.\n\nFrom-SVN: r146367", "tree": {"sha": "12b07c2e67856fa1453bb4666308a9705b08eba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b07c2e67856fa1453bb4666308a9705b08eba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/comments", "author": null, "committer": null, "parents": [{"sha": "9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "7075b6f5e54409127a32b72217abe88111ad46dc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "patch": "@@ -1,3 +1,10 @@\n+2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (call_to_gnu): When creating the copy for a\n+\tnon-addressable parameter passed by reference, do not convert the\n+\tactual if its type is already the nominal type, unless it is of\n+\tself-referential size.\n+\n 2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_ugn.texi: Fix typos."}, {"sha": "0b46b56a89eb4ff8f1bdb2f4d2801f364e4676af", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "patch": "@@ -2511,12 +2511,19 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t\t     gnat_formal);\n \t    }\n \n-\t  /* Remove any unpadding from the object and reset the copy.  */\n-\t  if (TREE_CODE (gnu_name) == COMPONENT_REF\n-\t      && ((TREE_CODE (TREE_TYPE (TREE_OPERAND (gnu_name, 0)))\n-\t\t   == RECORD_TYPE)\n-\t\t  && (TYPE_IS_PADDING_P\n-\t\t      (TREE_TYPE (TREE_OPERAND (gnu_name, 0))))))\n+\t  /* If the actual type of the object is already the nominal type,\n+\t     we have nothing to do, except if the size is self-referential\n+\t     in which case we'll remove the unpadding below.  */\n+\t  if (TREE_TYPE (gnu_name) == gnu_name_type\n+\t      && !CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_name_type)))\n+\t    ;\n+\n+\t  /* Otherwise remove unpadding from the object and reset the copy.  */\n+\t  else if (TREE_CODE (gnu_name) == COMPONENT_REF\n+\t\t   && ((TREE_CODE (TREE_TYPE (TREE_OPERAND (gnu_name, 0)))\n+\t\t\t== RECORD_TYPE)\n+\t\t\t&& (TYPE_IS_PADDING_P\n+\t\t\t    (TREE_TYPE (TREE_OPERAND (gnu_name, 0))))))\n \t    gnu_name = gnu_copy = TREE_OPERAND (gnu_name, 0);\n \n \t  /* Otherwise convert to the nominal type of the object if it's\n@@ -2529,7 +2536,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t  else if (TREE_CODE (gnu_name_type) == RECORD_TYPE\n \t\t   && (TYPE_JUSTIFIED_MODULAR_P (gnu_name_type)\n \t\t       || smaller_packable_type_p (TREE_TYPE (gnu_name),\n-\t\t\t\t\t\t gnu_name_type)))\n+\t\t\t\t\t\t   gnu_name_type)))\n \t    gnu_name = convert (gnu_name_type, gnu_name);\n \n \t  /* Make a SAVE_EXPR to both properly account for potential side"}, {"sha": "df0281d96c2004e115e9570de608e323455ceff1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "patch": "@@ -1,3 +1,7 @@\n+2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/rep_clause3.adb: New test.\n+\n 2009-04-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/37481"}, {"sha": "f4adcc37bf6caf6c8e7a47b99f50a39ec5fea5bb", "filename": "gcc/testsuite/gnat.dg/rep_clause3.adb", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56fe7b052dda1139d25bddad2e9fe9cb6ea222bf/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frep_clause3.adb?ref=56fe7b052dda1139d25bddad2e9fe9cb6ea222bf", "patch": "@@ -0,0 +1,47 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+procedure Rep_Clause3 is\n+\n+   subtype U_16 is integer range 0..2**16-1;\n+\n+   type TYPE1 is range 0 .. 135;\n+   for TYPE1'size use 14;\n+\n+   type TYPE2 is range 0 .. 262_143;\n+   for TYPE2'size use 18;\n+\n+   subtype TYPE3 is integer range 1 .. 21*6;\n+\n+   type ARR is array (TYPE3 range <>) of boolean;\n+   pragma Pack(ARR);\n+\n+   subtype SUB_ARR is ARR(1 .. 5*6);\n+\n+   OBJ  : SUB_ARR;\n+\n+   type R is\n+    record\n+      N   : TYPE1;\n+      L   : TYPE2;\n+      I   : SUB_ARR;\n+      CRC : U_16;\n+     end record;\n+    for R use\n+     record at mod 4;\n+      N   at  0 range  0 .. 13;\n+      L   at  0 range 14 .. 31;\n+      I   at  4 range  2 .. 37;\n+      CRC at  8 range 16 .. 31;\n+     end record;\n+   for R'size use 12*8;\n+\n+   type SUB_R is array (1..4) of R;\n+\n+   T : SUB_R;\n+\n+begin\n+  if OBJ = T(1).I then\n+    raise Program_Error;\n+  end if;\n+end;"}]}