{"sha": "cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyN2Y1YTIxYzYxN2RiNTAzODNhMDFhYTA0YmNmODdiMjRhNmJmYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-28T12:23:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-28T12:23:31Z"}, "message": "locale_facets.tcc (time_get::_M_extract_num): Absolutely avoid dereferencing end iterators.\n\n2003-10-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (time_get::_M_extract_num):\n\tAbsolutely avoid dereferencing end iterators.\n\t(time_get::_M_extract_name): Likewise.\n\n\t* include/bits/locale_facets.tcc\n\t(time_get::_M_extract_via_format, case 'e'): Don't try to\n\tbe smart wrt returning the right __beg in case of parse\n\terror, time_get::_M_extract_num must be fixed instead.\n\nFrom-SVN: r73004", "tree": {"sha": "034beb359a992dd2e0b2f8b6c93657ea6c0178c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/034beb359a992dd2e0b2f8b6c93657ea6c0178c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc27f5a21c617db50383a01aa04bcf87b24a6bfa/comments", "author": null, "committer": null, "parents": [{"sha": "699a49253d97f38233c87f86030915eea94d3c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699a49253d97f38233c87f86030915eea94d3c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699a49253d97f38233c87f86030915eea94d3c49"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "e773f32ff48e18b911d133bf579914a93408cc39", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27f5a21c617db50383a01aa04bcf87b24a6bfa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27f5a21c617db50383a01aa04bcf87b24a6bfa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "patch": "@@ -1,3 +1,14 @@\n+2003-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (time_get::_M_extract_num):\n+\tAbsolutely avoid dereferencing end iterators.\n+\t(time_get::_M_extract_name): Likewise.\n+\n+\t* include/bits/locale_facets.tcc\n+\t(time_get::_M_extract_via_format, case 'e'): Don't try to\n+\tbe smart wrt returning the right __beg in case of parse\n+\terror, time_get::_M_extract_num must be fixed instead.\n+\n 2003-10-27  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/12778"}, {"sha": "c890e7026f46b3d99df7baf1b30363c78ecd9eed", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc27f5a21c617db50383a01aa04bcf87b24a6bfa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc27f5a21c617db50383a01aa04bcf87b24a6bfa/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cc27f5a21c617db50383a01aa04bcf87b24a6bfa", "patch": "@@ -1619,11 +1619,9 @@ namespace std\n \t\t  if (__ctype.is(ctype_base::space, *__beg))\n \t\t    _M_extract_num(++__beg, __end, __tm->tm_mday, 1, 9, 1,\n \t\t\t\t   __ctype, __err);\n-\t\t  else if (*__beg != __ctype.widen('0'))\n+\t\t  else\n \t\t    _M_extract_num(__beg, __end, __tm->tm_mday, 10, 31, 2,\n \t\t\t\t   __ctype, __err);\t\t    \n-\t\t  else\n-\t\t    __err |= ios_base::failbit;\n \t\t  break;\t\t    \n \t\tcase 'D':\n \t\t  // Equivalent to %m/%d/%y.[tm_mon, tm_mday, tm_year]\n@@ -1763,14 +1761,9 @@ namespace std\n       size_t __i = 0;\n       string __digits;\n       bool __testvalid = true;\n-      char_type __c = *__beg;\n-      while (__beg != __end && __i < __len \n-\t     && __ctype.is(ctype_base::digit, __c)) \n-\t{\n-\t  __digits += __ctype.narrow(__c, 0);\n-\t  __c = *(++__beg);\n-\t  ++__i;\n-\t}\n+      for (; __beg != __end && __i < __len \n+\t     && __ctype.is(ctype_base::digit, *__beg); ++__beg, ++__i) \n+\t__digits += __ctype.narrow(*__beg, 0);\n       if (__i == __len)\n \t{\n \t  const int __value = std::atoi(__digits.c_str());\n@@ -1802,11 +1795,14 @@ namespace std\n       bool __testvalid = true;\n       const char_type* __name;\n \n-      char_type __c = *__beg;\n       // Look for initial matches.\n-      for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)\n-\tif (__c == __names[__i1][0])\n-\t  __matches[__nmatches++] = __i1;\n+      if (__beg != __end)\n+\t{\n+\t  const char_type __c = *__beg;\n+\t  for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)\n+\t    if (__c == __names[__i1][0])\n+\t      __matches[__nmatches++] = __i1;\n+\t}\n       \n       while (__nmatches > 1)\n \t{\n@@ -1815,15 +1811,14 @@ namespace std\n \t  for (size_t __i2 = 0; __i2 < __nmatches; ++__i2)\n \t    __minlen = std::min(__minlen, \n \t\t\t\t__traits_type::length(__names[__matches[__i2]]));\n-\t  \n+\t  ++__beg;\n \t  if (__pos < __minlen && __beg != __end)\n \t    {\n \t      ++__pos;\n-\t      __c = *(++__beg);\n \t      for (size_t __i3 = 0; __i3 < __nmatches; ++__i3)\n \t\t{\n \t\t  __name = __names[__matches[__i3]];\n-\t\t  if (__name[__pos] != __c)\n+\t\t  if (__name[__pos] != *__beg)\n \t\t    __matches[__i3] = __matches[--__nmatches];\n \t\t}\n \t    }"}]}