{"sha": "ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5NzNmM2Y0YjcyZTE5ZjZlMTM1NGY0Y2JkOWYzODdiYmI3ZTUxMA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-08-02T15:30:47Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-08-02T15:30:47Z"}, "message": "re PR fortran/42051 ([OOP] ICE on array-valued function with CLASS formal argument)\n\n2010-08-02  Mikael Morin  <mikael@gcc.gnu.org>\n\t    Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42051\n\tPR fortran/44064\n\tPR fortran/45151\n\t* intrinsic.c (gfc_get_intrinsic_sub_symbol): Commit changed symbol. \n\t* symbol.c (gen_cptr_param, gen_fptr_param, gen_shape_param,\n\tgfc_copy_formal_args, gfc_copy_formal_args_intr,\n\tgfc_copy_formal_args_ppc, generate_isocbinding_symbol): Ditto.\n\t* parse.c (parse_derived_contains, parse_spec, parse_progunit): \n\tCall reject_statement in case of error. \n\t(match_deferred_characteritics): Call gfc_undo_symbols in case match\n\tfails.\n\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r162821", "tree": {"sha": "1b3eba31b52898eea06166444e90925e4c80c906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b3eba31b52898eea06166444e90925e4c80c906"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/comments", "author": null, "committer": null, "parents": [{"sha": "13cc4787bfdee0fa3d1cfe7b73f9d2492eb3320c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cc4787bfdee0fa3d1cfe7b73f9d2492eb3320c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13cc4787bfdee0fa3d1cfe7b73f9d2492eb3320c"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "a00ac81ee527dbbbe7de19a6d5ee3ca1071b6798", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "patch": "@@ -1,3 +1,18 @@\n+2010-08-02  Mikael Morin  <mikael@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42051\n+\tPR fortran/44064\n+\tPR fortran/45151\n+\t* intrinsic.c (gfc_get_intrinsic_sub_symbol): Commit changed symbol. \n+\t* symbol.c (gen_cptr_param, gen_fptr_param, gen_shape_param,\n+\tgfc_copy_formal_args, gfc_copy_formal_args_intr,\n+\tgfc_copy_formal_args_ppc, generate_isocbinding_symbol): Ditto.\n+\t* parse.c (parse_derived_contains, parse_spec, parse_progunit): \n+\tCall reject_statement in case of error. \n+\t(match_deferred_characteritics): Call gfc_undo_symbols in case match\n+\tfails.\n+\n 2010-08-01  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44912"}, {"sha": "121afc0120fd922a555f4570e961e21658784593", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "patch": "@@ -112,6 +112,8 @@ gfc_get_intrinsic_sub_symbol (const char *name)\n   sym->attr.flavor = FL_PROCEDURE;\n   sym->attr.proc = PROC_INTRINSIC;\n \n+  gfc_commit_symbol (sym);\n+\n   return sym;\n }\n "}, {"sha": "d65ff1f1ae34f0aa48cf36cec459de10f0dee808", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "patch": "@@ -1892,13 +1892,12 @@ parse_derived_contains (void)\n \n \tcase ST_DATA_DECL:\n \t  gfc_error (\"Components in TYPE at %C must precede CONTAINS\");\n-\t  error_flag = true;\n-\t  break;\n+\t  goto error;\n \n \tcase ST_PROCEDURE:\n \t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003:  Type-bound\"\n \t\t\t\t\t     \" procedure at %C\") == FAILURE)\n-\t    error_flag = true;\n+\t    goto error;\n \n \t  accept_statement (ST_PROCEDURE);\n \t  seen_comps = true;\n@@ -1907,7 +1906,7 @@ parse_derived_contains (void)\n \tcase ST_GENERIC:\n \t  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003:  GENERIC binding\"\n \t\t\t\t\t     \" at %C\") == FAILURE)\n-\t    error_flag = true;\n+\t    goto error;\n \n \t  accept_statement (ST_GENERIC);\n \t  seen_comps = true;\n@@ -1917,7 +1916,7 @@ parse_derived_contains (void)\n \t  if (gfc_notify_std (GFC_STD_F2003,\n \t\t\t      \"Fortran 2003:  FINAL procedure declaration\"\n \t\t\t      \" at %C\") == FAILURE)\n-\t    error_flag = true;\n+\t    goto error;\n \n \t  accept_statement (ST_FINAL);\n \t  seen_comps = true;\n@@ -1930,7 +1929,7 @@ parse_derived_contains (void)\n \t      && (gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: Derived type \"\n \t\t\t\t  \"definition at %C with empty CONTAINS \"\n \t\t\t\t  \"section\") == FAILURE))\n-\t    error_flag = true;\n+\t    goto error;\n \n \t  /* ST_END_TYPE is accepted by parse_derived after return.  */\n \t  break;\n@@ -1940,22 +1939,20 @@ parse_derived_contains (void)\n \t    {\n \t      gfc_error (\"PRIVATE statement in TYPE at %C must be inside \"\n \t\t\t \"a MODULE\");\n-\t      error_flag = true;\n-\t      break;\n+\t      goto error;\n \t    }\n \n \t  if (seen_comps)\n \t    {\n \t      gfc_error (\"PRIVATE statement at %C must precede procedure\"\n \t\t\t \" bindings\");\n-\t      error_flag = true;\n-\t      break;\n+\t      goto error;\n \t    }\n \n \t  if (seen_private)\n \t    {\n \t      gfc_error (\"Duplicate PRIVATE statement at %C\");\n-\t      error_flag = true;\n+\t      goto error;\n \t    }\n \n \t  accept_statement (ST_PRIVATE);\n@@ -1965,18 +1962,22 @@ parse_derived_contains (void)\n \n \tcase ST_SEQUENCE:\n \t  gfc_error (\"SEQUENCE statement at %C must precede CONTAINS\");\n-\t  error_flag = true;\n-\t  break;\n+\t  goto error;\n \n \tcase ST_CONTAINS:\n \t  gfc_error (\"Already inside a CONTAINS block at %C\");\n-\t  error_flag = true;\n-\t  break;\n+\t  goto error;\n \n \tdefault:\n \t  unexpected_statement (st);\n \t  break;\n \t}\n+\n+      continue;\n+\n+error:\n+      error_flag = true;\n+      reject_statement ();\n     }\n \n   pop_state ();\n@@ -2395,7 +2396,10 @@ match_deferred_characteristics (gfc_typespec * ts)\n       gfc_commit_symbols ();\n     }\n   else\n-    gfc_error_check ();\n+    {\n+      gfc_error_check ();\n+      gfc_undo_symbols ();\n+    }\n \n   gfc_current_locus =loc;\n   return m;\n@@ -2467,6 +2471,7 @@ parse_spec (gfc_statement st)\n \tcase ST_STATEMENT_FUNCTION:\n \t  gfc_error (\"%s statement is not allowed inside of BLOCK at %C\",\n \t\t     gfc_ascii_statement (st));\n+\t  reject_statement ();\n \t  break;\n \n \tdefault:\n@@ -2553,13 +2558,15 @@ parse_spec (gfc_statement st)\n \t    {\n \t      gfc_error (\"%s statement must appear in a MODULE\",\n \t\t\t gfc_ascii_statement (st));\n+\t      reject_statement ();\n \t      break;\n \t    }\n \n \t  if (gfc_current_ns->default_access != ACCESS_UNKNOWN)\n \t    {\n \t      gfc_error (\"%s statement at %C follows another accessibility \"\n \t\t\t \"specification\", gfc_ascii_statement (st));\n+\t      reject_statement ();\n \t      break;\n \t    }\n \n@@ -4004,6 +4011,7 @@ parse_progunit (gfc_statement st)\n     {\n       gfc_error (\"CONTAINS statement at %C is already in a contained \"\n \t\t \"program unit\");\n+      reject_statement ();\n       st = next_statement ();\n       goto loop;\n     }"}, {"sha": "a4d0ec3c7ef651b9c3f3d322b19a02292843996e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "patch": "@@ -3880,6 +3880,9 @@ gen_cptr_param (gfc_formal_arglist **head,\n   formal_arg = gfc_get_formal_arglist ();\n   /* Add arg to list of formal args (the CPTR arg).  */\n   add_formal_arg (head, tail, formal_arg, param_sym);\n+\n+  /* Validate changes.  */\n+  gfc_commit_symbol (param_sym);\n }\n \n \n@@ -3925,6 +3928,9 @@ gen_fptr_param (gfc_formal_arglist **head,\n   formal_arg = gfc_get_formal_arglist ();\n   /* Add arg to list of formal args.  */\n   add_formal_arg (head, tail, formal_arg, param_sym);\n+\n+  /* Validate changes.  */\n+  gfc_commit_symbol (param_sym);\n }\n \n \n@@ -3997,6 +4003,9 @@ gen_shape_param (gfc_formal_arglist **head,\n   formal_arg = gfc_get_formal_arglist ();\n   /* Add arg to list of formal args.  */\n   add_formal_arg (head, tail, formal_arg, param_sym);\n+\n+  /* Validate changes.  */\n+  gfc_commit_symbol (param_sym);\n }\n \n \n@@ -4059,6 +4068,9 @@ gfc_copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n \n       /* Add arg to list of formal args.  */\n       add_formal_arg (&head, &tail, formal_arg, formal_arg->sym);\n+\n+      /* Validate changes.  */\n+      gfc_commit_symbol (formal_arg->sym);\n     }\n \n   /* Add the interface to the symbol.  */\n@@ -4116,6 +4128,9 @@ gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n \n       /* Add arg to list of formal args.  */\n       add_formal_arg (&head, &tail, formal_arg, formal_arg->sym);\n+\n+      /* Validate changes.  */\n+      gfc_commit_symbol (formal_arg->sym);\n     }\n \n   /* Add the interface to the symbol.  */\n@@ -4169,6 +4184,9 @@ gfc_copy_formal_args_ppc (gfc_component *dest, gfc_symbol *src)\n \n       /* Add arg to list of formal args.  */\n       add_formal_arg (&head, &tail, formal_arg, formal_arg->sym);\n+\n+      /* Validate changes.  */\n+      gfc_commit_symbol (formal_arg->sym);\n     }\n \n   /* Add the interface to the symbol.  */\n@@ -4548,6 +4566,7 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n       default:\n \tgcc_unreachable ();\n     }\n+  gfc_commit_symbol (tmp_sym);\n }\n \n "}]}