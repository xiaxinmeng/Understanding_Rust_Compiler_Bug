{"sha": "1918f4b7ac5089eeb97c65954a8bc466e8139691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxOGY0YjdhYzUwODllZWI5N2M2NTk1NGE4YmM0NjZlODEzOTY5MQ==", "commit": {"author": {"name": "Serge Belyshev", "email": "belyshev@depni.sinp.msu.ru", "date": "2021-07-20T07:34:08Z"}, "committer": {"name": "Serge Belyshev", "email": "belyshev@depni.sinp.msu.ru", "date": "2021-08-20T21:10:21Z"}, "message": "configure: fixup formatting from previous change\n\ngcc/ChangeLog:\n\n\t* configure.ac: Fixup formatting.", "tree": {"sha": "961f7b36282162a8afbc45e2e133c948bc45da28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/961f7b36282162a8afbc45e2e133c948bc45da28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1918f4b7ac5089eeb97c65954a8bc466e8139691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1918f4b7ac5089eeb97c65954a8bc466e8139691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1918f4b7ac5089eeb97c65954a8bc466e8139691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1918f4b7ac5089eeb97c65954a8bc466e8139691/comments", "author": {"login": "ssb83", "id": 37732995, "node_id": "MDQ6VXNlcjM3NzMyOTk1", "avatar_url": "https://avatars.githubusercontent.com/u/37732995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssb83", "html_url": "https://github.com/ssb83", "followers_url": "https://api.github.com/users/ssb83/followers", "following_url": "https://api.github.com/users/ssb83/following{/other_user}", "gists_url": "https://api.github.com/users/ssb83/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssb83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssb83/subscriptions", "organizations_url": "https://api.github.com/users/ssb83/orgs", "repos_url": "https://api.github.com/users/ssb83/repos", "events_url": "https://api.github.com/users/ssb83/events{/privacy}", "received_events_url": "https://api.github.com/users/ssb83/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssb83", "id": 37732995, "node_id": "MDQ6VXNlcjM3NzMyOTk1", "avatar_url": "https://avatars.githubusercontent.com/u/37732995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssb83", "html_url": "https://github.com/ssb83", "followers_url": "https://api.github.com/users/ssb83/followers", "following_url": "https://api.github.com/users/ssb83/following{/other_user}", "gists_url": "https://api.github.com/users/ssb83/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssb83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssb83/subscriptions", "organizations_url": "https://api.github.com/users/ssb83/orgs", "repos_url": "https://api.github.com/users/ssb83/repos", "events_url": "https://api.github.com/users/ssb83/events{/privacy}", "received_events_url": "https://api.github.com/users/ssb83/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b6d0b39c69372e4a66f44d218e0244bb549d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b6d0b39c69372e4a66f44d218e0244bb549d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b6d0b39c69372e4a66f44d218e0244bb549d83"}], "stats": {"total": 71, "additions": 27, "deletions": 44}, "files": [{"sha": "393a2baf3ded036f82ddea923556b13739a46a7f", "filename": "gcc/configure.ac", "status": "modified", "additions": 27, "deletions": 44, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1918f4b7ac5089eeb97c65954a8bc466e8139691/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1918f4b7ac5089eeb97c65954a8bc466e8139691/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=1918f4b7ac5089eeb97c65954a8bc466e8139691", "patch": "@@ -2883,28 +2883,24 @@ case \"$ORIGINAL_DSYMUTIL_FOR_TARGET\" in\n esac \n \n # Figure out what assembler alignment features are present.\n-gcc_GAS_CHECK_FEATURE([.balign and .p2align], gcc_cv_as_balign_and_p2align,\n- ,\n+gcc_GAS_CHECK_FEATURE([.balign and .p2align], gcc_cv_as_balign_and_p2align,,\n [.balign 4\n .p2align 2],,\n [AC_DEFINE(HAVE_GAS_BALIGN_AND_P2ALIGN, 1,\n   [Define if your assembler supports .balign and .p2align.])])\n \n-gcc_GAS_CHECK_FEATURE([.p2align with maximum skip], gcc_cv_as_max_skip_p2align,\n- ,\n+gcc_GAS_CHECK_FEATURE([.p2align with maximum skip], gcc_cv_as_max_skip_p2align,,\n  [.p2align 4,,7],,\n [AC_DEFINE(HAVE_GAS_MAX_SKIP_P2ALIGN, 1,\n   [Define if your assembler supports specifying the maximum number\n    of bytes to skip when using the GAS .p2align command.])])\n \n-gcc_GAS_CHECK_FEATURE([.literal16], gcc_cv_as_literal16,\n- ,\n+gcc_GAS_CHECK_FEATURE([.literal16], gcc_cv_as_literal16,,\n  [.literal16],,\n [AC_DEFINE(HAVE_GAS_LITERAL16, 1,\n   [Define if your assembler supports .literal16.])])\n \n-gcc_GAS_CHECK_FEATURE([working .subsection -1], gcc_cv_as_subsection_m1,\n- ,\n+gcc_GAS_CHECK_FEATURE([working .subsection -1], gcc_cv_as_subsection_m1,,\n  [conftest_label1: .word 0\n .subsection -1\n conftest_label2: .word 0\n@@ -2922,18 +2918,15 @@ conftest_label2: .word 0\n   [Define if your assembler supports .subsection and .subsection -1 starts\n    emitting at the beginning of your section.])])\n \n-gcc_GAS_CHECK_FEATURE([.weak], gcc_cv_as_weak,\n- ,\n+gcc_GAS_CHECK_FEATURE([.weak], gcc_cv_as_weak,,\n  [\t.weak foobar],,\n [AC_DEFINE(HAVE_GAS_WEAK, 1, [Define if your assembler supports .weak.])])\n \n-gcc_GAS_CHECK_FEATURE([.weakref], gcc_cv_as_weakref,\n- ,\n+gcc_GAS_CHECK_FEATURE([.weakref], gcc_cv_as_weakref,,\n  [\t.weakref foobar, barfnot],,\n [AC_DEFINE(HAVE_GAS_WEAKREF, 1, [Define if your assembler supports .weakref.])])\n \n-gcc_GAS_CHECK_FEATURE([.nsubspa comdat], gcc_cv_as_nsubspa_comdat,\n- ,\n+gcc_GAS_CHECK_FEATURE([.nsubspa comdat], gcc_cv_as_nsubspa_comdat,,\n  [\t.SPACE $TEXT$\n \t.NSUBSPA $CODE$,COMDAT],,\n [AC_DEFINE(HAVE_GAS_NSUBSPA_COMDAT, 1, [Define if your assembler supports .nsubspa comdat option.])])\n@@ -2954,8 +2947,7 @@ case \"${target}\" in\n foobar:'\n     ;;\n esac\n-gcc_GAS_CHECK_FEATURE([.hidden], gcc_cv_as_hidden,\n- , [$conftest_s])\n+gcc_GAS_CHECK_FEATURE([.hidden], gcc_cv_as_hidden,, [$conftest_s])\n case \"${target}\" in\n   *-*-darwin*)\n     # Darwin as has some visibility support, though with a different syntax.\n@@ -3173,8 +3165,7 @@ gcc_AC_INITFINI_ARRAY\n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n # Older versions of GAS and some non-GNU assemblers, have a bugs handling\n # these directives, even when they appear to accept them.\n-gcc_GAS_CHECK_FEATURE([.sleb128 and .uleb128], gcc_cv_as_leb128,\n- ,\n+gcc_GAS_CHECK_FEATURE([.sleb128 and .uleb128], gcc_cv_as_leb128,,\n [\t.data\n \t.uleb128 L2 - L1\n L1:\n@@ -3212,8 +3203,7 @@ gcc_fn_eh_frame_ro () {\n }\n \n # Check if we have assembler support for unwind directives.\n-gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n-  ,\n+gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,,\n [\t.text\n \t.cfi_startproc\n \t.cfi_offset 0, 0\n@@ -3268,8 +3258,7 @@ gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n     ;;\n esac])\n if test $gcc_cv_as_cfi_directive = yes && test x$gcc_cv_objdump != x; then\n-gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,\n-  ,\n+gcc_GAS_CHECK_FEATURE([working cfi advance], gcc_cv_as_cfi_advance_working,,\n [\t.text\n \t.cfi_startproc\n \t.cfi_adjust_cfa_offset 64\n@@ -3332,8 +3321,7 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_SECTIONS_DIRECTIVE,\n \n # GAS versions up to and including 2.11.0 may mis-optimize\n # .eh_frame data.\n-gcc_GAS_CHECK_FEATURE(eh_frame optimization, gcc_cv_as_eh_frame,\n-  ,\n+gcc_GAS_CHECK_FEATURE(eh_frame optimization, gcc_cv_as_eh_frame,,\n [\t.text\n .LFB1:\n \t.4byte\t0\n@@ -3636,17 +3624,15 @@ case \"${target}\" in\n esac\n \n gcc_GAS_CHECK_FEATURE([line table is_stmt support],\n- gcc_cv_as_is_stmt,\n- ,\n+ gcc_cv_as_is_stmt,,\n [\t.text\n \t.file 1 \"conf.c\"\n \t.loc 1 1 0 is_stmt 1],,\n [AC_DEFINE(HAVE_GAS_LOC_STMT, 1,\n   [Define if your assembler supports the .loc is_stmt sub-directive.])])\n \n gcc_GAS_CHECK_FEATURE([line table discriminator support],\n- gcc_cv_as_discriminator,\n- ,\n+ gcc_cv_as_discriminator,,\n [\t.text\n \t.file 1 \"conf.c\"\n \t.loc 1 1 0 discriminator 1],,\n@@ -4741,16 +4727,15 @@ changequote([,])dnl\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature.\n-\tgcc_GAS_CHECK_FEATURE([.comm with alignment], gcc_cv_as_comm_has_align,\n-\t ,[.comm foo,1,32])\n+\tgcc_GAS_CHECK_FEATURE([.comm with alignment], gcc_cv_as_comm_has_align,,\n+\t  [.comm foo,1,32])\n \tAC_DEFINE_UNQUOTED(HAVE_GAS_ALIGNED_COMM,\n \t  [`if test $gcc_cv_as_comm_has_align = yes; then echo 1; else echo 0; fi`],\n \t  [Define if your assembler supports specifying the alignment\n \t   of objects allocated using the GAS .comm command.])\n \t# Used for DWARF 2 in PE\n \tgcc_GAS_CHECK_FEATURE([.secrel32 relocs],\n-\t  gcc_cv_as_ix86_pe_secrel32,\n-\t  ,\n+\t  gcc_cv_as_ix86_pe_secrel32,,\n [.text\n foo:\tnop\n .data\n@@ -5472,8 +5457,8 @@ if test x\"$insn\" != x; then\n \t.loc 1 3 0\n \t$insn\"\n  gcc_GAS_CHECK_FEATURE([dwarf2 debug_line support],\n-  gcc_cv_as_dwarf2_debug_line,\n-  , [$conftest_s],\n+  gcc_cv_as_dwarf2_debug_line,,\n+  [$conftest_s],\n   [if test x$gcc_cv_objdump != x \\\n    && $gcc_cv_objdump -h conftest.o 2> /dev/null \\\n       | grep debug_line > /dev/null 2>&1; then\n@@ -5509,8 +5494,8 @@ if test x\"$insn\" != x; then\n \t.uleb128 .LVU1\n \"\n \tgcc_GAS_CHECK_FEATURE([dwarf2 debug_view support],\n-\t  gcc_cv_as_dwarf2_debug_view,\n-\t  ,[$conftest_s],,\n+\t  gcc_cv_as_dwarf2_debug_view,,\n+\t  [$conftest_s],,\n \t  [AC_DEFINE(HAVE_AS_DWARF2_DEBUG_VIEW, 1,\n   [Define if your assembler supports views in dwarf2 .loc directives.])])\n     fi\n@@ -5701,13 +5686,13 @@ foo:\n    dwarf4_success=no\n    if test $dwarf4_addr_size = 4; then\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 32-bit .debug_line],\n-      gcc_cv_as_debug_line_32_flag,\n-      [], [$conftest_s],,\n+      gcc_cv_as_debug_line_32_flag,,\n+      [$conftest_s],,\n       [dwarf4_success=yes])\n    else\n      gcc_GAS_CHECK_FEATURE([assembly of compiler generated 64-bit .debug_line],\n-      gcc_cv_as_debug_line_64_flag,\n-      [], [$conftest_s],,\n+      gcc_cv_as_debug_line_64_flag,,\n+      [$conftest_s],,\n       [dwarf4_success=yes])\n    fi\n    if test $dwarf4_success = yes; then\n@@ -5821,8 +5806,7 @@ AC_DEFINE_UNQUOTED(AS_COMPRESS_DEBUG_OPTION, \"$gcc_cv_as_compress_debug_option\",\n AC_DEFINE_UNQUOTED(AS_NO_COMPRESS_DEBUG_OPTION, \"$gcc_cv_as_no_compress_debug_option\",\n [Define to the assembler option to disable compressed debug sections.])\n \n-gcc_GAS_CHECK_FEATURE([.lcomm with alignment], gcc_cv_as_lcomm_with_alignment,\n- ,\n+gcc_GAS_CHECK_FEATURE([.lcomm with alignment], gcc_cv_as_lcomm_with_alignment,,\n [.lcomm bar,4,16],,\n [AC_DEFINE(HAVE_GAS_LCOMM_WITH_ALIGNMENT, 1,\n   [Define if your assembler supports .lcomm with an alignment field.])])\n@@ -5867,8 +5851,7 @@ AC_ARG_ENABLE(gnu-unique-object,\n     *) AC_MSG_ERROR(['$enable_gnu_unique_object' is an invalid value for --enable-gnu-unique-object.\n Valid choices are 'yes' and 'no'.]) ;;\n   esac],\n- [gcc_GAS_CHECK_FEATURE([gnu_unique_object], gcc_cv_as_gnu_unique_object,\n-   ,\n+ [gcc_GAS_CHECK_FEATURE([gnu_unique_object], gcc_cv_as_gnu_unique_object,,\n    [.type foo, '$target_type_format_char'gnu_unique_object],,\n # We need to unquote above to to use the definition from config.gcc.\n # Also check for ld.so support, i.e. glibc 2.11 or higher."}]}