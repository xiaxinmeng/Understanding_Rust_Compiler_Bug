{"sha": "9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1NmVjZjMyYzBkYWViODdmZjYxZTMzMDc2YTNiMWM4YzNmY2I0OQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-04T23:13:25Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-04T23:13:25Z"}, "message": "Add helpers to as clause of QualifiedPaths to get the generic args\n\nWhen we resolve a TypePath we expect this to resolve to a TyTy and to\nsubstitute arguments accordingly. Qualified paths contain a trait reference\nwhich can contain generic arguments, the problem here is that traits are\nnot a TyTy type since traits define behaviour not types. In order to\nactually apply the substitutions in a future commit we must be able\nto access these arguments in a sensible way first.", "tree": {"sha": "ad2c7db6d69ba7a5a90355505ced574908348d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad2c7db6d69ba7a5a90355505ced574908348d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3438ea39e33880e582e8a11b558bfacb6fb280b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3438ea39e33880e582e8a11b558bfacb6fb280b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3438ea39e33880e582e8a11b558bfacb6fb280b0"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "13e246ff489b50337cd4bf342df651b16ab0f60a", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "patch": "@@ -767,6 +767,27 @@ struct QualifiedPathType\n     rust_assert (has_as_clause ());\n     return trait;\n   }\n+\n+  bool trait_has_generic_args () const\n+  {\n+    rust_assert (has_as_clause ());\n+    bool is_generic_seg = trait->get_final_segment ()->get_type ()\n+\t\t\t  == TypePathSegment::SegmentType::GENERIC;\n+    if (!is_generic_seg)\n+      return false;\n+\n+    TypePathSegmentGeneric *seg = static_cast<TypePathSegmentGeneric *> (\n+      trait->get_final_segment ().get ());\n+    return seg->has_generic_args ();\n+  }\n+\n+  GenericArgs &get_trait_generic_args ()\n+  {\n+    rust_assert (trait_has_generic_args ());\n+    TypePathSegmentGeneric *seg = static_cast<TypePathSegmentGeneric *> (\n+      trait->get_final_segment ().get ());\n+    return seg->get_generic_args ();\n+  }\n };\n \n /* HIR node representing a qualified path-in-expression pattern (path that"}]}