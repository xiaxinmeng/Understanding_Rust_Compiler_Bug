{"sha": "8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0M2U5MmQwZGQ2ODFkNGVmZmQ1ZTY1YTBjOTQ3MWE1MjNmYjdmNg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-03-07T01:20:52Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-03-07T01:20:52Z"}, "message": "c-pch.c: Include langhooks.h.\n\n\t* c-pch.c: Include langhooks.h.\n\t(IDENT_LENGTH): New.\n\t(get_ident): New.\n\t(pch_ident): Delete.\n\t(pch_init): Use get_ident, IDENT_LENGTH.\n\t(c_common_valid_pch): Likewise.  Also, use actual language\n\tin warning message.\n\t* Makefile.in (c-pch.o): Add langhooks.h to dependencies.\n\n\t* objc/config-lang.in (gtfiles): Add objc-act.c.  Remove duplicate\n\tc-parse.in.\n\t* objc/Make-lang.in (objc/objc-act.o): Add dependency on\n\tgt-objc-objc-act.h.\n\t(gt-objc-objc-act.h): New rule.\n\t* objc/lang-specs.h: Support PCH.\n\t* objc/objc-act.c: Include gt-objc-objc-act.h.\n\t(objc_add_static_instance): Move num_static_inst out, mark for PCH.\n\t(build_selector_reference_decl): Move idx out, mark for PCH.\n\t(build_class_reference_decl): Likewise.\n\t(build_objc_string_decl): Move *_idx out, mark for PCH.\n\t(build_tmp_function_decl): Move xxx out, mark for PCH.\n\nFrom-SVN: r63924", "tree": {"sha": "8ad6744b26cfc9c5e368db3e98047b9f2c161c89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad6744b26cfc9c5e368db3e98047b9f2c161c89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f3d80135f5d9e58ac87a6109eb1563e525a4c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d80135f5d9e58ac87a6109eb1563e525a4c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3d80135f5d9e58ac87a6109eb1563e525a4c1a"}], "stats": {"total": 109, "additions": 87, "deletions": 22}, "files": [{"sha": "eab26e8e2be268749f3769f2782dd0e380f3cc4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -1,3 +1,27 @@\n+2003-03-06  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* c-pch.c: Include langhooks.h.\n+\t(IDENT_LENGTH): New.\n+\t(get_ident): New.\n+\t(pch_ident): Delete.\n+\t(pch_init): Use get_ident, IDENT_LENGTH.\n+\t(c_common_valid_pch): Likewise.  Also, use actual language\n+\tin warning message.\n+\t* Makefile.in (c-pch.o): Add langhooks.h to dependencies.\n+\n+\t* objc/config-lang.in (gtfiles): Add objc-act.c.  Remove duplicate\n+\tc-parse.in.\n+\t* objc/Make-lang.in (objc/objc-act.o): Add dependency on\n+\tgt-objc-objc-act.h.\n+\t(gt-objc-objc-act.h): New rule.\n+\t* objc/lang-specs.h: Support PCH.\n+\t* objc/objc-act.c: Include gt-objc-objc-act.h.\n+\t(objc_add_static_instance): Move num_static_inst out, mark for PCH.\n+\t(build_selector_reference_decl): Move idx out, mark for PCH.\n+\t(build_class_reference_decl): Likewise.\n+\t(build_objc_string_decl): Move *_idx out, mark for PCH.\n+\t(build_tmp_function_decl): Move xxx out, mark for PCH.\n+\n 2003-03-06  Dale Johannesen  <dalej@apple.com>\n \n \t* config/rs6000/rs6000.c (rs6000_binds_local_p):  Consider"}, {"sha": "727cacf5e7f443c3c4193c3df8b4c26bf92cf857", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -1300,7 +1300,7 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) tree-dump.h\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n-\tc-common.h output.h toplev.h c-pragma.h $(GGC_H) debug.h\n+\tc-common.h output.h toplev.h c-pragma.h $(GGC_H) debug.h langhooks.h\n \n # Language-independent files.\n "}, {"sha": "7e67248a325869f540a3bcf7106570bb30dc03c0", "filename": "gcc/c-pch.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -29,19 +29,42 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"c-pragma.h\"\n #include \"ggc.h\"\n+#include \"langhooks.h\"\n \n struct c_pch_header \n {\n   unsigned long asm_size;\n };\n \n-static const char pch_ident[8] = \"gpchC010\";\n+#define IDENT_LENGTH 8\n \n static FILE *pch_outfile;\n \n extern char *asm_file_name;\n static long asm_file_startpos;\n \n+static const char * get_ident PARAMS((void));\n+\n+static const char *\n+get_ident()\n+{\n+  static char result[IDENT_LENGTH];\n+  static const char template[IDENT_LENGTH] = \"gpch.010\";\n+  \n+  memcpy (result, template, IDENT_LENGTH);\n+  if (strcmp (lang_hooks.name, \"GNU C\") == 0)\n+    result[4] = 'C';\n+  else if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n+    result[4] = '+';\n+  else if (strcmp (lang_hooks.name, \"GNU Objective-C\") == 0)\n+    result[4] = 'o';\n+  else if (strcmp (lang_hooks.name, \"GNU Objective-C++\") == 0)\n+    result[4] = 'O';\n+  else\n+    abort ();\n+  return result;\n+}\n+\n void\n pch_init ()\n {\n@@ -58,7 +81,7 @@ pch_init ()\n \tfatal_io_error (\"can't open %s\", pch_file);\n       pch_outfile = f;\n       \n-      if (fwrite (pch_ident, sizeof (pch_ident), 1, f) != 1)\n+      if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1)\n \tfatal_io_error (\"can't write to %s\", pch_file);\n \n       /* We need to be able to re-read the output.  */\n@@ -122,24 +145,26 @@ c_common_valid_pch (pfile, name, fd)\n {\n   int sizeread;\n   int result;\n-  char ident[sizeof (pch_ident)];\n+  char ident[IDENT_LENGTH];\n+  const char *pch_ident;\n \n   if (! allow_pch)\n     return 2;\n \n   /* Perform a quick test of whether this is a valid\n      precompiled header for C.  */\n \n-  sizeread = read (fd, ident, sizeof (pch_ident));\n+  sizeread = read (fd, ident, IDENT_LENGTH);\n   if (sizeread == -1)\n     {\n       fatal_io_error (\"can't read %s\", name);\n       return 2;\n     }\n-  else if (sizeread != sizeof (pch_ident))\n+  else if (sizeread != IDENT_LENGTH)\n     return 2;\n   \n-  if (memcmp (ident, pch_ident, sizeof (pch_ident)) != 0)\n+  pch_ident = get_ident();\n+  if (memcmp (ident, pch_ident, IDENT_LENGTH) != 0)\n     {\n       if (cpp_get_options (pfile)->warn_invalid_pch)\n \t{\n@@ -150,7 +175,8 @@ c_common_valid_pch (pfile, name, fd)\n \t\t       \"%s: not compatible with this GCC version\", name);\n \t  else if (memcmp (ident, pch_ident, 4) == 0)\n \t    /* It's a PCH for the wrong language.  */\n-\t    cpp_error (pfile, DL_WARNING, \"%s: not for C language\", name);\n+\t    cpp_error (pfile, DL_WARNING, \"%s: not for %s\", name,\n+\t\t       lang_hooks.name);\n \t  else \n \t    /* Not any kind of PCH.  */\n \t    cpp_error (pfile, DL_WARNING, \"%s: not a PCH file\", name);"}, {"sha": "1904e3d1f0c224c5badc662eac31a1d3ff523433", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -71,7 +71,7 @@ objc/objc-act.o : objc/objc-act.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) $(EXPR_H) \\\n    $(TARGET_H) $(C_TREE_H) diagnostic.h toplev.h flags.h objc/objc-act.h \\\n    input.h function.h output.h debug.h langhooks.h $(LANGHOOKS_DEF_H) \\\n-   gtype-objc.h\n+   gt-objc-objc-act.h gtype-objc.h\n \n po-generated: $(parsedir)/objc/objc-parse.c\n $(parsedir)/objc/objc-parse.c : $(parsedir)/objc/objc-parse.y\n@@ -92,6 +92,7 @@ $(parsedir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \t$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $(parsedir)/objc/objc-parse.y\n \n gtype-objc.h : s-gtype ; @true\n+gt-objc-objc-act.h : s-gtype ; @true\n \n #\f\n # Build hooks:"}, {"sha": "705a76a6f69ed37023d0847ff24e3a34830e3302", "filename": "gcc/objc/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fconfig-lang.in?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -34,4 +34,4 @@ stagestuff=\"\"\n \n target_libs=target-libobjc\n \n-gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/c-parse.in\"\n+gtfiles=\"\\$(srcdir)/objc/objc-act.h \\$(srcdir)/c-parse.in \\$(srcdir)/c-tree.h \\$(srcdir)/c-decl.c \\$(srcdir)/c-objc-common.c \\$(srcdir)/c-common.c \\$(srcdir)/c-common.h \\$(srcdir)/c-pragma.c \\$(srcdir)/objc/objc-act.c\""}, {"sha": "379547f789e6febaddba094e2a0767ecdaf746fc", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -24,8 +24,6 @@ Boston, MA 02111-1307, USA.  */\n \n   {\".m\", \"@objective-c\", 0},\n   {\"@objective-c\",\n-   /* cc1obj has an integrated ISO C preprocessor.  We should invoke the\n-      external preprocessor if -save-temps or -traditional is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp)\\\n           -lang-objc %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n@@ -40,3 +38,17 @@ Boston, MA 02111-1307, USA.  */\n   {\"@objc-cpp-output\",\n      \"%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %{gen-decls}\\\n \t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+  {\"@objective-c-header\",\n+     \"%{E|M|MM:%(trad_capable_cpp)\\\n+          -lang-objc %(cpp_options) %(cpp_debug_options)}\\\n+      %{!E:%{!M:%{!MM:\\\n+\t%{traditional|ftraditional|traditional-cpp:\\\n+%eGNU Objective C no longer supports traditional compilation}\\\n+\t%{save-temps:cc1obj -E %(cpp_options) %b.mi \\n\\\n+\t    cc1obj -fpreprocessed %b.mi %(cc1_options) %{gen-decls}\\\n+                        -o %g.s %{!o*:--output-pch=%i.pch}\\\n+                        %W{o*:--output-pch=%*}%V}\\\n+\t%{!save-temps:\\\n+\t    cc1obj %(cpp_unique_options) %(cc1_options) %{gen-decls}\\\n+                        -o %g.s %{!o*:--output-pch=%i.pch}\\\n+                        %W{o*:--output-pch=%*}%V}}}}\", 0},"}, {"sha": "c55f250579611a20ec30ef186b8dd124b9c401ba", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8643e92d0dd681d4effd5e65a0c9471a523fb7f6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8643e92d0dd681d4effd5e65a0c9471a523fb7f6", "patch": "@@ -1361,11 +1361,11 @@ build_objc_string_object (strings)\n \n /* Declare a static instance of CLASS_DECL initialized by CONSTRUCTOR.  */\n \n+static GTY(()) int num_static_inst;\n static tree\n objc_add_static_instance (constructor, class_decl)\n      tree constructor, class_decl;\n {\n-  static int num_static_inst;\n   tree *chain, decl;\n   char buf[256];\n \n@@ -1983,14 +1983,14 @@ generate_strings ()\n     }\n }\n \n+static GTY(()) int selector_reference_idx;\n static tree\n build_selector_reference_decl ()\n {\n   tree decl, ident;\n   char buf[256];\n-  static int idx = 0;\n \n-  sprintf (buf, \"_OBJC_SELECTOR_REFERENCES_%d\", idx++);\n+  sprintf (buf, \"_OBJC_SELECTOR_REFERENCES_%d\", selector_reference_idx++);\n \n   ident = get_identifier (buf);\n \n@@ -2198,14 +2198,14 @@ build_selector_reference (ident)\n \t\t\t     build_int_2 (index, 0)));\n }\n \n+static GTY(()) int class_reference_idx;\n static tree\n build_class_reference_decl ()\n {\n   tree decl, ident;\n   char buf[256];\n-  static int idx = 0;\n \n-  sprintf (buf, \"_OBJC_CLASS_REFERENCES_%d\", idx++);\n+  sprintf (buf, \"_OBJC_CLASS_REFERENCES_%d\", class_reference_idx++);\n \n   ident = get_identifier (buf);\n \n@@ -2326,15 +2326,16 @@ add_objc_string (ident, section)\n   return build_unary_op (ADDR_EXPR, decl, 1);\n }\n \n+static GTY(()) int class_names_idx;\n+static GTY(()) int meth_var_names_idx;\n+static GTY(()) int meth_var_types_idx;\n+\n static tree\n build_objc_string_decl (section)\n      enum string_section section;\n {\n   tree decl, ident;\n   char buf[256];\n-  static int class_names_idx = 0;\n-  static int meth_var_names_idx = 0;\n-  static int meth_var_types_idx = 0;\n \n   if (section == class_names)\n     sprintf (buf, \"_OBJC_CLASS_NAME_%d\", class_names_idx++);\n@@ -2927,11 +2928,11 @@ generate_method_descriptors (protocol)\n /* Generate a temporary FUNCTION_DECL node to be used in\n    hack_method_prototype below.  */\n \n+static GTY(()) int build_tmp_function_decl_xxx;\n static tree\n build_tmp_function_decl ()\n {\n   tree decl_specs, expr_decl, parms;\n-  static int xxx = 0;\n   char buffer[80];\n \n   /* struct objc_object *objc_xxx (id, SEL, ...); */\n@@ -2953,7 +2954,7 @@ build_tmp_function_decl ()\n   poplevel (0, 0, 0);\n \n   decl_specs = build_tree_list (NULL_TREE, objc_object_reference);\n-  sprintf (buffer, \"__objc_tmp_%x\", xxx++);\n+  sprintf (buffer, \"__objc_tmp_%x\", build_tmp_function_decl_xxx++);\n   expr_decl = build_nt (CALL_EXPR, get_identifier (buffer), parms, NULL_TREE);\n   expr_decl = build1 (INDIRECT_REF, NULL_TREE, expr_decl);\n \n@@ -8561,4 +8562,5 @@ lookup_objc_ivar (id)\n     return 0;\n }\n \n+#include \"gt-objc-objc-act.h\"\n #include \"gtype-objc.h\""}]}