{"sha": "bad3869abd1e226672ce5799a40e4362fa85de73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkMzg2OWFiZDFlMjI2NjcyY2U1Nzk5YTQwZTQzNjJmYTg1ZGU3Mw==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-09-02T10:07:48Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-09-02T10:07:48Z"}, "message": "avr.md (\"*negsi2\"): substitute %@ to __zero_reg__\n\n\t* config/avr/avr.md (\"*negsi2\"): substitute %@ to __zero_reg__\n\t* config/avr/libgcc.S: Lost part of the previous patch.\n\nFrom-SVN: r36116", "tree": {"sha": "96a3e2119fe8f7e257a77bcdeb3a14bb12c8910b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a3e2119fe8f7e257a77bcdeb3a14bb12c8910b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bad3869abd1e226672ce5799a40e4362fa85de73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad3869abd1e226672ce5799a40e4362fa85de73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad3869abd1e226672ce5799a40e4362fa85de73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad3869abd1e226672ce5799a40e4362fa85de73/comments", "author": null, "committer": null, "parents": [{"sha": "e8d228dc5de96e2759acb665c8b7754685a26070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d228dc5de96e2759acb665c8b7754685a26070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d228dc5de96e2759acb665c8b7754685a26070"}], "stats": {"total": 291, "additions": 170, "deletions": 121}, "files": [{"sha": "e603d2de8593adca9e7d00b994763813f81ff0ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bad3869abd1e226672ce5799a40e4362fa85de73", "patch": "@@ -1,3 +1,8 @@\n+Sat Sep  2 13:58:23 2000  Marek Michalkiewicz <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.md (\"*negsi2\"): substitute %@ to __zero_reg__\n+\t* config/avr/libgcc.S: Lost part of the previous patch.\n+\n 2000-08-31  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* gthr-dce.h (__gthread_objc_mutex_allocate): Create a pthread_mutex_t"}, {"sha": "31a9d3b91b8210e2d003ba8dd14d039ef7d6d00c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=bad3869abd1e226672ce5799a40e4362fa85de73", "patch": "@@ -1011,7 +1011,7 @@\n   \"\"\n   \"@\n \tcom %D0\\;com %C0\\;com %B0\\;neg %A0\\;sbci %B0,lo8(-1)\\;sbci %C0,lo8(-1)\\;sbci %D0,lo8(-1)\n-\tcom %D0\\;com %C0\\;com %B0\\;com %A0\\;adc %A0,%@\\;adc %B0,%@\\;adc %C0,%@\\;adc %D0,%@\n+\tcom %D0\\;com %C0\\;com %B0\\;com %A0\\;adc %A0,__zero_reg__\\;adc %B0,__zero_reg__\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\n \tclr %A0\\;clr %B0\\;clr %C0\\;clr %D0\\;sub %A0,%A1\\;sbc %B0,%B1\\;sbc %C0,%C1\\;sbc %D0,%D1\"\n   [(set_attr \"length\" \"7,8,8\")\n    (set_attr \"cc\" \"set_czn,set_n,set_czn\")])"}, {"sha": "97811d52b91492a76819023993e7883f0c34e8d3", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 164, "deletions": 120, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad3869abd1e226672ce5799a40e4362fa85de73/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=bad3869abd1e226672ce5799a40e4362fa85de73", "patch": "@@ -33,22 +33,21 @@ Boston, MA 02111-1307, USA.  */\n #define __SP_L__ 0x3d\n \n \t.section .text.libgcc, \"ax\", @progbits\n-\t\n+\n+/* Note: mulqi3, mulhi3 are open-coded on the enhanced core.  */\n+#if !defined (__AVR_ENHANCED__)\n /*******************************************************\n                Multiplication  8 x 8\n *******************************************************/\n-#if defined (Lmulqi3)\n+#if defined (L_mulqi3)\n \n #define\tr_arg2\tr22\t\t/* multiplicand */\n #define\tr_arg1 \tr24\t\t/* multiplier */\n #define r_res\t__tmp_reg__\t/* result */\n \n-\t.global\t_mulqi3\n-\t.func\t_mulqi3\n-_mulqi3:\n-\n-\t.global\t_umulqi3\n-_umulqi3:\n+\t.global\t__mulqi3\n+\t.func\t__mulqi3\n+__mulqi3:\n \tclr\tr_res\t\t; clear result\n __mulqi3_loop:\n \tsbrc\tr_arg1,0\n@@ -66,27 +65,23 @@ __mulqi3_exit:\n #undef r_res   \n \t\n .endfunc\n-#endif \t/* defined (Lmulqi3) */\n+#endif \t/* defined (L_mulqi3) */\n \n \n /*******************************************************\n                Multiplication  16 x 16\n *******************************************************/\n-#if defined (Lmulhi3)\n+#if defined (L_mulhi3)\n #define\tr_arg1L\tr24\t\t/* multiplier Low */\n #define\tr_arg1H\tr25\t\t/* multiplier High */\n #define\tr_arg2L\tr22\t\t/* multiplicand Low */\n #define\tr_arg2H\tr23\t\t/* multiplicand High */\n #define r_resL\tr20\t\t/* result Low */\n #define r_resH  r21\t\t/* result High */\n \n-\t.global\t_mulhi3\n-\t.func\t_mulhi3\n-_mulhi3:\n-\n-\t.global\t_umulhi3\n-_umulhi3:\n-\t\n+\t.global\t__mulhi3\n+\t.func\t__mulhi3\n+__mulhi3:\n \tclr\tr_resH\t\t; clear result\n \tclr\tr_resL\t\t; clear result\n __mulhi3_loop:\n@@ -118,9 +113,10 @@ __mulhi3_exit:\n #undef r_resH \n \n .endfunc\n-#endif /* defined (Lmulhi3) */\n+#endif /* defined (L_mulhi3) */\n+#endif /* !defined (__AVR_ENHANCED__) */\n \n-#if defined (Lmulsi3)\n+#if defined (L_mulsi3)\n /*******************************************************\n                Multiplication  32 x 32\n *******************************************************/\n@@ -141,12 +137,42 @@ __mulhi3_exit:\n #define r_resHH  r31\t\t/* result High */\n \n \t\n-\t.global\t_mulsi3\n-\t.func\t_mulsi3\n-_mulsi3:\n-\n-\t.global\t_umulsi3\n-_umulsi3:\n+\t.global\t__mulsi3\n+\t.func\t__mulsi3\n+__mulsi3:\n+#if defined (__AVR_ENHANCED__)\n+\tmul\tr_arg1L, r_arg2L\n+\tmovw\tr_resL, r0\n+\tmul\tr_arg1H, r_arg2H\n+\tmovw\tr_resHL, r0\n+\tmul\tr_arg1HL, r_arg2L\n+\tadd\tr_resHL, r0\n+\tadc\tr_resHH, r1\n+\tmul\tr_arg1L, r_arg2HL\n+\tadd\tr_resHL, r0\n+\tadc\tr_resHH, r1\n+\tmul\tr_arg1HH, r_arg2L\n+\tadd\tr_resHH, r0\n+\tmul\tr_arg1HL, r_arg2H\n+\tadd\tr_resHH, r0\n+\tmul\tr_arg1H, r_arg2HL\n+\tadd\tr_resHH, r0\n+\tmul\tr_arg1L, r_arg2HH\n+\tadd\tr_resHH, r0\n+\tclr\tr_arg1HH\t; use instead of __zero_reg__ to add carry\n+\tmul\tr_arg1H, r_arg2L\n+\tadd\tr_resH, r0\n+\tadc\tr_resHL, r1\n+\tadc\tr_resHH, r_arg1HH ; add carry\n+\tmul\tr_arg1L, r_arg2H\n+\tadd\tr_resH, r0\n+\tadc\tr_resHL, r1\n+\tadc\tr_resHH, r_arg1HH ; add carry\n+\tmovw\tr_arg1L, r_resL\n+\tmovw\tr_arg1HL, r_resHL\n+\tclr\tr1\t\t; __zero_reg__ clobbered by \"mul\"\n+\tret\n+#else\n \tclr\tr_resHH\t\t; clear result\n \tclr\tr_resHL\t\t; clear result\n \tclr\tr_resH\t\t; clear result\n@@ -178,6 +204,7 @@ __mulsi3_exit:\n \tmov\tr_arg1H,r_resH\n \tmov\tr_arg1L,r_resL\n \tret\n+#endif /* !defined (__AVR_ENHANCED__) */\n #undef r_arg1L \n #undef r_arg1H \n #undef r_arg1HL\n@@ -195,7 +222,7 @@ __mulsi3_exit:\n #undef r_resHH \n \n .endfunc\n-#endif /* defined (Lmulsi3) */\n+#endif /* defined (L_mulsi3) */\n \t\n /*******************************************************\n        Division 8 / 8 => (result + remainder)\n@@ -205,53 +232,53 @@ __mulsi3_exit:\n #define\tr_arg2\tr22\t/* divisor */\n #define\tr_cnt\tr27\t/* loop count */\n \n-#if defined (Lumodqi3)\n+#if defined (L_umodqi3)\n \n-\t.global\t_umodqi3\n-\t.func\t_umodqi3\n-_umodqi3:\n+\t.global\t__umodqi3\n+\t.func\t__umodqi3\n+__umodqi3:\n \tclt\n-\trcall\t_udivqi3\n+\trcall\t__udivqi3\n \tmov\tr24,r_rem\n \tret\n .endfunc\n-#endif /* defined (Lumodqi3) */\n+#endif /* defined (L_umodqi3) */\n \t\n-#if defined (Ludivqi3)\n+#if defined (L_udivqi3)\n \n-\t.global\t_udivqi3\n-\t.func\t_udivqi3\n-_udivqi3:\n+\t.global\t__udivqi3\n+\t.func\t__udivqi3\n+__udivqi3:\n \tclr\t__tmp_reg__\n-\trjmp\t_divqi_raw\n+\trjmp\t__divqi_raw\n .endfunc\n-#endif /* defined (Ludivqi3) */\n+#endif /* defined (L_udivqi3) */\n \n-#if defined (Lmodqi3)\n+#if defined (L_modqi3)\n \t\n-\t.global\t_moqhi3\n-\t.func\t_moqhi3\n-_modqi3:\n-\trcall\t_divqi3\n+\t.global\t__modqi3\n+\t.func\t__modqi3\n+__modqi3:\n+\trcall\t__divqi3\n \tmov\tr24,r_rem\n \tret\n .endfunc\n-#endif /* defined (Lmodqi3) */\n+#endif /* defined (L_modqi3) */\n \n-#if defined (Ldivqi3)\n+#if defined (L_divqi3)\n \n-\t.global\t_divqi3\n-\t.func\t_divqi3\n-_divqi3:\n+\t.global\t__divqi3\n+\t.func\t__divqi3\n+__divqi3:\n         bst     r_arg1,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1\n         eor     __tmp_reg__,r_arg2; r0.7 is sign of result\n         sbrc\tr_arg1,7\n         neg     r_arg1\t\t; divident negative : negate\n         sbrc\tr_arg2,7\n         neg     r_arg2\t\t; divisor negative : negate\n-\t.global\t_divqi_raw\n-_divqi_raw:\t\n+\t.global\t__divqi_raw\n+__divqi_raw:\t\n \tsub\tr_rem,r_rem\t; clear remainder and carry\n \tldi\tr_cnt,9\t\t; init loop counter\n \trjmp\t__divqi3_ep\t; jump to entry point\n@@ -274,7 +301,7 @@ __divqi3_1:\n __divqi3_exit:\n \tret\t\t\t; result already in r24 (r_arg1)\n .endfunc\n-#endif /* defined (Ldivqi3) */\n+#endif /* defined (L_divqi3) */\n \n #undef r_rem\n #undef r_arg1\n@@ -295,51 +322,56 @@ __divqi3_exit:\n #define\tr_arg2H\tr23\t/* divisor High */\n \t\n #define\tr_cnt\tr21\t/* loop count */\n-#if defined (Lumodhi3)\n-\t\n-\t.global\t_umodhi3\n-\t.func\t_umodhi3\n-_umodhi3:\n+#if defined (L_umodhi3)\n+\t.global\t__umodhi3\n+\t.func\t__umodhi3\n+__umodhi3:\n \tclt\n-\trcall\t_udivhi3\n-\t.global\t_umodhi3_ret\n-_umodhi3_ret:\n+\trcall\t__udivhi3\n+\t.global\t__umodhi3_ret\n+__umodhi3_ret:\n+#if defined (__AVR_ENHANCED__)\n+\tmovw\tr24, r_remL\n+#else\n \tmov\tr24,r_remL\n \tmov\tr25,r_remH\n+#endif\n \tret\n .endfunc\n-#endif /* defined (Lumodhi3) */\n+#endif /* defined (L_umodhi3) */\n \t\n-#if defined (Ludivhi3)\n+#if defined (L_udivhi3)\n \t\n-\t.global\t_udivhi3\n-\t.func\t_udivhi3\n-_udivhi3:\n+\t.global\t__udivhi3\n+\t.func\t__udivhi3\n+__udivhi3:\n \tclr\t__tmp_reg__\n-\trjmp\t_divhi_raw\n+\trjmp\t__divhi_raw\n .endfunc\n-#endif /* defined (Ludivhi3) */\n+#endif /* defined (L_udivhi3) */\n \n-#if defined (Lmodhi3)\n-\t\n-\t.global\t_modhi3\n-\t.func\t_modhi3\n-_modhi3:\n+#if defined (L_modhi3)\n+\t.global\t__modhi3\n+\t.func\t__modhi3\n+__modhi3:\n \t.global\t_div\n _div:\n-\trcall\t_divhi3\n+\trcall\t__divhi3\n+#if defined (__AVR_ENHANCED__)\n+\tmovw\tr22, r24\n+#else\n \tmov\tr22,r24\t\t; needed for div () function\n \tmov\tr23,r25\n-\trjmp\t_umodhi3_ret\n+#endif\n+\trjmp\t__umodhi3_ret\n .endfunc\n-#endif /* defined (Lmodhi3) */\n-\t\n+#endif /* defined (L_modhi3) */\n \t\n-#if defined (Ldivhi3)\n \t\n-\t.global\t_divhi3\n-\t.func\t_divhi3\n-_divhi3:\n+#if defined (L_divhi3)\n+\t.global\t__divhi3\n+\t.func\t__divhi3\n+__divhi3:\n         bst     r_arg1H,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1H\n         eor     __tmp_reg__,r_arg2H   ; r0.7 is sign of result\n@@ -354,8 +386,8 @@ __divhi3_skip1:\n         neg     r_arg2L\t\t; divisor negative : negate\n \tsbci\tr_arg2H,0xff\n __divhi3_skip2:\n-\t.global\t_divhi_raw\n-_divhi_raw:\n+\t.global\t__divhi_raw\n+__divhi_raw:\n \tsub\tr_remL,r_remL\n \tsub\tr_remH,r_remH\t\t; clear remainder and carry\n \tldi\tr_cnt,17\t; init loop counter\n@@ -387,7 +419,7 @@ __divhi3_exit:\n \tcom\tr_arg1H\n \tret\n .endfunc\n-#endif /* defined (Ldivhi3) */\n+#endif /* defined (L_divhi3) */\n \t\n #undef r_remH  \n #undef r_remL  \n@@ -418,56 +450,66 @@ __divhi3_exit:\n #define\tr_arg2H  r19\n #define\tr_arg2L  r18\t/* divisor Low */\n \t\n-#define\tr_cnt\tr17\t/* loop count */\n+#define\tr_cnt __zero_reg__  /* loop count (0 after the loop!) */\n \n-#if defined (Lumodsi3)\n+#if defined (L_umodsi3)\n \n-\t.global\t_umodsi3\n-\t.func\t_umodsi3\n-_umodsi3:\n+\t.global\t__umodsi3\n+\t.func\t__umodsi3\n+__umodsi3:\n \tclt\n-\trcall\t_udivsi3\n-\t.global\t_umodsi3_ret\n-_umodsi3_ret:\n+\trcall\t__udivsi3\n+\t.global\t__umodsi3_ret\n+__umodsi3_ret:\n+#if defined (__AVR_ENHANCED__)\n+\tmovw\tr24, r_remHL\n+\tmovw\tr22, r_remL\n+#else\n \tmov\tr25,r_remHH\n \tmov\tr24,r_remHL\n \tmov\tr23,r_remH\n \tmov\tr22,r_remL\n+#endif\n \tret\n .endfunc\n-#endif /* defined (Lumodsi3) */\n+#endif /* defined (L_umodsi3) */\n \t\n-#if defined (Ludivsi3)\n+#if defined (L_udivsi3)\n \n-\t.global\t_udivsi3\n-\t.func\t_udivsi3\n-_udivsi3:\n+\t.global\t__udivsi3\n+\t.func\t__udivsi3\n+__udivsi3:\n \tclr\t__tmp_reg__\n-\trjmp\t_divsi_raw\n+\trjmp\t__divsi_raw\n .endfunc\n-#endif /* defined (Ludivsi3) */\n+#endif /* defined (L_udivsi3) */\n \n-#if defined (Lmodsi3)\n+#if defined (L_modsi3)\n \t\n-\t.global\t_modsi3\n-\t.func\t_modsi3\n-_modsi3:\n+\t.global\t__modsi3\n+\t.func\t__modsi3\n+__modsi3:\n \t.global\t_ldiv\n _ldiv:\n-\trcall\t_divsi3\n+\trcall\t__divsi3\n+#if defined (__AVR_ENHANCED__)\n+\tmovw\tr18, r22\n+\tmovw\tr20, r24\n+#else\n \tmov\tr18,r22\t\t/* Needed for ldiv */\n \tmov\tr19,r23\n \tmov\tr20,r24\n \tmov\tr21,r25\n-\trjmp\t_umodsi3_ret\n+#endif\n+\trjmp\t__umodsi3_ret\n .endfunc\n-#endif /* defined (Lmodsi3) */\n+#endif /* defined (L_modsi3) */\n \n-#if defined (Ldivsi3)\n+#if defined (L_divsi3)\n \n-\t.global\t_divsi3\n-\t.func\t_divsi3\n-_divsi3:\n+\t.global\t__divsi3\n+\t.func\t__divsi3\n+__divsi3:\n         bst     r_arg1HH,7\t; store sign of divident\n         mov     __tmp_reg__,r_arg1HH\n         eor     __tmp_reg__,r_arg2HH   ; r0.7 is sign of result\n@@ -490,14 +532,18 @@ __divsi3_skip1:\n \tsbci\tr_arg2HL,0xff\n \tsbci\tr_arg2HH,0xff\n __divsi3_skip2:\n-\t.global\t_divsi_raw\n-_divsi_raw:\n-\tpush\tr_cnt\n+\t.global\t__divsi_raw\n+__divsi_raw:\n+\tldi\tr_remL, 33\t; init loop counter\n+\tmov\tr_cnt, r_remL\n \tsub\tr_remL,r_remL\n \tsub\tr_remH,r_remH\n+#if defined (__AVR_ENHANCED__)\n+\tmovw\tr_remHL, r_remL\n+#else\n \tsub\tr_remHL,r_remHL\n \tsub\tr_remHH,r_remHH\t; clear remainder and carry\n-\tldi\tr_cnt,33\t; init loop counter\n+#endif\n \trjmp\t__divsi3_ep\t; jump to entry point\n __divsi3_loop:\n         rol\tr_remL\t\t; shift dividend into remainder\n@@ -520,7 +566,7 @@ __divsi3_ep:\n         rol\tr_arg1HH\n         dec\tr_cnt\t\t; decrement loop counter\n         brne\t__divsi3_loop\t; loop\n-\tpop\tr_cnt\n+\t\t\t\t; __zero_reg__ now restored (r_cnt == 0)\n \tbrtc\t__divsi3_1\n \tcom\tr_remHH\n \tcom\tr_remHL\n@@ -544,12 +590,12 @@ __divsi3_exit:\n \tcom\tr_arg1HH\n \tret\n .endfunc\n-#endif /* defined (Ldivsi3) */\n+#endif /* defined (L_divsi3) */\n \n /**********************************\n  * This is a prologue subroutine\n  **********************************/\n-#if defined (Lprologue)\n+#if defined (L_prologue)\n \n \t.global\t__prologue_saves__\n \t.func\t__prologue_saves__\n@@ -574,24 +620,21 @@ __prologue_saves__:\n \tpush r29\n \tin\tr28,__SP_L__\n \tin\tr29,__SP_H__\n-\tsbiw r26,0\n-\tbreq _prologue_end\n \tsub\tr28,r26\n \tsbc\tr29,r27\n \tin\t__tmp_reg__,__SREG__\n \tcli\n \tout\t__SP_H__,r29\n \tout\t__SREG__,__tmp_reg__\n \tout\t__SP_L__,r28\n-_prologue_end:\n \tijmp\n .endfunc\n-#endif /* defined (Lprologue) */\n+#endif /* defined (L_prologue) */\n \n /*\n  * This is a epilogue subroutine\n  */\n-#if defined (Lepilogue)\n+#if defined (L_epilogue)\n \n \t.global\t__epilogue_restores__\n \t.func\t__epilogue_restores__\n@@ -666,3 +709,4 @@ __tablejump__:\n .endfunc\n #endif\n #endif /* defined (L_tablejump) */\n+"}]}