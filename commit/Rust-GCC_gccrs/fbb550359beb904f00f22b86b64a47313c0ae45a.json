{"sha": "fbb550359beb904f00f22b86b64a47313c0ae45a", "node_id": "C_kwDOANBUbNoAKGZiYjU1MDM1OWJlYjkwNGYwMGYyMmI4NmI2NGE0NzMxM2MwYWU0NWE", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-09-08T05:55:53Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-09-08T08:10:29Z"}, "message": "rs6000: allow constant splitter run in split1 pass\n\nCurrently, these two splitters (touched in this patch) are using predicate\n`int_reg_operand_not_pseudo`, then they work in split2 pass after RA in\nmost times, and can not run before RA.\n\nIt would not be a bad idea to allow these splitters before RA.  Then more\npasses (e.g. combine, sched...) could optimize the emitted instructions.\n\nAnd if splitting before RA, for current constant splitter, we may have more\nfreedom to create pseduo to help to generate more parallel instructions.\nFor the example in the leading patch [PATCH 1/2]: pli+plit+rldimi would be\nbetter than pli+sldi+paddi.\n\nTest this patch with spec, we could see performance gain some times; while\nthe improvement is not stable and woud caused by the patch indirectly.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.md (splitter for set to and_mask constants):\n\tUse int_reg_operand (instead of int_reg_operand_not_pseudo).\n\t(splitter for multi-insn constant loads): Ditto.", "tree": {"sha": "8c5f8b34c0036fff80ccc74f1bc7b905da6c2f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c5f8b34c0036fff80ccc74f1bc7b905da6c2f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb550359beb904f00f22b86b64a47313c0ae45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb550359beb904f00f22b86b64a47313c0ae45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb550359beb904f00f22b86b64a47313c0ae45a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb550359beb904f00f22b86b64a47313c0ae45a/comments", "author": null, "committer": null, "parents": [{"sha": "36ecfe1c1c6f93e6c496ad91fa1d0a35f72c6d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ecfe1c1c6f93e6c496ad91fa1d0a35f72c6d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ecfe1c1c6f93e6c496ad91fa1d0a35f72c6d15"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ad5a4cf2ef83329fb72963c330e6cc42deb13dcc", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb550359beb904f00f22b86b64a47313c0ae45a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb550359beb904f00f22b86b64a47313c0ae45a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=fbb550359beb904f00f22b86b64a47313c0ae45a", "patch": "@@ -9683,7 +9683,7 @@\n ; Some DImode loads are best done as a load of -1 followed by a mask\n ; instruction.\n (define_split\n-  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\")\n+  [(set (match_operand:DI 0 \"int_reg_operand\")\n \t(match_operand:DI 1 \"const_int_operand\"))]\n   \"TARGET_POWERPC64\n    && num_insns_constant (operands[1], DImode) > 1\n@@ -9701,7 +9701,7 @@\n ;; When non-easy constants can go in the TOC, this should use\n ;; easy_fp_constant predicate.\n (define_split\n-  [(set (match_operand:DI 0 \"int_reg_operand_not_pseudo\")\n+  [(set (match_operand:DI 0 \"int_reg_operand\")\n \t(match_operand:DI 1 \"const_int_operand\"))]\n   \"TARGET_POWERPC64 && num_insns_constant (operands[1], DImode) > 1\"\n   [(pc)]"}]}