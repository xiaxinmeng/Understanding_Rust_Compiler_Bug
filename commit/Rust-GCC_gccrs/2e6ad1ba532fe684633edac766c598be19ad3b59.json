{"sha": "2e6ad1ba532fe684633edac766c598be19ad3b59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2YWQxYmE1MzJmZTY4NDYzM2VkYWM3NjZjNTk4YmUxOWFkM2I1OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-19T08:20:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-19T12:53:50Z"}, "message": "Enable more WITH_SIZE_EXPR processing\n\nThis enables the alias machinery for WITH_SIZE_EXPR which can appear\nin call LHS and arguments.  In particular this drops the NULL\nreturn from get_base_address and it adjusts get_ref_base_and_extent\nand friends to use the size information in WITH_SIZE_EXPR and\nlook through it for further processing.\n\n2021-05-19  Richard Biener  <rguenther@suse.de>\n\n\t* builtins.c (get_object_alignment_1): Strip outer\n\tWITH_SIZE_EXPR.\n\t* tree-dfa.c (get_ref_base_and_extent): Handle outer\n\tWITH_SIZE_EXPR for size processing and process the\n\tcontaining ref.\n\t* tree-ssa-alias.c (ao_ref_base_alias_set): Strip\n\touter WITH_SIZE_EXPR.\n\t(ao_ref_base_alias_ptr_type): Likewise.\n\t(refs_may_alias_p_2): Allow WITH_SIZE_EXPR in ref->ref\n\tand handle that accordingly, stripping it for the\n\tcore alias workers.\n\t* tree.c (get_base_address): Handle WITH_SIZE_EXPR by\n\tlooking through it instead of returning NULL.", "tree": {"sha": "5bd49ea00c2490aa6e960bbaa72cb1afa54cec1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd49ea00c2490aa6e960bbaa72cb1afa54cec1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6ad1ba532fe684633edac766c598be19ad3b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6ad1ba532fe684633edac766c598be19ad3b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6ad1ba532fe684633edac766c598be19ad3b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6ad1ba532fe684633edac766c598be19ad3b59/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1467100fc72562a59f70cdd4e05f6c810d1fadcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1467100fc72562a59f70cdd4e05f6c810d1fadcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1467100fc72562a59f70cdd4e05f6c810d1fadcc"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "b0c880dc3b5902406cc322070afc8fc260ec334f", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2e6ad1ba532fe684633edac766c598be19ad3b59", "patch": "@@ -924,6 +924,10 @@ bool\n get_object_alignment_1 (tree exp, unsigned int *alignp,\n \t\t\tunsigned HOST_WIDE_INT *bitposp)\n {\n+  /* Strip a WITH_SIZE_EXPR, get_inner_reference doesn't know how to deal\n+     with it.  */\n+  if (TREE_CODE (exp) == WITH_SIZE_EXPR)\n+    exp = TREE_OPERAND (exp, 0);\n   return get_object_alignment_2 (exp, alignp, bitposp, false);\n }\n "}, {"sha": "c6c3bd6222314f144fe8b4fbe7c32676a157cefa", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=2e6ad1ba532fe684633edac766c598be19ad3b59", "patch": "@@ -394,6 +394,11 @@ get_ref_base_and_extent (tree exp, poly_int64_pod *poffset,\n     size_tree = DECL_SIZE (TREE_OPERAND (exp, 1));\n   else if (TREE_CODE (exp) == BIT_FIELD_REF)\n     size_tree = TREE_OPERAND (exp, 1);\n+  else if (TREE_CODE (exp) == WITH_SIZE_EXPR)\n+    {\n+      size_tree = TREE_OPERAND (exp, 1);\n+      exp = TREE_OPERAND (exp, 0);\n+    }\n   else if (!VOID_TYPE_P (TREE_TYPE (exp)))\n     {\n       machine_mode mode = TYPE_MODE (TREE_TYPE (exp));"}, {"sha": "0421bfac9986982899bfa71ead8e05514b462130", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2e6ad1ba532fe684633edac766c598be19ad3b59", "patch": "@@ -722,6 +722,8 @@ ao_ref_base_alias_set (ao_ref *ref)\n   if (!ref->ref)\n     return 0;\n   base_ref = ref->ref;\n+  if (TREE_CODE (base_ref) == WITH_SIZE_EXPR)\n+    base_ref = TREE_OPERAND (base_ref, 0);\n   while (handled_component_p (base_ref))\n     base_ref = TREE_OPERAND (base_ref, 0);\n   ref->base_alias_set = get_alias_set (base_ref);\n@@ -752,6 +754,8 @@ ao_ref_base_alias_ptr_type (ao_ref *ref)\n   if (!ref->ref)\n     return NULL_TREE;\n   base_ref = ref->ref;\n+  if (TREE_CODE (base_ref) == WITH_SIZE_EXPR)\n+    base_ref = TREE_OPERAND (base_ref, 0);\n   while (handled_component_p (base_ref))\n     base_ref = TREE_OPERAND (base_ref, 0);\n   tree ret = reference_alias_ptr_type (base_ref);\n@@ -2314,14 +2318,16 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \t\t\t|| TREE_CODE (ref1->ref) == STRING_CST\n \t\t\t|| handled_component_p (ref1->ref)\n \t\t\t|| TREE_CODE (ref1->ref) == MEM_REF\n-\t\t\t|| TREE_CODE (ref1->ref) == TARGET_MEM_REF)\n+\t\t\t|| TREE_CODE (ref1->ref) == TARGET_MEM_REF\n+\t\t\t|| TREE_CODE (ref1->ref) == WITH_SIZE_EXPR)\n \t\t       && (!ref2->ref\n \t\t\t   || TREE_CODE (ref2->ref) == SSA_NAME\n \t\t\t   || DECL_P (ref2->ref)\n \t\t\t   || TREE_CODE (ref2->ref) == STRING_CST\n \t\t\t   || handled_component_p (ref2->ref)\n \t\t\t   || TREE_CODE (ref2->ref) == MEM_REF\n-\t\t\t   || TREE_CODE (ref2->ref) == TARGET_MEM_REF));\n+\t\t\t   || TREE_CODE (ref2->ref) == TARGET_MEM_REF\n+\t\t\t   || TREE_CODE (ref2->ref) == WITH_SIZE_EXPR));\n \n   /* Decompose the references into their base objects and the access.  */\n   base1 = ao_ref_base (ref1);\n@@ -2360,16 +2366,25 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n       && ref2->volatile_p)\n     return true;\n \n+  /* refN->ref may convey size information, do not confuse our workers\n+     with that but strip it - ao_ref_base took it into account already.  */\n+  tree ref1ref = ref1->ref;\n+  if (ref1ref && TREE_CODE (ref1ref) == WITH_SIZE_EXPR)\n+    ref1ref = TREE_OPERAND (ref1ref, 0);\n+  tree ref2ref = ref2->ref;\n+  if (ref2ref && TREE_CODE (ref2ref) == WITH_SIZE_EXPR)\n+    ref2ref = TREE_OPERAND (ref2ref, 0);\n+\n   /* Defer to simple offset based disambiguation if we have\n      references based on two decls.  Do this before defering to\n      TBAA to handle must-alias cases in conformance with the\n      GCC extension of allowing type-punning through unions.  */\n   var1_p = DECL_P (base1);\n   var2_p = DECL_P (base2);\n   if (var1_p && var2_p)\n-    return decl_refs_may_alias_p (ref1->ref, base1, offset1, max_size1,\n+    return decl_refs_may_alias_p (ref1ref, base1, offset1, max_size1,\n \t\t\t\t  ref1->size,\n-\t\t\t\t  ref2->ref, base2, offset2, max_size2,\n+\t\t\t\t  ref2ref, base2, offset2, max_size2,\n \t\t\t\t  ref2->size);\n \n   /* Handle restrict based accesses.\n@@ -2379,14 +2394,14 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n   tree rbase2 = base2;\n   if (var1_p)\n     {\n-      rbase1 = ref1->ref;\n+      rbase1 = ref1ref;\n       if (rbase1)\n \twhile (handled_component_p (rbase1))\n \t  rbase1 = TREE_OPERAND (rbase1, 0);\n     }\n   if (var2_p)\n     {\n-      rbase2 = ref2->ref;\n+      rbase2 = ref2ref;\n       if (rbase2)\n \twhile (handled_component_p (rbase2))\n \t  rbase2 = TREE_OPERAND (rbase2, 0);\n@@ -2412,6 +2427,7 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n       std::swap (max_size1, max_size2);\n       std::swap (base1, base2);\n       std::swap (ref1, ref2);\n+      std::swap (ref1ref, ref2ref);\n       var1_p = true;\n       ind1_p = false;\n       var2_p = false;\n@@ -2437,21 +2453,21 @@ refs_may_alias_p_2 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \n   /* Dispatch to the pointer-vs-decl or pointer-vs-pointer disambiguators.  */\n   if (var1_p && ind2_p)\n-    return indirect_ref_may_alias_decl_p (ref2->ref, base2,\n+    return indirect_ref_may_alias_decl_p (ref2ref, base2,\n \t\t\t\t\t  offset2, max_size2, ref2->size,\n \t\t\t\t\t  ao_ref_alias_set (ref2),\n \t\t\t\t\t  ao_ref_base_alias_set (ref2),\n-\t\t\t\t\t  ref1->ref, base1,\n+\t\t\t\t\t  ref1ref, base1,\n \t\t\t\t\t  offset1, max_size1, ref1->size,\n \t\t\t\t\t  ao_ref_alias_set (ref1),\n \t\t\t\t\t  ao_ref_base_alias_set (ref1),\n \t\t\t\t\t  tbaa_p);\n   else if (ind1_p && ind2_p)\n-    return indirect_refs_may_alias_p (ref1->ref, base1,\n+    return indirect_refs_may_alias_p (ref1ref, base1,\n \t\t\t\t      offset1, max_size1, ref1->size,\n \t\t\t\t      ao_ref_alias_set (ref1),\n \t\t\t\t      ao_ref_base_alias_set (ref1),\n-\t\t\t\t      ref2->ref, base2,\n+\t\t\t\t      ref2ref, base2,\n \t\t\t\t      offset2, max_size2, ref2->size,\n \t\t\t\t      ao_ref_alias_set (ref2),\n \t\t\t\t      ao_ref_base_alias_set (ref2),"}, {"sha": "bdb29b82303e2c0ecf96e6767d45a3cfaa20e04e", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6ad1ba532fe684633edac766c598be19ad3b59/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2e6ad1ba532fe684633edac766c598be19ad3b59", "patch": "@@ -12382,6 +12382,8 @@ drop_tree_overflow (tree t)\n tree\n get_base_address (tree t)\n {\n+  if (TREE_CODE (t) == WITH_SIZE_EXPR)\n+    t = TREE_OPERAND (t, 0);\n   while (handled_component_p (t))\n     t = TREE_OPERAND (t, 0);\n \n@@ -12390,11 +12392,6 @@ get_base_address (tree t)\n       && TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR)\n     t = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n \n-  /* ???  Either the alias oracle or all callers need to properly deal\n-     with WITH_SIZE_EXPRs before we can look through those.  */\n-  if (TREE_CODE (t) == WITH_SIZE_EXPR)\n-    return NULL_TREE;\n-\n   return t;\n }\n "}]}