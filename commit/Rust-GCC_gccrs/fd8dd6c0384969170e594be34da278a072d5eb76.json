{"sha": "fd8dd6c0384969170e594be34da278a072d5eb76", "node_id": "C_kwDOANBUbNoAKGZkOGRkNmMwMzg0OTY5MTcwZTU5NGJlMzRkYTI3OGEwNzJkNWViNzY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-29T11:56:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-29T13:30:35Z"}, "message": "tree-optimization/107852 - missed optimization with PHIs\n\nThe following deals with the situation where we have\n\n<bb 2> [local count: 1073741824]:\n_5 = bytes.D.25336._M_impl.D.24643._M_start;\n_6 = bytes.D.25336._M_impl.D.24643._M_finish;\npretmp_66 = bytes.D.25336._M_impl.D.24643._M_end_of_storage;\nif (_5 != _6)\n  goto <bb 3>; [70.00%]\nelse\n  goto <bb 4>; [30.00%]\n\n...\n\n<bb 6> [local count: 329045359]:\n_89 = operator new (4);\n_43 = bytes.D.25336._M_impl.D.24643._M_start;\n_Num_44 = _137 - _43;\nif (_Num_44 != 0)\n\nbut fail to see that _137 is equal to _5 and thus eventually _Num_44\nis zero if not operator new would possibly clobber the global\nbytes variable.\n\nThe following resolves this in value-numbering by using the\npredicated values for _5 == _6 recorded for the dominating\ncondition.\n\n\tPR tree-optimization/107852\n\t* tree-ssa-sccvn.cc (visit_phi): Use equivalences recorded\n\tas predicated values to elide more redundant PHIs.\n\n\t* gcc.dg/tree-ssa/ssa-fre-101.c: New testcase.", "tree": {"sha": "9afc4155efc589af6eb7990d7e8793cfbf503a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9afc4155efc589af6eb7990d7e8793cfbf503a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd8dd6c0384969170e594be34da278a072d5eb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8dd6c0384969170e594be34da278a072d5eb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8dd6c0384969170e594be34da278a072d5eb76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8dd6c0384969170e594be34da278a072d5eb76/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063ba138eaa15ceecf23a24906e0e19be98d509d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063ba138eaa15ceecf23a24906e0e19be98d509d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063ba138eaa15ceecf23a24906e0e19be98d509d"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "c67f211dcf6306dc24eed2a8e79e53a0f10118e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-101.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8dd6c0384969170e594be34da278a072d5eb76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8dd6c0384969170e594be34da278a072d5eb76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-101.c?ref=fd8dd6c0384969170e594be34da278a072d5eb76", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+int test1 (int i, int j)\n+{\n+  int k;\n+  if (i != j)\n+    k = i;\n+  else\n+    k = j;\n+  return k;\n+}\n+\n+int test2 (int i, int j)\n+{\n+  int k;\n+  if (i != j)\n+    k = j;\n+  else\n+    k = i;\n+  return k;\n+}\n+\n+int test3 (int i, int j)\n+{\n+  int k;\n+  if (i == j)\n+    k = j;\n+  else\n+    k = i;\n+  return k;\n+}\n+\n+int test4 (int i, int j)\n+{\n+  int k;\n+  if (i == j)\n+    k = i;\n+  else\n+    k = j;\n+  return k;\n+}\n+\n+/* We'd expect 4 hits but since we only keep one forwarder the\n+   VN predication machinery cannot record something for the entry\n+   block since it doesn't work on edges but on their source.  */\n+/* { dg-final { scan-tree-dump-times \"equal on edge\" 2 \"fre1\" } } */"}, {"sha": "1e7763baa38e9891f70cb883fddc9488dcb40ea6", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8dd6c0384969170e594be34da278a072d5eb76/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8dd6c0384969170e594be34da278a072d5eb76/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=fd8dd6c0384969170e594be34da278a072d5eb76", "patch": "@@ -5793,7 +5793,8 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \n   /* See if all non-TOP arguments have the same value.  TOP is\n      equivalent to everything, so we can ignore it.  */\n-  FOR_EACH_EDGE (e, ei, gimple_bb (phi)->preds)\n+  basic_block bb = gimple_bb (phi);\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n     if (e->flags & EDGE_EXECUTABLE)\n       {\n \ttree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n@@ -5838,6 +5839,54 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t\t\t && known_eq (soff, doff))\n \t\t  continue;\n \t      }\n+\t    /* There's also the possibility to use equivalences.  */\n+\t    if (!FLOAT_TYPE_P (TREE_TYPE (def)))\n+\t      {\n+\t\tvn_nary_op_t vnresult;\n+\t\ttree ops[2];\n+\t\tops[0] = def;\n+\t\tops[1] = sameval;\n+\t\ttree val = vn_nary_op_lookup_pieces (2, EQ_EXPR,\n+\t\t\t\t\t\t     boolean_type_node,\n+\t\t\t\t\t\t     ops, &vnresult);\n+\t\tif (! val && vnresult && vnresult->predicated_values)\n+\t\t  {\n+\t\t    val = vn_nary_op_get_predicated_value (vnresult, e->src);\n+\t\t    if (val && integer_truep (val))\n+\t\t      {\n+\t\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t  {\n+\t\t\t    fprintf (dump_file, \"Predication says \");\n+\t\t\t    print_generic_expr (dump_file, def, TDF_NONE);\n+\t\t\t    fprintf (dump_file, \" and \");\n+\t\t\t    print_generic_expr (dump_file, sameval, TDF_NONE);\n+\t\t\t    fprintf (dump_file, \" are equal on edge %d -> %d\\n\",\n+\t\t\t\t     e->src->index, e->dest->index);\n+\t\t\t  }\n+\t\t\tcontinue;\n+\t\t      }\n+\t\t    /* If on all previous edges the value was equal to def\n+\t\t       we can change sameval to def.  */\n+\t\t    if (EDGE_COUNT (bb->preds) == 2\n+\t\t\t&& (val = vn_nary_op_get_predicated_value\n+\t\t\t\t    (vnresult, EDGE_PRED (bb, 0)->src))\n+\t\t\t&& integer_truep (val))\n+\t\t      {\n+\t\t\tif (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t  {\n+\t\t\t    fprintf (dump_file, \"Predication says \");\n+\t\t\t    print_generic_expr (dump_file, def, TDF_NONE);\n+\t\t\t    fprintf (dump_file, \" and \");\n+\t\t\t    print_generic_expr (dump_file, sameval, TDF_NONE);\n+\t\t\t    fprintf (dump_file, \" are equal on edge %d -> %d\\n\",\n+\t\t\t\t     EDGE_PRED (bb, 0)->src->index,\n+\t\t\t\t     EDGE_PRED (bb, 0)->dest->index);\n+\t\t\t  }\n+\t\t\tsameval = def;\n+\t\t\tcontinue;\n+\t\t      }\n+\t\t  }\n+\t      }\n \t    sameval = NULL_TREE;\n \t    break;\n \t  }"}]}