{"sha": "fd61ca67f97acc5462d02676380af92329c37bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2MWNhNjdmOTdhY2M1NDYyZDAyNjc2MzgwYWY5MjMyOWMzN2JiMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T09:34:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-22T09:37:51Z"}, "message": "tree-optimization/98786 - fix issue with phiopt and abnormals\n\nThis fixes factor_out_conditional_conversion to avoid creating overlapping\nlifetimes for abnormals.  It also makes sure we do deal with a conditional\nconversion (at least for one PHI arg def) - for the testcase that wasn't the case.\n\n2021-01-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98786\n\t* tree-ssa-phiopt.c (factor_out_conditional_conversion): Avoid\n\tadding new uses of abnormals.  Verify we deal with a conditional\n\tconversion.\n\n\t* gcc.dg/torture/pr98786.c: New testcase.", "tree": {"sha": "8b2f0f563677b6bb8e2ec3bfd3c3a907308f8e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2f0f563677b6bb8e2ec3bfd3c3a907308f8e69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd61ca67f97acc5462d02676380af92329c37bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd61ca67f97acc5462d02676380af92329c37bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd61ca67f97acc5462d02676380af92329c37bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd61ca67f97acc5462d02676380af92329c37bb2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3beaca15cab2de88a68d76f0aabc68e68f678a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3beaca15cab2de88a68d76f0aabc68e68f678a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3beaca15cab2de88a68d76f0aabc68e68f678a"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "ea364717af230483f3262a3030b6031ffbbc5cc4", "filename": "gcc/testsuite/gcc.dg/torture/pr98786.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd61ca67f97acc5462d02676380af92329c37bb2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98786.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd61ca67f97acc5462d02676380af92329c37bb2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98786.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98786.c?ref=fd61ca67f97acc5462d02676380af92329c37bb2", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fno-tree-dce\" } */\n+\n+void\n+func_30 (void);\n+\n+int __attribute__ ((pure, returns_twice))\n+func_38 (int g_15, int p_39)\n+{\n+  return !!g_15 ? p_39 : 0;\n+}\n+\n+void\n+func_26 (int func_26___trans_tmp_1)\n+{\n+  long int l_37 = 0;\n+  int __trans_tmp_1;\n+\n+  func_26___trans_tmp_1 = func_38 (func_26___trans_tmp_1, 1);\n+  __trans_tmp_1 = func_38 (func_26___trans_tmp_1, l_37);\n+  l_37 = 1;\n+  func_30 ();\n+}"}, {"sha": "ddd9d531b13c4d53aa1435e669c3c8972a9c82ef", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd61ca67f97acc5462d02676380af92329c37bb2/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd61ca67f97acc5462d02676380af92329c37bb2/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=fd61ca67f97acc5462d02676380af92329c37bb2", "patch": "@@ -474,6 +474,9 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n       if (!is_gimple_reg_type (TREE_TYPE (new_arg0)))\n \treturn NULL;\n     }\n+  if (TREE_CODE (new_arg0) == SSA_NAME\n+      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_arg0))\n+    return NULL;\n \n   if (TREE_CODE (arg1) == SSA_NAME)\n     {\n@@ -484,13 +487,25 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n \t  || gimple_assign_rhs_code (arg1_def_stmt) != convert_code)\n \treturn NULL;\n \n+      /* Either arg1_def_stmt or arg0_def_stmt should be conditional.  */\n+      if (dominated_by_p (CDI_DOMINATORS, gimple_bb (phi), gimple_bb (arg0_def_stmt))\n+\t  && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t     gimple_bb (phi), gimple_bb (arg1_def_stmt)))\n+\treturn NULL;\n+\n       /* Use the RHS as new_arg1.  */\n       new_arg1 = gimple_assign_rhs1 (arg1_def_stmt);\n       if (convert_code == VIEW_CONVERT_EXPR)\n \tnew_arg1 = TREE_OPERAND (new_arg1, 0);\n+      if (TREE_CODE (new_arg1) == SSA_NAME\n+\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_arg1))\n+\treturn NULL;\n     }\n   else\n     {\n+      /* arg0_def_stmt should be conditional.  */\n+      if (dominated_by_p (CDI_DOMINATORS, gimple_bb (phi), gimple_bb (arg0_def_stmt)))\n+\treturn NULL;\n       /* If arg1 is an INTEGER_CST, fold it to new type.  */\n       if (INTEGRAL_TYPE_P (TREE_TYPE (new_arg0))\n \t  && int_fits_type_p (arg1, TREE_TYPE (new_arg0)))"}]}