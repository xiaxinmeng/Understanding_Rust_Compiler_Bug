{"sha": "df5c89cb75836adc825e218cdb4307364889902e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY1Yzg5Y2I3NTgzNmFkYzgyNWUyMThjZGI0MzA3MzY0ODg5OTAyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-12T19:19:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-12T19:19:15Z"}, "message": "cp-tree.h (enum cp_lvalue_kind_flags): Add clk_rvalueref.\n\n\t* cp-tree.h (enum cp_lvalue_kind_flags): Add clk_rvalueref.\n\t* tree.c (lvalue_p_1): Return it.  Remove\n\ttreat_class_rvalues_as_lvalues parm.\n\t(real_lvalue_p): Disallow pseudo-lvalues here.\n\t(lvalue_or_rvalue_with_address_p): New fn.\n\t* call.c (initialize_reference): Use it instead of real_lvalue_p.\n\nFrom-SVN: r149534", "tree": {"sha": "f66df5c05f93e0914a3aa2b839403fc721add63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66df5c05f93e0914a3aa2b839403fc721add63c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df5c89cb75836adc825e218cdb4307364889902e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5c89cb75836adc825e218cdb4307364889902e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df5c89cb75836adc825e218cdb4307364889902e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df5c89cb75836adc825e218cdb4307364889902e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25357d1ee0ce69a5b1c194e7e1c7b6437c189b01"}], "stats": {"total": 113, "additions": 70, "deletions": 43}, "files": [{"sha": "d3fceab5a6f0e255a56d0b1d083fe021c820a824", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -1,5 +1,13 @@\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/37206\n+\t* cp-tree.h (enum cp_lvalue_kind_flags): Add clk_rvalueref.\n+\t* tree.c (lvalue_p_1): Return it.  Remove\n+\ttreat_class_rvalues_as_lvalues parm.\n+\t(real_lvalue_p): Disallow pseudo-lvalues here.\n+\t(lvalue_or_rvalue_with_address_p): New fn.\n+\t* call.c (initialize_reference): Use it instead of real_lvalue_p.\n+\n \tPR c++/40689\n \t* init.c (build_new_1): Handle initializer list as array initializer.\n \t(build_vec_init): Likewise."}, {"sha": "5edeb3a4cd8ddddf8808687e1ad4641944095e9d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -7622,7 +7622,7 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n \texpr = error_mark_node;\n       else\n \t{\n-\t  if (!real_lvalue_p (expr))\n+\t  if (!lvalue_or_rvalue_with_address_p (expr))\n \t    {\n \t      tree init;\n \t      var = set_up_extended_ref_temp (decl, expr, cleanup, &init);"}, {"sha": "933da1992d24619c40d8e41c18475b138d390136", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -3509,9 +3509,10 @@ enum tag_types {\n enum cp_lvalue_kind_flags {\n   clk_none = 0,     /* Things that are not an lvalue.  */\n   clk_ordinary = 1, /* An ordinary lvalue.  */\n-  clk_class = 2,    /* An rvalue of class-type.  */\n-  clk_bitfield = 4, /* An lvalue for a bit-field.  */\n-  clk_packed = 8    /* An lvalue for a packed field.  */\n+  clk_rvalueref = 2,/* An rvalue formed using an rvalue reference */\n+  clk_class = 4,    /* An rvalue of class-type.  */\n+  clk_bitfield = 8, /* An lvalue for a bit-field.  */\n+  clk_packed = 16   /* An lvalue for a packed field.  */\n };\n \n /* This type is used for parameters and variables which hold\n@@ -4884,6 +4885,7 @@ extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(const_tree);\n extern cp_lvalue_kind real_lvalue_p\t\t(tree);\n+extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_nt\t\t\t(enum tree_code, ...);"}, {"sha": "698138808ce2ef67c260a357a307869091b691ec", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -44,7 +44,7 @@ static tree build_cplus_array_type_1 (tree, tree);\n static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n-static cp_lvalue_kind lvalue_p_1 (const_tree, int);\n+static cp_lvalue_kind lvalue_p_1 (const_tree);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n@@ -55,12 +55,10 @@ static tree handle_com_interface_attribute (tree *, tree, tree, int, bool *);\n static tree handle_init_priority_attribute (tree *, tree, tree, int, bool *);\n \n /* If REF is an lvalue, returns the kind of lvalue that REF is.\n-   Otherwise, returns clk_none.  If TREAT_CLASS_RVALUES_AS_LVALUES is\n-   nonzero, rvalues of class type are considered lvalues.  */\n+   Otherwise, returns clk_none.  */\n \n static cp_lvalue_kind\n-lvalue_p_1 (const_tree ref,\n-\t    int treat_class_rvalues_as_lvalues)\n+lvalue_p_1 (const_tree ref)\n {\n   cp_lvalue_kind op1_lvalue_kind = clk_none;\n   cp_lvalue_kind op2_lvalue_kind = clk_none;\n@@ -72,8 +70,7 @@ lvalue_p_1 (const_tree ref,\n   if (TREE_CODE (ref) == INDIRECT_REF\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (ref, 0)))\n \t  == REFERENCE_TYPE)\n-    return lvalue_p_1 (TREE_OPERAND (ref, 0),\n-                       treat_class_rvalues_as_lvalues);\n+    return lvalue_p_1 (TREE_OPERAND (ref, 0));\n \n   if (TREE_CODE (TREE_TYPE (ref)) == REFERENCE_TYPE)\n     {\n@@ -82,12 +79,7 @@ lvalue_p_1 (const_tree ref,\n \t  && TREE_CODE (ref) != PARM_DECL\n \t  && TREE_CODE (ref) != VAR_DECL\n \t  && TREE_CODE (ref) != COMPONENT_REF)\n-\t{\n-\t  if (CLASS_TYPE_P (TREE_TYPE (TREE_TYPE (ref))))\n-\t    return treat_class_rvalues_as_lvalues ? clk_class : clk_none;\n-\t  else\n-\t    return clk_none;\n-\t}\n+\treturn clk_rvalueref;\n \n       /* lvalue references and named rvalue references are lvalues.  */\n       return clk_ordinary;\n@@ -108,12 +100,10 @@ lvalue_p_1 (const_tree ref,\n     case WITH_CLEANUP_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n-      return lvalue_p_1 (TREE_OPERAND (ref, 0),\n-\t\t\t treat_class_rvalues_as_lvalues);\n+      return lvalue_p_1 (TREE_OPERAND (ref, 0));\n \n     case COMPONENT_REF:\n-      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0),\n-\t\t\t\t    treat_class_rvalues_as_lvalues);\n+      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0));\n       /* Look at the member designator.  */\n       if (!op1_lvalue_kind)\n \t;\n@@ -164,35 +154,28 @@ lvalue_p_1 (const_tree ref,\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 0))\n \t  || TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 1)))\n \treturn clk_none;\n-      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0),\n-\t\t\t\t    treat_class_rvalues_as_lvalues);\n-      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1),\n-\t\t\t\t    treat_class_rvalues_as_lvalues);\n+      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0));\n+      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1));\n       break;\n \n     case COND_EXPR:\n       op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1)\n \t\t\t\t    ? TREE_OPERAND (ref, 1)\n-\t\t\t\t    : TREE_OPERAND (ref, 0),\n-\t\t\t\t    treat_class_rvalues_as_lvalues);\n-      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 2),\n-\t\t\t\t    treat_class_rvalues_as_lvalues);\n+\t\t\t\t    : TREE_OPERAND (ref, 0));\n+      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 2));\n       break;\n \n     case MODIFY_EXPR:\n       return clk_ordinary;\n \n     case COMPOUND_EXPR:\n-      return lvalue_p_1 (TREE_OPERAND (ref, 1),\n-\t\t\t treat_class_rvalues_as_lvalues);\n+      return lvalue_p_1 (TREE_OPERAND (ref, 1));\n \n     case TARGET_EXPR:\n-      return treat_class_rvalues_as_lvalues ? clk_class : clk_none;\n+      return clk_class;\n \n     case VA_ARG_EXPR:\n-      return (treat_class_rvalues_as_lvalues\n-\t      && CLASS_TYPE_P (TREE_TYPE (ref))\n-\t      ? clk_class : clk_none);\n+      return (CLASS_TYPE_P (TREE_TYPE (ref)) ? clk_class : clk_none);\n \n     case CALL_EXPR:\n       /* Any class-valued call would be wrapped in a TARGET_EXPR.  */\n@@ -209,8 +192,7 @@ lvalue_p_1 (const_tree ref,\n \t with a BASELINK.  */\n       /* This CONST_CAST is okay because BASELINK_FUNCTIONS returns\n \t its argument unmodified and we assign it to a const_tree.  */\n-      return lvalue_p_1 (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)),\n-\t\t\t treat_class_rvalues_as_lvalues);\n+      return lvalue_p_1 (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n \n     case NON_DEPENDENT_EXPR:\n       /* We must consider NON_DEPENDENT_EXPRs to be lvalues so that\n@@ -246,18 +228,33 @@ lvalue_p_1 (const_tree ref,\n cp_lvalue_kind\n real_lvalue_p (tree ref)\n {\n-  return lvalue_p_1 (ref,\n-\t\t     /*treat_class_rvalues_as_lvalues=*/0);\n+  cp_lvalue_kind kind = lvalue_p_1 (ref);\n+  if (kind & (clk_rvalueref|clk_class))\n+    return clk_none;\n+  else\n+    return kind;\n }\n \n-/* This differs from real_lvalue_p in that class rvalues are\n-   considered lvalues.  */\n+/* This differs from real_lvalue_p in that class rvalues are considered\n+   lvalues.  */\n \n bool\n lvalue_p (const_tree ref)\n {\n-  return\n-    (lvalue_p_1 (ref, /*class rvalue ok*/ 1) != clk_none);\n+  return (lvalue_p_1 (ref) != clk_none);\n+}\n+\n+/* This differs from real_lvalue_p in that rvalues formed by dereferencing\n+   rvalue references are considered rvalues.  */\n+\n+bool\n+lvalue_or_rvalue_with_address_p (const_tree ref)\n+{\n+  cp_lvalue_kind kind = lvalue_p_1 (ref);\n+  if (kind & clk_class)\n+    return false;\n+  else\n+    return (kind != clk_none);\n }\n \n /* Test whether DECL is a builtin that may appear in a"}, {"sha": "7fdbcf425602c9caf5c551dd180674041405fa6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -1,3 +1,8 @@\n+2009-07-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37206\n+\t* g++.dg/cpp0x/rv10.C: New.\n+\n 2009-07-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/40689"}, {"sha": "5e78b1dbb69060f2e9a241bae83829bbd43c8d8f", "filename": "gcc/testsuite/g++.dg/cpp0x/rv10.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df5c89cb75836adc825e218cdb4307364889902e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv10.C?ref=df5c89cb75836adc825e218cdb4307364889902e", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+struct A\n+{\n+  A() = default;\n+  A(const A&) = delete;\n+};\n+\n+A&& f();\n+void h(A&&);\n+void g()\n+{\n+  A&& arr = f();\n+  h(f());\n+}"}]}