{"sha": "370f38e84763ca6271d7898b4900baad3810ad81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwZjM4ZTg0NzYzY2E2MjcxZDc4OThiNDkwMGJhYWQzODEwYWQ4MQ==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-06-30T19:28:24Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-06-30T19:28:24Z"}, "message": "df-scan.c (df_scan_free_ref_vec, [...]): New macros.\n\n2008-06-30  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* df-scan.c (df_scan_free_ref_vec, df_scan_free_mws_vec): New\n\tmacros.\n       \t(df_scan_free_internal): Free data structures not\n\tallocated in storage pools.\n\t(df_mw_hardreg_chain_delete_eq_uses): Use df_scan_free_mws_vec.\n\t(df_refs_add_to_chains): Use df_scan_free_ref_vec and \n\tdf_scan_free_mws_vec.\n\t* dse.c (dse_step6): Free offset_map_p and offset_map_n\n\tunconditionally.\n\nFrom-SVN: r137284", "tree": {"sha": "25163222bdff7bf15877a51ced2d08b2d02e3dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25163222bdff7bf15877a51ced2d08b2d02e3dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/370f38e84763ca6271d7898b4900baad3810ad81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370f38e84763ca6271d7898b4900baad3810ad81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370f38e84763ca6271d7898b4900baad3810ad81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370f38e84763ca6271d7898b4900baad3810ad81/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bb77598866d730419f52a846b3bf9d7412aba2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb77598866d730419f52a846b3bf9d7412aba2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb77598866d730419f52a846b3bf9d7412aba2a"}], "stats": {"total": 135, "additions": 87, "deletions": 48}, "files": [{"sha": "3547b54ccf2fda357e2a284ca3f31349a6fccbf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=370f38e84763ca6271d7898b4900baad3810ad81", "patch": "@@ -1,3 +1,15 @@\n+2008-06-30  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* df-scan.c (df_scan_free_ref_vec, df_scan_free_mws_vec): New\n+\tmacros.\n+       \t(df_scan_free_internal): Free data structures not\n+\tallocated in storage pools.\n+\t(df_mw_hardreg_chain_delete_eq_uses): Use df_scan_free_mws_vec.\n+\t(df_refs_add_to_chains): Use df_scan_free_ref_vec and \n+\tdf_scan_free_mws_vec.\n+\t* dse.c (dse_step6): Free offset_map_p and offset_map_n\n+\tunconditionally.\n+\n 2008-06-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (contains_aligned_value_p): Return true"}, {"sha": "5818717651dc3225b012aea32fa0dfafb12c7b41", "filename": "gcc/df-scan.c", "status": "modified", "additions": 54, "deletions": 13, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=370f38e84763ca6271d7898b4900baad3810ad81", "patch": "@@ -60,6 +60,21 @@ along with GCC; see the file COPYING3.  If not see\n #define EPILOGUE_USES(REGNO)  0\n #endif\n \n+/* The following two macros free the vecs that hold either the refs or\n+   the mw refs.  They are a little tricky because the vec has 0\n+   elements is special and is not to be freed.  */ \n+#define df_scan_free_ref_vec(V) \\\n+  do { \\\n+    if (V && *V) \\\n+      free (V);  \\\n+  } while (0)\n+\n+#define df_scan_free_mws_vec(V) \\\n+  do { \\\n+    if (V && *V) \\\n+      free (V);  \\\n+  } while (0)\n+\n /* The bitmap_obstack is used to hold some static variables that\n    should not be reset after each function is compiled.  */\n \n@@ -174,11 +189,43 @@ struct df_scan_problem_data\n \n typedef struct df_scan_bb_info *df_scan_bb_info_t;\n \n+\n+/* Internal function to shut down the scanning problem.  */\n static void \n df_scan_free_internal (void)\n {\n   struct df_scan_problem_data *problem_data\n     = (struct df_scan_problem_data *) df_scan->problem_data;\n+  unsigned int i;\n+  basic_block bb;\n+\n+  /* The vectors that hold the refs are not pool allocated because\n+     they come in many sizes.  This makes them impossible to delete\n+     all at once.  */\n+  for (i = 0; i < DF_INSN_SIZE(); i++)\n+    {\n+      struct df_insn_info *insn_info = DF_INSN_UID_GET(i);\n+      /* Skip the insns that have no insn_info or have been\n+\t deleted.  */\n+      if (insn_info)\n+\t{\n+\t  df_scan_free_ref_vec (insn_info->defs);\n+\t  df_scan_free_ref_vec (insn_info->uses);\n+\t  df_scan_free_ref_vec (insn_info->eq_uses);\n+\t  df_scan_free_mws_vec (insn_info->mw_hardregs);\n+\t}\n+    }\n+\n+  FOR_ALL_BB (bb)\n+    {\n+      unsigned int bb_index = bb->index;\n+      struct df_scan_bb_info *bb_info = df_scan_get_bb_info (bb_index);\n+      if (bb_info)\n+\t{\n+\t  df_scan_free_ref_vec (bb_info->artificial_defs);\n+\t  df_scan_free_ref_vec (bb_info->artificial_uses);\n+\t}\n+    }\n \n   free (df->def_info.refs);\n   free (df->def_info.begin);\n@@ -1977,7 +2024,7 @@ df_mw_hardreg_chain_delete_eq_uses (struct df_insn_info *insn_info)\n \n   if (count == 0)\n     {\n-      free (insn_info->mw_hardregs);\n+      df_scan_free_mws_vec (insn_info->mw_hardregs);\n       insn_info->mw_hardregs = df_null_mw_rec;\n       return 0;\n     }\n@@ -2515,8 +2562,7 @@ df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n \t chain specially.  */\n       if (collection_rec->def_vec)\n \t{\n-\t  if (insn_rec->defs && *insn_rec->defs)\n-\t    free (insn_rec->defs);\n+\t  df_scan_free_ref_vec (insn_rec->defs);\n \t  insn_rec->defs \n \t    = df_install_refs (bb, collection_rec->def_vec, \n \t\t\t       collection_rec->next_def,\n@@ -2525,8 +2571,7 @@ df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n \t}\n       if (collection_rec->use_vec)\n \t{\n-\t  if (insn_rec->uses && *insn_rec->uses)\n-\t    free (insn_rec->uses);\n+\t  df_scan_free_ref_vec (insn_rec->uses);\n \t  insn_rec->uses \n \t    = df_install_refs (bb, collection_rec->use_vec, \n \t\t\t       collection_rec->next_use,\n@@ -2535,8 +2580,7 @@ df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n \t}\n       if (collection_rec->eq_use_vec)\n \t{\n-\t  if (insn_rec->eq_uses && *insn_rec->eq_uses)\n-\t    free (insn_rec->eq_uses);\n+\t  df_scan_free_ref_vec (insn_rec->eq_uses);\n \t  insn_rec->eq_uses \n \t    = df_install_refs (bb, collection_rec->eq_use_vec, \n \t\t\t       collection_rec->next_eq_use,\n@@ -2545,8 +2589,7 @@ df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n \t}\n       if (collection_rec->mw_vec)\n \t{\n-\t  if (insn_rec->mw_hardregs && *insn_rec->mw_hardregs)\n-\t    free (insn_rec->mw_hardregs);\n+\t  df_scan_free_mws_vec (insn_rec->mw_hardregs);\n \t  insn_rec->mw_hardregs \n \t    = df_install_mws (collection_rec->mw_vec, \n \t\t\t      collection_rec->next_mw);\n@@ -2556,15 +2599,13 @@ df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n     {\n       struct df_scan_bb_info *bb_info = df_scan_get_bb_info (bb->index);\n \n-      if (bb_info->artificial_defs && *bb_info->artificial_defs)\n-\tfree (bb_info->artificial_defs);\n+      df_scan_free_ref_vec (bb_info->artificial_defs);\n       bb_info->artificial_defs \n \t= df_install_refs (bb, collection_rec->def_vec, \n \t\t\t   collection_rec->next_def,\n \t\t\t   df->def_regs,\n \t\t\t   &df->def_info, false);\n-      if (bb_info->artificial_uses && *bb_info->artificial_uses)\n-\tfree (bb_info->artificial_uses);\n+      df_scan_free_ref_vec (bb_info->artificial_uses);\n       bb_info->artificial_uses \n \t= df_install_refs (bb, collection_rec->use_vec, \n \t\t\t   collection_rec->next_use,"}, {"sha": "71d3462011052cc25a9809360ff449876ecca1e1", "filename": "gcc/dse.c", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/370f38e84763ca6271d7898b4900baad3810ad81/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=370f38e84763ca6271d7898b4900baad3810ad81", "patch": "@@ -3156,43 +3156,30 @@ dse_step6 (bool global_done)\n   group_info_t group;\n   basic_block bb;\n   \n-  if (global_done)\n-    {\n-      for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)\n-\t{\n-\t  free (group->offset_map_n);\n-\t  free (group->offset_map_p);\n-\t  BITMAP_FREE (group->store1_n);\n-\t  BITMAP_FREE (group->store1_p);\n-\t  BITMAP_FREE (group->store2_n);\n-\t  BITMAP_FREE (group->store2_p);\n-\t  BITMAP_FREE (group->group_kill);\n-\t}\n-\n-      FOR_ALL_BB (bb)\n-\t{\n-\t  bb_info_t bb_info = bb_table[bb->index];\n-\t  BITMAP_FREE (bb_info->gen);\n-\t  if (bb_info->kill)\n-\t    BITMAP_FREE (bb_info->kill);\n-\t  if (bb_info->in)\n-\t    BITMAP_FREE (bb_info->in);\n-\t  if (bb_info->out)\n-\t    BITMAP_FREE (bb_info->out);\n-\t}\n-    }\n-  else\n+  for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)\n     {\n-      for (i = 0; VEC_iterate (group_info_t, rtx_group_vec, i, group); i++)\n-\t{\n-\t  BITMAP_FREE (group->store1_n);\n-\t  BITMAP_FREE (group->store1_p);\n-\t  BITMAP_FREE (group->store2_n);\n-\t  BITMAP_FREE (group->store2_p);\n-\t  BITMAP_FREE (group->group_kill);\n-\t}\n+      free (group->offset_map_n);\n+      free (group->offset_map_p);\n+      BITMAP_FREE (group->store1_n);\n+      BITMAP_FREE (group->store1_p);\n+      BITMAP_FREE (group->store2_n);\n+      BITMAP_FREE (group->store2_p);\n+      BITMAP_FREE (group->group_kill);\n     }\n \n+  if (global_done)\n+    FOR_ALL_BB (bb)\n+      {\n+\tbb_info_t bb_info = bb_table[bb->index];\n+\tBITMAP_FREE (bb_info->gen);\n+\tif (bb_info->kill)\n+\t  BITMAP_FREE (bb_info->kill);\n+\tif (bb_info->in)\n+\t  BITMAP_FREE (bb_info->in);\n+\tif (bb_info->out)\n+\t  BITMAP_FREE (bb_info->out);\n+      }\n+\n   if (clear_alias_sets)\n     {\n       BITMAP_FREE (clear_alias_sets);\n@@ -3217,7 +3204,6 @@ dse_step6 (bool global_done)\n }\n \n \n-\n /* -------------------------------------------------------------------------\n    DSE\n    ------------------------------------------------------------------------- */"}]}