{"sha": "a25811c8858901fe414333c836e622257d1506c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1ODExYzg4NTg5MDFmZTQxNDMzM2M4MzZlNjIyMjU3ZDE1MDZjMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2018-01-08T23:08:34Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-01-08T23:08:34Z"}, "message": "re PR target/83677 (PPC: The xxpermr instruction is not generated correctly)\n\n[gcc]\n\n2018-01-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/83677\n\t* config/rs6000/altivec.md (*altivec_vpermr_<mode>_internal):\n\tReverse order of second and third operands in first alternative.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Reverse order\n\tof first and second elements in UNSPEC_VPERMR vector.\n\t(altivec_expand_vec_perm_le): Likewise.\n\n[gcc/testsuite]\n\n2018-01-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/83677\n\t* gcc.target/powerpc/pr83677.c: New file.\n\nFrom-SVN: r256358", "tree": {"sha": "d24d8d082b79906add64da15b41dadc19f2166aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d24d8d082b79906add64da15b41dadc19f2166aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25811c8858901fe414333c836e622257d1506c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25811c8858901fe414333c836e622257d1506c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25811c8858901fe414333c836e622257d1506c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25811c8858901fe414333c836e622257d1506c0/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68df9882b223146ffac2b3b5a939cfc090b72e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68df9882b223146ffac2b3b5a939cfc090b72e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68df9882b223146ffac2b3b5a939cfc090b72e5f"}], "stats": {"total": 186, "additions": 183, "deletions": 3}, "files": [{"sha": "292d62de4f4913066ea4bba36b67665fd08b0327", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25811c8858901fe414333c836e622257d1506c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25811c8858901fe414333c836e622257d1506c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a25811c8858901fe414333c836e622257d1506c0", "patch": "@@ -1,3 +1,12 @@\n+2018-01-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/83677\n+\t* config/rs6000/altivec.md (*altivec_vpermr_<mode>_internal):\n+\tReverse order of second and third operands in first alternative.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Reverse order\n+\tof first and second elements in UNSPEC_VPERMR vector.\n+\t(altivec_expand_vec_perm_le): Likewise.\n+\n 2017-01-08  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimizatin/81308"}, {"sha": "4f8eeeab1200fa91451787334f22d04dbf589dc9", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25811c8858901fe414333c836e622257d1506c0/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25811c8858901fe414333c836e622257d1506c0/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a25811c8858901fe414333c836e622257d1506c0", "patch": "@@ -2206,7 +2206,7 @@\n \t\t   UNSPEC_VPERMR))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n-   vpermr %0,%2,%1,%3\n+   vpermr %0,%1,%2,%3\n    xxpermr %x0,%x1,%x3\"\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"length\" \"4\")])"}, {"sha": "f5b7f970f59c5e98b33fb1b50b85c1f7576b00c8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25811c8858901fe414333c836e622257d1506c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25811c8858901fe414333c836e622257d1506c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a25811c8858901fe414333c836e622257d1506c0", "patch": "@@ -7300,7 +7300,7 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n     {\n       if (TARGET_P9_VECTOR)\n \tx = gen_rtx_UNSPEC (mode,\n-\t\t\t    gen_rtvec (3, target, reg,\n+\t\t\t    gen_rtvec (3, reg, target,\n \t\t\t\t       force_reg (V16QImode, x)),\n \t\t\t    UNSPEC_VPERMR);\n       else\n@@ -35683,7 +35683,7 @@ altivec_expand_vec_perm_le (rtx operands[4])\n \n   if (TARGET_P9_VECTOR)\n     {\n-      unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op0, op1, sel),\n+      unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, sel),\n \t\t\t       UNSPEC_VPERMR);\n     }\n   else"}, {"sha": "847f1b937b16d0bf737c5aa1b5e0084f63d9d186", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25811c8858901fe414333c836e622257d1506c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25811c8858901fe414333c836e622257d1506c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a25811c8858901fe414333c836e622257d1506c0", "patch": "@@ -1,3 +1,8 @@\n+2018-01-08  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/83677\n+\t* gcc.target/powerpc/pr83677.c: New file.\n+\n 2018-01-08  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimizatin/81308"}, {"sha": "a1a760df8115772d408718ea716462489ef4d0d6", "filename": "gcc/testsuite/gcc.target/powerpc/pr83677.c", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25811c8858901fe414333c836e622257d1506c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25811c8858901fe414333c836e622257d1506c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr83677.c?ref=a25811c8858901fe414333c836e622257d1506c0", "patch": "@@ -0,0 +1,166 @@\n+/* { dg-do run { target { powerpc*-*-* && { lp64 && p9vector_hw } } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2 \" } */\n+\n+/* PR83677: This test case used to fail due to mis-generation of the\n+   xxpermr instruction.  It requires inlining to create enough register\n+   pressure that we generate xxpermr rather than vpermr.  */\n+\n+#include <altivec.h>\n+\n+void v_expand_u8(vector unsigned char* a, vector unsigned short* b0, vector unsigned short* b1)\n+{\n+  *b0 = (vector unsigned short)vec_mergeh(*a, vec_splats((unsigned char)0));\n+  *b1 = (vector unsigned short)vec_mergel(*a, vec_splats((unsigned char)0));\n+}\n+\n+void v_expand_u16(vector unsigned short* a, vector unsigned int* b0, vector unsigned int* b1)\n+{\n+    *b0 = (vector unsigned int)vec_mergeh(*a, vec_splats((unsigned short)0));\n+    *b1 = (vector unsigned int)vec_mergel(*a, vec_splats((unsigned short)0));\n+}\n+\n+void v_load_deinterleave_u8(unsigned char *ptr, vector unsigned char* a, vector unsigned char* b, vector unsigned char* c)\n+{\n+    vector unsigned char v1 = vec_xl( 0, ptr);\n+    vector unsigned char v2 = vec_xl(16, ptr);\n+    vector unsigned char v3 = vec_xl(32, ptr);\n+\n+    static const vector unsigned char a12_perm = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 0, 0, 0, 0, 0};\n+    static const vector unsigned char a123_perm = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 20, 23, 26, 29};\n+    *a = vec_perm(vec_perm(v1, v2, a12_perm), v3, a123_perm);\n+\n+    static const vector unsigned char b12_perm = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 0, 0, 0, 0, 0};\n+    static const vector unsigned char b123_perm = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 21, 24, 27, 30};\n+    *b = vec_perm(vec_perm(v1, v2, b12_perm), v3, b123_perm);\n+\n+    static const vector unsigned char c12_perm = {2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 0, 0, 0, 0, 0, 0};\n+    static const vector unsigned char c123_perm = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 19, 22, 25, 28, 31};\n+    *c = vec_perm(vec_perm(v1, v2, c12_perm), v3, c123_perm);\n+}\n+\n+void v_load_deinterleave_f32(float *ptr, vector float* a, vector float* b, vector float* c)\n+{\n+    vector float v1 = vec_xl( 0, ptr);\n+    vector float v2 = vec_xl(16, ptr);\n+    vector float v3 = vec_xl(32, ptr);\n+\n+    static const vector unsigned char flp = {0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31};\n+    *a = vec_perm(v1, vec_sld(v3, v2, 8), flp);\n+\n+    static const vector unsigned char flp2 = {28, 29, 30, 31, 0, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19};\n+    *b = vec_perm(v2, vec_sld(v1, v3, 8), flp2);\n+\n+    *c = vec_perm(vec_sld(v2, v1, 8), v3, flp);\n+}\n+\n+void v_store_interleave_f32(float *ptr, vector float a, vector float b, vector float c)\n+{\n+    vector float hbc = vec_mergeh(b, c);\n+\n+    static const vector unsigned char ahbc = {0, 1, 2, 3, 16, 17, 18, 19, 20, 21, 22, 23, 4, 5, 6, 7};\n+    vec_xst(vec_perm(a, hbc, ahbc),  0, ptr);\n+\n+    vector float lab = vec_mergel(a, b);\n+    vec_xst(vec_sld(lab, hbc, 8), 16, ptr);\n+\n+    static const vector unsigned char clab = {8, 9, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 12, 13, 14, 15};\n+    vec_xst(vec_perm(c, lab, clab), 32, ptr);\n+}\n+\n+vector float v_cvt_f32(vector unsigned int a)\n+{\n+    return (vector float)vec_ctf(a, 0);\n+}\n+\n+void acc_simd_(const unsigned char* src, float* dst, const unsigned char* mask, int len)\n+{\n+    int x = 0;\n+    const int cVectorWidth = 16;\n+\n+            for ( ; x <= len - cVectorWidth; x += cVectorWidth)\n+            {\n+                vector unsigned char v_mask = vec_xl(0, mask + x);\n+                v_mask = (vector unsigned char)vec_cmpeq(vec_splats((unsigned char)0), v_mask);\n+                v_mask = (vector unsigned char)vec_nor(v_mask, v_mask);\n+                vector unsigned char v_src0, v_src1, v_src2;\n+                v_load_deinterleave_u8((unsigned char *)(src + (x * 3)), &v_src0, &v_src1, &v_src2);\n+                v_src0 = v_src0 & v_mask;\n+                v_src1 = v_src1 & v_mask;\n+                v_src2 = v_src2 & v_mask;\n+\n+                /* expand 16 uchar to 4 vectors which contains 4 uint */\n+                vector unsigned short v_src00, v_src01, v_src10, v_src11, v_src20, v_src21;\n+                v_expand_u8(&v_src0, &v_src00, &v_src01);\n+                v_expand_u8(&v_src1, &v_src10, &v_src11);\n+                v_expand_u8(&v_src2, &v_src20, &v_src21);\n+                vector unsigned int v_src000, v_src001, v_src010, v_src011;\n+                vector unsigned int v_src100, v_src101, v_src110, v_src111;\n+                vector unsigned int v_src200, v_src201, v_src210, v_src211;\n+                v_expand_u16(&v_src00, &v_src000, &v_src001);\n+                v_expand_u16(&v_src01, &v_src010, &v_src011);\n+                v_expand_u16(&v_src10, &v_src100, &v_src101);\n+                v_expand_u16(&v_src11, &v_src110, &v_src111);\n+                v_expand_u16(&v_src20, &v_src200, &v_src201);\n+                v_expand_u16(&v_src21, &v_src210, &v_src211);\n+\n+                vector float v_dst000, v_dst001, v_dst010, v_dst011;\n+                vector float v_dst100, v_dst101, v_dst110, v_dst111;\n+                vector float v_dst200, v_dst201, v_dst210, v_dst211;\n+                v_load_deinterleave_f32(dst + (x * 3),        &v_dst000, &v_dst100, &v_dst200);\n+                v_load_deinterleave_f32(dst + ((x + 4) * 3),  &v_dst001, &v_dst101, &v_dst201);\n+                v_load_deinterleave_f32(dst + ((x + 8) * 3),  &v_dst010, &v_dst110, &v_dst210);\n+                v_load_deinterleave_f32(dst + ((x + 12) * 3), &v_dst011, &v_dst111, &v_dst211);\n+\n+                v_store_interleave_f32(dst + (x * 3),        vec_add(v_dst000, v_cvt_f32(v_src000)), vec_add(v_dst100, v_cvt_f32(v_src100)), vec_add(v_dst200, v_cvt_f32(v_src200)));\n+                v_store_interleave_f32(dst + ((x + 4) * 3),  vec_add(v_dst001, v_cvt_f32(v_src001)), vec_add(v_dst101, v_cvt_f32(v_src101)), vec_add(v_dst201, v_cvt_f32(v_src201)));\n+                v_store_interleave_f32(dst + ((x + 8) * 3),  vec_add(v_dst010, v_cvt_f32(v_src010)), vec_add(v_dst110, v_cvt_f32(v_src110)), vec_add(v_dst210, v_cvt_f32(v_src210)));\n+                v_store_interleave_f32(dst + ((x + 12) * 3), vec_add(v_dst011, v_cvt_f32(v_src011)), vec_add(v_dst111, v_cvt_f32(v_src111)), vec_add(v_dst211, v_cvt_f32(v_src211)));\n+            }\n+    return;\n+}\n+\n+void acc_(const unsigned char* src, float* dst, const unsigned char* mask, int len)\n+{\n+    int x = 0;\n+    src += (x * 3);\n+    dst += (x * 3);\n+    for( ; x < len; x++, src += 3, dst += 3 )\n+    {\n+        if( mask[x] ) /* if mask, R/G/B dst[] += src[] */\n+        {\n+            for( int k = 0; k < 3; k++ )\n+            {\n+                dst[k] += src[k];\n+            }\n+        }\n+    }\n+    return;\n+}\n+\n+#define N 16\n+\n+int main(int argc, char *argv[])\n+{\n+    unsigned char __attribute__ ((aligned (16) )) mask[] = {0, 0, 0, 0,  0, 0, 0, 0,  0, 1, 0, 0,  1, 0, 0, 1};\n+    unsigned char __attribute__ ((aligned (16) )) src[3*N];\n+    float __attribute__ ((aligned (16) )) dst[3*N];\n+    float __attribute__ ((aligned (16) )) exp[3*N];\n+\n+    int i;\n+\n+    /* initialize src and dst */\n+    for (i=0; i<3*N; i++) src[i] = (unsigned char)(i*3);\n+    for (i=0; i<3*N; i++) {dst[i] = i * 1.0f; exp[i] = dst[i];}\n+\n+    acc_(src, exp, mask, N);\n+    acc_simd_(src, dst, mask, N);\n+\n+    for (i=0; i<N; i++)\n+    {\n+        if ((dst[3*i] != exp[3*i]) || (dst[3*i+1] != exp[3*i+1]) || (dst[3*i+2] != exp[3*i+2]))\n+\t  __builtin_abort ();\n+    }\n+\n+    return 0;\n+}"}]}