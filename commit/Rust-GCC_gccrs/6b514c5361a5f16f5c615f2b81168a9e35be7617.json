{"sha": "6b514c5361a5f16f5c615f2b81168a9e35be7617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1MTRjNTM2MWE1ZjE2ZjVjNjE1ZjJiODExNjhhOWUzNWJlNzYxNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2013-01-17T01:20:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-01-17T01:20:28Z"}, "message": "dwarf.c (struct unit): Add filename and abs_filename fields.\n\n\t* dwarf.c (struct unit): Add filename and abs_filename fields.\n\t(build_address_map): Set new fields when reading unit.\n\t(dwarf_lookup_pc): If we don't find an entry in the line table,\n\tjust return the main file name.\n\nFrom-SVN: r195257", "tree": {"sha": "fa68e2b6eeffcff78bb569afe6213c7f225a0816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa68e2b6eeffcff78bb569afe6213c7f225a0816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b514c5361a5f16f5c615f2b81168a9e35be7617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b514c5361a5f16f5c615f2b81168a9e35be7617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b514c5361a5f16f5c615f2b81168a9e35be7617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b514c5361a5f16f5c615f2b81168a9e35be7617/comments", "author": null, "committer": null, "parents": [{"sha": "2a23fddef53a54a6b196f9599a9d1f5302823b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a23fddef53a54a6b196f9599a9d1f5302823b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a23fddef53a54a6b196f9599a9d1f5302823b9f"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "25a56d92e22995b9d383e657b1f7cb2e7c148667", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b514c5361a5f16f5c615f2b81168a9e35be7617/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b514c5361a5f16f5c615f2b81168a9e35be7617/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=6b514c5361a5f16f5c615f2b81168a9e35be7617", "patch": "@@ -1,3 +1,10 @@\n+2013-01-16  Ian Lance Taylor  <iant@google.com>\n+\n+\t* dwarf.c (struct unit): Add filename and abs_filename fields.\n+\t(build_address_map): Set new fields when reading unit.\n+\t(dwarf_lookup_pc): If we don't find an entry in the line table,\n+\tjust return the main file name.\n+\n 2013-01-14  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years."}, {"sha": "ce12bdc48a33a881babc00210db8305ebb8916c6", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b514c5361a5f16f5c615f2b81168a9e35be7617/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b514c5361a5f16f5c615f2b81168a9e35be7617/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=6b514c5361a5f16f5c615f2b81168a9e35be7617", "patch": "@@ -283,8 +283,12 @@ struct unit\n   int addrsize;\n   /* Offset into line number information.  */\n   off_t lineoff;\n+  /* Primary source file.  */\n+  const char *filename;\n   /* Compilation command working directory.  */\n   const char *comp_dir;\n+  /* Absolute file name, only set if needed.  */\n+  const char *abs_filename;\n   /* The abbreviations for this unit.  */\n   struct abbrevs abbrevs;\n \n@@ -1288,6 +1292,7 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       int have_ranges;\n       uint64_t lineoff;\n       int have_lineoff;\n+      const char *filename;\n       const char *comp_dir;\n \n       if (info.reported_underflow)\n@@ -1346,6 +1351,7 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n       have_ranges = 0;\n       lineoff = 0;\n       have_lineoff = 0;\n+      filename = NULL;\n       comp_dir = NULL;\n       for (i = 0; i < abbrev->num_attrs; ++i)\n \t{\n@@ -1394,6 +1400,10 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t\t  have_lineoff = 1;\n \t\t}\n \t      break;\n+\t    case DW_AT_name:\n+\t      if (val.encoding == ATTR_VAL_STRING)\n+\t\tfilename = val.u.string;\n+\t      break;\n \t    case DW_AT_comp_dir:\n \t      if (val.encoding == ATTR_VAL_STRING)\n \t\tcomp_dir = val.u.string;\n@@ -1421,7 +1431,9 @@ build_address_map (struct backtrace_state *state, uintptr_t base_address,\n \t  u->version = version;\n \t  u->is_dwarf64 = is_dwarf64;\n \t  u->addrsize = addrsize;\n+\t  u->filename = filename;\n \t  u->comp_dir = comp_dir;\n+\t  u->abs_filename = NULL;\n \t  u->lineoff = lineoff;\n \t  u->abbrevs = abbrevs;\n \t  memset (&abbrevs, 0, sizeof abbrevs);\n@@ -2701,8 +2713,45 @@ dwarf_lookup_pc (struct backtrace_state *state, struct dwarf_data *ddata,\n \t\t\t\tsizeof (struct line), line_search);\n   if (ln == NULL)\n     {\n-      error_callback (data, \"inconsistent DWARF line number info\", 0);\n-      return 0;\n+      /* The PC is between the low_pc and high_pc attributes of the\n+\t compilation unit, but no entry in the line table covers it.\n+\t This implies that the start of the compilation unit has no\n+\t line number information.  */\n+\n+      if (entry->u->abs_filename == NULL)\n+\t{\n+\t  const char *filename;\n+\n+\t  filename = entry->u->filename;\n+\t  if (filename != NULL\n+\t      && !IS_ABSOLUTE_PATH (filename)\n+\t      && entry->u->comp_dir != NULL)\n+\t    {\n+\t      size_t filename_len;\n+\t      const char *dir;\n+\t      size_t dir_len;\n+\t      char *s;\n+\n+\t      filename_len = strlen (filename);\n+\t      dir = entry->u->comp_dir;\n+\t      dir_len = strlen (dir);\n+\t      s = (char *) backtrace_alloc (state, dir_len + filename_len + 2,\n+\t\t\t\t\t    error_callback, data);\n+\t      if (s == NULL)\n+\t\t{\n+\t\t  *found = 0;\n+\t\t  return 0;\n+\t\t}\n+\t      memcpy (s, dir, dir_len);\n+\t      /* FIXME: Should use backslash if DOS file system.  */\n+\t      s[dir_len] = '/';\n+\t      memcpy (s + dir_len + 1, filename, filename_len + 1);\n+\t      filename = s;\n+\t    }\n+\t  entry->u->abs_filename = filename;\n+\t}\n+\n+      return callback (data, pc, entry->u->abs_filename, 0, NULL);\n     }\n \n   /* Search for function name within this unit.  */"}]}