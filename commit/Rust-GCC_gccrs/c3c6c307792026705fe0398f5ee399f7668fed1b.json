{"sha": "c3c6c307792026705fe0398f5ee399f7668fed1b", "node_id": "C_kwDOANBUbNoAKGMzYzZjMzA3NzkyMDI2NzA1ZmUwMzk4ZjVlZTM5OWY3NjY4ZmVkMWI", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2023-01-23T05:26:34Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2023-01-23T18:11:54Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Remove useless constructor checks\n\nCreating a safe iterator from a normal iterator is done within the library where we\nalready know that it is done correctly. The rare situation where a user would use safe\niterators for his own purpose is non-Standard code so outside _GLIBCXX_DEBUG scope. For\nthose reasons the __msg_init_singular is useless and can be removed.\n\nAdditionally in the copy constructor used for post-increment and post-decrement operators\nthe __msg_init_copy_singular check can also be ommitted because of the preliminary\n__msg_bad_incr and __msg_bad_decr checks.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::_Unchecked): New.\n\t(_Safe_iterator(const _Safe_iterator&, _Unchecked)): New.\n\t(_Safe_iterator::operator++(int)): Use latter.\n\t(_Safe_iterator::operator--(int)): Likewise.\n\t(_Safe_iterator(_Iterator, const _Safe_sequence_base*)): Remove !_M_insular()\n\tcheck.\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::_Unchecked):\n\tNew.\n\t(_Safe_local_iterator(const _Safe_local_iterator&, _Unchecked)): New.\n\t(_Safe_local_iterator::operator++(int)): Use latter.\n\t* src/c++11/debug.cc (_S_debug_messages): Add as comment the _Debug_msg_id\n\tentry associated to the array entry.", "tree": {"sha": "81e797b1dc81e7ef2f210242cc5f0b07e5fb65e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e797b1dc81e7ef2f210242cc5f0b07e5fb65e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3c6c307792026705fe0398f5ee399f7668fed1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c6c307792026705fe0398f5ee399f7668fed1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c6c307792026705fe0398f5ee399f7668fed1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c6c307792026705fe0398f5ee399f7668fed1b/comments", "author": null, "committer": null, "parents": [{"sha": "47b269caf87904fd0112e8c9e96884dd0313ed15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b269caf87904fd0112e8c9e96884dd0313ed15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b269caf87904fd0112e8c9e96884dd0313ed15"}], "stats": {"total": 103, "additions": 87, "deletions": 16}, "files": [{"sha": "693192b3ea9ab3c90b3b0a382f8837b8e939d94e", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=c3c6c307792026705fe0398f5ee399f7668fed1b", "patch": "@@ -129,6 +129,12 @@ namespace __gnu_debug\n \ttypename _Sequence::_Base::iterator,\n \ttypename _Sequence::_Base::const_iterator>::__type _OtherIterator;\n \n+      struct _Unchecked { };\n+\n+      _Safe_iterator(const _Safe_iterator& __x, _Unchecked) _GLIBCXX_NOEXCEPT\n+      : _Iter_base(__x.base()), _Safe_base()\n+      { _M_attach(__x._M_sequence); }\n+\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -154,11 +160,7 @@ namespace __gnu_debug\n       _Safe_iterator(_Iterator __i, const _Safe_sequence_base* __seq)\n       _GLIBCXX_NOEXCEPT\n       : _Iter_base(__i), _Safe_base(__seq, _S_constant())\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n-\t\t\t      _M_message(__msg_init_singular)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-      }\n+      { }\n \n       /**\n        * @brief Copy construction.\n@@ -339,7 +341,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __ret = *this;\n+\t_Safe_iterator __ret(*this, _Unchecked());\n \t++*this;\n \treturn __ret;\n       }\n@@ -514,6 +516,13 @@ namespace __gnu_debug\n     protected:\n       typedef typename _Safe_base::_OtherIterator _OtherIterator;\n \n+      typedef typename _Safe_base::_Unchecked _Unchecked;\n+\n+      _Safe_iterator(const _Safe_iterator& __x,\n+\t\t     _Unchecked __unchecked) _GLIBCXX_NOEXCEPT\n+\t: _Safe_base(__x, __unchecked)\n+      { }\n+\n     public:\n       /// @post the iterator is singular and unattached\n       _Safe_iterator() _GLIBCXX_NOEXCEPT { }\n@@ -596,7 +605,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __ret = *this;\n+\t_Safe_iterator __ret(*this, _Unchecked());\n \t++*this;\n \treturn __ret;\n       }\n@@ -627,7 +636,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __ret = *this;\n+\t_Safe_iterator __ret(*this, _Unchecked());\n \t--*this;\n \treturn __ret;\n       }\n@@ -653,6 +662,12 @@ namespace __gnu_debug\n       typedef _Safe_iterator<_OtherIterator, _Sequence,\n \t\t\t     std::random_access_iterator_tag> _OtherSelf;\n \n+      typedef typename _Safe_base::_Unchecked _Unchecked;\n+      _Safe_iterator(const _Safe_iterator& __x,\n+\t\t     _Unchecked __unchecked) _GLIBCXX_NOEXCEPT\n+\t: _Safe_base(__x, __unchecked)\n+      { }\n+\n     public:\n       typedef typename _Safe_base::difference_type\tdifference_type;\n       typedef typename _Safe_base::reference\t\treference;\n@@ -744,7 +759,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __ret = *this;\n+\t_Safe_iterator __ret(*this, _Unchecked());\n \t++*this;\n \treturn __ret;\n       }\n@@ -771,7 +786,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_iterator __ret = *this;\n+\t_Safe_iterator __ret(*this, _Unchecked());\n \t--*this;\n \treturn __ret;\n       }"}, {"sha": "d655730c8975237deaf0e5b73f7a5385c2d49429", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=c3c6c307792026705fe0398f5ee399f7668fed1b", "patch": "@@ -84,6 +84,13 @@ namespace __gnu_debug\n       typedef _Safe_local_iterator _Self;\n       typedef _Safe_local_iterator<_OtherIterator, _Sequence> _OtherSelf;\n \n+      struct _Unchecked { };\n+\n+      _Safe_local_iterator(const _Safe_local_iterator& __x,\n+\t\t\t   _Unchecked) noexcept\n+      : _Iter_base(__x.base())\n+      { _M_attach(__x._M_sequence); }\n+\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename _Traits::iterator_category\titerator_category;\n@@ -104,11 +111,7 @@ namespace __gnu_debug\n        */\n       _Safe_local_iterator(_Iterator __i, const _Safe_sequence_base* __cont)\n       : _Iter_base(__i), _Safe_base(__cont, _S_constant())\n-      {\n-\t_GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n-\t\t\t      _M_message(__msg_init_singular)\n-\t\t\t      ._M_iterator(*this, \"this\"));\n-      }\n+      { }\n \n       /**\n        * @brief Copy construction.\n@@ -282,7 +285,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t_Safe_local_iterator __ret = *this;\n+\t_Safe_local_iterator __ret(*this, _Unchecked{});\n \t++*this;\n \treturn __ret;\n       }"}, {"sha": "926e8be6122a3d5f3ce7b669bc4474a2c2f626fe", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c6c307792026705fe0398f5ee399f7668fed1b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=c3c6c307792026705fe0398f5ee399f7668fed1b", "patch": "@@ -181,86 +181,139 @@ namespace __gnu_debug\n   const char* const _S_debug_messages[] =\n   {\n     // General Checks\n+    // __msg_valid_range\n     \"function requires a valid iterator range [%1.name;, %2.name;)\",\n+    // __msg_insert_singular\n     \"attempt to insert into container with a singular iterator\",\n+    // __msg_insert_different\n     \"attempt to insert into container with an iterator\"\n     \" from a different container\",\n+    // __msg_erase_bad\n     \"attempt to erase from container with a %2.state; iterator\",\n+    // __msg_erase_different\n     \"attempt to erase from container with an iterator\"\n     \" from a different container\",\n+    // __msg_subscript_oob\n     \"attempt to subscript container with out-of-bounds index %2;,\"\n     \" but container only holds %3; elements\",\n+    // __msg_empty\n     \"attempt to access an element in an empty container\",\n+    // __msg_unpartitioned\n     \"elements in iterator range [%1.name;, %2.name;)\"\n     \" are not partitioned by the value %3;\",\n+    // __msg_unpartitioned_pred\n     \"elements in iterator range [%1.name;, %2.name;)\"\n     \" are not partitioned by the predicate %3; and value %4;\",\n+    // __msg_unsorted\n     \"elements in iterator range [%1.name;, %2.name;) are not sorted\",\n+    // __msg_unsorted_pred\n     \"elements in iterator range [%1.name;, %2.name;)\"\n     \" are not sorted according to the predicate %3;\",\n+    // __msg_not_heap\n     \"elements in iterator range [%1.name;, %2.name;) do not form a heap\",\n+    // __msg_not_heap_pred\n     \"elements in iterator range [%1.name;, %2.name;)\"\n     \" do not form a heap with respect to the predicate %3;\",\n     // std::bitset checks\n+    // __msg_bad_bitset_write\n     \"attempt to write through a singular bitset reference\",\n+    // __msg_bad_bitset_read\n     \"attempt to read from a singular bitset reference\",\n+    // __msg_bad_bitset_flip\n     \"attempt to flip a singular bitset reference\",\n     // std::list checks\n+    // __msg_self_splice\n     \"attempt to splice a list into itself\",\n+    // __msg_splice_alloc\n     \"attempt to splice lists with unequal allocators\",\n+    // __msg_splice_bad\n     \"attempt to splice elements referenced by a %1.state; iterator\",\n+    // __msg_splice_other\n     \"attempt to splice an iterator from a different container\",\n+    // __msg_splice_overlap\n     \"splice destination %1.name;\"\n     \" occurs within source range [%2.name;, %3.name;)\",\n     // iterator checks\n+    // __msg_init_singular\n     \"attempt to initialize an iterator that will immediately become singular\",\n+    // __msg_init_copy_singular\n     \"attempt to copy-construct an iterator from a singular iterator\",\n+    // __msg_init_const_singular\n     \"attempt to construct a constant iterator\"\n     \" from a singular mutable iterator\",\n+    // __msg_copy_singular\n     \"attempt to copy from a singular iterator\",\n+    // __msg_bad_deref\n     \"attempt to dereference a %1.state; iterator\",\n+    // __msg_bad_inc\n     \"attempt to increment a %1.state; iterator\",\n+    // __msg_bad_dec\n     \"attempt to decrement a %1.state; iterator\",\n+    // __msg_iter_subscript_oob\n     \"attempt to subscript a %1.state; iterator %2; step from\"\n     \" its current position, which falls outside its dereferenceable range\",\n+    // __msg_advance_oob\n     \"attempt to advance a %1.state; iterator %2; steps,\"\n     \" which falls outside its valid range\",\n+    // __msg_retreat_oob\n     \"attempt to retreat a %1.state; iterator %2; steps,\"\n     \" which falls outside its valid range\",\n+    // __msg_iter_compare_bad\n     \"attempt to compare a %1.state; iterator to a %2.state; iterator\",\n+    // __msg_compare_different\n     \"attempt to compare iterators from different sequences\",\n+    // __msg_iter_order_bad\n     \"attempt to order a %1.state; iterator to a %2.state; iterator\",\n+    // __msg_order_different\n     \"attempt to order iterators from different sequences\",\n+    // __msg_distance_bad\n     \"attempt to compute the difference between a %1.state;\"\n     \" iterator to a %2.state; iterator\",\n+    // __msg_distance_different\n     \"attempt to compute the different between two iterators\"\n     \" from different sequences\",\n     // istream_iterator\n+    // __msg_deref_istream\n     \"attempt to dereference an end-of-stream istream_iterator\",\n+    // __msg_inc_istream\n     \"attempt to increment an end-of-stream istream_iterator\",\n     // ostream_iterator\n+    // __msg_output_ostream\n     \"attempt to output via an ostream_iterator with no associated stream\",\n     // istreambuf_iterator\n+    // __msg_deref_istreambuf\n     \"attempt to dereference an end-of-stream istreambuf_iterator\"\n     \" (this is a GNU extension)\",\n+    // __msg_inc_istreambuf\n     \"attempt to increment an end-of-stream istreambuf_iterator\",\n     // std::forward_list\n+    // __msg_insert_after_end\n     \"attempt to insert into container after an end iterator\",\n+    // __msg_erase_after_bad\n     \"attempt to erase from container after a %2.state; iterator not followed\"\n     \" by a dereferenceable one\",\n+    // __msg_valid_range2\n     \"function requires a valid iterator range (%2.name;, %3.name;)\"\n     \", \\\"%2.name;\\\" shall be before and not equal to \\\"%3.name;\\\"\",\n     // std::unordered_container::local_iterator\n+    // __msg_local_iter_compare_bad\n     \"attempt to compare local iterators from different unordered container\"\n     \" buckets\",\n+    // __msg_non_empty_range\n     \"function requires a non-empty iterator range [%1.name;, %2.name;)\",\n+    // __msg_self_move_assign\n     \"attempt to self move assign\",\n+    // __msg_bucket_index_oob\n     \"attempt to access container with out-of-bounds bucket index %2;,\"\n     \" container only holds %3; buckets\",\n+    // __msg_valid_load_factor\n     \"load factor shall be positive\",\n+    // __msg_equal_allocs\n     \"allocators must be equal\",\n+    // __msg_insert_range_from_self\n     \"attempt to insert with an iterator range [%1.name;, %2.name;) from this\"\n     \" container\",\n+    // __msg_irreflexive_ordering\n     \"comparison doesn't meet irreflexive requirements, assert(!(a < a))\"\n   };\n "}]}