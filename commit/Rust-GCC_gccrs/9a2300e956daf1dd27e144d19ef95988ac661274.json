{"sha": "9a2300e956daf1dd27e144d19ef95988ac661274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyMzAwZTk1NmRhZjFkZDI3ZTE0NGQxOWVmOTU5ODhhYzY2MTI3NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-24T09:39:23Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-24T09:39:23Z"}, "message": "re PR c/77490 (bit-not (~) on boolean should be warned about)\n\n\tPR c/77490\n\t* c.opt (Wbool-operation): New.\n\n\t* c-typeck.c (build_unary_op): Warn about bit not on expressions that\n\thave boolean value.  Warn about ++/-- on booleans.\n\n\t* typeck.c (cp_build_unary_op): Warn about bit not on expressions that\n\thave boolean value.\n\n\t* doc/invoke.texi: Document -Wbool-operation.\n\n\t* c-c++-common/Wbool-operation-1.c: New test.\n\t* gcc.dg/Wbool-operation-1.c: New test.\n\nFrom-SVN: r240462", "tree": {"sha": "2202f7c8afd097fcf4c53d3a4cbe532ead2f1c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2202f7c8afd097fcf4c53d3a4cbe532ead2f1c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a2300e956daf1dd27e144d19ef95988ac661274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2300e956daf1dd27e144d19ef95988ac661274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2300e956daf1dd27e144d19ef95988ac661274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2300e956daf1dd27e144d19ef95988ac661274/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02ae505bc9f8040cddaf48faaaea3bc224260853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ae505bc9f8040cddaf48faaaea3bc224260853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ae505bc9f8040cddaf48faaaea3bc224260853"}], "stats": {"total": 138, "additions": 134, "deletions": 4}, "files": [{"sha": "0059dd4bf63251f1513851a945e06ba87e273508", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -1,3 +1,8 @@\n+2016-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77490\n+\t* doc/invoke.texi: Document -Wbool-operation.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* hooks.c (hook_bool_bool_false, hook_bool_bool_gcc_optionsp_false,"}, {"sha": "8bcbd061407b0a4c82eb69696f44d225bfd6ea37", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -1,3 +1,8 @@\n+2016-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77490\n+\t* c.opt (Wbool-operation): New.\n+\n 2016-09-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* c-common.c (c_common_truthvalue_conversion): Inhibit"}, {"sha": "4a9b9e88a250358a9133f500370923ff8fbd4866", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -315,6 +315,10 @@ Wbool-compare\n C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about boolean expression compared with an integer value different from true/false.\n \n+Wbool-operation\n+C ObjC C++ ObjC++ Var(warn_bool_op) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about certain operations on boolean expressions.\n+\n Wframe-address\n C ObjC C++ ObjC++ Var(warn_frame_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn when __builtin_frame_address or __builtin_return_address is used unsafely."}, {"sha": "cae5c922067d99a4a4a3010799bfe1811455178a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -1,3 +1,9 @@\n+2016-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77490\n+\t* c-typeck.c (build_unary_op): Warn about bit not on expressions that\n+\thave boolean value.  Warn about ++/-- on booleans.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (incomplete_record_decls): Remove unnecessary"}, {"sha": "e5c725603978dd8d5b75a0f3e4b7f697a3d49c85", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -4196,6 +4196,22 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \t  || (typecode == VECTOR_TYPE\n \t      && !VECTOR_FLOAT_TYPE_P (TREE_TYPE (arg))))\n \t{\n+\t  tree e = arg;\n+\n+\t  /* Warn if the expression has boolean value.  */\n+\t  while (TREE_CODE (e) == COMPOUND_EXPR)\n+\t    e = TREE_OPERAND (e, 1);\n+\n+\t  if ((TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE\n+\t       || truth_value_p (TREE_CODE (e)))\n+\t      && warning_at (location, OPT_Wbool_operation,\n+\t\t\t     \"%<~%> on a boolean expression\"))\n+\t    {\n+\t      gcc_rich_location richloc (location);\n+\t      richloc.add_fixit_insert_before (location, \"!\");\n+\t      inform_at_rich_loc (&richloc, \"did you mean to use logical \"\n+\t\t\t\t  \"not?\");\n+\t    }\n \t  if (!noconvert)\n \t    arg = default_conversion (arg);\n \t}\n@@ -4306,6 +4322,16 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \t\t\t\"decrement of enumeration value is invalid in C++\");\n \t}\n \n+      if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n+\t{\n+\t  if (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n+\t    warning_at (location, OPT_Wbool_operation,\n+\t\t\t\"increment of a boolean expression\");\n+\t  else\n+\t    warning_at (location, OPT_Wbool_operation,\n+\t\t\t\"decrement of a boolean expression\");\n+\t}\n+\n       /* Ensure the argument is fully folded inside any SAVE_EXPR.  */\n       arg = c_fully_fold (arg, false, NULL);\n "}, {"sha": "cd5f936e3628f4708cd72408989cba10f818312a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -1,3 +1,9 @@\n+2016-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77490\n+\t* typeck.c (cp_build_unary_op): Warn about bit not on expressions that\n+\thave boolean value.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tImplement P0138R2, C++17 construction rules for enum class values"}, {"sha": "0142d4a55cfee12db144e888f03d3c04d138b74a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -5792,6 +5792,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n {\n   /* No default_conversion here.  It causes trouble for ADDR_EXPR.  */\n   tree arg = xarg;\n+  location_t location = EXPR_LOC_OR_LOC (arg, input_location);\n   tree argtype = 0;\n   const char *errstring = NULL;\n   tree val;\n@@ -5853,7 +5854,14 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t\t\t\t\t   arg, true)))\n \terrstring = _(\"wrong type argument to bit-complement\");\n       else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n-\targ = cp_perform_integral_promotions (arg, complain);\n+\t{\n+\t  /* Warn if the expression has boolean value.  */\n+\t  if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE\n+\t      && warning_at (location, OPT_Wbool_operation,\n+\t\t\t     \"%<~%> on an expression of type bool\"))\n+\t    inform (location, \"did you mean to use logical not (%<!%>)?\");\n+\t  arg = cp_perform_integral_promotions (arg, complain);\n+\t}\n       break;\n \n     case ABS_EXPR:"}, {"sha": "a5481b5d8f97bf7773123b4ad1ad9338adb97541", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -256,8 +256,8 @@ Objective-C and Objective-C++ Dialects}.\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n -Wno-aggressive-loop-optimizations -Warray-bounds -Warray-bounds=@var{n} @gol\n--Wno-attributes -Wbool-compare -Wno-builtin-macro-redefined @gol\n--Wc90-c99-compat -Wc99-c11-compat @gol\n+-Wno-attributes -Wbool-compare -Wbool-operation @gol\n+-Wno-builtin-macro-redefined -Wc90-c99-compat -Wc99-c11-compat @gol\n -Wc++-compat -Wc++11-compat -Wc++14-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  @gol\n -Wconversion -Wcoverage-mismatch -Wno-cpp -Wdangling-else -Wdate-time @gol\n@@ -3656,6 +3656,7 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n @gccoptlist{-Waddress   @gol\n -Warray-bounds=1 @r{(only with} @option{-O2}@r{)}  @gol\n -Wbool-compare  @gol\n+-Wbool-operation  @gol\n -Wc++11-compat  -Wc++14-compat@gol\n -Wchar-subscripts  @gol\n -Wcomment  @gol\n@@ -4846,6 +4847,17 @@ if ((n > 1) == 2) @{ @dots{} @}\n @end smallexample\n This warning is enabled by @option{-Wall}.\n \n+@item -Wbool-operation\n+@opindex Wno-bool-operation\n+@opindex Wbool-operation\n+Warn about suspicious operations on expressions of a boolean type.  For\n+instance, bitwise negation of a boolean is very likely a bug in the program.\n+For C, this warning also warns about incrementing or decrementing a boolean,\n+which rarely makes sense.  (In C++, decrementing a boolean is always invalid.\n+Incrementing a boolean is invalid in C++1z, and deprecated otherwise.)\n+\n+This warning is enabled by @option{-Wall}.\n+\n @item -Wduplicated-cond\n @opindex Wno-duplicated-cond\n @opindex Wduplicated-cond"}, {"sha": "77ef74b6635e18b480691c718fc0b9df1bd28852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -1,3 +1,9 @@\n+2016-09-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/77490\n+\t* c-c++-common/Wbool-operation-1.c: New test.\n+\t* gcc.dg/Wbool-operation-1.c: New test.\n+\n 2016-09-23  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_static_1.f90: New.\n@@ -10,7 +16,7 @@\n \tPR fortran/48298\n \t* gfortran.dg/negative_unit_check.f90: Update test.\n \t* gfortran.dg/dtio_14.f90: New test.\n-  \n+\n 2016-09-23  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/hotpatch-compile-1.c: Fixed dg-error test."}, {"sha": "bb72784a16c4ed7af6fd0e8c9cba5a95408a9f21", "filename": "gcc/testsuite/c-c++-common/Wbool-operation-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWbool-operation-1.c?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/77490 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+typedef volatile bool T;\n+typedef int __attribute__ ((vector_size (4 * sizeof (int)))) v4si;\n+extern bool foo (void);\n+\n+int\n+fn (bool b, bool b2, T b3, int n, v4si v)\n+{\n+  int r = 0;\n+\n+  r += ~b; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += n + ~b; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(n == 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(n || 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~b == 1; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(++n, n == 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(++n, n > 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(++n, n && 1); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += (++n, ~b); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~b3; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~foo (); /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+  r += ~(bool) !1; /* { dg-warning \"on an expression of type bool|on a boolean expression\" } */\n+\n+  v = ~v;\n+  r += ~(int) b;\n+  r += -b;\n+\n+  return r;\n+}"}, {"sha": "b24e763983ae6930cc3a6d1192caa1c014b3d2c1", "filename": "gcc/testsuite/gcc.dg/Wbool-operation-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2Fgcc.dg%2FWbool-operation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a2300e956daf1dd27e144d19ef95988ac661274/gcc%2Ftestsuite%2Fgcc.dg%2FWbool-operation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbool-operation-1.c?ref=9a2300e956daf1dd27e144d19ef95988ac661274", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/77490 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+int\n+fn (_Bool b)\n+{\n+  int r = 0;\n+\n+  r += b++; /* { dg-warning \"increment of a boolean expression\" } */\n+  r += ++b; /* { dg-warning \"increment of a boolean expression\" } */\n+  r += b--; /* { dg-warning \"decrement of a boolean expression\" } */\n+  r += --b; /* { dg-warning \"decrement of a boolean expression\" } */\n+\n+  return r;\n+}"}]}