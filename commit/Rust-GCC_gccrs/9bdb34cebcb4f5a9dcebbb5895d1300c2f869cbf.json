{"sha": "9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkYjM0Y2ViY2I0ZjVhOWRjZWJiYjU4OTVkMTMwMGMyZjg2OWNiZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-11-20T23:24:13Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-11-20T23:24:13Z"}, "message": "Power10: Add missing IEEE 128-bit XSCMP* built-in mappings.\n\nThis patch adds support for mapping the scalar_cmp_exp_qp_* built-in functions\nto handle arguments that are either TFmode or KFmode, depending on whether long\ndouble uses the IEEE 128-bit representation (TFmode) or the IBM 128-bit\nrepresentation (KFmode).  This shows up in the float128-cmp2-runnable.c test\nwhen long double uses the IEEE 128-bit representation.\n\ngcc/\n2020-11-20  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000-call.c (rs6000_expand_builtin): Add missing\n\tXSCMP* cases for IEEE 128-bit long double.", "tree": {"sha": "4a31e6f4992e39921c7ae589015cc18a1d46d3e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a31e6f4992e39921c7ae589015cc18a1d46d3e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf/comments", "author": null, "committer": null, "parents": [{"sha": "83a1beee2766f01a1f46f81ed53f679419318942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a1beee2766f01a1f46f81ed53f679419318942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a1beee2766f01a1f46f81ed53f679419318942"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "d619e231b09370950785198ad951a9a4c1a75d14", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=9bdb34cebcb4f5a9dcebbb5895d1300c2f869cbf", "patch": "@@ -12808,6 +12808,22 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       case CODE_FOR_xsiexpqp_kf:\ticode = CODE_FOR_xsiexpqp_tf;\tbreak;\n       case CODE_FOR_xsiexpqpf_kf:\ticode = CODE_FOR_xsiexpqpf_tf;\tbreak;\n       case CODE_FOR_xststdcqp_kf:\ticode = CODE_FOR_xststdcqp_tf;\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_eq_kf:\n+\ticode = CODE_FOR_xscmpexpqp_eq_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_lt_kf:\n+\ticode = CODE_FOR_xscmpexpqp_lt_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_gt_kf:\n+\ticode = CODE_FOR_xscmpexpqp_gt_tf;\n+\tbreak;\n+\n+      case CODE_FOR_xscmpexpqp_unordered_kf:\n+\ticode = CODE_FOR_xscmpexpqp_unordered_tf;\n+\tbreak;\n       }\n \n   if (TARGET_DEBUG_BUILTIN)"}]}