{"sha": "db33b1059bcee3eeb36d174d59abf19f2bef5d66", "node_id": "C_kwDOANBUbNoAKGRiMzNiMTA1OWJjZWUzZWViMzZkMTc0ZDU5YWJmMTlmMmJlZjVkNjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-06T14:32:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-06T14:32:57Z"}, "message": "expr: Workaround profiledbootstrap uninit false positive [PR103899]\n\nThe threader changes resulted in a false positive warning during\nprofiledbootstrap:\nIn file included from ../../gcc/expr.c:26:\n../../gcc/tree.h: In function \u2018rtx_def* expand_expr_real_1(tree, rtx, machine_mode, expand_modifier, rtx_def**, bool)\u2019:\n../../gcc/tree.h:244:56: error: \u2018context\u2019 may be used uninitialized in this function [-Werror=maybe-uninitialized]\n  244 | #define TREE_CODE(NODE) ((enum tree_code) (NODE)->base.code)\n      |                                                        ^~~~\n../../gcc/expr.c:10343:8: note: \u2018context\u2019 was declared here\n10343 |   tree context;\n      |        ^~~~~~~\nWhile it will be nice to improve the uninit pass to handle it if possible\n(I do not want to close the PR until that is done), doing profiledbootstrap\nis a common thing to do, so a workaround is handy, especially as in this\ncase when the workaround seems to be the right thing to do, as it moves\na variable declaration to the only place where it is set and used and avoids\nthe weird and for uninit asking\n  tree context;\n...\n  if (exp)\n    context = ...;\n  gcc_assert (!exp\n              || use (context)\n              || use_some_more (context));\n\n2022-01-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103899\n\t* expr.c (expand_expr_real_1): Add a workaround for bogus uninit\n\twarning by moving context variable to the only spot where it is used\n\tand moving gcc_assert into if body.", "tree": {"sha": "0258e9f141619e55890306227d359f6b1ca1869c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0258e9f141619e55890306227d359f6b1ca1869c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db33b1059bcee3eeb36d174d59abf19f2bef5d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33b1059bcee3eeb36d174d59abf19f2bef5d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33b1059bcee3eeb36d174d59abf19f2bef5d66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33b1059bcee3eeb36d174d59abf19f2bef5d66/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75b8a726171bcb2e06d70e6179e9926a7ffd73cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75b8a726171bcb2e06d70e6179e9926a7ffd73cc"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "9fb018766a6d8fa454c5176727259ab41903cd89", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db33b1059bcee3eeb36d174d59abf19f2bef5d66/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db33b1059bcee3eeb36d174d59abf19f2bef5d66/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=db33b1059bcee3eeb36d174d59abf19f2bef5d66", "patch": "@@ -10340,7 +10340,6 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n   enum tree_code code = TREE_CODE (exp);\n   rtx subtarget, original_target;\n   int ignore;\n-  tree context;\n   bool reduce_bit_field;\n   location_t loc = EXPR_LOCATION (exp);\n   struct separate_ops ops;\n@@ -10579,14 +10578,16 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n       /* Variables inherited from containing functions should have\n \t been lowered by this point.  */\n       if (exp)\n-\tcontext = decl_function_context (exp);\n-      gcc_assert (!exp\n-\t\t  || SCOPE_FILE_SCOPE_P (context)\n-\t\t  || context == current_function_decl\n-\t\t  || TREE_STATIC (exp)\n-\t\t  || DECL_EXTERNAL (exp)\n-\t\t  /* ??? C++ creates functions that are not TREE_STATIC.  */\n-\t\t  || TREE_CODE (exp) == FUNCTION_DECL);\n+\t{\n+\t  tree context = decl_function_context (exp);\n+\t  gcc_assert (SCOPE_FILE_SCOPE_P (context)\n+\t\t      || context == current_function_decl\n+\t\t      || TREE_STATIC (exp)\n+\t\t      || DECL_EXTERNAL (exp)\n+\t\t      /* ??? C++ creates functions that are not\n+\t\t\t TREE_STATIC.  */\n+\t\t      || TREE_CODE (exp) == FUNCTION_DECL);\n+\t}\n \n       /* This is the case of an array whose size is to be determined\n \t from its initializer, while the initializer is still being parsed."}]}