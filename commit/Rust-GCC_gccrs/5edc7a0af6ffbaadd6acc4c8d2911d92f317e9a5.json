{"sha": "5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkYzdhMGFmNmZmYmFhZGQ2YWNjNGM4ZDI5MTFkOTJmMzE3ZTlhNQ==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2021-05-06T13:55:47Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2021-05-06T14:15:38Z"}, "message": "testsuite: Add s390 to vect_*_cvt checks.\n\nThis patch adds s390 to vect_*_cvt checks in target-supports.exp.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp: Add s390 checks for vect conversions.", "tree": {"sha": "69f06de5dcb5f3ab5339570b55f3d5d8cd3055c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69f06de5dcb5f3ab5339570b55f3d5d8cd3055c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e27ffde96b3967a3abfb4218a20e8ce75b04003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e27ffde96b3967a3abfb4218a20e8ce75b04003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e27ffde96b3967a3abfb4218a20e8ce75b04003"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "5700c231065012d5f938c9a5c2dadd0050eea243", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5edc7a0af6ffbaadd6acc4c8d2911d92f317e9a5", "patch": "@@ -3504,7 +3504,9 @@ proc check_effective_target_vect_intfloat_cvt { } {\n \t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa])\n-\t     || [istarget amdgcn-*-*] }}]\n+\t     || [istarget amdgcn-*-*]\n+\t     || ([istarget s390*-*-*]\n+\t\t && [check_effective_target_s390_vxe2]) }}]\n }\n \n # Return 1 if the target supports signed double->int conversion\n@@ -3521,7 +3523,9 @@ proc check_effective_target_vect_doubleint_cvt { } {\n \t    || [istarget aarch64*-*-*]\n \t    || ([istarget powerpc*-*-*] && [check_vsx_hw_available])\n \t    || ([istarget mips*-*-*]\n-\t\t && [et-is-effective-target mips_msa]) }}]\n+\t\t && [et-is-effective-target mips_msa])\n+\t     || ([istarget s390*-*-*]\n+\t\t && [check_effective_target_s390_vx]) }}]\n }\n \n # Return 1 if the target supports signed int->double conversion\n@@ -3538,7 +3542,9 @@ proc check_effective_target_vect_intdouble_cvt { } {\n \t     || [istarget aarch64*-*-*]\n \t     || ([istarget powerpc*-*-*] && [check_vsx_hw_available])\n \t     || ([istarget mips*-*-*]\n-\t\t && [et-is-effective-target mips_msa]) }}]\n+\t\t && [et-is-effective-target mips_msa])\n+\t     || ([istarget s390*-*-*]\n+\t\t && [check_effective_target_s390_vx]) }}]\n }\n \n #Return 1 if we're supporting __int128 for target, 0 otherwise.\n@@ -3567,7 +3573,9 @@ proc check_effective_target_vect_uintfloat_cvt { } {\n \t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa])\n-\t     || [istarget amdgcn-*-*] }}]\n+\t     || [istarget amdgcn-*-*]\n+\t     || ([istarget s390*-*-*]\n+\t\t && [check_effective_target_s390_vxe2]) }}]\n }\n \n \n@@ -3582,7 +3590,9 @@ proc check_effective_target_vect_floatint_cvt { } {\n \t     || [is-effective-target arm_neon]\n \t     || ([istarget mips*-*-*]\n \t\t && [et-is-effective-target mips_msa])\n-\t     || [istarget amdgcn-*-*] }}]\n+\t     || [istarget amdgcn-*-*]\n+\t     || ([istarget s390*-*-*]\n+\t\t && [check_effective_target_s390_vxe2]) }}]\n }\n \n # Return 1 if the target supports unsigned float->int conversion\n@@ -3595,7 +3605,9 @@ proc check_effective_target_vect_floatuint_cvt { } {\n \t    || [is-effective-target arm_neon]\n \t    || ([istarget mips*-*-*]\n \t\t&& [et-is-effective-target mips_msa])\n-\t    || [istarget amdgcn-*-*] }}]\n+\t    || [istarget amdgcn-*-*]\n+\t    || ([istarget s390*-*-*]\n+\t\t&& [check_effective_target_s390_vxe2]) }}]\n }\n \n # Return 1 if peeling for alignment might be profitable on the target\n@@ -9794,7 +9806,10 @@ proc check_vect_support_and_set_flags { } {\n \tlappend DEFAULT_VECTCFLAGS \"--param\" \"max-unroll-times=8\"\n \tlappend DEFAULT_VECTCFLAGS \"--param\" \"max-completely-peeled-insns=200\"\n \tlappend DEFAULT_VECTCFLAGS \"--param\" \"max-completely-peel-times=16\"\n-        if [check_effective_target_s390_vxe] {\n+        if [check_effective_target_s390_vxe2] {\n+\t    lappend DEFAULT_VECTCFLAGS \"-march=z15\" \"-mzarch\"\n+            set dg-do-what-default run\n+\t} elseif [check_effective_target_s390_vxe] {\n \t    lappend DEFAULT_VECTCFLAGS \"-march=z14\" \"-mzarch\"\n             set dg-do-what-default run\n \t} elseif [check_effective_target_s390_vx] {"}]}