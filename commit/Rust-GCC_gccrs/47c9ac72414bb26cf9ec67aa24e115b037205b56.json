{"sha": "47c9ac72414bb26cf9ec67aa24e115b037205b56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdjOWFjNzI0MTRiYjI2Y2Y5ZWM2N2FhMjRlMTE1YjAzNzIwNWI1Ng==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2012-11-20T12:22:44Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2012-11-20T12:22:44Z"}, "message": "rx.c (rx_function_arg_boundary): When using the RX ABI align stack arguments to their natural alignment.\n\n\t* config/rx/rx.c (rx_function_arg_boundary): When using the RX ABI\n\talign stack arguments to their natural alignment.\n\t(rx_narrow_volatile_bitfield): New function.  Allows narrow\n\tvolatile bitfields.\n\t(rx_ok_to_inline): New function.  Do not inline functions with\n\tlocal variables into a naked caller.\n\t(TARGET_NARROW_VOLATILE_BITFIELD): Define.\n\t(TARGET_CAN_INLINE_P): Define.\n\t* config/rx/rx.c (TARGET_CPU_CPP_BUILTINS): Define __RX_ABI__ or\n\t__RX_GC_ABI__.\n\t(ASM_SPEC): Pass -mgcc-abi on to the assembler.\n\t(STRICT_ALIGNMENT): Set to false.\n\t(CTORS_SECTION_ASM_OP): Add executable attribute.\n\t(DTORS_SECTION_ASM_OP): Add executable attribute.\n\t(INIT_ARRAY_SECTION_ASM_OP): Add executable attribute.\n\t(FINI_ARRAY_SECTION_ASM_OP): Add executable attribute.\n\t* config/rx/rx.md (subdi3): Don't allow MEMs as the third operand,\n\tas it causes too much reload pressure.\n\t* config/rx/rx.opt (mgcc-abi): New option.\n\t(mrx-abi): New option.\n\t* config/rx/t-rx (MULTILIB_OPTIONS): Show how to add an ABI\n\tmultilib.\n\t(MULTILIB_DIRNAMES): Likewise.\n\nFrom-SVN: r193659", "tree": {"sha": "4c4716324b5e1f34af2fbb3429638c733aacaca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4716324b5e1f34af2fbb3429638c733aacaca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47c9ac72414bb26cf9ec67aa24e115b037205b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c9ac72414bb26cf9ec67aa24e115b037205b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c9ac72414bb26cf9ec67aa24e115b037205b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c9ac72414bb26cf9ec67aa24e115b037205b56/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "342be7f7369f86316d8dab8d5ac5c4d5480050e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342be7f7369f86316d8dab8d5ac5c4d5480050e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342be7f7369f86316d8dab8d5ac5c4d5480050e2"}], "stats": {"total": 121, "additions": 106, "deletions": 15}, "files": [{"sha": "367792f1dd513212cd7ea228f0d6596ae25ac86d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -1,3 +1,29 @@\n+2012-11-20  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.c (rx_function_arg_boundary): When using the RX ABI\n+\talign stack arguments to their natural alignment.\n+\t(rx_narrow_volatile_bitfield): New function.  Allows narrow\n+\tvolatile bitfields.\n+\t(rx_ok_to_inline): New function.  Do not inline functions with\n+\tlocal variables into a naked caller.\n+\t(TARGET_NARROW_VOLATILE_BITFIELD): Define.\n+\t(TARGET_CAN_INLINE_P): Define.\n+\t* config/rx/rx.c (TARGET_CPU_CPP_BUILTINS): Define __RX_ABI__ or\n+\t__RX_GC_ABI__.\n+\t(ASM_SPEC): Pass -mgcc-abi on to the assembler.\n+\t(STRICT_ALIGNMENT): Set to false.\n+\t(CTORS_SECTION_ASM_OP): Add executable attribute.\n+\t(DTORS_SECTION_ASM_OP): Add executable attribute.\n+\t(INIT_ARRAY_SECTION_ASM_OP): Add executable attribute.\n+\t(FINI_ARRAY_SECTION_ASM_OP): Add executable attribute.\n+\t* config/rx/rx.md (subdi3): Don't allow MEMs as the third operand,\n+\tas it causes too much reload pressure.\n+\t* config/rx/rx.opt (mgcc-abi): New option.\n+\t(mrx-abi): New option.\n+\t* config/rx/t-rx (MULTILIB_OPTIONS): Show how to add an ABI\n+\tmultilib.\n+\t(MULTILIB_DIRNAMES): Likewise.\n+\n 2012-11-20  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Tejas Belagod  <tejas.belagod@arm.com>\n "}, {"sha": "5b7b87da3c207c8050ebf1196467e8deb157274a", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -1086,7 +1086,20 @@ static unsigned int\n rx_function_arg_boundary (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t  const_tree type ATTRIBUTE_UNUSED)\n {\n-  return 32;\n+  /* Older versions of the RX backend aligned all on-stack arguements\n+     to 32-bits.  The RX C ABI however says that they should be\n+     aligned to their natural alignment.  (See section 5.2.2 of the ABI).  */\n+  if (TARGET_GCC_ABI)\n+    return STACK_BOUNDARY;\n+\n+  if (type)\n+    {\n+      if (DECL_P (type))\n+\treturn DECL_ALIGN (type);\n+      return TYPE_ALIGN (type);\n+    }\n+\n+  return PARM_BOUNDARY;\n }\n \n /* Return an RTL describing where a function return value of type RET_TYPE\n@@ -3202,7 +3215,39 @@ rx_adjust_insn_length (rtx insn, int current_length)\n \n   return (zero && factor == 1) ? 4 : 5;\n }\n+\n+static bool\n+rx_narrow_volatile_bitfield (void)\n+{\n+  return true;\n+}\n+\n+static bool\n+rx_ok_to_inline (tree caller, tree callee)\n+{\n+  /* Do not inline functions with local variables\n+     into a naked CALLER - naked function have no stack frame and\n+     locals need a frame in order to have somewhere to live.\n+\n+     Unfortunately we have no way to determine the presence of\n+     local variables in CALLEE, so we have to be cautious and\n+     assume that there might be some there.\n+\n+     We do allow inlining when CALLEE has the \"inline\" type\n+     modifier or the \"always_inline\" or \"gnu_inline\" attributes.  */\n+  return lookup_attribute (\"naked\", DECL_ATTRIBUTES (caller)) == NULL_TREE\n+    || DECL_DECLARED_INLINE_P (callee)\n+    || lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (callee)) != NULL_TREE\n+    || lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (callee)) != NULL_TREE;\n+}\n+\n \f\n+#undef  TARGET_NARROW_VOLATILE_BITFIELD\n+#define TARGET_NARROW_VOLATILE_BITFIELD\t\trx_narrow_volatile_bitfield\n+\n+#undef  TARGET_CAN_INLINE_P\n+#define TARGET_CAN_INLINE_P\t\t\trx_ok_to_inline\n+\n #undef  TARGET_ASM_JUMP_ALIGN_MAX_SKIP\n #define TARGET_ASM_JUMP_ALIGN_MAX_SKIP\t\t\trx_max_skip_for_label\n #undef  TARGET_ASM_LOOP_ALIGN_MAX_SKIP\n@@ -3344,8 +3389,8 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #undef  TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS\t\trx_legitimize_address\n \n-#undef TARGET_WARN_FUNC_RETURN\n-#define TARGET_WARN_FUNC_RETURN rx_warn_func_return\n+#undef  TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN \t\trx_warn_func_return\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n "}, {"sha": "2929384449437fcee46cd9821f72b9b1a88b61b9", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -1,5 +1,5 @@\n /* GCC backend definitions for the Renesas RX processor.\n-   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Red Hat.\n \n    This file is part of GCC.\n@@ -49,6 +49,11 @@\n \tbuiltin_define (\"__RX_AS100_SYNTAX__\"); \\\n       else\t\t\t\t\t\\\n \tbuiltin_define (\"__RX_GAS_SYNTAX__\");   \\\n+\t\t\t\t\t\t\\\n+      if (TARGET_GCC_ABI)\t\t\t\\\n+\tbuiltin_define (\"__RX_GCC_ABI__\");\t\\\n+      else\t\t\t\t\t\\\n+\tbuiltin_define (\"__RX_ABI__\");\t\t\\\n     }                                           \\\n   while (0)\n \n@@ -79,6 +84,7 @@\n %{mrelax:-relax} \\\n %{mpid} \\\n %{mint-register=*} \\\n+%{mgcc-abi:-mgcc-abi} %{!mgcc-abi:-mrx-abi} \\\n \"\n \n #undef  LIB_SPEC\n@@ -119,7 +125,8 @@\n \n #define DEFAULT_SIGNED_CHAR\t\t0\n \n-#define STRICT_ALIGNMENT \t\t1\n+/* RX load/store instructions can handle unaligned addresses.  */\n+#define STRICT_ALIGNMENT \t\t0\n #define FUNCTION_BOUNDARY \t\t8\n #define BIGGEST_ALIGNMENT \t\t32\n #define STACK_BOUNDARY \t\t\t32\n@@ -370,33 +377,33 @@ typedef unsigned int CUMULATIVE_ARGS;\n # else\n #  define TEXT_SECTION_ASM_OP\t      \"\\t.section P,\\\"ax\\\"\"\n #  define CTORS_SECTION_ASM_OP\t      \\\n-  \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\"\n+  \"\\t.section\\t.init_array,\\\"awx\\\",@init_array\"\n #  define DTORS_SECTION_ASM_OP\t      \\\n-  \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\"\n+  \"\\t.section\\t.fini_array,\\\"awx\\\",@fini_array\"\n #  define INIT_ARRAY_SECTION_ASM_OP   \\\n-  \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\"\n+  \"\\t.section\\t.init_array,\\\"awx\\\",@init_array\"\n #  define FINI_ARRAY_SECTION_ASM_OP   \\\n-  \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\"\n+  \"\\t.section\\t.fini_array,\\\"awx\\\",@fini_array\"\n # endif\n #else\n # define TEXT_SECTION_ASM_OP\t      \\\n   (TARGET_AS100_SYNTAX ? \"\\t.SECTION P,CODE\" : \"\\t.section P,\\\"ax\\\"\")\n \n # define CTORS_SECTION_ASM_OP\t\t\t      \\\n   (TARGET_AS100_SYNTAX ? \"\\t.SECTION init_array,CODE\" \\\n-   : \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\")\n+   : \"\\t.section\\t.init_array,\\\"awx\\\",@init_array\")\n \n # define DTORS_SECTION_ASM_OP\t\t\t      \\\n   (TARGET_AS100_SYNTAX ? \"\\t.SECTION fini_array,CODE\" \\\n-   : \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\")\n+   : \"\\t.section\\t.fini_array,\\\"awx\\\",@fini_array\")\n \n # define INIT_ARRAY_SECTION_ASM_OP\t\t      \\\n   (TARGET_AS100_SYNTAX ? \"\\t.SECTION init_array,CODE\" \\\n-   : \"\\t.section\\t.init_array,\\\"aw\\\",@init_array\")\n+   : \"\\t.section\\t.init_array,\\\"awx\\\",@init_array\")\n \n # define FINI_ARRAY_SECTION_ASM_OP\t\t      \\\n   (TARGET_AS100_SYNTAX ? \"\\t.SECTION fini_array,CODE\" \\\n-   : \"\\t.section\\t.fini_array,\\\"aw\\\",@fini_array\")\n+   : \"\\t.section\\t.fini_array,\\\"awx\\\",@fini_array\")\n #endif\n \n #define GLOBAL_ASM_OP \t\t\\"}, {"sha": "9d430aa8d65b1b133abd36bb36e1e0d3bf0d2956", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -1651,7 +1651,7 @@\n (define_expand \"subdi3\"\n   [(set (match_operand:DI           0 \"register_operand\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\")\n-\t\t  (match_operand:DI 2 \"rx_compare_operand\")))]\n+\t\t  (match_operand:DI 2 \"register_operand\")))]\n   \"\"\n {\n   rtx op0l, op0h, op1l, op1h, op2l, op2h;"}, {"sha": "4a38988b579a8c341b40a7bf473c3405d5e757c1", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -1,5 +1,5 @@\n ; Command line options for the Renesas RX port of GCC.\n-; Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+; Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n ; Contributed by Red Hat.\n ;\n ; This file is part of GCC.\n@@ -124,3 +124,11 @@ Enables Position-Independent-Data (PID) mode.\n mwarn-multiple-fast-interrupts\n Target Report Var(rx_warn_multiple_fast_interrupts) Init(1) Warning\n Warn when multiple, different, fast interrupt handlers are in the compilation unit.\n+\n+mgcc-abi\n+Target RejectNegative Report Mask(GCC_ABI)\n+Enable the use of the old, broken, ABI where all stacked function arguments are aligned to 32-bits.\n+\n+mrx-abi\n+Target RejectNegative Report InverseMask(GCC_ABI)\n+Enable the use the standard RX ABI where all stacked function arguments are naturally aligned.  This is the default."}, {"sha": "dbd82da0c5a0954233bb4f3cfe9e86952a57c9dc", "filename": "gcc/config/rx/t-rx", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Ft-rx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47c9ac72414bb26cf9ec67aa24e115b037205b56/gcc%2Fconfig%2Frx%2Ft-rx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Ft-rx?ref=47c9ac72414bb26cf9ec67aa24e115b037205b56", "patch": "@@ -23,6 +23,11 @@\n MULTILIB_OPTIONS    = m64bit-doubles  nofpu        mbig-endian-data  mpid\n MULTILIB_DIRNAMES   =  64-bit-double  no-fpu-libs   big-endian-data   pid\n \n+# If necessary uncomment the next two lines to generate multilibs\n+# using the old, broken, ABI.\n+# MULTILIB_OPTIONS    += mgcc-abi\n+# MULTILIB_DIRNAMES   +=  gcc-abi\n+\n MULTILIB_MATCHES    = nofpu=mnofpu  nofpu=mcpu?rx200\n \n MULTILIB_EXCEPTIONS ="}]}