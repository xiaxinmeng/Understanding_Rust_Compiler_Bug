{"sha": "8f77aa9086f8172d87abf955a95bfbfb87440a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3N2FhOTA4NmY4MTcyZDg3YWJmOTU1YTk1YmZiZmI4NzQ0MGEyNg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-06-22T13:16:04Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-06-22T13:16:04Z"}, "message": "re PR target/65914 (error: unrecognizable insn)\n\n[gcc]\n\n2015-06-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65914\n\t* config/rs6000/predicates.md (altivec_register_operand): Permit\n\tvirtual stack registers.\n\t(vsx_register_operand): Likewise.\n\t(vfloat_operand): Likewise.\n\t(vint_operand): Likewise.\n\t(vlogical_operand): Likewise.\n\n[gcc/testsuite]\n\n2015-06-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65914\n\t* g++.dg/torture/pr65914.C:  New.\n\nFrom-SVN: r224725", "tree": {"sha": "563f33ff5e806c563ce629fae9644d91a3657bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563f33ff5e806c563ce629fae9644d91a3657bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f77aa9086f8172d87abf955a95bfbfb87440a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f77aa9086f8172d87abf955a95bfbfb87440a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f77aa9086f8172d87abf955a95bfbfb87440a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f77aa9086f8172d87abf955a95bfbfb87440a26/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a7611575b2dade35a46f99c67c2a649de2c12ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7611575b2dade35a46f99c67c2a649de2c12ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7611575b2dade35a46f99c67c2a649de2c12ad"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "9bfaa22f49b7c82c2a1decc3e3e4845487542a85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f77aa9086f8172d87abf955a95bfbfb87440a26", "patch": "@@ -1,3 +1,13 @@\n+2015-06-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65914\n+\t* config/rs6000/predicates.md (altivec_register_operand): Permit\n+\tvirtual stack registers.\n+\t(vsx_register_operand): Likewise.\n+\t(vfloat_operand): Likewise.\n+\t(vint_operand): Likewise.\n+\t(vlogical_operand): Likewise.\n+\n 2015-06-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (_loop_vec_info): Add scalar_cost_vec"}, {"sha": "e2d836f68a20a9980f8a767d853d9be2831b6e13", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=8f77aa9086f8172d87abf955a95bfbfb87440a26", "patch": "@@ -41,7 +41,7 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return 1;\n \n   return ALTIVEC_REGNO_P (REGNO (op));\n@@ -57,7 +57,7 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return 1;\n \n   return VSX_REGNO_P (REGNO (op));\n@@ -74,7 +74,7 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return 1;\n \n   return VFLOAT_REGNO_P (REGNO (op));\n@@ -91,7 +91,7 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return 1;\n \n   return VINT_REGNO_P (REGNO (op));\n@@ -108,7 +108,7 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n     return 1;\n \n   return VLOGICAL_REGNO_P (REGNO (op));"}, {"sha": "faa73a5dccf19431b96838fa2ee0eb1f468ffe76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f77aa9086f8172d87abf955a95bfbfb87440a26", "patch": "@@ -1,3 +1,8 @@\n+2015-06-22  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65914\n+\t* g++.dg/torture/pr65914.C:  New.\n+\n 2015-06-22  Richard Biener  <rguenther@suse.de>\n \n \t* lib/c-torture.exp: Set LTO_TORTURE_OPTIONS conditional on"}, {"sha": "fada262b5b1b6a87128af7e691ca62591c3086c0", "filename": "gcc/testsuite/g++.dg/torture/pr65914.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65914.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f77aa9086f8172d87abf955a95bfbfb87440a26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65914.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr65914.C?ref=8f77aa9086f8172d87abf955a95bfbfb87440a26", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c++14\" } */\n+\n+enum expression_template_option { et_on };\n+template <class, expression_template_option = et_on> class A;\n+template <class, class, class, class = void, class = void> struct expression;\n+template <class T> struct B { typedef const T &type; };\n+template <class tag, class A1, class A2, class A3, class A4>\n+struct B<expression<tag, A1, A2, A3, A4>> {\n+  typedef expression<tag, A1, A2> type;\n+};\n+template <class tag, class Arg1, class Arg2>\n+struct expression<tag, Arg1, Arg2> {\n+  expression(Arg1 p1, const Arg2 &p2) : arg1(p1), arg2(p2) {}\n+  typename B<Arg1>::type arg1;\n+  typename B<Arg2>::type arg2;\n+};\n+template <class Backend> expression<int, int, A<Backend>> sin(A<Backend>) {\n+  return expression<int, int, A<Backend>>(0, 0);\n+}\n+template <class tag, class A1, class A2, class A3, class A4>\n+expression<int, int, expression<tag, A1, A2>>\n+  asin(expression<tag, A1, A2, A3, A4> p1) {\n+  return expression<int, int, expression<tag, A1, A2>>(0, p1);\n+}\n+template <class B, expression_template_option ET, class tag, class Arg1,\n+\t  class Arg2, class Arg3, class Arg4>\n+expression<int, A<B>, expression<tag, Arg1, Arg2>>\n+  operator+(A<B, ET>, expression<tag, Arg1, Arg2, Arg3, Arg4> p2) {\n+  return expression<int, A<B>, expression<tag, Arg1, Arg2>>(0, p2);\n+}\n+template <class tag, class Arg1, class Arg2, class Arg3, class Arg4, class tag2,\n+\t  class Arg1b, class Arg2b, class Arg3b, class Arg4b>\n+expression<int, expression<tag, Arg1, Arg2>, expression<tag2, Arg1b, Arg2b>>\n+  operator*(expression<tag, Arg1, Arg2, Arg3, Arg4> p1,\n+\t    expression<tag2, Arg1b, Arg2b, Arg3b, Arg4b> p2) {\n+  return expression<int, expression<tag, Arg1, Arg2>,\n+\t\t    expression<tag2, Arg1b, Arg2b>>(p1, p2);\n+}\n+template <class B> expression<int, A<B>, A<B>> operator/(A<B>, A<B>) {\n+  return expression<int, A<B>, A<B>>(0, 0);\n+}\n+template <class tag, class Arg1, class Arg2, class Arg3, class Arg4, class V>\n+void operator/(expression<tag, Arg1, Arg2, Arg3, Arg4>, V);\n+template <class, expression_template_option> class A {\n+public:\n+  A() {}\n+  template <class V> A(V) {}\n+};\n+template <class T, class Policy> void jacobi_recurse(T, T, Policy) {\n+  T a, b, c;\n+  (a+asin(b/c) * sin(a)) / 0.1;\n+}\n+template <class T, class Policy> void jacobi_imp(T p1, Policy) {\n+  T x;\n+  jacobi_recurse(x, p1, 0);\n+}\n+template <class T, class U, class V, class Policy>\n+void jacobi_elliptic(T, U, V, Policy) {\n+  jacobi_imp(static_cast<T>(0), 0);\n+}\n+template <class U, class T, class Policy> void jacobi_sn(U, T, Policy) {\n+  jacobi_elliptic(static_cast<T>(0), 0, 0, 0);\n+}\n+template <class U, class T> void jacobi_sn(U, T p2) { jacobi_sn(0, p2, 0); }\n+template <class T> void test_extra(T) {\n+  T d;\n+  jacobi_sn(0, d);\n+}\n+void foo() { test_extra(A<int>()); }"}]}