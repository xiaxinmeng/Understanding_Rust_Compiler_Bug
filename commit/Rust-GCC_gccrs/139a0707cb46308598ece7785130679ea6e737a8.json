{"sha": "139a0707cb46308598ece7785130679ea6e737a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5YTA3MDdjYjQ2MzA4NTk4ZWNlNzc4NTEzMDY3OWVhNmU3MzdhOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-02-04T09:30:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-02-04T09:30:12Z"}, "message": "re PR c/56113 (out of memory when compiling a function with many goto labels (50k > ))\n\n2013-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56113\n\t* tree-ssa-structalias.c (equiv_class_lookup, equiv_class_add):\n\tMerge into ...\n\t(equiv_class_lookup_or_add): ... this.\n\t(label_visit): Adjust and fix error in previous patch.\n\t(perform_var_substitution): Adjust.\n\nFrom-SVN: r195707", "tree": {"sha": "b5efec18e5a7beed6df7b3fb140527980aaa96bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5efec18e5a7beed6df7b3fb140527980aaa96bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139a0707cb46308598ece7785130679ea6e737a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139a0707cb46308598ece7785130679ea6e737a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139a0707cb46308598ece7785130679ea6e737a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139a0707cb46308598ece7785130679ea6e737a8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb84a0cb8411bdbbb8a1343216b9d76dcb935c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb84a0cb8411bdbbb8a1343216b9d76dcb935c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb84a0cb8411bdbbb8a1343216b9d76dcb935c94"}], "stats": {"total": 102, "additions": 40, "deletions": 62}, "files": [{"sha": "12e070a119ff98eedf6c00ddf38eab265c401a2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139a0707cb46308598ece7785130679ea6e737a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139a0707cb46308598ece7785130679ea6e737a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=139a0707cb46308598ece7785130679ea6e737a8", "patch": "@@ -1,3 +1,12 @@\n+2013-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56113\n+\t* tree-ssa-structalias.c (equiv_class_lookup, equiv_class_add):\n+\tMerge into ...\n+\t(equiv_class_lookup_or_add): ... this.\n+\t(label_visit): Adjust and fix error in previous patch.\n+\t(perform_var_substitution): Adjust.\n+\n 2013-02-03  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/divtab.c: Fix formatting and comments throughout the file."}, {"sha": "50a40a5d9bd42d3418fe28df17df42cf85da3e3f", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 31, "deletions": 62, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139a0707cb46308598ece7785130679ea6e737a8/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139a0707cb46308598ece7785130679ea6e737a8/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=139a0707cb46308598ece7785130679ea6e737a8", "patch": "@@ -1908,54 +1908,29 @@ equiv_class_label_eq (const void *p1, const void *p2)\n \t  && bitmap_equal_p (eql1->labels, eql2->labels));\n }\n \n-/* Lookup a equivalence class in TABLE by the bitmap of LABELS it\n-   contains.  Sets *REF_LABELS to the bitmap LABELS is equivalent to.  */\n+/* Lookup a equivalence class in TABLE by the bitmap of LABELS with\n+   hash HAS it contains.  Sets *REF_LABELS to the bitmap LABELS\n+   is equivalent to.  */\n \n-static unsigned int\n-equiv_class_lookup (htab_t table, bitmap labels, bitmap *ref_labels)\n+static equiv_class_label *\n+equiv_class_lookup_or_add (htab_t table, bitmap labels)\n {\n-  void **slot;\n-  struct equiv_class_label ecl;\n+  equiv_class_label **slot;\n+  equiv_class_label ecl;\n \n   ecl.labels = labels;\n   ecl.hashcode = bitmap_hash (labels);\n-\n-  slot = htab_find_slot_with_hash (table, &ecl,\n-\t\t\t\t   ecl.hashcode, NO_INSERT);\n-  if (!slot)\n+  slot = (equiv_class_label **) htab_find_slot_with_hash (table, &ecl,\n+\t\t\t\t\t\t\t  ecl.hashcode, INSERT);\n+  if (!*slot)\n     {\n-      if (ref_labels)\n-\t*ref_labels = NULL;\n-      return 0;\n+      *slot = XNEW (struct equiv_class_label);\n+      (*slot)->labels = labels;\n+      (*slot)->hashcode = ecl.hashcode;\n+      (*slot)->equivalence_class = 0;\n     }\n-  else\n-    {\n-      equiv_class_label_t ec = (equiv_class_label_t) *slot;\n-      if (ref_labels)\n-\t*ref_labels = ec->labels;\n-      return ec->equivalence_class;\n-    }\n-}\n-\n-\n-/* Add an equivalence class named EQUIVALENCE_CLASS with labels LABELS\n-   to TABLE.  */\n \n-static void\n-equiv_class_add (htab_t table, unsigned int equivalence_class,\n-\t\t bitmap labels)\n-{\n-  void **slot;\n-  equiv_class_label_t ecl = XNEW (struct equiv_class_label);\n-\n-  ecl->labels = labels;\n-  ecl->equivalence_class = equivalence_class;\n-  ecl->hashcode = bitmap_hash (labels);\n-\n-  slot = htab_find_slot_with_hash (table, ecl,\n-\t\t\t\t   ecl->hashcode, INSERT);\n-  gcc_assert (!*slot);\n-  *slot = (void *) ecl;\n+  return *slot;\n }\n \n /* Perform offline variable substitution.\n@@ -2150,6 +2125,10 @@ label_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n \t}\n       bitmap_set_bit (graph->points_to[n], FIRST_REF_NODE + n);\n       graph->pointer_label[n] = pointer_equiv_class++;\n+      equiv_class_label_t ecl;\n+      ecl = equiv_class_lookup_or_add (pointer_equiv_class_table,\n+\t\t\t\t       graph->points_to[n]);\n+      ecl->equivalence_class = graph->pointer_label[n];\n       return;\n     }\n \n@@ -2167,22 +2146,17 @@ label_visit (constraint_graph_t graph, struct scc_info *si, unsigned int n)\n \n   if (!bitmap_empty_p (graph->points_to[n]))\n     {\n-      bitmap ref_points_to;\n-      unsigned int label = equiv_class_lookup (pointer_equiv_class_table,\n-\t\t\t\t\t       graph->points_to[n],\n-\t\t\t\t\t       &ref_points_to);\n-      if (!label)\n-\t{\n-\t  label = pointer_equiv_class++;\n-\t  equiv_class_add (pointer_equiv_class_table,\n-\t\t\t   label, graph->points_to[n]);\n-\t}\n+      equiv_class_label_t ecl;\n+      ecl = equiv_class_lookup_or_add (pointer_equiv_class_table,\n+\t\t\t\t       graph->points_to[n]);\n+      if (ecl->equivalence_class == 0)\n+\tecl->equivalence_class = pointer_equiv_class++;\n       else\n \t{\n \t  BITMAP_FREE (graph->points_to[n]);\n-\t  graph->points_to[n] = ref_points_to;\n+\t  graph->points_to[n] = ecl->labels;\n \t}\n-      graph->pointer_label[n] = label;\n+      graph->pointer_label[n] = ecl->equivalence_class;\n     }\n }\n \n@@ -2222,7 +2196,6 @@ perform_var_substitution (constraint_graph_t graph)\n       bitmap pointed_by;\n       bitmap_iterator bi;\n       unsigned int j;\n-      unsigned int label;\n \n       if (!graph->pointed_by[i])\n \tcontinue;\n@@ -2240,22 +2213,18 @@ perform_var_substitution (constraint_graph_t graph)\n \n       /* Look up the location equivalence label if one exists, or make\n \t one otherwise.  */\n-      label = equiv_class_lookup (location_equiv_class_table,\n-\t\t\t\t  pointed_by, NULL);\n-      if (label == 0)\n-\t{\n-\t  label = location_equiv_class++;\n-\t  equiv_class_add (location_equiv_class_table,\n-\t\t\t   label, pointed_by);\n-\t}\n+      equiv_class_label_t ecl;\n+      ecl = equiv_class_lookup_or_add (location_equiv_class_table, pointed_by);\n+      if (ecl->equivalence_class == 0)\n+\tecl->equivalence_class = location_equiv_class++;\n       else\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"Found location equivalence for node %s\\n\",\n \t\t     get_varinfo (i)->name);\n \t  BITMAP_FREE (pointed_by);\n \t}\n-      graph->loc_label[i] = label;\n+      graph->loc_label[i] = ecl->equivalence_class;\n \n     }\n "}]}