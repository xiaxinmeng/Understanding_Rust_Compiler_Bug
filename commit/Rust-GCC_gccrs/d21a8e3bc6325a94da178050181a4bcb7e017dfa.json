{"sha": "d21a8e3bc6325a94da178050181a4bcb7e017dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxYThlM2JjNjMyNWE5NGRhMTc4MDUwMTgxYTRiY2I3ZTAxN2RmYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-24T07:34:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-24T07:34:51Z"}, "message": "re PR c++/2972 (-Wuninitialized could warn about uninitialized member variable usage in constructors)\n\n2017-04-24  Richard Biener  <rguenther@suse.de>\n\n\tPR c++/2972\n\t* tree-ssa-uninit.c (warn_uninitialized_vars): Handle some\n\tpointer-based references.\n\n\t* g++.dg/warn/Wuninitialized-10.C: New testcase.\n\nFrom-SVN: r247090", "tree": {"sha": "12b9e6a87f27dca7b5f2a5244498407cbf486b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b9e6a87f27dca7b5f2a5244498407cbf486b95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21a8e3bc6325a94da178050181a4bcb7e017dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21a8e3bc6325a94da178050181a4bcb7e017dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21a8e3bc6325a94da178050181a4bcb7e017dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21a8e3bc6325a94da178050181a4bcb7e017dfa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c5b0ca4c5d8aa8a0f13a4e57b4f9cf4a9de48cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5b0ca4c5d8aa8a0f13a4e57b4f9cf4a9de48cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5b0ca4c5d8aa8a0f13a4e57b4f9cf4a9de48cb"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "a9c9a3698e625db5e09238347abade2c4cb231d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21a8e3bc6325a94da178050181a4bcb7e017dfa", "patch": "@@ -1,3 +1,9 @@\n+2017-04-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/2972\n+\t* tree-ssa-uninit.c (warn_uninitialized_vars): Handle some\n+\tpointer-based references.\n+\n 2017-04-24  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/79814"}, {"sha": "148901463f44a17cb873cb1363e782c7b10425dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21a8e3bc6325a94da178050181a4bcb7e017dfa", "patch": "@@ -1,3 +1,8 @@\n+2017-04-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c++/2972\n+\t* g++.dg/warn/Wuninitialized-10.C: New testcase.\n+\n 2017-04-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/80484"}, {"sha": "1fd8b1d306920b5e10256b28eef54483576d735c", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-10.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-10.C?ref=d21a8e3bc6325a94da178050181a4bcb7e017dfa", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wuninitialized\" }\n+\n+struct A\n+{\n+  int f,g;\n+\n+  A()\n+    {\n+      f = g; // { dg-warning \"g. is used uninitialized\" }\n+    }\n+};\n+\n+A a;"}, {"sha": "60731b2737de52d787f6561e3b1c7c34762ce607", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21a8e3bc6325a94da178050181a4bcb7e017dfa/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=d21a8e3bc6325a94da178050181a4bcb7e017dfa", "patch": "@@ -279,20 +279,22 @@ warn_uninitialized_vars (bool warn_possibly_uninitialized)\n \t      ao_ref ref;\n \t      ao_ref_init (&ref, rhs);\n \n-\t      /* Do not warn if it can be initialized outside this function.  */\n+\t      /* Do not warn if the base was marked so or this is a\n+\t         hard register var.  */\n \t      tree base = ao_ref_base (&ref);\n-\t      if (!VAR_P (base)\n-\t\t  || DECL_HARD_REGISTER (base)\n-\t\t  || is_global_var (base)\n+\t      if ((VAR_P (base)\n+\t\t   && DECL_HARD_REGISTER (base))\n \t\t  || TREE_NO_WARNING (base))\n \t\tcontinue;\n \n \t      /* Do not warn if the access is fully outside of the\n \t         variable.  */\n-\t      if (ref.size != -1\n+\t      if (DECL_P (base)\n+\t\t  && ref.size != -1\n \t\t  && ref.max_size == ref.size\n \t\t  && (ref.offset + ref.size <= 0\n \t\t      || (ref.offset >= 0\n+\t\t\t  && DECL_SIZE (base)\n \t\t\t  && TREE_CODE (DECL_SIZE (base)) == INTEGER_CST\n \t\t\t  && compare_tree_int (DECL_SIZE (base),\n \t\t\t\t\t       ref.offset) <= 0)))\n@@ -305,11 +307,12 @@ warn_uninitialized_vars (bool warn_possibly_uninitialized)\n \t\t  && oracle_cnt > vdef_cnt * 2)\n \t\tlimit = 32;\n \t      check_defs_data data;\n+\t      bool fentry_reached = false;\n \t      data.found_may_defs = false;\n \t      use = gimple_vuse (stmt);\n \t      int res = walk_aliased_vdefs (&ref, use,\n \t\t\t\t\t    check_defs, &data, NULL,\n-\t\t\t\t\t    NULL, limit);\n+\t\t\t\t\t    &fentry_reached, limit);\n \t      if (res == -1)\n \t\t{\n \t\t  oracle_cnt += limit;\n@@ -318,6 +321,16 @@ warn_uninitialized_vars (bool warn_possibly_uninitialized)\n \t      oracle_cnt += res;\n \t      if (data.found_may_defs)\n \t\tcontinue;\n+\t      /* Do not warn if it can be initialized outside this function.\n+\t         If we did not reach function entry then we found killing\n+\t\t clobbers on all paths to entry.  */\n+\t      if (fentry_reached\n+\t\t  /* ???  We'd like to use ref_may_alias_global_p but that\n+\t\t     excludes global readonly memory and thus we get bougs\n+\t\t     warnings from p = cond ? \"a\" : \"b\" for example.  */\n+\t\t  && (!VAR_P (base)\n+\t\t      || is_global_var (base)))\n+\t\tcontinue;\n \n \t      /* We didn't find any may-defs so on all paths either\n \t         reached function entry or a killing clobber.  */"}]}