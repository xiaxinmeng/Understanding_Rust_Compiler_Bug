{"sha": "db1147b2e23d260580bb08ce65259b28abe1d0fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxMTQ3YjJlMjNkMjYwNTgwYmIwOGNlNjUyNTliMjhhYmUxZDBmZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "sidwell@codesourcery.com", "date": "2000-01-24T10:23:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-01-24T10:23:26Z"}, "message": "cp-tree.h (CPTI_TP_DESC_TYPE, [...]): Remove cp_tree_index enumerations.\n\n\t* cp-tree.h (CPTI_TP_DESC_TYPE, CPTI_ACCESS_MODE_TYPE,\n\tCPTI_USER_DESC_TYPE, CPTI_CLASS_DESC_TYPE, CPTI_ATTR_DESC_TYPE,\n\tCPTI_PTMF_DESC_TYPE): Remove cp_tree_index enumerations.\n\t(CPTI_TI_DESC_TYPE, CPTI_REF_DESC_TYPE, CPTI_ARY_DESC_TYPE,\n\tCPTI_ENUM_DESC_TYPE, CPTI_CLASS_DESC_TYPE, CPTI_SI_CLASS_DESC_TYPE,\n\tCPTI_VMI_CLASS_DESC_TYPE, CPTI_BASE_DESC_TYPE): New enumerations.\n\t(CPTI_TINFO_FN_ID, CPTI_TINFO_FN_TYPE): Rename to ...\n\t(CPTI_TINFO_DECL_ID, CPTI_TINFO_DECL_TYPE): ... here.\n\t(CPTI_TINFO_VAR_ID): New enumeration.\n\t(__tp_desc_type_node, __access_mode_type_node,\n\t__bltn_desc_type_node, __user_desc_type_node,\n\t__class_desc_type_node, __ptr_desc_type_node,\n\t__attr_desc_type_node, __func_desc_type_node,\n\t__ptmf_desc_type_node, __ptmd_desc_type_node): Remove #defines.\n\t(ti_desc_type_node, bltn_desc_type_node, ptr_desc_type_node,\n\tref_desc_type_node, ary_desc_type_node, func_desc_type_node,\n\tenum_desc_type_node, class_desc_type_node,\n\tsi_class_desc_type_node, vmi_class_desc_type_node,\n\tptmd_desc_type_node, base_desc_type_node): New #defines.\n\t(tinfo_fn_id, tinfo_fn_type): Rename to ...\n\t(tinfo_decl_id, tinfo_decl_type): ... here. Adjust.\n\t(tinfo_var_id): New enumeration.\n\t(DECL_TINFO_FN_P): Augment comment.\n\t* decl.c (cp_global_trees): Adjust documentation.\n\t* rtti.c (init_rtti_processing): Adjust for tinfo_decl_id,\n\ttinfo_decl_type and tinfo_var_id.\n\t(get_tinfo_decl_dynamic): Adjust for tinfo_decl_type.\n\t(build_typeid): Remove unused variable.\n\t(get_tinfo_var): Use tinfo_var_id.\n\t(tinfo_name): New static function.\n\t(get_tinfo_decl): Adjust for tinfo_decl_id and tinfo_decl_type.\n\t(tinfo_from_decl): Likewise.\n\t(get_base_offset): New static function, broken out of\n\texpand_class_desc.\n\t(expand_si_desc): Use tinfo_name.\n\t(expand_class_desc): Likewise. Lose local static variable.\n\tUse base_desc_type_node. Use get_base_offset.\n\t(expand_ptr_desc): Use tinfo_name.\n\t(expand_attr_desc): Likewise.\n\t(expand_generic_desc): Likewise.\n\n\t* tinfo.cc (__GXX_ABI_VERSION): Test value and existance.\n\t* tinfo.h (__GXX_ABI_VERSION): Test value and existance.\n\nFrom-SVN: r31582", "tree": {"sha": "21bfd0e3b183e40fad70bf7ba0161733857f0ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21bfd0e3b183e40fad70bf7ba0161733857f0ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db1147b2e23d260580bb08ce65259b28abe1d0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1147b2e23d260580bb08ce65259b28abe1d0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1147b2e23d260580bb08ce65259b28abe1d0fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1147b2e23d260580bb08ce65259b28abe1d0fd/comments", "author": null, "committer": null, "parents": [{"sha": "e1a86dbb901bb554dd4c0858b7e87e4b8d1fda5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a86dbb901bb554dd4c0858b7e87e4b8d1fda5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a86dbb901bb554dd4c0858b7e87e4b8d1fda5a"}], "stats": {"total": 248, "additions": 162, "deletions": 86}, "files": [{"sha": "45029296242990150a78b695df23df8efd17fe42", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -1,3 +1,49 @@\n+2000-01-24  Nathan Sidwell  <sidwell@codesourcery.com>\n+\n+\t* cp-tree.h (CPTI_TP_DESC_TYPE, CPTI_ACCESS_MODE_TYPE,\n+\tCPTI_USER_DESC_TYPE, CPTI_CLASS_DESC_TYPE, CPTI_ATTR_DESC_TYPE,\n+\tCPTI_PTMF_DESC_TYPE): Remove cp_tree_index enumerations.\n+\t(CPTI_TI_DESC_TYPE, CPTI_REF_DESC_TYPE, CPTI_ARY_DESC_TYPE,\n+\tCPTI_ENUM_DESC_TYPE, CPTI_CLASS_DESC_TYPE, CPTI_SI_CLASS_DESC_TYPE,\n+\tCPTI_VMI_CLASS_DESC_TYPE, CPTI_BASE_DESC_TYPE): New enumerations.\n+\t(CPTI_TINFO_FN_ID, CPTI_TINFO_FN_TYPE): Rename to ...\n+\t(CPTI_TINFO_DECL_ID, CPTI_TINFO_DECL_TYPE): ... here.\n+\t(CPTI_TINFO_VAR_ID): New enumeration.\n+\t(__tp_desc_type_node, __access_mode_type_node,\n+\t__bltn_desc_type_node, __user_desc_type_node,\n+\t__class_desc_type_node, __ptr_desc_type_node,\n+\t__attr_desc_type_node, __func_desc_type_node,\n+\t__ptmf_desc_type_node, __ptmd_desc_type_node): Remove #defines.\n+\t(ti_desc_type_node, bltn_desc_type_node, ptr_desc_type_node,\n+\tref_desc_type_node, ary_desc_type_node, func_desc_type_node,\n+\tenum_desc_type_node, class_desc_type_node,\n+\tsi_class_desc_type_node, vmi_class_desc_type_node,\n+\tptmd_desc_type_node, base_desc_type_node): New #defines.\n+\t(tinfo_fn_id, tinfo_fn_type): Rename to ...\n+\t(tinfo_decl_id, tinfo_decl_type): ... here. Adjust.\n+\t(tinfo_var_id): New enumeration.\n+\t(DECL_TINFO_FN_P): Augment comment.\n+\t* decl.c (cp_global_trees): Adjust documentation.\n+\t* rtti.c (init_rtti_processing): Adjust for tinfo_decl_id,\n+\ttinfo_decl_type and tinfo_var_id.\n+\t(get_tinfo_decl_dynamic): Adjust for tinfo_decl_type.\n+\t(build_typeid): Remove unused variable.\n+\t(get_tinfo_var): Use tinfo_var_id.\n+\t(tinfo_name): New static function.\n+\t(get_tinfo_decl): Adjust for tinfo_decl_id and tinfo_decl_type.\n+\t(tinfo_from_decl): Likewise.\n+\t(get_base_offset): New static function, broken out of\n+\texpand_class_desc.\n+\t(expand_si_desc): Use tinfo_name.\n+\t(expand_class_desc): Likewise. Lose local static variable.\n+\tUse base_desc_type_node. Use get_base_offset.\n+\t(expand_ptr_desc): Use tinfo_name.\n+\t(expand_attr_desc): Likewise.\n+\t(expand_generic_desc): Likewise.\n+\n+\t* tinfo.cc (__GXX_ABI_VERSION): Test value and existance.\n+\t* tinfo.h (__GXX_ABI_VERSION): Test value and existance.\n+\n 2000-01-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (__eprintf): Remove declaration."}, {"sha": "dea3c55bafb83ab8c7a5ff8c992ac02967155dbb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -496,16 +496,18 @@ enum cp_tree_index\n     CPTI_DELTA_TYPE,\n     CPTI_CLEANUP_TYPE,\n \n-    CPTI_TP_DESC_TYPE,\n-    CPTI_ACCESS_MODE_TYPE,\n+    CPTI_TI_DESC_TYPE,\n     CPTI_BLTN_DESC_TYPE,\n-    CPTI_USER_DESC_TYPE,\n-    CPTI_CLASS_DESC_TYPE,\n     CPTI_PTR_DESC_TYPE,\n-    CPTI_ATTR_DESC_TYPE,\n+    CPTI_REF_DESC_TYPE,\n+    CPTI_ARY_DESC_TYPE,\n     CPTI_FUNC_DESC_TYPE,\n-    CPTI_PTMF_DESC_TYPE,\n+    CPTI_ENUM_DESC_TYPE,\n+    CPTI_CLASS_DESC_TYPE,\n+    CPTI_SI_CLASS_DESC_TYPE,\n+    CPTI_VMI_CLASS_DESC_TYPE,\n     CPTI_PTMD_DESC_TYPE,\n+    CPTI_BASE_DESC_TYPE,\n     \n     CPTI_CLASS_STAR_TYPE,\n     CPTI_CLASS_TYPE,\n@@ -517,8 +519,9 @@ enum cp_tree_index\n     CPTI_VTBL_PTR_TYPE,\n     CPTI_STD,\n     CPTI_TYPE_INFO_TYPE,\n-    CPTI_TINFO_FN_ID,\n-    CPTI_TINFO_FN_TYPE,\n+    CPTI_TINFO_DECL_ID,\n+    CPTI_TINFO_DECL_TYPE,\n+    CPTI_TINFO_VAR_ID,\n     CPTI_ABORT_FNDECL,\n     CPTI_GLOBAL_DELETE_FNDECL,\n \n@@ -573,16 +576,20 @@ extern tree cp_global_trees[CPTI_MAX];\n #define wchar_decl_node\t\t\tcp_global_trees[CPTI_WCHAR_DECL]\n #define vtable_entry_type\t\tcp_global_trees[CPTI_VTABLE_ENTRY_TYPE]\n #define delta_type_node\t\t\tcp_global_trees[CPTI_DELTA_TYPE]\n-#define __tp_desc_type_node\t\tcp_global_trees[CPTI_TP_DESC_TYPE]\n-#define __access_mode_type_node\t\tcp_global_trees[CPTI_ACCESS_MODE_TYPE]\n-#define __bltn_desc_type_node\t\tcp_global_trees[CPTI_BLTN_DESC_TYPE]\n-#define __user_desc_type_node\t\tcp_global_trees[CPTI_USER_DESC_TYPE]\n-#define __class_desc_type_node\t\tcp_global_trees[CPTI_CLASS_DESC_TYPE]\n-#define __ptr_desc_type_node\t\tcp_global_trees[CPTI_PTR_DESC_TYPE]\n-#define __attr_desc_type_node\t\tcp_global_trees[CPTI_ATTR_DESC_TYPE]\n-#define __func_desc_type_node\t\tcp_global_trees[CPTI_FUNC_DESC_TYPE]\n-#define __ptmf_desc_type_node\t\tcp_global_trees[CPTI_PTMF_DESC_TYPE]\n-#define __ptmd_desc_type_node\t\tcp_global_trees[CPTI_PTMD_DESC_TYPE]\n+\n+#define ti_desc_type_node\t\tcp_global_trees[CPTI_TI_DESC_TYPE]\n+#define bltn_desc_type_node\t\tcp_global_trees[CPTI_BLTN_DESC_TYPE]\n+#define ptr_desc_type_node\t\tcp_global_trees[CPTI_PTR_DESC_TYPE]\n+#define ref_desc_type_node\t\tcp_global_trees[CPTI_REF_DESC_TYPE]\n+#define ary_desc_type_node\t\tcp_global_trees[CPTI_ARY_DESC_TYPE]\n+#define func_desc_type_node\t\tcp_global_trees[CPTI_FUNC_DESC_TYPE]\n+#define enum_desc_type_node\t\tcp_global_trees[CPTI_ENUM_DESC_TYPE]\n+#define class_desc_type_node\t\tcp_global_trees[CPTI_CLASS_DESC_TYPE]\n+#define si_class_desc_type_node\t\tcp_global_trees[CPTI_SI_CLASS_DESC_TYPE]\n+#define vmi_class_desc_type_node\tcp_global_trees[CPTI_VMI_CLASS_DESC_TYPE]\n+#define ptmd_desc_type_node\t\tcp_global_trees[CPTI_PTMD_DESC_TYPE]\n+#define base_desc_type_node\t\tcp_global_trees[CPTI_BASE_DESC_TYPE]\n+\n #define class_star_type_node\t\tcp_global_trees[CPTI_CLASS_STAR_TYPE]\n #define class_type_node\t\t\tcp_global_trees[CPTI_CLASS_TYPE]\n #define record_type_node\t\tcp_global_trees[CPTI_RECORD_TYPE]\n@@ -593,8 +600,9 @@ extern tree cp_global_trees[CPTI_MAX];\n #define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n #define std_node\t\t\tcp_global_trees[CPTI_STD]\n #define type_info_type_node\t\tcp_global_trees[CPTI_TYPE_INFO_TYPE]\n-#define tinfo_fn_id\t\t\tcp_global_trees[CPTI_TINFO_FN_ID]\n-#define tinfo_fn_type\t\t\tcp_global_trees[CPTI_TINFO_FN_TYPE]\n+#define tinfo_decl_id\t\t\tcp_global_trees[CPTI_TINFO_DECL_ID]\n+#define tinfo_decl_type\t\t\tcp_global_trees[CPTI_TINFO_DECL_TYPE]\n+#define tinfo_var_id                    cp_global_trees[CPTI_TINFO_VAR_ID]\n #define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n #define global_delete_fndecl\t\tcp_global_trees[CPTI_GLOBAL_DELETE_FNDECL]\n \n@@ -1830,7 +1838,8 @@ struct lang_decl\n    for an object with virtual baseclasses.  */\n #define DECL_CONSTRUCTOR_FOR_VBASE_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.constructor_for_vbase_attr)\n \n-/* Non-zero for a FUNCTION_DECL that declares a type-info function.  */\n+/* Non-zero for a FUNCTION_DECL that declares a type-info function.\n+   This only happens in the old abi.  */\n #define DECL_TINFO_FN_P(NODE) \t\t\t\t\t\\\n   (TREE_CODE (NODE) == FUNCTION_DECL\t\t\t\t\\\n    && DECL_ARTIFICIAL (NODE)\t\t\t\t\t\\"}, {"sha": "3b2fb85b9f439636d592b87a517999f78bfce4fb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -208,10 +208,12 @@ tree error_mark_list;\n #if 0\n \ttree __tp_desc_type_node;\n #endif\n-\ttree __access_mode_type_node;\n-\ttree __bltn_desc_type_node, __user_desc_type_node, __class_desc_type_node;\n-\ttree __ptr_desc_type_node, __attr_desc_type_node, __func_desc_type_node;\n-\ttree __ptmf_desc_type_node, __ptmd_desc_type_node;\n+        tree ti_desc_type_node;\n+\ttree bltn_desc_type_node, ptr_desc_type_node, ref_desc_type_node;\n+\ttree ary_desc_type_node, func_desc_type_node, enum_desc_type_node;\n+\ttree class_desc_type_node, si_class_desc_type_node, vmi_class_desc_type_node;\n+\ttree ptmd_desc_type_node;\n+\ttree base_desc_type_node;\n #if 0\n    Not needed yet?  May be needed one day?\n \ttree __bltn_desc_array_type, __user_desc_array_type, __class_desc_array_type;\n@@ -243,7 +245,8 @@ tree error_mark_list;\n \ttree global_delete_fndecl;\n \n    Used by RTTI\n-\ttree type_info_type_node, tinfo_fn_id, tinfo_fn_type;\n+\ttree type_info_type_node, tinfo_decl_id, tinfo_decl_type;\n+\ttree tinfo_var_id;\n \n */\n "}, {"sha": "71a54c544c3cc4a84b0ec4ea77b2697f6da0f6a2", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 76, "deletions": 58, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -40,6 +40,8 @@ static tree build_headof_sub PROTO((tree));\n static tree build_headof PROTO((tree));\n static tree get_tinfo_var PROTO((tree));\n static tree ifnonnull PROTO((tree, tree));\n+static tree tinfo_name PROTO((tree));\n+static tree get_base_offset PROTO((tree, tree));\n static tree build_dynamic_cast_1 PROTO((tree, tree));\n static void expand_si_desc PROTO((tree, tree));\n static void expand_class_desc PROTO((tree, tree));\n@@ -60,11 +62,14 @@ init_rtti_processing ()\n     (class_type_node, get_identifier (\"type_info\"), 1);\n   if (flag_honor_std)\n     pop_namespace ();\n-  tinfo_fn_id = get_identifier (\"__tf\");\n-  tinfo_fn_type = build_function_type\n-    (build_reference_type (build_qualified_type (type_info_type_node, \n-\t\t\t\t\t\t TYPE_QUAL_CONST)),\n-     void_list_node);\n+\n+  tinfo_decl_id = get_identifier (\"__tf\");\n+  tinfo_decl_type = build_function_type\n+        (build_reference_type\n+          (build_qualified_type\n+            (type_info_type_node, TYPE_QUAL_CONST)),\n+         void_list_node);\n+  tinfo_var_id = get_identifier (\"__ti\");\n }\n \n /* Given a pointer to an object with at least one virtual table\n@@ -224,7 +229,7 @@ get_tinfo_decl_dynamic (exp)\n \tt = build_vfn_ref ((tree *) 0, exp, integer_one_node);\n       else\n \tt = build_vfn_ref ((tree *) 0, exp, integer_zero_node);\n-      TREE_TYPE (t) = build_pointer_type (tinfo_fn_type);\n+      TREE_TYPE (t) = build_pointer_type (tinfo_decl_type);\n       return t;\n     }\n \n@@ -238,7 +243,6 @@ build_typeid (exp)\n      tree exp;\n {\n   tree cond = NULL_TREE;\n-  tree type;\n   int nonnull = 0;\n \n   if (! flag_rtti)\n@@ -287,7 +291,7 @@ static tree\n get_tinfo_var (type)\n      tree type;\n {\n-  tree tname = build_overload_with_type (get_identifier (\"__ti\"), type);\n+  tree tname = build_overload_with_type (tinfo_var_id, type);\n   tree arrtype;\n   int size;\n \n@@ -325,11 +329,21 @@ get_tinfo_var (type)\n   return declare_global_var (tname, arrtype);\n }\n \n+/* Generate the NTBS name of a type.  */\n+static tree\n+tinfo_name (type)\n+     tree type;\n+{\n+  const char *name = build_overload_name (type, 1, 1);\n+  tree name_string = combine_strings (build_string (strlen (name) + 1, name));\n+  return name_string;\n+}\n+\n /* Returns a decl for a function or variable which can be used to obtain a\n    type_info object for TYPE.  The old-abi uses functions, the new-abi will\n    use the type_info object directly.  You can take the address of the\n-   returned decl, to save the decl.  To use the generator call\n-   tinfo_from_generator.  You must arrange that the decl is mark_used, if\n+   returned decl, to save the decl.  To use the decl call\n+   tinfo_from_decl.  You must arrange that the decl is mark_used, if\n    actually use it --- decls in vtables are only used if the vtable is\n    output.  */\n \n@@ -346,12 +360,12 @@ get_tinfo_decl (type)\n     type = build_function_type (TREE_TYPE (type),\n \t\t\t\tTREE_CHAIN (TYPE_ARG_TYPES (type)));\n \n-  name = build_overload_with_type (tinfo_fn_id, type);\n+  name = build_overload_with_type (tinfo_decl_id, type);\n \n   if (IDENTIFIER_GLOBAL_VALUE (name))\n     return IDENTIFIER_GLOBAL_VALUE (name);\n \n-  d = build_lang_decl (FUNCTION_DECL, name, tinfo_fn_type);\n+  d = build_lang_decl (FUNCTION_DECL, name, tinfo_decl_type);\n   DECL_EXTERNAL (d) = 1;\n   TREE_PUBLIC (d) = 1;\n   DECL_ARTIFICIAL (d) = 1;\n@@ -373,7 +387,7 @@ static tree\n tinfo_from_decl (expr)\n      tree expr;\n {\n-  tree t = build_call (expr, TREE_TYPE (tinfo_fn_type), NULL_TREE);\n+  tree t = build_call (expr, TREE_TYPE (tinfo_decl_type), NULL_TREE);\n   \n   return t;\n }\n@@ -439,6 +453,42 @@ ifnonnull (test, result)\n \t\tresult);\n }\n \n+/* Generate the constant expression describing where direct base BINFO\n+   appears within the PARENT. How to interpret this expression depends on\n+   details of the ABI, which the runtime must be aware of.  */\n+\n+static tree\n+get_base_offset (binfo, parent)\n+     tree binfo;\n+     tree parent;\n+{\n+  tree offset;\n+  \n+  if (!TREE_VIA_VIRTUAL (binfo))\n+    offset = BINFO_OFFSET (binfo);\n+  else if (!vbase_offsets_in_vtable_p ())\n+    {\n+      tree t = BINFO_TYPE (binfo);\n+      const char *name;\n+      tree field;\n+    \n+      FORMAT_VBASE_NAME (name, t);\n+      field = lookup_field (parent, get_identifier (name), 0, 0);\n+      offset = size_binop (FLOOR_DIV_EXPR, \n+    \t\t           DECL_FIELD_BITPOS (field), \n+    \t\t           size_int (BITS_PER_UNIT));\n+      offset = convert (sizetype, offset);\n+    }\n+  else\n+    {\n+      /* Under the new ABI, we store the vtable offset at which\n+         the virtual base offset can be found.  */\n+      tree vbase = BINFO_FOR_VBASE (BINFO_TYPE (binfo), parent);\n+      offset = convert (sizetype, BINFO_VPTR_FIELD (vbase));\n+    }\n+  return offset;\n+}\n+\n /* Execute a dynamic cast, as described in section 5.2.6 of the 9/93 working\n    paper.  */\n \n@@ -710,8 +760,7 @@ expand_si_desc (tdecl, type)\n      tree type;\n {\n   tree t, elems, fn;\n-  const char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n+  tree name_string = tinfo_name (type);\n \n   type = BINFO_TYPE (TREE_VEC_ELT (TYPE_BINFO_BASETYPES (type), 0));\n   finish_expr_stmt (get_typeid_1 (type));\n@@ -756,7 +805,6 @@ expand_class_desc (tdecl, type)\n {\n   tree name_string;\n   tree fn, tmp;\n-  const char *name;\n \n   int i = CLASSTYPE_N_BASECLASSES (type);\n   int base_cnt = 0;\n@@ -768,15 +816,14 @@ expand_class_desc (tdecl, type)\n #endif\n   tree base, elems, access, offset, isvir;\n   tree elt, elts = NULL_TREE;\n-  static tree base_info_type_node;\n \n-  if (base_info_type_node == NULL_TREE)\n+  if (base_desc_type_node == NULL_TREE)\n     {\n       tree fields [4];\n \n       /* A reasonably close approximation of __class_type_info::base_info */\n \n-      base_info_type_node = make_aggr_type (RECORD_TYPE);\n+      base_desc_type_node = make_aggr_type (RECORD_TYPE);\n \n       /* Actually const __user_type_info * */\n       fields [0] = build_lang_decl\n@@ -801,7 +848,7 @@ expand_class_desc (tdecl, type)\n       DECL_BIT_FIELD (fields[3]) = 1;\n       DECL_FIELD_SIZE (fields[3]) = 2;\n \n-      finish_builtin_type (base_info_type_node, \"__base_info\", fields,\n+      finish_builtin_type (base_desc_type_node, \"__base_info\", fields,\n \t\t\t   3, ptr_type_node);\n     }\n \n@@ -811,33 +858,8 @@ expand_class_desc (tdecl, type)\n \n       finish_expr_stmt (get_typeid_1 (BINFO_TYPE (binfo)));\n       base = decay_conversion (get_tinfo_var (BINFO_TYPE (binfo)));\n-\n-      if (TREE_VIA_VIRTUAL (binfo))\n-\t{\n-\t  if (!vbase_offsets_in_vtable_p ())\n-\t    {\n-\t      tree t = BINFO_TYPE (binfo);\n-\t      const char *name;\n-\t      tree field;\n-\n-\t      FORMAT_VBASE_NAME (name, t);\n-\t      field = lookup_field (type, get_identifier (name), 0, 0);\n-\t      offset = size_binop (FLOOR_DIV_EXPR, \n-\t\t\t\t   DECL_FIELD_BITPOS (field), \n-\t\t\t\t   size_int (BITS_PER_UNIT));\n-\t      offset = convert (sizetype, offset);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Under the new ABI, we store the vtable offset at which\n-\t\t the virtual base offset can be found.  */\n-\t      tree vbase = BINFO_FOR_VBASE (BINFO_TYPE (binfo), type);\n-\t      offset = convert (sizetype, BINFO_VPTR_FIELD (vbase));\n-\t    }\n-\t}\n-      else\n-\toffset = BINFO_OFFSET (binfo);\n-\n+      offset = get_base_offset (binfo, type);\n+      \n       if (TREE_VIA_PUBLIC (binfo))\n         access = access_public_node;\n       else if (TREE_VIA_PROTECTED (binfo))\n@@ -850,7 +872,7 @@ expand_class_desc (tdecl, type)\n \tisvir = boolean_false_node;\n \n       elt = build\n-\t(CONSTRUCTOR, base_info_type_node, NULL_TREE, tree_cons\n+\t(CONSTRUCTOR, base_desc_type_node, NULL_TREE, tree_cons\n \t (NULL_TREE, base, tree_cons\n \t  (NULL_TREE, offset, tree_cons\n \t   (NULL_TREE, isvir, tree_cons\n@@ -893,11 +915,10 @@ expand_class_desc (tdecl, type)\n     }\n #endif\n \n-  name = build_overload_name (type, 1, 1);\n-  name_string = combine_strings (build_string (strlen (name)+1, name));\n+  name_string = tinfo_name (type);\n \n   {\n-    tree arrtype = build_array_type (base_info_type_node, NULL_TREE);\n+    tree arrtype = build_array_type (base_desc_type_node, NULL_TREE);\n     elts = build (CONSTRUCTOR, arrtype, NULL_TREE, elts);\n     TREE_HAS_CONSTRUCTOR (elts) = TREE_CONSTANT (elts)\n       = TREE_STATIC (elts) = 1;\n@@ -919,7 +940,7 @@ expand_class_desc (tdecl, type)\n       tmp = tree_cons\n \t(NULL_TREE, ptr_type_node, tree_cons\n \t (NULL_TREE, const_string_type_node, tree_cons\n-\t  (NULL_TREE, build_pointer_type (base_info_type_node), tree_cons\n+\t  (NULL_TREE, build_pointer_type (base_desc_type_node), tree_cons\n \t   (NULL_TREE, sizetype, void_list_node))));\n       tmp = build_function_type\t(void_type_node, tmp);\n   \n@@ -944,8 +965,7 @@ expand_ptr_desc (tdecl, type)\n      tree type;\n {\n   tree t, elems, fn;\n-  const char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n+  tree name_string = tinfo_name (type);\n \n   type = TREE_TYPE (type);\n   finish_expr_stmt (get_typeid_1 (type));\n@@ -989,8 +1009,7 @@ expand_attr_desc (tdecl, type)\n      tree type;\n {\n   tree elems, t, fn;\n-  const char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n+  tree name_string = tinfo_name (type);\n   tree attrval = build_int_2 (TYPE_QUALS (type), 0);\n \n   finish_expr_stmt (get_typeid_1 (TYPE_MAIN_VARIANT (type)));\n@@ -1035,8 +1054,7 @@ expand_generic_desc (tdecl, type, fnname)\n      tree type;\n      const char *fnname;\n {\n-  const char *name = build_overload_name (type, 1, 1);\n-  tree name_string = combine_strings (build_string (strlen (name)+1, name));\n+  tree name_string = tinfo_name (type);\n   tree elems = tree_cons\n     (NULL_TREE, decay_conversion (tdecl), tree_cons\n      (NULL_TREE, decay_conversion (name_string), NULL_TREE));"}, {"sha": "292fb3c3ef384d8e097e23dca80142e9e6db8ea5", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -44,7 +44,7 @@ convert_to_base (void *addr, bool is_virtual, USItype offset)\n   if (!is_virtual)\n     return (char *) addr + offset;\n \n-#ifdef __GXX_ABI_VERSION\n+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n   // Under the new ABI, the offset gives us an index into the vtable,\n   // which contains an offset to the virtual base.  The vptr is always\n   // the first thing in the object."}, {"sha": "9bf06cab3d2e960d17b0a88c0ed0a15c3def00ab", "filename": "gcc/cp/tinfo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1147b2e23d260580bb08ce65259b28abe1d0fd/gcc%2Fcp%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.h?ref=db1147b2e23d260580bb08ce65259b28abe1d0fd", "patch": "@@ -167,7 +167,7 @@ class __si_type_info : public __user_type_info {\n \n // type_info for a general class.\n \n-#ifdef __GXX_ABI_VERSION\n+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n typedef int USItype __attribute__ ((mode (SI)));\n #else\n typedef unsigned int USItype\t__attribute__ ((mode (SI)));"}]}