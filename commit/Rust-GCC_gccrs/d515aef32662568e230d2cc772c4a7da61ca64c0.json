{"sha": "d515aef32662568e230d2cc772c4a7da61ca64c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxNWFlZjMyNjYyNTY4ZTIzMGQyY2M3NzJjNGE3ZGE2MWNhNjRjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:15:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:15:12Z"}, "message": "[multiple changes]\n\n2013-04-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Set_Imported): Do not generate error for multiple\n\tImport in CodePeer mode.\n\t* s-rident.ads: Fix minor typo.\n\n2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Insert_Valid_Check): Do not insert validity check\n\tin the body of the generated predicate function, to prevent\n\tinfinite recursion.\n\nFrom-SVN: r197908", "tree": {"sha": "242cb0f5cd55a55e84abcf05975c83e082b14ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242cb0f5cd55a55e84abcf05975c83e082b14ed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d515aef32662568e230d2cc772c4a7da61ca64c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d515aef32662568e230d2cc772c4a7da61ca64c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d515aef32662568e230d2cc772c4a7da61ca64c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d515aef32662568e230d2cc772c4a7da61ca64c0/comments", "author": null, "committer": null, "parents": [{"sha": "57f4c2887eb49f17bcd465879faaecf2f6234eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f4c2887eb49f17bcd465879faaecf2f6234eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f4c2887eb49f17bcd465879faaecf2f6234eae"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "e524d1c7a2778c33e4816ff77277e377928ad51b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d515aef32662568e230d2cc772c4a7da61ca64c0", "patch": "@@ -1,3 +1,15 @@\n+2013-04-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Set_Imported): Do not generate error for multiple\n+\tImport in CodePeer mode.\n+\t* s-rident.ads: Fix minor typo.\n+\n+2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Do not insert validity check\n+\tin the body of the generated predicate function, to prevent\n+\tinfinite recursion.\n+\n 2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* s-rident.ads: Add various missing Ada 2012 restrictions:"}, {"sha": "c8d900f9174d6b3e5c777f5f257e946615572c33", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d515aef32662568e230d2cc772c4a7da61ca64c0", "patch": "@@ -6228,6 +6228,7 @@ package body Checks is\n \n    procedure Insert_Valid_Check (Expr : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (Expr);\n+      Typ : constant Entity_Id  := Etype (Expr);\n       Exp : Node_Id;\n \n    begin\n@@ -6241,6 +6242,16 @@ package body Checks is\n          return;\n       end if;\n \n+      --  Do not insert checks within a predicate function.  This will arise\n+      --  if the current unit and the predicate function are  being compiled\n+      --  with  validity checks enabled.\n+\n+      if Present (Predicate_Function (Typ))\n+        and then Current_Scope = Predicate_Function (Typ)\n+      then\n+         return;\n+      end if;\n+\n       --  If we have a checked conversion, then validity check applies to\n       --  the expression inside the conversion, not the result, since if\n       --  the expression inside is valid, then so is the conversion result."}, {"sha": "480c5a573a4517b202ccaa1c1a6356b0168c9c95", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=d515aef32662568e230d2cc772c4a7da61ca64c0", "patch": "@@ -65,7 +65,7 @@\n --  The latest implementation avoids both this problem by using a named\n --  scheme for recording restrictions, rather than a positional scheme which\n --  fails completely if restrictions are added or subtracted. Now the worst\n---  that happens at bind time in incosistent builds is that unrecognized\n+--  that happens at bind time in inconsistent builds is that unrecognized\n --  restrictions are ignored, and the consistency checking for restrictions\n --  might be incomplete, which is no big deal.\n "}, {"sha": "a8d3fe589b91ac44da5bde56c65297171b6f9ccf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d515aef32662568e230d2cc772c4a7da61ca64c0/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d515aef32662568e230d2cc772c4a7da61ca64c0", "patch": "@@ -6246,6 +6246,12 @@ package body Sem_Prag is\n             if Is_Exported (E) then\n                Error_Msg_NE (\"entity& was previously exported\", N, E);\n \n+            --  Ignore error in CodePeer mode where we treat all imported\n+            --  subprograms as unknown.\n+\n+            elsif CodePeer_Mode then\n+               goto OK;\n+\n             --  OK if Import/Interface case\n \n             elsif Import_Interface_Present (N) then"}]}