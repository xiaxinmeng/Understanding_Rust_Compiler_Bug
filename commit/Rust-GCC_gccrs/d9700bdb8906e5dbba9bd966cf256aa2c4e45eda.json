{"sha": "d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3MDBiZGI4OTA2ZTVkYmJhOWJkOTY2Y2YyNTZhYTJjNGU0NWVkYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-19T07:42:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-19T07:42:19Z"}, "message": "tree-vrp.c (evrp_dom_walker::evrp_dom_walker): Initialize stmts_to_remove.\n\n2016-10-19  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (evrp_dom_walker::evrp_dom_walker): Initialize\n\tstmts_to_remove.\n\t(evrp_dom_walker::~evrp_dom_walker): Free it.\n\t(evrp_dom_walker::stmts_to_remove): Add.\n\t(evrp_dom_walker::before_dom_children): Mark PHIs and stmts\n\twhose output we fully propagate for removal.  Propagate\n\tinto BB destination PHI arguments.\n\t(execute_early_vrp): Remove queued stmts.  Dump value ranges\n\tbefore stmt removal.\n\n\t* gcc.dg/tree-ssa/pr61839_2.c: Fix testcase.\n\nFrom-SVN: r241327", "tree": {"sha": "2575a2e9a856579290cdf5913772d994ee0b05ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2575a2e9a856579290cdf5913772d994ee0b05ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae4206cb7cf8a4e261b339bdb2032fc3a109aa40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4206cb7cf8a4e261b339bdb2032fc3a109aa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4206cb7cf8a4e261b339bdb2032fc3a109aa40"}], "stats": {"total": 109, "additions": 90, "deletions": 19}, "files": [{"sha": "ba1d46060e0fa1e5619809d0ba198c2dfb8f2a10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "patch": "@@ -1,3 +1,15 @@\n+2016-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (evrp_dom_walker::evrp_dom_walker): Initialize\n+\tstmts_to_remove.\n+\t(evrp_dom_walker::~evrp_dom_walker): Free it.\n+\t(evrp_dom_walker::stmts_to_remove): Add.\n+\t(evrp_dom_walker::before_dom_children): Mark PHIs and stmts\n+\twhose output we fully propagate for removal.  Propagate\n+\tinto BB destination PHI arguments.\n+\t(execute_early_vrp): Remove queued stmts.  Dump value ranges\n+\tbefore stmt removal.\n+\n 2016-10-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* Makefile.in (OBJS): Add gimple-ssa-warn-alloca.o."}, {"sha": "df7302249832a33a1d338ab5c53118a1afc32b03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "patch": "@@ -1,3 +1,7 @@\n+2016-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr61839_2.c: Fix testcase.\n+\n 2016-10-18  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vsu/vec-all-ne-0.c: New test."}, {"sha": "638189e66e569c6d2786ed8b3e1c859d9b185c72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61839_2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61839_2.c?ref=d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "patch": "@@ -9,8 +9,8 @@ int foo ()\n   int a = -1;\n   volatile unsigned b = 1U;\n   int c = 1;\n-  c = (a + 972195718) / (b ? 1 : 0);\n-  if (c == 972195717)\n+  c = (a + 972195718) / (b ? 2 : 0);\n+  if (c == 486097858)\n     ;\n   else\n     __builtin_abort ();\n@@ -23,8 +23,8 @@ int bar ()\n   int a = -1;\n   volatile unsigned b = 1U;\n   int c = 1;\n-  c = (a + 972195718) % (b ? 1 : 0);\n-  if (c == 972195717)\n+  c = (a + 972195718) % (b ? 2 : 0);\n+  if (c == 1)\n     ;\n   else\n     __builtin_abort ();\n@@ -38,7 +38,7 @@ int bar2 ()\n   volatile unsigned b = 1U;\n   int c = 1;\n   c = (a + 972195716) % (b ? 1 : 2);\n-  if (c == 972195715)\n+  if (c == 0)\n     ;\n   else\n     __builtin_abort ();\n@@ -47,8 +47,8 @@ int bar2 ()\n \n \n /* Dont optimize 972195717 / 0 in function foo.  */\n-/* { dg-final { scan-tree-dump-times \"972195717 / _\" 1  \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \"972195717 / \" 1  \"evrp\" } } */\n /* Dont optimize 972195717 % 0 in function bar.  */\n-/* { dg-final { scan-tree-dump-times \"972195717 % _\" 1 \"evrp\" } } */\n-/* Optimize in function bar2.  */\n-/* { dg-final { scan-tree-dump-times \"972195715 % _\" 0 \"evrp\" } } */\n+/* { dg-final { scan-tree-dump-times \"972195717 % \" 1 \"evrp\" } } */\n+/* May optimize in function bar2, but EVRP doesn't perform this yet.  */\n+/* { dg-final { scan-tree-dump-times \"972195715 % \" 0 \"evrp\" { xfail *-*-* } } } */"}, {"sha": "c1750d03840f1eb3e357a18b42c1619fc8f8304d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9700bdb8906e5dbba9bd966cf256aa2c4e45eda/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d9700bdb8906e5dbba9bd966cf256aa2c4e45eda", "patch": "@@ -10642,12 +10642,10 @@ class evrp_dom_walker : public dom_walker\n   evrp_dom_walker ()\n     : dom_walker (CDI_DOMINATORS), stack (10)\n     {\n-      stmts_to_fixup.create (0);\n       need_eh_cleanup = BITMAP_ALLOC (NULL);\n     }\n   ~evrp_dom_walker ()\n     {\n-      stmts_to_fixup.release ();\n       BITMAP_FREE (need_eh_cleanup);\n     }\n   virtual edge before_dom_children (basic_block);\n@@ -10659,7 +10657,8 @@ class evrp_dom_walker : public dom_walker\n   /* Cond_stack holds the old VR.  */\n   auto_vec<std::pair <const_tree, value_range*> > stack;\n   bitmap need_eh_cleanup;\n-  vec<gimple *> stmts_to_fixup;\n+  auto_vec<gimple *> stmts_to_fixup;\n+  auto_vec<gimple *> stmts_to_remove;\n };\n \n \n@@ -10769,6 +10768,11 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       else\n \tset_value_range_to_varying (&vr_result);\n       update_value_range (lhs, &vr_result);\n+\n+      /* Mark PHIs whose lhs we fully propagate for removal.  */\n+      tree val = op_with_constant_singleton_value_range (lhs);\n+      if (val && may_propagate_copy (lhs, val))\n+\tstmts_to_remove.safe_push (phi);\n     }\n \n   edge taken_edge = NULL;\n@@ -10806,7 +10810,6 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t      update_value_range (output, &vr);\n \t      vr = *get_value_range (output);\n \n-\n \t      /* Set the SSA with the value range.  */\n \t      if (INTEGRAL_TYPE_P (TREE_TYPE (output)))\n \t\t{\n@@ -10824,6 +10827,17 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t\t\t       && range_includes_zero_p (vr.min,\n \t\t\t\t\t\t\t vr.max) == 1)))\n \t\tset_ptr_nonnull (output);\n+\n+\t      /* Mark stmts whose output we fully propagate for removal.  */\n+\t      tree val;\n+\t      if ((val = op_with_constant_singleton_value_range (output))\n+\t\t  && may_propagate_copy (output, val)\n+\t\t  && !stmt_could_throw_p (stmt)\n+\t\t  && !gimple_has_side_effects (stmt))\n+\t\t{\n+\t\t  stmts_to_remove.safe_push (stmt);\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  else\n \t    set_defs_to_varying (stmt);\n@@ -10860,6 +10874,25 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t    }\n \t}\n     }\n+\n+  /* Visit BB successor PHI nodes and replace PHI args.  */\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    {\n+      for (gphi_iterator gpi = gsi_start_phis (e->dest);\n+\t   !gsi_end_p (gpi); gsi_next (&gpi))\n+\t{\n+\t  gphi *phi = gpi.phi ();\n+\t  use_operand_p use_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, e);\n+\t  tree arg = USE_FROM_PTR (use_p);\n+\t  if (TREE_CODE (arg) != SSA_NAME\n+\t      || virtual_operand_p (arg))\n+\t    continue;\n+\t  tree val = op_with_constant_singleton_value_range (arg);\n+\t  if (val && may_propagate_copy (arg, val))\n+\t    propagate_value (use_p, val);\n+\t}\n+    }\n+ \n   bb->flags |= BB_VISITED;\n \n   return taken_edge;\n@@ -10941,6 +10974,34 @@ execute_early_vrp ()\n   evrp_dom_walker walker;\n   walker.walk (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n \n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"\\nValue ranges after Early VRP:\\n\\n\");\n+      dump_all_value_ranges (dump_file);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+\n+  /* Remove stmts in reverse order to make debug stmt creation possible.  */\n+  while (! walker.stmts_to_remove.is_empty ())\n+    {\n+      gimple *stmt = walker.stmts_to_remove.pop ();\n+      if (dump_file && dump_flags & TDF_DETAILS)\n+\t{\n+\t  fprintf (dump_file, \"Removing dead stmt \");\n+\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+      if (gimple_code (stmt) == GIMPLE_PHI)\n+\tremove_phi_node (&gsi, true);\n+      else\n+\t{\n+\t  unlink_stmt_vdef (stmt);\n+\t  gsi_remove (&gsi, true);\n+\t  release_defs (stmt);\n+\t}\n+    }\n+\n   if (!bitmap_empty_p (walker.need_eh_cleanup))\n     gimple_purge_all_dead_eh_edges (walker.need_eh_cleanup);\n \n@@ -10954,12 +11015,6 @@ execute_early_vrp ()\n       fixup_noreturn_call (stmt);\n     }\n \n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"\\nValue ranges after Early VRP:\\n\\n\");\n-      dump_all_value_ranges (dump_file);\n-      fprintf (dump_file, \"\\n\");\n-    }\n   vrp_free_lattice ();\n   scev_finalize ();\n   loop_optimizer_finalize ();"}]}