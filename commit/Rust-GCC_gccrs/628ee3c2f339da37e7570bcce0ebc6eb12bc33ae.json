{"sha": "628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4ZWUzYzJmMzM5ZGEzN2U3NTcwYmNjZTBlYmM2ZWIxMmJjMzNhZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-02-04T00:44:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-02-04T02:13:28Z"}, "message": "libbacktrace: always pass -g when compiling test code\n\nThis approach required adding a few casts to ztest.c, as it is now\ncompiled with -Wall.\n\nFixes PR libbacktrace/90636", "tree": {"sha": "366c184656a557546b4f4bd3231abaf8f1f41982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366c184656a557546b4f4bd3231abaf8f1f41982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b117ad0c394ec13c7d3c98a29b475a0379c5297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b117ad0c394ec13c7d3c98a29b475a0379c5297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b117ad0c394ec13c7d3c98a29b475a0379c5297"}], "stats": {"total": 384, "additions": 320, "deletions": 64}, "files": [{"sha": "364575660541911af3f8def5bc9a4c743d07904e", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "patch": "@@ -1,3 +1,18 @@\n+2020-02-03  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (libbacktrace_TEST_CFLAGS): Define.\n+\t(test_elf32_CFLAGS): Use $(libbacktrace_test_CFLAGS).\n+\t(test_elf_64_CFLAGS, test_xcoff_32_CFLAGS): Likewise.\n+\t(test_xcoff_64_CFLAGS, test_pecoff_CFLAGS): Likewise.\n+\t(test_unknown_CFLAGS, unittest_CFLAGS): Likewise.\n+\t(unittest_alloc_CFLAGS, allocfail_CFLAGS): Likewise.\n+\t(b2test_CFLAGS, b3test_CFLAGS, btest_CFLAGS): Likewise.\n+\t(btest_lto_CFLAGS, btest_alloc_CFLAGS, stest_CFLAGS): Likewise.\n+\t(stest_alloc_CFLAGS): Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* ztest.c (error_callback_compress): Mark vdata unused.\n+\t(test_large): Add casts to avoid warnings.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "c73f6633a7685f81986e45399330cfbfffa2f978", "filename": "libbacktrace/Makefile.am", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.am?ref=628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "patch": "@@ -93,6 +93,9 @@ TESTS =\n # Add test to this variable, if you want it to be build and run.\n BUILDTESTS =\n \n+# Flags to use when compiling test programs.\n+libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n+\n if NATIVE\n check_LTLIBRARIES = libbacktrace_alloc.la\n \n@@ -149,41 +152,49 @@ xcoff_%.c: xcoff.c\n \tmv $@.tmp $@\n \n test_elf_32_SOURCES = test_format.c testlib.c\n+test_elf_32_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_elf_32_LDADD = libbacktrace_noformat.la elf_32.lo\n \n BUILDTESTS += test_elf_32\n \n test_elf_64_SOURCES = test_format.c testlib.c\n+test_elf_64_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_elf_64_LDADD = libbacktrace_noformat.la elf_64.lo\n \n BUILDTESTS += test_elf_64\n \n test_xcoff_32_SOURCES = test_format.c testlib.c\n+test_xcoff_32_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_xcoff_32_LDADD = libbacktrace_noformat.la xcoff_32.lo\n \n BUILDTESTS += test_xcoff_32\n \n test_xcoff_64_SOURCES = test_format.c testlib.c\n+test_xcoff_64_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_xcoff_64_LDADD = libbacktrace_noformat.la xcoff_64.lo\n \n BUILDTESTS += test_xcoff_64\n \n test_pecoff_SOURCES = test_format.c testlib.c\n+test_pecoff_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_pecoff_LDADD = libbacktrace_noformat.la pecoff.lo\n \n BUILDTESTS += test_pecoff\n \n test_unknown_SOURCES = test_format.c testlib.c\n+test_unknown_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n test_unknown_LDADD = libbacktrace_noformat.la unknown.lo\n \n BUILDTESTS += test_unknown\n \n unittest_SOURCES = unittest.c testlib.c\n+unittest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n unittest_LDADD = libbacktrace.la\n \n BUILDTESTS += unittest\n \n unittest_alloc_SOURCES = $(unittest_SOURCES)\n+unittest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n unittest_alloc_LDADD = libbacktrace_alloc.la\n \n BUILDTESTS += unittest_alloc\n@@ -200,6 +211,7 @@ libbacktrace_instrumented_alloc_la_DEPENDENCIES = \\\n instrumented_alloc.lo: alloc.c\n \n allocfail_SOURCES = allocfail.c testlib.c\n+allocfail_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n allocfail_LDADD = libbacktrace_instrumented_alloc.la\n \n check_PROGRAMS += allocfail\n@@ -212,7 +224,7 @@ if HAVE_ELF\n if HAVE_OBJCOPY_DEBUGLINK\n \n b2test_SOURCES = $(btest_SOURCES)\n-b2test_CFLAGS = $(btest_CFLAGS)\n+b2test_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n b2test_LDFLAGS = -Wl,--build-id\n b2test_LDADD = libbacktrace_elf_for_test.la\n \n@@ -222,7 +234,7 @@ TESTS += b2test_buildid\n if HAVE_DWZ\n \n b3test_SOURCES = $(btest_SOURCES)\n-b3test_CFLAGS = $(btest_CFLAGS)\n+b3test_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n b3test_LDFLAGS = -Wl,--build-id\n b3test_LDADD = libbacktrace_elf_for_test.la\n \n@@ -235,23 +247,23 @@ endif HAVE_OBJCOPY_DEBUGLINK\n endif HAVE_ELF\n \n btest_SOURCES = btest.c testlib.c\n-btest_CFLAGS = $(AM_CFLAGS) -g -O\n+btest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -O\n btest_LDADD = libbacktrace.la\n \n BUILDTESTS += btest\n \n if HAVE_ELF\n \n btest_lto_SOURCES = btest.c testlib.c\n-btest_lto_CFLAGS = $(AM_CFLAGS) -g -O -flto\n+btest_lto_CFLAGS = $(libbacktrace_TEST_CFLAGS) -O -flto\n btest_lto_LDADD = libbacktrace.la\n \n BUILDTESTS += btest_lto\n \n endif HAVE_ELF\n \n btest_alloc_SOURCES = $(btest_SOURCES)\n-btest_alloc_CFLAGS = $(btest_CFLAGS)\n+btest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n btest_alloc_LDADD = libbacktrace_alloc.la\n \n BUILDTESTS += btest_alloc\n@@ -277,19 +289,21 @@ endif HAVE_OBJCOPY_DEBUGLINK\n endif HAVE_DWZ\n \n stest_SOURCES = stest.c\n+stest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n stest_LDADD = libbacktrace.la\n \n BUILDTESTS += stest\n \n stest_alloc_SOURCES = $(stest_SOURCES)\n+stest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n stest_alloc_LDADD = libbacktrace_alloc.la\n \n BUILDTESTS += stest_alloc\n \n if HAVE_ELF\n \n ztest_SOURCES = ztest.c testlib.c\n-ztest_CFLAGS = -DSRCDIR=\\\"$(srcdir)\\\"\n+ztest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -DSRCDIR=\\\"$(srcdir)\\\"\n ztest_LDADD = libbacktrace.la\n ztest_alloc_LDADD = libbacktrace_alloc.la\n \n@@ -310,11 +324,13 @@ BUILDTESTS += ztest_alloc\n endif HAVE_ELF\n \n edtest_SOURCES = edtest.c edtest2_build.c testlib.c\n+edtest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n edtest_LDADD = libbacktrace.la\n \n BUILDTESTS += edtest\n \n edtest_alloc_SOURCES = $(edtest_SOURCES)\n+edtest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n edtest_alloc_LDADD = libbacktrace_alloc.la\n \n BUILDTESTS += edtest_alloc\n@@ -330,7 +346,7 @@ if HAVE_PTHREAD\n BUILDTESTS += ttest\n \n ttest_SOURCES = ttest.c testlib.c\n-ttest_CFLAGS = $(AM_CFLAGS) -pthread\n+ttest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -pthread\n ttest_LDADD = libbacktrace.la\n \n BUILDTESTS += ttest_alloc\n@@ -360,12 +376,12 @@ endif HAVE_OBJCOPY_DEBUGLINK\n if HAVE_COMPRESSED_DEBUG\n \n ctestg_SOURCES = btest.c testlib.c\n-ctestg_CFLAGS = $(AM_CFLAGS) -g\n+ctestg_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n ctestg_LDFLAGS = -Wl,--compress-debug-sections=zlib-gnu\n ctestg_LDADD = libbacktrace.la\n \n ctesta_SOURCES = btest.c testlib.c\n-ctesta_CFLAGS = $(AM_CFLAGS) -g\n+ctesta_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n ctesta_LDFLAGS = -Wl,--compress-debug-sections=zlib-gabi\n ctesta_LDADD = libbacktrace.la\n \n@@ -388,7 +404,7 @@ endif\n if HAVE_DWARF5\n \n dwarf5_SOURCES = btest.c testlib.c\n-dwarf5_CFLAGS = $(AM_CFLAGS) -gdwarf-5\n+dwarf5_CFLAGS = $(libbacktrace_TEST_CFLAGS) -gdwarf-5\n dwarf5_LDADD = libbacktrace.la\n \n BUILDTESTS += dwarf5"}, {"sha": "1178ac4cc239a4559d8fe4a655ff77ce83a32ddb", "filename": "libbacktrace/Makefile.in", "status": "modified", "additions": 268, "deletions": 47, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FMakefile.in?ref=628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "patch": "@@ -15,7 +15,7 @@\n @SET_MAKE@\n \n # Makefile.am -- Backtrace Makefile.\n-# Copyright (C) 2012-2019 Free Software Foundation, Inc.\n+# Copyright (C) 2012-2020 Free Software Foundation, Inc.\n \n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions are\n@@ -230,11 +230,14 @@ libbacktrace_noformat_la_OBJECTS =  \\\n am__EXEEXT_12 = $(am__EXEEXT_4) $(am__EXEEXT_5) $(am__EXEEXT_6) \\\n \t$(am__EXEEXT_7) $(am__EXEEXT_8) $(am__EXEEXT_9) \\\n \t$(am__EXEEXT_10) $(am__EXEEXT_11)\n-@NATIVE_TRUE@am_allocfail_OBJECTS = allocfail.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+@NATIVE_TRUE@am_allocfail_OBJECTS = allocfail-allocfail.$(OBJEXT) \\\n+@NATIVE_TRUE@\tallocfail-testlib.$(OBJEXT)\n allocfail_OBJECTS = $(am_allocfail_OBJECTS)\n @NATIVE_TRUE@allocfail_DEPENDENCIES =  \\\n @NATIVE_TRUE@\tlibbacktrace_instrumented_alloc.la\n+allocfail_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(allocfail_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n @NATIVE_TRUE@am__objects_2 = b2test-btest.$(OBJEXT) \\\n @NATIVE_TRUE@\tb2test-testlib.$(OBJEXT)\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@am_b2test_OBJECTS = $(am__objects_2)\n@@ -327,52 +330,90 @@ dwarf5_alloc_OBJECTS = $(am_dwarf5_alloc_OBJECTS)\n dwarf5_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(dwarf5_alloc_CFLAGS) \\\n \t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n-@NATIVE_TRUE@am_edtest_OBJECTS = edtest.$(OBJEXT) \\\n-@NATIVE_TRUE@\tedtest2_build.$(OBJEXT) testlib.$(OBJEXT)\n+@NATIVE_TRUE@am_edtest_OBJECTS = edtest-edtest.$(OBJEXT) \\\n+@NATIVE_TRUE@\tedtest-edtest2_build.$(OBJEXT) \\\n+@NATIVE_TRUE@\tedtest-testlib.$(OBJEXT)\n edtest_OBJECTS = $(am_edtest_OBJECTS)\n @NATIVE_TRUE@edtest_DEPENDENCIES = libbacktrace.la\n-@NATIVE_TRUE@am__objects_8 = edtest.$(OBJEXT) edtest2_build.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+edtest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(edtest_CFLAGS) $(CFLAGS) \\\n+\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am__objects_8 = edtest_alloc-edtest.$(OBJEXT) \\\n+@NATIVE_TRUE@\tedtest_alloc-edtest2_build.$(OBJEXT) \\\n+@NATIVE_TRUE@\tedtest_alloc-testlib.$(OBJEXT)\n @NATIVE_TRUE@am_edtest_alloc_OBJECTS = $(am__objects_8)\n edtest_alloc_OBJECTS = $(am_edtest_alloc_OBJECTS)\n @NATIVE_TRUE@edtest_alloc_DEPENDENCIES = libbacktrace_alloc.la\n-@NATIVE_TRUE@am_stest_OBJECTS = stest.$(OBJEXT)\n+edtest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(edtest_alloc_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_stest_OBJECTS = stest-stest.$(OBJEXT)\n stest_OBJECTS = $(am_stest_OBJECTS)\n @NATIVE_TRUE@stest_DEPENDENCIES = libbacktrace.la\n-@NATIVE_TRUE@am__objects_9 = stest.$(OBJEXT)\n+stest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(stest_CFLAGS) $(CFLAGS) \\\n+\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am__objects_9 = stest_alloc-stest.$(OBJEXT)\n @NATIVE_TRUE@am_stest_alloc_OBJECTS = $(am__objects_9)\n stest_alloc_OBJECTS = $(am_stest_alloc_OBJECTS)\n @NATIVE_TRUE@stest_alloc_DEPENDENCIES = libbacktrace_alloc.la\n-@NATIVE_TRUE@am_test_elf_32_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+stest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(stest_alloc_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_elf_32_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_elf_32-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_elf_32-testlib.$(OBJEXT)\n test_elf_32_OBJECTS = $(am_test_elf_32_OBJECTS)\n @NATIVE_TRUE@test_elf_32_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\telf_32.lo\n-@NATIVE_TRUE@am_test_elf_64_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_elf_32_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_elf_32_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_elf_64_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_elf_64-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_elf_64-testlib.$(OBJEXT)\n test_elf_64_OBJECTS = $(am_test_elf_64_OBJECTS)\n @NATIVE_TRUE@test_elf_64_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\telf_64.lo\n-@NATIVE_TRUE@am_test_pecoff_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_elf_64_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_elf_64_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_pecoff_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_pecoff-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_pecoff-testlib.$(OBJEXT)\n test_pecoff_OBJECTS = $(am_test_pecoff_OBJECTS)\n @NATIVE_TRUE@test_pecoff_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\tpecoff.lo\n-@NATIVE_TRUE@am_test_unknown_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_pecoff_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_pecoff_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_unknown_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_unknown-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_unknown-testlib.$(OBJEXT)\n test_unknown_OBJECTS = $(am_test_unknown_OBJECTS)\n @NATIVE_TRUE@test_unknown_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\tunknown.lo\n-@NATIVE_TRUE@am_test_xcoff_32_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_unknown_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_unknown_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_xcoff_32_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_xcoff_32-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_xcoff_32-testlib.$(OBJEXT)\n test_xcoff_32_OBJECTS = $(am_test_xcoff_32_OBJECTS)\n @NATIVE_TRUE@test_xcoff_32_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\txcoff_32.lo\n-@NATIVE_TRUE@am_test_xcoff_64_OBJECTS = test_format.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+test_xcoff_32_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_xcoff_32_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am_test_xcoff_64_OBJECTS =  \\\n+@NATIVE_TRUE@\ttest_xcoff_64-test_format.$(OBJEXT) \\\n+@NATIVE_TRUE@\ttest_xcoff_64-testlib.$(OBJEXT)\n test_xcoff_64_OBJECTS = $(am_test_xcoff_64_OBJECTS)\n @NATIVE_TRUE@test_xcoff_64_DEPENDENCIES = libbacktrace_noformat.la \\\n @NATIVE_TRUE@\txcoff_64.lo\n+test_xcoff_64_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(test_xcoff_64_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@am_ttest_OBJECTS =  \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest-ttest.$(OBJEXT) \\\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@\tttest-testlib.$(OBJEXT)\n@@ -392,14 +433,22 @@ ttest_alloc_OBJECTS = $(am_ttest_alloc_OBJECTS)\n ttest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(ttest_alloc_CFLAGS) \\\n \t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n-@NATIVE_TRUE@am_unittest_OBJECTS = unittest.$(OBJEXT) \\\n-@NATIVE_TRUE@\ttestlib.$(OBJEXT)\n+@NATIVE_TRUE@am_unittest_OBJECTS = unittest-unittest.$(OBJEXT) \\\n+@NATIVE_TRUE@\tunittest-testlib.$(OBJEXT)\n unittest_OBJECTS = $(am_unittest_OBJECTS)\n @NATIVE_TRUE@unittest_DEPENDENCIES = libbacktrace.la\n-@NATIVE_TRUE@am__objects_11 = unittest.$(OBJEXT) testlib.$(OBJEXT)\n+unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(unittest_CFLAGS) \\\n+\t$(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@\n+@NATIVE_TRUE@am__objects_11 = unittest_alloc-unittest.$(OBJEXT) \\\n+@NATIVE_TRUE@\tunittest_alloc-testlib.$(OBJEXT)\n @NATIVE_TRUE@am_unittest_alloc_OBJECTS = $(am__objects_11)\n unittest_alloc_OBJECTS = $(am_unittest_alloc_OBJECTS)\n @NATIVE_TRUE@unittest_alloc_DEPENDENCIES = libbacktrace_alloc.la\n+unittest_alloc_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CCLD) \\\n+\t$(unittest_alloc_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \\\n+\t$@\n @HAVE_ELF_TRUE@@NATIVE_TRUE@am_ztest_OBJECTS = ztest-ztest.$(OBJEXT) \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\tztest-testlib.$(OBJEXT)\n ztest_OBJECTS = $(am_ztest_OBJECTS)\n@@ -887,6 +936,9 @@ libbacktrace_la_DEPENDENCIES = $(libbacktrace_la_LIBADD)\n BUILDTESTS = $(am__append_2) $(am__append_9) $(am__append_10) \\\n \t$(am__append_15) $(am__append_16) $(am__append_17) \\\n \t$(am__append_19) $(am__append_20)\n+\n+# Flags to use when compiling test programs.\n+libbacktrace_TEST_CFLAGS = $(EXTRA_FLAGS) $(WARN_FLAGS) -g\n @NATIVE_TRUE@check_LTLIBRARIES = libbacktrace_alloc.la \\\n @NATIVE_TRUE@\tlibbacktrace_noformat.la $(am__append_1) \\\n @NATIVE_TRUE@\tlibbacktrace_instrumented_alloc.la\n@@ -902,20 +954,28 @@ BUILDTESTS = $(am__append_2) $(am__append_9) $(am__append_10) \\\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@\t$(VIEW_FILE) $(ALLOC_FILE)\n \n @NATIVE_TRUE@test_elf_32_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_elf_32_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_elf_32_LDADD = libbacktrace_noformat.la elf_32.lo\n @NATIVE_TRUE@test_elf_64_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_elf_64_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_elf_64_LDADD = libbacktrace_noformat.la elf_64.lo\n @NATIVE_TRUE@test_xcoff_32_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_xcoff_32_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_xcoff_32_LDADD = libbacktrace_noformat.la xcoff_32.lo\n @NATIVE_TRUE@test_xcoff_64_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_xcoff_64_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_xcoff_64_LDADD = libbacktrace_noformat.la xcoff_64.lo\n @NATIVE_TRUE@test_pecoff_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_pecoff_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_pecoff_LDADD = libbacktrace_noformat.la pecoff.lo\n @NATIVE_TRUE@test_unknown_SOURCES = test_format.c testlib.c\n+@NATIVE_TRUE@test_unknown_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@test_unknown_LDADD = libbacktrace_noformat.la unknown.lo\n @NATIVE_TRUE@unittest_SOURCES = unittest.c testlib.c\n+@NATIVE_TRUE@unittest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@unittest_LDADD = libbacktrace.la\n @NATIVE_TRUE@unittest_alloc_SOURCES = $(unittest_SOURCES)\n+@NATIVE_TRUE@unittest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@unittest_alloc_LDADD = libbacktrace_alloc.la\n @NATIVE_TRUE@libbacktrace_instrumented_alloc_la_SOURCES = $(libbacktrace_la_SOURCES)\n @NATIVE_TRUE@libbacktrace_instrumented_alloc_la_LIBADD = $(BACKTRACE_FILE) $(FORMAT_FILE) \\\n@@ -925,30 +985,33 @@ BUILDTESTS = $(am__append_2) $(am__append_9) $(am__append_10) \\\n @NATIVE_TRUE@\t$(libbacktrace_instrumented_alloc_la_LIBADD)\n \n @NATIVE_TRUE@allocfail_SOURCES = allocfail.c testlib.c\n+@NATIVE_TRUE@allocfail_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@allocfail_LDADD = libbacktrace_instrumented_alloc.la\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b2test_SOURCES = $(btest_SOURCES)\n-@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b2test_CFLAGS = $(btest_CFLAGS)\n+@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b2test_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b2test_LDFLAGS = -Wl,--build-id\n @HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b2test_LDADD = libbacktrace_elf_for_test.la\n @HAVE_DWZ_TRUE@@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b3test_SOURCES = $(btest_SOURCES)\n-@HAVE_DWZ_TRUE@@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b3test_CFLAGS = $(btest_CFLAGS)\n+@HAVE_DWZ_TRUE@@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b3test_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @HAVE_DWZ_TRUE@@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b3test_LDFLAGS = -Wl,--build-id\n @HAVE_DWZ_TRUE@@HAVE_ELF_TRUE@@HAVE_OBJCOPY_DEBUGLINK_TRUE@@NATIVE_TRUE@b3test_LDADD = libbacktrace_elf_for_test.la\n @NATIVE_TRUE@btest_SOURCES = btest.c testlib.c\n-@NATIVE_TRUE@btest_CFLAGS = $(AM_CFLAGS) -g -O\n+@NATIVE_TRUE@btest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -O\n @NATIVE_TRUE@btest_LDADD = libbacktrace.la\n @HAVE_ELF_TRUE@@NATIVE_TRUE@btest_lto_SOURCES = btest.c testlib.c\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@btest_lto_CFLAGS = $(AM_CFLAGS) -g -O -flto\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@btest_lto_CFLAGS = $(libbacktrace_TEST_CFLAGS) -O -flto\n @HAVE_ELF_TRUE@@NATIVE_TRUE@btest_lto_LDADD = libbacktrace.la\n @NATIVE_TRUE@btest_alloc_SOURCES = $(btest_SOURCES)\n-@NATIVE_TRUE@btest_alloc_CFLAGS = $(btest_CFLAGS)\n+@NATIVE_TRUE@btest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@btest_alloc_LDADD = libbacktrace_alloc.la\n @NATIVE_TRUE@stest_SOURCES = stest.c\n+@NATIVE_TRUE@stest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@stest_LDADD = libbacktrace.la\n @NATIVE_TRUE@stest_alloc_SOURCES = $(stest_SOURCES)\n+@NATIVE_TRUE@stest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@stest_alloc_LDADD = libbacktrace_alloc.la\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_SOURCES = ztest.c testlib.c\n-@HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_CFLAGS = -DSRCDIR=\\\"$(srcdir)\\\"\n+@HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -DSRCDIR=\\\"$(srcdir)\\\"\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_LDADD = libbacktrace.la \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(am__append_13) \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@\t$(CLOCK_GETTIME_LINK)\n@@ -958,21 +1021,23 @@ BUILDTESTS = $(am__append_2) $(am__append_9) $(am__append_10) \\\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_alloc_SOURCES = $(ztest_SOURCES)\n @HAVE_ELF_TRUE@@NATIVE_TRUE@ztest_alloc_CFLAGS = $(ztest_CFLAGS)\n @NATIVE_TRUE@edtest_SOURCES = edtest.c edtest2_build.c testlib.c\n+@NATIVE_TRUE@edtest_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@edtest_LDADD = libbacktrace.la\n @NATIVE_TRUE@edtest_alloc_SOURCES = $(edtest_SOURCES)\n+@NATIVE_TRUE@edtest_alloc_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @NATIVE_TRUE@edtest_alloc_LDADD = libbacktrace_alloc.la\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_SOURCES = ttest.c testlib.c\n-@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_CFLAGS = $(AM_CFLAGS) -pthread\n+@HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_CFLAGS = $(libbacktrace_TEST_CFLAGS) -pthread\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_LDADD = libbacktrace.la\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_alloc_SOURCES = $(ttest_SOURCES)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_alloc_CFLAGS = $(ttest_CFLAGS)\n @HAVE_PTHREAD_TRUE@@NATIVE_TRUE@ttest_alloc_LDADD = libbacktrace_alloc.la\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_SOURCES = btest.c testlib.c\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_CFLAGS = $(AM_CFLAGS) -g\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_LDFLAGS = -Wl,--compress-debug-sections=zlib-gnu\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_LDADD = libbacktrace.la\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_SOURCES = btest.c testlib.c\n-@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_CFLAGS = $(AM_CFLAGS) -g\n+@HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_CFLAGS = $(libbacktrace_TEST_CFLAGS)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_LDFLAGS = -Wl,--compress-debug-sections=zlib-gabi\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_LDADD = libbacktrace.la\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctestg_alloc_SOURCES = $(ctestg_SOURCES)\n@@ -984,7 +1049,7 @@ BUILDTESTS = $(am__append_2) $(am__append_9) $(am__append_10) \\\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_alloc_LDFLAGS = $(ctesta_LDFLAGS)\n @HAVE_COMPRESSED_DEBUG_TRUE@@NATIVE_TRUE@ctesta_alloc_LDADD = libbacktrace_alloc.la\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_SOURCES = btest.c testlib.c\n-@HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_CFLAGS = $(AM_CFLAGS) -gdwarf-5\n+@HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_CFLAGS = $(libbacktrace_TEST_CFLAGS) -gdwarf-5\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_LDADD = libbacktrace.la\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_alloc_SOURCES = $(dwarf5_SOURCES)\n @HAVE_DWARF5_TRUE@@NATIVE_TRUE@dwarf5_alloc_CFLAGS = $(dwarf5_CFLAGS)\n@@ -1116,7 +1181,7 @@ clean-checkPROGRAMS:\n \n allocfail$(EXEEXT): $(allocfail_OBJECTS) $(allocfail_DEPENDENCIES) $(EXTRA_allocfail_DEPENDENCIES) \n \t@rm -f allocfail$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(allocfail_OBJECTS) $(allocfail_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(allocfail_LINK) $(allocfail_OBJECTS) $(allocfail_LDADD) $(LIBS)\n \n b2test$(EXEEXT): $(b2test_OBJECTS) $(b2test_DEPENDENCIES) $(EXTRA_b2test_DEPENDENCIES) \n \t@rm -f b2test$(EXEEXT)\n@@ -1164,43 +1229,43 @@ dwarf5_alloc$(EXEEXT): $(dwarf5_alloc_OBJECTS) $(dwarf5_alloc_DEPENDENCIES) $(EX\n \n edtest$(EXEEXT): $(edtest_OBJECTS) $(edtest_DEPENDENCIES) $(EXTRA_edtest_DEPENDENCIES) \n \t@rm -f edtest$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(edtest_OBJECTS) $(edtest_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(edtest_LINK) $(edtest_OBJECTS) $(edtest_LDADD) $(LIBS)\n \n edtest_alloc$(EXEEXT): $(edtest_alloc_OBJECTS) $(edtest_alloc_DEPENDENCIES) $(EXTRA_edtest_alloc_DEPENDENCIES) \n \t@rm -f edtest_alloc$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(edtest_alloc_OBJECTS) $(edtest_alloc_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(edtest_alloc_LINK) $(edtest_alloc_OBJECTS) $(edtest_alloc_LDADD) $(LIBS)\n \n stest$(EXEEXT): $(stest_OBJECTS) $(stest_DEPENDENCIES) $(EXTRA_stest_DEPENDENCIES) \n \t@rm -f stest$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(stest_OBJECTS) $(stest_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(stest_LINK) $(stest_OBJECTS) $(stest_LDADD) $(LIBS)\n \n stest_alloc$(EXEEXT): $(stest_alloc_OBJECTS) $(stest_alloc_DEPENDENCIES) $(EXTRA_stest_alloc_DEPENDENCIES) \n \t@rm -f stest_alloc$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(stest_alloc_OBJECTS) $(stest_alloc_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(stest_alloc_LINK) $(stest_alloc_OBJECTS) $(stest_alloc_LDADD) $(LIBS)\n \n test_elf_32$(EXEEXT): $(test_elf_32_OBJECTS) $(test_elf_32_DEPENDENCIES) $(EXTRA_test_elf_32_DEPENDENCIES) \n \t@rm -f test_elf_32$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_elf_32_OBJECTS) $(test_elf_32_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_elf_32_LINK) $(test_elf_32_OBJECTS) $(test_elf_32_LDADD) $(LIBS)\n \n test_elf_64$(EXEEXT): $(test_elf_64_OBJECTS) $(test_elf_64_DEPENDENCIES) $(EXTRA_test_elf_64_DEPENDENCIES) \n \t@rm -f test_elf_64$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_elf_64_OBJECTS) $(test_elf_64_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_elf_64_LINK) $(test_elf_64_OBJECTS) $(test_elf_64_LDADD) $(LIBS)\n \n test_pecoff$(EXEEXT): $(test_pecoff_OBJECTS) $(test_pecoff_DEPENDENCIES) $(EXTRA_test_pecoff_DEPENDENCIES) \n \t@rm -f test_pecoff$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_pecoff_OBJECTS) $(test_pecoff_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_pecoff_LINK) $(test_pecoff_OBJECTS) $(test_pecoff_LDADD) $(LIBS)\n \n test_unknown$(EXEEXT): $(test_unknown_OBJECTS) $(test_unknown_DEPENDENCIES) $(EXTRA_test_unknown_DEPENDENCIES) \n \t@rm -f test_unknown$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_unknown_OBJECTS) $(test_unknown_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_unknown_LINK) $(test_unknown_OBJECTS) $(test_unknown_LDADD) $(LIBS)\n \n test_xcoff_32$(EXEEXT): $(test_xcoff_32_OBJECTS) $(test_xcoff_32_DEPENDENCIES) $(EXTRA_test_xcoff_32_DEPENDENCIES) \n \t@rm -f test_xcoff_32$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_xcoff_32_OBJECTS) $(test_xcoff_32_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_xcoff_32_LINK) $(test_xcoff_32_OBJECTS) $(test_xcoff_32_LDADD) $(LIBS)\n \n test_xcoff_64$(EXEEXT): $(test_xcoff_64_OBJECTS) $(test_xcoff_64_DEPENDENCIES) $(EXTRA_test_xcoff_64_DEPENDENCIES) \n \t@rm -f test_xcoff_64$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(test_xcoff_64_OBJECTS) $(test_xcoff_64_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(test_xcoff_64_LINK) $(test_xcoff_64_OBJECTS) $(test_xcoff_64_LDADD) $(LIBS)\n \n ttest$(EXEEXT): $(ttest_OBJECTS) $(ttest_DEPENDENCIES) $(EXTRA_ttest_DEPENDENCIES) \n \t@rm -f ttest$(EXEEXT)\n@@ -1212,11 +1277,11 @@ ttest_alloc$(EXEEXT): $(ttest_alloc_OBJECTS) $(ttest_alloc_DEPENDENCIES) $(EXTRA\n \n unittest$(EXEEXT): $(unittest_OBJECTS) $(unittest_DEPENDENCIES) $(EXTRA_unittest_DEPENDENCIES) \n \t@rm -f unittest$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(unittest_OBJECTS) $(unittest_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(unittest_LINK) $(unittest_OBJECTS) $(unittest_LDADD) $(LIBS)\n \n unittest_alloc$(EXEEXT): $(unittest_alloc_OBJECTS) $(unittest_alloc_DEPENDENCIES) $(EXTRA_unittest_alloc_DEPENDENCIES) \n \t@rm -f unittest_alloc$(EXEEXT)\n-\t$(AM_V_CCLD)$(LINK) $(unittest_alloc_OBJECTS) $(unittest_alloc_LDADD) $(LIBS)\n+\t$(AM_V_CCLD)$(unittest_alloc_LINK) $(unittest_alloc_OBJECTS) $(unittest_alloc_LDADD) $(LIBS)\n \n ztest$(EXEEXT): $(ztest_OBJECTS) $(ztest_DEPENDENCIES) $(EXTRA_ztest_DEPENDENCIES) \n \t@rm -f ztest$(EXEEXT)\n@@ -1241,6 +1306,18 @@ distclean-compile:\n .c.lo:\n \t$(AM_V_CC)$(LTCOMPILE) -c -o $@ $<\n \n+allocfail-allocfail.o: allocfail.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allocfail_CFLAGS) $(CFLAGS) -c -o allocfail-allocfail.o `test -f 'allocfail.c' || echo '$(srcdir)/'`allocfail.c\n+\n+allocfail-allocfail.obj: allocfail.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allocfail_CFLAGS) $(CFLAGS) -c -o allocfail-allocfail.obj `if test -f 'allocfail.c'; then $(CYGPATH_W) 'allocfail.c'; else $(CYGPATH_W) '$(srcdir)/allocfail.c'; fi`\n+\n+allocfail-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allocfail_CFLAGS) $(CFLAGS) -c -o allocfail-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+allocfail-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(allocfail_CFLAGS) $(CFLAGS) -c -o allocfail-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n b2test-btest.o: btest.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(b2test_CFLAGS) $(CFLAGS) -c -o b2test-btest.o `test -f 'btest.c' || echo '$(srcdir)/'`btest.c\n \n@@ -1373,6 +1450,126 @@ dwarf5_alloc-testlib.o: testlib.c\n dwarf5_alloc-testlib.obj: testlib.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(dwarf5_alloc_CFLAGS) $(CFLAGS) -c -o dwarf5_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n \n+edtest-edtest.o: edtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-edtest.o `test -f 'edtest.c' || echo '$(srcdir)/'`edtest.c\n+\n+edtest-edtest.obj: edtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-edtest.obj `if test -f 'edtest.c'; then $(CYGPATH_W) 'edtest.c'; else $(CYGPATH_W) '$(srcdir)/edtest.c'; fi`\n+\n+edtest-edtest2_build.o: edtest2_build.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-edtest2_build.o `test -f 'edtest2_build.c' || echo '$(srcdir)/'`edtest2_build.c\n+\n+edtest-edtest2_build.obj: edtest2_build.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-edtest2_build.obj `if test -f 'edtest2_build.c'; then $(CYGPATH_W) 'edtest2_build.c'; else $(CYGPATH_W) '$(srcdir)/edtest2_build.c'; fi`\n+\n+edtest-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+edtest-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_CFLAGS) $(CFLAGS) -c -o edtest-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+edtest_alloc-edtest.o: edtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-edtest.o `test -f 'edtest.c' || echo '$(srcdir)/'`edtest.c\n+\n+edtest_alloc-edtest.obj: edtest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-edtest.obj `if test -f 'edtest.c'; then $(CYGPATH_W) 'edtest.c'; else $(CYGPATH_W) '$(srcdir)/edtest.c'; fi`\n+\n+edtest_alloc-edtest2_build.o: edtest2_build.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-edtest2_build.o `test -f 'edtest2_build.c' || echo '$(srcdir)/'`edtest2_build.c\n+\n+edtest_alloc-edtest2_build.obj: edtest2_build.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-edtest2_build.obj `if test -f 'edtest2_build.c'; then $(CYGPATH_W) 'edtest2_build.c'; else $(CYGPATH_W) '$(srcdir)/edtest2_build.c'; fi`\n+\n+edtest_alloc-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+edtest_alloc-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(edtest_alloc_CFLAGS) $(CFLAGS) -c -o edtest_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+stest-stest.o: stest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stest_CFLAGS) $(CFLAGS) -c -o stest-stest.o `test -f 'stest.c' || echo '$(srcdir)/'`stest.c\n+\n+stest-stest.obj: stest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stest_CFLAGS) $(CFLAGS) -c -o stest-stest.obj `if test -f 'stest.c'; then $(CYGPATH_W) 'stest.c'; else $(CYGPATH_W) '$(srcdir)/stest.c'; fi`\n+\n+stest_alloc-stest.o: stest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stest_alloc_CFLAGS) $(CFLAGS) -c -o stest_alloc-stest.o `test -f 'stest.c' || echo '$(srcdir)/'`stest.c\n+\n+stest_alloc-stest.obj: stest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stest_alloc_CFLAGS) $(CFLAGS) -c -o stest_alloc-stest.obj `if test -f 'stest.c'; then $(CYGPATH_W) 'stest.c'; else $(CYGPATH_W) '$(srcdir)/stest.c'; fi`\n+\n+test_elf_32-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_32_CFLAGS) $(CFLAGS) -c -o test_elf_32-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_elf_32-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_32_CFLAGS) $(CFLAGS) -c -o test_elf_32-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_elf_32-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_32_CFLAGS) $(CFLAGS) -c -o test_elf_32-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_elf_32-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_32_CFLAGS) $(CFLAGS) -c -o test_elf_32-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+test_elf_64-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_64_CFLAGS) $(CFLAGS) -c -o test_elf_64-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_elf_64-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_64_CFLAGS) $(CFLAGS) -c -o test_elf_64-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_elf_64-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_64_CFLAGS) $(CFLAGS) -c -o test_elf_64-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_elf_64-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_elf_64_CFLAGS) $(CFLAGS) -c -o test_elf_64-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+test_pecoff-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_pecoff_CFLAGS) $(CFLAGS) -c -o test_pecoff-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_pecoff-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_pecoff_CFLAGS) $(CFLAGS) -c -o test_pecoff-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_pecoff-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_pecoff_CFLAGS) $(CFLAGS) -c -o test_pecoff-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_pecoff-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_pecoff_CFLAGS) $(CFLAGS) -c -o test_pecoff-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+test_unknown-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_unknown_CFLAGS) $(CFLAGS) -c -o test_unknown-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_unknown-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_unknown_CFLAGS) $(CFLAGS) -c -o test_unknown-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_unknown-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_unknown_CFLAGS) $(CFLAGS) -c -o test_unknown-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_unknown-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_unknown_CFLAGS) $(CFLAGS) -c -o test_unknown-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+test_xcoff_32-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_32_CFLAGS) $(CFLAGS) -c -o test_xcoff_32-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_xcoff_32-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_32_CFLAGS) $(CFLAGS) -c -o test_xcoff_32-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_xcoff_32-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_32_CFLAGS) $(CFLAGS) -c -o test_xcoff_32-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_xcoff_32-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_32_CFLAGS) $(CFLAGS) -c -o test_xcoff_32-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+test_xcoff_64-test_format.o: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_64_CFLAGS) $(CFLAGS) -c -o test_xcoff_64-test_format.o `test -f 'test_format.c' || echo '$(srcdir)/'`test_format.c\n+\n+test_xcoff_64-test_format.obj: test_format.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_64_CFLAGS) $(CFLAGS) -c -o test_xcoff_64-test_format.obj `if test -f 'test_format.c'; then $(CYGPATH_W) 'test_format.c'; else $(CYGPATH_W) '$(srcdir)/test_format.c'; fi`\n+\n+test_xcoff_64-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_64_CFLAGS) $(CFLAGS) -c -o test_xcoff_64-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+test_xcoff_64-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(test_xcoff_64_CFLAGS) $(CFLAGS) -c -o test_xcoff_64-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n ttest-ttest.o: ttest.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ttest_CFLAGS) $(CFLAGS) -c -o ttest-ttest.o `test -f 'ttest.c' || echo '$(srcdir)/'`ttest.c\n \n@@ -1397,6 +1594,30 @@ ttest_alloc-testlib.o: testlib.c\n ttest_alloc-testlib.obj: testlib.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ttest_alloc_CFLAGS) $(CFLAGS) -c -o ttest_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n \n+unittest-unittest.o: unittest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_CFLAGS) $(CFLAGS) -c -o unittest-unittest.o `test -f 'unittest.c' || echo '$(srcdir)/'`unittest.c\n+\n+unittest-unittest.obj: unittest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_CFLAGS) $(CFLAGS) -c -o unittest-unittest.obj `if test -f 'unittest.c'; then $(CYGPATH_W) 'unittest.c'; else $(CYGPATH_W) '$(srcdir)/unittest.c'; fi`\n+\n+unittest-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_CFLAGS) $(CFLAGS) -c -o unittest-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+unittest-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_CFLAGS) $(CFLAGS) -c -o unittest-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n+unittest_alloc-unittest.o: unittest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_alloc_CFLAGS) $(CFLAGS) -c -o unittest_alloc-unittest.o `test -f 'unittest.c' || echo '$(srcdir)/'`unittest.c\n+\n+unittest_alloc-unittest.obj: unittest.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_alloc_CFLAGS) $(CFLAGS) -c -o unittest_alloc-unittest.obj `if test -f 'unittest.c'; then $(CYGPATH_W) 'unittest.c'; else $(CYGPATH_W) '$(srcdir)/unittest.c'; fi`\n+\n+unittest_alloc-testlib.o: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_alloc_CFLAGS) $(CFLAGS) -c -o unittest_alloc-testlib.o `test -f 'testlib.c' || echo '$(srcdir)/'`testlib.c\n+\n+unittest_alloc-testlib.obj: testlib.c\n+\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unittest_alloc_CFLAGS) $(CFLAGS) -c -o unittest_alloc-testlib.obj `if test -f 'testlib.c'; then $(CYGPATH_W) 'testlib.c'; else $(CYGPATH_W) '$(srcdir)/testlib.c'; fi`\n+\n ztest-ztest.o: ztest.c\n \t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(ztest_CFLAGS) $(CFLAGS) -c -o ztest-ztest.o `test -f 'ztest.c' || echo '$(srcdir)/'`ztest.c\n "}, {"sha": "40f9c389a2ae288a6aa01c0731a269d9846f4a04", "filename": "libbacktrace/ztest.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2Fztest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628ee3c2f339da37e7570bcce0ebc6eb12bc33ae/libbacktrace%2Fztest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fztest.c?ref=628ee3c2f339da37e7570bcce0ebc6eb12bc33ae", "patch": "@@ -89,7 +89,8 @@ struct zlib_test\n /* Error callback.  */\n \n static void\n-error_callback_compress (void *vdata, const char *msg, int errnum)\n+error_callback_compress (void *vdata ATTRIBUTE_UNUSED, const char *msg,\n+\t\t\t int errnum)\n {\n   fprintf (stderr, \"%s\", msg);\n   if (errnum > 0)\n@@ -360,7 +361,7 @@ test_large (struct backtrace_state *state)\n       fclose (e);\n       if (got > 0)\n \t{\n-\t  orig_buf = rbuf;\n+\t  orig_buf = (unsigned char *) rbuf;\n \t  orig_bufsize = got;\n \t  break;\n \t}\n@@ -383,7 +384,7 @@ test_large (struct backtrace_state *state)\n     }\n \n   compress_sizearg = compressed_bufsize - 12;\n-  r = compress (compressed_buf + 12, &compress_sizearg,\n+  r = compress ((unsigned char *) compressed_buf + 12, &compress_sizearg,\n \t\torig_buf, orig_bufsize);\n   if (r != Z_OK)\n     {\n@@ -406,7 +407,8 @@ test_large (struct backtrace_state *state)\n     }\n   uncompressed_bufsize = orig_bufsize;\n \n-  if (!backtrace_uncompress_zdebug (state, compressed_buf, compressed_bufsize,\n+  if (!backtrace_uncompress_zdebug (state, (unsigned char *) compressed_buf,\n+\t\t\t\t    compressed_bufsize,\n \t\t\t\t    error_callback_compress, NULL,\n \t\t\t\t    &uncompressed_buf, &uncompressed_bufsize))\n     {\n@@ -443,7 +445,8 @@ test_large (struct backtrace_state *state)\n \t  return;\n \t}\n \n-      if (!backtrace_uncompress_zdebug (state, compressed_buf,\n+      if (!backtrace_uncompress_zdebug (state,\n+\t\t\t\t\t(unsigned char *) compressed_buf,\n \t\t\t\t\tcompressed_bufsize,\n \t\t\t\t\terror_callback_compress, NULL,\n \t\t\t\t\t&uncompressed_buf,\n@@ -472,8 +475,9 @@ test_large (struct backtrace_state *state)\n \t}\n \n       uncompress_sizearg = uncompressed_bufsize;\n-      r = uncompress (uncompressed_buf, &uncompress_sizearg,\n-\t\t      compressed_buf + 12, compressed_bufsize - 12);\n+      r = uncompress ((unsigned char *) uncompressed_buf, &uncompress_sizearg,\n+\t\t      (unsigned char *) compressed_buf + 12,\n+\t\t      compressed_bufsize - 12);\n \n       if (clock_gettime (cid, &ts2) < 0)\n \t{"}]}