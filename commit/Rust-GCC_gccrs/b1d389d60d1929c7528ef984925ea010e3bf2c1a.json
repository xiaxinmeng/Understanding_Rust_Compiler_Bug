{"sha": "b1d389d60d1929c7528ef984925ea010e3bf2c1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkMzg5ZDYwZDE5MjljNzUyOGVmOTg0OTI1ZWEwMTBlM2JmMmMxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-14T14:01:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-14T14:01:11Z"}, "message": "expr: Unbreak build of mesa [PR96194]\n\n> > The store to the whole of each volatile object was picked apart\n> > like there had been an individual assignment to each of the\n> > fields.  Reads were added as part of that; see PR for details.\n> > The reads from volatile memory were a clear bug; individual\n> > stores questionable.  A separate patch clarifies the docs.\n\nThis breaks building of mesa on both the trunk and 10 branch.\n\nThe problem is that the middle-end may never create temporaries of non-POD\n(TREE_ADDRESSABLE) types, those can be only created when the language says\nso and thus only the FE is allowed to create those.\n\nThis patch just reverts the behavior to what we used to do before for the\nstores to volatile non-PODs.  Perhaps we want to do something else, but\ndefinitely we can't create temporaries of the non-POD type.  It is up to\ndiscussions on what should happen in those cases.\n\n2020-07-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/96194\n\t* expr.c (expand_constructor): Don't create temporary for store to\n\tvolatile MEM if exp has an addressable type.\n\n\t* g++.dg/opt/pr96194.C: New test.", "tree": {"sha": "8e32dfb2313aa39626b59ac2a41520afecc424c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e32dfb2313aa39626b59ac2a41520afecc424c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d389d60d1929c7528ef984925ea010e3bf2c1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d389d60d1929c7528ef984925ea010e3bf2c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d389d60d1929c7528ef984925ea010e3bf2c1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d389d60d1929c7528ef984925ea010e3bf2c1a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb370f19c1198e62d47eae74531e54d0b098bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb370f19c1198e62d47eae74531e54d0b098bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb370f19c1198e62d47eae74531e54d0b098bf1"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "edc5571ba002aa4b126c6f90f47f67f6b57655f3", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d389d60d1929c7528ef984925ea010e3bf2c1a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d389d60d1929c7528ef984925ea010e3bf2c1a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b1d389d60d1929c7528ef984925ea010e3bf2c1a", "patch": "@@ -8382,7 +8382,9 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n       || GET_CODE (target) == PARALLEL || modifier == EXPAND_STACK_PARM\n       /* Also make a temporary if the store is to volatile memory, to\n \t avoid individual accesses to aggregate members.  */\n-      || (GET_CODE (target) == MEM && MEM_VOLATILE_P (target)))\n+      || (GET_CODE (target) == MEM\n+\t  && MEM_VOLATILE_P (target)\n+\t  && !TREE_ADDRESSABLE (TREE_TYPE (exp))))\n     {\n       if (avoid_temp_mem)\n \treturn NULL_RTX;"}, {"sha": "749be2a2322a26f656a02762f650e579ff07749b", "filename": "gcc/testsuite/g++.dg/opt/pr96194.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d389d60d1929c7528ef984925ea010e3bf2c1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96194.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d389d60d1929c7528ef984925ea010e3bf2c1a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96194.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96194.C?ref=b1d389d60d1929c7528ef984925ea010e3bf2c1a", "patch": "@@ -0,0 +1,21 @@\n+// PR middle-end/96194\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+#include <new>\n+\n+struct A { ~A (); };\n+struct B : A { float e[64]; };\n+\n+B *\n+foo ()\n+{\n+  return new ((void *) 0) B ();\n+}\n+\n+B *\n+bar (void *x, bool y)\n+{\n+  void *p = y ? x : (void *) 0;\n+  return new (p) B ();\n+}"}]}