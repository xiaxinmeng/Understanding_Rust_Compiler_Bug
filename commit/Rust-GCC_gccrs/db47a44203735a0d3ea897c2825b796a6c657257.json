{"sha": "db47a44203735a0d3ea897c2825b796a6c657257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0N2E0NDIwMzczNWEwZDNlYTg5N2MyODI1Yjc5NmE2YzY1NzI1Nw==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-03-06T09:26:08Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-03-06T09:26:08Z"}, "message": "* intrinsic.texi: Limit column widths to a total of .85.\n\nFrom-SVN: r122615", "tree": {"sha": "5bd71dc940008e140e3bd7d3848858434eeb02f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd71dc940008e140e3bd7d3848858434eeb02f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db47a44203735a0d3ea897c2825b796a6c657257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db47a44203735a0d3ea897c2825b796a6c657257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db47a44203735a0d3ea897c2825b796a6c657257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db47a44203735a0d3ea897c2825b796a6c657257/comments", "author": null, "committer": null, "parents": [{"sha": "3ca43df7e29a55204fb844247e8ea54a1e0c8d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca43df7e29a55204fb844247e8ea54a1e0c8d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca43df7e29a55204fb844247e8ea54a1e0c8d0d"}], "stats": {"total": 418, "additions": 211, "deletions": 207}, "files": [{"sha": "07207e23f8e5dc9405f7265d4c9aac78cab7a1d6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db47a44203735a0d3ea897c2825b796a6c657257/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db47a44203735a0d3ea897c2825b796a6c657257/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=db47a44203735a0d3ea897c2825b796a6c657257", "patch": "@@ -1,3 +1,7 @@\n+2007-03-06  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi: Limit column widths to a total of .85.\n+\n 2007-03-05  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* gfortran.texi (GFortran and G77): Rewrite completely."}, {"sha": "240bef87ad7a4e2726989d601677b7ddb79eaf04", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 207, "deletions": 207, "changes": 414, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db47a44203735a0d3ea897c2825b796a6c657257/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db47a44203735a0d3ea897c2825b796a6c657257/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=db47a44203735a0d3ea897c2825b796a6c657257", "patch": "@@ -354,7 +354,7 @@ Elemental function\n @code{RESULT = ABS(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type of the argument shall be an @code{INTEGER(*)},\n @code{REAL(*)}, or @code{COMPLEX(*)}.\n @end multitable\n@@ -377,7 +377,7 @@ end program test_abs\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{CABS(Z)}  @tab @code{COMPLEX(4) Z} @tab @code{REAL(4)}    @tab F77 and later\n @item @code{DABS(X)}  @tab @code{REAL(8)    X} @tab @code{REAL(8)}    @tab F77 and later\n@@ -410,7 +410,7 @@ Inquiry function\n @code{RESULT = ACCESS(NAME, MODE)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{NAME} @tab Scalar @code{CHARACTER} with the file name.\n Tailing blank are ignored unless the character @code{achar(0)} is\n present, then all characters up to and excluding @code{achar(0)} are\n@@ -465,7 +465,7 @@ Elemental function\n @code{RESULT = ACHAR(I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -508,7 +508,7 @@ Elemental function\n @code{RESULT = ACOS(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} with a magnitude that is\n less than one.\n @end multitable\n@@ -527,7 +527,7 @@ end program test_acos\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DACOS(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n @end multitable\n@@ -558,7 +558,7 @@ Elemental function\n @code{RESULT = ACOSH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} with a magnitude that is\n greater or equal to one.\n @end multitable\n@@ -601,7 +601,7 @@ Elemental function\n @code{RESULT = ADJUSTL(STR)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STR} @tab The type shall be @code{CHARACTER}.\n @end multitable\n \n@@ -642,7 +642,7 @@ Elemental function\n @code{RESULT = ADJUSTR(STR)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STR} @tab The type shall be @code{CHARACTER}.\n @end multitable\n \n@@ -688,7 +688,7 @@ Elemental function\n @code{RESULT = AIMAG(Z)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{Z} @tab The type of the argument shall be @code{COMPLEX(*)}.\n @end multitable\n \n@@ -708,7 +708,7 @@ end program test_aimag\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{DIMAG(Z)} @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}    @tab GNU extension\n @item @code{IMAG(Z)}  @tab @code{COMPLEX(*) Z} @tab @code{REAL(*)}    @tab GNU extension\n@@ -738,7 +738,7 @@ Elemental function\n @code{RESULT = AINT(X [, KIND])} \n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab The type of the argument shall be @code{REAL(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -767,7 +767,7 @@ end program test_aint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name           @tab Argument         @tab Return type      @tab Standard\n @item @code{DINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab F77 and later\n @end multitable\n@@ -798,7 +798,7 @@ Subroutine\n @code{CALL ALARM(SECONDS, HANDLER [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{SECONDS} @tab The type of the argument shall be a scalar\n @code{INTEGER}. It is @code{INTENT(IN)}.\n @item @var{HANDLER} @tab Signal handler (@code{INTEGER FUNCTION} or\n@@ -844,7 +844,7 @@ transformational function\n @code{RESULT = ALL(MASK [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{MASK} @tab The type of the argument shall be @code{LOGICAL(*)} and\n it shall not be scalar.\n @item @var{DIM}  @tab (Optional) @var{DIM} shall be a scalar integer\n@@ -909,7 +909,7 @@ Inquiry function\n @code{RESULT = ALLOCATED(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab The argument shall be an @code{ALLOCATABLE} array.\n @end multitable\n \n@@ -952,7 +952,7 @@ Non-elemental function\n @code{RESULT = AND(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @item @var{Y} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @end multitable\n@@ -999,7 +999,7 @@ Elemental function\n @code{RESULT = ANINT(X [, KIND])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab The type of the argument shall be @code{REAL(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -1026,7 +1026,7 @@ end program test_anint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument         @tab Return type      @tab Standard\n @item @code{DNINT(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}   @tab F77 and later\n @end multitable\n@@ -1054,7 +1054,7 @@ transformational function\n @code{RESULT = ANY(MASK [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{MASK} @tab The type of the argument shall be @code{LOGICAL(*)} and\n it shall not be scalar.\n @item @var{DIM}  @tab (Optional) @var{DIM} shall be a scalar integer\n@@ -1120,7 +1120,7 @@ Elemental function\n @code{RESULT = ASIN(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and a magnitude that is\n less than one.\n @end multitable\n@@ -1139,7 +1139,7 @@ end program test_asin\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DASIN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n @end multitable\n@@ -1170,7 +1170,7 @@ Elemental function\n @code{RESULT = ASINH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, with @var{X} a real number.\n @end multitable\n \n@@ -1212,7 +1212,7 @@ Inquiry function\n @code{RESULT = ASSOCIATED(PTR [, TGT])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PTR} @tab @var{PTR} shall have the @code{POINTER} attribute and\n it can be of any type.\n @item @var{TGT} @tab (Optional) @var{TGT} shall be a @code{POINTER} or\n@@ -1287,7 +1287,7 @@ Elemental function\n @code{RESULT = ATAN(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -1304,7 +1304,7 @@ end program test_atan\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DATAN(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n @end multitable\n@@ -1336,7 +1336,7 @@ Elemental function\n @code{RESULT = ATAN2(Y,X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{Y} @tab The type shall be @code{REAL(*)}.\n @item @var{X} @tab The type and kind type parameter shall be the same as @var{Y}.\n If @var{Y} is zero, then @var{X} must be nonzero.\n@@ -1360,7 +1360,7 @@ end program test_atan2\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type    @tab Standard\n @item @code{DATAN2(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)} @tab F77 and later\n @end multitable\n@@ -1388,7 +1388,7 @@ Elemental function\n @code{RESULT = ATANH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} with a magnitude\n that is less than or equal to one.\n @end multitable\n@@ -1433,7 +1433,7 @@ Elemental function\n @code{RESULT = BESJ0(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -1450,7 +1450,7 @@ end program test_besj0\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESJ0(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}   @tab GNU extension\n @end multitable\n@@ -1479,7 +1479,7 @@ Elemental function\n @code{RESULT = BESJ1(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -1496,7 +1496,7 @@ end program test_besj1\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESJ1(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -1525,7 +1525,7 @@ Elemental function\n @code{RESULT = BESJN(N, X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{N} @tab The type shall be @code{INTEGER(*)}, and it shall be scalar.\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n@@ -1542,7 +1542,7 @@ end program test_besjn\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type       @tab Standard\n @item @code{DBESJN(X)} @tab @code{INTEGER(*) N} @tab @code{REAL(8)}    @tab GNU extension\n @item                  @tab @code{REAL(8) X}    @tab                   @tab\n@@ -1572,7 +1572,7 @@ Elemental function\n @code{RESULT = BESY0(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -1588,7 +1588,7 @@ end program test_besy0\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESY0(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -1617,7 +1617,7 @@ Elemental function\n @code{RESULT = BESY1(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -1633,7 +1633,7 @@ end program test_besy1\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DBESY1(X)}@tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -1662,7 +1662,7 @@ Elemental function\n @code{RESULT = BESYN(N, X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{N} @tab The type shall be @code{INTEGER(*)}, and it shall be scalar.\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n@@ -1679,7 +1679,7 @@ end program test_besyn\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name               @tab Argument            @tab Return type     @tab Standard\n @item @code{DBESYN(N,X)} @tab @code{INTEGER(*) N} @tab @code{REAL(8)}  @tab GNU extension\n @item                    @tab @code{REAL(8)    X} @tab                 @tab \n@@ -1709,7 +1709,7 @@ Inquiry function\n @code{RESULT = BIT_SIZE(I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -1749,7 +1749,7 @@ Elemental function\n @code{RESULT = BTEST(I, POS)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{POS} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -1792,7 +1792,7 @@ Elemental function\n @code{RESULT = CEILING(X [, KIND])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -1838,7 +1838,7 @@ Elemental function\n @code{RESULT = CHAR(I [, KIND])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -1883,7 +1883,7 @@ Non-elemental subroutine\n @code{CALL CHDIR(PATH [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PATH}   @tab The type shall be @code{CHARACTER(*)} and shall\n                         specify a valid path within the file system.\n @item @var{STATUS} @tab (Optional) status flag. Returns 0 on success, \n@@ -1934,7 +1934,7 @@ Subroutine, non-elemental function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{NAME} @tab Scalar @code{CHARACTER} with the file name.\n Trailing blanks are ignored unless the character @code{achar(0)} is\n present, then all characters up to and excluding @code{achar(0)} are\n@@ -1999,7 +1999,7 @@ Elemental function\n @code{RESULT = CMPLX(X [, Y [, KIND]])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type may be @code{INTEGER(*)}, @code{REAL(*)},\n                    or @code{COMPLEX(*)}.\n @item @var{Y} @tab (Optional; only allowed if @var{X} is not\n@@ -2047,7 +2047,7 @@ Inquiry function\n @code{RESULT = COMMAND_ARGUMENT_COUNT()}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item None\n @end multitable\n \n@@ -2087,7 +2087,7 @@ Elemental function\n @code{Z = CONJG(Z)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{Z} @tab The type shall be @code{COMPLEX(*)}.\n @end multitable\n \n@@ -2107,7 +2107,7 @@ end program test_conjg\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type          @tab Standard\n @item @code{DCONJG(Z)} @tab @code{COMPLEX(8) Z}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @end multitable\n@@ -2137,7 +2137,7 @@ Elemental function\n @code{RESULT = COS(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -2156,7 +2156,7 @@ end program test_cos\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n @item @code{DCOS(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab F77 and later\n @item @code{CCOS(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab F77 and later\n@@ -2191,7 +2191,7 @@ Elemental function\n @code{X = COSH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -2208,7 +2208,7 @@ end program test_cosh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DCOSH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F77 and later\n @end multitable\n@@ -2242,7 +2242,7 @@ transformational function\n @code{RESULT = COUNT(MASK [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{MASK} @tab The type shall be @code{LOGICAL}.\n @item @var{DIM}  @tab The type shall be @code{INTEGER}.\n @end multitable\n@@ -2300,7 +2300,7 @@ Subroutine\n @code{CALL CPU_TIME(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL} with @code{INTENT(OUT)}.\n @end multitable\n \n@@ -2347,7 +2347,7 @@ transformational function\n @code{RESULT = CSHIFT(A, SHIFT [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY}  @tab May be any type, not scaler.\n @item @var{SHIFT}  @tab The type shall be @code{INTEGER}.\n @item @var{DIM}    @tab The type shall be @code{INTEGER}.\n@@ -2404,7 +2404,7 @@ Subroutine\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{S}@tab The type shall be of type @code{CHARACTER}.\n @item @var{T}@tab The type shall be of type @code{INTEGER(KIND=8)}.\n @end multitable\n@@ -2452,7 +2452,7 @@ Unavailable time and date parameters return blanks.\n \n @var{VALUES} is @code{INTENT(OUT)} and provides the following:\n \n-@multitable @columnfractions .15 .30 .60\n+@multitable @columnfractions .15 .30 .40\n @item @tab @code{VALUE(1)}: @tab The year\n @item @tab @code{VALUE(2)}: @tab The month\n @item @tab @code{VALUE(3)}: @tab The day of the month\n@@ -2473,7 +2473,7 @@ Subroutine\n @code{CALL DATE_AND_TIME([DATE, TIME, ZONE, VALUES])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{DATE}  @tab (Optional) The type shall be @code{CHARACTER(8)} or larger.\n @item @var{TIME}  @tab (Optional) The type shall be @code{CHARACTER(10)} or larger.\n @item @var{ZONE}  @tab (Optional) The type shall be @code{CHARACTER(5)} or larger.\n@@ -2522,7 +2522,7 @@ Elemental function\n @code{RESULT = DBLE(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{INTEGER(*)}, @code{REAL(*)},\n                    or @code{COMPLEX(*)}.\n @end multitable\n@@ -2568,7 +2568,7 @@ Elemental function\n @code{RESULT = DCMPLX(X [, Y])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type may be @code{INTEGER(*)}, @code{REAL(*)},\n                    or @code{COMPLEX(*)}.\n @item @var{Y} @tab (Optional if @var{X} is not @code{COMPLEX(*)}.) May be\n@@ -2614,7 +2614,7 @@ Elemental function\n @code{RESULT = DFLOAT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -2656,7 +2656,7 @@ Inquiry function\n @code{RESULT = DIGITS(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type may be @code{INTEGER(*)} or @code{REAL(*)}.\n @end multitable\n \n@@ -2700,7 +2700,7 @@ Elemental function\n @code{RESULT = DIM(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{INTEGER(*)} or @code{REAL(*)}\n @item @var{Y} @tab The type shall be the same type and kind as @var{X}.\n @end multitable\n@@ -2721,7 +2721,7 @@ end program test_dim\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument              @tab Return type       @tab Standard\n @item @code{IDIM(X,Y)} @tab @code{INTEGER(4) X,Y} @tab @code{INTEGER(4)} @tab F77 and later\n @item @code{DDIM(X,Y)} @tab @code{REAL(8) X,Y}    @tab @code{REAL(8)}    @tab F77 and later\n@@ -2754,7 +2754,7 @@ transformational function\n @code{RESULT = DOT_PRODUCT(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be numeric or @code{LOGICAL}, rank 1.\n @item @var{Y} @tab The type shall be numeric or @code{LOGICAL}, rank 1.\n @end multitable\n@@ -2800,7 +2800,7 @@ Elemental function\n @code{RESULT = DPROD(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL}.\n @item @var{Y} @tab The type shall be @code{REAL}.\n @end multitable\n@@ -2842,7 +2842,7 @@ Elemental function\n @code{RESULT = DREAL(Z)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{Z} @tab The type shall be @code{COMPLEX(8)}.\n @end multitable\n \n@@ -2892,7 +2892,7 @@ subroutine, and vice versa.\n \n @var{TARRAY} and @var{RESULT} are @code{INTENT(OUT)} and provide the following:\n \n-@multitable @columnfractions .15 .30 .60\n+@multitable @columnfractions .15 .30 .40\n @item @tab @code{TARRAY(1)}: @tab User time in seconds.\n @item @tab @code{TARRAY(2)}: @tab System time in seconds.\n @item @tab @code{RESULT}: @tab Run time since start in seconds.\n@@ -2911,7 +2911,7 @@ Subroutine\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{TARRAY}@tab The type shall be @code{REAL, DIMENSION(2)}.\n @item @var{RESULT}@tab The type shall be @code{REAL}.\n @end multitable\n@@ -2978,7 +2978,7 @@ transformational function\n @code{RESULT = EOSHIFT(A, SHIFT [, BOUNDARY, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY}  @tab May be any type, not scaler.\n @item @var{SHIFT}  @tab The type shall be @code{INTEGER}.\n @item @var{BOUNDARY} @tab Same type as @var{ARRAY}. \n@@ -3026,7 +3026,7 @@ Inquiry function\n @code{RESULT = EPSILON(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -3065,7 +3065,7 @@ Elemental function\n @code{RESULT = ERF(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -3082,7 +3082,7 @@ end program test_erf\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DERF(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -3109,7 +3109,7 @@ Elemental function\n @code{RESULT = ERFC(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}, and it shall be scalar.\n @end multitable\n \n@@ -3126,7 +3126,7 @@ end program test_erfc\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DERFC(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n@@ -3170,13 +3170,13 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .8\n+@multitable @columnfractions .80\n @item @code{CALL ETIME(TARRAY, RESULT)}.\n @item @code{RESULT = ETIME(TARRAY)}, (not recommended).\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{TARRAY}@tab The type shall be @code{REAL, DIMENSION(2)}.\n @item @var{RESULT}@tab The type shall be @code{REAL}.\n @end multitable\n@@ -3232,7 +3232,7 @@ Subroutine\n @code{CALL EXIT([STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STATUS} @tab The type of the argument shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -3276,7 +3276,7 @@ Elemental function\n @code{RESULT = EXP(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -3293,7 +3293,7 @@ end program test_exp\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument             @tab Return type         @tab Standard\n @item @code{DEXP(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}      @tab F77 and later\n @item @code{CEXP(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}   @tab F77 and later\n@@ -3324,7 +3324,7 @@ Elemental function\n @code{RESULT = EXPONENT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -3376,7 +3376,7 @@ Subroutine\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{DATE}@tab The type shall be of type @code{CHARACTER}.\n @end multitable\n \n@@ -3419,7 +3419,7 @@ Elemental function\n @code{RESULT = FLOAT(I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -3467,7 +3467,7 @@ Non-elemental subroutine\n @code{CALL FGET(C [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{C}      @tab The type shall be @code{CHARACTER}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}.\n                         Returns 0 on success, -1 on end-of-file, and a\n@@ -3523,7 +3523,7 @@ Non-elemental subroutine\n @code{CALL FGETC(UNIT, C [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{UNIT}   @tab The type shall be @code{INTEGER}.\n @item @var{C}      @tab The type shall be @code{CHARACTER}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}. Returns 0 on success,\n@@ -3571,7 +3571,7 @@ Elemental function\n @code{RESULT = FLOOR(X [, KIND])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -3618,7 +3618,7 @@ non-elemental subroutine\n @code{CALL FLUSH(UNIT)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{UNIT} @tab (Optional) The type shall be @code{INTEGER}.\n @end multitable\n \n@@ -3650,7 +3650,7 @@ non-elemental function\n @code{RESULT = FNUM(UNIT)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{UNIT} @tab The type shall be @code{INTEGER}.\n @end multitable\n \n@@ -3698,7 +3698,7 @@ Non-elemental subroutine\n @code{CALL FPUT(C [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{C}      @tab The type shall be @code{CHARACTER}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}. Returns 0 on success,\n                         -1 on end-of-file and a system specific positive error code otherwise.\n@@ -3748,7 +3748,7 @@ Non-elemental subroutine\n @code{CALL FPUTC(UNIT, C [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{UNIT}   @tab The type shall be @code{INTEGER}.\n @item @var{C}      @tab The type shall be @code{CHARACTER}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER}. Returns 0 on success,\n@@ -3795,7 +3795,7 @@ Elemental function\n @code{Y = FRACTION(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type of the argument shall be a @code{REAL}.\n @end multitable\n \n@@ -3840,7 +3840,7 @@ Subroutine\n @code{FREE(PTR)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PTR} @tab The type shall be @code{INTEGER}. It represents the\n location of the memory that should be de-allocated.\n @end multitable\n@@ -3880,7 +3880,7 @@ Non-elemental subroutine\n @code{CALL FSTAT(UNIT, BUFF [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{UNIT}   @tab An open I/O unit number of type @code{INTEGER}.\n @item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n@@ -3948,7 +3948,7 @@ Subroutine, function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{OFFSET}  @tab Shall of type @code{INTEGER}.\n @item @var{UNIT}    @tab Shall of type @code{INTEGER}.\n @end multitable\n@@ -3998,7 +3998,7 @@ Subroutine\n @code{CALL GETARG(N, ARG)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{N}   @tab Shall of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n @item @var{ARG} @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n@@ -4052,7 +4052,7 @@ Subroutine\n @code{CALL GET_COMMAND(CMD)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{CMD} @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n \n@@ -4095,7 +4095,7 @@ Subroutine\n @code{CALL GET_COMMAND_ARGUMENT(N, ARG)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{N}   @tab Shall of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n @item @var{ARG} @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n@@ -4150,7 +4150,7 @@ Non-elemental subroutine.\n @code{CALL GETCWD(CWD [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{CWD}    @tab The type shall be @code{CHARACTER(*)}.\n @item @var{STATUS} @tab (Optional) status flag. Returns 0 on success, \n                         a system specific and non-zero error code otherwise.\n@@ -4195,7 +4195,7 @@ Subroutine\n @code{CALL GETENV(ENVVAR, VALUE)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ENVVAR} @tab Shall be of type @code{CHARACTER(*)}. \n @item @var{VALUE}  @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n@@ -4239,7 +4239,7 @@ Subroutine\n @code{CALL GET_ENVIRONMENT_VARIABLE(ENVVAR, VALUE)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ENVVAR} @tab Shall be of type @code{CHARACTER(*)}. \n @item @var{VALUE}  @tab Shall be of type @code{CHARACTER(*)}. \n @end multitable\n@@ -4311,7 +4311,7 @@ Subroutine\n @code{CALL GETLOG(LOGIN)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{LOGIN} @tab Shall be of type @code{CHARACTER(*)}.\n @end multitable\n \n@@ -4427,7 +4427,7 @@ Subroutine\n @code{CALL GMTIME(STIME, TARRAY)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STIME}  @tab An @code{INTEGER(*)} scalar expression\n                         corresponding to a system time, with \n \t\t\t@code{INTENT(IN)}.\n@@ -4483,7 +4483,7 @@ Subroutine, function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{NAME}    @tab Shall of type @code{CHARACTER(*)}.\n @item @var{STATUS}  @tab (Optional) status flag of type @code{INTEGER}.\n                          Returns 0 on success, or a system specific error\n@@ -4518,7 +4518,7 @@ Elemental function\n @code{RESULT = HUGE(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL} or @code{INTEGER}.\n @end multitable\n \n@@ -4557,7 +4557,7 @@ Elemental function\n @code{RESULT = IACHAR(C)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{C} @tab Shall be a scalar @code{CHARACTER}, with @code{INTENT(IN)}\n @end multitable\n \n@@ -4598,7 +4598,7 @@ Elemental function\n @code{RESULT = IAND(I, J)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{J} @tab The type shall be @code{INTEGER(*)}, of the same\n kind as @var{I}.  (As a GNU extension, different kinds are also \n@@ -4688,7 +4688,7 @@ Elemental function\n @code{RESULT = IBCLR(I, POS)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{POS} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -4727,7 +4727,7 @@ Elemental function\n @code{RESULT = IBITS(I, POS, LEN)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{POS} @tab The type shall be @code{INTEGER(*)}.\n @item @var{LEN} @tab The type shall be @code{INTEGER(*)}.\n@@ -4763,7 +4763,7 @@ Elemental function\n @code{RESULT = IBSET(I, POS)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{POS} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -4801,7 +4801,7 @@ Elemental function\n @code{RESULT = ICHAR(C)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{C} @tab Shall be a scalar @code{CHARACTER}, with @code{INTENT(IN)}\n @end multitable\n \n@@ -4864,7 +4864,7 @@ Subroutine\n @code{CALL IDATE(TARRAY)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)} and\n the kind shall be the default integer kind.\n @end multitable\n@@ -4906,7 +4906,7 @@ Elemental function\n @code{RESULT = IEOR(I, J)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{J} @tab The type shall be @code{INTEGER(*)}, of the same\n kind as @var{I}.  (As a GNU extension, different kinds are also \n@@ -4977,7 +4977,7 @@ Elemental function\n @code{RESULT = INDEX(STRING, SUBSTRING [, BACK])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING} @tab Shall be a scalar @code{CHARACTER(*)}, with\n @code{INTENT(IN)}\n @item @var{SUBSTRING} @tab Shall be a scalar @code{CHARACTER(*)}, with\n@@ -5016,7 +5016,7 @@ Elemental function\n @item @code{RESULT = INT(X [, KIND))}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab shall be of type @code{INTEGER(*)},\n                       @code{REAL(*)}, or @code{COMPLEX(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n@@ -5050,7 +5050,7 @@ end program\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type       @tab Standard\n @item @code{IFIX(X)}   @tab @code{REAL(4) X}    @tab @code{INTEGER}    @tab F77 and later\n @item @code{IDINT(X)}  @tab @code{REAL(8) X}    @tab @code{INTEGER}    @tab F77 and later\n@@ -5081,7 +5081,7 @@ Elemental function\n @code{RESULT = IEOR(I, J)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{J} @tab The type shall be @code{INTEGER(*)}, of the same\n kind as @var{I}.  (As a GNU extension, different kinds are also \n@@ -5124,7 +5124,7 @@ non-elemental function\n @code{RESULT = IRAND(FLAG)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{FLAG} @tab shall be a scalar @code{INTEGER} of kind 4.\n @end multitable\n \n@@ -5171,7 +5171,7 @@ Elemental function\n @code{RESULT = ISHFT(I, SHIFT)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -5213,7 +5213,7 @@ Elemental function\n @code{RESULT = ISHFTC(I, SHIFT [, SIZE])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n @item @var{SIZE} @tab (Optional) The type shall be @code{INTEGER(*)};\n@@ -5252,7 +5252,7 @@ Subroutine\n @code{CALL ITIME(TARRAY)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)}\n and the kind shall be the default integer kind.\n @end multitable\n@@ -5292,7 +5292,7 @@ Subroutine\n @code{CALL KILL(PID, SIGNAL [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PID} @tab Shall be a scalar @code{INTEGER}, with\n @code{INTENT(IN)}\n @item @var{SIGNAL} @tab Shall be a scalar @code{INTEGER}, with\n@@ -5326,7 +5326,7 @@ Inquiry function\n @code{K = KIND(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab Shall be of type @code{LOGICAL}, @code{INTEGER},\n @code{REAL}, @code{COMPLEX} or @code{CHARACTER}.\n @end multitable\n@@ -5368,7 +5368,7 @@ Inquiry function\n @code{RESULT = LBOUND(ARRAY [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array, of any type.\n @item @var{DIM} @tab (Optional) Shall be a scalar @code{INTEGER(*)}.\n @end multitable\n@@ -5408,7 +5408,7 @@ Inquiry function\n @code{L = LEN(STRING)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING} @tab Shall be a scalar or array of type\n @code{CHARACTER(*)}, with @code{INTENT(IN)}\n @end multitable\n@@ -5440,7 +5440,7 @@ Elemental function\n @code{RESULT = LEN_TRIM(STRING)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING} @tab Shall be a scalar of type @code{CHARACTER(*)},\n with @code{INTENT(IN)}\n @end multitable\n@@ -5485,7 +5485,7 @@ Elemental function\n @code{RESULT = LGE(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n @end multitable\n@@ -5531,7 +5531,7 @@ Elemental function\n @code{RESULT = LGT(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n @end multitable\n@@ -5570,7 +5570,7 @@ Subroutine\n @code{CALL LINK(PATH1, PATH2 [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n @item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n@@ -5613,7 +5613,7 @@ Elemental function\n @code{RESULT = LLE(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n @end multitable\n@@ -5659,7 +5659,7 @@ Elemental function\n @code{RESULT = LLT(STRING_A, STRING_B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING_A} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STRING_B} @tab Shall be of default @code{CHARACTER} type.\n @end multitable\n@@ -5694,7 +5694,7 @@ Elemental function\n @code{RESULT = LNBLNK(STRING)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING} @tab Shall be a scalar of type @code{CHARACTER(*)},\n with @code{INTENT(IN)}\n @end multitable\n@@ -5727,7 +5727,7 @@ Inquiry function\n @code{RESULT = LOC(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab Variable of any type.\n @end multitable\n \n@@ -5773,7 +5773,7 @@ Elemental function\n @code{RESULT = LOG(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -5793,7 +5793,7 @@ end program test_log\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n @item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n@@ -5826,7 +5826,7 @@ Elemental function\n @code{RESULT = LOG10(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -5844,7 +5844,7 @@ end program test_log10\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab F95 and later\n @item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n@@ -5872,7 +5872,7 @@ Elemental function\n @code{RESULT = LOGICAL(L [, KIND])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{L}    @tab The type shall be @code{LOGICAL(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n                       expression indicating the kind parameter of\n@@ -5917,7 +5917,7 @@ Elemental function\n @code{RESULT = LSHIFT(I, SHIFT)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -5954,7 +5954,7 @@ Non-elemental subroutine\n @code{CALL LSTAT(FILE, BUFF [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{FILE}   @tab The type shall be @code{CHARACTER(*)}, a valid path within the file system.\n @item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n@@ -5991,7 +5991,7 @@ Subroutine\n @code{CALL LTIME(STIME, TARRAY)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STIME}  @tab An @code{INTEGER(*)} scalar expression\n                         corresponding to a system time, with \n \t\t\t@code{INTENT(IN)}.\n@@ -6047,7 +6047,7 @@ non-elemental function\n @code{PTR = MALLOC(SIZE)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{SIZE} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -6108,7 +6108,7 @@ Transformational function\n @code{RESULT = MATMUL(MATRIX_A, MATRIX_B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{MATRIX_A} @tab An array of @code{INTEGER(*)},\n                           @code{REAL(*)}, @code{COMPLEX(*)}, or\n \t\t\t  @code{LOGICAL(*)} type, with a rank of\n@@ -6151,7 +6151,7 @@ Elemental function\n @code{RESULT = MAX(A1, A2 [, A3 [, ...]])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A1}          @tab The type shall be @code{INTEGER(*)} or\n                              @code{REAL(*)}.\n @item @var{A2}, @var{A3}, ... @tab An expression of the same type and kind\n@@ -6165,7 +6165,7 @@ The return value corresponds to the maximum value among the arguments,\n and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type         @tab Standard\n @item @code{MAX0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab F77 and later\n @item @code{AMAX0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MAX(X))} @tab F77 and later\n@@ -6202,7 +6202,7 @@ Inquiry function\n @code{RESULT = MAXEXPONENT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @end multitable\n \n@@ -6255,7 +6255,7 @@ Transformational function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n                        @code{REAL(*)}, or @code{CHARACTER(*)}.\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n@@ -6310,7 +6310,7 @@ Transformational function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n                        @code{REAL(*)}, or @code{CHARACTER(*)}.\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n@@ -6354,7 +6354,7 @@ Elemental function\n @code{RESULT = MERGE(TSOURCE, FSOURCE, MASK)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{TSOURCE} @tab May be of any type.\n @item @var{FSOURCE} @tab Shall be of the same type and type parameters\n                          as @var{TSOURCE}.\n@@ -6386,7 +6386,7 @@ Elemental function\n @code{RESULT = MIN(A1, A2 [, A3, ...])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A1}          @tab The type shall be @code{INTEGER(*)} or\n                              @code{REAL(*)}.\n @item @var{A2}, @var{A3}, ... @tab An expression of the same type and kind\n@@ -6400,7 +6400,7 @@ The return value corresponds to the maximum value among the arguments,\n and has the same type and kind as the first argument.\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument            @tab Return type         @tab Standard\n @item @code{MIN0(I)}   @tab @code{INTEGER(4) I} @tab @code{INTEGER(4)}   @tab F77 and later\n @item @code{AMIN0(I)}  @tab @code{INTEGER(4) I} @tab @code{REAL(MIN(X))} @tab F77 and later\n@@ -6434,7 +6434,7 @@ Inquiry function\n @code{RESULT = MINEXPONENT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @end multitable\n \n@@ -6479,7 +6479,7 @@ Transformational function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n                        @code{REAL(*)}, or @code{CHARACTER(*)}.\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n@@ -6534,7 +6534,7 @@ Transformational function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array of type @code{INTEGER(*)},\n                        @code{REAL(*)}, or @code{CHARACTER(*)}.\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n@@ -6581,7 +6581,7 @@ Elemental function\n @code{RESULT = MOD(A, P)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n @item @var{P} @tab shall be a scalar of the same type as @var{A} and not\n equal to zero\n@@ -6612,7 +6612,7 @@ end program test_mod\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Arguments      @tab Return type    @tab Standard\n @item @code{AMOD(A,P)} @tab @code{REAL(4)} @tab @code{REAL(4)} @tab F95 and later\n @item @code{DMOD(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab F95 and later\n@@ -6640,7 +6640,7 @@ Elemental function\n @code{RESULT = MODULO(A, P)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n @item @var{P} @tab shall be a scalar of the same type and kind as @var{A}\n @end multitable\n@@ -6696,7 +6696,7 @@ Subroutine\n @code{CALL MOVE_ALLOC(SRC, DEST)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{SRC}  @tab @code{ALLOCATABLE}, @code{INTENT(INOUT)}, may be\n                       of any type and kind.\n @item @var{DEST} @tab @code{ALLOCATABLE}, @code{INTENT(OUT)}, shall be\n@@ -6746,7 +6746,7 @@ Elemental function\n @code{RESULT = MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{FROM}    @tab The type shall be @code{INTEGER(*)}.\n @item @var{FROMPOS} @tab The type shall be @code{INTEGER(*)}.\n @item @var{LEN}     @tab The type shall be @code{INTEGER(*)}.\n@@ -6786,7 +6786,7 @@ Elemental function\n @code{RESULT = NEAREST(X, S)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @item @var{S} @tab (Optional) shall be of type @code{REAL} and\n not equal to zero.\n@@ -6831,7 +6831,7 @@ Elemental function\n @code{RESULT = NEW_LINE(C)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{C}    @tab The argument shall be a scalar or array of the\n                       type @code{CHARACTER}.\n @end multitable\n@@ -6871,7 +6871,7 @@ Elemental function\n @code{RESULT = NINT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab The type of the argument shall be @code{REAL}.\n @end multitable\n \n@@ -6892,7 +6892,7 @@ end program test_nint\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .33 .33 .33\n+@multitable @columnfractions .25 .25 .25\n @item Name             @tab Argument         @tab Standard\n @item @code{IDNINT(X)} @tab @code{REAL(8)}   @tab F95 and later\n @end multitable\n@@ -6922,7 +6922,7 @@ Elemental function\n @code{RESULT = NOT(I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n \n@@ -6987,7 +6987,7 @@ Non-elemental function\n @code{RESULT = OR(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @item @var{Y} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @end multitable\n@@ -7061,7 +7061,7 @@ Subroutine\n @code{CALL PERROR(STRING)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{STRING} @tab A scalar of default @code{CHARACTER} type.\n @end multitable\n \n@@ -7091,7 +7091,7 @@ Inquiry function\n @code{RESULT = PRECISION(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n@@ -7182,7 +7182,7 @@ Inquiry function\n @code{RESULT = RADIX(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab Shall be of type @code{INTEGER} or @code{REAL}\n @end multitable\n \n@@ -7248,7 +7248,7 @@ Non-elemental function\n @code{RESULT = RAND(FLAG)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{FLAG} @tab shall be a scalar @code{INTEGER} of kind 4.\n @end multitable\n \n@@ -7343,7 +7343,7 @@ Inquiry function\n @code{RESULT = RANGE(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n@@ -7376,13 +7376,13 @@ F77 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@multitable @columnfractions .30 .80\n+@multitable @columnfractions .80\n @item @code{RESULT = REAL(X [, KIND])}\n @item @code{RESULT = REALPART(Z)}\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X}    @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or\n                       @code{COMPLEX(*)}.\n @item @var{KIND} @tab (Optional) An @code{INTEGER(*)} initialization\n@@ -7446,7 +7446,7 @@ Subroutine\n @code{CALL RENAME(PATH1, PATH2 [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n @item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n@@ -7528,7 +7528,7 @@ Elemental function\n @code{RESULT = RRSPACING(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @end multitable\n \n@@ -7567,7 +7567,7 @@ Elemental function\n @code{RESULT = RSHIFT(I, SHIFT)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab The type shall be @code{INTEGER(*)}.\n @item @var{SHIFT} @tab The type shall be @code{INTEGER(*)}.\n @end multitable\n@@ -7601,7 +7601,7 @@ Elemental function\n @code{RESULT = SCALE(X, I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type of the argument shall be a @code{REAL}.\n @item @var{I} @tab The type of the argument shall be a @code{INTEGER}.\n @end multitable\n@@ -7670,7 +7670,7 @@ function\n @code{RESULT = SECNDS (X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item Name        @tab Type\n @item @var{T}     @tab REAL(4)\n @item @var{X}     @tab REAL(4)\n@@ -7717,7 +7717,7 @@ Transformational function\n @code{RESULT = SELECTED_INT_KIND(I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{I} @tab shall be a scalar and of type @code{INTEGER}.\n @end multitable\n \n@@ -7761,7 +7761,7 @@ Transformational function\n @code{RESULT = SELECTED_REAL_KIND(P, R)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{P} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n @item @var{R} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n @end multitable\n@@ -7822,7 +7822,7 @@ Elemental function\n @code{RESULT = SET_EXPONENT(X, I)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @item @var{I} @tab shall be of type @code{INTEGER}.\n @end multitable\n@@ -7892,7 +7892,7 @@ Elemental function\n @code{RESULT = SIGN(A, B)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A} @tab shall be a scalar of type @code{INTEGER} or @code{REAL}\n @item @var{B} @tab shall be a scalar of the same type and kind as @var{A}\n @end multitable\n@@ -7916,7 +7916,7 @@ end program test_sign\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name              @tab Arguments      @tab Return type    @tab Standard\n @item @code{ISIGN(A,P)} @tab @code{INTEGER(4)} @tab @code{INTEGER(4)} @tab f95, gnu\n @item @code{DSIGN(A,P)} @tab @code{REAL(8)} @tab @code{REAL(8)} @tab f95, gnu\n@@ -7954,7 +7954,7 @@ subroutine, non-elemental function\n @end multitable\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{NUMBER} @tab shall be a scalar integer, with @code{INTENT(IN)}\n @item @var{HANDLER}@tab Signal handler (@code{INTEGER FUNCTION} or\n @code{SUBROUTINE}) or dummy/global @code{INTEGER} scalar.\n@@ -8004,7 +8004,7 @@ Elemental function\n @code{RESULT = SIN(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -8021,7 +8021,7 @@ end program test_sin\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DSIN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n @item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n@@ -8055,7 +8055,7 @@ Elemental function\n @code{RESULT = SINH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -8071,7 +8071,7 @@ end program test_sinh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n @end multitable\n@@ -8124,7 +8124,7 @@ Subroutine\n @code{CALL SLEEP(SECONDS)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{SECONDS} @tab The type shall be of default @code{INTEGER}.\n @end multitable\n \n@@ -8159,7 +8159,7 @@ function\n @code{RESULT = SNGL(A)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{A} @tab The type shall be a double precision @code{REAL}.\n @end multitable\n \n@@ -8245,7 +8245,7 @@ Elemental function\n @code{RESULT = SQRT(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)} or\n @code{COMPLEX(*)}.\n @end multitable\n@@ -8265,7 +8265,7 @@ end program test_sqrt\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type          @tab Standard\n @item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab F95 and later\n @item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab F95 and later\n@@ -8297,7 +8297,7 @@ non-elemental subroutine\n @code{CALL SRAND(SEED)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{SEED} @tab shall be a scalar @code{INTEGER(kind=4)}.\n @end multitable\n \n@@ -8335,7 +8335,7 @@ the file itself, but execute (search) permission is required on all of the\n directories in path that lead to the file.\n \n The elements that are obtained and stored in the array @code{BUFF}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @code{buff(1)}   @tab  Device ID \n @item @code{buff(2)}   @tab  Inode number \n @item @code{buff(3)}   @tab  File mode \n@@ -8365,7 +8365,7 @@ Non-elemental subroutine\n @code{CALL STAT(FILE,BUFF[,STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{FILE}   @tab The type shall be @code{CHARACTER(*)}, a valid path within the file system.\n @item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n@@ -8454,7 +8454,7 @@ Subroutine\n @code{CALL SYMLNK(PATH1, PATH2 [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PATH1} @tab Shall be of default @code{CHARACTER} type.\n @item @var{PATH2} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n@@ -8489,7 +8489,7 @@ Subroutine\n @code{CALL SYSTEM(COMMAND [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{COMMAND} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STATUS}  @tab (Optional) Shall be of default @code{INTEGER} type.\n @end multitable\n@@ -8544,7 +8544,7 @@ Elemental function\n @code{RESULT = TAN(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -8561,7 +8561,7 @@ end program test_tan\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n @end multitable\n@@ -8592,7 +8592,7 @@ Elemental function\n @code{X = TANH(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL(*)}.\n @end multitable\n \n@@ -8609,7 +8609,7 @@ end program test_tanh\n @end smallexample\n \n @item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .40\n+@multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n @item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab F95 and later\n @end multitable\n@@ -8720,7 +8720,7 @@ Elemental function\n @code{RESULT = TINY(X)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab shall be of type @code{REAL}.\n @end multitable\n \n@@ -8823,7 +8823,7 @@ Inquiry function\n @code{RESULT = UBOUND(ARRAY [, DIM])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{ARRAY} @tab Shall be an array, of any type.\n @item @var{DIM} @tab (Optional) Shall be a scalar @code{INTEGER(*)}.\n @end multitable\n@@ -8863,7 +8863,7 @@ Subroutine\n @code{CALL UMASK(MASK [, OLD])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{MASK} @tab Shall be a scalar of type @code{INTEGER(*)}.\n @item @var{MASK} @tab (Optional) Shall be a scalar of type\n                       @code{INTEGER(*)}.\n@@ -8896,7 +8896,7 @@ Subroutine\n @code{CALL UNLINK(PATH [, STATUS])}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{PATH} @tab Shall be of default @code{CHARACTER} type.\n @item @var{STATUS} @tab (Optional) Shall be of default @code{INTEGER} type.\n @end multitable\n@@ -8981,7 +8981,7 @@ Non-elemental function\n @code{RESULT = XOR(X, Y)}\n \n @item @emph{Arguments}:\n-@multitable @columnfractions .15 .80\n+@multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @item @var{Y} @tab The type shall be either @code{INTEGER(*)} or @code{LOGICAL}.\n @end multitable"}]}