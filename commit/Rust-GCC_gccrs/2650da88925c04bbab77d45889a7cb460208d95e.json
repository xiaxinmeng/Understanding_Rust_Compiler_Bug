{"sha": "2650da88925c04bbab77d45889a7cb460208d95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1MGRhODg5MjVjMDRiYmFiNzdkNDU4ODlhN2NiNDYwMjA4ZDk1ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-12T07:29:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-12T07:29:10Z"}, "message": "tree-vrp.c (vrp_visit_phi_node): Allow a last iteration if the currently executable edges have fixed ranges.\n\n2016-08-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (vrp_visit_phi_node): Allow a last iteration if\n\tthe currently executable edges have fixed ranges.  Always\n\tgo through update_value_range.\n\nFrom-SVN: r239404", "tree": {"sha": "2da58c91ab88ccd07d5af4b54eb45d886a537096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da58c91ab88ccd07d5af4b54eb45d886a537096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2650da88925c04bbab77d45889a7cb460208d95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650da88925c04bbab77d45889a7cb460208d95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2650da88925c04bbab77d45889a7cb460208d95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650da88925c04bbab77d45889a7cb460208d95e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e366d7d807f8d06dc35570871ba2b723b78975af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e366d7d807f8d06dc35570871ba2b723b78975af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e366d7d807f8d06dc35570871ba2b723b78975af"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "e3e9932b96355aa0fef92f60a51111e06a697b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650da88925c04bbab77d45889a7cb460208d95e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650da88925c04bbab77d45889a7cb460208d95e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2650da88925c04bbab77d45889a7cb460208d95e", "patch": "@@ -1,3 +1,9 @@\n+2016-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (vrp_visit_phi_node): Allow a last iteration if\n+\tthe currently executable edges have fixed ranges.  Always\n+\tgo through update_value_range.\n+\n 2016-08-12  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/63240"}, {"sha": "6934914c149297883256836c83bd57e34185f333", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650da88925c04bbab77d45889a7cb460208d95e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650da88925c04bbab77d45889a7cb460208d95e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2650da88925c04bbab77d45889a7cb460208d95e", "patch": "@@ -8725,6 +8725,7 @@ vrp_visit_phi_node (gphi *phi)\n       print_gimple_stmt (dump_file, phi, 0, dump_flags);\n     }\n \n+  bool may_simulate_again = false;\n   edges = 0;\n   for (i = 0; i < gimple_phi_num_args (phi); i++)\n     {\n@@ -8747,6 +8748,12 @@ vrp_visit_phi_node (gphi *phi)\n \n \t  if (TREE_CODE (arg) == SSA_NAME)\n \t    {\n+\t      /* See if we are eventually going to change one of the args.  */\n+\t      gimple *def_stmt = SSA_NAME_DEF_STMT (arg);\n+\t      if (! gimple_nop_p (def_stmt)\n+\t\t  && prop_simulate_again_p (def_stmt))\n+\t\tmay_simulate_again = true;\n+\n \t      vr_arg = *(get_value_range (arg));\n \t      /* Do not allow equivalences or symbolic ranges to leak in from\n \t\t backedges.  That creates invalid equivalencies.\n@@ -8822,11 +8829,14 @@ vrp_visit_phi_node (gphi *phi)\n      previous one.  We don't do this if we have seen a new executable\n      edge; this helps us avoid an overflow infinity for conditionals\n      which are not in a loop.  If the old value-range was VR_UNDEFINED\n-     use the updated range and iterate one more time.  */\n+     use the updated range and iterate one more time.  If we will not\n+     simulate this PHI again with the same number of edges then iterate\n+     one more time.  */\n   if (edges > 0\n       && gimple_phi_num_args (phi) > 1\n       && edges == old_edges\n-      && lhs_vr->type != VR_UNDEFINED)\n+      && lhs_vr->type != VR_UNDEFINED\n+      && may_simulate_again)\n     {\n       /* Compare old and new ranges, fall back to varying if the\n          values are not comparable.  */\n@@ -8880,6 +8890,31 @@ vrp_visit_phi_node (gphi *phi)\n       goto infinite_check;\n     }\n \n+  goto update_range;\n+\n+varying:\n+  set_value_range_to_varying (&vr_result);\n+\n+scev_check:\n+  /* If this is a loop PHI node SCEV may known more about its value-range.\n+     scev_check can be reached from two paths, one is a fall through from above\n+     \"varying\" label, the other is direct goto from code block which tries to\n+     avoid infinite simulation.  */\n+  if ((l = loop_containing_stmt (phi))\n+      && l->header == gimple_bb (phi))\n+    adjust_range_with_scev (&vr_result, l, phi, lhs);\n+\n+infinite_check:\n+  /* If we will end up with a (-INF, +INF) range, set it to\n+     VARYING.  Same if the previous max value was invalid for\n+     the type and we end up with vr_result.min > vr_result.max.  */\n+  if ((vr_result.type == VR_RANGE || vr_result.type == VR_ANTI_RANGE)\n+      && !((vrp_val_is_max (vr_result.max) && vrp_val_is_min (vr_result.min))\n+\t   || compare_values (vr_result.min, vr_result.max) > 0))\n+    ;\n+  else\n+    set_value_range_to_varying (&vr_result);\n+\n   /* If the new range is different than the previous value, keep\n      iterating.  */\n update_range:\n@@ -8902,31 +8937,6 @@ vrp_visit_phi_node (gphi *phi)\n \n   /* Nothing changed, don't add outgoing edges.  */\n   return SSA_PROP_NOT_INTERESTING;\n-\n-varying:\n-  set_value_range_to_varying (&vr_result);\n-\n-scev_check:\n-  /* If this is a loop PHI node SCEV may known more about its value-range.\n-     scev_check can be reached from two paths, one is a fall through from above\n-     \"varying\" label, the other is direct goto from code block which tries to\n-     avoid infinite simulation.  */\n-  if ((l = loop_containing_stmt (phi))\n-      && l->header == gimple_bb (phi))\n-    adjust_range_with_scev (&vr_result, l, phi, lhs);\n-\n-infinite_check:\n-  /* If we will end up with a (-INF, +INF) range, set it to\n-     VARYING.  Same if the previous max value was invalid for\n-     the type and we end up with vr_result.min > vr_result.max.  */\n-  if ((vr_result.type == VR_RANGE || vr_result.type == VR_ANTI_RANGE)\n-      && !((vrp_val_is_max (vr_result.max) && vrp_val_is_min (vr_result.min))\n-\t   || compare_values (vr_result.min, vr_result.max) > 0))\n-    goto update_range;\n-\n-  /* No match found.  Set the LHS to VARYING.  */\n-  set_value_range_to_varying (lhs_vr);\n-  return SSA_PROP_VARYING;\n }\n \n /* Simplify boolean operations if the source is known"}]}