{"sha": "89a53f83d8494256c90b0658be00bc9cff38bf3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhNTNmODNkODQ5NDI1NmM5MGIwNjU4YmUwMGJjOWNmZjM4YmYzYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:42:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T10:42:43Z"}, "message": "[multiple changes]\n\n2017-01-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Access_Type_Declaration): Protect access to the\n\tEntity attribute.\n\t* sem_ch10.adb (Install_Siblings): Skip processing malformed trees.\n\t* sem_cat.adb (Validate_Categoriztion_Dependency): Skip processing\n\tmalformed trees.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specification, case\n\tDynamic_Predicate): If the entity E is a subtype that inherits\n\ta static predicate for its parent P,, the inherited and the\n\tnew predicate combine in the generated predicate function,\n\tand E only has a dynamic predicate.\n\n2017-01-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-boustr.ads, s-boustr.adb: New package.\n\t* Makefile.rtl: Add s-boustr.\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* inline.adb (Process_Formals): Qualify the\n\texpression of a return statement when it yields a universal type.\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_All): Freeze the default\n\texpressions of all eligible formal parameters that appear in\n\tentries, entry families, and protected subprograms.\n\nFrom-SVN: r244701", "tree": {"sha": "cd459f53f3d47fd7f4ee23cc375baae5158d98ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd459f53f3d47fd7f4ee23cc375baae5158d98ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a53f83d8494256c90b0658be00bc9cff38bf3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a53f83d8494256c90b0658be00bc9cff38bf3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a53f83d8494256c90b0658be00bc9cff38bf3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a53f83d8494256c90b0658be00bc9cff38bf3b/comments", "author": null, "committer": null, "parents": [{"sha": "4f324de225b3f282bece2f27344ee2767bac81d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f324de225b3f282bece2f27344ee2767bac81d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f324de225b3f282bece2f27344ee2767bac81d1"}], "stats": {"total": 261, "additions": 230, "deletions": 31}, "files": [{"sha": "03f1e983d6306084f9160bf8952ac2d34743405a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -1,3 +1,35 @@\n+2017-01-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Type_Declaration): Protect access to the\n+\tEntity attribute.\n+\t* sem_ch10.adb (Install_Siblings): Skip processing malformed trees.\n+\t* sem_cat.adb (Validate_Categoriztion_Dependency): Skip processing\n+\tmalformed trees.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specification, case\n+\tDynamic_Predicate): If the entity E is a subtype that inherits\n+\ta static predicate for its parent P,, the inherited and the\n+\tnew predicate combine in the generated predicate function,\n+\tand E only has a dynamic predicate.\n+\n+2017-01-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-boustr.ads, s-boustr.adb: New package.\n+\t* Makefile.rtl: Add s-boustr.\n+\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* inline.adb (Process_Formals): Qualify the\n+\texpression of a return statement when it yields a universal type.\n+\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_All): Freeze the default\n+\texpressions of all eligible formal parameters that appear in\n+\tentries, entry families, and protected subprograms.\n+\n 2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Check_Nonoverridable_Aspects); Refine check"}, {"sha": "63b1a95e3a8150d8ec4e7844a0113446a82bbe86", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -493,6 +493,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-bignum$(objext) \\\n   s-bitops$(objext) \\\n   s-boarop$(objext) \\\n+  s-boustr$(objext) \\\n   s-bytswa$(objext) \\\n   s-carsi8$(objext) \\\n   s-carun8$(objext) \\"}, {"sha": "c6cb52e9cecd2655be314d5ed2e8368e8fd64974", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -1688,9 +1688,6 @@ package body Freeze is\n    --  as they are generated.\n \n    procedure Freeze_All (From : Entity_Id; After : in out Node_Id) is\n-      E     : Entity_Id;\n-      Decl  : Node_Id;\n-\n       procedure Freeze_All_Ent (From : Entity_Id; After : in out Node_Id);\n       --  This is the internal recursive routine that does freezing of entities\n       --  (but NOT the analysis of default expressions, which should not be\n@@ -1863,10 +1860,10 @@ package body Freeze is\n                   --  current package, but this body does not freeze incomplete\n                   --  types that may be declared in this private part.\n \n-                  if (Nkind_In (Bod, N_Subprogram_Body,\n-                                     N_Entry_Body,\n+                  if (Nkind_In (Bod, N_Entry_Body,\n                                      N_Package_Body,\n                                      N_Protected_Body,\n+                                     N_Subprogram_Body,\n                                      N_Task_Body)\n                         or else Nkind (Bod) in N_Body_Stub)\n                     and then\n@@ -1885,6 +1882,12 @@ package body Freeze is\n          end loop;\n       end Freeze_All_Ent;\n \n+      --  Local variables\n+\n+      Decl : Node_Id;\n+      E    : Entity_Id;\n+      Item : Entity_Id;\n+\n    --  Start of processing for Freeze_All\n \n    begin\n@@ -1925,33 +1928,28 @@ package body Freeze is\n                elsif Nkind (Decl) = N_Subprogram_Declaration\n                  and then Present (Corresponding_Body (Decl))\n                  and then\n-                   Nkind (Unit_Declaration_Node (Corresponding_Body (Decl)))\n-                                          = N_Subprogram_Renaming_Declaration\n+                   Nkind (Unit_Declaration_Node (Corresponding_Body (Decl))) =\n+                     N_Subprogram_Renaming_Declaration\n                then\n                   Build_And_Analyze_Renamed_Body\n                     (Decl, Corresponding_Body (Decl), After);\n                end if;\n             end if;\n \n-         elsif Ekind (E) in Task_Kind\n-           and then Nkind_In (Parent (E), N_Task_Type_Declaration,\n-                                          N_Single_Task_Declaration)\n-         then\n-            declare\n-               Ent : Entity_Id;\n+         --  Freeze the default expressions of entries, entry families, and\n+         --  protected subprograms.\n \n-            begin\n-               Ent := First_Entity (E);\n-               while Present (Ent) loop\n-                  if Is_Entry (Ent)\n-                    and then not Default_Expressions_Processed (Ent)\n-                  then\n-                     Process_Default_Expressions (Ent, After);\n-                  end if;\n+         elsif Is_Concurrent_Type (E) then\n+            Item := First_Entity (E);\n+            while Present (Item) loop\n+               if (Is_Entry (Item) or else Is_Subprogram (Item))\n+                 and then not Default_Expressions_Processed (Item)\n+               then\n+                  Process_Default_Expressions (Item, After);\n+               end if;\n \n-                  Next_Entity (Ent);\n-               end loop;\n-            end;\n+               Next_Entity (Item);\n+            end loop;\n          end if;\n \n          --  Historical note: We used to create a finalization master for an"}, {"sha": "049ebd8f70cfc9f694c45c9d4e15e72aa615a53c", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -2483,13 +2483,12 @@ package body Inline is\n                --  errors, e.g. when the expression is a numeric literal and\n                --  the context is private. If the expression is an aggregate,\n                --  use a qualified expression, because an aggregate is not a\n-               --  legal argument of a conversion. Ditto for numeric literals,\n-               --  which must be resolved to a specific type.\n+               --  legal argument of a conversion. Ditto for numeric literals\n+               --  and attributes that yield a universal type, because those\n+               --  must be resolved to a specific type.\n \n-               if Nkind_In (Expression (N), N_Aggregate,\n-                                            N_Null,\n-                                            N_Real_Literal,\n-                                            N_Integer_Literal)\n+               if Nkind_In (Expression (N), N_Aggregate, N_Null)\n+                 or else Yields_Universal_Type (Expression (N))\n                then\n                   Ret :=\n                     Make_Qualified_Expression (Sloc (N),"}, {"sha": "ca07dbb0932fe06e6994944f7371a3022dee11c2", "filename": "gcc/ada/s-boustr.adb", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fs-boustr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fs-boustr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-boustr.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -0,0 +1,95 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                S Y S T E M . B O U N D E D _ S T R I N G S               --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                       Copyright (C) 2016, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+\n+package body System.Bounded_Strings is\n+\n+   ------------\n+   -- Append --\n+   ------------\n+\n+   procedure Append (X : in out Bounded_String; C : Character) is\n+   begin\n+      --  If we have too many characters to fit, simply drop them\n+\n+      if X.Length < X.Max_Length then\n+         X.Length           := X.Length + 1;\n+         X.Chars (X.Length) := C;\n+      end if;\n+   end Append;\n+\n+   procedure Append (X : in out Bounded_String; S : String) is\n+   begin\n+      for C of S loop\n+         Append (X, C);\n+      end loop;\n+   end Append;\n+\n+   --------------------\n+   -- Append_Address --\n+   --------------------\n+\n+   procedure Append_Address (X : in out Bounded_String; A : Address)\n+   is\n+      S : String (1 .. 18);\n+      P : Natural;\n+      use System.Storage_Elements;\n+      N : Integer_Address;\n+\n+      H : constant array (Integer range 0 .. 15) of Character :=\n+        \"0123456789abcdef\";\n+   begin\n+      P := S'Last;\n+      N := To_Integer (A);\n+      loop\n+         S (P) := H (Integer (N mod 16));\n+         P := P - 1;\n+         N := N / 16;\n+         exit when N = 0;\n+      end loop;\n+\n+      S (P - 1) := '0';\n+      S (P) := 'x';\n+\n+      Append (X, S (P - 1 .. S'Last));\n+   end Append_Address;\n+\n+   ---------------\n+   -- To_String --\n+   ---------------\n+\n+   function To_String (X : Bounded_String) return String is\n+   begin\n+      return X.Chars (1 .. X.Length);\n+   end To_String;\n+\n+end System.Bounded_Strings;"}, {"sha": "6e81a49506c26941c8ab08365c996c1ce7c6c17d", "filename": "gcc/ada/s-boustr.ads", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fs-boustr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fs-boustr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-boustr.ads?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -0,0 +1,59 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                S Y S T E M . B O U N D E D _ S T R I N G S               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                       Copyright (C) 2016, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  A very simple implentation of bounded strings, used by tracebacks\n+\n+package System.Bounded_Strings is\n+   type Bounded_String (Max_Length : Natural) is limited private;\n+   --  A string whose length is bounded by Max_Length. The bounded string is\n+   --  empty at initialization.\n+\n+   procedure Append (X : in out Bounded_String; C : Character);\n+   procedure Append (X : in out Bounded_String; S : String);\n+   --  Append a character or a string to X. If the bounded string is full,\n+   --  extra characters are simply dropped.\n+\n+   function To_String (X : Bounded_String) return String;\n+   function \"+\" (X : Bounded_String) return String renames To_String;\n+   --  Convert to a normal string\n+\n+   procedure Append_Address (X : in out Bounded_String; A : Address);\n+   --  Append an address to X\n+\n+private\n+   type Bounded_String (Max_Length : Natural) is limited record\n+      Length : Natural := 0;\n+      --  Current length of the string\n+\n+      Chars  : String (1 .. Max_Length);\n+      --  String content\n+   end record;\n+end System.Bounded_Strings;"}, {"sha": "fbe5382c1b3aeb831396390b96042402de95e955", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -1026,6 +1026,9 @@ package body Sem_Cat is\n                              --  generic instantiation.\n \n                              or else Error_Posted (Item))\n+               and then not (Try_Semantics\n+                             --  Skip processing malformed trees\n+                             and then Nkind (Name (Item)) not in N_Has_Entity)\n             then\n                Entity_Of_Withed := Entity (Name (Item));\n                Check_Categorization_Dependencies"}, {"sha": "180c025dfdbd234f5a496886b6392138ec2cb113", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -4209,6 +4209,9 @@ package body Sem_Ch10 is\n            or else Implicit_With (Item)\n            or else Limited_Present (Item)\n            or else Error_Posted (Item)\n+            --  Skip processing malformed trees\n+           or else (Try_Semantics\n+                      and then Nkind (Name (Item)) not in N_Has_Entity)\n          then\n             null;\n "}, {"sha": "c9832bef5e4c454b510442d9ca61a8050400b6b3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -2262,6 +2262,13 @@ package body Sem_Ch13 is\n \n                   if A_Id = Aspect_Dynamic_Predicate then\n                      Set_Has_Dynamic_Predicate_Aspect (E);\n+\n+                     --  If the entity has a dynamic predicate, any inherited\n+                     --  static predicate becomes dynamic as well, and the\n+                     --  predicate function includes the conjunction of both.\n+\n+                     Set_Has_Static_Predicate_Aspect (E, False);\n+\n                   elsif A_Id = Aspect_Static_Predicate then\n                      Set_Has_Static_Predicate_Aspect (E);\n                   end if;"}, {"sha": "dbf126e933e92750045262d6690a841e43810c1f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a53f83d8494256c90b0658be00bc9cff38bf3b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=89a53f83d8494256c90b0658be00bc9cff38bf3b", "patch": "@@ -1333,7 +1333,9 @@ package body Sem_Ch3 is\n       if Nkind (S) /= N_Subtype_Indication then\n          Analyze (S);\n \n-         if Ekind (Root_Type (Entity (S))) = E_Incomplete_Type then\n+         if Present (Entity (S))\n+           and then Ekind (Root_Type (Entity (S))) = E_Incomplete_Type\n+         then\n             Set_Directly_Designated_Type (T, Entity (S));\n \n             --  If the designated type is a limited view, we cannot tell if"}]}