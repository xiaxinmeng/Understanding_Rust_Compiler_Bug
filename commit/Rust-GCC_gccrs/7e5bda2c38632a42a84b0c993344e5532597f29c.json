{"sha": "7e5bda2c38632a42a84b0c993344e5532597f29c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1YmRhMmMzODYzMmE0MmE4NGIwYzk5MzM0NGU1NTMyNTk3ZjI5Yw==", "commit": {"author": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-03-25T12:04:25Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-03-25T12:04:25Z"}, "message": "rtl.texi (RTX_FRAME_RELATED_P): Add documentation.\n\nd\nThu Mar 25 14:04:54 EST 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\t* rtl.texi (RTX_FRAME_RELATED_P): Add documentation.\n\t* rtl.h (struct rtx_def): Update comment for frame_related field.\n\t(set_unique_reg_note): Declare prototype.\n\t* dwarf2out.c (dwarf2out_frame_debug_expr): Split out from\n\t'dwarf2out_frame_debug' to handle only expressions, and process\n\tcomponent parts of a PARALLEL expression.\n\t(dwarf2out_frame_debug): Process insns only, and call\n\tnew function 'dwarf2out_frame_debug_expr' for patterns.\n\t* emit-rtl.c (set_unique_reg_note): New function to add a reg note,\n\tbut if there is an existingone, deletes it first.\n\t* expmed.c (expand_mult, expand_divmod): Use set_unique_reg_note.\n\t* optabs.c (add_equal_note, expand_binop): Use set_unique_reg_note.\n\t(emit_no_conflict_block, emit_libcall_block): Use set_unique_reg_note.\n\t(expand_fix):  Use set_unique_reg_note.\n\nFrom-SVN: r25979", "tree": {"sha": "a7264f5198849fbd1289b07fb29e4c65b4bbef0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7264f5198849fbd1289b07fb29e4c65b4bbef0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e5bda2c38632a42a84b0c993344e5532597f29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5bda2c38632a42a84b0c993344e5532597f29c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5bda2c38632a42a84b0c993344e5532597f29c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5bda2c38632a42a84b0c993344e5532597f29c/comments", "author": null, "committer": null, "parents": [{"sha": "87b47c855df767801628050c9a3e5cb678f67c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b47c855df767801628050c9a3e5cb678f67c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b47c855df767801628050c9a3e5cb678f67c48"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "37116e30e051bc067bd7cfd0850c8b152f1c2247", "filename": "gcc/expmed.c", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e5bda2c38632a42a84b0c993344e5532597f29c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e5bda2c38632a42a84b0c993344e5532597f29c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=7e5bda2c38632a42a84b0c993344e5532597f29c", "patch": "@@ -2473,10 +2473,10 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \t\t multiplication sequences.  */\n \n \t      insn = get_last_insn ();\n-\t      REG_NOTES (insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t     gen_rtx_MULT (mode, op0, GEN_INT (val_so_far)),\n-\t\t\t\t     REG_NOTES (insn));\n+\t      set_unique_reg_note (insn, \n+\t      \t\t\t   REG_EQUAL,\n+\t\t\t\t   gen_rtx_MULT (mode, op0, \n+\t\t\t\t   \t         GEN_INT (val_so_far)));\n \t    }\n \n \t  if (variant == negate_variant)\n@@ -3170,10 +3170,9 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\tif (insn != last\n \t\t    && (set = single_set (insn)) != 0\n \t\t    && SET_DEST (set) == quotient)\n-\t\t  REG_NOTES (insn)\n-\t\t    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t gen_rtx_UDIV (compute_mode, op0, op1),\n-\t\t\t\t\t REG_NOTES (insn));\n+\t\t  set_unique_reg_note (insn, \n+\t\t  \t\t       REG_EQUAL,\n+\t\t\t\t       gen_rtx_UDIV (compute_mode, op0, op1));\n \t      }\n \t    else\t\t/* TRUNC_DIV, signed */\n \t      {\n@@ -3247,12 +3246,11 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\tif (insn != last\n \t\t\t    && (set = single_set (insn)) != 0\n \t\t\t    && SET_DEST (set) == quotient)\n-\t\t\t  REG_NOTES (insn)\n-\t\t\t    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t\t gen_rtx_DIV (compute_mode,\n-\t\t\t\t\t\t\t      op0,\n-\t\t\t\t\t\t\t      GEN_INT (abs_d)),\n-\t\t\t\t       REG_NOTES (insn));\n+\t\t\t  set_unique_reg_note (insn, \n+\t\t\t  \t\t       REG_EQUAL,\n+\t\t\t\t\t       gen_rtx_DIV (compute_mode,\n+\t\t\t\t\t\t\t    op0,\n+\t\t\t\t\t\t\t    GEN_INT (abs_d)));\n \n \t\t\tquotient = expand_unop (compute_mode, neg_optab,\n \t\t\t\t\t\tquotient, quotient, 0);\n@@ -3317,10 +3315,9 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\tif (insn != last\n \t\t    && (set = single_set (insn)) != 0\n \t\t    && SET_DEST (set) == quotient)\n-\t\t  REG_NOTES (insn)\n-\t\t    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t gen_rtx_DIV (compute_mode, op0, op1),\n-\t\t\t\t\t REG_NOTES (insn));\n+\t\t  set_unique_reg_note (insn, \n+\t\t  \t\t       REG_EQUAL,\n+\t\t\t\t       gen_rtx_DIV (compute_mode, op0, op1));\n \t      }\n \t    break;\n \t  }\n@@ -3733,12 +3730,11 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t\t     NULL_RTX, unsignedp);\n \n \t    insn = get_last_insn ();\n-\t    REG_NOTES (insn)\n-\t      = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t   gen_rtx_fmt_ee (unsignedp ? UDIV : DIV,\n-\t\t\t\t\t\t   compute_mode,\n-\t\t\t\t\t\t   op0, op1),\n-\t\t\t\t   REG_NOTES (insn));\n+\t    set_unique_reg_note (insn,\n+\t    \t\t\t REG_EQUAL,\n+\t\t\t\t gen_rtx_fmt_ee (unsignedp ? UDIV : DIV,\n+\t\t\t\t\t\t compute_mode,\n+\t\t\t\t\t\t op0, op1));\n \t  }\n \tbreak;\n "}]}