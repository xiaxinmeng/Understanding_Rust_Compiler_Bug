{"sha": "e65deaff25930557e7de3b2663a7c466a2df04fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1ZGVhZmYyNTkzMDU1N2U3ZGUzYjI2NjNhN2M0NjZhMmRmMDRmZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-05T03:35:27Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-05T03:35:27Z"}, "message": "Use value_range_base::equal_p in value_range_base::operator== so we can handle\nsymbolics without dying.\n\nFrom-SVN: r277812", "tree": {"sha": "088cde1ed3a079b1988490b9cb499af8e9343bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088cde1ed3a079b1988490b9cb499af8e9343bf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65deaff25930557e7de3b2663a7c466a2df04fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65deaff25930557e7de3b2663a7c466a2df04fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65deaff25930557e7de3b2663a7c466a2df04fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65deaff25930557e7de3b2663a7c466a2df04fe/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d2931052190b28e72e45894dfc97245e67bf65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2931052190b28e72e45894dfc97245e67bf65e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2931052190b28e72e45894dfc97245e67bf65e"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "1c2fff162950ea19079ffc089f434f5ef6900f89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65deaff25930557e7de3b2663a7c466a2df04fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65deaff25930557e7de3b2663a7c466a2df04fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e65deaff25930557e7de3b2663a7c466a2df04fe", "patch": "@@ -1,3 +1,9 @@\n+2019-11-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (value_range_base::operator==): Use equal_p to\n+\tproperly handle symbolics.\n+\t(range_compatible_p): Remove.\n+\n 2019-11-04  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n \n \t* common.opt (-fabi-version): Document =14."}, {"sha": "a6d44e9dc6d1423746d2cb24a592bf6c93844e03", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65deaff25930557e7de3b2663a7c466a2df04fe/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65deaff25930557e7de3b2663a7c466a2df04fe/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e65deaff25930557e7de3b2663a7c466a2df04fe", "patch": "@@ -6319,33 +6319,10 @@ value_range_base::intersect (const value_range_base &r)\n     dump_flags |= TDF_DETAILS;\n }\n \n-/* Return TRUE if two types are compatible for range operations.  */\n-\n-static bool\n-range_compatible_p (tree t1, tree t2)\n-{\n-  if (POINTER_TYPE_P (t1) && POINTER_TYPE_P (t2))\n-    return true;\n-\n-  return types_compatible_p (t1, t2);\n-}\n-\n bool\n value_range_base::operator== (const value_range_base &r) const\n {\n-  if (undefined_p ())\n-    return r.undefined_p ();\n-\n-  if (num_pairs () != r.num_pairs ()\n-      || !range_compatible_p (type (), r.type ()))\n-    return false;\n-\n-  for (unsigned p = 0; p < num_pairs (); p++)\n-    if (wi::ne_p (lower_bound (p), r.lower_bound (p))\n-\t|| wi::ne_p (upper_bound (p), r.upper_bound (p)))\n-      return false;\n-\n-  return true;\n+  return equal_p (r);\n }\n \n /* Visit all arguments for PHI node PHI that flow through executable"}]}