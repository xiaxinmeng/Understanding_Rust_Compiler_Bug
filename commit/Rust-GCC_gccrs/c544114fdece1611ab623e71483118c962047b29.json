{"sha": "c544114fdece1611ab623e71483118c962047b29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0NDExNGZkZWNlMTYxMWFiNjIzZTcxNDgzMTE4Yzk2MjA0N2IyOQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:33:49Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:33:49Z"}, "message": "tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Handle more operators...\n\n\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Handle more\n\toperators: TRUNC_DIV_EXPR, BIT_AND_EXPR, BIT_IOR_EXPR, LSHIFT_EXPR,\n\tRSHIFT_EXPR and BIT_NOT_EXPR.\n\nFrom-SVN: r247886", "tree": {"sha": "47412381a6214a028c550420cdd32fd622066ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47412381a6214a028c550420cdd32fd622066ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c544114fdece1611ab623e71483118c962047b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c544114fdece1611ab623e71483118c962047b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c544114fdece1611ab623e71483118c962047b29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c544114fdece1611ab623e71483118c962047b29/comments", "author": null, "committer": null, "parents": [{"sha": "f9f69dd651b2f1031761312cc3d13aee40b46b5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f69dd651b2f1031761312cc3d13aee40b46b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f69dd651b2f1031761312cc3d13aee40b46b5e"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "e39c09d565d5e377573690d1b974d6baadbdc790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c544114fdece1611ab623e71483118c962047b29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c544114fdece1611ab623e71483118c962047b29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c544114fdece1611ab623e71483118c962047b29", "patch": "@@ -1,3 +1,9 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Handle more\n+\toperators: TRUNC_DIV_EXPR, BIT_AND_EXPR, BIT_IOR_EXPR, LSHIFT_EXPR,\n+\tRSHIFT_EXPR and BIT_NOT_EXPR.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (get_loop_invariant_expr): Simplify."}, {"sha": "4fc0ba4a5db91c623e01fdc32e6589d125ad9b04", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c544114fdece1611ab623e71483118c962047b29/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c544114fdece1611ab623e71483118c962047b29/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=c544114fdece1611ab623e71483118c962047b29", "patch": "@@ -4080,6 +4080,11 @@ force_expr_to_var_cost (tree expr, bool speed)\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n+    case TRUNC_DIV_EXPR:\n+    case BIT_AND_EXPR:\n+    case BIT_IOR_EXPR:\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n       op0 = TREE_OPERAND (expr, 0);\n       op1 = TREE_OPERAND (expr, 1);\n       STRIP_NOPS (op0);\n@@ -4088,6 +4093,7 @@ force_expr_to_var_cost (tree expr, bool speed)\n \n     CASE_CONVERT:\n     case NEGATE_EXPR:\n+    case BIT_NOT_EXPR:\n       op0 = TREE_OPERAND (expr, 0);\n       STRIP_NOPS (op0);\n       op1 = NULL_TREE;\n@@ -4156,6 +4162,23 @@ force_expr_to_var_cost (tree expr, bool speed)\n \treturn comp_cost (target_spill_cost [speed], 0);\n       break;\n \n+    case TRUNC_DIV_EXPR:\n+      /* Division by power of two is usually cheap, so we allow it.  Forbid\n+\t anything else.  */\n+      if (integer_pow2p (TREE_OPERAND (expr, 1)))\n+\tcost = comp_cost (add_cost (speed, mode), 0);\n+      else\n+\tcost = comp_cost (target_spill_cost[speed], 0);\n+      break;\n+\n+    case BIT_AND_EXPR:\n+    case BIT_IOR_EXPR:\n+    case BIT_NOT_EXPR:\n+    case LSHIFT_EXPR:\n+    case RSHIFT_EXPR:\n+      cost = comp_cost (add_cost (speed, mode), 0);\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}]}