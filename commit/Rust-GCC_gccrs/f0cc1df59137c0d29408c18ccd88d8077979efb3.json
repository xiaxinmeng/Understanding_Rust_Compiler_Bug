{"sha": "f0cc1df59137c0d29408c18ccd88d8077979efb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjYzFkZjU5MTM3YzBkMjk0MDhjMThjY2Q4OGQ4MDc3OTc5ZWZiMw==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-15T06:05:17Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-15T06:05:17Z"}, "message": "Changed some for index loops to for iterator loops that can deal with representation changes", "tree": {"sha": "e2338c62fc926b8ae92c3d1ac8428e8f31f43bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2338c62fc926b8ae92c3d1ac8428e8f31f43bee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0cc1df59137c0d29408c18ccd88d8077979efb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cc1df59137c0d29408c18ccd88d8077979efb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cc1df59137c0d29408c18ccd88d8077979efb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cc1df59137c0d29408c18ccd88d8077979efb3/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cc571b308d3d0103dd498fd277859e2116791a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cc571b308d3d0103dd498fd277859e2116791a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52cc571b308d3d0103dd498fd277859e2116791a"}], "stats": {"total": 195, "additions": 191, "deletions": 4}, "files": [{"sha": "64dd710692c8c424b77afead8dfeef477ae2fc77", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 191, "deletions": 4, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cc1df59137c0d29408c18ccd88d8077979efb3/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cc1df59137c0d29408c18ccd88d8077979efb3/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=f0cc1df59137c0d29408c18ccd88d8077979efb3", "patch": "@@ -16,6 +16,30 @@ class AttrVisitor : public AST::ASTVisitor\n \n   void expand_struct_fields (std::vector<AST::StructField> &fields)\n   {\n+    for (auto it = fields.begin (); it != fields.end ();)\n+      {\n+\tauto &field = *it;\n+\n+\tauto &field_attrs = field.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (field_attrs);\n+\tif (expander.fails_cfg (field_attrs))\n+\t  {\n+\t    it = fields.erase (it);\n+\t    continue;\n+\t  }\n+\n+\t// expand sub-types of type, but can't strip type itself\n+\tauto &type = field.get_field_type ();\n+\ttype->accept_vis (*this);\n+\tif (type->is_marked_for_strip ())\n+\t  rust_error_at (type->get_locus_slow (),\n+\t\t\t \"cannot strip type in this position\");\n+\n+\t// if nothing else happens, increment\n+\t++it;\n+      }\n+\n+    #if 0\n     for (int i = 0; i < fields.size ();)\n       {\n \tauto &field = fields[i];\n@@ -38,10 +62,35 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \ti++;\n       }\n+      #endif\n   }\n \n   void expand_tuple_fields (std::vector<AST::TupleField> &fields)\n   {\n+    for (auto it = fields.begin (); it != fields.end ();)\n+      {\n+\tauto &field = *it;\n+\n+\tauto &field_attrs = field.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (field_attrs);\n+\tif (expander.fails_cfg (field_attrs))\n+\t  {\n+\t    it = fields.erase (it);\n+\t    continue;\n+\t  }\n+\n+\t// expand sub-types of type, but can't strip type itself\n+\tauto &type = field.get_field_type ();\n+\ttype->accept_vis (*this);\n+\tif (type->is_marked_for_strip ())\n+\t  rust_error_at (type->get_locus_slow (),\n+\t\t\t \"cannot strip type in this position\");\n+\n+\t// if nothing else happens, increment\n+\t++it;\n+      }\n+\n+    #if 0\n     for (int i = 0; i < fields.size ();)\n       {\n \tauto &field = fields[i];\n@@ -64,10 +113,41 @@ class AttrVisitor : public AST::ASTVisitor\n \t// if nothing else happens, increment\n \ti++;\n       }\n+      #endif\n   }\n \n   void expand_function_params (std::vector<AST::FunctionParam> &params)\n   {\n+    for (auto it = params.begin (); it != params.end ();)\n+      {\n+\tauto &param = *it;\n+\n+\tauto &param_attrs = param.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (param_attrs);\n+\tif (expander.fails_cfg (param_attrs))\n+\t  {\n+\t    it = params.erase (it);\n+\t    continue;\n+\t  }\n+\n+\t// TODO: should an unwanted strip lead to break out of loop?\n+\tauto &pattern = param.get_pattern ();\n+\tpattern->accept_vis (*this);\n+\tif (pattern->is_marked_for_strip ())\n+\t  rust_error_at (pattern->get_locus_slow (),\n+\t\t\t \"cannot strip pattern in this position\");\n+\n+\tauto &type = param.get_type ();\n+\ttype->accept_vis (*this);\n+\tif (type->is_marked_for_strip ())\n+\t  rust_error_at (type->get_locus_slow (),\n+\t\t\t \"cannot strip type in this position\");\n+\n+\t// increment\n+\t++it;\n+      }\n+\n+    #if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n@@ -96,6 +176,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment\n \ti++;\n       }\n+      #endif\n   }\n \n   void expand_generic_args (AST::GenericArgs &args)\n@@ -142,6 +223,38 @@ class AttrVisitor : public AST::ASTVisitor\n \n   void expand_closure_params (std::vector<AST::ClosureParam> &params)\n   {\n+    for (auto it = params.begin (); it != params.end ();)\n+      {\n+\tauto &param = *it;\n+\n+\tauto &param_attrs = param.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (param_attrs);\n+\tif (expander.fails_cfg (param_attrs))\n+\t  {\n+\t    it = params.erase (it);\n+\t    continue;\n+\t  }\n+\n+\tauto &pattern = param.get_pattern ();\n+\tpattern->accept_vis (*this);\n+\tif (pattern->is_marked_for_strip ())\n+\t  rust_error_at (pattern->get_locus_slow (),\n+\t\t\t \"cannot strip pattern in this position\");\n+\n+\tif (param.has_type_given ())\n+\t  {\n+\t    auto &type = param.get_type ();\n+\t    type->accept_vis (*this);\n+\t    if (type->is_marked_for_strip ())\n+\t      rust_error_at (type->get_locus_slow (),\n+\t\t\t     \"cannot strip type in this position\");\n+\t  }\n+\n+\t// increment if found nothing else so far\n+\t++it;\n+      }\n+\n+    #if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n@@ -172,6 +285,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if found nothing else so far\n \ti++;\n       }\n+    #endif\n   }\n \n   void expand_self_param (AST::SelfParam &self_param)\n@@ -184,8 +298,8 @@ class AttrVisitor : public AST::ASTVisitor\n \t  rust_error_at (type->get_locus_slow (),\n \t\t\t \"cannot strip type in this position\");\n       }\n-    // TODO: maybe check for invariants being violated - e.g. both type and\n-    // lifetime?\n+    /* TODO: maybe check for invariants being violated - e.g. both type and\n+     * lifetime? */\n   }\n \n   void expand_where_clause (AST::WhereClause &where_clause)\n@@ -245,6 +359,23 @@ class AttrVisitor : public AST::ASTVisitor\n     if (decl.has_where_clause ())\n       expand_where_clause (decl.get_where_clause ());\n   }\n+  \n+  template <typename T>\n+  void expand_pointer_allow_strip (T &values) \n+  {\n+    for (auto it = values.begin (); it != values.end ();)\n+      {\n+\tauto &value = *it;\n+\n+\t// mark for stripping if required\n+\tvalue->accept_vis (*this);\n+\n+\tif (value->is_marked_for_strip ())\n+\t  it = values.erase (it);\n+\telse\n+\t  ++it;\n+      }\n+  }\n \n   void visit (AST::Token &) override\n   {\n@@ -649,6 +780,9 @@ class AttrVisitor : public AST::ASTVisitor\n   {\n     /* apparently outer attributes are allowed in \"elements of array\n      * expressions\" according to spec */\n+    expand_pointer_allow_strip (elems.get_values ());\n+\n+#if 0\n     auto &values = elems.get_values ();\n     for (int i = 0; i < values.size ();)\n       {\n@@ -662,6 +796,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::ArrayElemsCopied &elems) override\n   {\n@@ -763,6 +898,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* apparently outer attributes are allowed in \"elements of tuple\n      * expressions\" according to spec */\n+    expand_pointer_allow_strip (expr.get_tuple_elems ());\n+\n+#if 0\n     auto &values = expr.get_tuple_elems ();\n     for (int i = 0; i < values.size ();)\n       {\n@@ -776,6 +914,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::TupleIndexExpr &expr) override\n   {\n@@ -961,6 +1100,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* spec says outer attributes are specifically allowed for elements\n      * of tuple-style struct expressions, so full stripping possible */\n+    expand_pointer_allow_strip (expr.get_elems ());\n+\n+#if 0\n     auto &values = expr.get_elems ();\n     for (int i = 0; i < values.size ();)\n       {\n@@ -974,6 +1116,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::StructExprUnit &expr) override\n   {\n@@ -1068,6 +1211,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* spec says outer attributes are specifically allowed for elements\n      * of tuple-style enum expressions, so full stripping possible */\n+    expand_pointer_allow_strip (expr.get_elems ());\n+\n+#if 0\n     auto &values = expr.get_elems ();\n     for (int i = 0; i < values.size ();)\n       {\n@@ -1081,6 +1227,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::EnumExprFieldless &expr) override\n   {\n@@ -1115,6 +1262,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* spec says outer attributes are specifically allowed for elements\n      * of call expressions, so full stripping possible */\n+    expand_pointer_allow_strip (expr.get_params ());\n+\n+#if 0\n     auto &params = expr.get_params ();\n     for (int i = 0; i < params.size ();)\n       {\n@@ -1128,6 +1278,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::MethodCallExpr &expr) override\n   {\n@@ -1155,6 +1306,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* spec says outer attributes are specifically allowed for elements\n      * of method call expressions, so full stripping possible */\n+    expand_pointer_allow_strip (expr.get_params ());\n+\n+#if 0\n     auto &params = expr.get_params ();\n     for (int i = 0; i < params.size ();)\n       {\n@@ -1168,6 +1322,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::FieldAccessExpr &expr) override\n   {\n@@ -1231,6 +1386,9 @@ class AttrVisitor : public AST::ASTVisitor\n       }\n \n     // strip all statements\n+    expand_pointer_allow_strip (expr.get_statements ());\n+\n+#if 0\n     auto &stmts = expr.get_statements ();\n     for (int i = 0; i < stmts.size ();)\n       {\n@@ -1244,6 +1402,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n \n     // strip tail expression if exists - can actually fully remove it\n     if (expr.has_tail_expr ())\n@@ -2083,6 +2242,9 @@ class AttrVisitor : public AST::ASTVisitor\n       }\n \n     // strip items if required\n+    expand_pointer_allow_strip (module.get_items ());\n+\n+#if 0\n     auto &items = module.get_items ();\n     for (int i = 0; i < items.size ();)\n       {\n@@ -2096,6 +2258,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::ModuleNoBody &module) override\n   {\n@@ -2321,6 +2484,9 @@ class AttrVisitor : public AST::ASTVisitor\n \n     /* strip enum fields if required - this is presumably\n      * allowed by spec */\n+    expand_pointer_allow_strip (enum_item.get_variants ());\n+\n+#if 0\n     auto &variants = enum_item.get_variants ();\n     for (int i = 0; i < variants.size ();)\n       {\n@@ -2334,6 +2500,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::Union &union_item) override\n   {\n@@ -2540,6 +2707,9 @@ class AttrVisitor : public AST::ASTVisitor\n       expand_where_clause (trait.get_where_clause ());\n \n     // strip trait items if required\n+    expand_pointer_allow_strip (trait.get_trait_items ());\n+\n+#if 0\n     auto &trait_items = trait.get_trait_items ();\n     for (int i = 0; i < trait_items.size ();)\n       {\n@@ -2553,6 +2723,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::InherentImpl &impl) override\n   {\n@@ -2586,6 +2757,9 @@ class AttrVisitor : public AST::ASTVisitor\n       expand_where_clause (impl.get_where_clause ());\n \n     // strip inherent impl items if required\n+    expand_pointer_allow_strip (impl.get_impl_items ());\n+\n+#if 0\n     auto &impl_items = impl.get_impl_items ();\n     for (int i = 0; i < impl_items.size ();)\n       {\n@@ -2599,6 +2773,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::TraitImpl &impl) override\n   {\n@@ -2638,6 +2813,9 @@ class AttrVisitor : public AST::ASTVisitor\n       expand_where_clause (impl.get_where_clause ());\n \n     // strip trait impl items if required\n+    expand_pointer_allow_strip (impl.get_impl_items ());\n+\n+#if 0\n     auto &impl_items = impl.get_impl_items ();\n     for (int i = 0; i < impl_items.size ();)\n       {\n@@ -2651,6 +2829,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n   void visit (AST::ExternalStaticItem &item) override\n   {\n@@ -2744,6 +2923,9 @@ class AttrVisitor : public AST::ASTVisitor\n       }\n \n     // strip external items if required\n+    expand_pointer_allow_strip (block.get_extern_items ());\n+\n+#if 0\n     auto &extern_items = block.get_extern_items ();\n     for (int i = 0; i < extern_items.size ();)\n       {\n@@ -2757,6 +2939,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n   }\n \n   // I don't think it would be possible to strip macros without expansion\n@@ -2902,14 +3085,17 @@ class AttrVisitor : public AST::ASTVisitor\n     if (path.is_marked_for_strip ())\n       rust_error_at (path.get_locus (), \"cannot strip path in this position\");\n \n-    // TODO: apparently struct pattern fields can have outer attrs. so can they\n-    // be stripped?\n+    /* TODO: apparently struct pattern fields can have outer attrs. so can they\n+     * be stripped? */\n     if (!pattern.has_struct_pattern_elems ())\n       return;\n \n     auto &elems = pattern.get_struct_pattern_elems ();\n \n     // assuming you can strip struct pattern fields\n+    expand_pointer_allow_strip (elems.get_struct_pattern_fields ());\n+\n+#if 0\n     auto &fields = elems.get_struct_pattern_fields ();\n     for (int i = 0; i < fields.size ();)\n       {\n@@ -2922,6 +3108,7 @@ class AttrVisitor : public AST::ASTVisitor\n \telse\n \t  i++;\n       }\n+#endif\n \n     // assuming you can strip the \"..\" part\n     if (elems.has_etc ())"}]}