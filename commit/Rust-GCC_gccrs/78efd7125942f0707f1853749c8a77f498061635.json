{"sha": "78efd7125942f0707f1853749c8a77f498061635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlZmQ3MTI1OTQyZjA3MDdmMTg1Mzc0OWM4YTc3ZjQ5ODA2MTYzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:18:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:18:12Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* par-ch13.adb (Aspect_Specifications_Present): recognize\n\t\"with Identifier'Class =>\" as an aspect, so that a meaningful warning\n\tis issued in Strict mode.\n\t* par.adb: Fix typos in comments.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb (Result): modify error message to take into account Post\n\taspect when compiling Ada 2012 (or newer) code.\n\n2011-08-04  Nicolas Roche  <roche@adacore.com>\n\n\t* env.c (__gnat_clearenv): Avoid use of dynamic size array in order to\n\tremove need for GCC exceptions. \n\n2011-08-04  Vincent Celier  <celier@adacore.com>\n\n\t* makeutl.adb (Do_Complete): Call Debug_Output with the name of the\n\tproject, not the source file name.\n\t* prj.adb (Find_Sources.Look_For_Sources): If the source has been\n\texcluded, continue looking. This excluded source will only be returned\n\tif there is no other source with the same base name that is not locally\n\tremoved.\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Intrinsic_Operator): if the result type is\n\tprivate and one of the operands is a real literal, use a qualified\n\texpression rather than a conversion which is not meaningful to the\n\tback-end.\n\nFrom-SVN: r177342", "tree": {"sha": "a2002af452b1527d28b25193a57cac52564eb312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2002af452b1527d28b25193a57cac52564eb312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78efd7125942f0707f1853749c8a77f498061635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78efd7125942f0707f1853749c8a77f498061635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78efd7125942f0707f1853749c8a77f498061635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78efd7125942f0707f1853749c8a77f498061635/comments", "author": null, "committer": null, "parents": [{"sha": "0170a691940f8064a86e3af4cccb5960b2ffe07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0170a691940f8064a86e3af4cccb5960b2ffe07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0170a691940f8064a86e3af4cccb5960b2ffe07a"}], "stats": {"total": 129, "additions": 111, "deletions": 18}, "files": [{"sha": "3aa9c77ab88873cff6728ead994cbd9ed6adf391", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -1,3 +1,36 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch13.adb (Aspect_Specifications_Present): recognize\n+\t\"with Identifier'Class =>\" as an aspect, so that a meaningful warning\n+\tis issued in Strict mode.\n+\t* par.adb: Fix typos in comments.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Result): modify error message to take into account Post\n+\taspect when compiling Ada 2012 (or newer) code.\n+\n+2011-08-04  Nicolas Roche  <roche@adacore.com>\n+\n+\t* env.c (__gnat_clearenv): Avoid use of dynamic size array in order to\n+\tremove need for GCC exceptions. \n+\n+2011-08-04  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeutl.adb (Do_Complete): Call Debug_Output with the name of the\n+\tproject, not the source file name.\n+\t* prj.adb (Find_Sources.Look_For_Sources): If the source has been\n+\texcluded, continue looking. This excluded source will only be returned\n+\tif there is no other source with the same base name that is not locally\n+\tremoved.\n+\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Intrinsic_Operator): if the result type is\n+\tprivate and one of the operands is a real literal, use a qualified\n+\texpression rather than a conversion which is not meaningful to the\n+\tback-end.\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch13.adb (Aspect_Loop): when an aspect X and its classwise"}, {"sha": "c58139a2d681c3024ab0ddfefab3a0731402f6ab", "filename": "gcc/ada/env.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -316,10 +316,12 @@ void __gnat_clearenv (void) {\n     /* create a string that contains \"name\" */\n     size++;\n     {\n-      char expression[size];\n+      char *expression;\n+      expression = (char *) xmalloc (size * sizeof (char));\n       strncpy (expression, env[0], size);\n       expression[size - 1] = 0;\n       __gnat_unsetenv (expression);\n+      free (expression);\n     }\n   }\n #else"}, {"sha": "cced36f007defb12e5bb421f847b9f6d99ae4c55", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -1377,7 +1377,7 @@ package body Makeutl is\n \n                         if Source /= No_Source then\n                            Debug_Output (\"Found main in project\",\n-                                         Name_Id (Source.File));\n+                                         Source.Project.Name);\n                            Names.Table (J).File    := Source.File;\n                            Names.Table (J).Project := File.Project;\n "}, {"sha": "ecbf58f980e1f73cfe76058dddd4fb861a06ad5e", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -89,9 +89,9 @@ package body Ch13 is\n             Result := Token = Tok_Arrow;\n          end if;\n \n-      --  If earlier than Ada 2012, check for valid aspect identifier followed\n-      --  by an arrow, and consider that this is still an aspect specification\n-      --  so we give an appropriate message.\n+      --  If earlier than Ada 2012, check for valid aspect identifier (possibly\n+      --  completed with 'CLASS) followed by an arrow, and consider that this\n+      --  is still an aspect specification so we give an appropriate message.\n \n       else\n          if Get_Aspect_Id (Token_Name) = No_Aspect then\n@@ -100,10 +100,26 @@ package body Ch13 is\n          else\n             Scan; -- past aspect name\n \n-            if Token /= Tok_Arrow then\n-               Result := False;\n+            Result := False;\n \n-            else\n+            if Token = Tok_Arrow then\n+               Result := True;\n+\n+            elsif Token = Tok_Apostrophe then\n+               Scan; -- past apostrophe\n+\n+               if Token = Tok_Identifier\n+                 and then Token_Name = Name_Class\n+               then\n+                  Scan; -- past CLASS\n+\n+                  if Token = Tok_Arrow then\n+                     Result := True;\n+                  end if;\n+               end if;\n+            end if;\n+\n+            if Result then\n                Restore_Scan_State (Scan_State);\n                Error_Msg_SC (\"|aspect specification is an Ada 2012 feature\");\n                Error_Msg_SC (\"\\|unit must be compiled with -gnat2012 switch\");"}, {"sha": "39b8387fb36246f55149d55777b24b12f3240305", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -858,8 +858,8 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  attempt at an aspect specification. The default is more strict for\n       --  Ada versions before Ada 2012 (where aspect specifications are not\n       --  permitted). Note: this routine never checks the terminator token\n-      --  for aspects so it does not matter whether the aspect speficiations\n-      --  are terminated by semicolon or some other character\n+      --  for aspects so it does not matter whether the aspect specifications\n+      --  are terminated by semicolon or some other character.\n \n       procedure P_Aspect_Specifications\n         (Decl      : Node_Id;"}, {"sha": "62a3fa98e6738a025dcd15198adf0b1136736e0e", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -557,7 +557,14 @@ package body Prj is\n               and then (Index = 0 or else Element (Iterator).Index = Index)\n             then\n                Src := Element (Iterator);\n-               return;\n+\n+               --  If the source has been excluded, continue looking. We will\n+               --  get the excluded source only if there is no other source\n+               --  with the same base name that is not locally removed.\n+\n+               if not Element (Iterator).Locally_Removed then\n+                  return;\n+               end if;\n             end if;\n \n             Next (Iterator);"}, {"sha": "d1f927aceb178ea368e815a2ae7e33e8e60ba983", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -4102,9 +4102,15 @@ package body Sem_Attr is\n                Analyze_And_Resolve (N, Etype (PS));\n \n             else\n-               Error_Attr\n-                 (\"% attribute can only appear\" &\n-                   \" in function Postcondition pragma\", P);\n+               if Ada_Version >= Ada_2012 then\n+                  Error_Attr\n+                    (\"% attribute can only appear\" &\n+                      \" in function Postcondition pragma or Post aspect\", P);\n+               else\n+                  Error_Attr\n+                    (\"% attribute can only appear\" &\n+                      \" in function Postcondition pragma\", P);\n+               end if;\n             end if;\n          end if;\n       end Result;"}, {"sha": "294322df06a491ce874b29243c0073be029972cb", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78efd7125942f0707f1853749c8a77f498061635/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=78efd7125942f0707f1853749c8a77f498061635", "patch": "@@ -5261,6 +5261,9 @@ package body Sem_Res is\n                      --  decrease false positives, without losing too many good\n                      --  warnings. The idea is that these previous statements\n                      --  may affect global variables the procedure depends on.\n+                     --  We also exclude raise statements, that may arise from\n+                     --  constraint checks and are probably unrelated to the\n+                     --  intended control flow.\n \n                      if Nkind (N) = N_Procedure_Call_Statement\n                        and then Is_List_Member (N)\n@@ -5270,7 +5273,10 @@ package body Sem_Res is\n                         begin\n                            P := Prev (N);\n                            while Present (P) loop\n-                              if Nkind (P) /= N_Assignment_Statement then\n+                              if not Nkind_In (P,\n+                                N_Assignment_Statement,\n+                                N_Raise_Constraint_Error)\n+                              then\n                                  exit Scope_Loop;\n                               end if;\n \n@@ -7026,6 +7032,28 @@ package body Sem_Res is\n       Arg1    : Node_Id;\n       Arg2    : Node_Id;\n \n+      function Convert_Operand (Opnd : Node_Id) return Node_Id;\n+      --  If the operand is a literal, it cannot be the expression in a\n+      --  conversion. Use a qualified expression instead.\n+\n+      function Convert_Operand (Opnd : Node_Id) return Node_Id is\n+         Loc : constant Source_Ptr := Sloc (Opnd);\n+         Res : Node_Id;\n+      begin\n+         if Nkind_In (Opnd, N_Integer_Literal, N_Real_Literal) then\n+            Res :=\n+              Make_Qualified_Expression (Loc,\n+                Subtype_Mark => New_Occurrence_Of (Btyp, Loc),\n+                Expression   => Relocate_Node (Opnd));\n+            Analyze (Res);\n+\n+         else\n+            Res := Unchecked_Convert_To (Btyp, Opnd);\n+         end if;\n+\n+         return Res;\n+      end Convert_Operand;\n+\n    begin\n       --  We must preserve the original entity in a generic setting, so that\n       --  the legality of the operation can be verified in an instance.\n@@ -7048,12 +7076,13 @@ package body Sem_Res is\n       --  type.\n \n       if Is_Private_Type (Typ) then\n-         Arg1 := Unchecked_Convert_To (Btyp, Left_Opnd  (N));\n+         Arg1 := Convert_Operand (Left_Opnd (N));\n+         --  Unchecked_Convert_To (Btyp, Left_Opnd  (N));\n \n          if Nkind (N) = N_Op_Expon then\n             Arg2 := Unchecked_Convert_To (Standard_Integer, Right_Opnd (N));\n          else\n-            Arg2 := Unchecked_Convert_To (Btyp, Right_Opnd (N));\n+            Arg2 := Convert_Operand (Right_Opnd (N));\n          end if;\n \n          if Nkind (Arg1) = N_Type_Conversion then"}]}