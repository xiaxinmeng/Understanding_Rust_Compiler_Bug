{"sha": "67efffec943656a509e036cd3c785a5c3d6885e1", "node_id": "C_kwDOANBUbNoAKDY3ZWZmZmVjOTQzNjU2YTUwOWUwMzZjZDNjNzg1YTVjM2Q2ODg1ZTE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-09-29T21:49:32Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-10T18:16:44Z"}, "message": "c-family: ICE with [[gnu::nocf_check]] [PR106937]\n\nWhen getting the name of an attribute, we ought to use\nget_attribute_name, which handles both [[]] and __attribute__(())\nforms.  Failure to do so may result in an ICE, like here.\n\npp_c_attributes_display wasn't able to print the [[]] form of\nattributes, so this patch teaches it to.\n\nWhen printing a pointer to function with a standard attribute, the attribute\nshould be printed after the parameter-list.  With this patch we print:\n\n  aka 'void (*)(int) [[gnu::nocf_check]]'\n\nor, in C++ with noexcept:\n\n  aka 'void (*)(int) noexcept [[gnu::nocf_check]]'\n\npp_c_attributes has been unused since its introduction in r56273 so\nthis patch removes it.\n\n\tPR c++/106937\n\ngcc/c-family/ChangeLog:\n\n\t* c-pretty-print.cc (pp_c_specifier_qualifier_list): Print only GNU\n\tattributes here.\n\t(c_pretty_printer::direct_abstract_declarator): Print the standard [[]]\n\tattributes here.\n\t(pp_c_attributes): Remove.\n\t(pp_c_attributes_display): Print the [[]] form if appropriate.  Use\n\tget_attribute_name.  Don't print a trailing space when printing the\n\t[[]] form.\n\t* c-pretty-print.h (pp_c_attributes): Remove.\n\ngcc/cp/ChangeLog:\n\n\t* error.cc: Include \"attribs.h\".\n\t(dump_type_prefix): Print only GNU attributes here.\n\t(dump_type_suffix): Print standard attributes here.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/pointer-to-fn1.c: New test.", "tree": {"sha": "11e066be82c3dc664f3c67e9dfeb79a51dfc7113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11e066be82c3dc664f3c67e9dfeb79a51dfc7113"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67efffec943656a509e036cd3c785a5c3d6885e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67efffec943656a509e036cd3c785a5c3d6885e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67efffec943656a509e036cd3c785a5c3d6885e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67efffec943656a509e036cd3c785a5c3d6885e1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248c8aeebc49aae3fd96bd587367d12e7c8b3c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248c8aeebc49aae3fd96bd587367d12e7c8b3c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248c8aeebc49aae3fd96bd587367d12e7c8b3c3a"}], "stats": {"total": 131, "additions": 86, "deletions": 45}, "files": [{"sha": "c99b2ceffe6501f1860c695ddad5ed5f02a58e6b", "filename": "gcc/c-family/c-pretty-print.cc", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fc-family%2Fc-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fc-family%2Fc-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.cc?ref=67efffec943656a509e036cd3c785a5c3d6885e1", "patch": "@@ -466,7 +466,12 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n \t  {\n \t    pp_c_whitespace (pp);\n \t    pp_c_left_paren (pp);\n-\t    pp_c_attributes_display (pp, TYPE_ATTRIBUTES (pointee));\n+\t    /* If we're dealing with the GNU form of attributes, print this:\n+\t\t void (__attribute__((noreturn)) *f) ();\n+\t       If it is the standard [[]] attribute, we'll print the attribute\n+\t       in c_pretty_printer::direct_abstract_declarator/FUNCTION_TYPE.  */\n+\t    if (!cxx11_attribute_p (TYPE_ATTRIBUTES (pointee)))\n+\t      pp_c_attributes_display (pp, TYPE_ATTRIBUTES (pointee));\n \t  }\n \telse if (!c_dialect_cxx ())\n \t  pp_c_whitespace (pp);\n@@ -595,6 +600,13 @@ c_pretty_printer::direct_abstract_declarator (tree t)\n     case FUNCTION_TYPE:\n       pp_c_parameter_type_list (this, t);\n       direct_abstract_declarator (TREE_TYPE (t));\n+      /* If this is the standard [[]] attribute, print\n+\t void (*)() [[noreturn]];  */\n+      if (cxx11_attribute_p (TYPE_ATTRIBUTES (t)))\n+\t{\n+\t  pp_space (this);\n+\t  pp_c_attributes_display (this, TYPE_ATTRIBUTES (t));\n+\t}\n       break;\n \n     case ARRAY_TYPE:\n@@ -850,32 +862,7 @@ c_pretty_printer::declaration (tree t)\n   pp_c_init_declarator (this, t);\n }\n \n-/* Pretty-print ATTRIBUTES using GNU C extension syntax.  */\n-\n-void\n-pp_c_attributes (c_pretty_printer *pp, tree attributes)\n-{\n-  if (attributes == NULL_TREE)\n-    return;\n-\n-  pp_c_ws_string (pp, \"__attribute__\");\n-  pp_c_left_paren (pp);\n-  pp_c_left_paren (pp);\n-  for (; attributes != NULL_TREE; attributes = TREE_CHAIN (attributes))\n-    {\n-      pp_tree_identifier (pp, TREE_PURPOSE (attributes));\n-      if (TREE_VALUE (attributes))\n-\tpp_c_call_argument_list (pp, TREE_VALUE (attributes));\n-\n-      if (TREE_CHAIN (attributes))\n-\tpp_separate_with (pp, ',');\n-    }\n-  pp_c_right_paren (pp);\n-  pp_c_right_paren (pp);\n-}\n-\n-/* Pretty-print ATTRIBUTES using GNU C extension syntax for attributes\n-   marked to be displayed on disgnostic.  */\n+/* Pretty-print ATTRIBUTES marked to be displayed on diagnostic.  */\n \n void\n pp_c_attributes_display (c_pretty_printer *pp, tree a)\n@@ -885,37 +872,60 @@ pp_c_attributes_display (c_pretty_printer *pp, tree a)\n   if (a == NULL_TREE)\n     return;\n \n+  const bool std_p = cxx11_attribute_p (a);\n+\n   for (; a != NULL_TREE; a = TREE_CHAIN (a))\n     {\n-      const struct attribute_spec *as;\n-      as = lookup_attribute_spec (TREE_PURPOSE (a));\n+      const struct attribute_spec *as\n+\t= lookup_attribute_spec (get_attribute_name (a));\n       if (!as || as->affects_type_identity == false)\n         continue;\n       if (c_dialect_cxx ()\n \t  && !strcmp (\"transaction_safe\", as->name))\n \t/* In C++ transaction_safe is printed at the end of the declarator.  */\n \tcontinue;\n       if (is_first)\n-       {\n-         pp_c_ws_string (pp, \"__attribute__\");\n-         pp_c_left_paren (pp);\n-         pp_c_left_paren (pp);\n-         is_first = false;\n-       }\n+\t{\n+\t  if (std_p)\n+\t    {\n+\t      pp_c_left_bracket (pp);\n+\t      pp_c_left_bracket (pp);\n+\t    }\n+\t  else\n+\t    {\n+\t      pp_c_ws_string (pp, \"__attribute__\");\n+\t      pp_c_left_paren (pp);\n+\t      pp_c_left_paren (pp);\n+\t    }\n+\t  is_first = false;\n+\t}\n       else\n-       {\n-         pp_separate_with (pp, ',');\n-       }\n-      pp_tree_identifier (pp, TREE_PURPOSE (a));\n+\tpp_separate_with (pp, ',');\n+      tree ns;\n+      if (std_p && (ns = get_attribute_namespace (a)))\n+\t{\n+\t  pp_tree_identifier (pp, ns);\n+\t  pp_colon (pp);\n+\t  pp_colon (pp);\n+\t}\n+      pp_tree_identifier (pp, get_attribute_name (a));\n       if (TREE_VALUE (a))\n-       pp_c_call_argument_list (pp, TREE_VALUE (a));\n+\tpp_c_call_argument_list (pp, TREE_VALUE (a));\n     }\n \n   if (!is_first)\n     {\n-      pp_c_right_paren (pp);\n-      pp_c_right_paren (pp);\n-      pp_c_whitespace (pp);\n+      if (std_p)\n+\t{\n+\t  pp_c_right_bracket (pp);\n+\t  pp_c_right_bracket (pp);\n+\t}\n+      else\n+\t{\n+\t  pp_c_right_paren (pp);\n+\t  pp_c_right_paren (pp);\n+\t  pp_c_whitespace (pp);\n+\t}\n     }\n }\n "}, {"sha": "92674ab4d06a0d528bfbdf7c4fe7e306f936658b", "filename": "gcc/c-family/c-pretty-print.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fc-family%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fc-family%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.h?ref=67efffec943656a509e036cd3c785a5c3d6885e1", "patch": "@@ -119,7 +119,6 @@ void pp_c_space_for_pointer_operator (c_pretty_printer *, tree);\n /* Declarations.  */\n void pp_c_tree_decl_identifier (c_pretty_printer *, tree);\n void pp_c_function_definition (c_pretty_printer *, tree);\n-void pp_c_attributes (c_pretty_printer *, tree);\n void pp_c_attributes_display (c_pretty_printer *, tree);\n void pp_c_cv_qualifiers (c_pretty_printer *pp, int qualifiers, bool func_type);\n void pp_c_type_qualifier_list (c_pretty_printer *, tree);"}, {"sha": "da8c95c9b434ebc8319a01cf5fe14406486430b2", "filename": "gcc/cp/error.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fcp%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Fcp%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.cc?ref=67efffec943656a509e036cd3c785a5c3d6885e1", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"gcc-rich-location.h\"\n #include \"cp-name-hint.h\"\n+#include \"attribs.h\"\n \n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n #define pp_separate_with_semicolon(PP) pp_cxx_separate_with (PP, ';')\n@@ -897,7 +898,12 @@ dump_type_prefix (cxx_pretty_printer *pp, tree t, int flags)\n \t  {\n \t    pp_cxx_whitespace (pp);\n \t    pp_cxx_left_paren (pp);\n-\t    pp_c_attributes_display (pp, TYPE_ATTRIBUTES (sub));\n+\t    /* If we're dealing with the GNU form of attributes, print this:\n+\t\t void (__attribute__((noreturn)) *f) ();\n+\t       If it is the standard [[]] attribute, we'll print the attribute\n+\t       in dump_type_suffix.  */\n+\t    if (!cxx11_attribute_p (TYPE_ATTRIBUTES (sub)))\n+\t      pp_c_attributes_display (pp, TYPE_ATTRIBUTES (sub));\n \t  }\n \tif (TYPE_PTR_P (t))\n \t  pp_star (pp);\n@@ -1030,6 +1036,14 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n \tif (tx_safe_fn_type_p (t))\n \t  pp_cxx_ws_string (pp, \"transaction_safe\");\n \tdump_exception_spec (pp, TYPE_RAISES_EXCEPTIONS (t), flags);\n+\t/* If this is the standard [[]] attribute, print\n+\t     void (*)() [[noreturn]];  */\n+\tif (cxx11_attribute_p (TYPE_ATTRIBUTES (t)))\n+\t  {\n+\t    pp_space (pp);\n+\t    pp_c_attributes_display (pp, TYPE_ATTRIBUTES (t));\n+\t    pp->padding = pp_before;\n+\t  }\n \tdump_type_suffix (pp, TREE_TYPE (t), flags);\n \tbreak;\n       }"}, {"sha": "975885462e99c01eba7b92323f9e9b436f41be4e", "filename": "gcc/testsuite/c-c++-common/pointer-to-fn1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpointer-to-fn1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67efffec943656a509e036cd3c785a5c3d6885e1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpointer-to-fn1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpointer-to-fn1.c?ref=67efffec943656a509e036cd3c785a5c3d6885e1", "patch": "@@ -0,0 +1,18 @@\n+/* PR c++/106937 */\n+/* { dg-options \"-fcf-protection\" } */\n+/* { dg-additional-options \"-std=c++11 -fpermissive\" { target c++ } } */\n+/* Test printing a pointer to function with attribute.  */\n+\n+__attribute__((nocf_check)) typedef void (*FPA1)();\n+[[gnu::nocf_check]] typedef void (*FPA2)(int);\n+typedef void (*FP1)();\n+typedef void (*FP2)(int);\n+\n+void\n+g (FP1 f1, FP2 f2)\n+{\n+  FPA1 p1 = f1; // { dg-warning {aka 'void \\(__attribute__\\(\\(nocf_check\\)\\) \\*\\)\\(\\)'} }\n+  FPA2 p2 = f2; // { dg-warning {aka 'void \\(\\*\\)\\(int\\) \\[\\[gnu::nocf_check\\]\\]'} }\n+  FP1 p3 = p1; // { dg-warning {aka 'void \\(__attribute__\\(\\(nocf_check\\)\\) \\*\\)\\(\\)'} }\n+  FP2 p4 = p2; // { dg-warning {aka 'void \\(\\*\\)\\(int\\) \\[\\[gnu::nocf_check\\]\\]'} }\n+}"}]}