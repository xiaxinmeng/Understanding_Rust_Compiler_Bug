{"sha": "4843c185260968f8762602cc39991e4b6319475a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0M2MxODUyNjA5NjhmODc2MjYwMmNjMzk5OTFlNGI2MzE5NDc1YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-07-11T21:07:46Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1994-07-11T21:07:46Z"}, "message": "Rewrite for coff\n\nFrom-SVN: r7721", "tree": {"sha": "ccafb34d337430a45a637665e69383816ff99115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccafb34d337430a45a637665e69383816ff99115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4843c185260968f8762602cc39991e4b6319475a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4843c185260968f8762602cc39991e4b6319475a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4843c185260968f8762602cc39991e4b6319475a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4843c185260968f8762602cc39991e4b6319475a/comments", "author": null, "committer": null, "parents": [{"sha": "58376b85b19d40b3028db530373cb053614e5c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58376b85b19d40b3028db530373cb053614e5c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58376b85b19d40b3028db530373cb053614e5c0c"}], "stats": {"total": 161, "additions": 116, "deletions": 45}, "files": [{"sha": "0819b684e3ecd9809874afa4112c085a3a1fa58d", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 116, "deletions": 45, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4843c185260968f8762602cc39991e4b6319475a/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4843c185260968f8762602cc39991e4b6319475a/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=4843c185260968f8762602cc39991e4b6319475a", "patch": "@@ -1,58 +1,100 @@\n-/* Target independent definitions for LynxOS.  */\n+/* Target independent definitions for LynxOS.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n \n-/* ??? The -C option may need to change to whatever option the GNU assembler\n-   actually accepts.  */\n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{mcoff:-C}\"\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* LynxOS is a multi-platform Unix, similar to SVR3, but not identical.\n+   We can get quite a bit from generic svr3, but have to do some overrides. */\n+\n+#include \"svr3.h\"\n+\n+/* Define various macros, depending on the combination of flags. */\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{mthreads:-D_MULTITHREADED} %{mposix:-D_POSIX_SOURCE} %{msystem-v:-I/usr/include_v}\"\n+#define CPP_SPEC \"%{mthreads:-D_MULTITHREADED}  \\\n+  %{mposix:-D_POSIX_SOURCE}  \\\n+  %{msystem-v:-I/usr/include_v}\"\n+\n+/* No asm spec needed, since using GNU assembler always. */\n \n-/* Provide required defaults for linker switches.  */\n-/* ??? The -k option may need to change to whatever option the GNU linker\n-   actually accepts.  This is to produce COFF output.  */\n-/* ??? The -V option may need to change to whatever option the GNU linker\n-   actually accepts.  This is to produce System-V magic numbers.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \"-P1000 %{msystem-v:-V} %{mcoff:-k}\"\n+/* No linker spec needed, since using GNU linker always. */\n \n #undef LIB_SPEC\n-#define LIB_SPEC \"%{mthreads:-L/lib/thread/} %{msystem-v:-lc_v} %{!msystem-v:%{mposix:-lc_p} -lc}\"\n+#define LIB_SPEC \"%{mthreads:-L/lib/thread/}  \\\n+  %{msystem-v:-lc_v}  \\\n+  %{!msystem-v:%{mposix:-lc_p} -lc}\"\n+\n+/* Set the appropriate names for the Lynx startfiles. */\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{p:%{mcoff:pinit1.o%s} %{!mcoff:pinit.o%s}} %{!p:%{msystem-v:%{mcoff:vinit1.o%s} %{!mcoff:vinit.o%s}} %{!msystem-v:%{mcoff:init1.o%s}%{!mcoff:init.o%s}}}\"\n+#define STARTFILE_SPEC \"%{p:pinit1.o%s}%{!p:%{msystem-v:vinit1.o%s}%{!msystem-v:init1.o%s}}\"\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC \"%{mcoff:initn.o%s} %{p:_etext.o%s}\"\n+#define ENDFILE_SPEC \"%{p:_etext.o%s}%{!p:initn.o%s}\"\n \n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n+/* Override the svr3 versions. */\n \n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n \n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n \n-/* We want to output DBX debugging information.  */\n+/* We want to output DBX (stabs) debugging information normally.  */\n \n #define DBX_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* We optionally want to be able to produce SDB debugging output so that\n-   we can create debuggable SDB/coff files.  This won't be needed when\n-   stabs-in-coff works.  */\n+/* It is convenient to be able to generate standard coff debugging\n+   if requested via -gcoff. */\n \n #define SDB_DEBUGGING_INFO\n \n-/* Generate calls to memcpy, memcmp and memset.  */\n+/* Be function-relative for block and source line stab directives. */\n+\n+#define DBX_BLOCKS_FUNCTION_RELATIVE 1\n+\n+/* but, to make this work, functions must appear prior to line info */\n \n-#define TARGET_MEM_FUNCTIONS\n+#define DBX_FUNCTION_FIRST\n+\n+/* Generate a blank trailing N_SO to mark the end of the .o file, since\n+   we can't depend upon the linker to mark .o file boundaries with\n+   embedded stabs.  */\n+\n+#define DBX_OUTPUT_MAIN_SOURCE_FILE_END(FILE, FILENAME)\t\t\t\\\n+  fprintf (FILE,\t\t\t\t\t\t\t\\\n+\t   \"\\t.text\\n\\t.stabs \\\"\\\",%d,0,0,Letext\\nLetext:\\n\", N_SO)\n+\n+#undef  ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n+  { static int sym_lineno = 1;\t\t\t\t\\\n+    fprintf (file, \".stabn 68,0,%d,.LM%d-%s\\n.LM%d:\\n\",\t\\\n+\t     line, sym_lineno, \t\t\t\t\\\n+\t     XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0), \\\n+\t     sym_lineno);\t\t\t\t\\\n+    sym_lineno += 1; }\n \n /* Handle #pragma pack and sometimes #pragma weak.  */\n \n #define HANDLE_SYSV_PRAGMA\n \n+/* Some additional command-line options. */\n+\n #define TARGET_THREADS\t(target_flags & MASK_THREADS)\n #define MASK_THREADS\t0x40000000\n \n@@ -62,15 +104,11 @@\n #define TARGET_SYSTEM_V\t(target_flags & MASK_SYSTEM_V)\n #define MASK_SYSTEM_V\t0x10000000\n \n-#define TARGET_COFF\t(target_flags & MASK_COFF)\n-#define MASK_COFF\t0x08000000\n-\n #undef SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES \\\n     {\"threads\",\t\tMASK_THREADS},\t\t\\\n     {\"posix\",\t\tMASK_POSIX},\t\t\\\n-    {\"system-v\",\tMASK_SYSTEM_V},\t\t\\\n-    {\"coff\",\t\tMASK_COFF},\n+    {\"system-v\",\tMASK_SYSTEM_V},\n \n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS \\\n@@ -79,22 +117,55 @@\n   if (TARGET_SYSTEM_V && TARGET_THREADS)\t\t\t\\\n     warning (\"-msystem-v and -mthreads are incompatible\"); }\n \n-/* Define this so that C++ destructors will use atexit.  */\n+/* Define this so that C++ destructors will use atexit, since LynxOS\n+   calls exit after main returns.  */\n \n #define HAVE_ATEXIT\n \n-/* This is defined only so that we can find the assembler.  Everything else\n-   is in /bin.  */\n-\n-#define MD_EXEC_PREFIX \"/usr/local/lib/gcc-\"\n-\n-/* ??? This is needed because /bin/ld does not handle -L options correctly.\n-   This can be deleted if GNU ld is being used.  */\n-\n-#define LINK_LIBGCC_SPECIAL_1\n-\n-/* The Lynx linker considers __main to be a possible entry point, so we\n-   must use a different name.  */\n-\n-#define NAME__MAIN \"____main\"\n-#define SYMBOL__MAIN ____main\n+/* Since init.o et al put all sorts of stuff into the init section,\n+   we can't use the standard init section support in crtbegin.o. */\n+\n+#undef INIT_SECTION_ASM_OP\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_const, in_bss, in_ctors, in_dtors, in_fini,\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n+  CONST_SECTION_FUNCTION\t\t\t\t\t\\\n+  BSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\t\t\t\t\t\\\n+  FINI_SECTION_FUNCTION\n+\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors\"\n+\n+#define INT_ASM_OP\t\t\".long\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#undef DO_GLOBAL_CTORS_BODY\n+#undef DO_GLOBAL_DTORS_BODY"}]}