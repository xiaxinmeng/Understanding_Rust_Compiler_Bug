{"sha": "430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwYmIzOGU0YjFjZGM0MWQ1MmQ4NTMyNGRhYzRiYmE5ZGVlYjIzZQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2016-07-04T14:06:27Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2016-07-04T14:06:27Z"}, "message": "i386.c (ix86_expand_vec_perm): Add handle one-operand permutation for TARGET_AVX512F.\n\ngcc/\n\t* config/i386/i386.c (ix86_expand_vec_perm): Add handle one-operand\n\tpermutation for TARGET_AVX512F.\n\t(ix86_expand_vec_one_operand_perm_avx512): New function.\n\t(expand_vec_perm_1): Invoke introduced function.\n\t* tree-vect-loop.c (vect_transform_loop): Clear-up safelen value since\n\tit may be not valid after vectorization.\n\ngcc/testsuite/\n\t* gcc/testsuite/gcc.target/i386/avx512f-vect-perm-1.c: New test.\n\t* gcc/testsuite/gcc.target/i386/avx512f-vect-perm-2.c: New test.\n\nFrom-SVN: r237982", "tree": {"sha": "b2e4e6b910488050c7e03244e2c4e4818c2eb571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2e4e6b910488050c7e03244e2c4e4818c2eb571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f5f7b7d730a2065a784c089af386a593ee4b575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5f7b7d730a2065a784c089af386a593ee4b575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5f7b7d730a2065a784c089af386a593ee4b575"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "76911ff6b8c36af2d7eb8622c08485555a580a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "patch": "@@ -1,3 +1,12 @@\n+2016-07-04  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_vec_perm): Add handle one-operand\n+\tpermutation for TARGET_AVX512F.\n+\t(ix86_expand_vec_one_operand_perm_avx512): New function.\n+\t(expand_vec_perm_1): Invoke introduced function.\n+\t* tree-vect-loop.c (vect_transform_loop): Clear-up safelen value since\n+\tit may be not valid after vectorization.\n+\n 2016-07-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/63874"}, {"sha": "9eaf4144965a186c990938b78c37ca57e06b7d78", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "patch": "@@ -24307,6 +24307,33 @@ ix86_expand_vec_perm (rtx operands[])\n   e = GET_MODE_UNIT_SIZE (mode);\n   gcc_assert (w <= 64);\n \n+  if (TARGET_AVX512F && one_operand_shuffle)\n+    {\n+      rtx (*gen) (rtx, rtx, rtx) = NULL;\n+      switch (mode)\n+\t{\n+\tcase V16SImode:\n+\t  gen =gen_avx512f_permvarv16si;\n+\t  break;\n+\tcase V16SFmode:\n+\t  gen = gen_avx512f_permvarv16sf;\n+\t  break;\n+\tcase V8DImode:\n+\t  gen = gen_avx512f_permvarv8di;\n+\t  break;\n+\tcase V8DFmode:\n+\t  gen = gen_avx512f_permvarv8df;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      if (gen != NULL)\n+\t{\n+\t  emit_insn (gen (target, op0, mask));\n+\t  return;\n+\t}\n+    }\n+\n   if (ix86_expand_vec_perm_vpermi2 (target, op0, mask, op1, NULL))\n     return;\n \n@@ -50444,6 +50471,52 @@ canonicalize_vector_int_perm (const struct expand_vec_perm_d *d,\n   return true;\n }\n \n+/* Try to expand one-operand permutation with constant mask.  */\n+\n+static bool\n+ix86_expand_vec_one_operand_perm_avx512 (struct expand_vec_perm_d *d)\n+{\n+  machine_mode mode = GET_MODE (d->op0);\n+  machine_mode maskmode = mode;\n+  rtx (*gen) (rtx, rtx, rtx) = NULL;\n+  rtx target, op0, mask;\n+  rtx vec[64];\n+\n+  if (!rtx_equal_p (d->op0, d->op1))\n+    return false;\n+\n+  if (!TARGET_AVX512F)\n+    return false;\n+\n+  switch (mode)\n+    {\n+    case V16SImode:\n+      gen = gen_avx512f_permvarv16si;\n+      break;\n+    case V16SFmode:\n+      gen = gen_avx512f_permvarv16sf;\n+      maskmode = V16SImode;\n+      break;\n+    case V8DImode:\n+      gen = gen_avx512f_permvarv8di;\n+      break;\n+    case V8DFmode:\n+      gen = gen_avx512f_permvarv8df;\n+      maskmode = V8DImode;\n+      break;\n+    default:\n+      return false;\n+    }\n+\n+  target = d->target;\n+  op0 = d->op0;\n+  for (int i = 0; i < d->nelt; ++i)\n+    vec[i] = GEN_INT (d->perm[i]);\n+  mask = gen_rtx_CONST_VECTOR (maskmode, gen_rtvec_v (d->nelt, vec));\n+  emit_insn (gen (target, op0, force_reg (maskmode, mask)));\n+  return true;\n+}\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to instantiate D\n    in a single instruction.  */\n \n@@ -50611,6 +50684,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_palignr (d, true))\n     return true;\n \n+  /* Try the AVX512F vperm{s,d} instructions.  */\n+  if (ix86_expand_vec_one_operand_perm_avx512 (d))\n+    return true;\n+\n   /* Try the AVX512F vpermi2 instructions.  */\n   if (ix86_expand_vec_perm_vpermi2 (NULL_RTX, NULL_RTX, NULL_RTX, NULL_RTX, d))\n     return true;"}, {"sha": "95d850ae69dac828c0bf4dcf94d01573d656de12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "patch": "@@ -1,3 +1,8 @@\n+2016-07-04  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* gcc/testsuite/gcc.target/i386/avx512f-vect-perm-1.c: New test.\n+\t* gcc/testsuite/gcc.target/i386/avx512f-vect-perm-2.c: New test.\n+\n 2016-07-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/63874"}, {"sha": "ea6760d481cd2d1962f09b073fd1224ed86cb2d3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-perm-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-1.c?ref=430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -march=knl\" } */\r\n+/* { dg-final { scan-assembler-times \"vpermps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\r\n+\r\n+#define N 1024\r\n+float f1[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\r\n+float f2[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\r\n+\r\n+void foo ()\r\n+{\r\n+  int j;\r\n+  for (j=0; j<N; j++)\r\n+    f1[j] += f2[N-j];\r\n+}\r"}, {"sha": "29d00d75ac9b8697bc955f3ba906f39afe02f9a6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-perm-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430bb38e4b1cdc41d52d85324dac4bba9deeb23e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-perm-2.c?ref=430bb38e4b1cdc41d52d85324dac4bba9deeb23e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -march=knl\" } */\r\n+/* { dg-final { scan-assembler-times \"vpermpd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\r\n+\r\n+#define N 1024\r\n+double d1[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\r\n+double d2[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\r\n+\r\n+void foo ()\r\n+{\r\n+  int j;\r\n+  for (j=0; j<N; j++)\r\n+    d1[j] += d2[N-j];\r\n+}\r"}]}