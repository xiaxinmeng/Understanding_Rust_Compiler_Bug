{"sha": "ec194454c58c4c07de3fa0ea845095ff352a4628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxOTQ0NTRjNThjNGMwN2RlM2ZhMGVhODQ1MDk1ZmYzNTJhNDYyOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-06T02:40:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-06T02:40:31Z"}, "message": "defarg-1.C: New test.\n\n\t* g++.dg/template/defarg-1.C: New test.\n\t* g++.dg/template/local2.C: Likewise.\n\nFrom-SVN: r60924", "tree": {"sha": "8265ae10116842389a3278913bd9f24d265054df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8265ae10116842389a3278913bd9f24d265054df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec194454c58c4c07de3fa0ea845095ff352a4628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec194454c58c4c07de3fa0ea845095ff352a4628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec194454c58c4c07de3fa0ea845095ff352a4628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec194454c58c4c07de3fa0ea845095ff352a4628/comments", "author": null, "committer": null, "parents": [{"sha": "cebdac46e405fb4633741e0b39c028553e60be48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cebdac46e405fb4633741e0b39c028553e60be48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cebdac46e405fb4633741e0b39c028553e60be48"}], "stats": {"total": 130, "additions": 113, "deletions": 17}, "files": [{"sha": "0da8e47208abd4d4cddab4284978e56a76004358", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -1,3 +1,18 @@\n+2003-01-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* parser.c (cp_parser_template_parameter): Adjust call to\n+\tcp_parser_parameter_declaration.\n+\t(cp_parser_parameter_declaration_list): Likewise.\n+\t(cp_parser_parameter_declaration): Replace\n+\tgreater_than_is_operator_p with template_parm_p parameter.  Do not\n+\tcache tokens for template default arguments.\n+\n+\t* pt.c (retrieve_local_specialization): Use htab_find, not\n+\thtab_find_with_hash.\n+\t(register_local_specialization): Use htab_find_slot, not\n+\thtab_find_slot_with_hash.\n+\t(instantiate_decl): Pass a hash function to htab_create.\n+\t\n 2003-01-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parser.c (cp_parser_binary_expression,"}, {"sha": "02bcd4d0a09da5f492647ca13c888e154b591310", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -7911,8 +7911,7 @@ cp_parser_template_parameter (parser)\n      of the template parameter-list rather than a greater-than\n      operator.  */\n   return \n-    cp_parser_parameter_declaration (parser,\n-\t\t\t\t     /*greater_than_is_operator_p=*/false);\n+    cp_parser_parameter_declaration (parser, /*template_parm_p=*/true);\n }\n \n /* Parse a type-parameter.\n@@ -10792,8 +10791,8 @@ cp_parser_parameter_declaration_list (parser)\n       tree parameter;\n       /* Parse the parameter.  */\n       parameter \n-\t= cp_parser_parameter_declaration (parser,\n-\t\t\t\t\t   /*greater_than_is_operator_p=*/true);\n+\t= cp_parser_parameter_declaration (parser, /*template_parm_p=*/false);\n+\n       /* If a parse error ocurred parsing the parameter declaration,\n \t then the entire parameter-declaration-list is erroneous.  */\n       if (parameter == error_mark_node)\n@@ -10842,9 +10841,10 @@ cp_parser_parameter_declaration_list (parser)\n      decl-specifier-seq abstract-declarator [opt]\n      decl-specifier-seq abstract-declarator [opt] = assignment-expression\n \n-   If GREATER_THAN_IS_OPERATOR_P is FALSE, then a non-nested `>' token\n-   encountered during the parsing of the assignment-expression is not\n-   interpreted as a greater-than operator.\n+   If TEMPLATE_PARM_P is TRUE, then this parameter-declaration\n+   declares a template parameter.  (In that case, a non-nested `>'\n+   token encountered during the parsing of the assignment-expression\n+   is not interpreted as a greater-than operator.)\n \n    Returns a TREE_LIST representing the parameter-declaration.  The\n    TREE_VALUE is a representation of the decl-specifier-seq and\n@@ -10853,11 +10853,11 @@ cp_parser_parameter_declaration_list (parser)\n    TREE_VALUE represents the declarator.  */\n \n static tree\n-cp_parser_parameter_declaration (parser, greater_than_is_operator_p)\n-     cp_parser *parser;\n-     bool greater_than_is_operator_p;\n+cp_parser_parameter_declaration (cp_parser *parser, \n+\t\t\t\t bool template_parm_p)\n {\n   bool declares_class_or_enum;\n+  bool greater_than_is_operator_p;\n   tree decl_specifiers;\n   tree attributes;\n   tree declarator;\n@@ -10866,6 +10866,16 @@ cp_parser_parameter_declaration (parser, greater_than_is_operator_p)\n   cp_token *token;\n   const char *saved_message;\n \n+  /* In a template parameter, `>' is not an operator.\n+\n+     [temp.param]\n+\n+     When parsing a default template-argument for a non-type\n+     template-parameter, the first non-nested `>' is taken as the end\n+     of the template parameter-list rather than a greater-than\n+     operator.  */\n+  greater_than_is_operator_p = !template_parm_p;\n+\n   /* Type definitions may not appear in parameter types.  */\n   saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message \n@@ -10930,7 +10940,8 @@ cp_parser_parameter_declaration (parser, greater_than_is_operator_p)\n \n       /* If we are defining a class, then the tokens that make up the\n \t default argument must be saved and processed later.  */\n-      if (at_class_scope_p () && TYPE_BEING_DEFINED (current_class_type))\n+      if (!template_parm_p && at_class_scope_p () \n+\t  && TYPE_BEING_DEFINED (current_class_type))\n \t{\n \t  unsigned depth = 0;\n "}, {"sha": "05e98266db2e91d2e2bbb7097b5455f0d1c6db1b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -745,9 +745,7 @@ static tree\n retrieve_local_specialization (tmpl)\n      tree tmpl;\n {\n-  tree spec = \n-    (tree) htab_find_with_hash (local_specializations, tmpl,\n-\t\t\t\thtab_hash_pointer (tmpl));\n+  tree spec = (tree) htab_find (local_specializations, tmpl);\n   return spec ? TREE_PURPOSE (spec) : NULL_TREE;\n }\n \n@@ -934,8 +932,7 @@ register_local_specialization (spec, tmpl)\n {\n   void **slot;\n \n-  slot = htab_find_slot_with_hash (local_specializations, tmpl, \n-\t\t\t\t   htab_hash_pointer (tmpl), INSERT);\n+  slot = htab_find_slot (local_specializations, tmpl, INSERT);\n   *slot = build_tree_list (spec, tmpl);\n }\n \n@@ -10311,7 +10308,7 @@ instantiate_decl (d, defer_ok)\n \n       /* Set up the list of local specializations.  */\n       local_specializations = htab_create (37, \n-\t\t\t\t\t   NULL,\n+\t\t\t\t\t   htab_hash_pointer,\n \t\t\t\t\t   eq_local_specializations,\n \t\t\t\t\t   NULL);\n "}, {"sha": "b81e6aa185451fad4a7a2dad4d57b0b213e1ce1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -1,3 +1,8 @@\n+2003-01-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/template/defarg-1.C: New test.\n+\t* g++.dg/template/local2.C: Likewise.\n+\n 2003-01-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20030105-1.c: New test."}, {"sha": "1b0e4a24a15f0e5a65aca1ddfd87f610997b223a", "filename": "gcc/testsuite/g++.dg/template/defarg1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg1.C?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -0,0 +1,7 @@\n+struct Outer {\n+    template <int I, int J=I> struct Inner {};\n+};\n+\n+void f() {\n+  Outer::Inner<2> i;\n+}"}, {"sha": "51c946a5a49befd9ec198f5dc2c71bda99105754", "filename": "gcc/testsuite/g++.dg/template/local2.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec194454c58c4c07de3fa0ea845095ff352a4628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal2.C?ref=ec194454c58c4c07de3fa0ea845095ff352a4628", "patch": "@@ -0,0 +1,61 @@\n+template<typename T>\n+struct X {\n+    double & f (const unsigned int i,\n+                 const unsigned int j);\n+    void g (X &M);\n+};\n+\n+template <typename T>\n+void X<T>::g (X &x) {\n+        double t14 = x.f(0,0)*x.f(1,1);\n+        double t15 = x.f(2,2)*x.f(3,3);\n+        double t17 = x.f(2,3)*x.f(3,2);\n+        double t19 = x.f(0,0)*x.f(2,1);\n+        double t20 = x.f(1,2)*x.f(3,3);\n+        double t22 = x.f(1,3)*x.f(3,2);\n+        double t24 = x.f(0,0)*x.f(3,1);\n+        double t25 = x.f(1,2)*x.f(2,3);\n+        double t27 = x.f(1,3)*x.f(2,2);\n+        double t29 = x.f(1,0)*x.f(0,1);\n+        double t32 = x.f(1,0)*x.f(2,1);\n+        double t33 = x.f(0,2)*x.f(3,3);\n+        double t35 = x.f(0,3)*x.f(3,2);\n+        double t37 = x.f(1,0)*x.f(3,1);\n+        double t38 = x.f(0,2)*x.f(2,3);\n+        double t40 = x.f(0,3)*x.f(2,2);\n+        double t42 = t14*t15-t14*t17-t19*t20+t19*t22+\n+                           t24*t25-t24*t27-t29*t15+t29*t17+\n+                           t32*t33-t32*t35-t37*t38+t37*t40;\n+        double t43 = x.f(2,0)*x.f(0,1);\n+        double t46 = x.f(2,0)*x.f(1,1);\n+        double t49 = x.f(2,0)*x.f(3,1);\n+        double t50 = x.f(0,2)*x.f(1,3);\n+        double t52 = x.f(0,3)*x.f(1,2);\n+        double t54 = x.f(3,0)*x.f(0,1);\n+        double t57 = x.f(3,0)*x.f(1,1);\n+        double t60 = x.f(3,0)*x.f(2,1);\n+        double t63 = t43*t20-t43*t22-t46*t33+t46*t35+\n+                           t49*t50-t49*t52-t54*t25+t54*t27+\n+                           t57*t38-t57*t40-t60*t50+t60*t52;\n+        double t65 = 1/(t42+t63);\n+        double t71 = x.f(0,2)*x.f(2,1);\n+        double t73 = x.f(0,3)*x.f(2,1);\n+        double t75 = x.f(0,2)*x.f(3,1);\n+        double t77 = x.f(0,3)*x.f(3,1);\n+        double t81 = x.f(0,1)*x.f(1,2);\n+        double t83 = x.f(0,1)*x.f(1,3);\n+        double t85 = x.f(0,2)*x.f(1,1);\n+        double t87 = x.f(0,3)*x.f(1,1);\n+        double t101 = x.f(1,0)*x.f(2,2);\n+        double t103 = x.f(1,0)*x.f(2,3);\n+        double t105 = x.f(2,0)*x.f(1,2);\n+        double t107 = x.f(2,0)*x.f(1,3);\n+        double t109 = x.f(3,0)*x.f(1,2);\n+        double t111 = x.f(3,0)*x.f(1,3);\n+        double t115 = x.f(0,0)*x.f(2,2);\n+        double t117 = x.f(0,0)*x.f(2,3);\n+        double t119 = x.f(2,0)*x.f(0,2);\n+        double t121 = x.f(2,0)*x.f(0,3);\n+}\n+\n+template void X<double>::g (X<double>&);"}]}