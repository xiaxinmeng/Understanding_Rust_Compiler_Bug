{"sha": "15d67c11ac0479b08e3badcafdee7e0a6f062349", "node_id": "C_kwDOANBUbNoAKDE1ZDY3YzExYWMwNDc5YjA4ZTNiYWRjYWZkZWU3ZTBhNmYwNjIzNDk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-25T17:41:18Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-25T17:41:18Z"}, "message": "c++ modules: enum TYPE_MIN/MAX_VALUE streaming [PR106848]\n\nIn the frontend, the TYPE_MIN/MAX_VALUE of ENUMERAL_TYPE is the same as\nthat of the enum's underlying type (see start_enum).  And the underlying\ntype of an enum is always known, even for an opaque enum that lacks a\ndefinition.\n\nBut currently, we stream TYPE_MIN/MAX_VALUE of an enum only as part of\nits definition.  So if the enum is declared but never defined, the\nENUMERAL_TYPE we stream in will have empty TYPE_MIN/MAX_VALUE fields\ndespite these fields being non-empty on stream out.\n\nAnd even if the enum is defined, read_enum_def updates these fields only\non the main variant of the enum type, so for other variants (that we may\nhave streamed in earlier) these fields remain empty.  That these fields\nare unexpectedly empty for some ENUMERAL_TYPEs is ultimately the cause\nof the below two PRs.\n\nThis patch fixes this by making us stream TYPE_MIN/MAX_VALUE directly\nfor each ENUMERAL_TYPE rather than as part of the enum's definition, so\nthat we naturally also stream these fields for opaque enums (and each\nenum type variant).\n\n\tPR c++/106848\n\tPR c++/102600\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (trees_out::core_vals): Stream TYPE_MAX_VALUE and\n\tTYPE_MIN_VALUE of ENUMERAL_TYPE.\n\t(trees_in::core_vals): Likewise.\n\t(trees_out::write_enum_def): Don't stream them here.\n\t(trees_in::read_enum_def): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/enum-9_a.H: New test.\n\t* g++.dg/modules/enum-9_b.C: New test.\n\t* g++.dg/modules/enum-10_a.H: New test.\n\t* g++.dg/modules/enum-10_b.C: New test.\n\t* g++.dg/modules/enum-11_a.H: New test.\n\t* g++.dg/modules/enum-11_b.C: New test.", "tree": {"sha": "d13224fca8b299e96dec21b732930074cab1ad26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d13224fca8b299e96dec21b732930074cab1ad26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d67c11ac0479b08e3badcafdee7e0a6f062349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d67c11ac0479b08e3badcafdee7e0a6f062349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d67c11ac0479b08e3badcafdee7e0a6f062349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d67c11ac0479b08e3badcafdee7e0a6f062349/comments", "author": null, "committer": null, "parents": [{"sha": "1c64aba8cdf6509533f554ad86640f274cdbe37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c64aba8cdf6509533f554ad86640f274cdbe37f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c64aba8cdf6509533f554ad86640f274cdbe37f"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "9957df510e6b4c0635b1a3864d87f4886f0f4e7f", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -6017,9 +6017,17 @@ trees_out::core_vals (tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_NON_COMMON))\n     {\n+      if (code == ENUMERAL_TYPE)\n+\t{\n+\t  /* These fields get set even for opaque enums that lack a\n+\t     definition, so we stream them directly for each ENUMERAL_TYPE.\n+\t     We stream TYPE_VALUES as part of the definition.  */\n+\t  WT (t->type_non_common.maxval);\n+\t  WT (t->type_non_common.minval);\n+\t}\n       /* Records and unions hold FIELDS, VFIELD & BINFO on these\n \t things.  */\n-      if (!RECORD_OR_UNION_CODE_P (code) && code != ENUMERAL_TYPE)\n+      else if (!RECORD_OR_UNION_CODE_P (code))\n \t{\n \t  // FIXME: These are from tpl_parm_value's 'type' writing.\n \t  // Perhaps it should just be doing them directly?\n@@ -6530,9 +6538,17 @@ trees_in::core_vals (tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_NON_COMMON))\n     {\n+      if (code == ENUMERAL_TYPE)\n+\t{\n+\t  /* These fields get set even for opaque enums that lack a\n+\t     definition, so we stream them directly for each ENUMERAL_TYPE.\n+\t     We stream TYPE_VALUES as part of the definition.  */\n+\t  RT (t->type_non_common.maxval);\n+\t  RT (t->type_non_common.minval);\n+\t}\n       /* Records and unions hold FIELDS, VFIELD & BINFO on these\n \t things.  */\n-      if (!RECORD_OR_UNION_CODE_P (code) && code != ENUMERAL_TYPE)\n+      else if (!RECORD_OR_UNION_CODE_P (code))\n \t{\n \t  /* This is not clobbering TYPE_CACHED_VALUES, because this\n \t     is a type that doesn't have any.  */\n@@ -12217,8 +12233,8 @@ trees_out::write_enum_def (tree decl)\n   tree type = TREE_TYPE (decl);\n \n   tree_node (TYPE_VALUES (type));\n-  tree_node (TYPE_MIN_VALUE (type));\n-  tree_node (TYPE_MAX_VALUE (type));\n+  /* Note that we stream TYPE_MIN/MAX_VALUE directly as part of the\n+     ENUMERAL_TYPE.  */\n }\n \n void\n@@ -12242,8 +12258,6 @@ trees_in::read_enum_def (tree defn, tree maybe_template)\n {\n   tree type = TREE_TYPE (defn);\n   tree values = tree_node ();\n-  tree min = tree_node ();\n-  tree max = tree_node ();\n \n   if (get_overrun ())\n     return false;\n@@ -12254,8 +12268,8 @@ trees_in::read_enum_def (tree defn, tree maybe_template)\n   if (installing)\n     {\n       TYPE_VALUES (type) = values;\n-      TYPE_MIN_VALUE (type) = min;\n-      TYPE_MAX_VALUE (type) = max;\n+      /* Note that we stream TYPE_MIN/MAX_VALUE directly as part of the\n+\t ENUMERAL_TYPE.  */\n \n       rest_of_type_compilation (type, DECL_NAMESPACE_SCOPE_P (defn));\n     }\n@@ -12269,22 +12283,17 @@ trees_in::read_enum_def (tree defn, tree maybe_template)\n \t  tree new_decl = TREE_VALUE (values);\n \n \t  if (DECL_NAME (known_decl) != DECL_NAME (new_decl))\n-\t    goto bad;\n+\t    break;\n \t      \n \t  new_decl = maybe_duplicate (new_decl);\n \n \t  if (!cp_tree_equal (DECL_INITIAL (known_decl),\n \t\t\t      DECL_INITIAL (new_decl)))\n-\t    goto bad;\n+\t    break;\n \t}\n \n       if (known || values)\n-\tgoto bad;\n-\n-      if (!cp_tree_equal (TYPE_MIN_VALUE (type), min)\n-\t  || !cp_tree_equal (TYPE_MAX_VALUE (type), max))\n \t{\n-\tbad:;\n \t  error_at (DECL_SOURCE_LOCATION (maybe_dup),\n \t\t    \"definition of %qD does not match\", maybe_dup);\n \t  inform (DECL_SOURCE_LOCATION (defn),"}, {"sha": "fb7d10ad3b6d88dc63407850b35ba1c89f571e13", "filename": "gcc/testsuite/g++.dg/modules/enum-10_a.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_a.H?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/106848\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+typedef enum memory_order { memory_order_seq_cst } memory_order;"}, {"sha": "76dc31529630f535652b2f1621f4735deccf2d72", "filename": "gcc/testsuite/g++.dg/modules/enum-10_b.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-10_b.C?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/106848\n+// { dg-additional-options \"-fmodules-ts -g\" }\n+\n+import \"enum-10_a.H\";\n+\n+memory_order x = memory_order_seq_cst;"}, {"sha": "1aecabfd0bd1e8665a260a741f12167ed454f476", "filename": "gcc/testsuite/g++.dg/modules/enum-11_a.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_a.H?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/102600\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+enum class byte : unsigned char { };"}, {"sha": "4d77cab89531c9276b34ea6e4a72c26eb2705289", "filename": "gcc/testsuite/g++.dg/modules/enum-11_b.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-11_b.C?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/102600\n+// { dg-additional-options -fmodules-ts }\n+\n+import \"enum-11_a.H\";\n+\n+void push(byte) {}\n+void write(char v) { push(static_cast<byte>(v)); }\n+int main() { write(char{}); }"}, {"sha": "0dd4a0f2fb1b38197c4b325fbc0aa2eaf6ca8baf", "filename": "gcc/testsuite/g++.dg/modules/enum-9_a.H", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_a.H?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/106848\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+template<typename _T1>\n+struct pair {\n+  using type = void(*)(const _T1&);\n+};\n+\n+struct _ScannerBase {\n+  enum _TokenT { _S_token_anychar };\n+  pair<_TokenT> _M_token_tbl;\n+};"}, {"sha": "95e2812b81eab471da34f4d14b84d71c4c78b88e", "filename": "gcc/testsuite/g++.dg/modules/enum-9_b.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d67c11ac0479b08e3badcafdee7e0a6f062349/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fenum-9_b.C?ref=15d67c11ac0479b08e3badcafdee7e0a6f062349", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/106848\n+// { dg-additional-options \"-fmodules-ts -g\" }\n+\n+import \"enum-9_a.H\";\n+\n+_ScannerBase s;"}]}