{"sha": "f71434274cd0439bde0dbdfd1fc53e2f24dee485", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxNDM0Mjc0Y2QwNDM5YmRlMGRiZGZkMWZjNTNlMmYyNGRlZTQ4NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-03-02T01:03:47Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-02T01:03:47Z"}, "message": "gcc.c, [...]: Add zero initializer for cpp_spec field to all array elements.\n\n\t* gcc.c, cp/lang-specs.h, f/lang-specs.h, java/lang-specs.h,\n\tobjc/lang-specs.h: Add zero initializer for cpp_spec field to\n\tall array elements.\n\t* cp/lang-specs.h: Don't put an #ifdef inside the initializer\n\tlist; set a default for CPLUSPLUS_CPP_SPEC and use it.\n\nFrom-SVN: r40173", "tree": {"sha": "43f54cdf446fa1bfa1add9a724d589f75f644c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f54cdf446fa1bfa1add9a724d589f75f644c16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71434274cd0439bde0dbdfd1fc53e2f24dee485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71434274cd0439bde0dbdfd1fc53e2f24dee485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71434274cd0439bde0dbdfd1fc53e2f24dee485", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71434274cd0439bde0dbdfd1fc53e2f24dee485/comments", "author": null, "committer": null, "parents": [{"sha": "cb7738452f613d5f10acc3e816c48be679c67087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7738452f613d5f10acc3e816c48be679c67087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7738452f613d5f10acc3e816c48be679c67087"}], "stats": {"total": 136, "additions": 80, "deletions": 56}, "files": [{"sha": "0a08f8b19dc3ebb7145e1eed9f0e0a8caa073f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -1,3 +1,8 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* gcc.c, objc/lang-specs.h: Add zero initializer for cpp_spec\n+\tfield to all array elements.\n+\n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* cpphash.h (struct cpp_reader): Add print_version field."}, {"sha": "fb100a7ca90c254d9ea916ec7e3b8560a91e6e5b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -1,3 +1,10 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* lang-specs.h: Add zero initializer for cpp_spec field to\n+\tall array elements that need one.  Don't put an #ifdef inside\n+\tthe initializer list; set a default for CPLUSPLUS_CPP_SPEC and\n+\tuse it.\n+\n 2001-03-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tImplement using decls inside template functions."}, {"sha": "55c1f749dabb187abb4710d7781c6466212e4139", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -22,12 +22,16 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    g++.  */\n \n-  {\".cc\",  \"@c++\"},\n-  {\".cp\",  \"@c++\"},\n-  {\".cxx\", \"@c++\"},\n-  {\".cpp\", \"@c++\"},\n-  {\".c++\", \"@c++\"},\n-  {\".C\",   \"@c++\"},\n+#ifndef CPLUSPLUS_CPP_SPEC\n+#define CPLUSPLUS_CPP_SPEC 0\n+#endif\n+\n+  {\".cc\",  \"@c++\", 0},\n+  {\".cp\",  \"@c++\", 0},\n+  {\".cxx\", \"@c++\", 0},\n+  {\".cpp\", \"@c++\", 0},\n+  {\".c++\", \"@c++\", 0},\n+  {\".C\",   \"@c++\", 0},\n   {\"@c++\",\n    /* cc1plus has an integrated ISO C preprocessor.  We should invoke\n       the external preprocessor if -save-temps is given.  */\n@@ -50,13 +54,10 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t    %{ansi:-D__STRICT_ANSI__}}\\\n        %{ansi:-trigraphs -$}\\\n        %(cc1_options) %2 %{+e1*}\\\n-       %{!fsyntax-only:%(invoke_as)}}}}\"\n-#ifdef CPLUSPLUS_CPP_SPEC\n-     , CPLUSPLUS_CPP_SPEC\n-#endif\n-     },\n-  {\".ii\", \"@c++-cpp-output\"},\n+       %{!fsyntax-only:%(invoke_as)}}}}\",\n+     CPLUSPLUS_CPP_SPEC},\n+  {\".ii\", \"@c++-cpp-output\", 0},\n   {\"@c++-cpp-output\",\n    \"%{!M:%{!MM:%{!E:\\\n     cc1plus -fpreprocessed %i %(cc1_options) %2 %{+e*}\\\n-    %{!fsyntax-only:%(invoke_as)}}}}\"},\n+    %{!fsyntax-only:%(invoke_as)}}}}\", 0},"}, {"sha": "eed6076263b557803a336724daf319afe8e92a4d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -1,3 +1,8 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* lang-specs.h: Add zero initializer for cpp_spec field to all\n+\tarray elements.\n+\n 2001-02-24  Zack Weinberg  <zackw@stanford.edu>\n \n \t* com.c: Don't define STDC_HEADERS, autoconf handles it."}, {"sha": "7aecf31d6479c8e32e68de4630b6f7123fc6fd19", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -24,23 +24,23 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    g77.  */\n \n-  {\".F\",   \"@f77-cpp-input\"},\n-  {\".fpp\", \"@f77-cpp-input\"},\n-  {\".FPP\", \"@f77-cpp-input\"},\n+  {\".F\",   \"@f77-cpp-input\", 0},\n+  {\".fpp\", \"@f77-cpp-input\", 0},\n+  {\".FPP\", \"@f77-cpp-input\", 0},\n   {\"@f77-cpp-input\",\n    \"tradcpp0 -lang-fortran %(cpp_options) %{!M:%{!MM:%{!E:%{!pipe:%g.f |\\n\\\n-    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}}\"},\n-  {\".r\", \"@ratfor\"},\n+    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}}\", 0},\n+  {\".r\", \"@ratfor\", 0},\n   {\"@ratfor\",\n    \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n     ratfor %{C} %{v} %i %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} |\\n\\\n-    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\"},\n-  {\".f\",   \"@f77\"},\n-  {\".for\", \"@f77\"},\n-  {\".FOR\", \"@f77\"},\n+    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\", 0},\n+  {\".f\",   \"@f77\", 0},\n+  {\".for\", \"@f77\", 0},\n+  {\".FOR\", \"@f77\", 0},\n   {\"@f77\",\n    \"%{!M:%{!MM:%{!E:f771 %i %(cc1_options) %{I*}\\\n-\t%{!fsyntax-only:%(invoke_as)}}}}\"},\n+\t%{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   /* XXX This is perverse and should not be necessary.  */\n   {\"@f77-version\",\n    \"tradcpp0 -lang-fortran %(cpp_options) %j \\n\\\n@@ -56,4 +56,4 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n       %{!nostdlib:%{!nodefaultlibs:%G %L %G}} \\\n       %{!A:%{!nostdlib:%{!nostartfiles:%E}}} \\\n       %{T*} \\n\\\n-     %g \\n\"},\n+     %g \\n\", 0},"}, {"sha": "780b1c1770ed0679fe27bba4aef36a6bff750950", "filename": "gcc/gcc.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -766,19 +766,20 @@ static struct compiler default_compilers[] =\n      were not present when we built the driver, we will hit these copies\n      and be given a more meaningful error than \"file not used since\n      linking is not done\".  */\n-  {\".m\",  \"#Objective-C\"}, {\".mi\",  \"#Objective-C\"},\n-  {\".cc\", \"#C++\"}, {\".cxx\", \"#C++\"}, {\".cpp\", \"#C++\"}, {\".cp\", \"#C++\"},\n-  {\".c++\", \"#C++\"}, {\".C\", \"#C++\"}, {\".ii\", \"#C++\"},\n-  {\".ads\", \"#Ada\"}, {\".adb\", \"#Ada\"}, {\".ada\", \"#Ada\"},\n-  {\".f\", \"#Fortran\"}, {\".for\", \"#Fortran\"}, {\".fpp\", \"#Fortran\"},\n-  {\".F\", \"#Fortran\"}, {\".FOR\", \"#Fortran\"}, {\".FPP\", \"#Fortran\"},\n-  {\".r\", \"#Ratfor\"},\n-  {\".p\", \"#Pascal\"}, {\".pas\", \"#Pascal\"},\n-  {\".ch\", \"#Chill\"}, {\".chi\", \"#Chill\"},\n-  {\".java\", \"#Java\"}, {\".class\", \"#Java\"},\n-  {\".zip\", \"#Java\"}, {\".jar\", \"#Java\"},\n+  {\".m\",  \"#Objective-C\", 0}, {\".mi\",  \"#Objective-C\", 0},\n+  {\".cc\", \"#C++\", 0}, {\".cxx\", \"#C++\", 0}, {\".cpp\", \"#C++\", 0},\n+  {\".cp\", \"#C++\", 0}, {\".c++\", \"#C++\", 0}, {\".C\", \"#C++\", 0},\n+  {\".ii\", \"#C++\", 0},\n+  {\".ads\", \"#Ada\", 0}, {\".adb\", \"#Ada\", 0}, {\".ada\", \"#Ada\", 0},\n+  {\".f\", \"#Fortran\", 0}, {\".for\", \"#Fortran\", 0}, {\".fpp\", \"#Fortran\", 0},\n+  {\".F\", \"#Fortran\", 0}, {\".FOR\", \"#Fortran\", 0}, {\".FPP\", \"#Fortran\", 0},\n+  {\".r\", \"#Ratfor\", 0},\n+  {\".p\", \"#Pascal\", 0}, {\".pas\", \"#Pascal\", 0},\n+  {\".ch\", \"#Chill\", 0}, {\".chi\", \"#Chill\", 0},\n+  {\".java\", \"#Java\", 0}, {\".class\", \"#Java\", 0},\n+  {\".zip\", \"#Java\", 0}, {\".jar\", \"#Java\", 0},\n   /* Next come the entries for C.  */\n-  {\".c\", \"@c\"},\n+  {\".c\", \"@c\", 0},\n   {\"@c\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps or -traditional is given.  */\n@@ -793,27 +794,27 @@ static struct compiler default_compilers[] =\n \t\t    cc1 -fpreprocessed %{!pipe:%g.i} %(cc1_options)}\\\n \t    %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n \t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_options) %(cc1_options)}}}}\\\n-        %{!fsyntax-only:%(invoke_as)}}}}\"},\n+        %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\"-\",\n    \"%{!E:%e-E required when input is from standard input}\\\n-    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\"},\n-  {\".h\", \"@c-header\"},\n+    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\", 0},\n+  {\".h\", \"@c-header\", 0},\n   {\"@c-header\",\n    \"%{!E:%eCompilation of header file requested} \\\n-    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\"},\n-  {\".i\", \"@cpp-output\"},\n+    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\", 0},\n+  {\".i\", \"@cpp-output\", 0},\n   {\"@cpp-output\",\n-   \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\"},\n-  {\".s\", \"@assembler\"},\n+   \"%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+  {\".s\", \"@assembler\", 0},\n   {\"@assembler\",\n-   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_options) %i %A }}}}\"},\n-  {\".S\", \"@assembler-with-cpp\"},\n+   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_options) %i %A }}}}\", 0},\n+  {\".S\", \"@assembler-with-cpp\", 0},\n   {\"@assembler-with-cpp\",\n    \"%(trad_capable_cpp) -lang-asm %(cpp_options)\\\n-\t%{!M:%{!MM:%{!E:%(invoke_as)}}}\"},\n+\t%{!M:%{!MM:%{!E:%(invoke_as)}}}\", 0},\n #include \"specs.h\"\n   /* Mark end of table */\n-  {0, 0}\n+  {0, 0, 0}\n };\n \n /* Number of elements in default_compilers, not counting the terminator.  */"}, {"sha": "eefb89555723dec5ea45565c5297c1031533e706", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -1,3 +1,8 @@\n+2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* lang-specs.h: Add zero initializer for cpp_spec field to all\n+\tarray elements.\n+\n 2001-02-16  Per Bothner  <per@bothner.com>\n \n \tHandle compiling multiple input files at once, and @FILE syntax."}, {"sha": "fa139aa24ecc6ed5f939dd3aa63cd6dd14246583", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -25,14 +25,14 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    Java.  */\n \n-  {\".java\",   \"@java\" },\n-  {\".class\",  \"@java\" },\n-  {\".zip\",    \"@java\" },\n-  {\".jar\",    \"@java\" },\n+  {\".java\",   \"@java\" , 0},\n+  {\".class\",  \"@java\" , 0},\n+  {\".zip\",    \"@java\" , 0},\n+  {\".jar\",    \"@java\" , 0},\n   {\"@java\",\n    \"%{fjni:%{femit-class-files:%e-fjni and -femit-class-files are incompatible}}\\\n     %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n     %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*}\\\n              %{MD} %{MMD} %{M} %{MM} %{MA} %{MT*} %{MF*}\\\n-             %{!fsyntax-only:%(invoke_as)}}\"},\n+             %{!fsyntax-only:%(invoke_as)}}\", 0},\n "}, {"sha": "26f18f12886a8f764c60c3ecc795131d1ab3b28c", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71434274cd0439bde0dbdfd1fc53e2f24dee485/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=f71434274cd0439bde0dbdfd1fc53e2f24dee485", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    objc.  */\n \n-  {\".m\", \"@objective-c\"},\n+  {\".m\", \"@objective-c\", 0},\n   {\"@objective-c\",\n    /* cc1obj has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps or -traditional is given.  */\n@@ -36,8 +36,8 @@ Boston, MA 02111-1307, USA.  */\n \t    cc1obj -fpreprocessed %{!pipe:%g.mi} %(cc1_options) %{gen-decls}}\\\n \t  %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n \t    cc1obj %{ansi:-std=c89} %(cpp_options) %(cc1_options) %{gen-decls}}}}}\\\n-        %{!fsyntax-only:%(invoke_as)}}}}\"},\n-  {\".mi\", \"@objc-cpp-output\"},\n+        %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n+  {\".mi\", \"@objc-cpp-output\", 0},\n   {\"@objc-cpp-output\",\n      \"%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %{gen-decls}\\\n-\t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\"},\n+\t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\", 0},"}]}