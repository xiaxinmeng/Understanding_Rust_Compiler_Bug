{"sha": "16c337707b0c71829fcad74fdc82d85b1f103eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjMzM3NzA3YjBjNzE4MjlmY2FkNzRmZGM4MmQ4NWIxZjEwM2VhZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-03T19:55:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-03T19:55:55Z"}, "message": "re PR tree-optimization/23329 (hack in may_propagate_copy should be able to removed)\n\n2009-05-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/23329\n\t* tree-ssa.c (useless_type_conversion_p_1): Use get_deref_alias_set.\n\tDo not lose casts from array types with unknown extent to array\n\ttypes with known extent.\n\t* tree-ssa-copy.c (may_propagate_copy): Remove hack checking for\n\talias set compatibility.\n\nFrom-SVN: r147082", "tree": {"sha": "c994ca1477a25fea22b8bbec8ca9896c6a292728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c994ca1477a25fea22b8bbec8ca9896c6a292728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c337707b0c71829fcad74fdc82d85b1f103eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c337707b0c71829fcad74fdc82d85b1f103eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c337707b0c71829fcad74fdc82d85b1f103eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c337707b0c71829fcad74fdc82d85b1f103eaf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62a67c94b776e5d07acd247e8a68f60f2a824024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a67c94b776e5d07acd247e8a68f60f2a824024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a67c94b776e5d07acd247e8a68f60f2a824024"}], "stats": {"total": 74, "additions": 19, "deletions": 55}, "files": [{"sha": "581b3b5fb276be2001693c10eaa158bdf952d4a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c337707b0c71829fcad74fdc82d85b1f103eaf", "patch": "@@ -1,3 +1,12 @@\n+2009-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/23329\n+\t* tree-ssa.c (useless_type_conversion_p_1): Use get_deref_alias_set.\n+\tDo not lose casts from array types with unknown extent to array\n+\ttypes with known extent.\n+\t* tree-ssa-copy.c (may_propagate_copy): Remove hack checking for\n+\talias set compatibility.\n+\n 2009-05-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* flags.h (extra_warnings): Delete."}, {"sha": "9dad1cdc9400597a445c00581cc4eee3770bec54", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=16c337707b0c71829fcad74fdc82d85b1f103eaf", "patch": "@@ -78,55 +78,6 @@ may_propagate_copy (tree dest, tree orig)\n   if (!useless_type_conversion_p (type_d, type_o))\n     return false;\n \n-  /* FIXME.  GIMPLE is allowing pointer assignments and comparisons of\n-     pointers that have different alias sets.  This means that these\n-     pointers will have different memory tags associated to them.\n-\n-     If we allow copy propagation in these cases, statements de-referencing\n-     the new pointer will now have a reference to a different memory tag\n-     with potentially incorrect SSA information.\n-\n-     This was showing up in libjava/java/util/zip/ZipFile.java with code\n-     like:\n-\n-     \tstruct java.io.BufferedInputStream *T.660;\n-\tstruct java.io.BufferedInputStream *T.647;\n-\tstruct java.io.InputStream *is;\n-\tstruct java.io.InputStream *is.662;\n-\t[ ... ]\n-\tT.660 = T.647;\n-\tis = T.660;\t<-- This ought to be type-casted\n-\tis.662 = is;\n-\n-     Also, f/name.c exposed a similar problem with a COND_EXPR predicate\n-     that was causing DOM to generate and equivalence with two pointers of\n-     alias-incompatible types:\n-\n-     \tstruct _ffename_space *n;\n-\tstruct _ffename *ns;\n-\t[ ... ]\n-\tif (n == ns)\n-\t  goto lab;\n-\t...\n-\tlab:\n-\treturn n;\n-\n-     I think that GIMPLE should emit the appropriate type-casts.  For the\n-     time being, blocking copy-propagation in these cases is the safe thing\n-     to do.  */\n-  if (TREE_CODE (dest) == SSA_NAME\n-      && TREE_CODE (orig) == SSA_NAME\n-      && POINTER_TYPE_P (type_d)\n-      && POINTER_TYPE_P (type_o))\n-    {\n-      if (get_alias_set (TREE_TYPE (type_d))\n-\t  != get_alias_set (TREE_TYPE (type_o)))\n-\treturn false;\n-      else if (DECL_NO_TBAA_P (SSA_NAME_VAR (dest))\n-\t       != DECL_NO_TBAA_P (SSA_NAME_VAR (orig)))\n-\treturn false;\n-    }\n-\n   /* Propagating virtual operands is always ok.  */\n   if (TREE_CODE (dest) == SSA_NAME && !is_gimple_reg (dest))\n     {"}, {"sha": "10ec35bd2308c09646e0b6e4e979aa2c463c8510", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c337707b0c71829fcad74fdc82d85b1f103eaf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=16c337707b0c71829fcad74fdc82d85b1f103eaf", "patch": "@@ -961,12 +961,9 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n \t  && TYPE_VOLATILE (TREE_TYPE (outer_type)))\n \treturn false;\n \n-      /* Do not lose casts between pointers with different\n-\t TYPE_REF_CAN_ALIAS_ALL setting or alias sets.  */\n-      if ((TYPE_REF_CAN_ALIAS_ALL (inner_type)\n-\t   != TYPE_REF_CAN_ALIAS_ALL (outer_type))\n-\t  || (get_alias_set (TREE_TYPE (inner_type))\n-\t      != get_alias_set (TREE_TYPE (outer_type))))\n+      /* Do not lose casts between pointers that when dereferenced access\n+\t memory with different alias sets.  */\n+      if (get_deref_alias_set (inner_type) != get_deref_alias_set (outer_type))\n \treturn false;\n \n       /* We do not care for const qualification of the pointed-to types\n@@ -1002,6 +999,13 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n       if (TREE_CODE (inner_type) != TREE_CODE (outer_type))\n \treturn false;\n \n+      /* Conversions from array types with unknown extent to\n+\t array types with known extent are not useless.  */\n+      if (TREE_CODE (inner_type) == ARRAY_TYPE\n+\t  && !TYPE_DOMAIN (inner_type)\n+\t  && TYPE_DOMAIN (outer_type))\n+\treturn false;\n+\n       /* ???  This seems to be necessary even for aggregates that don't\n \t have TYPE_STRUCTURAL_EQUALITY_P set.  */\n "}]}