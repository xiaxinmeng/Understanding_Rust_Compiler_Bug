{"sha": "98c62941ac9d061639ed4031c7a13faa757459a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjNjI5NDFhYzlkMDYxNjM5ZWQ0MDMxYzdhMTNmYWE3NTc0NTlhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-12-13T14:10:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-13T14:10:28Z"}, "message": "sse-12.c: Include x86intrin.h.\n\n\t* gcc.target/i386/sse-12.c: Include x86intrin.h.\n\t(dg-options): Use -mavx instead of -msse4. Add -maes -mpclmul.\n\t* gcc.target/i386/sse-13.c: Include x86intrin.h. Define immintrin.h\n\tintrinsics that require immediate arguments.\n\t(dg-options): Use -mavx instead of -msse4.\n\t* gcc.target/i386/sse-14.c: Include x86intrin.h. Define immintrin.h\n\tintrinsics that require immediate arguments.\n\t(test_3): New macro.\n\t(dg-options): Use -mavx instead of -msse4.\n\t* g++.dg/other/i386-2.C: Include x86intrin.h.\n\t(dg-options): Use -mavx instead of -msse4.\n\t* g++.dg/other/i386-3.C: Include x86intrin.h.\n\t(dg-options): Use -mavx instead of -msse4.\n\nFrom-SVN: r142739", "tree": {"sha": "8627d641ccba8e020a28262694d7d771499c4204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8627d641ccba8e020a28262694d7d771499c4204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98c62941ac9d061639ed4031c7a13faa757459a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c62941ac9d061639ed4031c7a13faa757459a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c62941ac9d061639ed4031c7a13faa757459a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c62941ac9d061639ed4031c7a13faa757459a8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7581b88af9f621fa77e9d2a30889a85855d501c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7581b88af9f621fa77e9d2a30889a85855d501c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7581b88af9f621fa77e9d2a30889a85855d501c0"}], "stats": {"total": 139, "additions": 111, "deletions": 28}, "files": [{"sha": "ce7f79016e77f6e679ec144334c79c58534aae0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,3 +1,19 @@\n+2008-12-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse-12.c: Include x86intrin.h.\n+\t(dg-options): Use -mavx instead of -msse4. Add -maes -mpclmul.\n+\t* gcc.target/i386/sse-13.c: Include x86intrin.h. Define immintrin.h\n+\tintrinsics that require immediate arguments.\n+\t(dg-options): Use -mavx instead of -msse4.\n+\t* gcc.target/i386/sse-14.c: Include x86intrin.h. Define immintrin.h\n+\tintrinsics that require immediate arguments.\n+\t(test_3): New macro.\n+\t(dg-options): Use -mavx instead of -msse4.\n+\t* g++.dg/other/i386-2.C: Include x86intrin.h.\n+\t(dg-options): Use -mavx instead of -msse4.\n+\t* g++.dg/other/i386-3.C: Include x86intrin.h.\n+\t(dg-options): Use -mavx instead of -msse4.\n+\n 2008-12-12  Uros Bizjak <ubizjak@gmail.com>\n \n \tPR testsuite/38163"}, {"sha": "2c3cd29d89010e348bca14b5f9e1e3e47a829dbe", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,11 +1,8 @@\n-/* Test that {,x,e,p,t,s,w,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n \n-#include <wmmintrin.h>\n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>\n+#include <x86intrin.h>\n \n int dummy;"}, {"sha": "ffbd3f3cec4db4ad6b2f9b26a37b9de5dc144b26", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,9 +1,6 @@\n-/* Test that {,x,e,p,t,s,w,a,b}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -fkeep-inline-functions.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -maes -mpclmul -msse4 -msse5\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n \n-#include <wmmintrin.h>\n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>\n+#include <x86intrin.h>"}, {"sha": "5e2173a8f6eac78d42d216c1cc1bbcd971a0ef5d", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,10 +1,8 @@\n-/* Test that {,x,e,p,t,s,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -msse4 -msse5\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n \n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>\n+#include <x86intrin.h>\n \n int dummy;"}, {"sha": "8bfb9f866b45823d8d73b5d604171a99d73375cf", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile with optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a,b}mmintrin.h and mm3dnow.h\n+   defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h and mm3dnow.h\n    that reference the proper builtin functions.  Defining away \"extern\" and\n    \"__inline\" results in all of them being compiled as proper functions.  */\n \n@@ -17,6 +17,38 @@\n #define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n #define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n \n+/* immintrin.h */\n+#define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n+#define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n+#define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n+#define __builtin_ia32_shufpd256(X, Y, M) __builtin_ia32_shufpd256(X, Y, 1)\n+#define __builtin_ia32_shufps256(X, Y, M) __builtin_ia32_shufps256(X, Y, 1)\n+#define __builtin_ia32_cmpsd(X, Y, O) __builtin_ia32_cmpsd(X, Y, 1)\n+#define __builtin_ia32_cmpss(X, Y, O) __builtin_ia32_cmpss(X, Y, 1)\n+#define __builtin_ia32_cmppd(X, Y, O) __builtin_ia32_cmppd(X, Y, 1)\n+#define __builtin_ia32_cmpps(X, Y, O) __builtin_ia32_cmpps(X, Y, 1)\n+#define __builtin_ia32_cmppd256(X, Y, O) __builtin_ia32_cmppd256(X, Y, 1)\n+#define __builtin_ia32_cmpps256(X, Y, O) __builtin_ia32_cmpps256(X, Y, 1)\n+#define __builtin_ia32_vextractf128_pd256(X, N) __builtin_ia32_vextractf128_pd256(X, 1)\n+#define __builtin_ia32_vextractf128_ps256(X, N) __builtin_ia32_vextractf128_ps256(X, 1)\n+#define __builtin_ia32_vextractf128_si256(X, N) __builtin_ia32_vextractf128_si256(X, 1)\n+#define __builtin_ia32_vpermilpd(X, N) __builtin_ia32_vpermilpd(X, 1)\n+#define __builtin_ia32_vpermilpd256(X, N) __builtin_ia32_vpermilpd256(X, 1)\n+#define __builtin_ia32_vpermilps(X, N) __builtin_ia32_vpermilps(X, 1)\n+#define __builtin_ia32_vpermilps256(X, N) __builtin_ia32_vpermilps256(X, 1)\n+#define __builtin_ia32_vpermil2pd(X, Y, C, I) __builtin_ia32_vpermil2pd(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2pd256(X, Y, C, I) __builtin_ia32_vpermil2pd256(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps(X, Y, C, I) __builtin_ia32_vpermil2ps(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps256(X, Y, C, I) __builtin_ia32_vpermil2ps256(X, Y, C, 1)\n+#define __builtin_ia32_vperm2f128_pd256(X, Y, C) __builtin_ia32_vperm2f128_pd256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_ps256(X, Y, C) __builtin_ia32_vperm2f128_ps256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_si256(X, Y, C) __builtin_ia32_vperm2f128_si256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_pd256(X, Y, C) __builtin_ia32_vinsertf128_pd256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_ps256(X, Y, C) __builtin_ia32_vinsertf128_ps256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n+#define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n+#define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+\n /* wmmintrin.h */\n #define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n #define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n@@ -100,7 +132,4 @@\n #define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n-#include <wmmintrin.h>\n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>\n+#include <x86intrin.h>"}, {"sha": "01725681f88b8e8a81aef83ba3312933fcebecd6", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c62941ac9d061639ed4031c7a13faa757459a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=98c62941ac9d061639ed4031c7a13faa757459a8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -msse4 -msse5 -maes -mpclmul\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n \n #include <mm_malloc.h>\n \n@@ -11,10 +11,7 @@\n #define extern\n #define __inline\n \n-#include <wmmintrin.h>\n-#include <bmmintrin.h>\n-#include <smmintrin.h>\n-#include <mm3dnow.h>\n+#include <x86intrin.h>\n \n #define _CONCAT(x,y) x ## y\n \n@@ -34,6 +31,11 @@\n   type _CONCAT(_,func) (op1_type A, op2_type B, int const I, int const L) \\\n   { return func (A, B, imm1, imm2); }\n \n+#define test_3(func, type, op1_type, op2_type, op3_type, imm)\t\t\\\n+  type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n+\t\t\top3_type C, int const I)\t\t\t\\\n+  { return func (A, B, C, imm); }\n+\n #define test_4(func, type, op1_type, op2_type, op3_type, op4_type, imm)\t\\\n   type _CONCAT(_,func) (op1_type A, op2_type B,\t\t\t\t\\\n \t\t\top3_type C, op4_type D, int const I)\t\t\\\n@@ -47,6 +49,50 @@\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n \n+/* immintrin.h */\n+test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_shuffle_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_shuffle_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm_cmp_sd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ss, __m128, __m128, __m128, 1)\n+test_2 (_mm_cmp_pd, __m128d, __m128d, __m128d, 1)\n+test_2 (_mm_cmp_ps, __m128, __m128, __m128, 1)\n+test_2 (_mm256_cmp_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_cmp_ps, __m256, __m256, __m256, 1)\n+test_1 (_mm256_extractf128_pd, __m128d, __m256d, 1)\n+test_1 (_mm256_extractf128_ps, __m128, __m256, 1)\n+test_1 (_mm256_extractf128_si256, __m128i, __m256i, 1)\n+test_1 (_mm256_extract_epi8, int, __m256i, 20)\n+test_1 (_mm256_extract_epi16, int, __m256i, 13)\n+test_1 (_mm256_extract_epi32, int, __m256i, 6)\n+#ifdef __x86_64__\n+test_1 (_mm256_extract_epi64, long long, __m256i, 2)\n+#endif\n+test_1 (_mm_permute_pd, __m128d, __m128d, 1)\n+test_1 (_mm256_permute_pd, __m256d, __m256d, 1)\n+test_1 (_mm_permute_ps, __m128, __m128, 1)\n+test_1 (_mm256_permute_ps, __m256, __m256, 1)\n+test_3 (_mm_permute2_pd, __m128d, __m128d, __m128d, __m128d, 1)\n+test_3 (_mm256_permute2_pd, __m256d, __m256d, __m256d, __m256d, 1)\n+test_3 (_mm_permute2_ps, __m128, __m128, __m128, __m128, 1)\n+test_3 (_mm256_permute2_ps, __m256, __m256, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_pd, __m256d, __m256d, __m256d, 1)\n+test_2 (_mm256_permute2f128_ps, __m256, __m256, __m256, 1)\n+test_2 (_mm256_permute2f128_si256, __m256i, __m256i, __m256i, 1)\n+test_2 (_mm256_insertf128_pd, __m256d, __m256d, __m128d, 1)\n+test_2 (_mm256_insertf128_ps, __m256, __m256, __m128, 1)\n+test_2 (_mm256_insertf128_si256, __m256i, __m256i, __m128i, 1)\n+test_2 (_mm256_insert_epi8, __m256i, __m256i, int, 30)\n+test_2 (_mm256_insert_epi16, __m256i, __m256i, int, 7)\n+test_2 (_mm256_insert_epi32, __m256i, __m256i, int, 3)\n+#ifdef __x86_64__\n+test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n+#endif\n+test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n+test_1 (_mm256_round_ps, __m256, __m256, 1)\n+\n /* wmmintrin.h */\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)"}]}