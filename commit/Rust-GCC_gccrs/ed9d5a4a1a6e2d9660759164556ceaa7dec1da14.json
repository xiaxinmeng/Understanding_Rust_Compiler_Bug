{"sha": "ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5ZDVhNGExYTZlMmQ5NjYwNzU5MTY0NTU2Y2VhYTdkZWMxZGExNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-09T19:25:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-09-09T19:25:31Z"}, "message": "re PR c/39779 (ICE shifting byte to the right with constant > 7FFFFFFF)\n\n\tPR rtl-optimization/39779\n\t* expr.c (convert_modes): Return when mode == oldmode after\n\tCONST_INTs are processed.\n\ntestsuite/ChangeLog:\n\n\tPR rtl-optimization/39779\n\t* gcc.dg/pr39979.c: New test.\n\nFrom-SVN: r151573", "tree": {"sha": "b456b7854cccbfd703167da199781923fe249c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b456b7854cccbfd703167da199781923fe249c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/comments", "author": null, "committer": null, "parents": [{"sha": "3d887721064c855f5743b0d8884642b39b44c9ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d887721064c855f5743b0d8884642b39b44c9ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d887721064c855f5743b0d8884642b39b44c9ab"}], "stats": {"total": 113, "additions": 55, "deletions": 58}, "files": [{"sha": "61522ed0f53cf8a2fe137293de5647336bfcd2b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 55, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "patch": "@@ -1,8 +1,13 @@\n+2009-09-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/39779\n+\t* expr.c (convert_modes): Return when mode == oldmode after\n+\tCONST_INTs are processed.\n+\n 2009-09-09  Kai Tietz  <kai.tietz@onevision.com>\n \n \tPR/41315\n-\t* config/i386.c (ix86_can_use_return_insn_p): Check for\n-\tpadding0, too.\n+\t* config/i386.c (ix86_can_use_return_insn_p): Check for padding0, too.\n \t(ix86_expand_prologue): Take frame.padding0 into logic of\n \tto_allocate checks.\n \t(ix86_expand_epilogue): Likewise.\n@@ -187,7 +192,7 @@\n \t(insn_reservation \"loadsp\"): New.\n \t(insn_reservation \"load_stall1\"): New.\n \t(insn_reservation \"load_stall3\"): New.\n-\t(stall): New insn.\t\n+\t(stall): New insn.\n \t* config/bfin/predicates.md (const1_operand, const3_operand): New.\n \t(mem_p_address_operand): Exclude stack and frame pointer based\n \taddresses.\n@@ -205,12 +210,12 @@\n \tFrom Mike Frysinger  <michael.frysinger@analog.com>\n \t* config/bfin/bfin-protos.h (bfin_cpu_type): Add BFIN_CPU_BF542M,\n \tBFIN_CPU_BF544M, BFIN_CPU_BF547M, BFIN_CPU_BF548M, and BFIN_CPU_BF549M.\n-\t* config/bfin/bfin.c (bfin_cpus[]): Add 0.3 for bf542m, bf544m, bf547m,\n-\tbf548m, and bf549m.\n+\t* config/bfin/bfin.c (bfin_cpus[]): Add 0.3 for bf542m, bf544m,\n+\tbf547m, bf548m, and bf549m.\n \t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define __ADSPBF542M__\n-\tfor BFIN_CPU_BF542M, __ADSPBF544M__ for BFIN_CPU_BF544M, __ADSPBF547M__\n-\tfor BFIN_CPU_BF547M, __ADSPBF548M__ for BFIN_CPU_BF548M, and\n-\t__ADSPBF549M__ for BFIN_CPU_BF549M.\n+\tfor BFIN_CPU_BF542M, __ADSPBF544M__ for BFIN_CPU_BF544M,\n+\t__ADSPBF547M__ for BFIN_CPU_BF547M, __ADSPBF548M__ for\n+\tBFIN_CPU_BF548M, and __ADSPBF549M__ for BFIN_CPU_BF549M.\n \t* config/bfin/t-bfin-elf (MULTILIB_MATCHES): Select bf532-none for\n \tbf542m-none, bf544m-none, bf547m-none, bf548m-none, and bf549m-none.\n \t* config/bfin/t-bfin-linux (MULTILIB_MATCHES): Likewise.\n@@ -219,17 +224,14 @@\n \tbf542m, bf544m, bf547m, bf548m, and bf549m.\n \n \tFrom Jie Zhang <jie.zhang@analog.com>:\n-\t* config/bfin/predicates.md (p_register_operand): New\n-\tpredicate.\n+\t* config/bfin/predicates.md (p_register_operand): New predicate.\n \t(dp_register_operand): New predicate.\n \t* config/bfin/bfin-protos.h (WA_05000074): Define.\n \t(ENABLE_WA_05000074): Define.\n-\t* config/bfin/bfin.c (bfin_cpus[]): Add WA_05000074 for\n-\tall cpus.\n+\t* config/bfin/bfin.c (bfin_cpus[]): Add WA_05000074 for all cpus.\n \t(bfin_gen_bundles): Put dsp32shiftimm instruction in slot[0].\n \t* config/bfin/bfin.md (define_attr type): Add dsp32shiftimm.\n-\t(define_attr addrtype): Allow load/store register to be\n-\tP register.\n+\t(define_attr addrtype): Allow load/store register to be P register.\n \t(define_attr storereg): New.\n \t(define_cpu_unit anomaly_05000074): New.\n \t(define_insn_reservation dsp32shiftimm): New.\n@@ -283,7 +285,7 @@\n \n 2009-09-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n-\t* rtl.h (PREFETCH_SCHEDULE_BARRIER_P): New macro.\t\n+\t* rtl.h (PREFETCH_SCHEDULE_BARRIER_P): New macro.\n \t* sched-deps.c (sched_analyze_2): Make prefetches a hard barrier\n \twhen volatile flag is set.\n \t* doc/rtl.texi (PREFETCH_SCHEDULE_BARRIER_P): Add documentation pieces.\n@@ -670,8 +672,7 @@\n \texpand_expr_real_2): Declare.\n \t* expr.c (emit_storent_insn, expand_expr_real_1,\n \texpand_expr_real_2): Export.\n-\t(store_expr): Setting and evaluating dont_return_target is\n-\tuseless.\n+\t(store_expr): Setting and evaluating dont_return_target is useless.\n \t(expand_expr_real_1, <case GOTO_EXPR, RETURN_EXPR, SWITCH_EXPR,\n \tLABEL_EXPR and ASM_EXPR>): Move to gcc_unreachable.\n \t* except.c (expand_resx_expr): Rename to ...\n@@ -728,8 +729,7 @@\n \t(update_register_pressure, setup_insn_max_reg_pressure,\n \tupdate_reg_and_insn_max_reg_pressure,\n \tsched_setup_bb_reg_pressure_info): New functions.\n-\t(schedule_insn): Add code for printing and updating reg pressure\n-\tinfo.\n+\t(schedule_insn): Add code for printing and updating reg pressure info.\n \t(find_set_reg_weight, find_insn_reg_weight): Remove.\n \t(ok_for_early_queue_removal): Do nothing if pressure_only_p.\n \t(debug_ready_list): Print reg pressure info.\n@@ -795,8 +795,7 @@\n \t(common_classes): Rename to regno_cover_class.\n \t(COST_INDEX): New.\n \t(record_reg_classes): Set allocno attributes only if allocno_p.\n-\t(record_address_regs): Ditto.  Use COST_INDEX instead of\n-\tALLOCNO_NUM.\n+\t(record_address_regs): Ditto.  Use COST_INDEX instead of ALLOCNO_NUM.\n \t(scan_one_insn): Use COST_INDEX and COSTS instead of ALLOCNO_NUM\n \tand COSTS_OF_ALLOCNO.\n \t(print_costs): Rename to print_allocno_costs.\n@@ -822,8 +821,7 @@\n \t(setup_reg_classes): Add new parameter.\n \n \t* sched-int.h (struct deps_reg): New member implicit_sets.\n-\t(sched_pressure_p, sched_regno_cover_class): New external\n-\tdefinitions.\n+\t(sched_pressure_p, sched_regno_cover_class): New external definitions.\n \t(INCREASE_BITS): New macro.\n \t(struct reg_pressure_data, struct reg_use_data): New.\n \t(struct _haifa_insn_data): Remove reg_weight.  Add members\n@@ -835,8 +833,7 @@\n \t(struct reg_pressure_data, struct reg_use_data): New.\n \t(INSN_REG_WEIGHT): Remove.\n \t(INSN_REG_PRESSURE, INSN_MAX_REG_PRESSURE, INSN_REG_USE_LIST,\n-\tINSN_REG_SET_LIST, INSN_REG_PRESSURE_EXCESS_COST_CHANGE): New\n-\tmacros.\n+\tINSN_REG_SET_LIST, INSN_REG_PRESSURE_EXCESS_COST_CHANGE): New macros.\n \t(sched_init_region_reg_pressure_info,\n \tsched_setup_bb_reg_pressure_info): New prototypes.\n \n@@ -848,8 +845,8 @@\n \t(resize_reg_info): Use reg_info_size.  Return flag of resizing.\n \t(setup_reg_classes): Add a new parameter.  Setup cover class too.\n \n-\t* Makefile.in (reload.o, haifa-sched.o, sched-deps.o): Add ira.h to the\n-\tdependencies.\n+\t* Makefile.in (reload.o, haifa-sched.o, sched-deps.o): Add ira.h to\n+\tthe dependencies.\n \n \t* sched-rgn.c (deps_join): Set up implicit_sets.\n \t(schedule_region): Set up region and basic blocks pressure\n@@ -904,8 +901,7 @@\n \t* regrename.c (regrename_optimize): Drop last.  Don't count debug\n \tinsns as uses.  Don't reject change because of debug insn.\n \t(do_replace): Reject DEBUG_INSN as chain starter.  Take base_regno\n-\tfrom the chain starter, and check for inexact matches in\n-\tDEBUG_INSNS.\n+\tfrom the chain starter, and check for inexact matches in DEBUG_INSNS.\n \t(scan_rtx_reg): Accept inexact matches in DEBUG_INSNs.\n \t(build_def_use): Simplify and fix the marking of DEBUG_INSNs.\n \t* sched-ebb.c (schedule_ebbs): Skip boundary debug insns.\n@@ -1052,8 +1048,7 @@\n \t(fur_orig_expr_not_found): Skip debug insns.\n \t* rtl.def (VALUE): Move up.\n \t(DEBUG_INSN): New.\n-\t* tree-ssa-sink.c (all_immediate_uses_same_place): Skip debug\n-\tstmts.\n+\t* tree-ssa-sink.c (all_immediate_uses_same_place): Skip debug stmts.\n \t(nearest_common_dominator_of_uses): Take debug_stmts argument.\n \tSet it if debug stmts are found.\n \t(statement_sink_location): Skip debug stmts.  Propagate\n@@ -1123,8 +1118,7 @@\n \tin its expression.\n \t* cfgbuild.c (inside_basic_block_p): Handle debug insns.\n \t(control_flow_insn_p): Likewise.\n-\t* tree-parloops.c (eliminate_local_variables_stmt): Handle debug\n-\tstmt.\n+\t* tree-parloops.c (eliminate_local_variables_stmt): Handle debug stmt.\n \t(separate_decls_in_region_debug_bind): New.\n \t(separate_decls_in_region): Process debug bind stmts afterwards.\n \t* recog.c (verify_changes): Handle debug insns.\n@@ -1157,8 +1151,7 @@\n \t* function.c (instantiate_virtual_regs): Handle debug insns.\n \t* function.h (struct emit_status): Add x_cur_debug_insn_uid.\n \t* print-rtl.h: Include cselib.h.\n-\t(print_rtx): Print VALUEs.  Split out and recurse for\n-\tVAR_LOCATIONs.\n+\t(print_rtx): Print VALUEs.  Split out and recurse for VAR_LOCATIONs.\n \t* df.h (df_inns_rescan_debug_internal): Declare.\n \t* gcse.c (alloc_hash_table): Estimate n_insns.\n \t(cprop_insn): Don't regard debug insns as changes.\n@@ -1259,8 +1252,7 @@\n \t(cselib_subst_to_values): Adjust.\n \t(cselib_log_lookup): New.\n \t(cselib_lookup): Call it.\n-\t(cselib_invalidate_regno): Don't count preserved values as\n-\tuseless.\n+\t(cselib_invalidate_regno): Don't count preserved values as useless.\n \t(cselib_invalidate_mem): Likewise.\n \t(cselib_record_set): Likewise.\n \t(struct set): Renamed to cselib_set, moved to cselib.h.\n@@ -1379,8 +1371,7 @@\n \t(copy_body): Copy debug stmts at the end.\n \t(insert_init_debug_bind): New.\n \t(insert_init_stmt): Take id.  Skip and emit debug stmts.\n-\t(setup_one_parameter): Remap variable earlier, register debug\n-\tmapping.\n+\t(setup_one_parameter): Remap variable earlier, register debug mapping.\n \t(estimate_num_insns): Skip debug stmts.\n \t(expand_call_inline): Preserve debug_map.\n \t(optimize_inline_calls): Check for no debug_stmts left-overs.\n@@ -1489,8 +1480,7 @@\n \t(dataflow_set_clear_at_call): New.\n \t(onepart_variable_different_p): New.\n \t(variable_different_p): Use it.\n-\t(dataflow_set_different_1): Adjust.  Make detailed dump\n-\tmore verbose.\n+\t(dataflow_set_different_1): Adjust.  Make detailed dump more verbose.\n \t(track_expr_p): Add need_rtl parameter.  Don't generate rtl\n \tif not needed.\n \t(track_loc_p): Pass it true.\n@@ -1538,8 +1528,8 @@\n \t(emit_notes_for_differences_1): Adjust.  Handle values.\n \t(emit_notes_for_differences_2): Likewise.\n \t(emit_notes_for_differences): Adjust.\n-\t(emit_notes_in_bb): Take pointer to set.  Emit AFTER_CALL_INSN\n-\tnotes.  Adjust.  Handle new micro-ops.\n+\t(emit_notes_in_bb): Take pointer to set.  Emit AFTER_CALL_INSN notes.\n+\tAdjust.  Handle new micro-ops.\n \t(vt_add_function_parameters): Adjust.  Create and bind values.\n \t(vt_initialize): Adjust.  Initialize scratch_regs and\n \tvalvar_pool, flooded and perm..  Initialize and use cselib.  Log\n@@ -1589,8 +1579,7 @@\n \tempty.  Traverse changed_variables with check_changed_vars_1,\n \tcall check_changed_vars_2 on each changed_variables_stack entry.\n \t(emit_notes_in_bb): Add SET argument.  Just clear it at the\n-\tbeginning, use it instead of local &set, don't destroy it at the\n-\tend.\n+\tbeginning, use it instead of local &set, don't destroy it at the end.\n \t(vt_emit_notes): Call dataflow_set_clear early on all\n \tVTI(bb)->out sets, never use them, instead use emit_notes_in_bb\n \tcomputed set, dataflow_set_clear also VTI(bb)->in when we are\n@@ -1617,12 +1606,10 @@\n \t(print-rtl.o): Depend on cselib.h.\n \t(cselib.o): Depend on TREE_PASS_H.\n \t(var-tracking.o): Depend on cselib.h and TARGET_H.\n-\t* sched-rgn.c (rgn_estimate_number_of_insns): Discount\n-\tdebug insns.\n+\t* sched-rgn.c (rgn_estimate_number_of_insns): Discount debug insns.\n \t(init_ready_list): Skip boundary debug insns.\n \t(add_branch_dependences): Skip debug insns.\n-\t(free_block_dependencies): Check for blocks with only debug\n-\tinsns.\n+\t(free_block_dependencies): Check for blocks with only debug insns.\n \t(compute_priorities): Likewise.\n \t* gimple.c (gss_for_code): Handle GIMPLE_DEBUG.\n \t(gimple_build_with_ops_stat): Take subcode as unsigned.  Adjust\n@@ -1662,13 +1649,11 @@\n \t(verify_stmt): Likewise.\n \t(debug_loop_num): Skip debug stmts.\n \t(remove_edge_and_dominated_blocks): Remove dominators last.\n-\t* tree-ssa-reasssoc.c (rewrite_expr_tree): Propagate into\n-\tdebug stmts.\n+\t* tree-ssa-reasssoc.c (rewrite_expr_tree): Propagate into debug stmts.\n \t(linearize_expr): Likewise.\n \t* config/i386/i386.c (ix86_delegitimize_address): Call\n \tdefault implementation.\n-\t* config/ia64/ia64.c (ia64_safe_itanium_class): Handle debug\n-\tinsns.\n+\t* config/ia64/ia64.c (ia64_safe_itanium_class): Handle debug insns.\n \t(group_barrier_needed): Skip debug insns.\n \t(emit_insn_group_barriers): Likewise.\n \t(emit_all_insn_group_barriers): Likewise.\n@@ -1696,8 +1681,7 @@\n \t* dce.c (deletable_insn_p): Handle VAR_LOCATION.\n \t(mark_reg_dependencies): Skip debug insns.\n \t* params.def (PARAM_MIN_NONDEBUG_INSN_UID): New.\n-\t* tree-ssanames.c (release_ssa_name): Propagate def into\n-\tdebug stmts.\n+\t* tree-ssanames.c (release_ssa_name): Propagate def into debug stmts.\n \t* tree-ssa-threadedge.c\n \t(record_temporary_equivalences_from_stmts): Skip debug stmts.\n \t* regcprop.c (replace_oldest_value_addr): Skip debug insns."}, {"sha": "fe74280d7fefa5dd9f667b34bcba95bfcb2ce507", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "patch": "@@ -761,9 +761,6 @@ convert_modes (enum machine_mode mode, enum machine_mode oldmode, rtx x, int uns\n   if (GET_MODE (x) != VOIDmode)\n     oldmode = GET_MODE (x);\n \n-  if (mode == oldmode)\n-    return x;\n-\n   /* There is one case that we must handle specially: If we are converting\n      a CONST_INT into a mode whose size is twice HOST_BITS_PER_WIDE_INT and\n      we are to interpret the constant as unsigned, gen_lowpart will do\n@@ -829,6 +826,9 @@ convert_modes (enum machine_mode mode, enum machine_mode oldmode, rtx x, int uns\n       return gen_lowpart (mode, x);\n     }\n \n+  if (mode == oldmode)\n+    return x;\n+\n   /* Converting from integer constant into mode is always equivalent to an\n      subreg operation.  */\n   if (VECTOR_MODE_P (mode) && GET_MODE (x) == VOIDmode)"}, {"sha": "9d6b8235f8d2e8902a1d12c021c4a9d2ee7b9227", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "patch": "@@ -1,3 +1,8 @@\n+2009-09-09 Uros Bizjak <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/39779\n+\t* gcc.dg/pr39979.c: New test.\n+\n 2009-09-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/41101"}, {"sha": "7d3cef17c67a4e9d57d1ec07b8046d7ef940c72e", "filename": "gcc/testsuite/gcc.dg/pr39779.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9d5a4a1a6e2d9660759164556ceaa7dec1da14/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39779.c?ref=ed9d5a4a1a6e2d9660759164556ceaa7dec1da14", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+int test (char v1)\n+{\n+  v1 >>= 0xdebecced;\n+  return v1;\n+}"}]}