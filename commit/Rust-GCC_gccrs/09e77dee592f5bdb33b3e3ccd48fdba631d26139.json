{"sha": "09e77dee592f5bdb33b3e3ccd48fdba631d26139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDllNzdkZWU1OTJmNWJkYjMzYjNlM2NjZDQ4ZmRiYTYzMWQyNjEzOQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-06-07T22:24:30Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-06-07T22:24:30Z"}, "message": "cppinit.c (COMMAND_LINE_OPTIONS): Give all relevant -W options their own entries.\n\n\t* cppinit.c (COMMAND_LINE_OPTIONS): Give all relevant -W\n\toptions their own entries.\n\t(parse_option): Clarify comment.\n\t(cpp_handle_option): Remove 'ignore' parameter and OPT_W\n\tspecial case.  Replace if/strcmp chain for -W options with\n\tuse of new OPT_* entries for them.\n\t(cpp_handle_options): Update to match.\n\t* cpplib.h: Remove last parameter to cpp_handle_option from prototype.\n\t* c-decl.c, cp/decl2.c: Update call to cpp_handle_option.\n\nFrom-SVN: r54352", "tree": {"sha": "7a1bf70d67c5edb93d24792709314b561db24b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a1bf70d67c5edb93d24792709314b561db24b09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09e77dee592f5bdb33b3e3ccd48fdba631d26139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e77dee592f5bdb33b3e3ccd48fdba631d26139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e77dee592f5bdb33b3e3ccd48fdba631d26139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e77dee592f5bdb33b3e3ccd48fdba631d26139/comments", "author": null, "committer": null, "parents": [{"sha": "3522a91b8029058d4b7a06d8f5b4932f6a35dfc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3522a91b8029058d4b7a06d8f5b4932f6a35dfc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3522a91b8029058d4b7a06d8f5b4932f6a35dfc4"}], "stats": {"total": 166, "additions": 104, "deletions": 62}, "files": [{"sha": "7c56a1a6e6e4bf2a97e32be968421186d48dd36c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -1,3 +1,15 @@\n+2002-06-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cppinit.c (COMMAND_LINE_OPTIONS): Give all relevant -W\n+\toptions their own entries.\n+\t(parse_option): Clarify comment.\n+\t(cpp_handle_option): Remove 'ignore' parameter and OPT_W\n+\tspecial case.  Replace if/strcmp chain for -W options with\n+\tuse of new OPT_* entries for them.\n+\t(cpp_handle_options): Update to match.\n+\t* cpplib.h: Remove last parameter to cpp_handle_option from prototype.\n+\t* c-decl.c: Update call to cpp_handle_option.\n+\n 2002-06-07  Akim Demaille  <akim@epita.fr>\n \n \t* gengtype-yacc.y (optionseqopt): Add the ending `;' to the action."}, {"sha": "819e26e95961e39bee160c21d56357daee6c9e94", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -502,7 +502,7 @@ c_decode_option (argc, argv)\n     { \"write-strings\", &flag_const_strings }\n   };\n \n-  strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv);\n \n   if (!strcmp (p, \"-fhosted\") || !strcmp (p, \"-fno-freestanding\"))\n     {"}, {"sha": "fd4cd32306e983bdd807035adc860f5f0be8d840", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -1,3 +1,7 @@\n+2002-06-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl2.c: Update call to cpp_handle_option.\n+\n 2002-06-07  H.J. Lu  (hjl@gnu.org)\n \n \t* decl2.c (flag_use_cxa_atexit): Set to DEFAULT_USE_CXA_ATEXIT."}, {"sha": "661ae3a9a9ef0dce3af7156efca15ea897bef695", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -479,7 +479,7 @@ cxx_decode_option (argc, argv)\n   int strings_processed;\n   const char *p = argv[0];\n \n-  strings_processed = cpp_handle_option (parse_in, argc, argv, 0);\n+  strings_processed = cpp_handle_option (parse_in, argc, argv);\n \n   if (p[0] == '-' && p[1] == 'f')\n     {"}, {"sha": "1bb323f99883b9987baa3e2fb2ba8482770ffbf0", "filename": "gcc/cppinit.c", "status": "modified", "additions": 85, "deletions": 59, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -1152,7 +1152,25 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n   DEF_OPT(\"P\",                        0,      OPT_P)                          \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n-  DEF_OPT(\"W\",                        no_arg, OPT_W)  /* arg optional */      \\\n+  DEF_OPT(\"Wall\",                     0,      OPT_Wall)                       \\\n+  DEF_OPT(\"Wcomment\",                 0,      OPT_Wcomment)                   \\\n+  DEF_OPT(\"Wcomments\",                0,      OPT_Wcomments)                  \\\n+  DEF_OPT(\"Wendif-labels\",            0,      OPT_Wendif_labels)              \\\n+  DEF_OPT(\"Werror\",                   0,      OPT_Werror)                     \\\n+  DEF_OPT(\"Wimport\",                  0,      OPT_Wimport)                    \\\n+  DEF_OPT(\"Wno-comment\",              0,      OPT_Wno_comment)                \\\n+  DEF_OPT(\"Wno-comments\",             0,      OPT_Wno_comments)               \\\n+  DEF_OPT(\"Wno-endif-labels\",         0,      OPT_Wno_endif_labels)           \\\n+  DEF_OPT(\"Wno-error\",                0,      OPT_Wno_error)                  \\\n+  DEF_OPT(\"Wno-import\",               0,      OPT_Wno_import)                 \\\n+  DEF_OPT(\"Wno-system-headers\",       0,      OPT_Wno_system_headers)         \\\n+  DEF_OPT(\"Wno-traditional\",          0,      OPT_Wno_traditional)            \\\n+  DEF_OPT(\"Wno-trigraphs\",            0,      OPT_Wno_trigraphs)              \\\n+  DEF_OPT(\"Wno-undef\",                0,      OPT_Wno_undef)                  \\\n+  DEF_OPT(\"Wsystem-headers\",          0,      OPT_Wsystem_headers)            \\\n+  DEF_OPT(\"Wtraditional\",             0,      OPT_Wtraditional)               \\\n+  DEF_OPT(\"Wtrigraphs\",               0,      OPT_Wtrigraphs)                 \\\n+  DEF_OPT(\"Wundef\",                   0,      OPT_Wundef)                     \\\n   DEF_OPT(\"d\",                        no_arg, OPT_d)                          \\\n   DEF_OPT(\"fno-operator-names\",       0,      OPT_fno_operator_names)         \\\n   DEF_OPT(\"fno-preprocessed\",         0,      OPT_fno_preprocessed)           \\\n@@ -1228,10 +1246,7 @@ static const struct cl_option cl_options[] =\n    command-line matches.  Returns its index in the option array,\n    negative on failure.  Complications arise since some options can be\n    suffixed with an argument, and multiple complete matches can occur,\n-   e.g. -iwithprefix and -iwithprefixbefore.  Moreover, we need to\n-   accept options beginning with -W that we do not recognise, but not\n-   to swallow any subsequent command line argument; this is handled as\n-   special cases in cpp_handle_option.  */\n+   e.g. -pedantic and -pedantic-errors.  */\n static int\n parse_option (input)\n      const char *input;\n@@ -1290,14 +1305,12 @@ parse_option (input)\n \n /* Handle one command-line option in (argc, argv).\n    Can be called multiple times, to handle multiple sets of options.\n-   If ignore is non-zero, this will ignore unrecognized -W* options.\n    Returns number of strings consumed.  */\n int\n-cpp_handle_option (pfile, argc, argv, ignore)\n+cpp_handle_option (pfile, argc, argv)\n      cpp_reader *pfile;\n      int argc;\n      char **argv;\n-     int ignore;\n {\n   int i = 0;\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n@@ -1329,11 +1342,7 @@ cpp_handle_option (pfile, argc, argv, ignore)\n       if (cl_options[opt_index].msg)\n \t{\n \t  arg = &argv[i][cl_options[opt_index].opt_len + 1];\n-\n-\t  /* Yuk. Special case for -W as it must not swallow\n-\t     up any following argument.  If this becomes common, add\n-\t     another field to the cl_options table.  */\n-\t  if (arg[0] == '\\0' && opt_code != OPT_W)\n+\t  if (arg[0] == '\\0')\n \t    {\n \t      arg = argv[++i];\n \t      if (!arg)\n@@ -1665,51 +1674,68 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \t  /* Add directory to end of path for includes.  */\n \t  append_include_chain (pfile, xstrdup (arg), AFTER, 0);\n \t  break;\n-\tcase OPT_W:\n-\t  /* Silently ignore unrecognised options.  */\n-\t  if (!strcmp (argv[i], \"-Wall\"))\n-\t    {\n-\t      CPP_OPTION (pfile, warn_trigraphs) = 1;\n-\t      CPP_OPTION (pfile, warn_comments) = 1;\n-\t    }\n-\t  else if (!strcmp (argv[i], \"-Wtraditional\"))\n-\t    CPP_OPTION (pfile, warn_traditional) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wtrigraphs\"))\n-\t    CPP_OPTION (pfile, warn_trigraphs) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wcomment\"))\n-\t    CPP_OPTION (pfile, warn_comments) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wcomments\"))\n-\t    CPP_OPTION (pfile, warn_comments) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wundef\"))\n-\t    CPP_OPTION (pfile, warn_undef) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wimport\"))\n-\t    CPP_OPTION (pfile, warn_import) = 1;\n-\t  else if (!strcmp (argv[i], \"-Werror\"))\n-\t    CPP_OPTION (pfile, warnings_are_errors) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wsystem-headers\"))\n-\t    CPP_OPTION (pfile, warn_system_headers) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wendif-labels\"))\n-\t    CPP_OPTION (pfile, warn_endif_labels) = 1;\n-\t  else if (!strcmp (argv[i], \"-Wno-traditional\"))\n-\t    CPP_OPTION (pfile, warn_traditional) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-trigraphs\"))\n-\t    CPP_OPTION (pfile, warn_trigraphs) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-comment\"))\n-\t    CPP_OPTION (pfile, warn_comments) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-comments\"))\n-\t    CPP_OPTION (pfile, warn_comments) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-undef\"))\n-\t    CPP_OPTION (pfile, warn_undef) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-import\"))\n-\t    CPP_OPTION (pfile, warn_import) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-error\"))\n-\t    CPP_OPTION (pfile, warnings_are_errors) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-system-headers\"))\n-\t    CPP_OPTION (pfile, warn_system_headers) = 0;\n-\t  else if (!strcmp (argv[i], \"-Wno-endif-labels\"))\n-\t    CPP_OPTION (pfile, warn_endif_labels) = 0;\n-\t  else if (! ignore)\n-\t    return i;\n+\n+\tcase OPT_Wall:\n+\t  CPP_OPTION (pfile, warn_trigraphs) = 1;\n+\t  CPP_OPTION (pfile, warn_comments) = 1;\n+\t  break;\n+\n+\tcase OPT_Wtraditional:\n+\t  CPP_OPTION (pfile, warn_traditional) = 1;\n+\t  break;\n+\tcase OPT_Wno_traditional:\n+\t  CPP_OPTION (pfile, warn_traditional) = 0;\n+\t  break;\n+\n+\tcase OPT_Wtrigraphs:\n+\t  CPP_OPTION (pfile, warn_trigraphs) = 1;\n+\t  break;\n+\tcase OPT_Wno_trigraphs:\n+\t  CPP_OPTION (pfile, warn_trigraphs) = 0;\n+\t  break;\n+\n+\tcase OPT_Wcomment:\n+\tcase OPT_Wcomments:\n+\t  CPP_OPTION (pfile, warn_comments) = 1;\n+\t  break;\n+\tcase OPT_Wno_comment:\n+\tcase OPT_Wno_comments:\n+\t  CPP_OPTION (pfile, warn_comments) = 0;\n+\t  break;\n+\n+\tcase OPT_Wundef:\n+\t  CPP_OPTION (pfile, warn_undef) = 1;\n+\t  break;\n+\tcase OPT_Wno_undef:\n+\t  CPP_OPTION (pfile, warn_undef) = 0;\n+\t  break;\n+\n+\tcase OPT_Wimport:\n+\t  CPP_OPTION (pfile, warn_import) = 1;\n+\t  break;\n+\tcase OPT_Wno_import:\n+\t  CPP_OPTION (pfile, warn_import) = 0;\n+\t  break;\n+\n+\tcase OPT_Wendif_labels:\n+\t  CPP_OPTION (pfile, warn_endif_labels) = 1;\n+\t  break;\n+\tcase OPT_Wno_endif_labels:\n+\t  CPP_OPTION (pfile, warn_endif_labels) = 0;\n+\t  break;\n+\n+\tcase OPT_Werror:\n+\t  CPP_OPTION (pfile, warnings_are_errors) = 1;\n+\t  break;\n+\tcase OPT_Wno_error:\n+\t  CPP_OPTION (pfile, warnings_are_errors) = 0;\n+\t  break;\n+\n+\tcase OPT_Wsystem_headers:\n+\t  CPP_OPTION (pfile, warn_system_headers) = 1;\n+\t  break;\n+\tcase OPT_Wno_system_headers:\n+\t  CPP_OPTION (pfile, warn_system_headers) = 0;\n \t  break;\n \t}\n     }\n@@ -1731,7 +1757,7 @@ cpp_handle_options (pfile, argc, argv)\n \n   for (i = 0; i < argc; i += strings_processed)\n     {\n-      strings_processed = cpp_handle_option (pfile, argc - i, argv + i, 1);\n+      strings_processed = cpp_handle_option (pfile, argc - i, argv + i);\n       if (strings_processed == 0)\n \tbreak;\n     }"}, {"sha": "66a865314b4258a781996b324af33db51b9960c5", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09e77dee592f5bdb33b3e3ccd48fdba631d26139/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=09e77dee592f5bdb33b3e3ccd48fdba631d26139", "patch": "@@ -515,7 +515,7 @@ extern void cpp_set_callbacks PARAMS ((cpp_reader *, cpp_callbacks *));\n    structure reliable.  Options processing is not completed until you\n    call cpp_finish_options.  */\n extern int cpp_handle_options PARAMS ((cpp_reader *, int, char **));\n-extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **, int));\n+extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n extern void cpp_post_options PARAMS ((cpp_reader *));\n \n /* This function reads the file, but does not start preprocessing.  It"}]}