{"sha": "4725f62789f25b17967695203d7ee821221e2dd6", "node_id": "C_kwDOANBUbNoAKDQ3MjVmNjI3ODlmMjViMTc5Njc2OTUyMDNkN2VlODIxMjIxZTJkZDY", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:00Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:00Z"}, "message": "vect: Move vector costs to loop_vec_info\n\ntarget_cost_data is in vec_info but is really specific to\nloop_vec_info.  This patch moves it there and renames it to\nvector_costs, to distinguish it from scalar target costs.\n\ngcc/\n\t* tree-vectorizer.h (vec_info::target_cost_data): Replace with...\n\t(_loop_vec_info::vector_costs): ...this.\n\t(LOOP_VINFO_TARGET_COST_DATA): Delete.\n\t* tree-vectorizer.c (vec_info::vec_info): Remove target_cost_data\n\tinitialization.\n\t(vec_info::~vec_info): Remove corresponding delete.\n\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Initialize\n\tvector_costs to null.\n\t(_loop_vec_info::~_loop_vec_info): Delete vector_costs.\n\t(vect_analyze_loop_operations): Update after above changes.\n\t(vect_analyze_loop_2): Likewise.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vect-slp.c (vect_slp_analyze_operations): Likewise.", "tree": {"sha": "70d6cf997c830af45ee9f52bff0117776b850488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d6cf997c830af45ee9f52bff0117776b850488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4725f62789f25b17967695203d7ee821221e2dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4725f62789f25b17967695203d7ee821221e2dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4725f62789f25b17967695203d7ee821221e2dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4725f62789f25b17967695203d7ee821221e2dd6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70ef65692fced7ab72e0aceeff7407e5a34d96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70ef65692fced7ab72e0aceeff7407e5a34d96d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70ef65692fced7ab72e0aceeff7407e5a34d96d"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "b066f8592542ec568e552d3af08da0faa9b74677", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=4725f62789f25b17967695203d7ee821221e2dd6", "patch": "@@ -821,6 +821,7 @@ _loop_vec_info::_loop_vec_info (class loop *loop_in, vec_info_shared *shared)\n     num_iters (NULL_TREE),\n     num_iters_unchanged (NULL_TREE),\n     num_iters_assumptions (NULL_TREE),\n+    vector_costs (nullptr),\n     th (0),\n     versioning_threshold (0),\n     vectorization_factor (0),\n@@ -932,6 +933,7 @@ _loop_vec_info::~_loop_vec_info ()\n   delete ivexpr_map;\n   delete scan_map;\n   epilogue_vinfos.release ();\n+  delete vector_costs;\n \n   /* When we release an epiloge vinfo that we do not intend to use\n      avoid clearing AUX of the main loop which should continue to\n@@ -1765,7 +1767,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n         }\n     } /* bbs */\n \n-  add_stmt_costs (loop_vinfo->target_cost_data, &cost_vec);\n+  add_stmt_costs (loop_vinfo->vector_costs, &cost_vec);\n \n   /* All operations in the loop are either irrelevant (deal with loop\n      control, or dead), or only used outside the loop and can be moved\n@@ -2375,7 +2377,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n \t\t   LOOP_VINFO_INT_NITERS (loop_vinfo));\n     }\n \n-  LOOP_VINFO_TARGET_COST_DATA (loop_vinfo) = init_cost (loop_vinfo, false);\n+  loop_vinfo->vector_costs = init_cost (loop_vinfo, false);\n \n   /* Analyze the alignment of the data-refs in the loop.\n      Fail if a data reference is found that cannot be vectorized.  */\n@@ -2742,8 +2744,8 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n   LOOP_VINFO_COMP_ALIAS_DDRS (loop_vinfo).release ();\n   LOOP_VINFO_CHECK_UNEQUAL_ADDRS (loop_vinfo).release ();\n   /* Reset target cost data.  */\n-  delete LOOP_VINFO_TARGET_COST_DATA (loop_vinfo);\n-  LOOP_VINFO_TARGET_COST_DATA (loop_vinfo) = nullptr;\n+  delete loop_vinfo->vector_costs;\n+  loop_vinfo->vector_costs = nullptr;\n   /* Reset accumulated rgroup information.  */\n   release_vec_loop_controls (&LOOP_VINFO_MASKS (loop_vinfo));\n   release_vec_loop_controls (&LOOP_VINFO_LENS (loop_vinfo));\n@@ -3919,7 +3921,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n   int scalar_outside_cost = 0;\n   int assumed_vf = vect_vf_for_cost (loop_vinfo);\n   int npeel = LOOP_VINFO_PEELING_FOR_ALIGNMENT (loop_vinfo);\n-  vector_costs *target_cost_data = LOOP_VINFO_TARGET_COST_DATA (loop_vinfo);\n+  vector_costs *target_cost_data = loop_vinfo->vector_costs;\n \n   /* Cost model disabled.  */\n   if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n@@ -4265,7 +4267,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     }\n \n   /* Complete the target-specific cost calculations.  */\n-  finish_cost (LOOP_VINFO_TARGET_COST_DATA (loop_vinfo), &vec_prologue_cost,\n+  finish_cost (loop_vinfo->vector_costs, &vec_prologue_cost,\n \t       &vec_inside_cost, &vec_epilogue_cost);\n \n   vec_outside_cost = (int)(vec_prologue_cost + vec_epilogue_cost);"}, {"sha": "d437bfd20d0ae377850b7da90d03276871462aca", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4725f62789f25b17967695203d7ee821221e2dd6", "patch": "@@ -4889,16 +4889,15 @@ vect_slp_analyze_operations (vec_info *vinfo)\n       else\n \t{\n \t  i++;\n-\n-\t  /* For BB vectorization remember the SLP graph entry\n-\t     cost for later.  */\n-\t  if (is_a <bb_vec_info> (vinfo))\n-\t    instance->cost_vec = cost_vec;\n-\t  else\n+\t  if (loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (vinfo))\n \t    {\n-\t      add_stmt_costs (vinfo->target_cost_data, &cost_vec);\n+\t      add_stmt_costs (loop_vinfo->vector_costs, &cost_vec);\n \t      cost_vec.release ();\n \t    }\n+\t  else\n+\t    /* For BB vectorization remember the SLP graph entry\n+\t       cost for later.  */\n+\t    instance->cost_vec = cost_vec;\n \t}\n     }\n "}, {"sha": "9ef76ce654b4ac40bf2dc6e763c0e35f763c3339", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=4725f62789f25b17967695203d7ee821221e2dd6", "patch": "@@ -459,8 +459,7 @@ shrink_simd_arrays\n vec_info::vec_info (vec_info::vec_kind kind_in, vec_info_shared *shared_)\n   : kind (kind_in),\n     shared (shared_),\n-    stmt_vec_info_ro (false),\n-    target_cost_data (nullptr)\n+    stmt_vec_info_ro (false)\n {\n   stmt_vec_infos.create (50);\n }\n@@ -470,7 +469,6 @@ vec_info::~vec_info ()\n   for (slp_instance &instance : slp_instances)\n     vect_free_slp_instance (instance);\n \n-  delete target_cost_data;\n   free_stmt_vec_infos ();\n }\n "}, {"sha": "58c296d98a9694e8fe3b0ff35c62e43e9e99b045", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4725f62789f25b17967695203d7ee821221e2dd6/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=4725f62789f25b17967695203d7ee821221e2dd6", "patch": "@@ -408,9 +408,6 @@ class vec_info {\n      stmt in the chain.  */\n   auto_vec<stmt_vec_info> grouped_stores;\n \n-  /* Cost data used by the target cost model.  */\n-  class vector_costs *target_cost_data;\n-\n   /* The set of vector modes used in the vectorized region.  */\n   mode_set used_vector_modes;\n \n@@ -590,6 +587,9 @@ typedef class _loop_vec_info : public vec_info {\n   /* Condition under which this loop is analyzed and versioned.  */\n   tree num_iters_assumptions;\n \n+  /* The cost of the vector code.  */\n+  class vector_costs *vector_costs;\n+\n   /* Threshold of number of iterations below which vectorization will not be\n      performed. It is calculated from MIN_PROFITABLE_ITERS and\n      param_min_vect_loop_bound.  */\n@@ -843,7 +843,6 @@ typedef class _loop_vec_info : public vec_info {\n #define LOOP_VINFO_SLP_UNROLLING_FACTOR(L) (L)->slp_unrolling_factor\n #define LOOP_VINFO_REDUCTIONS(L)           (L)->reductions\n #define LOOP_VINFO_REDUCTION_CHAINS(L)     (L)->reduction_chains\n-#define LOOP_VINFO_TARGET_COST_DATA(L)     (L)->target_cost_data\n #define LOOP_VINFO_PEELING_FOR_GAPS(L)     (L)->peeling_for_gaps\n #define LOOP_VINFO_PEELING_FOR_NITER(L)    (L)->peeling_for_niter\n #define LOOP_VINFO_NO_DATA_DEPENDENCIES(L) (L)->no_data_dependencies"}]}