{"sha": "3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlMDdjZGVjOGM3OWJjZTUzZWE1YWViOGU2MDdkZjZlYjVjOGMyYw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-25T07:49:16Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-13T10:39:48Z"}, "message": "C-family, Objective-C [1/3] : Implement Wobjc-root-class [PR77404].\n\nThis warning catches the case that the user has left the\nsuperclass specification from a class interface.  Root\nclasses are, of course, permitted and an attribute is added\nto mark these so that the diagnostic is suppressed.\n\nThe warning and attribute spellings have been kept in sync\nwith the language reference implementation (clang).\n\nThe diagnostic location information present in the objective-c\ninterface and class definitions is relatively poor.  This patch\nadds a location for the class name to the interface and makes use\nof it in existing warnings.\n\nPart 1 is the changes to code and added tests.\n\nMany entries in the testsuite make use of root classes so\nthere are a large number of mechanical changes there adding\n\"-Wno-objc-root-class\" to the options.\n\nThe test changes are parts 2 (objective-c) and 3 (objective-c++)\nin the patch series.\n\ngcc/c-family/ChangeLog:\n\n\tPR objc/77404\n\t* c-attribs.c (handle_objc_root_class_attribute): New\n\t* c-objc.h (objc_start_class_interface): Add a location\n\tvalue for the position of the class name.\n\t* c.opt: Add Wobjc-root-class.\n\t* stub-objc.c (objc_start_class_interface): Add a location\n\tvalue for the position of the class name.\n\ngcc/c/ChangeLog:\n\n\tPR objc/77404\n\t* c-parser.c (c_parser_objc_class_definition): Pass the\n\tlocation of the class name to the interface declaration.\n\ngcc/cp/ChangeLog:\n\n\tPR objc/77404\n\t* parser.c (cp_parser_objc_class_interface): Pass the\n\tlocation of the class name to the interface declaration.\n\ngcc/objc/ChangeLog:\n\n\tPR objc/77404\n\t* objc-act.c (objc_start_class_interface): Accept the location\n\tof the class name, use it in existing diagnostic.\n\t(start_class): Accept obj_root_class type attributes.  Warn when\n\tthe interface for an implementation does not contain a super\n\tclass (unless the diagnostic is suppressed by the the command\n\tline flag or the objc_root_class type attribute).\n\ngcc/testsuite/ChangeLog:\n\n\tPR objc/77404\n\t* objc.dg/attributes/root-class-01.m: New test.\n\t* objc.dg/root-class-00.m: New test.\n\t* obj-c++.dg/attributes/root-class-01.mm: New test.\n\t* obj-c++.dg/root-class-00.mm: New test.\n\ngcc/ChangeLog:\n\n\tPR objc/77404\n\t* doc/extend.texi: Document the objc_root_class attribute.\n\t* doc/invoke.texi: Document -Wobjc-root-class.", "tree": {"sha": "989f0b35f1a61b36a0bfc388398ec51850bf1de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/989f0b35f1a61b36a0bfc388398ec51850bf1de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4852c3266ec0887316b9fbbb106b8540e3e948d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4852c3266ec0887316b9fbbb106b8540e3e948d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4852c3266ec0887316b9fbbb106b8540e3e948d6"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "24bcd70b26cb0c4afb453b8202c29dec046edb13", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -158,6 +158,7 @@ static tree handle_patchable_function_entry_attribute (tree *, tree, tree,\n \t\t\t\t\t\t       int, bool *);\n static tree handle_copy_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nsobject_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_objc_root_class_attribute (tree *, tree, tree, int, bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -513,6 +514,8 @@ const struct attribute_spec c_common_attribute_table[] =\n   /* Attributes used by Objective-C.  */\n   { \"NSObject\",\t\t      0, 0, true, false, false, false,\n \t\t\t      handle_nsobject_attribute, NULL },\n+  { \"objc_root_class\",\t      0, 0, true, false, false, false,\n+\t\t\t      handle_objc_root_class_attribute, NULL },\n   { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n@@ -5163,6 +5166,22 @@ handle_nsobject_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* Handle a \"objc_root_class\" attributes; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_objc_root_class_attribute (tree */*node*/, tree name, tree /*args*/,\n+\t\t\t\t  int /*flags*/, bool *no_add_attrs)\n+{\n+  /* This has no meaning outside Objective-C.  */\n+  if (!c_dialect_objc())\n+    warning (OPT_Wattributes, \"%qE is only applicable to Objective-C\"\n+\t     \" class interfaces, attribute ignored\", name);\n+\n+  *no_add_attrs = true;\n+  return NULL_TREE;\n+}\n+\n /* Attempt to partially validate a single attribute ATTR as if\n    it were to be applied to an entity OPER.  */\n "}, {"sha": "9414aecc668a7d9d537c92c2a6fe5ef23c63431d", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -124,7 +124,7 @@ extern tree objc_get_protocol_qualified_type (tree, tree);\n extern tree objc_get_class_reference (tree);\n extern tree objc_get_class_ivars (tree);\n extern bool objc_detect_field_duplicates (bool);\n-extern void objc_start_class_interface (tree, tree, tree, tree);\n+extern void objc_start_class_interface (tree, location_t, tree, tree, tree);\n extern void objc_start_category_interface (tree, tree, tree, tree);\n extern void objc_start_protocol (tree, tree, tree);\n extern void objc_continue_interface (void);"}, {"sha": "a0083636aed4375080526c47db7c8142ca37f5f0", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -1002,6 +1002,11 @@ Enum(cpp_normalize_level) String(id) Value(normalized_identifier_C)\n EnumValue\n Enum(cpp_normalize_level) String(nfc) Value(normalized_C)\n \n+Wobjc-root-class\n+ObjC ObjC++ Var(warn_objc_root_class) Warning Init(1)\n+Warn if a class interface has no superclass.  Root classes may use an attribute\n+to suppress this warning.\n+\n Wold-style-cast\n C++ ObjC++ Var(warn_old_style_cast) Warning\n Warn if a C-style cast is used in a program."}, {"sha": "26941aa2cb4cd8e881ea706b79f701f345f4b81e", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -137,6 +137,7 @@ objc_set_method_opt (bool ARG_UNUSED (optional))\n \n void\n objc_start_class_interface (tree ARG_UNUSED (name),\n+\t\t\t    location_t /*name_loc*/,\n \t\t\t    tree ARG_UNUSED (super),\n \t\t\t    tree ARG_UNUSED (protos),\n \t\t\t    tree ARG_UNUSED (attribs))"}, {"sha": "f4c4cf7bf8f9a1e56fd1133ec625dd8cff9bf606", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -10801,6 +10801,7 @@ c_parser_objc_class_definition (c_parser *parser, tree attributes)\n       return;\n     }\n   id1 = c_parser_peek_token (parser)->value;\n+  location_t loc1 = c_parser_peek_token (parser)->location;\n   c_parser_consume_token (parser);\n   if (c_parser_next_token_is (parser, CPP_OPEN_PAREN))\n     {\n@@ -10860,7 +10861,7 @@ c_parser_objc_class_definition (c_parser *parser, tree attributes)\n       tree proto = NULL_TREE;\n       if (c_parser_next_token_is (parser, CPP_LESS))\n \tproto = c_parser_objc_protocol_refs (parser);\n-      objc_start_class_interface (id1, superclass, proto, attributes);\n+      objc_start_class_interface (id1, loc1, superclass, proto, attributes);\n     }\n   else\n     objc_start_class_implementation (id1, superclass);"}, {"sha": "6b0447ea496b4659df0e517a5c41195385376144", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -33574,6 +33574,7 @@ cp_parser_objc_class_interface (cp_parser* parser, tree attributes)\n   bool is_class_extension;\n \n   cp_lexer_consume_token (parser->lexer);  /* Eat '@interface'.  */\n+  location_t nam_loc = cp_lexer_peek_token (parser->lexer)->location;\n   name = cp_parser_identifier (parser);\n   if (name == error_mark_node)\n     {\n@@ -33593,7 +33594,7 @@ cp_parser_objc_class_interface (cp_parser* parser, tree attributes)\n     objc_start_category_interface (name, categ, protos, attributes);\n   else\n     {\n-      objc_start_class_interface (name, super, protos, attributes);\n+      objc_start_class_interface (name, nam_loc, super, protos, attributes);\n       /* Handle instance variable declarations, if any.  */\n       cp_parser_objc_class_ivars (parser);\n       objc_continue_interface ();"}, {"sha": "c353eb432b961512500e1d0b7c9928b3cef342da", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -8518,6 +8518,12 @@ and caught in another, the class must have default visibility.\n Otherwise the two shared objects are unable to use the same\n typeinfo node and exception handling will break.\n \n+@item objc_root_class @r{(Objective-C and Objective-C++ only)}\n+@cindex @code{objc_root_class} type attribute\n+This attribute marks a class as being a root class, and thus allows\n+the compiler to elide any warnings about a missing superclass and to\n+make additional checks for mandatory methods as needed.\n+\n @end table\n \n To specify multiple attributes, separate them by commas within the"}, {"sha": "85f7969d87f86522c4eec1599453a8970c51e9f7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -276,7 +276,7 @@ Objective-C and Objective-C++ Dialects}.\n -fzero-link @gol\n -gen-decls @gol\n -Wassign-intercept  -Wno-property-assign-default @gol\n--Wno-protocol  -Wselector @gol\n+-Wno-protocol -Wobjc-root-class -Wselector @gol\n -Wstrict-selector-match @gol\n -Wundeclared-selector}\n \n@@ -4348,6 +4348,13 @@ from the superclass.  If you use the @option{-Wno-protocol} option, then\n methods inherited from the superclass are considered to be implemented,\n and no warning is issued for them.\n \n+@item -Wobjc-root-class @r{(Objective-C and Objective-C++ only)}\n+@opindex Wobjc-root-class\n+Warn if a class interface lacks a superclass. Most classes will inherit\n+from @code{NSObject} (or @code{Object}) for example.  When declaring\n+classes intended to be root classes, the warning can be suppressed by\n+marking their interfaces with @code{__attribute__((objc_root_class))}.\n+\n @item -Wselector @r{(Objective-C and Objective-C++ only)}\n @opindex Wselector\n @opindex Wno-selector"}, {"sha": "e4103860aae98b24745c7239d00b0124eebc7240", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -571,11 +571,11 @@ lookup_protocol_in_reflist (tree rproto_list, tree lproto)\n }\n \n void\n-objc_start_class_interface (tree klass, tree super_class,\n+objc_start_class_interface (tree klass, location_t name_loc, tree super_class,\n \t\t\t    tree protos, tree attributes)\n {\n   if (flag_objc1_only && attributes)\n-    error_at (input_location, \"class attributes are not available in Objective-C 1.0\");\n+    error_at (name_loc, \"class attributes are not available in Objective-C 1.0\");\n \n   objc_interface_context\n     = objc_ivar_context\n@@ -7014,6 +7014,12 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t  CLASS_SUPER_NAME (objc_implementation_context)\n \t    = CLASS_SUPER_NAME (implementation_template);\n \t}\n+\n+      if (!CLASS_SUPER_NAME (objc_implementation_context)\n+\t  && !lookup_attribute (\"objc_root_class\",\n+\t\t\t\tTYPE_ATTRIBUTES (implementation_template)))\n+\t  warning (OPT_Wobjc_root_class, \"class %qE defined without\"\n+\t\t      \" specifying a base class\", class_name);\n       break;\n \n     case CLASS_INTERFACE_TYPE:\n@@ -7044,6 +7050,8 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t\tTREE_DEPRECATED (klass) = 1;\n \t      else if (is_attribute_p  (\"objc_exception\", name))\n \t\tCLASS_HAS_EXCEPTION_ATTR (klass) = 1;\n+\t      else if (is_attribute_p  (\"objc_root_class\", name))\n+\t\t;\n \t      else if (is_attribute_p  (\"visibility\", name))\n \t\t;\n \t      else"}, {"sha": "84da94aa1ffe5238fbcbc889b96c9131fb81574a", "filename": "gcc/testsuite/obj-c++.dg/attributes/root-class-01.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Froot-class-01.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Froot-class-01.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Froot-class-01.mm?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -0,0 +1,11 @@\n+/* Test Wobjc-root-class warning is suppressed by the objc_root_class attr.\n+   Note that we don't issue a warning unless the TU contains an implementation\n+   for the class.  This should compile without warning.  */\n+/*  { dg-additional-options \"-fsyntax-only \" } */\n+\n+__attribute__((objc_root_class))\n+@interface ARootObject\n+@end\n+\n+@implementation ARootObject\n+@end"}, {"sha": "f951b0de8cc14abc67691568745fddec5011927e", "filename": "gcc/testsuite/obj-c++.dg/root-class-00.mm", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Froot-class-00.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Froot-class-00.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Froot-class-00.mm?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -0,0 +1,10 @@\n+/* Test Wobjc-root-class.\n+   Note that we don't issue a warning unless the TU contains an implementation\n+   for the class.  */\n+/*  { dg-additional-options \"-fsyntax-only \" } */\n+\n+@interface ARootObject\n+@end\n+\n+@implementation ARootObject /* { dg-warning {class 'ARootObject' defined without specifying a base class} } */\n+@end"}, {"sha": "84da94aa1ffe5238fbcbc889b96c9131fb81574a", "filename": "gcc/testsuite/objc.dg/attributes/root-class-01.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Froot-class-01.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Froot-class-01.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Froot-class-01.m?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -0,0 +1,11 @@\n+/* Test Wobjc-root-class warning is suppressed by the objc_root_class attr.\n+   Note that we don't issue a warning unless the TU contains an implementation\n+   for the class.  This should compile without warning.  */\n+/*  { dg-additional-options \"-fsyntax-only \" } */\n+\n+__attribute__((objc_root_class))\n+@interface ARootObject\n+@end\n+\n+@implementation ARootObject\n+@end"}, {"sha": "1f73f735761c4455a8eaabef0af2b8a61154b2be", "filename": "gcc/testsuite/objc.dg/root-class-00.m", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobjc.dg%2Froot-class-00.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c/gcc%2Ftestsuite%2Fobjc.dg%2Froot-class-00.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Froot-class-00.m?ref=3fe07cdec8c79bce53ea5aeb8e607df6eb5c8c2c", "patch": "@@ -0,0 +1,10 @@\n+/* Test Wobjc-root-class.\n+   Note that we don't issue a warning unless the TU contains an implementation\n+   for the class.  */\n+/*  { dg-additional-options \"-fsyntax-only \" } */\n+\n+@interface ARootObject\n+@end\n+\n+@implementation ARootObject\n+@end /* { dg-warning {class 'ARootObject' defined without specifying a base class} } */"}]}