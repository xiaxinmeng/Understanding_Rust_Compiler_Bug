{"sha": "4c6669c2c69920d414e0dd3933c265c5382a4da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2NjY5YzJjNjk5MjBkNDE0ZTBkZDM5MzNjMjY1YzUzODJhNGRhMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-09-12T16:02:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-09-12T16:02:31Z"}, "message": "re PR middle-end/4520 (cselib.c hash_rtx incorrectly hashes based on rtx address)\n\n\n\tPR middle-end/4520\n\tPR bootstrap/28784\n\t* cselib.c (cselib_hash_rtx): Avoid hashing on the address of labels\n\tand symbols.  Instead use the implementation from cse.c's hash_rtx.\n\nFrom-SVN: r116891", "tree": {"sha": "380b55458f139310bb54f4f1242f9da985b452e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/380b55458f139310bb54f4f1242f9da985b452e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c6669c2c69920d414e0dd3933c265c5382a4da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6669c2c69920d414e0dd3933c265c5382a4da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6669c2c69920d414e0dd3933c265c5382a4da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6669c2c69920d414e0dd3933c265c5382a4da3/comments", "author": null, "committer": null, "parents": [{"sha": "4b943588d131d6fa709b89903c920b726a85df82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b943588d131d6fa709b89903c920b726a85df82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b943588d131d6fa709b89903c920b726a85df82"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "0a0d31b8cf276f0f02bd30853affa9b6d89bcb07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6669c2c69920d414e0dd3933c265c5382a4da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6669c2c69920d414e0dd3933c265c5382a4da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c6669c2c69920d414e0dd3933c265c5382a4da3", "patch": "@@ -1,3 +1,10 @@\n+2006-09-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/4520\n+\tPR bootstrap/28784\n+\t* cselib.c (cselib_hash_rtx): Avoid hashing on the address of labels\n+\tand symbols.  Instead use the implementation from cse.c's hash_rtx.\n+\n 2006-09-12  Jan Hubicka  <jh@suse.cz>\n \n \tPR rtl-optimization/28071"}, {"sha": "4070da7c01f06b7f94895086eb5f8c8b18f11c14", "filename": "gcc/cselib.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6669c2c69920d414e0dd3933c265c5382a4da3/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6669c2c69920d414e0dd3933c265c5382a4da3/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=4c6669c2c69920d414e0dd3933c265c5382a4da3", "patch": "@@ -630,14 +630,28 @@ cselib_hash_rtx (rtx x, int create)\n \n       /* Assume there is only one rtx object for any given label.  */\n     case LABEL_REF:\n-      hash\n-\t+= ((unsigned) LABEL_REF << 7) + (unsigned long) XEXP (x, 0);\n+      /* We don't hash on the address of the CODE_LABEL to avoid bootstrap\n+\t differences and differences between each stage's debugging dumps.  */\n+      hash += (((unsigned int) LABEL_REF << 7)\n+\t       + CODE_LABEL_NUMBER (XEXP (x, 0)));\n       return hash ? hash : (unsigned int) LABEL_REF;\n \n     case SYMBOL_REF:\n-      hash\n-\t+= ((unsigned) SYMBOL_REF << 7) + (unsigned long) XSTR (x, 0);\n-      return hash ? hash : (unsigned int) SYMBOL_REF;\n+      {\n+\t/* Don't hash on the symbol's address to avoid bootstrap differences.\n+\t   Different hash values may cause expressions to be recorded in\n+\t   different orders and thus different registers to be used in the\n+\t   final assembler.  This also avoids differences in the dump files\n+\t   between various stages.  */\n+\tunsigned int h = 0;\n+\tconst unsigned char *p = (const unsigned char *) XSTR (x, 0);\n+\n+\twhile (*p)\n+\t  h += (h << 7) + *p++; /* ??? revisit */\n+\n+\thash += ((unsigned int) SYMBOL_REF << 7) + h;\n+\treturn hash ? hash : (unsigned int) SYMBOL_REF;\n+      }\n \n     case PRE_DEC:\n     case PRE_INC:"}]}