{"sha": "bb2e5da7ef7740269ae95533179de8d186ee04bc", "node_id": "C_kwDOANBUbNoAKGJiMmU1ZGE3ZWY3NzQwMjY5YWU5NTUzMzE3OWRlOGQxODZlZTA0YmM", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-11-30T05:13:37Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-12-08T13:51:28Z"}, "message": "rs6000: Update sign extension computation with sext_hwi\n\nThis patch just replaces the expression like:\n((value & 0xf..f) ^ 0x80..0) - 0x80..0 to better code(e.g. sext_hwi) for\nrs6000.cc, rs6000.md and predicates.md (files under rs6000/).\n\ngcc/ChangeLog:\n\n\t* config/rs6000/predicates.md: Use sext_hwi.\n\t* config/rs6000/rs6000.cc (num_insns_constant_gpr): Likewise.\n\t(darwin_rs6000_legitimate_lo_sum_const_p): Likewise.\n\t(mem_operand_gpr): Likewise.\n\t(mem_operand_ds_form): Likewise.\n\t(rs6000_legitimize_address): Likewise.\n\t(rs6000_emit_set_const): Likewise.\n\t(rs6000_emit_set_long_const): Likewise.\n\t(print_operand): Likewise.\n\t(constant_generates_xxspltiw): Remove unnecessary expressions.\n\t* config/rs6000/rs6000.md: Use sext_hwi.", "tree": {"sha": "70f917d483976bd8b9fead8ca9ebadfbc184de39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70f917d483976bd8b9fead8ca9ebadfbc184de39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb2e5da7ef7740269ae95533179de8d186ee04bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2e5da7ef7740269ae95533179de8d186ee04bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2e5da7ef7740269ae95533179de8d186ee04bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2e5da7ef7740269ae95533179de8d186ee04bc/comments", "author": null, "committer": null, "parents": [{"sha": "892e8c520be37d0a0f14e2ae375103c5303ed549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892e8c520be37d0a0f14e2ae375103c5303ed549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892e8c520be37d0a0f14e2ae375103c5303ed549"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "a1764018545e7e73b81dbc74fe7cb0fd014a1127", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=bb2e5da7ef7740269ae95533179de8d186ee04bc", "patch": "@@ -760,7 +760,7 @@\n     return 0;\n   elt = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (mode) - 1 : 0;\n   val = const_vector_elt_as_int (op, elt);\n-  val = ((val & 0xff) ^ 0x80) - 0x80;\n+  val = sext_hwi (val, 8);\n   return EASY_VECTOR_15_ADD_SELF (val);\n })\n "}, {"sha": "70a3ca801fe6bc9338b8191bdba5a274497f7524", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=bb2e5da7ef7740269ae95533179de8d186ee04bc", "patch": "@@ -6021,7 +6021,7 @@ num_insns_constant_gpr (HOST_WIDE_INT value)\n \n   else if (TARGET_POWERPC64)\n     {\n-      HOST_WIDE_INT low  = ((value & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+      HOST_WIDE_INT low = sext_hwi (value, 32);\n       HOST_WIDE_INT high = value >> 31;\n \n       if (high == 0 || high == -1)\n@@ -8456,7 +8456,7 @@ darwin_rs6000_legitimate_lo_sum_const_p (rtx x, machine_mode mode)\n     }\n \n   /* We only care if the access(es) would cause a change to the high part.  */\n-  offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n+  offset = sext_hwi (offset, 16);\n   return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n \n@@ -8522,7 +8522,7 @@ mem_operand_gpr (rtx op, machine_mode mode)\n   if (GET_CODE (addr) == LO_SUM)\n     /* For lo_sum addresses, we must allow any offset except one that\n        causes a wrap, so test only the low 16 bits.  */\n-    offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n+    offset = sext_hwi (offset, 16);\n \n   return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n@@ -8562,7 +8562,7 @@ mem_operand_ds_form (rtx op, machine_mode mode)\n   if (GET_CODE (addr) == LO_SUM)\n     /* For lo_sum addresses, we must allow any offset except one that\n        causes a wrap, so test only the low 16 bits.  */\n-    offset = ((offset & 0xffff) ^ 0x8000) - 0x8000;\n+    offset = sext_hwi (offset, 16);\n \n   return SIGNED_16BIT_OFFSET_EXTRA_P (offset, extra);\n }\n@@ -9136,7 +9136,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n     {\n       HOST_WIDE_INT high_int, low_int;\n       rtx sum;\n-      low_int = ((INTVAL (XEXP (x, 1)) & 0xffff) ^ 0x8000) - 0x8000;\n+      low_int = sext_hwi (INTVAL (XEXP (x, 1)), 16);\n       if (low_int >= 0x8000 - extra)\n \tlow_int = 0;\n       high_int = INTVAL (XEXP (x, 1)) - low_int;\n@@ -10203,7 +10203,7 @@ rs6000_emit_set_const (rtx dest, rtx source)\n \t  lo = operand_subword_force (dest, WORDS_BIG_ENDIAN != 0,\n \t\t\t\t      DImode);\n \t  emit_move_insn (hi, GEN_INT (c >> 32));\n-\t  c = ((c & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+\t  c = sext_hwi (c, 32);\n \t  emit_move_insn (lo, GEN_INT (c));\n \t}\n       else\n@@ -10242,15 +10242,15 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n \n   if ((ud4 == 0xffff && ud3 == 0xffff && ud2 == 0xffff && (ud1 & 0x8000))\n       || (ud4 == 0 && ud3 == 0 && ud2 == 0 && ! (ud1 & 0x8000)))\n-    emit_move_insn (dest, GEN_INT ((ud1 ^ 0x8000) - 0x8000));\n+    emit_move_insn (dest, GEN_INT (sext_hwi (ud1, 16)));\n \n   else if ((ud4 == 0xffff && ud3 == 0xffff && (ud2 & 0x8000))\n \t   || (ud4 == 0 && ud3 == 0 && ! (ud2 & 0x8000)))\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n       emit_move_insn (ud1 != 0 ? copy_rtx (temp) : dest,\n-\t\t      GEN_INT (((ud2 << 16) ^ 0x80000000) - 0x80000000));\n+\t\t      GEN_INT (sext_hwi (ud2 << 16, 32)));\n       if (ud1 != 0)\n \temit_move_insn (dest,\n \t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n@@ -10261,8 +10261,7 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n       gcc_assert (ud2 & 0x8000);\n-      emit_move_insn (copy_rtx (temp),\n-\t\t      GEN_INT (((ud2 << 16) ^ 0x80000000) - 0x80000000));\n+      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud2 << 16, 32)));\n       if (ud1 != 0)\n \temit_move_insn (copy_rtx (temp),\n \t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n@@ -10276,7 +10275,7 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n       HOST_WIDE_INT num = (ud2 << 16) | ud1;\n-      rs6000_emit_set_long_const (temp, (num ^ 0x80000000) - 0x80000000);\n+      rs6000_emit_set_long_const (temp, sext_hwi (num, 32));\n       rtx one = gen_rtx_AND (DImode, temp, GEN_INT (0xffffffff));\n       rtx two = gen_rtx_ASHIFT (DImode, temp, GEN_INT (32));\n       emit_move_insn (dest, gen_rtx_IOR (DImode, one, two));\n@@ -10286,8 +10285,7 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n-      emit_move_insn (copy_rtx (temp),\n-\t\t      GEN_INT (((ud3 << 16) ^ 0x80000000) - 0x80000000));\n+      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud3 << 16, 32)));\n       if (ud2 != 0)\n \temit_move_insn (copy_rtx (temp),\n \t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n@@ -10339,8 +10337,7 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n-      emit_move_insn (copy_rtx (temp),\n-\t\t      GEN_INT (((ud4 << 16) ^ 0x80000000) - 0x80000000));\n+      emit_move_insn (copy_rtx (temp), GEN_INT (sext_hwi (ud4 << 16, 32)));\n       if (ud3 != 0)\n \temit_move_insn (copy_rtx (temp),\n \t\t\tgen_rtx_IOR (DImode, copy_rtx (temp),\n@@ -14170,8 +14167,7 @@ print_operand (FILE *file, rtx x, int code)\n       /* If constant, low-order 16 bits of constant, signed.  Otherwise, write\n \t normally.  */\n       if (INT_P (x))\n-\tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t ((INTVAL (x) & 0xffff) ^ 0x8000) - 0x8000);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, sext_hwi (INTVAL (x), 16));\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -28722,14 +28718,12 @@ constant_generates_xxspltiw (vec_const_128bit_type *vsx_const)\n   /* See if we can use VSPLTISH or VSPLTISW.  */\n   if (vsx_const->all_half_words_same)\n     {\n-      unsigned short h_word = vsx_const->half_words[0];\n-      short sign_h_word = ((h_word & 0xffff) ^ 0x8000) - 0x8000;\n+      short sign_h_word = vsx_const->half_words[0];\n       if (EASY_VECTOR_15 (sign_h_word))\n \treturn 0;\n     }\n \n-  unsigned int word = vsx_const->words[0];\n-  int sign_word = ((word & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+  int sign_word = vsx_const->words[0];\n   if (EASY_VECTOR_15 (sign_word))\n     return 0;\n "}, {"sha": "4bd1dfd3da9b68036c37b0d9e76ff2d834d8a308", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2e5da7ef7740269ae95533179de8d186ee04bc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=bb2e5da7ef7740269ae95533179de8d186ee04bc", "patch": "@@ -1787,7 +1787,7 @@\n \t}\n \n       HOST_WIDE_INT val = INTVAL (operands[2]);\n-      HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n+      HOST_WIDE_INT low = sext_hwi (val, 16);\n       HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n \n       if (<MODE>mode == DImode && !satisfies_constraint_L (GEN_INT (rest)))\n@@ -1930,7 +1930,7 @@\n    (set (match_dup 0) (plus:GPR (match_dup 0) (match_dup 4)))]\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n-  HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n+  HOST_WIDE_INT low = sext_hwi (val, 16);\n   HOST_WIDE_INT rest = trunc_int_for_mode (val - low, <MODE>mode);\n \n   operands[4] = GEN_INT (low);\n@@ -8213,7 +8213,7 @@\n   operands[2] = operand_subword (operands[0], endian, 0, <MODE>mode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, <MODE>mode);\n   operands[4] = GEN_INT (value >> 32);\n-  operands[1] = GEN_INT (((value & 0xffffffff) ^ 0x80000000) - 0x80000000);\n+  operands[1] = GEN_INT (sext_hwi (value, 32));\n })\n \n (define_split\n@@ -9577,7 +9577,7 @@\n   operands[3] = operand_subword_force (operands[0], WORDS_BIG_ENDIAN != 0,\n \t\t\t\t       DImode);\n   operands[4] = GEN_INT (value >> 32);\n-  operands[1] = GEN_INT (((value & 0xffffffff) ^ 0x80000000) - 0x80000000);\n+  operands[1] = GEN_INT (sext_hwi (value, 32));\n })\n \n (define_split\n@@ -12425,7 +12425,7 @@\n \t\t\t\t\t      SImode,\n \t\t\t\t\t      operands[1], operands[2]);\n   HOST_WIDE_INT c = INTVAL (cnst);\n-  HOST_WIDE_INT sextc = ((c & 0xffff) ^ 0x8000) - 0x8000;\n+  HOST_WIDE_INT sextc = sext_hwi (c, 16);\n   HOST_WIDE_INT xorv = c ^ sextc;\n \n   operands[9] = GEN_INT (xorv);"}]}