{"sha": "46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhYjc0YjFmZDJlNTMzNDYyNmQyZDQ1NWExNDVmOWM1MDk2ZjBhMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-31T01:03:05Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-01-31T01:03:05Z"}, "message": "cp-demangle.c (cp_demangle_type): Do not protect with IN_LIBGCC2.\n\n2002-01-30  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* cp-demangle.c (cp_demangle_type):  Do not protect with IN_LIBGCC2.\n\t(cplus_demangle_v3):  Mimic __cxa_demangle and fall back on\n\tcp_demangle_type.\n\t* testsuite/demangle-expected:  New gnu-v3 test.\n\nFrom-SVN: r49353", "tree": {"sha": "60d36a08033d8bf647a0847b16a207cae5a85950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60d36a08033d8bf647a0847b16a207cae5a85950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/comments", "author": null, "committer": null, "parents": [{"sha": "6169e5fdd8376fbbe0f66de366354fcfaf78b8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6169e5fdd8376fbbe0f66de366354fcfaf78b8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6169e5fdd8376fbbe0f66de366354fcfaf78b8a7"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "e014b50a9ca91c052e889eef0f932d16999e35bb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "patch": "@@ -1,3 +1,10 @@\n+2002-01-30  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* cp-demangle.c (cp_demangle_type):  Do not protect with IN_LIBGCC2.\n+\t(cplus_demangle_v3):  Mimic __cxa_demangle and fall back on\n+\tcp_demangle_type.\n+\t* testsuite/demangle-expected:  New gnu-v3 test.\n+\n 2002-01-22  Momchil Velikov  <velco@fadata.bg>\n \n \t* configure.in (variable detection): Use arrays of unspecified"}, {"sha": "a412e8878514b2653489e547bd028f8baca15a6d", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "patch": "@@ -938,10 +938,8 @@ static status_t demangle_discriminator\n   PARAMS ((demangling_t, int));\n static status_t cp_demangle\n   PARAMS ((const char *, dyn_string_t, int));\n-#ifdef IN_LIBGCC2\n static status_t cp_demangle_type\n   PARAMS ((const char*, dyn_string_t));\n-#endif\n \n /* When passed to demangle_bare_function_type, indicates that the\n    function's return type is not encoded before its parameter types.  */\n@@ -3533,14 +3531,13 @@ cp_demangle (name, result, style)\n    dyn_string_t.  On success, returns STATUS_OK.  On failiure, returns\n    an error message, and the contents of RESULT are unchanged.  */\n \n-#ifdef IN_LIBGCC2\n static status_t\n cp_demangle_type (type_name, result)\n      const char* type_name;\n      dyn_string_t result;\n {\n   status_t status;\n-  demangling_t dm = demangling_new (type_name);\n+  demangling_t dm = demangling_new (type_name, 0);\n   \n   if (dm == NULL)\n     return STATUS_ALLOCATION_FAILED;\n@@ -3571,6 +3568,7 @@ cp_demangle_type (type_name, result)\n   return status;\n }\n \n+#ifdef IN_LIBGCC2\n extern char *__cxa_demangle PARAMS ((const char *, char *, size_t *, int *));\n \n /* ia64 ABI-mandated entry point in the C++ runtime library for performing\n@@ -3693,14 +3691,15 @@ cplus_demangle_v3 (mangled)\n   dyn_string_t demangled;\n   status_t status;\n \n-  /* If this isn't a mangled name, don't pretend to demangle it.  */\n-  if (strncmp (mangled, \"_Z\", 2) != 0)\n-    return NULL;\n-\n   /* Create a dyn_string to hold the demangled name.  */\n   demangled = dyn_string_new (0);\n   /* Attempt the demangling.  */\n-  status = cp_demangle ((char *) mangled, demangled, 0);\n+  if (mangled[0] == '_' && mangled[1] == 'Z')\n+    /* Appears to be a function or variable name.  */\n+    status = cp_demangle (mangled, demangled, 0);\n+  else\n+    /* Try to demangle it as the name of a type.  */\n+    status = cp_demangle_type (mangled, demangled);\n \n   if (STATUS_NO_ERROR (status))\n     /* Demangling succeeded.  */"}, {"sha": "e1becc3db6097378878c90613bb838ced7813785", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46ab74b1fd2e5334626d2d455a145f9c5096f0a0/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=46ab74b1fd2e5334626d2d455a145f9c5096f0a0", "patch": "@@ -2590,3 +2590,7 @@ Prim.i(int, boolean, byte, double, float, char, java.lang.String, short, long)\n --format=hp\n _Utf58_0_1__1_2147483647__2147483648\n _Utf58_0_1__1_2147483647__2147483648\n+#\n+--format=gnu-v3\n+St9bad_alloc\n+std::bad_alloc"}]}