{"sha": "1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "node_id": "C_kwDOANBUbNoAKDFmMDM4ZTg0NWJiZGVhZTlkZGRmMTgxMGZiM2U2YzlhZDFiNzlmMTM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-01-04T07:41:52Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-16T14:44:54Z"}, "message": "ada: Further optimize interface objects initialized with function calls\n\nThis further optimizes the usual case of (class-wide) interface objects that\nare initialized with calls to functions whose result type is the type of the\nobjects (this is not necessary as any result type implementing the interface\nwould do) by avoiding a back-and-forth displacement of the objects' address.\n\nThis exposed a latent issue whereby the displacement was missing in the case\nof a simple return statement whose expression is a call to a function whose\nresult type is a specific tagged type that needs finalization.\n\nAnd, in order to avoid pessimizing the expanded code, this in turn required\navoiding to create temporaries for allocators by calling Remove_Side_Effects\nup front, in the common cases when they are not necessary.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Do not generate a back-\n\tand-forth displacement of the object's address when using a renaming\n\tfor an interface object with an expression of the same type.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Do not remove the side\n\teffects of the expression up front for the simple allocators. Do not\n\tcall the Adjust primitive if the expression is a function call.\n\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Do not expand the call\n\tunnecessarily for a special return object.\n\t(Expand_Simple_Function_Return): Restore the displacement of the\n\treturn object's address in the case where the expression is the call\n\tto a function whose result type is a type that needs finalization.\n\t* exp_util.adb (Expand_Subtype_From_Expr): Do not remove the side\n\teffects of the expression before calling Make_Subtype_From_Expr.\n\t(Make_CW_Equivalent_Type): If the expression has the tag of its type\n\tand this type has a uniform size, use 'Object_Size of this type in\n\tlieu of 'Size of the expression to compute the expression's size.", "tree": {"sha": "49e2de4aba4f20330ea90eabdf7a3dd13661d466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49e2de4aba4f20330ea90eabdf7a3dd13661d466"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59cd0db822e325868128281a81ee356a6914f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59cd0db822e325868128281a81ee356a6914f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59cd0db822e325868128281a81ee356a6914f52"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "bbb53fc6e49f4ee829c8bd287e7d62d28dc45a98", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "patch": "@@ -7589,6 +7589,13 @@ package body Exp_Ch3 is\n                       Typ     => Base_Typ);\n                end if;\n \n+            --  Renaming an expression of the object's type is immediate\n+\n+            elsif Rewrite_As_Renaming\n+              and then Base_Type (Etype (Expr_Q)) = Base_Type (Typ)\n+            then\n+               null;\n+\n             elsif Tagged_Type_Expansion then\n                declare\n                   Iface : constant Entity_Id := Root_Type (Typ);"}, {"sha": "31823eaeca7e0b8d394abd8a6b4baecc61a8d6e0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "patch": "@@ -698,11 +698,14 @@ package body Exp_Ch4 is\n          --  recursion and inappropriate call to Initialize.\n \n          --  We don't want to remove side effects when the expression must be\n-         --  built in place. In the case of a build-in-place function call,\n-         --  that could lead to a duplication of the call, which was already\n-         --  substituted for the allocator.\n+         --  built in place and we don't need it when there is no storage pool\n+         --  or this is a return/secondary stack allocation.\n \n-         if not Aggr_In_Place then\n+         if not Aggr_In_Place\n+           and then Present (Storage_Pool (N))\n+           and then not Is_RTE (Storage_Pool (N), RE_RS_Pool)\n+           and then not Is_RTE (Storage_Pool (N), RE_SS_Pool)\n+         then\n             Remove_Side_Effects (Exp);\n          end if;\n \n@@ -747,7 +750,7 @@ package body Exp_Ch4 is\n \n          --  Processing for allocators returning non-interface types\n \n-         if not Is_Interface (Directly_Designated_Type (PtrT)) then\n+         if not Is_Interface (DesigT) then\n             if Aggr_In_Place then\n                Temp_Decl :=\n                  Make_Object_Declaration (Loc,\n@@ -960,8 +963,9 @@ package body Exp_Ch4 is\n \n          if Needs_Finalization (DesigT)\n            and then Needs_Finalization (T)\n-           and then not Aggr_In_Place\n            and then not Is_Limited_View (T)\n+           and then not Aggr_In_Place\n+           and then Nkind (Exp) /= N_Function_Call\n            and then not For_Special_Return_Object (N)\n          then\n             --  An unchecked conversion is needed in the classwide case because\n@@ -993,7 +997,7 @@ package body Exp_Ch4 is\n          --  component containing the secondary dispatch table of the interface\n          --  type.\n \n-         if Is_Interface (Directly_Designated_Type (PtrT)) then\n+         if Is_Interface (DesigT) then\n             Displace_Allocator_Pointer (N);\n          end if;\n "}, {"sha": "7abf25e3859a8b6992f21fa0bf3f63284002df7b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "patch": "@@ -5133,14 +5133,11 @@ package body Exp_Ch6 is\n \n       --  Another optimization: if the returned value is used to initialize an\n       --  object, then no need to copy/readjust/finalize, we can initialize it\n-      --  in place. However, if the call returns on the secondary stack or this\n-      --  is a special return object, then we need the expansion because we'll\n-      --  be renaming the temporary as the (permanent) object.\n+      --  in place. However, if the call returns on the secondary stack, then\n+      --  we need the expansion because we'll be renaming the temporary as the\n+      --  (permanent) object.\n \n-      if Nkind (Par) = N_Object_Declaration\n-        and then not Use_Sec_Stack\n-        and then not Is_Special_Return_Object (Defining_Entity (Par))\n-      then\n+      if Nkind (Par) = N_Object_Declaration and then not Use_Sec_Stack then\n          return;\n       end if;\n \n@@ -6745,7 +6742,7 @@ package body Exp_Ch6 is\n             null;\n \n          --  Optimize the case where the result is a function call that also\n-         --  returns on the secondary stack. In this case the result is already\n+         --  returns on the secondary stack; in this case the result is already\n          --  on the secondary stack and no further processing is required.\n \n          elsif Exp_Is_Function_Call\n@@ -6781,13 +6778,14 @@ package body Exp_Ch6 is\n          --  gigi is not able to properly allocate class-wide types.\n \n          --  But optimize the case where the result is a function call that\n-         --  also needs finalization. In this case the result can directly be\n+         --  also needs finalization; in this case the result can directly be\n          --  allocated on the secondary stack and no further processing is\n-         --  required.\n+         --  required, unless the returned object is an interface.\n \n          elsif CW_Or_Needs_Finalization (Utyp)\n-           and then not (Exp_Is_Function_Call\n-                          and then Needs_Finalization (Exp_Typ))\n+           and then (Is_Interface (R_Type)\n+                      or else not (Exp_Is_Function_Call\n+                                    and then Needs_Finalization (Exp_Typ)))\n          then\n             declare\n                Acc_Typ : constant Entity_Id := Make_Temporary (Loc, 'A');"}, {"sha": "f86b93819ac1e7eac57cc0cc4c9876b047ab6f6f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1f038e845bbdeae9dddf1810fb3e6c9ad1b79f13", "patch": "@@ -5820,7 +5820,6 @@ package body Exp_Util is\n          --  discriminants.\n \n          else\n-            Remove_Side_Effects (Exp);\n             Rewrite (Subtype_Indic,\n               Make_Subtype_From_Expr (Exp, Underlying_Record_View (Unc_Type)));\n          end if;\n@@ -5885,7 +5884,6 @@ package body Exp_Util is\n          end if;\n \n       else\n-         Remove_Side_Effects (Exp);\n          Rewrite (Subtype_Indic,\n            Make_Subtype_From_Expr (Exp, Unc_Type, Related_Id));\n       end if;\n@@ -9496,12 +9494,13 @@ package body Exp_Util is\n       Root_Utyp   : constant Entity_Id  := Underlying_Type (Root_Typ);\n       List_Def    : constant List_Id    := Empty_List;\n       Comp_List   : constant List_Id    := New_List;\n+\n       Equiv_Type  : Entity_Id;\n       Range_Type  : Entity_Id;\n       Str_Type    : Entity_Id;\n       Constr_Root : Entity_Id;\n+      Size_Attr   : Node_Id;\n       Size_Expr   : Node_Id;\n-      Size_Pref   : Node_Id;\n \n       function Has_Tag_Of_Type (Exp : Node_Id) return Boolean;\n       --  Return True if expression Exp of a tagged type is known to statically\n@@ -9597,9 +9596,26 @@ package body Exp_Util is\n       --  the _Size primitive operation.\n \n       if Has_Tag_Of_Type (E) then\n-         Size_Pref := Duplicate_Subexpr_No_Checks (E);\n+         if not Has_Discriminants (Etype (E))\n+           or else Is_Constrained (Etype (E))\n+         then\n+            Size_Attr :=\n+              Make_Attribute_Reference (Loc,\n+                Prefix => New_Occurrence_Of (Etype (E), Loc),\n+                Attribute_Name => Name_Object_Size);\n+\n+         else\n+            Size_Attr :=\n+              Make_Attribute_Reference (Loc,\n+                Prefix => Duplicate_Subexpr_No_Checks (E),\n+                Attribute_Name => Name_Size);\n+         end if;\n+\n       else\n-         Size_Pref := OK_Convert_To (T, Duplicate_Subexpr_No_Checks (E));\n+         Size_Attr :=\n+           Make_Attribute_Reference (Loc,\n+             Prefix => OK_Convert_To (T, Duplicate_Subexpr_No_Checks (E)),\n+             Attribute_Name => Name_Size);\n       end if;\n \n       if not Is_Interface (Root_Typ) then\n@@ -9610,10 +9626,7 @@ package body Exp_Util is\n \n          Size_Expr :=\n            Make_Op_Subtract (Loc,\n-             Left_Opnd =>\n-               Make_Attribute_Reference (Loc,\n-                 Prefix => Size_Pref,\n-                 Attribute_Name => Name_Size),\n+             Left_Opnd => Size_Attr,\n              Right_Opnd =>\n                Make_Attribute_Reference (Loc,\n                  Prefix => New_Occurrence_Of (Constr_Root, Loc),\n@@ -9625,10 +9638,7 @@ package body Exp_Util is\n \n          Size_Expr :=\n            Make_Op_Subtract (Loc,\n-             Left_Opnd =>\n-               Make_Attribute_Reference (Loc,\n-                 Prefix => Size_Pref,\n-                 Attribute_Name => Name_Size),\n+             Left_Opnd => Size_Attr,\n              Right_Opnd =>\n                Make_Attribute_Reference (Loc,\n                  Prefix => New_Occurrence_Of (RTE (RE_Tag), Loc),"}]}