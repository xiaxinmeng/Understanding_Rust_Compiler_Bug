{"sha": "b59cbd503473a38ddc09ed69f36ff534eaa88d11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5Y2JkNTAzNDczYTM4ZGRjMDllZDY5ZjM2ZmY1MzRlYWE4OGQxMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-02-07T09:19:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-02-07T09:19:27Z"}, "message": "re PR libstdc++/51296 (Several 30_threads tests FAIL on Tru64 UNIX)\n\nlibgcc/\n\n\tPR libstdc++/51296\n\tPR libstdc++/51906\n\t* gthr-posix.h: Allow static initializer macros to be disabled.\n\t(__gthrw_pthread_cond_init): Define weak reference unconditionally.\n\nlibstdc++-v3/\n\n\tPR libstdc++/51296\n\t* include/std/mutex (__mutex_base::~__mutex_base): Declare noexcept.\n\t* src/c++11/condition_variable.cc (condition_variable): Use macro for\n\tinitializer function.\n\n\tPR libstdc++/51906\n\t* config/os/bsd/darwin/os_defines.h: Disable static initializer for\n\trecursive mutexes.\n\nFrom-SVN: r183955", "tree": {"sha": "b3f505dfbd64bd876c4195d271a4aaff77b5422a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f505dfbd64bd876c4195d271a4aaff77b5422a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59cbd503473a38ddc09ed69f36ff534eaa88d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59cbd503473a38ddc09ed69f36ff534eaa88d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59cbd503473a38ddc09ed69f36ff534eaa88d11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59cbd503473a38ddc09ed69f36ff534eaa88d11/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38cbc63a76d7502c58c82402d6227ba78f5e2dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38cbc63a76d7502c58c82402d6227ba78f5e2dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38cbc63a76d7502c58c82402d6227ba78f5e2dc0"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "4a974401d6852a02e9a9058318140780a4540083", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -1,3 +1,10 @@\n+2012-02-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51296\n+\tPR libstdc++/51906\n+\t* gthr-posix.h: Allow static initializer macros to be disabled.\n+\t(__gthrw_pthread_cond_init): Define weak reference unconditionally.\n+\n 2012-02-05  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config.host (mips64*-*-linux*, mipsisa64*-*-linux*, mips*-*-linux*):"}, {"sha": "a935e9291847a5fe6f9ab97a3eb39b6ac87b4fe7", "filename": "libgcc/gthr-posix.h", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libgcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libgcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-posix.h?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -74,6 +74,20 @@ typedef struct timespec __gthread_time_t;\n #define __GTHREAD_COND_INIT PTHREAD_COND_INITIALIZER\n #define __GTHREAD_TIME_INIT {0,0}\n \n+#ifdef _GTHREAD_USE_MUTEX_INIT_FUNC\n+# undef __GTHREAD_MUTEX_INIT\n+# define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function\n+#endif\n+#ifdef _GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC\n+# undef __GTHREAD_RECURSIVE_MUTEX_INIT\n+# undef __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION\n+# define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function\n+#endif\n+#ifdef _GTHREAD_USE_COND_INIT_FUNC\n+# undef __GTHREAD_COND_INIT\n+# define __GTHREAD_COND_INIT_FUNCTION __gthread_cond_init_function\n+#endif\n+\n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n # ifndef __gthrw_pragma\n #  define __gthrw_pragma(pragma)\n@@ -116,6 +130,7 @@ __gthrw3(pthread_mutex_unlock)\n __gthrw3(pthread_mutex_init)\n __gthrw3(pthread_mutex_destroy)\n \n+__gthrw3(pthread_cond_init)\n __gthrw3(pthread_cond_broadcast)\n __gthrw3(pthread_cond_signal)\n __gthrw3(pthread_cond_wait)\n@@ -145,6 +160,7 @@ __gthrw(pthread_mutex_unlock)\n __gthrw(pthread_mutex_init)\n __gthrw(pthread_mutex_destroy)\n \n+__gthrw(pthread_cond_init)\n __gthrw(pthread_cond_broadcast)\n __gthrw(pthread_cond_signal)\n __gthrw(pthread_cond_wait)\n@@ -162,10 +178,8 @@ __gthrw(pthread_mutexattr_destroy)\n #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)\n /* Objective-C.  */\n #if defined(__osf__) && defined(_PTHREAD_USE_MANGLED_NAMES_)\n-__gthrw3(pthread_cond_init)\n __gthrw3(pthread_exit)\n #else\n-__gthrw(pthread_cond_init)\n __gthrw(pthread_exit)\n #endif /* __osf__ && _PTHREAD_USE_MANGLED_NAMES_ */\n #ifdef _POSIX_PRIORITY_SCHEDULING\n@@ -730,6 +744,15 @@ __gthread_setspecific (__gthread_key_t __key, const void *__ptr)\n   return __gthrw_(pthread_setspecific) (__key, __ptr);\n }\n \n+#ifdef _GTHREAD_USE_MUTEX_INIT_FUNC\n+static inline void\n+__gthread_mutex_init_function (__gthread_mutex_t *__mutex)\n+{\n+  if (__gthread_active_p ())\n+    __gthrw_(pthread_mutex_init) (__mutex, NULL);\n+}\n+#endif\n+\n static inline int\n __gthread_mutex_destroy (__gthread_mutex_t *__mutex)\n {\n@@ -778,7 +801,8 @@ __gthread_mutex_unlock (__gthread_mutex_t *__mutex)\n     return 0;\n }\n \n-#ifndef PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP\n+#if !defined( PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP) \\\n+  || defined(_GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC)\n static inline int\n __gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)\n {\n@@ -828,6 +852,15 @@ __gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)\n   return __gthread_mutex_unlock (__mutex);\n }\n \n+#ifdef _GTHREAD_USE_COND_INIT_FUNC\n+static inline void\n+__gthread_cond_init_function (__gthread_cond_t *__cond)\n+{\n+  if (__gthread_active_p ())\n+    __gthrw_(pthread_cond_init) (__cond, NULL);\n+}\n+#endif\n+\n static inline int\n __gthread_cond_broadcast (__gthread_cond_t *__cond)\n {"}, {"sha": "b708ae0d82d184b0caa35c3d8acbb47ae1ee4531", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -1,3 +1,14 @@\n+2012-02-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51296\n+\t* include/std/mutex (__mutex_base::~__mutex_base): Declare noexcept.\n+\t* src/c++11/condition_variable.cc (condition_variable): Use macro for\n+\tinitializer function.\n+\n+\tPR libstdc++/51906\n+\t* config/os/bsd/darwin/os_defines.h: Disable static initializer for\n+\trecursive mutexes.\n+\n 2012-02-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/52128"}, {"sha": "421478d82d46e25a46b48ea9a781d7affbab1a7b", "filename": "libstdc++-v3/config/os/bsd/darwin/os_defines.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fdarwin%2Fos_defines.h?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -39,4 +39,7 @@\n // -flat_namespace to work around the way that it doesn't.\n #define _GLIBCXX_WEAK_DEFINITION __attribute__ ((weak))\n \n+// Static initializer macro is buggy in darwin, see libstdc++/51906\n+#define _GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC\n+\n #endif"}, {"sha": "a7ebace2c889c17218a90780a84629638c89f4b5", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -71,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n     }\n \n-    ~__mutex_base() { __gthread_mutex_destroy(&_M_mutex); }\n+    ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }\n #endif\n \n     __mutex_base(const __mutex_base&) = delete;"}, {"sha": "9cd07637ecd30438cd9566461e8c5ba262a9e207", "filename": "libstdc++-v3/src/c++11/condition_variable.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59cbd503473a38ddc09ed69f36ff534eaa88d11/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcondition_variable.cc?ref=b59cbd503473a38ddc09ed69f36ff534eaa88d11", "patch": "@@ -36,10 +36,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n   condition_variable::condition_variable() noexcept\n   {\n-    int __e = __gthread_cond_init(&_M_cond, 0);\n-\n-    if (__e)\n-      __throw_system_error(__e);\n+    __GTHREAD_COND_INIT_FUNCTION(&_M_cond);\n   }\n \n   condition_variable::~condition_variable() noexcept"}]}