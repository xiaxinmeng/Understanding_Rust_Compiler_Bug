{"sha": "1137001cd9b3751964b44ab80861cf7a91aa197b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzNzAwMWNkOWIzNzUxOTY0YjQ0YWI4MDg2MWNmN2E5MWFhMTk3Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-25T01:14:27Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-25T01:14:27Z"}, "message": "re PR c++/69736 (\"error: too few arguments to function\" in c++14 but not c++11)\n\nFix PR c++/69736\n\ngcc/cp/ChangeLog:\n\n\tPR c++/69736\n\t* cp-tree.h (REF_PARENTHESIZED_P): Adjust documentation.\n\t(maybe_undo_parenthesized_ref): Declare.\n\t* semantics.c (maybe_undo_parenthesized_ref): Split out from\n\tcheck_return_expr.\n\t(finish_call_expr): Use it.\n\t* typeck.c (check_return_expr): Use it.\n\t* pt.c (tsubst_copy_and_build) [INDIRECT_REF]: Retain the\n\tREF_PARENTHESIZED_P flag.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/69736\n\t* g++.dg/cpp1y/paren2.C: New test.\n\nFrom-SVN: r233691", "tree": {"sha": "f621bb008d6f17792de60637f9e2e5e36d9e9ead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f621bb008d6f17792de60637f9e2e5e36d9e9ead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1137001cd9b3751964b44ab80861cf7a91aa197b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1137001cd9b3751964b44ab80861cf7a91aa197b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1137001cd9b3751964b44ab80861cf7a91aa197b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1137001cd9b3751964b44ab80861cf7a91aa197b/comments", "author": null, "committer": null, "parents": [{"sha": "a8b233b7f204138b2629db2b818c807df4a1ef52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b233b7f204138b2629db2b818c807df4a1ef52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b233b7f204138b2629db2b818c807df4a1ef52"}], "stats": {"total": 95, "additions": 83, "deletions": 12}, "files": [{"sha": "3ae4daf861253c21db44297e81fcb93228d50e6c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -1,3 +1,15 @@\n+2016-02-25  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69736\n+\t* cp-tree.h (REF_PARENTHESIZED_P): Adjust documentation.\n+\t(maybe_undo_parenthesized_ref): Declare.\n+\t* semantics.c (maybe_undo_parenthesized_ref): Split out from\n+\tcheck_return_expr.\n+\t(finish_call_expr): Use it.\n+\t* typeck.c (check_return_expr): Use it.\n+\t* pt.c (tsubst_copy_and_build) [INDIRECT_REF]: Retain the\n+\tREF_PARENTHESIZED_P flag.\n+\n 2016-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69922"}, {"sha": "88c63672b8abbeefaf2946079addadadac79e749", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -3393,7 +3393,7 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n   TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n \n /* Indicates whether a COMPONENT_REF has been parenthesized, or an\n-   INDIRECT_REF comes from parenthesizing a VAR_DECL.  Currently only set\n+   INDIRECT_REF comes from parenthesizing a _DECL.  Currently only set\n    some of the time in C++14 mode.  */\n \n #define REF_PARENTHESIZED_P(NODE) \\\n@@ -6361,6 +6361,7 @@ extern tree finish_label_stmt\t\t\t(tree);\n extern void finish_label_decl\t\t\t(tree);\n extern cp_expr finish_parenthesized_expr\t(cp_expr);\n extern tree force_paren_expr\t\t\t(tree);\n+extern tree maybe_undo_parenthesized_ref\t(tree);\n extern tree finish_non_static_data_member       (tree, tree, tree);\n extern tree begin_stmt_expr\t\t\t(void);\n extern tree finish_stmt_expr_expr\t\t(tree, tree);"}, {"sha": "cd3eb6757cf9c906ef03f739a9fefe41e1483f81", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -15961,6 +15961,10 @@ tsubst_copy_and_build (tree t,\n \telse\n \t  r = build_x_indirect_ref (input_location, r, RO_UNARY_STAR,\n \t\t\t\t    complain|decltype_flag);\n+\n+\tif (TREE_CODE (r) == INDIRECT_REF)\n+\t  REF_PARENTHESIZED_P (r) = REF_PARENTHESIZED_P (t);\n+\n \tRETURN (r);\n       }\n "}, {"sha": "fad233af6c7c1e76052a8696964d31c0a006af6a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -1673,6 +1673,30 @@ force_paren_expr (tree expr)\n   return expr;\n }\n \n+/* If T is an id-expression obfuscated by force_paren_expr, undo the\n+   obfuscation and return the underlying id-expression.  Otherwise\n+   return T.  */\n+\n+tree\n+maybe_undo_parenthesized_ref (tree t)\n+{\n+  if (cxx_dialect >= cxx14\n+      && INDIRECT_REF_P (t)\n+      && REF_PARENTHESIZED_P (t))\n+    {\n+      t = TREE_OPERAND (t, 0);\n+      while (TREE_CODE (t) == NON_LVALUE_EXPR\n+\t     || TREE_CODE (t) == NOP_EXPR)\n+\tt = TREE_OPERAND (t, 0);\n+\n+      gcc_assert (TREE_CODE (t) == ADDR_EXPR\n+\t\t  || TREE_CODE (t) == STATIC_CAST_EXPR);\n+      t = TREE_OPERAND (t, 0);\n+    }\n+\n+  return t;\n+}\n+\n /* Finish a parenthesized expression EXPR.  */\n \n cp_expr\n@@ -2256,6 +2280,10 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n \n   gcc_assert (!TYPE_P (fn));\n \n+  /* If FN may be a FUNCTION_DECL obfuscated by force_paren_expr, undo\n+     it so that we can tell this is a call to a known function.  */\n+  fn = maybe_undo_parenthesized_ref (fn);\n+\n   orig_fn = fn;\n \n   if (processing_template_decl)"}, {"sha": "51458798c5ba2a17ca80d7c44d156db880803533", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -8917,17 +8917,7 @@ check_return_expr (tree retval, bool *no_warning)\n \n       /* If we had an id-expression obfuscated by force_paren_expr, we need\n \t to undo it so we can try to treat it as an rvalue below.  */\n-      if (cxx_dialect >= cxx14\n-\t  && INDIRECT_REF_P (retval)\n-\t  && REF_PARENTHESIZED_P (retval))\n-\t{\n-\t  retval = TREE_OPERAND (retval, 0);\n-\t  while (TREE_CODE (retval) == NON_LVALUE_EXPR\n-\t\t || TREE_CODE (retval) == NOP_EXPR)\n-\t    retval = TREE_OPERAND (retval, 0);\n-\t  gcc_assert (TREE_CODE (retval) == ADDR_EXPR);\n-\t  retval = TREE_OPERAND (retval, 0);\n-\t}\n+      retval = maybe_undo_parenthesized_ref (retval);\n \n       /* Under C++11 [12.8/32 class.copy], a returned lvalue is sometimes\n \t treated as an rvalue for the purposes of overload resolution to"}, {"sha": "55838071564fc959704e5c38b320af134f41b7aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -1,3 +1,8 @@\n+2016-02-25  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69736\n+\t* g++.dg/cpp1y/paren2.C: New test.\n+\n 2016-02-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/51147"}, {"sha": "b4a721f115043d34385d49fe41030e6a2925eff0", "filename": "gcc/testsuite/g++.dg/cpp1y/paren2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1137001cd9b3751964b44ab80861cf7a91aa197b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen2.C?ref=1137001cd9b3751964b44ab80861cf7a91aa197b", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/69736\n+// { dg-do compile { target c++14 } }\n+\n+void fn1(bool = true)\n+{\n+  (fn1)();\n+}\n+\n+template <typename T>\n+void fn2(T a = true)\n+{\n+  (fn1)();\n+}\n+\n+void foo ()\n+{\n+  (fn2<bool>)();\n+}\n+\n+struct X\n+{\n+  static void fn3(bool = true)\n+  {\n+    (X::fn3)();\n+  }\n+\n+  void fn4(bool = true)\n+  {\n+    (X::fn4)();\n+  }\n+};"}]}