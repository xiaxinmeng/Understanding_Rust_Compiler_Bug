{"sha": "69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "node_id": "C_kwDOANBUbNoAKDY5ZGQ1Y2EzNDg0ZWU1MTRjMTMyM2RmYmNmNGVmNDM1OGNlYTU3YmI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-18T09:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-06T20:34:51Z"}, "message": "c++: add color to function decl printing\n\nIn reading C++ diagnostics, it's often hard to find the name of the function\nin the middle of the template header, return type, parameters, and template\narguments.  So let's colorize it, and maybe the template argument bindings\nwhile we're at it.\n\nI've somewhat arbitrarily chosen bold green for the function name, and\nnon-bold magenta for the template arguments.\n\nA side-effect of this is that when this happens in a quote (i.e. %qD), the\nrest of the quote after the function name is no longer bold.  I think that's\nacceptable; returning to the bold would require maintaining a colorize stack\ninstead of the on/off controls we have now.\n\ngcc/cp/ChangeLog:\n\n\t* error.cc (decl_to_string): Add show_color parameter.\n\t(subst_to_string): Likewise.\n\t(cp_printer): Pass it.\n\t(type_to_string): Set pp_show_color.\n\t(dump_function_name): Use \"fnname\" color.\n\t(dump_template_bindings): Use \"targs\" color.\n\t(struct colorize_guard): New.\n\t(reinit_cxx_pp): Clear pp_show_color.\n\ngcc/ChangeLog:\n\n\t* diagnostic-color.cc: Add fnname and targs color entries.\n\t* doc/invoke.texi: Document them.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/diagnostic/function-color1.C: New test.", "tree": {"sha": "977459ac84579eac53c159e7d22f2e957bcf793a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977459ac84579eac53c159e7d22f2e957bcf793a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e053a63b153039a7905901806a4f4a3154988b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4e053a63b153039a7905901806a4f4a3154988b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4e053a63b153039a7905901806a4f4a3154988b"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "250e012c008a31132802333e89a6ce849eff9796", "filename": "gcc/cp/error.cc", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fcp%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fcp%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.cc?ref=69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"stringpool.h\"\n #include \"tree-diagnostic.h\"\n+#include \"diagnostic-color.h\"\n #include \"langhooks-def.h\"\n #include \"intl.h\"\n #include \"cxx-pretty-print.h\"\n@@ -56,7 +57,7 @@ static cxx_pretty_printer * const cxx_pp = &actual_pretty_printer;\n static const char *args_to_string (tree, int);\n static const char *code_to_string (enum tree_code);\n static const char *cv_to_string (tree, int);\n-static const char *decl_to_string (tree, int);\n+static const char *decl_to_string (tree, int, bool);\n static const char *fndecl_to_string (tree, int);\n static const char *op_to_string\t(bool, enum tree_code);\n static const char *parm_to_string (int);\n@@ -390,6 +391,7 @@ dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n       else\n \t{\n \t  pp_cxx_whitespace (pp);\n+\t  pp_string (pp, colorize_start (pp_show_color (pp), \"targs\"));\n \t  pp_cxx_left_bracket (pp);\n \t  pp->translate_string (\"with\");\n \t  pp_cxx_whitespace (pp);\n@@ -400,7 +402,10 @@ dump_template_bindings (cxx_pretty_printer *pp, tree parms, tree args,\n     ~prepost_semicolon ()\n     {\n       if (need_semicolon)\n-\tpp_cxx_right_bracket (pp);\n+\t{\n+\t  pp_cxx_right_bracket (pp);\n+\t  pp_string (pp, colorize_stop (pp_show_color (pp)));\n+\t}\n     }\n   } semicolon_or_introducer = {pp, false};\n \n@@ -1170,6 +1175,22 @@ dump_simple_decl (cxx_pretty_printer *pp, tree t, tree type, int flags)\n     dump_type_suffix (pp, type, flags);\n }\n \n+class colorize_guard\n+{\n+  bool colorize;\n+  cxx_pretty_printer *pp;\n+public:\n+  colorize_guard (bool _colorize, cxx_pretty_printer *pp, const char *name)\n+    : colorize (_colorize && pp_show_color (pp)), pp (pp)\n+  {\n+    pp_string (pp, colorize_start (colorize, name));\n+  }\n+  ~colorize_guard ()\n+  {\n+    pp_string (pp, colorize_stop (colorize));\n+  }\n+};\n+\n /* Print an IDENTIFIER_NODE that is the name of a declaration.  */\n \n static void\n@@ -1946,6 +1967,13 @@ dump_exception_spec (cxx_pretty_printer *pp, tree t, int flags)\n static void\n dump_function_name (cxx_pretty_printer *pp, tree t, int flags)\n {\n+  /* Only colorize when we're printing something before the name; in\n+     particular, not when printing a CALL_EXPR.  */\n+  bool colorize = flags & (TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE\n+\t\t\t   | TFF_TEMPLATE_HEADER);\n+\n+  colorize_guard g (colorize, pp, \"fnname\");\n+\n   tree name = DECL_NAME (t);\n \n   /* We can get here with a decl that was synthesized by language-\n@@ -3088,6 +3116,7 @@ reinit_cxx_pp (void)\n   cxx_pp->padding = pp_none;\n   pp_indentation (cxx_pp) = 0;\n   pp_needs_newline (cxx_pp) = false;\n+  pp_show_color (cxx_pp) = false;\n   cxx_pp->enclosing_scope = current_function_decl;\n }\n \n@@ -3234,7 +3263,7 @@ location_of (tree t)\n    function.  */\n \n static const char *\n-decl_to_string (tree decl, int verbose)\n+decl_to_string (tree decl, int verbose, bool show_color)\n {\n   int flags = 0;\n \n@@ -3248,6 +3277,7 @@ decl_to_string (tree decl, int verbose)\n   flags |= TFF_TEMPLATE_HEADER;\n \n   reinit_cxx_pp ();\n+  pp_show_color (cxx_pp) = show_color;\n   dump_decl (cxx_pp, decl, flags);\n   return pp_ggc_formatted_text (cxx_pp);\n }\n@@ -3347,6 +3377,7 @@ type_to_string (tree typ, int verbose, bool postprocessed, bool *quote,\n   flags |= TFF_TEMPLATE_HEADER;\n \n   reinit_cxx_pp ();\n+  pp_show_color (cxx_pp) = show_color;\n \n   if (postprocessed && quote && *quote)\n     pp_begin_quote (cxx_pp, show_color);\n@@ -3441,7 +3472,7 @@ args_to_string (tree p, int verbose)\n    arguments.  */\n \n static const char *\n-subst_to_string (tree p)\n+subst_to_string (tree p, bool show_color)\n {\n   tree decl = TREE_PURPOSE (p);\n   tree targs = TREE_VALUE (p);\n@@ -3453,6 +3484,7 @@ subst_to_string (tree p)\n     return \"\";\n \n   reinit_cxx_pp ();\n+  pp_show_color (cxx_pp) = show_color;\n   dump_template_decl (cxx_pp, TREE_PURPOSE (p), flags);\n   dump_substitution (cxx_pp, NULL, tparms, targs, /*flags=*/0);\n   return pp_ggc_formatted_text (cxx_pp);\n@@ -4420,7 +4452,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t\tbreak;\n \t      }\n \t  }\n-\tresult = decl_to_string (temp, verbose);\n+\tresult = decl_to_string (temp, verbose, pp_show_color (pp));\n       }\n       break;\n     case 'E': result = expr_to_string (next_tree);\t\tbreak;\n@@ -4437,7 +4469,7 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'O': result = op_to_string (false, next_tcode);\tbreak;\n     case 'P': result = parm_to_string (next_int);\t\tbreak;\n     case 'Q': result = op_to_string (true, next_tcode);\t\tbreak;\n-    case 'S': result = subst_to_string (next_tree);\t\tbreak;\n+    case 'S': result = subst_to_string (next_tree, pp_show_color (pp)); break;\n     case 'T':\n       {\n \tresult = type_to_string (next_tree, verbose, false, quoted,"}, {"sha": "95047d78c2e6356f17cb7a6dbdfd019b9cd0bf7d", "filename": "gcc/diagnostic-color.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fdiagnostic-color.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fdiagnostic-color.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-color.cc?ref=69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "patch": "@@ -91,6 +91,8 @@ static struct color_cap color_dict[] =\n   { \"locus\", SGR_SEQ (COLOR_BOLD), 5, false },\n   { \"quote\", SGR_SEQ (COLOR_BOLD), 5, false },\n   { \"path\", SGR_SEQ (COLOR_BOLD COLOR_SEPARATOR COLOR_FG_CYAN), 4, false },\n+  { \"fnname\", SGR_SEQ (COLOR_BOLD COLOR_SEPARATOR COLOR_FG_GREEN), 6, false },\n+  { \"targs\", SGR_SEQ (COLOR_FG_MAGENTA), 5, false },\n   { \"fixit-insert\", SGR_SEQ (COLOR_FG_GREEN), 12, false },\n   { \"fixit-delete\", SGR_SEQ (COLOR_FG_RED), 12, false },\n   { \"diff-filename\", SGR_SEQ (COLOR_BOLD), 13, false },"}, {"sha": "7a35d9613a40f94b0e0ab7566622f834c3d2f709", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "patch": "@@ -4845,7 +4845,7 @@ The default @env{GCC_COLORS} is\n error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\\\n quote=01:path=01;36:fixit-insert=32:fixit-delete=31:\\\n diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\\\n-type-diff=01;32\n+type-diff=01;32:fnname=01;32:targs=35\n @end smallexample\n @noindent\n where @samp{01;31} is bold red, @samp{01;35} is bold magenta,\n@@ -4890,6 +4890,14 @@ SGR substring for location information, @samp{file:line} or\n @vindex quote GCC_COLORS @r{capability}\n SGR substring for information printed within quotes.\n \n+@item fnname=\n+@vindex fnname GCC_COLORS @r{capability}\n+SGR substring for names of C++ functions.\n+\n+@item targs=\n+@vindex targs GCC_COLORS @r{capability}\n+SGR substring for C++ function template parameter bindings.\n+\n @item fixit-insert=\n @vindex fixit-insert GCC_COLORS @r{capability}\n SGR substring for fix-it hints suggesting text to"}, {"sha": "32d9e966bdbd8ce1582f3c2fa41c73a32fd01c12", "filename": "gcc/testsuite/g++.dg/diagnostic/function-color1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunction-color1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69dd5ca3484ee514c1323dfbcf4ef4358cea57bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunction-color1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ffunction-color1.C?ref=69dd5ca3484ee514c1323dfbcf4ef4358cea57bb", "patch": "@@ -0,0 +1,21 @@\n+// Verify colorization of printing of function declarations.\n+// Use dg-*-multiline-output to avoid regexp interpretation.\n+\n+// { dg-options \"-fdiagnostics-color=always\" }\n+\n+template <class T> void f(short t);\n+template <class T> void f(long t);\n+\n+int main()\n+{\n+  f<int>(42);\n+  /* { dg-begin-multiline-output \"\" }\n+call of overloaded '\u001b[01m\u001b[Kf<int>(int)\u001b[m\u001b[K' is ambiguous\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+candidate: '\u001b[01m\u001b[Kvoid\u001b[01;32m\u001b[K f\u001b[m\u001b[K(short int) \u001b[35m\u001b[K[with T = int]\u001b[m\u001b[K\u001b[m\u001b[K'\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+// Discard the remaining colorized output that confuses dejagnu.\n+// { dg-prune-output diagnostic/function-color1.C }"}]}