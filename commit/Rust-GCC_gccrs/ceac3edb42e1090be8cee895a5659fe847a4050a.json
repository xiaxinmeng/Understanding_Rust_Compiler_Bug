{"sha": "ceac3edb42e1090be8cee895a5659fe847a4050a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhYzNlZGI0MmUxMDkwYmU4Y2VlODk1YTU2NTlmZTg0N2E0MDUwYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-06-29T09:51:07Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-06-29T09:51:07Z"}, "message": "sparc: Remove register storage class in sparc.c\n\nThe switch to C++17 broke SPARC bootstrap:\n\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:8887:34: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 8887 | epilogue_renumber (register rtx *where, int test)\n      |                                  ^~~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c: In function 'int epilogue_renumber(rtx_def**, int)':\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:8889:24: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 8889 |   register const char *fmt;\n      |                        ^~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:8890:16: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 8890 |   register int i;\n      |                ^\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:8891:26: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 8891 |   register enum rtx_code code;\n      |                          ^~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:8948:17: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 8948 |    register int j;\n      |                 ^\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c: In function 'void sparc_print_operand_address(std::FILE*, machine_mode, rtx)':\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9671:16: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9671 |   register rtx base, index = 0;\n      |                ^~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9671:22: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9671 |   register rtx base, index = 0;\n      |                      ^~~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9673:16: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9673 |   register rtx addr = x;\n      |                ^~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c: At global scope:\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9807:32: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9807 | sparc_type_code (register tree type)\n      |                                ^~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c: In function 'long unsigned int sparc_type_code(tree)':\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9809:26: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9809 |   register unsigned long qualifiers = 0;\n      |                          ^~~~~~~~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:9810:21: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n 9810 |   register unsigned shift;\n      |                     ^~~~~\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c: In function 'int set_extends(rtx_insn*)':\n/vol/gcc/src/hg/master/local/gcc/config/sparc/sparc.c:10306:16: error: ISO C++17 does not allow 'register' storage class specifier [-Werror=register]\n10306 |   register rtx pat = PATTERN (insn);\n      |                ^~~\n\nFixed by removing the register keyword.  Bootstrapped on\nsparc-sun-solaris2.11.\n\n\t* config/sparc/sparc.c (epilogue_renumber): Remove register.\n\t(sparc_print_operand_address): Likewise.\n\t(sparc_type_code): Likewise.\n\t(set_extends): Likewise.", "tree": {"sha": "f8b72375fa22ee2d03566e2a6250633b8e0790c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b72375fa22ee2d03566e2a6250633b8e0790c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceac3edb42e1090be8cee895a5659fe847a4050a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceac3edb42e1090be8cee895a5659fe847a4050a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceac3edb42e1090be8cee895a5659fe847a4050a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceac3edb42e1090be8cee895a5659fe847a4050a/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4494fcbc9bc887de7e428386a5dee3bc21622b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4494fcbc9bc887de7e428386a5dee3bc21622b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4494fcbc9bc887de7e428386a5dee3bc21622b6c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "2780b4243b51514c71f813b8835892407c7301dd", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceac3edb42e1090be8cee895a5659fe847a4050a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceac3edb42e1090be8cee895a5659fe847a4050a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ceac3edb42e1090be8cee895a5659fe847a4050a", "patch": "@@ -8884,11 +8884,11 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n  */\n \n static int\n-epilogue_renumber (register rtx *where, int test)\n+epilogue_renumber (rtx *where, int test)\n {\n-  register const char *fmt;\n-  register int i;\n-  register enum rtx_code code;\n+  const char *fmt;\n+  int i;\n+  enum rtx_code code;\n \n   if (*where == 0)\n     return 0;\n@@ -8945,7 +8945,7 @@ epilogue_renumber (register rtx *where, int test)\n     {\n       if (fmt[i] == 'E')\n \t{\n-\t  register int j;\n+\t  int j;\n \t  for (j = XVECLEN (*where, i) - 1; j >= 0; j--)\n \t    if (epilogue_renumber (&(XVECEXP (*where, i, j)), test))\n \t      return 1;\n@@ -9668,9 +9668,9 @@ sparc_print_operand (FILE *file, rtx x, int code)\n static void\n sparc_print_operand_address (FILE *file, machine_mode /*mode*/, rtx x)\n {\n-  register rtx base, index = 0;\n+  rtx base, index = 0;\n   int offset = 0;\n-  register rtx addr = x;\n+  rtx addr = x;\n \n   if (REG_P (addr))\n     fputs (reg_names[REGNO (addr)], file);\n@@ -9804,10 +9804,10 @@ sparc_assemble_integer (rtx x, unsigned int size, int aligned_p)\n #endif\n \n unsigned long\n-sparc_type_code (register tree type)\n+sparc_type_code (tree type)\n {\n-  register unsigned long qualifiers = 0;\n-  register unsigned shift;\n+  unsigned long qualifiers = 0;\n+  unsigned shift;\n \n   /* Only the first 30 bits of the qualifier are valid.  We must refrain from\n      setting more, since some assemblers will give an error for this.  Also,\n@@ -10303,7 +10303,7 @@ sparc_branch_cost (bool speed_p, bool predictable_p)\n static int\n set_extends (rtx_insn *insn)\n {\n-  register rtx pat = PATTERN (insn);\n+  rtx pat = PATTERN (insn);\n \n   switch (GET_CODE (SET_SRC (pat)))\n     {"}]}