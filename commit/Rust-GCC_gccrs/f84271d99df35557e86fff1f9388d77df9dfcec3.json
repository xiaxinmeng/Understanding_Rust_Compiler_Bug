{"sha": "f84271d99df35557e86fff1f9388d77df9dfcec3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0MjcxZDk5ZGYzNTU1N2U4NmZmZjFmOTM4OGQ3N2RmOWRmY2VjMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-09-05T17:43:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-05T17:43:51Z"}, "message": "v850: New directory for v850 port.\n\n        * v850: New directory for v850 port.\n        * v850/lib1funcs.asm: New file.\n        * t-v850, v850.c, v850.h, v850.md, xm-v850.h: New files.\n        * ginclude/va-v850.h: New file.\n        * varargs.h, stdarg.h: Include va-mn10200.h.\n        * configure.in (mn10200-*-*): New target.\n        * Makefile.in (USER_H): Add va-mn10200.h.\n\nFrom-SVN: r15104", "tree": {"sha": "ece88107a5f321dcd578f8a6f8ba6c1218b6d565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece88107a5f321dcd578f8a6f8ba6c1218b6d565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84271d99df35557e86fff1f9388d77df9dfcec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84271d99df35557e86fff1f9388d77df9dfcec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84271d99df35557e86fff1f9388d77df9dfcec3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84271d99df35557e86fff1f9388d77df9dfcec3/comments", "author": null, "committer": null, "parents": [{"sha": "ae180d84fc7bb97b09fb67a1e478288d748e41fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae180d84fc7bb97b09fb67a1e478288d748e41fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae180d84fc7bb97b09fb67a1e478288d748e41fb"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "c151b8cbda9a94a910c173d5e617dc8343f0d031", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -1,3 +1,16 @@\n+Fri Sep  5 10:08:44 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* v850: New directory for v850 port.\n+\t* v850/lib1funcs.asm: New file.\n+\t* t-v850, v850.c, v850.h, v850.md, xm-v850.h: New files.\n+\t* ginclude/va-v850.h: New file.\n+\t* ginclude/varargs.h, ginclude/stdarg.h: Include va-mn10200.h.\n+\t* configure.in (mn10200-*-*): New target.\n+\t* configure: Rebuilt.\n+\t* config.sub: Handle v850-elf.\n+\t* Makefile.in (USER_H): Add va-mn10200.h. \n+\t* invoke.texi: Document v850 stuff.\n+\n Fri Sep  5 09:37:50 1997  Jim Wilson  (wilson@cygnus.com)\n \n \t* m68k/m68k.h (MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Add"}, {"sha": "9f70aa4a565072544a068137d977deae44122e88", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -126,6 +126,7 @@ USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/stddef.h \\\n     $(srcdir)/ginclude/va-pyr.h $(srcdir)/ginclude/va-sparc.h \\\n     $(srcdir)/ginclude/va-clipper.h $(srcdir)/ginclude/va-spur.h \\\n     $(srcdir)/ginclude/va-m32r.h $(srcdir)/ginclude/va-sh.h \\\n+    $(srcdir)/ginclude/va-v850.h \\\n     $(srcdir)/ginclude/iso646.h $(srcdir)/ginclude/va-ppc.h \\\n     $(srcdir)/ginclude/proto.h $(EXTRA_HEADERS) \\\n     $(LANG_EXTRA_HEADERS)"}, {"sha": "b6e8aed34d05c82ebb89fe302a71157a890532c9", "filename": "gcc/config.sub", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfig.sub", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfig.sub", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.sub?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -155,7 +155,7 @@ case $basic_machine in\n \t\t| alpha | alphaev5 | alphaev56 | we32k | ns16k | clipper \\\n \t\t| i370 | sh | powerpc | powerpcle | 1750a | dsp16xx | pdp11 \\\n \t\t| mips64 | mipsel | mips64el | mips64orion | mips64orionel \\\n-\t\t| sparc | sparclet | sparclite | sparc64)\n+\t\t| sparc | sparclet | sparclite | sparc64 | v850)\n \t\tbasic_machine=$basic_machine-unknown\n \t\t;;\n \t# We use `pc' rather than `unknown'"}, {"sha": "0999828ba842a2eeac0486b2348acbe5699cda2b", "filename": "gcc/configure", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -3906,6 +3906,16 @@ for machine in $build $host $target; do\n #\t\tcpu_type=gmicro\n #\t\tuse_collect2=yes\n #\t\t;;\n+\tv850-*-*)\n+\t\tcpu_type=v850\n+\t\ttm_file=\"v850/v850.h\"\n+\t\txm_file=\"v850/xm-v850.h\"\n+\t\tif [ x$stabs = xyes ]\n+\t\tthen\n+\t\t\ttm_file=\"${tm_file} dbx.h\"\n+\t\tfi\n+\t\tuse_collect2=no\n+\t\t;;\n \tvax-*-bsd*)\t\t\t# vaxen running BSD\n \t\tuse_collect2=yes\n \t\tfloat_format=vax"}, {"sha": "bcae8380be675ed57259c3352f291b3760c351f1", "filename": "gcc/configure.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -2434,6 +2434,16 @@ for machine in $build $host $target; do\n #\t\tcpu_type=gmicro\n #\t\tuse_collect2=yes\n #\t\t;;\n+\tv850-*-*)\n+\t\tcpu_type=v850\n+\t\ttm_file=\"v850/v850.h\"\n+\t\txm_file=\"v850/xm-v850.h\"\n+\t\tif [[ x$stabs = xyes ]]\n+\t\tthen\n+\t\t\ttm_file=\"${tm_file} dbx.h\"\n+\t\tfi\n+\t\tuse_collect2=no\n+\t\t;;\n \tvax-*-bsd*)\t\t\t# vaxen running BSD\n \t\tuse_collect2=yes\n \t\tfloat_format=vax"}, {"sha": "c497199d735579b45cd7e49865bd2b9a66ae84c9", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -53,6 +53,9 @@\n #ifdef __mn10200__\n #include \"va-mn10200.h\"\n #else\n+#ifdef __v850__\n+#include \"va-v850.h\"\n+#else\n \n /* Define __gnuc_va_list.  */\n \n@@ -109,6 +112,7 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n \n #endif /* _STDARG_H */\n \n+#endif /* not v850 */\n #endif /* not mn10200 */\n #endif /* not mn10300 */\n #endif /* not sh */"}, {"sha": "3fd812ab228e57c2ab7cb147c1da3bc0f3fab57b", "filename": "gcc/ginclude/va-v850.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fva-v850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fva-v850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-v850.h?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -0,0 +1,37 @@\n+/* CYGNUS LOCAL v850/law (entire file ) */\n+\n+/* Define __gnuc_va_list. */\n+\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+typedef void *__gnuc_va_list;\n+#endif /* not __GNUC_VA_LIST */\n+\n+/* If this is for internal libc use, don't define anything but\n+   __gnuc_va_list.  */\n+#if defined (_STDARG_H) || defined (_VARARGS_H)\n+\n+#ifdef _STDARG_H\n+#define va_start(AP, LASTARG)\t\t\t\t\t\t\\\n+  (AP = ((__gnuc_va_list) __builtin_next_arg (LASTARG)))\n+#else\n+#define __va_ellipsis ...\n+#define va_alist __builtin_va_alist\n+#define va_dcl int __builtin_va_alist; __va_ellipsis\n+#define va_start(AP) AP=(char *) &__builtin_va_alist\n+#endif\n+\n+/* Now stuff common to both varargs & stdarg implementations.  */\n+#define __va_rounded_size(TYPE)\t\t\t\t\t\t\\\n+  (((sizeof (TYPE) + sizeof (int) - 1) / sizeof (int)) * sizeof (int))\n+#undef va_end\n+void va_end (__gnuc_va_list);\n+#define va_end(AP) ((void)0)\n+#define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n+ (sizeof (TYPE) > 8\t\t\t\t\t\t\t\\\n+  ? (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (char *)),\\\n+    **((TYPE **) (void *) ((char *) (AP) - __va_rounded_size (char *))))\\\n+  : (AP = (__gnuc_va_list) ((char *) (AP) + __va_rounded_size (TYPE)),\t\\\n+    *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE)))))\n+#endif\n+/* END CYGNUS LOCAL */"}, {"sha": "dbe97354abadb2f8f8a0dd9aa1589d584779467a", "filename": "gcc/ginclude/varargs.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fvarargs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Fginclude%2Fvarargs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fvarargs.h?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -51,6 +51,9 @@\n #ifdef __mn10200__\n #include \"va-mn10200.h\"\n #else\n+#ifdef __v850__\n+#include \"va-v850.h\"\n+#else\n \n #ifdef __NeXT__\n \n@@ -126,6 +129,7 @@ typedef void *__gnuc_va_list;\n /* Copy __gnuc_va_list into another variable of this type.  */\n #define __va_copy(dest, src) (dest) = (src)\n \n+#endif /* not v850 */\n #endif /* not mn10200 */\n #endif /* not mn10300 */\n #endif /* not sh */"}, {"sha": "30aacfac6af32a5d0475da82e9737ab863193142", "filename": "gcc/invoke.texi", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84271d99df35557e86fff1f9388d77df9dfcec3/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=f84271d99df35557e86fff1f9388d77df9dfcec3", "patch": "@@ -344,6 +344,12 @@ in the following sections.\n -Qy  -Qn  -YP,@var{paths}  -Ym,@var{dir}\n @end smallexample\n \n+@emph{V850 Options}\n+-mlong-calls -mno-long-calls -mep -mno-ep\n+-mprolog-function -mno-prolog-function -mspace\n+-mtda=@var{n} -msda=@var{n} -mzda=@var{n}\n+@end smallexample\n+\n @item Code Generation Options\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n @smallexample\n@@ -2766,6 +2772,7 @@ that macro, which enables you to change the defaults.\n * H8/300 Options::\n * SH Options::\n * System V Options::\n+* V850 Options::\n @end menu\n \n @node M680x0 Options\n@@ -4920,6 +4927,53 @@ The assembler uses this option.\n @c the generic assembler that comes with Solaris takes just -Ym.\n @end table\n \n+@node V850 Options\n+@subsection V850 Options\n+@cindex V850 Options\n+\n+These @samp{-m} options are defined for V850 implementations:\n+\n+@table @code\n+@item -mlong-calls\n+@itemx -mno-long-calls\n+Treat all calls as being far away (near).  If calls are assumed to be\n+far away, the compiler will always load the functions address up into a\n+register, and call indirect through the pointer.\n+\n+@item -mno-ep\n+@item -mep\n+Do not optimize (do optimize) basic blocks that use the same index\n+pointer 4 or more times to copy pointer into the @code{ep} register, and\n+use the shorter @code{sld} and @code{sst} instructions.  The @samp{-mep}\n+option is on by default if you optimize.\n+\n+@item -mno-prolog-function\n+@itemx -mprolog-function\n+Do not use (do use) external functions to save and restore registers at\n+the prolog and epilog of a function.  The external functions are slower,\n+but use less code space if more than one function saves the same number\n+of registers.  The @samp{-mprolog-function} option is on by default if\n+you optimize.\n+\n+@item -mspace\n+Try to make the code as small as possible.  At present, this just turns\n+on the @samp{-mep} and @samp{-mprolog-function} options.\n+\n+@item -mtda=@var{n}\n+Put static or global variables whose size is @var{n} bytes or less into\n+the tiny data area that register @code{ep} points to.  The tiny data\n+area can hold up to 256 bytes in total (128 bytes for byte references).\n+\n+@item -msda=@var{n}\n+Put static or global variables whose size is @var{n} bytes or less into\n+the small data area that register @code{gp} points to.  The small data\n+area can hold up to 64 kilobytes.\n+\n+@item -mzda=@var{n}\n+Put static or global variables whose size is @var{n} bytes or less into\n+the first 32 kilobytes of memory.\n+@end table\n+\n @node Code Gen Options\n @section Options for Code Generation Conventions\n @cindex code generation conventions"}]}