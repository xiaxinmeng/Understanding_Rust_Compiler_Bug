{"sha": "cfe75a22d22fdb066ce364081cca93ba34eae75b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlNzVhMjJkMjJmZGIwNjZjZTM2NDA4MWNjYTkzYmEzNGVhZTc1Yg==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2017-04-07T19:35:44Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2017-04-07T19:35:44Z"}, "message": "rs6000.c (vec_load_pendulum): Rename...\n\n\t* rs6000/rs6000.c (vec_load_pendulum): Rename...\n\t(vec_pairing): ...to this.\n\t(power9_sched_reorder2): Rewrite code for pairing vector/vecload insns.\n\t(rs6000_sched_init): Adjust for name change.\n\t(struct rs6000_sched_context): Likewise.\n\t(rs6000_init_sched_context): Likewise.\n\t(rs6000_set_sched_context): Likewise.\n\nFrom-SVN: r246776", "tree": {"sha": "54f6f531eef3e189cfa38da37ffb4a8df200a8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f6f531eef3e189cfa38da37ffb4a8df200a8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfe75a22d22fdb066ce364081cca93ba34eae75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe75a22d22fdb066ce364081cca93ba34eae75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe75a22d22fdb066ce364081cca93ba34eae75b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe75a22d22fdb066ce364081cca93ba34eae75b/comments", "author": null, "committer": null, "parents": [{"sha": "c98b00166a0e47834e30c30766e9dd9e93fe882d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98b00166a0e47834e30c30766e9dd9e93fe882d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98b00166a0e47834e30c30766e9dd9e93fe882d"}], "stats": {"total": 239, "additions": 90, "deletions": 149}, "files": [{"sha": "99d78b459a90cb5910a6f3e28618b98474da6f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe75a22d22fdb066ce364081cca93ba34eae75b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe75a22d22fdb066ce364081cca93ba34eae75b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfe75a22d22fdb066ce364081cca93ba34eae75b", "patch": "@@ -1,3 +1,13 @@\n+2017-04-07  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* rs6000/rs6000.c (vec_load_pendulum): Rename...\n+\t(vec_pairing): ...to this.\n+\t(power9_sched_reorder2): Rewrite code for pairing vector/vecload insns.\n+\t(rs6000_sched_init): Adjust for name change.\n+\t(struct rs6000_sched_context): Likewise.\n+\t(rs6000_init_sched_context): Likewise.\n+\t(rs6000_set_sched_context): Likewise.\n+\n 2017-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/80322"}, {"sha": "b3a3a7ec6e9fd4c17bd11971ccf5b7ef8462b622", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 80, "deletions": 149, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe75a22d22fdb066ce364081cca93ba34eae75b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe75a22d22fdb066ce364081cca93ba34eae75b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cfe75a22d22fdb066ce364081cca93ba34eae75b", "patch": "@@ -32862,7 +32862,7 @@ static int load_store_pendulum;\n static int divide_cnt;\n /* The following variable helps pair and alternate vector and vector load\n    insns during scheduling.  */\n-static int vec_load_pendulum;\n+static int vec_pairing;\n \n \n /* Power4 load update and store update instructions are cracked into a\n@@ -33821,7 +33821,7 @@ power9_sched_reorder2 (rtx_insn **ready, int lastpos)\n   int pos;\n   int i;\n   rtx_insn *tmp;\n-  enum attr_type type;\n+  enum attr_type type, type2;\n \n   type = get_attr_type (last_scheduled_insn);\n \n@@ -33854,183 +33854,114 @@ power9_sched_reorder2 (rtx_insn **ready, int lastpos)\n       /* Last insn was the 2nd divide or not a divide, reset the counter.  */\n       divide_cnt = 0;\n \n-      /* Power9 can execute 2 vector operations and 2 vector loads in a single\n-\t cycle.  So try to pair up and alternate groups of vector and vector\n-\t load instructions.\n-\n-\t To aid this formation, a counter is maintained to keep track of\n-\t vec/vecload insns issued.  The value of vec_load_pendulum maintains\n-\t the current state with the following values:\n-\n-\t     0  : Initial state, no vec/vecload group has been started.\n-\n-\t     -1 : 1 vector load has been issued and another has been found on\n-\t\t  the ready list and moved to the end.\n-\n-\t     -2 : 2 vector loads have been issued and a vector operation has\n-\t\t  been found and moved to the end of the ready list.\n-\n-\t     -3 : 2 vector loads and a vector insn have been issued and a\n-\t\t  vector operation has been found and moved to the end of the\n-\t\t  ready list.\n+      /* The best dispatch throughput for vector and vector load insns can be\n+\t achieved by interleaving a vector and vector load such that they'll\n+\t dispatch to the same superslice. If this pairing cannot be achieved\n+\t then it is best to pair vector insns together and vector load insns\n+\t together.\n \n-\t     1  : 1 vector insn has been issued and another has been found and\n-\t\t  moved to the end of the ready list.\n+\t To aid in this pairing, vec_pairing maintains the current state with\n+\t the following values:\n \n-\t     2  : 2 vector insns have been issued and a vector load has been\n-\t\t  found and moved to the end of the ready list.\n+\t     0  : Initial state, no vecload/vector pairing has been started.\n \n-\t     3  : 2 vector insns and a vector load have been issued and another\n-\t\t  vector load has been found and moved to the end of the ready\n+\t     1  : A vecload or vector insn has been issued and a candidate for\n+\t\t  pairing has been found and moved to the end of the ready\n \t\t  list.  */\n       if (type == TYPE_VECLOAD)\n \t{\n \t  /* Issued a vecload.  */\n-\t  if (vec_load_pendulum == 0)\n+\t  if (vec_pairing == 0)\n \t    {\n-\t      /* We issued a single vecload, look for another and move it to\n-\t\t the end of the ready list so it will be scheduled next.\n-\t\t Set pendulum if found.  */\n+\t      int vecload_pos = -1;\n+\t      /* We issued a single vecload, look for a vector insn to pair it\n+\t\t with.  If one isn't found, try to pair another vecload.  */\n \t      pos = lastpos;\n \t      while (pos >= 0)\n \t\t{\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n+\t\t  if (recog_memoized (ready[pos]) >= 0)\n \t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      vec_load_pendulum = -1;\n-\t\t      return cached_can_issue_more;\n+\t\t      type2 = get_attr_type (ready[pos]);\n+\t\t      if (is_power9_pairable_vec_type (type2))\n+\t\t\t{\n+\t\t\t  /* Found a vector insn to pair with, move it to the\n+\t\t\t     end of the ready list so it is scheduled next.  */\n+\t\t\t  tmp = ready[pos];\n+\t\t\t  for (i = pos; i < lastpos; i++)\n+\t\t\t    ready[i] = ready[i + 1];\n+\t\t\t  ready[lastpos] = tmp;\n+\t\t\t  vec_pairing = 1;\n+\t\t\t  return cached_can_issue_more;\n+\t\t\t}\n+\t\t      else if (type2 == TYPE_VECLOAD && vecload_pos == -1)\n+\t\t\t/* Remember position of first vecload seen.  */\n+\t\t\tvecload_pos = pos;\n \t\t    }\n \t\t  pos--;\n \t\t}\n-\t    }\n-\t  else if (vec_load_pendulum == -1)\n-\t    {\n-\t      /* This is the second vecload we've issued, search the ready\n-\t         list for a vector operation so we can try to schedule a\n-\t         pair of those next.  If found move to the end of the ready\n-\t         list so it is scheduled next and set the pendulum.  */\n-\t      pos = lastpos;\n-\t      while (pos >= 0)\n+\t      if (vecload_pos >= 0)\n \t\t{\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && is_power9_pairable_vec_type (\n-\t\t\t   get_attr_type (ready[pos])))\n-\t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      vec_load_pendulum = -2;\n-\t\t      return cached_can_issue_more;\n-\t\t    }\n-\t\t  pos--;\n-\t\t}\n-\t    }\n-\t  else if (vec_load_pendulum == 2)\n-\t    {\n-\t      /* Two vector ops have been issued and we've just issued a\n-\t\t vecload, look for another vecload and move to end of ready\n-\t\t list if found.  */\n-\t      pos = lastpos;\n-\t      while (pos >= 0)\n-\t        {\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n-\t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      /* Set pendulum so that next vecload will be seen as\n-\t\t\t finishing a group, not start of one.  */\n-\t\t      vec_load_pendulum = 3;\n-\t\t      return cached_can_issue_more;\n-\t\t    }\n-\t\t  pos--;\n+\t\t  /* Didn't find a vector to pair with but did find a vecload,\n+\t\t     move it to the end of the ready list.  */\n+\t\t  tmp = ready[vecload_pos];\n+\t\t  for (i = vecload_pos; i < lastpos; i++)\n+\t\t    ready[i] = ready[i + 1];\n+\t\t  ready[lastpos] = tmp;\n+\t\t  vec_pairing = 1;\n+\t\t  return cached_can_issue_more;\n \t\t}\n \t    }\n \t}\n       else if (is_power9_pairable_vec_type (type))\n \t{\n \t  /* Issued a vector operation.  */\n-\t  if (vec_load_pendulum == 0)\n-\t    /* We issued a single vec op, look for another and move it\n-\t       to the end of the ready list so it will be scheduled next.\n-\t       Set pendulum if found.  */\n-\t    {\n-\t      pos = lastpos;\n-\t      while (pos >= 0)\n-\t\t{\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && is_power9_pairable_vec_type (\n-\t\t\t   get_attr_type (ready[pos])))\n-\t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      vec_load_pendulum = 1;\n-\t\t      return cached_can_issue_more;\n-\t\t    }\n-\t\t  pos--;\n-\t\t}\n-\t    }\n-\t  else if (vec_load_pendulum == 1)\n+\t  if (vec_pairing == 0)\n \t    {\n-\t      /* This is the second vec op we've issued, search the ready\n-\t\t list for a vecload operation so we can try to schedule a\n-\t\t pair of those next.  If found move to the end of the ready\n-\t\t list so it is scheduled next and set the pendulum.  */\n+\t      int vec_pos = -1;\n+\t      /* We issued a single vector insn, look for a vecload to pair it\n+\t\t with.  If one isn't found, try to pair another vector.  */\n \t      pos = lastpos;\n \t      while (pos >= 0)\n \t\t{\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && get_attr_type (ready[pos]) == TYPE_VECLOAD)\n+\t\t  if (recog_memoized (ready[pos]) >= 0)\n \t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      vec_load_pendulum = 2;\n-\t\t      return cached_can_issue_more;\n+\t\t      type2 = get_attr_type (ready[pos]);\n+\t\t      if (type2 == TYPE_VECLOAD)\n+\t\t\t{\n+\t\t\t  /* Found a vecload insn to pair with, move it to the\n+\t\t\t     end of the ready list so it is scheduled next.  */\n+\t\t\t  tmp = ready[pos];\n+\t\t\t  for (i = pos; i < lastpos; i++)\n+\t\t\t    ready[i] = ready[i + 1];\n+\t\t\t  ready[lastpos] = tmp;\n+\t\t\t  vec_pairing = 1;\n+\t\t\t  return cached_can_issue_more;\n+\t\t\t}\n+\t\t      else if (is_power9_pairable_vec_type (type2)\n+\t\t\t       && vec_pos == -1)\n+\t\t\t/* Remember position of first vector insn seen.  */\n+\t\t\tvec_pos = pos;\n \t\t    }\n \t\t  pos--;\n \t\t}\n-\t    }\n-\t  else if (vec_load_pendulum == -2)\n-\t    {\n-\t      /* Two vecload ops have been issued and we've just issued a\n-\t\t vec op, look for another vec op and move to end of ready\n-\t  \t list if found.  */\n-\t      pos = lastpos;\n-\t      while (pos >= 0)\n+\t      if (vec_pos >= 0)\n \t\t{\n-\t\t  if (recog_memoized (ready[pos]) >= 0\n-\t\t      && is_power9_pairable_vec_type (\n-\t\t\t   get_attr_type (ready[pos])))\n-\t\t    {\n-\t\t      tmp = ready[pos];\n-\t\t      for (i = pos; i < lastpos; i++)\n-\t\t\tready[i] = ready[i + 1];\n-\t\t      ready[lastpos] = tmp;\n-\t\t      /* Set pendulum so that next vec op will be seen as\n-\t\t\t finishing a group, not start of one.  */\n-\t\t      vec_load_pendulum = -3;\n-\t\t      return cached_can_issue_more;\n-\t\t    }\n-\t\t  pos--;\n+\t\t  /* Didn't find a vecload to pair with but did find a vector\n+\t\t     insn, move it to the end of the ready list.  */\n+\t\t  tmp = ready[vec_pos];\n+\t\t  for (i = vec_pos; i < lastpos; i++)\n+\t\t    ready[i] = ready[i + 1];\n+\t\t  ready[lastpos] = tmp;\n+\t\t  vec_pairing = 1;\n+\t\t  return cached_can_issue_more;\n \t\t}\n \t    }\n \t}\n \n-      /* We've either finished a vec/vecload group, couldn't find an insn to\n-\t continue the current group, or the last insn had nothing to do with\n-\t with a group.  In any case, reset the pendulum.  */\n-      vec_load_pendulum = 0;\n+      /* We've either finished a vec/vecload pair, couldn't find an insn to\n+\t continue the current pair, or the last insn had nothing to do with\n+\t with pairing.  In any case, reset the state.  */\n+      vec_pairing = 0;\n     }\n \n   return cached_can_issue_more;\n@@ -34946,7 +34877,7 @@ rs6000_sched_init (FILE *dump ATTRIBUTE_UNUSED,\n   last_scheduled_insn = NULL;\n   load_store_pendulum = 0;\n   divide_cnt = 0;\n-  vec_load_pendulum = 0;\n+  vec_pairing = 0;\n }\n \n /* The following function is called at the end of scheduling BB.\n@@ -34993,7 +34924,7 @@ struct rs6000_sched_context\n   rtx_insn *last_scheduled_insn;\n   int load_store_pendulum;\n   int divide_cnt;\n-  int vec_load_pendulum;\n+  int vec_pairing;\n };\n \n typedef struct rs6000_sched_context rs6000_sched_context_def;\n@@ -35019,15 +34950,15 @@ rs6000_init_sched_context (void *_sc, bool clean_p)\n       sc->last_scheduled_insn = NULL;\n       sc->load_store_pendulum = 0;\n       sc->divide_cnt = 0;\n-      sc->vec_load_pendulum = 0;\n+      sc->vec_pairing = 0;\n     }\n   else\n     {\n       sc->cached_can_issue_more = cached_can_issue_more;\n       sc->last_scheduled_insn = last_scheduled_insn;\n       sc->load_store_pendulum = load_store_pendulum;\n       sc->divide_cnt = divide_cnt;\n-      sc->vec_load_pendulum = vec_load_pendulum;\n+      sc->vec_pairing = vec_pairing;\n     }\n }\n \n@@ -35043,7 +34974,7 @@ rs6000_set_sched_context (void *_sc)\n   last_scheduled_insn = sc->last_scheduled_insn;\n   load_store_pendulum = sc->load_store_pendulum;\n   divide_cnt = sc->divide_cnt;\n-  vec_load_pendulum = sc->vec_load_pendulum;\n+  vec_pairing = sc->vec_pairing;\n }\n \n /* Free _SC.  */"}]}