{"sha": "d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2MmJkODVlMzhlMGU4MTczYzJiZTVhOTMxNDY2M2EyZWMyY2ZjNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T16:42:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T16:42:24Z"}, "message": "fwprop.c: Use rtx_insn\n\ngcc/\n\t* fwprop.c (single_def_use_dom_walker::before_dom_children):\n\tStrengthen local \"insn\" from rtx to rtx_insn *.\n\t(use_killed_between): Likewise for param \"target_insn\".\n\t(all_uses_available_at): Likewise for param \"target_insn\" and\n\tlocal \"next\".\n\t(update_df_init): Likewise for params \"def_insn\", \"insn\".\n\t(update_df): Likewise for param \"insn\".\n\t(try_fwprop_subst): Likewise for param \"def_insn\" and local\n\t\"insn\".\n\t(free_load_extend): Likewise for param \"insn\".\n\t(forward_propagate_subreg): Likewise for param \"def_insn\" and\n\tlocal \"use_insn\".\n\t(forward_propagate_asm): Likewise for param \"def_insn\" and local\n\t\"use_insn\".\n\t(forward_propagate_and_simplify): Likewise for param \"def_insn\"\n\tand local \"use_insn\".\n\t(forward_propagate_into): Likewise for locals \"def_insn\" and\n\t\"use_insn\".\n\nFrom-SVN: r214328", "tree": {"sha": "e1d1f2873f72163c5af67e010ca15c73fe80d5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1d1f2873f72163c5af67e010ca15c73fe80d5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691fe203b3989c9f05d8d8c1cb74b77ca8b142a8"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "60c0bd2cedef3481dba0fdc5d34e48c7da2f4469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "patch": "@@ -1,3 +1,24 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* fwprop.c (single_def_use_dom_walker::before_dom_children):\n+\tStrengthen local \"insn\" from rtx to rtx_insn *.\n+\t(use_killed_between): Likewise for param \"target_insn\".\n+\t(all_uses_available_at): Likewise for param \"target_insn\" and\n+\tlocal \"next\".\n+\t(update_df_init): Likewise for params \"def_insn\", \"insn\".\n+\t(update_df): Likewise for param \"insn\".\n+\t(try_fwprop_subst): Likewise for param \"def_insn\" and local\n+\t\"insn\".\n+\t(free_load_extend): Likewise for param \"insn\".\n+\t(forward_propagate_subreg): Likewise for param \"def_insn\" and\n+\tlocal \"use_insn\".\n+\t(forward_propagate_asm): Likewise for param \"def_insn\" and local\n+\t\"use_insn\".\n+\t(forward_propagate_and_simplify): Likewise for param \"def_insn\"\n+\tand local \"use_insn\".\n+\t(forward_propagate_into): Likewise for locals \"def_insn\" and\n+\t\"use_insn\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function.c (emit_initial_value_sets): Strengthen local \"seq\""}, {"sha": "a7fee9d446f457628563157c19923775fde7b8cc", "filename": "gcc/fwprop.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d362bd85e38e0e8173c2be5a9314663a2ec2cfc6/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=d362bd85e38e0e8173c2be5a9314663a2ec2cfc6", "patch": "@@ -218,7 +218,7 @@ single_def_use_dom_walker::before_dom_children (basic_block bb)\n   int bb_index = bb->index;\n   struct df_md_bb_info *md_bb_info = df_md_get_bb_info (bb_index);\n   struct df_lr_bb_info *lr_bb_info = df_lr_get_bb_info (bb_index);\n-  rtx insn;\n+  rtx_insn *insn;\n \n   bitmap_copy (local_md, &md_bb_info->in);\n   bitmap_copy (local_lr, &lr_bb_info->in);\n@@ -719,7 +719,7 @@ local_ref_killed_between_p (df_ref ref, rtx from, rtx to)\n      we check if the definition is killed after DEF_INSN or before\n      TARGET_INSN insn, in their respective basic blocks.  */\n static bool\n-use_killed_between (df_ref use, rtx def_insn, rtx target_insn)\n+use_killed_between (df_ref use, rtx_insn *def_insn, rtx_insn *target_insn)\n {\n   basic_block def_bb = BLOCK_FOR_INSN (def_insn);\n   basic_block target_bb = BLOCK_FOR_INSN (target_insn);\n@@ -783,12 +783,12 @@ use_killed_between (df_ref use, rtx def_insn, rtx target_insn)\n    would require full computation of available expressions;\n    we check only restricted conditions, see use_killed_between.  */\n static bool\n-all_uses_available_at (rtx def_insn, rtx target_insn)\n+all_uses_available_at (rtx_insn *def_insn, rtx_insn *target_insn)\n {\n   df_ref use;\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (def_insn);\n   rtx def_set = single_set (def_insn);\n-  rtx next;\n+  rtx_insn *next;\n \n   gcc_assert (def_set);\n \n@@ -869,7 +869,7 @@ register_active_defs (df_ref use)\n    I'm not doing this yet, though.  */\n \n static void\n-update_df_init (rtx def_insn, rtx insn)\n+update_df_init (rtx_insn *def_insn, rtx_insn *insn)\n {\n #ifdef ENABLE_CHECKING\n   sparseset_clear (active_defs_check);\n@@ -906,7 +906,7 @@ update_uses (df_ref use)\n    uses if NOTES_ONLY is true.  */\n \n static void\n-update_df (rtx insn, rtx note)\n+update_df (rtx_insn *insn, rtx note)\n {\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n \n@@ -933,9 +933,10 @@ update_df (rtx insn, rtx note)\n    performed.  */\n \n static bool\n-try_fwprop_subst (df_ref use, rtx *loc, rtx new_rtx, rtx def_insn, bool set_reg_equal)\n+try_fwprop_subst (df_ref use, rtx *loc, rtx new_rtx, rtx_insn *def_insn,\n+\t\t  bool set_reg_equal)\n {\n-  rtx insn = DF_REF_INSN (use);\n+  rtx_insn *insn = DF_REF_INSN (use);\n   rtx set = single_set (insn);\n   rtx note = NULL_RTX;\n   bool speed = optimize_bb_for_speed_p (BLOCK_FOR_INSN (insn));\n@@ -1016,7 +1017,7 @@ try_fwprop_subst (df_ref use, rtx *loc, rtx new_rtx, rtx def_insn, bool set_reg_\n    load from memory.  */\n \n static bool\n-free_load_extend (rtx src, rtx insn)\n+free_load_extend (rtx src, rtx_insn *insn)\n {\n   rtx reg;\n   df_ref def, use;\n@@ -1057,10 +1058,11 @@ free_load_extend (rtx src, rtx insn)\n /* If USE is a subreg, see if it can be replaced by a pseudo.  */\n \n static bool\n-forward_propagate_subreg (df_ref use, rtx def_insn, rtx def_set)\n+forward_propagate_subreg (df_ref use, rtx_insn *def_insn, rtx def_set)\n {\n   rtx use_reg = DF_REF_REG (use);\n-  rtx use_insn, src;\n+  rtx_insn *use_insn;\n+  rtx src;\n \n   /* Only consider subregs... */\n   enum machine_mode use_mode = GET_MODE (use_reg);\n@@ -1127,9 +1129,10 @@ forward_propagate_subreg (df_ref use, rtx def_insn, rtx def_set)\n /* Try to replace USE with SRC (defined in DEF_INSN) in __asm.  */\n \n static bool\n-forward_propagate_asm (df_ref use, rtx def_insn, rtx def_set, rtx reg)\n+forward_propagate_asm (df_ref use, rtx_insn *def_insn, rtx def_set, rtx reg)\n {\n-  rtx use_insn = DF_REF_INSN (use), src, use_pat, asm_operands, new_rtx, *loc;\n+  rtx_insn *use_insn = DF_REF_INSN (use);\n+  rtx src, use_pat, asm_operands, new_rtx, *loc;\n   int speed_p, i;\n   df_ref uses;\n \n@@ -1204,9 +1207,9 @@ forward_propagate_asm (df_ref use, rtx def_insn, rtx def_set, rtx reg)\n    result.  */\n \n static bool\n-forward_propagate_and_simplify (df_ref use, rtx def_insn, rtx def_set)\n+forward_propagate_and_simplify (df_ref use, rtx_insn *def_insn, rtx def_set)\n {\n-  rtx use_insn = DF_REF_INSN (use);\n+  rtx_insn *use_insn = DF_REF_INSN (use);\n   rtx use_set = single_set (use_insn);\n   rtx src, reg, new_rtx, *loc;\n   bool set_reg_equal;\n@@ -1329,7 +1332,8 @@ static bool\n forward_propagate_into (df_ref use)\n {\n   df_ref def;\n-  rtx def_insn, def_set, use_insn;\n+  rtx_insn *def_insn, *use_insn;\n+  rtx def_set;\n   rtx parent;\n \n   if (DF_REF_FLAGS (use) & DF_REF_READ_WRITE)"}]}