{"sha": "f295ecef02545a8bce7e09caa6cb15876d1807c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI5NWVjZWYwMjU0NWE4YmNlN2UwOWNhYTZjYjE1ODc2ZDE4MDdjMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-10-23T21:40:31Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-10-23T21:40:31Z"}, "message": "limits.h: Move to...\n\n\n2001-10-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/cpu/i386/bits/limits.h: Move to...\n\t* config/cpu/i386/bits/cpu_limits.h: ...here.\n\t* config/cpu/cris/bits/cpu_limits.h: Same.\n\t* config/cpu/powerpc/bits/cpu_limits.h: Same.\n\t* config/cpu/x86-64/bits/cpu_limits.h: Same.\n\t* config/cpu/alpha/bits/cpu_limits.h: New.\n\t* config/cpu/m68k/bits/cpu_limits.h: New.\n\t* config/cpu/s390/bits/cpu_limits.h: New.\n\t* config/os/aix/bits/os_defines.h: Tweaks.\n\t* config/os/bsd/freebsd/bits/os_defines.h: Same.\n\t* config/os/bsd/netbsd/bits/os_defines.h: Same.\n\t* config/os/djgpp/bits/os_defines.h: Same.\n\t* config/os/generic/bits/os_defines.h: Same.\n\t* config/os/gnu-linux/bits/os_defines.h: Same.\n\t* config/os/hpux/bits/os_defines.h: Same.\n\t* config/os/irix/irix5.2/bits/os_defines.h: Same.\n\t* config/os/irix/irix6.5/bits/os_defines.h: Same.\n\t* config/os/newlib/bits/os_defines.h: Same.\n\t* config/os/solaris/solaris2.5/bits/os_defines.h: Same.\n\t* config/os/solaris/solaris2.6/bits/os_defines.h: Same.\n\t* config/os/solaris/solaris2.7/bits/os_defines.h: Same.\n\n\t* include/bits/c++config: Remove include.\n\t* include/bits/limits_generic.h: Remove.\n\t* include/bits/std_limits.h: Include cpu_limits.h.\n\t* include/Makefile.am: Fixup.\n\t* src/limits.cc: Tweak.\n\t* src/limits_generic.cc: Remove.\n\t* src/gen-num-limits.cc: Remove.\n\t* mknumeric_limits: Remove.\n\nFrom-SVN: r46445", "tree": {"sha": "afac22e637382a6bcf168b75648bf8e6cbc415a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afac22e637382a6bcf168b75648bf8e6cbc415a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f295ecef02545a8bce7e09caa6cb15876d1807c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f295ecef02545a8bce7e09caa6cb15876d1807c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f295ecef02545a8bce7e09caa6cb15876d1807c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f295ecef02545a8bce7e09caa6cb15876d1807c2/comments", "author": null, "committer": null, "parents": [{"sha": "91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852"}], "stats": {"total": 2894, "additions": 332, "deletions": 2562}, "files": [{"sha": "eb56ce37dc50aaa50087467e8620fafa4e5dad38", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -1,3 +1,36 @@\n+2001-10-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/cpu/i386/bits/limits.h: Move to...\n+\t* config/cpu/i386/bits/cpu_limits.h: ...here.\n+\t* config/cpu/cris/bits/cpu_limits.h: Same.\n+\t* config/cpu/powerpc/bits/cpu_limits.h: Same.\t\n+\t* config/cpu/x86-64/bits/cpu_limits.h: Same.\t\t\n+\t* config/cpu/alpha/bits/cpu_limits.h: New.\n+\t* config/cpu/m68k/bits/cpu_limits.h: New.\n+\t* config/cpu/s390/bits/cpu_limits.h: New.\n+\t* config/os/aix/bits/os_defines.h: Tweaks.\n+\t* config/os/bsd/freebsd/bits/os_defines.h: Same.\n+\t* config/os/bsd/netbsd/bits/os_defines.h: Same.\n+\t* config/os/djgpp/bits/os_defines.h: Same.\n+\t* config/os/generic/bits/os_defines.h: Same.\n+\t* config/os/gnu-linux/bits/os_defines.h: Same.\n+\t* config/os/hpux/bits/os_defines.h: Same.\n+\t* config/os/irix/irix5.2/bits/os_defines.h: Same.\n+\t* config/os/irix/irix6.5/bits/os_defines.h: Same.\n+\t* config/os/newlib/bits/os_defines.h: Same.\n+\t* config/os/solaris/solaris2.5/bits/os_defines.h: Same.\n+\t* config/os/solaris/solaris2.6/bits/os_defines.h: Same.\n+\t* config/os/solaris/solaris2.7/bits/os_defines.h: Same.\n+\t\n+\t* include/bits/c++config: Remove include.\t\n+\t* include/bits/limits_generic.h: Remove.\n+\t* include/bits/std_limits.h: Include cpu_limits.h.\n+\t* include/Makefile.am: Fixup.\n+\t* src/limits.cc: Tweak.\n+\t* src/limits_generic.cc: Remove.\n+\t* src/gen-num-limits.cc: Remove.\n+\t* mknumeric_limits: Remove.\n+\t\n 2001-10-20  Brendan Kehoe  <brendan@zen.org>\n \n \t* bits/type_traits.h (_Bool): Removed this type."}, {"sha": "b67209b8e061026f665b5f99e483cd7448c2a69f", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n@@ -106,7 +107,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "21d31e3631a66a95ac93fd7739c541113f283a76", "filename": "libstdc++-v3/config/cpu/alpha/bits/cpu_limits.h", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -28,6 +28,11 @@\n #ifndef _GLIBCPP_CPU_LIMITS\n #define _GLIBCPP_CPU_LIMITS 1\n \n+#define __glibcpp_long_bits 64\n+\n #define __glibcpp_long_double_bits 64\n \n #endif\n+\n+\n+", "previous_filename": "libstdc++-v3/config/cpu/powerpc/bits/limits.h"}, {"sha": "f0ff04dedaa106817981d0c18b3c4432ce790142", "filename": "libstdc++-v3/config/cpu/cris/bits/cpu_limits.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fcris%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "previous_filename": "libstdc++-v3/config/cpu/cris/bits/limits.h"}, {"sha": "0438f7c6e9f8dd1b66c400cb89a639a135a07d9d", "filename": "libstdc++-v3/config/cpu/generic/bits/cpu_limits.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_CPU_LIMITS\n+#define _GLIBCPP_CPU_LIMITS 1\n+\n+// Nothing is defined in the generic file.  In that way, we fall back\n+// on the defaults in std_limits.h.\n+\n+// If you need to override these defaults, you can either use a\n+// CPU-specific version (in which case you must modify\n+// configure.target) or you must add the overrides to your\n+// os_defines.h.  In general, if all systems for your CPU use the\n+// same values, it is best to use a cpu-specific configuration file.\n+\n+#endif\n+"}, {"sha": "be304e2d8055a3b5a7bdf5129ac0abc703ec6fe4", "filename": "libstdc++-v3/config/cpu/i386/bits/cpu_limits.h", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fi386%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -28,9 +28,6 @@\n #ifndef _GLIBCPP_CPU_LIMITS\n #define _GLIBCPP_CPU_LIMITS 1\n \n-// Some operating systems set this\n-#ifndef __glibcpp_long_double_bits\n #define __glibcpp_long_double_bits 80\n-#endif\n \n #endif", "previous_filename": "libstdc++-v3/config/cpu/i386/bits/limits.h"}, {"sha": "07e4e03a12b44af68ddebc8429c3bdab2ad7b5e5", "filename": "libstdc++-v3/config/cpu/m68k/bits/cpu_limits.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fm68k%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_CPU_LIMITS\n+#define _GLIBCPP_CPU_LIMITS 1\n+\n+#define __glibcpp_long_double_bits 96\n+\n+#endif\n+\n+"}, {"sha": "87d7883bb02bf206db9daa132b1bbf038097e124", "filename": "libstdc++-v3/config/cpu/powerpc/bits/cpu_limits.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fpowerpc%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_CPU_LIMITS\n+#define _GLIBCPP_CPU_LIMITS 1\n+\n+#ifndef __LONG_DOUBLE_128__\n+#define __glibcpp_long_double_bits 64\n+#endif\n+\n+#endif\n+\n+\n+"}, {"sha": "21d31e3631a66a95ac93fd7739c541113f283a76", "filename": "libstdc++-v3/config/cpu/s390/bits/cpu_limits.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fs390%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_CPU_LIMITS\n+#define _GLIBCPP_CPU_LIMITS 1\n+\n+#define __glibcpp_long_bits 64\n+\n+#define __glibcpp_long_double_bits 64\n+\n+#endif\n+\n+\n+"}, {"sha": "be304e2d8055a3b5a7bdf5129ac0abc703ec6fe4", "filename": "libstdc++-v3/config/cpu/x86-64/bits/cpu_limits.h", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fbits%2Fcpu_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fbits%2Fcpu_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fx86-64%2Fbits%2Fcpu_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -28,9 +28,6 @@\n #ifndef _GLIBCPP_CPU_LIMITS\n #define _GLIBCPP_CPU_LIMITS 1\n \n-// Some operating systems set this\n-#ifndef __glibcpp_long_double_bits\n #define __glibcpp_long_double_bits 80\n-#endif\n \n #endif", "previous_filename": "libstdc++-v3/config/cpu/x86-64/bits/limits.h"}, {"sha": "188ced19af3ec7bbcea1948ccf400132c9d41db6", "filename": "libstdc++-v3/config/os/aix/bits/os_defines.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -30,20 +30,20 @@\n #ifndef _GLIBCPP_OS_DEFINES\n #define _GLIBCPP_OS_DEFINES\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #undef _XOPEN_SOURCE\n #define _XOPEN_SOURCE 500\n #undef _XOPEN_SOURCE_EXTENDED\n #define _XOPEN_SOURCE_EXTENDED 1\n \n-/* off64_t */\n+// off64_t\n #ifndef _LARGE_FILE_API\n #define _LARGE_FILE_API\n #endif\n \n-/* atomic types */\n+// atomic types\n #ifndef _ALL_SOURCE\n #define _ALL_SOURCE\n #endif\n@@ -55,10 +55,9 @@\n #undef _G_USING_THUNKS\n #define _G_USING_THUNKS 0\n \n-#define __glibcpp_long_double_bits 64\n-\n #if !defined(_AIX51) || !defined(__64BIT__)\n #define __glibcpp_wchar_t_bits 16\n+#define __glibcpp_wchar_t_is_signed false\n #endif\n \n #ifdef __64BIT__"}, {"sha": "9e6bbaf453d4b38302ea7540807bb294c126f0cf", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -29,16 +29,13 @@\n \n \n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define __glibcpp_long_double_bits __glibcpp_double_bits\n \n #define _GLIBCPP_AVOID_FSEEK 1\n \n #endif\n-\n-"}, {"sha": "03f760fdcad3d1ff2d998111c121b7f4e4e066d6", "filename": "libstdc++-v3/config/os/bsd/netbsd/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,21 +27,12 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n-\n-\n-/* Settings for NetBSD.  */\n+#define _GLIBCPP_OS_DEFINES 1\n \n-/* __off_t is a typedef declared in stdio.h.  */\n-/* #define __off_t off_t */\n-\n-/* We don't have off64_t */\n-/* #define __off64_t off64_t */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define __ssize_t ssize_t\n \n #endif\n-\n-"}, {"sha": "ce0bf243b0e2aa88cedf5999d0aad44e23e32f1f", "filename": "libstdc++-v3/config/os/djgpp/bits/os_defines.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -29,11 +29,10 @@\n \n \n #ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define __off_t off_t\n #define __off64_t off64_t\n@@ -42,3 +41,5 @@\n // FIXME: should there be '#undef POSIX_SOURCE'?\n \n #endif\n+\n+"}, {"sha": "143c07e68036ff1963fd547664393249ea5cbd4e", "filename": "libstdc++-v3/config/os/generic/bits/os_defines.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -29,13 +29,9 @@\n \n \n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n-#ifdef __alpha__\n-#define __glibcpp_long_bits 64\n-#endif\n-\n #endif"}, {"sha": "f5612ed060b118afcbe6ef62f1fdb3c83409786a", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,10 +27,12 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n #define _GLIBCPP_OS_DEFINES 1\n \n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n // This keeps isanum, et al from being propagated as macros.\n #define __NO_CTYPE 1\n \n@@ -63,21 +65,12 @@ typedef __loff_t __off64_t;\n #  define __NO_STRING_INLINES\n # endif\n \n-#if defined (__powerpc__) || defined (__s390__)\n-#define __glibcpp_wchar_t_is_signed true\n-#endif\n-\n-#if defined (__alpha__) || defined (__powerpc64__) || (defined (__sparc__) && defined(__arch64__)) || defined (__s390x__)\n+#if defined(__sparc__) && defined(__arch64__)\n #define __glibcpp_long_bits 64\n #endif\n \n-#if defined (__alpha__) || (defined (__powerpc__) && !defined (__LONG_DOUBLE_128__)) || defined (__s390__)\n-#define __glibcpp_long_double_bits 64\n-#endif\n-\n-#if defined (__mc68000__)\n-#define __glibcpp_long_double_bits 96\n+#ifdef __powerpc64__\n+#define __glibcpp_long_bits 64\n #endif\n \n #endif\n-"}, {"sha": "d7045d0a16e454c86b2dc077cdd342b78cef859f", "filename": "libstdc++-v3/config/os/hpux/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,13 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n-\n+#define _GLIBCPP_OS_DEFINES\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define __off_t off_t\n #define __off64_t off64_t\n@@ -46,4 +44,3 @@\n #endif\n \n #endif\n-"}, {"sha": "50db680b08ff966e9352d4d9956fb12e3e93e6c9", "filename": "libstdc++-v3/config/os/irix/irix5.2/bits/os_defines.h", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,32 +27,28 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES\n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n-\n-/* We need large file support.  There are two ways to turn it on:\n-   by defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However,\n-   it does not actually work to define only the former, as then\n-   <sys/stat.h> is invalid: `st_blocks' is defined to be a macro,\n-   but then used as a field name.  So, we have to turn on \n-   _SGI_SOURCE.  That only works if _POSIX_SOURCE is turned off,\n-   so we have to explicitly turn it off.  (Some of the libio C files\n-   explicitly try to turn it on.)  _SGI_SOURCE is actually turned on \n-   implicitly via the command-line.  */\n+#define _GLIBCPP_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+// We need large file support.  There are two ways to turn it on: by\n+// defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However, it\n+// does not actually work to define only the former, as then\n+// <sys/stat.h> is invalid: `st_blocks' is defined to be a macro, but\n+// then used as a field name.  So, we have to turn on _SGI_SOURCE.\n+// That only works if _POSIX_SOURCE is turned off, so we have to\n+// explicitly turn it off.  (Some of the libio C files explicitly try\n+// to turn it on.)  _SGI_SOURCE is actually turned on implicitly via\n+// the command-line.\n #undef _POSIX_SOURCE\n \n #define __off_t off_t\n #define __off64_t off64_t\n #define __ssize_t ssize_t\n \n-/* GCC does not use thunks on IRIX.  */\n+// GCC does not use thunks on IRIX.\n #define _G_USING_THUNKS 0\n \n #endif\n-\n-\n-"}, {"sha": "e8f1dcc82d2d05039f22c2fef1e08786a0c3f369", "filename": "libstdc++-v3/config/os/irix/irix6.5/bits/os_defines.h", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,29 +27,28 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES\n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n-\n-/* We need large file support.  There are two ways to turn it on:\n-   by defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However,\n-   it does not actually work to define only the former, as then\n-   <sys/stat.h> is invalid: `st_blocks' is defined to be a macro,\n-   but then used as a field name.  So, we have to turn on \n-   _SGI_SOURCE.  That only works if _POSIX_SOURCE is turned off,\n-   so we have to explicitly turn it off.  (Some of the libio C files\n-   explicitly try to turn it on.)  _SGI_SOURCE is actually turned on \n-   implicitly via the command-line.  */\n+#define _GLIBCPP_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+// We need large file support.  There are two ways to turn it on: by\n+// defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However, it\n+// does not actually work to define only the former, as then\n+// <sys/stat.h> is invalid: `st_blocks' is defined to be a macro, but\n+// then used as a field name.  So, we have to turn on _SGI_SOURCE.\n+// That only works if _POSIX_SOURCE is turned off, so we have to\n+// explicitly turn it off.  (Some of the libio C files explicitly try\n+// to turn it on.)  _SGI_SOURCE is actually turned on implicitly via\n+// the command-line.\n #undef _POSIX_SOURCE\n \n #define __off_t off_t\n #define __off64_t off64_t\n #define __ssize_t ssize_t\n \n-/* GCC does not use thunks on IRIX.  */\n+// GCC does not use thunks on IRIX. \n #define _G_USING_THUNKS 0\n \n #define __glibcpp_long_double_bits 64"}, {"sha": "12776611b88baecf9b77486ac89d9279d7fd5c93", "filename": "libstdc++-v3/config/os/newlib/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,15 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n-\n-\n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+#define _GLIBCPP_OS_DEFINES 1\n \n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #endif\n-\n-"}, {"sha": "0edc784c9e13d1fa3276d96d1f46af69cd57d8cb", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,12 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define _GLIBCPP_AVOID_FSEEK 1\n "}, {"sha": "3acdf5c002a2011fad11fa61276befb67cfe4300", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,12 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define _GLIBCPP_AVOID_FSEEK 1\n "}, {"sha": "a0fd24309ffe4ad0ed458e711bf9eb4565e75416", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -27,12 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n-/* System-specific #define, typedefs, corrections, etc, go here.  This\n-   file will come before all others. */\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n \n #define _GLIBCPP_AVOID_FSEEK 1\n "}, {"sha": "d156ac5b41c9cdd791a5821788b726dffc984582", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -16883,8 +16883,8 @@ fi\n #line 16884 \"configure\"\n #include \"confdefs.h\"\n \n-#include <setjmp.h>\n-\n+  #include <setjmp.h>\n+  \n int main() {\n sigjmp_buf env; while (! sigsetjmp (env, 1)) siglongjmp (env, 1);\n ; return 0; }\n@@ -16895,6 +16895,7 @@ if { (eval echo configure:16893: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5;\n #define HAVE_SIGSETJMP 1\n EOF\n \n+  \n else\n   echo \"configure: failed program was:\" >&5\n   cat conftest.$ac_ext >&5\n@@ -16905,17 +16906,17 @@ rm -f conftest*\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:16909: checking for $ac_hdr\" >&5\n+echo \"configure:16910: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16914 \"configure\"\n+#line 16915 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:16919: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:16920: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -16944,12 +16945,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:16948: checking for $ac_func\" >&5\n+echo \"configure:16949: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 16953 \"configure\"\n+#line 16954 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -16972,7 +16973,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:16976: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:16977: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -16997,15 +16998,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:17001: checking for working mmap\" >&5\n+echo \"configure:17002: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17009 \"configure\"\n+#line 17010 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -17158,7 +17159,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:17162: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:17163: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -17189,17 +17190,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:17193: checking for $ac_hdr\" >&5\n+echo \"configure:17194: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 17198 \"configure\"\n+#line 17199 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:17203: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:17204: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -17232,7 +17233,7 @@ done\n     # Can't do these in a loop, else the resulting syntax is wrong.\n     \n   cat > conftest.$ac_ext <<EOF\n-#line 17236 \"configure\"\n+#line 17237 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -17241,7 +17242,7 @@ int main() {\n  int f = RLIMIT_DATA ; \n ; return 0; }\n EOF\n-if { (eval echo configure:17245: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17246: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -17258,7 +17259,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 17262 \"configure\"\n+#line 17263 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -17267,7 +17268,7 @@ int main() {\n  int f = RLIMIT_RSS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:17271: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17272: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -17284,7 +17285,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 17288 \"configure\"\n+#line 17289 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -17293,7 +17294,7 @@ int main() {\n  int f = RLIMIT_VMEM ; \n ; return 0; }\n EOF\n-if { (eval echo configure:17297: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17298: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -17310,7 +17311,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 17314 \"configure\"\n+#line 17315 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -17319,7 +17320,7 @@ int main() {\n  int f = RLIMIT_AS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:17323: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17324: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -17341,7 +17342,7 @@ EOF\n else\n   \n       cat > conftest.$ac_ext <<EOF\n-#line 17345 \"configure\"\n+#line 17346 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n \t\t      #include <unistd.h>\n@@ -17350,7 +17351,7 @@ int main() {\n  struct rlimit r; setrlimit(0, &r);\n ; return 0; }\n EOF\n-if { (eval echo configure:17354: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:17355: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_setrlimit=yes\n else\n@@ -17366,7 +17367,7 @@ fi\n   fi\n \n   echo $ac_n \"checking for testsuite memory limit support\"\"... $ac_c\" 1>&6\n-echo \"configure:17370: checking for testsuite memory limit support\" >&5\n+echo \"configure:17371: checking for testsuite memory limit support\" >&5\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n     cat >> confdefs.h <<\\EOF\n@@ -17385,7 +17386,7 @@ fi\n # Propagate the target-specific source directories through the build chain.\n OS_INC_SRCDIR=$os_include_dir/bits\n ATOMICITY_INC_SRCDIR=$ATOMICITYH/bits\n-LIMITS_INC_SRCDIR=$LIMITSH/bits\n+CPU_LIMITS_INC_SRCDIR=$CPULIMITSH/bits\n \n \n \n@@ -17468,13 +17469,13 @@ glibcpp_toolexeclibdir=no\n glibcpp_prefixdir=${prefix}\n \n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:17472: checking for interface version number\" >&5\n+echo \"configure:17473: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:17478: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:17479: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -17498,7 +17499,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:17502: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:17503: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -17545,7 +17546,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:17549: checking for install location\" >&5\n+echo \"configure:17550: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n \n@@ -17822,7 +17823,7 @@ s%@USE_COMPLEX_LONG_DOUBLE@%$USE_COMPLEX_LONG_DOUBLE%g\n s%@WERROR@%$WERROR%g\n s%@OS_INC_SRCDIR@%$OS_INC_SRCDIR%g\n s%@ATOMICITY_INC_SRCDIR@%$ATOMICITY_INC_SRCDIR%g\n-s%@LIMITS_INC_SRCDIR@%$LIMITS_INC_SRCDIR%g\n+s%@CPU_LIMITS_INC_SRCDIR@%$CPU_LIMITS_INC_SRCDIR%g\n s%@GLIBCPP_IS_CROSS_COMPILING@%$GLIBCPP_IS_CROSS_COMPILING%g\n s%@CANADIAN_TRUE@%$CANADIAN_TRUE%g\n s%@CANADIAN_FALSE@%$CANADIAN_FALSE%g"}, {"sha": "ea92942f1ad5f67ba388c123d866db55bbcfdcdf", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -225,9 +225,10 @@ else\n   AC_LC_MESSAGES\n \n   AC_TRY_COMPILE([\n-#include <setjmp.h>\n-], [sigjmp_buf env; while (! sigsetjmp (env, 1)) siglongjmp (env, 1);],\n-[AC_DEFINE(HAVE_SIGSETJMP, 1, [Define if sigsetjmp is available.  ])])\n+  #include <setjmp.h>\n+  ], [sigjmp_buf env; while (! sigsetjmp (env, 1)) siglongjmp (env, 1);],\n+  [AC_DEFINE(HAVE_SIGSETJMP, 1, [Define if sigsetjmp is available.  ])\n+  ])\n \n   AC_FUNC_MMAP\n \n@@ -239,10 +240,10 @@ fi\n # Propagate the target-specific source directories through the build chain.\n OS_INC_SRCDIR=$os_include_dir/bits\n ATOMICITY_INC_SRCDIR=$ATOMICITYH/bits\n-LIMITS_INC_SRCDIR=$LIMITSH/bits\n+CPU_LIMITS_INC_SRCDIR=$CPULIMITSH/bits\n AC_SUBST(OS_INC_SRCDIR)\n AC_SUBST(ATOMICITY_INC_SRCDIR)\n-AC_SUBST(LIMITS_INC_SRCDIR)\n+AC_SUBST(CPU_LIMITS_INC_SRCDIR)\n \n # Set up cross-compile flags\n AC_SUBST(GLIBCPP_IS_CROSS_COMPILING)"}, {"sha": "304457dfb17fa7f2ab842ff74bfc2e2a24f6d6f6", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -13,7 +13,6 @@\n #   target                The configuration target\n #   target_cpu            The configuration target CPU\n #   target_os             The configuration target OS\n-#   target_optspace       --enable-target-optspace (\"yes\", \"no\", \"\")\n \n # It possibly modifies the following shell variables:\n #   cpu_include_dir        CPU-specific include directory, relative to srcdir\n@@ -22,7 +21,6 @@\n \n # Set any CPU dependent compiler flags.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-\n case \"${target_cpu}\" in\n   alpha*)\n     cpu_include_dir=\"config/cpu/alpha\"\n@@ -68,7 +66,6 @@ esac\n \n # Set any OS dependent compiler flags.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-\n case \"${target_os}\" in\n   aix4.[3456789]* | aix[56789]*)\n     os_include_dir=\"config/os/aix\"\n@@ -115,7 +112,6 @@ esac\n \n # Set any flags dependant on the full target triplet.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-\n case \"${target}\" in\n    *-*-aix[456789]*)\n      # We set os_include_dir to config/os/aix only on AIX 4.3 and\n@@ -135,24 +131,32 @@ case \"${target}\" in\n      ;;\n esac\n \n-# Set LIMITSH to the directory where the configuration-dependent\n-# limits.h can be found.\n+# Set CPULIMITSH to the directory where the configuration-dependent\n+# cpu_limits.h can be found.\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n-\n case \"${target}\" in\n+   alpha-*-*)\n+     CPULIMITSH=config/cpu/alpha\n+     ;;\n    cris-*-*)\n-     LIMITSH=config/cpu/cris\n+     CPULIMITSH=config/cpu/cris\n      ;;\n    i?86-*-*)\n-     LIMITSH=config/cpu/i386\n+     CPULIMITSH=config/cpu/i386\n+     ;;\n+   m68k-*-* | m680[246]0-*-*)\n+     CPULIMITSH=config/cpu/m68k\n      ;;\n    powerpc-*-*)\n-     LIMITSH=config/cpu/powerpc\n+     CPULIMITSH=config/cpu/powerpc\n+     ;;\n+   s390-*-* | s390x-*-*)\n+     CPULIMITSH=config/cpu/s390\n      ;;\n    x86_64-*-*)\n-     LIMITSH=config/cpu/x86-64\n+     CPULIMITSH=config/cpu/x86-64\n      ;;\n    *)\n-     LIMITSH=config/cpu/generic\n+     CPULIMITSH=config/cpu/generic\n      ;;\n esac"}, {"sha": "383e3917e02ec30d65e8410c28f06af6c3273e80", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -263,7 +263,7 @@ target_headers = \\\n \t${target_srcdir}/ctype_noninline.h \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@LIMITS_INC_SRCDIR@/limits.h\n+\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n thread_builddir = ./${target_alias}/bits\n thread_headers = \\"}, {"sha": "f16780f2472f1b0f06351d62e40852a2be1ceb25", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n@@ -105,7 +106,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n@@ -393,7 +393,7 @@ target_headers = \\\n \t${target_srcdir}/ctype_noninline.h \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@LIMITS_INC_SRCDIR@/limits.h\n+\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n \n \n thread_builddir = ./${target_alias}/bits"}, {"sha": "c7ee1875a949c0d225b766f26c8d472c3f222162", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -32,8 +32,6 @@\n \n // Pick up any OS-specific definitions.\n #include <bits/os_defines.h>\n-// And any CPU-specific definitions.\n-#include <bits/limits.h>\n \n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCPP__ 20011023\n@@ -51,10 +49,6 @@\n // by the compiler, but instead instantiated into the library binary.\n #define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1\n \n-// Define this to permit user-level control of the expansion of string\n-// buffers (via a fn pointer), see basic_string.* for more.\n-//#define _GLIBCPP_ALLOC_CONTROL\n-\n // To enable older, ARM-style iostreams and other anachronisms use this.\n //#define _GLIBCPP_DEPRECATED 1\n \n@@ -64,6 +58,10 @@\n // Enable concept checking code from the boost libraries.\n //#define _GLIBCPP_CONCEPT_CHECKS 1\n \n+// Define this to permit user-level control of the expansion of string\n+// buffers (via a fn pointer), see basic_string.* for more.\n+//#define _GLIBCPP_ALLOC_CONTROL\n+\n // Map gthr.h abstraction to that required for STL.  Do not key off of\n // __GTHREADS at this point since we haven't seen the correct symbol\n // yet, instead setup so that include/bits/stl_threads.h will know to"}, {"sha": "a5dd299631053c2d97db5b507f47e047c1ffdfae", "filename": "libstdc++-v3/include/bits/limits_generic.h", "status": "removed", "additions": 0, "deletions": 828, "changes": 828, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flimits_generic.h?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,828 +0,0 @@\n-// The template and inlines for the -*- C++ -*- numeric_limits classes.\n-\n-// Copyright (C) 2000-2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Note: this is not a conforming implementation.\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>\n-\n-//\n-// ISO 14882:1998\n-// 18.2.1\n-//\n-\n-/** @file limits_generic.h\n- *  ISO 14882:1998\n- *  18.2.1\n- */\n-\n-#ifndef _CPP_NUMERIC_LIMITS\n-#define _CPP_NUMERIC_LIMITS 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/std_cfloat.h>\n-#include <bits/std_climits.h>\n-#if defined( _GLIBCPP_USE_WCHAR_T) \n-#include <bits/std_cwchar.h>\n-#endif\n-\n-namespace std {\n-\n-    /// Rounding style determines the behavior of floating-point calculations.\n-    enum float_round_style {\n-        round_indeterminate       = -1,\n-        round_toward_zero         = 0,\n-        round_to_nearest          = 1,\n-        round_toward_infinity     = 2,\n-        round_toward_neg_infinity = 3\n-    };\n-\n-    /// This enum signals whether a type has denormalization.\n-    enum float_denorm_style {\n-        denorm_indeterminate = -1,\n-        denorm_absent        = 0,\n-        denorm_present       = 1\n-    };\n-\n-    /**\n-     *  [18.2.1]/1:  \"The numeric_limits component provides a C++ program\n-     *  with information about various properties of the implementation's\n-     *  representation of the fundamental types.\"  All of the standard\n-     *  fundamental types have specializations of this class template.\n-     *  @brief Properties of fundamental types on a per-platform basis.\n-     */\n-    template<typename _T> struct numeric_limits {\n-        static const bool is_specialized = false;\n-\n-        static _T min() throw() { return static_cast<_T>(0); }\n-        static _T max() throw() { return static_cast<_T>(0); }\n-\n-        static const int digits = 0;\n-        static const int digits10 = 0;\n-        static const bool is_signed = false;\n-        static const bool is_integer = false;\n-        static const bool is_exact = false;\n-        static const int radix = 0;\n-\n-        static _T epsilon() throw() { return static_cast<_T>(0); }\n-        static _T round_error() throw() { return static_cast<_T>(0); }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static _T infinity() throw()  { return static_cast<_T>(0); }\n-        static _T quiet_NaN() throw() { return static_cast<_T>(0); }\n-        static _T signaling_NaN() throw() { return static_cast<_T>(0); }\n-        static _T denorm_min() throw() { return static_cast<_T>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = false;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<typename _T> _T __limits_infinity();\n-    template<typename _T> _T __limits_quiet_NaN();\n-    template<typename _T> _T __limits_signaling_NaN();\n-    template<typename _T> _T __limits_denorm_min();\n-\n-    template<> struct numeric_limits<bool> {\n-        static const bool is_specialized = true;\n-\n-        static bool min() throw()\n-        { return false; }\n-        static bool max() throw()\n-        { return true; }\n-\n-        static const int digits = 1;\n-        static const int digits10 = 0;\n-        static const bool is_signed = false;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static bool epsilon() throw()\n-        { return 0; }\n-        static bool round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static bool infinity() throw()\n-        { return static_cast<bool>(0); }\n-        static bool quiet_NaN() throw()\n-        { return static_cast<bool>(0); }\n-        static bool signaling_NaN() throw()\n-        { return static_cast<bool>(0); }\n-        static bool denorm_min() throw()\n-        { return static_cast<bool>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<char> {\n-        static const bool is_specialized = true;\n-\n-        static char min() throw()\n-        { return CHAR_MIN; }\n-        static char max() throw()\n-        { return CHAR_MAX; }\n-\n-        static const int digits = 7;\n-        static const int digits10 = 2;\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static char epsilon() throw()\n-        { return 0; }\n-        static char round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static char infinity() throw()\n-        { return static_cast<char>(0); }\n-        static char quiet_NaN() throw()\n-        { return static_cast<char>(0); }\n-        static char signaling_NaN() throw()\n-        { return static_cast<char>(0); }\n-        static char denorm_min() throw()\n-        { return static_cast<char>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<signed char> {\n-        static const bool is_specialized = true;\n-\n-        static signed char min() throw()\n-        { return SCHAR_MIN; }\n-        static signed char max() throw()\n-        { return SCHAR_MAX; }\n-\n-        static const int digits = 7;\n-        static const int digits10 = 2;\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static signed char epsilon() throw()\n-        { return 0; }\n-        static signed char round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static signed char infinity() throw()\n-        { return static_cast<signed char>(0); }\n-        static signed char quiet_NaN() throw()\n-        { return static_cast<signed char>(0); }\n-        static signed char signaling_NaN() throw()\n-        { return static_cast<signed char>(0); }\n-        static signed char denorm_min() throw()\n-        { return static_cast<signed char>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<unsigned char> {\n-        static const bool is_specialized = true;\n-\n-        static unsigned char min() throw()\n-        { return 0; }\n-        static unsigned char max() throw()\n-        { return UCHAR_MAX; }\n-\n-        static const int digits = 8;\n-        static const int digits10 = 2;\n-        static const bool is_signed = false;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static unsigned char epsilon() throw()\n-        { return 0; }\n-        static unsigned char round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static unsigned char infinity() throw()\n-        { return static_cast<unsigned char>(0); }\n-        static unsigned char quiet_NaN() throw()\n-        { return static_cast<unsigned char>(0); }\n-        static unsigned char signaling_NaN() throw()\n-        { return static_cast<unsigned char>(0); }\n-        static unsigned char denorm_min() throw()\n-        { return static_cast<unsigned char>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = true;\n-\n-        static const bool traps = true;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#if defined( _GLIBCPP_USE_WCHAR_T) \n-    template<> struct numeric_limits<wchar_t> {\n-        static const bool is_specialized = true;\n-\n-        static wchar_t min() throw()\n-        { return WCHAR_MIN; }\n-        static wchar_t max() throw()\n-        { return WCHAR_MAX; }\n-\n-        static const int digits = 31;\n-        static const int digits10 = 9;\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static wchar_t epsilon() throw()\n-        { return 0; }\n-        static wchar_t round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static wchar_t infinity() throw()\n-        { return static_cast<wchar_t>(0); }\n-        static wchar_t quiet_NaN() throw()\n-        { return static_cast<wchar_t>(0); }\n-        static wchar_t signaling_NaN() throw()\n-        { return static_cast<wchar_t>(0); }\n-        static wchar_t denorm_min() throw()\n-        { return static_cast<wchar_t>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-#endif\n-\n-    template<> struct numeric_limits<short> {\n-        static const bool is_specialized = true;\n-\n-        static short min() throw()\n-        { return SHRT_MIN; }\n-        static short max() throw()\n-        { return SHRT_MAX; }\n-\n-        static const int digits = 15;\n-        static const int digits10 = 4;\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static short epsilon() throw()\n-        { return 0; }\n-        static short round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static short infinity() throw()\n-        { return static_cast<short>(0); }\n-        static short quiet_NaN() throw()\n-        { return static_cast<short>(0); }\n-        static short signaling_NaN() throw()\n-        { return static_cast<short>(0); }\n-        static short denorm_min() throw()\n-        { return static_cast<short>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<unsigned short> {\n-        static const bool is_specialized = true;\n-\n-        static unsigned short min() throw()\n-        { return 0; }\n-        static unsigned short max() throw()\n-        { return USHRT_MAX; }\n-\n-        static const int digits = 16;\n-        static const int digits10 = 4;\n-        static const bool is_signed = false;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static unsigned short epsilon() throw()\n-        { return 0; }\n-        static unsigned short round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static unsigned short infinity() throw()\n-        { return static_cast<unsigned short>(0); }\n-        static unsigned short quiet_NaN() throw()\n-        { return static_cast<unsigned short>(0); }\n-        static unsigned short signaling_NaN() throw()\n-        { return static_cast<unsigned short>(0); }\n-        static unsigned short denorm_min() throw()\n-        { return static_cast<unsigned short>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = true;\n-\n-        static const bool traps = true;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<int> {\n-        static const bool is_specialized = true;\n-\n-        static int min() throw()\n-        { return INT_MIN; }\n-        static int max() throw()\n-        { return INT_MAX; }\n-\n-#if INT_MAX > 32767\n-        static const int digits = 31;\n-        static const int digits10 = 9;\n-#else\n-        static const int digits = 15;\n-        static const int digits10 = 4;\n-#endif\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static int epsilon() throw()\n-        { return 0; }\n-        static int round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static int infinity() throw()\n-        { return static_cast<int>(0); }\n-        static int quiet_NaN() throw()\n-        { return static_cast<int>(0); }\n-        static int signaling_NaN() throw()\n-        { return static_cast<int>(0); }\n-        static int denorm_min() throw()\n-        { return static_cast<int>(0); }\n-\n-        static const bool is_iec559 = true;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<unsigned int> {\n-        static const bool is_specialized = true;\n-\n-        static unsigned int min() throw()\n-        { return 0; }\n-        static unsigned int max() throw()\n-        { return UINT_MAX; }\n-\n-#if INT_MAX > 32767\n-        static const int digits = 32;\n-        static const int digits10 = 9;\n-#else\n-        static const int digits = 16;\n-        static const int digits10 = 4;\n-#endif\n-        static const bool is_signed = false;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static unsigned int epsilon() throw()\n-        { return 0; }\n-        static unsigned int round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static unsigned int infinity() throw()\n-        { return static_cast<unsigned int>(0); }\n-        static unsigned int quiet_NaN() throw()\n-        { return static_cast<unsigned int>(0); }\n-        static unsigned int signaling_NaN() throw()\n-        { return static_cast<unsigned int>(0); }\n-        static unsigned int denorm_min() throw()\n-        { return static_cast<unsigned int>(0); }\n-\n-        static const bool is_iec559 = true;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = true;\n-\n-        static const bool traps = true;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<long> {\n-        static const bool is_specialized = true;\n-\n-        static long min() throw()\n-        { return LONG_MIN; }\n-        static long max() throw()\n-        { return LONG_MAX; }\n-\n-#if LONG_MAX > 2147483647\n-        static const int digits = 63;\n-        static const int digits10 = 18;\n-#elif LONG_MAX > 32767\n-        static const int digits = 31;\n-        static const int digits10 = 9;\n-#else\n-        static const int digits = 15;\n-        static const int digits10 = 4;\n-#endif\n-        static const bool is_signed = true;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static long epsilon() throw()\n-        { return 0; }\n-        static long round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static long infinity() throw()\n-        { return static_cast<long>(0); }\n-        static long quiet_NaN() throw()\n-        { return static_cast<long>(0); }\n-        static long signaling_NaN() throw()\n-        { return static_cast<long>(0); }\n-        static long denorm_min() throw()\n-        { return static_cast<long>(0); }\n-\n-        static const bool is_iec559 = true;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<unsigned long> {\n-        static const bool is_specialized = true;\n-\n-        static unsigned long min() throw()\n-        { return 0; }\n-        static unsigned long max() throw()\n-        { return ULONG_MAX; }\n-\n-#if LONG_MAX > 2147483647\n-        static const int digits = 64;\n-        static const int digits10 = 19;\n-#elif LONG_MAX > 32767\n-        static const int digits = 32;\n-        static const int digits10 = 9;\n-#else\n-        static const int digits = 16;\n-        static const int digits10 = 4;\n-#endif\n-        static const bool is_signed = false;\n-        static const bool is_integer = true;\n-        static const bool is_exact = true;\n-        static const int radix = 2;\n-        static unsigned long epsilon() throw()\n-        { return 0; }\n-        static unsigned long round_error() throw()\n-        { return 0; }\n-\n-        static const int min_exponent = 0;\n-        static const int min_exponent10 = 0;\n-        static const int max_exponent = 0;\n-        static const int max_exponent10 = 0;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static unsigned long infinity() throw()\n-        { return static_cast<unsigned long>(0); }\n-        static unsigned long quiet_NaN() throw()\n-        { return static_cast<unsigned long>(0); }\n-        static unsigned long signaling_NaN() throw()\n-        { return static_cast<unsigned long>(0); }\n-        static unsigned long denorm_min() throw()\n-        { return static_cast<unsigned long>(0); }\n-\n-        static const bool is_iec559 = true;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = true;\n-\n-        static const bool traps = true;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<float> {\n-        static const bool is_specialized = true;\n-\n-        static float min() throw()\n-        { return FLT_MIN; }\n-        static float max() throw()\n-        { return FLT_MAX; }\n-\n-        static const int digits = FLT_MANT_DIG;\n-        static const int digits10 = FLT_DIG;\n-        static const bool is_signed = true;\n-        static const bool is_integer = false;\n-        static const bool is_exact = false;\n-        static const int radix = FLT_RADIX;\n-        static float epsilon() throw()\n-        { return FLT_EPSILON; }\n-        static float round_error() throw()\n-        { return FLT_ROUNDS; }\n-\n-        static const int min_exponent = FLT_MIN_EXP;\n-        static const int min_exponent10 = FLT_MIN_10_EXP;\n-        static const int max_exponent = FLT_MAX_EXP;\n-        static const int max_exponent10 = FLT_MAX_10_EXP;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static float infinity() throw()\n-        { return static_cast<float>(0); }\n-        static float quiet_NaN() throw()\n-        { return static_cast<float>(0); }\n-        static float signaling_NaN() throw()\n-        { return static_cast<float>(0); }\n-        static float denorm_min() throw()\n-        { return static_cast<float>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<double> {\n-        static const bool is_specialized = true;\n-\n-        static double min() throw()\n-        { return DBL_MIN; }\n-        static double max() throw()\n-        { return DBL_MAX; }\n-\n-        static const int digits = DBL_MANT_DIG;\n-        static const int digits10 = DBL_DIG;\n-        static const bool is_signed = true;\n-        static const bool is_integer = false;\n-        static const bool is_exact = false;\n-        static const int radix = 2;\n-        static double epsilon() throw()\n-        { return DBL_EPSILON; }\n-        static double round_error() throw()\n-        { return 1.0; }\n-\n-        static const int min_exponent = DBL_MIN_EXP;\n-        static const int min_exponent10 = DBL_MIN_10_EXP;\n-        static const int max_exponent = DBL_MAX_EXP;\n-        static const int max_exponent10 = DBL_MAX_10_EXP;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static double infinity() throw()\n-        { return static_cast<double>(0); }\n-        static double quiet_NaN() throw()\n-        { return static_cast<double>(0); }\n-        static double signaling_NaN() throw()\n-        { return static_cast<double>(0); }\n-        static double denorm_min() throw()\n-        { return static_cast<double>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-    template<> struct numeric_limits<long double> {\n-        static const bool is_specialized = true;\n-\n-        static double min() throw()\n-        { return LDBL_MIN; }\n-        static double max() throw()\n-        { return LDBL_MAX; }\n-\n-        static const int digits = LDBL_MANT_DIG;\n-        static const int digits10 = LDBL_DIG;\n-        static const bool is_signed = true;\n-        static const bool is_integer = false;\n-        static const bool is_exact = false;\n-        static const int radix = 2;\n-        static double epsilon() throw()\n-        { return LDBL_EPSILON; }\n-        static double round_error() throw()\n-        { return 1.0L; }\n-\n-        static const int min_exponent = LDBL_MIN_EXP;\n-        static const int min_exponent10 = LDBL_MIN_10_EXP;\n-        static const int max_exponent = LDBL_MAX_EXP;\n-        static const int max_exponent10 = LDBL_MAX_10_EXP;\n-\n-        static const bool has_infinity = false;\n-        static const bool has_quiet_NaN = false;\n-        static const bool has_signaling_NaN = false;\n-        static const float_denorm_style has_denorm = denorm_absent;\n-        static const bool has_denorm_loss = false;\n-\n-        static double infinity() throw()\n-        { return static_cast<double>(0); }\n-        static double quiet_NaN() throw()\n-        { return static_cast<double>(0); }\n-        static double signaling_NaN() throw()\n-        { return static_cast<double>(0); }\n-        static double denorm_min() throw()\n-        { return static_cast<double>(0); }\n-\n-        static const bool is_iec559 = false;\n-        static const bool is_bounded = true;\n-        static const bool is_modulo = false;\n-\n-        static const bool traps = false;\n-        static const bool tinyness_before = false;\n-        static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-} // namespace std\n-\n-#endif // _CPP_NUMERIC_LIMITS"}, {"sha": "3fca4dcd0339057d21ab3d226d5f854aa67c095f", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -40,6 +40,7 @@\n \n #pragma GCC system_header\n \n+#include <bits/cpu_limits.h>\n #include <bits/c++config.h>\n \n //\n@@ -95,7 +96,7 @@\n #define __glibcpp_wchar_t_bits 32\n #endif\n #ifndef __glibcpp_wchar_t_is_signed\n-#define __glibcpp_wchar_t_is_signed __glibcpp_plain_char_is_signed\n+#define __glibcpp_wchar_t_is_signed false\n #endif\n #ifdef _GLIBCPP_USE_LONG_LONG\n #ifndef __glibcpp_long_long_bits\n@@ -1139,7 +1140,7 @@ namespace std\n \n \n   template<>\n-  struct numeric_limits<signed char>\n+    struct numeric_limits<signed char>\n     {\n       static const bool is_specialized = true;\n \n@@ -1960,8 +1961,8 @@ namespace std\n \n       static const bool traps = __glibcpp_long_double_traps; \n       static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n-      static const float_round_style round_style =\n-                    __glibcpp_long_double_round_style;\n+      static const float_round_style round_style = \n+        __glibcpp_long_double_round_style;\n     };\n \n #undef __glibcpp_long_double_min"}, {"sha": "4d244f278e58b0684d34affa874938e82c2390a7", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n@@ -104,7 +105,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "74a41f1351903b8afeb19a2ba47eb6b2547a99a1", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n@@ -106,7 +107,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "5d5fe78c4a1837d3a17e0154b727240748b35d0d", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n@@ -103,7 +104,6 @@ LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "cb33463511347606fedede7c70aeb60dce7bc59d", "filename": "libstdc++-v3/mknumeric_limits", "status": "removed", "additions": 0, "deletions": 367, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,367 +0,0 @@\n-#! /bin/sh\n-\n-# mknumeric_limits: generates\n-# - part of bits/std_limits.h completed by gen-num-limits.cc\n-# - src/limitsMEMBERS.cc that contains the definition of various\n-#   static data members of specialization of class template numeric_limits\n-#\n-\n-echo \"running mknumeric_limits\"\n-\n-BUILD_DIR=$1\n-if [ ! -d \"$BUILD_DIR\" ]; then\n-  echo \"build directory $BUILD_DIR not found, exiting.\"\n-  exit 1\n-fi\n-\n-if [ ! -d \"$BUILD_DIR/include\" ]; then\n-  mkdir  \"$BUILD_DIR/include\"\n-fi\n-\n-if [ ! -d \"$BUILD_DIR/include/bits\" ]; then\n-  mkdir  \"$BUILD_DIR/include/bits\"\n-fi\n-\n-if [ ! -d \"$BUILD_DIR/src\" ]; then\n-  mkdir  \"$BUILD_DIR/src\"\n-fi\n-\n-OUT_H=\"$BUILD_DIR/include/bits/std_limits.h\"\n-OUT_C=\"$BUILD_DIR/src/limitsMEMBERS.cc\"\n-\n-if [ -f $OUT_C ]; then\n-    rm -f $OUT_H $OUT_C $OUT_H-t $OUT_C-t\n-fi\n-\n-SRC_DIR=$2\n-if [ ! -d \"$SRC_DIR\" ]; then\n-  echo \"source directory $SRC_DIR not found, exiting.\"\n-  exit 1\n-fi\n-\n-XCOMPILE=$3\n-if [ $XCOMPILE -eq 1 ]; then\n-  echo \"using default values for cross compiles\"\n-  cp $SRC_DIR/include/bits/limits_generic.h $OUT_H\n-  cp $SRC_DIR/src/limits_generic.cc $OUT_C\n-  exit 0;\n-fi   \n-\n-CC=${CC=\"$BUILD_DIR/../../gcc/xgcc -B$BUILD_DIR/../../gcc/\"}\n-\n-# We output to a temporary file, so that we don't appear to have\n-# succeeded unless we actually do.\n-cat <<EOF > $OUT_H-t\n-// The template and inlines for the -*- C++ -*- numeric_limits classes.\n-\n-// Copyright (C) 1999-2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Note: this is not a conforming implementation.\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>\n-\n-//\n-// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!\n-//\n-\n-//\n-// ISO 14882:1998\n-// 18.2.1\n-//\n-\n-#ifndef _CPP_NUMERIC_LIMITS\n-#define _CPP_NUMERIC_LIMITS 1\n-\n-#include <bits/c++config.h>\n-#include <bits/std_cfloat.h>\n-\n-namespace std\n-{\n-  enum float_round_style \n-  {\n-    round_indeterminate       = -1,\n-    round_toward_zero         = 0,\n-    round_to_nearest          = 1,\n-    round_toward_infinity     = 2,\n-    round_toward_neg_infinity = 3\n-  };\n-\n-  enum float_denorm_style \n-  {\n-    denorm_indeterminate = -1,\n-    denorm_absent        = 0,\n-    denorm_present       = 1\n-  };\n-\n-  template<typename _Tp> \n-    struct numeric_limits \n-    {\n-      static const bool is_specialized = false;\n-\n-      static _Tp min() throw() { return static_cast<_Tp>(0); }\n-      static _Tp max() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int digits = 0;\n-      static const int digits10 = 0;\n-      static const bool is_signed = false;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = 0;\n-\n-      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n-      static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n-      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n-      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n-      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = false;\n-      static const bool is_modulo = false;\n-\n-      static const bool traps = false;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_specialized;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_signed;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_integer;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_exact;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::radix;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent10;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_infinity;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_quiet_NaN;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_signaling_NaN;\n-\n-  template<typename _Tp> \n-    const float_denorm_style\n-    numeric_limits<_Tp>::has_denorm;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_denorm_loss;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_iec559;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_bounded;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_modulo;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::traps;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::tinyness_before;\n-\n-  template<typename _Tp> \n-    const float_round_style\n-    numeric_limits<_Tp>::round_style;\n-\n-  template<typename _Tp> _Tp __limits_infinity();\n-  template<typename _Tp> _Tp __limits_quiet_NaN();\n-  template<typename _Tp> _Tp __limits_signaling_NaN();\n-  template<typename _Tp> _Tp __limits_denorm_min();\n-\n-EOF\n-\n-# Must turn off exceptions, because the C++ exception handling support\n-# routines have not been built yet.\n-echo \"$CC -I$BUILD_DIR -fno-exceptions \\\n-    -o $BUILD_DIR/src/gen-num-limits $SRC_DIR/src/gen-num-limits.cc\"\n-\n-{ $CC -I$BUILD_DIR -fno-exceptions \\\n-    -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\"\n-} || {\n-  echo \"gen-num-limits failed to build, exiting.\"\n-  exit 1\n-}\n-\n-\"$BUILD_DIR/src/gen-num-limits\" >> $OUT_H-t || {\n-  echo \"gen-num-limits failed to execute, exiting.\"\n-  exit 1\n-}\n-\n-cat <<EOF >> $OUT_H-t\n-} // namespace std\n-\n-#endif // _CPP_NUMERIC_LIMITS\n-EOF\n-\n-trait_name=numeric_limits\n-\n-cat <<EOF > $OUT_C-t\n-// Static data members of -*- C++ -*- numeric_limits classes\n-\n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>\n-\n-//\n-// ISO C++ 14882:1998\n-// 18.2.1\n-//\n-\n-#include <bits/std_limits.h>\n-namespace std {\n-EOF\n-\n-for type_name in bool char 'signed char' 'unsigned char' \\\n-\t    short 'unsigned short' int 'unsigned int' \\\n-\t    long 'unsigned long' 'long long' 'unsigned long long' \\\n-\t    float double 'long double'\n-    do\n-     grep \"<$type_name>\" $OUT_H-t >/dev/null 2>&1 || continue\n-     cat <<EOF >> $OUT_C-t\n-\n-    const bool $trait_name<$type_name>::is_specialized;\n-    const int  $trait_name<$type_name>::digits;\n-    const int  $trait_name<$type_name>::digits10;\n-    const bool $trait_name<$type_name>::is_signed;\n-    const bool $trait_name<$type_name>::is_integer;\n-    const bool $trait_name<$type_name>::is_exact;\n-    const int  $trait_name<$type_name>::radix;\n-    const int  $trait_name<$type_name>::min_exponent;\n-    const int  $trait_name<$type_name>::min_exponent10;\n-    const int  $trait_name<$type_name>::max_exponent;\n-    const int  $trait_name<$type_name>::max_exponent10;\n-    const bool $trait_name<$type_name>::has_infinity;\n-    const bool $trait_name<$type_name>::has_quiet_NaN;\n-    const bool $trait_name<$type_name>::has_signaling_NaN;\n-    const float_denorm_style $trait_name<$type_name>::has_denorm;\n-    const bool $trait_name<$type_name>::has_denorm_loss;\n-    const bool $trait_name<$type_name>::is_iec559;\n-    const bool $trait_name<$type_name>::is_bounded;\n-    const bool $trait_name<$type_name>::is_modulo;\n-    const bool $trait_name<$type_name>::traps;\n-    const bool $trait_name<$type_name>::tinyness_before;\n-    const float_round_style $trait_name<$type_name>::round_style;\n-EOF\n-\n-done\n-\n-cat <<EOF >> $OUT_C-t\n-} // namespace std\n-\n-\n-EOF\n-\n-mv $OUT_C-t $OUT_C\n-mv $OUT_H-t $OUT_H\n-\n-"}, {"sha": "b8a93ae010d1c93c66dc96dff277e69034e7805a", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n@@ -106,7 +107,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "b930b4f0a48bb86217131c07feff5adb8f2bb0d1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -75,6 +75,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXXCPP = @CXXCPP@\n@@ -100,7 +101,6 @@ LIBICONV = @LIBICONV@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}, {"sha": "6fbfdb73fff90332032867b63e57286db69ff013", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "removed", "additions": 0, "deletions": 844, "changes": 844, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,844 +0,0 @@\n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// Written by Gabriel Dos Reis <gdr@gcc.gnu.org>\n-// \n-// Note: This program outputs speciliazations of ISO C++ class template\n-// numeric_limits<> as described in 18.2.1.\n-// Do not compile with optimization turned on.\n-//\n-\n-#include <config.h>\n-#include <limits.h>\n-#include <float.h>\n-#include <stdio.h>\n-#include <signal.h>\n-#include <setjmp.h>\n-#include <math.h>\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-#include <wchar.h>\n-#endif\n-\n-// mknumeric_limits will first try to compile this file with\n-// HAVE_SIGSETJMP.  If it fails, then it will try without it.  Some\n-// systems, such as GNU/Linux/sparc, would remain with the signal\n-// blocked if the signal handler uses longjmp instead of siglongjmp.\n-// We assume here setjmp/longjmp will preserve the sigblock mask if\n-// sigsetjmp is not present.\n-\n-#if ! HAVE_SIGSETJMP \n-# define sigjmp_buf jmp_buf \n-# define sigsetjmp(buf, save) setjmp (buf) \n-# define siglongjmp(env, ret) longjmp (env, ret) \n-#endif \n-\n-const char tab[] = \"    \";\n-const char tab2[] = \"        \";\n-const char* bool_alpha[] = { \"false\", \"true\" };\n-const double log10_of_two = .30102999566398119;\n-const int bits_per_byte = CHAR_BIT;\n-const int integer_base_rep = 2;\n-\n-\n-//\n-// numeric_limits members are all static (as it is usually the case for\n-// traits) and of three kinds: predicates, values and functions.\n-// Actually there is no harm to think of values and functions as being\n-// of the same kind.  Their main purposes are to denote values.\n-//\n-\n-\n-//\n-// Integer types: bool, char, signed char, unsigned char, wchar_t,\n-// short, unsigned short, int, unsigned, long, unsigned long,\n-// and possibly long long and unsigned long long\n-//\n-// Here ISO 14882 disagrees with LIA-1 in stating bool to be an\n-// integer type.  Therefore itn't suprising to see ambiguity in the\n-// interpretation of some members.  Need to keep track of the discusion\n-// in LWG on this topic.\n-//\n-// Integer types are first promoted to int or long before the actual\n-// arithmetical operations are carried out.  Therefore testing whether\n-// traps occur amounts -- for integer types -- to test whether traps\n-// occur for int, unsigned, long, unsigned long. Furthermore\n-// overflow cannot happen for unsigned integer types.\n-\n-sigjmp_buf env;\n-\n-/* The prototype of signal() may vary.  Accomodate variations such as\n-   void(*)(int) and void(*)(...).  */\n-template <typename signal_handler_type, typename signal_number_type>\n-inline void (*signal_adapter (signal_handler_type\n-\t\t\t      (*signal_func)(signal_number_type,\n-\t\t\t\t\t     signal_handler_type),\n-\t\t\t      signal_number_type arg,\n-\t\t\t      void (*handler)(int)))(int)\n-{\n-  return (void (*)(int))(*signal_func)(arg, (signal_handler_type)handler);\n-}\n-\n-template <typename signal_handler_type, typename signal_number_type>\n-inline void (*signal_adapter (signal_handler_type (*signal_func)(...),\n-\t\t\t      signal_number_type arg,\n-\t\t\t      void (*handler)(int)))(int)\n-{\n-  return (void (*)(int))(*signal_func)(arg, (signal_handler_type)handler);\n-}\n-\n-void signal_handler(int sig) \n-{ \n-#ifdef __CYGWIN__\n-  static sigset_t x;\n-  signal_adapter (signal, sig, signal_handler);\n-  sigemptyset (&x);\n-  sigprocmask(SIG_SETMASK, &x, NULL);\n-#endif /* __CYGWIN__ */\n-  siglongjmp(env, sig); \n-}\n-\n-template<typename Operation>\n-bool trapping(const Operation& op)\n-{\n-    if (sigsetjmp(env, 1) == 0) op();\n-    else return true;\n-    return false;\n-}\n-\n-template<typename T> \n-  struct division_by_zero \n-  {\n-    void operator() () const\n-    {\n-      volatile T zero = T();\n-      volatile T one = T(1);\n-      volatile T infinity = one / zero;\n-    }\n-  };\n-\n-template<typename T> \n-  struct overflow \n-  {\n-    void operator() () const\n-    {\n-      T i = T(1);\n-      T j = T();\n-      while (i>j) {\n-\tj = i;\n-\ti = i * 2 + 1;\n-      }\n-    }\n-  };\n-\n-template<typename T> struct underflow { };\n-\n-\n-// Set various signals handler for trapping aritmetic ops.\n-void set_signals_handler()\n-{\n-  signal_adapter(signal, SIGFPE, signal_handler);\n-  signal_adapter(signal, SIGTRAP, signal_handler);\n-  // This is necessary for Linux/SPARC.\n-  signal_adapter(signal, SIGILL, signal_handler);\n-}\n-\n-// traps\n-template<typename T> void traps()\n-{\n-  fflush(NULL);\n-  set_signals_handler();\n-  bool trap_flag = trapping(division_by_zero<T>());\n-  set_signals_handler();\n-  trap_flag = trap_flag || trapping(overflow<T>());\n-  const char* p = bool_alpha[trap_flag];\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool traps\", p);    \n-}\n-\n-#define SPECIALIZE_TRAPPING(T)                                          \\\n-template<> void traps< T >()                                            \\\n-{       \t\t\t\t\t\t\t\t\\\n-  fflush(NULL);                                                         \\\n-  set_signals_handler();                                                \\\n-  const char* p = bool_alpha[trapping(division_by_zero<T>())];          \\\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool traps\", p);           \\\n-}\n-\n-SPECIALIZE_TRAPPING(unsigned char);\n-SPECIALIZE_TRAPPING(unsigned short);\n-SPECIALIZE_TRAPPING(unsigned int);\n-SPECIALIZE_TRAPPING(unsigned long);\n-#if _GLIBCPP_USE_LONG_LONG\n-SPECIALIZE_TRAPPING(unsigned long long);\n-#endif\n-\n-#undef SPECIALIZE_TRAPPING\n-\n-template<typename T> \n-  struct type_name_trait \n-  {\n-    static const char type_name[];\n-    static const char trait_name[];\n-  };\n-\n-#define DEFINED_TYPE_NAME(T)                                            \\\n-template<>                                                              \\\n-const char type_name_trait< T >::type_name[] = #T;                      \\\n-template<>                                                              \\\n-const char type_name_trait< T >::trait_name[] = \"numeric_limits<\" #T \">\";\n-\n-DEFINED_TYPE_NAME(bool);\n-DEFINED_TYPE_NAME(char);\n-DEFINED_TYPE_NAME(signed char);\n-DEFINED_TYPE_NAME(unsigned char);\n-DEFINED_TYPE_NAME(wchar_t);\n-DEFINED_TYPE_NAME(short);\n-DEFINED_TYPE_NAME(unsigned short);\n-DEFINED_TYPE_NAME(int);\n-DEFINED_TYPE_NAME(unsigned int);\n-DEFINED_TYPE_NAME(long);\n-DEFINED_TYPE_NAME(unsigned long);\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-DEFINED_TYPE_NAME(long long);\n-DEFINED_TYPE_NAME(unsigned long long);\n-#endif\n-DEFINED_TYPE_NAME(float);\n-DEFINED_TYPE_NAME(double);\n-DEFINED_TYPE_NAME(long double);\n-\n-#undef DEFINED_TYPE_NAME\n-\n-// declarator\n-template<typename T> \n-  struct declarator : type_name_trait<T> \n-  {\n-    typedef type_name_trait<T> base;\n-    static void start()\n-    { \n-      printf(\"%s%s %s %s\\n\", tab, \"template<> struct\", base::trait_name, \"{\"); \n-    }\n-    \n-    static void end()\n-    { printf(\"%s};\\n\\n\", tab); }\n-  };\n-\n-\n-//\n-// Predicates\n-// \n-template<typename T> \n-  struct predicate \n-  {\n-    static const bool is_signed;\n-    static const bool is_integer;\n-    static const bool is_exact;\n-    \n-    static const bool has_infinity;\n-    static const bool has_quiet_nan;\n-    static const bool has_signaling_nan;\n-    static const bool has_denorm;\n-    static const bool has_denorm_loss;\n-    \n-    static const bool is_iec559;\n-    static const bool is_bounded;\n-    \n-    static const bool traps;\n-  };\n-\n-template<typename T>\n-const bool predicate<T>::is_signed = T(-1) < 0;\n-\n-// Non integer types should specialize this\n-template<typename T>\n-const bool predicate<T>::is_integer = true;\n-\n-// Non exact types should specialize this;\n-template<typename T>\n-const bool predicate<T>::is_exact = true;\n-\n-#define SPECIALIZE_EXACTNESS(T)\t\t\t\t\t\t\\\n-template<>                                                              \\\n-const bool predicate< T >::is_integer = false;\t\t\t\t\\\n-template<>                                                              \\\n-const bool predicate< T >::is_exact = false\n-\n-SPECIALIZE_EXACTNESS(float);\n-SPECIALIZE_EXACTNESS(double);\n-SPECIALIZE_EXACTNESS(long double);\n-\n-#undef SPECIALIZE_EXACTNESS\n-\n-\n-template<typename T>\n-const bool predicate<T>::has_infinity = false;\n-\n-template<typename T>\n-const bool predicate<T>::has_quiet_nan = false;\n-\n-template<typename T>\n-const bool predicate<T>::has_signaling_nan = false;\n-\n-template<typename T>\n-const bool predicate<T>::has_denorm = false;\n-\n-template<typename T>\n-const bool predicate<T>::has_denorm_loss = false;\n-\n-\n-\n-// Each type conforming to IEC559 specifications should specialize this.\n-template<typename T>\n-const bool predicate<T>::is_iec559 = false;\n-\n-#define SPECIALIZE_IEC559(T)\t\t\t\t\t\t\\\n-template<>                                                              \\\n-const bool predicate< T >::is_iec559 = true\n-\n-SPECIALIZE_IEC559(bool);\n-SPECIALIZE_IEC559(int);\n-SPECIALIZE_IEC559(unsigned int);\n-SPECIALIZE_IEC559(long);\n-SPECIALIZE_IEC559(unsigned long);\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-SPECIALIZE_IEC559(long long);\n-SPECIALIZE_IEC559(unsigned long long);\n-#endif\n-\n-#undef SPECIALIZE_IEC559\n-\n-//\n-// Values\n-// \n-template<typename T> \n-  struct value \n-  {\n-    static const char min[];\n-    static const char max[];\n-    \n-    static const int digits;\n-    static const int digits10;\n-    \n-    static const int radix;\n-    static const char epsilon[];\n-    static const char round_error[];\n-    \n-    static const int min_exponent;\n-    static const int min_exponent10;\n-    static const int max_exponent;\n-    static const int max_exponent10;\n-  };\n-\n-#define DEFINE_EXTREMA(T, m, M)  DO_DEFINE_EXTREMA(T, m, M)\n-#define DO_DEFINE_EXTREMA(T, m, M)\t\t\t\t\t\\\n-template<>                                                              \\\n-const char value< T >::min[] = #m;\t\t\t\t\t\\\n-template<>                                                              \\\n-const char value< T >::max[] = #M\n-\n-DEFINE_EXTREMA(bool, false, true);\n-DEFINE_EXTREMA(char, CHAR_MIN, CHAR_MAX);\n-DEFINE_EXTREMA(signed char, SCHAR_MIN, SCHAR_MAX);\n-DEFINE_EXTREMA(unsigned char, 0, UCHAR_MAX);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-DEFINE_EXTREMA(wchar_t, WCHAR_MIN, WCHAR_MAX);\n-#endif\n-DEFINE_EXTREMA(short, SHRT_MIN, SHRT_MAX);\n-DEFINE_EXTREMA(unsigned short, 0, USHRT_MAX);\n-DEFINE_EXTREMA(int, INT_MIN, INT_MAX);\n-DEFINE_EXTREMA(unsigned int, 0, UINT_MAX);\n-DEFINE_EXTREMA(long, LONG_MIN, LONG_MAX);\n-DEFINE_EXTREMA(unsigned long, 0, ULONG_MAX);\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-DEFINE_EXTREMA(long long, (-__LONG_LONG_MAX__-1), __LONG_LONG_MAX__);\n-DEFINE_EXTREMA(unsigned long long, 0, (__LONG_LONG_MAX__ * 2ULL + 1));\n-#endif\n-DEFINE_EXTREMA(float, FLT_MIN, FLT_MAX);\n-DEFINE_EXTREMA(double, DBL_MIN, DBL_MAX);\n-DEFINE_EXTREMA(long double, LDBL_MIN, LDBL_MAX);\n-\n-#undef DEFINE_EXTREMA\n-#undef DO_DEFINE_EXTREMA\n-\n-// Non integer types should specialize this\n-template<typename T>\n-const int value<T>::digits =\n-      bits_per_byte * sizeof(T) - int(predicate<T>::is_signed);\n-\n-// Non integer types should specialize this.  Always two for\n-// integer types.\n-template<typename T>\n-const int value<T>::radix = 2;\n-\n-#define SPECIALIZE_DIGITS(T, D, D10)\t\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::digits = D;\t\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::digits10 = D10\n-\n-SPECIALIZE_DIGITS(float, FLT_MANT_DIG, FLT_DIG);\n-SPECIALIZE_DIGITS(double, DBL_MANT_DIG, DBL_DIG);\n-SPECIALIZE_DIGITS(long double, LDBL_MANT_DIG, LDBL_DIG);\n-\n-#undef SPECIALIZE_DIGITS\n-\n-\n-#define SPECIALIZE_RADIX(T, R)\t\t\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::radix = R\n-\n-SPECIALIZE_RADIX(float, FLT_RADIX);\n-SPECIALIZE_RADIX(double, FLT_RADIX);\n-SPECIALIZE_RADIX(long double, FLT_RADIX);\n-\n-#undef SPECIALIZE_RADIX\n-\n-// Non integer types should specialize this.  \n-// Unfortunately, systems that don't deal with weak linking correctly\n-// (Ie, hpux and aix), cannot use this sophisticated yet sane method. So,\n-// explicitly instantiate all the data members here so that they will\n-// be happy.\n-\n-// sophisticated, sane method\n-#if 0\n-template<typename T>\n-const char value<T>::epsilon[] = \"0\";\n-#endif\n-\n-#define SPECIALIZE_EPSILON(T, E) DO_SPECIALIZE_EPSILON(T, E)\n-#define DO_SPECIALIZE_EPSILON(T, E)\t\t\\\n-template<> \t\t\t\t\t\\\n-const char value< T >::epsilon[] = #E\n-\n-// unsophisticated, gross method\n-#if 1\n-SPECIALIZE_EPSILON(bool, 0);\n-SPECIALIZE_EPSILON(char, 0);\n-SPECIALIZE_EPSILON(unsigned char, 0);\n-SPECIALIZE_EPSILON(signed char, 0);\n-SPECIALIZE_EPSILON(wchar_t, 0);\n-SPECIALIZE_EPSILON(short, 0);\n-SPECIALIZE_EPSILON(unsigned short, 0);\n-SPECIALIZE_EPSILON(int, 0);\n-SPECIALIZE_EPSILON(unsigned int, 0);\n-SPECIALIZE_EPSILON(long, 0);\n-SPECIALIZE_EPSILON(unsigned long, 0);\n-SPECIALIZE_EPSILON(long long, 0);\n-SPECIALIZE_EPSILON(unsigned long long, 0);\n-#endif\n-\n-SPECIALIZE_EPSILON(float, FLT_EPSILON);\n-SPECIALIZE_EPSILON(double, DBL_EPSILON);\n-SPECIALIZE_EPSILON(long double, LDBL_EPSILON);\n-\n-#undef DO_SPECIALIZE_EPSILON\n-#undef SPECIALIZE_EPSILON\n-\n-\n-// Non integer types should specialize this.  \n-// Unfortunately, systems that don't deal with weak linking correctly\n-// (Ie, hpux and aix), cannot use this sophisticated yet sane method. So,\n-// explicitly instantiate all the data members here so that they will\n-// be happy.\n-\n-// sophisticated, sane method\n-#if 0\n-template<typename T>\n-const char value<T>::round_error[] = \"0\";\n-#endif\n-\n-#define SPECIALIZE_ROUND_ERROR(T, R) \t\t\\\n-template<>\t\t\t\t\t\\\n-const char value< T >::round_error[] = #R\n-// unsophisticated, gross method\n-#if 1\n-SPECIALIZE_ROUND_ERROR(bool, 0);\n-SPECIALIZE_ROUND_ERROR(char, 0);\n-SPECIALIZE_ROUND_ERROR(unsigned char, 0);\n-SPECIALIZE_ROUND_ERROR(signed char, 0);\n-SPECIALIZE_ROUND_ERROR(wchar_t, 0);\n-SPECIALIZE_ROUND_ERROR(short, 0);\n-SPECIALIZE_ROUND_ERROR(unsigned short, 0);\n-SPECIALIZE_ROUND_ERROR(int, 0);\n-SPECIALIZE_ROUND_ERROR(unsigned int, 0);\n-SPECIALIZE_ROUND_ERROR(long, 0);\n-SPECIALIZE_ROUND_ERROR(unsigned long, 0);\n-SPECIALIZE_ROUND_ERROR(long long, 0);\n-SPECIALIZE_ROUND_ERROR(unsigned long long, 0);\n-#endif\n-\n-SPECIALIZE_ROUND_ERROR(float, 1.0f);\n-SPECIALIZE_ROUND_ERROR(double, 1.0);\n-SPECIALIZE_ROUND_ERROR(long double, 1.0L);\n-\n-#undef SPECIALIZE_ROUND_ERROR\n-\n-\n-template<typename T>\n-const int value<T>::min_exponent = 0;\n-\n-template<typename T>\n-const int value<T>::min_exponent10 = 0;\n-\n-template<typename T>\n-const int value<T>::max_exponent = 0;\n-\n-template<typename T>\n-const int value<T>::max_exponent10 = 0;\n-\n-#define SPECIALIZE_EXPONENTS(T, m, m10, M, M10)\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::min_exponent = m;\t\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::min_exponent10 = m10;\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::max_exponent = M;\t\t\\\n-template<>\t\t\t\t\t\\\n-const int value< T >::max_exponent10 = M10\n-\n-SPECIALIZE_EXPONENTS(float, FLT_MIN_EXP, FLT_MIN_10_EXP,\n-                     FLT_MAX_EXP, FLT_MAX_10_EXP);\n-SPECIALIZE_EXPONENTS(double, DBL_MIN_EXP, DBL_MIN_10_EXP,\n-                     DBL_MAX_EXP, DBL_MAX_10_EXP);\n-SPECIALIZE_EXPONENTS(long double, LDBL_MIN_EXP, LDBL_MIN_10_EXP,\n-                     LDBL_MAX_EXP, LDBL_MAX_10_EXP);\n-\n-#undef SPECIALIZE_EXPONENTS\n-\n-//\n-// Functions to output predicates and values.\n-//\n-\n-template<typename T> void is_signed()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool is_signed\",\n-\t bool_alpha[predicate<T>::is_signed]);\n-}\n-\n-// a fundamental type is modulo iff it isn't signed\n-template<typename T> void is_modulo()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool is_modulo\",\n-\t bool_alpha[! predicate<T>::is_signed]);\n-}\n-\n-template<typename T>\n-void min()\n-{\n-  printf(\"%s%s%s%s\\n%s%s%s%s\\n\", tab2, \"static \", declarator<T>::type_name,\n-\t \" min() throw()\", tab2, \"{ return \", value<T>::min, \"; }\");\n-}\n-\n-template<typename T>\n-void max()\n-{\n-  printf(\"%s%s%s%s\\n%s%s%s%s\\n\", tab2, \"static \", declarator<T>::type_name,\n-\t \" max() throw()\", tab2, \"{ return \", value<T>::max, \"; }\");\n-}\n-\n-template<typename T>\n-void is_integer()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool is_integer\",\n-\t bool_alpha[predicate<T>::is_integer]);        \n-}\n-\n-template<typename T>\n-void is_exact()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool is_exact\",\n-\t bool_alpha[predicate<T>::is_exact]);    \n-}\n-\n-template<typename T>\n-void digits()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int digits\",\n-\t value<T>::digits);\n-}\n-\n-template<typename T>\n-void digits10()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int digits10\",\n-\t int(log10_of_two * value<T>::digits) + 1);\n-}\n-\n-template<typename T>\n-void radix()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int radix\",\n-\t value<T>::radix);\n-}\n-\n-template<typename T>\n-void epsilon()\n-{\n-  printf(\"%s%s %s %s\\n%s%s %s%s\\n\", tab2, \"static\",\n-\t declarator<T>::type_name, \"epsilon() throw()\",\n-\t tab2, \"{ return\", value<T>::epsilon, \"; }\");\n-}\n-\n-template<typename T>\n-void round_error()\n-{\n-  printf(\"%s%s %s %s\\n%s%s %s%s\\n\", tab2, \"static\",\n-\t declarator<T>::type_name, \"round_error() throw()\",\n-\t tab2, \"{ return\", value<T>::round_error, \"; }\");\n-}\n-\n-template<typename T>\n-void min_exponent()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int min_exponent\",\n-\t value<T>::min_exponent);    \n-}\n-\n-template<typename T>\n-void min_exponent10()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int min_exponent10\",\n-\t value<T>::min_exponent10);    \n-}\n-\n-template<typename T>\n-void max_exponent()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int max_exponent\",\n-\t value<T>::max_exponent);    \n-}\n-\n-template<typename T>\n-void max_exponent10()\n-{\n-  printf(\"%s%s = %d;\\n\", tab2, \"static const int max_exponent10\",\n-\t value<T>::max_exponent10);    \n-}\n-\n-template<typename T>\n-void has_infinity()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool has_infinity\",\n-\t bool_alpha[predicate<T>::has_infinity]);\n-}\n-\n-template<typename T>\n-void has_quiet_nan()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool has_quiet_NaN\",\n-\t bool_alpha[predicate<T>::has_quiet_nan]);\n-}\n-\n-template<typename T>\n-void has_signaling_nan()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool has_signaling_NaN\",\n-\t bool_alpha[predicate<T>::has_signaling_nan]);\n-}\n-\n-template<typename T>\n-void has_denorm_loss()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool has_denorm_loss\",\n-\t bool_alpha[predicate<T>::has_denorm_loss]);\n-}\n-\n-template<typename T> \n-  struct infinity_trait \n-  {\n-    static void has_denorm()\n-    {\n-      printf(\"%s%s;\\n\", tab2, \"static const float_denorm_style \"\n-\t     \"has_denorm = denorm_absent\");\n-    }\n-    \n-    static void infinity()\n-    {\n-      printf(\"%s%s %s %s\\n%s%s%s%s\\n\", tab2, \"static\",\n-\t     declarator<T>::type_name, \"infinity() throw()\", tab2, \n-\t     \"{ return static_cast<\", declarator<T>::type_name, \">(0); }\");\n-    }\n-\n-    static void quiet_NaN()\n-    {\n-      printf(\"%s%s %s %s\\n%s%s%s%s\\n\", tab2, \"static\",\n-\t     declarator<T>::type_name, \"quiet_NaN() throw()\",\n-\t     tab2, \"{ return static_cast<\", declarator<T>::type_name, \n-\t     \">(0); }\");\n-    }\n-    \n-    static void signaling_NaN()\n-    {\n-      printf(\"%s%s %s %s\\n%s%s%s%s\\n\", tab2, \"static\",\n-\t     declarator<T>::type_name, \"signaling_NaN() throw()\",\n-\t     tab2, \"{ return static_cast<\", declarator<T>::type_name, \n-\t     \">(0); }\");\n-    }\n-\n-    static void denorm_min()\n-    {\n-      printf(\"%s%s %s %s\\n%s%s%s%s\\n\", tab2, \"static\",\n-\t     declarator<T>::type_name, \"denorm_min() throw()\",\n-\t     tab2, \"{ return static_cast<\", declarator<T>::type_name, \n-\t     \">(0); }\");\n-    }\n-  };\n-\n-\n-template<typename T>\n-void is_iec559()\n-{\n-  printf(\"%s%s = %s;\\n\", tab2, \"static const bool is_iec559\",\n-\t bool_alpha[predicate<T>::is_iec559]);\n-}\n-\n-// tinyness_before\n-template<typename T>\n-void tinyness_before()\n-{\n-  printf(\"%s%s;\\n\", tab2, \"static const bool tinyness_before = false\");\n-}\n-\n-// round style\n-template<typename T>\n-void round_style()\n-{\n-  printf(\"%s%s;\\n\", tab2, \"static const float_round_style \"\n-\t \"round_style = round_toward_zero\");    \n-}\n-\n-\n-\n-// type traits\n-template<typename T> \n-  struct type_trait \n-  {\n-    type_trait()\n-    {\n-      declarator<T>::start();\n-      printf(\"%s%s;\\n\\n\", tab2, \"static const bool is_specialized = true\");\n-      min<T>();\n-      max<T>();\n-      printf(\"\\n\");\n-      digits<T>();\n-      digits10<T>();\n-      is_signed<T>();\n-      is_integer<T>();\n-      is_exact<T>();\n-      radix<T>();\n-      epsilon<T>();\n-      round_error<T>();\n-      printf(\"\\n\");\n-      min_exponent<T>();\n-      min_exponent10<T>();\n-      max_exponent<T>();\n-      max_exponent10<T>();\n-      printf(\"\\n\");\n-      has_infinity<T>();\n-      has_quiet_nan<T>();\n-      has_signaling_nan<T>();\n-      infinity_trait<T>::has_denorm();\n-      has_denorm_loss<T>();\n-      printf(\"\\n\");\n-      infinity_trait<T>::infinity();\n-      infinity_trait<T>::quiet_NaN();\n-      infinity_trait<T>::signaling_NaN();\n-      infinity_trait<T>::denorm_min();\n-      printf(\"\\n\");\n-      is_iec559<T>();\n-      printf(\"%s%s;\\n\", tab2, \"static const bool is_bounded = true\");\n-      is_modulo<T>();\n-      printf(\"\\n\");\n-      traps<T>();\n-      tinyness_before<T>();\n-      round_style<T>();\n-      declarator<T>::end();\n-    }\n-  };\n-\n-int main()\n-{\n-  type_trait<bool>();\n-  \n-  type_trait<char>();\n-  type_trait<signed char>();\n-  type_trait<unsigned char>();\n-#if defined( _GLIBCPP_USE_WCHAR_T) \n-  type_trait<wchar_t>();\n-#endif\n-  \n-  type_trait<short>();\n-  type_trait<unsigned short>();\n-  \n-  type_trait<int>();\n-  type_trait<unsigned int>();\n-  \n-  type_trait<long>();\n-  type_trait<unsigned long>();\n-  \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  type_trait<long long>();\n-  type_trait<unsigned long long>();\n-#endif\n-\n-  type_trait<float>();\n-  type_trait<double>();\n-  type_trait<long double>();\n-  \n-  // x86/linux gets this weirdness for the min/max functions:\n-  // static long double min() throw()\n-  // { return (__extension__ ((union __convert_long_double) \n-  // {__convert_long_double_i: {0x0, 0x80000000, 0x1, 0x0}})\n-  // .__convert_long_double_d); }\n-}\n-\n-// G++ doesn't have support for automatic instantiation of static data\n-// members on platforms that don't have weak symbols.  On AIX, in\n-// particular, static data members must be explicitly instantiated.\n-// So, we explicitly instantiate some of the ones we need.  To save\n-// typing, we don't name the static data members explicitly; we\n-// instead name their containing types.\n-\n-#define INSTANTIATIONS(TYPE)\t\t\t\\\n-  template struct predicate<TYPE>;\t\t\\\n-  template struct value<TYPE>\n-\n-INSTANTIATIONS (bool);\n-INSTANTIATIONS (char);\n-INSTANTIATIONS (signed char);\n-INSTANTIATIONS (unsigned char);\n-INSTANTIATIONS (short);\n-INSTANTIATIONS (unsigned short);\n-INSTANTIATIONS (int);\n-INSTANTIATIONS (unsigned int);\n-INSTANTIATIONS (long);\n-INSTANTIATIONS (unsigned long);\n-INSTANTIATIONS (float);\n-INSTANTIATIONS (double);\n-INSTANTIATIONS (long double);\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-INSTANTIATIONS (wchar_t);\n-#endif"}, {"sha": "38bf297aa52e757f48407ba2901b713417c811e5", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -35,6 +35,7 @@\n //\n \n #include <bits/std_limits.h>\n+\n namespace std \n {\n   // bool\n@@ -425,5 +426,3 @@ namespace std\n   const bool numeric_limits<long double>::tinyness_before;\n   const float_round_style numeric_limits<long double>::round_style;\n } // namespace std\n-\n-"}, {"sha": "655e365500303704ebf042b80167f391757160be", "filename": "libstdc++-v3/src/limits_generic.cc", "status": "removed", "additions": 0, "deletions": 340, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fsrc%2Flimits_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91dc81f990ea3d5d3037ac7478a1b47a2e4ad852/libstdc%2B%2B-v3%2Fsrc%2Flimits_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits_generic.cc?ref=91dc81f990ea3d5d3037ac7478a1b47a2e4ad852", "patch": "@@ -1,340 +0,0 @@\n-// Static data members of -*- C++ -*- numeric_limits classes\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>\n-\n-//\n-// ISO C++ 14882:1998\n-// 18.2.1\n-//\n-\n-#include <bits/std_limits.h>\n-namespace std {\n-\n-    const bool numeric_limits<bool>::is_specialized;\n-    const int  numeric_limits<bool>::digits;\n-    const int  numeric_limits<bool>::digits10;\n-    const bool numeric_limits<bool>::is_signed;\n-    const bool numeric_limits<bool>::is_integer;\n-    const bool numeric_limits<bool>::is_exact;\n-    const int  numeric_limits<bool>::radix;\n-    const int  numeric_limits<bool>::min_exponent;\n-    const int  numeric_limits<bool>::min_exponent10;\n-    const int  numeric_limits<bool>::max_exponent;\n-    const int  numeric_limits<bool>::max_exponent10;\n-    const bool numeric_limits<bool>::has_infinity;\n-    const bool numeric_limits<bool>::has_quiet_NaN;\n-    const bool numeric_limits<bool>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<bool>::has_denorm;\n-    const bool numeric_limits<bool>::has_denorm_loss;\n-    const bool numeric_limits<bool>::is_iec559;\n-    const bool numeric_limits<bool>::is_bounded;\n-    const bool numeric_limits<bool>::is_modulo;\n-    const bool numeric_limits<bool>::traps;\n-    const bool numeric_limits<bool>::tinyness_before;\n-    const float_round_style numeric_limits<bool>::round_style;\n-\n-    const bool numeric_limits<char>::is_specialized;\n-    const int  numeric_limits<char>::digits;\n-    const int  numeric_limits<char>::digits10;\n-    const bool numeric_limits<char>::is_signed;\n-    const bool numeric_limits<char>::is_integer;\n-    const bool numeric_limits<char>::is_exact;\n-    const int  numeric_limits<char>::radix;\n-    const int  numeric_limits<char>::min_exponent;\n-    const int  numeric_limits<char>::min_exponent10;\n-    const int  numeric_limits<char>::max_exponent;\n-    const int  numeric_limits<char>::max_exponent10;\n-    const bool numeric_limits<char>::has_infinity;\n-    const bool numeric_limits<char>::has_quiet_NaN;\n-    const bool numeric_limits<char>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<char>::has_denorm;\n-    const bool numeric_limits<char>::has_denorm_loss;\n-    const bool numeric_limits<char>::is_iec559;\n-    const bool numeric_limits<char>::is_bounded;\n-    const bool numeric_limits<char>::is_modulo;\n-    const bool numeric_limits<char>::traps;\n-    const bool numeric_limits<char>::tinyness_before;\n-    const float_round_style numeric_limits<char>::round_style;\n-\n-    const bool numeric_limits<signed char>::is_specialized;\n-    const int  numeric_limits<signed char>::digits;\n-    const int  numeric_limits<signed char>::digits10;\n-    const bool numeric_limits<signed char>::is_signed;\n-    const bool numeric_limits<signed char>::is_integer;\n-    const bool numeric_limits<signed char>::is_exact;\n-    const int  numeric_limits<signed char>::radix;\n-    const int  numeric_limits<signed char>::min_exponent;\n-    const int  numeric_limits<signed char>::min_exponent10;\n-    const int  numeric_limits<signed char>::max_exponent;\n-    const int  numeric_limits<signed char>::max_exponent10;\n-    const bool numeric_limits<signed char>::has_infinity;\n-    const bool numeric_limits<signed char>::has_quiet_NaN;\n-    const bool numeric_limits<signed char>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<signed char>::has_denorm;\n-    const bool numeric_limits<signed char>::has_denorm_loss;\n-    const bool numeric_limits<signed char>::is_iec559;\n-    const bool numeric_limits<signed char>::is_bounded;\n-    const bool numeric_limits<signed char>::is_modulo;\n-    const bool numeric_limits<signed char>::traps;\n-    const bool numeric_limits<signed char>::tinyness_before;\n-    const float_round_style numeric_limits<signed char>::round_style;\n-\n-    const bool numeric_limits<unsigned char>::is_specialized;\n-    const int  numeric_limits<unsigned char>::digits;\n-    const int  numeric_limits<unsigned char>::digits10;\n-    const bool numeric_limits<unsigned char>::is_signed;\n-    const bool numeric_limits<unsigned char>::is_integer;\n-    const bool numeric_limits<unsigned char>::is_exact;\n-    const int  numeric_limits<unsigned char>::radix;\n-    const int  numeric_limits<unsigned char>::min_exponent;\n-    const int  numeric_limits<unsigned char>::min_exponent10;\n-    const int  numeric_limits<unsigned char>::max_exponent;\n-    const int  numeric_limits<unsigned char>::max_exponent10;\n-    const bool numeric_limits<unsigned char>::has_infinity;\n-    const bool numeric_limits<unsigned char>::has_quiet_NaN;\n-    const bool numeric_limits<unsigned char>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<unsigned char>::has_denorm;\n-    const bool numeric_limits<unsigned char>::has_denorm_loss;\n-    const bool numeric_limits<unsigned char>::is_iec559;\n-    const bool numeric_limits<unsigned char>::is_bounded;\n-    const bool numeric_limits<unsigned char>::is_modulo;\n-    const bool numeric_limits<unsigned char>::traps;\n-    const bool numeric_limits<unsigned char>::tinyness_before;\n-    const float_round_style numeric_limits<unsigned char>::round_style;\n-\n-    const bool numeric_limits<short>::is_specialized;\n-    const int  numeric_limits<short>::digits;\n-    const int  numeric_limits<short>::digits10;\n-    const bool numeric_limits<short>::is_signed;\n-    const bool numeric_limits<short>::is_integer;\n-    const bool numeric_limits<short>::is_exact;\n-    const int  numeric_limits<short>::radix;\n-    const int  numeric_limits<short>::min_exponent;\n-    const int  numeric_limits<short>::min_exponent10;\n-    const int  numeric_limits<short>::max_exponent;\n-    const int  numeric_limits<short>::max_exponent10;\n-    const bool numeric_limits<short>::has_infinity;\n-    const bool numeric_limits<short>::has_quiet_NaN;\n-    const bool numeric_limits<short>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<short>::has_denorm;\n-    const bool numeric_limits<short>::has_denorm_loss;\n-    const bool numeric_limits<short>::is_iec559;\n-    const bool numeric_limits<short>::is_bounded;\n-    const bool numeric_limits<short>::is_modulo;\n-    const bool numeric_limits<short>::traps;\n-    const bool numeric_limits<short>::tinyness_before;\n-    const float_round_style numeric_limits<short>::round_style;\n-\n-    const bool numeric_limits<unsigned short>::is_specialized;\n-    const int  numeric_limits<unsigned short>::digits;\n-    const int  numeric_limits<unsigned short>::digits10;\n-    const bool numeric_limits<unsigned short>::is_signed;\n-    const bool numeric_limits<unsigned short>::is_integer;\n-    const bool numeric_limits<unsigned short>::is_exact;\n-    const int  numeric_limits<unsigned short>::radix;\n-    const int  numeric_limits<unsigned short>::min_exponent;\n-    const int  numeric_limits<unsigned short>::min_exponent10;\n-    const int  numeric_limits<unsigned short>::max_exponent;\n-    const int  numeric_limits<unsigned short>::max_exponent10;\n-    const bool numeric_limits<unsigned short>::has_infinity;\n-    const bool numeric_limits<unsigned short>::has_quiet_NaN;\n-    const bool numeric_limits<unsigned short>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<unsigned short>::has_denorm;\n-    const bool numeric_limits<unsigned short>::has_denorm_loss;\n-    const bool numeric_limits<unsigned short>::is_iec559;\n-    const bool numeric_limits<unsigned short>::is_bounded;\n-    const bool numeric_limits<unsigned short>::is_modulo;\n-    const bool numeric_limits<unsigned short>::traps;\n-    const bool numeric_limits<unsigned short>::tinyness_before;\n-    const float_round_style numeric_limits<unsigned short>::round_style;\n-\n-    const bool numeric_limits<int>::is_specialized;\n-    const int  numeric_limits<int>::digits;\n-    const int  numeric_limits<int>::digits10;\n-    const bool numeric_limits<int>::is_signed;\n-    const bool numeric_limits<int>::is_integer;\n-    const bool numeric_limits<int>::is_exact;\n-    const int  numeric_limits<int>::radix;\n-    const int  numeric_limits<int>::min_exponent;\n-    const int  numeric_limits<int>::min_exponent10;\n-    const int  numeric_limits<int>::max_exponent;\n-    const int  numeric_limits<int>::max_exponent10;\n-    const bool numeric_limits<int>::has_infinity;\n-    const bool numeric_limits<int>::has_quiet_NaN;\n-    const bool numeric_limits<int>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<int>::has_denorm;\n-    const bool numeric_limits<int>::has_denorm_loss;\n-    const bool numeric_limits<int>::is_iec559;\n-    const bool numeric_limits<int>::is_bounded;\n-    const bool numeric_limits<int>::is_modulo;\n-    const bool numeric_limits<int>::traps;\n-    const bool numeric_limits<int>::tinyness_before;\n-    const float_round_style numeric_limits<int>::round_style;\n-\n-    const bool numeric_limits<unsigned int>::is_specialized;\n-    const int  numeric_limits<unsigned int>::digits;\n-    const int  numeric_limits<unsigned int>::digits10;\n-    const bool numeric_limits<unsigned int>::is_signed;\n-    const bool numeric_limits<unsigned int>::is_integer;\n-    const bool numeric_limits<unsigned int>::is_exact;\n-    const int  numeric_limits<unsigned int>::radix;\n-    const int  numeric_limits<unsigned int>::min_exponent;\n-    const int  numeric_limits<unsigned int>::min_exponent10;\n-    const int  numeric_limits<unsigned int>::max_exponent;\n-    const int  numeric_limits<unsigned int>::max_exponent10;\n-    const bool numeric_limits<unsigned int>::has_infinity;\n-    const bool numeric_limits<unsigned int>::has_quiet_NaN;\n-    const bool numeric_limits<unsigned int>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<unsigned int>::has_denorm;\n-    const bool numeric_limits<unsigned int>::has_denorm_loss;\n-    const bool numeric_limits<unsigned int>::is_iec559;\n-    const bool numeric_limits<unsigned int>::is_bounded;\n-    const bool numeric_limits<unsigned int>::is_modulo;\n-    const bool numeric_limits<unsigned int>::traps;\n-    const bool numeric_limits<unsigned int>::tinyness_before;\n-    const float_round_style numeric_limits<unsigned int>::round_style;\n-\n-    const bool numeric_limits<long>::is_specialized;\n-    const int  numeric_limits<long>::digits;\n-    const int  numeric_limits<long>::digits10;\n-    const bool numeric_limits<long>::is_signed;\n-    const bool numeric_limits<long>::is_integer;\n-    const bool numeric_limits<long>::is_exact;\n-    const int  numeric_limits<long>::radix;\n-    const int  numeric_limits<long>::min_exponent;\n-    const int  numeric_limits<long>::min_exponent10;\n-    const int  numeric_limits<long>::max_exponent;\n-    const int  numeric_limits<long>::max_exponent10;\n-    const bool numeric_limits<long>::has_infinity;\n-    const bool numeric_limits<long>::has_quiet_NaN;\n-    const bool numeric_limits<long>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<long>::has_denorm;\n-    const bool numeric_limits<long>::has_denorm_loss;\n-    const bool numeric_limits<long>::is_iec559;\n-    const bool numeric_limits<long>::is_bounded;\n-    const bool numeric_limits<long>::is_modulo;\n-    const bool numeric_limits<long>::traps;\n-    const bool numeric_limits<long>::tinyness_before;\n-    const float_round_style numeric_limits<long>::round_style;\n-\n-    const bool numeric_limits<unsigned long>::is_specialized;\n-    const int  numeric_limits<unsigned long>::digits;\n-    const int  numeric_limits<unsigned long>::digits10;\n-    const bool numeric_limits<unsigned long>::is_signed;\n-    const bool numeric_limits<unsigned long>::is_integer;\n-    const bool numeric_limits<unsigned long>::is_exact;\n-    const int  numeric_limits<unsigned long>::radix;\n-    const int  numeric_limits<unsigned long>::min_exponent;\n-    const int  numeric_limits<unsigned long>::min_exponent10;\n-    const int  numeric_limits<unsigned long>::max_exponent;\n-    const int  numeric_limits<unsigned long>::max_exponent10;\n-    const bool numeric_limits<unsigned long>::has_infinity;\n-    const bool numeric_limits<unsigned long>::has_quiet_NaN;\n-    const bool numeric_limits<unsigned long>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<unsigned long>::has_denorm;\n-    const bool numeric_limits<unsigned long>::has_denorm_loss;\n-    const bool numeric_limits<unsigned long>::is_iec559;\n-    const bool numeric_limits<unsigned long>::is_bounded;\n-    const bool numeric_limits<unsigned long>::is_modulo;\n-    const bool numeric_limits<unsigned long>::traps;\n-    const bool numeric_limits<unsigned long>::tinyness_before;\n-    const float_round_style numeric_limits<unsigned long>::round_style;\n-\n-    const bool numeric_limits<float>::is_specialized;\n-    const int  numeric_limits<float>::digits;\n-    const int  numeric_limits<float>::digits10;\n-    const bool numeric_limits<float>::is_signed;\n-    const bool numeric_limits<float>::is_integer;\n-    const bool numeric_limits<float>::is_exact;\n-    const int  numeric_limits<float>::radix;\n-    const int  numeric_limits<float>::min_exponent;\n-    const int  numeric_limits<float>::min_exponent10;\n-    const int  numeric_limits<float>::max_exponent;\n-    const int  numeric_limits<float>::max_exponent10;\n-    const bool numeric_limits<float>::has_infinity;\n-    const bool numeric_limits<float>::has_quiet_NaN;\n-    const bool numeric_limits<float>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<float>::has_denorm;\n-    const bool numeric_limits<float>::has_denorm_loss;\n-    const bool numeric_limits<float>::is_iec559;\n-    const bool numeric_limits<float>::is_bounded;\n-    const bool numeric_limits<float>::is_modulo;\n-    const bool numeric_limits<float>::traps;\n-    const bool numeric_limits<float>::tinyness_before;\n-    const float_round_style numeric_limits<float>::round_style;\n-\n-    const bool numeric_limits<double>::is_specialized;\n-    const int  numeric_limits<double>::digits;\n-    const int  numeric_limits<double>::digits10;\n-    const bool numeric_limits<double>::is_signed;\n-    const bool numeric_limits<double>::is_integer;\n-    const bool numeric_limits<double>::is_exact;\n-    const int  numeric_limits<double>::radix;\n-    const int  numeric_limits<double>::min_exponent;\n-    const int  numeric_limits<double>::min_exponent10;\n-    const int  numeric_limits<double>::max_exponent;\n-    const int  numeric_limits<double>::max_exponent10;\n-    const bool numeric_limits<double>::has_infinity;\n-    const bool numeric_limits<double>::has_quiet_NaN;\n-    const bool numeric_limits<double>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<double>::has_denorm;\n-    const bool numeric_limits<double>::has_denorm_loss;\n-    const bool numeric_limits<double>::is_iec559;\n-    const bool numeric_limits<double>::is_bounded;\n-    const bool numeric_limits<double>::is_modulo;\n-    const bool numeric_limits<double>::traps;\n-    const bool numeric_limits<double>::tinyness_before;\n-    const float_round_style numeric_limits<double>::round_style;\n-\n-    const bool numeric_limits<long double>::is_specialized;\n-    const int  numeric_limits<long double>::digits;\n-    const int  numeric_limits<long double>::digits10;\n-    const bool numeric_limits<long double>::is_signed;\n-    const bool numeric_limits<long double>::is_integer;\n-    const bool numeric_limits<long double>::is_exact;\n-    const int  numeric_limits<long double>::radix;\n-    const int  numeric_limits<long double>::min_exponent;\n-    const int  numeric_limits<long double>::min_exponent10;\n-    const int  numeric_limits<long double>::max_exponent;\n-    const int  numeric_limits<long double>::max_exponent10;\n-    const bool numeric_limits<long double>::has_infinity;\n-    const bool numeric_limits<long double>::has_quiet_NaN;\n-    const bool numeric_limits<long double>::has_signaling_NaN;\n-    const float_denorm_style numeric_limits<long double>::has_denorm;\n-    const bool numeric_limits<long double>::has_denorm_loss;\n-    const bool numeric_limits<long double>::is_iec559;\n-    const bool numeric_limits<long double>::is_bounded;\n-    const bool numeric_limits<long double>::is_modulo;\n-    const bool numeric_limits<long double>::traps;\n-    const bool numeric_limits<long double>::tinyness_before;\n-    const float_round_style numeric_limits<long double>::round_style;\n-} // namespace std\n-\n-"}, {"sha": "c9e86872504858e1c2033a0d316b033fd2760855", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f295ecef02545a8bce7e09caa6cb15876d1807c2/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=f295ecef02545a8bce7e09caa6cb15876d1807c2", "patch": "@@ -76,6 +76,7 @@ CCODECVT_H = @CCODECVT_H@\n CLOCALE_H = @CLOCALE_H@\n CMESSAGES_H = @CMESSAGES_H@\n CPP = @CPP@\n+CPU_LIMITS_INC_SRCDIR = @CPU_LIMITS_INC_SRCDIR@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CSTDIO_H = @CSTDIO_H@\n CXX = @CXX@\n@@ -106,7 +107,6 @@ LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIMITS_INC_SRCDIR = @LIMITS_INC_SRCDIR@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@"}]}