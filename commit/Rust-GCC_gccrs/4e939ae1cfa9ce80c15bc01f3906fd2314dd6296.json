{"sha": "4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "node_id": "C_kwDOANBUbNoAKDRlOTM5YWUxY2ZhOWNlODBjMTViYzAxZjM5MDZmZDIzMTRkZDYyOTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-25T00:17:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-25T00:17:33Z"}, "message": "Daily bump.", "tree": {"sha": "7a7a6e20b3fe7205749de306ff4cba7ceed3ccab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a7a6e20b3fe7205749de306ff4cba7ceed3ccab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/comments", "author": null, "committer": null, "parents": [{"sha": "687d11fd74e7de724d46d3e0c58eb012db93ec2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687d11fd74e7de724d46d3e0c58eb012db93ec2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687d11fd74e7de724d46d3e0c58eb012db93ec2b"}], "stats": {"total": 334, "additions": 333, "deletions": 1}, "files": [{"sha": "b79620cef53cb09b221869af67d10b8b2862b692", "filename": "gcc/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,117 @@\n+2022-10-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR analyzer/107366\n+\t* diagnostic-format-sarif.cc\n+\t(sarif_builder::maybe_make_physical_location_object): Gracefully\n+\treject locations with NULL filename.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106300\n+\t* doc/invoke.texi (Static Analyzer Options): Add \"pipe\" and\n+\t\"pipe2\" to the list of functions the analyzer has hardcoded\n+\tknowledge of.\n+\n+2022-10-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (build_string_literal): New one-argument overloads that\n+\ttake tree (identifier) and const char *.\n+\t* builtins.cc (fold_builtin_FILE)\n+\t(fold_builtin_FUNCTION)\n+\t* gimplify.cc (gimple_add_init_for_auto_var)\n+\t* vtable-verify.cc (verify_bb_vtables): Simplify calls.\n+\n+2022-10-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/107364\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_vendor):\n+\t  Reorder enum values as BUILTIN_VENDOR_MAX should not point\n+\t  in the middle of the valid enum values.\n+\n+2022-10-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107276\n+\t* tree.cc (maybe_wrap_with_location): Don't create a location wrapper\n+\twhen the type is erroneous.\n+\n+2022-10-24  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/106583\n+\t* config/aarch64/aarch64.cc (aarch64_internal_mov_immediate)\n+\tAdd support for a bitmask immediate with 2 MOVKs.\n+\t(aarch64_check_bitmask): New function after refactorization.\n+\t(aarch64_bitmask_imm): Simplify replication of small modes.\n+\tSplit function into 64-bit only version for efficiency.\n+\t(aarch64_move_imm): Move near other immediate functions.\n+\t(aarch64_uimm12_shift): Likewise.\n+\t(aarch64_clamp_to_uimm12_shift): Likewise.\n+\t(aarch64_movk_shift): Likewise.\n+\t(aarch64_replicate_bitmask_imm): Likewise.\n+\t(aarch64_and_split_imm1): Likewise.\n+\t(aarch64_and_split_imm2): Likewise.\n+\t(aarch64_and_bitmask_imm): Likewise.\n+\t(aarch64_movw_imm): Likewise.\n+\n+2022-10-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107355\n+\t* range-op-float.cc (foperator_abs::op1_range): Handle NAN.\n+\n+2022-10-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/107236\n+\t* omp-expand.cc (expand_omp_target): Set calls_declare_variant_alt\n+\tin DECL_CONTEXT and not to cfun->decl.\n+\t* cgraphclones.cc (cgraph_node::create_clone): Copy also the\n+\tnode's calls_declare_variant_alt value.\n+\n+2022-10-24  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.cc (riscv_tunes): New.\n+\t(riscv_get_valid_option_values): New.\n+\t(TARGET_GET_VALID_OPTION_VALUES): New.\n+\t* config/riscv/riscv-cores.def (RISCV_TUNE): New, define options\n+\tfor tune here.\n+\t(RISCV_CORE): Fix comment.\n+\t* config/riscv/riscv.cc (riscv_tune_info_table): Move definition to\n+\triscv-cores.def.\n+\n+2022-10-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107365\n+\t* value-range.cc (frange::verify_range): Predicate NAN check in\n+\tVARYING range on HONOR_NANS instead of flag_finite_math_only.\n+\t(range_tests_floats): Same.\n+\t(range_tests_floats_various): New.\n+\t(range_tests): Call range_tests_floats_various.\n+\n+2022-10-24  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX  <yvan.roux@foss.st.com>\n+\n+\t* lto-wrapper.cc: Quote paths in makefile.\n+\n+2022-10-24  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.cc (riscv_legitimize_move): Support (set (mem) (const_poly_int)).\n+\n+2022-10-24  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Replace CONSTEXPR\n+\twith constexpr throughout.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (SHAPE): Likewise.\n+\t* config/riscv/riscv-vector-builtins.cc\n+\t(struct registered_function_hasher): Likewise.\n+\t* config/riscv/riscv-vector-builtins.h (struct rvv_arg_type_info):\n+\tLikewise.\n+\n+2022-10-24  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-switch.def (ENTRY): Remove unused TI/TF vector modes.\n+\n+2022-10-24  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv.h (REG_CLASS_CONTENTS): Fix ALL_REGS.\n+\n 2022-10-22  Michael Eager  <eager@eagercon.com>\n \n \t* config/microblaze/microblaze.cc"}, {"sha": "c75820ce08e0cb0be0f9607463a7de4a266d03da", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1 +1 @@\n-20221024\n+20221025"}, {"sha": "733580a48c706a3686a1d51e10b630656ab2c943", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,68 @@\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107349\n+\t* varargs.cc (get_va_copy_arg): Fix the non-pointer case.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107345\n+\t* region-model.cc (region_model::eval_condition_without_cm):\n+\tEnsure that constants are on the right-hand side before checking\n+\tfor them.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (impl_region_model_context::get_malloc_map): Replace\n+\twith...\n+\t(impl_region_model_context::get_state_map_by_name): ...this.\n+\t(impl_region_model_context::get_fd_map): Delete.\n+\t(impl_region_model_context::get_taint_map): Delete.\n+\t* exploded-graph.h (impl_region_model_context::get_fd_map):\n+\tDelete.\n+\t(impl_region_model_context::get_malloc_map): Delete.\n+\t(impl_region_model_context::get_taint_map): Delete.\n+\t(impl_region_model_context::get_state_map_by_name): New.\n+\t* region-model.h (region_model_context::get_state_map_by_name):\n+\tNew vfunc.\n+\t(region_model_context::get_fd_map): Convert from vfunc to\n+\tfunction.\n+\t(region_model_context::get_malloc_map): Likewise.\n+\t(region_model_context::get_taint_map): Likewise.\n+\t(noop_region_model_context::get_state_map_by_name): New.\n+\t(noop_region_model_context::get_fd_map): Delete.\n+\t(noop_region_model_context::get_malloc_map): Delete.\n+\t(noop_region_model_context::get_taint_map): Delete.\n+\t(region_model_context_decorator::get_state_map_by_name): New.\n+\t(region_model_context_decorator::get_fd_map): Delete.\n+\t(region_model_context_decorator::get_malloc_map): Delete.\n+\t(region_model_context_decorator::get_taint_map): Delete.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106300\n+\t* engine.cc (impl_region_model_context::get_fd_map): New.\n+\t* exploded-graph.h (impl_region_model_context::get_fd_map): New\n+\tdecl.\n+\t* region-model-impl-calls.cc (region_model::impl_call_pipe): New.\n+\t* region-model.cc (region_model::update_for_int_cst_return): New,\n+\tbased on...\n+\t(region_model::update_for_zero_return): ...this.  Reimplement in\n+\tterms of the former.\n+\t(region_model::on_call_pre): Handle \"pipe\" and \"pipe2\".\n+\t(region_model::on_call_post): Likewise.\n+\t* region-model.h (region_model::impl_call_pipe): New decl.\n+\t(region_model::update_for_int_cst_return): New decl.\n+\t(region_model::mark_as_valid_fd): New decl.\n+\t(region_model_context::get_fd_map): New pure virtual fn.\n+\t(noop_region_model_context::get_fd_map): New.\n+\t(region_model_context_decorator::get_fd_map): New.\n+\t* sm-fd.cc: Include \"analyzer/program-state.h\".\n+\t(fd_state_machine::describe_state_change): Handle transitions from\n+\tstart state to valid states.\n+\t(fd_state_machine::mark_as_valid_fd): New.\n+\t(fd_state_machine::on_stmt): Add missing return for \"creat\".\n+\t(region_model::mark_as_valid_fd): New.\n+\n 2022-10-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105765"}, {"sha": "2ac8eaa8c1c79a8134ce71692f6f2fa24b626ddc", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,17 @@\n+2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107358\n+\t* c-typeck.cc (build_binary_op): Pass operands before excess precision\n+\tpromotions to scalar_to_vector call.\n+\n+2022-10-24  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* c-decl.cc (finish_function): Ignore hosted when deciding\n+\twhether to implicitly return zero, but check noreturn.\n+\t* c-objc-common.cc (c_missing_noreturn_ok_p): Loosen the\n+\trequirements to just MAIN_NAME_P when hosted, or `int main'\n+\totherwise.\n+\n 2022-10-20  Richard Biener  <rguenther@suse.de>\n \n \tPR c/107305"}, {"sha": "04c8216a16b46f3e81fd8306fbd4f525d1cb7f12", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,38 @@\n+2022-10-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-gimplify.cc (fold_builtin_source_location)\n+\t* vtable-class-hierarchy.cc (register_all_pairs): Simplify calls to\n+\tbuild_string_literal.\n+\t(build_string_from_id): Remove.\n+\n+2022-10-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107276\n+\t* typeck.cc (treat_lvalue_as_rvalue_p): Check the return value of move.\n+\n+2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107358\n+\t* typeck.cc (cp_build_binary_op): Pass operands before excess precision\n+\tpromotions to scalar_to_vector call.\n+\n+2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105774\n+\t* constexpr.cc (cxx_eval_increment_expression): For signed types\n+\tthat promote to int, evaluate PLUS_EXPR or MINUS_EXPR in int type.\n+\n+2022-10-24  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* cp-tree.h (DECL_MAIN_P): Move most logic, besides the hosted\n+\tcheck, from here...\n+\t(DECL_MAIN_ANY_P): ... to here, so that it can be reused ...\n+\t(DECL_MAIN_FREESTANDING_P): ... here, with an additional\n+\tconstraint on (hosted OR return type == int)\n+\t* decl.cc (finish_function): Use DECL_MAIN_FREESTANDING_P\n+\tinstead of DECL_MAIN_P, to loosen the hosted requirement, but\n+\tcheck noreturn, before adding implicit returns.\n+\n 2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/107295"}, {"sha": "6fa9fb0e457e5a30bef1b5e88fb2efc4b0923972", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,68 @@\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107349\n+\t* gcc.dg/analyzer/stdarg-1-ms_abi.c (pr107349): New.\n+\t* gcc.dg/analyzer/stdarg-1-sysv_abi.c (pr107349): New.\n+\t* gcc.dg/analyzer/stdarg-1.c (pr107349): New.\n+\n+2022-10-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR analyzer/107366\n+\t* gcc.dg/analyzer/sarif-pr107366.c: New test.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107345\n+\t* gcc.dg/analyzer/pr107345.c: New test.\n+\n+2022-10-24  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106300\n+\t* gcc.dg/analyzer/pipe-1.c: New test.\n+\t* gcc.dg/analyzer/pipe-glibc.c: New test.\n+\t* gcc.dg/analyzer/pipe-manpages.c: New test.\n+\t* gcc.dg/analyzer/pipe2-1.c: New test.\n+\n+2022-10-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107276\n+\t* g++.dg/cpp2a/decomp4.C: New test.\n+\n+2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/107358\n+\t* c-c++-common/pr107358.c: New test.\n+\t* g++.dg/cpp1y/pr68180.C: Remove -fexcess-precision=fast from\n+\tdg-options.\n+\n+2022-10-24  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/106583\n+\t* gcc.target/aarch64/pr106583.c: Add new test.\n+\n+2022-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105774\n+\t* g++.dg/cpp1y/constexpr-105774.C: New test.\n+\n+2022-10-24  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n+\n+\t* gcc.dg/noreturn-4.c: Removed.\n+\t* g++.dg/freestanding-main.C: New test.\n+\t* g++.dg/freestanding-nonint-main.C: New test.\n+\t* gcc.dg/freestanding-main.c: New test.\n+\t* gcc.dg/freestanding-nonint-main.c: New test.\n+\n+2022-10-24  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107355\n+\t* gcc.dg/tree-ssa/pr107355.c: New test.\n+\n+2022-10-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/107236\n+\t* gfortran.dg/gomp/target-device-ancestor-6.f90: New test.\n+\n 2022-10-21  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100097"}, {"sha": "b69f2b8693ca1781daeb1dcbf7bc49322821bdd6", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,10 @@\n+2022-10-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* cuda/cuda.h (enum CUdevice_attribute): Add\n+\tCU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING.\n+\t(CU_MEMHOSTALLOC_DEVICEMAP): Define.\n+\t(cuMemHostAlloc): Add prototype.\n+\n 2022-10-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_DEVICE_HSA): Comment out unused define."}, {"sha": "d61a80610ab71a0e6da2e5c07aedc69cf3fdea6b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e939ae1cfa9ce80c15bc01f3906fd2314dd6296/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4e939ae1cfa9ce80c15bc01f3906fd2314dd6296", "patch": "@@ -1,3 +1,35 @@\n+2022-10-24  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c (nvptx_open_device): Initialize\n+\t'ptx_dev->rev_data'.\n+\n+2022-10-24  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/nvptx/icv-device.c (GOMP_DEVICE_NUM_VAR): Remove\n+\t'static' for this variable.\n+\t* config/nvptx/libgomp-nvptx.h: New file.\n+\t* config/nvptx/target.c: Include it.\n+\t(GOMP_ADDITIONAL_ICVS): Declare extern var.\n+\t(GOMP_REV_OFFLOAD_VAR): Declare var.\n+\t(GOMP_target_ext): Handle reverse offload.\n+\t* libgomp-plugin.h (GOMP_PLUGIN_target_rev): New prototype.\n+\t* libgomp-plugin.c (GOMP_PLUGIN_target_rev): New, call ...\n+\t* target.c (gomp_target_rev): ... this new stub function.\n+\t* libgomp.h (gomp_target_rev): Declare.\n+\t* libgomp.map (GOMP_PLUGIN_1.4): New; add GOMP_PLUGIN_target_rev.\n+\t* plugin/cuda-lib.def (cuMemHostAlloc): Add.\n+\t* plugin/plugin-nvptx.c: Include libgomp-nvptx.h.\n+\t(struct ptx_device): Add rev_data member.\n+\t(nvptx_open_device): Remove async_engines query, last used in\n+\tr10-304-g1f4c5b9b; add unified-address assert check.\n+\t(GOMP_OFFLOAD_get_num_devices): Claim unified address\n+\tsupport.\n+\t(GOMP_OFFLOAD_load_image): Free rev_fn_table if no\n+\toffload functions exist. Make offload var available\n+\ton host and device.\n+\t(rev_off_dev_to_host_cpy, rev_off_host_to_dev_cpy): New.\n+\t(GOMP_OFFLOAD_run): Handle reverse offload.\n+\n 2022-10-21  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR tree-optimization/107195"}]}