{"sha": "545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1ZWFjZGI0MTMwY2Q2NGZiN2NjNWU0ZGQ0NmUzMWIyNzUzYTE4Yg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-08-04T11:13:07Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-08-04T11:13:07Z"}, "message": "typeck.c (convert_ieee_real_to_integer): Call fold on the range checking trees as they're being built.\n\n2004-08-04  Roger Sayle  <roger@eyesopen.com>\n            Andrew Haley  <aph@redhat.com>\n\n        * typeck.c (convert_ieee_real_to_integer): Call fold on the range\n        checking trees as they're being built.\n        (convert): Call convert_ieee_real_to_integer if we're\n        converting a constant, even if we're writing a class file.\n\nCo-Authored-By: Andrew Haley <aph@redhat.com>\n\nFrom-SVN: r85553", "tree": {"sha": "27d860db6287b5dbbb12712d0b8a9e24f0c075b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d860db6287b5dbbb12712d0b8a9e24f0c075b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b/comments", "author": null, "committer": null, "parents": [{"sha": "da96112d3497e41ffd0f7c2bfb7a236770d4244a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da96112d3497e41ffd0f7c2bfb7a236770d4244a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da96112d3497e41ffd0f7c2bfb7a236770d4244a"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "015d89adb9acc6d067553c61635822753e33818b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "patch": "@@ -1,3 +1,11 @@\n+2004-08-04  Roger Sayle  <roger@eyesopen.com>\n+\t    Andrew Haley  <aph@redhat.com>\n+\n+\t* typeck.c (convert_ieee_real_to_integer): Call fold on the range\n+\tchecking trees as they're being built.\n+\t(convert): Call convert_ieee_real_to_integer if we're\n+\tconverting a constant, even if we're writing a class file.\n+\n 2004-08-02  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR java/16701"}, {"sha": "289048ed1fa5d5e9dff03b12828f50368a096f02", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/545eacdb4130cd64fb7cc5e4dd46e31b2753a18b/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=545eacdb4130cd64fb7cc5e4dd46e31b2753a18b", "patch": "@@ -83,22 +83,24 @@ convert_ieee_real_to_integer (tree type, tree expr)\n   tree result;\n   expr = save_expr (expr);\n \n-  result = build3 (COND_EXPR, type,\n-\t\t   build2 (NE_EXPR, boolean_type_node, expr, expr),\n-\t\t   convert (type, integer_zero_node),\n-\t\t   convert_to_integer (type, expr));\n-\t\t  \n-  result = build3 (COND_EXPR, type, \n-\t\t   build2 (LE_EXPR, boolean_type_node, expr, \n-\t\t\t   convert (TREE_TYPE (expr), TYPE_MIN_VALUE (type))),\n-\t\t   TYPE_MIN_VALUE (type),\n-\t\t   result);\n-\n-  result = build3 (COND_EXPR, type,\n-\t\t   build2 (GE_EXPR, boolean_type_node, expr, \n-\t\t\t   convert (TREE_TYPE (expr), TYPE_MAX_VALUE (type))),\t\n-\t\t   TYPE_MAX_VALUE (type),\n-\t\t   result);\n+  result = fold (build3 (COND_EXPR, type,\n+\t\t\t fold (build2 (NE_EXPR, boolean_type_node, expr, expr)),\n+\t\t\t convert (type, integer_zero_node),\n+\t\t\t convert_to_integer (type, expr)));\n+  \n+  result = fold (build3 (COND_EXPR, type, \n+\t\t\t fold (build2 (LE_EXPR, boolean_type_node, expr, \n+\t\t\t\t       convert (TREE_TYPE (expr), \n+\t\t\t\t\t\tTYPE_MIN_VALUE (type)))),\n+\t\t\t TYPE_MIN_VALUE (type),\n+\t\t\t result));\n+  \n+  result = fold (build3 (COND_EXPR, type,\n+\t\t\t fold (build2 (GE_EXPR, boolean_type_node, expr, \n+\t\t\t\t       convert (TREE_TYPE (expr), \n+\t\t\t\t\t\tTYPE_MAX_VALUE (type)))),\n+\t\t\t TYPE_MAX_VALUE (type),\n+\t\t\t result));\n \n   return result;\n }  \n@@ -131,8 +133,9 @@ convert (tree type, tree expr)\n     return fold (convert_to_boolean (type, expr));\n   if (code == INTEGER_TYPE)\n     {\n-      if (! flag_unsafe_math_optimizations\n-\t  && ! flag_emit_class_files\n+      if ((really_constant_p (expr)\n+\t   || (! flag_unsafe_math_optimizations\n+\t       && ! flag_emit_class_files))\n \t  && TREE_CODE (TREE_TYPE (expr)) == REAL_TYPE\n \t  && TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n \treturn fold (convert_ieee_real_to_integer (type, expr));"}]}