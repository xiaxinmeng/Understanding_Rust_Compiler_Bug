{"sha": "10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4MzJmY2U3YzZiMmRlNmVmOGFmOWIxZjdhMTIzZGZkYjZmYjdhOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-19T06:59:23Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-19T06:59:23Z"}, "message": "2003-05-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/ByteBufferImpl.java\n\t(putLong): Fixed conversion to bytes.\n\t(putDouble): Fixed conversion to bytes.\n\t* gnu/java/nio/DirectByteBufferImpl.java\n\t(putLong): Fixed conversion to bytes.\n\t(putDouble): Fixed conversion to bytes.\n\t* gnu/java/nio/FileLockImpl.java\n\t(isValid): Reformatted.\n\t* java/nio/Buffer.java\n\t(Buffer): Fixed off-by-one bug in handling mark.\n\t* java/nio/ByteBuffer.java:\n\tAdded newline.\n\t* java/nio/CharBuffer.java\n\t(toString): Don't use relative get to get string data.\n\nFrom-SVN: r66946", "tree": {"sha": "2bc55e0ef3fca053d995f689e0812505f3e152b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc55e0ef3fca053d995f689e0812505f3e152b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/comments", "author": null, "committer": null, "parents": [{"sha": "307b599c91ee93049fd69228b9d59b6ea2e030ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307b599c91ee93049fd69228b9d59b6ea2e030ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307b599c91ee93049fd69228b9d59b6ea2e030ef"}], "stats": {"total": 155, "additions": 87, "deletions": 68}, "files": [{"sha": "0846261dcf5960ebc1633381a142a83fa49ee6a7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -1,3 +1,20 @@\n+2003-05-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/ByteBufferImpl.java\n+\t(putLong): Fixed conversion to bytes.\n+\t(putDouble): Fixed conversion to bytes.\n+\t* gnu/java/nio/DirectByteBufferImpl.java\n+\t(putLong): Fixed conversion to bytes.\n+\t(putDouble): Fixed conversion to bytes.\n+\t* gnu/java/nio/FileLockImpl.java\n+\t(isValid): Reformatted.\n+\t* java/nio/Buffer.java\n+\t(Buffer): Fixed off-by-one bug in handling mark.\n+\t* java/nio/ByteBuffer.java:\n+\tAdded newline.\n+\t* java/nio/CharBuffer.java\n+\t(toString): Don't use relative get to get string data.\n+\n 2003-05-16  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/natFileDescriptorPosix.cc"}, {"sha": "f9de8c7d1520991d18fc4997b6a61449c96baa49", "filename": "libjava/gnu/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -311,14 +311,14 @@ final public long getLong ()\n   final public ByteBuffer putLong (long value)\n   {\n     // FIXME: this handles big endian only\n-    put ((byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put ((byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put ((byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put ((byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put ((byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put ((byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put ((byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put ((byte) (((int) value) & 0x00000000000000ff));\n+    put ((byte) ((value & 0xff00000000000000L) >> 56));\n+    put ((byte) ((value & 0x00ff000000000000L) >> 48));\n+    put ((byte) ((value & 0x0000ff0000000000L) >> 40));\n+    put ((byte) ((value & 0x000000ff00000000L) >> 32));\n+    put ((byte) ((value & 0x00000000ff000000L) >> 24));\n+    put ((byte) ((value & 0x0000000000ff0000L) >> 16));\n+    put ((byte) ((value & 0x000000000000ff00L) >> 8));\n+    put ((byte) (value & 0x00000000000000ffL));\n     return this;\n   }\n   \n@@ -338,14 +338,14 @@ final public long getLong (int index)\n   final public ByteBuffer putLong (int index, long value)\n   {\n     // FIXME: this handles big endian only\n-    put (index, (byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put (index + 1, (byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put (index + 2, (byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put (index + 3, (byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put (index + 4, (byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put (index + 5, (byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put (index + 6, (byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put (index + 7, (byte) (((int) value) & 0x00000000000000ff));\n+    put (index, (byte) ((value & 0xff00000000000000L) >> 56));\n+    put (index + 1, (byte) ((value & 0x00ff000000000000L) >> 48));\n+    put (index + 2, (byte) ((value & 0x0000ff0000000000L) >> 40));\n+    put (index + 3, (byte) ((value & 0x000000ff00000000L) >> 32));\n+    put (index + 4, (byte) ((value & 0x00000000ff000000L) >> 24));\n+    put (index + 5, (byte) ((value & 0x0000000000ff0000L) >> 16));\n+    put (index + 6, (byte) ((value & 0x000000000000ff00L) >> 8));\n+    put (index + 7, (byte) (value & 0x00000000000000ffL));\n     return this;\n   }\n \n@@ -403,14 +403,14 @@ final public double getDouble ()\n   final public ByteBuffer putDouble (double value)\n   {\n     // FIXME: this handles big endian only\n-    put ((byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put ((byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put ((byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put ((byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put ((byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put ((byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put ((byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put ((byte) (((int) value) & 0x00000000000000ff));\n+    put ((byte) ((((long) value) & 0xff00000000000000L) >> 56));\n+    put ((byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n+    put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n+    put ((byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n+    put ((byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n+    put ((byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n+    put ((byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n+    put ((byte) (((long) value) & 0x00000000000000ffL));\n     return this;\n   }\n   \n@@ -430,14 +430,14 @@ final public double getDouble (int index)\n   final public ByteBuffer putDouble (int index, double value)\n   {\n     // FIXME: this handles big endian only\n-    put (index, (byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put (index + 1, (byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put (index + 2, (byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put (index + 3, (byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put (index + 4, (byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put (index + 5, (byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put (index + 6, (byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put (index + 7, (byte) (((int) value) & 0x00000000000000ff));\n+    put (index, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n+    put (index + 1, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n+    put (index + 2, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n+    put (index + 3, (byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n+    put (index + 4, (byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n+    put (index + 5, (byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n+    put (index + 6, (byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n+    put (index + 7, (byte) (((long) value) & 0x00000000000000ffL));\n     return this;\n   }\n }"}, {"sha": "d214f0c4d832d73329d4bb98ef43442e36bcdc52", "filename": "libjava/gnu/java/nio/DirectByteBufferImpl.java", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FDirectByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDirectByteBufferImpl.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -291,14 +291,14 @@ final public long getLong ()\n   final public ByteBuffer putLong (long value)\n   {\n     // FIXME: this handles big endian only\n-    put ((byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put ((byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put ((byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put ((byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put ((byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put ((byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put ((byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put ((byte) (((int) value) & 0x00000000000000ff));\n+    put ((byte) ((value & 0xff00000000000000L) >> 56));\n+    put ((byte) ((value & 0x00ff000000000000L) >> 48));\n+    put ((byte) ((value & 0x0000ff0000000000L) >> 40));\n+    put ((byte) ((value & 0x000000ff00000000L) >> 32));\n+    put ((byte) ((value & 0x00000000ff000000L) >> 24));\n+    put ((byte) ((value & 0x0000000000ff0000L) >> 16));\n+    put ((byte) ((value & 0x000000000000ff00L) >> 8));\n+    put ((byte) (value & 0x00000000000000ffL));\n     return this;\n   }\n   \n@@ -318,14 +318,14 @@ final public long getLong (int index)\n   final public ByteBuffer putLong (int index, long value)\n   {\n     // FIXME: this handles big endian only\n-    put (index, (byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put (index + 1, (byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put (index + 2, (byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put (index + 3, (byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put (index + 4, (byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put (index + 5, (byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put (index + 6, (byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put (index + 7, (byte) (((int) value) & 0x00000000000000ff));\n+    put (index, (byte) ((value & 0xff00000000000000L) >> 56));\n+    put (index + 1, (byte) ((value & 0x00ff000000000000L) >> 48));\n+    put (index + 2, (byte) ((value & 0x0000ff0000000000L) >> 40));\n+    put (index + 3, (byte) ((value & 0x000000ff00000000L) >> 32));\n+    put (index + 4, (byte) ((value & 0x00000000ff000000L) >> 24));\n+    put (index + 5, (byte) ((value & 0x0000000000ff0000L) >> 16));\n+    put (index + 6, (byte) ((value & 0x000000000000ff00L) >> 8));\n+    put (index + 7, (byte) (value & 0x00000000000000ffL));\n     return this;\n   }\n \n@@ -383,14 +383,14 @@ final public double getDouble ()\n   final public ByteBuffer putDouble (double value)\n   {\n     // FIXME: this handles big endian only\n-    put ((byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put ((byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put ((byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put ((byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put ((byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put ((byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put ((byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put ((byte) (((int) value) & 0x00000000000000ff));\n+    put ((byte) ((((long) value) & 0xff00000000000000L) >> 56));\n+    put ((byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n+    put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n+    put ((byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n+    put ((byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n+    put ((byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n+    put ((byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n+    put ((byte) (((long) value) & 0x00000000000000ffL));\n     return this;\n   }\n   \n@@ -410,14 +410,14 @@ final public double getDouble (int index)\n   final public ByteBuffer putDouble (int index, double value)\n   {\n     // FIXME: this handles big endian only\n-    put (index, (byte) ((((int) value) & 0xff00000000000000) >> 56));\n-    put (index + 1, (byte) ((((int) value) & 0x00ff000000000000) >> 48));\n-    put (index + 2, (byte) ((((int) value) & 0x0000ff0000000000) >> 40));\n-    put (index + 3, (byte) ((((int) value) & 0x000000ff00000000) >> 32));\n-    put (index + 4, (byte) ((((int) value) & 0x00000000ff000000) >> 24));\n-    put (index + 5, (byte) ((((int) value) & 0x0000000000ff0000) >> 16));\n-    put (index + 6, (byte) ((((int) value) & 0x000000000000ff00) >> 8));\n-    put (index + 7, (byte) (((int) value) & 0x00000000000000ff));\n+    put (index, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n+    put (index + 1, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n+    put (index + 2, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n+    put (index + 3, (byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n+    put (index + 4, (byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n+    put (index + 5, (byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n+    put (index + 6, (byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n+    put (index + 7, (byte) (((long) value) & 0x00000000000000ffL));\n     return this;\n   }\n }"}, {"sha": "189e03ac81e6acb8222abafd92bec35c1775f3a8", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -62,7 +62,8 @@ public FileLockImpl (FileDescriptor fd, FileChannel channel, long position,\n   \n   public boolean isValid ()\n   {\n-    return (released || !channel.isOpen ());\n+    return (released\n+            || !channel ().isOpen ());\n   }\n \n   private native void releaseImpl () throws IOException;"}, {"sha": "693765f3e4652abf1b04ea09a592e2760b61e6bf", "filename": "libjava/java/nio/Buffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FBuffer.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -57,7 +57,7 @@\n     limit (limit);\n     position (position);\n     \n-    if (mark > 0)\n+    if (mark >= 0)\n     {\n       if (mark > pos)\n         throw new IllegalArgumentException ();"}, {"sha": "cb743c799c760778dda08621aeab7e8105f74713", "filename": "libjava/java/nio/ByteBuffer.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FByteBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FByteBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBuffer.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -63,6 +63,7 @@ public abstract class ByteBuffer extends Buffer\n     this.backing_buffer = buffer;\n     this.array_offset = offset;\n   }\n+  \n   /**\n    * Allocates a new direct byte buffer.\n    */ "}, {"sha": "f2fde710417038ba1922f166c538ec2ab1b2572e", "filename": "libjava/java/nio/CharBuffer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FCharBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9/libjava%2Fjava%2Fnio%2FCharBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FCharBuffer.java?ref=10832fce7c6b2de6ef8af9b1f7a123dfdb6fb7a9", "patch": "@@ -113,7 +113,7 @@ final public static CharBuffer wrap (CharSequence a, int offset, int length)\n         buffer [i] = a.charAt (i);\n       }\n     \n-    return wrap (buffer, offset, length);\n+    return wrap (buffer, offset, length).asReadOnlyBuffer ();\n   }\n \n   /**\n@@ -426,7 +426,7 @@ public String toString ()\n       return new String (array (), position (), length ());\n \n     char[] buf = new char [length ()];\n-    get (buf);\n+    get (position (), buf);\n     return new String (buf);\n   }\n "}]}