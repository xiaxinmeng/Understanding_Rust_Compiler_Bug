{"sha": "6dd3c0a5996256d8159c9c6be925114f692c398e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkM2MwYTU5OTYyNTZkODE1OWM5YzZiZTkyNTExNGY2OTJjMzk4ZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2006-03-11T12:52:56Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-03-11T12:52:56Z"}, "message": "sh.c: Include alloc-pool.h.\n\n2006-03-11  Steven Bosscher  <stevenb.gcc@gmail.com>\n\n\t* config/sh/sh.c: Include alloc-pool.h.\n\t(label_ref_list_pool): New alloc pool.\n\t(label_ref_list_t): New type for lists of labels.\n\t(struct pool_node): Make wend a label_ref_list_t.\n\t(add_constant): Use the new type, eradicate LABEL_NEXTREF\n\treferences.\n\t(dump_table): Likewise.\n\t(sh_reorg): Set up the alloc pool before using add_constant and\n\tdump_table, and destroy it when finishing.\n\nFrom-SVN: r111963", "tree": {"sha": "3ecca8f93261b3b4356334cbb37a6eff34e0116c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ecca8f93261b3b4356334cbb37a6eff34e0116c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dd3c0a5996256d8159c9c6be925114f692c398e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd3c0a5996256d8159c9c6be925114f692c398e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd3c0a5996256d8159c9c6be925114f692c398e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd3c0a5996256d8159c9c6be925114f692c398e/comments", "author": null, "committer": null, "parents": [{"sha": "59e47e7163bc4b1d717e81fb2831f51903900d90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e47e7163bc4b1d717e81fb2831f51903900d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e47e7163bc4b1d717e81fb2831f51903900d90"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "b28931d7ad810b26c8778484287511e7405185c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd3c0a5996256d8159c9c6be925114f692c398e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd3c0a5996256d8159c9c6be925114f692c398e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dd3c0a5996256d8159c9c6be925114f692c398e", "patch": "@@ -1,3 +1,15 @@\n+2006-03-11  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* config/sh/sh.c: Include alloc-pool.h.\n+\t(label_ref_list_pool): New alloc pool.\n+\t(label_ref_list_t): New type for lists of labels.\n+\t(struct pool_node): Make wend a label_ref_list_t.\n+\t(add_constant): Use the new type, eradicate LABEL_NEXTREF\n+\treferences.\n+\t(dump_table): Likewise.\n+\t(sh_reorg): Set up the alloc pool before using add_constant and\n+\tdump_table, and destroy it when finishing.\n+\n 2006-03-11  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c: Remove redundant comment."}, {"sha": "53b624403ab9c86f9cc183a6a401c2445000d9dc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd3c0a5996256d8159c9c6be925114f692c398e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd3c0a5996256d8159c9c6be925114f692c398e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6dd3c0a5996256d8159c9c6be925114f692c398e", "patch": "@@ -53,6 +53,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"ggc.h\"\n #include \"tree-gimple.h\"\n #include \"cfgloop.h\"\n+#include \"alloc-pool.h\"\n \n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n@@ -2964,6 +2965,14 @@ gen_datalabel_ref (rtx sym)\n }\n \n \f\n+static alloc_pool label_ref_list_pool;\n+\n+typedef struct label_ref_list_d\n+{\n+  rtx label;\n+  struct label_ref_list_d *next;\n+} *label_ref_list_t;\n+\n /* The SH cannot load a large constant into a register, constants have to\n    come from a pc relative load.  The reference of a pc relative load\n    instruction must be less than 1k in front of the instruction.  This\n@@ -3021,7 +3030,7 @@ typedef struct\n {\n   rtx value;\t\t\t/* Value in table.  */\n   rtx label;\t\t\t/* Label of value.  */\n-  rtx wend;\t\t\t/* End of window.  */\n+  label_ref_list_t wend;\t/* End of window.  */\n   enum machine_mode mode;\t/* Mode of value.  */\n \n   /* True if this constant is accessed as part of a post-increment\n@@ -3055,7 +3064,8 @@ static rtx\n add_constant (rtx x, enum machine_mode mode, rtx last_value)\n {\n   int i;\n-  rtx lab, new, ref, newref;\n+  rtx lab, new;\n+  label_ref_list_t ref, newref;\n \n   /* First see if we've already got it.  */\n   for (i = 0; i < pool_size; i++)\n@@ -3081,9 +3091,10 @@ add_constant (rtx x, enum machine_mode mode, rtx last_value)\n \t\t}\n \t      if (lab && pool_window_label)\n \t\t{\n-\t\t  newref = gen_rtx_LABEL_REF (VOIDmode, pool_window_label);\n+\t\t  newref = (label_ref_list_t) pool_alloc (label_ref_list_pool);\n+\t\t  newref->label = pool_window_label;\n \t\t  ref = pool_vector[pool_window_last].wend;\n-\t\t  LABEL_NEXTREF (newref) = ref;\n+\t\t  newref->next = ref;\n \t\t  pool_vector[pool_window_last].wend = newref;\n \t\t}\n \t      if (new)\n@@ -3105,13 +3116,14 @@ add_constant (rtx x, enum machine_mode mode, rtx last_value)\n     lab = gen_label_rtx ();\n   pool_vector[pool_size].mode = mode;\n   pool_vector[pool_size].label = lab;\n-  pool_vector[pool_size].wend = NULL_RTX;\n+  pool_vector[pool_size].wend = NULL;\n   pool_vector[pool_size].part_of_sequence_p = (lab == 0);\n   if (lab && pool_window_label)\n     {\n-      newref = gen_rtx_LABEL_REF (VOIDmode, pool_window_label);\n+      newref = (label_ref_list_t) pool_alloc (label_ref_list_pool);\n+      newref->label = pool_window_label;\n       ref = pool_vector[pool_window_last].wend;\n-      LABEL_NEXTREF (newref) = ref;\n+      newref->next = ref;\n       pool_vector[pool_window_last].wend = newref;\n     }\n   if (lab)\n@@ -3133,7 +3145,8 @@ dump_table (rtx start, rtx barrier)\n   rtx scan = barrier;\n   int i;\n   int need_align = 1;\n-  rtx lab, ref;\n+  rtx lab;\n+  label_ref_list_t ref;\n   int have_df = 0;\n \n   /* Do two passes, first time dump out the HI sized constants.  */\n@@ -3153,9 +3166,9 @@ dump_table (rtx start, rtx barrier)\n \t    scan = emit_label_after (lab, scan);\n \t  scan = emit_insn_after (gen_consttable_2 (p->value, const0_rtx),\n \t\t\t\t  scan);\n-\t  for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t  for (ref = p->wend; ref; ref = ref->next)\n \t    {\n-\t      lab = XEXP (ref, 0);\n+\t      lab = ref->label;\n \t      scan = emit_insn_after (gen_consttable_window_end (lab), scan);\n \t    }\n \t}\n@@ -3203,9 +3216,9 @@ dump_table (rtx start, rtx barrier)\n \t\t    emit_label_before (lab, align_insn);\n \t\t  emit_insn_before (gen_consttable_4 (p->value, const0_rtx),\n \t\t\t\t    align_insn);\n-\t\t  for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t\t  for (ref = p->wend; ref; ref = ref->next)\n \t\t    {\n-\t\t      lab = XEXP (ref, 0);\n+\t\t      lab = ref->label;\n \t\t      emit_insn_before (gen_consttable_window_end (lab),\n \t\t\t\t\talign_insn);\n \t\t    }\n@@ -3241,9 +3254,9 @@ dump_table (rtx start, rtx barrier)\n \n \t  if (p->mode != HImode)\n \t    {\n-\t      for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t      for (ref = p->wend; ref; ref = ref->next)\n \t\t{\n-\t\t  lab = XEXP (ref, 0);\n+\t\t  lab = ref->label;\n \t\t  scan = emit_insn_after (gen_consttable_window_end (lab),\n \t\t\t\t\t  scan);\n \t\t}\n@@ -3293,9 +3306,9 @@ dump_table (rtx start, rtx barrier)\n \n       if (p->mode != HImode)\n \t{\n-\t  for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t  for (ref = p->wend; ref; ref = ref->next)\n \t    {\n-\t      lab = XEXP (ref, 0);\n+\t      lab = ref->label;\n \t      scan = emit_insn_after (gen_consttable_window_end (lab), scan);\n \t    }\n \t}\n@@ -4517,9 +4530,12 @@ sh_reorg (void)\n       mdep_reorg_phase = SH_SHORTEN_BRANCHES0;\n       shorten_branches (first);\n     }\n+\n   /* Scan the function looking for move instructions which have to be\n      changed to pc-relative loads and insert the literal tables.  */\n-\n+  label_ref_list_pool = create_alloc_pool (\"label references list\",\n+\t\t\t\t\t   sizeof (struct label_ref_list_d),\n+\t\t\t\t\t   30);\n   mdep_reorg_phase = SH_FIXUP_PCLOAD;\n   for (insn = first, num_mova = 0; insn; insn = NEXT_INSN (insn))\n     {\n@@ -4700,7 +4716,8 @@ sh_reorg (void)\n \t  insn = barrier;\n \t}\n     }\n-\n+  free_alloc_pool (label_ref_list_pool);\n+  \n   mdep_reorg_phase = SH_SHORTEN_BRANCHES1;\n   INSN_ADDRESSES_FREE ();\n   split_branches (first);"}]}