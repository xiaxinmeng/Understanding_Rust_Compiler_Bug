{"sha": "2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMWE3YzdlOGRlMTQ0M2JjNDYwOTE0ZGMyNDdiNjNjOTAxNGFjNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T06:48:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T06:48:53Z"}, "message": "[multiple changes]\n\n2011-09-02  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-taprop-linux.adb (Initialize_Lock, Initialize_TCB,\n\tInitialize): Define and initialize the\n\tmutex attributes and condition variable attributes locally.\n\n2011-09-02  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb (Check_File): Mark as Locally_Removed a naming\n\texception replaced in an extending project.\n\t(Check_Object): No error when the other source is locally removed.\n\n2011-09-02  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch6.adb (Is_Build_In_Place_Function_Call): in Alfa mode, allow\n\tunresolved calls.\n\nFrom-SVN: r178432", "tree": {"sha": "421c3d1e172072c112f9f90e3f03cd0f2ed80d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/421c3d1e172072c112f9f90e3f03cd0f2ed80d42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/comments", "author": null, "committer": null, "parents": [{"sha": "8b875290b18fadaac0d10ec6d223dc8391367e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b875290b18fadaac0d10ec6d223dc8391367e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b875290b18fadaac0d10ec6d223dc8391367e67"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "50355a76953ec84434145e4d6fe2b230290f7f3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "patch": "@@ -1,3 +1,20 @@\n+2011-09-02  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-taprop-linux.adb (Initialize_Lock, Initialize_TCB,\n+\tInitialize): Define and initialize the\n+\tmutex attributes and condition variable attributes locally.\n+\n+2011-09-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb (Check_File): Mark as Locally_Removed a naming\n+\texception replaced in an extending project.\n+\t(Check_Object): No error when the other source is locally removed.\n+\n+2011-09-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function_Call): in Alfa mode, allow\n+\tunresolved calls.\n+\n 2011-08-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Clean up handling of x86 and x86-64"}, {"sha": "d1632db490d84bf0bf669c3d85acc85e3b7716d2", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "patch": "@@ -6084,7 +6084,7 @@ package body Exp_Ch6 is\n \n          Build_Protected_Subprogram_Call (N,\n            Name     => New_Occurrence_Of (Subp, Sloc (N)),\n-           Rec      =>  Convert_Concurrent (Rec, Etype (Rec)),\n+           Rec      => Convert_Concurrent (Rec, Etype (Rec)),\n            External => True);\n \n       else\n@@ -6797,6 +6797,16 @@ package body Exp_Ch6 is\n \n          elsif Nkind (Name (Exp_Node)) = N_Explicit_Dereference then\n             Function_Id := Etype (Name (Exp_Node));\n+\n+         --  In Alfa mode, protected subprogram calls are not expanded, so that\n+         --  we may end up with a call that is neither resolved to an entity,\n+         --  nor an indirect call.\n+\n+         elsif Alfa_Mode then\n+            return False;\n+\n+         else\n+            raise Program_Error;\n          end if;\n \n          return Is_Build_In_Place_Function (Function_Id);"}, {"sha": "92ae7851fe0cfa62ea104d1f2c69cc157513d78b", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "patch": "@@ -7588,8 +7588,9 @@ package body Prj.Nmsc is\n          --  the same file it is expected that it has the same object)\n \n          if Source /= No_Source\n+           and then Source.Replaced_By = No_Source\n            and then Source.Path /= Src.Path\n-           and then Src.Project = Source.Project\n+           and then Is_Extending (Src.Project, Source.Project)\n          then\n             Error_Msg_File_1 := Src.File;\n             Error_Msg_File_2 := Source.File;"}, {"sha": "f4f5bc3f1b8e04f4d82f2c3402e6d77ca2afda07", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba1a7c7e8de1443bc460914dc247b63c9014ac6/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=2ba1a7c7e8de1443bc460914dc247b63c9014ac6", "patch": "@@ -97,12 +97,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   --  The following are effectively constants, but they need to be initialized\n-   --  by calling a pthread_ function.\n-\n-   Mutex_Attr   : aliased pthread_mutexattr_t;\n-   Cond_Attr    : aliased pthread_condattr_t;\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -261,9 +255,13 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Prio);\n \n-      Result : Interfaces.C.int;\n+      Mutex_Attr : aliased pthread_mutexattr_t;\n+      Result     : Interfaces.C.int;\n \n    begin\n+      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Result := pthread_mutex_init (L, Mutex_Attr'Access);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -279,9 +277,13 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Level);\n \n-      Result : Interfaces.C.int;\n+      Mutex_Attr : aliased pthread_mutexattr_t;\n+      Result     : Interfaces.C.int;\n \n    begin\n+      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Result := pthread_mutex_init (L, Mutex_Attr'Access);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -762,7 +764,9 @@ package body System.Task_Primitives.Operations is\n    --------------------\n \n    procedure Initialize_TCB (Self_ID : Task_Id; Succeeded : out Boolean) is\n-      Result : Interfaces.C.int;\n+      Mutex_Attr : aliased pthread_mutexattr_t;\n+      Cond_Attr  : aliased pthread_condattr_t;\n+      Result     : Interfaces.C.int;\n \n    begin\n       --  Give the task a unique serial number\n@@ -774,6 +778,9 @@ package body System.Task_Primitives.Operations is\n       Self_ID.Common.LL.Thread := Null_Thread_Id;\n \n       if not Single_Lock then\n+         Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+         pragma Assert (Result = 0);\n+\n          Result := pthread_mutex_init (Self_ID.Common.LL.L'Access,\n            Mutex_Attr'Access);\n          pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -784,6 +791,9 @@ package body System.Task_Primitives.Operations is\n          end if;\n       end if;\n \n+      Result := pthread_condattr_init (Cond_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Result := pthread_cond_init (Self_ID.Common.LL.CV'Access,\n         Cond_Attr'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -1027,7 +1037,9 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    procedure Initialize (S : in out Suspension_Object) is\n-      Result : Interfaces.C.int;\n+      Mutex_Attr : aliased pthread_mutexattr_t;\n+      Cond_Attr  : aliased pthread_condattr_t;\n+      Result     : Interfaces.C.int;\n \n    begin\n       --  Initialize internal state (always to False (RM D.10(6)))\n@@ -1037,6 +1049,9 @@ package body System.Task_Primitives.Operations is\n \n       --  Initialize internal mutex\n \n+      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Result := pthread_mutex_init (S.L'Access, Mutex_Attr'Access);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -1047,6 +1062,9 @@ package body System.Task_Primitives.Operations is\n \n       --  Initialize internal condition variable\n \n+      Result := pthread_condattr_init (Cond_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Result := pthread_cond_init (S.CV'Access, Cond_Attr'Access);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n@@ -1340,12 +1358,6 @@ package body System.Task_Primitives.Operations is\n          end if;\n       end loop;\n \n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      Result := pthread_condattr_init (Cond_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n       --  Initialize the global RTS lock"}]}