{"sha": "ece84738e7b584ed534791b502f29b499de1a7ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlODQ3MzhlN2I1ODRlZDUzNDc5MWI1MDJmMjliNDk5ZGUxYTdlYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-10-12T16:11:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-12T16:11:41Z"}, "message": "user.cfg.in: Scan tr1_impl/hashtable.\n\n2007-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/doxygen/user.cfg.in: Scan tr1_impl/hashtable.\n\t* include/tr1_impl/hashtable: Correct comment.\n\n\t* include/ext/hash_map: Remove extraneous public markers.\n\t* include/ext/hash_set: Same.\n\n\t* testsuite/25_algorithms/headers/parallel_algorithm.cc: Move\n\tinside algorithm directory.\t\n\t* testsuite/25_algorithms/headers/algorithm_parallel_mode.cc: Same.\n\t* testsuite/25_algorithms/headers/parallel_algorithm_mixed1.cc: Same.\n\t* testsuite/25_algorithms/headers/parallel_algorithm_mixed2.cc: Same.\n\t* testsuite/25_algorithms/headers/algorithm/parallel_algorithm.cc:\n\tTo this.\t\n\t* testsuite/25_algorithms/headers/algorithm/\n\talgorithm_parallel_mode.cc: Same.\n\t* testsuite/25_algorithms/headers/algorithm/\n\tparallel_algorithm_mixed1.cc: Same.\n\t* testsuite/25_algorithms/headers/algorithm/\n\tparallel_algorithm_mixed2.cc: Same.\n\n\t* testsuite/21_strings/basic_string/requirements/\n\texplicit_instantiation/debug.cc: Remove exception text.\n\t\n\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n\tFix for debug mode testing.\t\n\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Same.\n\nFrom-SVN: r129264", "tree": {"sha": "ea156b34326d2c3b1e655c2a719d1f092dce3ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea156b34326d2c3b1e655c2a719d1f092dce3ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece84738e7b584ed534791b502f29b499de1a7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece84738e7b584ed534791b502f29b499de1a7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece84738e7b584ed534791b502f29b499de1a7ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece84738e7b584ed534791b502f29b499de1a7ea/comments", "author": null, "committer": null, "parents": [{"sha": "d437e14c53bc595622a3ba4f49887d992c0c2897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d437e14c53bc595622a3ba4f49887d992c0c2897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d437e14c53bc595622a3ba4f49887d992c0c2897"}], "stats": {"total": 107, "additions": 63, "deletions": 44}, "files": [{"sha": "e4e6924fd3f375c8bb7a98b54298efb5dccd61ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -1,3 +1,32 @@\n+2007-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/doxygen/user.cfg.in: Scan tr1_impl/hashtable.\n+\t* include/tr1_impl/hashtable: Correct comment.\n+\n+\t* include/ext/hash_map: Remove extraneous public markers.\n+\t* include/ext/hash_set: Same.\n+\n+\t* testsuite/25_algorithms/headers/parallel_algorithm.cc: Move\n+\tinside algorithm directory.\t\n+\t* testsuite/25_algorithms/headers/algorithm_parallel_mode.cc: Same.\n+\t* testsuite/25_algorithms/headers/parallel_algorithm_mixed1.cc: Same.\n+\t* testsuite/25_algorithms/headers/parallel_algorithm_mixed2.cc: Same.\n+\t* testsuite/25_algorithms/headers/algorithm/parallel_algorithm.cc:\n+\tTo this.\t\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\talgorithm_parallel_mode.cc: Same.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_mixed1.cc: Same.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_mixed2.cc: Same.\n+\n+\t* testsuite/21_strings/basic_string/requirements/\n+\texplicit_instantiation/debug.cc: Remove exception text.\n+\t\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n+\tFix for debug mode testing.\t\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Same.\n+\t\n 2007-10-12  Jesper Nilsson  <jesper.nilsson@axis.com>\n \n        * testsuite/tr1/5_numerical_facilities/special_functions/"}, {"sha": "6b8cca1c87183b26a9470820cc49fdf3078c0ff4", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -605,6 +605,7 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/tr1_impl/cwchar \\\n                          include/tr1_impl/cwctype \\\n                          include/tr1_impl/functional \\\n+                         include/tr1_impl/hashtable \\\n                          include/tr1_impl/random \\\n                          include/tr1_impl/regex \\\n                          include/tr1_impl/tuple \\"}, {"sha": "b2d937f277a896672cf492916c9d9040b3ffceff", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -120,7 +120,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       get_allocator() const\n       { return _M_ht.get_allocator(); }\n \n-    public:\n       hash_map()\n       : _M_ht(100, hasher(), key_equal(), allocator_type()) {}\n   \n@@ -158,7 +157,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n \t: _M_ht(__n, __hf, __eql, __a)\n         { _M_ht.insert_unique(__f, __l); }\n \n-    public:\n       size_type\n       size() const\n       { return _M_ht.size(); }\n@@ -196,7 +194,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       end() const\n       { return _M_ht.end(); }\n \n-    public:\n       pair<iterator, bool>\n       insert(const value_type& __obj)\n       { return _M_ht.insert_unique(__obj); }\n@@ -342,7 +339,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       get_allocator() const\n       { return _M_ht.get_allocator(); }\n \n-    public:\n       hash_multimap()\n       : _M_ht(100, hasher(), key_equal(), allocator_type()) {}\n \n@@ -380,7 +376,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n \t: _M_ht(__n, __hf, __eql, __a)\n         { _M_ht.insert_equal(__f, __l); }\n \n-    public:\n       size_type\n       size() const\n       { return _M_ht.size(); }\n@@ -418,7 +413,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       end() const\n       { return _M_ht.end(); }\n \n-    public:\n       iterator\n       insert(const value_type& __obj)\n       { return _M_ht.insert_equal(__obj); }\n@@ -468,7 +462,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       clear()\n       { _M_ht.clear(); }\n \n-    public:\n       void\n       resize(size_type __hint)\n       { _M_ht.resize(__hint); }"}, {"sha": "79d605fa9558747efd29213d632f04501af75123", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -122,7 +122,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       get_allocator() const\n       { return _M_ht.get_allocator(); }\n \n-    public:\n       hash_set()\n       : _M_ht(100, hasher(), key_equal(), allocator_type()) {}\n \n@@ -160,7 +159,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n \t: _M_ht(__n, __hf, __eql, __a)\n         { _M_ht.insert_unique(__f, __l); }\n \n-    public:\n       size_type\n       size() const\n       { return _M_ht.size(); }\n@@ -190,7 +188,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       end() const\n       { return _M_ht.end(); }\n \n-    public:\n       pair<iterator, bool>\n       insert(const value_type& __obj)\n       {\n@@ -239,7 +236,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       clear()\n       { _M_ht.clear(); }\n \n-    public:\n       void\n       resize(size_type __hint)\n       { _M_ht.resize(__hint); }\n@@ -327,7 +323,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       get_allocator() const\n       { return _M_ht.get_allocator(); }\n \n-    public:\n       hash_multiset()\n       : _M_ht(100, hasher(), key_equal(), allocator_type()) {}\n \n@@ -365,7 +360,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n \t: _M_ht(__n, __hf, __eql, __a)\n         { _M_ht.insert_equal(__f, __l); }\n \n-    public:\n       size_type\n       size() const\n       { return _M_ht.size(); }\n@@ -395,7 +389,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       end() const\n       { return _M_ht.end(); }\n \n-    public:\n       iterator\n       insert(const value_type& __obj)\n       { return _M_ht.insert_equal(__obj); }\n@@ -437,7 +430,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT_D)\n       clear()\n       { _M_ht.clear(); }\n \n-    public:\n       void\n       resize(size_type __hint)\n       { _M_ht.resize(__hint); }"}, {"sha": "0255e1a7cb3fe0ed2609b7a9a1e06bfc96820b52", "filename": "libstdc++-v3/include/tr1_impl/hashtable", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fhashtable?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -37,7 +37,7 @@\n // std::tr1::unordered_multiset, and std::tr1::unordered_multimap.\n // hashtable has many template parameters, partly to accommodate\n // the differences between those four classes and partly to \n-// accommodate policy choices that go beyond what TR1 calls for.\n+// accommodate policy choices that go beyond TR1 specifications.\n \n // Class template hashtable attempts to encapsulate all reasonable\n // variation among hash tables that use chaining.  It does not handle"}, {"sha": "8a8951f2db20232538e3b0f801d18a67aced29f4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/explicit_instantiation/debug.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fexplicit_instantiation%2Fdebug.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -16,15 +16,6 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n // This file tests explicit instantiation of basic_string\n \n #include <debug/string>"}, {"sha": "3724768d4a6f1ee0166f82703c05135ca8b47754", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/capacity/29134.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcapacity%2F29134.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -27,13 +27,20 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::vector<bool> vb;\n+  using std::vector;\n+  using std::numeric_limits;\n+\n+#ifndef _GLIBCXX_DEBUG\n+  using std::_S_word_bit;\n+#else\n+  using std::_GLIBCXX_STD_D::_S_word_bit;\n+#endif\n \n   // Actually, vector<bool> is special, see libstdc++/31370.\n-  typedef std::vector<bool>::difference_type difference_type;\n+  vector<bool> vb;\n+  typedef vector<bool>::difference_type difference_type;\n   VERIFY( vb.max_size()\n-\t  == (std::numeric_limits<difference_type>::max()\n-\t      - int(std::_S_word_bit) + 1) );\n+\t  == (numeric_limits<difference_type>::max() - int(_S_word_bit) + 1) );\n }\n \n int main()"}, {"sha": "fbbe7b4f586098c5ede1aad1943a7a77d06324b4", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/31370.cc", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2F31370.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "patch": "@@ -24,6 +24,12 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n+#ifndef _GLIBCXX_DEBUG\n+  using std::_S_word_bit;\n+#else\n+  using std::_GLIBCXX_STD_D::_S_word_bit;\n+#endif\n+\n inline void\n check_cap_ge_size(const std::vector<bool>& x)\n {\n@@ -62,7 +68,7 @@ void test01()\n     {\n       std::vector<bool> x;\n       x.resize(x.max_size() / 2 + 1, false); \n-      for(int i = 0; i < std::_S_word_bit; ++i)\n+      for(int i = 0; i < _S_word_bit; ++i)\n \tx.push_back(false);\n       check_cap_ge_size(x);\n     }\n@@ -75,7 +81,7 @@ void test01()\n     {\n       std::vector<bool> x;\n       x.resize(x.max_size() / 2 + 1, false); \n-      x.insert(x.end(), std::_S_word_bit, false);\n+      x.insert(x.end(), _S_word_bit, false);\n       check_cap_ge_size(x);\n     }\n   catch(std::bad_alloc&)\n@@ -87,7 +93,7 @@ void test01()\n     {\n       std::vector<bool> x;\n       x.resize(x.max_size() / 2 + 1, false); \n-      std::vector<bool> y(std::_S_word_bit, false);\n+      std::vector<bool> y(_S_word_bit, false);\n       x.insert(x.end(), y.begin(), y.end());\n       check_cap_ge_size(x);\n     }\n@@ -101,8 +107,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      for(int i = 0; i < std::_S_word_bit; ++i)\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      for(int i = 0; i < _S_word_bit; ++i)\n \tx.push_back(false);\n       check_cap_ge_size(x);\n     }\n@@ -114,8 +120,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      x.insert(x.end(), std::_S_word_bit, false);\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      x.insert(x.end(), _S_word_bit, false);\n       check_cap_ge_size(x);\n     }\n   catch(std::bad_alloc&)\n@@ -126,8 +132,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      std::vector<bool> y(std::_S_word_bit, false);\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      std::vector<bool> y(_S_word_bit, false);\n       x.insert(x.end(), y.begin(), y.end());\n       check_cap_ge_size(x);\n     }\n@@ -141,8 +147,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      for(int i = 0; i < std::_S_word_bit + 1; ++i)\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      for(int i = 0; i < _S_word_bit + 1; ++i)\n \tx.push_back(false);\n       ++myexit;\n     }\n@@ -156,8 +162,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      x.insert(x.end(), std::_S_word_bit + 1, false);\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      x.insert(x.end(), _S_word_bit + 1, false);\n       ++myexit;\n     }\n   catch(std::bad_alloc)\n@@ -170,8 +176,8 @@ void test01()\n   try\n     {\n       std::vector<bool> x;\n-      x.resize(x.max_size() - std::_S_word_bit, false); \n-      std::vector<bool> y(std::_S_word_bit + 1, false);\n+      x.resize(x.max_size() - _S_word_bit, false); \n+      std::vector<bool> y(_S_word_bit + 1, false);\n       x.insert(x.end(), y.begin(), y.end());\n       ++myexit;\n     }"}, {"sha": "c2e56c2bd35d212ab147ea7e0a77eca839f59c0b", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/algorithm_parallel_mode.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Falgorithm_parallel_mode.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Falgorithm_parallel_mode.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Falgorithm_parallel_mode.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm_parallel_mode.cc"}, {"sha": "90e02796263f365df0e916f1900d643478a9e867", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/headers/parallel_algorithm.cc"}, {"sha": "c6c4ce2ff4356153944f288b5a010543f546f777", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_mixed1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/headers/parallel_algorithm_mixed1.cc"}, {"sha": "94794d46c9f35027fc2c8c8974b8de45ac21f21d", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_mixed2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece84738e7b584ed534791b502f29b499de1a7ea/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc?ref=ece84738e7b584ed534791b502f29b499de1a7ea", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/headers/parallel_algorithm_mixed2.cc"}]}