{"sha": "7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhYjY5MDU5ZWMyNDIzZDYxZGZkN2I1YjMwYjBkNWZjMjE3M2Y5YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-04-24T13:18:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:18:21Z"}, "message": "gnat_rm.texi: Document pragma Assert_And_Cut.\n\n2013-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document pragma Assert_And_Cut.\n\t* sem_prag.adb (Analyze_Pragma, case Assert_And_Cut): Remove\n\tS14_Pragma call.\n\nFrom-SVN: r198230", "tree": {"sha": "bd8fedb5ef8a844095d0deffb14e0c2bb235b71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8fedb5ef8a844095d0deffb14e0c2bb235b71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/comments", "author": null, "committer": null, "parents": [{"sha": "1f50597830e668d54c3c08c26027e64ad92db85f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f50597830e668d54c3c08c26027e64ad92db85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f50597830e668d54c3c08c26027e64ad92db85f"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "b0eff531da08cb377f18c169e6ea2b61f0a83157", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "patch": "@@ -1,3 +1,9 @@\n+2013-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document pragma Assert_And_Cut.\n+\t* sem_prag.adb (Analyze_Pragma, case Assert_And_Cut): Remove\n+\tS14_Pragma call.\n+\n 2013-04-24  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_aux.adb: Add guard in Available_View."}, {"sha": "254dfdb4992a5f4e70c21b4944883eddafd7597e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "patch": "@@ -105,6 +105,7 @@ Implementation Defined Pragmas\n * Pragma Ada_2012::\n * Pragma Annotate::\n * Pragma Assert::\n+* Pragma Assert_And_Cut::\n * Pragma Assertion_Policy::\n * Pragma Assume_No_Invalid_Values::\n * Pragma Attribute_Definition::\n@@ -860,6 +861,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Ada_2012::\n * Pragma Annotate::\n * Pragma Assert::\n+* Pragma Assert_And_Cut::\n * Pragma Assertion_Policy::\n * Pragma Assume_No_Invalid_Values::\n * Pragma Attribute_Definition::\n@@ -1202,13 +1204,18 @@ Note that, as with the @code{if} statement to which it is equivalent, the\n type of the expression is either @code{Standard.Boolean}, or any type derived\n from this standard type.\n \n-If assertions are disabled (switch @option{-gnata} not used), then there\n+Assert checks can be either checked or ignored. By default they are ignored.\n+They will be checked if either the command line switch @option{-gnata} is\n+used, or if an @code{Assertion_Policy} or @code{Check_Policy} pragma is used\n+to enable @code{Assert_Checks}.\n+\n+If assertions are ignored, then there\n is no run-time effect (and in particular, any side effects from the\n expression will not occur at run time).  (The expression is still\n analyzed at compile time, and may cause types to be frozen if they are\n mentioned here for the first time).\n \n-If assertions are enabled, then the given expression is tested, and if\n+If assertions are checked, then the given expression is tested, and if\n it is @code{False} then @code{System.Assertions.Raise_Assert_Failure} is called\n which results in the raising of @code{Assert_Failure} with the given message.\n \n@@ -1220,13 +1227,39 @@ semantic correctness whether or not assertions are enabled, so turning\n assertions on and off cannot affect the legality of a program.\n \n Note that the implementation defined policy @code{DISABLE}, given in a\n-pragma Assertion_Policy, can be used to suppress this semantic analysis.\n+pragma @code{Assertion_Policy}, can be used to suppress this semantic analysis.\n \n Note: this is a standard language-defined pragma in versions\n of Ada from 2005 on. In GNAT, it is implemented in all versions\n of Ada, and the DISABLE policy is an implementation-defined\n addition.\n \n+@node Pragma Assert_And_Cut\n+@unnumberedsec Pragma Assert_And_Cut\n+@findex Assert_And_Cut\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Assert_And_Cut (\n+  boolean_EXPRESSION\n+  [, string_EXPRESSION]);\n+@end smallexample\n+\n+@noindent\n+The effect of this pragma is identical to that of pragma @code{Assert},\n+except that in an @code{Assertion_Policy} pragma, the identifier\n+@code{Assert_And_Cut} is used to control whether it is ignored or checked\n+(or disabled).\n+\n+The intention is that this be used within a subprogram when the\n+given test expresion sums up all the work done so far in the\n+subprogram, so that the rest of the subprogram can be verified\n+(informally or formally) using only the entry preconditions,\n+and the expression in this pragma. This allows dividing up\n+a subprogram into sections for the purposes of testing or\n+formal verification. The pragma also serves as useful\n+documentation.\n+\n @node Pragma Assertion_Policy\n @unnumberedsec Pragma Assertion_Policy\n @findex Assertion_Policy"}, {"sha": "0b3b72cc8e30e12c039e11947083d8e2448fa103", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "patch": "@@ -8849,7 +8849,6 @@ package body Sem_Prag is\n                Ada_2005_Pragma;\n             else -- Pragma_Assert_And_Cut\n                GNAT_Pragma;\n-               S14_Pragma;\n             end if;\n \n             Check_At_Least_N_Arguments (1);"}]}