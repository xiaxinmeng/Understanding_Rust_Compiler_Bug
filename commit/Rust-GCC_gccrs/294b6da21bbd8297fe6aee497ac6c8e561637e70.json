{"sha": "294b6da21bbd8297fe6aee497ac6c8e561637e70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0YjZkYTIxYmJkODI5N2ZlNmFlZTQ5N2FjNmM4ZTU2MTYzN2U3MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-21T21:19:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-22T13:51:22Z"}, "message": "analyzer: simplify region_model::push_frame\n\nregion_model::push_frame was binding arguments for both the default SSA\nname for each parameter, and the underlying parameter.\n\nSimplify the generated states by only binding the default SSA name if\nit exists, or the parameter if there is no default SSA name.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::push_frame): Bind the default\n\tSSA name for each parm if it exists, falling back to the parm\n\titself otherwise, rather than doing both.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/malloc-ipa-8-double-free.c: Drop\n\t-fanalyzer-verbose-state-changes.", "tree": {"sha": "073f20c5129c4385d621dbe8a0057b09c1a62731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/073f20c5129c4385d621dbe8a0057b09c1a62731"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294b6da21bbd8297fe6aee497ac6c8e561637e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294b6da21bbd8297fe6aee497ac6c8e561637e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294b6da21bbd8297fe6aee497ac6c8e561637e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294b6da21bbd8297fe6aee497ac6c8e561637e70/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc34d04b075244e2ff4ca66079e2128c0cde026c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc34d04b075244e2ff4ca66079e2128c0cde026c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc34d04b075244e2ff4ca66079e2128c0cde026c"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "02bbfa54781f98341a3df9e4836bb2287c6858a2", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294b6da21bbd8297fe6aee497ac6c8e561637e70/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294b6da21bbd8297fe6aee497ac6c8e561637e70/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=294b6da21bbd8297fe6aee497ac6c8e561637e70", "patch": "@@ -2353,17 +2353,12 @@ region_model::push_frame (function *fun, const vec<const svalue *> *arg_svals,\n \t     rest of the params as uninitialized.  */\n \t  if (idx >= arg_svals->length ())\n \t    break;\n+\t  tree parm_lval = iter_parm;\n+\t  if (tree parm_default_ssa = ssa_default_def (fun, iter_parm))\n+\t    parm_lval = parm_default_ssa;\n+\t  const region *parm_reg = get_lvalue (parm_lval, ctxt);\n \t  const svalue *arg_sval = (*arg_svals)[idx];\n-\t  const region *parm_reg = get_lvalue (iter_parm, ctxt);\n \t  set_value (parm_reg, arg_sval, ctxt);\n-\n-\t  /* Also do it for default SSA name (sharing the same value).  */\n-\t  tree parm_default_ssa = ssa_default_def (fun, iter_parm);\n-\t  if (parm_default_ssa)\n-\t    {\n-\t      const region *defssa_reg = get_lvalue (parm_default_ssa, ctxt);\n-\t      set_value (defssa_reg, arg_sval, ctxt);\n-\t    }\n \t}\n     }\n   else\n@@ -2375,10 +2370,10 @@ region_model::push_frame (function *fun, const vec<const svalue *> *arg_svals,\n       for (tree iter_parm = DECL_ARGUMENTS (fndecl); iter_parm;\n \t   iter_parm = DECL_CHAIN (iter_parm))\n \t{\n-\t  on_top_level_param (iter_parm, ctxt);\n-\t  tree parm_default_ssa = ssa_default_def (fun, iter_parm);\n-\t  if (parm_default_ssa)\n+\t  if (tree parm_default_ssa = ssa_default_def (fun, iter_parm))\n \t    on_top_level_param (parm_default_ssa, ctxt);\n+\t  else\n+\t    on_top_level_param (iter_parm, ctxt);\n \t}\n     }\n "}, {"sha": "580862b0138b67a296a504656bcb494fae453472", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-ipa-8-double-free.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294b6da21bbd8297fe6aee497ac6c8e561637e70/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-8-double-free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294b6da21bbd8297fe6aee497ac6c8e561637e70/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-8-double-free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-ipa-8-double-free.c?ref=294b6da21bbd8297fe6aee497ac6c8e561637e70", "patch": "@@ -1,6 +1,6 @@\n /* Example of a multilevel wrapper around malloc/free, with a double-'free'.  */\n \n-/* { dg-additional-options \"-fdiagnostics-show-line-numbers -fdiagnostics-path-format=inline-events -fanalyzer-checker=malloc -fanalyzer-verbose-state-changes -fdiagnostics-show-caret\" } */\n+/* { dg-additional-options \"-fdiagnostics-show-line-numbers -fdiagnostics-path-format=inline-events -fanalyzer-checker=malloc -fdiagnostics-show-caret\" } */\n /* { dg-enable-nn-line-numbers \"\" } */\n \n #include <stdlib.h>\n@@ -83,7 +83,7 @@ void test (int i)\n                   |   NN |   return malloc (size);\n                   |      |          ~~~~~~~~~~~~~\n                   |      |          |\n-                  |      |          (6) allocated here (state of '<unknown>': 'start' -> 'unchecked', NULL origin)\n+                  |      |          (6) allocated here\n                   |\n            <------+\n            |\n@@ -96,7 +96,7 @@ void test (int i)\n            |   NN |   if (!result)\n            |      |      ~                              \n            |      |      |\n-           |      |      (8) assuming 'result' is non-NULL (state of 'result': 'unchecked' -> 'nonnull', NULL origin)\n+           |      |      (8) assuming 'result' is non-NULL\n            |      |      (9) following 'false' branch (when 'result' is non-NULL)...\n            |   NN |     abort ();\n            |   NN |   result->i = i;\n@@ -140,7 +140,7 @@ void test (int i)\n                   |   NN |   free (ptr);\n                   |      |   ~~~~~~~~~~\n                   |      |   |\n-                  |      |   (16) first 'free' here (state of 'ptr': 'nonnull' -> 'freed', NULL origin)\n+                  |      |   (16) first 'free' here\n                   |\n            <------+\n            |\n@@ -187,7 +187,7 @@ void test (int i)\n                   |   NN |   free (ptr);\n                   |      |   ~~~~~~~~~~\n                   |      |   |\n-                  |      |   (23) second 'free' here; first 'free' was at (16) ('ptr' is in state 'freed')\n+                  |      |   (23) second 'free' here; first 'free' was at (16)\n                   |\n    { dg-end-multiline-output \"\" } */\n "}]}