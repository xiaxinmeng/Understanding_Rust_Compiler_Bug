{"sha": "8051c2eb7a942d45736aa566419a9fec8ee96a27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1MWMyZWI3YTk0MmQ0NTczNmFhNTY2NDE5YTlmZWM4ZWU5NmEyNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-02-17T22:21:00Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-02-17T22:21:00Z"}, "message": "re PR rtl-optimization/14119 (libjava Array_3 test fails at -O1)\n\n\tPR optimization/14119\n\t* combine.c (try_combine): When attemting to fix unrecognized insns,\n\tdon't delete SETs marked with REG_EH_REGION notes.\n\nFrom-SVN: r77991", "tree": {"sha": "03e1c405e9d2d3e88aa509118732d9a60fa77386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e1c405e9d2d3e88aa509118732d9a60fa77386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8051c2eb7a942d45736aa566419a9fec8ee96a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8051c2eb7a942d45736aa566419a9fec8ee96a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8051c2eb7a942d45736aa566419a9fec8ee96a27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8051c2eb7a942d45736aa566419a9fec8ee96a27/comments", "author": null, "committer": null, "parents": [{"sha": "db33236e403545fe17a58c2c6b9e854b6da232ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33236e403545fe17a58c2c6b9e854b6da232ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33236e403545fe17a58c2c6b9e854b6da232ec"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "0d3350a2afbc13bc0654e0a0ff2c0749ba78119b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8051c2eb7a942d45736aa566419a9fec8ee96a27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8051c2eb7a942d45736aa566419a9fec8ee96a27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8051c2eb7a942d45736aa566419a9fec8ee96a27", "patch": "@@ -1,3 +1,9 @@\n+2004-02-18  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR optimization/14119\n+\t* combine.c (try_combine): When attemting to fix unrecognized insns,\n+\tdon't delete SETs marked with REG_EH_REGION notes.\n+\n 2004-02-17  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* combine.c (simplify_if_then_else): Do not replace "}, {"sha": "a1219de570db5cb80d016a5c4d7b96d07ab8bdd9", "filename": "gcc/combine.c", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8051c2eb7a942d45736aa566419a9fec8ee96a27/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8051c2eb7a942d45736aa566419a9fec8ee96a27/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8051c2eb7a942d45736aa566419a9fec8ee96a27", "patch": "@@ -2017,7 +2017,8 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n \n   /* If the result isn't valid, see if it is a PARALLEL of two SETs where\n-     the second SET's destination is a register that is unused.  In that case,\n+     the second SET's destination is a register that is unused and isn't\n+     marked as an instruction that might trap in an EH region.  In that case,\n      we just need the first SET.   This can occur when simplifying a divmod\n      insn.  We *must* test for this case here because the code below that\n      splits two independent SETs doesn't handle this case correctly when it\n@@ -2033,37 +2034,42 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n     {\n       rtx set0 = XVECEXP (newpat, 0, 0);\n       rtx set1 = XVECEXP (newpat, 0, 1);\n-  \n+      rtx note;\n+\n       if (((GET_CODE (SET_DEST (set1)) == REG\n-            && find_reg_note (i3, REG_UNUSED, SET_DEST (set1)))\n-          || (GET_CODE (SET_DEST (set1)) == SUBREG\n-              && find_reg_note (i3, REG_UNUSED, SUBREG_REG (SET_DEST (set1)))))\n-          && ! side_effects_p (SET_SRC (set1)))\n-        {\n-          newpat = set0;\n-          insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n-        }\n-  \n+\t    && find_reg_note (i3, REG_UNUSED, SET_DEST (set1)))\n+\t   || (GET_CODE (SET_DEST (set1)) == SUBREG\n+\t       && find_reg_note (i3, REG_UNUSED, SUBREG_REG (SET_DEST (set1)))))\n+\t  && (!(note = find_reg_note (i3, REG_EH_REGION, NULL_RTX))\n+\t      || INTVAL (XEXP (note, 0)) <= 0)\n+\t  && ! side_effects_p (SET_SRC (set1)))\n+\t{\n+\t  newpat = set0;\n+\t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\t}\n+\n       else if (((GET_CODE (SET_DEST (set0)) == REG\n-                && find_reg_note (i3, REG_UNUSED, SET_DEST (set0)))\n-                || (GET_CODE (SET_DEST (set0)) == SUBREG\n-                    && find_reg_note (i3, REG_UNUSED,\n-                                      SUBREG_REG (SET_DEST (set0)))))\n-              && ! side_effects_p (SET_SRC (set0)))\n-        {\n-          newpat = set1;\n-          insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n-    \n-          if (insn_code_number >= 0)\n-            {\n-              /* If we will be able to accept this, we have made a\n-                 change to the destination of I3.  This requires us to\n-                 do a few adjustments.  */\n-            \n-              PATTERN (i3) = newpat;\n-              adjust_for_new_dest (i3);\n-            }\n-        }\n+\t\t && find_reg_note (i3, REG_UNUSED, SET_DEST (set0)))\n+\t\t|| (GET_CODE (SET_DEST (set0)) == SUBREG\n+\t\t    && find_reg_note (i3, REG_UNUSED,\n+\t\t\t\t      SUBREG_REG (SET_DEST (set0)))))\n+\t       && (!(note = find_reg_note (i3, REG_EH_REGION, NULL_RTX))\n+\t\t   || INTVAL (XEXP (note, 0)) <= 0)\n+\t       && ! side_effects_p (SET_SRC (set0)))\n+\t{\n+\t  newpat = set1;\n+\t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\n+\t  if (insn_code_number >= 0)\n+\t    {\n+\t      /* If we will be able to accept this, we have made a\n+\t\t change to the destination of I3.  This requires us to\n+\t\t do a few adjustments.  */\n+\n+\t      PATTERN (i3) = newpat;\n+\t      adjust_for_new_dest (i3);\n+\t    }\n+\t}\n     }\n \n   /* If we were combining three insns and the result is a simple SET"}]}