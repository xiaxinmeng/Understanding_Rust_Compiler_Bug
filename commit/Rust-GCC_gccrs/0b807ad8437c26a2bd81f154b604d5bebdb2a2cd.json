{"sha": "0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4MDdhZDg0MzdjMjZhMmJkODFmMTU0YjYwNGQ1YmViZGIyYTJjZA==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1999-12-14T05:33:22Z"}, "committer": {"name": "Mumit Khan", "email": "khan@gcc.gnu.org", "date": "1999-12-14T05:33:22Z"}, "message": "lex.c (saving_parse_to_obstack): New global.\n\n1999-12-13  Mumit Khan  <khan@xraylith.wisc.edu>\n\n\t* lex.c (saving_parse_to_obstack): New global.\n\t(reinit_parse_for_block): Use.\n\t(reinit_parse_for_expr): Use.\n\t(check_newline): Use.\n\nFrom-SVN: r30896", "tree": {"sha": "584103397f4fdf00e876da66b5e7c60cf519d95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/584103397f4fdf00e876da66b5e7c60cf519d95a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd/comments", "author": null, "committer": null, "parents": [{"sha": "0f7db4884e2a2f3a1b45ca5eaf50b64f0fcdeef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7db4884e2a2f3a1b45ca5eaf50b64f0fcdeef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7db4884e2a2f3a1b45ca5eaf50b64f0fcdeef0"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "7f5425e7c4946812e571e4e2dc810d6af0451c1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "patch": "@@ -1,3 +1,10 @@\n+1999-12-13  Mumit Khan  <khan@xraylith.wisc.edu>\n+\n+\t* lex.c (saving_parse_to_obstack): New global.\n+\t(reinit_parse_for_block): Use.\n+\t(reinit_parse_for_expr): Use.\n+\t(check_newline): Use.\n+\n 1999-12-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* optimize.c (initialize_inlined_parameters): Take FN to which the"}, {"sha": "a6a1d2896be45c5525bce6622a65efe70fdff8b4", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b807ad8437c26a2bd81f154b604d5bebdb2a2cd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0b807ad8437c26a2bd81f154b604d5bebdb2a2cd", "patch": "@@ -113,6 +113,9 @@ file_name_nondirectory (x)\n struct obstack inline_text_obstack;\n char *inline_text_firstobj;\n \n+/* Nonzero if parse output is being saved to an obstack for later parsing. */\n+static int saving_parse_to_obstack = 0;\n+\n #if USE_CPPLIB\n #include \"cpplib.h\"\n extern cpp_reader  parse_in;\n@@ -1618,7 +1621,9 @@ reinit_parse_for_block (pyychar, obstackp)\n     {\n       int this_lineno = lineno;\n \n+      saving_parse_to_obstack = 1;\n       c = skip_white_space (c);\n+      saving_parse_to_obstack = 0;\n \n       /* Don't lose our cool if there are lots of comments.  */\n       if (lineno == this_lineno + 1)\n@@ -1747,7 +1752,9 @@ reinit_parse_for_expr (obstackp)\n     {\n       int this_lineno = lineno;\n \n+      saving_parse_to_obstack = 1;\n       c = skip_white_space (c);\n+      saving_parse_to_obstack = 0;\n \n       /* Don't lose our cool if there are lots of comments.  */\n       if (lineno == this_lineno + 1)\n@@ -2489,10 +2496,11 @@ check_newline ()\n      (2) I don't know how well that would work in the presense\n      of filenames that contain wide characters.  */\n \n-  if (saw_line)\n+  if (saw_line || saving_parse_to_obstack)\n     {\n       /* Don't treat \\ as special if we are processing #line 1 \"...\".\n-\t If you want it to be treated specially, use # 1 \"...\".  */\n+\t If you want it to be treated specially, use # 1 \"...\". Also\n+\t ignore these if saving to an obstack for later parsing. */\n       ignore_escape_flag = 1;\n     }\n "}]}