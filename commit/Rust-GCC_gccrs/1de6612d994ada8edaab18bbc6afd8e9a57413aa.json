{"sha": "1de6612d994ada8edaab18bbc6afd8e9a57413aa", "node_id": "C_kwDOANBUbNoAKDFkZTY2MTJkOTk0YWRhOGVkYWFiMThiYmM2YWZkOGU5YTU3NDEzYWE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-28T02:31:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-05T16:28:59Z"}, "message": "c++: elaborated-type-spec in requires-expr [PR101677]\n\nWe were failing to declare class S in the global namespace because we were\ntreating the requires-expression parameter scope as a normal block scope, so\nthe implicit declaration went there.\n\nIt seems to me that the requires parameter scope is more like a function\nparameter scope (not least in the use of the word \"parameter\"), so let's\nchange the scope kind.  But then we need to adjust the prohibition on\nplaceholders declaring implicit template parameters.\n\n\tPR c++/101677\n\ngcc/cp/ChangeLog:\n\n\t* name-lookup.h (struct cp_binding_level): Add requires_expression\n\tbit-field.\n\t* parser.cc (cp_parser_requires_expression): Set it.\n\t(synthesize_implicit_template_parm): Check it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-pr67178.C: Adjust error.\n\t* g++.dg/cpp2a/concepts-requires28.C: New test.", "tree": {"sha": "89462116fe7189eb55b70b0692b66519217668f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89462116fe7189eb55b70b0692b66519217668f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1de6612d994ada8edaab18bbc6afd8e9a57413aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de6612d994ada8edaab18bbc6afd8e9a57413aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de6612d994ada8edaab18bbc6afd8e9a57413aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de6612d994ada8edaab18bbc6afd8e9a57413aa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8d22b00adedc21f8b697dd6b990f4821a06634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8d22b00adedc21f8b697dd6b990f4821a06634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8d22b00adedc21f8b697dd6b990f4821a06634"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "fa039028847aebdb6c5407465b23216c809e5427", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=1de6612d994ada8edaab18bbc6afd8e9a57413aa", "patch": "@@ -309,7 +309,10 @@ struct GTY(()) cp_binding_level {\n   /* true for SK_FUNCTION_PARMS of immediate functions.  */\n   unsigned immediate_fn_ctx_p : 1;\n \n-  /* 22 bits left to fill a 32-bit word.  */\n+  /* True for SK_FUNCTION_PARMS of a requires-expression.  */\n+  unsigned requires_expression: 1;\n+\n+  /* 21 bits left to fill a 32-bit word.  */\n };\n \n /* The binding level currently in effect.  */"}, {"sha": "bfd16e1ef620b6c5c5a763cf8e716dd03174cc1f", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=1de6612d994ada8edaab18bbc6afd8e9a57413aa", "patch": "@@ -29964,7 +29964,8 @@ cp_parser_requires_expression (cp_parser *parser)\n       scope_sentinel ()\n       {\n \t++cp_unevaluated_operand;\n-\tbegin_scope (sk_block, NULL_TREE);\n+\tbegin_scope (sk_function_parms, NULL_TREE);\n+\tcurrent_binding_level->requires_expression = true;\n       }\n \n       ~scope_sentinel ()\n@@ -48082,7 +48083,7 @@ static tree\n synthesize_implicit_template_parm  (cp_parser *parser, tree constr)\n {\n   /* A requires-clause is not a function and cannot have placeholders.  */\n-  if (current_binding_level->kind == sk_block)\n+  if (current_binding_level->requires_expression)\n     {\n       error (\"placeholder type not allowed in this context\");\n       return error_mark_node;"}, {"sha": "bdd5f9699e09f8f341de6066288c8fa3a412d93c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67178.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C?ref=1de6612d994ada8edaab18bbc6afd8e9a57413aa", "patch": "@@ -12,7 +12,7 @@ concept C0 = requires (auto x) { // { dg-error \"placeholder type\" }\n template<typename T>\n concept C1 = requires (C1 auto x) { // { dg-error \"not been declared|placeholder|two or more|in requirements\" }\n   x; // { dg-error \"not declared\" }\n-  { x } -> c; // { dg-message \"is invalid\" }\n+  { x } -> c; // { dg-message \"is invalid|not declared\" }\n };\n \n template<typename T>"}, {"sha": "e632f0167f4cef33e3f05d83df6d9f3feded4721", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires28.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1de6612d994ada8edaab18bbc6afd8e9a57413aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires28.C?ref=1de6612d994ada8edaab18bbc6afd8e9a57413aa", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/101677\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+concept C_bug_with_forward_decl = requires(T& t){\n+    t.template f<class S>();\n+};\n+\n+struct good {\n+    template<class T> void f() {}\n+};\n+\n+static_assert(C_bug_with_forward_decl<good>);"}]}