{"sha": "e4ced0b60ccb4c944970304cf74f1ee9086e5553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjZWQwYjYwY2NiNGM5NDQ5NzAzMDRjZjc0ZjFlZTkwODZlNTU1Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-10T20:09:16Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-10T20:09:16Z"}, "message": "i386: Improve code generation of smin(x,0) with -m32.\n\nTo make amends for the recent (temporary) testsuite failure\nof my new gcc.target/i386/minmax-9.c when compiled with -m32,\nthis patch improves the -m32 code we generate for the examples\nin that test case.\n\nThe trick is to expand smin(x,0) as \"x < 0 ? x : 0\" instead\nof the current \"x <= 0 ? x : 0\", as the former can take\nadvantage of sign_bit_mask operations.\n\n2020-08-10  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.c (ix86_expand_int_movcc): Expand\n\tsigned MIN_EXPR against zero as \"x < 0 ? x : 0\" instead of\n\t\"x <= 0 ? x : 0\" to enable sign_bit_compare_p optimizations.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/minmax-12.c: New test.", "tree": {"sha": "0f3ec10bf03fe8509f8c53efa60e2623d08f3800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f3ec10bf03fe8509f8c53efa60e2623d08f3800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ced0b60ccb4c944970304cf74f1ee9086e5553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ced0b60ccb4c944970304cf74f1ee9086e5553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ced0b60ccb4c944970304cf74f1ee9086e5553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ced0b60ccb4c944970304cf74f1ee9086e5553/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b065f0563262a0d6cd1fea8426913bfdd841301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b065f0563262a0d6cd1fea8426913bfdd841301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b065f0563262a0d6cd1fea8426913bfdd841301"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "f441ba929bc178bc6f4534e915ca641f52f4ee49", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ced0b60ccb4c944970304cf74f1ee9086e5553/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ced0b60ccb4c944970304cf74f1ee9086e5553/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=e4ced0b60ccb4c944970304cf74f1ee9086e5553", "patch": "@@ -3305,7 +3305,17 @@ ix86_expand_int_movcc (rtx operands[])\n \t{\n \t  var = operands[2];\n \t  if (INTVAL (operands[3]) == 0 && operands[2] != constm1_rtx)\n-\t    operands[2] = constm1_rtx, op = and_optab;\n+\t    {\n+\t      /* For smin (x, 0), expand as \"x < 0 ? x : 0\" instead of\n+\t\t \"x <= 0 ? x : 0\" to enable sign_bit_compare_p.  */\n+\t      if (code == LE && op1 == const0_rtx && rtx_equal_p (op0, var))\n+\t\toperands[1] = simplify_gen_relational (LT, VOIDmode,\n+\t\t\t\t\t\t       GET_MODE (op0),\n+\t\t\t\t\t\t       op0, const0_rtx);\n+\n+\t      operands[2] = constm1_rtx;\n+\t      op = and_optab;\n+\t    }\n \t  else if (INTVAL (operands[3]) == -1 && operands[3] != const0_rtx)\n \t    operands[2] = const0_rtx, op = ior_optab;\n \t  else"}, {"sha": "40efe541e30cd4ba7384a564b961aa867b977daa", "filename": "gcc/testsuite/gcc.target/i386/minmax-12.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ced0b60ccb4c944970304cf74f1ee9086e5553/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ced0b60ccb4c944970304cf74f1ee9086e5553/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fminmax-12.c?ref=e4ced0b60ccb4c944970304cf74f1ee9086e5553", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -march=i386 -mtune=generic\" } */\n+\n+#define min(a,b) (((a) < (b))? (a) : (b))\n+\n+int foo(int x)\n+{\n+  return min(x,0);\n+}\n+\n+signed char bar(signed char x)\n+{\n+  return min(x,0);\n+}\n+\n+/* { dg-final { scan-assembler \"cltd\" } } */\n+/* { dg-final { scan-assembler \"sarb\" } } */"}]}