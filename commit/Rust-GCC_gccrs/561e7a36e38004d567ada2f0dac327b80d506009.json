{"sha": "561e7a36e38004d567ada2f0dac327b80d506009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxZTdhMzZlMzgwMDRkNTY3YWRhMmYwZGFjMzI3YjgwZDUwNjAwOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-24T10:58:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-24T10:58:22Z"}, "message": "[multiple changes]\n\n2005-05-24  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* include/debug/string (class basic_string): Add missing\n\tdefault template arguments; provide typedefs for char\n\tand wchar_t.\n\t(operator[]): Allow s[s.size()] in debug mode, but not\n\tpedantic mode.\n\n2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\tPort from libstdcxx_so_7-branch:\n\t2005-04-25  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/stl_algo.h (count): Correct concept checks.\n\t(search_n) : Likewise.\n\t* testsuite/25_algorithms/search_n/check_type.cc: New.\n\n\t* testsuite/testsuite_iterators.h\n\t(random_access_iterator_wrapper::operator+): Move out of\n\tclass to external function, and add symmetric version.\n\n\t2005-03-14  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* testsuite/testsuite_iterators.h (WritableObject::WritableObject):\n\tAdd const.\n\n\t2005-02-01  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* testsuite/testsuite_iterators.h (random_access_iterator_wrapper::\n\toperator--): Fix typo.\n\t(OutputContainer::OutputContainer): Correct zeroing array.\n\t(WritableObject::operator==): Fix typo.\n        (WritableObject::operator=): make operator= templated\n\tto allow differing types to be assigned.\n\t(WritableObject::operator++): Fix checking if iterator is\n\twritten to multiple times.\n\t(random_access_iterator_wrapper::operator+): Add const.\n\t(random_access_iterator_wrapper::operator-): Likewise.\n\t(random_access_iterator_wrapper::operator[]): Add dereference.\n\nFrom-SVN: r100101", "tree": {"sha": "0175cad2a36b98bce2a07e455d894b5cfd122bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0175cad2a36b98bce2a07e455d894b5cfd122bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561e7a36e38004d567ada2f0dac327b80d506009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561e7a36e38004d567ada2f0dac327b80d506009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561e7a36e38004d567ada2f0dac327b80d506009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561e7a36e38004d567ada2f0dac327b80d506009/comments", "author": null, "committer": null, "parents": [{"sha": "89f9fe50b1185280cc8cfe89a248f7dac7727fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f9fe50b1185280cc8cfe89a248f7dac7727fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f9fe50b1185280cc8cfe89a248f7dac7727fee"}], "stats": {"total": 150, "additions": 124, "deletions": 26}, "files": [{"sha": "e39d577d540c3d2e0a5fcdd7e46f25772fdf8d5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -1,3 +1,43 @@\n+2005-05-24  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* include/debug/string (class basic_string): Add missing\n+\tdefault template arguments; provide typedefs for char\n+\tand wchar_t.\n+\t(operator[]): Allow s[s.size()] in debug mode, but not\n+\tpedantic mode.\n+\n+2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPort from libstdcxx_so_7-branch:\n+\t2005-04-25  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/stl_algo.h (count): Correct concept checks.\n+\t(search_n) : Likewise.\n+\t* testsuite/25_algorithms/search_n/check_type.cc: New.\n+\n+\t* testsuite/testsuite_iterators.h\n+\t(random_access_iterator_wrapper::operator+): Move out of\n+\tclass to external function, and add symmetric version.\n+\n+\t2005-03-14  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/testsuite_iterators.h (WritableObject::WritableObject):\n+\tAdd const.\n+\t\n+\t2005-02-01  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/testsuite_iterators.h (random_access_iterator_wrapper::\n+\toperator--): Fix typo.\n+\t(OutputContainer::OutputContainer): Correct zeroing array.\n+\t(WritableObject::operator==): Fix typo.\n+        (WritableObject::operator=): make operator= templated \n+\tto allow differing types to be assigned.\n+\t(WritableObject::operator++): Fix checking if iterator is\n+\twritten to multiple times.\n+\t(random_access_iterator_wrapper::operator+): Add const.\n+\t(random_access_iterator_wrapper::operator-): Likewise.\n+\t(random_access_iterator_wrapper::operator[]): Add dereference.\n+\n 2005-05-23  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/debug.html: Explain that _GLIBXX_DEBUG_PEDANTIC"}, {"sha": "469773cb3fe127056f5f277348474d35bb0994c3", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -413,9 +413,8 @@ namespace std\n     {\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_InputIterator>::value_type >)\n-      __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n+\ttypename iterator_traits<_InputIterator>::value_type, _Tp>)\n       __glibcxx_requires_valid_range(__first, __last);\n       typename iterator_traits<_InputIterator>::difference_type __n = 0;\n       for ( ; __first != __last; ++__first)\n@@ -627,9 +626,8 @@ namespace std\n     {\n       // concept requirements\n       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-      __glibcxx_function_requires(_EqualityComparableConcept<\n-\t    typename iterator_traits<_ForwardIterator>::value_type>)\n-      __glibcxx_function_requires(_EqualityComparableConcept<_Tp>)\n+      __glibcxx_function_requires(_EqualOpConcept<\n+\ttypename iterator_traits<_ForwardIterator>::value_type, _Tp>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       if (__count <= 0)"}, {"sha": "3893cd2b5f68bcd80b7a5cf58197ad35a25a4b55", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -1,6 +1,6 @@\n // Debugging string implementation -*- C++ -*-\n \n-// Copyright (C) 2003\n+// Copyright (C) 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,7 +37,8 @@\n \n namespace __gnu_debug\n {\n-  template<typename _CharT, typename _Traits, typename _Allocator>\n+template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n+            typename _Allocator = std::allocator<_CharT> >\n     class basic_string\n     : public std::basic_string<_CharT, _Traits, _Allocator>,\n       public __gnu_debug::_Safe_sequence<basic_string<_CharT, _Traits,\n@@ -213,7 +214,16 @@ namespace __gnu_debug\n     reference\n     operator[](size_type __pos)\n     {\n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n       __glibcxx_check_subscript(__pos);\n+#else\n+      // as an extension v3 allows s[s.size()] when s is non-const.\n+      _GLIBCXX_DEBUG_VERIFY(__pos <= this->size(),\n+\t\t\t    _M_message(::__gnu_debug::__msg_subscript_oob)\n+\t\t\t    ._M_sequence(*this, \"this\")\n+\t\t\t    ._M_integer(__pos, \"__pos\")\n+\t\t\t    ._M_integer(this->size(), \"size\"));\n+#endif\n       return _M_base()[__pos];\n     }\n \n@@ -996,6 +1006,13 @@ namespace __gnu_debug\n       __str._M_invalidate_all();\n       return __res;\n     }\n+\n+  typedef basic_string<char>    string;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef basic_string<wchar_t> wstring;\n+#endif\n+\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "dd4073ff308e189ba853f711b66950d5058dd48c", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/check_type.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fcheck_type.cc?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.9 search_n\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Y { };\n+\n+bool\n+operator==(const X&, const Y&)\n+{ return true; }\n+\n+forward_iterator_wrapper<X>\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, int i, Y& value)\n+{ return std::search_n(begin, end, i , value); }"}, {"sha": "1a6a295ee975e2b963197f9091b08d1278d940a9", "filename": "libstdc++-v3/testsuite/testsuite_iterators.h", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561e7a36e38004d567ada2f0dac327b80d506009/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_iterators.h?ref=561e7a36e38004d567ada2f0dac327b80d506009", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Iterator Wrappers for the C++ library testsuite. \n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -77,7 +77,7 @@ namespace __gnu_test\n       {\n \twrittento = new bool[this->last - this->first];\n \tfor(int i = 0; i < this->last - this->first; i++)\n-\t  writtento = false;\n+\t  writtento[i] = false;\n       }\n \n       ~OutputContainer()\n@@ -96,12 +96,13 @@ namespace __gnu_test\n \tptr(ptr_in), SharedInfo(SharedInfo_in)\n       { }\n \n+      template<class U>\n       void\n-      operator=(T& new_val)\n+      operator=(const U& new_val)\n       {\n \tITERATOR_VERIFY(SharedInfo->writtento[ptr - SharedInfo->first] == 0);\n \tSharedInfo->writtento[ptr - SharedInfo->first] = 1;\n-\tptr = new_val;\n+\t*ptr = new_val;\n       }\n     };\n \n@@ -149,9 +150,9 @@ namespace __gnu_test\n     operator++()\n     {\n       ITERATOR_VERIFY(SharedInfo && ptr < SharedInfo->last);\n-      ITERATOR_VERIFY(ptr>=SharedInfo->first);\n+      ITERATOR_VERIFY(ptr>=SharedInfo->incrementedto);\n       ptr++;\n-      SharedInfo->first=ptr;\n+      SharedInfo->incrementedto=ptr;\n       return *this;\n     }\n \n@@ -423,7 +424,7 @@ namespace __gnu_test\n     operator--(int)\n     {\n       random_access_iterator_wrapper<T> tmp = *this;\n-      ++*this;\n+      --*this;\n       return tmp;\n     }\n \n@@ -443,34 +444,27 @@ namespace __gnu_test\n       return *this;\n     }\n \n-    random_access_iterator_wrapper\n-    operator+(ptrdiff_t n)\n-    {\n-      random_access_iterator_wrapper<T> tmp = *this;\n-      return tmp += n;\n-    }\n-\n     random_access_iterator_wrapper&\n     operator-=(ptrdiff_t n)\n     { return *this += -n; }\n \n     random_access_iterator_wrapper\n-    operator-(ptrdiff_t n)\n+    operator-(ptrdiff_t n) const\n     {\n       random_access_iterator_wrapper<T> tmp = *this;\n       return tmp -= n;\n     }\n \n     ptrdiff_t\n-    operator-(const random_access_iterator_wrapper<T>& in)\n+    operator-(const random_access_iterator_wrapper<T>& in) const\n     {\n       ITERATOR_VERIFY(this->SharedInfo == in.SharedInfo);\n       return this->ptr - in.ptr;\n     }\n \n     T&\n-    operator[](ptrdiff_t n)\n-    { return *(this + n); }\n+    operator[](ptrdiff_t n) const\n+    { return *(*this + n); }\n \n     bool\n     operator<(const random_access_iterator_wrapper<T>& in) const\n@@ -498,6 +492,16 @@ namespace __gnu_test\n     }\n    };\n \n+  template<typename T>\n+    random_access_iterator_wrapper<T>\n+    operator+(random_access_iterator_wrapper<T> it, ptrdiff_t n)\n+    { return it += n; }\n+\n+  template<typename T>\n+    random_access_iterator_wrapper<T>\n+    operator+(ptrdiff_t n, random_access_iterator_wrapper<T> it) \n+    { return it += n; }\n+\n \n   /** \n    * @brief A container-type class for holding iterator wrappers"}]}