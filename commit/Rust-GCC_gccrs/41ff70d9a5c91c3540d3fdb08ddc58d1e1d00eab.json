{"sha": "41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmZjcwZDlhNWM5MWMzNTQwZDNmZGIwOGRkYzU4ZDFlMWQwMGVhYg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-22T13:23:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:23:40Z"}, "message": "[Ada] Prohibit output dependency items on functions\n\nThis patch modifies the analysis of pragma [Refined_]Depends to emit an error\nwhen the pragma is asspciated with a [generic] function, and one of its clauses\ncontains a non-null, non-'Result output item.\n\n------------\n-- Source --\n------------\n\n--  pack.ads\n\npackage Pack with SPARK_Mode is\n   Obj_1 : Integer := 1;\n   Obj_2 : Integer := 2;\n\n   function Func_1 return Integer\n     with Global => (In_Out => Obj_1);                               --  Error\n\n   function Func_2 return Integer\n     with Global => (Output => Obj_1);                               --  Error\n\n   function Func_3 return Integer\n     with Depends => (Func_3'Result => Obj_1,                        --  OK\n                      Obj_1         => Obj_1);                       --  Error\n\n   function Func_4 return Integer\n     with Depends => (Func_4'Result => Obj_1,                        --  OK\n                      null          => Obj_2);                       --  OK\nend Pack;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c pack.ads\npack.ads:6:22: global mode \"In_Out\" is not applicable to functions\npack.ads:9:22: global mode \"Output\" is not applicable to functions\npack.ads:13:23: output item is not applicable to function\n\n2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Input_Output): Emit an error when a non-null,\n\tnon-'Result output appears in the output list of a function.\n\nFrom-SVN: r260519", "tree": {"sha": "f1edd4635995612146de932f874fb3cfcf1e94be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1edd4635995612146de932f874fb3cfcf1e94be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f16cb8dfb93a424887b543015c1e0cfc73ec2fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16cb8dfb93a424887b543015c1e0cfc73ec2fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16cb8dfb93a424887b543015c1e0cfc73ec2fe3"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "cef561e87fc21b7597755b3e900b84c35dadbbc7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "patch": "@@ -1,3 +1,8 @@\n+2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Input_Output): Emit an error when a non-null,\n+\tnon-'Result output appears in the output list of a function.\n+\n 2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb (Build_Array_VS_Func): Reimplemented."}, {"sha": "1c067ba350445cc93cd24d0d2839b5d02e42db44", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=41ff70d9a5c91c3540d3fdb08ddc58d1e1d00eab", "patch": "@@ -941,6 +941,17 @@ package body Sem_Prag is\n \n                     Ekind_In (Item_Id, E_Abstract_State, E_Variable)\n                   then\n+                     --  A [generic] function is not allowed to have Output\n+                     --  items in its dependency relations. Note that \"null\"\n+                     --  and attribute 'Result are still valid items.\n+\n+                     if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n+                       and then not Is_Input\n+                     then\n+                        SPARK_Msg_N\n+                          (\"output item is not applicable to function\", Item);\n+                     end if;\n+\n                      --  The item denotes a concurrent type. Note that single\n                      --  protected/task types are not considered here because\n                      --  they behave as objects in the context of pragma"}]}