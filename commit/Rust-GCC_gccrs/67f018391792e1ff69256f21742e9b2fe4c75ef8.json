{"sha": "67f018391792e1ff69256f21742e9b2fe4c75ef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmMDE4MzkxNzkyZTFmZjY5MjU2ZjIxNzQyZTliMmZlNGM3NWVmOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-05T17:29:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-05T17:29:21Z"}, "message": "re PR c++/51908 ([C++11] ICE in cp_parser_abort_tentative_parse with decltype and variable template arguments)\n\n/cp\n2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51908\n\t* parser.c (cp_parser_postfix_expression [RID_*CAST]): Set\n\tparser->in_type_id_in_expr_p before calling cp_parser_type_id.\n\n/testsuite\n2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51908\n\t* g++.dg/cpp0x/decltype54.C: New.\n\nFrom-SVN: r199707", "tree": {"sha": "0a12840d777589782c453984e52833b894d3d9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a12840d777589782c453984e52833b894d3d9e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f018391792e1ff69256f21742e9b2fe4c75ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f018391792e1ff69256f21742e9b2fe4c75ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f018391792e1ff69256f21742e9b2fe4c75ef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f018391792e1ff69256f21742e9b2fe4c75ef8/comments", "author": null, "committer": null, "parents": [{"sha": "17a7fc37d4cc1d5c6d51c9c59de0b193e9462b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a7fc37d4cc1d5c6d51c9c59de0b193e9462b48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a7fc37d4cc1d5c6d51c9c59de0b193e9462b48"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "f8bacf5d42ba4f27de7f661363efc18b1e950096", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67f018391792e1ff69256f21742e9b2fe4c75ef8", "patch": "@@ -1,6 +1,12 @@\n+2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51908\n+\t* parser.c (cp_parser_postfix_expression [RID_*CAST]): Set\n+\tparser->in_type_id_in_expr_p before calling cp_parser_type_id.\n+\n 2013-06-03  Jan Hubicka  <jh@suse.cz>\n \n-\t* decl2.c (maybe_make_one_only): Use forced_by_abi instad of\n+\t* decl2.c (maybe_make_one_only): Use forced_by_abi instead of\n \tmark_decl_referenced.\n \t(mark_needed): Likewise.\n "}, {"sha": "dfeeb0a94c28d2fcf01aff11b212fd6d09381023", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=67f018391792e1ff69256f21742e9b2fe4c75ef8", "patch": "@@ -5546,6 +5546,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \ttree type;\n \ttree expression;\n \tconst char *saved_message;\n+\tbool saved_in_type_id_in_expr_p;\n \n \t/* All of these can be handled in the same way from the point\n \t   of view of parsing.  Begin by consuming the token\n@@ -5560,7 +5561,10 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* Look for the opening `<'.  */\n \tcp_parser_require (parser, CPP_LESS, RT_LESS);\n \t/* Parse the type to which we are casting.  */\n+\tsaved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n+\tparser->in_type_id_in_expr_p = true;\n \ttype = cp_parser_type_id (parser);\n+\tparser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t/* Look for the closing `>'.  */\n \tcp_parser_require (parser, CPP_GREATER, RT_GREATER);\n \t/* Restore the old message.  */"}, {"sha": "f214b588a88fa4f750e295445c2b9c78f4466c99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67f018391792e1ff69256f21742e9b2fe4c75ef8", "patch": "@@ -1,3 +1,8 @@\n+2013-06-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51908\n+\t* g++.dg/cpp0x/decltype54.C: New.\n+\n 2013-06-05  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.dg/fshort-wchar.c: Add extra dg-options for"}, {"sha": "9d301c0a73922c4c89fcde8857ab5886aec063c2", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype54.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f018391792e1ff69256f21742e9b2fe4c75ef8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype54.C?ref=67f018391792e1ff69256f21742e9b2fe4c75ef8", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/51908\n+// { dg-do compile { target c++11 } }\n+\n+struct foo1\n+{\n+  template <typename Ret, typename... Args>\n+  operator decltype(static_cast<Ret (*)(Args...)>(nullptr)) () const;\n+};\n+\n+struct foo2\n+{\n+  template <typename Ret, typename... Args>\n+  operator decltype(static_cast<Ret (*)(Args... args)>(nullptr)) () const;\n+};\n+\n+struct foo3\n+{\n+  template <typename Ret, typename Arg>\n+  operator decltype(static_cast<Ret (*)(Arg)>(nullptr)) () const;\n+};\n+\n+struct foo4\n+{\n+  template <typename Ret, typename Arg>\n+  operator decltype(static_cast<Ret (*)(Arg arg)>(nullptr)) () const;\n+};"}]}