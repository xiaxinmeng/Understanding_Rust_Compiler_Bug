{"sha": "07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjNWY5NGU4MjA5ZjZjNTJhYzMyYTk0Y2MyMzQxODJkZDZmMTBkMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-04-08T06:44:09Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-04-08T06:44:09Z"}, "message": "tm.texi.in (ASM_OUTPUT_BSS): Remove documentation.\n\n\t* doc/tm.texi.in (ASM_OUTPUT_BSS): Remove documentation.\n\t(BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS): Update documentation.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (ASM_OUTPUT_BSS): Poison.\n\t* varasm.c (asm_output_bss): Remove function.\n\t(emit_bss, init_varasm_once): Don't use ASM_OUTPUT_BSS macro.\n\t\n\t* config/frv/frv.h (BSS_SECTION_ASM_OP): Remove comment.\n\t* config/frv/fr30.h (BSS_SECTION_ASM_OP): Likewise.\n\t* config/i386/djgpp.h (BSS_SECTION_ASM_OP): Likewise.\n\t* config/i386/i386elf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tLikewise.\n\t* config/sh/sh.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tLikewise.\n\t* config/m68k/m68kelf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n\tLikewise.\n\t* config/m68k/netbsd-elf.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n\nFrom-SVN: r172166", "tree": {"sha": "d8c60f79d01e19fbc1844dff337e8247865f9c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8c60f79d01e19fbc1844dff337e8247865f9c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/comments", "author": null, "committer": null, "parents": [{"sha": "f5a28e87f595dd160e4688c96fdcc4a51853b717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a28e87f595dd160e4688c96fdcc4a51853b717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a28e87f595dd160e4688c96fdcc4a51853b717"}], "stats": {"total": 195, "additions": 40, "deletions": 155}, "files": [{"sha": "62df9162caac15bc0ba27d93b76654932aeb9ac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -1,3 +1,23 @@\n+2011-04-08  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* doc/tm.texi.in (ASM_OUTPUT_BSS): Remove documentation.\n+\t(BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS): Update documentation.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (ASM_OUTPUT_BSS): Poison.\n+\t* varasm.c (asm_output_bss): Remove function.\n+\t(emit_bss, init_varasm_once): Don't use ASM_OUTPUT_BSS macro.\n+\t\n+\t* config/frv/frv.h (BSS_SECTION_ASM_OP): Remove comment.\n+\t* config/frv/fr30.h (BSS_SECTION_ASM_OP): Likewise.\n+\t* config/i386/djgpp.h (BSS_SECTION_ASM_OP): Likewise.\n+\t* config/i386/i386elf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tLikewise.\n+\t* config/sh/sh.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tLikewise.\n+\t* config/m68k/m68kelf.h (BSS_SECTION_ASM_OP, ASM_OUTPUT_ALIGNED_BSS):\n+\tLikewise.\n+\t* config/m68k/netbsd-elf.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n+\n 2011-04-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rx/rx.opt (rx610, rx200, rx600): Use Enum not Name on"}, {"sha": "ca483fa88eac705a23ba8cbef7c0d7c7094af943", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -702,13 +702,6 @@ enum reg_class\n    `\".data\"' is right.  */\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n \n /*}}}*/ \f"}, {"sha": "937ae1809a5ddec5ebc14bd9e847d65b4089c00a", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -1574,13 +1574,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    `\".data\"' is right.  */\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #define BSS_SECTION_ASM_OP \"\\t.section .bss,\\\"aw\\\"\"\n \n /* Short Data Support */"}, {"sha": "d1109a2ff3f02e92deb7a7d9ada438f5a0e4160a", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -24,13 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n "}, {"sha": "1b942cba914dc2cfc951961ab946ecdb035d4b89", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -100,24 +100,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n \n-/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n-   separate, explicit argument.  If you define this macro, it is used\n-   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n-   handling the required alignment of the variable.  The alignment is\n-   specified as the number of bits.\n-\n-   Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro.  */\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "a9e37be0881627e599e9c91a4afd469d0d750735", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -1,7 +1,7 @@\n /* m68kelf support, derived from m68kv4.h */\n \n /* Target definitions for GNU compiler for mc680x0 running System V.4\n-   Copyright (C) 1991, 1993, 2000, 2002, 2003, 2004, 2007, 2010\n+   Copyright (C) 1991, 1993, 2000, 2002, 2003, 2004, 2007, 2010, 2011\n    Free Software Foundation, Inc.\n \n    Written by Ron Guilmette (rfg@netcom.com) and Fred Fish (fnf@cygnus.com).\n@@ -139,25 +139,10 @@ do {\t\t\t\t\t\t\t\t\\\n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC \"crtbegin.o%s\"\n \n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #ifndef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #endif\n \n-/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n-   separate, explicit argument.  If you define this macro, it is used\n-   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n-   handling the required alignment of the variable.  The alignment is\n-   specified as the number of bits.\n-\n-   Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro.  */\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "725f71bddf102db1041b370722f4917fcbe50447", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -171,15 +171,6 @@ while (0)\n #define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n \n \n-/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n-   separate, explicit argument.  If you define this macro, it is used\n-   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n-   handling the required alignment of the variable.  The alignment is\n-   specified as the number of bits.\n-\n-   Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro.  */\n-\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "1e4dd7adc31f95e48aab298d1dab82e8400b3d1b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -2113,26 +2113,10 @@ struct sh_args {\n # endif\n #endif\n \n-\n-/* If defined, a C expression whose value is a string containing the\n-   assembler operation to identify the following data as\n-   uninitialized global data.  If not defined, and neither\n-   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,\n-   uninitialized global data will be output in the data section if\n-   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be\n-   used.  */\n #ifndef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #endif\n \n-/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a\n-   separate, explicit argument.  If you define this macro, it is used\n-   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in\n-   handling the required alignment of the variable.  The alignment is\n-   specified as the number of bits.\n-\n-   Try to use function `asm_output_aligned_bss' defined in file\n-   `varasm.c' when defining this macro.  */\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)"}, {"sha": "24c6b809c535341ae24a0a5a32cd624c486fa7c4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -6821,8 +6821,8 @@ data.\n @defmac BSS_SECTION_ASM_OP\n If defined, a C expression whose value is a string, including spacing,\n containing the assembler operation to identify the following data as\n-uninitialized global data.  If not defined, and neither\n-@code{ASM_OUTPUT_BSS} nor @code{ASM_OUTPUT_ALIGNED_BSS} are defined,\n+uninitialized global data.  If not defined, and \n+@code{ASM_OUTPUT_ALIGNED_BSS} not defined,\n uninitialized global data will be output in the data section if\n @option{-fno-common} is passed, otherwise @code{ASM_OUTPUT_COMMON} will be\n used.\n@@ -7598,20 +7598,19 @@ in place of both @code{ASM_OUTPUT_COMMON} and\n the variable's decl in order to chose what to output.\n @end defmac\n \n-@defmac ASM_OUTPUT_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{rounded})\n+@defmac ASM_OUTPUT_ALIGNED_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} the assembler definition of uninitialized global @var{decl} named\n-@var{name} whose size is @var{size} bytes.  The variable @var{rounded}\n-is the size rounded up to whatever alignment the caller wants.\n+@var{name} whose size is @var{size} bytes.  The variable @var{alignment}\n+is the alignment specified as the number of bits.\n \n-Try to use function @code{asm_output_bss} defined in @file{varasm.c} when\n-defining this macro.  If unable, use the expression\n+Try to use function @code{asm_output_aligned_bss} defined in file\n+@file{varasm.c} when defining this macro.  If unable, use the expression\n @code{assemble_name (@var{stream}, @var{name})} to output the name itself;\n before and after that, output the additional assembler syntax for defining\n the name, and a newline.\n \n-There are two ways of handling global BSS@.  One is to define either\n-this macro or its aligned counterpart, @code{ASM_OUTPUT_ALIGNED_BSS}.\n+There are two ways of handling global BSS@.  One is to define this macro.\n The other is to have @code{TARGET_ASM_SELECT_SECTION} return a\n switchable BSS section (@pxref{TARGET_HAVE_SWITCHABLE_BSS_SECTIONS}).\n You do not need to do both.\n@@ -7623,17 +7622,6 @@ not support global BSS, the front end may choose to make globals\n common in order to save space in the object file.\n @end defmac\n \n-@defmac ASM_OUTPUT_ALIGNED_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n-Like @code{ASM_OUTPUT_BSS} except takes the required alignment as a\n-separate, explicit argument.  If you define this macro, it is used in\n-place of @code{ASM_OUTPUT_BSS}, and gives you more flexibility in\n-handling the required alignment of the variable.  The alignment is specified\n-as the number of bits.\n-\n-Try to use function @code{asm_output_aligned_bss} defined in file\n-@file{varasm.c} when defining this macro.\n-@end defmac\n-\n @defmac ASM_OUTPUT_LOCAL (@var{stream}, @var{name}, @var{size}, @var{rounded})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} the assembler definition of a local-common-label named"}, {"sha": "e6e778f1fd3824bee04930e629f80a78aba9449d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -6799,8 +6799,8 @@ data.\n @defmac BSS_SECTION_ASM_OP\n If defined, a C expression whose value is a string, including spacing,\n containing the assembler operation to identify the following data as\n-uninitialized global data.  If not defined, and neither\n-@code{ASM_OUTPUT_BSS} nor @code{ASM_OUTPUT_ALIGNED_BSS} are defined,\n+uninitialized global data.  If not defined, and\n+@code{ASM_OUTPUT_ALIGNED_BSS} not defined,\n uninitialized global data will be output in the data section if\n @option{-fno-common} is passed, otherwise @code{ASM_OUTPUT_COMMON} will be\n used.\n@@ -7564,20 +7564,19 @@ in place of both @code{ASM_OUTPUT_COMMON} and\n the variable's decl in order to chose what to output.\n @end defmac\n \n-@defmac ASM_OUTPUT_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{rounded})\n+@defmac ASM_OUTPUT_ALIGNED_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} the assembler definition of uninitialized global @var{decl} named\n-@var{name} whose size is @var{size} bytes.  The variable @var{rounded}\n-is the size rounded up to whatever alignment the caller wants.\n+@var{name} whose size is @var{size} bytes.  The variable @var{alignment}\n+is the alignment specified as the number of bits.\n \n-Try to use function @code{asm_output_bss} defined in @file{varasm.c} when\n-defining this macro.  If unable, use the expression\n+Try to use function @code{asm_output_aligned_bss} defined in file\n+@file{varasm.c} when defining this macro.  If unable, use the expression\n @code{assemble_name (@var{stream}, @var{name})} to output the name itself;\n before and after that, output the additional assembler syntax for defining\n the name, and a newline.\n \n-There are two ways of handling global BSS@.  One is to define either\n-this macro or its aligned counterpart, @code{ASM_OUTPUT_ALIGNED_BSS}.\n+There are two ways of handling global BSS@.  One is to define this macro.\n The other is to have @code{TARGET_ASM_SELECT_SECTION} return a\n switchable BSS section (@pxref{TARGET_HAVE_SWITCHABLE_BSS_SECTIONS}).\n You do not need to do both.\n@@ -7589,17 +7588,6 @@ not support global BSS, the front end may choose to make globals\n common in order to save space in the object file.\n @end defmac\n \n-@defmac ASM_OUTPUT_ALIGNED_BSS (@var{stream}, @var{decl}, @var{name}, @var{size}, @var{alignment})\n-Like @code{ASM_OUTPUT_BSS} except takes the required alignment as a\n-separate, explicit argument.  If you define this macro, it is used in\n-place of @code{ASM_OUTPUT_BSS}, and gives you more flexibility in\n-handling the required alignment of the variable.  The alignment is specified\n-as the number of bits.\n-\n-Try to use function @code{asm_output_aligned_bss} defined in file\n-@file{varasm.c} when defining this macro.\n-@end defmac\n-\n @defmac ASM_OUTPUT_LOCAL (@var{stream}, @var{name}, @var{size}, @var{rounded})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} the assembler definition of a local-common-label named"}, {"sha": "9229302299181ed6c23a973c02156befd4c03236", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -830,7 +830,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tFUNCTION_ARG_BOUNDARY MUST_USE_SJLJ_EXCEPTIONS US_SOFTWARE_GOFAST  \\\n \tUSING_SVR4_H SVR4_ASM_SPEC FUNCTION_ARG FUNCTION_ARG_ADVANCE\t   \\\n \tFUNCTION_INCOMING_ARG IRA_COVER_CLASSES TARGET_VERSION\t\t   \\\n-\tMACHINE_TYPE TARGET_HAS_TARGETCM\n+\tMACHINE_TYPE TARGET_HAS_TARGETCM ASM_OUTPUT_BSS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "332f0f46033c62ff3e7eb62dd497e0857a99e8d0", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c5f94e8209f6c52ac32a94cc234182dd6f10d2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=07c5f94e8209f6c52ac32a94cc234182dd6f10d2", "patch": "@@ -121,10 +121,6 @@ static unsigned min_align (unsigned, unsigned);\n static void globalize_decl (tree);\n static bool decl_readonly_section_1 (enum section_category);\n #ifdef BSS_SECTION_ASM_OP\n-#ifdef ASM_OUTPUT_BSS\n-static void asm_output_bss (FILE *, tree, const char *,\n-\t\t\t    unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n-#endif\n #ifdef ASM_OUTPUT_ALIGNED_BSS\n static void asm_output_aligned_bss (FILE *, tree, const char *,\n \t\t\t\t    unsigned HOST_WIDE_INT, int)\n@@ -427,34 +423,6 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \n #ifdef BSS_SECTION_ASM_OP\n \n-#ifdef ASM_OUTPUT_BSS\n-\n-/* Utility function for ASM_OUTPUT_BSS for targets to use if\n-   they don't support alignments in .bss.\n-   ??? It is believed that this function will work in most cases so such\n-   support is localized here.  */\n-\n-static void ATTRIBUTE_UNUSED\n-asm_output_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n-\t\tconst char *name,\n-\t\tunsigned HOST_WIDE_INT size ATTRIBUTE_UNUSED,\n-\t\tunsigned HOST_WIDE_INT rounded)\n-{\n-  gcc_assert (strcmp (XSTR (XEXP (DECL_RTL (decl), 0), 0), name) == 0);\n-  targetm.asm_out.globalize_decl_name (file, decl);\n-  switch_to_section (bss_section);\n-#ifdef ASM_DECLARE_OBJECT_NAME\n-  last_assemble_variable_decl = decl;\n-  ASM_DECLARE_OBJECT_NAME (file, name, decl);\n-#else\n-  /* Standard thing is just output label for the object.  */\n-  ASM_OUTPUT_LABEL (file, name);\n-#endif /* ASM_DECLARE_OBJECT_NAME */\n-  ASM_OUTPUT_SKIP (file, rounded ? rounded : 1);\n-}\n-\n-#endif\n-\n #ifdef ASM_OUTPUT_ALIGNED_BSS\n \n /* Utility function for targets to use in implementing\n@@ -1795,7 +1763,7 @@ emit_local (tree decl ATTRIBUTE_UNUSED,\n \n /* A noswitch_section_callback for bss_noswitch_section.  */\n \n-#if defined ASM_OUTPUT_ALIGNED_BSS || defined ASM_OUTPUT_BSS\n+#if defined ASM_OUTPUT_ALIGNED_BSS\n static bool\n emit_bss (tree decl ATTRIBUTE_UNUSED,\n \t  const char *name ATTRIBUTE_UNUSED,\n@@ -1805,9 +1773,6 @@ emit_bss (tree decl ATTRIBUTE_UNUSED,\n #if defined ASM_OUTPUT_ALIGNED_BSS\n   ASM_OUTPUT_ALIGNED_BSS (asm_out_file, decl, name, size, DECL_ALIGN (decl));\n   return true;\n-#else\n-  ASM_OUTPUT_BSS (asm_out_file, decl, name, size, rounded);\n-  return false;\n #endif\n }\n #endif\n@@ -6004,7 +5969,7 @@ init_varasm_once (void)\n   comm_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS\n \t\t\t\t       | SECTION_COMMON, emit_common);\n \n-#if defined ASM_OUTPUT_ALIGNED_BSS || defined ASM_OUTPUT_BSS\n+#if defined ASM_OUTPUT_ALIGNED_BSS\n   bss_noswitch_section = get_noswitch_section (SECTION_WRITE | SECTION_BSS,\n \t\t\t\t\t       emit_bss);\n #endif"}]}