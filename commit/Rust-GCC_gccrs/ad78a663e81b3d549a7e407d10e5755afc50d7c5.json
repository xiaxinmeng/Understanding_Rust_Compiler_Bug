{"sha": "ad78a663e81b3d549a7e407d10e5755afc50d7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3OGE2NjNlODFiM2Q1NDlhN2U0MDdkMTBlNTc1NWFmYzUwZDdjNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-23T08:08:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-23T08:08:59Z"}, "message": "alpha.c (alpha_expand_mov): Split out ...\n\n        * config/alpha/alpha.c (alpha_expand_mov): Split out ...\n        (alpha_expand_movmisalign): ... misaligned vector support.\n        (TARGET_VECTORIZE_MISALIGNED_MEM_OK): Remove.\n        * config/alpha/alpha-protos.h: Update.\n        * config/alpha/alpha.md (VEC): New macro.\n        (movv8qi, movv4hi, movv2si): Compress with VEC.\n        (movv8qi_fix, movv4hi_fix, movv2si_fix): Likewise.\n        (movv8qi_nofix, movv4hi_nofix, movv2si_nofix): Likewise.\n        (movmisalign<mode>): New.\n\nFrom-SVN: r92538", "tree": {"sha": "d04e39a590c342512c208cc5e6b9265907d554dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04e39a590c342512c208cc5e6b9265907d554dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad78a663e81b3d549a7e407d10e5755afc50d7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad78a663e81b3d549a7e407d10e5755afc50d7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad78a663e81b3d549a7e407d10e5755afc50d7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad78a663e81b3d549a7e407d10e5755afc50d7c5/comments", "author": null, "committer": null, "parents": [{"sha": "1e0598e25c07970f830bb52f2ae75c7007dea4b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0598e25c07970f830bb52f2ae75c7007dea4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0598e25c07970f830bb52f2ae75c7007dea4b4"}], "stats": {"total": 182, "additions": 63, "deletions": 119}, "files": [{"sha": "58b8baddd89cddde27c78ba256c4109532a7b3ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad78a663e81b3d549a7e407d10e5755afc50d7c5", "patch": "@@ -1,3 +1,15 @@\n+2004-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_expand_mov): Split out ...\n+\t(alpha_expand_movmisalign): ... misaligned vector support.\n+\t(TARGET_VECTORIZE_MISALIGNED_MEM_OK): Remove.\n+\t* config/alpha/alpha-protos.h: Update.\n+\t* config/alpha/alpha.md (VEC): New macro.\n+\t(movv8qi, movv4hi, movv2si): Compress with VEC.\n+\t(movv8qi_fix, movv4hi_fix, movv2si_fix): Likewise.\n+\t(movv8qi_nofix, movv4hi_nofix, movv2si_nofix): Likewise.\n+\t(movmisalign<mode>): New.\n+\n 2004-12-22  Richard Henderson  <rth@redhat.com>\n \n \t* optabs.h (OTI_movmisalign, movmisalign_optab): New."}, {"sha": "24f24e6b2bf12b226bdc0e53f9b81236ab2a6470", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=ad78a663e81b3d549a7e407d10e5755afc50d7c5", "patch": "@@ -60,6 +60,7 @@ extern rtx alpha_emit_set_const (rtx, enum machine_mode, HOST_WIDE_INT, int);\n extern rtx alpha_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern bool alpha_expand_mov (enum machine_mode, rtx *);\n extern bool alpha_expand_mov_nobwx (enum machine_mode, rtx *);\n+extern void alpha_expand_movmisalign (enum machine_mode, rtx *);\n extern void alpha_emit_floatuns (rtx[]);\n extern rtx alpha_emit_conditional_move (rtx, enum machine_mode);\n extern void alpha_split_tfmode_pair (rtx[]);"}, {"sha": "823cdbc18c4008919269bd545fc1109976ee9001", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ad78a663e81b3d549a7e407d10e5755afc50d7c5", "patch": "@@ -1982,36 +1982,11 @@ alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n bool\n alpha_expand_mov (enum machine_mode mode, rtx *operands)\n {\n-  /* Honor misaligned loads, for those we promised to do so.  */\n-  if (GET_CODE (operands[1]) == MEM\n-      && alpha_vector_mode_supported_p (mode)\n-      && MEM_ALIGN (operands[1]) < GET_MODE_ALIGNMENT (mode))\n-    {\n-      rtx tmp;\n-      if (register_operand (operands[0], mode))\n-\ttmp = operands[0];\n-      else\n-\ttmp = gen_reg_rtx (mode);\n-      alpha_expand_unaligned_load (tmp, operands[1], 8, 0, 0);\n-      if (tmp == operands[0])\n-\treturn true;\n-      operands[1] = tmp;\n-    }\n-\n   /* If the output is not a register, the input must be.  */\n   if (GET_CODE (operands[0]) == MEM\n       && ! reg_or_0_operand (operands[1], mode))\n     operands[1] = force_reg (mode, operands[1]);\n \n-  /* Honor misaligned stores, for those we promised to do so.  */\n-  if (GET_CODE (operands[0]) == MEM\n-      && alpha_vector_mode_supported_p (mode)\n-      && MEM_ALIGN (operands[0]) < GET_MODE_ALIGNMENT (mode))\n-    {\n-      alpha_expand_unaligned_store (operands[0], operands[1], 8, 0);\n-      return true;\n-    }\n-\n   /* Allow legitimize_address to perform some simplifications.  */\n   if (mode == Pmode && symbolic_operand (operands[1], mode))\n     {\n@@ -2211,6 +2186,36 @@ alpha_expand_mov_nobwx (enum machine_mode mode, rtx *operands)\n   return false;\n }\n \n+/* Implement the movmisalign patterns.  One of the operands is a memory\n+   that is not natually aligned.  Emit instructions to load it.  */\n+\n+void\n+alpha_expand_movmisalign (enum machine_mode mode, rtx *operands)\n+{\n+  /* Honor misaligned loads, for those we promised to do so.  */\n+  if (MEM_P (operands[1]))\n+    {\n+      rtx tmp;\n+\n+      if (register_operand (operands[0], mode))\n+\ttmp = operands[0];\n+      else\n+\ttmp = gen_reg_rtx (mode);\n+\n+      alpha_expand_unaligned_load (tmp, operands[1], 8, 0, 0);\n+      if (tmp != operands[0])\n+\temit_move_insn (operands[0], tmp);\n+    }\n+  else if (MEM_P (operands[0]))\n+    {\n+      if (!reg_or_0_operand (operands[1], mode))\n+\toperands[1] = force_reg (mode, operands[1]);\n+      alpha_expand_unaligned_store (operands[0], operands[1], 8, 0);\n+    }\n+  else\n+    gcc_unreachable ();\n+}\n+\n /* Generate an unsigned DImode to FP conversion.  This is the same code\n    optabs would emit if we didn't have TFmode patterns.\n \n@@ -9457,9 +9462,6 @@ alpha_init_libfuncs (void)\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST alpha_build_builtin_va_list\n \n-#undef TARGET_VECTORIZE_MISALIGNED_MEM_OK\n-#define TARGET_VECTORIZE_MISALIGNED_MEM_OK alpha_vector_mode_supported_p\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "145e23c48a58611d9be63c9fbeff93f1d88a5dfd", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 20, "deletions": 91, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad78a663e81b3d549a7e407d10e5755afc50d7c5/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=ad78a663e81b3d549a7e407d10e5755afc50d7c5", "patch": "@@ -6092,103 +6092,32 @@\n \f\n ;; Vector operations\n \n-(define_expand \"movv8qi\"\n-  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:V8QI 1 \"general_operand\" \"\"))]\n-  \"\"\n-{\n-  if (alpha_expand_mov (V8QImode, operands))\n-    DONE;\n-})\n-\n-(define_insn \"*movv8qi_fix\"\n-  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m,r,*f\")\n-\t(match_operand:V8QI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f,*f,r\"))]\n-  \"TARGET_FIX\n-   && (register_operand (operands[0], V8QImode)\n-       || reg_or_0_operand (operands[1], V8QImode))\"\n-  \"@\n-   bis $31,%r1,%0\n-   ldq %0,%1\n-   stq %r1,%0\n-   cpys %R1,%R1,%0\n-   ldt %0,%1\n-   stt %R1,%0\n-   ftoit %1,%0\n-   itoft %1,%0\"\n-  [(set_attr \"type\" \"ilog,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n-\n-(define_insn \"*movv8qi_nofix\"\n-  [(set (match_operand:V8QI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m\")\n-\t(match_operand:V8QI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f\"))]\n-  \"! TARGET_FIX\n-   && (register_operand (operands[0], V8QImode)\n-       || reg_or_0_operand (operands[1], V8QImode))\"\n-  \"@\n-   bis $31,%r1,%0\n-   ldq %0,%1\n-   stq %r1,%0\n-   cpys %R1,%R1,%0\n-   ldt %0,%1\n-   stt %R1,%0\"\n-  [(set_attr \"type\" \"ilog,ild,ist,fcpys,fld,fst\")])\n+(define_mode_macro VEC [V8QI V4HI V2SI])\n \n-(define_expand \"movv4hi\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:V4HI 1 \"general_operand\" \"\"))]\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:VEC 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  if (alpha_expand_mov (V4HImode, operands))\n+  if (alpha_expand_mov (<MODE>mode, operands))\n     DONE;\n })\n \n-(define_insn \"*movv4hi_fix\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m,r,*f\")\n-\t(match_operand:V4HI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f,*f,r\"))]\n-  \"TARGET_FIX\n-   && (register_operand (operands[0], V4HImode)\n-       || reg_or_0_operand (operands[1], V4HImode))\"\n-  \"@\n-   bis $31,%r1,%0\n-   ldq %0,%1\n-   stq %r1,%0\n-   cpys %R1,%R1,%0\n-   ldt %0,%1\n-   stt %R1,%0\n-   ftoit %1,%0\n-   itoft %1,%0\"\n-  [(set_attr \"type\" \"ilog,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n-\n-(define_insn \"*movv4hi_nofix\"\n-  [(set (match_operand:V4HI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m\")\n-\t(match_operand:V4HI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f\"))]\n-  \"! TARGET_FIX\n-   && (register_operand (operands[0], V4HImode)\n-       || reg_or_0_operand (operands[1], V4HImode))\"\n-  \"@\n-   bis $31,%r1,%0\n-   ldq %0,%1\n-   stq %r1,%0\n-   cpys %R1,%R1,%0\n-   ldt %0,%1\n-   stt %R1,%0\"\n-  [(set_attr \"type\" \"ilog,ild,ist,fcpys,fld,fst\")])\n-\n-(define_expand \"movv2si\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:V2SI 1 \"general_operand\" \"\"))]\n+(define_expand \"movmisalign<mode>\"\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:VEC 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  if (alpha_expand_mov (V2SImode, operands))\n-    DONE;\n+  alpha_expand_movmisalign (<MODE>mode, operands);\n+  DONE;\n })\n \n-(define_insn \"*movv2si_fix\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m,r,*f\")\n-\t(match_operand:V2SI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f,*f,r\"))]\n+(define_insn \"*mov<mode>_fix\"\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m,r,*f\")\n+\t(match_operand:VEC 1 \"input_operand\" \"rW,m,rW,*fW,m,*f,*f,r\"))]\n   \"TARGET_FIX\n-   && (register_operand (operands[0], V2SImode)\n-       || reg_or_0_operand (operands[1], V2SImode))\"\n+   && (register_operand (operands[0], <MODE>mode)\n+       || reg_or_0_operand (operands[1], <MODE>mode))\"\n   \"@\n    bis $31,%r1,%0\n    ldq %0,%1\n@@ -6200,12 +6129,12 @@\n    itoft %1,%0\"\n   [(set_attr \"type\" \"ilog,ild,ist,fcpys,fld,fst,ftoi,itof\")])\n \n-(define_insn \"*movv2si_nofix\"\n-  [(set (match_operand:V2SI 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m\")\n-\t(match_operand:V2SI 1 \"input_operand\" \"rW,m,rW,*fW,m,*f\"))]\n+(define_insn \"*mov<mode>_nofix\"\n+  [(set (match_operand:VEC 0 \"nonimmediate_operand\" \"=r,r,m,*f,*f,m\")\n+\t(match_operand:VEC 1 \"input_operand\" \"rW,m,rW,*fW,m,*f\"))]\n   \"! TARGET_FIX\n-   && (register_operand (operands[0], V2SImode)\n-       || reg_or_0_operand (operands[1], V2SImode))\"\n+   && (register_operand (operands[0], <MODE>mode)\n+       || reg_or_0_operand (operands[1], <MODE>mode))\"\n   \"@\n    bis $31,%r1,%0\n    ldq %0,%1"}]}