{"sha": "b9490a6ec19325d3bde7a8f643a69e04858fb940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0OTBhNmVjMTkzMjVkM2JkZTdhOGY2NDNhNjllMDQ4NThmYjk0MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-23T22:44:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-23T22:44:40Z"}, "message": "(default_compilers): Pass -i* after -U*.\n\n(default_compilers): When running cpp,\nmove %{D*} and %{U*} (in that order) just before %i.\n\n(do_spec_1): Handle MKTEMP_EACH_FILE.\n\nFrom-SVN: r2779", "tree": {"sha": "e76bac7445e787a576d1e84b9e91d43e5aa056e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e76bac7445e787a576d1e84b9e91d43e5aa056e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9490a6ec19325d3bde7a8f643a69e04858fb940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9490a6ec19325d3bde7a8f643a69e04858fb940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9490a6ec19325d3bde7a8f643a69e04858fb940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9490a6ec19325d3bde7a8f643a69e04858fb940/comments", "author": null, "committer": null, "parents": [{"sha": "35571e3830c9a9e2413ce199a5e8c20121f19f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35571e3830c9a9e2413ce199a5e8c20121f19f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35571e3830c9a9e2413ce199a5e8c20121f19f65"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "d54f1f382e3e73e2444e2473b41dfba92b15e14a", "filename": "gcc/gcc.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9490a6ec19325d3bde7a8f643a69e04858fb940/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9490a6ec19325d3bde7a8f643a69e04858fb940/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b9490a6ec19325d3bde7a8f643a69e04858fb940", "patch": "@@ -262,7 +262,7 @@ or with constant text in a single argument.\n \targuments.  CC considers `-o foo' as being one switch whose\n \tname starts with `o'.  %{o*} would substitute this text,\n \tincluding the space; thus, two arguments would be generated.\n- %{S*:X} substitutes X if one or more switches whose names with -S are\n+ %{S*:X} substitutes X if one or more switches whose names start with -S are\n \tspecified to CC.  Note that the tail part of the -S option\n \t(i.e. the part matched by the `*') will be substituted for each\n \toccurrence of %* within X.\n@@ -429,14 +429,14 @@ static struct compiler default_compilers[] =\n {\n   {\".c\", \"@c\"},\n   {\"@c\",\n-   \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+   \"cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n+\t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a}\\\n@@ -449,26 +449,26 @@ static struct compiler default_compilers[] =\n \t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\"-\",\n-   \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+   \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %W{o*}}\\\n     %{!E:%e-E required when input is from standard input}\"},\n   {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n-   \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+   \"cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d}\\\n         -undef -D__OBJC__ -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a}\\\n@@ -484,27 +484,27 @@ static struct compiler default_compilers[] =\n   {\".h\", \"@c-header\"},\n   {\"@c-header\",\n    \"%{!E:%eCompilation of header file requested} \\\n-    cpp %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+    cpp %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n         -undef -D__GNUC__=2 %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %W{o*}\"},\n   {\".cc\", \"@c++\"},\n   {\".cxx\", \"@c++\"},\n   {\".C\", \"@c++\"},\n   {\"@c++\",\n-   \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+   \"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} \\\n \t-undef -D__GNUC__=2 -D__GNUG__=2 -D__cplusplus \\\n \t%{ansi:-trigraphs -$ -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.i} %1 %2\\\n \t\t   %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n@@ -543,13 +543,13 @@ static struct compiler default_compilers[] =\n             %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o} %i %A\\n }\"},\n   {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n-   \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n+   \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %I\\\n \t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{trigraphs} \\\n         -undef -$ %{!undef:%p %P} -D__ASSEMBLER__ \\\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:%{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n                     %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n@@ -2536,6 +2536,18 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      obstack_grow (&obstack, input_basename, basename_length);\n \t    else\n \t      {\n+#ifdef MKTEMP_EACH_FILE /* ??? This has a problem: the total number of\n+\t\t\t   values mktemp can return is limited.\n+\t\t\t   That matters for the names of object files.\n+\t\t\t   In 2.4, do something about that.  */\n+\t\t/* Choose a new temp_filename, but get rid of the\n+\t\t   suffix that the spec wants to add to it.  */\n+\t\tchoose_temp_base ();\n+\t\twhile (*p == '.' || isalpha (*p))\n+\t\t  p++;\n+\t\tobstack_grow (&obstack, temp_filename, temp_filename_length);\n+\t\tdelete_this_arg = 1;\n+#else\n \t\tobstack_grow (&obstack, temp_filename, temp_filename_length);\n \t\tif (c == 'u' || c == 'U')\n \t\t  {\n@@ -2546,6 +2558,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    sprintf (buff, \"%d\", unique);\n \t\t    obstack_grow (&obstack, buff, strlen (buff));\n \t\t  }\n+#endif\n \t\tdelete_this_arg = 1;\n \t      }\n \t    arg_going = 1;"}]}