{"sha": "e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwNzM3ZDIyMWRiZWRmN2YxNzZhNWMxZDA5ZWMzZTRkODU1ZmM3Mg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@cygnus.com", "date": "1997-05-29T20:29:01Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-29T20:29:01Z"}, "message": "91th Cygnus<->FSF quick merge\n\nFrom-SVN: r14139", "tree": {"sha": "e52dca0e05223da8463c0c2251032dcb0549e961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e52dca0e05223da8463c0c2251032dcb0549e961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00737d221dbedf7f176a5c1d09ec3e4d855fc72/comments", "author": null, "committer": null, "parents": [{"sha": "f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e10ef29e6b2b6e6d1918ce10426dcf73285825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e10ef29e6b2b6e6d1918ce10426dcf73285825"}], "stats": {"total": 60, "additions": 24, "deletions": 36}, "files": [{"sha": "ccf8c1cb5f3ebbf26a0c6d6d9d09f6889d4184c8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00737d221dbedf7f176a5c1d09ec3e4d855fc72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00737d221dbedf7f176a5c1d09ec3e4d855fc72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "patch": "@@ -1,3 +1,14 @@\n+Thu May 29 13:02:06 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (expand_exception_blocks): Simplify and fix and make\n+\tsure we don't end a region in a sequence, as expand_end_bindings\n+\tdoesn't like it.\n+\n+Wed May 28 17:08:03 1997  Mike Stump  <mrs@cygnus.com>\n+\n+\t* except.c (init_exception_processing): Mark terminate as not\n+\treturning so that the optimizer can optimize better.\n+\n Tue May 27 19:49:19 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* cvt.c (convert): Don't do any extra work, if we can avoid it"}, {"sha": "eb2a2559f84c167a56d7b45b5e01be885fe96ca4", "filename": "gcc/cp/except.c", "status": "modified", "additions": 13, "deletions": 36, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00737d221dbedf7f176a5c1d09ec3e4d855fc72/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00737d221dbedf7f176a5c1d09ec3e4d855fc72/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e00737d221dbedf7f176a5c1d09ec3e4d855fc72", "patch": "@@ -262,6 +262,7 @@ init_exception_processing ()\n \t\t\t\t     vtype, NOT_BUILT_IN);\n   terminate_fndecl = auto_function (get_identifier (\"terminate\"),\n \t\t\t\t    vtype, NOT_BUILT_IN);\n+  TREE_THIS_VOLATILE (terminate_fndecl) = 1;\n \n   push_lang_context (lang_name_c);\n \n@@ -916,46 +917,29 @@ expand_end_eh_spec (raises)\n void\n expand_exception_blocks ()\n {\n-  rtx funcend;\n-  rtx insns;\n-\n-  start_sequence ();\n-\n-  funcend = gen_label_rtx ();\n-\n-  start_sequence ();\n-\n-  /* Add all the catch clauses here.  */\n-  emit_insns (catch_clauses);\n-  catch_clauses = NULL_RTX;\n-\n+  push_to_sequence (catch_clauses);\n   expand_leftover_cleanups ();\n-\n-  insns = get_insns ();\n+  catch_clauses = get_insns ();\n   end_sequence ();\n \n-#if 1\n   /* Do this after we expand leftover cleanups, so that the\n      expand_eh_region_end that expand_end_eh_spec does will match the\n      right expand_eh_region_start, and make sure it comes out before\n      the terminate protected region.  */\n   if (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)))\n     {\n      expand_end_eh_spec (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)));\n-     push_to_sequence (insns);\n-\n-     /* Now expand any new ones.  */\n+     push_to_sequence (catch_clauses);\n      expand_leftover_cleanups ();\n-\n-     insns = get_insns ();\n+     catch_clauses = get_insns ();\n      end_sequence ();\n     }\n-#endif\n-\n-  emit_jump (funcend);\n \n-  if (insns)\n+  if (catch_clauses)\n     {\n+      rtx funcend = gen_label_rtx ();\n+      emit_jump (funcend);\n+\n       /* We cannot protect n regions this way if we must flow into the\n \t EH region through the top of the region, as we have to with\n \t the setjmp/longjmp approach.  */\n@@ -967,23 +951,16 @@ expand_exception_blocks ()\n \t  expand_eh_region_start ();\n \t}\n \n-      emit_insns (insns);\n+      emit_insns (catch_clauses);\n+      catch_clauses = NULL_RTX;\n \n       if (exceptions_via_longjmp == 0)\n \texpand_eh_region_end (TerminateFunctionCall);\n \n       expand_leftover_cleanups ();\n-    }\n \n-  emit_label (funcend);\n-\n-  /* Only if we had previous insns do we want to emit the jump around\n-     them.  If there weren't any, then insns will remain NULL_RTX.  */\n-  if (insns)\n-    insns = get_insns ();\n-  end_sequence ();\n-\n-  emit_insns (insns);\n+      emit_label (funcend);\n+    }\n }\n \n tree"}]}