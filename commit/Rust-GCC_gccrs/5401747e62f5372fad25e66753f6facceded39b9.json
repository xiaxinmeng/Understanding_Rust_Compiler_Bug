{"sha": "5401747e62f5372fad25e66753f6facceded39b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwMTc0N2U2MmY1MzcyZmFkMjVlNjY3NTNmNmZhY2NlZGVkMzliOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-27T19:53:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-27T19:53:21Z"}, "message": "d30v.c (d30v_print_operand): Handle ':'.\n\n        * config/d30v/d30v.c (d30v_print_operand): Handle ':'.\n        * config/d30v/d30v.h (PRINT_OPERAND_PUNCT_VALID_P): Accept ':'.\n        * config/d30v/d30v.md (attr predicable): New.\n        (all insn patterns): Mark non-predicable patterns; use %: on the rest.\n        (andsi3*): Unify into one pattern.\n        (iorsi3*, xorsi3*): Likewise.\n        (peephole2 patterns): Use peep2_reg_dead_p; verify not a\n        conditional return.\n        (old cond_exec patterns): Remove.\n        (define_cond_exec): New.\n\nFrom-SVN: r34204", "tree": {"sha": "fb7dab2d20dc23c4ec8c4ab26cf895b4f5c151eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7dab2d20dc23c4ec8c4ab26cf895b4f5c151eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5401747e62f5372fad25e66753f6facceded39b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5401747e62f5372fad25e66753f6facceded39b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5401747e62f5372fad25e66753f6facceded39b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5401747e62f5372fad25e66753f6facceded39b9/comments", "author": null, "committer": null, "parents": [{"sha": "8d5e6e2527f07e6cfda3b62f1fd826006931d551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d5e6e2527f07e6cfda3b62f1fd826006931d551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d5e6e2527f07e6cfda3b62f1fd826006931d551"}], "stats": {"total": 868, "additions": 258, "deletions": 610}, "files": [{"sha": "f1a3d98d139e062e49d69bbde1437d7b186d770a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5401747e62f5372fad25e66753f6facceded39b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5401747e62f5372fad25e66753f6facceded39b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5401747e62f5372fad25e66753f6facceded39b9", "patch": "@@ -1,3 +1,16 @@\n+2000-05-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/d30v/d30v.c (d30v_print_operand): Handle ':'.\n+\t* config/d30v/d30v.h (PRINT_OPERAND_PUNCT_VALID_P): Accept ':'.\n+\t* config/d30v/d30v.md (attr predicable): New.\n+\t(all insn patterns): Mark non-predicable patterns; use %: on the rest.\n+\t(andsi3*): Unify into one pattern.\n+\t(iorsi3*, xorsi3*): Likewise.\n+\t(peephole2 patterns): Use peep2_reg_dead_p; verify not a\n+\tconditional return.\n+\t(old cond_exec patterns): Remove.\n+\t(define_cond_exec): New.\n+\n Sat May 27 11:01:27 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.h (TREE_CODE_LENGTH): New macro."}, {"sha": "749aa1b4d306ce614110711b8f1f42269580f4c1", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=5401747e62f5372fad25e66753f6facceded39b9", "patch": "@@ -2949,6 +2949,13 @@ d30v_print_operand (stream, x, letter)\n       d30v_print_operand (stream, split_values[ letter == 'L' ], '\\0');\n       break;\n \n+    case ':':   /* Output the condition for the current insn.  */\n+      x = current_insn_predicate;\n+      if (x == NULL_RTX)\n+\tbreak;\n+      letter = 'T';\n+      /* FALLTHRU */\n+\n     case 'F':\t/* Print an appropriate suffix for a false comparision.  */\n     case 'T':\t/* Print an appropriate suffix for a true  comparision.  */\n       /* Note that the sense of appropriate suffix is for conditional execution"}, {"sha": "c97ff98032bb39a8c7222d7bd1128ea4746afe76", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=5401747e62f5372fad25e66753f6facceded39b9", "patch": "@@ -4953,7 +4953,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    `PRINT_OPERAND_PUNCT_VALID_P' is not defined, it means that no punctuation\n    characters (except for the standard one, `%') are used in this way.  */\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '.')\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE) ((CODE) == '.' || (CODE) == ':')\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X"}, {"sha": "14f6a46c49354366feaef479a873dec76f651dfd", "filename": "gcc/config/d30v/d30v.md", "status": "modified", "additions": 237, "deletions": 609, "changes": 846, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5401747e62f5372fad25e66753f6facceded39b9/gcc%2Fconfig%2Fd30v%2Fd30v.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.md?ref=5401747e62f5372fad25e66753f6facceded39b9", "patch": "@@ -351,24 +351,30 @@\n ;; Length in word units\n (define_attr \"length\" \"\"\n   (cond [(eq_attr \"type\" \"iu,mu,either,scmp,sload,mul,scarry,\")\n-\t\t\t\t\t\t(const_int 4)\n+\t\t(const_int 4)\n \t (eq_attr \"type\" \"long,lcmp,lload,lcarry\")\n-\t\t\t\t\t\t(const_int 8)\n-\t (eq_attr \"type\" \"multi,unknown\")\t(const_int 64)\t;; set higher to give a fudge factor\n-\t (eq_attr \"type\" \"br\")\t\t\t(if_then_else (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t\t\t       (const_int -1048576))\n-\t\t\t\t\t\t\t\t   (lt (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t\t\t       (const_int 1048575)))\n-\t\t\t\t\t\t\t      (const_int 4)\n-\t\t\t\t\t\t\t      (const_int 8))\n-\t (eq_attr \"type\" \"br2\")\t\t\t(if_then_else (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t\t\t       (const_int -16384))\n-\t\t\t\t\t\t\t\t   (lt (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t\t\t       (const_int 16383)))\n-\t\t\t\t\t\t\t      (const_int 4)\n-\t\t\t\t\t\t\t      (const_int 8))]\n+\t\t(const_int 8)\n+\t (eq_attr \"type\" \"multi,unknown\")\n+\t\t(const_int 64)\t;; set higher to give a fudge factor\n+\t (eq_attr \"type\" \"br\")\n+\t\t(if_then_else (and (ge (minus (pc) (match_dup 0))\n+\t\t\t\t       (const_int -1048576))\n+\t\t\t\t   (lt (minus (pc) (match_dup 0))\n+\t\t\t\t       (const_int 1048575)))\n+\t\t  (const_int 4)\n+\t\t  (const_int 8))\n+\t (eq_attr \"type\" \"br2\")\n+\t\t(if_then_else (and (ge (minus (pc) (match_dup 0))\n+\t\t\t\t       (const_int -16384))\n+\t\t\t\t   (lt (minus (pc) (match_dup 0))\n+\t\t\t\t       (const_int 16383)))\n+\t\t  (const_int 4)\n+\t\t  (const_int 8))\n+\t]\n \t(const_int 8)))\n \n+(define_attr \"predicable\" \"no,yes\"\n+  (const_string \"yes\"))\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -679,16 +685,16 @@\n \t(match_operand:QI 1 \"move_input_operand\" \"dI,i,Q,m,d,d,O,O,c,d\"))]\n   \"register_operand (operands[0], QImode) || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n-    or %0,%.,%1\n-    or %0,%.,%1\n-    ldb %0,%M1\n-    ldb %0,%M1\n-    stb %1,%M0\n-    stb %1,%M0\n-    stb %.,%M0\n-    stb %.,%M0\n-    mvfsys %0,%1\n-    mvtsys %0,%1\"\n+    or%: %0,%.,%1\n+    or%: %0,%.,%1\n+    ldb%: %0,%M1\n+    ldb%: %0,%M1\n+    stb%: %1,%M0\n+    stb%: %1,%M0\n+    stb%: %.,%M0\n+    stb%: %.,%M0\n+    mvfsys%: %0,%1\n+    mvtsys%: %0,%1\"\n   [(set_attr \"length\" \"4,8,4,8,4,8,4,8,4,4\")\n    (set_attr \"type\" \"either,long,sload,lload,mu,long,mu,long,mu,mu\")])\n \n@@ -709,16 +715,16 @@\n \t(match_operand:HI 1 \"move_input_operand\" \"dI,i,Q,m,d,d,O,O,c,d\"))]\n   \"register_operand (operands[0], HImode) || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n-    or %0,%.,%1\n-    or %0,%.,%1\n-    ldh %0,%M1\n-    ldh %0,%M1\n-    sth %1,%M0\n-    sth %1,%M0\n-    sth %.,%M0\n-    sth %.,%M0\n-    mvfsys %0,%1\n-    mvtsys %0,%1\"\n+    or%: %0,%.,%1\n+    or%: %0,%.,%1\n+    ldh%: %0,%M1\n+    ldh%: %0,%M1\n+    sth%: %1,%M0\n+    sth%: %1,%M0\n+    sth%: %.,%M0\n+    sth%: %.,%M0\n+    mvfsys%: %0,%1\n+    mvtsys%: %0,%1\"\n   [(set_attr \"length\" \"4,8,4,8,4,8,4,8,4,4\")\n    (set_attr \"type\" \"either,long,sload,lload,mu,long,mu,long,mu,mu\")])\n \n@@ -755,17 +761,17 @@\n \t(match_operand:SI 1 \"move_input_operand\" \"dI,F,i,Q,m,d,d,O,O,c,d\"))]\n   \"register_operand (operands[0], SImode) || reg_or_0_operand (operands[1], SImode)\"\n   \"@\n-    or %0,%.,%1\n-    or %0,%.,%L1\n-    or %0,%.,%1\n-    ldw %0,%M1\n-    ldw %0,%M1\n-    stw %1,%M0\n-    stw %1,%M0\n-    stw %.,%M0\n-    stw %.,%M0\n-    mvfsys %0,%1\n-    mvtsys %0,%1\"\n+    or%: %0,%.,%1\n+    or%: %0,%.,%L1\n+    or%: %0,%.,%1\n+    ldw%: %0,%M1\n+    ldw%: %0,%M1\n+    stw%: %1,%M0\n+    stw%: %1,%M0\n+    stw%: %.,%M0\n+    stw%: %.,%M0\n+    mvfsys%: %0,%1\n+    mvtsys%: %0,%1\"\n   [(set_attr \"length\" \"4,8,8,4,8,4,8,4,8,4,4\")\n    (set_attr \"type\" \"either,long,long,sload,lload,mu,long,mu,long,mu,mu\")])\n \n@@ -818,15 +824,15 @@\n \t(match_operand:SF 1 \"move_input_operand\" \"d,G,F,Q,m,d,d,G,G\"))]\n   \"register_operand (operands[0], SFmode) || reg_or_0_operand (operands[1], SFmode)\"\n   \"@\n-    or %0,%.,%1\n-    or %0,%.,0\n-    or %0,%.,%f1\n-    ldw %0,%M1\n-    ldw %0,%M1\n-    stw %1,%M0\n-    stw %1,%M0\n-    stw %.,%M0\n-    stw %.,%M0\"\n+    or%: %0,%.,%1\n+    or%: %0,%.,0\n+    or%: %0,%.,%f1\n+    ldw%: %0,%M1\n+    ldw%: %0,%M1\n+    stw%: %1,%M0\n+    stw%: %1,%M0\n+    stw%: %.,%M0\n+    stw%: %.,%M0\"\n   [(set_attr \"length\" \"4,4,8,4,8,4,8,4,8\")\n    (set_attr \"type\" \"either,either,long,sload,lload,mu,long,mu,long\")])\n \n@@ -879,17 +885,17 @@\n \t(match_operand:CC 1 \"move_input_operand\" \"f,O,N,b,f,d,dON,*Q,*m,*d,*d\"))]\n   \"!memory_operand (operands[0], CCmode) || !memory_operand (operands[1], CCmode)\"\n   \"@\n-    orfg %0,%1,%1\n-    andfg %0,%0,0\n-    orfg %0,%0,1\n+    orfg%: %0,%1,%1\n+    andfg%: %0,%0,0\n+    orfg%: %0,%0,1\n     #\n-    mvfsys %0,%1\n-    cmpne %0,%1,0\n-    or %0,%.,%1\n-    ldb %0,%M1\n-    ldb %0,%M1\n-    stb %1,%M0\n-    stb %1,%M0\"\n+    mvfsys%: %0,%1\n+    cmpne%: %0,%1,0\n+    or%: %0,%.,%1\n+    ldb%: %0,%M1\n+    ldb%: %0,%M1\n+    stb%: %1,%M0\n+    stb%: %1,%M0\"\n   [(set_attr \"length\" \"4,4,4,8,4,4,4,4,8,4,8\")\n    (set_attr \"type\" \"either,either,either,multi,mu,mu,either,sload,lload,mu,long\")])\n \n@@ -923,8 +929,8 @@\n   \"\"\n   \"@\n     #\n-    ldb %0,%M1\n-    ldb %0,%M1\"\n+    ldb%: %0,%M1\n+    ldb%: %0,%M1\"\n   [(set_attr \"type\" \"multi,sload,lload\")\n    (set_attr \"length\" \"16,4,8\")])\n \n@@ -950,8 +956,8 @@\n   \"\"\n   \"@\n     #\n-    ldb %0,%M1\n-    ldb %0,%M1\"\n+    ldb%: %0,%M1\n+    ldb%: %0,%M1\"\n   [(set_attr \"type\" \"multi,sload,lload\")\n    (set_attr \"length\" \"16,4,8\")])\n \n@@ -977,8 +983,8 @@\n   \"\"\n   \"@\n     #\n-    ldh %0,%M1\n-    ldh %0,%M1\"\n+    ldh%: %0,%M1\n+    ldh%: %0,%M1\"\n   [(set_attr \"type\" \"multi,sload,lload\")\n    (set_attr \"length\" \"16,4,8\")])\n \n@@ -1062,9 +1068,9 @@\n \t(zero_extend:HI (match_operand:QI 1 \"gpr_or_memory_operand\" \"d,Q,m\")))]\n   \"\"\n   \"@\n-    and %0,%1,0xff\n-    ldbu %0,%M1\n-    ldbu %0,%M1\"\n+    and%: %0,%1,0xff\n+    ldbu%: %0,%M1\n+    ldbu%: %0,%M1\"\n   [(set_attr \"length\" \"8,4,8\")\n    (set_attr \"type\" \"long,sload,lload\")])\n \n@@ -1073,9 +1079,9 @@\n \t(zero_extend:SI (match_operand:QI 1 \"gpr_or_memory_operand\" \"d,Q,m\")))]\n   \"\"\n   \"@\n-    and %0,%1,0xff\n-    ldbu %0,%M1\n-    ldbu %0,%M1\"\n+    and%: %0,%1,0xff\n+    ldbu%: %0,%M1\n+    ldbu%: %0,%M1\"\n   [(set_attr \"length\" \"8,4,8\")\n    (set_attr \"type\" \"long,sload,lload\")])\n \n@@ -1084,9 +1090,9 @@\n \t(zero_extend:SI (match_operand:HI 1 \"gpr_or_memory_operand\" \"d,Q,m\")))]\n   \"\"\n   \"@\n-    and %0,%1,0xffff\n-    ldhu %0,%M1\n-    ldhu %0,%M1\"\n+    and%: %0,%1,0xffff\n+    ldhu%: %0,%M1\n+    ldhu%: %0,%M1\"\n   [(set_attr \"length\" \"8,4,8\")\n    (set_attr \"type\" \"long,sload,lload\")])\n \n@@ -1178,7 +1184,7 @@\n    (clobber (match_operand:CC 4 \"flag_operand\" \"=f,f\"))\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f\"))]\n   \"\"\n-  \"add %0,%1,%2\"\n+  \"add%: %0,%1,%2\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"either,long\")])\n \n@@ -1207,10 +1213,10 @@\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f,f,f\"))]\n   \"\"\n   \"@\n-    sub %0,%1,%2\n-    sub %0,%1,%2\n-    sub %0,%.,%2\n-    sub %0,%.,%2\"\n+    sub%: %0,%1,%2\n+    sub%: %0,%1,%2\n+    sub%: %0,%.,%2\n+    sub%: %0,%.,%2\"\n   [(set_attr \"length\" \"4,8,4,8\")\n    (set_attr \"type\" \"either,long,either,long\")])\n \n@@ -1220,7 +1226,7 @@\n \t(mult:SI (match_operand:SI 1 \"gpr_operand\" \"%d\")\n \t\t (match_operand:SI 2 \"gpr_or_signed6_operand\" \"dI\")))]\n   \"\"\n-  \"mul %0,%1,%2\"\n+  \"mul%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1230,7 +1236,7 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"d\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"gpr_operand\" \"d\"))))]\n   \"\"\n-  \"mulx %0,%1,%2\"\n+  \"mulx%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1239,7 +1245,7 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"%d\"))\n \t\t (match_operand:DI 2 \"signed6_operand\" \"I\")))]\n   \"\"\n-  \"mulx %0,%1,%2\"\n+  \"mulx%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1273,8 +1279,8 @@\n \t\t      (const_int 32))))]\n   \"\"\n   \"@\n-    or %0,%.,%U1\n-    mvfacc %0,%1,32\"\n+    or%: %0,%.,%U1\n+    mvfacc%: %0,%1,32\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either,iu\")])\n \n@@ -1300,7 +1306,7 @@\n    (clobber (match_operand:CC 3 \"flag_operand\" \"=f\"))\n    (clobber (match_operand:CC 4 \"flag_operand\" \"=f\"))]\n   \"\"\n-  \"sub %0,%.,%1\"\n+  \"sub%: %0,%.,%1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1309,7 +1315,7 @@\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n \t(abs:SI (match_operand:SI 1 \"gpr_operand\" \"d\")))]\n   \"\"\n-  \"abs %0,%1\"\n+  \"abs%: %0,%1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1358,7 +1364,7 @@\n    (clobber (match_operand:CC 4 \"flag_operand\" \"=f,f\"))\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f\"))]\n   \"\"\n-  \"add %0,%1,%2\"\n+  \"add%: %0,%1,%2\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"scarry,lcarry\")])\n \n@@ -1370,7 +1376,7 @@\n    (clobber (match_operand:CC 4 \"flag_operand\" \"=f,f\"))\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f\"))]\n   \"\"\n-  \"addc %0,%1,%2\"\n+  \"addc%: %0,%1,%2\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"scarry,lcarry\")])\n \n@@ -1439,10 +1445,10 @@\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f,f,f\"))]\n   \"\"\n   \"@\n-    sub %0,%1,%2\n-    sub %0,%1,%2\n-    sub %0,%.,%2\n-    sub %0,%.,%2\"\n+    sub%: %0,%1,%2\n+    sub%: %0,%1,%2\n+    sub%: %0,%.,%2\n+    sub%: %0,%.,%2\"\n   [(set_attr \"length\" \"4,8,4,8\")\n    (set_attr \"type\" \"scarry,lcarry,scarry,lcarry\")])\n \n@@ -1455,10 +1461,10 @@\n    (clobber (match_operand:CC 5 \"flag_operand\" \"=f,f,f,f\"))]\n   \"\"\n   \"@\n-    subb %0,%1,%2\n-    subb %0,%1,%2\n-    subb %0,%.,%2\n-    subb %0,%.,%2\"\n+    subb%: %0,%1,%2\n+    subb%: %0,%1,%2\n+    subb%: %0,%.,%2\n+    subb%: %0,%.,%2\"\n   [(set_attr \"length\" \"4,8,4,8\")\n    (set_attr \"type\" \"scarry,lcarry,scarry,lcarry\")])\n \n@@ -1563,7 +1569,7 @@\n \t(ashift:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t   (match_operand:SI 2 \"unsigned5_operand\" \"J\")))]\n   \"\"\n-  \"sra %0,%1,%n2\"\n+  \"sra%: %0,%1,%n2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1572,7 +1578,7 @@\n \t(ashift:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t   (neg:SI (match_operand:SI 2 \"gpr_operand\" \"d\"))))]\n   \"\"\n-  \"sra %0,%1,%2\"\n+  \"sra%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1582,7 +1588,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"gpr_or_unsigned5_operand\" \"dJ\")))]\n   \"\"\n-  \"sra %0,%1,%2\"\n+  \"sra%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")])\n \n ;; Logical Shift Right\n@@ -1591,7 +1597,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"gpr_or_unsigned5_operand\" \"dJ\")))]\n   \"\"\n-  \"srl %0,%1,%2\"\n+  \"srl%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1612,7 +1618,7 @@\n \t(rotate:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t   (match_operand:SI 2 \"unsigned5_operand\" \"J\")))]\n   \"\"\n-  \"rot %0,%1,%n2\"\n+  \"rot%: %0,%1,%n2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1621,7 +1627,7 @@\n \t(rotate:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t   (neg:SI (match_operand:SI 2 \"gpr_operand\" \"d\"))))]\n   \"\"\n-  \"rot %0,%1,%2\"\n+  \"rot%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1631,7 +1637,7 @@\n \t(rotatert:SI (match_operand:SI 1 \"gpr_operand\" \"d\")\n \t\t     (match_operand:SI 2 \"gpr_or_unsigned5_operand\" \"dJ\")))]\n   \"\"\n-  \"rot %0,%1,%2\"\n+  \"rot%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1671,8 +1677,8 @@\n \t\t   (match_operand:SI 2 \"unsigned6_operand\" \"J,P\")))]\n   \"\"\n   \"@\n-    src %U0,%L0,%n2\\;sra %L0,%L0,%n2\n-    sra %U0,%L1,%s2\\;or %L0,%.,0\"\n+    src%: %U0,%L0,%n2\\;sra%: %L0,%L0,%n2\n+    sra%: %U0,%L1,%s2\\;or%: %L0,%.,0\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multi\")])\n \n@@ -1684,7 +1690,9 @@\n   \"\"\n   \"cmpge %3,%2,-31\\;src%T3 %U0,%L0,%2\\;sra%T3 %L0,%L0,%2\\;sub%F3 %U0,%2,-32\\;sra%F3 %U0,%L0,%U0\\;or%F3 %L0,%.,0\"\n   [(set_attr \"length\" \"32\")\n-   (set_attr \"type\" \"multi\")])\n+   (set_attr \"type\" \"multi\")\n+   ;; Not strictly true, since we ought to be able to combine conditions,\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Arithmetic Shift Right\n (define_insn \"ashrdi3\"\n@@ -1698,7 +1706,9 @@\n     sra %L0,%U1,%S2\\;sra %U0,%L0,31\n     cmple %3,%2,31\\;src%T3 %L0,%U0,%2\\;sra%T3 %U0,%U0,%2\\;add%F3 %L0,%2,-32\\;sra%F3 %L0,%U0,%L0\\;sra%F3 %U0,%U0,31\"\n   [(set_attr \"length\" \"8,8,28\")\n-   (set_attr \"type\" \"multi\")])\n+   (set_attr \"type\" \"multi\")\n+   ;; Not strictly true, since we ought to be able to combine conditions,\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Logical Shift Right\n \n@@ -1713,7 +1723,9 @@\n     srl %L0,%U1,%S2\\;or %U0,%.,0\n     cmple %3,%2,31\\;src%T3 %L0,%U0,%2\\;srl%T3 %U0,%U0,%2\\;add%F3 %L0,%2,-32\\;srl%F3 %L0,%U0,%L0\\;or%F3 %U0,%.,0\"\n   [(set_attr \"length\" \"8,8,28\")\n-   (set_attr \"type\" \"multi\")])\n+   (set_attr \"type\" \"multi\")\n+   ;; Not strictly true, since we ought to be able to combine conditions,\n+   (set_attr \"predicable\" \"no\")])\n \n \f\n ;; ::::::::::::::::::::\n@@ -1723,112 +1735,56 @@\n ;; ::::::::::::::::::::\n \n ;; Logical AND, 32 bit integers\n-(define_expand \"andsi3\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n-\t(and:SI (match_operand:SI 1 \"gpr_operand\" \"\")\n-\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"*andsi3_register\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t(and:SI (match_operand:SI 1 \"gpr_operand\" \"%d\")\n-\t\t(match_operand:SI 2 \"gpr_operand\" \"d\")))]\n-  \"\"\n-  \"and %0,%1,%2\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n \n-(define_insn \"*andsi3_move\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"=d,d\")\n-\t(and:SI (match_operand:SI 1 \"gpr_operand\" \"%0,d\")\n-\t\t(match_operand:SI 2 \"const_int_operand\" \"n,n\")))]\n-  \"((INTVAL (operands[2]) & 0xffffffff) == 0xffffffff)\"\n-  \"@\n-    ; and 0xffffffff to same register\n-    and %0,%1,-1\"\n-  [(set_attr \"length\" \"0,4\")\n-   (set_attr \"type\" \"either\")])\n-\n-(define_insn \"*andsi3_constant\"\n+(define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d,d\")\n \t(and:SI (match_operand:SI 1 \"gpr_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"const_int_operand\" \"L,O,I,i\")))]\n+\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"L,I,i,d\")))]\n   \"\"\n   \"@\n-    bclr %0,%1,%B2\n-    or %0,%.,0\n-    and %0,%1,%2\n-    and %0,%1,%2\"\n-  [(set_attr \"length\" \"4,4,4,8\")\n-   (set_attr \"type\" \"either,either,either,long\")])\n+    bclr%: %0,%1,%B2\n+    and%: %0,%1,%2\n+    and%: %0,%1,%2\n+    and%: %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8,4\")\n+   (set_attr \"type\" \"either,either,long,either\")])\n \n ;; Inclusive OR, 32 bit integers\n-(define_expand \"iorsi3\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n-\t(ior:SI (match_operand:SI 1 \"gpr_operand\" \"\")\n-\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"\")))]\n-  \"\"\n-  \"\")\n \n-(define_insn \"*iorsi3_register\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"gpr_operand\" \"%d\")\n-\t\t(match_operand:SI 2 \"gpr_operand\" \"d\")))]\n-  \"\"\n-  \"or %0,%1,%2\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n-\n-(define_insn \"*iorsi3_constant\"\n+(define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d,d\")\n-\t(ior:SI (match_operand:SI 1 \"gpr_operand\" \"%d,0,d,d\")\n-\t\t(match_operand:SI 2 \"const_int_operand\" \"K,O,I,i\")))]\n+\t(ior:SI (match_operand:SI 1 \"gpr_operand\" \"%d,d,d,d\")\n+\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"K,I,i,d\")))]\n   \"\"\n   \"@\n-    bset %0,%1,%B2\n-    ; or 0 to same register (%0)\n-    or %0,%1,%2\n-    or %0,%1,%2\"\n-  [(set_attr \"length\" \"4,0,4,8\")\n-   (set_attr \"type\" \"either,either,either,long\")])\n+    bset%: %0,%1,%B2\n+    or%: %0,%1,%2\n+    or%: %0,%1,%2\n+    or%: %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8,4\")\n+   (set_attr \"type\" \"either,either,long,either\")])\n \n ;; Exclusive OR, 32 bit integers\n-(define_expand \"xorsi3\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n-\t(xor:SI (match_operand:SI 1 \"gpr_operand\" \"\")\n-\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"*xorsi3_register\"\n-  [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t(xor:SI (match_operand:SI 1 \"gpr_operand\" \"%d\")\n-\t\t(match_operand:SI 2 \"gpr_operand\" \"d\")))]\n-  \"\"\n-  \"xor %0,%1,%2\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n \n (define_insn \"*xorsi3_constant\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d,d\")\n-\t(xor:SI (match_operand:SI 1 \"gpr_operand\" \"%d,0,d,d\")\n-\t\t(match_operand:SI 2 \"const_int_operand\" \"K,O,I,i\")))]\n+\t(xor:SI (match_operand:SI 1 \"gpr_operand\" \"%d,d,d,d\")\n+\t\t(match_operand:SI 2 \"gpr_or_constant_operand\" \"K,I,i,d\")))]\n   \"\"\n   \"@\n-    bnot %0,%1,%B2\n-    ; xor 0 to same register (%0)\n-    xor %0,%1,%2\n-    xor %0,%1,%2\"\n-  [(set_attr \"length\" \"4,0,4,8\")\n-   (set_attr \"type\" \"either,either,either,long\")])\n+    bnot%: %0,%1,%B2\n+    xor%: %0,%1,%2\n+    xor%: %0,%1,%2\n+    xor%: %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8,4\")\n+   (set_attr \"type\" \"either,either,long,either\")])\n \n ;; One's complement, 32 bit integers\n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n \t(not:SI (match_operand:SI 1 \"gpr_operand\" \"d\")))]\n   \"\"\n-  \"not %0,%1\"\n+  \"not%: %0,%1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -1945,7 +1901,7 @@\n \t\t (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"%d\"))\n \t\t\t  (sign_extend:DI (match_operand:SI 2 \"gpr_operand\" \"d\")))))]\n   \"\"\n-  \"mac%A0 %.,%1,%2\"\n+  \"mac%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1955,7 +1911,7 @@\n \t\t (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"%d\"))\n \t\t\t  (match_operand:DI 2 \"signed6_operand\" \"I\"))))]\n   \"\"\n-  \"mac%A0 %.,%1,%2\"\n+  \"mac%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1966,7 +1922,7 @@\n \t\t\t\t     (sign_extend:DI (match_operand:SI 2 \"gpr_operand\" \"d\")))\n \t\t\t    (const_int 1))))]\n   \"\"\n-  \"macs%A0 %.,%1,%2\"\n+  \"macs%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1977,7 +1933,7 @@\n \t\t\t\t     (match_operand:DI 2 \"signed6_operand\" \"I\"))\n \t\t\t    (const_int 1))))]\n   \"\"\n-  \"macs%A0 %.,%1,%2\"\n+  \"macs%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1987,7 +1943,7 @@\n \t\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"d\"))\n \t\t\t   (sign_extend:DI (match_operand:SI 2 \"gpr_operand\" \"d\")))))]\n   \"\"\n-  \"msub%A0 %.,%1,%2\"\n+  \"msub%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -1997,7 +1953,7 @@\n \t\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"gpr_operand\" \"d\"))\n \t\t\t   (match_operand:DI 2 \"signed6_operand\" \"I\"))))]\n   \"\"\n-  \"msub%A0 %.,%1,%2\"\n+  \"msub%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -2008,7 +1964,7 @@\n \t\t\t\t      (sign_extend:DI (match_operand:SI 2 \"gpr_operand\" \"d\")))\n \t\t\t     (const_int 1))))]\n   \"\"\n-  \"msubs%A0 %.,%1,%2\"\n+  \"msubs%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -2019,7 +1975,7 @@\n \t\t\t\t      (match_operand:DI 2 \"signed6_operand\" \"I\"))\n \t\t\t     (const_int 1))))]\n   \"\"\n-  \"msubs%A0 %.,%1,%2\"\n+  \"msubs%A0%: %.,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n@@ -2067,7 +2023,7 @@\n \t\t\t   [(match_operand:SI 2 \"gpr_operand\" \"d,d\")\n \t\t\t    (match_operand:SI 3 \"gpr_or_constant_operand\" \"dI,i\")]))]\n   \"\"\n-  \"%R1 %0,%2,%3\"\n+  \"%R1%: %0,%2,%3\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"scmp,lcmp\")])\n \n@@ -2077,7 +2033,7 @@\n \t\t\t   [(match_operand:SI 2 \"gpr_operand\" \"d,d\")\n \t\t\t    (match_operand:SI 3 \"gpr_or_constant_operand\" \"dJP,i\")]))]\n   \"\"\n-  \"%R1 %0,%2,%3\"\n+  \"%R1%: %0,%2,%3\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"scmp,lcmp\")])\n \n@@ -2093,7 +2049,8 @@\n   \"\"\n   \"%R3%T1 %0,%4,%5\"\n   [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")])\n+   (set_attr \"type\" \"scmp,lcmp\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movcccc_signed_false\"\n   [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n@@ -2105,7 +2062,8 @@\n   \"\"\n   \"%R3%F1 %0,%4,%5\"\n   [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")])\n+   (set_attr \"type\" \"scmp,lcmp\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movcccc_unsigned_true\"\n   [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n@@ -2117,7 +2075,8 @@\n   \"\"\n   \"%R3%T1 %0,%4,%5\"\n   [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")])\n+   (set_attr \"type\" \"scmp,lcmp\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*movcccc_unsigned_false\"\n   [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n@@ -2129,7 +2088,8 @@\n   \"\"\n   \"%R3%F1 %0,%4,%5\"\n   [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")])\n+   (set_attr \"type\" \"scmp,lcmp\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; 64 bit integer tests\n (define_insn \"*eqdi_internal\"\n@@ -2193,7 +2153,7 @@\n \t(lt:CC (match_operand:DI 1 \"gpr_operand\" \"e\")\n \t       (const_int 0)))]\n   \"\"\n-  \"cmplt %0,%U1,0\"\n+  \"cmplt%: %0,%U1,0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"scmp\")])\n \n@@ -2232,7 +2192,7 @@\n \t(ge:CC (match_operand:DI 1 \"gpr_operand\" \"e\")\n \t       (const_int 0)))]\n   \"\"\n-  \"cmpge %0,%U1,0\"\n+  \"cmpge%: %0,%U1,0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"scmp\")])\n \n@@ -2530,7 +2490,8 @@\n \n   return \\\"; jump to %l0 optimized away\\\";\n }\"\n-  [(set_attr \"type\" \"br\")])\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*bra_false\"\n   [(set (pc)\n@@ -2554,7 +2515,8 @@\n \n   return \\\"; jump to %l0 optimized away\\\";\n }\"\n-  [(set_attr \"type\" \"br\")])\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Peephole to turn set flag, cond. jumps into branch if register ==/!= 0.\n \n@@ -2569,7 +2531,9 @@\n \t\t\t\t\t  (const_int 0)])\n \t\t      (match_operand 4 \"\" \"\")\n \t\t      (match_operand 5 \"\" \"\")))]\n-  \"reg_dead_p (last_insn, operands[0])\"\n+  \"peep2_reg_dead_p (2, operands[0])\n+   && GET_CODE (operands[4]) != RETURN\n+   && GET_CODE (operands[5]) != RETURN\"\n   [(set (pc)\n \t(if_then_else (match_dup 6)\n \t\t      (match_dup 4)\n@@ -2596,7 +2560,8 @@\n {\n   return GET_CODE (operands[1]) == NE ? \\\"bratnz %2,%l0\\\" : \\\"bratzr %2,%l0\\\";\n }\"\n-  [(set_attr \"type\" \"br2\")])\n+  [(set_attr \"type\" \"br2\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*bra_reg_false\"\n   [(set (pc) (if_then_else (match_operator:CC 1 \"branch_zero_operator\"\n@@ -2609,7 +2574,8 @@\n {\n   return GET_CODE (operands[1]) == EQ ? \\\"bratnz %2,%l0\\\" : \\\"bratzr %2,%l0\\\";\n }\"\n-  [(set_attr \"type\" \"br2\")])\n+  [(set_attr \"type\" \"br2\")\n+   (set_attr \"predicable\" \"no\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2767,8 +2733,8 @@\n   \"\"\n   \"@\n     #\n-    mvfsys %0,%1\n-    or %0,%.,%1\"\n+    mvfsys%: %0,%1\n+    or%: %0,%.,%1\"\n   [(set_attr \"length\" \"8,4,4\")\n    (set_attr \"type\" \"multi,either,either\")])\n \n@@ -2798,7 +2764,7 @@\n \t(and:CC (match_operand:CC 1 \"flag_operand\" \"f\")\n \t\t(match_operand:CC 2 \"flag_operand\" \"f\")))]\n   \"\"\n-  \"andfg %0,%1,%2\"\n+  \"andfg%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -2807,7 +2773,7 @@\n \t(ior:CC (match_operand:CC 1 \"flag_operand\" \"f\")\n \t\t(match_operand:CC 2 \"flag_operand\" \"f\")))]\n   \"\"\n-  \"orfg %0,%1,%2\"\n+  \"orfg%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -2816,7 +2782,7 @@\n \t(xor:CC (match_operand:CC 1 \"flag_operand\" \"f\")\n \t\t(match_operand:CC 2 \"flag_operand\" \"f\")))]\n   \"\"\n-  \"xorfg %0,%1,%2\"\n+  \"xorfg%: %0,%1,%2\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"either\")])\n \n@@ -2829,8 +2795,10 @@\n \t\t (match_operand:SI 2 \"gpr_operand\" \"0\")))]\n   \"\"\n   \"add%T1 %0,%2,1\"\n-[(set_attr \"length\" \"4\")\n- (set_attr \"type\" \"either\")])\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"either\")\n+   ;; Not strictly true -- we could combine conditions.\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"decscc\"\n   [(set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n@@ -2839,8 +2807,10 @@\n \t\t\t (const_int 1))))]\n   \"\"\n   \"sub%T2 %0,%1,1\"\n-[(set_attr \"length\" \"4\")\n- (set_attr \"type\" \"either\")])\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"either\")\n+   ;; Not strictly true -- we could combine conditions.\n+   (set_attr \"predicable\" \"no\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2882,8 +2852,8 @@\n    (clobber (match_operand 3 \"\" \"=d,d\"))]\n   \"\"\n   \"@\n-    jsr %0\n-    bsr %0\"\n+    jsr%: %0\n+    bsr%: %0\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"mu,long\")])\n \n@@ -2920,8 +2890,8 @@\n \t(clobber (match_operand 4 \"\" \"=d,d\"))]\n   \"\"\n   \"@\n-    jsr %1\n-    bsr %1\"\n+    jsr%: %1\n+    bsr%: %1\"\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"mu,long\")])\n \n@@ -2936,7 +2906,8 @@\n   \"reload_completed\"\n   \"jmp link\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"mu\")])\n+   (set_attr \"type\" \"mu\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*cond_return_true\"\n   [(set (pc)\n@@ -2948,7 +2919,8 @@\n   \"reload_completed\"\n   \"jmp%F0 link\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"mu\")])\n+   (set_attr \"type\" \"mu\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*cond_return_false\"\n   [(set (pc)\n@@ -2960,22 +2932,25 @@\n   \"reload_completed\"\n   \"jmp%T0 link\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"mu\")])\n+   (set_attr \"type\" \"mu\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Normal unconditional jump\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"bra %l0\"\n-  [(set_attr \"type\" \"br\")])\n+  [(set_attr \"type\" \"br\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Indirect jump through a register\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:SI 0 \"gpr_operand\" \"d\"))]\n   \"\"\n   \"jmp %0\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"mu\")])\n+   (set_attr \"type\" \"mu\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Instruction to jump to a variable address.  This is a low-level capability\n ;; which can be used to implement a dispatch table when there is no `casesi'\n@@ -2998,7 +2973,8 @@\n   \"\"\n   \"jmp %0\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"mu\")])\n+   (set_attr \"type\" \"mu\")\n+   (set_attr \"predicable\" \"no\")])\n \n \f\n \n@@ -3101,7 +3077,8 @@\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"4,8,4,8,4,4,4,8,4,8,4,4,16\")\n-   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")])\n+   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; If we have: a = (test) ? a : b, or a = (test) ? b : a, we can split it\n ;; before reload to allow combine to substitute in early.\n@@ -3181,7 +3158,8 @@\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"4,8,4,8,4,4,4,8,4,8,4,4,16\")\n-   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")])\n+   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; If we have: a = (test) ? a : b, or a = (test) ? b : a, we can split it\n ;; before reload to allow combine to substitute in early.\n@@ -3261,7 +3239,8 @@\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"4,8,4,8,4,4,4,8,4,8,4,4,16\")\n-   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")])\n+   (set_attr \"type\" \"either,long,sload,lload,mu,mu,either,long,sload,lload,mu,mu,multi\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; If we have: a = (test) ? a : b, or a = (test) ? b : a, we can split it\n ;; before reload to allow combine to substitute in early.\n@@ -3341,7 +3320,8 @@\n   \"\"\n   \"#\"\n   [(set_attr \"length\" \"4,8,4,8,4,8,4,8,16\")\n-   (set_attr \"type\" \"either,long,sload,lload,either,long,sload,lload,multi\")])\n+   (set_attr \"type\" \"either,long,sload,lload,either,long,sload,lload,multi\")\n+   (set_attr \"predicable\" \"no\")])\n \n (define_split\n   [(set (match_operand:SF 0 \"move_output_operand\" \"\")\n@@ -3393,373 +3373,6 @@\n     operands[5] = gen_rtx_EQ (CCmode, operands[2], const0_rtx);\n }\")\n \n-\f\n-;; ::::::::::::::::::::\n-;; ::\n-;; :: Conditional execution\n-;; ::\n-;; ::::::::::::::::::::\n-\n-(define_insn \"*cond_exec_movqi\"\n-  [(cond_exec\n-     (match_operator:CC 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b,b,b,b,b,b,b,b\")\n-\t(const_int 0)])\n-     (set (match_operand:QI 0 \"move_output_operand\" \"=d,d,d,d,Q,m,Q,m,d,c\")\n-\t  (match_operand:QI 1 \"move_input_operand\" \"dI,i,Q,m,d,d,O,O,c,d\")))]\n-  \"register_operand (operands[0], QImode)\n-   || reg_or_0_operand (operands[1], QImode)\"\n-  \"@\n-    or%F2 %0,%.,%1\n-    or%F2 %0,%.,%1\n-    ldb%F2 %0,%M1\n-    ldb%F2 %0,%M1\n-    stb%F2 %1,%M0\n-    stb%F2 %1,%M0\n-    stb%F2 %.,%M0\n-    stb%F2 %.,%M0\n-    mvfsys%F2 %0,%1\n-    mvtsys%F2 %0,%1\"\n-  [(set_attr \"length\" \"4,8,4,8,4,8,4,8,4,4\")\n-   (set_attr \"type\" \"either,long,sload,lload,mu,long,mu,long,mu,mu\")])\n-\n-(define_insn \"*cond_exec_movhi\"\n-  [(cond_exec\n-     (match_operator:CC 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b,b,b,b,b,b,b,b\")\n-\t(const_int 0)])\n-     (set (match_operand:HI 0 \"move_output_operand\" \"=d,d,d,d,Q,m,Q,m,d,c\")\n-\t  (match_operand:HI 1 \"move_input_operand\" \"dI,i,Q,m,d,d,O,O,c,d\")))]\n-  \"register_operand (operands[0], HImode)\n-   || reg_or_0_operand (operands[1], HImode)\"\n-  \"@\n-    or%F2 %0,%.,%1\n-    or%F2 %0,%.,%1\n-    ldh%F2 %0,%M1\n-    ldh%F2 %0,%M1\n-    sth%F2 %1,%M0\n-    sth%F2 %1,%M0\n-    sth%F2 %.,%M0\n-    sth%F2 %.,%M0\n-    mvfsys%F2 %0,%1\n-    mvtsys%F2 %0,%1\"\n-  [(set_attr \"length\" \"4,8,4,8,4,8,4,8,4,4\")\n-   (set_attr \"type\" \"either,long,sload,lload,mu,long,mu,long,mu,mu\")])\n-\n-(define_insn \"*cond_exec_movsi\"\n-  [(cond_exec\n-     (match_operator:CC 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b,b,b,b,b,b,b,b,b\")\n-\t(const_int 0)])\n-     (set (match_operand:SI 0 \"move_output_operand\" \"=d,d,d,d,d,Q,m,Q,m,d,c\")\n-\t  (match_operand:SI 1 \"move_input_operand\" \"dI,F,i,Q,m,d,d,O,O,c,d\")))]\n-  \"register_operand (operands[0], SImode)\n-   || reg_or_0_operand (operands[1], SImode)\"\n-  \"@\n-    or%F2 %0,%.,%1\n-    or%F2 %0,%.,%L1\n-    or%F2 %0,%.,%1\n-    ldw%F2 %0,%M1\n-    ldw%F2 %0,%M1\n-    stw%F2 %1,%M0\n-    stw%F2 %1,%M0\n-    stw%F2 %.,%M0\n-    stw%F2 %.,%M0\n-    mvfsys%F2 %0,%1\n-    mvtsys%F2 %0,%1\"\n-  [(set_attr \"length\" \"4,8,8,4,8,4,8,4,8,4,4\")\n-   (set_attr \"type\" \"either,long,long,sload,lload,mu,long,mu,long,mu,mu\")])\n-\n-(define_insn \"*cond_exec_movsf\"\n-  [(cond_exec\n-     (match_operator:CC 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b,b,b,b,b,b,b\")\n-\t(const_int 0)])\n-     (set (match_operand:SF 0 \"move_output_operand\" \"=d,d,d,d,d,Q,m,Q,m\")\n-\t  (match_operand:SF 1 \"move_input_operand\" \"d,G,F,Q,m,d,d,G,G\")))]\n-  \"register_operand (operands[0], SFmode)\n-   || reg_or_0_operand (operands[1], SFmode)\"\n-  \"@\n-    or%F2 %0,%.,%1\n-    or%F2 %0,%.,0\n-    or%F2 %0,%.,%f1\n-    ldw%F2 %0,%M1\n-    ldw%F2 %0,%M1\n-    stw%F2 %1,%M0\n-    stw%F2 %1,%M0\n-    stw%F2 %.,%M0\n-    stw%F2 %.,%M0\"\n-  [(set_attr \"length\" \"4,4,8,4,8,4,8,4,8\")\n-   (set_attr \"type\" \"either,either,long,sload,lload,mu,long,mu,long\")])\n-\n-(define_insn \"*cond_exec_zero_extendqisi\"\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d\")\n-\t  (zero_extend:SI\n-\t    (match_operand:QI 1 \"gpr_or_memory_operand\" \"d,Q,m\"))))]\n-  \"\"\n-  \"@\n-    and%F2 %0,%1,0xff\n-    ldbu%F2 %0,%M1\n-    ldbu%F2 %0,%M1\"\n-  [(set_attr \"length\" \"8,4,8\")\n-   (set_attr \"type\" \"long,sload,lload\")])\n-\n-(define_insn \"*cond_exec_sign_extendqisi\"\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d\")\n-\t  (sign_extend:SI\n-\t    (match_operand:QI 1 \"gpr_or_memory_operand\" \"d,Q,m\"))))]\n-  \"\"\n-  \"@\n-    #\n-    ldbu%F2 %0,%M1\n-    ldbu%F2 %0,%M1\"\n-  [(set_attr \"length\" \"8,4,8\")\n-   (set_attr \"type\" \"multi,sload,lload\")])\n-\n-(define_split\n-  [(cond_exec\n-     (match_operator 1 \"condexec_test_operator\"\n-       [(match_operand:CC 2 \"br_flag_operand\" \"\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"\")\n-\t  (sign_extend:SI (match_operand:QI 3 \"gpr_operand\" \"\"))))]\n-   \"reload_completed\"\n-   [(cond_exec (match_dup 1)\n-      (set (match_dup 5) (ashift:SI (match_dup 6) (const_int 24))))\n-    (cond_exec (match_dup 1)\n-      (set (match_dup 5) (ashiftrt:SI (match_dup 5) (const_int 24))))]\n-   \"\n-{\n-  operands[5] = gen_lowpart (SImode, operands[0]);\n-  operands[6] = gen_lowpart (SImode, operands[1]);\n-}\")\n-\n-(define_insn \"*cond_exec_zero_extendhisi\"\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d\")\n-\t  (zero_extend:SI\n-\t    (match_operand:HI 1 \"gpr_or_memory_operand\" \"d,Q,m\"))))]\n-  \"\"\n-  \"@\n-    and%F2 %0,%1,0xffff\n-    ldbu%F2 %0,%M1\n-    ldbu%F2 %0,%M1\"\n-  [(set_attr \"length\" \"8,4,8\")\n-   (set_attr \"type\" \"long,sload,lload\")])\n-\n-(define_insn \"*cond_exec_sign_extendhisi\"\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b,b,b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d,d,d\")\n-\t  (sign_extend:SI\n-\t    (match_operand:HI 1 \"gpr_or_memory_operand\" \"d,Q,m\"))))]\n-  \"\"\n-  \"@\n-    #\n-    ldbu%F2 %0,%M1\n-    ldbu%F2 %0,%M1\"\n-  [(set_attr \"length\" \"8,4,8\")\n-   (set_attr \"type\" \"multi,sload,lload\")])\n-\n-(define_split\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"\")\n-\t  (sign_extend:SI (match_operand:HI 1 \"gpr_operand\" \"\"))))]\n-   \"reload_completed\"\n-   [(cond_exec (match_dup 1)\n-      (set (match_dup 5) (ashift:SI (match_dup 6) (const_int 16))))\n-    (cond_exec (match_dup 1)\n-      (set (match_dup 5) (ashiftrt:SI (match_dup 5) (const_int 16))))]\n-   \"\n-{\n-  operands[5] = gen_lowpart (SImode, operands[0]);\n-  operands[6] = gen_lowpart (SImode, operands[3]);\n-}\")\n-\n-(define_insn \"*cond_exec_si_unary\"\n-  [(cond_exec\n-     (match_operator 3 \"condexec_test_operator\"\n-       [(match_operand:CC 4 \"br_flag_operand\" \"b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t  (match_operator:SI 1 \"condexec_unary_operator\"\n-\t    [(match_operand:SI 2 \"gpr_operand\" \"d\")])))]\n-  \"\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[1]))\n-    {\n-    default:\n-      fatal_insn (\\\"cond_exec_si_unary:\\\", insn);\n-\n-    case ABS: return \\\"abs%F3 %0,%2\\\";\n-    case NOT: return \\\"not%F3 %0,%2\\\";\n-    }\n-}\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n-\n-(define_insn \"*cond_exec_si_neg\"\n-  [(cond_exec\n-     (match_operator 2 \"condexec_test_operator\"\n-       [(match_operand:CC 3 \"br_flag_operand\" \"b\")\n-        (const_int 0)])\n-     (parallel [\n-       (set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t    (neg:SI (match_operand:SI 1 \"gpr_operand\" \"d\")))\n-       (clobber (match_operand:CC 4 \"flag_operand\" \"\"))\n-       (clobber (match_operand:CC 5 \"flag_operand\" \"\"))\n-       (clobber (match_operand:CC 6 \"flag_operand\" \"\"))]))]\n-  \"\"\n-  \"sub%F2 %0,%.,%1\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n-\n-(define_insn \"*cond_exec_si_addsub\"\n-  [(cond_exec\n-     (match_operator 4 \"condexec_test_operator\"\n-       [(match_operand:CC 5 \"br_flag_operand\" \"b,b\")\n-        (const_int 0)])\n-     (parallel [\n-       (set (match_operand:SI 0 \"gpr_operand\" \"=d,d\")\n-\t    (match_operator:SI 1 \"condexec_addsub_operator\"\n-\t      [(match_operand:SI 2 \"gpr_operand\" \"d,d\")\n-\t       (match_operand:SI 3 \"gpr_or_constant_operand\" \"dI,i\")]))\n-       (clobber (match_operand:CC 6 \"flag_operand\" \"\"))\n-       (clobber (match_operand:CC 7 \"flag_operand\" \"\"))\n-       (clobber (match_operand:CC 8 \"flag_operand\" \"\"))]))]\n-  \"\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[1]))\n-    {\n-    default:\n-      fatal_insn (\\\"cond_exec_si_addsub_true:\\\", insn);\n-\n-    case PLUS:  return \\\"add%F4 %0,%2,%3\\\";\n-    case MINUS: return \\\"sub%F4 %0,%2,%3\\\";\n-    }\n-}\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"either,long\")])\n-\n-(define_insn \"*cond_exec_si_binary\"\n-  [(cond_exec\n-     (match_operator 4 \"condexec_test_operator\"\n-       [(match_operand:CC 5 \"br_flag_operand\" \"b,b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d,d\")\n-          (match_operator:SI 1 \"condexec_binary_operator\"\n-\t    [(match_operand:SI 2 \"gpr_operand\" \"d,d\")\n-\t     (match_operand:SI 3 \"gpr_or_constant_operand\" \"dI,i\")])))]\n-  \"\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[1]))\n-    {\n-    default:\n-      fatal_insn (\\\"cond_exec_si_binary_true:\\\", insn);\n-\n-    case AND:      return \\\"and%F4 %0,%2,%3\\\";\n-    case IOR:      return \\\"or%F4 %0,%2,%3\\\";\n-    case XOR:      return \\\"xor%F4 %0,%2,%3\\\";\n-    case ASHIFT:   return \\\"sra%F4 %0,%2,%n3\\\";\n-    case ASHIFTRT: return \\\"sra%F4 %0,%2,%3\\\";\n-    case LSHIFTRT: return \\\"srl%F4 %0,%2,%3\\\";\n-    case ROTATE:   return \\\"rot%F4 %0,%2,%n3\\\";\n-    case ROTATERT: return \\\"rot%F4 %0,%2,%3\\\";\n-    }\n-}\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"either,long\")])\n-\n-(define_insn \"*cond_exec_si_shiftl\"\n-  [(cond_exec\n-     (match_operator 4 \"condexec_test_operator\"\n-       [(match_operand:CC 5 \"br_flag_operand\" \"b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t  (match_operator:SI 1 \"condexec_shiftl_operator\"\n-\t    [(match_operand:SI 2 \"gpr_operand\" \"d\")\n-\t     (neg:SI (match_operand:SI 3 \"gpr_operand\" \"d\"))])))]\n-  \"\"\n-  \"*\n-{\n-  switch (GET_CODE (operands[1]))\n-    {\n-    default:\n-      fatal_insn (\\\"cond_exec_si_shiftl_true:\\\", insn);\n-\n-    case ASHIFT:   return \\\"sra%F4 %0,%2,%3\\\";\n-    case ROTATE:   return \\\"rot%F4 %0,%2,%3\\\";\n-    }\n-}\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"either\")])\n-\n-(define_insn \"*cond_exec_si_mul\"\n-  [(cond_exec\n-     (match_operator 4 \"condexec_test_operator\"\n-       [(match_operand:CC 5 \"br_flag_operand\" \"b\")\n-        (const_int 0)])\n-     (set (match_operand:SI 0 \"gpr_operand\" \"=d\")\n-\t  (mult:SI (match_operand:SI 1 \"gpr_operand\" \"%d\")\n-\t\t   (match_operand:SI 2 \"gpr_or_signed6_operand\" \"dI\"))))]\n-  \"\"\n-  \"mul%F4 %0,%1,%2\"\n-  [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"iu\")])\n-\n-(define_insn \"*cond_exec_call_internal\"\n-  [(cond_exec\n-     (match_operator 4 \"condexec_test_operator\"\n-       [(match_operand:CC 5 \"br_flag_operand\" \"b,b\")\n-        (const_int 0)])\n-     (parallel [\n-       (call (match_operand:QI 0 \"call_operand\" \"R,S\")\n-\t     (match_operand 1 \"\" \"\"))\n-       (use (match_operand 2 \"\" \"\"))\n-       (clobber (match_operand 3 \"\" \"=d,d\"))]))]\n-  \"\"\n-  \"@\n-    jsr%F4 %0\n-    bsr%F4 %0\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"mu,long\")])\n-\n-(define_insn \"*cond_exec_call_value_internal\"\n-  [(cond_exec\n-     (match_operator 5 \"condexec_test_operator\"\n-       [(match_operand:CC 6 \"br_flag_operand\" \"b,b\")\n-        (const_int 0)])\n-     (parallel [\n-       (set (match_operand 0 \"gpr_operand\" \"=d,d\")\n-\t    (call (match_operand:QI 1 \"call_operand\" \"R,S\")\n-\t          (match_operand 2 \"\" \"\")))\n-       (use (match_operand 3 \"\" \"\"))\n-       (clobber (match_operand 4 \"\" \"=d,d\"))]))]\n-  \"\"\n-  \"@\n-    jsr%F5 %1\n-    bsr%F5 %1\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"mu,long\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -3773,7 +3386,8 @@\n   \"\"\n   \"nop || nop\"\n   [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"long\")])\n+   (set_attr \"type\" \"long\")\n+   (set_attr \"predicable\" \"no\")])\n \n ;; Pseudo instruction that prevents the scheduler from moving code above this\n ;; point.\n@@ -3782,4 +3396,18 @@\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")\n-   (set_attr \"type\" \"unknown\")])\n+   (set_attr \"type\" \"unknown\")\n+   (set_attr \"predicable\" \"no\")])\n+\f\n+;; ::::::::::::::::::::\n+;; ::\n+;; :: Conditional execution\n+;; ::\n+;; ::::::::::::::::::::\n+\n+(define_cond_exec\n+  [(match_operator:CC 0 \"condexec_test_operator\"\n+     [(match_operand:CC 1 \"br_flag_operand\" \"f\")\n+      (const_int 0)])]\n+  \"\"\n+  \"\")"}]}