{"sha": "74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhNGZiZmNjODFhNWJiOTNlNGE2MDliZWViMjE0ZTUzZjZhN2JjOQ==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1998-07-27T14:37:00Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-07-27T14:37:00Z"}, "message": "stor-layout.c (layout_type): Handle arrays of bits, for Chill.\n\nMon Jul 27 17:18:52 1998  Dave Brolley  <brolley@cygnus.com>\n\t* stor-layout.c (layout_type): Handle arrays of bits, for Chill.\n\t* expr.c (get_inner_reference): Handle zero-based, unsigned, array\n\tindex conversion.\n\nFrom-SVN: r21416", "tree": {"sha": "ffa2167aaf158c2fc77376592c3f34d3d595c5ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa2167aaf158c2fc77376592c3f34d3d595c5ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/comments", "author": null, "committer": null, "parents": [{"sha": "4944f54f41c6f1c3bebc247007a5179f5e19a81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4944f54f41c6f1c3bebc247007a5179f5e19a81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4944f54f41c6f1c3bebc247007a5179f5e19a81a"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "964849e1c3c7a9bae2268fa5bcd76ae37de3d6c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "patch": "@@ -1,3 +1,10 @@\n+Mon Jul 27 17:18:52 1998  Dave Brolley  <brolley@cygnus.com>\n+\n+\t* stor-layout.c (layout_type): Handle arrays of bits, for Chill.\n+\n+\t* expr.c (get_inner_reference): Handle zero-based, unsigned, array\n+\tindex conversion.\n+\n Mon Jul 27 14:51:33 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* mn10300.h (DEBUGGER_AUTO_OFFSET): Define."}, {"sha": "208db5cb2d871cea3f1c330edf0398d45fdf8677", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "patch": "@@ -4546,8 +4546,20 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t      index_type = TREE_TYPE (index);\n \t    }\n \n+\t  /* Optimize the special-case of a zero lower bound.\n+\t     \n+\t     We convert the low_bound to sizetype to avoid some problems\n+\t     with constant folding.  (E.g. suppose the lower bound is 1,\n+\t     and its mode is QI.  Without the conversion,  (ARRAY\n+\t     +(INDEX-(unsigned char)1)) becomes ((ARRAY+(-(unsigned char)1))\n+\t     +INDEX), which becomes (ARRAY+255+INDEX).  Oops!)\n+\t     \n+\t     But sizetype isn't quite right either (especially if\n+\t     the lowbound is negative).  FIXME */\n+\n \t  if (! integer_zerop (low_bound))\n-\t    index = fold (build (MINUS_EXPR, index_type, index, low_bound));\n+\t    index = fold (build (MINUS_EXPR, index_type, index,\n+\t\t\t\t convert (sizetype, low_bound)));\n \n \t  if (TREE_CODE (index) == INTEGER_CST)\n \t    {"}, {"sha": "b44a411e9da5b9c56021dd49ac3249b4f8f7de8d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=74a4fbfcc81a5bb93e4a609beeb214e53f6a7bc9", "patch": "@@ -783,6 +783,7 @@ layout_type (type)\n \t    tree ub = TYPE_MAX_VALUE (index);\n \t    tree lb = TYPE_MIN_VALUE (index);\n \t    tree length;\n+\t    tree element_size;\n \n \t    /* If UB is max (lb - 1, x), remove the MAX_EXPR since the\n \t       test for negative below covers it.  */\n@@ -815,8 +816,19 @@ layout_type (type)\n \t\t&& TREE_CODE (TYPE_MAX_VALUE (index)) != INTEGER_CST)\n \t      length = size_binop (MAX_EXPR, length, size_zero_node);\n \n-\t    TYPE_SIZE (type) = size_binop (MULT_EXPR, TYPE_SIZE (element),\n-\t\t\t\t\t   length);\n+\t    /* Special handling for arrays of bits (for Chill).  */\n+\t    element_size = TYPE_SIZE (element);\n+\t    if (TYPE_PACKED (type) && INTEGRAL_TYPE_P (element))\n+\t      {\n+\t\tHOST_WIDE_INT maxvalue, minvalue;\n+\t\tmaxvalue = TREE_INT_CST_LOW (TYPE_MAX_VALUE (element));\n+\t\tminvalue = TREE_INT_CST_LOW (TYPE_MIN_VALUE (element));\n+\t\tif (maxvalue - minvalue == 1\n+\t\t    && (maxvalue == 1 || maxvalue == 0))\n+\t\t  element_size = integer_one_node;\n+\t      }\n+\n+\t    TYPE_SIZE (type) = size_binop (MULT_EXPR, element_size, length);\n \n \t    /* If we know the size of the element, calculate the total\n \t       size directly, rather than do some division thing below."}]}