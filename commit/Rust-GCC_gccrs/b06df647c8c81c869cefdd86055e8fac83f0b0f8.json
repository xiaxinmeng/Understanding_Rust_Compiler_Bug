{"sha": "b06df647c8c81c869cefdd86055e8fac83f0b0f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA2ZGY2NDdjOGM4MWM4NjljZWZkZDg2MDU1ZThmYWM4M2YwYjBmOA==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-08-18T10:56:07Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-08-18T10:56:07Z"}, "message": "* c-typeck.c (designator_errorneous): Rename to designator_erroneous.\n\nFrom-SVN: r103247", "tree": {"sha": "e7c8b3a8884e0f7db3231062e78d7d75a72149d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7c8b3a8884e0f7db3231062e78d7d75a72149d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b06df647c8c81c869cefdd86055e8fac83f0b0f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06df647c8c81c869cefdd86055e8fac83f0b0f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06df647c8c81c869cefdd86055e8fac83f0b0f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06df647c8c81c869cefdd86055e8fac83f0b0f8/comments", "author": null, "committer": null, "parents": [{"sha": "75634129185af1ffcc0d88f5032b90b26559674a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75634129185af1ffcc0d88f5032b90b26559674a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75634129185af1ffcc0d88f5032b90b26559674a"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "335513066ca62c2a423b21469fcd31269e77b929", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df647c8c81c869cefdd86055e8fac83f0b0f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df647c8c81c869cefdd86055e8fac83f0b0f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b06df647c8c81c869cefdd86055e8fac83f0b0f8", "patch": "@@ -1,3 +1,7 @@\n+2005-08-18  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* c-typeck.c (designator_errorneous): Rename to designator_erroneous.\n+\n 2005-08-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/16045"}, {"sha": "c72ba8aceaa270a70aac9378c3dee039e25ccd70", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b06df647c8c81c869cefdd86055e8fac83f0b0f8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b06df647c8c81c869cefdd86055e8fac83f0b0f8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b06df647c8c81c869cefdd86055e8fac83f0b0f8", "patch": "@@ -4642,7 +4642,7 @@ static int constructor_designated;\n static int designator_depth;\n \n /* Nonzero if there were diagnosed errors in this designator list.  */\n-static int designator_errorneous;\n+static int designator_erroneous;\n \n \f\n /* This stack has a level for each implicit or explicit level of\n@@ -4856,7 +4856,7 @@ really_start_incremental_init (tree type)\n   constructor_incremental = 1;\n   constructor_designated = 0;\n   designator_depth = 0;\n-  designator_errorneous = 0;\n+  designator_erroneous = 0;\n \n   if (TREE_CODE (constructor_type) == RECORD_TYPE\n       || TREE_CODE (constructor_type) == UNION_TYPE)\n@@ -5000,7 +5000,7 @@ push_init_level (int implicit)\n       p->range_stack = constructor_range_stack;\n       constructor_range_stack = 0;\n       designator_depth = 0;\n-      designator_errorneous = 0;\n+      designator_erroneous = 0;\n     }\n \n   /* Don't die if an entire brace-pair level is superfluous\n@@ -5294,7 +5294,7 @@ set_designator (int array)\n \n   /* If there were errors in this designator list already, bail out\n      silently.  */\n-  if (designator_errorneous)\n+  if (designator_erroneous)\n     return 1;\n \n   if (!designator_depth)\n@@ -5373,7 +5373,7 @@ set_init_index (tree first, tree last)\n   if (set_designator (1))\n     return;\n \n-  designator_errorneous = 1;\n+  designator_erroneous = 1;\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (first))\n       || (last && !INTEGRAL_TYPE_P (TREE_TYPE (last))))\n@@ -5419,7 +5419,7 @@ set_init_index (tree first, tree last)\n \t}\n \n       designator_depth++;\n-      designator_errorneous = 0;\n+      designator_erroneous = 0;\n       if (constructor_range_stack || last)\n \tpush_range_stack (last);\n     }\n@@ -5435,7 +5435,7 @@ set_init_label (tree fieldname)\n   if (set_designator (0))\n     return;\n \n-  designator_errorneous = 1;\n+  designator_erroneous = 1;\n \n   if (TREE_CODE (constructor_type) != RECORD_TYPE\n       && TREE_CODE (constructor_type) != UNION_TYPE)\n@@ -5457,7 +5457,7 @@ set_init_label (tree fieldname)\n     {\n       constructor_fields = tail;\n       designator_depth++;\n-      designator_errorneous = 0;\n+      designator_erroneous = 0;\n       if (constructor_range_stack)\n \tpush_range_stack (NULL_TREE);\n     }\n@@ -6177,7 +6177,7 @@ process_init_element (struct c_expr value)\n   bool strict_string = value.original_code == STRING_CST;\n \n   designator_depth = 0;\n-  designator_errorneous = 0;\n+  designator_erroneous = 0;\n \n   /* Handle superfluous braces around string cst as in\n      char x[] = {\"foo\"}; */"}]}