{"sha": "269673180b079297b9ff6bdc3307347897de737f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5NjczMTgwYjA3OTI5N2I5ZmY2YmRjMzMwNzM0Nzg5N2RlNzM3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-05T21:27:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-05T21:27:45Z"}, "message": "(unaligned_{load,store}hi): Clear low bit of address before using as operand to extwl, mskwl, and inswl.\n\n(unaligned_{load,store}hi): Clear low bit of address before using as operand\nto extwl, mskwl, and inswl.\n(movhi, reload_inhi, reload_outhi): Pass extra scratch value.\n\nFrom-SVN: r6696", "tree": {"sha": "f7ca1f2298d6d651ac65c9a8f30471573c487cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ca1f2298d6d651ac65c9a8f30471573c487cf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/269673180b079297b9ff6bdc3307347897de737f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269673180b079297b9ff6bdc3307347897de737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269673180b079297b9ff6bdc3307347897de737f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269673180b079297b9ff6bdc3307347897de737f/comments", "author": null, "committer": null, "parents": [{"sha": "8b2e2b2f6f284668dfacd7726c295978bf929b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2e2b2f6f284668dfacd7726c295978bf929b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2e2b2f6f284668dfacd7726c295978bf929b11"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "bf56286ddefc9118a9ecd7992179c202d8c3a764", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269673180b079297b9ff6bdc3307347897de737f/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269673180b079297b9ff6bdc3307347897de737f/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=269673180b079297b9ff6bdc3307347897de737f", "patch": "@@ -2718,10 +2718,12 @@\n \t\t(const_int -7)))\n    (set (match_operand:DI 3 \"register_operand\" \"\")\n \t(mem:DI (match_dup 2)))\n+   (set (match_operand:DI 4 \"register_operand\" \"\")\n+\t(and:DI (match_dup 1) (const_int -2)))\n    (set (subreg:DI (match_operand:HI 0 \"register_operand\" \"\") 0)\n \t(zero_extract:DI (match_dup 3)\n \t\t\t (const_int 16)\n-\t\t\t (ashift:DI (match_dup 1) (const_int 3))))]\n+\t\t\t (ashift:DI (match_dup 4) (const_int 3))))]\n   \"\"\n   \"\")\n        \n@@ -2794,13 +2796,15 @@\n \t(and:DI (match_dup 2) (const_int -7)))\n    (set (match_operand:DI 4 \"register_operand\" \"\")\n \t(mem:DI (match_dup 3)))\n+   (set (match_operand:DI 10 \"register_operand\" \"\")\n+\t(and:DI (match_dup 2) (const_int -2)))\n    (set (match_operand:DI 5 \"register_operand\" \"\")\n \t(and:DI (not:DI (ashift:DI (const_int 65535)\n-\t\t\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n+\t\t\t\t   (ashift:DI (match_dup 10) (const_int 3))))\n \t\t(match_dup 4)))\n    (set (match_operand:DI 6 \"register_operand\" \"\")\n \t(ashift:DI (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\"))\n-\t\t   (ashift:DI (match_dup 2) (const_int 3))))\n+\t\t   (ashift:DI (match_dup 10) (const_int 3))))\n    (set (match_operand:DI 7 \"register_operand\" \"\")\n \t(ior:DI (match_dup 5) (match_dup 6)))\n    (set (match_operand:DI 8 \"register_operand\" \"\") (match_dup 0))\n@@ -2948,8 +2952,10 @@\n \t\t\t\t\tNULL_RTX));\n \t  rtx scratch1 = gen_reg_rtx (DImode);\n \t  rtx scratch2 = gen_reg_rtx (DImode);\n+\t  rtx scratch3 = gen_reg_rtx (DImode);\n+\n \t  rtx seq = gen_unaligned_loadhi (operands[0], addr, scratch1,\n-\t\t\t\t\t  scratch2);\n+\t\t\t\t\t  scratch2, scratch3);\n \n \t  alpha_set_memflags (seq, operands[1]);\n \t  emit_insn (seq);\n@@ -2988,9 +2994,12 @@\n \t  rtx temp6 = gen_reg_rtx (DImode);\n \t  rtx temp7 = gen_reg_rtx (DImode);\n \t  rtx temp8 = gen_reg_rtx (DImode);\n+\t  rtx temp9 = gen_reg_rtx (DImode);\n+\n \t  rtx seq = gen_unaligned_storehi (get_unaligned_address (operands[0]),\n \t\t\t\t\t   operands[1], temp1, temp2,temp3,\n-\t\t\t\t\t   temp4, temp5, temp6,temp7, temp8);\n+\t\t\t\t\t   temp4, temp5, temp6,temp7,\n+\t\t\t\t\t   temp8, temp9);\n \n \t  alpha_set_memflags (seq, operands[0]);\n \t  emit_insn (seq);\n@@ -3038,7 +3047,7 @@\n       addr = scratch2;\n     }\n       \n-  seq = gen_unaligned_loadhi (operands[0], addr, scratch1, scratch1);\n+  seq = gen_unaligned_loadhi (operands[0], addr, scratch1, scratch1, scratch2);\n   alpha_set_memflags (seq, operands[1]);\n   emit_insn (seq);\n   DONE;\n@@ -3112,7 +3121,7 @@\n       seq = gen_unaligned_storehi (addr, operands[1], scratch_a,\n \t\t\t\t   scratch2, scratch2, scratch2,\n \t\t\t\t   scratch1, scratch2, scratch_a,\n-\t\t\t\t   scratch1);\n+\t\t\t\t   scratch1, scratch_a);\n       alpha_set_memflags (seq, operands[0]);\n       emit_insn (seq);\n     }"}]}