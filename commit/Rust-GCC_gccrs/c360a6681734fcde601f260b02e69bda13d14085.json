{"sha": "c360a6681734fcde601f260b02e69bda13d14085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2MGE2NjgxNzM0ZmNkZTYwMWYyNjBiMDJlNjliZGExM2QxNDA4NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-11-13T21:49:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-11-13T21:49:16Z"}, "message": "PR c++/82360 - ICE with static_cast in template.\n\n\t* call.c (perform_direct_initialization_if_possible): Check\n\tprocessing_template_decl.\n\t* typeck.c (build_static_cast_1): Likewise.\n\nFrom-SVN: r254710", "tree": {"sha": "0994684b16f8526820ca22aaafcdfe10a126c8d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0994684b16f8526820ca22aaafcdfe10a126c8d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c360a6681734fcde601f260b02e69bda13d14085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c360a6681734fcde601f260b02e69bda13d14085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c360a6681734fcde601f260b02e69bda13d14085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c360a6681734fcde601f260b02e69bda13d14085/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb771b9dad6ef78a985353128cea48e620eb4324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb771b9dad6ef78a985353128cea48e620eb4324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb771b9dad6ef78a985353128cea48e620eb4324"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "37741f6fdc3b571e1b9152bb4b7d7de4a9c35d84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c360a6681734fcde601f260b02e69bda13d14085", "patch": "@@ -1,3 +1,10 @@\n+2017-11-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82360 - ICE with static_cast in template.\n+\t* call.c (perform_direct_initialization_if_possible): Check\n+\tprocessing_template_decl.\n+\t* typeck.c (build_static_cast_1): Likewise.\n+\n 2017-11-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tRemove the null check from placement new in all modes"}, {"sha": "e6e0f9011668d6200d85e08be7a5481df174eb0d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c360a6681734fcde601f260b02e69bda13d14085", "patch": "@@ -10647,6 +10647,16 @@ perform_direct_initialization_if_possible (tree type,\n \t\t\t      LOOKUP_NORMAL, complain);\n   if (!conv || conv->bad_p)\n     expr = NULL_TREE;\n+  else if (processing_template_decl && conv->kind != ck_identity)\n+    {\n+      /* In a template, we are only concerned about determining the\n+\t type of non-dependent expressions, so we do not have to\n+\t perform the actual conversion.  But for initializers, we\n+\t need to be able to perform it at instantiation\n+\t (or instantiate_non_dependent_expr) time.  */\n+      expr = build1 (IMPLICIT_CONV_EXPR, type, expr);\n+      IMPLICIT_CONV_EXPR_DIRECT_INIT (expr) = true;\n+    }\n   else\n     expr = convert_like_real (conv, expr, NULL_TREE, 0,\n \t\t\t      /*issue_conversion_warnings=*/false,"}, {"sha": "38ec363dc95a1b2c14eef9262dfb12333a1702de", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c360a6681734fcde601f260b02e69bda13d14085", "patch": "@@ -6820,6 +6820,9 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n     {\n       tree base;\n \n+      if (processing_template_decl)\n+\treturn expr;\n+\n       /* There is a standard conversion from \"D*\" to \"B*\" even if \"B\"\n \t is ambiguous or inaccessible.  If this is really a\n \t static_cast, then we check both for inaccessibility and\n@@ -6864,6 +6867,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       && reference_related_p (TREE_TYPE (type), intype)\n       && (c_cast_p || at_least_as_qualified_p (TREE_TYPE (type), intype)))\n     {\n+      if (processing_template_decl)\n+\treturn expr;\n       if (clk == clk_ordinary)\n \t{\n \t  /* Handle the (non-bit-field) lvalue case here by casting to\n@@ -6911,6 +6916,9 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t\t\t\t\t\t      c_cast_p, complain);\n   if (result)\n     {\n+      if (processing_template_decl)\n+\treturn expr;\n+\n       result = convert_from_reference (result);\n \n       /* [expr.static.cast]\n@@ -6952,7 +6960,11 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n        || SCALAR_FLOAT_TYPE_P (type))\n       && (INTEGRAL_OR_ENUMERATION_TYPE_P (intype)\n \t  || SCALAR_FLOAT_TYPE_P (intype)))\n-    return ocp_convert (type, expr, CONV_C_CAST, LOOKUP_NORMAL, complain);\n+    {\n+      if (processing_template_decl)\n+\treturn expr;\n+      return ocp_convert (type, expr, CONV_C_CAST, LOOKUP_NORMAL, complain);\n+    }\n \n   if (TYPE_PTR_P (type) && TYPE_PTR_P (intype)\n       && CLASS_TYPE_P (TREE_TYPE (type))\n@@ -6965,6 +6977,9 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n     {\n       tree base;\n \n+      if (processing_template_decl)\n+\treturn expr;\n+\n       if (!c_cast_p\n \t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n \t\t\t\t\t       complain))\n@@ -7019,6 +7034,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t\t\t\t\t\t   STATIC_CAST_EXPR,\n \t\t\t\t\t\t   complain))\n \t    return error_mark_node;\n+\t  if (processing_template_decl)\n+\t    return expr;\n \t  return convert_ptrmem (type, expr, /*allow_inverse_p=*/1,\n \t\t\t\t c_cast_p, complain);\n \t}\n@@ -7038,6 +7055,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n \t\t\t\t\t       complain))\n \treturn error_mark_node;\n+      if (processing_template_decl)\n+\treturn expr;\n       return build_nop (type, expr);\n     }\n "}, {"sha": "4e48d1d3c5c446b450882d76e5fb3678cef42f77", "filename": "gcc/testsuite/g++.dg/template/cast5.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c360a6681734fcde601f260b02e69bda13d14085/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast5.C?ref=c360a6681734fcde601f260b02e69bda13d14085", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/82360\n+// { dg-do compile { target c++11 } }\n+\n+class a {};\n+template <class> class b {\n+  b(b &&c) : d(static_cast<a &&>(c.d)) {}\n+  a d;\n+};"}]}