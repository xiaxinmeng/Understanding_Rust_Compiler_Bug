{"sha": "d12516f1f1cd88f323958e58942b7751727bd9e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEyNTE2ZjFmMWNkODhmMzIzOTU4ZTU4OTQyYjc3NTE3MjdiZDllMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T17:22:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T17:22:06Z"}, "message": "(output_constructor): Fix previous change:\n\nif no TYPE_DOMAIN, don't set min_index.\n\n(copy_constant): New function.\n(output_constant_def): Use it.\n\nFrom-SVN: r5860", "tree": {"sha": "cbae1fa6c4d8f9e6a4a269f036c113c4a9564f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbae1fa6c4d8f9e6a4a269f036c113c4a9564f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d12516f1f1cd88f323958e58942b7751727bd9e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12516f1f1cd88f323958e58942b7751727bd9e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12516f1f1cd88f323958e58942b7751727bd9e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12516f1f1cd88f323958e58942b7751727bd9e2/comments", "author": null, "committer": null, "parents": [{"sha": "87394941ccd08099b9ac59624e3ce0a479627d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87394941ccd08099b9ac59624e3ce0a479627d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87394941ccd08099b9ac59624e3ce0a479627d38"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "afa13a65427f0d9c4c74768cbb549efc546a3d43", "filename": "gcc/varasm.c", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12516f1f1cd88f323958e58942b7751727bd9e2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12516f1f1cd88f323958e58942b7751727bd9e2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d12516f1f1cd88f323958e58942b7751727bd9e2", "patch": "@@ -2384,6 +2384,57 @@ output_deferred_addressed_constants ()\n \n   deferred_constants = 0;\n }\n+\n+/* Make a copy of the whole tree structure for a constant.\n+   This handles the same types of nodes that compare_constant\n+   and record_constant handle.  */\n+\n+static tree\n+copy_constant (exp)\n+     tree exp;\n+{\n+  switch (TREE_CODE (exp))\n+    {\n+    case INTEGER_CST:\n+    case REAL_CST:\n+    case STRING_CST:\n+    case ADDR_EXPR:\n+      /* For ADDR_EXPR, we do not want to copy the decl\n+\t whose address is requested.  */\n+      return copy_node (exp);\n+\n+    case COMPLEX_CST:\n+      return build_complex (copy_constant (TREE_REALPART (exp)),\n+\t\t\t    copy_constant (TREE_IMAGPART (exp)));\n+\n+    case PLUS_EXPR:\n+    case MINUS_EXPR:\n+      return build (TREE_CODE (exp), TREE_TYPE (exp),\n+\t\t    copy_constant (TREE_OPERAND (exp, 0)),\n+\t\t    copy_constant (TREE_OPERAND (exp, 1)));\n+\n+    case NOP_EXPR:\n+    case CONVERT_EXPR:\n+      return build1 (TREE_CODE (exp), TREE_TYPE (exp),\n+\t\t     copy_constant (TREE_OPERAND (exp, 0)));\n+\n+    case CONSTRUCTOR:\n+      {\n+\ttree copy = copy_node (exp);\n+\ttree list = copy_list (CONSTRUCTOR_ELTS (exp));\n+\ttree tail;\n+\n+\tCONSTRUCTOR_ELTS (exp) = list;\n+\tfor (tail = list; tail; tail = TREE_CHAIN (tail))\n+\t  TREE_VALUE (tail) = copy_constant (TREE_VALUE (tail));\n+\n+\treturn copy;\n+      }\n+\n+    default:\n+      abort ();\n+    }\n+}\n \f\n /* Return an rtx representing a reference to constant data in memory\n    for the constant expression EXP.\n@@ -2493,15 +2544,9 @@ output_constant_def (exp)\n \t  struct deferred_constant *p;\n \t  p = (struct deferred_constant *) xmalloc (sizeof (struct deferred_constant));\n \n-\t  /* We really should copy trees in depth here,\n-\t     but since this case is the only one that should happen now,\n-\t     let's do it later.  */\n-\t  if (TREE_CODE (exp) != STRING_CST)\n-\t    abort ();\n-\n \t  push_obstacks_nochange ();\n \t  suspend_momentary ();\n-\t  p->exp = copy_node (exp);\n+\t  p->exp = copy_constant (exp);\n \t  pop_obstacks ();\n \t  p->reloc = reloc;\n \t  p->labelno = const_labelno++;\n@@ -3415,7 +3460,8 @@ output_constructor (exp, size)\n   if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n     field = TYPE_FIELDS (TREE_TYPE (exp));\n \n-  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n+      && TYPE_DOMAIN (TREE_TYPE (exp)) != 0)\n     min_index\n       = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (exp))));\n "}]}