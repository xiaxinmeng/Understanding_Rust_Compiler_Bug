{"sha": "bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZDgzMDk4ZmZhZmUxMjczYjExZWI1ZjRhNTk2Zjk2YzkwYzQyZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-09-18T19:16:28Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-18T19:16:28Z"}, "message": "P1064R0 - Allowing Virtual Function Calls in Constant Expressions\n\n\tP1064R0 - Allowing Virtual Function Calls in Constant Expressions\n\t* call.c (build_over_call): No longer check if we're outside a template\n\tfunction.\n\t* class.c (build_vtbl_initializer): Build vtable's constructor with\n\tindexes.\n\t* constexpr.c (cxx_eval_constant_expression): Don't ignore _vptr's\n\tinitializer.  Handle OBJ_TYPE_REF.\n\t(potential_constant_expression_1): Handle OBJ_TYPE_REF.\n\t* decl.c (maybe_commonize_var): Bail out for any DECL_ARTIFICIAL.\n\t(initialize_artificial_var): Mark the variable as constexpr.\n\t(grokdeclarator): Change error to pedwarn.  Only warn when\n\tpedantic and not C++2a.\n\n\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Adjust assert.\n\n\t* g++.dg/cpp0x/constexpr-virtual5.C: Adjust dg-error.\n\t* g++.dg/cpp2a/constexpr-virtual1.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual2.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual3.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual4.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual5.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual6.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual7.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual8.C: New test.\n\t* g++.dg/cpp2a/constexpr-virtual9.C: New test.\n\t* g++.dg/diagnostic/virtual-constexpr.C: Skip for C++2a.  Use\n\t-pedantic-errors.  Adjust dg-error.\n\nFrom-SVN: r264408", "tree": {"sha": "69c54203512e9f57ce7c3840298da4c7fe1adf99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69c54203512e9f57ce7c3840298da4c7fe1adf99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8db6cd5fb1ad254329e426dcc8e958c02e2284f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8db6cd5fb1ad254329e426dcc8e958c02e2284f"}], "stats": {"total": 594, "additions": 573, "deletions": 21}, "files": [{"sha": "69e2e147bb90c9443c743821def3972e3aa4e600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -1,3 +1,8 @@\n+2018-09-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tP1064R0 - Allowing Virtual Function Calls in Constant Expressions\n+\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Adjust assert.\n+\n 2018-09-18  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md: Remove old \"Cygnus sibcall\" comment."}, {"sha": "7ea4b6d0f2ef3e6b25ea957eda6b33d9021a7fd2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -1,3 +1,18 @@\n+2018-09-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tP1064R0 - Allowing Virtual Function Calls in Constant Expressions\n+\t* call.c (build_over_call): No longer check if we're outside a template\n+\tfunction.\n+\t* class.c (build_vtbl_initializer): Build vtable's constructor with\n+\tindexes.\n+\t* constexpr.c (cxx_eval_constant_expression): Don't ignore _vptr's\n+\tinitializer.  Handle OBJ_TYPE_REF.\n+\t(potential_constant_expression_1): Handle OBJ_TYPE_REF.\n+\t* decl.c (maybe_commonize_var): Bail out for any DECL_ARTIFICIAL.\n+\t(initialize_artificial_var): Mark the variable as constexpr.\n+\t(grokdeclarator): Change error to pedwarn.  Only warn when\n+\tpedantic and not C++2a.\n+\n 2018-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/85065"}, {"sha": "ddf0ed044a023668cd955b057fa1234a486a3e9b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -8399,10 +8399,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       && DECL_BUILT_IN_CLASS (fn) == BUILT_IN_NORMAL)\n     maybe_warn_class_memaccess (input_location, fn, args);\n \n-  if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0\n-      /* Don't mess with virtual lookup in instantiate_non_dependent_expr;\n-\t virtual functions can't be constexpr.  */\n-      && !in_template_function ())\n+  if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0)\n     {\n       tree t;\n       tree binfo = lookup_base (TREE_TYPE (TREE_TYPE (argarray[0])),"}, {"sha": "9ca464418717f36439ddacd1a172c71853d2e1c1", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -9266,6 +9266,7 @@ build_vtbl_initializer (tree binfo,\n       tree vcall_index;\n       tree fn, fn_original;\n       tree init = NULL_TREE;\n+      tree idx = size_int (jx++);\n \n       fn = BV_FN (v);\n       fn_original = fn;\n@@ -9369,19 +9370,19 @@ build_vtbl_initializer (tree binfo,\n \t  int i;\n \t  if (init == size_zero_node)\n \t    for (i = 0; i < TARGET_VTABLE_USES_DESCRIPTORS; ++i)\n-\t      CONSTRUCTOR_APPEND_ELT (*inits, NULL_TREE, init);\n+\t      CONSTRUCTOR_APPEND_ELT (*inits, idx, init);\n \t  else\n \t    for (i = 0; i < TARGET_VTABLE_USES_DESCRIPTORS; ++i)\n \t      {\n \t\ttree fdesc = build2 (FDESC_EXPR, vfunc_ptr_type_node,\n \t\t\t\t     fn, build_int_cst (NULL_TREE, i));\n \t\tTREE_CONSTANT (fdesc) = 1;\n \n-\t\tCONSTRUCTOR_APPEND_ELT (*inits, NULL_TREE, fdesc);\n+\t\tCONSTRUCTOR_APPEND_ELT (*inits, idx, fdesc);\n \t      }\n \t}\n       else\n-\tCONSTRUCTOR_APPEND_ELT (*inits, NULL_TREE, init);\n+\tCONSTRUCTOR_APPEND_ELT (*inits, idx, init);\n     }\n }\n "}, {"sha": "aa33319875fcad1cd87fefbb802e46dd0706a5f2", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -4209,7 +4209,11 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t CONST_DECL for aggregate constants.  */\n       if (lval)\n \treturn t;\n+      /* is_really_empty_class doesn't take into account _vptr, so initializing\n+\t otherwise empty class with { } would overwrite the initializer that\n+\t initialize_vtable created for us.  */\n       if (COMPLETE_TYPE_P (TREE_TYPE (t))\n+\t  && !TYPE_POLYMORPHIC_P (TREE_TYPE (t))\n \t  && is_really_empty_class (TREE_TYPE (t)))\n \t{\n \t  /* If the class is empty, we aren't actually loading anything.  */\n@@ -4778,7 +4782,6 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     case MODOP_EXPR:\n       /* GCC internal stuff.  */\n     case VA_ARG_EXPR:\n-    case OBJ_TYPE_REF:\n     case NON_DEPENDENT_EXPR:\n     case BASELINK:\n     case OFFSET_REF:\n@@ -4788,6 +4791,34 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       *non_constant_p = true;\n       break;\n \n+    case OBJ_TYPE_REF:\n+      {\n+\t/* Virtual function call.  Let the constexpr machinery figure out\n+\t   the dynamic type.  */\n+\tint token = tree_to_shwi (OBJ_TYPE_REF_TOKEN (t));\n+\ttree obj = OBJ_TYPE_REF_OBJECT (t);\n+\tobj = cxx_eval_constant_expression (ctx, obj, lval, non_constant_p,\n+\t\t\t\t\t    overflow_p);\n+\t/* We expect something in the form of &x.D.2103.D.2094; get x. */\n+\tif (TREE_CODE (obj) != ADDR_EXPR)\n+\t  {\n+\t    if (!ctx->quiet)\n+\t      error_at (cp_expr_loc_or_loc (t, input_location),\n+\t\t\t\"expression %qE is not a constant expression\", t);\n+\t    *non_constant_p = true;\n+\t    return t;\n+\t  }\n+\tobj = TREE_OPERAND (obj, 0);\n+\twhile (handled_component_p (obj))\n+\t  obj = TREE_OPERAND (obj, 0);\n+\ttree objtype = TREE_TYPE (obj);\n+\t/* Find the function decl in the virtual functions list.  TOKEN is\n+\t   the DECL_VINDEX that says which function we're looking for.  */\n+\ttree virtuals = BINFO_VIRTUALS (TYPE_BINFO (objtype));\n+\tr = TREE_VALUE (chain_index (token, virtuals));\n+\tbreak;\n+      }\n+\n     case PLACEHOLDER_EXPR:\n       /* Use of the value or address of the current object.  */\n       if (tree ctor = lookup_placeholder (ctx, lval, TREE_TYPE (t)))\n@@ -5871,7 +5902,6 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case OACC_UPDATE:\n       /* GCC internal stuff.  */\n     case VA_ARG_EXPR:\n-    case OBJ_TYPE_REF:\n     case TRANSACTION_EXPR:\n     case ASM_EXPR:\n     case AT_ENCODE_EXPR:\n@@ -5880,6 +5910,14 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \terror_at (loc, \"expression %qE is not a constant expression\", t);\n       return false;\n \n+    case OBJ_TYPE_REF:\n+      if (cxx_dialect >= cxx2a)\n+\t/* In C++2a virtual calls can be constexpr, don't give up yet.  */\n+\treturn true;\n+      else if (flags & tf_error)\n+\terror_at (loc, \"virtual functions cannot be constexpr before C++2a\");\n+      return false;\n+\n     case TYPEID_EXPR:\n       /* -- a typeid expression whose operand is of polymorphic\n             class type;  */"}, {"sha": "827c172033539f7121d056b61f09a714cfd81bbe", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -5583,11 +5583,13 @@ layout_var_decl (tree decl)\n void\n maybe_commonize_var (tree decl)\n {\n+  /* Don't mess with __FUNCTION__ and similar.  */\n+  if (DECL_ARTIFICIAL (decl))\n+    return;\n+\n   /* Static data in a function with comdat linkage also has comdat\n      linkage.  */\n   if ((TREE_STATIC (decl)\n-       /* Don't mess with __FUNCTION__.  */\n-       && ! DECL_ARTIFICIAL (decl)\n        && DECL_FUNCTION_SCOPE_P (decl)\n        && vague_linkage_p (DECL_CONTEXT (decl)))\n       || (TREE_PUBLIC (decl) && DECL_INLINE_VAR_P (decl)))\n@@ -6774,6 +6776,10 @@ initialize_artificial_var (tree decl, vec<constructor_elt, va_gc> *v)\n   gcc_assert (TREE_CODE (init) == CONSTRUCTOR);\n   DECL_INITIAL (decl) = init;\n   DECL_INITIALIZED_P (decl) = 1;\n+  /* Mark the decl as constexpr so that we can access its content\n+     at compile time.  */\n+  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = true;\n+  DECL_DECLARED_CONSTEXPR_P (decl) = true;\n   determine_visibility (decl);\n   layout_var_decl (decl);\n   maybe_commonize_var (decl);\n@@ -10854,12 +10860,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t  storage_class = sc_none;\n \t  staticp = 0;\n \t}\n-      if (constexpr_p)\n+      if (constexpr_p && cxx_dialect < cxx2a)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_constexpr]);\n-\t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n-\t\t    \"and %<constexpr%>\", dname);\n+\t  pedwarn (&richloc, OPT_Wpedantic, \"member %qD can be declared both \"\n+\t\t   \"%<virtual%> and %<constexpr%> only in -std=c++2a or \"\n+\t\t   \"-std=gnu++2a\", dname);\n \t}\n     }\n   friendp = decl_spec_seq_has_spec_p (declspecs, ds_friend);"}, {"sha": "1e84722d22d22204d6a6568dd4222ae08bb67a3f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -6988,12 +6988,13 @@ gimple_get_virt_method_for_vtable (HOST_WIDE_INT token,\n   access_index = offset / BITS_PER_UNIT / elt_size;\n   gcc_checking_assert (offset % (elt_size * BITS_PER_UNIT) == 0);\n \n-  /* This code makes an assumption that there are no \n-     indexed fileds produced by C++ FE, so we can directly index the array. */\n+  /* The C++ FE can now produce indexed fields, and we check if the indexes\n+     match.  */\n   if (access_index < CONSTRUCTOR_NELTS (init))\n     {\n       fn = CONSTRUCTOR_ELT (init, access_index)->value;\n-      gcc_checking_assert (!CONSTRUCTOR_ELT (init, access_index)->index);\n+      tree idx = CONSTRUCTOR_ELT (init, access_index)->index;\n+      gcc_checking_assert (!idx || tree_to_uhwi (idx) == access_index);\n       STRIP_NOPS (fn);\n     }\n   else"}, {"sha": "af072db151ef6c1b5d8ecdd815e622acfbc4ac73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -1,3 +1,19 @@\n+2018-09-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tP1064R0 - Allowing Virtual Function Calls in Constant Expressions\n+\t* g++.dg/cpp0x/constexpr-virtual5.C: Adjust dg-error.\n+\t* g++.dg/cpp2a/constexpr-virtual1.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual2.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual3.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual4.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual5.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual6.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual7.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual8.C: New test.\n+\t* g++.dg/cpp2a/constexpr-virtual9.C: New test.\n+\t* g++.dg/diagnostic/virtual-constexpr.C: Skip for C++2a.  Use\n+\t-pedantic-errors.  Adjust dg-error.\n+\n 2018-09-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/87336"}, {"sha": "5f9ab4d9c288ffa08390e06ace4ebbbfdf793d37", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-virtual5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-virtual5.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n \n struct S {\n-  constexpr virtual int f() { return 1; }  // { dg-error \"13:member .f. cannot be declared both .virtual. and .constexpr.\" }\n+  constexpr virtual int f() { return 1; }  // { dg-error \"13:member .f. can be declared both .virtual. and .constexpr.\" \"\" { target c++17_down } }\n };"}, {"sha": "fcf8cac64170792cc2fb1397f5520d8776d4d1f2", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual1.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,8 @@\n+// P1064R0\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-pedantic-errors\" }\n+\n+struct X\n+{\n+  constexpr virtual int f() { return 0; } // { dg-error \"member .f. can be declared both .virtual. and .constexpr. only\" \"\" { target c++17_down } }\n+};"}, {"sha": "9d82c5c59acd9f80c8ef0d01f7b207c43d253ab3", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual2.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual2.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,49 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f() const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  constexpr virtual int f() const { return 2; }\n+};\n+\n+struct X3: public X2\n+{\n+  virtual int f() const { return 3; }\n+};\n+\n+struct X4: public X3\n+{\n+  constexpr virtual int f() const { return 4; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f;\n+\n+constexpr X2 x2;\n+static_assert(x2.f() == 2);\n+static_assert((x2.*pf)() == 2);\n+\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f() == 2);\n+static_assert((r2.*pf)() == 2);\n+\n+constexpr X1 const* p2 = &x2;\n+static_assert(p2->f() == 2);\n+static_assert((p2->*pf)() == 2);\n+\n+constexpr X4 x4;\n+static_assert(x4.f() == 4);\n+static_assert((x4.*pf)() == 4);\n+\n+constexpr X1 const& r4 = x4;\n+static_assert(r4.f() == 4);\n+static_assert((r4.*pf)() == 4);\n+\n+constexpr X1 const* p4 = &x4;\n+static_assert(p4->f() == 4);\n+static_assert((p4->*pf)() == 4);"}, {"sha": "d71422fc4d0fa08a452b2cddc167a89d2cd6ddc4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual3.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual3.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,52 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f() const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  int i2 = 42;\n+  constexpr virtual int f() const { return 2; }\n+};\n+\n+struct X3: public X2\n+{\n+  int i3 = 42;\n+  virtual int f() const { return 3; }\n+};\n+\n+struct X4: public X3\n+{\n+  int i4 = 42;\n+  constexpr virtual int f() const { return 4; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f;\n+\n+constexpr X2 x2;\n+static_assert(x2.f() == 2);\n+static_assert((x2.*pf)() == 2);\n+\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f() == 2);\n+static_assert((r2.*pf)() == 2);\n+\n+constexpr X1 const* p2 = &x2;\n+static_assert(p2->f() == 2);\n+static_assert((p2->*pf)() == 2);\n+\n+constexpr X4 x4;\n+static_assert(x4.f() == 4);\n+static_assert((x4.*pf)() == 4);\n+\n+constexpr X1 const& r4 = x4;\n+static_assert(r4.f() == 4);\n+static_assert((r4.*pf)() == 4);\n+\n+constexpr X1 const* p4 = &x4;\n+static_assert(p4->f() == 4);\n+static_assert((p4->*pf)() == 4);"}, {"sha": "2038bebc6d16b2566ce81a63d433bd2899b65ae2", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual4.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual4.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,57 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f1() const = 0;\n+  virtual int f2() const = 0;\n+  virtual int f3() const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  constexpr virtual int f1() const { return 21; }\n+  constexpr virtual int f2() const { return 22; }\n+  constexpr virtual int f3() const { return 23; }\n+};\n+\n+struct X3: public X2\n+{\n+  virtual int f1() const { return 31; }\n+  virtual int f2() const { return 32; }\n+  virtual int f3() const { return 33; }\n+};\n+\n+struct X4: public X3\n+{\n+  constexpr virtual int f1() const { return 41; }\n+  constexpr virtual int f2() const { return 42; }\n+  constexpr virtual int f3() const { return 43; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f2;\n+\n+constexpr X2 x2;\n+static_assert(x2.f2() == 22);\n+static_assert((x2.*pf)() == 22);\n+\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f2() == 22);\n+static_assert((r2.*pf)() == 22);\n+\n+constexpr X1 const* p2 = &x2;\n+static_assert(p2->f2() == 22);\n+static_assert((p2->*pf)() == 22);\n+\n+constexpr X4 x4;\n+static_assert(x4.f2() == 42);\n+static_assert((x4.*pf)() == 42);\n+\n+constexpr X1 const& r4 = x4;\n+static_assert(r4.f2() == 42);\n+static_assert((r4.*pf)() == 42);\n+\n+constexpr X1 const* p4 = &x4;\n+static_assert(p4->f2() == 42);\n+static_assert((p4->*pf)() == 42);"}, {"sha": "6d27990a8b65262960671930c6ad3509d76167de", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual5.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual5.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,60 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f1() const = 0;\n+  virtual int f2() const = 0;\n+  virtual int f3() const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  int i2 = 42;\n+  constexpr virtual int f1() const { return 21; }\n+  constexpr virtual int f2() const { return 22; }\n+  constexpr virtual int f3() const { return 23; }\n+};\n+\n+struct X3: public X2\n+{\n+  int i3 = 42;\n+  virtual int f1() const { return 31; }\n+  virtual int f2() const { return 32; }\n+  virtual int f3() const { return 33; }\n+};\n+\n+struct X4: public X3\n+{\n+  int i4 = 42;\n+  constexpr virtual int f1() const { return 41; }\n+  constexpr virtual int f2() const { return 42; }\n+  constexpr virtual int f3() const { return 43; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f2;\n+\n+constexpr X2 x2;\n+static_assert(x2.f2() == 22);\n+static_assert((x2.*pf)() == 22);\n+\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f2() == 22);\n+static_assert((r2.*pf)() == 22);\n+\n+constexpr X1 const* p2 = &x2;\n+static_assert(p2->f2() == 22);\n+static_assert((p2->*pf)() == 22);\n+\n+constexpr X4 x4;\n+static_assert(x4.f2() == 42);\n+static_assert((x4.*pf)() == 42);\n+\n+constexpr X1 const& r4 = x4;\n+static_assert(r4.f2() == 42);\n+static_assert((r4.*pf)() == 42);\n+\n+constexpr X1 const* p4 = &x4;\n+static_assert(p4->f2() == 42);\n+static_assert((p4->*pf)() == 42);"}, {"sha": "ece5e703c32ec0f18c32f5800eb2af72a1b6cc83", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual6.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,25 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  constexpr virtual X1 const *f() const { return this; }\n+};\n+\n+struct Y\n+{\n+  int m = 0;\n+};\n+\n+struct X2: public Y, public X1\n+{\n+  constexpr virtual X2 const *f() const { return this; }\n+};\n+\n+constexpr X1 x1;\n+static_assert(x1.f() == &x1);\n+\n+constexpr X2 x2;\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f() == &r2);"}, {"sha": "b0f499608ef4c7de646ee271c720fe9d647719da", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual7.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual7.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,87 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f() const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  constexpr virtual int f() const { return 2; }\n+};\n+\n+struct X3: public X2\n+{\n+  virtual int f() const { return 3; }\n+};\n+\n+struct X4: public X3\n+{\n+  constexpr virtual int f() const { return 4; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f;\n+\n+constexpr X2 x2;\n+\n+struct S\n+{\n+  int i, j;\n+  constexpr S() : i(x2.f()), j((x2.*pf)()) { }\n+};\n+\n+static_assert(S().i == 2);\n+static_assert(S().j == 2);\n+\n+constexpr X1 const& r2 = x2;\n+\n+struct S2\n+{\n+  int i, j;\n+  constexpr S2() : i(r2.f()), j((r2.*pf)()) { }\n+};\n+\n+static_assert(S2().i == 2);\n+static_assert(S2().j == 2);\n+\n+constexpr X1 const* p2 = &x2;\n+struct S3\n+{\n+  int i, j;\n+  constexpr S3() : i(p2->f()), j((p2->*pf)()) { }\n+};\n+\n+static_assert(S3().i == 2);\n+static_assert(S3().j == 2);\n+\n+constexpr X4 x4;\n+struct S4\n+{\n+  int i, j;\n+  constexpr S4() : i(x4.f()), j((x4.*pf)()) { }\n+};\n+\n+static_assert(S4().i == 4);\n+static_assert(S4().j == 4);\n+\n+constexpr X1 const& r4 = x4;\n+struct S5\n+{\n+  int i, j;\n+  constexpr S5() : i(r4.f()), j((r4.*pf)()) { }\n+};\n+\n+static_assert(S5().i == 4);\n+static_assert(S5().j == 4);\n+\n+constexpr X1 const* p4 = &x4;\n+struct S6\n+{\n+  int i, j;\n+  constexpr S6() : i(p4->f()), j((p4->*pf)()) { }\n+};\n+\n+static_assert(S6().i == 4);\n+static_assert(S6().j == 4);"}, {"sha": "4a7cc972a91309940df179dfc19f526dd5b5378d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual8.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual8.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,50 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<typename T>\n+struct X1\n+{\n+  virtual T f() const = 0;\n+};\n+\n+struct X2: public X1<int>\n+{\n+  constexpr virtual int f() const { return 2; }\n+};\n+\n+struct X3: public X2\n+{\n+  virtual int f() const { return 3; }\n+};\n+\n+struct X4: public X3\n+{\n+  constexpr virtual int f() const { return 4; }\n+};\n+\n+constexpr int (X1<int>::*pf)() const = &X1<int>::f;\n+\n+constexpr X2 x2;\n+static_assert(x2.f() == 2);\n+static_assert((x2.*pf)() == 2);\n+\n+constexpr X1<int> const& r2 = x2;\n+static_assert(r2.f() == 2);\n+static_assert((r2.*pf)() == 2);\n+\n+constexpr X1<int> const* p2 = &x2;\n+static_assert(p2->f() == 2);\n+static_assert((p2->*pf)() == 2);\n+\n+constexpr X4 x4;\n+static_assert(x4.f() == 4);\n+static_assert((x4.*pf)() == 4);\n+\n+constexpr X1<int> const& r4 = x4;\n+static_assert(r4.f() == 4);\n+static_assert((r4.*pf)() == 4);\n+\n+constexpr X1<int> const* p4 = &x4;\n+static_assert(p4->f() == 4);\n+static_assert((p4->*pf)() == 4);"}, {"sha": "3a12adc265900d694a5fc329f33a1ef704008675", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-virtual9.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-virtual9.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -0,0 +1,83 @@\n+// P1064R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct X1\n+{\n+  virtual int f() const = 0;\n+  virtual int f(int) const = 0;\n+  virtual int f(int, int) const = 0;\n+};\n+\n+struct X2: public X1\n+{\n+  constexpr virtual int f() const { return 2; }\n+  constexpr virtual int f(int) const { return 12; }\n+  constexpr virtual int f(int, int) const { return 22; }\n+};\n+\n+struct X3: public X2\n+{\n+  virtual int f() const { return 3; }\n+  virtual int f(int) const { return 13; }\n+  virtual int f(int, int) const { return 23; }\n+};\n+\n+struct X4: public X3\n+{\n+  constexpr virtual int f() const { return 4; }\n+  constexpr virtual int f(int) const { return 14; }\n+  constexpr virtual int f(int, int) const { return 24; }\n+};\n+\n+constexpr int (X1::*pf)() const = &X1::f;\n+constexpr int (X1::*pf1)(int) const = &X1::f;\n+constexpr int (X1::*pf2)(int, int) const = &X1::f;\n+\n+constexpr X2 x2;\n+static_assert(x2.f() == 2);\n+static_assert((x2.*pf)() == 2);\n+static_assert(x2.f(1) == 12);\n+static_assert((x2.*pf1)(1) == 12);\n+static_assert(x2.f(1, 2) == 22);\n+static_assert((x2.*pf2)(1, 2) == 22);\n+\n+constexpr X1 const& r2 = x2;\n+static_assert(r2.f() == 2);\n+static_assert((r2.*pf)() == 2);\n+static_assert(r2.f(1) == 12);\n+static_assert((r2.*pf1)(1) == 12);\n+static_assert(r2.f(1, 2) == 22);\n+static_assert((r2.*pf2)(1, 2) == 22);\n+\n+constexpr X1 const* p2 = &x2;\n+static_assert(p2->f() == 2);\n+static_assert((p2->*pf)() == 2);\n+static_assert(p2->f(1) == 12);\n+static_assert((p2->*pf1)(1) == 12);\n+static_assert(p2->f(1, 2) == 22);\n+static_assert((p2->*pf2)(1, 2) == 22);\n+\n+constexpr X4 x4;\n+static_assert(x4.f() == 4);\n+static_assert((x4.*pf)() == 4);\n+static_assert(x4.f(1) == 14);\n+static_assert((x4.*pf1)(1) == 14);\n+static_assert(x4.f(1, 2) == 24);\n+static_assert((x4.*pf2)(1, 2) == 24);\n+\n+constexpr X1 const& r4 = x4;\n+static_assert(r4.f() == 4);\n+static_assert((r4.*pf)() == 4);\n+static_assert(r4.f(1) == 14);\n+static_assert((r4.*pf1)(1) == 14);\n+static_assert(r4.f(1, 2) == 24);\n+static_assert((r4.*pf2)(1, 2) == 24);\n+\n+constexpr X1 const* p4 = &x4;\n+static_assert(p4->f() == 4);\n+static_assert((p4->*pf)() == 4);\n+static_assert(p4->f(1) == 14);\n+static_assert((p4->*pf1)(1) == 14);\n+static_assert(p4->f(1, 2) == 24);\n+static_assert((p4->*pf2)(1, 2) == 24);"}, {"sha": "9223c6927376ce6a74f5a7cf31c943d23348f69f", "filename": "gcc/testsuite/g++.dg/diagnostic/virtual-constexpr.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8d83098ffafe1273b11eb5f4a596f96c90c42e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-constexpr.C?ref=bf8d83098ffafe1273b11eb5f4a596f96c90c42e", "patch": "@@ -1,14 +1,15 @@\n-// { dg-options \"-fdiagnostics-show-caret\" }\n+// { dg-options \"-fdiagnostics-show-caret -pedantic-errors\" }\n // { dg-do compile { target c++11 } }\n+// { dg-skip-if \"virtual constexpr\" { *-*-* } { \"-std=gnu++2a\" } { \"\" } }\n \n struct S\n {\n-  virtual constexpr void foo();  // { dg-error \"3:member .foo. cannot be declared both .virtual. and .constexpr.\" }\n+  virtual constexpr void foo();  // { dg-error \"3:member .foo. can be declared both .virtual. and .constexpr.\" }\n /* { dg-begin-multiline-output \"\" }\n    virtual constexpr void foo();\n    ^~~~~~~ ~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n-  constexpr virtual void bar();  // { dg-error \"13:member .bar. cannot be declared both .virtual. and .constexpr.\" }\n+  constexpr virtual void bar();  // { dg-error \"13:member .bar. can be declared both .virtual. and .constexpr.\" }\n /* { dg-begin-multiline-output \"\" }\n    constexpr virtual void bar();\n    ~~~~~~~~~ ^~~~~~~"}]}