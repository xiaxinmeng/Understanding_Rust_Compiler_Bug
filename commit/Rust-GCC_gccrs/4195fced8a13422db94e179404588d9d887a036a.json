{"sha": "4195fced8a13422db94e179404588d9d887a036a", "node_id": "C_kwDOANBUbNoAKDQxOTVmY2VkOGExMzQyMmRiOTRlMTc5NDA0NTg4ZDlkODg3YTAzNmE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-11T21:51:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-12T03:57:08Z"}, "message": "c++: using operator= [PR105223]\n\nIn a template class A we normally add an implicit using A::operator= as a\nplaceholder for the implicitly declared operator whose signature we don't\nknow yet.  In my patch for PR92918 I stopped doing that if the class has an\nexplicit operator=, but that was wrong; an operator= taking an unrelated\ntype doesn't prevent the implicit declaration.\n\nWhen I was working on that patch, the change was necessary to avoid another\nregression, but apparently it is no longer needed.\n\n\tPR c++/105223\n\tPR c++/92918\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (finish_struct): Always using op=.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/using31.C: New test.", "tree": {"sha": "3a085b55cd3c7d23637e6309b41fbd4433bc48c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a085b55cd3c7d23637e6309b41fbd4433bc48c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4195fced8a13422db94e179404588d9d887a036a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4195fced8a13422db94e179404588d9d887a036a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4195fced8a13422db94e179404588d9d887a036a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4195fced8a13422db94e179404588d9d887a036a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afb21b824dabf17c79e7b0a4230572f091307ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afb21b824dabf17c79e7b0a4230572f091307ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afb21b824dabf17c79e7b0a4230572f091307ec"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "bfda0065bf467686fac7aa7c3b7a8662fca59697", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195fced8a13422db94e179404588d9d887a036a/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195fced8a13422db94e179404588d9d887a036a/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=4195fced8a13422db94e179404588d9d887a036a", "patch": "@@ -7723,17 +7723,14 @@ finish_struct (tree t, tree attributes)\n \t lookup not to fail or recurse into bases.  This isn't added\n \t to the template decl list so we drop this at instantiation\n \t time.  */\n-      if (!get_class_binding_direct (t, assign_op_identifier, false))\n-\t{\n-\t  tree ass_op = build_lang_decl (USING_DECL, assign_op_identifier,\n-\t\t\t\t\t NULL_TREE);\n-\t  DECL_CONTEXT (ass_op) = t;\n-\t  USING_DECL_SCOPE (ass_op) = t;\n-\t  DECL_DEPENDENT_P (ass_op) = true;\n-\t  DECL_ARTIFICIAL (ass_op) = true;\n-\t  DECL_CHAIN (ass_op) = TYPE_FIELDS (t);\n-\t  TYPE_FIELDS (t) = ass_op;\n-\t}\n+      tree ass_op = build_lang_decl (USING_DECL, assign_op_identifier,\n+\t\t\t\t     NULL_TREE);\n+      DECL_CONTEXT (ass_op) = t;\n+      USING_DECL_SCOPE (ass_op) = t;\n+      DECL_DEPENDENT_P (ass_op) = true;\n+      DECL_ARTIFICIAL (ass_op) = true;\n+      DECL_CHAIN (ass_op) = TYPE_FIELDS (t);\n+      TYPE_FIELDS (t) = ass_op;\n \n       TYPE_SIZE (t) = bitsize_zero_node;\n       TYPE_SIZE_UNIT (t) = size_zero_node;"}, {"sha": "bfeb94f27884cbbdd96c0b9990456c957be6a669", "filename": "gcc/testsuite/g++.dg/template/using31.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195fced8a13422db94e179404588d9d887a036a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195fced8a13422db94e179404588d9d887a036a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing31.C?ref=4195fced8a13422db94e179404588d9d887a036a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/105223\n+\n+struct ServiceReferenceBase {\n+  void operator=(int);\n+};\n+\n+template<class>\n+struct ServiceReference : ServiceReferenceBase {\n+  void foo() { operator=(0); }\n+  using ServiceReferenceBase::operator=;\n+};\n+\n+int main() {\n+  ServiceReference<int> sr;\n+  sr.foo();\n+}"}]}