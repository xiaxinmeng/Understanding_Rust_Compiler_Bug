{"sha": "fd2c87bd741c8438951f403efd95e50ccf3d8eda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyYzg3YmQ3NDFjODQzODk1MWY0MDNlZmQ5NWU1MGNjZjNkOGVkYQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-04-26T20:56:08Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-04-26T20:56:08Z"}, "message": "sparc.md (movsf_no_f_insn): Add more alternatives common to other movsf patterns.\n\n\t* config/sparc/sparc.md (movsf_no_f_insn): Add more alternatives\n\tcommon to other movsf patterns.  Move up so that in future\n\tpeople who change the other patterns will change it too.\n\t(movsf_lo_sum): Allow even for soft-float; add appropriate\n\tconstraints.\n\t(movsf_high): Likewise.\n\t(movsf_high+1): Allow even for soft-float.\n\nFrom-SVN: r41613", "tree": {"sha": "42a8852c36993814c430adf5bd2600050bc33c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a8852c36993814c430adf5bd2600050bc33c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2c87bd741c8438951f403efd95e50ccf3d8eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2c87bd741c8438951f403efd95e50ccf3d8eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2c87bd741c8438951f403efd95e50ccf3d8eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2c87bd741c8438951f403efd95e50ccf3d8eda/comments", "author": null, "committer": null, "parents": [{"sha": "fbffc70af694dc340bb390071e1cf7b80486a249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbffc70af694dc340bb390071e1cf7b80486a249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbffc70af694dc340bb390071e1cf7b80486a249"}], "stats": {"total": 91, "additions": 63, "deletions": 28}, "files": [{"sha": "6635036143cf7fcc131f995d9bbd270c8022084e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2c87bd741c8438951f403efd95e50ccf3d8eda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2c87bd741c8438951f403efd95e50ccf3d8eda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd2c87bd741c8438951f403efd95e50ccf3d8eda", "patch": "@@ -1,5 +1,13 @@\n 2001-04-26  Geoffrey Keating  <geoffk@redhat.com>\n \n+\t* config/sparc/sparc.md (movsf_no_f_insn): Add more alternatives\n+\tcommon to other movsf patterns.  Move up so that in future\n+\tpeople who change the other patterns will change it too.\n+\t(movsf_lo_sum): Allow even for soft-float; add appropriate\n+\tconstraints.\n+\t(movsf_high): Likewise.\n+\t(movsf_high+1): Allow even for soft-float.\n+\n \t* function.c (expand_function_end): Always clobber the\n \treturn registers, even if there is no return label.\n \n@@ -82,7 +90,6 @@ Thu Apr 26 19:20:28 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* config/i386/i386.h (CC1_CPU_SPEC): Fix deprecation warnings for\n \t-m386 and -m486.\n \n->>>>>>> 1.9867\n 2001-04-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (configargs.h): Define thread_model.\n@@ -167,7 +174,6 @@ Wed Apr 25 17:09:50 2001  J\"orn Rennecke <amylaar@redhat.com>\n \t(get_exception_filter): New fn.\n \t(finish_eh_generation): Use it.\n \n->>>>>>> 1.9859\n 2001-04-24  Nathan Sidwell <nathan@codesourcery.com>\n \n \t* c-semantics.c (add_scope_stmt): Don't call"}, {"sha": "d0a3f40b4826b2990ff46633f7be0eb11e8523a1", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2c87bd741c8438951f403efd95e50ccf3d8eda/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2c87bd741c8438951f403efd95e50ccf3d8eda/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=fd2c87bd741c8438951f403efd95e50ccf3d8eda", "patch": "@@ -3095,11 +3095,58 @@\n   [(set_attr \"type\" \"fpmove,fpmove,move,move,move,*,load,fpload,fpstore,store\")\n    (set_attr \"length\" \"1\")])\n \n+;; Exactly the same as above, except that all `f' cases are deleted.\n+;; This is necessary to prevent reload from ever trying to use a `f' reg\n+;; when -mno-fpu.\n+\n+(define_insn \"*movsf_no_f_insn\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r,r,r,m\")\n+\t(match_operand:SF 1 \"input_operand\"    \"G,Q,rR,S,m,rG\"))]\n+  \"! TARGET_FPU\n+   && (register_operand (operands[0], SFmode)\n+       || register_operand (operands[1], SFmode)\n+       || fp_zero_operand (operands[1], SFmode))\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_DOUBLE\n+      && (which_alternative == 1\n+          || which_alternative == 2\n+          || which_alternative == 3))\n+    {\n+      REAL_VALUE_TYPE r;\n+      long i;\n+\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n+      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+      operands[1] = GEN_INT (i);\n+    }\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \\\"clr\\\\t%0\\\";\n+    case 1:\n+      return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n+    case 2:\n+      return \\\"mov\\\\t%1, %0\\\";\n+    case 3:\n+      return \\\"#\\\";\n+    case 4:\n+      return \\\"ld\\\\t%1, %0\\\";\n+    case 5:\n+      return \\\"st\\\\t%r1, %0\\\";\n+    default:\n+      abort();\n+    }\n+}\"\n+  [(set_attr \"type\" \"move,move,move,*,load,store\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_insn \"*movsf_lo_sum\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-        (lo_sum:SF (match_operand:SF 1 \"register_operand\" \"\")\n-                   (match_operand:SF 2 \"const_double_operand\" \"\")))]\n-  \"TARGET_FPU && fp_high_losum_p (operands[2])\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (lo_sum:SF (match_operand:SF 1 \"register_operand\" \"r\")\n+                   (match_operand:SF 2 \"const_double_operand\" \"S\")))]\n+  \"fp_high_losum_p (operands[2])\"\n   \"*\n {\n   REAL_VALUE_TYPE r;\n@@ -3114,9 +3161,9 @@\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*movsf_high\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-        (high:SF (match_operand:SF 1 \"const_double_operand\" \"\")))]\n-  \"TARGET_FPU && fp_high_losum_p (operands[1])\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (high:SF (match_operand:SF 1 \"const_double_operand\" \"S\")))]\n+  \"fp_high_losum_p (operands[1])\"\n   \"*\n {\n   REAL_VALUE_TYPE r;\n@@ -3133,30 +3180,12 @@\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n         (match_operand:SF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_FPU\n-   && fp_high_losum_p (operands[1])\n+  \"fp_high_losum_p (operands[1])\n    && (GET_CODE (operands[0]) == REG\n        && REGNO (operands[0]) < 32)\"\n   [(set (match_dup 0) (high:SF (match_dup 1)))\n    (set (match_dup 0) (lo_sum:SF (match_dup 0) (match_dup 1)))])\n \n-;; Exactly the same as above, except that all `f' cases are deleted.\n-;; This is necessary to prevent reload from ever trying to use a `f' reg\n-;; when -mno-fpu.\n-\n-(define_insn \"*movsf_no_f_insn\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:SF 1 \"input_operand\"    \"r,m,r\"))]\n-  \"! TARGET_FPU\n-   && (register_operand (operands[0], SFmode)\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   mov\\\\t%1, %0\n-   ld\\\\t%1, %0\n-   st\\\\t%1, %0\"\n-  [(set_attr \"type\" \"move,load,store\")\n-   (set_attr \"length\" \"1\")])\n-\n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]"}]}