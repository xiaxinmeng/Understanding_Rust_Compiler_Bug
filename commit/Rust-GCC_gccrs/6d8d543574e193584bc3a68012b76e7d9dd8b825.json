{"sha": "6d8d543574e193584bc3a68012b76e7d9dd8b825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ4ZDU0MzU3NGUxOTM1ODRiYzNhNjgwMTJiNzZlN2Q5ZGQ4YjgyNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-02-17T20:46:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-02-17T20:46:01Z"}, "message": "mips.c (mips_gimplify_va_arg_expr): Fix invalid tree sharing.\n\ngcc/\n\t* config/mips/mips.c (mips_gimplify_va_arg_expr): Fix invalid\n\ttree sharing.\n\nFrom-SVN: r144244", "tree": {"sha": "861d915ca8345f83579d9f05c88cb1628918bdb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/861d915ca8345f83579d9f05c88cb1628918bdb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d8d543574e193584bc3a68012b76e7d9dd8b825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8d543574e193584bc3a68012b76e7d9dd8b825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d8d543574e193584bc3a68012b76e7d9dd8b825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d8d543574e193584bc3a68012b76e7d9dd8b825/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e69ff91041c78360e9284f39f08a3cde66bd2ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69ff91041c78360e9284f39f08a3cde66bd2ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69ff91041c78360e9284f39f08a3cde66bd2ab3"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "c82420ab39f2d3d1464f961a7a94d41eded6046a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8d543574e193584bc3a68012b76e7d9dd8b825/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8d543574e193584bc3a68012b76e7d9dd8b825/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d8d543574e193584bc3a68012b76e7d9dd8b825", "patch": "@@ -1,3 +1,8 @@\n+2009-02-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c (mips_gimplify_va_arg_expr): Fix invalid\n+\ttree sharing.\n+\n 2009-02-17  Ruan Beihong  <ruanbeihong@gmail.com>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "7d2a61be5ca13d51f6dee66a7e1b547857ae612c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d8d543574e193584bc3a68012b76e7d9dd8b825/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d8d543574e193584bc3a68012b76e7d9dd8b825/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6d8d543574e193584bc3a68012b76e7d9dd8b825", "patch": "@@ -5292,10 +5292,10 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n       if (GET_MODE_CLASS (TYPE_MODE (type)) == MODE_FLOAT\n \t  && GET_MODE_SIZE (TYPE_MODE (type)) <= UNITS_PER_FPVALUE)\n \t{\n-\t  top = build3 (COMPONENT_REF, TREE_TYPE (f_ftop), valist, f_ftop,\n-\t\t        NULL_TREE);\n-\t  off = build3 (COMPONENT_REF, TREE_TYPE (f_foff), valist, f_foff,\n-\t\t        NULL_TREE);\n+\t  top = build3 (COMPONENT_REF, TREE_TYPE (f_ftop),\n+\t\t\tunshare_expr (valist), f_ftop, NULL_TREE);\n+\t  off = build3 (COMPONENT_REF, TREE_TYPE (f_foff),\n+\t\t\tunshare_expr (valist), f_foff, NULL_TREE);\n \n \t  /* When va_start saves FPR arguments to the stack, each slot\n \t     takes up UNITS_PER_HWFPVALUE bytes, regardless of the\n@@ -5322,17 +5322,17 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t}\n       else\n \t{\n-\t  top = build3 (COMPONENT_REF, TREE_TYPE (f_gtop), valist, f_gtop,\n-\t\t        NULL_TREE);\n-\t  off = build3 (COMPONENT_REF, TREE_TYPE (f_goff), valist, f_goff,\n-\t\t        NULL_TREE);\n+\t  top = build3 (COMPONENT_REF, TREE_TYPE (f_gtop),\n+\t\t\tunshare_expr (valist), f_gtop, NULL_TREE);\n+\t  off = build3 (COMPONENT_REF, TREE_TYPE (f_goff),\n+\t\t\tunshare_expr (valist), f_goff, NULL_TREE);\n \t  rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n \t  if (rsize > UNITS_PER_WORD)\n \t    {\n \t      /* [1] Emit code for: off &= -rsize.\t*/\n-\t      t = build2 (BIT_AND_EXPR, TREE_TYPE (off), off,\n+\t      t = build2 (BIT_AND_EXPR, TREE_TYPE (off), unshare_expr (off),\n \t\t\t  build_int_cst (TREE_TYPE (off), -rsize));\n-\t      gimplify_assign (off, t, pre_p);\n+\t      gimplify_assign (unshare_expr (off), t, pre_p);\n \t    }\n \t  osize = rsize;\n \t}\n@@ -5363,12 +5363,14 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t{\n \t  /* [9] Emit: ovfl = ((intptr_t) ovfl + osize - 1) & -osize.  */\n \t  u = size_int (osize - 1);\n-\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovfl), ovfl, u);\n+\t  t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (ovfl),\n+\t\t      unshare_expr (ovfl), u);\n \t  t = fold_convert (sizetype, t);\n \t  u = size_int (-osize);\n \t  t = build2 (BIT_AND_EXPR, sizetype, t, u);\n \t  t = fold_convert (TREE_TYPE (ovfl), t);\n-\t  align = build2 (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n+\t  align = build2 (MODIFY_EXPR, TREE_TYPE (ovfl),\n+\t\t\t  unshare_expr (ovfl), t);\n \t}\n       else\n \talign = NULL;"}]}