{"sha": "17a3564142202cb76c9fede9cd489d9769f5560b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhMzU2NDE0MjIwMmNiNzZjOWZlZGU5Y2Q0ODlkOTc2OWY1NTYwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:06:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:06:13Z"}, "message": "[multiple changes]\n\n2014-06-13  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_rm.texi: Minor fixes.\n\t* gnat_ugn.texi: Added a missing \"@itemize\".\n\n2014-06-13  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Remove -gnatd.1 flag documentation.\n\t* layout.adb (Layout_Type): Remove special handling of size\n\tfor anonymous access type.\n\t* sem_ch3.adb (Replace_Type): Remove special handling of size\n\tfor anonymous access type.\n\nFrom-SVN: r211620", "tree": {"sha": "d7edba94051e2f05d3b33ffe825fe4650e50e863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7edba94051e2f05d3b33ffe825fe4650e50e863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a3564142202cb76c9fede9cd489d9769f5560b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a3564142202cb76c9fede9cd489d9769f5560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a3564142202cb76c9fede9cd489d9769f5560b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a3564142202cb76c9fede9cd489d9769f5560b/comments", "author": null, "committer": null, "parents": [{"sha": "19634e40b7f905c8bb5ff7f1095829b91b718532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19634e40b7f905c8bb5ff7f1095829b91b718532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19634e40b7f905c8bb5ff7f1095829b91b718532"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "6f4785f59624b5ec651b55b94ecda2c29e88212b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -1,3 +1,16 @@\n+2014-06-13  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_rm.texi: Minor fixes.\n+\t* gnat_ugn.texi: Added a missing \"@itemize\".\n+\n+2014-06-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Remove -gnatd.1 flag documentation.\n+\t* layout.adb (Layout_Type): Remove special handling of size\n+\tfor anonymous access type.\n+\t* sem_ch3.adb (Replace_Type): Remove special handling of size\n+\tfor anonymous access type.\n+\n 2014-06-13  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb: Document debug flag -gnatd.1."}, {"sha": "eaab4ffbebebd4eb05b8de213493739393d1dc4e", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -155,7 +155,7 @@ package body Debug is\n    --  d8   Force opposite endianness in packed stuff\n    --  d9   Allow lock free implementation\n \n-   --  d.1  Disable fix to make anonymous access types thin\n+   --  d.1\n    --  d.2\n    --  d.3\n    --  d.4\n@@ -733,12 +733,6 @@ package body Debug is\n    --  d9   This allows lock free implementation for protected objects\n    --       (see Exp_Ch9).\n \n-   --  d.1  There is a problem with making anonymous access types which refer\n-   --       to an unconstrained array thick. And we have a fix, which is to\n-   --       make them thin always. Search for Debug_Flag_Dot_1 in layout.adb\n-   --       and sem_ch3.adb to see the explanation for why we don't enable this\n-   --       fix for now unless this debug flag is set.\n-\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "e94dd9dd724d072f88e3a548f22d062a1770189f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -251,7 +251,6 @@ Implementation Defined Pragmas\n * Pragma Suppress_Debug_Info::\n * Pragma Suppress_Exception_Locations::\n * Pragma Suppress_Initialization::\n-* Pragma Task_Info::\n * Pragma Task_Name::\n * Pragma Task_Storage::\n * Pragma Test_Case::\n@@ -10527,6 +10526,8 @@ restriction is in force:\n @item Ancestor part cannot be a type mark\n @item Attributes 'Image, 'Width and 'Value not allowed\n @item Functions may not update globals\n+@item Subprograms may not contain direct calls to themselves (prevents recursion within unit)\n+@item Call to subprogram not allowed in same unit before body has been seen (prevents recursion within unit)\n @end itemize\n \n The following restrictions are enforced, but note that they are actually more\n@@ -10564,6 +10565,7 @@ currently checked by the SPARK_05 restriction:\n @item After renaming, cannot use the original name\n @item Subprograms can only be renamed to remove package prefix\n @item Pragma import must be immediately after entity it names\n+@item No mutual recursion between multiple units (this can be checked with gnatcheck)\n @end itemize\n \n Note that if a unit is compiled in Ada 95 mode with the SPARK restriction,\n@@ -22454,7 +22456,7 @@ for the version of GNAT that you are using, see the documentation\n in the spec of package System.Task_Info in the runtime\n library.\n \n-@node package System.Task_Info (s-tasinf.ads)\n+@node System.Task_Info (s-tasinf.ads)\n @section package System.Task_Info (@file{s-tasinf.ads})\n \n @noindent"}, {"sha": "dde83b45c17906b33a4c912aae8cc921e621dd66", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -22875,12 +22875,14 @@ a default guard area is created.\n \n GNAT supplies the following task-related pragma:\n \n+@itemize\n @item  @code{TASK_STORAGE}\n \n GNAT implements pragma @code{TASK_STORAGE} in the same way as HP Ada.\n Both HP Ada and GNAT supply the pragmas @code{PASSIVE},\n @code{SUPPRESS}, and @code{VOLATILE}.\n @end itemize\n+\n @node Scheduling and Task Priority\n @subsection Scheduling and Task Priority\n "}, {"sha": "52c981e36c883d3dfaf4a7203423a493f1912452", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -2462,19 +2462,6 @@ package body Layout is\n             Set_Size_Info (E, Base_Type (E));\n             Set_RM_Size   (E, RM_Size (Base_Type (E)));\n \n-         --  Anonymous access types are always thin, because otherwise we get\n-         --  into strange conformance problems between two types, one of which\n-         --  can see that something is unconstrained and one of which cannot.\n-\n-         elsif Ekind (E) = E_Anonymous_Access_Type\n-\n-           --  For now eneable this only if debug flag -gnatd.1 is set, since\n-           --  we have some regressions in gnatcoll that need sorting out???\n-\n-           and then Debug_Flag_Dot_1\n-         then\n-            Init_Size (E, System_Address_Size);\n-\n          --  For other access types, we use either address size, or, if a fat\n          --  pointer is used (pointer-to-unconstrained array case), twice the\n          --  address size to accommodate a fat pointer.\n@@ -2483,6 +2470,9 @@ package body Layout is\n            and then Is_Array_Type (Desig_Type)\n            and then not Is_Constrained (Desig_Type)\n            and then not Has_Completion_In_Body (Desig_Type)\n+\n+           --  Debug Flag -gnatd6 says make all pointers to unconstrained thin\n+\n            and then not Debug_Flag_6\n          then\n             Init_Size (E, 2 * System_Address_Size);"}, {"sha": "f9ccf5b5a6880fe6369c699800dbe14a232cccb3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a3564142202cb76c9fede9cd489d9769f5560b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=17a3564142202cb76c9fede9cd489d9769f5560b", "patch": "@@ -13568,30 +13568,16 @@ package body Sem_Ch3 is\n                   Set_Etype (Acc_Type, Acc_Type);\n                   Set_Scope (Acc_Type, New_Subp);\n \n-                  --  Set size of anonymous access type. Note that anonymous\n-                  --  access to Unconstrained always uses thin pointers. This\n-                  --  avoids confusion for the case where two types that should\n-                  --  conform but end up differning, because in one case we can\n-                  --  see the unconstrained designated type, and in the other\n-                  --  case we can't see it yet (full type declaration not seen\n-                  --  yet), so we default to thin in that case anyway.\n-\n-                  --  For now, for the access to unconstrained array scase, we\n-                  --  are making the above change only if debug flag -gnatd.1\n-                  --  is set. That's because the change, though almost\n-                  --  certainly correct, is causing gnatcoll regressions\n-                  --  which we have to sort out ???\n+                  --  Set size of anonymous access type. If we have an access\n+                  --  to an unconstrained array, this is a fat pointer, so it\n+                  --  is sizes at twice addtress size.\n \n                   if Is_Array_Type (Desig_Typ)\n                     and then not Is_Constrained (Desig_Typ)\n-                    and then not Debug_Flag_Dot_1\n                   then\n                      Init_Size (Acc_Type, 2 * System_Address_Size);\n \n-                  --  Normal case. This is what we intend to do always when we\n-                  --  finally install the change discussed above. In the case\n-                  --  of access to unconstrained array, then we take this path\n-                  --  for now only if -gnatd.1 debug flag is set.\n+                  --  Other cases use a thin pointer\n \n                   else\n                      Init_Size (Acc_Type, System_Address_Size);"}]}