{"sha": "cc68ad87014a331399ccb2528db3bf47fabe6f72", "node_id": "C_kwDOANBUbNoAKGNjNjhhZDg3MDE0YTMzMTM5OWNjYjI1MjhkYjNiZjQ3ZmFiZTZmNzI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-11T00:01:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-11T13:46:05Z"}, "message": "analyzer: ignore uninitialized uses of empty types [PR104274]\n\nPR analyzer/104274 reports a false positive from\n-Wanalyzer-use-of-uninitialized-value on hppa when passing\nan empty struct as a function parameter.\n\npa_pass_by_reference returns true for empty structs, so the\ncall is turned into:\n\n  struct empty arg.0;\n  arg.0 = arg\n  called_function (arg.0);\n\nby gimplify_parameters.\n\nHowever, gimplify_modify_expr discards assignments statments\nof empty types, so that we end up with:\n\n  struct empty arg.0;\n  called_function (arg.0);\n\nwhich the analyzer considers to be a use of uninitialized \"arg.0\";\n\nGiven that gimplify_modify_expr will discard any assignments to\nsuch types, it seems simplest for -Wanalyzer-use-of-uninitialized-value\nto ignore values of empty types.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104274\n\t* region-model.cc (region_model::check_for_poison): Ignore\n\tuninitialized uses of empty types.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104274\n\t* gcc.dg/analyzer/torture/empty-struct-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "8020fd5971b9177d75c2b8fada0c03f6b8e927eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8020fd5971b9177d75c2b8fada0c03f6b8e927eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc68ad87014a331399ccb2528db3bf47fabe6f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc68ad87014a331399ccb2528db3bf47fabe6f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc68ad87014a331399ccb2528db3bf47fabe6f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc68ad87014a331399ccb2528db3bf47fabe6f72/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae117af43944101ca47b99b743c85a3c528b4b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae117af43944101ca47b99b743c85a3c528b4b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae117af43944101ca47b99b743c85a3c528b4b4f"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "e659cf03a86b35c7b3fd58560d45fc9e9cfe9c4d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc68ad87014a331399ccb2528db3bf47fabe6f72/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc68ad87014a331399ccb2528db3bf47fabe6f72/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=cc68ad87014a331399ccb2528db3bf47fabe6f72", "patch": "@@ -843,13 +843,21 @@ region_model::check_for_poison (const svalue *sval,\n \n   if (const poisoned_svalue *poisoned_sval = sval->dyn_cast_poisoned_svalue ())\n     {\n+      enum poison_kind pkind = poisoned_sval->get_poison_kind ();\n+\n+      /* Ignore uninitialized uses of empty types; there's nothing\n+\t to initialize.  */\n+      if (pkind == POISON_KIND_UNINIT\n+\t  && sval->get_type ()\n+\t  && is_empty_type (sval->get_type ()))\n+\treturn sval;\n+\n       /* If we have an SSA name for a temporary, we don't want to print\n \t '<unknown>'.\n \t Poisoned values are shared by type, and so we can't reconstruct\n \t the tree other than via the def stmts, using\n \t fixup_tree_for_diagnostic.  */\n       tree diag_arg = fixup_tree_for_diagnostic (expr);\n-      enum poison_kind pkind = poisoned_sval->get_poison_kind ();\n       const region *src_region = NULL;\n       if (pkind == POISON_KIND_UNINIT)\n \tsrc_region = get_region_for_poisoned_expr (expr);"}, {"sha": "1f1c07a25f5f95b43470499d4dcbd7997a423ffe", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/empty-struct-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc68ad87014a331399ccb2528db3bf47fabe6f72/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fempty-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc68ad87014a331399ccb2528db3bf47fabe6f72/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fempty-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fempty-struct-1.c?ref=cc68ad87014a331399ccb2528db3bf47fabe6f72", "patch": "@@ -0,0 +1,18 @@\n+struct empty {};\n+\n+struct empty g;\n+\n+extern void sink (struct empty e);\n+\n+void test_1 (struct empty a)\n+{\n+  sink (a); /* { dg-bogus \"uninit\" } */\n+}\n+void test_2 ()\n+{\n+  struct empty a, b;\n+  b = a;\n+  g = b;\n+  sink (b); /* { dg-bogus \"uninit\" } */\n+  /* ...as there's nothing to initialize.  */\n+}"}]}