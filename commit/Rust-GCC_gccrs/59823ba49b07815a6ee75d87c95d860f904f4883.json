{"sha": "59823ba49b07815a6ee75d87c95d860f904f4883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4MjNiYTQ5YjA3ODE1YTZlZTc1ZDg3Yzk1ZDg2MGY5MDRmNDg4Mw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2003-10-20T10:07:35Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2003-10-20T10:07:35Z"}, "message": "sparc.md (type attribute): Add new insn types fpa, fpm_pack, fgm_mul, fgm_pdist, and fgm_cmp for VIS.\n\n\t* config/sparc/sparc.md (type attribute): Add new insn types\n\tfpa, fpm_pack, fgm_mul, fgm_pdist, and fgm_cmp for VIS.\n\t(patterns emitting VIS insns): Use them.\n\t* config/sparc/ultra1_2.md: Add VIS scheduling rules.\n\t* config/sparc/ultra3.md: Likewise.\n\nFrom-SVN: r72697", "tree": {"sha": "9fbd8bbc701aab561822dbf62f3a0c40ff62d2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fbd8bbc701aab561822dbf62f3a0c40ff62d2fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59823ba49b07815a6ee75d87c95d860f904f4883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59823ba49b07815a6ee75d87c95d860f904f4883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59823ba49b07815a6ee75d87c95d860f904f4883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59823ba49b07815a6ee75d87c95d860f904f4883/comments", "author": null, "committer": null, "parents": [{"sha": "e006ced29a861befefecbb9acb828a5ce8289a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e006ced29a861befefecbb9acb828a5ce8289a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e006ced29a861befefecbb9acb828a5ce8289a34"}], "stats": {"total": 136, "additions": 108, "deletions": 28}, "files": [{"sha": "90f3af74ec705ed0315ca081b9dab6ca568e5402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59823ba49b07815a6ee75d87c95d860f904f4883", "patch": "@@ -1,3 +1,11 @@\n+2003-10-20  David S. Miller  <davem@redhat.com>\n+\n+\t* config/sparc/sparc.md (type attribute): Add new insn types\n+\tfpa, fpm_pack, fgm_mul, fgm_pdist, and fgm_cmp for VIS.\n+\t(patterns emitting VIS insns): Use them.\n+\t* config/sparc/ultra1_2.md: Add VIS scheduling rules.\n+\t* config/sparc/ultra3.md: Likewise.\n+\n 2003-10-20  Falk Hueffner  <falk@debian.org>\n \n \tPR target/12654"}, {"sha": "46bd35809a9d397c225a488f4d84524c56b3030b", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=59823ba49b07815a6ee75d87c95d860f904f4883", "patch": "@@ -106,6 +106,7 @@\n    fpcmp,\n    fpmul,fpdivs,fpdivd,\n    fpsqrts,fpsqrtd,\n+   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,\n    cmove,\n    ialuX,\n    multi,flushw,iflush,trap\"\n@@ -1920,7 +1921,7 @@\n    st\\t%r1, %0\n    st\\t%1, %0\n    fzeros\\t%0\"\n-  [(set_attr \"type\" \"*,fpmove,*,*,load,fpload,store,fpstore,fpmove\")])\n+  [(set_attr \"type\" \"*,fpmove,*,*,load,fpload,store,fpstore,fga\")])\n \n (define_insn \"*movsi_lo_sum\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2192,7 +2193,7 @@\n    ldd\\t%1, %0\n    std\\t%1, %0\n    fzero\\t%0\"\n-  [(set_attr \"type\" \"*,*,*,load,store,fpmove,fpload,fpstore,fpmove\")\n+  [(set_attr \"type\" \"*,*,*,load,store,fpmove,fpload,fpstore,fga\")\n    (set_attr \"fptype\" \"*,*,*,*,*,double,*,*,double\")])\n \n (define_expand \"movdi_pic_label_ref\"\n@@ -2640,7 +2641,7 @@\n       abort();\n     }\n }\n-  [(set_attr \"type\" \"fpmove,fpmove,*,*,*,*,load,fpload,fpstore,store\")])\n+  [(set_attr \"type\" \"fpmove,fga,*,*,*,*,load,fpload,fpstore,store\")])\n \n ;; Exactly the same as above, except that all `f' cases are deleted.\n ;; This is necessary to prevent reload from ever trying to use a `f' reg\n@@ -2957,7 +2958,7 @@\n   #\n   #\n   #\"\n-  [(set_attr \"type\" \"fpmove,fpmove,load,store,store,load,store,*,*,*\")\n+  [(set_attr \"type\" \"fga,fpmove,load,store,store,load,store,*,*,*\")\n    (set_attr \"length\" \"*,*,*,*,*,*,*,2,2,2\")\n    (set_attr \"fptype\" \"double,double,*,*,*,*,*,*,*,*\")])\n \n@@ -3004,7 +3005,7 @@\n   ldx\\t%1, %0\n   stx\\t%r1, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,fpmove,load,store,*,load,store,*\")\n+  [(set_attr \"type\" \"fga,fpmove,load,store,*,load,store,*\")\n    (set_attr \"length\" \"*,*,*,*,*,*,*,2\")\n    (set_attr \"fptype\" \"double,double,*,*,*,*,*,*\")])\n \n@@ -4976,7 +4977,7 @@\n    add\\t%1, %2, %0\n    sub\\t%1, -%2, %0\n    fpadd32s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,*,fp\")])\n+  [(set_attr \"type\" \"*,*,fga\")])\n \n (define_insn \"*cmp_cc_plus\"\n   [(set (reg:CC_NOOV 100)\n@@ -5132,7 +5133,7 @@\n    sub\\t%1, %2, %0\n    add\\t%1, -%2, %0\n    fpsub32s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,*,fp\")])\n+  [(set_attr \"type\" \"*,*,fga\")])\n \n (define_insn \"*cmp_minus_cc\"\n   [(set (reg:CC_NOOV 100)\n@@ -5856,7 +5857,7 @@\n   \"@\n   #\n   fand\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -5868,7 +5869,7 @@\n   \"@\n    and\\t%1, %2, %0\n    fand\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"andsi3\"\n@@ -5879,7 +5880,7 @@\n   \"@\n    and\\t%1, %2, %0\n    fands\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -5951,7 +5952,7 @@\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n    operands[8] = gen_lowpart (SImode, operands[2]);\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -5963,7 +5964,7 @@\n   \"@\n    andn\\t%2, %1, %0\n    fandnot1\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*and_not_si\"\n@@ -5974,7 +5975,7 @@\n   \"@\n    andn\\t%2, %1, %0\n    fandnot1s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_expand \"iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5991,7 +5992,7 @@\n   \"@\n   #\n   for\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -6003,7 +6004,7 @@\n   \"@\n   or\\t%1, %2, %0\n   for\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"iorsi3\"\n@@ -6014,7 +6015,7 @@\n   \"@\n    or\\t%1, %2, %0\n    fors\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -6052,7 +6053,7 @@\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n    operands[8] = gen_lowpart (SImode, operands[2]);\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -6064,7 +6065,7 @@\n   \"@\n   orn\\t%2, %1, %0\n   fornot1\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*or_not_si\"\n@@ -6075,7 +6076,7 @@\n   \"@\n    orn\\t%2, %1, %0\n    fornot1s\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_expand \"xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -6092,7 +6093,7 @@\n   \"@\n   #\n   fxor\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -6104,7 +6105,7 @@\n   \"@\n   xor\\t%r1, %2, %0\n   fxor\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*xordi3_sp64_dbl\"\n@@ -6123,7 +6124,7 @@\n   \"@\n    xor\\t%r1, %2, %0\n    fxors\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -6177,7 +6178,7 @@\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n    operands[8] = gen_lowpart (SImode, operands[2]);\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -6189,7 +6190,7 @@\n   \"@\n   xnor\\t%r1, %2, %0\n   fxnor\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*xor_not_si\"\n@@ -6200,7 +6201,7 @@\n   \"@\n    xnor\\t%r1, %2, %0\n    fxnors\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n ;; These correspond to the above in the case where we also (or only)\n ;; want to set the condition code.  \n@@ -6463,7 +6464,7 @@\n    operands[3] = gen_highpart (SImode, operands[1]);\n    operands[4] = gen_lowpart (SImode, operands[0]);\n    operands[5] = gen_lowpart (SImode, operands[1]);\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"length\" \"2,*\")\n    (set_attr \"fptype\" \"double\")])\n \n@@ -6474,7 +6475,7 @@\n   \"@\n    xnor\\t%%g0, %1, %0\n    fnot1\\t%1, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n+  [(set_attr \"type\" \"*,fga\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_insn \"one_cmplsi2\"\n@@ -6484,7 +6485,7 @@\n   \"@\n   xnor\\t%%g0, %1, %0\n   fnot1s\\t%1, %0\"\n-  [(set_attr \"type\" \"*,fp\")])\n+  [(set_attr \"type\" \"*,fga\")])\n \n (define_insn \"*cmp_cc_not\"\n   [(set (reg:CC 100)"}, {"sha": "e58c624abd235f3087d02e76e58e0385dcd2b19a", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=59823ba49b07815a6ee75d87c95d860f904f4883", "patch": "@@ -250,3 +250,53 @@\n ;; An integer branch may execute in the same cycle as the compare\n ;; creating the condition codes.\n (define_bypass 0 \"us1_simple_ieu1\" \"us1_branch\")\n+\n+;; VIS scheduling\n+(define_insn_reservation \"us1_fga_single\"\n+  2\n+  (and (and\n+         (eq_attr \"cpu\" \"ultrasparc\")\n+         (eq_attr \"type\" \"fga\"))\n+       (eq_attr \"fptype\" \"single\"))\n+  \"us1_fpa + us1_fp_single + us1_slotany, nothing\")\n+\n+(define_bypass 1 \"us1_fga_single\" \"us1_fga_single\")\n+\n+(define_insn_reservation \"us1_fga_double\"\n+  2\n+  (and (and\n+         (eq_attr \"cpu\" \"ultrasparc\")\n+         (eq_attr \"type\" \"fga\"))\n+       (eq_attr \"fptype\" \"double\"))\n+  \"us1_fpa + us1_fp_double + us1_slotany, nothing\")\n+\n+(define_bypass 1 \"us1_fga_double\" \"us1_fga_double\")\n+\n+(define_insn_reservation \"us1_fgm_single\"\n+  4\n+  (and (and\n+         (eq_attr \"cpu\" \"ultrasparc\")\n+         (eq_attr \"type\" \"fgm_pack,fgm_mul,fgm_cmp\"))\n+       (eq_attr \"fptype\" \"single\"))\n+  \"us1_fpm + us1_fp_single + us1_slotany, nothing*3\")\n+\n+(define_bypass 3 \"us1_fgm_single\" \"us1_fga_single\")\n+\n+(define_insn_reservation \"us1_fgm_double\"\n+  4\n+  (and (and\n+         (eq_attr \"cpu\" \"ultrasparc\")\n+         (eq_attr \"type\" \"fgm_pack,fgm_mul,fgm_cmp\"))\n+       (eq_attr \"fptype\" \"double\"))\n+  \"us1_fpm + us1_fp_double + us1_slotany, nothing*3\")\n+\n+(define_bypass 3 \"us1_fgm_double\" \"us1_fga_double\")\n+\n+(define_insn_reservation \"us1_pdist\"\n+  4\n+  (and (eq_attr \"cpu\" \"ultrasparc\")\n+       (eq_attr \"type\" \"fgm_pdist\"))\n+  \"us1_fpm + us1_fp_double + us1_slotany, nothing*3\")\n+\n+(define_bypass 3 \"us1_pdist\" \"us1_fga_double,us1_fga_single\")\n+(define_bypass 1 \"us1_pdist\" \"us1_pdist\")"}, {"sha": "238beab29109c3f8207f48818cc779445e0a3df9", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59823ba49b07815a6ee75d87c95d860f904f4883/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=59823ba49b07815a6ee75d87c95d860f904f4883", "patch": "@@ -167,3 +167,24 @@\n \n ;; If FMOVfcc is user of FPCMP, latency is only 1 cycle.\n (define_bypass 1 \"us3_fpcmp\" \"us3_fcmov\")\n+\n+;; VIS scheduling\n+(define_insn_reservation \"us3_fga\"\n+  3\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+       (eq_attr \"type\" \"fga\"))\n+  \"us3_fpa + us3_slotany, nothing*2\")\n+\n+(define_insn_reservation \"us3_fgm\"\n+  4\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+       (eq_attr \"type\" \"fgm_pack,fgm_mul,fgm_cmp\"))\n+  \"us3_fpm + us3_slotany, nothing*3\")\n+\n+(define_insn_reservation \"us3_pdist\"\n+  4\n+  (and (eq_attr \"cpu\" \"ultrasparc3\")\n+       (eq_attr \"type\" \"fgm_pdist\"))\n+  \"us3_fpm + us3_slotany, nothing*3\")\n+\n+(define_bypass 1 \"us3_pdist\" \"us3_pdist\")"}]}