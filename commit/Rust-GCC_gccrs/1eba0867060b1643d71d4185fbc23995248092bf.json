{"sha": "1eba0867060b1643d71d4185fbc23995248092bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViYTA4NjcwNjBiMTY0M2Q3MWQ0MTg1ZmJjMjM5OTUyNDgwOTJiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-19T13:12:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-19T13:12:58Z"}, "message": "re PR libquadmath/65757 (gfortran gives incorrect result for anint with real*16 argument)\n\n\tPR libquadmath/65757\n\t* quadmath-imp.h (math_opt_barrier, math_force_eval,\n\tmath_narrow_eval, math_check_force_underflow,\n\tmath_check_force_underflow_nonneg): Define.\n\t* math/ceilq.c: Backport changes from upstream glibc\n\tbetween 2012-11-01 and 2017-07-13.\n\t* math/remquoq.c: Likewise.\n\t* math/expq.c: Likewise.\n\t* math/llroundq.c: Likewise.\n\t* math/logq.c: Likewise.\n\t* math/atanq.c: Likewise.\n\t* math/nearbyintq.c: Likewise.\n\t* math/scalblnq.c: Likewise.\n\t* math/finiteq.c: Likewise.\n\t* math/atanhq.c: Likewise.\n\t* math/expm1q.c: Likewise.\n\t* math/sinhq.c: Likewise.\n\t* math/log10q.c: Likewise.\n\t* math/rintq.c: Likewise.\n\t* math/roundq.c: Likewise.\n\t* math/fmaq.c: Likewise.\n\t* math/erfq.c: Likewise.\n\t* math/log2q.c: Likewise.\n\t* math/lroundq.c: Likewise.\n\t* math/j1q.c: Likewise.\n\t* math/scalbnq.c: Likewise.\n\t* math/truncq.c: Likewise.\n\t* math/frexpq.c: Likewise.\n\t* math/sincosq.c: Likewise.\n\t* math/tanhq.c: Likewise.\n\t* math/asinq.c: Likewise.\n\t* math/coshq.c: Likewise.\n\t* math/j0q.c: Likewise.\n\t* math/asinhq.c: Likewise.\n\t* math/floorq.c: Likewise.\n\t* math/sinq_kernel.c: Likewise.\n\t* math/powq.c: Likewise.\n\t* math/hypotq.c: Likewise.\n\t* math/sincos_table.c: Likewise.\n\t* math/rem_pio2q.c: Likewise.\n\t* math/nextafterq.c: Likewise.\n\t* math/log1pq.c: Likewise.\n\t* math/sincosq_kernel.c: Likewise.\n\t* math/tanq.c: Likewise.\n\t* math/acosq.c: Likewise.\n\t* math/lrintq.c: Likewise.\n\t* math/llrintq.c: Likewise.\n\nFrom-SVN: r250343", "tree": {"sha": "b933cf0474996b72f099f09c134fd321c9590600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b933cf0474996b72f099f09c134fd321c9590600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eba0867060b1643d71d4185fbc23995248092bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eba0867060b1643d71d4185fbc23995248092bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eba0867060b1643d71d4185fbc23995248092bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eba0867060b1643d71d4185fbc23995248092bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "564e405c138dc1891ca92462a585bf89444d7dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564e405c138dc1891ca92462a585bf89444d7dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564e405c138dc1891ca92462a585bf89444d7dd1"}], "stats": {"total": 1266, "additions": 789, "deletions": 477}, "files": [{"sha": "73d0e3077c5effa7e76590602818cabc13d5bf7f", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,3 +1,53 @@\n+2017-07-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libquadmath/65757\n+\t* quadmath-imp.h (math_opt_barrier, math_force_eval,\n+\tmath_narrow_eval, math_check_force_underflow,\n+\tmath_check_force_underflow_nonneg): Define.\n+\t* math/ceilq.c: Backport changes from upstream glibc\n+\tbetween 2012-11-01 and 2017-07-13.\n+\t* math/remquoq.c: Likewise.\n+\t* math/expq.c: Likewise.\n+\t* math/llroundq.c: Likewise.\n+\t* math/logq.c: Likewise.\n+\t* math/atanq.c: Likewise.\n+\t* math/nearbyintq.c: Likewise.\n+\t* math/scalblnq.c: Likewise.\n+\t* math/finiteq.c: Likewise.\n+\t* math/atanhq.c: Likewise.\n+\t* math/expm1q.c: Likewise.\n+\t* math/sinhq.c: Likewise.\n+\t* math/log10q.c: Likewise.\n+\t* math/rintq.c: Likewise.\n+\t* math/roundq.c: Likewise.\n+\t* math/fmaq.c: Likewise.\n+\t* math/erfq.c: Likewise.\n+\t* math/log2q.c: Likewise.\n+\t* math/lroundq.c: Likewise.\n+\t* math/j1q.c: Likewise.\n+\t* math/scalbnq.c: Likewise.\n+\t* math/truncq.c: Likewise.\n+\t* math/frexpq.c: Likewise.\n+\t* math/sincosq.c: Likewise.\n+\t* math/tanhq.c: Likewise.\n+\t* math/asinq.c: Likewise.\n+\t* math/coshq.c: Likewise.\n+\t* math/j0q.c: Likewise.\n+\t* math/asinhq.c: Likewise.\n+\t* math/floorq.c: Likewise.\n+\t* math/sinq_kernel.c: Likewise.\n+\t* math/powq.c: Likewise.\n+\t* math/hypotq.c: Likewise.\n+\t* math/sincos_table.c: Likewise.\n+\t* math/rem_pio2q.c: Likewise.\n+\t* math/nextafterq.c: Likewise.\n+\t* math/log1pq.c: Likewise.\n+\t* math/sincosq_kernel.c: Likewise.\n+\t* math/tanq.c: Likewise.\n+\t* math/acosq.c: Likewise.\n+\t* math/lrintq.c: Likewise.\n+\t* math/llrintq.c: Likewise.\n+\n 2017-02-09  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* configure.ac (ACX_BUGURL): Update."}, {"sha": "7f2ed2725d122946601ab749950d55975bd72b23", "filename": "libquadmath/math/acosq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Facosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Facosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Facosq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -172,7 +172,7 @@ acosq (__float128 x)\n     }\n   else if (ix < 0x3ffe0000)\t/* |x| < 0.5 */\n     {\n-      if (ix < 0x3fc60000)\t/* |x| < 2**-57 */\n+      if (ix < 0x3f8e0000)\t/* |x| < 2**-113 */\n \treturn pio2_hi + pio2_lo;\n       if (ix < 0x3ffde000)\t/* |x| < .4375 */\n \t{"}, {"sha": "f3644939b3a888b20185d83d366b267a0d76e7e6", "filename": "libquadmath/math/asinhq.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fasinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fasinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinhq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -46,6 +46,7 @@ asinhq (__float128 x)\n     return x + x;\t\t/* x is inf or NaN */\n   if (ix < 0x3fc70000)\n     {\t\t\t\t/* |x| < 2^ -56 */\n+      math_check_force_underflow (x);\n       if (huge + x > one)\n \treturn x;\t\t/* return x inexact except 0 */\n     }"}, {"sha": "5dff281769427f6257d8c042dafd996fec8fb123", "filename": "libquadmath/math/asinq.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fasinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fasinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -151,8 +151,10 @@ asinq (__float128 x)\n     {\n       if (ix < 0x3fc60000) /* |x| < 2**-57 */\n \t{\n-\t  if (huge + x > one)\n-\t    return x;\t\t/* return x with inexact if x!=0 */\n+\t  math_check_force_underflow (x);\n+\t  __float128 force_inexact = huge + x;\n+\t  math_force_eval (force_inexact);\n+\t  return x;\t\t/* return x with inexact if x!=0 */\n \t}\n       else\n \t{"}, {"sha": "652138d495cd56c30beea9ba19c56b1b703a6645", "filename": "libquadmath/math/atanhq.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fatanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fatanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanhq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -55,7 +55,11 @@ atanhq (__float128 x)\n \t    else\n \t      return (x-x)/(x-x);\n \t  }\n-\tif(ix<0x3fc60000 && (huge+x)>zero) return x;\t/* x < 2^-57 */\n+\tif(ix<0x3fc60000 && (huge+x)>zero)\t/* x < 2^-57 */\n+\t  {\n+\t    math_check_force_underflow (x);\n+\t    return x;\n+\t  }\n \n \tif(ix<0x3ffe0000) {\t\t/* x < 0.5 */\n \t    t = u.value+u.value;"}, {"sha": "01fd9d69e5785fbaabc65e9955c1440b779b65dc", "filename": "libquadmath/math/atanq.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -42,7 +42,7 @@\n  *\n  */\n \n-/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov> \n+/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov>\n \n     This library is free software; you can redistribute it and/or\n     modify it under the terms of the GNU Lesser General Public\n@@ -167,7 +167,7 @@ static const __float128\n   q4 = 2.173623741810414221251136181221172551416E1Q;\n   /* q5 = 1.000000000000000000000000000000000000000E0 */\n \n-static const long double huge = 1.0e4930Q;\n+static const __float128 huge = 1.0e4930Q;\n \n __float128\n atanq (__float128 x)\n@@ -200,6 +200,7 @@ atanq (__float128 x)\n \n   if (k <= 0x3fc50000) /* |x| < 2**-58 */\n     {\n+      math_check_force_underflow (x);\n       /* Raise inexact. */\n       if (huge + x > 0.0)\n \treturn x;"}, {"sha": "1adc1e1b9f0ac6c49574b3ebe1b082f3a86b7409", "filename": "libquadmath/math/ceilq.c", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fceilq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fceilq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fceilq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -15,8 +15,6 @@\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 huge = 1.0e4930Q;\n-\n __float128\n ceilq (__float128 x)\n {\n@@ -25,36 +23,31 @@ ceilq (__float128 x)\n \tGET_FLT128_WORDS64(i0,i1,x);\n \tj0 = ((i0>>48)&0x7fff)-0x3fff;\n \tif(j0<48) {\n-\t    if(j0<0) { \t/* raise inexact if x != 0 */\n-\t\tif(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */\n-\t\t    if(i0<0) {i0=0x8000000000000000ULL;i1=0;}\n-\t\t    else if((i0|i1)!=0) { i0=0x3fff000000000000ULL;i1=0;}\n-\t\t}\n+\t    if(j0<0) {\n+\t\t/* return 0*sign(x) if |x|<1 */\n+\t\tif(i0<0) {i0=0x8000000000000000ULL;i1=0;}\n+\t\telse if((i0|i1)!=0) { i0=0x3fff000000000000ULL;i1=0;}\n \t    } else {\n \t\ti = (0x0000ffffffffffffULL)>>j0;\n \t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n-\t\tif(huge+x>0.0) {\t/* raise inexact flag */\n-\t\t    if(i0>0) i0 += (0x0001000000000000LL)>>j0;\n-\t\t    i0 &= (~i); i1=0;\n-\t\t}\n+\t\tif(i0>0) i0 += (0x0001000000000000LL)>>j0;\n+\t\ti0 &= (~i); i1=0;\n \t    }\n \t} else if (j0>111) {\n \t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n \t    else return x;\t\t/* x is integral */\n \t} else {\n \t    i = -1ULL>>(j0-48);\n \t    if((i1&i)==0) return x;\t/* x is integral */\n-\t    if(huge+x>0.0) { \t\t/* raise inexact flag */\n-\t\tif(i0>0) {\n-\t\t    if(j0==48) i0+=1;\n-\t\t    else {\n-\t\t\tj = i1+(1LL<<(112-j0));\n-\t\t\tif(j<i1) i0 +=1 ; \t/* got a carry */\n-\t\t\ti1=j;\n-\t\t    }\n+\t    if(i0>0) {\n+\t\tif(j0==48) i0+=1;\n+\t\telse {\n+\t\t    j = i1+(1LL<<(112-j0));\n+\t\t    if(j<i1) i0 +=1 ; \t/* got a carry */\n+\t\t    i1=j;\n \t\t}\n-\t\ti1 &= (~i);\n \t    }\n+\t    i1 &= (~i);\n \t}\n \tSET_FLT128_WORDS64(x,i0,i1);\n \treturn x;"}, {"sha": "6139750952727a5b324f2dfbe94c0857be572108", "filename": "libquadmath/math/coshq.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fcoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fcoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcoshq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -76,10 +76,10 @@ coshq (__float128 x)\n   /* |x| in [0,0.5*ln2], return 1+expm1l(|x|)^2/(2*expq(|x|)) */\n   if (ex < 0x3ffd62e4) /* 0.3465728759765625 */\n     {\n+      if (ex < 0x3fb80000) /* |x| < 2^-116 */\n+\treturn one;\t\t/* cosh(tiny) = 1 */\n       t = expm1q (u.value);\n       w = one + t;\n-      if (ex < 0x3fb80000) /* |x| < 2^-116 */\n-\treturn w;\t\t/* cosh(tiny) = 1 */\n \n       return one + (t * t) / (w + w);\n     }"}, {"sha": "45a8c014e5c05f27a575104933a0c95f583f81ed", "filename": "libquadmath/math/erfq.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ferfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ferfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ferfq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -11,9 +11,9 @@\n \n /* Modifications and expansions for 128-bit long double are\n    Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-   and are incorporated herein by permission of the author.  The author \n+   and are incorporated herein by permission of the author.  The author\n    reserves the right to distribute this material elsewhere under different\n-   copying permissions.  These modifications are distributed here under \n+   copying permissions.  These modifications are distributed here under\n    the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -96,6 +96,7 @@\n  *\t\terfc/erf(NaN) is NaN\n  */\n \n+#include <errno.h>\n #include \"quadmath-imp.h\"\n \n \n@@ -142,13 +143,10 @@ deval (__float128 x, const __float128 *p, int n)\n \n static const __float128\n tiny = 1e-4931Q,\n-  half = 0.5Q,\n   one = 1.0Q,\n   two = 2.0Q,\n   /* 2/sqrt(pi) - 1 */\n-  efx = 1.2837916709551257389615890312154517168810E-1Q,\n-  /* 8 * (2/sqrt(pi) - 1) */\n-  efx8 = 1.0270333367641005911692712249723613735048E0Q;\n+  efx = 1.2837916709551257389615890312154517168810E-1Q;\n \n \n /* erf(x)  = x  + x R(x^2)\n@@ -773,6 +771,8 @@ erfq (__float128 x)\n \n   if (ix >= 0x3fff0000) /* |x| >= 1.0 */\n     {\n+      if (ix >= 0x40030000 && sign > 0)\n+\treturn one; /* x >= 16, avoid spurious underflow from erfc.  */\n       y = erfcq (x);\n       return (one - y);\n       /*    return (one - erfcq (x)); */\n@@ -785,7 +785,12 @@ erfq (__float128 x)\n       if (ix < 0x3fc60000) /* |x|<2**-57 */\n \t{\n \t  if (ix < 0x00080000)\n-\t    return 0.125 * (8.0 * x + efx8 * x);\t/*avoid underflow */\n+\t    {\n+\t      /* Avoid spurious underflow.  */\n+\t      __float128 ret =  0.0625 * (16.0 * x + (16.0 * efx) * x);\n+\t      math_check_force_underflow (ret);\n+\t      return ret;\n+\t    }\n \t  return x + efx * x;\n \t}\n       y = a + a * neval (z, TN1, NTN1) / deval (z, TD1, NTD1);\n@@ -867,7 +872,7 @@ erfcq (__float128 x)\n \t  y = C19b + z * neval (z, RNr19, NRNr19) / deval (z, RDr19, NRDr19);\n \t  y += C19a;\n \t  break;\n-\tcase 9:\n+\tdefault: /* i == 9.  */\n \t  z = x - 1.125Q;\n \t  y = C20b + z * neval (z, RNr20, NRNr20) / deval (z, RDr20, NRDr20);\n \t  y += C20a;\n@@ -921,14 +926,22 @@ erfcq (__float128 x)\n       z = u.value;\n       r = expq (-z * z - 0.5625) * expq ((z - x) * (z + x) + p);\n       if ((sign & 0x80000000) == 0)\n-\treturn r / x;\n+\t{\n+\t  __float128 ret = r / x;\n+\t  if (ret == 0)\n+\t    errno = ERANGE;\n+\t  return ret;\n+\t}\n       else\n \treturn two - r / x;\n     }\n   else\n     {\n       if ((sign & 0x80000000) == 0)\n-\treturn tiny * tiny;\n+\t{\n+\t  errno = ERANGE;\n+\t  return tiny * tiny;\n+\t}\n       else\n \treturn two - tiny;\n     }"}, {"sha": "9060d480858bcab1ce7994cd4921b30b8aac839a", "filename": "libquadmath/math/expm1q.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fexpm1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fexpm1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpm1q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -35,7 +35,7 @@\n  *\n  */\n \n-/* Copyright 2001 by Stephen L. Moshier \n+/* Copyright 2001 by Stephen L. Moshier\n \n     This library is free software; you can redistribute it and/or\n     modify it under the terms of the GNU Lesser General Public\n@@ -82,8 +82,6 @@ static const __float128\n \n   C1 = 6.93145751953125E-1Q,\n   C2 = 1.428606820309417232121458176568075500134E-6Q,\n-/* ln (2^16384 * (1 - 2^-113)) */\n-  maxlog = 1.1356523406294143949491931077970764891253E4Q,\n /* ln 2^-114 */\n   minarg = -7.9018778583833765273564461846232128760607E1Q;\n \n@@ -108,33 +106,30 @@ expm1q (__float128 x)\n     }\n   if (ix >= 0x7fff0000)\n     {\n-      /* Infinity. */\n+      /* Infinity (which must be negative infinity). */\n       if (((ix & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n-\t{\n-\t  if (sign)\n-\t    return -1.0Q;\n-\t  else\n-\t    return x;\n-\t}\n-      /* NaN. No invalid exception. */\n-      return x;\n+\treturn -1.0Q;\n+      /* NaN.  Invalid exception if signaling.  */\n+      return x + x;\n     }\n \n   /* expm1(+- 0) = +- 0.  */\n   if ((ix == 0) && (u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n     return x;\n \n-  /* Overflow.  */\n-  if (x > maxlog)\n-    {\n-      errno = ERANGE;\n-      return (HUGE_VALQ * HUGE_VALQ);\n-    }\n-\n   /* Minimum value.  */\n   if (x < minarg)\n     return (4.0/HUGE_VALQ - 1.0Q);\n \n+  /* Avoid internal underflow when result does not underflow, while\n+     ensuring underflow (without returning a zero of the wrong sign)\n+     when the result does underflow.  */\n+  if (fabsq (x) < 0x1p-113Q)\n+    {\n+      math_check_force_underflow (x);\n+      return x;\n+    }\n+\n   /* Express x = ln 2 (k + remainder), remainder not exceeding 1/2. */\n   xx = C1 + C2;\t\t\t/* ln 2. */\n   px = floorq (0.5 + x / xx);"}, {"sha": "5df6cd8e1924ce7d06a69bea13c70b13d228892e", "filename": "libquadmath/math/expq.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point e^x.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n    Partly based on double-precision code\n@@ -1075,7 +1075,7 @@ static const __float128 C[] = {\n #define TWO15 C[11]\n  32768.0Q,\n \n-/* Chebyshev polynom coeficients for (exp(x)-1)/x */\n+/* Chebyshev polynom coefficients for (exp(x)-1)/x */\n #define P1 C[12]\n #define P2 C[13]\n #define P3 C[14]\n@@ -1142,7 +1142,7 @@ expq (__float128 x)\n \t\t* __expq_table[T_EXPL_RES2 + tval2];\n       n_i = (int)n;\n       /* 'unsafe' is 1 iff n_1 != 0.  */\n-      unsafe = abs(n_i) >= -FLT128_MIN_EXP - 1;\n+      unsafe = abs(n_i) >= 15000;\n       ex2_u.ieee.exponent += n_i >> unsafe;\n \n       /* Compute scale = 2^n_1.  */\n@@ -1179,7 +1179,7 @@ expq (__float128 x)\n \t  ex3_u.d = (result - ex2_u.d) - x22 * ex2_u.d;\n \t  ex2_u.d = result;\n \t  ex3_u.ieee.exponent += LDBL_MANT_DIG + 15 + IEEE854_LONG_DOUBLE_BIAS\n-\t  \t\t\t - ex2_u.ieee.exponent;\n+\t\t\t\t - ex2_u.ieee.exponent;\n \t  n_i = abs (ex3_u.d);\n \t  n_i = (n_i + 1) / 2;\n #ifdef USE_FENV_H\n@@ -1196,7 +1196,11 @@ expq (__float128 x)\n       if (!unsafe)\n \treturn result;\n       else\n-\treturn result * scale_u.value;\n+\t{\n+\t  result *= scale_u.value;\n+\t  math_check_force_underflow_nonneg (result);\n+\t  return result;\n+\t}\n     }\n   /* Exceptional cases:  */\n   else if (__builtin_isless (x, himark))"}, {"sha": "e6703fb2261f87d5d8f93dc45c7fab7327812c28", "filename": "libquadmath/math/finiteq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffiniteq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffiniteq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffiniteq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -25,6 +25,6 @@ finiteq (const __float128 x)\n {\n   int64_t hx;\n   GET_FLT128_MSW64(hx,x);\n-  return (int)((uint64_t)((hx&0x7fffffffffffffffLL)\n+  return (int)((uint64_t)((hx&0x7fff000000000000LL)\n \t\t\t   -0x7fff000000000000LL)>>63);\n }"}, {"sha": "41b993fa7a0c75ae57a1f445d733c8ee9d74c88e", "filename": "libquadmath/math/floorq.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffloorq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffloorq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffloorq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -15,8 +15,6 @@\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 huge = 1.0e4930Q;\n-\n __float128\n floorq (__float128 x)\n {\n@@ -25,37 +23,32 @@ floorq (__float128 x)\n \tGET_FLT128_WORDS64(i0,i1,x);\n \tj0 = ((i0>>48)&0x7fff)-0x3fff;\n \tif(j0<48) {\n-\t    if(j0<0) { \t/* raise inexact if x != 0 */\n-\t\tif(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */\n-\t\t    if(i0>=0) {i0=i1=0;}\n-\t\t    else if(((i0&0x7fffffffffffffffLL)|i1)!=0)\n-\t\t\t{ i0=0xbfff000000000000ULL;i1=0;}\n-\t\t}\n+\t    if(j0<0) {\n+\t\t/* return 0*sign(x) if |x|<1 */\n+\t\tif(i0>=0) {i0=i1=0;}\n+\t\telse if(((i0&0x7fffffffffffffffLL)|i1)!=0)\n+\t\t    { i0=0xbfff000000000000ULL;i1=0;}\n \t    } else {\n \t\ti = (0x0000ffffffffffffULL)>>j0;\n \t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n-\t\tif(huge+x>0.0) {\t/* raise inexact flag */\n-\t\t    if(i0<0) i0 += (0x0001000000000000LL)>>j0;\n-\t\t    i0 &= (~i); i1=0;\n-\t\t}\n+\t\tif(i0<0) i0 += (0x0001000000000000LL)>>j0;\n+\t\ti0 &= (~i); i1=0;\n \t    }\n \t} else if (j0>111) {\n \t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n \t    else return x;\t\t/* x is integral */\n \t} else {\n \t    i = -1ULL>>(j0-48);\n \t    if((i1&i)==0) return x;\t/* x is integral */\n-\t    if(huge+x>0.0) { \t\t/* raise inexact flag */\n-\t\tif(i0<0) {\n-\t\t    if(j0==48) i0+=1;\n-\t\t    else {\n-\t\t\tj = i1+(1LL<<(112-j0));\n-\t\t\tif(j<i1) i0 +=1 ; \t/* got a carry */\n-\t\t\ti1=j;\n-\t\t    }\n+\t    if(i0<0) {\n+\t\tif(j0==48) i0+=1;\n+\t\telse {\n+\t\t    j = i1+(1LL<<(112-j0));\n+\t\t    if(j<i1) i0 +=1 ; \t/* got a carry */\n+\t\t    i1=j;\n \t\t}\n-\t\ti1 &= (~i);\n \t    }\n+\t    i1 &= (~i);\n \t}\n \tSET_FLT128_WORDS64(x,i0,i1);\n \treturn x;"}, {"sha": "68a63cf8fd65244a92937ae914d4a6cdb73fdace", "filename": "libquadmath/math/fmaq.c", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffmaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffmaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Compute x * y + z as ternary operation.\n-   Copyright (C) 2010-2012 Free Software Foundation, Inc.\n+   Copyright (C) 2010-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jakub@redhat.com>, 2010.\n \n@@ -97,8 +97,8 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t\t     && w.ieee.mant_low == 0\n \t\t     && w.ieee.mant_high == 0)))\n \t    {\n-\t      volatile __float128 force_underflow = x * y;\n-\t      (void) force_underflow;\n+\t      __float128 force_underflow = x * y;\n+\t      math_force_eval (force_underflow);\n \t    }\n \t  return v.value * 0x1p-114Q;\n \t}\n@@ -161,15 +161,15 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t\t  <= IEEE854_FLOAT128_BIAS + FLT128_MANT_DIG) */\n \t{\n \t  if (u.ieee.exponent > v.ieee.exponent)\n-\t    u.ieee.exponent += 2 * FLT128_MANT_DIG;\n+\t    u.ieee.exponent += 2 * FLT128_MANT_DIG + 2;\n \t  else\n-\t    v.ieee.exponent += 2 * FLT128_MANT_DIG;\n-\t  if (w.ieee.exponent <= 4 * FLT128_MANT_DIG + 4)\n+\t    v.ieee.exponent += 2 * FLT128_MANT_DIG + 2;\n+\t  if (w.ieee.exponent <= 4 * FLT128_MANT_DIG + 6)\n \t    {\n \t      if (w.ieee.exponent)\n-\t\tw.ieee.exponent += 2 * FLT128_MANT_DIG;\n+\t\tw.ieee.exponent += 2 * FLT128_MANT_DIG + 2;\n \t      else\n-\t\tw.value *= 0x1p226Q;\n+\t\tw.value *= 0x1p228Q;\n \t      adjust = -1;\n \t    }\n \t  /* Otherwise x * y should just affect inexact\n@@ -182,7 +182,10 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \n   /* Ensure correct sign of exact 0 + 0.  */\n   if (__builtin_expect ((x == 0 || y == 0) && z == 0, 0))\n-    return x * y + z;\n+    {\n+      x = math_opt_barrier (x);\n+      return x * y + z;\n+    }\n \n #ifdef USE_FENV_H\n   fenv_t env;\n@@ -208,24 +211,24 @@ fmaq (__float128 x, __float128 y, __float128 z)\n   t1 = m1 - t1;\n   t2 = z - t2;\n   __float128 a2 = t1 + t2;\n+  /* Ensure the arithmetic is not scheduled after feclearexcept call.  */\n+  math_force_eval (m2);\n+  math_force_eval (a2);\n #ifdef USE_FENV_H\n   feclearexcept (FE_INEXACT);\n #endif\n \n-  /* If the result is an exact zero, ensure it has the correct\n-     sign.  */\n+  /* If the result is an exact zero, ensure it has the correct sign.  */\n   if (a1 == 0 && m2 == 0)\n     {\n #ifdef USE_FENV_H\n       feupdateenv (&env);\n #endif\n-      /* Ensure that round-to-nearest value of z + m1 is not\n-\t reused.  */\n-      asm volatile (\"\" : \"=m\" (z) : \"m\" (z));\n+      /* Ensure that round-to-nearest value of z + m1 is not reused.  */\n+      z = math_opt_barrier (z);\n       return z + m1;\n     }\n \n-\n #ifdef USE_FENV_H\n   fesetround (FE_TOWARDZERO);\n #endif\n@@ -273,19 +276,19 @@ fmaq (__float128 x, __float128 y, __float128 z)\n       /* If a1 + u.value is exact, the only rounding happens during\n \t scaling down.  */\n       if (j == 0)\n-\treturn v.value * 0x1p-226Q;\n+\treturn v.value * 0x1p-228Q;\n       /* If result rounded to zero is not subnormal, no double\n \t rounding will occur.  */\n-      if (v.ieee.exponent > 226)\n-\treturn (a1 + u.value) * 0x1p-226Q;\n-      /* If v.value * 0x1p-226Q with round to zero is a subnormal above\n-\t or equal to FLT128_MIN / 2, then v.value * 0x1p-226Q shifts mantissa\n+      if (v.ieee.exponent > 228)\n+\treturn (a1 + u.value) * 0x1p-228Q;\n+      /* If v.value * 0x1p-228Q with round to zero is a subnormal above\n+\t or equal to FLT128_MIN / 2, then v.value * 0x1p-228Q shifts mantissa\n \t down just by 1 bit, which means v.ieee.mant_low |= j would\n \t change the round bit, not sticky or guard bit.\n-\t v.value * 0x1p-226Q never normalizes by shifting up,\n+\t v.value * 0x1p-228Q never normalizes by shifting up,\n \t so round bit plus sticky bit should be already enough\n \t for proper rounding.  */\n-      if (v.ieee.exponent == 226)\n+      if (v.ieee.exponent == 228)\n \t{\n \t  /* If the exponent would be in the normal range when\n \t     rounding to normal precision with unbounded exponent\n@@ -295,8 +298,8 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t  if (TININESS_AFTER_ROUNDING)\n \t    {\n \t      w.value = a1 + u.value;\n-\t      if (w.ieee.exponent == 227)\n-\t\treturn w.value * 0x1p-226Q;\n+\t      if (w.ieee.exponent == 229)\n+\t\treturn w.value * 0x1p-228Q;\n \t    }\n \t  /* v.ieee.mant_low & 2 is LSB bit of the result before rounding,\n \t     v.ieee.mant_low & 1 is the round bit and j is our sticky\n@@ -305,11 +308,11 @@ fmaq (__float128 x, __float128 y, __float128 z)\n \t  w.ieee.mant_low = ((v.ieee.mant_low & 3) << 1) | j;\n \t  w.ieee.negative = v.ieee.negative;\n \t  v.ieee.mant_low &= ~3U;\n-\t  v.value *= 0x1p-226Q;\n+\t  v.value *= 0x1p-228Q;\n \t  w.value *= 0x1p-2Q;\n \t  return v.value + w.value;\n \t}\n       v.ieee.mant_low |= j;\n-      return v.value * 0x1p-226Q;\n+      return v.value * 0x1p-228Q;\n     }\n }"}, {"sha": "2bd77829bf286a4b9d20568eae85a7c1ab7a04e5", "filename": "libquadmath/math/frexpq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffrexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ffrexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffrexpq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -35,7 +35,7 @@ frexpq (__float128 x, int *eptr)\n   GET_FLT128_WORDS64(hx,lx,x);\n   ix = 0x7fffffffffffffffULL&hx;\n   *eptr = 0;\n-  if(ix>=0x7fff000000000000ULL||((ix|lx)==0)) return x;\t/* 0,inf,nan */\n+  if(ix>=0x7fff000000000000ULL||((ix|lx)==0)) return x + x;/* 0,inf,nan */\n   if (ix<0x0001000000000000ULL) {\t\t/* subnormal */\n     x *= two114;\n     GET_FLT128_MSW64(hx,x);"}, {"sha": "057901073dce71a74776042c23d6a4d1ab2f453e", "filename": "libquadmath/math/hypotq.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fhypotq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fhypotq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fhypotq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -89,6 +89,17 @@ hypotq (__float128 x, __float128 y)\n   \tb *= t1;\n   \ta *= t1;\n   \tk -= 16382;\n+\tGET_FLT128_MSW64 (ha, a);\n+\tGET_FLT128_MSW64 (hb, b);\n+\tif (hb > ha)\n+\t  {\n+\t    t1 = a;\n+\t    a = b;\n+\t    b = t1;\n+\t    j = ha;\n+\t    ha = hb;\n+\t    hb = j;\n+\t  }\n       } else {\t\t/* scale a and b by 2^9600 */\n           ha += 0x2580000000000000LL; \t/* a *= 2^9600 */\n   \thb += 0x2580000000000000LL;\t/* b *= 2^9600 */\n@@ -119,6 +130,8 @@ hypotq (__float128 x, __float128 y)\n       t1 = 1.0Q;\n       GET_FLT128_MSW64(high,t1);\n       SET_FLT128_MSW64(t1,high+(k<<48));\n-      return t1*w;\n+      w *= t1;\n+      math_check_force_underflow_nonneg (w);\n+      return w;\n   } else return w;\n }"}, {"sha": "c6e482b1c51cf60ceafd641986f9647a4dd00c1f", "filename": "libquadmath/math/j0q.c", "status": "modified", "additions": 49, "deletions": 38, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fj0q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fj0q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj0q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -681,7 +681,7 @@ j0q (__float128 x)\n   if (! finiteq (x))\n     {\n       if (x != x)\n-\treturn x;\n+\treturn x + x;\n       else\n \treturn 0.0Q;\n     }\n@@ -691,6 +691,8 @@ j0q (__float128 x)\n   xx = fabsq (x);\n   if (xx <= 2.0Q)\n     {\n+      if (xx < 0x1p-57Q)\n+\treturn 1.0Q;\n       /* 0 <= x <= 2 */\n       z = xx * xx;\n       p = z * z * neval (z, J0_2N, NJ0_2N) / deval (z, J0_2D, NJ0_2D);\n@@ -699,6 +701,28 @@ j0q (__float128 x)\n       return p;\n     }\n \n+  /* X = x - pi/4\n+     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n+     = 1/sqrt(2) * (cos(x) + sin(x))\n+     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n+     = 1/sqrt(2) * (sin(x) - cos(x))\n+     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = s - c;\n+  cc = s + c;\n+  if (xx <= FLT128_MAX / 2.0Q)\n+    {\n+      z = -cosq (xx + xx);\n+      if ((s * c) < 0)\n+\tcc = z / ss;\n+      else\n+\tss = z / cc;\n+    }\n+\n+  if (xx > 0x1p256Q)\n+    return ONEOSQPI * cc / sqrtq (xx);\n+\n   xinv = 1.0Q / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n@@ -760,21 +784,6 @@ j0q (__float128 x)\n   p = 1.0Q + z * p;\n   q = z * xinv * q;\n   q = q - 0.125Q * xinv;\n-  /* X = x - pi/4\n-     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n-     = 1/sqrt(2) * (cos(x) + sin(x))\n-     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n-     = 1/sqrt(2) * (sin(x) - cos(x))\n-     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n-     cf. Fdlibm.  */\n-  sincosq (xx, &s, &c);\n-  ss = s - c;\n-  cc = s + c;\n-  z = - cosq (xx + xx);\n-  if ((s * c) < 0)\n-    cc = z / ss;\n-  else\n-    ss = z / cc;\n   z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n   return z;\n }\n@@ -817,17 +826,12 @@ y0q (__float128 x)\n   __float128 xx, xinv, z, p, q, c, s, cc, ss;\n \n   if (! finiteq (x))\n-    {\n-      if (x != x)\n-\treturn x;\n-      else\n-\treturn 0.0Q;\n-    }\n+    return 1 / (x + x * x);\n   if (x <= 0.0Q)\n     {\n       if (x < 0.0Q)\n \treturn (zero / (zero * x));\n-      return -HUGE_VALQ + x;\n+      return -1 / zero; /* -inf and divide by zero exception.  */\n     }\n   xx = fabsq (x);\n   if (xx <= 0x1p-57)\n@@ -841,6 +845,28 @@ y0q (__float128 x)\n       return p;\n     }\n \n+  /* X = x - pi/4\n+     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n+     = 1/sqrt(2) * (cos(x) + sin(x))\n+     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n+     = 1/sqrt(2) * (sin(x) - cos(x))\n+     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (x, &s, &c);\n+  ss = s - c;\n+  cc = s + c;\n+  if (xx <= FLT128_MAX / 2.0Q)\n+    {\n+      z = -cosq (x + x);\n+      if ((s * c) < 0)\n+\tcc = z / ss;\n+      else\n+\tss = z / cc;\n+    }\n+\n+  if (xx > 0x1p256Q)\n+    return ONEOSQPI * ss / sqrtq (x);\n+\n   xinv = 1.0Q / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n@@ -902,21 +928,6 @@ y0q (__float128 x)\n   p = 1.0Q + z * p;\n   q = z * xinv * q;\n   q = q - 0.125Q * xinv;\n-  /* X = x - pi/4\n-     cos(X) = cos(x) cos(pi/4) + sin(x) sin(pi/4)\n-     = 1/sqrt(2) * (cos(x) + sin(x))\n-     sin(X) = sin(x) cos(pi/4) - cos(x) sin(pi/4)\n-     = 1/sqrt(2) * (sin(x) - cos(x))\n-     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))\n-     cf. Fdlibm.  */\n-  sincosq (x, &s, &c);\n-  ss = s - c;\n-  cc = s + c;\n-  z = - cosq (x + x);\n-  if ((s * c) < 0)\n-    cc = z / ss;\n-  else\n-    ss = z / cc;\n   z = ONEOSQPI * (p * ss + q * cc) / sqrtq (x);\n   return z;\n }"}, {"sha": "5eb705084e2722667003bc2fbfaf49817cf41857", "filename": "libquadmath/math/j1q.c", "status": "modified", "additions": 66, "deletions": 37, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fj1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fj1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj1q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -95,6 +95,7 @@\n     License along with this library; if not, write to the Free Software\n     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n \n+#include <errno.h>\n #include \"quadmath-imp.h\"\n \n /* 1 / sqrt(pi) */\n@@ -687,13 +688,21 @@ j1q (__float128 x)\n   if (! finiteq (x))\n     {\n       if (x != x)\n-\treturn x;\n+\treturn x + x;\n       else\n \treturn 0.0Q;\n     }\n   if (x == 0.0Q)\n     return x;\n   xx = fabsq (x);\n+  if (xx <= 0x1p-58Q)\n+    {\n+      __float128 ret = x * 0.5Q;\n+      math_check_force_underflow (ret);\n+      if (ret == 0)\n+\terrno = ERANGE;\n+      return ret;\n+    }\n   if (xx <= 2.0Q)\n     {\n       /* 0 <= x <= 2 */\n@@ -705,6 +714,32 @@ j1q (__float128 x)\n       return p;\n     }\n \n+  /* X = x - 3 pi/4\n+     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n+     = 1/sqrt(2) * (-cos(x) + sin(x))\n+     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n+     = -1/sqrt(2) * (sin(x) + cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = -s - c;\n+  cc = s - c;\n+  if (xx <= FLT128_MAX / 2.0Q)\n+    {\n+      z = cosq (xx + xx);\n+      if ((s * c) > 0)\n+\tcc = z / ss;\n+      else\n+\tss = z / cc;\n+    }\n+\n+  if (xx > 0x1p256Q)\n+    {\n+      z = ONEOSQPI * cc / sqrtq (xx);\n+      if (x < 0)\n+\tz = -z;\n+      return z;\n+    }\n+\n   xinv = 1.0Q / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n@@ -766,20 +801,6 @@ j1q (__float128 x)\n   p = 1.0Q + z * p;\n   q = z * q;\n   q = q * xinv + 0.375Q * xinv;\n-  /* X = x - 3 pi/4\n-     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n-     = 1/sqrt(2) * (-cos(x) + sin(x))\n-     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n-     = -1/sqrt(2) * (sin(x) + cos(x))\n-     cf. Fdlibm.  */\n-  sincosq (xx, &s, &c);\n-  ss = -s - c;\n-  cc = s - c;\n-  z = cosq (xx + xx);\n-  if ((s * c) > 0)\n-    cc = z / ss;\n-  else\n-    ss = z / cc;\n   z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n   if (x < 0)\n     z = -z;\n@@ -823,31 +844,53 @@ y1q (__float128 x)\n   __float128 xx, xinv, z, p, q, c, s, cc, ss;\n \n   if (! finiteq (x))\n-    {\n-      if (x != x)\n-\treturn x;\n-      else\n-\treturn 0.0Q;\n-    }\n+    return 1 / (x + x * x);\n   if (x <= 0.0Q)\n     {\n       if (x < 0.0Q)\n \treturn (zero / (zero * x));\n-      return -HUGE_VALQ + x;\n+      return -1 / zero; /* -inf and divide by zero exception.  */\n     }\n   xx = fabsq (x);\n   if (xx <= 0x1p-114)\n-    return -TWOOPI / x;\n+    {\n+      z = -TWOOPI / x;\n+      if (isinfq (z))\n+\terrno = ERANGE;\n+      return z;\n+    }\n   if (xx <= 2.0Q)\n    {\n       /* 0 <= x <= 2 */\n+      /* FIXME:  SET_RESTORE_ROUNDL (FE_TONEAREST);  */\n       z = xx * xx;\n       p = xx * neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);\n       p = -TWOOPI / xx + p;\n       p = TWOOPI * logq (x) * j1q (x) + p;\n       return p;\n     }\n \n+  /* X = x - 3 pi/4\n+     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n+     = 1/sqrt(2) * (-cos(x) + sin(x))\n+     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n+     = -1/sqrt(2) * (sin(x) + cos(x))\n+     cf. Fdlibm.  */\n+  sincosq (xx, &s, &c);\n+  ss = -s - c;\n+  cc = s - c;\n+  if (xx <= FLT128_MAX / 2.0Q)\n+    {\n+      z = cosq (xx + xx);\n+      if ((s * c) > 0)\n+\tcc = z / ss;\n+      else\n+\tss = z / cc;\n+    }\n+\n+  if (xx > 0x1p256Q)\n+    return ONEOSQPI * ss / sqrtq (xx);\n+\n   xinv = 1.0Q / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n@@ -909,20 +952,6 @@ y1q (__float128 x)\n   p = 1.0Q + z * p;\n   q = z * q;\n   q = q * xinv + 0.375Q * xinv;\n-  /* X = x - 3 pi/4\n-     cos(X) = cos(x) cos(3 pi/4) + sin(x) sin(3 pi/4)\n-     = 1/sqrt(2) * (-cos(x) + sin(x))\n-     sin(X) = sin(x) cos(3 pi/4) - cos(x) sin(3 pi/4)\n-     = -1/sqrt(2) * (sin(x) + cos(x))\n-     cf. Fdlibm.  */\n-  sincosq (xx, &s, &c);\n-  ss = -s - c;\n-  cc = s - c;\n-  z = cosq (xx + xx);\n-  if ((s * c) > 0)\n-    cc = z / ss;\n-  else\n-    ss = z / cc;\n   z = ONEOSQPI * (p * ss + q * cc) / sqrtq (xx);\n   return z;\n }"}, {"sha": "a6a0ae64bd345f50b3cf350ee886c2bb388d99d1", "filename": "libquadmath/math/llrintq.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fllrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fllrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllrintq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,9 +1,9 @@\n /* Round argument to nearest integral value according to current rounding\n    direction.\n-   Copyright (C) 1997, 1999, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -33,7 +33,7 @@ llrintq (__float128 x)\n {\n   int32_t j0;\n   uint64_t i0,i1;\n-  volatile __float128 w;\n+  __float128 w;\n   __float128 t;\n   long long int result;\n   int sx;\n@@ -46,8 +46,23 @@ llrintq (__float128 x)\n \n   if (j0 < (int32_t) (8 * sizeof (long long int)) - 1)\n     {\n-      w = two112[sx] + x;\n-      t = w - two112[sx];\n+#if defined FE_INVALID || defined FE_INEXACT\n+      /* X < LLONG_MAX + 1 implied by J0 < 63.  */\n+      if (x > (__float128) LLONG_MAX)\n+\t{\n+\t  /* In the event of overflow we must raise the \"invalid\"\n+\t     exception, but not \"inexact\".  */\n+\t  t = nearbyintq (x);\n+#ifdef USE_FENV_H\n+\t  feraiseexcept (t == LLONG_MAX ? FE_INEXACT : FE_INVALID);\n+#endif\n+\t}\n+      else\n+#endif\n+\t{\n+\t  w = two112[sx] + x;\n+\t  t = w - two112[sx];\n+\t}\n       GET_FLT128_WORDS64 (i0, i1, t);\n       j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n       i0 &= 0x0000ffffffffffffLL;\n@@ -62,6 +77,24 @@ llrintq (__float128 x)\n     }\n   else\n     {\n+      /* The number is too large.  Unless it rounds to LLONG_MIN,\n+\t FE_INVALID must be raised and the return value is\n+\t unspecified.  */\n+#if defined FE_INVALID || defined FE_INEXACT\n+      if (x < (__float128) LLONG_MIN\n+\t  && x > (__float128) LLONG_MIN - 1.0Q)\n+\t{\n+\t  /* If truncation produces LLONG_MIN, the cast will not raise\n+\t     the exception, but may raise \"inexact\".  */\n+\t  t = nearbyintq (x);\n+#ifdef USE_FENV_H\n+\t  feraiseexcept (t == LLONG_MIN ? FE_INEXACT : FE_INVALID);\n+#endif\n+\t  return LLONG_MIN;\n+\t}\n+\n+#endif\n+\n       /* The number is too large.  It is left implementation defined\n \t what happens.  */\n       return (long long int) x;"}, {"sha": "098fb9ef72bce7b250178111aab4ee409524a821", "filename": "libquadmath/math/llroundq.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fllroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fllroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllroundq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,8 +1,8 @@\n /* Round __float128 value to long long int.\n-   Copyright (C) 1997, 1999, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -59,13 +59,32 @@ llroundq (__float128 x)\n \t  if (j0 == 48)\n \t    result = (long long int) i0;\n \t  else\n-\t    result = ((long long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n+\t    {\n+\t      result = ((long long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n+#if defined FE_INVALID && defined USE_FENV_H\n+\t      if (sign == 1 && result == LLONG_MIN)\n+\t\t/* Rounding brought the value out of range.  */\n+\t\tferaiseexcept (FE_INVALID);\n+#endif\n+\t    }\n \t}\n     }\n   else\n     {\n-      /* The number is too large.  It is left implementation defined\n-\t what happens.  */\n+      /* The number is too large.  Unless it rounds to LLONG_MIN,\n+\t FE_INVALID must be raised and the return value is\n+\t unspecified.  */\n+#ifdef FE_INVALID\n+      if (x <= (__float128) LLONG_MIN - 0.5Q)\n+\t{\n+\t  /* If truncation produces LLONG_MIN, the cast will not raise\n+\t     the exception, but may raise \"inexact\".  */\n+#ifdef USE_FENV_H\n+\t  feraiseexcept (FE_INVALID);\n+#endif\n+\t  return LLONG_MIN;\n+\t}\n+#endif\n       return (long long int) x;\n     }\n "}, {"sha": "3afb1121267765bf6716ca206170e403775cdcc8", "filename": "libquadmath/math/log10q.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog10q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog10q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog10q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -188,12 +188,15 @@ log10q (__float128 x)\n /* Test for domain */\n   GET_FLT128_WORDS64 (hx, lx, x);\n   if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n-    return (-1.0Q / (x - x));\n+    return (-1.0Q / fabsq (x));\t\t/* log10l(+-0)=-inf  */\n   if (hx < 0)\n     return (x - x) / (x - x);\n   if (hx >= 0x7fff000000000000LL)\n     return (x + x);\n \n+  if (x == 1.0Q)\n+    return 0.0Q;\n+\n /* separate mantissa from exponent */\n \n /* Note, frexp is used so that denormal numbers"}, {"sha": "c59ceef5c9eed82c48f864bb332474c74aa5f202", "filename": "libquadmath/math/log1pq.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog1pq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog1pq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog1pq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -36,7 +36,7 @@\n  *    IEEE      -1, 8       100000      1.9e-34     4.3e-35\n  */\n \n-/* Copyright 2001 by Stephen L. Moshier \n+/* Copyright 2001 by Stephen L. Moshier\n \n     This library is free software; you can redistribute it and/or\n     modify it under the terms of the GNU Lesser General Public\n@@ -128,8 +128,8 @@ log1pq (__float128 xm1)\n   /* Test for NaN or infinity input. */\n   u.value = xm1;\n   hx = u.words32.w0;\n-  if (hx >= 0x7fff0000)\n-    return xm1;\n+  if ((hx & 0x7fffffff) >= 0x7fff0000)\n+    return xm1 + fabsq (xm1);\n \n   /* log1p(+- 0) = +- 0.  */\n   if (((hx & 0x7fffffff) == 0)\n@@ -138,17 +138,21 @@ log1pq (__float128 xm1)\n \n   if ((hx & 0x7fffffff) < 0x3f8e0000)\n     {\n+      math_check_force_underflow (xm1);\n       if ((int) xm1 == 0)\n        return xm1;\n     }\n \n-  x = xm1 + 1.0Q;\n+  if (xm1 >= 0x1p113Q)\n+    x = xm1;\n+  else\n+    x = xm1 + 1.0Q;\n \n   /* log1p(-1) = -inf */\n   if (x <= 0.0Q)\n     {\n       if (x == 0.0Q)\n-\treturn (-1.0Q / (x - x));\n+\treturn (-1.0Q / zero);\t/* log1p(-1) = -inf */\n       else\n \treturn (zero / (x - x));\n     }"}, {"sha": "865f341f03ddf7e51edea630d85831304e637a1c", "filename": "libquadmath/math/log2q.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flog2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog2q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -181,12 +181,15 @@ log2q (__float128 x)\n /* Test for domain */\n   GET_FLT128_WORDS64 (hx, lx, x);\n   if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n-    return (-1.0Q / (x - x));\n+    return (-1.0Q / fabsq (x));\t\t/* log2l(+-0)=-inf  */\n   if (hx < 0)\n     return (x - x) / (x - x);\n   if (hx >= 0x7fff000000000000LL)\n     return (x + x);\n \n+  if (x == 1.0Q)\n+    return 0.0Q;\n+\n /* separate mantissa from exponent */\n \n /* Note, frexp is used so that denormal numbers"}, {"sha": "43249bb498a973ff083a5869d6c1931f124e12e0", "filename": "libquadmath/math/logq.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flogq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flogq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flogq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -212,9 +212,8 @@ logq (__float128 x)\n     }\n \n   /* Extract exponent and reduce domain to 0.703125 <= u < 1.40625  */\n-  e = (int) (m >> 16) - (int) 0x3ffe;\n-  m &= 0xffff;\n-  u.words32.w0 = m | 0x3ffe0000;\n+  u.value = frexpq (x, &e);\n+  m = u.words32.w0 & 0xffff;\n   m |= 0x10000;\n   /* Find lookup table index k from high order bits of the significand. */\n   if (m < 0x16800)\n@@ -241,6 +240,8 @@ logq (__float128 x)\n   /* On this interval the table is not used due to cancellation error.  */\n   if ((x <= 1.0078125Q) && (x >= 0.9921875Q))\n     {\n+      if (x == 1.0Q)\n+\treturn 0.0Q;\n       z = x - 1.0Q;\n       k = 64;\n       t.value  = 1.0Q;"}, {"sha": "50a300554b9fd81dcb741dcfe07aee6076f71f21", "filename": "libquadmath/math/lrintq.c", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flrintq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,9 +1,9 @@\n /* Round argument to nearest integral value according to current rounding\n    direction.\n-   Copyright (C) 1997, 1999, 2004, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -33,7 +33,7 @@ lrintq (__float128 x)\n {\n   int32_t j0;\n   uint64_t i0,i1;\n-  volatile __float128 w;\n+  __float128 w;\n   __float128 t;\n   long int result;\n   int sx;\n@@ -44,25 +44,57 @@ lrintq (__float128 x)\n   i0 &= 0x0000ffffffffffffLL;\n   i0 |= 0x0001000000000000LL;\n \n-  if (j0 < 48)\n+  if (j0 < (int32_t) (8 * sizeof (long int)) - 1)\n     {\n-      w = two112[sx] + x;\n-      t = w - two112[sx];\n-      GET_FLT128_WORDS64 (i0, i1, t);\n-      j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n-      i0 &= 0x0000ffffffffffffLL;\n-      i0 |= 0x0001000000000000LL;\n+      if (j0 < 48)\n+\t{\n+#if defined FE_INVALID || defined FE_INEXACT\n+\t  /* X < LONG_MAX + 1 implied by J0 < 31.  */\n+\t  if (sizeof (long int) == 4\n+\t      && x > (__float128) LONG_MAX)\n+\t    {\n+\t      /* In the event of overflow we must raise the \"invalid\"\n+\t\t exception, but not \"inexact\".  */\n+\t      t = nearbyintq (x);\n+#ifdef USE_FENV_H\n+\t      feraiseexcept (t == LONG_MAX ? FE_INEXACT : FE_INVALID);\n+#endif\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      w = two112[sx] + x;\n+\t      t = w - two112[sx];\n+\t    }\n+\t  GET_FLT128_WORDS64 (i0, i1, t);\n+\t  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+\t  i0 &= 0x0000ffffffffffffLL;\n+\t  i0 |= 0x0001000000000000LL;\n \n-      result = (j0 < 0 ? 0 : i0 >> (48 - j0));\n-    }\n-  else if (j0 < (int32_t) (8 * sizeof (long int)) - 1)\n-    {\n-      if (j0 >= 112)\n+\t  result = (j0 < 0 ? 0 : i0 >> (48 - j0));\n+\t}\n+      else if (j0 >= 112)\n \tresult = ((long int) i0 << (j0 - 48)) | (i1 << (j0 - 112));\n       else\n \t{\n-\t  w = two112[sx] + x;\n-\t  t = w - two112[sx];\n+#if defined FE_INVALID || defined FE_INEXACT\n+\t  /* X < LONG_MAX + 1 implied by J0 < 63.  */\n+\t  if (sizeof (long int) == 8\n+\t      && x > (__float128) LONG_MAX)\n+\t    {\n+\t      /* In the event of overflow we must raise the \"invalid\"\n+\t\t exception, but not \"inexact\".  */\n+\t      t = nearbyintq (x);\n+#ifdef USE_FENV_H\n+\t      feraiseexcept (t == LONG_MAX ? FE_INEXACT : FE_INVALID);\n+#endif\n+\t    }\n+\t  else\n+#endif\n+\t    {\n+\t      w = two112[sx] + x;\n+\t      t = w - two112[sx];\n+\t    }\n \t  GET_FLT128_WORDS64 (i0, i1, t);\n \t  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n \t  i0 &= 0x0000ffffffffffffLL;\n@@ -76,8 +108,22 @@ lrintq (__float128 x)\n     }\n   else\n     {\n-      /* The number is too large.  It is left implementation defined\n-\t what happens.  */\n+      /* The number is too large.  Unless it rounds to LONG_MIN,\n+\t FE_INVALID must be raised and the return value is\n+\t unspecified.  */\n+#if defined FE_INVALID || defined FE_INEXACT\n+      if (x < (__float128) LONG_MIN\n+\t  && x > (__float128) LONG_MIN - 1.0Q)\n+\t{\n+\t  /* If truncation produces LONG_MIN, the cast will not raise\n+\t     the exception, but may raise \"inexact\".  */\n+\t  t = nearbyintq (x);\n+#ifdef USE_FENV_H\n+\t  feraiseexcept (t == LONG_MIN ? FE_INEXACT : FE_INVALID);\n+#endif\n+\t  return LONG_MIN;\n+\t}\n+#endif\n       return (long int) x;\n     }\n "}, {"sha": "55285034cec61c7c7c7771a8beb31c5c49d5a860", "filename": "libquadmath/math/lroundq.c", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Flroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flroundq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,8 +1,8 @@\n /* Round __float128 value to long int.\n-   Copyright (C) 1997, 1999, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -36,19 +36,26 @@ lroundq (__float128 x)\n   i0 &= 0x0000ffffffffffffLL;\n   i0 |= 0x0001000000000000LL;\n \n-  if (j0 < 48)\n+  if (j0 < (int32_t) (8 * sizeof (long int)) - 1)\n     {\n-      if (j0 < 0)\n-\treturn j0 < -1 ? 0 : sign;\n-      else\n+      if (j0 < 48)\n \t{\n-\t  i0 += 0x0000800000000000LL >> j0;\n-\t  result = i0 >> (48 - j0);\n+\t  if (j0 < 0)\n+\t    return j0 < -1 ? 0 : sign;\n+\t  else\n+\t    {\n+\t      i0 += 0x0000800000000000LL >> j0;\n+\t      result = i0 >> (48 - j0);\n+#if defined FE_INVALID && defined USE_FENV_H\n+\t      if (sizeof (long int) == 4\n+\t\t  && sign == 1\n+\t\t  && result == LONG_MIN)\n+\t\t/* Rounding brought the value out of range.  */\n+\t\tferaiseexcept (FE_INVALID);\n+#endif\n+\t    }\n \t}\n-    }\n-  else if (j0 < (int32_t) (8 * sizeof (long int)) - 1)\n-    {\n-      if (j0 >= 112)\n+      else if (j0 >= 112)\n \tresult = ((long int) i0 << (j0 - 48)) | (i1 << (j0 - 112));\n       else\n \t{\n@@ -59,13 +66,34 @@ lroundq (__float128 x)\n \t  if (j0 == 48)\n \t    result = (long int) i0;\n \t  else\n-\t    result = ((long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n+\t    {\n+\t      result = ((long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n+#if defined FE_INVALID && defined USE_FENV_H\n+\t      if (sizeof (long int) == 8\n+\t\t  && sign == 1\n+\t\t  && result == LONG_MIN)\n+\t\t/* Rounding brought the value out of range.  */\n+\t\tferaiseexcept (FE_INVALID);\n+#endif\n+\t    }\n \t}\n     }\n   else\n     {\n-      /* The number is too large.  It is left implementation defined\n-\t what happens.  */\n+      /* The number is too large.  Unless it rounds to LONG_MIN,\n+\t FE_INVALID must be raised and the return value is\n+\t unspecified.  */\n+#ifdef FE_INVALID\n+      if (x <= (__float128) LONG_MIN - 0.5Q)\n+\t{\n+\t  /* If truncation produces LONG_MIN, the cast will not raise\n+\t     the exception, but may raise \"inexact\".  */\n+#ifdef USE_FENV_H\n+\t  feraiseexcept (FE_INVALID);\n+#endif\n+\t  return LONG_MIN;\n+\t}\n+#endif\n       return (long int) x;\n     }\n "}, {"sha": "b250927ea2a9bdb86d92e930aaa04aa1c3ad414a", "filename": "libquadmath/math/nearbyintq.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fnearbyintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fnearbyintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnearbyintq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -44,7 +44,7 @@ nearbyintq(__float128 x)\n \tfenv_t env;\n #endif\n \tint64_t i0,j0,sx;\n-\tuint64_t i1;\n+\tuint64_t i1 __attribute__ ((unused));\n \t__float128 w,t;\n \tGET_FLT128_WORDS64(i0,i1,x);\n \tsx = (((uint64_t)i0)>>63);\n@@ -56,6 +56,7 @@ nearbyintq(__float128 x)\n #endif\n \t        w = TWO112[sx]+x;\n \t        t = w-TWO112[sx];\n+\t\tmath_force_eval (t);\n #ifdef USE_FENV_H\n \t        fesetenv (&env);\n #endif\n@@ -72,6 +73,7 @@ nearbyintq(__float128 x)\n #endif\n \tw = TWO112[sx]+x;\n \tt = w-TWO112[sx];\n+\tmath_force_eval (t);\n #ifdef USE_FENV_H\t\n \tfesetenv (&env);\n #endif"}, {"sha": "a030e9c64446dc37434a67aae6357c87607bb4ad", "filename": "libquadmath/math/nextafterq.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fnextafterq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fnextafterq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnextafterq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -13,6 +13,7 @@\n  * ====================================================\n  */\n \n+#include <errno.h>\n #include \"quadmath-imp.h\"\n \n __float128\n@@ -54,9 +55,15 @@ nextafterq (__float128 x, __float128 y)\n \t    }\n \t}\n \thy = hx&0x7fff000000000000LL;\n-\tif(hy==0x7fff000000000000LL) return x+x;/* overflow  */\n+\tif(hy==0x7fff000000000000LL) {\n+\t    __float128 u = x + x;\t\t/* overflow  */\n+\t    math_force_eval (u);\n+\t    errno = ERANGE;\n+\t}\n \tif(hy==0) {\n-\t    /* here we should raise an underflow flag */\n+\t    __float128 u = x*x;\t\t\t/* underflow */\n+\t    math_force_eval (u);\t\t/* raise underflow flag */\n+\t    errno = ERANGE;\n \t}\n \tSET_FLT128_WORDS64(x,hx,lx);\n \treturn x;"}, {"sha": "acad2057516a0a6450b58a57c32fe67a27e2c297", "filename": "libquadmath/math/powq.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fpowq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fpowq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fpowq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -147,7 +147,7 @@ __float128\n powq (__float128 x, __float128 y)\n {\n   __float128 z, ax, z_h, z_l, p_h, p_l;\n-  __float128 y1, t1, t2, r, s, t, u, v, w;\n+  __float128 y1, t1, t2, r, s, sgn, t, u, v, w;\n   __float128 s2, s_h, s_l, t_h, t_l, ay;\n   int32_t i, j, k, yisint, n;\n   uint32_t ix, iy;\n@@ -261,6 +261,11 @@ powq (__float128 x, __float128 y)\n   if (((((uint32_t) hx >> 31) - 1) | yisint) == 0)\n     return (x - x) / (x - x);\n \n+  /* sgn (sign of result -ve**odd) = -1 else = 1 */\n+  sgn = one;\n+  if (((((u_int32_t) hx >> 31) - 1) | (yisint - 1)) == 0)\n+    sgn = -one;\t\t\t\t/* (-ve)**(odd int) */\n+\n   /* |y| is huge.\n      2^-16495 = 1/2 of smallest representable value.\n      If (1 - 1/131072)^y underflows, y > 1.4986e9 */\n@@ -276,9 +281,9 @@ powq (__float128 x, __float128 y)\n \t}\n       /* over/underflow if x is not close to one */\n       if (ix < 0x3ffeffff)\n-\treturn (hy < 0) ? huge * huge : tiny * tiny;\n+\treturn (hy < 0) ? sgn * huge * huge : sgn * tiny * tiny;\n       if (ix > 0x3fff0000)\n-\treturn (hy > 0) ? huge * huge : tiny * tiny;\n+\treturn (hy > 0) ? sgn * huge * huge : sgn * tiny * tiny;\n     }\n \n   ay = y > 0 ? y : -y;\n@@ -365,11 +370,6 @@ powq (__float128 x, __float128 y)\n   t1 = o.value;\n   t2 = z_l - (((t1 - t) - dp_h[k]) - z_h);\n \n-  /* s (sign of result -ve**odd) = -1 else = 1 */\n-  s = one;\n-  if (((((uint32_t) hx >> 31) - 1) | (yisint - 1)) == 0)\n-    s = -one;\t\t\t/* (-ve)**(odd int) */\n-\n   /* split up y into y1+y2 and compute (y1+y2)*(t1+t2) */\n   y1 = y;\n   o.value = y1;\n@@ -385,23 +385,23 @@ powq (__float128 x, __float128 y)\n     {\n       /* if z > 16384 */\n       if (((j - 0x400d0000) | o.words32.w1 | o.words32.w2 | o.words32.w3) != 0)\n-\treturn s * huge * huge;\t/* overflow */\n+\treturn sgn * huge * huge;\t/* overflow */\n       else\n \t{\n \t  if (p_l + ovt > z - p_h)\n-\t    return s * huge * huge;\t/* overflow */\n+\t    return sgn * huge * huge;\t/* overflow */\n \t}\n     }\n   else if ((j & 0x7fffffff) >= 0x400d01b9)\t/* z <= -16495 */\n     {\n       /* z < -16495 */\n       if (((j - 0xc00d01bc) | o.words32.w1 | o.words32.w2 | o.words32.w3)\n \t  != 0)\n-\treturn s * tiny * tiny;\t/* underflow */\n+\treturn sgn * tiny * tiny;\t/* underflow */\n       else\n \t{\n \t  if (p_l <= z - p_h)\n-\t    return s * tiny * tiny;\t/* underflow */\n+\t    return sgn * tiny * tiny;\t/* underflow */\n \t}\n     }\n   /* compute 2**(p_h+p_l) */\n@@ -434,11 +434,15 @@ powq (__float128 x, __float128 y)\n   j = o.words32.w0;\n   j += (n << 16);\n   if ((j >> 16) <= 0)\n-    z = scalbnq (z, n);\t/* subnormal output */\n+    {\n+      z = scalbnq (z, n);\t/* subnormal output */\n+      __float128 force_underflow = z * z;\n+      math_force_eval (force_underflow);\n+    }\n   else\n     {\n       o.words32.w0 = j;\n       z = o.value;\n     }\n-  return s * z;\n+  return sgn * z;\n }"}, {"sha": "3308b2184731a2d8a53072973352f660a69f6e2d", "filename": "libquadmath/math/rem_pio2q.c", "status": "modified", "additions": 165, "deletions": 165, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Frem_pio2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Frem_pio2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frem_pio2q.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -312,7 +312,7 @@ __quadmath_kernel_rem_pio2 (double *x, double *y, int e0, int nx, int prec, cons\n \n \n /* Quad-precision floating point argument reduction.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -332,176 +332,176 @@ __quadmath_kernel_rem_pio2 (double *x, double *y, int e0, int nx, int prec, cons\n    02111-1307 USA.  */\n \n /*\n- * Table of constants for 2/pi, 5628 hexadecimal digits of 2/pi \n+ * Table of constants for 2/pi, 5628 hexadecimal digits of 2/pi\n  */\n static const int32_t two_over_pi[] = {\n-0xa2f983, 0x6e4e44, 0x1529fc, 0x2757d1, 0xf534dd, 0xc0db62, \n-0x95993c, 0x439041, 0xfe5163, 0xabdebb, 0xc561b7, 0x246e3a, \n-0x424dd2, 0xe00649, 0x2eea09, 0xd1921c, 0xfe1deb, 0x1cb129, \n-0xa73ee8, 0x8235f5, 0x2ebb44, 0x84e99c, 0x7026b4, 0x5f7e41, \n-0x3991d6, 0x398353, 0x39f49c, 0x845f8b, 0xbdf928, 0x3b1ff8, \n-0x97ffde, 0x05980f, 0xef2f11, 0x8b5a0a, 0x6d1f6d, 0x367ecf, \n-0x27cb09, 0xb74f46, 0x3f669e, 0x5fea2d, 0x7527ba, 0xc7ebe5, \n-0xf17b3d, 0x0739f7, 0x8a5292, 0xea6bfb, 0x5fb11f, 0x8d5d08, \n-0x560330, 0x46fc7b, 0x6babf0, 0xcfbc20, 0x9af436, 0x1da9e3, \n-0x91615e, 0xe61b08, 0x659985, 0x5f14a0, 0x68408d, 0xffd880, \n-0x4d7327, 0x310606, 0x1556ca, 0x73a8c9, 0x60e27b, 0xc08c6b, \n-0x47c419, 0xc367cd, 0xdce809, 0x2a8359, 0xc4768b, 0x961ca6, \n-0xddaf44, 0xd15719, 0x053ea5, 0xff0705, 0x3f7e33, 0xe832c2, \n-0xde4f98, 0x327dbb, 0xc33d26, 0xef6b1e, 0x5ef89f, 0x3a1f35, \n-0xcaf27f, 0x1d87f1, 0x21907c, 0x7c246a, 0xfa6ed5, 0x772d30, \n-0x433b15, 0xc614b5, 0x9d19c3, 0xc2c4ad, 0x414d2c, 0x5d000c, \n-0x467d86, 0x2d71e3, 0x9ac69b, 0x006233, 0x7cd2b4, 0x97a7b4, \n-0xd55537, 0xf63ed7, 0x1810a3, 0xfc764d, 0x2a9d64, 0xabd770, \n-0xf87c63, 0x57b07a, 0xe71517, 0x5649c0, 0xd9d63b, 0x3884a7, \n-0xcb2324, 0x778ad6, 0x23545a, 0xb91f00, 0x1b0af1, 0xdfce19, \n-0xff319f, 0x6a1e66, 0x615799, 0x47fbac, 0xd87f7e, 0xb76522, \n-0x89e832, 0x60bfe6, 0xcdc4ef, 0x09366c, 0xd43f5d, 0xd7de16, \n-0xde3b58, 0x929bde, 0x2822d2, 0xe88628, 0x4d58e2, 0x32cac6, \n-0x16e308, 0xcb7de0, 0x50c017, 0xa71df3, 0x5be018, 0x34132e, \n-0x621283, 0x014883, 0x5b8ef5, 0x7fb0ad, 0xf2e91e, 0x434a48, \n-0xd36710, 0xd8ddaa, 0x425fae, 0xce616a, 0xa4280a, 0xb499d3, \n-0xf2a606, 0x7f775c, 0x83c2a3, 0x883c61, 0x78738a, 0x5a8caf, \n-0xbdd76f, 0x63a62d, 0xcbbff4, 0xef818d, 0x67c126, 0x45ca55, \n-0x36d9ca, 0xd2a828, 0x8d61c2, 0x77c912, 0x142604, 0x9b4612, \n-0xc459c4, 0x44c5c8, 0x91b24d, 0xf31700, 0xad43d4, 0xe54929, \n-0x10d5fd, 0xfcbe00, 0xcc941e, 0xeece70, 0xf53e13, 0x80f1ec, \n-0xc3e7b3, 0x28f8c7, 0x940593, 0x3e71c1, 0xb3092e, 0xf3450b, \n-0x9c1288, 0x7b20ab, 0x9fb52e, 0xc29247, 0x2f327b, 0x6d550c, \n-0x90a772, 0x1fe76b, 0x96cb31, 0x4a1679, 0xe27941, 0x89dff4, \n-0x9794e8, 0x84e6e2, 0x973199, 0x6bed88, 0x365f5f, 0x0efdbb, \n-0xb49a48, 0x6ca467, 0x427271, 0x325d8d, 0xb8159f, 0x09e5bc, \n-0x25318d, 0x3974f7, 0x1c0530, 0x010c0d, 0x68084b, 0x58ee2c, \n-0x90aa47, 0x02e774, 0x24d6bd, 0xa67df7, 0x72486e, 0xef169f, \n-0xa6948e, 0xf691b4, 0x5153d1, 0xf20acf, 0x339820, 0x7e4bf5, \n-0x6863b2, 0x5f3edd, 0x035d40, 0x7f8985, 0x295255, 0xc06437, \n-0x10d86d, 0x324832, 0x754c5b, 0xd4714e, 0x6e5445, 0xc1090b, \n-0x69f52a, 0xd56614, 0x9d0727, 0x50045d, 0xdb3bb4, 0xc576ea, \n-0x17f987, 0x7d6b49, 0xba271d, 0x296996, 0xacccc6, 0x5414ad, \n-0x6ae290, 0x89d988, 0x50722c, 0xbea404, 0x940777, 0x7030f3, \n-0x27fc00, 0xa871ea, 0x49c266, 0x3de064, 0x83dd97, 0x973fa3, \n-0xfd9443, 0x8c860d, 0xde4131, 0x9d3992, 0x8c70dd, 0xe7b717, \n-0x3bdf08, 0x2b3715, 0xa0805c, 0x93805a, 0x921110, 0xd8e80f, \n-0xaf806c, 0x4bffdb, 0x0f9038, 0x761859, 0x15a562, 0xbbcb61, \n-0xb989c7, 0xbd4010, 0x04f2d2, 0x277549, 0xf6b6eb, 0xbb22db, \n-0xaa140a, 0x2f2689, 0x768364, 0x333b09, 0x1a940e, 0xaa3a51, \n-0xc2a31d, 0xaeedaf, 0x12265c, 0x4dc26d, 0x9c7a2d, 0x9756c0, \n-0x833f03, 0xf6f009, 0x8c402b, 0x99316d, 0x07b439, 0x15200c, \n-0x5bc3d8, 0xc492f5, 0x4badc6, 0xa5ca4e, 0xcd37a7, 0x36a9e6, \n-0x9492ab, 0x6842dd, 0xde6319, 0xef8c76, 0x528b68, 0x37dbfc, \n-0xaba1ae, 0x3115df, 0xa1ae00, 0xdafb0c, 0x664d64, 0xb705ed, \n-0x306529, 0xbf5657, 0x3aff47, 0xb9f96a, 0xf3be75, 0xdf9328, \n-0x3080ab, 0xf68c66, 0x15cb04, 0x0622fa, 0x1de4d9, 0xa4b33d, \n-0x8f1b57, 0x09cd36, 0xe9424e, 0xa4be13, 0xb52333, 0x1aaaf0, \n-0xa8654f, 0xa5c1d2, 0x0f3f0b, 0xcd785b, 0x76f923, 0x048b7b, \n-0x721789, 0x53a6c6, 0xe26e6f, 0x00ebef, 0x584a9b, 0xb7dac4, \n-0xba66aa, 0xcfcf76, 0x1d02d1, 0x2df1b1, 0xc1998c, 0x77adc3, \n-0xda4886, 0xa05df7, 0xf480c6, 0x2ff0ac, 0x9aecdd, 0xbc5c3f, \n-0x6dded0, 0x1fc790, 0xb6db2a, 0x3a25a3, 0x9aaf00, 0x9353ad, \n-0x0457b6, 0xb42d29, 0x7e804b, 0xa707da, 0x0eaa76, 0xa1597b, \n-0x2a1216, 0x2db7dc, 0xfde5fa, 0xfedb89, 0xfdbe89, 0x6c76e4, \n-0xfca906, 0x70803e, 0x156e85, 0xff87fd, 0x073e28, 0x336761, \n-0x86182a, 0xeabd4d, 0xafe7b3, 0x6e6d8f, 0x396795, 0x5bbf31, \n-0x48d784, 0x16df30, 0x432dc7, 0x356125, 0xce70c9, 0xb8cb30, \n-0xfd6cbf, 0xa200a4, 0xe46c05, 0xa0dd5a, 0x476f21, 0xd21262, \n-0x845cb9, 0x496170, 0xe0566b, 0x015299, 0x375550, 0xb7d51e, \n-0xc4f133, 0x5f6e13, 0xe4305d, 0xa92e85, 0xc3b21d, 0x3632a1, \n-0xa4b708, 0xd4b1ea, 0x21f716, 0xe4698f, 0x77ff27, 0x80030c, \n-0x2d408d, 0xa0cd4f, 0x99a520, 0xd3a2b3, 0x0a5d2f, 0x42f9b4, \n-0xcbda11, 0xd0be7d, 0xc1db9b, 0xbd17ab, 0x81a2ca, 0x5c6a08, \n-0x17552e, 0x550027, 0xf0147f, 0x8607e1, 0x640b14, 0x8d4196, \n-0xdebe87, 0x2afdda, 0xb6256b, 0x34897b, 0xfef305, 0x9ebfb9, \n-0x4f6a68, 0xa82a4a, 0x5ac44f, 0xbcf82d, 0x985ad7, 0x95c7f4, \n-0x8d4d0d, 0xa63a20, 0x5f57a4, 0xb13f14, 0x953880, 0x0120cc, \n-0x86dd71, 0xb6dec9, 0xf560bf, 0x11654d, 0x6b0701, 0xacb08c, \n-0xd0c0b2, 0x485551, 0x0efb1e, 0xc37295, 0x3b06a3, 0x3540c0, \n-0x7bdc06, 0xcc45e0, 0xfa294e, 0xc8cad6, 0x41f3e8, 0xde647c, \n-0xd8649b, 0x31bed9, 0xc397a4, 0xd45877, 0xc5e369, 0x13daf0, \n-0x3c3aba, 0x461846, 0x5f7555, 0xf5bdd2, 0xc6926e, 0x5d2eac, \n-0xed440e, 0x423e1c, 0x87c461, 0xe9fd29, 0xf3d6e7, 0xca7c22, \n-0x35916f, 0xc5e008, 0x8dd7ff, 0xe26a6e, 0xc6fdb0, 0xc10893, \n-0x745d7c, 0xb2ad6b, 0x9d6ecd, 0x7b723e, 0x6a11c6, 0xa9cff7, \n-0xdf7329, 0xbac9b5, 0x5100b7, 0x0db2e2, 0x24ba74, 0x607de5, \n-0x8ad874, 0x2c150d, 0x0c1881, 0x94667e, 0x162901, 0x767a9f, \n-0xbefdfd, 0xef4556, 0x367ed9, 0x13d9ec, 0xb9ba8b, 0xfc97c4, \n-0x27a831, 0xc36ef1, 0x36c594, 0x56a8d8, 0xb5a8b4, 0x0ecccf, \n-0x2d8912, 0x34576f, 0x89562c, 0xe3ce99, 0xb920d6, 0xaa5e6b, \n-0x9c2a3e, 0xcc5f11, 0x4a0bfd, 0xfbf4e1, 0x6d3b8e, 0x2c86e2, \n-0x84d4e9, 0xa9b4fc, 0xd1eeef, 0xc9352e, 0x61392f, 0x442138, \n-0xc8d91b, 0x0afc81, 0x6a4afb, 0xd81c2f, 0x84b453, 0x8c994e, \n-0xcc2254, 0xdc552a, 0xd6c6c0, 0x96190b, 0xb8701a, 0x649569, \n-0x605a26, 0xee523f, 0x0f117f, 0x11b5f4, 0xf5cbfc, 0x2dbc34, \n-0xeebc34, 0xcc5de8, 0x605edd, 0x9b8e67, 0xef3392, 0xb817c9, \n-0x9b5861, 0xbc57e1, 0xc68351, 0x103ed8, 0x4871dd, 0xdd1c2d, \n-0xa118af, 0x462c21, 0xd7f359, 0x987ad9, 0xc0549e, 0xfa864f, \n-0xfc0656, 0xae79e5, 0x362289, 0x22ad38, 0xdc9367, 0xaae855, \n-0x382682, 0x9be7ca, 0xa40d51, 0xb13399, 0x0ed7a9, 0x480569, \n-0xf0b265, 0xa7887f, 0x974c88, 0x36d1f9, 0xb39221, 0x4a827b, \n-0x21cf98, 0xdc9f40, 0x5547dc, 0x3a74e1, 0x42eb67, 0xdf9dfe, \n-0x5fd45e, 0xa4677b, 0x7aacba, 0xa2f655, 0x23882b, 0x55ba41, \n-0x086e59, 0x862a21, 0x834739, 0xe6e389, 0xd49ee5, 0x40fb49, \n-0xe956ff, 0xca0f1c, 0x8a59c5, 0x2bfa94, 0xc5c1d3, 0xcfc50f, \n-0xae5adb, 0x86c547, 0x624385, 0x3b8621, 0x94792c, 0x876110, \n-0x7b4c2a, 0x1a2c80, 0x12bf43, 0x902688, 0x893c78, 0xe4c4a8, \n-0x7bdbe5, 0xc23ac4, 0xeaf426, 0x8a67f7, 0xbf920d, 0x2ba365, \n-0xb1933d, 0x0b7cbd, 0xdc51a4, 0x63dd27, 0xdde169, 0x19949a, \n-0x9529a8, 0x28ce68, 0xb4ed09, 0x209f44, 0xca984e, 0x638270, \n-0x237c7e, 0x32b90f, 0x8ef5a7, 0xe75614, 0x08f121, 0x2a9db5, \n-0x4d7e6f, 0x5119a5, 0xabf9b5, 0xd6df82, 0x61dd96, 0x023616, \n-0x9f3ac4, 0xa1a283, 0x6ded72, 0x7a8d39, 0xa9b882, 0x5c326b, \n-0x5b2746, 0xed3400, 0x7700d2, 0x55f4fc, 0x4d5901, 0x8071e0, \n-0xe13f89, 0xb295f3, 0x64a8f1, 0xaea74b, 0x38fc4c, 0xeab2bb, \n-0x47270b, 0xabc3a7, 0x34ba60, 0x52dd34, 0xf8563a, 0xeb7e8a, \n-0x31bb36, 0x5895b7, 0x47f7a9, 0x94c3aa, 0xd39225, 0x1e7f3e, \n-0xd8974e, 0xbba94f, 0xd8ae01, 0xe661b4, 0x393d8e, 0xa523aa, \n-0x33068e, 0x1633b5, 0x3bb188, 0x1d3a9d, 0x4013d0, 0xcc1be5, \n-0xf862e7, 0x3bf28f, 0x39b5bf, 0x0bc235, 0x22747e, 0xa247c0, \n-0xd52d1f, 0x19add3, 0x9094df, 0x9311d0, 0xb42b25, 0x496db2, \n-0xe264b2, 0x5ef135, 0x3bc6a4, 0x1a4ad0, 0xaac92e, 0x64e886, \n-0x573091, 0x982cfb, 0x311b1a, 0x08728b, 0xbdcee1, 0x60e142, \n-0xeb641d, 0xd0bba3, 0xe559d4, 0x597b8c, 0x2a4483, 0xf332ba, \n-0xf84867, 0x2c8d1b, 0x2fa9b0, 0x50f3dd, 0xf9f573, 0xdb61b4, \n-0xfe233e, 0x6c41a6, 0xeea318, 0x775a26, 0xbc5e5c, 0xcea708, \n-0x94dc57, 0xe20196, 0xf1e839, 0xbe4851, 0x5d2d2f, 0x4e9555, \n-0xd96ec2, 0xe7d755, 0x6304e0, 0xc02e0e, 0xfc40a0, 0xbbf9b3, \n-0x7125a7, 0x222dfb, 0xf619d8, 0x838c1c, 0x6619e6, 0xb20d55, \n-0xbb5137, 0x79e809, 0xaf9149, 0x0d73de, 0x0b0da5, 0xce7f58, \n-0xac1934, 0x724667, 0x7a1a13, 0x9e26bc, 0x4555e7, 0x585cb5, \n-0x711d14, 0x486991, 0x480d60, 0x56adab, 0xd62f64, 0x96ee0c, \n-0x212ff3, 0x5d6d88, 0xa67684, 0x95651e, 0xab9e0a, 0x4ddefe, \n-0x571010, 0x836a39, 0xf8ea31, 0x9e381d, 0xeac8b1, 0xcac96b, \n-0x37f21e, 0xd505e9, 0x984743, 0x9fc56c, 0x0331b7, 0x3b8bf8, \n-0x86e56a, 0x8dc343, 0x6230e7, 0x93cfd5, 0x6a8f2d, 0x733005, \n-0x1af021, 0xa09fcb, 0x7415a1, 0xd56b23, 0x6ff725, 0x2f4bc7, \n-0xb8a591, 0x7fac59, 0x5c55de, 0x212c38, 0xb13296, 0x5cff50, \n-0x366262, 0xfa7b16, 0xf4d9a6, 0x2acfe7, 0xf07403, 0xd4d604, \n-0x6fd916, 0x31b1bf, 0xcbb450, 0x5bd7c8, 0x0ce194, 0x6bd643, \n-0x4fd91c, 0xdf4543, 0x5f3453, 0xe2b5aa, 0xc9aec8, 0x131485, \n-0xf9d2bf, 0xbadb9e, 0x76f5b9, 0xaf15cf, 0xca3182, 0x14b56d, \n-0xe9fe4d, 0x50fc35, 0xf5aed5, 0xa2d0c1, 0xc96057, 0x192eb6, \n-0xe91d92, 0x07d144, 0xaea3c6, 0x343566, 0x26d5b4, 0x3161e2, \n-0x37f1a2, 0x209eff, 0x958e23, 0x493798, 0x35f4a6, 0x4bdc02, \n-0xc2be13, 0xbe80a0, 0x0b72a3, 0x115c5f, 0x1e1bd1, 0x0db4d3, \n-0x869e85, 0x96976b, 0x2ac91f, 0x8a26c2, 0x3070f0, 0x041412, \n-0xfc9fa5, 0xf72a38, 0x9c6878, 0xe2aa76, 0x50cfe1, 0x559274, \n-0x934e38, 0x0a92f7, 0x5533f0, 0xa63db4, 0x399971, 0xe2b755, \n-0xa98a7c, 0x008f19, 0xac54d2, 0x2ea0b4, 0xf5f3e0, 0x60c849, \n-0xffd269, 0xae52ce, 0x7a5fdd, 0xe9ce06, 0xfb0ae8, 0xa50cce, \n-0xea9d3e, 0x3766dd, 0xb834f5, 0x0da090, 0x846f88, 0x4ae3d5, \n-0x099a03, 0x2eae2d, 0xfcb40a, 0xfb9b33, 0xe281dd, 0x1b16ba, \n-0xd8c0af, 0xd96b97, 0xb52dc9, 0x9c277f, 0x5951d5, 0x21ccd6, \n-0xb6496b, 0x584562, 0xb3baf2, 0xa1a5c4, 0x7ca2cf, 0xa9b93d, \n-0x7b7b89, 0x483d38, \n+0xa2f983, 0x6e4e44, 0x1529fc, 0x2757d1, 0xf534dd, 0xc0db62,\n+0x95993c, 0x439041, 0xfe5163, 0xabdebb, 0xc561b7, 0x246e3a,\n+0x424dd2, 0xe00649, 0x2eea09, 0xd1921c, 0xfe1deb, 0x1cb129,\n+0xa73ee8, 0x8235f5, 0x2ebb44, 0x84e99c, 0x7026b4, 0x5f7e41,\n+0x3991d6, 0x398353, 0x39f49c, 0x845f8b, 0xbdf928, 0x3b1ff8,\n+0x97ffde, 0x05980f, 0xef2f11, 0x8b5a0a, 0x6d1f6d, 0x367ecf,\n+0x27cb09, 0xb74f46, 0x3f669e, 0x5fea2d, 0x7527ba, 0xc7ebe5,\n+0xf17b3d, 0x0739f7, 0x8a5292, 0xea6bfb, 0x5fb11f, 0x8d5d08,\n+0x560330, 0x46fc7b, 0x6babf0, 0xcfbc20, 0x9af436, 0x1da9e3,\n+0x91615e, 0xe61b08, 0x659985, 0x5f14a0, 0x68408d, 0xffd880,\n+0x4d7327, 0x310606, 0x1556ca, 0x73a8c9, 0x60e27b, 0xc08c6b,\n+0x47c419, 0xc367cd, 0xdce809, 0x2a8359, 0xc4768b, 0x961ca6,\n+0xddaf44, 0xd15719, 0x053ea5, 0xff0705, 0x3f7e33, 0xe832c2,\n+0xde4f98, 0x327dbb, 0xc33d26, 0xef6b1e, 0x5ef89f, 0x3a1f35,\n+0xcaf27f, 0x1d87f1, 0x21907c, 0x7c246a, 0xfa6ed5, 0x772d30,\n+0x433b15, 0xc614b5, 0x9d19c3, 0xc2c4ad, 0x414d2c, 0x5d000c,\n+0x467d86, 0x2d71e3, 0x9ac69b, 0x006233, 0x7cd2b4, 0x97a7b4,\n+0xd55537, 0xf63ed7, 0x1810a3, 0xfc764d, 0x2a9d64, 0xabd770,\n+0xf87c63, 0x57b07a, 0xe71517, 0x5649c0, 0xd9d63b, 0x3884a7,\n+0xcb2324, 0x778ad6, 0x23545a, 0xb91f00, 0x1b0af1, 0xdfce19,\n+0xff319f, 0x6a1e66, 0x615799, 0x47fbac, 0xd87f7e, 0xb76522,\n+0x89e832, 0x60bfe6, 0xcdc4ef, 0x09366c, 0xd43f5d, 0xd7de16,\n+0xde3b58, 0x929bde, 0x2822d2, 0xe88628, 0x4d58e2, 0x32cac6,\n+0x16e308, 0xcb7de0, 0x50c017, 0xa71df3, 0x5be018, 0x34132e,\n+0x621283, 0x014883, 0x5b8ef5, 0x7fb0ad, 0xf2e91e, 0x434a48,\n+0xd36710, 0xd8ddaa, 0x425fae, 0xce616a, 0xa4280a, 0xb499d3,\n+0xf2a606, 0x7f775c, 0x83c2a3, 0x883c61, 0x78738a, 0x5a8caf,\n+0xbdd76f, 0x63a62d, 0xcbbff4, 0xef818d, 0x67c126, 0x45ca55,\n+0x36d9ca, 0xd2a828, 0x8d61c2, 0x77c912, 0x142604, 0x9b4612,\n+0xc459c4, 0x44c5c8, 0x91b24d, 0xf31700, 0xad43d4, 0xe54929,\n+0x10d5fd, 0xfcbe00, 0xcc941e, 0xeece70, 0xf53e13, 0x80f1ec,\n+0xc3e7b3, 0x28f8c7, 0x940593, 0x3e71c1, 0xb3092e, 0xf3450b,\n+0x9c1288, 0x7b20ab, 0x9fb52e, 0xc29247, 0x2f327b, 0x6d550c,\n+0x90a772, 0x1fe76b, 0x96cb31, 0x4a1679, 0xe27941, 0x89dff4,\n+0x9794e8, 0x84e6e2, 0x973199, 0x6bed88, 0x365f5f, 0x0efdbb,\n+0xb49a48, 0x6ca467, 0x427271, 0x325d8d, 0xb8159f, 0x09e5bc,\n+0x25318d, 0x3974f7, 0x1c0530, 0x010c0d, 0x68084b, 0x58ee2c,\n+0x90aa47, 0x02e774, 0x24d6bd, 0xa67df7, 0x72486e, 0xef169f,\n+0xa6948e, 0xf691b4, 0x5153d1, 0xf20acf, 0x339820, 0x7e4bf5,\n+0x6863b2, 0x5f3edd, 0x035d40, 0x7f8985, 0x295255, 0xc06437,\n+0x10d86d, 0x324832, 0x754c5b, 0xd4714e, 0x6e5445, 0xc1090b,\n+0x69f52a, 0xd56614, 0x9d0727, 0x50045d, 0xdb3bb4, 0xc576ea,\n+0x17f987, 0x7d6b49, 0xba271d, 0x296996, 0xacccc6, 0x5414ad,\n+0x6ae290, 0x89d988, 0x50722c, 0xbea404, 0x940777, 0x7030f3,\n+0x27fc00, 0xa871ea, 0x49c266, 0x3de064, 0x83dd97, 0x973fa3,\n+0xfd9443, 0x8c860d, 0xde4131, 0x9d3992, 0x8c70dd, 0xe7b717,\n+0x3bdf08, 0x2b3715, 0xa0805c, 0x93805a, 0x921110, 0xd8e80f,\n+0xaf806c, 0x4bffdb, 0x0f9038, 0x761859, 0x15a562, 0xbbcb61,\n+0xb989c7, 0xbd4010, 0x04f2d2, 0x277549, 0xf6b6eb, 0xbb22db,\n+0xaa140a, 0x2f2689, 0x768364, 0x333b09, 0x1a940e, 0xaa3a51,\n+0xc2a31d, 0xaeedaf, 0x12265c, 0x4dc26d, 0x9c7a2d, 0x9756c0,\n+0x833f03, 0xf6f009, 0x8c402b, 0x99316d, 0x07b439, 0x15200c,\n+0x5bc3d8, 0xc492f5, 0x4badc6, 0xa5ca4e, 0xcd37a7, 0x36a9e6,\n+0x9492ab, 0x6842dd, 0xde6319, 0xef8c76, 0x528b68, 0x37dbfc,\n+0xaba1ae, 0x3115df, 0xa1ae00, 0xdafb0c, 0x664d64, 0xb705ed,\n+0x306529, 0xbf5657, 0x3aff47, 0xb9f96a, 0xf3be75, 0xdf9328,\n+0x3080ab, 0xf68c66, 0x15cb04, 0x0622fa, 0x1de4d9, 0xa4b33d,\n+0x8f1b57, 0x09cd36, 0xe9424e, 0xa4be13, 0xb52333, 0x1aaaf0,\n+0xa8654f, 0xa5c1d2, 0x0f3f0b, 0xcd785b, 0x76f923, 0x048b7b,\n+0x721789, 0x53a6c6, 0xe26e6f, 0x00ebef, 0x584a9b, 0xb7dac4,\n+0xba66aa, 0xcfcf76, 0x1d02d1, 0x2df1b1, 0xc1998c, 0x77adc3,\n+0xda4886, 0xa05df7, 0xf480c6, 0x2ff0ac, 0x9aecdd, 0xbc5c3f,\n+0x6dded0, 0x1fc790, 0xb6db2a, 0x3a25a3, 0x9aaf00, 0x9353ad,\n+0x0457b6, 0xb42d29, 0x7e804b, 0xa707da, 0x0eaa76, 0xa1597b,\n+0x2a1216, 0x2db7dc, 0xfde5fa, 0xfedb89, 0xfdbe89, 0x6c76e4,\n+0xfca906, 0x70803e, 0x156e85, 0xff87fd, 0x073e28, 0x336761,\n+0x86182a, 0xeabd4d, 0xafe7b3, 0x6e6d8f, 0x396795, 0x5bbf31,\n+0x48d784, 0x16df30, 0x432dc7, 0x356125, 0xce70c9, 0xb8cb30,\n+0xfd6cbf, 0xa200a4, 0xe46c05, 0xa0dd5a, 0x476f21, 0xd21262,\n+0x845cb9, 0x496170, 0xe0566b, 0x015299, 0x375550, 0xb7d51e,\n+0xc4f133, 0x5f6e13, 0xe4305d, 0xa92e85, 0xc3b21d, 0x3632a1,\n+0xa4b708, 0xd4b1ea, 0x21f716, 0xe4698f, 0x77ff27, 0x80030c,\n+0x2d408d, 0xa0cd4f, 0x99a520, 0xd3a2b3, 0x0a5d2f, 0x42f9b4,\n+0xcbda11, 0xd0be7d, 0xc1db9b, 0xbd17ab, 0x81a2ca, 0x5c6a08,\n+0x17552e, 0x550027, 0xf0147f, 0x8607e1, 0x640b14, 0x8d4196,\n+0xdebe87, 0x2afdda, 0xb6256b, 0x34897b, 0xfef305, 0x9ebfb9,\n+0x4f6a68, 0xa82a4a, 0x5ac44f, 0xbcf82d, 0x985ad7, 0x95c7f4,\n+0x8d4d0d, 0xa63a20, 0x5f57a4, 0xb13f14, 0x953880, 0x0120cc,\n+0x86dd71, 0xb6dec9, 0xf560bf, 0x11654d, 0x6b0701, 0xacb08c,\n+0xd0c0b2, 0x485551, 0x0efb1e, 0xc37295, 0x3b06a3, 0x3540c0,\n+0x7bdc06, 0xcc45e0, 0xfa294e, 0xc8cad6, 0x41f3e8, 0xde647c,\n+0xd8649b, 0x31bed9, 0xc397a4, 0xd45877, 0xc5e369, 0x13daf0,\n+0x3c3aba, 0x461846, 0x5f7555, 0xf5bdd2, 0xc6926e, 0x5d2eac,\n+0xed440e, 0x423e1c, 0x87c461, 0xe9fd29, 0xf3d6e7, 0xca7c22,\n+0x35916f, 0xc5e008, 0x8dd7ff, 0xe26a6e, 0xc6fdb0, 0xc10893,\n+0x745d7c, 0xb2ad6b, 0x9d6ecd, 0x7b723e, 0x6a11c6, 0xa9cff7,\n+0xdf7329, 0xbac9b5, 0x5100b7, 0x0db2e2, 0x24ba74, 0x607de5,\n+0x8ad874, 0x2c150d, 0x0c1881, 0x94667e, 0x162901, 0x767a9f,\n+0xbefdfd, 0xef4556, 0x367ed9, 0x13d9ec, 0xb9ba8b, 0xfc97c4,\n+0x27a831, 0xc36ef1, 0x36c594, 0x56a8d8, 0xb5a8b4, 0x0ecccf,\n+0x2d8912, 0x34576f, 0x89562c, 0xe3ce99, 0xb920d6, 0xaa5e6b,\n+0x9c2a3e, 0xcc5f11, 0x4a0bfd, 0xfbf4e1, 0x6d3b8e, 0x2c86e2,\n+0x84d4e9, 0xa9b4fc, 0xd1eeef, 0xc9352e, 0x61392f, 0x442138,\n+0xc8d91b, 0x0afc81, 0x6a4afb, 0xd81c2f, 0x84b453, 0x8c994e,\n+0xcc2254, 0xdc552a, 0xd6c6c0, 0x96190b, 0xb8701a, 0x649569,\n+0x605a26, 0xee523f, 0x0f117f, 0x11b5f4, 0xf5cbfc, 0x2dbc34,\n+0xeebc34, 0xcc5de8, 0x605edd, 0x9b8e67, 0xef3392, 0xb817c9,\n+0x9b5861, 0xbc57e1, 0xc68351, 0x103ed8, 0x4871dd, 0xdd1c2d,\n+0xa118af, 0x462c21, 0xd7f359, 0x987ad9, 0xc0549e, 0xfa864f,\n+0xfc0656, 0xae79e5, 0x362289, 0x22ad38, 0xdc9367, 0xaae855,\n+0x382682, 0x9be7ca, 0xa40d51, 0xb13399, 0x0ed7a9, 0x480569,\n+0xf0b265, 0xa7887f, 0x974c88, 0x36d1f9, 0xb39221, 0x4a827b,\n+0x21cf98, 0xdc9f40, 0x5547dc, 0x3a74e1, 0x42eb67, 0xdf9dfe,\n+0x5fd45e, 0xa4677b, 0x7aacba, 0xa2f655, 0x23882b, 0x55ba41,\n+0x086e59, 0x862a21, 0x834739, 0xe6e389, 0xd49ee5, 0x40fb49,\n+0xe956ff, 0xca0f1c, 0x8a59c5, 0x2bfa94, 0xc5c1d3, 0xcfc50f,\n+0xae5adb, 0x86c547, 0x624385, 0x3b8621, 0x94792c, 0x876110,\n+0x7b4c2a, 0x1a2c80, 0x12bf43, 0x902688, 0x893c78, 0xe4c4a8,\n+0x7bdbe5, 0xc23ac4, 0xeaf426, 0x8a67f7, 0xbf920d, 0x2ba365,\n+0xb1933d, 0x0b7cbd, 0xdc51a4, 0x63dd27, 0xdde169, 0x19949a,\n+0x9529a8, 0x28ce68, 0xb4ed09, 0x209f44, 0xca984e, 0x638270,\n+0x237c7e, 0x32b90f, 0x8ef5a7, 0xe75614, 0x08f121, 0x2a9db5,\n+0x4d7e6f, 0x5119a5, 0xabf9b5, 0xd6df82, 0x61dd96, 0x023616,\n+0x9f3ac4, 0xa1a283, 0x6ded72, 0x7a8d39, 0xa9b882, 0x5c326b,\n+0x5b2746, 0xed3400, 0x7700d2, 0x55f4fc, 0x4d5901, 0x8071e0,\n+0xe13f89, 0xb295f3, 0x64a8f1, 0xaea74b, 0x38fc4c, 0xeab2bb,\n+0x47270b, 0xabc3a7, 0x34ba60, 0x52dd34, 0xf8563a, 0xeb7e8a,\n+0x31bb36, 0x5895b7, 0x47f7a9, 0x94c3aa, 0xd39225, 0x1e7f3e,\n+0xd8974e, 0xbba94f, 0xd8ae01, 0xe661b4, 0x393d8e, 0xa523aa,\n+0x33068e, 0x1633b5, 0x3bb188, 0x1d3a9d, 0x4013d0, 0xcc1be5,\n+0xf862e7, 0x3bf28f, 0x39b5bf, 0x0bc235, 0x22747e, 0xa247c0,\n+0xd52d1f, 0x19add3, 0x9094df, 0x9311d0, 0xb42b25, 0x496db2,\n+0xe264b2, 0x5ef135, 0x3bc6a4, 0x1a4ad0, 0xaac92e, 0x64e886,\n+0x573091, 0x982cfb, 0x311b1a, 0x08728b, 0xbdcee1, 0x60e142,\n+0xeb641d, 0xd0bba3, 0xe559d4, 0x597b8c, 0x2a4483, 0xf332ba,\n+0xf84867, 0x2c8d1b, 0x2fa9b0, 0x50f3dd, 0xf9f573, 0xdb61b4,\n+0xfe233e, 0x6c41a6, 0xeea318, 0x775a26, 0xbc5e5c, 0xcea708,\n+0x94dc57, 0xe20196, 0xf1e839, 0xbe4851, 0x5d2d2f, 0x4e9555,\n+0xd96ec2, 0xe7d755, 0x6304e0, 0xc02e0e, 0xfc40a0, 0xbbf9b3,\n+0x7125a7, 0x222dfb, 0xf619d8, 0x838c1c, 0x6619e6, 0xb20d55,\n+0xbb5137, 0x79e809, 0xaf9149, 0x0d73de, 0x0b0da5, 0xce7f58,\n+0xac1934, 0x724667, 0x7a1a13, 0x9e26bc, 0x4555e7, 0x585cb5,\n+0x711d14, 0x486991, 0x480d60, 0x56adab, 0xd62f64, 0x96ee0c,\n+0x212ff3, 0x5d6d88, 0xa67684, 0x95651e, 0xab9e0a, 0x4ddefe,\n+0x571010, 0x836a39, 0xf8ea31, 0x9e381d, 0xeac8b1, 0xcac96b,\n+0x37f21e, 0xd505e9, 0x984743, 0x9fc56c, 0x0331b7, 0x3b8bf8,\n+0x86e56a, 0x8dc343, 0x6230e7, 0x93cfd5, 0x6a8f2d, 0x733005,\n+0x1af021, 0xa09fcb, 0x7415a1, 0xd56b23, 0x6ff725, 0x2f4bc7,\n+0xb8a591, 0x7fac59, 0x5c55de, 0x212c38, 0xb13296, 0x5cff50,\n+0x366262, 0xfa7b16, 0xf4d9a6, 0x2acfe7, 0xf07403, 0xd4d604,\n+0x6fd916, 0x31b1bf, 0xcbb450, 0x5bd7c8, 0x0ce194, 0x6bd643,\n+0x4fd91c, 0xdf4543, 0x5f3453, 0xe2b5aa, 0xc9aec8, 0x131485,\n+0xf9d2bf, 0xbadb9e, 0x76f5b9, 0xaf15cf, 0xca3182, 0x14b56d,\n+0xe9fe4d, 0x50fc35, 0xf5aed5, 0xa2d0c1, 0xc96057, 0x192eb6,\n+0xe91d92, 0x07d144, 0xaea3c6, 0x343566, 0x26d5b4, 0x3161e2,\n+0x37f1a2, 0x209eff, 0x958e23, 0x493798, 0x35f4a6, 0x4bdc02,\n+0xc2be13, 0xbe80a0, 0x0b72a3, 0x115c5f, 0x1e1bd1, 0x0db4d3,\n+0x869e85, 0x96976b, 0x2ac91f, 0x8a26c2, 0x3070f0, 0x041412,\n+0xfc9fa5, 0xf72a38, 0x9c6878, 0xe2aa76, 0x50cfe1, 0x559274,\n+0x934e38, 0x0a92f7, 0x5533f0, 0xa63db4, 0x399971, 0xe2b755,\n+0xa98a7c, 0x008f19, 0xac54d2, 0x2ea0b4, 0xf5f3e0, 0x60c849,\n+0xffd269, 0xae52ce, 0x7a5fdd, 0xe9ce06, 0xfb0ae8, 0xa50cce,\n+0xea9d3e, 0x3766dd, 0xb834f5, 0x0da090, 0x846f88, 0x4ae3d5,\n+0x099a03, 0x2eae2d, 0xfcb40a, 0xfb9b33, 0xe281dd, 0x1b16ba,\n+0xd8c0af, 0xd96b97, 0xb52dc9, 0x9c277f, 0x5951d5, 0x21ccd6,\n+0xb6496b, 0x584562, 0xb3baf2, 0xa1a5c4, 0x7ca2cf, 0xa9b93d,\n+0x7b7b89, 0x483d38,\n };\n \n static const __float128 c[] = {\n-/* 93 bits of pi/2 */\n+/* 113 bits of pi/2 */\n #define PI_2_1 c[0]\n- 1.57079632679489661923132169155131424e+00Q, /* 3fff921fb54442d18469898cc5100000 */\n+ 0x1.921fb54442d18469898cc51701b8p+0Q,\n \n /* pi/2 - PI_2_1 */\n #define PI_2_1t c[1]\n- 8.84372056613570112025531863263659260e-29Q, /* 3fa1c06e0e68948127044533e63a0106 */\n+ 0x3.9a252049c1114cf98e804177d4c8p-116Q,\n };\n \n \n@@ -525,16 +525,16 @@ __quadmath_rem_pio2q (__float128 x, __float128 *y)\n   if (ix < 0x40002d97c7f3321dLL)\t/* |x| in <pi/4, 3pi/4) */\n     {\n       if (hx > 0)\n-\t{ \n-\t  /* 113 + 93 bit PI is ok */\n+\t{\n+\t  /* 113 + 113 bit PI is ok */\n \t  z = x - PI_2_1;\n \t  y[0] = z - PI_2_1t;\n \t  y[1] = (z - y[0]) - PI_2_1t;\n \t  return 1;\n \t}\n       else\n         {\n-\t  /* 113 + 93 bit PI is ok */\n+\t  /* 113 + 113 bit PI is ok */\n \t  z = x + PI_2_1;\n \t  y[0] = z + PI_2_1t;\n \t  y[1] = (z - y[0]) + PI_2_1t;"}, {"sha": "fa85c5b2d50946f33f85f059ba9684960e99dda8", "filename": "libquadmath/math/remquoq.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fremquoq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fremquoq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fremquoq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Compute remainder and a congruent to the quotient.\n-   Copyright (C) 1997, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -49,7 +49,7 @@ remquoq (__float128 x, __float128 y, int *quo)\n \n   if (hy <= 0x7ffbffffffffffffLL)\n     x = fmodq (x, 8 * y);              /* now x < 8y */\n-      \n+\n   if (((hx - hy) | (lx - ly)) == 0)\n     {\n       *quo = qs ? -1 : 1;\n@@ -60,12 +60,12 @@ remquoq (__float128 x, __float128 y, int *quo)\n   y  = fabsq (y);\n   cquo = 0;\n \n-  if (x >= 4 * y)\n+  if (hy <= 0x7ffcffffffffffffLL && x >= 4 * y)\n     {\n       x -= 4 * y;\n       cquo += 4;\n     }\n-  if (x >= 2 * y)\n+  if (hy <= 0x7ffdffffffffffffLL && x >= 2 * y)\n     {\n       x -= 2 * y;\n       cquo += 2;\n@@ -101,6 +101,9 @@ remquoq (__float128 x, __float128 y, int *quo)\n \n   *quo = qs ? -cquo : cquo;\n \n+  /* Ensure correct sign of zero result in round-downward mode.  */\n+  if (x == 0.0Q)\n+    x = 0.0Q;\n   if (sx)\n     x = -x;\n   return x;"}, {"sha": "7bc9684e5ea9b124b2f093b8a23ce22aca078b8c", "filename": "libquadmath/math/rintq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Frintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Frintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frintq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -35,7 +35,7 @@ __float128\n rintq (__float128 x)\n {\n \tint64_t i0,j0,sx;\n-\tuint64_t i1;\n+\tuint64_t i1 __attribute__ ((unused));\n \t__float128 w,t;\n \tGET_FLT128_WORDS64(i0,i1,x);\n \tsx = (((uint64_t)i0)>>63);"}, {"sha": "b48366315f404de0a5d84121503a98fd9ac79072", "filename": "libquadmath/math/roundq.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Froundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Froundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Froundq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Round __float128 to integer away from zero.\n-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -21,9 +21,6 @@\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 huge = 1.0E4930Q;\n-\n-\n __float128\n roundq (__float128 x)\n {\n@@ -32,31 +29,24 @@ roundq (__float128 x)\n \n   GET_FLT128_WORDS64 (i0, i1, x);\n   j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n-  if (j0 < 31)\n+  if (j0 < 48)\n     {\n       if (j0 < 0)\n \t{\n-\t  if (huge + x > 0.0)\n-\t    {\n-\t      i0 &= 0x8000000000000000ULL;\n-\t      if (j0 == -1)\n-\t\ti0 |= 0x3fff000000000000LL;\n-\t      i1 = 0;\n-\t    }\n+\t  i0 &= 0x8000000000000000ULL;\n+\t  if (j0 == -1)\n+\t    i0 |= 0x3fff000000000000LL;\n+\t  i1 = 0;\n \t}\n       else\n \t{\n \t  uint64_t i = 0x0000ffffffffffffLL >> j0;\n \t  if (((i0 & i) | i1) == 0)\n \t    /* X is integral.  */\n \t    return x;\n-\t  if (huge + x > 0.0)\n-\t    {\n-\t      /* Raise inexact if x != 0.  */\n-\t      i0 += 0x0000800000000000LL >> j0;\n-\t      i0 &= ~i;\n-\t      i1 = 0;\n-\t    }\n+\t  i0 += 0x0000800000000000LL >> j0;\n+\t  i0 &= ~i;\n+\t  i1 = 0;\n \t}\n     }\n   else if (j0 > 111)\n@@ -74,14 +64,10 @@ roundq (__float128 x)\n \t/* X is integral.  */\n \treturn x;\n \n-      if (huge + x > 0.0)\n-\t{\n-\t  /* Raise inexact if x != 0.  */\n-\t  uint64_t j = i1 + (1LL << (111 - j0));\n-\t  if (j < i1)\n-\t    i0 += 1;\n-\t  i1 = j;\n-\t}\n+      uint64_t j = i1 + (1LL << (111 - j0));\n+      if (j < i1)\n+\ti0 += 1;\n+      i1 = j;\n       i1 &= ~i;\n     }\n "}, {"sha": "6aac21125f802f1dd6f8de49f6c2abe6074727ff", "filename": "libquadmath/math/scalblnq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fscalblnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fscalblnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalblnq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,7 +1,7 @@\n /* scalblnq.c -- __float128 version of s_scalbn.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n-   \n+\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved."}, {"sha": "9ed5fe6179943b6d6fafdf0928a9e5c7586f7be0", "filename": "libquadmath/math/scalbnq.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fscalbnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fscalbnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalbnq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,7 +1,7 @@\n /* scalbnq.c -- __float128 version of s_scalbn.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n-   \n+\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved."}, {"sha": "362f517a6ef225e9dbb2a328ec2dc396d233dea6", "filename": "libquadmath/math/sincos_table.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincos_table.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincos_table.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincos_table.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point sine and cosine tables.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -37,7 +37,7 @@ const __float128 __sincosq_table[] = {\n /* sin(x) = 0.25dc50bc95711d0d9787d108fd438cf5959ee0bfb7a1e36e8b1a112968f356657420e9cc9ea */\n  1.47892995873409608580026675734609314e-01Q, /* 3ffc2ee285e4ab88e86cbc3e8847ea1c */\n  9.74950446464233268291647449768590886e-36Q, /* 3f8a9eb2b3dc17f6f43c6dd16342252d */\n-    \n+\n /* x = 1.56250000000000000000000000000000000e-01 3ffc4000000000000000000000000000 */\n /* cos(x) = 0.fce1a053e621438b6d60c76e8c45bf0a9dc71aa16f922acc10e95144ec796a249813c9cb649 */\n  9.87817783816471944100503034363211317e-01Q, /* 3ffef9c340a7cc428716dac18edd188b */"}, {"sha": "d83b1a6b757c433c6917b13d9cd3318afa624c65", "filename": "libquadmath/math/sincosq.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Compute sine and cosine of argument.\n-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>.\n@@ -19,6 +19,7 @@\n    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n    02111-1307 USA.  */\n \n+#include <errno.h>\n #include \"quadmath-imp.h\"\n \n void\n@@ -37,6 +38,8 @@ sincosq (__float128 x, __float128 *sinx, __float128 *cosx)\n     {\n       /* sin(Inf or NaN) is NaN */\n       *sinx = *cosx = x - x;\n+      if (isinfq (x))\n+\terrno = EDOM;\n     }\n   else\n     {"}, {"sha": "171ed6fc1178876f13cfd8bec4cec1267dc3ef76", "filename": "libquadmath/math/sincosq_kernel.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsincosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq_kernel.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point sine and cosine on <-pi/4,pi/4>.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -110,12 +110,15 @@ __quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n       /* Argument is small enough to approximate it by a Chebyshev\n \t polynomial of degree 16(17).  */\n       if (tix < 0x3fc60000)\t\t/* |x| < 2^-57 */\n-\tif (!((int)x))\t\t\t/* generate inexact */\n-\t  {\n-\t    *sinx = x;\n-\t    *cosx = ONE;\n-\t    return;\n-\t  }\n+\t{\n+\t  math_check_force_underflow (x);\n+\t  if (!((int)x))\t\t\t/* generate inexact */\n+\t    {\n+\t      *sinx = x;\n+\t      *cosx = ONE;\n+\t      return;\n+\t    }\n+\t}\n       z = x * x;\n       *sinx = x + (x * (z*(SIN1+z*(SIN2+z*(SIN3+z*(SIN4+\n \t\t\tz*(SIN5+z*(SIN6+z*(SIN7+z*SIN8)))))))));"}, {"sha": "a4191c0fd3de24b30695c88f6dd9cefaa7fd9fbc", "filename": "libquadmath/math/sinhq.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinhq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -85,8 +85,11 @@ sinhq (__float128 x)\n   if (ix <= 0x40044000)\n     {\n       if (ix < 0x3fc60000) /* |x| < 2^-57 */\n-\tif (shuge + x > one)\n-\t  return x;\t\t/* sinh(tiny) = tiny with inexact */\n+\t{\n+\t  math_check_force_underflow (x);\n+\t  if (shuge + x > one)\n+\t    return x;\t\t/* sinh(tiny) = tiny with inexact */\n+\t}\n       t = expm1q (u.value);\n       if (ix < 0x3fff0000)\n \treturn h * (2.0Q * t - t * t / (t + one));"}, {"sha": "873341a761778ef51fd5dd191b00269f9b54a5f6", "filename": "libquadmath/math/sinq_kernel.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsinq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Fsinq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq_kernel.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -90,7 +90,10 @@ __quadmath_kernel_sinq (__float128 x, __float128 y, int iy)\n       /* Argument is small enough to approximate it by a Chebyshev\n \t polynomial of degree 17.  */\n       if (tix < 0x3fc60000)\t\t/* |x| < 2^-57 */\n-\tif (!((int)x)) return x;\t/* generate inexact */\n+\t{\n+\t  math_check_force_underflow (x);\n+\t  if (!((int)x)) return x;\t/* generate inexact */\n+\t}\n       z = x * x;\n       return x + (x * (z*(SIN1+z*(SIN2+z*(SIN3+z*(SIN4+\n \t\t       z*(SIN5+z*(SIN6+z*(SIN7+z*SIN8)))))))));"}, {"sha": "6b60dbf1b2f7d5d30ca182643cb9d380547a322d", "filename": "libquadmath/math/tanhq.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanhq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -72,7 +72,10 @@ tanhq (__float128 x)\n       if (u.value == 0)\n \treturn x;\t\t/* x == +- 0 */\n       if (ix < 0x3fc60000)\t/* |x| < 2^-57 */\n-\treturn x * (one + tiny); /* tanh(small) = small */\n+\t{\n+\t  math_check_force_underflow (x);\n+\t  return x * (one + tiny); /* tanh(small) = small */\n+\t}\n       u.words32.w0 = ix;\t/* Absolute value of x.  */\n       if (ix >= 0x3fff0000)\n \t{\t\t\t/* |x| >= 1  */"}, {"sha": "d2864f61c7d0f723570cf7d5cbe6dbdcddaee452", "filename": "libquadmath/math/tanq.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -12,9 +12,9 @@\n /*\n   Long double expansions are\n   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-  and are incorporated herein by permission of the author.  The author \n+  and are incorporated herein by permission of the author.  The author\n   reserves the right to distribute this material elsewhere under different\n-  copying permissions.  These modifications are distributed here under \n+  copying permissions.  These modifications are distributed here under\n   the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -99,8 +99,13 @@ __quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n \t  if ((ix | u.words32.w1 | u.words32.w2 | u.words32.w3\n \t       | (iy + 1)) == 0)\n \t    return one / fabsq (x);\n+\t  else if (iy == 1)\n+\t    {\n+\t      math_check_force_underflow (x);\n+\t      return x;\n+\t    }\n \t  else\n-\t    return (iy == 1) ? x : -one / x;\n+\t    return -one / x;\n \t}\n     }\n   if (ix >= 0x3ffe5942) /* |x| >= 0.6743316650390625 */\n@@ -163,7 +168,7 @@ __quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n /* tanq.c -- __float128 version of s_tan.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n-  \n+\n /* @(#)s_tan.c 5.1 93/09/24 */\n /*\n  * ===================================================="}, {"sha": "607c24985e39f586caf5f4baf079212d24681c38", "filename": "libquadmath/math/truncq.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftruncq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fmath%2Ftruncq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftruncq.c?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -1,8 +1,8 @@\n /* Truncate argument to nearest integral value not larger than the argument.\n-   Copyright (C) 1997, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public"}, {"sha": "ed186144e757a93bf3e2ebd7f1fc7ffe515b371f", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eba0867060b1643d71d4185fbc23995248092bf/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=1eba0867060b1643d71d4185fbc23995248092bf", "patch": "@@ -186,4 +186,45 @@ do {                                   \\\n   __builtin_fpclassify (QUADFP_NAN, QUADFP_INFINITE, QUADFP_NORMAL, \\\n \t\t\tQUADFP_SUBNORMAL, QUADFP_ZERO, x)\n \n+#ifndef math_opt_barrier\n+# define math_opt_barrier(x) \\\n+({ __typeof (x) __x = (x); __asm (\"\" : \"+m\" (__x)); __x; })\n+# define math_force_eval(x) \\\n+({ __typeof (x) __x = (x); __asm __volatile__ (\"\" : : \"m\" (__x)); })\n+#endif\n+\n+/* math_narrow_eval reduces its floating-point argument to the range\n+   and precision of its semantic type.  (The original evaluation may\n+   still occur with excess range and precision, so the result may be\n+   affected by double rounding.)  */\n+#define math_narrow_eval(x) (x)\n+\n+/* If X (which is not a NaN) is subnormal, force an underflow\n+   exception.  */\n+#define math_check_force_underflow(x)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      __float128 force_underflow_tmp = (x);\t\t\t\\\n+      if (fabsq (force_underflow_tmp) < FLT128_MIN)\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  __float128 force_underflow_tmp2\t\t\t\\\n+\t    = force_underflow_tmp * force_underflow_tmp;\t\\\n+\t  math_force_eval (force_underflow_tmp2);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+/* Likewise, but X is also known to be nonnegative.  */\n+#define math_check_force_underflow_nonneg(x)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      __float128 force_underflow_tmp = (x);\t\t\t\\\n+      if (force_underflow_tmp < FLT128_MIN)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  __float128 force_underflow_tmp2\t\t\t\\\n+\t    = force_underflow_tmp * force_underflow_tmp;\t\\\n+\t  math_force_eval (force_underflow_tmp2);\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n #endif"}]}