{"sha": "5861b128b9942ef92b3755610b0459273e7cf234", "node_id": "C_kwDOANBUbNoAKDU4NjFiMTI4Yjk5NDJlZjkyYjM3NTU2MTBiMDQ1OTI3M2U3Y2YyMzQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-01T09:30:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-09T09:44:50Z"}, "message": "[Ada] Print Storage_Pool and Procedure_To_Call fields\n\ngcc/ada/\n\n\t* sprint.adb (Sprint_Node_Actual) <N_Allocator>: Also print the\n\tProcedure_To_Call field if it is present.\n\t<N_Extended_Return_Statement>: Also print the Storage_Pool and\n\tProcedure_To_Call fields if they are present.\n\t<N_Free_Statement>: Likewise.\n\t<N_Simple_Return_Statement>: Likewise.", "tree": {"sha": "d96fb14a217e064c4dfe4b3a00bc71b82d347214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d96fb14a217e064c4dfe4b3a00bc71b82d347214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5861b128b9942ef92b3755610b0459273e7cf234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5861b128b9942ef92b3755610b0459273e7cf234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5861b128b9942ef92b3755610b0459273e7cf234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5861b128b9942ef92b3755610b0459273e7cf234/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09afdaeeeba7e4c1fd00f4c43b5e5b36dbe6cf92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09afdaeeeba7e4c1fd00f4c43b5e5b36dbe6cf92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09afdaeeeba7e4c1fd00f4c43b5e5b36dbe6cf92"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "611563a1f22632b7e7e09eebebcf654a82134179", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5861b128b9942ef92b3755610b0459273e7cf234/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5861b128b9942ef92b3755610b0459273e7cf234/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=5861b128b9942ef92b3755610b0459273e7cf234", "patch": "@@ -1116,6 +1116,12 @@ package body Sprint is\n                Write_Char (']');\n             end if;\n \n+            if Present (Procedure_To_Call (Node)) then\n+               Write_Str_With_Col_Check (\"[procedure_to_call = \");\n+               Sprint_Node (Procedure_To_Call (Node));\n+               Write_Char (']');\n+            end if;\n+\n          when N_And_Then =>\n             Sprint_Left_Opnd (Node);\n             Write_Str_Sloc (\" and then \");\n@@ -1785,11 +1791,23 @@ package body Sprint is\n             if Present (Handled_Statement_Sequence (Node)) then\n                Write_Str_With_Col_Check (\" do\");\n                Sprint_Node (Handled_Statement_Sequence (Node));\n-               Write_Indent_Str (\"end return;\");\n-            else\n-               Write_Indent_Str (\";\");\n+               Write_Indent_Str (\"end return\");\n+            end if;\n+\n+            if Present (Storage_Pool (Node)) then\n+               Write_Str_With_Col_Check (\"[storage_pool = \");\n+               Sprint_Node (Storage_Pool (Node));\n+               Write_Char (']');\n             end if;\n \n+            if Present (Procedure_To_Call (Node)) then\n+               Write_Str_With_Col_Check (\"[procedure_to_call = \");\n+               Sprint_Node (Procedure_To_Call (Node));\n+               Write_Char (']');\n+            end if;\n+\n+            Write_Char (';');\n+\n          when N_Delta_Aggregate =>\n             Write_Str_With_Col_Check_Sloc (\"(\");\n             Sprint_Node (Expression (Node));\n@@ -1973,6 +1991,19 @@ package body Sprint is\n          when N_Free_Statement =>\n             Write_Indent_Str_Sloc (\"free \");\n             Sprint_Node (Expression (Node));\n+\n+            if Present (Storage_Pool (Node)) then\n+               Write_Str_With_Col_Check (\"[storage_pool = \");\n+               Sprint_Node (Storage_Pool (Node));\n+               Write_Char (']');\n+            end if;\n+\n+            if Present (Procedure_To_Call (Node)) then\n+               Write_Str_With_Col_Check (\"[procedure_to_call = \");\n+               Sprint_Node (Procedure_To_Call (Node));\n+               Write_Char (']');\n+            end if;\n+\n             Write_Char (';');\n \n          when N_Freeze_Entity =>\n@@ -3170,11 +3201,24 @@ package body Sprint is\n             if Present (Expression (Node)) then\n                Write_Indent_Str_Sloc (\"return \");\n                Sprint_Node (Expression (Node));\n-               Write_Char (';');\n             else\n-               Write_Indent_Str_Sloc (\"return;\");\n+               Write_Indent_Str_Sloc (\"return\");\n+            end if;\n+\n+            if Present (Storage_Pool (Node)) then\n+               Write_Str_With_Col_Check (\"[storage_pool = \");\n+               Sprint_Node (Storage_Pool (Node));\n+               Write_Char (']');\n             end if;\n \n+            if Present (Procedure_To_Call (Node)) then\n+               Write_Str_With_Col_Check (\"[procedure_to_call = \");\n+               Sprint_Node (Procedure_To_Call (Node));\n+               Write_Char (']');\n+            end if;\n+\n+            Write_Char (';');\n+\n          when N_Selective_Accept =>\n             Write_Indent_Str_Sloc (\"select\");\n "}]}