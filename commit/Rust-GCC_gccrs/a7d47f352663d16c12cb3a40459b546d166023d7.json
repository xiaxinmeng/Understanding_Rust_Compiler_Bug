{"sha": "a7d47f352663d16c12cb3a40459b546d166023d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkNDdmMzUyNjYzZDE2YzEyY2IzYTQwNDU5YjU0NmQxNjYwMjNkNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-27T16:17:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-27T16:17:04Z"}, "message": "PR libstdc++/79254 fix exception-safety in std::string::operator=\n\n\tPR libstdc++/79254\n\t* config/abi/pre/gnu.ver: Add new symbols.\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::_M_copy_assign): New overloaded functions to perform\n\tcopy assignment.\n\t(basic_string::operator=(const basic_string&)): Dispatch to\n\t_M_copy_assign.\n\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::_M_copy_assign(const basic_string&, true_type)):\n\tDefine, performing rollback on exception.\n\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n\tTest exception-safety guarantee.\n\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n\tLikewise.\n\t* testsuite/util/testsuite_allocator.h (uneq_allocator::swap): Make\n\tstd::swap visible.\n\nFrom-SVN: r244986", "tree": {"sha": "cf112fca8fe937bfad8a4ba585c171cccc678a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf112fca8fe937bfad8a4ba585c171cccc678a55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d47f352663d16c12cb3a40459b546d166023d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d47f352663d16c12cb3a40459b546d166023d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d47f352663d16c12cb3a40459b546d166023d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d47f352663d16c12cb3a40459b546d166023d7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f75bbf3fc68e1e03b55ae1f60c861faf213968ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75bbf3fc68e1e03b55ae1f60c861faf213968ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75bbf3fc68e1e03b55ae1f60c861faf213968ab"}], "stats": {"total": 171, "additions": 155, "deletions": 16}, "files": [{"sha": "7b0031e211a97072200c1f41dbca89200b240519", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -1,3 +1,22 @@\n+2017-01-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/79254\n+\t* config/abi/pre/gnu.ver: Add new symbols.\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::_M_copy_assign): New overloaded functions to perform\n+\tcopy assignment.\n+\t(basic_string::operator=(const basic_string&)): Dispatch to\n+\t_M_copy_assign.\n+\t* include/bits/basic_string.tcc [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::_M_copy_assign(const basic_string&, true_type)):\n+\tDefine, performing rollback on exception.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n+\tTest exception-safety guarantee.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/util/testsuite_allocator.h (uneq_allocator::swap): Make\n+\tstd::swap visible.\n+\n 2017-01-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/70607"}, {"sha": "1bea4b4d7fec3c0f0894e52d0965fa1e3171c49f", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -1700,7 +1700,9 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[01]**;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_Alloc_hiderC[12]EP[cw]RKS3_;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_M*;\n-    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[3-9]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE13*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE14_M_replace_aux*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[5-9]*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[2-9]*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EPK*;\n@@ -1953,6 +1955,9 @@ GLIBCXX_3.4.23 {\n     _ZNSsC[12]ERKSs[jmy]RKSaIcE;\n     _ZNSbIwSt11char_traitsIwESaIwEEC[12]ERKS2_mRKS1_;\n \n+    # basic_string<C, T, A>::_M_copy_assign(const basic_string&, {true,false}_type)\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE14_M_copy_assign*;\n+\n #ifndef HAVE_EXCEPTION_PTR_SINCE_GCC46\n     # std::future symbols are exported in the first version to support\n     # std::exception_ptr"}, {"sha": "97fe797d4b44340a53908898be434a68c33ba884", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -384,7 +384,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n \n       void\n-      _M_assign(const basic_string& __rcs);\n+      _M_assign(const basic_string&);\n \n       void\n       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n@@ -393,6 +393,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       _M_erase(size_type __pos, size_type __n);\n \n+#if __cplusplus >= 201103L\n+      void\n+      _M_copy_assign(const basic_string& __str, /* pocca = */ true_type);\n+\n+      void\n+      _M_copy_assign(const basic_string& __str, /* pocca = */ false_type)\n+      { this->_M_assign(__str); }\n+#endif\n+\n     public:\n       // Construct/copy/destroy:\n       // NB: We overload ctors in some cases instead of using default\n@@ -627,20 +636,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       operator=(const basic_string& __str)\n       {\n #if __cplusplus >= 201103L\n-\tif (_Alloc_traits::_S_propagate_on_copy_assign())\n-\t  {\n-\t    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\n-\t\t&& _M_get_allocator() != __str._M_get_allocator())\n-\t      {\n-\t\t// replacement allocator cannot free existing storage\n-\t\t_M_destroy(_M_allocated_capacity);\n-\t\t_M_data(_M_local_data());\n-\t\t_M_set_length(0);\n-\t      }\n-\t    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());\n-\t  }\n+\t_M_copy_assign(__str,\n+\t    typename _Alloc_traits::propagate_on_container_copy_assignment());\n+#else\n+\tthis->_M_assign(__str);\n #endif\n-\treturn this->assign(__str);\n+\treturn *this;\n       }\n \n       /**"}, {"sha": "adc8b853137a439c59f4e0016b5d77b01ced667c", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -275,6 +275,70 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+#if __cplusplus >= 201103L\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    void\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    _M_copy_assign(const basic_string& __str, true_type)\n+    {\n+      struct _Guard // RAII type for strong exception-safety guarantee.\n+      {\n+\t// Takes ownership of string's original state.\n+\t_Guard(basic_string* __self)\n+\t: _M_self(__self), _M_alloc(std::move(__self->_M_get_allocator())),\n+\t  _M_ptr(__self->_M_data()),\n+\t  _M_capacity(__self->_M_allocated_capacity), _M_len(__self->length())\n+\t{\n+\t  __self->_M_data(__self->_M_local_data());\n+\t  __self->_M_length(0);\n+\t}\n+\n+\t// Restores string's original state if _M_release() was not called.\n+\t~_Guard()\n+\t{\n+\t  if (_M_ptr)\n+\t    {\n+\t      _M_self->_M_get_allocator() = std::move(_M_alloc);\n+\t      _M_self->_M_data(_M_ptr);\n+\t      _M_self->_M_capacity(_M_capacity);\n+\t      _M_self->_M_length(_M_len);\n+\t    }\n+\t}\n+\n+\t_Guard(const _Guard&) = delete;\n+\t_Guard& operator=(const _Guard&) = delete;\n+\n+\tvoid _M_release()\n+\t{\n+\t  // Original state can be freed now.\n+\t  _Alloc_traits::deallocate(_M_alloc, _M_ptr, _M_capacity + 1);\n+\t  _M_ptr = nullptr;\n+\t}\n+\n+\tbasic_string*\t_M_self;\n+\tallocator_type\t_M_alloc;\n+\tpointer\t\t_M_ptr;\n+\tsize_type\t_M_capacity;\n+\tsize_type\t_M_len;\n+      };\n+\n+      if (!_Alloc_traits::_S_always_equal() && !_M_is_local()\n+\t  && _M_get_allocator() != __str._M_get_allocator())\n+\t{\n+\t  // The propagating allocator cannot free existing storage.\n+\t  _Guard __guard(this);\n+\t  _M_get_allocator() = __str._M_get_allocator();\n+\t  this->_M_assign(__str);\n+\t  __guard._M_release();\n+\t}\n+      else\n+\t{\n+\t  _M_get_allocator() = __str._M_get_allocator();\n+\t  this->_M_assign(__str);\n+\t}\n+    }\n+#endif\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "0fc80d7fb4da7235b401497f37de469511e83bf3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/char/copy_assign.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fchar%2Fcopy_assign.cc?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -22,6 +22,7 @@\n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n+#include <ext/throw_allocator.h>\n  \n using C = char;\n const C c = 'a';\n@@ -99,9 +100,33 @@ void test02()\n   VERIFY(1 == v5.get_allocator().get_personality());\n }\n \n+void test03()\n+{\n+  // PR libstdc++/79254\n+  using throw_alloc = __gnu_cxx::throw_allocator_limit<C>;\n+  typedef propagating_allocator<C, true, throw_alloc> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  alloc_type a1(1), a2(2);\n+  throw_alloc::set_limit(2); // Throw on third allocation (during assignment).\n+  const C* s1 = \"a string that is longer than a small string\";\n+  const C* s2 = \"another string that is longer than a small string\";\n+  test_type v1(s1, a1);\n+  test_type v2(s2, a2);\n+  bool caught = false;\n+  try {\n+    v1 = v2;\n+  } catch (__gnu_cxx::forced_error&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+  VERIFY( v1 == s1 );\n+  VERIFY( v1.get_allocator() == a1 );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "c35e001934d9d571db77b45dbd5f86d7fca7b4b6", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fallocator%2Fwchar_t%2Fcopy_assign.cc?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -22,6 +22,7 @@\n #include <string>\n #include <testsuite_hooks.h>\n #include <testsuite_allocator.h>\n+#include <ext/throw_allocator.h>\n  \n using C = wchar_t;\n const C c = L'a';\n@@ -99,9 +100,33 @@ void test02()\n   VERIFY(1 == v5.get_allocator().get_personality());\n }\n \n+void test03()\n+{\n+  // PR libstdc++/79254\n+  using throw_alloc = __gnu_cxx::throw_allocator_limit<C>;\n+  typedef propagating_allocator<C, true, throw_alloc> alloc_type;\n+  typedef std::basic_string<C, traits, alloc_type> test_type;\n+  alloc_type a1(1), a2(2);\n+  throw_alloc::set_limit(2); // Throw on third allocation (during assignment).\n+  const C* s1 = L\"a string that is longer than a small string\";\n+  const C* s2 = L\"another string that is longer than a small string\";\n+  test_type v1(s1, a1);\n+  test_type v2(s2, a2);\n+  bool caught = false;\n+  try {\n+    v1 = v2;\n+  } catch (__gnu_cxx::forced_error&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+  VERIFY( v1 == s1 );\n+  VERIFY( v1.get_allocator() == a1 );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "813fc81088ad5955eba842d711662ace69f43637", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d47f352663d16c12cb3a40459b546d166023d7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=a7d47f352663d16c12cb3a40459b546d166023d7", "patch": "@@ -287,7 +287,7 @@ namespace __gnu_test\n \n       Alloc& base() { return *this; }\n       const Alloc& base() const  { return *this; }\n-      void swap_base(Alloc& b) { swap(b, this->base()); }\n+      void swap_base(Alloc& b) { using std::swap; swap(b, this->base()); }\n \n     public:\n       typedef typename check_consistent_alloc_value_type<Tp, Alloc>::value_type"}]}