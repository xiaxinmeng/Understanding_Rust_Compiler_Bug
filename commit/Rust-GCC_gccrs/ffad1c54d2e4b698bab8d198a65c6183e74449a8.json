{"sha": "ffad1c54d2e4b698bab8d198a65c6183e74449a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZhZDFjNTRkMmU0YjY5OGJhYjhkMTk4YTY1YzYxODNlNzQ0NDlhOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-14T04:59:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-14T04:59:01Z"}, "message": "go/types: implement SizesFor for gccgo\n    \n    Move the architecture-specific settings out of configure.ac into a new\n    shell script goarch.sh.  Use the new script to collect the values for\n    all architectures to make them available in go/types.\n    \n    Also fix cmd/vet to pass the right compiler when it calls SizesFor.\n    \n    This fixes cmd/vet for systems that are not implemented in the gc\n    toolchain, such as alpha and ia64.\n    \n    Reviewed-on: https://go-review.googlesource.com/87635\n\nFrom-SVN: r256655", "tree": {"sha": "660362db6d65127cb1c0671cd4055146fd4ab6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660362db6d65127cb1c0671cd4055146fd4ab6fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffad1c54d2e4b698bab8d198a65c6183e74449a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffad1c54d2e4b698bab8d198a65c6183e74449a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffad1c54d2e4b698bab8d198a65c6183e74449a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffad1c54d2e4b698bab8d198a65c6183e74449a8/comments", "author": null, "committer": null, "parents": [{"sha": "8532713fc4ebeb6c7b1026bbdb4cf5ab61ff68e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8532713fc4ebeb6c7b1026bbdb4cf5ab61ff68e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8532713fc4ebeb6c7b1026bbdb4cf5ab61ff68e3"}], "stats": {"total": 633, "additions": 351, "deletions": 282}, "files": [{"sha": "7d87aa8ab53de07d49b0cfb6dc7e524861159329", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -1,4 +1,4 @@\n-fe8481db9f5b37eb9a0c329673789eaaf1335598\n+4aa531c1765bba52848c6d71b9f57b593063d3ba\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "32e1e4dd09ef590dbe4b1193f2388d97f163c7d4", "filename": "libgo/Makefile.am", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -506,14 +506,14 @@ s-version: Makefile\n \tdone\n \techo >> version.go.tmp\n \techo \"const (\" >> version.go.tmp\n-\techo \"\tArchFamily = $(GOARCH_FAMILY)\" >> version.go.tmp\n-\techo \"\tBigEndian = $(GOARCH_BIGENDIAN)\" >> version.go.tmp\n-\techo \"\tCacheLineSize = $(GOARCH_CACHELINESIZE)\" >> version.go.tmp\n-\techo \"\tPhysPageSize = $(GOARCH_PHYSPAGESIZE)\" >> version.go.tmp\n-\techo \"\tPCQuantum = $(GOARCH_PCQUANTUM)\" >> version.go.tmp\n-\techo \"\tInt64Align = $(GOARCH_INT64ALIGN)\" >> version.go.tmp\n-\techo \"\tHugePageSize = $(GOARCH_HUGEPAGESIZE)\" >> version.go.tmp\n-\techo \"\tMinFrameSize = $(GOARCH_MINFRAMESIZE)\" >> version.go.tmp\n+\techo \"  ArchFamily = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) family`\" >> version.go.tmp\n+\techo \"  BigEndian = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) bigendian`\" >> version.go.tmp\n+\techo \"  CacheLineSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> version.go.tmp\n+\techo \"  DefaultPhysPageSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) defaultphyspagesize`\" >> version.go.tmp\n+\techo \"  HugePageSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) hugepagesize`\" >> version.go.tmp\n+\techo \"  Int64Align = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) int64align`\" >> version.go.tmp\n+\techo \"  MinFrameSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) minframesize`\" >> version.go.tmp\n+\techo \"  PCQuantum = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) pcquantum`\" >> version.go.tmp\n \techo \")\" >> version.go.tmp\n \techo >> version.go.tmp\n \tfor a in $(ALLGOOS); do \\\n@@ -548,6 +548,21 @@ s-objabi: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh objabi.go.tmp objabi.go\n \t$(STAMP) $@\n \n+gccgosizes.go: s-gccgosizes; @true\n+s-gccgosizes: Makefile goarch.sh\n+\trm -f gccgosizes.go.tmp\n+\techo \"package types\" > gccgosizes.go.tmp\n+\techo >> gccgosizes.go.tmp\n+\techo \"var gccgoArchSizes = map[string]*StdSizes{\" >> gccgosizes.go.tmp\n+\tfor a in $(ALLGOARCH); do \\\n+\t  ptrsize=`$(SHELL) $(srcdir)/goarch.sh $$a ptrsize`; \\\n+\t  maxalign=`$(SHELL) $(srcdir)/goarch.sh $$a maxalign`; \\\n+\t  echo \"\t\\\"$$a\\\": {$${ptrsize}, $${maxalign}},\" >> gccgosizes.go.tmp; \\\n+\tdone\n+\techo \"}\" >> gccgosizes.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh gccgosizes.go.tmp gccgosizes.go\n+\t$(STAMP) $@\n+\n runtime_sysinfo.go: s-runtime_sysinfo; @true\n s-runtime_sysinfo: $(srcdir)/mkrsysinfo.sh gen-sysinfo.go\n \tGOARCH=$(GOARCH) GOOS=$(GOOS) $(SHELL) $(srcdir)/mkrsysinfo.sh\n@@ -1159,6 +1174,9 @@ runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n extra_go_files_runtime_internal_sys = version.go\n runtime/internal/sys.lo.dep: $(extra_go_files_runtime_internal_sys)\n \n+extra_go_files_go_types = gccgosizes.go\n+go/types.lo.dep: $(extra_go_files_go_types)\n+\n extra_go_files_cmd_internal_objabi = objabi.go\n cmd/internal/objabi.lo.dep: $(extra_go_files_cmd_internal_objabi)\n "}, {"sha": "4c69dbd7f26343324afafeb63cd5368454f7cce1", "filename": "libgo/Makefile.in", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -303,14 +303,6 @@ EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n GOARCH = @GOARCH@\n-GOARCH_BIGENDIAN = @GOARCH_BIGENDIAN@\n-GOARCH_CACHELINESIZE = @GOARCH_CACHELINESIZE@\n-GOARCH_FAMILY = @GOARCH_FAMILY@\n-GOARCH_HUGEPAGESIZE = @GOARCH_HUGEPAGESIZE@\n-GOARCH_INT64ALIGN = @GOARCH_INT64ALIGN@\n-GOARCH_MINFRAMESIZE = @GOARCH_MINFRAMESIZE@\n-GOARCH_PCQUANTUM = @GOARCH_PCQUANTUM@\n-GOARCH_PHYSPAGESIZE = @GOARCH_PHYSPAGESIZE@\n GOC = @GOC@\n GOCFLAGS = $(CFLAGS)\n GOOS = @GOOS@\n@@ -1212,6 +1204,7 @@ runtime_internal_sys_lo_check_GOCFLAGS = -fgo-compiling-runtime\n # Also use -fno-inline to get better results from the memory profiler.\n runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n extra_go_files_runtime_internal_sys = version.go\n+extra_go_files_go_types = gccgosizes.go\n extra_go_files_cmd_internal_objabi = objabi.go\n extra_go_files_cmd_go_internal_cfg = zdefaultcc.go\n extra_go_files_cmd_go_internal_load = zstdpkglist.go\n@@ -3095,14 +3088,14 @@ s-version: Makefile\n \tdone\n \techo >> version.go.tmp\n \techo \"const (\" >> version.go.tmp\n-\techo \"\tArchFamily = $(GOARCH_FAMILY)\" >> version.go.tmp\n-\techo \"\tBigEndian = $(GOARCH_BIGENDIAN)\" >> version.go.tmp\n-\techo \"\tCacheLineSize = $(GOARCH_CACHELINESIZE)\" >> version.go.tmp\n-\techo \"\tPhysPageSize = $(GOARCH_PHYSPAGESIZE)\" >> version.go.tmp\n-\techo \"\tPCQuantum = $(GOARCH_PCQUANTUM)\" >> version.go.tmp\n-\techo \"\tInt64Align = $(GOARCH_INT64ALIGN)\" >> version.go.tmp\n-\techo \"\tHugePageSize = $(GOARCH_HUGEPAGESIZE)\" >> version.go.tmp\n-\techo \"\tMinFrameSize = $(GOARCH_MINFRAMESIZE)\" >> version.go.tmp\n+\techo \"  ArchFamily = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) family`\" >> version.go.tmp\n+\techo \"  BigEndian = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) bigendian`\" >> version.go.tmp\n+\techo \"  CacheLineSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> version.go.tmp\n+\techo \"  DefaultPhysPageSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) defaultphyspagesize`\" >> version.go.tmp\n+\techo \"  HugePageSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) hugepagesize`\" >> version.go.tmp\n+\techo \"  Int64Align = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) int64align`\" >> version.go.tmp\n+\techo \"  MinFrameSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) minframesize`\" >> version.go.tmp\n+\techo \"  PCQuantum = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) pcquantum`\" >> version.go.tmp\n \techo \")\" >> version.go.tmp\n \techo >> version.go.tmp\n \tfor a in $(ALLGOOS); do \\\n@@ -3137,6 +3130,21 @@ s-objabi: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh objabi.go.tmp objabi.go\n \t$(STAMP) $@\n \n+gccgosizes.go: s-gccgosizes; @true\n+s-gccgosizes: Makefile goarch.sh\n+\trm -f gccgosizes.go.tmp\n+\techo \"package types\" > gccgosizes.go.tmp\n+\techo >> gccgosizes.go.tmp\n+\techo \"var gccgoArchSizes = map[string]*StdSizes{\" >> gccgosizes.go.tmp\n+\tfor a in $(ALLGOARCH); do \\\n+\t  ptrsize=`$(SHELL) $(srcdir)/goarch.sh $$a ptrsize`; \\\n+\t  maxalign=`$(SHELL) $(srcdir)/goarch.sh $$a maxalign`; \\\n+\t  echo \"\t\\\"$$a\\\": {$${ptrsize}, $${maxalign}},\" >> gccgosizes.go.tmp; \\\n+\tdone\n+\techo \"}\" >> gccgosizes.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh gccgosizes.go.tmp gccgosizes.go\n+\t$(STAMP) $@\n+\n runtime_sysinfo.go: s-runtime_sysinfo; @true\n s-runtime_sysinfo: $(srcdir)/mkrsysinfo.sh gen-sysinfo.go\n \tGOARCH=$(GOARCH) GOOS=$(GOOS) $(SHELL) $(srcdir)/mkrsysinfo.sh\n@@ -3313,6 +3321,7 @@ $(foreach package,$(GOTOOL_PACKAGES),$(eval $(call PACKAGE_template,$(package)))\n runtime.lo.dep: $(extra_go_files_runtime)\n syscall.lo.dep: $(extra_go_files_syscall)\n runtime/internal/sys.lo.dep: $(extra_go_files_runtime_internal_sys)\n+go/types.lo.dep: $(extra_go_files_go_types)\n cmd/internal/objabi.lo.dep: $(extra_go_files_cmd_internal_objabi)\n cmd/go/internal/cfg.lo.dep: $(extra_go_files_cmd_go_internal_cfg)\n cmd/go/internal/load.lo.dep: $(extra_go_files_cmd_go_internal_load)"}, {"sha": "d0550c37c55a9bd95b3c96e8092566c1f9237137", "filename": "libgo/configure", "status": "modified", "additions": 22, "deletions": 124, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -632,14 +632,6 @@ GO_LIBCALL_OS_ARCH_FILE\n GO_LIBCALL_OS_FILE\n ALLGOARCHFAMILY\n ALLGOARCH\n-GOARCH_MINFRAMESIZE\n-GOARCH_HUGEPAGESIZE\n-GOARCH_INT64ALIGN\n-GOARCH_PCQUANTUM\n-GOARCH_PHYSPAGESIZE\n-GOARCH_CACHELINESIZE\n-GOARCH_BIGENDIAN\n-GOARCH_FAMILY\n GOARCH\n USE_DEJAGNU\n ALLGOOS\n@@ -11114,7 +11106,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11118 \"configure\"\n+#line 11109 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11220,7 +11212,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11224 \"configure\"\n+#line 11215 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13644,46 +13636,41 @@ esac\n # All known GOARCH values.  This is the union of all architectures\n # supported by the gofrontend and all architectures supported by the\n # gc toolchain.\n-# N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n+# To add a new architecture:\n+# - add it to this list\n+# - if appropriate, add an entry to ALLGOARCHFAMILY below\n+# - add an entry to the case on ${host} below to set GOARCH\n+# - update goarchList in libgo/go/go/build/syslist.go\n+# - update goarch.sh to report the values for this architecture\n+# - update go-set-goarch in gcc/testsuite/go.test/go-test.exp\n+# - update ptrSizeMap and intSizeMap in libgo/go/cmd/cgo/main.go\n+# - update arch lists in libgo/match.sh\n+# - update arch lists in libgo/testsuite/gotest\n+# - update +build lines in several places\n+#   - libgo/go/runtime/lfstack_NNbit.go\n+#   - libgo/go/runtime/hashNN.go\n+#   - libgo/go/runtime/unalignedN.go\n+#   - libgo/go/syscall/endian_XX.go\n+#   - possibly others\n+# - possibly update files in libgo/go/internal/syscall/unix\n ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le s390 s390x sh shbe sparc sparc64\"\n \n-# All known GOARCH_FAMILY values.\n+# All known GOARCH family values.\n ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SH SPARC SPARC64\"\n \n GOARCH=unknown\n-GOARCH_FAMILY=unknown\n-GOARCH_BIGENDIAN=false\n-GOARCH_CACHELINESIZE=64\n-GOARCH_PHYSPAGESIZE=4096\n-GOARCH_PCQUANTUM=1\n-GOARCH_INT64ALIGN=8\n-GOARCH_HUGEPAGESIZE=0\n-GOARCH_MINFRAMESIZE=0\n case ${host} in\n   alpha*-*-*)\n     GOARCH=alpha\n-    GOARCH_FAMILY=ALPHA\n-    GOARCH_PHYSPAGESIZE=8192\n-    GOARCH_PCQUANTUM=4\n     ;;\n   aarch64-*-*)\n     GOARCH=arm64\n-    GOARCH_FAMILY=ARM64\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PHYSPAGESIZE=65536\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=8\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     GOARCH=arm\n-    GOARCH_FAMILY=ARM\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=4\n     case ${host} in\n       arm*b*-*-*)\n \tGOARCH=armbe\n-        GOARCH_BIGENDIAN=true\n \t;;\n     esac\n     ;;\n@@ -13697,31 +13684,16 @@ case ${host} in\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   GOARCH=386\n-GOARCH_FAMILY=I386\n-GOARCH_INT64ALIGN=4\n-GOARCH_HUGEPAGESIZE=\"1 << 21\"\n-\n else\n   GOARCH=amd64\n-GOARCH_FAMILY=AMD64\n-GOARCH_HUGEPAGESIZE=\"1 << 21\"\n-\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n   ia64-*-*)\n     GOARCH=ia64\n-    GOARCH_FAMILY=IA64\n-    GOARCH_CACHELINESIZE=128\n-    GOARCH_PHYSPAGESIZE=65536\n     ;;\n   m68k*-*-*)\n     GOARCH=m68k\n-    GOARCH_FAMILY=M68K\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_INT64ALIGN=2\n     ;;\n   mips*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13767,27 +13739,11 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     \"n32\") GOARCH=mips64p32 ;;\n     \"n64\") GOARCH=mips64 ;;\n     esac\n-    case \"$mips_abi\" in\n-    \"o32\" | \"n32\")\n-        GOARCH_FAMILY=MIPS\n-\tGOARCH_MINFRAMESIZE=4\n-        ;;\n-    \"n64\")\n-        GOARCH_FAMILY=MIPS64\n-\tGOARCH_MINFRAMESIZE=8\n-        ;;\n-    esac\n     case \"${host}\" in\n     mips*el-*-*)\n         GOARCH=\"${GOARCH}le\"\n         ;;\n-    *)\n-\tGOARCH_BIGENDIAN=true\n-        ;;\n     esac\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PHYSPAGESIZE=16384\n-    GOARCH_PCQUANTUM=4\n     ;;\n   rs6000*-*-* | powerpc*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13799,12 +13755,8 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   GOARCH=ppc\n-GOARCH_FAMILY=PPC\n-GOARCH_BIGENDIAN=true\n-\n else\n \n-GOARCH_FAMILY=PPC64\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -13814,18 +13766,12 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   GOARCH=ppc64le\n-\n else\n   GOARCH=ppc64\n-GOARCH_BIGENDIAN=true\n-\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    GOARCH_PHYSPAGESIZE=65536\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=32\n     ;;\n   s390*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13837,49 +13783,16 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   GOARCH=s390\n-GOARCH_FAMILY=S390\n-GOARCH_MINFRAMESIZE=4\n-\n else\n   GOARCH=s390x\n-GOARCH_FAMILY=S390X\n-GOARCH_MINFRAMESIZE=8\n-\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=256\n-    GOARCH_PCQUANTUM=2\n     ;;\n-  sh3eb*-*-*)\n+  sh3eb*-*-* | sh4eb*-*-*)\n     GOARCH=shbe\n-    GOARCH_FAMILY=SH\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n     ;;\n-  sh3*-*-*)\n+  sh3*-*-* | sh4*-*-*)\n     GOARCH=sh\n-    GOARCH_FAMILY=SH\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n-    ;;\n-  sh4eb*-*-*)\n-    GOARCH=shbe\n-    GOARCH_FAMILY=SH\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n-    ;;\n-  sh4*-*-*)\n-    GOARCH=sh\n-    GOARCH_FAMILY=SH\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n     ;;\n   sparc*-*-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -13891,31 +13804,16 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   GOARCH=sparc\n-GOARCH_FAMILY=SPARC\n-\n else\n   GOARCH=sparc64\n-GOARCH_FAMILY=SPARC64\n-\n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_PHYSPAGESIZE=8192\n-    GOARCH_PCQUANTUM=4\n     ;;\n esac\n \n \n \n \n-\n-\n-\n-\n-\n-\n-\n-\n GO_LIBCALL_OS_FILE=\n GO_LIBCALL_OS_ARCH_FILE=\n GO_SYSCALL_OS_FILE="}, {"sha": "c497e78c31a3f7558ca895dbecf3b4ce189fa8dc", "filename": "libgo/configure.ac", "status": "modified", "additions": 29, "deletions": 122, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -207,46 +207,41 @@ AC_SUBST(USE_DEJAGNU)\n # All known GOARCH values.  This is the union of all architectures\n # supported by the gofrontend and all architectures supported by the\n # gc toolchain.\n-# N.B. Keep in sync with gcc/testsuite/go.test/go-test.exp (go-set-goarch).\n+# To add a new architecture:\n+# - add it to this list\n+# - if appropriate, add an entry to ALLGOARCHFAMILY below\n+# - add an entry to the case on ${host} below to set GOARCH\n+# - update goarchList in libgo/go/go/build/syslist.go\n+# - update goarch.sh to report the values for this architecture\n+# - update go-set-goarch in gcc/testsuite/go.test/go-test.exp\n+# - update ptrSizeMap and intSizeMap in libgo/go/cmd/cgo/main.go\n+# - update arch lists in libgo/match.sh\n+# - update arch lists in libgo/testsuite/gotest\n+# - update +build lines in several places\n+#   - libgo/go/runtime/lfstack_NNbit.go\n+#   - libgo/go/runtime/hashNN.go\n+#   - libgo/go/runtime/unalignedN.go\n+#   - libgo/go/syscall/endian_XX.go\n+#   - possibly others\n+# - possibly update files in libgo/go/internal/syscall/unix\n ALLGOARCH=\"386 alpha amd64 amd64p32 arm armbe arm64 arm64be ia64 m68k mips mipsle mips64 mips64le mips64p32 mips64p32le ppc ppc64 ppc64le s390 s390x sh shbe sparc sparc64\"\n \n-# All known GOARCH_FAMILY values.\n+# All known GOARCH family values.\n ALLGOARCHFAMILY=\"I386 ALPHA AMD64 ARM ARM64 IA64 M68K MIPS MIPS64 PPC PPC64 S390 S390X SH SPARC SPARC64\"\n \n GOARCH=unknown\n-GOARCH_FAMILY=unknown\n-GOARCH_BIGENDIAN=false\n-GOARCH_CACHELINESIZE=64\n-GOARCH_PHYSPAGESIZE=4096\n-GOARCH_PCQUANTUM=1\n-GOARCH_INT64ALIGN=8\n-GOARCH_HUGEPAGESIZE=0\n-GOARCH_MINFRAMESIZE=0\n case ${host} in\n   alpha*-*-*)\n     GOARCH=alpha\n-    GOARCH_FAMILY=ALPHA\n-    GOARCH_PHYSPAGESIZE=8192\n-    GOARCH_PCQUANTUM=4\n     ;;\n   aarch64-*-*)\n     GOARCH=arm64\n-    GOARCH_FAMILY=ARM64\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PHYSPAGESIZE=65536\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=8\n     ;;\n   arm*-*-* | strongarm*-*-* | ep9312*-*-* | xscale-*-*)\n     GOARCH=arm\n-    GOARCH_FAMILY=ARM\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=4\n     case ${host} in\n       arm*b*-*-*)\n \tGOARCH=armbe\n-        GOARCH_BIGENDIAN=true\n \t;;\n     esac\n     ;;\n@@ -257,29 +252,14 @@ changequote([,])dnl\n #ifdef __x86_64__\n #error 64-bit\n #endif],\n-[GOARCH=386\n-GOARCH_FAMILY=I386\n-GOARCH_INT64ALIGN=4\n-GOARCH_HUGEPAGESIZE=\"1 << 21\"\n-],\n-[GOARCH=amd64\n-GOARCH_FAMILY=AMD64\n-GOARCH_HUGEPAGESIZE=\"1 << 21\"\n-])\n+[GOARCH=386],\n+[GOARCH=amd64])\n     ;;\n   ia64-*-*)\n     GOARCH=ia64\n-    GOARCH_FAMILY=IA64\n-    GOARCH_CACHELINESIZE=128\n-    GOARCH_PHYSPAGESIZE=65536\n     ;;\n   m68k*-*-*)\n     GOARCH=m68k\n-    GOARCH_FAMILY=M68K\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_INT64ALIGN=2\n     ;;\n   mips*-*-*)\n     AC_COMPILE_IFELSE([\n@@ -304,123 +284,50 @@ GOARCH_HUGEPAGESIZE=\"1 << 21\"\n     \"n32\") GOARCH=mips64p32 ;;\n     \"n64\") GOARCH=mips64 ;;\n     esac\n-    case \"$mips_abi\" in\n-    \"o32\" | \"n32\")\n-        GOARCH_FAMILY=MIPS\n-\tGOARCH_MINFRAMESIZE=4\n-        ;;\n-    \"n64\")\n-        GOARCH_FAMILY=MIPS64\n-\tGOARCH_MINFRAMESIZE=8\n-        ;;\n-    esac\n     case \"${host}\" in\n     mips*el-*-*)\n         GOARCH=\"${GOARCH}le\"\n         ;;\n-    *)\n-\tGOARCH_BIGENDIAN=true\n-        ;;\n     esac\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PHYSPAGESIZE=16384\n-    GOARCH_PCQUANTUM=4\n     ;;\n   rs6000*-*-* | powerpc*-*-*)\n     AC_COMPILE_IFELSE([\n #ifdef _ARCH_PPC64\n #error 64-bit\n #endif],\n-[GOARCH=ppc\n-GOARCH_FAMILY=PPC\n-GOARCH_BIGENDIAN=true\n-],\n+[GOARCH=ppc],\n     [\n-GOARCH_FAMILY=PPC64\n AC_COMPILE_IFELSE([\n #if defined(_BIG_ENDIAN) || defined(__BIG_ENDIAN__)\n #error 64be\n #endif],\n-[GOARCH=ppc64le\n-],\n-[GOARCH=ppc64\n-GOARCH_BIGENDIAN=true\n-])])\n-    GOARCH_PHYSPAGESIZE=65536\n-    GOARCH_PCQUANTUM=4\n-    GOARCH_MINFRAMESIZE=32\n+[GOARCH=ppc64le],\n+[GOARCH=ppc64])])\n     ;;\n   s390*-*-*)\n     AC_COMPILE_IFELSE([\n #if defined(__s390x__)\n #error 64-bit\n #endif],\n-[GOARCH=s390\n-GOARCH_FAMILY=S390\n-GOARCH_MINFRAMESIZE=4\n-], [GOARCH=s390x\n-GOARCH_FAMILY=S390X\n-GOARCH_MINFRAMESIZE=8\n-])\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=256\n-    GOARCH_PCQUANTUM=2\n-    ;;\n-  sh3eb*-*-*)\n-    GOARCH=shbe\n-    GOARCH_FAMILY=SH\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n+[GOARCH=s390],\n+[GOARCH=s390x])\n     ;;\n-  sh3*-*-*)\n-    GOARCH=sh\n-    GOARCH_FAMILY=SH\n-    GOARCH_CACHELINESIZE=16\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n-    ;;\n-  sh4eb*-*-*)\n+  sh3eb*-*-* | sh4eb*-*-*)\n     GOARCH=shbe\n-    GOARCH_FAMILY=SH\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n     ;;\n-  sh4*-*-*)\n+  sh3*-*-* | sh4*-*-*)\n     GOARCH=sh\n-    GOARCH_FAMILY=SH\n-    GOARCH_CACHELINESIZE=32\n-    GOARCH_PCQUANTUM=2\n-    GOARCH_MINFRAMESIZE=4\n     ;;\n   sparc*-*-*)\n     AC_COMPILE_IFELSE([\n #if defined(__sparcv9) || defined(__arch64__)\n #error 64-bit\n #endif],\n-[GOARCH=sparc\n-GOARCH_FAMILY=SPARC\n-],\n-[GOARCH=sparc64\n-GOARCH_FAMILY=SPARC64\n-])\n-    GOARCH_BIGENDIAN=true\n-    GOARCH_PHYSPAGESIZE=8192\n-    GOARCH_PCQUANTUM=4\n+[GOARCH=sparc],\n+[GOARCH=sparc64])\n     ;;\n esac\n AC_SUBST(GOARCH)\n-AC_SUBST(GOARCH_FAMILY)\n-AC_SUBST(GOARCH_BIGENDIAN)\n-AC_SUBST(GOARCH_CACHELINESIZE)\n-AC_SUBST(GOARCH_PHYSPAGESIZE)\n-AC_SUBST(GOARCH_PCQUANTUM)\n-AC_SUBST(GOARCH_INT64ALIGN)\n-AC_SUBST(GOARCH_HUGEPAGESIZE)\n-AC_SUBST(GOARCH_MINFRAMESIZE)\n AC_SUBST(ALLGOARCH)\n AC_SUBST(ALLGOARCHFAMILY)\n "}, {"sha": "d83611b4da0b34a8988b0377b15921c48ff08976", "filename": "libgo/go/cmd/vet/types.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgo%2Fcmd%2Fvet%2Ftypes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgo%2Fcmd%2Fvet%2Ftypes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fvet%2Ftypes.go?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -12,6 +12,7 @@ import (\n \t\"go/importer\"\n \t\"go/token\"\n \t\"go/types\"\n+\t\"runtime\"\n )\n \n // stdImporter is the importer we use to import packages.\n@@ -309,4 +310,4 @@ func (f *File) hasMethod(typ types.Type, name string) bool {\n \treturn ok\n }\n \n-var archSizes = types.SizesFor(\"gc\", build.Default.GOARCH)\n+var archSizes = types.SizesFor(runtime.Compiler, build.Default.GOARCH)"}, {"sha": "05d14dae132bfa3238088a4361189376315dbd3e", "filename": "libgo/go/go/types/sizes.go", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Fsizes.go?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -178,10 +178,16 @@ var gcArchSizes = map[string]*StdSizes{\n // \"386\", \"arm\", \"arm64\", \"amd64\", \"amd64p32\", \"mips\", \"mipsle\",\n // \"mips64\", \"mips64le\", \"ppc64\", \"ppc64le\", \"s390x\".\n func SizesFor(compiler, arch string) Sizes {\n-\tif compiler != \"gc\" {\n+\tvar m map[string]*StdSizes\n+\tswitch compiler {\n+\tcase \"gc\":\n+\t\tm = gcArchSizes\n+\tcase \"gccgo\":\n+\t\tm = gccgoArchSizes\n+\tdefault:\n \t\treturn nil\n \t}\n-\ts, ok := gcArchSizes[arch]\n+\ts, ok := m[arch]\n \tif !ok {\n \t\treturn nil\n \t}"}, {"sha": "9165e6a19a3af2f9fedd743897c8870579f98b89", "filename": "libgo/goarch.sh", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgoarch.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Fgoarch.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgoarch.sh?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -0,0 +1,238 @@\n+#!/bin/sh\n+\n+# Copyright 2018 The Go Authors. All rights reserved.\n+# Use of this source code is governed by a BSD-style\n+# license that can be found in the LICENSE file.\n+\n+# Code in Makefile.am will invoke this script with two arguments.\n+# The first is a GOARCH value.  The second is a keyword.\n+# The script will print the value of that keyword for that GOARCH.\n+# Keywords:\n+# - bigendian: true or false\n+# - cachelinesize: the cache line size in bytes\n+#\t(for performance only; it's not essential to get this right)\n+# - defaultphyspagesize: the default physical page size in bytes\n+#\t(not currently used, but maybe some day)\n+# - family: the processor family, from ALLGOARCHFAMILY in configure.ac\n+# - hugepagesize: size of a huge page in bytes\n+#\t(used only to decide when to use madvise with MADV_[NO]HUGEPAGE)\n+#\t(set to 0 if there are no huge pages)\n+# - int64align: alignment of int64 type in bytes\n+# - maxalign: maximum alignment of values of Go types in bytes\n+# - minframesize: size of smallest possible function frame in bytes\n+#\t(not currently used, may never be used)\n+# - pcquantum: minimum size of a single instruction in bytes\n+# - ptrsize: size of a pointer in bytes\n+\n+if test $# -ne 2; then\n+    echo 1>&2 \"usage: goarch <goarch> <keyword>\"\n+    exit 1\n+fi\n+\n+goarch=$1\n+keyword=$2\n+\n+# Default values\n+bigendian=false\n+cachelinesize=64\n+defaultphyspagesize=4096\n+family=unknown\n+hugepagesize=0\n+int64align=8\n+maxalign=8\n+minframesize=0\n+pcquantum=1\n+ptrsize=8\n+\n+case $goarch in\n+    386)\n+\tfamily=I386\n+\thugepagesize=\"1 << 21\"\n+\tint64align=4\n+\tmaxalign=4\n+\tptrsize=4\n+\t;;\n+    alpha)\n+\tfamily=ALPHA\n+\tdefaultphyspagesize=8192\n+\tpcquantum=4\n+\t;;\n+    amd64 | amd64p32)\n+\tfamily=AMD64\n+\thugepagesize=\"1 << 21\"\n+\t;;\n+    arm | armbe)\n+\tfamily=ARM\n+\tcachelinesize=32\n+\tminframesize=4\n+\tpcquantum=4\n+\tptrsize=4\n+\tcase $goarch in\n+\t    *be)\n+\t\tbigendian=true\n+\t\t;;\n+\tesac\n+\t;;\n+    arm64 | arm64be)\n+\tfamily=ARM64\n+\tcachelinesize=32\n+\tdefaultphyspagesize=65536\n+\tminframesize=8\n+\tpcquantum=4\n+\tcase $goarch in\n+\t    *be)\n+\t\tbigendian=true\n+\t\t;;\n+\tesac\n+\t;;\n+    ia64)\n+\tfamily=IA64\n+\tcachelinesize=128\n+\tdefaultphyspagesize=65536\n+\t;;\n+    m68k)\n+\tfamily=M68K\n+\tbigendian=true\n+\tcachelinesize=16\n+\tint64align=2\n+\tmaxalign=2\n+\tpcquantum=4\n+\tptrsize=4\n+\t;;\n+    mips | mipsle | mips64p32 | mips64p32le)\n+\tfamily=MIPS\n+\tbigendian=true\n+\tcachelinesize=32\n+\tdefaultphyspagesize=16384\n+\tminframesize=4\n+\tpcquantum=4\n+\tptrsize=4\n+\tcase $goarch in\n+\t    *le)\n+\t\tbigendian=false\n+\t        ;;\n+\tesac\n+\t;;\n+    mips64 | mips64le)\n+\tfamily=MIPS64\n+\tbigendian=true\n+\tcachelinesize=32\n+\tdefaultphyspagesize=16384\n+\tminframesize=8\n+\tpcquantum=4\n+\tcase $goarch in\n+\t    *le)\n+\t\tbigendian=false\n+\t\t;;\n+\tesac\n+\t;;\n+    ppc)\n+\tfamily=PPC\n+\tbigendian=true\n+\tdefaultphyspagesize=65536\n+\tminframesize=32\n+\tpcquantum=4\n+\tptrsize=4\n+\t;;\n+    ppc64 | ppc64le)\n+\tfamily=PPC64\n+\tbigendian=true\n+\tdefaultphyspagesize=65536\n+\tminframesize=32\n+\tpcquantum=4\n+\tcase $goarch in\n+\t    *le)\n+\t\tbigendian=false\n+\t\t;;\n+\tesac\n+\t;;\n+    s390)\n+\tfamily=S390\n+\tbigendian=true\n+\tcachelinesize=256\n+\tminframesize=4\n+\tpcquantum=2\n+\tptrsize=4\n+\t;;\n+    s390x)\n+\tfamily=S390X\n+\tbigendian=true\n+\tcachelinesize=256\n+\tminframesize=8\n+\tpcquantum=2\n+\t;;\n+    sh | shbe)\n+\tfamily=SH\n+\tcachelinesize=16\n+\tint64align=4\n+\tminframesize=4\n+\tpcquantum=2\n+\tptrsize=4\n+\tcase $goarch in\n+\t    *be)\n+\t\tbigendian=true\n+\t\t;;\n+\tesac\n+\t;;\n+    sparc)\n+\tfamily=SPARC\n+\tbigendian=true\n+\tdefaultphyspagesize=8192\n+\tpcquantum=4\n+\tptrsize=4\n+\t;;\n+    sparc64)\n+\tfamily=SPARC64\n+\tbigendian=true\n+\tdefaultphyspagesize=8192\n+\tpcquantum=4\n+\t;;\n+    *)\n+\techo 1>&2 \"unrecognized goarch value \\\"$goarch\\\"\"\n+\texit 1\n+\t;;\n+esac\n+\n+if test \"$family\" = \"unknown\"; then\n+    echo 1>&2 \"internal error: no family for goarch value \\\"$goarch\\\"\"\n+    exit 1\n+fi\n+\n+case $keyword in\n+    bigendian)\n+\techo $bigendian\n+\t;;\n+    cachelinesize)\n+\techo $cachelinesize\n+\t;;\n+    defaultphyspagesize)\n+\techo $defaultphyspagesize\n+\t;;\n+    family)\n+\techo $family\n+\t;;\n+    hugepagesize)\n+\techo $hugepagesize\n+\t;;\n+    int64align)\n+\techo $int64align\n+\t;;\n+    maxalign)\n+\techo $maxalign\n+\t;;\n+    minframesize)\n+\techo $minframesize\n+\t;;\n+    pcquantum)\n+\techo $pcquantum\n+\t;;\n+    ptrsize)\n+\techo $ptrsize\n+\t;;\n+    *)\n+\techo 1>&2 \"unrecognized keyword \\\"$keyword\\\"\"\n+\texit 1\n+\t;;\n+esac\n+\n+exit 0"}, {"sha": "fc02e093ef80322153658b2e7dab6f3f8c2eb12b", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffad1c54d2e4b698bab8d198a65c6183e74449a8/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=ffad1c54d2e4b698bab8d198a65c6183e74449a8", "patch": "@@ -107,14 +107,6 @@ EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n GOARCH = @GOARCH@\n-GOARCH_BIGENDIAN = @GOARCH_BIGENDIAN@\n-GOARCH_CACHELINESIZE = @GOARCH_CACHELINESIZE@\n-GOARCH_FAMILY = @GOARCH_FAMILY@\n-GOARCH_HUGEPAGESIZE = @GOARCH_HUGEPAGESIZE@\n-GOARCH_INT64ALIGN = @GOARCH_INT64ALIGN@\n-GOARCH_MINFRAMESIZE = @GOARCH_MINFRAMESIZE@\n-GOARCH_PCQUANTUM = @GOARCH_PCQUANTUM@\n-GOARCH_PHYSPAGESIZE = @GOARCH_PHYSPAGESIZE@\n GOC = @GOC@\n GOCFLAGS = @GOCFLAGS@\n GOOS = @GOOS@"}]}