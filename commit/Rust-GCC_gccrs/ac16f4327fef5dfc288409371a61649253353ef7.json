{"sha": "ac16f4327fef5dfc288409371a61649253353ef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxNmY0MzI3ZmVmNWRmYzI4ODQwOTM3MWE2MTY0OTI1MzM1M2VmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T22:18:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T22:18:05Z"}, "message": "libcpp: Fix up -fdirectives-only preprocessing [PR98882]\n\nGCC 11 ICEs on all -fdirectives-only preprocessing when the files don't end\nwith a newline.\n\nThe problem is in the assertion, for empty TUs buffer->cur == buffer->rlimit\nand so buffer->rlimit[-1] access triggers UB in the preprocessor, for\nnon-empty TUs it refers to the last character in the file, which can be\nanything.\nThe preprocessor adds a '\\n' character (or '\\r', in particular if the\nuser file ends with '\\r' then it adds another '\\r' rather than '\\n'), but\nthat is added after the limit, i.e. at buffer->rlimit[0].\n\nNow, if the routine handles occassional bumping of pos to buffer->rlimit + 1,\nI think it is just the assert that needs changing, usually we read from *pos\nif pos < limit and then e.g. if it is '\\r', look at the following character\n(which could be one of those '\\n' or '\\r' at buffer->rlimit[0]).  There is\nalso the case where for '\\\\' before the limit we read following character\nand if it is '\\n', do one thing, if it is '\\r' read another character.\nBut in that case if '\\\\' was the last char in the TU, the limit char will be\n'\\n', so we are ok.\n\n2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/98882\n\t* lex.c (cpp_directive_only_process): Don't assert that rlimit[-1]\n\tis a newline, instead assert that rlimit[0] is either newline or\n\tcarriage return.  When seeing '\\\\' followed by '\\r', check limit\n\tbefore accessing pos[1].\n\n\t* gcc.dg/cpp/pr98882.c: New test.", "tree": {"sha": "c424af9f0a12d53c963ef6b11203fb7e201fc89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c424af9f0a12d53c963ef6b11203fb7e201fc89e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac16f4327fef5dfc288409371a61649253353ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac16f4327fef5dfc288409371a61649253353ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac16f4327fef5dfc288409371a61649253353ef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac16f4327fef5dfc288409371a61649253353ef7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34215a7a3a359d700a520f1d5bdaec835f0b5180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34215a7a3a359d700a520f1d5bdaec835f0b5180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34215a7a3a359d700a520f1d5bdaec835f0b5180"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "e831df09d0ee02548cc41ae8d70d66ff186b6c63", "filename": "gcc/testsuite/gcc.dg/cpp/pr98882.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac16f4327fef5dfc288409371a61649253353ef7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr98882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac16f4327fef5dfc288409371a61649253353ef7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr98882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr98882.c?ref=ac16f4327fef5dfc288409371a61649253353ef7", "patch": "@@ -0,0 +1,6 @@\n+/* PR preprocessor/98882 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fdirectives-only\" } */\n+\n+/* Last line does not end with a newline.  */\n+    /*Here*/\n\\ No newline at end of file"}, {"sha": "06bcc31c87e7da03e47cd665c9db6b1a60a26ead", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac16f4327fef5dfc288409371a61649253353ef7/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac16f4327fef5dfc288409371a61649253353ef7/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=ac16f4327fef5dfc288409371a61649253353ef7", "patch": "@@ -4318,9 +4318,9 @@ cpp_directive_only_process (cpp_reader *pfile,\n       buffer->cur_note = buffer->notes_used = 0;\n       buffer->cur = buffer->line_base = buffer->next_line;\n       buffer->need_line = false;\n-      /* Files always end in a newline.  We rely on this for\n+      /* Files always end in a newline or carriage return.  We rely on this for\n \t character peeking safety.  */\n-      gcc_assert (buffer->rlimit[-1] == '\\n');\n+      gcc_assert (buffer->rlimit[0] == '\\n' || buffer->rlimit[0] == '\\r');\n \n       const unsigned char *base = buffer->cur;\n       unsigned line_count = 0;"}]}