{"sha": "1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwNWJmNGM5YzUzMjQ2MzljYTRiMGE2NTI5YjVlNGE0M2ViMzFkYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-02-26T21:08:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-02-26T21:08:22Z"}, "message": "sparc-opts.h (enum processor_type): Rename to...\n\n\t* config/sparc/sparc-opts.h (enum processor_type): Rename to...\n\t(enum sparc_processor_type): ...this.\n\t(enum sparc_code_model_type): New enumeration type.\n\t(enum sparc_memory_model_type): Tweak comments.\n\t* config/sparc/sparc.opt (mcpu): Adjust to above renaming.\n\t(mtune): Likewise.\n\t(mcmodel): Use sparc_code_model enumeration and variable.\n\t(sparc_code_model): New enumeration.\n\t(mdebug): Add Undocumented marker.\n\t* config/sparc/sparc.h (enum cmodel): Delete.\n\t(sparc_cmodel): Likewise.\n\t(TARGET_CM_MEDLOW): Adjust to above renaming.\n\t(TARGET_CM_MEDMID): Likewise.\n\t(TARGET_CM_MEDANY): Likewise.\n\t(TARGET_CM_EMBMEDANY): Likewise.\n\t* config/sparc/sparc.c (sparc_cmodel): Delete.\n\t(sparc_option_override): Remove string/value mapping support for the\n\tcode model.  Move code and memory model support to after the handling\n\tof target flags.  Do private machine setup last.\n\t(sparc_emit_set_symbolic_const64): Use sparc_code_model.\n\t(sparc_legitimize_reload_address): Likewise.\n\t(sparc_output_mi_thunk): Likewise.\n\t* config/sparc/sparc.md (cpu): Adjust comment to above renaming.\n\nFrom-SVN: r269232", "tree": {"sha": "f977d294906902352ffe399727e600db00f94600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f977d294906902352ffe399727e600db00f94600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/comments", "author": null, "committer": null, "parents": [{"sha": "9bc83f27a703bd7d2393638e0ef93f506ac8bb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc83f27a703bd7d2393638e0ef93f506ac8bb03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc83f27a703bd7d2393638e0ef93f506ac8bb03"}], "stats": {"total": 279, "additions": 148, "deletions": 131}, "files": [{"sha": "bf5cf95fe2629842410b794060d33946995dcfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -1,3 +1,29 @@\n+2019-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc-opts.h (enum processor_type): Rename to...\n+\t(enum sparc_processor_type): ...this.\n+\t(enum sparc_code_model_type): New enumeration type.\n+\t(enum sparc_memory_model_type): Tweak comments.\n+\t* config/sparc/sparc.opt (mcpu): Adjust to above renaming.\n+\t(mtune): Likewise.\n+\t(mcmodel): Use sparc_code_model enumeration and variable.\n+\t(sparc_code_model): New enumeration.\n+\t(mdebug): Add Undocumented marker.\n+\t* config/sparc/sparc.h (enum cmodel): Delete.\n+\t(sparc_cmodel): Likewise.\n+\t(TARGET_CM_MEDLOW): Adjust to above renaming.\n+\t(TARGET_CM_MEDMID): Likewise.\n+\t(TARGET_CM_MEDANY): Likewise.\n+\t(TARGET_CM_EMBMEDANY): Likewise.\n+\t* config/sparc/sparc.c (sparc_cmodel): Delete.\n+\t(sparc_option_override): Remove string/value mapping support for the\n+\tcode model.  Move code and memory model support to after the handling\n+\tof target flags.  Do private machine setup last.\n+\t(sparc_emit_set_symbolic_const64): Use sparc_code_model.\n+\t(sparc_legitimize_reload_address): Likewise.\n+\t(sparc_output_mi_thunk): Likewise.\n+\t* config/sparc/sparc.md (cpu): Adjust comment to above renaming.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89500"}, {"sha": "3018f0180ebf50377d4dceb92032e04fcc149c95", "filename": "gcc/config/sparc/sparc-opts.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -20,10 +20,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef SPARC_OPTS_H\n #define SPARC_OPTS_H\n \n-/* Processor type.\n+/* SPARC processor type.\n    These must match the values for the cpu attribute in sparc.md and\n    the table in sparc_option_override.  */\n-enum processor_type {\n+enum sparc_processor_type {\n   PROCESSOR_V7,\n   PROCESSOR_CYPRESS,\n   PROCESSOR_V8,\n@@ -50,10 +50,19 @@ enum processor_type {\n   PROCESSOR_NATIVE\n };\n \n-/* Sparc system memory model.  See Appendix D in the Sparc V9 manual\n-   for formal specification, and Appendix J for more discussion.  */\n+/* SPARC-V9 code model type.  See sparc.h for the full description.  */\n+enum sparc_code_model_type {\n+  CM_32,\t/* 32-bit address space.  */\n+  CM_MEDLOW,\t/* 32-bit address space.  */\n+  CM_MEDMID,\t/* 44-bit address space.  */\n+  CM_MEDANY,\t/* 64-bit address space.  */\n+  CM_EMBMEDANY\t/* 64-bit address space.  */\n+};\n+\n+/* SPARC memory model type.  See Appendix D in the SPARC-V9 manual\n+   for formal specification and Appendix J for more discussion.  */\n enum sparc_memory_model_type {\n-  SMM_DEFAULT,\t/* Uninitialized.  */\n+  SMM_DEFAULT,\t/* Processor default.  */\n   SMM_RMO,\t/* Relaxed Memory Order.  */\n   SMM_PSO,\t/* Partial Store Order.  */\n   SMM_TSO,\t/* Total Store Order.  */"}, {"sha": "7991bc25453323f35483ac6a82d2bf47b05d987a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 54, "deletions": 79, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -724,11 +724,6 @@ static const struct attribute_spec sparc_attribute_table[] =\n };\n #endif\n \f\n-/* Option handling.  */\n-\n-/* Parsed value.  */\n-enum cmodel sparc_cmodel;\n-\n char sparc_hard_reg_printed[8];\n \n /* Initialize the GCC target structure.  */\n@@ -1636,22 +1631,10 @@ dump_target_flags (const char *prefix, const int flags)\n static void\n sparc_option_override (void)\n {\n-  static struct code_model {\n-    const char *const name;\n-    const enum cmodel value;\n-  } const cmodels[] = {\n-    { \"32\", CM_32 },\n-    { \"medlow\", CM_MEDLOW },\n-    { \"medmid\", CM_MEDMID },\n-    { \"medany\", CM_MEDANY },\n-    { \"embmedany\", CM_EMBMEDANY },\n-    { NULL, (enum cmodel) 0 }\n-  };\n-  const struct code_model *cmodel;\n   /* Map TARGET_CPU_DEFAULT to value for -m{cpu,tune}=.  */\n   static struct cpu_default {\n     const int cpu;\n-    const enum processor_type processor;\n+    const enum sparc_processor_type processor;\n   } const cpu_default[] = {\n     /* There must be one entry here for each TARGET_CPU value.  */\n     { TARGET_CPU_sparc, PROCESSOR_CYPRESS },\n@@ -1795,30 +1778,6 @@ sparc_option_override (void)\n       target_flags |= MASK_LONG_DOUBLE_128;\n     }\n \n-  /* Code model selection.  */\n-  sparc_cmodel = SPARC_DEFAULT_CMODEL;\n-\n-#ifdef SPARC_BI_ARCH\n-  if (TARGET_ARCH32)\n-    sparc_cmodel = CM_32;\n-#endif\n-\n-  if (sparc_cmodel_string != NULL)\n-    {\n-      if (TARGET_ARCH64)\n-\t{\n-\t  for (cmodel = &cmodels[0]; cmodel->name; cmodel++)\n-\t    if (strcmp (sparc_cmodel_string, cmodel->name) == 0)\n-\t      break;\n-\t  if (cmodel->name == NULL)\n-\t    error (\"bad value (%s) for -mcmodel= switch\", sparc_cmodel_string);\n-\t  else\n-\t    sparc_cmodel = cmodel->value;\n-\t}\n-      else\n-\terror (\"-mcmodel= is not supported on 32-bit systems\");\n-    }\n-\n   /* Check that -fcall-saved-REG wasn't specified for out registers.  */\n   for (i = 8; i < 16; i++)\n     if (!call_used_regs [i])\n@@ -1935,6 +1894,48 @@ sparc_option_override (void)\n   if (sparc_fix_ut699)\n     target_flags &= ~MASK_FSMULD;\n \n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+  if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n+    target_flags |= MASK_LONG_DOUBLE_128;\n+#endif\n+\n+  if (TARGET_DEBUG_OPTIONS)\n+    dump_target_flags (\"Final target_flags\", target_flags);\n+\n+  /* Set the code model if no -mcmodel option was specified.  */\n+  if (global_options_set.x_sparc_code_model)\n+    {\n+      if (TARGET_ARCH32)\n+\terror (\"-mcmodel= is not supported in 32-bit mode\");\n+    }\n+  else\n+    {\n+      if (TARGET_ARCH32)\n+\tsparc_code_model = CM_32;\n+      else\n+\tsparc_code_model = SPARC_DEFAULT_CMODEL;\n+    }\n+\n+  /* Set the memory model if no -mmemory-model option was specified.  */\n+  if (!global_options_set.x_sparc_memory_model)\n+    {\n+      /* Choose the memory model for the operating system.  */\n+      enum sparc_memory_model_type os_default = SUBTARGET_DEFAULT_MEMORY_MODEL;\n+      if (os_default != SMM_DEFAULT)\n+\tsparc_memory_model = os_default;\n+      /* Choose the most relaxed model for the processor.  */\n+      else if (TARGET_V9)\n+\tsparc_memory_model = SMM_RMO;\n+      else if (TARGET_LEON3)\n+\tsparc_memory_model = SMM_TSO;\n+      else if (TARGET_LEON)\n+\tsparc_memory_model = SMM_SC;\n+      else if (TARGET_V8)\n+\tsparc_memory_model = SMM_PSO;\n+      else\n+\tsparc_memory_model = SMM_SC;\n+    }\n+\n   /* Supply a default value for align_functions.  */\n   if (flag_align_functions && !str_align_functions)\n     {\n@@ -1958,12 +1959,7 @@ sparc_option_override (void)\n   if (!TARGET_ARCH64)\n     targetm.asm_out.unaligned_op.di = NULL;\n \n-  /* Do various machine dependent initializations.  */\n-  sparc_init_modes ();\n-\n-  /* Set up function hooks.  */\n-  init_machine_status = sparc_init_machine_status;\n-\n+  /* Set the processor costs.  */\n   switch (sparc_cpu)\n     {\n     case PROCESSOR_V7:\n@@ -2021,33 +2017,6 @@ sparc_option_override (void)\n       gcc_unreachable ();\n     };\n \n-  if (sparc_memory_model == SMM_DEFAULT)\n-    {\n-      /* Choose the memory model for the operating system.  */\n-      enum sparc_memory_model_type os_default = SUBTARGET_DEFAULT_MEMORY_MODEL;\n-      if (os_default != SMM_DEFAULT)\n-\tsparc_memory_model = os_default;\n-      /* Choose the most relaxed model for the processor.  */\n-      else if (TARGET_V9)\n-\tsparc_memory_model = SMM_RMO;\n-      else if (TARGET_LEON3)\n-\tsparc_memory_model = SMM_TSO;\n-      else if (TARGET_LEON)\n-\tsparc_memory_model = SMM_SC;\n-      else if (TARGET_V8)\n-\tsparc_memory_model = SMM_PSO;\n-      else\n-\tsparc_memory_model = SMM_SC;\n-    }\n-\n-#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n-  if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n-    target_flags |= MASK_LONG_DOUBLE_128;\n-#endif\n-\n-  if (TARGET_DEBUG_OPTIONS)\n-    dump_target_flags (\"Final target_flags\", target_flags);\n-\n   /* PARAM_SIMULTANEOUS_PREFETCHES is the number of prefetches that\n      can run at the same time.  More important, it is the threshold\n      defining when additional prefetches will be dropped by the\n@@ -2146,6 +2115,12 @@ sparc_option_override (void)\n      redundant 32-to-64-bit extensions.  */\n   if (!global_options_set.x_flag_ree && TARGET_ARCH32)\n     flag_ree = 0;\n+\n+  /* Do various machine dependent initializations.  */\n+  sparc_init_modes ();\n+\n+  /* Set up function hooks.  */\n+  init_machine_status = sparc_init_machine_status;\n }\n \f\n /* Miscellaneous utilities.  */\n@@ -2460,8 +2435,8 @@ sparc_emit_set_symbolic_const64 (rtx op0, rtx op1, rtx temp)\n       temp = gen_rtx_REG (DImode, REGNO (temp));\n     }\n \n-  /* SPARC-V9 code-model support.  */\n-  switch (sparc_cmodel)\n+  /* SPARC-V9 code model support.  */\n+  switch (sparc_code_model)\n     {\n     case CM_MEDLOW:\n       /* The range spanned by all instructions in the object is less\n@@ -5105,7 +5080,7 @@ sparc_legitimize_reload_address (rtx x, machine_mode mode,\n       && GET_MODE (x) == SImode\n       && GET_CODE (x) != LO_SUM\n       && GET_CODE (x) != HIGH\n-      && sparc_cmodel <= CM_MEDLOW\n+      && sparc_code_model <= CM_MEDLOW\n       && !(flag_pic\n \t   && (symbolic_operand (x, Pmode) || pic_address_needs_scratch (x))))\n     {\n@@ -12455,7 +12430,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t}\n       else  /* TARGET_ARCH64 */\n         {\n-\t  switch (sparc_cmodel)\n+\t  switch (sparc_code_model)\n \t    {\n \t    case CM_MEDLOW:\n \t    case CM_MEDMID:"}, {"sha": "015065ffb81e002254f09de8678af7ccc23908f9", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -90,23 +90,12 @@ along with GCC; see the file COPYING3.  If not see\n \n    Different code models are not supported in 32-bit environment.  */\n \n-enum cmodel {\n-  CM_32,\n-  CM_MEDLOW,\n-  CM_MEDMID,\n-  CM_MEDANY,\n-  CM_EMBMEDANY\n-};\n-\n-/* One of CM_FOO.  */\n-extern enum cmodel sparc_cmodel;\n-\n-/* V9 code model selection.  */\n-#define TARGET_CM_MEDLOW    (sparc_cmodel == CM_MEDLOW)\n-#define TARGET_CM_MEDMID    (sparc_cmodel == CM_MEDMID)\n-#define TARGET_CM_MEDANY    (sparc_cmodel == CM_MEDANY)\n-#define TARGET_CM_EMBMEDANY (sparc_cmodel == CM_EMBMEDANY)\n+#define TARGET_CM_MEDLOW    (sparc_code_model == CM_MEDLOW)\n+#define TARGET_CM_MEDMID    (sparc_code_model == CM_MEDMID)\n+#define TARGET_CM_MEDANY    (sparc_code_model == CM_MEDANY)\n+#define TARGET_CM_EMBMEDANY (sparc_code_model == CM_EMBMEDANY)\n \n+/* Default code model to be overridden in 64-bit environment.  */\n #define SPARC_DEFAULT_CMODEL CM_32\n \n /* Do not use the .note.GNU-stack convention by default.  */"}, {"sha": "a1bf557d3eb3579427c9f3840feedda11ea528f2", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -224,7 +224,7 @@\n ;; 'f' for all DF/TFmode values, including those that are specific to the v8.\n \n ;; Attribute for cpu type.\n-;; These must match the values of the enum processor_type in sparc-opts.h.\n+;; These must match the values of enum sparc_processor_type in sparc-opts.h.\n (define_attr \"cpu\"\n   \"v7,\n    cypress,"}, {"sha": "e5c9b09e5cb4355a60f73712b42c6a3ff9e46213", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1405bf4c9c5324639ca4b0a6529b5e4a43eb31db/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=1405bf4c9c5324639ca4b0a6529b5e4a43eb31db", "patch": "@@ -138,94 +138,112 @@ Target Report InverseMask(SV_MODE)\n Do not generate code that can only run in supervisor mode (default).\n \n mcpu=\n-Target RejectNegative Joined Var(sparc_cpu_and_features) Enum(sparc_processor_type) Init(PROCESSOR_V7)\n-Use features of and schedule code for given CPU.\n+Target RejectNegative Joined Var(sparc_cpu_and_features) Enum(sparc_processor) Init(PROCESSOR_V7)\n+Use instructions of and schedule code for given CPU.\n \n mtune=\n-Target RejectNegative Joined Var(sparc_cpu) Enum(sparc_processor_type) Init(PROCESSOR_V7)\n+Target RejectNegative Joined Var(sparc_cpu) Enum(sparc_processor) Init(PROCESSOR_V7)\n Schedule code for given CPU.\n \n Enum\n-Name(sparc_processor_type) Type(enum processor_type)\n+Name(sparc_processor) Type(enum sparc_processor_type)\n \n EnumValue\n-Enum(sparc_processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n+Enum(sparc_processor) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n \n EnumValue\n-Enum(sparc_processor_type) String(v7) Value(PROCESSOR_V7)\n+Enum(sparc_processor) String(v7) Value(PROCESSOR_V7)\n \n EnumValue\n-Enum(sparc_processor_type) String(cypress) Value(PROCESSOR_CYPRESS)\n+Enum(sparc_processor) String(cypress) Value(PROCESSOR_CYPRESS)\n \n EnumValue\n-Enum(sparc_processor_type) String(v8) Value(PROCESSOR_V8)\n+Enum(sparc_processor) String(v8) Value(PROCESSOR_V8)\n \n EnumValue\n-Enum(sparc_processor_type) String(supersparc) Value(PROCESSOR_SUPERSPARC)\n+Enum(sparc_processor) String(supersparc) Value(PROCESSOR_SUPERSPARC)\n \n EnumValue\n-Enum(sparc_processor_type) String(hypersparc) Value(PROCESSOR_HYPERSPARC)\n+Enum(sparc_processor) String(hypersparc) Value(PROCESSOR_HYPERSPARC)\n \n EnumValue\n-Enum(sparc_processor_type) String(leon) Value(PROCESSOR_LEON)\n+Enum(sparc_processor) String(leon) Value(PROCESSOR_LEON)\n \n EnumValue\n-Enum(sparc_processor_type) String(leon3) Value(PROCESSOR_LEON3)\n+Enum(sparc_processor) String(leon3) Value(PROCESSOR_LEON3)\n \n EnumValue\n-Enum(sparc_processor_type) String(leon3v7) Value(PROCESSOR_LEON3V7)\n+Enum(sparc_processor) String(leon3v7) Value(PROCESSOR_LEON3V7)\n \n EnumValue\n-Enum(sparc_processor_type) String(sparclite) Value(PROCESSOR_SPARCLITE)\n+Enum(sparc_processor) String(sparclite) Value(PROCESSOR_SPARCLITE)\n \n EnumValue\n-Enum(sparc_processor_type) String(f930) Value(PROCESSOR_F930)\n+Enum(sparc_processor) String(f930) Value(PROCESSOR_F930)\n \n EnumValue\n-Enum(sparc_processor_type) String(f934) Value(PROCESSOR_F934)\n+Enum(sparc_processor) String(f934) Value(PROCESSOR_F934)\n \n EnumValue\n-Enum(sparc_processor_type) String(sparclite86x) Value(PROCESSOR_SPARCLITE86X)\n+Enum(sparc_processor) String(sparclite86x) Value(PROCESSOR_SPARCLITE86X)\n \n EnumValue\n-Enum(sparc_processor_type) String(sparclet) Value(PROCESSOR_SPARCLET)\n+Enum(sparc_processor) String(sparclet) Value(PROCESSOR_SPARCLET)\n \n EnumValue\n-Enum(sparc_processor_type) String(tsc701) Value(PROCESSOR_TSC701)\n+Enum(sparc_processor) String(tsc701) Value(PROCESSOR_TSC701)\n \n EnumValue\n-Enum(sparc_processor_type) String(v9) Value(PROCESSOR_V9)\n+Enum(sparc_processor) String(v9) Value(PROCESSOR_V9)\n \n EnumValue\n-Enum(sparc_processor_type) String(ultrasparc) Value(PROCESSOR_ULTRASPARC)\n+Enum(sparc_processor) String(ultrasparc) Value(PROCESSOR_ULTRASPARC)\n \n EnumValue\n-Enum(sparc_processor_type) String(ultrasparc3) Value(PROCESSOR_ULTRASPARC3)\n+Enum(sparc_processor) String(ultrasparc3) Value(PROCESSOR_ULTRASPARC3)\n \n EnumValue\n-Enum(sparc_processor_type) String(niagara) Value(PROCESSOR_NIAGARA)\n+Enum(sparc_processor) String(niagara) Value(PROCESSOR_NIAGARA)\n \n EnumValue\n-Enum(sparc_processor_type) String(niagara2) Value(PROCESSOR_NIAGARA2)\n+Enum(sparc_processor) String(niagara2) Value(PROCESSOR_NIAGARA2)\n \n EnumValue\n-Enum(sparc_processor_type) String(niagara3) Value(PROCESSOR_NIAGARA3)\n+Enum(sparc_processor) String(niagara3) Value(PROCESSOR_NIAGARA3)\n \n EnumValue\n-Enum(sparc_processor_type) String(niagara4) Value(PROCESSOR_NIAGARA4)\n+Enum(sparc_processor) String(niagara4) Value(PROCESSOR_NIAGARA4)\n \n EnumValue\n-Enum(sparc_processor_type) String(niagara7) Value(PROCESSOR_NIAGARA7)\n+Enum(sparc_processor) String(niagara7) Value(PROCESSOR_NIAGARA7)\n \n EnumValue\n-Enum(sparc_processor_type) String(m8) Value(PROCESSOR_M8)\n+Enum(sparc_processor) String(m8) Value(PROCESSOR_M8)\n \n mcmodel=\n-Target RejectNegative Joined Var(sparc_cmodel_string)\n+Target RejectNegative Joined Var(sparc_code_model) Enum(sparc_code_model) Init(CM_32)\n Use given SPARC-V9 code model.\n \n+Enum\n+Name(sparc_code_model) Type(enum sparc_code_model_type)\n+\n+EnumValue\n+Enum(sparc_code_model) String(32) Value(CM_32)\n+\n+EnumValue\n+Enum(sparc_code_model) String(medlow) Value(CM_MEDLOW)\n+\n+EnumValue\n+Enum(sparc_code_model) String(medmid) Value(CM_MEDMID)\n+\n+EnumValue\n+Enum(sparc_code_model) String(medany) Value(CM_MEDANY)\n+\n+EnumValue\n+Enum(sparc_code_model) String(embmedany) Value(CM_EMBMEDANY)\n+\n mdebug=\n-Target RejectNegative Joined Var(sparc_debug_string)\n+Target RejectNegative Joined Undocumented Var(sparc_debug_string)\n Enable debug output.\n \n mstd-struct-return"}]}