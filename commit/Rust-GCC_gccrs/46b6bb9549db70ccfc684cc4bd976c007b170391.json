{"sha": "46b6bb9549db70ccfc684cc4bd976c007b170391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiNmJiOTU0OWRiNzBjY2ZjNjg0Y2M0YmQ5NzZjMDA3YjE3MDM5MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-15T04:59:42Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-15T04:59:42Z"}, "message": "README.Portability: Correct example about calling a function through a pointer to function.\n\n\t* README.Portability: Correct example about calling a function\n\tthrough a pointer to function.  Format wide paragraphs.\n\nFrom-SVN: r35043", "tree": {"sha": "f6708633a667befee64e88b682e327c3df62bcd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6708633a667befee64e88b682e327c3df62bcd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46b6bb9549db70ccfc684cc4bd976c007b170391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b6bb9549db70ccfc684cc4bd976c007b170391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b6bb9549db70ccfc684cc4bd976c007b170391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b6bb9549db70ccfc684cc4bd976c007b170391/comments", "author": null, "committer": null, "parents": [{"sha": "1b0bd03b7ffba876c9085ee02a9756ac403cae19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0bd03b7ffba876c9085ee02a9756ac403cae19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0bd03b7ffba876c9085ee02a9756ac403cae19"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "7199aea58ce40134f2b355f0b894bb4916206daa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b6bb9549db70ccfc684cc4bd976c007b170391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b6bb9549db70ccfc684cc4bd976c007b170391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46b6bb9549db70ccfc684cc4bd976c007b170391", "patch": "@@ -1,3 +1,8 @@\n+2000-07-15  Neil Booth  <NeilB@earthling.net>\n+\n+\t* README.Portability: Correct example about calling a function\n+\tthrough a pointer to function.  Format wide paragraphs.\n+\n 2000-07-15  Michael Meissner  <meissner@redhat.com>\n \n \t* README.Portability: Update integer suffixes and function"}, {"sha": "cc5fa32d56a9793d368e2a957594b3c34c8457bb", "filename": "gcc/README.Portability", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46b6bb9549db70ccfc684cc4bd976c007b170391/gcc%2FREADME.Portability", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46b6bb9549db70ccfc684cc4bd976c007b170391/gcc%2FREADME.Portability", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.Portability?ref=46b6bb9549db70ccfc684cc4bd976c007b170391", "patch": "@@ -155,22 +155,23 @@ ansidecl.h for the definitions of the above macros and more.\n #define PARAMS(paramlist)  ()         /* K+R C.  */\n #define VPARAMS(args)   (va_alist) va_dcl\n \n-One aspect of using K+R style function declarations, is you cannot have\n-arguments whose types are char, short, or float, since without prototypes (ie,\n-K+R rules), these types are promoted to int, int, and double respectively.\n+One aspect of using K+R style function declarations, is you cannot\n+have arguments whose types are char, short, or float, since without\n+prototypes (ie, K+R rules), these types are promoted to int, int, and\n+double respectively.\n \n Calling functions through pointers to functions\n -----------------------------------------------\n \n K+R C compilers require brackets around the dereferenced pointer\n-variable.  For example\n+variable, whereas ISO C relaxes the syntax.  For example\n \n typedef void (* cl_directive_handler) PARAMS ((cpp_reader *, const char *));\n-      p->handler (pfile, p->arg);\n+      *p->handler (pfile, p->arg);\n \n needs to become\n \n-      (p->handler) (pfile, p->arg);\n+      (*p->handler) (pfile, p->arg);\n \n \n Macros\n@@ -244,11 +245,12 @@ them.\n Suffixes on Integer Constants\n -----------------------------\n \n-K+R C did not accept a 'u' suffix on integer constants.  If you want to declare\n-a constant to be be unsigned, you must use an explicit cast.\n+K+R C did not accept a 'u' suffix on integer constants.  If you want\n+to declare a constant to be be unsigned, you must use an explicit\n+cast.\n \n-You should never use a 'l' suffix on integer constants ('L' is fine), since it\n-can easily be confused with the number '1'.\n+You should never use a 'l' suffix on integer constants ('L' is fine),\n+since it can easily be confused with the number '1'.\n \n \n \t\t\tCommon Coding Pitfalls"}]}