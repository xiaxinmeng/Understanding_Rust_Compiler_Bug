{"sha": "38b649ec16c965733aab9efa6bf61faae3485d92", "node_id": "C_kwDOANBUbNoAKDM4YjY0OWVjMTZjOTY1NzMzYWFiOWVmYTZiZjYxZmFhZTM0ODVkOTI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-28T19:27:52Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-28T19:27:52Z"}, "message": "Use ix86_expand_clear in ix86_split_ashl.\n\nThis patch is a one line change, to call ix86_expand_clear instead of\nemit_move_insn with const0_rtx in ix86_split_ashl, allowing the backend\nto use an xor instruction to clear a register if appropriate.\n\nThe effect is demonstrated with the following function.\n__int128 foo(__int128 x, unsigned long long b) {\n    return ((__int128)b << 72) + x;\n}\n\npreviously with -O2, GCC would generate\n\nfoo:    movl    $0, %eax\n        salq    $8, %rdx\n        addq    %rdi, %rax\n        adcq    %rsi, %rdx\n        ret\n\nwith this patch, it now generates\n\nfoo:    xorl    %eax, %eax\n        salq    $8, %rdx\n        addq    %rdi, %rax\n        adcq    %rsi, %rdx\n        ret\n\n2022-12-28  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.cc (ix86_split_ashl): Call\n\tix86_expand_clear to generate an xor instruction.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/ashlti3-1.c: New test case.", "tree": {"sha": "1de2ca386624ccfb3824eec791dff1a5375ee333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de2ca386624ccfb3824eec791dff1a5375ee333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38b649ec16c965733aab9efa6bf61faae3485d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b649ec16c965733aab9efa6bf61faae3485d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b649ec16c965733aab9efa6bf61faae3485d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b649ec16c965733aab9efa6bf61faae3485d92/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d898a17b927531bbc0de7ad0991dc3c96915d67d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d898a17b927531bbc0de7ad0991dc3c96915d67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d898a17b927531bbc0de7ad0991dc3c96915d67d"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "3eddbc9436093d90f0eb9a1ec8f4011f32a5cbe6", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b649ec16c965733aab9efa6bf61faae3485d92/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b649ec16c965733aab9efa6bf61faae3485d92/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=38b649ec16c965733aab9efa6bf61faae3485d92", "patch": "@@ -6211,7 +6211,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n       if (count >= half_width)\n \t{\n \t  emit_move_insn (high[0], low[1]);\n-\t  emit_move_insn (low[0], const0_rtx);\n+\t  ix86_expand_clear (low[0]);\n \n \t  if (count > half_width)\n \t    ix86_expand_ashl_const (high[0], count - half_width, mode);"}, {"sha": "1cf1306ea02a219729b157cdf8fff6f1c80725f0", "filename": "gcc/testsuite/gcc.target/i386/ashlti3-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38b649ec16c965733aab9efa6bf61faae3485d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fashlti3-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38b649ec16c965733aab9efa6bf61faae3485d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fashlti3-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fashlti3-1.c?ref=38b649ec16c965733aab9efa6bf61faae3485d92", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+__int128 foo(__int128 x, unsigned long long b) {\n+    return ((__int128)b << 72) + x;\n+}\n+/* { dg-final { scan-assembler-not \"\\tmovl\\[ \\\\t\\]+\\\\\\$0,\" } } */"}]}