{"sha": "27594524d8a93cddb197ad8c9d4075c5870f1473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc1OTQ1MjRkOGE5M2NkZGIxOTdhZDhjOWQ0MDc1YzU4NzBmMTQ3Mw==", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-04-28T11:14:28Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2020-04-29T14:37:18Z"}, "message": "fortran/io.c: Fix use of uninitialized variable num [PR94769]\n\nWhile bootstrapping GCC on S/390 the following warning occurs:\n\ngcc/fortran/io.c: In function 'bool gfc_resolve_dt(gfc_code*, gfc_dt*, locus*)':\ngcc/fortran/io.c:3857:7: error: 'num' may be used uninitialized in this function [-Werror=maybe-uninitialized]\n 3857 |       if (num == 0)\n      |       ^~\ngcc/fortran/io.c:3843:11: note: 'num' was declared here\n 3843 |       int num;\n\nSince gfc_resolve_dt is a non-static function we cannot assume anything about\nargument DT.  Argument DT gets passed to function check_io_constraints which\npasses values depending on DT, namely dt->asynchronous->value.character.string\nto function compare_to_allowed_values as well as argument warn which is true as\nsoon as DT->dterr is true.  Thus both arguments depend on DT.\n\nIf function compare_to_allowed_values is called with\ndt->asynchronous->value.character.string not being an allowed value, and\nALLOWED_F2003 as well as ALLOWED_GNU being NULL (which is the case at the\nparticular call side), and WARN equals true, then the function returns with a\nnon-zero value and leaves num uninitialized which renders the warning true.\n\nInitialized num to -1 and added an assert statement.\n\ngcc/fortran/ChangeLog:\n\n2020-04-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n\n        PR fortran/94769\n        * io.c (check_io_constraints): Initialize local variable num to\n        -1 and assert that it receives a meaningful value by function\n        compare_to_allowed_values.", "tree": {"sha": "aa6f9d166bf0d9c88a006852b9c173c6890af7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa6f9d166bf0d9c88a006852b9c173c6890af7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27594524d8a93cddb197ad8c9d4075c5870f1473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27594524d8a93cddb197ad8c9d4075c5870f1473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27594524d8a93cddb197ad8c9d4075c5870f1473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27594524d8a93cddb197ad8c9d4075c5870f1473/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392aa7d7adfbd84253121d2ef779bf3c627e8d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392aa7d7adfbd84253121d2ef779bf3c627e8d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392aa7d7adfbd84253121d2ef779bf3c627e8d0b"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "f245cb4d7c05c9576b957809aa538626080015b2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27594524d8a93cddb197ad8c9d4075c5870f1473/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27594524d8a93cddb197ad8c9d4075c5870f1473/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=27594524d8a93cddb197ad8c9d4075c5870f1473", "patch": "@@ -1,3 +1,10 @@\n+2020-04-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\tPR fortran/94769\n+\t* io.c (check_io_constraints): Initialize local variable num to\n+\t-1 and assert that it receives a meaningful value by function\n+\tcompare_to_allowed_values.\n+\n 2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/93956"}, {"sha": "981cf9e88ddeb7433436f25b47e47bdbef6261d3", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27594524d8a93cddb197ad8c9d4075c5870f1473/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27594524d8a93cddb197ad8c9d4075c5870f1473/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=27594524d8a93cddb197ad8c9d4075c5870f1473", "patch": "@@ -3840,7 +3840,7 @@ if (condition) \\\n \n   if (dt->asynchronous)\n     {\n-      int num;\n+      int num = -1;\n       static const char * asynchronous[] = { \"YES\", \"NO\", NULL };\n \n       /* Note: gfc_reduce_init_expr reports an error if not init-expr.  */\n@@ -3853,6 +3853,8 @@ if (condition) \\\n \t\t io_kind_name (k), warn, &dt->asynchronous->where, &num))\n \treturn false;\n \n+      gcc_checking_assert (num != -1);\n+\n       /* For \"YES\", mark related symbols as asynchronous.  */\n       if (num == 0)\n \t{"}]}