{"sha": "82e1061579796adaa39ab34da77b6c8c6ea82539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlMTA2MTU3OTc5NmFkYWEzOWFiMzRkYTc3YjZjOGM2ZWE4MjUzOQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-31T10:46:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T10:46:24Z"}, "message": "Merge #651\n\n651: Qualified paths have a mandatory initial segment r=philberty a=philberty\n\nsee https://doc.rust-lang.org/reference/paths.html#qualified-paths\r\n\r\nThe initial segment is mandatory this changes the AST to reflect this\r\nit simplifies error handling down the line.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "a6dfb0000ae748c27dafc1a06499951418bc2b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6dfb0000ae748c27dafc1a06499951418bc2b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e1061579796adaa39ab34da77b6c8c6ea82539", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLgiACRBK7hj4Ov3rIwAA6ToIAJ4jy8LO1JahOurr8xpAuQ1c\n4yVWCEbanmQE3upGuomTUZFBGXzCqykigc6sa01ciOJlSwHrrmn1aGw2uCcM2WTv\nPpfzopnAIJ3txLu2nnDdbEg3NKnKBkABEUJgWsQiZ7UQ0N933P72icEs0m/Gjppg\nk4gpdjntItyQ4C/XbTeGgwR6UmHuXQRk6ksOT4bK3To5sGEMWCAuQfJQVS+s3VBu\nlrzqZJSjhRiBZJwuur02C9iMm3dnTQ3QzVGj5jDbyuTvzGb8z8BjCMc2YbGx+3gf\n97ijsP/7tOPAiv/vFdfgsBVNfawQ9KcYvZ1yotV2sgqfc9Sh38SlGOL6DaQ9DoE=\n=O73q\n-----END PGP SIGNATURE-----\n", "payload": "tree a6dfb0000ae748c27dafc1a06499951418bc2b8e\nparent de024718701a7578225682465b2625276e55fb76\nparent 46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630406784 +0000\ncommitter GitHub <noreply@github.com> 1630406784 +0000\n\nMerge #651\n\n651: Qualified paths have a mandatory initial segment r=philberty a=philberty\n\nsee https://doc.rust-lang.org/reference/paths.html#qualified-paths\r\n\r\nThe initial segment is mandatory this changes the AST to reflect this\r\nit simplifies error handling down the line.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e1061579796adaa39ab34da77b6c8c6ea82539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e1061579796adaa39ab34da77b6c8c6ea82539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e1061579796adaa39ab34da77b6c8c6ea82539/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de024718701a7578225682465b2625276e55fb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de024718701a7578225682465b2625276e55fb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de024718701a7578225682465b2625276e55fb76"}, {"sha": "46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "6ccd3a0d4b46ed24ebd44969ba73ee4b9bc8ac61", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e1061579796adaa39ab34da77b6c8c6ea82539/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e1061579796adaa39ab34da77b6c8c6ea82539/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=82e1061579796adaa39ab34da77b6c8c6ea82539", "patch": "@@ -939,6 +939,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n class QualifiedPathInType : public TypeNoBounds\n {\n   QualifiedPathType path_type;\n+  std::unique_ptr<TypePathSegment> associated_segment;\n   std::vector<std::unique_ptr<TypePathSegment> > segments;\n   Location locus;\n \n@@ -953,9 +954,11 @@ class QualifiedPathInType : public TypeNoBounds\n public:\n   QualifiedPathInType (\n     QualifiedPathType qual_path_type,\n+    std::unique_ptr<TypePathSegment> associated_segment,\n     std::vector<std::unique_ptr<TypePathSegment> > path_segments,\n-    Location locus = Location ())\n+    Location locus)\n     : path_type (std::move (qual_path_type)),\n+      associated_segment (std::move (associated_segment)),\n       segments (std::move (path_segments)), locus (locus)\n   {}\n \n@@ -995,8 +998,8 @@ class QualifiedPathInType : public TypeNoBounds\n   static QualifiedPathInType create_error ()\n   {\n     return QualifiedPathInType (\n-      QualifiedPathType::create_error (),\n-      std::vector<std::unique_ptr<TypePathSegment> > ());\n+      QualifiedPathType::create_error (), nullptr,\n+      std::vector<std::unique_ptr<TypePathSegment> > (), Location ());\n   }\n \n   std::string as_string () const override;\n@@ -1010,6 +1013,11 @@ class QualifiedPathInType : public TypeNoBounds\n     return path_type;\n   }\n \n+  std::unique_ptr<TypePathSegment> &get_associated_segment ()\n+  {\n+    return associated_segment;\n+  }\n+\n   // TODO: this seems kinda dodgy\n   std::vector<std::unique_ptr<TypePathSegment> > &get_segments ()\n   {"}, {"sha": "1c0644d42aec84cb969ab22122d1aef3c0e58404", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e1061579796adaa39ab34da77b6c8c6ea82539/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e1061579796adaa39ab34da77b6c8c6ea82539/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=82e1061579796adaa39ab34da77b6c8c6ea82539", "patch": "@@ -6742,10 +6742,6 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n       return AST::QualifiedPathInType::create_error ();\n     }\n \n-  // parse path segments\n-  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n-  segments.reserve (1);\n-\n   // parse initial required segment\n   if (!expect_token (SCOPE_RESOLUTION))\n     {\n@@ -6765,9 +6761,9 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n \n       return AST::QualifiedPathInType::create_error ();\n     }\n-  segments.push_back (std::move (initial_segment));\n \n   // parse optional segments (as long as scope resolution operator exists)\n+  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n   const_TokenPtr t = lexer.peek_token ();\n   while (t->get_id () == SCOPE_RESOLUTION)\n     {\n@@ -6796,6 +6792,7 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n   segments.shrink_to_fit ();\n \n   return AST::QualifiedPathInType (std::move (qual_path_type),\n+\t\t\t\t   std::move (initial_segment),\n \t\t\t\t   std::move (segments), locus);\n }\n "}]}