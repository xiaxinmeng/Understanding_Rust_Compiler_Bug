{"sha": "0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxNmY4ZjQxMzFiZTRmNWJiYzc0OWZjOWEwNTQzMjQwY2QxZWZiYw==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2004-12-14T13:32:03Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2004-12-14T13:32:03Z"}, "message": "parser.c (cp_parser_uncommitted_to_tentative_parse_p): New function.\n\n\t* parser.c (cp_parser_uncommitted_to_tentative_parse_p): New function.\n\t(cp_parser_name_lookup_error): Use it.\n\t(cp_parser_check_for_invalid_template_id): Likewise.\n\t(cp_parser_skip_to_closing_parenthesis): Likewise.\n\t(cp_parser_nested_name_specifier_opt): Likewise.\n\t(cp_parser_simple_declaration, cp_parser_template_id): Likewise.\n\t(cp_parser_parameter_declaration_list): Likewise.\n\t(cp_parser_parameter_declaration): Likewise.\n\t(cp_parser_template_name): Let cp_parser_simulate_error perform\n\tthe checking.\n\t(cp_parser_committed_to_tentative_parse): Remove.\n\nFrom-SVN: r92133", "tree": {"sha": "9ab72c7a6b54182e958fee5e313e806588ac379a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab72c7a6b54182e958fee5e313e806588ac379a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc/comments", "author": null, "committer": null, "parents": [{"sha": "985791f6feb0274ab67f192ab913628428cead91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985791f6feb0274ab67f192ab913628428cead91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985791f6feb0274ab67f192ab913628428cead91"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "86610ec2db61517c0a8bcb5b6a4a886fb7d0dddd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "patch": "@@ -1,3 +1,17 @@\n+2004-12-14  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* parser.c (cp_parser_uncommitted_to_tentative_parse_p): New function.\n+\t(cp_parser_name_lookup_error): Use it.\n+\t(cp_parser_check_for_invalid_template_id): Likewise.\n+\t(cp_parser_skip_to_closing_parenthesis): Likewise.\n+\t(cp_parser_nested_name_specifier_opt): Likewise.\n+\t(cp_parser_simple_declaration, cp_parser_template_id): Likewise.\n+\t(cp_parser_parameter_declaration_list): Likewise.\n+\t(cp_parser_parameter_declaration): Likewise.\n+\t(cp_parser_template_name): Let cp_parser_simulate_error perform\n+\tthe checking.\n+\t(cp_parser_committed_to_tentative_parse): Remove.\n+\n 2004-12-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/18968"}, {"sha": "9d3696ff17f13042da1ef53dcd8bd2d8f06021df", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b16f8f4131be4f5bbc749fc9a0543240cd1efbc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0b16f8f4131be4f5bbc749fc9a0543240cd1efbc", "patch": "@@ -1702,7 +1702,7 @@ static bool cp_parser_parse_definitely\n   (cp_parser *);\n static inline bool cp_parser_parsing_tentatively\n   (cp_parser *);\n-static bool cp_parser_committed_to_tentative_parse\n+static bool cp_parser_uncommitted_to_tentative_parse_p\n   (cp_parser *);\n static void cp_parser_error\n   (cp_parser *, const char *);\n@@ -1838,8 +1838,7 @@ cp_parser_name_lookup_error (cp_parser* parser,\n static bool\n cp_parser_simulate_error (cp_parser* parser)\n {\n-  if (cp_parser_parsing_tentatively (parser)\n-      && !cp_parser_committed_to_tentative_parse (parser))\n+  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n     {\n       parser->context->status = CP_PARSER_STATUS_KIND_ERROR;\n       return true;\n@@ -1907,8 +1906,7 @@ cp_parser_check_for_invalid_template_id (cp_parser* parser,\n       else\n \terror (\"invalid template-id\");\n       /* Remember the location of the invalid \"<\".  */\n-      if (cp_parser_parsing_tentatively (parser)\n-\t  && !cp_parser_committed_to_tentative_parse (parser))\n+      if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n \tstart = cp_lexer_token_position (parser->lexer, true);\n       /* Consume the \"<\".  */\n       cp_lexer_consume_token (parser->lexer);\n@@ -2076,8 +2074,8 @@ cp_parser_skip_to_closing_parenthesis (cp_parser *parser,\n   unsigned brace_depth = 0;\n   int result;\n \n-  if (recovering && !or_comma && cp_parser_parsing_tentatively (parser)\n-      && !cp_parser_committed_to_tentative_parse (parser))\n+  if (recovering && !or_comma\n+      && cp_parser_uncommitted_to_tentative_parse_p (parser))\n     return 0;\n \n   while (true)\n@@ -3324,8 +3322,7 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n     }\n \n   /* Remember where the nested-name-specifier starts.  */\n-  if (cp_parser_parsing_tentatively (parser)\n-      && !cp_parser_committed_to_tentative_parse (parser))\n+  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n     start = cp_lexer_token_position (parser->lexer, false);\n \n   push_deferring_access_checks (dk_deferred);\n@@ -6946,8 +6943,7 @@ cp_parser_simple_declaration (cp_parser* parser,\n \t  /* If we have already issued an error message we don't need\n \t     to issue another one.  */\n \t  if (decl != error_mark_node\n-\t      || (cp_parser_parsing_tentatively (parser)\n-\t\t  && !cp_parser_committed_to_tentative_parse (parser)))\n+\t      || cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t    cp_parser_error (parser, \"expected %<,%> or %<;%>\");\n \t  /* Skip tokens until we reach the end of the statement.  */\n \t  cp_parser_skip_to_end_of_statement (parser);\n@@ -8314,8 +8310,7 @@ cp_parser_template_id (cp_parser *parser,\n     }\n \n   /* Remember where the template-id starts.  */\n-  if (cp_parser_parsing_tentatively (parser)\n-      && !cp_parser_committed_to_tentative_parse (parser))\n+  if (cp_parser_uncommitted_to_tentative_parse_p (parser))\n     start_of_id = cp_lexer_token_position (parser->lexer, false);\n \n   push_deferring_access_checks (dk_deferred);\n@@ -8544,14 +8539,9 @@ cp_parser_template_name (cp_parser* parser,\n \t  error (\"non-template %qD used as template\", identifier);\n \t  inform (\"use %<%T::template %D%> to indicate that it is a template\",\n \t\t  parser->scope, identifier);\n-\t  /* If parsing tentatively, find the location of the \"<\"\n-\t     token.  */\n-\t  if (cp_parser_parsing_tentatively (parser)\n-\t      && !cp_parser_committed_to_tentative_parse (parser))\n-\t    {\n-\t      cp_parser_simulate_error (parser);\n-\t      start = cp_lexer_token_position (parser->lexer, true);\n-\t    }\n+\t  /* If parsing tentatively, find the location of the \"<\" token.  */\n+\t  if (cp_parser_simulate_error (parser))\n+\t    start = cp_lexer_token_position (parser->lexer, true);\n \t  /* Parse the template arguments so that we can issue error\n \t     messages about them.  */\n \t  cp_lexer_consume_token (parser->lexer);\n@@ -11620,8 +11610,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n \t     list.  */\n \t  if (!parser->in_template_argument_list_p\n \t      && !parser->in_type_id_in_expr_p\n-\t      && cp_parser_parsing_tentatively (parser)\n-\t      && !cp_parser_committed_to_tentative_parse (parser)\n+\t      && cp_parser_uncommitted_to_tentative_parse_p (parser)\n \t      /* However, a parameter-declaration of the form\n \t\t \"foat(f)\" (which is a valid declaration of a\n \t\t parameter \"f\") can also be interpreted as an\n@@ -11632,8 +11621,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser, bool *is_error)\n       else\n \t{\n \t  cp_parser_error (parser, \"expected %<,%> or %<...%>\");\n-\t  if (!cp_parser_parsing_tentatively (parser)\n-\t      || cp_parser_committed_to_tentative_parse (parser))\n+\t  if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n \t    cp_parser_skip_to_closing_parenthesis (parser,\n \t\t\t\t\t\t   /*recovering=*/true,\n \t\t\t\t\t\t   /*or_comma=*/false,\n@@ -11736,8 +11724,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t     function-type (taking a \"char\" as a parameter) or a cast\n \t     of some object of type \"char\" to \"int\".  */\n \t  && !parser->in_type_id_in_expr_p\n-\t  && cp_parser_parsing_tentatively (parser)\n-\t  && !cp_parser_committed_to_tentative_parse (parser)\n+\t  && cp_parser_uncommitted_to_tentative_parse_p (parser)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN))\n \tcp_parser_commit_to_tentative_parse (parser);\n       /* Parse the declarator.  */\n@@ -15847,14 +15834,14 @@ cp_parser_parse_definitely (cp_parser* parser)\n   return !error_occurred;\n }\n \n-/* Returns true if we are parsing tentatively -- but have decided that\n-   we will stick with this tentative parse, even if errors occur.  */\n+/* Returns true if we are parsing tentatively and are not committed to\n+   this tentative parse.  */\n \n static bool\n-cp_parser_committed_to_tentative_parse (cp_parser* parser)\n+cp_parser_uncommitted_to_tentative_parse_p (cp_parser* parser)\n {\n   return (cp_parser_parsing_tentatively (parser)\n-\t  && parser->context->status == CP_PARSER_STATUS_KIND_COMMITTED);\n+\t  && parser->context->status != CP_PARSER_STATUS_KIND_COMMITTED);\n }\n \n /* Returns nonzero iff an error has occurred during the most recent"}]}