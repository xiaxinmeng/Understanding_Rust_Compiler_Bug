{"sha": "4afb77911f574a7339669a80ad5f6aca5d15a34b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmYjc3OTExZjU3NGE3MzM5NjY5YTgwYWQ1ZjZhY2E1ZDE1YTM0Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-02-23T18:19:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-23T18:19:07Z"}, "message": "re PR target/30825 (current mainline fails to bootstrap when -msse is used)\n\n        PR target/30825\n        * config/i386/i386.md (*movdi_1_rex64, zero_extendsidi2_32,\n        zero_extendsidi2_rex64): Penalize MMX register<->memory moves.\n        (*movsf_1): Penalize MMX moves.\n\nFrom-SVN: r122268", "tree": {"sha": "b200f5afd79f9ccce064ee4bb387c359a0c6742c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b200f5afd79f9ccce064ee4bb387c359a0c6742c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4afb77911f574a7339669a80ad5f6aca5d15a34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afb77911f574a7339669a80ad5f6aca5d15a34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afb77911f574a7339669a80ad5f6aca5d15a34b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afb77911f574a7339669a80ad5f6aca5d15a34b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c67dc1a321d96ffb623c72f07097ce3683811f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67dc1a321d96ffb623c72f07097ce3683811f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67dc1a321d96ffb623c72f07097ce3683811f4b"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "4cccd2012e11eab2465f9d0f92707bc43ad3501b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afb77911f574a7339669a80ad5f6aca5d15a34b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afb77911f574a7339669a80ad5f6aca5d15a34b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4afb77911f574a7339669a80ad5f6aca5d15a34b", "patch": "@@ -1,3 +1,10 @@\n+2007-02-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/30825\n+\t* config/i386/i386.md (*movdi_1_rex64, zero_extendsidi2_32,\n+\tzero_extendsidi2_rex64): Penalize MMX register<->memory moves.\n+\t(*movsf_1): Penalize MMX moves.\n+\n 2007-02-23  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.md (doloop_end): Fail for loops that can iterate"}, {"sha": "bb3dd21223d77c0c0a48b7a736735b1d02d32d9c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afb77911f574a7339669a80ad5f6aca5d15a34b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afb77911f574a7339669a80ad5f6aca5d15a34b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4afb77911f574a7339669a80ad5f6aca5d15a34b", "patch": "@@ -2022,9 +2022,9 @@\n \n (define_insn \"*movdi_1_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t  \"=r,r  ,r,m ,!m,*y,*y,?r ,m ,?*Ym,*y,*x,*x,?r ,m,?*Yi,*x,?*x,?*Ym\")\n+\t  \"=r,r  ,r,m ,!m,*y,*y,?r ,m ,?*Ym,?*y,*x,*x,?r ,m,?*Yi,*x,?*x,?*Ym\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t  \"Z ,rem,i,re,n ,C ,*y,*Ym,*y,r   ,m ,C ,*x,*Yi,*x,r  ,m ,*Ym,*x\"))]\n+\t  \"Z ,rem,i,re,n ,C ,*y,*Ym,*y,r   ,m  ,C ,*x,*Yi,*x,r  ,m ,*Ym,*x\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2326,9 +2326,9 @@\n \n (define_insn \"*movsf_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=f,m,f,r  ,m ,x,x,x ,m,*y,m ,*y,Yi,r ,*Ym,r  \")\n+\t  \"=f,m,f,r  ,m ,x,x,x ,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"fm,f,G,rmF,Fr,C,x,xm,x,m ,*y,*y,r ,Yi,r  ,*Ym\"))]\n+\t  \"fm,f,G,rmF,Fr,C,x,xm,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3401,9 +3401,9 @@\n })\n \n (define_insn \"zero_extendsidi2_32\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,*y,?*Yi,*Y2\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,?*y,?*Yi,*Y2\")\n \t(zero_extend:DI\n-\t (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm,r ,r   ,m ,r   ,m\")))\n+\t (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm,r ,r   ,m  ,r   ,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\"\n   \"@\n@@ -3418,9 +3418,9 @@\n    (set_attr \"type\" \"multi,multi,multi,mmxmov,mmxmov,ssemov,ssemov\")])\n \n (define_insn \"zero_extendsidi2_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,?*Ym,*y,?*Yi,*Y2\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,?*Ym,?*y,?*Yi,*Y2\")\n      (zero_extend:DI\n-       (match_operand:SI 1 \"nonimmediate_operand\"  \"rm,0,r   ,m ,r   ,m\")))]\n+       (match_operand:SI 1 \"nonimmediate_operand\"  \"rm,0,r   ,m  ,r   ,m\")))]\n   \"TARGET_64BIT\"\n   \"@\n    mov\\t{%k1, %k0|%k0, %k1}"}]}