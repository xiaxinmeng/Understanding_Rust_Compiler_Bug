{"sha": "a25c7971341034f617509e5c6558068d70d84251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1Yzc5NzEzNDEwMzRmNjE3NTA5ZTVjNjU1ODA2OGQ3MGQ4NDI1MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-25T23:11:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-25T23:11:29Z"}, "message": "Include tree.h.\n\n(sequence_rtl_expr): New variable.\n(save_emit_status, restore_emit_status): Save and restore it.\n(init_emit): Initialize it.\n(start_sequence_for_rtl_expr): New function.\n\nFrom-SVN: r6162", "tree": {"sha": "3bdb30e207182b58daa1e7b13accd42a96ac46db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bdb30e207182b58daa1e7b13accd42a96ac46db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25c7971341034f617509e5c6558068d70d84251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25c7971341034f617509e5c6558068d70d84251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25c7971341034f617509e5c6558068d70d84251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25c7971341034f617509e5c6558068d70d84251/comments", "author": null, "committer": null, "parents": [{"sha": "e7a84011d21612f6ca9f79024106409960d1bd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a84011d21612f6ca9f79024106409960d1bd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a84011d21612f6ca9f79024106409960d1bd2d"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "4709e3d3f6e8a804ecd1379655e56823a99b176e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25c7971341034f617509e5c6558068d70d84251/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25c7971341034f617509e5c6558068d70d84251/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a25c7971341034f617509e5c6558068d70d84251", "patch": "@@ -36,6 +36,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"config.h\"\n #include \"gvarargs.h\"\n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n@@ -169,12 +170,18 @@ static rtx const_int_rtx[MAX_SAVED_CONST_INT * 2 + 1];\n /* The ends of the doubly-linked chain of rtl for the current function.\n    Both are reset to null at the start of rtl generation for the function.\n    \n-   start_sequence saves both of these on `sequence_stack' and then\n-   starts a new, nested sequence of insns.  */\n+   start_sequence saves both of these on `sequence_stack' along with\n+   `sequence_rtl_expr' and then starts a new, nested sequence of insns.  */\n \n static rtx first_insn = NULL;\n static rtx last_insn = NULL;\n \n+/* RTL_EXPR within which the current sequence will be placed.  Use to\n+   prevent reuse of any temporaries within the sequence until after the\n+   RTL_EXPR is emitted.  */\n+\n+tree sequence_rtl_expr = NULL;\n+\n /* INSN_UID for next insn emitted.\n    Reset to 1 for each function compiled.  */\n \n@@ -1337,6 +1344,7 @@ save_emit_status (p)\n   p->first_label_num = first_label_num;\n   p->first_insn = first_insn;\n   p->last_insn = last_insn;\n+  p->sequence_rtl_expr = sequence_rtl_expr;\n   p->sequence_stack = sequence_stack;\n   p->cur_insn_uid = cur_insn_uid;\n   p->last_linenum = last_linenum;\n@@ -1360,6 +1368,7 @@ restore_emit_status (p)\n   last_label_num = 0;\n   first_insn = p->first_insn;\n   last_insn = p->last_insn;\n+  sequence_rtl_expr = p->sequence_rtl_expr;\n   sequence_stack = p->sequence_stack;\n   cur_insn_uid = p->cur_insn_uid;\n   last_linenum = p->last_linenum;\n@@ -2773,6 +2782,18 @@ start_sequence ()\n   last_insn = 0;\n }\n \n+/* Similarly, but indicate that this sequence will be placed in \n+   T, an RTL_EXPR.  */\n+\n+void\n+start_sequence_for_rtl_expr (t)\n+     tree t;\n+{\n+  start_sequence ();\n+\n+  sequence_rtl_expr = t;\n+}\n+\n /* Set up the insn chain starting with FIRST\n    as the current sequence, saving the previously current one.  */\n \n@@ -3047,6 +3068,7 @@ init_emit ()\n \n   first_insn = NULL;\n   last_insn = NULL;\n+  sequence_rtl_expr = NULL;\n   cur_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n   last_linenum = 0;"}]}