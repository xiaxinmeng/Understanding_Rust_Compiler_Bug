{"sha": "f32c3adb8d77c0ebee112ecf26ae249c8574970e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMyYzNhZGI4ZDc3YzBlYmVlMTEyZWNmMjZhZTI0OWM4NTc0OTcwZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-07T16:08:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-07T16:08:47Z"}, "message": "[AArch64] Use aarch64_reg_or_imm instead of nonmemory_operand\n\nSome of the shift expanders accepted nonmemory_operands but were only\nable to handle register_operands or CONST_INTs.  This is probably\nacademic without SVE, since we're not likely to see shifts by other\ntypes of constant (const_wide_ints, consts, etc).  But for SVE,\nit's possible for a vectorised shift induction to have a CONST_POLY_INT\nshift amount.\n\nThis patch makes the expanders use aarch64_reg_or_imm instead.\n\n2017-11-07  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.md (ashl<mode>3, ashr<mode>3, lshr<mode>3)\n\t(rotr<mode>3, rotl<mode>3): Use aarch64_reg_or_imm instead of\n\tnonmmory_operand.\n\nFrom-SVN: r254499", "tree": {"sha": "5f2c9635d4a53a4d6b1b5fb91ec16b1e94e1d25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f2c9635d4a53a4d6b1b5fb91ec16b1e94e1d25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f32c3adb8d77c0ebee112ecf26ae249c8574970e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32c3adb8d77c0ebee112ecf26ae249c8574970e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32c3adb8d77c0ebee112ecf26ae249c8574970e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32c3adb8d77c0ebee112ecf26ae249c8574970e/comments", "author": null, "committer": null, "parents": [{"sha": "56ccfbd6085be730876ebab31f865e4499b27067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ccfbd6085be730876ebab31f865e4499b27067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ccfbd6085be730876ebab31f865e4499b27067"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "db9ff08ddc81c51e94d0d76c85599daa1734d06a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32c3adb8d77c0ebee112ecf26ae249c8574970e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32c3adb8d77c0ebee112ecf26ae249c8574970e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f32c3adb8d77c0ebee112ecf26ae249c8574970e", "patch": "@@ -1,3 +1,9 @@\n+2017-11-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (ashl<mode>3, ashr<mode>3, lshr<mode>3)\n+\t(rotr<mode>3, rotl<mode>3): Use aarch64_reg_or_imm instead of\n+\tnonmmory_operand.\n+\n 2017-11-07  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Fix build."}, {"sha": "423a3352aab438f645aab6aa99f22f84f3b47ea5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f32c3adb8d77c0ebee112ecf26ae249c8574970e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f32c3adb8d77c0ebee112ecf26ae249c8574970e/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f32c3adb8d77c0ebee112ecf26ae249c8574970e", "patch": "@@ -3958,7 +3958,7 @@\n (define_expand \"<optab><mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(ASHIFT:GPI (match_operand:GPI 1 \"register_operand\")\n-\t\t    (match_operand:QI 2 \"nonmemory_operand\")))]\n+\t\t    (match_operand:QI 2 \"aarch64_reg_or_imm\")))]\n   \"\"\n   {\n     if (CONST_INT_P (operands[2]))\n@@ -3994,7 +3994,7 @@\n (define_expand \"rotr<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(rotatert:GPI (match_operand:GPI 1 \"register_operand\")\n-\t\t      (match_operand:QI 2 \"nonmemory_operand\")))]\n+\t\t      (match_operand:QI 2 \"aarch64_reg_or_imm\")))]\n   \"\"\n   {\n     if (CONST_INT_P (operands[2]))\n@@ -4014,7 +4014,7 @@\n (define_expand \"rotl<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(rotatert:GPI (match_operand:GPI 1 \"register_operand\")\n-\t\t      (match_operand:QI 2 \"nonmemory_operand\")))]\n+\t\t      (match_operand:QI 2 \"aarch64_reg_or_imm\")))]\n   \"\"\n   {\n     /* (SZ - cnt) % SZ == -cnt % SZ */"}]}