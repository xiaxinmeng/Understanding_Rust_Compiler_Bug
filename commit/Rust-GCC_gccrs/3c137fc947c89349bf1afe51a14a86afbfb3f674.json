{"sha": "3c137fc947c89349bf1afe51a14a86afbfb3f674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxMzdmYzk0N2M4OTM0OWJmMWFmZTUxYTE0YTg2YWZiZmIzZjY3NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-03-07T14:50:13Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-03-07T14:50:13Z"}, "message": "Skip ubsan/asan internal fns with different location in tail-merge\n\n2016-03-07  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/70116\n\t* tree-ssa-tail-merge.c\t(merge_stmts_p): New function, handling\n\tis_tm_ending stmts and ubsan/asan internal functions.\n\t(find_duplicate): Use it.  Don't test is_tm_ending here.\n\nFrom-SVN: r234029", "tree": {"sha": "3ebf552658d52b307645a69d810b8f70c237c9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebf552658d52b307645a69d810b8f70c237c9c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c137fc947c89349bf1afe51a14a86afbfb3f674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c137fc947c89349bf1afe51a14a86afbfb3f674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c137fc947c89349bf1afe51a14a86afbfb3f674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c137fc947c89349bf1afe51a14a86afbfb3f674/comments", "author": null, "committer": null, "parents": [{"sha": "57548bf579a86a1e80a0b2e4a385f18dc65e0057", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57548bf579a86a1e80a0b2e4a385f18dc65e0057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57548bf579a86a1e80a0b2e4a385f18dc65e0057"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "176ef4e16093e85cc431a33b9d54da7e627901bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c137fc947c89349bf1afe51a14a86afbfb3f674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c137fc947c89349bf1afe51a14a86afbfb3f674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c137fc947c89349bf1afe51a14a86afbfb3f674", "patch": "@@ -1,3 +1,10 @@\n+2016-03-07  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/70116\n+\t* tree-ssa-tail-merge.c\t(merge_stmts_p): New function, handling\n+\tis_tm_ending stmts and ubsan/asan internal functions.\n+\t(find_duplicate): Use it.  Don't test is_tm_ending here.\n+\n 2016-03-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/70115"}, {"sha": "e95879fb8aa07a936be1d1c8b94aaff911c4971b", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c137fc947c89349bf1afe51a14a86afbfb3f674/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c137fc947c89349bf1afe51a14a86afbfb3f674/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=3c137fc947c89349bf1afe51a14a86afbfb3f674", "patch": "@@ -1207,6 +1207,42 @@ gsi_advance_bw_nondebug_nonlocal (gimple_stmt_iterator *gsi, tree *vuse,\n     }\n }\n \n+/* Return true if equal (in the sense of gimple_equal_p) statements STMT1 and\n+   STMT2 are allowed to be merged.  */\n+\n+static bool\n+merge_stmts_p (gimple *stmt1, gimple *stmt2)\n+{\n+  /* What could be better than this here is to blacklist the bb\n+     containing the stmt, when encountering the stmt f.i. in\n+     same_succ_hash.  */\n+  if (is_tm_ending (stmt1))\n+    return false;\n+\n+  if (is_gimple_call (stmt1)\n+      && gimple_call_internal_p (stmt1))\n+    switch (gimple_call_internal_fn (stmt1))\n+      {\n+      case IFN_UBSAN_NULL:\n+      case IFN_UBSAN_BOUNDS:\n+      case IFN_UBSAN_VPTR:\n+      case IFN_UBSAN_CHECK_ADD:\n+      case IFN_UBSAN_CHECK_SUB:\n+      case IFN_UBSAN_CHECK_MUL:\n+      case IFN_UBSAN_OBJECT_SIZE:\n+      case IFN_ASAN_CHECK:\n+\t/* For these internal functions, gimple_location is an implicit\n+\t   parameter, which will be used explicitly after expansion.\n+\t   Merging these statements may cause confusing line numbers in\n+\t   sanitizer messages.  */\n+\treturn gimple_location (stmt1) == gimple_location (stmt2);\n+      default:\n+\tbreak;\n+      }\n+\n+  return true;\n+}\n+\n /* Determines whether BB1 and BB2 (members of same_succ) are duplicates.  If so,\n    clusters them.  */\n \n@@ -1226,14 +1262,10 @@ find_duplicate (same_succ *same_succ, basic_block bb1, basic_block bb2)\n       gimple *stmt1 = gsi_stmt (gsi1);\n       gimple *stmt2 = gsi_stmt (gsi2);\n \n-      /* What could be better than this here is to blacklist the bb\n-\t containing the stmt, when encountering the stmt f.i. in\n-\t same_succ_hash.  */\n-      if (is_tm_ending (stmt1)\n-\t  || is_tm_ending (stmt2))\n+      if (!gimple_equal_p (same_succ, stmt1, stmt2))\n \treturn;\n \n-      if (!gimple_equal_p (same_succ, stmt1, stmt2))\n+      if (!merge_stmts_p (stmt1, stmt2))\n \treturn;\n \n       gsi_prev_nondebug (&gsi1);"}]}