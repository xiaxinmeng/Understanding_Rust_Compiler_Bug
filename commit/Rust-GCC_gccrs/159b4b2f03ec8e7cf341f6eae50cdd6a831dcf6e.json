{"sha": "159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5YjRiMmYwM2VjOGU3Y2YzNDFmNmVhZTUwY2RkNmE4MzFkY2Y2ZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-11T19:24:20Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-06-11T19:24:20Z"}, "message": "re PR target/53511 (SH Target: Add support for fma patterns)\n\n\tPR target/53511\n\t* config/sh/sh.md (fmasf4): New expander.\n\t(*macsf3): Rename to fmasf4_i.  Adapt to fma pattern.\n\t(mac_media): Rename to fmasf4_media.  Adapt to fma pattern.\n\t* config/sh/sh.opt (mfused-madd): Remove.\n\t* config/sh/sh.c (sh_option_override): Remove mfused-madd handling.\n\t(builtin_description bdesc): Remove __builtin_sh_media_FMAC_S.\n\t* config.gcc (sh[123456789lbe]*-*-* | sh-*-*): Add fused-madd.opt\n\tas extra options.\n\t* doc/invoke.texi (SH Options): Update mfused-madd and mno-fused-madd\n\tdescriptions.\n\n\tPR target/53511\n\t* gcc.target/sh/pr53511-1.c: New.\n\nFrom-SVN: r188396", "tree": {"sha": "5bf46b31c6bf4c732c3f2dbc97ceff414d69bc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bf46b31c6bf4c732c3f2dbc97ceff414d69bc3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/comments", "author": null, "committer": null, "parents": [{"sha": "bf27c43e07631d497b33c39c1bb6f26fd886bafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf27c43e07631d497b33c39c1bb6f26fd886bafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf27c43e07631d497b33c39c1bb6f26fd886bafd"}], "stats": {"total": 107, "additions": 73, "deletions": 34}, "files": [{"sha": "4ae00fd7ce7cc4e449608e650cc59e2b00b3e65c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -1,3 +1,17 @@\n+2012-06-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53511\n+\t* config/sh/sh.md (fmasf4): New expander.\n+\t(*macsf3): Rename to fmasf4_i.  Adapt to fma pattern.\n+\t(mac_media): Rename to fmasf4_media.  Adapt to fma pattern.\n+\t* config/sh/sh.opt (mfused-madd): Remove.\n+\t* config/sh/sh.c (sh_option_override): Remove mfused-madd handling.\n+\t(builtin_description bdesc): Remove __builtin_sh_media_FMAC_S.\n+\t* config.gcc (sh[123456789lbe]*-*-* | sh-*-*): Add fused-madd.opt\n+\tas extra options.\n+\t* doc/invoke.texi (SH Options): Update mfused-madd and mno-fused-madd\n+\tdescriptions.\n+\n 2012-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2cfi.c (scan_trace): Handle annulled branch-taken delay slots."}, {"sha": "b904586f25c23e98d1ee6c7b8cf7e5f1fe0498e7", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -449,6 +449,7 @@ s390*-*-*)\n sh[123456789lbe]*-*-* | sh-*-*)\n \tcpu_type=sh\n \tneed_64bit_hwint=yes\n+\textra_options=\"${extra_options} fused-madd.opt\"\n \t;;\n v850*-*-*)\n \tcpu_type=v850"}, {"sha": "91c229936ec917cd5ea8e588812cd31a7d9e7b0f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -878,13 +878,6 @@ sh_option_override (void)\n \n   if (flag_unsafe_math_optimizations)\n     {\n-      /* Enable fmac insn for \"a * b + c\" SFmode calculations when -ffast-math\n-\t is enabled and -mno-fused-madd is not specified by the user.\n-\t The fmac insn can't be enabled by default due to the implied\n-\t FMA semantics.   See also PR target/29100.  */\n-      if (global_options_set.x_TARGET_FMAC == 0)\n-\tTARGET_FMAC = 1;\n-\n       /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n       if (global_options_set.x_TARGET_FSCA == 0 && TARGET_SH4A_FP)\n \tTARGET_FSCA = 1;\n@@ -11231,7 +11224,6 @@ static struct builtin_description bdesc[] =\n   { CODE_FOR_fsina_s,\t\"__builtin_sh_media_FSINA_S\", SH_BLTIN_SISF, 0 },\n   { CODE_FOR_fipr,\t\"__builtin_sh_media_FIPR_S\", SH_BLTIN_3, 0 },\n   { CODE_FOR_ftrv,\t\"__builtin_sh_media_FTRV_S\", SH_BLTIN_3, 0 },\n-  { CODE_FOR_mac_media,\t\"__builtin_sh_media_FMAC_S\", SH_BLTIN_3, 0 },\n   { CODE_FOR_sqrtdf2,\t\"__builtin_sh_media_FSQRT_D\", SH_BLTIN_2, 0 },\n   { CODE_FOR_sqrtsf2,\t\"__builtin_sh_media_FSQRT_S\", SH_BLTIN_2, 0 },\n   { CODE_FOR_fsrra_s,\t\"__builtin_sh_media_FSRRA_S\", SH_BLTIN_2, 0 },"}, {"sha": "eaf099ec6c9bbe830daa88ae999e192164f54bc8", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -10329,6 +10329,9 @@ label:\n   \"fmul.s\t%1, %2, %0\"\n   [(set_attr \"type\" \"fparith_media\")])\n \n+;; FIXME: These fmac combine pass assisting specifics are obsolete since \n+;;\t  we now use the FMA patterns, which do not depend on the combine\n+;;\t  pass anymore.\n ;; Unfortunately, the combiner is unable to cope with the USE of the FPSCR\n ;; register in feeding fp instructions.  Thus, in order to generate fmac,\n ;; we start out with a mulsf pattern that does not depend on fpscr.\n@@ -10359,26 +10362,42 @@ label:\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_insn \"mac_media\"\n-  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%f\")\n-\t\t\t  (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"fp_arith_reg_operand\" \"0\")))]\n-  \"TARGET_SHMEDIA_FPU && TARGET_FMAC\"\n-  \"fmac.s %1, %2, %0\"\n-  [(set_attr \"type\" \"fparith_media\")])\n+;; FMA (fused multiply-add) patterns\n+(define_expand \"fmasf4\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"\")\n+\t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"\")\n+\t\t(match_operand:SF 2 \"fp_arith_reg_operand\" \"\")\n+\t\t(match_operand:SF 3 \"fp_arith_reg_operand\" \"\")))]\n+  \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n+{\n+  if (TARGET_SH2E)\n+    {\n+      emit_sf_insn (gen_fmasf4_i (operands[0], operands[1], operands[2],\n+\t\t\t\t  operands[3], get_fpscr_rtx ()));\n+      DONE;\n+    }\n+})\n \n-(define_insn \"*macsf3\"\n+(define_insn \"fmasf4_i\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%w\")\n-\t\t\t  (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"arith_reg_operand\" \"0\")))\n+\t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"w\")\n+\t\t(match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")\n+\t\t(match_operand:SF 3 \"fp_arith_reg_operand\" \"0\")))\n    (use (match_operand:PSI 4 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_SH2E && TARGET_FMAC\"\n-  \"fmac\tfr0,%2,%0\"\n+  \"TARGET_SH2E\"\n+  \"fmac\t%1,%2,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n+(define_insn \"fmasf4_media\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")\n+\t\t(match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")\n+\t\t(match_operand:SF 3 \"fp_arith_reg_operand\" \"0\")))]\n+  \"TARGET_SHMEDIA_FPU\"\n+  \"fmac.s %1, %2, %0\"\n+  [(set_attr \"type\" \"fparith_media\")])\n+\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"arith_reg_operand\" \"\")"}, {"sha": "bcbe4f73a6a3c57346950ba8673c1419e03c12af", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -257,10 +257,6 @@ mfixed-range=\n Target RejectNegative Joined Var(sh_fixed_range_str)\n Specify range of registers to make fixed\n \n-mfused-madd\n-Target Var(TARGET_FMAC)\n-Enable the use of the fused floating point multiply-accumulate operation\n-\n mgettrcost=\n Target RejectNegative Joined UInteger Var(sh_gettrcost) Init(-1)\n Cost to assume for gettr insn"}, {"sha": "2bb870a5edd169d4c0c69922eebc15831cb86f2b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -18295,14 +18295,12 @@ is in effect.\n @itemx -mno-fused-madd\n @opindex mfused-madd\n @opindex mno-fused-madd\n-If the processor type supports it, setting @code{-mfused-madd} will allow the\n-usage of the @code{fmac} instruction (floating-point multiply-accumulate) for\n-regular calculations.  Enabling this option might generate faster code but also\n-produce different numeric floating-point results compared to strict IEEE 754\n-arithmetic.  @code{-mfused-madd} is enabled by default by option\n-@option{-funsafe-math-optimizations}.  Setting @code{-mno-fused-madd} will\n-disallow the usage of the @code{fmac} instruction for regular calculations\n-even if @option{-funsafe-math-optimizations} is in effect.\n+Generate code that uses (does not use) the floating-point multiply and\n+accumulate instructions.  These instructions are generated by default\n+if hardware floating point is used.  The machine-dependent\n+@option{-mfused-madd} option is now mapped to the machine-independent\n+@option{-ffp-contract=fast} option, and @option{-mno-fused-madd} is\n+mapped to @option{-ffp-contract=off}.\n \n @item -mfsca\n @itemx -mno-fsca"}, {"sha": "dfbb27edaf407086fd115821efb76788041dc136", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -1,3 +1,8 @@\n+2012-06-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53511\n+\t* gcc.target/sh/pr53511-1.c: New.\n+\n 2012-06-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53470"}, {"sha": "cf60c9ed5f679bc45efdb91c817bdc2cff5a21bf", "filename": "gcc/testsuite/gcc.target/sh/pr53511-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c?ref=159b4b2f03ec8e7cf341f6eae50cdd6a831dcf6e", "patch": "@@ -0,0 +1,14 @@\n+/* Verify that the fmac insn is used for the standard fmaf function.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler \"fmac\" } } */\n+\n+#include <math.h>\n+\n+float\n+test_func_00 (float a, float b, float c)\n+{\n+  return fmaf (a, b, c);\n+}\n+"}]}