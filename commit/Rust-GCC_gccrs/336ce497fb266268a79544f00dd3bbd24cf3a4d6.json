{"sha": "336ce497fb266268a79544f00dd3bbd24cf3a4d6", "node_id": "C_kwDOANBUbNoAKDMzNmNlNDk3ZmIyNjYyNjhhNzk1NDRmMDBkZDNiYmQyNGNmM2E0ZDY", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2023-01-14T18:29:22Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2023-03-13T11:40:50Z"}, "message": "libcpp: Fix ICE on directive inside _Pragma() operator [PR67046]\n\nget__Pragma_string() in directives.cc is responsible for lexing the parens\nand the string argument from a _Pragma(\"...\") operator. This function does\nnot handle the case when the closing paren is not on the same line as the\nstring; in that case, libcpp will by default reuse the token buffer it\npreviously used for the string, so that the string token returned by\nget__Pragma_string() may be corrupted, as shown in the testcase. Fix using\nthe existing keep_tokens mechanism that temporarily disables the reuse of\ntoken buffers.\n\nlibcpp/ChangeLog:\n\n\tPR preprocessor/67046\n\t* directives.cc (_cpp_do__Pragma): Increment pfile->keep_tokens to\n\tensure the returned string token is valid.\n\ngcc/testsuite/ChangeLog:\n\n\tPR preprocessor/67046\n\t* c-c++-common/cpp/pr67046.c: New test.", "tree": {"sha": "3762b202adc4ca0bb1ac761abf83fef2307e85ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3762b202adc4ca0bb1ac761abf83fef2307e85ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336ce497fb266268a79544f00dd3bbd24cf3a4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ce497fb266268a79544f00dd3bbd24cf3a4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336ce497fb266268a79544f00dd3bbd24cf3a4d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ce497fb266268a79544f00dd3bbd24cf3a4d6/comments", "author": null, "committer": null, "parents": [{"sha": "73dd5c6c887c8a5e849060cc8c9d03bdeeac6f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73dd5c6c887c8a5e849060cc8c9d03bdeeac6f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73dd5c6c887c8a5e849060cc8c9d03bdeeac6f72"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "f37f20c624eec1b0e2e62dd6488f547f4282e3a0", "filename": "gcc/testsuite/c-c++-common/cpp/pr67046.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ce497fb266268a79544f00dd3bbd24cf3a4d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr67046.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ce497fb266268a79544f00dd3bbd24cf3a4d6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr67046.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr67046.c?ref=336ce497fb266268a79544f00dd3bbd24cf3a4d6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do preprocess } */\n+\n+_Pragma(\n+\"message(\\\"msg\\\")\"\n+)\n+\n+_Pragma(\n+\"message(\\\"msg\\\")\"\n+#\n+)"}, {"sha": "1fdd73edcb8696044bb78b059e140f7408d6628e", "filename": "libcpp/directives.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ce497fb266268a79544f00dd3bbd24cf3a4d6/libcpp%2Fdirectives.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ce497fb266268a79544f00dd3bbd24cf3a4d6/libcpp%2Fdirectives.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.cc?ref=336ce497fb266268a79544f00dd3bbd24cf3a4d6", "patch": "@@ -1996,7 +1996,12 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in,\n int\n _cpp_do__Pragma (cpp_reader *pfile, location_t expansion_loc)\n {\n+  /* Make sure we don't invalidate the string token, if the closing parenthesis\n+   ended up on a different line.  */\n+  ++pfile->keep_tokens;\n   const cpp_token *string = get__Pragma_string (pfile);\n+  --pfile->keep_tokens;\n+\n   pfile->directive_result.type = CPP_PADDING;\n \n   if (string)"}]}