{"sha": "3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1MzFhOGI0ZTk4OGM2MTFiNTQxMmZmMzBiYmI3YWIyNmM0YjAyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-15T13:37:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-15T13:37:16Z"}, "message": "expr.c (highest_pow2_factor, [...]): Return BIGGEST_ALIGNMENT for 0.\n\n\t* expr.c (highest_pow2_factor, case INTEGER_CST): Return\n\tBIGGEST_ALIGNMENT for 0.\n\nFrom-SVN: r48042", "tree": {"sha": "fe52f5ec527c1e29bd8a2fc57a4f5229e2eaf2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe52f5ec527c1e29bd8a2fc57a4f5229e2eaf2ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c/comments", "author": null, "committer": null, "parents": [{"sha": "dcfcd4365856e8cbec94fafb5766caa899d6a041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfcd4365856e8cbec94fafb5766caa899d6a041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfcd4365856e8cbec94fafb5766caa899d6a041"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "114d6045f0c06244add08701de68c2b28f59fb04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "patch": "@@ -1,7 +1,13 @@\n+Sat Dec 15 08:29:45 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (highest_pow2_factor, case INTEGER_CST): Return\n+\tBIGGEST_ALIGNMENT for 0.\n+\n Sat Dec 15 14:13:03 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n-\t* predict.def (PRED_NORETURN, PRED_OPCODE_POSITIVE, PRED_OPCODE_NONEQUAL,\n-\tPRED_ERROR_RETURN): Make probabilities match reality.\n+\t* predict.def (PRED_NORETURN): Make probabilities match reality.\n+\t(PRED_OPCODE_POSITIVE, PRED_OPCODE_NONEQUAL, PRED_ERROR_RETURN):\n+\tLikewise.\n \n 2001-12-15  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "906a04ede0db9a1a0bd82da36d325f2a669b2544", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a531a8b4e988c611b5412ff30bbb7ab26c4b02c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3a531a8b4e988c611b5412ff30bbb7ab26c4b02c", "patch": "@@ -5793,18 +5793,18 @@ highest_pow2_factor (exp)\n     {\n     case INTEGER_CST:\n       /* If the integer is expressable in a HOST_WIDE_INT, we can find the\n-\t lowest bit that's a one.  If the result is zero, pessimize by\n-\t returning 1.  This is overly-conservative, but such things should not\n-\t happen in the offset expressions that we are called with.  If\n-\t the constant overlows, we some erroneous program, so return\n-\t BIGGEST_ALIGNMENT to avoid any later ICE.  */\n-      if (TREE_CONSTANT_OVERFLOW (exp))\n+\t lowest bit that's a one.  If the result is zero, return\n+\t BIGGEST_ALIGNMENT.  We need to handle this case since we can find it\n+\t in a COND_EXPR, a MIN_EXPR, or a MAX_EXPR.  If the constant overlows,\n+\t we have an erroneous program, so return BIGGEST_ALIGNMENT to avoid any\n+\t later ICE.  */\n+      if (TREE_CONSTANT_OVERFLOW (exp)\n+\t  || integer_zerop (exp))\n \treturn BIGGEST_ALIGNMENT;\n       else if (host_integerp (exp, 0))\n \t{\n \t  c0 = tree_low_cst (exp, 0);\n-\t  c0 = c0 < 0 ? - c0 : c0;\n-\t  return c0 != 0 ? c0 & -c0 : 1;\n+\t  return c0 < 0 ? - c0 : c0;\n \t}\n       break;\n "}]}