{"sha": "a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4ZmY5YjE0ZjRmY2UzN2ViMGQ5NjIzNmRmYWU4NDNhMmUwMzhiMg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-05-27T11:55:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-27T11:55:00Z"}, "message": "exp_aggr.adb (Expand_Array_Aggregate): If the aggregate contains tasks...\n\n2008-05-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): If the aggregate contains\n\ttasks, create an activation chain now, before the expansion into\n\tassignments and build-in-place calls that require the presence of an\n\tactivation chain.\n\t(Backend_Processing_Possible): If the component type is inherently\n\tlimited, the aggregate must be expanded into individual built-in-place\n\tassignments.\n\n\t* sem_ch6.adb (Build_Extra_Formals): Use underlying type of result to\n\tdetermine whether an allocation extra parameter must be built, to\n\thandle case of a private type whose full type is a discriminated type\n\twith defaults.\n\nFrom-SVN: r136016", "tree": {"sha": "7a99be5928d7d674af94b5a74d746dede7e0a84d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a99be5928d7d674af94b5a74d746dede7e0a84d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38ff9b14f4fce37eb0d96236dfae843a2e038b2/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4b8682d4fdc1af6a62886fb65e80f6bb97f7ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b8682d4fdc1af6a62886fb65e80f6bb97f7ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b8682d4fdc1af6a62886fb65e80f6bb97f7ce5"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "08e23ab35dfd66df3c346d820188eeef27605c9d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38ff9b14f4fce37eb0d96236dfae843a2e038b2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38ff9b14f4fce37eb0d96236dfae843a2e038b2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "patch": "@@ -544,6 +544,13 @@ package body Exp_Aggr is\n          return False;\n       end if;\n \n+      --  If component is limited, aggregate must be expanded because each\n+      --  component assignment must be built in place.\n+\n+      if Is_Inherently_Limited_Type (Component_Type (Typ)) then\n+         return False;\n+      end if;\n+\n       --  Checks 4 (array must not be multi-dimensional Fortran case)\n \n       if Convention (Typ) = Convention_Fortran\n@@ -4955,6 +4962,13 @@ package body Exp_Aggr is\n               and then In_Place_Assign_OK);\n       end if;\n \n+      --  If  this is an array of tasks, it will be expanded into build-in-\n+      --  -place assignments. Build an activation chain for the tasks now\n+\n+      if Has_Task (Etype (N)) then\n+         Build_Activation_Chain_Entity (N);\n+      end if;\n+\n       if not Has_Default_Init_Comps (N)\n          and then Comes_From_Source (Parent (N))\n          and then Nkind (Parent (N)) = N_Object_Declaration"}, {"sha": "f8bd8d4985346cd4d634b6094d9b56bfd1ba34cf", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38ff9b14f4fce37eb0d96236dfae843a2e038b2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38ff9b14f4fce37eb0d96236dfae843a2e038b2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a38ff9b14f4fce37eb0d96236dfae843a2e038b2", "patch": "@@ -1602,6 +1602,7 @@ package body Sem_Ch6 is\n             elsif Nkind (Parent (N)) = N_Compilation_Unit then\n                Freeze_Before (N, Spec_Id);\n             end if;\n+\n          else\n             Spec_Id := Corresponding_Spec (N);\n          end if;\n@@ -2459,18 +2460,17 @@ package body Sem_Ch6 is\n          Push_Scope (Designator);\n          Process_Formals (Formals, N);\n \n-         --  Ada 2005 (AI-345): Allow the overriding of interface primitives\n-         --  by subprograms which belong to a concurrent type implementing an\n-         --  interface. Set the parameter type of each controlling formal to\n-         --  the corresponding record type.\n+         --  Ada 2005 (AI-345): If this is an overriding operation of an\n+         --  inherited interface operation, and the controlling type is\n+         --  a synchronized type, replace the type with its corresponding\n+         --  record, to match the proper signature of an overriding operation.\n \n          if Ada_Version >= Ada_05 then\n             Formal := First_Formal (Designator);\n             while Present (Formal) loop\n                Formal_Typ := Etype (Formal);\n \n-               if (Ekind (Formal_Typ) = E_Protected_Type\n-                     or else Ekind (Formal_Typ) = E_Task_Type)\n+               if Is_Concurrent_Type (Formal_Typ)\n                  and then Present (Corresponding_Record_Type (Formal_Typ))\n                  and then Present (Interfaces\n                                     (Corresponding_Record_Type (Formal_Typ)))\n@@ -5001,7 +5001,7 @@ package body Sem_Ch6 is\n             --  can be called in a dispatching context and such calls must be\n             --  handled like calls to a class-wide function.\n \n-            if not Is_Constrained (Result_Subt)\n+            if not Is_Constrained (Underlying_Type (Result_Subt))\n               or else Is_Tagged_Type (Underlying_Type (Result_Subt))\n             then\n                Discard :="}]}