{"sha": "07328167818043c60e665d3c5bb750a9b54da09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDczMjgxNjc4MTgwNDNjNjBlNjY1ZDNjNWJiNzUwYTliNTRkYTA5Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-21T01:59:07Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-21T01:59:07Z"}, "message": "builtins.c (expand_builtin_fputs): Also expand when length!=1.\n\n\t* builtins.c (expand_builtin_fputs): Also expand when length!=1.\n\t(expand_builtin): Handle BUILT_IN_FWRITE.\n\n\t* builtins.def (BUILT_IN_FWRITE): New entry.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare __builtin_fwrite.\n\nFrom-SVN: r36556", "tree": {"sha": "afc97912d58ce0c391aca039767cc76b314622b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc97912d58ce0c391aca039767cc76b314622b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07328167818043c60e665d3c5bb750a9b54da09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07328167818043c60e665d3c5bb750a9b54da09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07328167818043c60e665d3c5bb750a9b54da09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07328167818043c60e665d3c5bb750a9b54da09b/comments", "author": null, "committer": null, "parents": [{"sha": "dc36ec2cadc111bf6edfe5a96a009df76bd88889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc36ec2cadc111bf6edfe5a96a009df76bd88889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc36ec2cadc111bf6edfe5a96a009df76bd88889"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "c9a05bb669bd5b3570078bebdb79d82e395f9793", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07328167818043c60e665d3c5bb750a9b54da09b", "patch": "@@ -1,3 +1,12 @@\n+2000-09-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_fputs): Also expand when length!=1.\n+\t(expand_builtin): Handle BUILT_IN_FWRITE.\n+\n+\t* builtins.def (BUILT_IN_FWRITE): New entry.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare __builtin_fwrite.\n+\n Wed Sep 20 15:39:14 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gcc.c (modify_target): New variable and struct."}, {"sha": "4f03dc7f8cba6753689b2fcdb900e31e45f91b7e", "filename": "gcc/builtins.c", "status": "modified", "additions": 47, "deletions": 21, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=07328167818043c60e665d3c5bb750a9b54da09b", "patch": "@@ -2329,12 +2329,12 @@ expand_builtin_fputs (arglist, ignore)\n      tree arglist;\n      int ignore;\n {\n-  tree call_expr, len, stripped_string, newarglist;\n-  tree fn = built_in_decls[BUILT_IN_FPUTC];\n+  tree call_expr, len, fn, fn_fputc = built_in_decls[BUILT_IN_FPUTC],\n+    fn_fwrite = built_in_decls[BUILT_IN_FWRITE];\n \n   /* If the return value is used, or the replacement _DECL isn't\n      initialized, don't do the transformation. */\n-  if (!ignore || !fn)\n+  if (!ignore || !fn_fputc || !fn_fwrite)\n     return 0;\n \n   /* Verify the arguments in the original call. */\n@@ -2345,29 +2345,54 @@ expand_builtin_fputs (arglist, ignore)\n \t  != POINTER_TYPE))\n     return 0;\n \n-  /* Get the length of the string passed to fputs. */\n-  len = c_strlen (TREE_VALUE (arglist));\n-  \n-  /* If the length != 1, punt. */\n-  if (len == 0 || compare_tree_int (len, 1))\n+  /* Get the length of the string passed to fputs.  If the length\n+     can't be determined, punt.  */\n+  if (!(len = c_strlen (TREE_VALUE (arglist))))\n     return 0;\n \n-  stripped_string = TREE_VALUE (arglist);\n-  STRIP_NOPS (stripped_string);\n-  if (stripped_string && TREE_CODE (stripped_string) == ADDR_EXPR)\n-    stripped_string = TREE_OPERAND (stripped_string, 0);\n+  switch (compare_tree_int (len, 1))\n+    {\n+    case -1: /* length is 0, delete the call entirely .  */\n+      return const0_rtx;\n+    case 0: /* length is 1, call fputc.  */\n+      {\n+\ttree stripped_string = TREE_VALUE (arglist);\n \n-  /* New argument list transforming fputs(string, stream) to\n-     fputc(string[0], stream).  */\n-  newarglist = build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist)));\n-  newarglist =\n-    tree_cons (NULL_TREE, \n-\t       build_int_2 (TREE_STRING_POINTER (stripped_string)[0], 0),\n-\t       newarglist);\n+\tSTRIP_NOPS (stripped_string);\n+\tif (stripped_string && TREE_CODE (stripped_string) == ADDR_EXPR)\n+\t  stripped_string = TREE_OPERAND (stripped_string, 0);\n+      \n+\t/* New argument list transforming fputs(string, stream) to\n+\t   fputc(string[0], stream).  */\n+\targlist =\n+\t  build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist)));\n+\targlist =\n+\t  tree_cons (NULL_TREE, \n+\t\t     build_int_2 (TREE_STRING_POINTER (stripped_string)[0], 0),\n+\t\t     arglist);\n+\tfn = fn_fputc;\n+\tbreak;\n+      }\n+    case 1: /* length is greater than 1, call fwrite.  */\n+      {\n+\ttree string_arg = TREE_VALUE (arglist);\n+      \n+\t/* New argument list transforming fputs(string, stream) to\n+\t   fwrite(string, 1, len, stream).  */\n+\targlist = build_tree_list (NULL_TREE, TREE_VALUE (TREE_CHAIN (arglist)));\n+\targlist = tree_cons (NULL_TREE, len, arglist);\n+\targlist = tree_cons (NULL_TREE, integer_one_node, arglist);\n+\targlist = tree_cons (NULL_TREE, string_arg, arglist);\n+\tfn = fn_fwrite;\n+\tbreak;\n+      }\n+    default:\n+      abort();\n+    }\n   \n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n-\t\t     call_expr, newarglist, NULL_TREE);\n+\t\t     call_expr, arglist, NULL_TREE);\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n   return expand_expr (call_expr, (ignore ? const0_rtx : NULL_RTX),\n \t\t      VOIDmode, EXPAND_NORMAL);\n@@ -2563,7 +2588,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n \t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n \t  || fcode == BUILT_IN_PRINTF || fcode == BUILT_IN_FPUTC\n-\t  || fcode == BUILT_IN_FPUTS))\n+\t  || fcode == BUILT_IN_FPUTS || fcode == BUILT_IN_FWRITE))\n     return expand_call (exp, target, ignore);\n \n   switch (fcode)\n@@ -2779,6 +2804,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_PUTCHAR:\n     case BUILT_IN_PUTS:\n     case BUILT_IN_FPUTC:\n+    case BUILT_IN_FWRITE:\n       break;\n       \n     case BUILT_IN_FPUTS:"}, {"sha": "ede0d2e06345816def1d31571f2ddc6370258326", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=07328167818043c60e665d3c5bb750a9b54da09b", "patch": "@@ -64,6 +64,7 @@ DEF_BUILTIN(BUILT_IN_PUTS)\n DEF_BUILTIN(BUILT_IN_PRINTF)\n DEF_BUILTIN(BUILT_IN_FPUTC)\n DEF_BUILTIN(BUILT_IN_FPUTS)\n+DEF_BUILTIN(BUILT_IN_FWRITE)\n \n   /* ISO C99 floating point unordered comparisons.  */\n DEF_BUILTIN(BUILT_IN_ISGREATER)"}, {"sha": "ce0b33ad7888f5ed0257d1b509f7d5ac3ab549a6", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07328167818043c60e665d3c5bb750a9b54da09b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=07328167818043c60e665d3c5bb750a9b54da09b", "patch": "@@ -4014,7 +4014,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n-  tree void_ftype_any, void_ftype_int, int_ftype_any;\n+  tree void_ftype_any, void_ftype_int, int_ftype_any, sizet_ftype_any;\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float, ldouble_ftype_ldouble;\n   tree int_ftype_cptr_cptr_sizet;\n@@ -4060,6 +4060,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n   ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n \n+  sizet_ftype_any = build_function_type (sizetype, NULL_TREE);\n   int_ftype_any = build_function_type (integer_type_node, NULL_TREE);\n   void_ftype_any = build_function_type (void_type_node, NULL_TREE);\n   void_ftype = build_function_type (void_type_node, endlink);\n@@ -4377,6 +4378,9 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n      them later with argument without worrying about the explicit\n      declarations in stdio.h being taken as the initial declaration.\n      Also, save the _DECL for these so we can use them later.  */\n+  built_in_decls[BUILT_IN_FWRITE] =\n+    builtin_function (\"__builtin_fwrite\", sizet_ftype_any,\n+\t\t      BUILT_IN_FWRITE, BUILT_IN_NORMAL, \"fwrite\");\n   built_in_decls[BUILT_IN_FPUTC] =\n     builtin_function (\"__builtin_fputc\", int_ftype_any,\n \t\t      BUILT_IN_FPUTC, BUILT_IN_NORMAL, \"fputc\");"}]}