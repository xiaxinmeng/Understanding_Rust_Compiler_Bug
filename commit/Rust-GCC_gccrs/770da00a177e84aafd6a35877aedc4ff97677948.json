{"sha": "770da00a177e84aafd6a35877aedc4ff97677948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwZGEwMGExNzdlODRhYWZkNmEzNTg3N2FlZGM0ZmY5NzY3Nzk0OA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-01-04T18:40:21Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-01-04T18:40:21Z"}, "message": "mips.md (size): Add SI and DI.\n\n2012-01-04  Andrew Pinski  <apinski@cavium.com>\n\t    Adam Nemet  <anemet@caviumnetworks.com>\n\n\t* config/mips/mips.md (size): Add SI and DI.\n\t(SIZE): New mode attribute.\n\t(U): New code attribute.\n\t* config/mips/mips-dsp.md (mips_lbux): Use gen_mips_lbux_extsi.\n\t(mips_lbux_<mode>): Delete.\n\t(mips_l<SHORT:size><u>x_ext<GPR:mode>_<P:mode>): New pattern.\n\t(mips_lhx): Use gen_mips_lhx_extsi.\n\t(mips_lhx_<mode>): Delete.\n\t(mips_lwx): Delete.\n\t(mips_l<size>x): New expand.\n\t(mips_lwx_<mode>): Delete.\n\t(mips_l<GPR:size>x_<P:mode>): New pattern.\n\t(*mips_lw<u>x_<P:mode>_ext): Likewise.\n\t* config/mips/mips-ftypes.def: Add DI f(POINTER, SI) function type.\n\t* config/mips/mips.c (mips_lx_address_p): New function.\n\t(mips_rtx_costs <case MEM>): Call mips_lx_address_p.\n\t(dsp64): New availability predicate.\n\t(mips_builtins): Add an entry for __builtin_mips_ldx.\n\t* config/mips/mips.h (ISA_HAS_LBX): New define.\n\t(ISA_HAS_LBUX): Likewise.\n\t(ISA_HAS_LHX): Likewise.\n\t(ISA_HAS_LHUX): Likewise.\n\t(ISA_HAS_LWX): Likewise.\n\t(ISA_HAS_LWUX): Likewise.\n\t(ISA_HAS_LDX): Likewise.\n\t* doc/extend.texi (__builtin_mips_ldx): Document.\n\n2012-01-04  Andrew Pinski  <apinski@cavium.com>\n\n\t* gcc.target/mips/mips64-dsp-ldx1.c: New test.\n\t* gcc.target/mips/octeon2-lx-1.c: New test.\n\t* gcc.target/mips/mips64-dsp-ldx.c: New test.\n\t* gcc.target/mips/octeon2-lx-2.c: New test.\n\t* gcc.target/mips/octeon2-lx-3.c: New test.\n\n\nCo-Authored-By: Adam Nemet <anemet@caviumnetworks.com>\n\nFrom-SVN: r182884", "tree": {"sha": "1e83a84dd840a340fd426cea3e908c98d25ff6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e83a84dd840a340fd426cea3e908c98d25ff6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770da00a177e84aafd6a35877aedc4ff97677948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770da00a177e84aafd6a35877aedc4ff97677948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770da00a177e84aafd6a35877aedc4ff97677948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770da00a177e84aafd6a35877aedc4ff97677948/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f2f17ff2a75f244b18d01b213fc590a0048ad63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2f17ff2a75f244b18d01b213fc590a0048ad63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2f17ff2a75f244b18d01b213fc590a0048ad63"}], "stats": {"total": 234, "additions": 195, "deletions": 39}, "files": [{"sha": "e0d975a029b3be5a48be5509cecbb46ada2c29ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,3 +1,33 @@\n+2012-01-04  Andrew Pinski  <apinski@cavium.com>\n+\t    Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* config/mips/mips.md (size): Add SI and DI.\n+\t(SIZE): New mode attribute.\n+\t(U): New code attribute.\n+\t* config/mips/mips-dsp.md (mips_lbux): Use gen_mips_lbux_extsi.\n+\t(mips_lbux_<mode>): Delete.\n+\t(mips_l<SHORT:size><u>x_ext<GPR:mode>_<P:mode>): New pattern.\n+\t(mips_lhx): Use gen_mips_lhx_extsi.\n+\t(mips_lhx_<mode>): Delete.\n+\t(mips_lwx): Delete.\n+\t(mips_l<size>x): New expand.\n+\t(mips_lwx_<mode>): Delete.\n+\t(mips_l<GPR:size>x_<P:mode>): New pattern.\n+\t(*mips_lw<u>x_<P:mode>_ext): Likewise.\n+\t* config/mips/mips-ftypes.def: Add DI f(POINTER, SI) function type.\n+\t* config/mips/mips.c (mips_lx_address_p): New function.\n+\t(mips_rtx_costs <case MEM>): Call mips_lx_address_p.\n+\t(dsp64): New availability predicate.\n+\t(mips_builtins): Add an entry for __builtin_mips_ldx.\n+\t* config/mips/mips.h (ISA_HAS_LBX): New define.\n+\t(ISA_HAS_LBUX): Likewise.\n+\t(ISA_HAS_LHX): Likewise.\n+\t(ISA_HAS_LHUX): Likewise.\n+\t(ISA_HAS_LWX): Likewise.\n+\t(ISA_HAS_LWUX): Likewise.\n+\t(ISA_HAS_LDX): Likewise.\n+\t* doc/extend.texi (__builtin_mips_ldx): Document.\n+\n 2012-01-04  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/vms/xm-vms.h (HOST_LONG_FORMAT, HOST_PTR_PRINTF): Define"}, {"sha": "1b60ad23c59c65a00bb389e114836bc002ded5ac", "filename": "gcc/config/mips/mips-dsp.md", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dsp.md?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,4 +1,5 @@\n-;; Copyright (C) 2005, 2006, 2007, 2008, 2010 Free Software Foundation, Inc.\n+;; Copyright (C) 2005, 2006, 2007, 2008, 2010, 2011, 2012\n+;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -1105,20 +1106,21 @@\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  emit_insn (PMODE_INSN (gen_mips_lbux,\n+  emit_insn (PMODE_INSN (gen_mips_lbux_extsi,\n \t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n \n-(define_insn \"mips_lbux_<mode>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-   \t(zero_extend:SI\n-\t  (mem:QI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n-\t\t\t  (match_operand:P 2 \"register_operand\" \"d\")))))]\n-  \"ISA_HAS_DSP\"\n-  \"lbux\\t%0,%2(%1)\"\n+(define_insn \"mips_l<SHORT:size><u>x_ext<GPR:mode>_<P:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+   \t(any_extend:GPR\n+\t  (mem:SHORT (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t\t     (match_operand:P 2 \"register_operand\" \"d\")))))]\n+  \"ISA_HAS_L<SHORT:SIZE><U>X\"\n+  \"l<SHORT:size><u>x\\t%0,%2(%1)\"\n   [(set_attr \"type\"\t\"load\")\n-   (set_attr \"mode\"\t\"SI\")])\n+   (set_attr \"mode\"\t\"<GPR:MODE>\")\n+   (set_attr \"length\"\t\"4\")])\n \n (define_expand \"mips_lhx\"\n   [(match_operand:SI 0 \"register_operand\")\n@@ -1127,41 +1129,43 @@\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  emit_insn (PMODE_INSN (gen_mips_lhx,\n+  emit_insn (PMODE_INSN (gen_mips_lhx_extsi,\n \t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n \n-(define_insn \"mips_lhx_<mode>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:SI\n-\t  (mem:HI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n-\t\t\t  (match_operand:P 2 \"register_operand\" \"d\")))))]\n-  \"ISA_HAS_DSP\"\n-  \"lhx\\t%0,%2(%1)\"\n-  [(set_attr \"type\"\t\"load\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_expand \"mips_lwx\"\n-  [(match_operand:SI 0 \"register_operand\")\n+(define_expand \"mips_l<size>x\"\n+  [(match_operand:GPR 0 \"register_operand\")\n    (match_operand 1 \"pmode_register_operand\")\n    (match_operand:SI 2 \"register_operand\")]\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  emit_insn (PMODE_INSN (gen_mips_lwx,\n+  emit_insn (PMODE_INSN (gen_mips_l<size>x,\n \t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n \n-(define_insn \"mips_lwx_<mode>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mem:SI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n-\t    \t\t(match_operand:P 2 \"register_operand\" \"d\"))))]\n-  \"ISA_HAS_DSP\"\n-  \"lwx\\t%0,%2(%1)\"\n+(define_insn \"mips_l<GPR:size>x_<P:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(mem:GPR (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t\t (match_operand:P 2 \"register_operand\" \"d\"))))]\n+  \"ISA_HAS_L<GPR:SIZE>X\"\n+  \"l<GPR:size>x\\t%0,%2(%1)\"\n   [(set_attr \"type\"\t\"load\")\n-   (set_attr \"mode\"\t\"SI\")])\n+   (set_attr \"mode\"\t\"<GPR:MODE>\")\n+   (set_attr \"length\"\t\"4\")])\n+\n+(define_insn \"*mips_lw<u>x_<P:mode>_ext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+   \t(any_extend:DI\n+\t  (mem:SI (plus:P (match_operand:P 1 \"register_operand\" \"d\")\n+\t\t\t     (match_operand:P 2 \"register_operand\" \"d\")))))]\n+  \"ISA_HAS_LW<U>X && TARGET_64BIT\"\n+  \"lw<u>x\\t%0,%2(%1)\"\n+  [(set_attr \"type\"\t\"load\")\n+   (set_attr \"mode\"\t\"DI\")\n+   (set_attr \"length\"\t\"4\")])\n \n ;; Table 2-8. MIPS DSP ASE Instructions: Branch\n ;; BPOSGE32"}, {"sha": "cd1d1da7a961a660ce14cc00a27cc4888dddbaf2", "filename": "gcc/config/mips/mips-ftypes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ftypes.def?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of prototypes for MIPS built-in functions.  -*- C -*-\n-   Copyright (C) 2007, 2008\n+   Copyright (C) 2007, 2008, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -53,6 +53,7 @@ DEF_MIPS_FTYPE (4, (INT, V2SF, V2SF, V2SF, V2SF))\n \n DEF_MIPS_FTYPE (2, (SI, DI, SI))\n DEF_MIPS_FTYPE (2, (SI, POINTER, SI))\n+DEF_MIPS_FTYPE (2, (DI, POINTER, SI))\n DEF_MIPS_FTYPE (1, (SI, SI))\n DEF_MIPS_FTYPE (2, (SI, SI, SI))\n DEF_MIPS_FTYPE (3, (SI, SI, SI, SI))"}, {"sha": "33e238c7d3e29d73e5ca043f676da82acec2f55f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,7 +1,7 @@\n /* Subroutines used for MIPS code generation.\n    Copyright (C) 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011\n+   2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky, lich@inria.inria.fr.\n    Changes by Michael Meissner, meissner@osf.org.\n@@ -2159,6 +2159,29 @@ mips_lwxs_address_p (rtx addr)\n     }\n   return false;\n }\n+\n+/* Return true if ADDR matches the pattern for the L{B,H,W,D}{,U}X load \n+   indexed address instruction.  Note that such addresses are\n+   not considered legitimate in the TARGET_LEGITIMATE_ADDRESS_P\n+   sense, because their use is so restricted.  */\n+\n+static bool\n+mips_lx_address_p (rtx addr, enum machine_mode mode)\n+{\n+  if (GET_CODE (addr) != PLUS\n+      || !REG_P (XEXP (addr, 0))\n+      || !REG_P (XEXP (addr, 1)))\n+    return false;\n+  if (ISA_HAS_LBX && mode == QImode)\n+    return true;\n+  if (ISA_HAS_LHX && mode == HImode)\n+    return true;\n+  if (ISA_HAS_LWX && mode == SImode)\n+    return true;\n+  if (ISA_HAS_LDX && mode == DImode)\n+    return true;\n+  return false;\n+}\n \f\n /* Return true if a value at OFFSET bytes from base register BASE can be\n    accessed using an unextended MIPS16 instruction.  MODE is the mode of\n@@ -3547,7 +3570,8 @@ mips_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \t  return true;\n \t}\n       /* Check for a scaled indexed address.  */\n-      if (mips_lwxs_address_p (addr))\n+      if (mips_lwxs_address_p (addr)\n+\t  || mips_lx_address_p (addr, mode))\n \t{\n \t  *total = COSTS_N_INSNS (2);\n \t  return true;\n@@ -12720,6 +12744,7 @@ AVAIL_NON_MIPS16 (mips3d, TARGET_MIPS3D)\n AVAIL_NON_MIPS16 (dsp, TARGET_DSP)\n AVAIL_NON_MIPS16 (dspr2, TARGET_DSPR2)\n AVAIL_NON_MIPS16 (dsp_32, !TARGET_64BIT && TARGET_DSP)\n+AVAIL_NON_MIPS16 (dsp_64, TARGET_64BIT && TARGET_DSP)\n AVAIL_NON_MIPS16 (dspr2_32, !TARGET_64BIT && TARGET_DSPR2)\n AVAIL_NON_MIPS16 (loongson, TARGET_LOONGSON_VECTORS)\n AVAIL_NON_MIPS16 (cache, TARGET_CACHE_BUILTIN)\n@@ -13046,6 +13071,9 @@ static const struct mips_builtin_description mips_builtins[] = {\n   DIRECT_BUILTIN (mult, MIPS_DI_FTYPE_SI_SI, dsp_32),\n   DIRECT_BUILTIN (multu, MIPS_DI_FTYPE_USI_USI, dsp_32),\n \n+  /* Built-in functions for the DSP ASE (64-bit only).  */\n+  DIRECT_BUILTIN (ldx, MIPS_DI_FTYPE_POINTER_SI, dsp_64),\n+\n   /* The following are for the MIPS DSP ASE REV 2 (32-bit only).  */\n   DIRECT_BUILTIN (dpa_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, dspr2_32),\n   DIRECT_BUILTIN (dps_w_ph, MIPS_DI_FTYPE_DI_V2HI_V2HI, dspr2_32),"}, {"sha": "d07e241d0d615b9f800bfe1eec55df31fd0bb83c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n    1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+   2012\n    Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n@@ -996,6 +997,16 @@ struct mips_cpu_info {\n /* ISA has lwxs instruction (load w/scaled index address.  */\n #define ISA_HAS_LWXS\t\t(TARGET_SMARTMIPS && !TARGET_MIPS16)\n \n+/* ISA has lbx, lbux, lhx, lhx, lhux, lwx, lwux, or ldx instruction. */\n+#define ISA_HAS_LBX\t\t(TARGET_OCTEON2)\n+#define ISA_HAS_LBUX\t\t(ISA_HAS_DSP || TARGET_OCTEON2)\n+#define ISA_HAS_LHX\t\t(ISA_HAS_DSP || TARGET_OCTEON2)\n+#define ISA_HAS_LHUX\t\t(TARGET_OCTEON2)\n+#define ISA_HAS_LWX\t\t(ISA_HAS_DSP || TARGET_OCTEON2)\n+#define ISA_HAS_LWUX\t\t(TARGET_OCTEON2 && TARGET_64BIT)\n+#define ISA_HAS_LDX\t\t((ISA_HAS_DSP || TARGET_OCTEON2) \\\n+\t\t\t\t && TARGET_64BIT)\n+\n /* The DSP ASE is available.  */\n #define ISA_HAS_DSP\t\t(TARGET_DSP && !TARGET_MIPS16)\n "}, {"sha": "3be7dd4df16e0e04702bc10123f3c923556c60b4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,6 +1,7 @@\n ;;  Mips.md\t     Machine Description for MIPS based processors\n ;;  Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;;  1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+;;  1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+;;  2011, 2012\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by   A. Lichnewsky, lich@inria.inria.fr\n ;;  Changes by       Michael Meissner, meissner@osf.org\n@@ -668,9 +669,10 @@\n \t\t     (HA \"\") (SA \"\") (DA \"D\")\n \t\t     (UHA \"\") (USA \"\") (UDA \"D\")])\n \n-;; This attribute gives the length suffix for a sign- or zero-extension\n-;; instruction.\n-(define_mode_attr size [(QI \"b\") (HI \"h\")])\n+;; This attribute gives the length suffix for a load or store instruction.\n+;; The same suffixes work for zero and sign extensions.\n+(define_mode_attr size [(QI \"b\") (HI \"h\") (SI \"w\") (DI \"d\")])\n+(define_mode_attr SIZE [(QI \"B\") (HI \"H\") (SI \"W\") (DI \"D\")])\n \n ;; This attributes gives the mode mask of a SHORT.\n (define_mode_attr mask [(QI \"0x00ff\") (HI \"0xffff\")])\n@@ -790,6 +792,9 @@\n \t\t     (lt \"\") (ltu \"u\")\n \t\t     (le \"\") (leu \"u\")])\n \n+;; <U> is like <u> except uppercase.\n+(define_code_attr U [(sign_extend \"\") (zero_extend \"U\")])\n+\n ;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n "}, {"sha": "53bfd1cfac47599573e517c3d0f8f6455e5a5859", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,\n-@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n @c Free Software Foundation, Inc.\n \n @c This is part of the GCC manual.\n@@ -10537,6 +10537,7 @@ i32 __builtin_mips_rddsp (imm0_63)\n i32 __builtin_mips_lbux (void *, i32)\n i32 __builtin_mips_lhx (void *, i32)\n i32 __builtin_mips_lwx (void *, i32)\n+a64 __builtin_mips_ldx (void *, i32) [MIPS64 only]\n i32 __builtin_mips_bposge32 (void)\n a64 __builtin_mips_madd (a64, i32, i32);\n a64 __builtin_mips_maddu (a64, ui32, ui32);"}, {"sha": "576d6c517e8a0192ff6dd2b328c89a21c3cd6071", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -1,3 +1,11 @@\n+2012-01-04  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.target/mips/mips64-dsp-ldx1.c: New test.\n+\t* gcc.target/mips/octeon2-lx-1.c: New test.\n+\t* gcc.target/mips/mips64-dsp-ldx.c: New test.\n+\t* gcc.target/mips/octeon2-lx-2.c: New test.\n+\t* gcc.target/mips/octeon2-lx-3.c: New test.\n+\n 2012-01-04  Patrick Marlier  <patrick.marlier@gmail.com>\n \n \tPR other/51163"}, {"sha": "d136676190291e27c95398e61dba396fc7b1f7fe", "filename": "gcc/testsuite/gcc.target/mips/mips64-dsp-ldx.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -0,0 +1,10 @@\n+/* Test MIPS64 DSP instructions */\n+/* { dg-do compile } */\n+/* { dg-options \"-mgp64 -mdsp -O\" } */\n+\n+/* { dg-final { scan-assembler \"\\tldx\\t\" } } */\n+\n+NOMIPS16 signed long long test (signed long long *a, int index)\n+{\n+  return a[index];\n+}"}, {"sha": "b7f3bc8f816e59136f60e31f1d9bb692127c6d03", "filename": "gcc/testsuite/gcc.target/mips/mips64-dsp-ldx1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips64-dsp-ldx1.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -0,0 +1,10 @@\n+/* Test MIPS64 DSP instructions */\n+/* { dg-do compile } */\n+/* { dg-options \"-mgp64 -mdsp\" }  */\n+\n+/* { dg-final { scan-assembler \"\\tldx\\t\" } } */\n+\n+NOMIPS16 signed long long test (signed long long *a, int index)\n+{\n+  return __builtin_mips_ldx (a, index);\n+}"}, {"sha": "2d8b0c6dcdd4268dd1870915f025b5c7a2f66980", "filename": "gcc/testsuite/gcc.target/mips/octeon2-lx-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-1.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=octeon2 -O -mgp64\" } */\n+\n+#define TEST(N, R, T) \\\n+ T fll##N (T j, R *b, long long i) { return j + b[i]; } \\\n+ T gll##N (T j, unsigned R *b, long long i) { return j + b[i]; } \\\n+ T fi##N (T j, R *b, int i) { return j + b[i]; } \\\n+ T gi##N (T j, unsigned R *b, int i) { return j + b[i]; } \\\n+\n+TEST (1, char, int)\n+TEST (2, char, long long)\n+/* { dg-final { scan-assembler-times \"\\tlbx\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tlbux\\t\" 4 } } */\n+TEST (3, short, int)\n+TEST (4, short, long long)\n+/* { dg-final { scan-assembler-times \"\\tlhx\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tlhux\\t\" 4 } } */\n+TEST (5, int, long long)\n+/* { dg-final { scan-assembler-times \"\\tlwx\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tlwux\\t\" 2 } } */"}, {"sha": "521a71f961bbef7b4d315a4b181d2f09d3eb609a", "filename": "gcc/testsuite/gcc.target/mips/octeon2-lx-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-2.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=octeon2 -O -mgp64\" } */\n+\n+#define TEST(N, T) \\\n+  T f##N (T *p, int i) { return p[i]; } \\\n+  unsigned T g##N (unsigned T *p, int i) { return p[i]; }\n+\n+TEST (1, char)\n+/* { dg-final { scan-assembler-times \"\\tlbu?x\\t\" 2 } } */\n+TEST (2, short)\n+/* { dg-final { scan-assembler-times \"\\tlhu?x\\t\" 2 } } */\n+TEST (3, int)\n+/* { dg-final { scan-assembler-times \"\\tlwx\\t\" 2 } } */\n+TEST (4, long long)\n+/* { dg-final { scan-assembler-times \"\\tldx\\t\" 2 } } */"}, {"sha": "51d2e1031ccd86cb9073df976e6bdc7b3f11bae6", "filename": "gcc/testsuite/gcc.target/mips/octeon2-lx-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770da00a177e84aafd6a35877aedc4ff97677948/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Focteon2-lx-3.c?ref=770da00a177e84aafd6a35877aedc4ff97677948", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=octeon2 -O -mgp32\" } */\n+\n+#define TEST(N, T) \\\n+  T f##N (T *p, int i) { return p[i]; } \\\n+  unsigned T g##N (unsigned T *p, int i) { return p[i]; }\n+\n+TEST (1, char)\n+/* { dg-final { scan-assembler-times \"\\tlbu?x\\t\" 2 } } */\n+TEST (2, short)\n+/* { dg-final { scan-assembler-times \"\\tlhu?x\\t\" 2 } } */\n+TEST (3, int)\n+/* { dg-final { scan-assembler-times \"\\tlwx\\t\" 2 } } */"}]}