{"sha": "54634841e755bf81e1c01d6ad9d4284d2b774709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2MzQ4NDFlNzU1YmY4MWUxYzAxZDZhZDlkNDI4NGQyYjc3NDcwOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-16T10:45:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-16T10:45:18Z"}, "message": "re PR middle-end/39625 (Revision 145338 breaks ability to build Ada)\n\n2009-04-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/39625\n\t* tree-cfg.c (make_blocks): Split statements with to-be\n\tabnormal SSA names on the lhs.\n\nFrom-SVN: r146168", "tree": {"sha": "aea1f631377fbafc1c53cc58287483dc76e4a8b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea1f631377fbafc1c53cc58287483dc76e4a8b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54634841e755bf81e1c01d6ad9d4284d2b774709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54634841e755bf81e1c01d6ad9d4284d2b774709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54634841e755bf81e1c01d6ad9d4284d2b774709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54634841e755bf81e1c01d6ad9d4284d2b774709/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540b5d9ce19915edcf491f6cebeec0a5c5571ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540b5d9ce19915edcf491f6cebeec0a5c5571ac7"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "f04bbcff5fc46a84bd520c6a5673f48ecb09fb97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54634841e755bf81e1c01d6ad9d4284d2b774709/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54634841e755bf81e1c01d6ad9d4284d2b774709/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54634841e755bf81e1c01d6ad9d4284d2b774709", "patch": "@@ -1,3 +1,9 @@\n+2009-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/39625\n+\t* tree-cfg.c (make_blocks): Split statements with to-be\n+\tabnormal SSA names on the lhs.\n+\n 2009-04-16  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-common.c (vector_targets_convertible_p, vector_types_convertible_p):"}, {"sha": "447e6cf0a090021c411f75a3f9244f01f5c0c4a2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54634841e755bf81e1c01d6ad9d4284d2b774709/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54634841e755bf81e1c01d6ad9d4284d2b774709/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=54634841e755bf81e1c01d6ad9d4284d2b774709", "patch": "@@ -375,7 +375,29 @@ make_blocks (gimple_seq seq)\n       /* If STMT is a basic block terminator, set START_NEW_BLOCK for the\n \t next iteration.  */\n       if (stmt_ends_bb_p (stmt))\n-\tstart_new_block = true;\n+\t{\n+\t  /* If the stmt can make abnormal goto use a new temporary\n+\t     for the assignment to the LHS.  This makes sure the old value\n+\t     of the LHS is available on the abnormal edge.  Otherwise\n+\t     we will end up with overlapping life-ranges for abnormal\n+\t     SSA names.  */\n+\t  if (gimple_has_lhs (stmt)\n+\t      && stmt_can_make_abnormal_goto (stmt)\n+\t      && is_gimple_reg_type (TREE_TYPE (gimple_get_lhs (stmt))))\n+\t    {\n+\t      tree lhs = gimple_get_lhs (stmt);\n+\t      tree tmp = create_tmp_var (TREE_TYPE (lhs), NULL);\n+\t      gimple s = gimple_build_assign (lhs, tmp);\n+\t      gimple_set_location (s, gimple_location (stmt));\n+\t      gimple_set_block (s, gimple_block (stmt));\n+\t      gimple_set_lhs (stmt, tmp);\n+\t      if (TREE_CODE (TREE_TYPE (tmp)) == COMPLEX_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (tmp)) == VECTOR_TYPE)\n+\t\tDECL_GIMPLE_REG_P (tmp) = 1;\n+\t      gsi_insert_after (&i, s, GSI_SAME_STMT);\n+\t    }\n+\t  start_new_block = true;\n+\t}\n \n       gsi_next (&i);\n       first_stmt_of_seq = false;"}]}