{"sha": "ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI4NDc0OGFmMWI5ZWIxNThmNmEyY2IwZDJmOGJlOTdmMTk2YTVmMg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-12-22T12:01:44Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-12-22T12:01:44Z"}, "message": "re PR c++/23333 (accepts invalid pure specifier)\n\n2005-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n\n\tPR c++/23333\n\t* include/cpplib.h: Add PURE_ZERO to flags for the cpp_token structure.\n\n\t* c-lex.c (c_lex_with_flags): Add PURE_ZERO to cpp_flags if\n\tnumber is a single digit '0'.\n\n\t* parser.c (cp_parser_pure_specifier): Check for PURE_ZERO to\n\tidentify a single '0'.\n\n\t* g++.dg/parse/error25.C: Add more tests.\n\nFrom-SVN: r108947", "tree": {"sha": "b94f65ebd41d3c48ba009c669b5ad7aae0e5fc93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b94f65ebd41d3c48ba009c669b5ad7aae0e5fc93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/comments", "author": null, "committer": null, "parents": [{"sha": "110eec241d7bc08f91573738b449bafbb52e3498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110eec241d7bc08f91573738b449bafbb52e3498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110eec241d7bc08f91573738b449bafbb52e3498"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "abed9bd23ef50c5e1cd51564b98885a8223cee93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -1,3 +1,9 @@\n+2005-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/23333\n+\t* c-lex.c (c_lex_with_flags): Add PURE_ZERO to cpp_flags if\n+\tnumber is a single digit '0'.\n+\n 2005-12-22  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/23518"}, {"sha": "af3695f6e5a88084238eba3bea0d8fd30a8fb421", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -333,6 +333,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n   static bool no_more_pch;\n   const cpp_token *tok;\n   enum cpp_ttype type;\n+  unsigned char add_flags = 0;\n \n   timevar_push (TV_CPP);\n  retry:\n@@ -366,6 +367,10 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n \t    break;\n \n \t  case CPP_N_INTEGER:\n+\t    /* C++ uses '0' to mark virtual functions as pure.\n+\t       Set PURE_ZERO to pass this information to the C++ parser.  */\n+\t    if (tok->val.str.len == 1 && *tok->val.str.text == '0')\n+\t      add_flags = PURE_ZERO;\n \t    *value = interpret_integer (tok, flags);\n \t    break;\n \n@@ -472,7 +477,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n     }\n \n   if (cpp_flags)\n-    *cpp_flags = tok->flags;\n+    *cpp_flags = tok->flags | add_flags;\n \n   if (!no_more_pch)\n     {"}, {"sha": "361202edb41b02125a54ccf96221b5e814b8c3da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -1,3 +1,9 @@\n+2005-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/23333\n+\t* parser.c (cp_parser_pure_specifier): Check for PURE_ZERO to\n+\tidentify a single '0'.\n+\n 2005-12-20  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/21228"}, {"sha": "ca561768ff09134491a1f6530c6e6c0dac8ef465", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -13648,18 +13648,13 @@ cp_parser_pure_specifier (cp_parser* parser)\n     return error_mark_node;\n   /* Look for the `0' token.  */\n   token = cp_lexer_consume_token (parser->lexer);\n-  if (token->type != CPP_NUMBER || !integer_zerop (token->value))\n-    {\n-      cp_parser_error (parser,\n-\t\t       \"invalid pure specifier (only `= 0' is allowed)\");\n-      cp_parser_skip_to_end_of_statement (parser);\n-      return error_mark_node;\n-    }\n+  /* c_lex_with_flags marks a single digit '0' with PURE_ZERO.  */\n+  if (token->type == CPP_NUMBER && (token->flags & PURE_ZERO))\n+    return integer_zero_node;\n \n-  /* FIXME: Unfortunately, this will accept `0L' and `0x00' as well.\n-     We need to get information from the lexer about how the number\n-     was spelled in order to fix this problem.  */\n-  return integer_zero_node;\n+  cp_parser_error (parser, \"invalid pure specifier (only `= 0' is allowed)\");\n+  cp_parser_skip_to_end_of_statement (parser);\n+  return error_mark_node;\n }\n \n /* Parse a constant-initializer."}, {"sha": "089e08802be4bf9df8b8794547114b34cb40bc96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -1,3 +1,8 @@\n+2005-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/23333\n+\t* g++.dg/parse/error25.C: Add more tests.\n+\n 2005-12-22  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/18990"}, {"sha": "360b40f2e7effd8925e71e134c00aa2e1c4df694", "filename": "gcc/testsuite/g++.dg/parse/error25.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror25.C?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -11,6 +11,7 @@ class foo\n   virtual void bar2 () = __null;  // { dg-error \"invalid pure specifier\" }\n   virtual void bar3 () = 4;       // { dg-error \"invalid pure specifier\" }\n   virtual void bar4 () = A::f;    // { dg-error \"invalid pure specifier\" }\n+  virtual void bar5 () = 0l;      // { dg-error \"invalid pure specifier\" }\n+  virtual void bar6 () = 00;      // { dg-error \"invalid pure specifier\" }\n+  virtual void bar7 () = 0x0;     // { dg-error \"invalid pure specifier\" }\n };\n-\n-"}, {"sha": "e21ea6dc524766f95b858992c85f72cf63a4f3d0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -1,3 +1,8 @@\n+2005-12-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/23333\n+\t* include/cpplib.h: Add PURE_ZERO to flags for the cpp_token structure.\n+\n 2005-12-07  Jon Grimm  <jgrimm2@us.ibm.com>\n \t    Ben Elliston  <bje@au.ibm.com>\n "}, {"sha": "0ab66357341b47860748571f0c5029be3d91932c", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ab84748af1b9eb158f6a2cb0d2f8be97f196a5f2", "patch": "@@ -172,6 +172,8 @@ struct cpp_string GTY(())\n #define NAMED_OP\t(1 << 4) /* C++ named operators.  */\n #define NO_EXPAND\t(1 << 5) /* Do not macro-expand this token.  */\n #define BOL\t\t(1 << 6) /* Token at beginning of line.  */\n+#define PURE_ZERO\t(1 << 7) /* Single 0 digit, used by the C++ frontend,\n+\t\t\t\t    set in c-lex.c.  */\n \n /* Specify which field, if any, of the cpp_token union is used.  */\n "}]}