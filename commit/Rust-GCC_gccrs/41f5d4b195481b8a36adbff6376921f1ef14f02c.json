{"sha": "41f5d4b195481b8a36adbff6376921f1ef14f02c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmNWQ0YjE5NTQ4MWI4YTM2YWRiZmY2Mzc2OTIxZjFlZjE0ZjAyYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-12-29T17:24:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-12-29T17:24:59Z"}, "message": "call.c (build_user_type_conversion_1): Use my_friendly_assert rather than if ...\n\ncp:\n\t* call.c (build_user_type_conversion_1): Use my_friendly_assert\n\trather than if ... abort.\n\t* cvt.c (convert_to_reference): Likewise.\n\t* semantics.c (setup_vtbl_ptr): Likewise.\n\t* pt.c (lookup_template_class): Comment typo.\n\nFrom-SVN: r48371", "tree": {"sha": "19eb5b6cc76462267091b0eee5b279613bc866d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19eb5b6cc76462267091b0eee5b279613bc866d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f5d4b195481b8a36adbff6376921f1ef14f02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f5d4b195481b8a36adbff6376921f1ef14f02c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f5d4b195481b8a36adbff6376921f1ef14f02c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f5d4b195481b8a36adbff6376921f1ef14f02c/comments", "author": null, "committer": null, "parents": [{"sha": "f3368a9098c3aa67ef422208978bf8df6353bc5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3368a9098c3aa67ef422208978bf8df6353bc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3368a9098c3aa67ef422208978bf8df6353bc5a"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "b392e959a9463ae4cfc233117fe2a9b168ac771d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41f5d4b195481b8a36adbff6376921f1ef14f02c", "patch": "@@ -1,3 +1,11 @@\n+2001-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* call.c (build_user_type_conversion_1): Use my_friendly_assert\n+\trather than if ... abort.\n+\t* cvt.c (convert_to_reference): Likewise.\n+\t* semantics.c (setup_vtbl_ptr): Likewise.\n+\t* pt.c (lookup_template_class): Comment typo.\n+\t\n 2001-12-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/5125"}, {"sha": "865d1eff9fad3c1848153205cb756a17213d8f6a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=41f5d4b195481b8a36adbff6376921f1ef14f02c", "patch": "@@ -2376,9 +2376,8 @@ build_user_type_conversion_1 (totype, expr, flags)\n   /* We represent conversion within a hierarchy using RVALUE_CONV and\n      BASE_CONV, as specified by [over.best.ics]; these become plain\n      constructor calls, as specified in [dcl.init].  */\n-  if (IS_AGGR_TYPE (fromtype) && IS_AGGR_TYPE (totype)\n-      && DERIVED_FROM_P (totype, fromtype))\n-    abort ();\n+  my_friendly_assert (!IS_AGGR_TYPE (fromtype) || !IS_AGGR_TYPE (totype)\n+\t\t      || !DERIVED_FROM_P (totype, fromtype), 20011226);\n \n   if (IS_AGGR_TYPE (totype))\n     ctors = lookup_fnfields (TYPE_BINFO (totype),\n@@ -2400,11 +2399,11 @@ build_user_type_conversion_1 (totype, expr, flags)\n       t = build_int_2 (0, 0);\n       TREE_TYPE (t) = build_pointer_type (totype);\n       args = build_tree_list (NULL_TREE, expr);\n-      if (DECL_HAS_IN_CHARGE_PARM_P (OVL_CURRENT (ctors))\n-\t  || DECL_HAS_VTT_PARM_P (OVL_CURRENT (ctors)))\n-\t/* We should never try to call the abstract or base constructor\n-\t   from here.  */\n-\tabort ();\n+      /* We should never try to call the abstract or base constructor\n+\t from here.  */\n+      my_friendly_assert (!DECL_HAS_IN_CHARGE_PARM_P (OVL_CURRENT (ctors))\n+\t\t\t  && !DECL_HAS_VTT_PARM_P (OVL_CURRENT (ctors)),\n+\t\t\t  20011226);\n       args = tree_cons (NULL_TREE, t, args);\n     }\n   for (; ctors; ctors = OVL_NEXT (ctors))"}, {"sha": "6029e8427169120259505a99a2745225c7510a5a", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=41f5d4b195481b8a36adbff6376921f1ef14f02c", "patch": "@@ -485,8 +485,7 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n       intype = TREE_TYPE (expr);\n     }\n \n-  if (TREE_CODE (intype) == REFERENCE_TYPE)\n-    my_friendly_abort (364);\n+  my_friendly_assert (TREE_CODE (intype) != REFERENCE_TYPE, 364);\n \n   intype = TYPE_MAIN_VARIANT (intype);\n "}, {"sha": "139076ecfec0760e8c4098c93cd8e07832e564e2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=41f5d4b195481b8a36adbff6376921f1ef14f02c", "patch": "@@ -3982,7 +3982,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n \t  arg_depth = TMPL_ARGS_DEPTH (arglist);\n \t}\n \n-      /* Now we should enough arguments.  */\n+      /* Now we should have enough arguments.  */\n       my_friendly_assert (parm_depth == arg_depth, 0);\n       \n       /* From here on, we're only interested in the most general"}, {"sha": "b04a13aee76fb843fd3f9d7e3dab70b3ec82f4dd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f5d4b195481b8a36adbff6376921f1ef14f02c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=41f5d4b195481b8a36adbff6376921f1ef14f02c", "patch": "@@ -1157,10 +1157,7 @@ setup_vtbl_ptr (member_init_list, base_init_list)\n      tree base_init_list;\n {\n   my_friendly_assert (doing_semantic_analysis_p (), 19990919);\n-\n-  /* If we've already done this, break.  */\n-  if (vtbls_set_up_p)\n-    abort ();\n+  my_friendly_assert (!vtbls_set_up_p, 20011220);\n \n   if (processing_template_decl)\n     add_stmt (build_min_nt (CTOR_INITIALIZER,"}]}