{"sha": "ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyMTllNmU4OGE0YzBiODAxYjRjNWViOTcxYzY3MjdiYzMxYzdlNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-05-24T13:36:21Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-05-24T13:36:21Z"}, "message": "re PR c++/85847 (unexpected expression of kind template_id_expr)\n\n\tPR c++/85847\n\t* init.c (build_new_1): Use fold_non_dependent_expr.  Use a dedicated\n\tvariable for its result.  Fix a condition.\n\t(build_new): Use fold_non_dependent_expr.  Tweak a condition.\n\n\t* g++.dg/cpp0x/new3.C: New test.\n\nFrom-SVN: r260671", "tree": {"sha": "bd4a0e1a00da4a3f5df1439cd5d91c04d25d4efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4a0e1a00da4a3f5df1439cd5d91c04d25d4efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "672dfc39f1dedd8b00fb10f6b7b01671b27c0f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672dfc39f1dedd8b00fb10f6b7b01671b27c0f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672dfc39f1dedd8b00fb10f6b7b01671b27c0f86"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "4f4c9e78f1ed0bd35520b06c4d00b1d61b1d3a72", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "patch": "@@ -1,3 +1,10 @@\n+2018-05-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85847\n+\t* init.c (build_new_1): Use fold_non_dependent_expr.  Use a dedicated\n+\tvariable for its result.  Fix a condition.\n+\t(build_new): Use fold_non_dependent_expr.  Tweak a condition.\n+\n 2018-05-23  Jason Merrill  <jason@redhat.com>\n \n \tFix cast to rvalue reference from prvalue."}, {"sha": "5bfd0848fc4edc477c2b20fb1e7dd6ff22bde08d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "patch": "@@ -2857,10 +2857,9 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       outer_nelts_from_type = true;\n     }\n \n-  /* Lots of logic below. depends on whether we have a constant number of\n+  /* Lots of logic below depends on whether we have a constant number of\n      elements, so go ahead and fold it now.  */\n-  if (outer_nelts)\n-    outer_nelts = maybe_constant_value (outer_nelts);\n+  const_tree cst_outer_nelts = fold_non_dependent_expr (outer_nelts);\n \n   /* If our base type is an array, then make sure we know how many elements\n      it has.  */\n@@ -2912,7 +2911,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n   /* Warn if we performed the (T[N]) to T[N] transformation and N is\n      variable.  */\n   if (outer_nelts_from_type\n-      && !TREE_CONSTANT (outer_nelts))\n+      && !TREE_CONSTANT (cst_outer_nelts))\n     {\n       if (complain & tf_warning_or_error)\n \t{\n@@ -3011,9 +3010,9 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n       size = size_binop (MULT_EXPR, size, fold_convert (sizetype, nelts));\n \n-      if (INTEGER_CST == TREE_CODE (outer_nelts))\n+      if (TREE_CODE (cst_outer_nelts) == INTEGER_CST)\n \t{\n-\t  if (tree_int_cst_lt (max_outer_nelts_tree, outer_nelts))\n+\t  if (tree_int_cst_lt (max_outer_nelts_tree, cst_outer_nelts))\n \t    {\n \t      /* When the array size is constant, check it at compile time\n \t\t to make sure it doesn't exceed the implementation-defined\n@@ -3639,13 +3638,13 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n       /* Try to determine the constant value only for the purposes\n \t of the diagnostic below but continue to use the original\n \t value and handle const folding later.  */\n-      const_tree cst_nelts = maybe_constant_value (nelts);\n+      const_tree cst_nelts = fold_non_dependent_expr (nelts);\n \n       /* The expression in a noptr-new-declarator is erroneous if it's of\n \t non-class type and its value before converting to std::size_t is\n \t less than zero. ... If the expression is a constant expression,\n \t the program is ill-fomed.  */\n-      if (INTEGER_CST == TREE_CODE (cst_nelts)\n+      if (TREE_CODE (cst_nelts) == INTEGER_CST\n \t  && tree_int_cst_sgn (cst_nelts) == -1)\n \t{\n \t  if (complain & tf_error)"}, {"sha": "8a6fe2022963c3c445975b69c567e916244f473d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "patch": "@@ -1,3 +1,8 @@\n+2018-05-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/85847\n+\t* g++.dg/cpp0x/new3.C: New test.\n+\n 2018-05-24  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/discr52.adb: New testcase."}, {"sha": "c388acf552e7165c0560b1b040a064ad0029ef19", "filename": "gcc/testsuite/g++.dg/cpp0x/new3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew3.C?ref=ea219e6e88a4c0b801b4c5eb971c6727bc31c7e6", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/85847\n+// { dg-do compile { target c++11 } }\n+\n+template <class>\n+int f(int b) { return b; }\n+\n+template <class>\n+void g()\n+{\n+  auto a = new int[f<int>(2), 2];\n+}"}]}