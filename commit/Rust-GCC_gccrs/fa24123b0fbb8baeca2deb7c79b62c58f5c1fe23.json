{"sha": "fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyNDEyM2IwZmJiOGJhZWNhMmRlYjdjNzliNjJjNThmNWMxZmUyMw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2015-07-24T01:38:19Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2015-07-24T01:38:19Z"}, "message": "cse.c (cse_insn): Fix missing check for STRICT_LOW_PART and minor clean up.\n\ngcc/ChangeLog:\n\n2015-07-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* cse.c (cse_insn): Fix missing check for STRICT_LOW_PART and minor\n\tclean up.\n\nFrom-SVN: r226134", "tree": {"sha": "8ab460a664f3a41e25cc0d2663e7634a41029e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ab460a664f3a41e25cc0d2663e7634a41029e57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23/comments", "author": null, "committer": null, "parents": [{"sha": "46e82d43f1868a4dfcc3795bedd2f9e7c1814ad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e82d43f1868a4dfcc3795bedd2f9e7c1814ad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e82d43f1868a4dfcc3795bedd2f9e7c1814ad0"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "1d6fd3c7dffd65575e8a1712b9a2e53a302833c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "patch": "@@ -1,3 +1,8 @@\n+2015-07-23  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* cse.c (cse_insn): Fix missing check for STRICT_LOW_PART and minor\n+\tclean up.\n+\n 2015-07-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_build_builtin_va_list_64): Rename"}, {"sha": "96adf18e6b7abfdd24690279cfa2155055bfaf3b", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=fa24123b0fbb8baeca2deb7c79b62c58f5c1fe23", "patch": "@@ -4529,10 +4529,10 @@ cse_insn (rtx_insn *insn)\n      this case, and if it isn't set, then there will be no equivalence\n      for the destination.  */\n   if (n_sets == 1 && REG_NOTES (insn) != 0\n-      && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0)\n+      && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0\n+      && (! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl))))\n     {\n-      if ((! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl)))\n-\t  || GET_CODE (SET_DEST (sets[0].rtl)) == STRICT_LOW_PART)\n+      if (GET_CODE (SET_DEST (sets[0].rtl)) == STRICT_LOW_PART)\n \tsrc_eqv = copy_rtx (XEXP (tem, 0));\n \n       /* If DEST is of the form ZERO_EXTACT, as in:\n@@ -4544,14 +4544,14 @@ cse_insn (rtx_insn *insn)\n \t point.  Note that this is different from SRC_EQV. We can however\n \t calculate SRC_EQV with the position and width of ZERO_EXTRACT.  */\n       else if (GET_CODE (SET_DEST (sets[0].rtl)) == ZERO_EXTRACT\n-\t       && CONST_INT_P (src_eqv)\n+\t       && CONST_INT_P (XEXP (tem, 0))\n \t       && CONST_INT_P (XEXP (SET_DEST (sets[0].rtl), 1))\n \t       && CONST_INT_P (XEXP (SET_DEST (sets[0].rtl), 2)))\n \t{\n \t  rtx dest_reg = XEXP (SET_DEST (sets[0].rtl), 0);\n \t  rtx width = XEXP (SET_DEST (sets[0].rtl), 1);\n \t  rtx pos = XEXP (SET_DEST (sets[0].rtl), 2);\n-\t  HOST_WIDE_INT val = INTVAL (src_eqv);\n+\t  HOST_WIDE_INT val = INTVAL (XEXP (tem, 0));\n \t  HOST_WIDE_INT mask;\n \t  unsigned int shift;\n \t  if (BITS_BIG_ENDIAN)"}]}