{"sha": "12d844c83053a523f291565a757220fee255995c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkODQ0YzgzMDUzYTUyM2YyOTE1NjVhNzU3MjIwZmVlMjU1OTk1Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-19T16:27:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-19T16:27:59Z"}, "message": "gcc_update (gcc/config/arm/arm-tables.opt): Also depend on gcc/config/arm/arm-fpus.def.\n\ncontrib:\n\t* gcc_update (gcc/config/arm/arm-tables.opt): Also depend on\n\tgcc/config/arm/arm-fpus.def.\n\ngcc:\n\t* config/arm/arm-fpus.def: New.\n\t* config/arm/genopt.sh: Generate Enum and EnumValue entries from\n\tarm-fpus.def.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm.c (all_fpus): Move contents to arm-fpus.def.\n\t(arm_option_override): Don't decode FPU name to string here.\n\t* config/arm/arm.opt (mfpu=): Use Enum.\n\t* config/arm/t-arm ($(srcdir)/config/arm/arm-tables.opt, arm.o):\n\tUpdate dependencies.\n\nFrom-SVN: r173916", "tree": {"sha": "d00d0264dfa526f521248b5d943af0d2149389f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00d0264dfa526f521248b5d943af0d2149389f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d844c83053a523f291565a757220fee255995c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d844c83053a523f291565a757220fee255995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d844c83053a523f291565a757220fee255995c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d844c83053a523f291565a757220fee255995c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e350e99cb9f93ea99216c9c2a40517111636116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e350e99cb9f93ea99216c9c2a40517111636116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e350e99cb9f93ea99216c9c2a40517111636116"}], "stats": {"total": 205, "additions": 163, "deletions": 42}, "files": [{"sha": "cb790daa4610e7aaf4195daad0dd33e62b928df3", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -1,3 +1,8 @@\n+2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/arm/arm-tables.opt): Also depend on\n+\tgcc/config/arm/arm-fpus.def.\n+\n 2011-05-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc_update (gcc/config/rs6000/rs6000-tables.opt): New"}, {"sha": "30bf3aa87cf27c5439c265f7bd3730607c6a920a", "filename": "contrib/gcc_update", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -80,7 +80,7 @@ gcc/cstamp-h.in: gcc/configure.ac\n gcc/config.in: gcc/cstamp-h.in\n gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n-gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/genopt.sh\n+gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/arm-fpus.def gcc/config/arm/genopt.sh\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh"}, {"sha": "96d783ed207ddc6e8d481958cd5f6feea8bebf2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -1,3 +1,15 @@\n+2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/arm/arm-fpus.def: New.\n+\t* config/arm/genopt.sh: Generate Enum and EnumValue entries from\n+\tarm-fpus.def.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm.c (all_fpus): Move contents to arm-fpus.def.\n+\t(arm_option_override): Don't decode FPU name to string here.\n+\t* config/arm/arm.opt (mfpu=): Use Enum.\n+\t* config/arm/t-arm ($(srcdir)/config/arm/arm-tables.opt, arm.o):\n+\tUpdate dependencies.\n+\n 2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* collect2.c: Include diagnostic.h."}, {"sha": "9f7e62acc4bc8d33f408186dbdecbba07f142f57", "filename": "gcc/config/arm/arm-fpus.def", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm-fpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm-fpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fpus.def?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -0,0 +1,48 @@\n+/* ARM FPU variants.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Before using #include to read this file, define a macro:\n+\n+      ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16)\n+\n+   The arguments are the fields of struct arm_fpu_desc.\n+\n+   genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n+\n+ARM_FPU(\"fpa\",\t\tARM_FP_MODEL_FPA, 0, VFP_NONE, false, false)\n+ARM_FPU(\"fpe2\",\t\tARM_FP_MODEL_FPA, 2, VFP_NONE, false, false)\n+ARM_FPU(\"fpe3\",\t\tARM_FP_MODEL_FPA, 3, VFP_NONE, false, false)\n+ARM_FPU(\"maverick\",\tARM_FP_MODEL_MAVERICK, 0, VFP_NONE, false, false)\n+ARM_FPU(\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, false, false)\n+ARM_FPU(\"vfpv3\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false)\n+ARM_FPU(\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, true)\n+ARM_FPU(\"vfpv3-d16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, false)\n+ARM_FPU(\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, true)\n+ARM_FPU(\"vfpv3xd\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, false)\n+ARM_FPU(\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, true)\n+ARM_FPU(\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , false)\n+ARM_FPU(\"neon-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true, true)\n+ARM_FPU(\"vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, false, true)\n+ARM_FPU(\"vfpv4-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, false, true)\n+ARM_FPU(\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, false, true)\n+ARM_FPU(\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, true, true)\n+/* Compatibility aliases.  */\n+ARM_FPU(\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false)"}, {"sha": "f984480a01e34d3ad58f016e768b16449ff5affd", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -1,5 +1,6 @@\n ; -*- buffer-read-only: t -*-\n-; Generated automatically by genopt.sh from arm-cores.def and arm-arches.def.\n+; Generated automatically by genopt.sh from arm-cores.def, arm-arches.def\n+; and arm-fpus.def.\n \n ; Copyright (C) 2011 Free Software Foundation, Inc.\n ;\n@@ -339,3 +340,61 @@ Enum(arm_arch) String(iwmmxt) Value(23)\n EnumValue\n Enum(arm_arch) String(iwmmxt2) Value(24)\n \n+Enum\n+Name(arm_fpu) Type(int)\n+Known ARM FPUs (for use with the -mfpu= option):\n+\n+EnumValue\n+Enum(arm_fpu) String(fpa) Value(0)\n+\n+EnumValue\n+Enum(arm_fpu) String(fpe2) Value(1)\n+\n+EnumValue\n+Enum(arm_fpu) String(fpe3) Value(2)\n+\n+EnumValue\n+Enum(arm_fpu) String(maverick) Value(3)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfp) Value(4)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3) Value(5)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3-fp16) Value(6)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3-d16) Value(7)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3-d16-fp16) Value(8)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3xd) Value(9)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv3xd-fp16) Value(10)\n+\n+EnumValue\n+Enum(arm_fpu) String(neon) Value(11)\n+\n+EnumValue\n+Enum(arm_fpu) String(neon-fp16) Value(12)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv4) Value(13)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfpv4-d16) Value(14)\n+\n+EnumValue\n+Enum(arm_fpu) String(fpv4-sp-d16) Value(15)\n+\n+EnumValue\n+Enum(arm_fpu) String(neon-vfpv4) Value(16)\n+\n+EnumValue\n+Enum(arm_fpu) String(vfp3) Value(17)\n+"}, {"sha": "47c7a3a4ca9bf38588daa0e6435f0d9ab44aafcd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -939,25 +939,10 @@ char arm_arch_name[] = \"__ARM_ARCH_0UNK__\";\n \n static const struct arm_fpu_desc all_fpus[] =\n {\n-  {\"fpa\",\t\tARM_FP_MODEL_FPA, 0, VFP_NONE, false, false},\n-  {\"fpe2\",\t\tARM_FP_MODEL_FPA, 2, VFP_NONE, false, false},\n-  {\"fpe3\",\t\tARM_FP_MODEL_FPA, 3, VFP_NONE, false, false},\n-  {\"maverick\",\t\tARM_FP_MODEL_MAVERICK, 0, VFP_NONE, false, false},\n-  {\"vfp\",\t\tARM_FP_MODEL_VFP, 2, VFP_REG_D16, false, false},\n-  {\"vfpv3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false},\n-  {\"vfpv3-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, true},\n-  {\"vfpv3-d16\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, false},\n-  {\"vfpv3-d16-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_D16, false, true},\n-  {\"vfpv3xd\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, false},\n-  {\"vfpv3xd-fp16\",\tARM_FP_MODEL_VFP, 3, VFP_REG_SINGLE, false, true},\n-  {\"neon\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , false},\n-  {\"neon-fp16\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, true , true },\n-  {\"vfpv4\",\t\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, false, true},\n-  {\"vfpv4-d16\",\t\tARM_FP_MODEL_VFP, 4, VFP_REG_D16, false, true},\n-  {\"fpv4-sp-d16\",\tARM_FP_MODEL_VFP, 4, VFP_REG_SINGLE, false, true},\n-  {\"neon-vfpv4\",\tARM_FP_MODEL_VFP, 4, VFP_REG_D32, true, true},\n-  /* Compatibility aliases.  */\n-  {\"vfp3\",\t\tARM_FP_MODEL_VFP, 3, VFP_REG_D32, false, false},\n+#define ARM_FPU(NAME, MODEL, REV, VFP_REGS, NEON, FP16) \\\n+  { NAME, MODEL, REV, VFP_REGS, NEON, FP16 },\n+#include \"arm-fpus.def\"\n+#undef ARM_FPU\n };\n \n \n@@ -1244,8 +1229,6 @@ arm_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n static void\n arm_option_override (void)\n {\n-  unsigned i;\n-\n   if (global_options_set.x_arm_arch_option)\n     arm_selected_arch = &all_architectures[arm_arch_option];\n \n@@ -1507,8 +1490,11 @@ arm_option_override (void)\n   if (TARGET_IWMMXT_ABI && !TARGET_IWMMXT)\n     error (\"iwmmxt abi requires an iwmmxt capable cpu\");\n \n-  if (target_fpu_name == NULL)\n+  if (!global_options_set.x_arm_fpu_index)\n     {\n+      const char *target_fpu_name;\n+      bool ok;\n+\n #ifdef FPUTYPE_DEFAULT\n       target_fpu_name = FPUTYPE_DEFAULT;\n #else\n@@ -1517,23 +1503,13 @@ arm_option_override (void)\n       else\n \ttarget_fpu_name = \"fpe2\";\n #endif\n-    }\n \n-  arm_fpu_desc = NULL;\n-  for (i = 0; i < ARRAY_SIZE (all_fpus); i++)\n-    {\n-      if (streq (all_fpus[i].name, target_fpu_name))\n-\t{\n-\t  arm_fpu_desc = &all_fpus[i];\n-\t  break;\n-\t}\n+      ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &arm_fpu_index,\n+\t\t\t\t  CL_TARGET);\n+      gcc_assert (ok);\n     }\n \n-  if (!arm_fpu_desc)\n-    {\n-      error (\"invalid floating point option: -mfpu=%s\", target_fpu_name);\n-      return;\n-    }\n+  arm_fpu_desc = &all_fpus[arm_fpu_index];\n \n   switch (arm_fpu_desc->model)\n     {"}, {"sha": "c45bc774bdc5b86832dbc17a6b3472d2ec634a38", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -145,7 +145,7 @@ mfpe=3\n Target RejectNegative Undocumented Alias(mfpu=, fpe3)\n \n mfpu=\n-Target RejectNegative Joined Var(target_fpu_name)\n+Target RejectNegative Joined Enum(arm_fpu) Var(arm_fpu_index)\n Specify the name of the target floating point hardware/format\n \n mhard-float"}, {"sha": "6b31896d8f55270fd6fef64eb17a0599cb82ed4f", "filename": "gcc/config/arm/genopt.sh", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fgenopt.sh?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -20,7 +20,8 @@\n \n cat <<EOF\n ; -*- buffer-read-only: t -*-\n-; Generated automatically by genopt.sh from arm-cores.def and arm-arches.def.\n+; Generated automatically by genopt.sh from arm-cores.def, arm-arches.def\n+; and arm-fpus.def.\n \n ; Copyright (C) 2011 Free Software Foundation, Inc.\n ;\n@@ -73,3 +74,22 @@ awk -F'[(, \t]+' 'BEGIN {\n     print \"\"\n     value++\n }' $1/arm-arches.def\n+\n+cat <<EOF\n+Enum\n+Name(arm_fpu) Type(int)\n+Known ARM FPUs (for use with the -mfpu= option):\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^ARM_FPU/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(arm_fpu) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/arm-fpus.def"}, {"sha": "826ec0af5c290e85804019384d3568ef60ec875e", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d844c83053a523f291565a757220fee255995c/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=12d844c83053a523f291565a757220fee255995c", "patch": "@@ -52,7 +52,8 @@ $(srcdir)/config/arm/arm-tune.md: $(srcdir)/config/arm/gentune.sh \\\n \t\t$(srcdir)/config/arm/arm-tune.md\n \n $(srcdir)/config/arm/arm-tables.opt: $(srcdir)/config/arm/genopt.sh \\\n-  $(srcdir)/config/arm/arm-cores.def $(srcdir)/config/arm/arm-arches.def\n+  $(srcdir)/config/arm/arm-cores.def $(srcdir)/config/arm/arm-arches.def \\\n+  $(srcdir)/config/arm/arm-fpus.def\n \t$(SHELL) $(srcdir)/config/arm/genopt.sh $(srcdir)/config/arm > \\\n \t\t$(srcdir)/config/arm/arm-tables.opt\n \n@@ -64,7 +65,7 @@ arm.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(GGC_H) except.h $(C_PRAGMA_H) $(INTEGRATE_H) $(TM_P_H) \\\n   $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H) $(srcdir)/config/arm/arm-cores.def \\\n-  $(srcdir)/config/arm/arm-arches.def\n+  $(srcdir)/config/arm/arm-arches.def $(srcdir)/config/arm/arm-fpus.def\n \n arm-c.o: $(srcdir)/config/arm/arm-c.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TREE_H) output.h $(C_COMMON_H)"}]}