{"sha": "80ca43a3140e5389e0b07621f9e30704f8371d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjYTQzYTMxNDBlNTM4OWUwYjA3NjIxZjllMzA3MDRmODM3MWQyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-21T02:04:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-21T02:04:38Z"}, "message": "pt.c (type_unification_real): Set input_location during default arg instantiation.\n\n\t* pt.c (type_unification_real): Set input_location\n\tduring default arg instantiation.\n\nFrom-SVN: r181546", "tree": {"sha": "04c08061e821d1749a3b70b3445de464514be794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c08061e821d1749a3b70b3445de464514be794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ca43a3140e5389e0b07621f9e30704f8371d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ca43a3140e5389e0b07621f9e30704f8371d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ca43a3140e5389e0b07621f9e30704f8371d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ca43a3140e5389e0b07621f9e30704f8371d20/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a4b4d31790e8af35c452689d967b94f0ce06b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4b4d31790e8af35c452689d967b94f0ce06b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4b4d31790e8af35c452689d967b94f0ce06b1a"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "21bfbcd2ebd820a07e4d30e664acd20c1cf120b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -1,3 +1,8 @@\n+2011-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (type_unification_real): Set input_location\n+\tduring default arg instantiation.\n+\n 2011-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51230"}, {"sha": "5b39e9fbb4291a803905b0e7c0e14081036e8e3a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -15218,9 +15218,13 @@ type_unification_real (tree tparms,\n \t    {\n \t      tree parm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n \t      tree arg = TREE_PURPOSE (TREE_VEC_ELT (tparms, i));\n+\t      location_t save_loc = input_location;\n+\t      if (DECL_P (parm))\n+\t\tinput_location = DECL_SOURCE_LOCATION (parm);\n \t      arg = tsubst_template_arg (arg, targs, complain, NULL_TREE);\n \t      arg = convert_template_argument (parm, arg, targs, complain,\n \t\t\t\t\t       i, NULL_TREE);\n+\t      input_location = save_loc;\n \t      if (arg == error_mark_node)\n \t\treturn 1;\n \t      else"}, {"sha": "57ed126332ef4102afa948dc3d45924d5b576f6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -1,3 +1,9 @@\n+2011-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/sfinae11.C: Adjust.\n+\t* g++.dg/cpp0x/sfinae26.C: Adjust.\n+\t* g++.dg/template/unify11.C: Adjust.\n+\n 2011-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51230"}, {"sha": "2e8408d8f4da83b5e0bc94e4687cd7e0c79cda61", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae11.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae11.C?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -12,7 +12,8 @@ inline void f1( T& x ) noexcept( noexcept( declval<T&>().foo() ) ) // { dg-error\n }\n \n template< class T,\n-  bool Noexcept = noexcept( declval<T&>().foo() )\n+  bool Noexcept = noexcept( declval<T&>().foo() ) // { dg-error \"no member|not convert\" }\n+\n >\n inline void f2( T& x ) noexcept( Noexcept )\n {\n@@ -51,7 +52,6 @@ int main()\n   // static_assert(  noexcept( f3(y) ), \"shall be ill-formed(OK).\" );\n \n   noexcept( f1(z) );\t\t// { dg-message \"required\" }\n-  static_assert(  noexcept( f2(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match|could not convert\" }\n-  // { dg-error \"no member\" \"\" { target *-*-* } 54 }\n+  static_assert(  noexcept( f2(z) ), \"shall be ill-formed.\" ); // { dg-error \"no match\" }\n   noexcept( f3(z) );\t\t// { dg-message \"required\" }\n }"}, {"sha": "85bdbbc940ad3150412ab5d541bfba9e83bd27f3", "filename": "gcc/testsuite/g++.dg/template/unify11.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify11.C?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -6,9 +6,10 @@ struct A\n {\n };\n \n-template <typename S, typename T, typename U, typename S::v = &S::v::s>\n+template <typename S, typename T, typename U,\n+\t  typename S::v = &S::v::s> // { dg-error \"is not a\" }\n typename S::A\n-foo (S c, T t, U u)\t\t// { dg-message \"note\" }\n+foo (S c, T t, U u)\n {\n }\n \n@@ -20,8 +21,7 @@ struct B\n     C (U t)\n     {\n       A a;\n-      A b = foo (this, a, t); // { dg-error \"(no matching function|is not a)\" }\n-      // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 23 }\n+      A b = foo (this, a, t); // { dg-error \"no matching function\" }\n     }\n   } c;\n   B () : c (A ())"}, {"sha": "282e95b1fa3ab8bf4b3a77107d05b4d7763c1790", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -1,3 +1,7 @@\n+2011-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/20_util/bind/ref_neg.cc: Adjust error markings.\n+\n 2011-11-20  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/backward/binders.h: Fix examples in doxygen comments and"}, {"sha": "d2441a39ecba0a655a903e10bc6828f33cd1cd0c", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ca43a3140e5389e0b07621f9e30704f8371d20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ca43a3140e5389e0b07621f9e30704f8371d20/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=80ca43a3140e5389e0b07621f9e30704f8371d20", "patch": "@@ -29,8 +29,12 @@ int inc(int& i) { return ++i; }\n void test01()\n {\n   const int dummy = 0;\n-  std::bind(&inc, _1)(0);               // { dg-error  \"no match|rvalue\" }\n-  std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match|const\" }\n+  std::bind(&inc, _1)(0);               // { dg-error  \"no match\" }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1199 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1212 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1226 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1240 }\n+  std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match\" }\n }\n \n struct Inc"}]}