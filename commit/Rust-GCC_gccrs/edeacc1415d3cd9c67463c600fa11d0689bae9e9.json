{"sha": "edeacc1415d3cd9c67463c600fa11d0689bae9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlYWNjMTQxNWQzY2Q5YzY3NDYzYzYwMGZhMTFkMDY4OWJhZTllOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-09-04T07:55:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-09-04T07:55:12Z"}, "message": "builtins.c (expand_builtin_mathfn): Handle BUILT_IN_RINT{,F,L} using rint_optab.\n\n2004-09-04  Uros Bizjak  <uros@kss-loka.si>\n\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_RINT{,F,L}\n\tusing rint_optab.\n\t(expand_builtin): Expand BUILT_IN_RINT{,F,L} using\n\texpand_builtin_mathfn.\n\t* genopinit.c (optabs): Rename trunc_optab to btrunc_optab. Use\n\tbtrunc?f patterns for btrunc_optab. Implement rint_optab using\n\trint?f patterns.\n\t* optabs.c (init_optabs): Initialize rint_optab.\n\t* optabs.h (enum optab_index): Rename OTI_trunc to OTI_btrunc.\n\tAdd new OTI_rint.\n\t(btrunc_optab): Rename macro from trunc_optab.\n\t(rint_optab): Define corresponding macro.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FRNDINT_FLOOR,\n\tUNSPEC_FRNDINT_CEIL, UNSPEC_FRNDINT_TRUNC, UNSPEC_FRNDINT_MASK_PM.\n\n\t* config/i386/i386-protos.h (emit_i387_cw_initialization):\n\tChange prototype. Add new int parameter.\n\t* config/i386/i386.c (emit_i387_cw_initialization):\n\tHandle new rounding modes.\n\n\t* config/i386/i386.h (enum fp_cw_mode): Delete.\n\t(MODE_NEEDED): Handle new rounding modes.\n\t(EMIT_MODE_SET): Change condition to handle new rounding modes.\n\n\t* config/i386/i386.md (UNSPEC_FRNDINT_FLOOR, UNSPEC_FRNDINT_CEIL,\n\tUNSPEC_FRNDINT_TRUNC, UNSPEC_FRNDINT_MASK_PM): New unspecs to\n\trepresent different rounding modes of frndint insn.\n\t(type): Add frndint type.\n\t(i387, length, memory): Handle this type.\n\t(i387_cw): New attribute definition.\n\t(*fix_truncdi_1, fix_truncdi_nomemory, fix_truncdi_memory,\n\t*fix_truncsi_1, fix_truncsi_nomemory, fix_truncsi_memory,\n\t*fix_trunchi_1, fix_trunchi_nomemory, fix_trunchi_memory):\n\tAdd \"i387_cw\" attribute defined to \"trunc\".\n\t(x86_fnstcw_1): Remove comment.\n\t(*frndintxf2): Rename insn definition to frndintxf2. Move\n\tinsn definition near rint?f2 expanders.\n\t(rintdf2, rintsf2, rintxf2): New expanders to implement rint,\n\trintf and rintl built-ins as inline x87 intrinsics.\n\t(frndintxf2_floor): New pattern to implement floor rounding\n\tmode with frndint x87 instruction.\n\t(floordf2, floorsf2, floorxf2): New expanders to implement floor,\n\tfloorf and floorl built-ins as inline x87 intrinsics.\n\t(frndintxf2_ceil): New pattern to implement ceil rounding\n\tmode with frndint x87 instruction.\n\t(ceildf2, ceilsf2, ceilxf2): New expanders to implement ceil,\n\tceilf and ceill built-ins as inline x87 intrinsics.\n\t(frndintxf2_trunc): New pattern to implement trunc rounding\n\tmode with frndint x87 instruction.\n\t(btruncdf2, btruncsf2, btruncxf2): New expanders to implement trunc,\n\ttruncf and truncl built-ins as inline x87 intrinsics.\n\t(frndintxf2_mask_pm): New pattern to implement rounding\n\tmode with exceptions with frndint x87 instruction.\n\t(nearbyintdf2, nearbyintsf2, nearbyintxf2): New expanders to\n\timplement nearbyint, nearbyintf and nearbyintl built-ins as\n\tinline x87 intrinsics.\n\n\t* testsuite/gcc.dg/builtins-46.c: New.\n\nFrom-SVN: r87076", "tree": {"sha": "5beec64804178bdcce9d3a40bbad23d26dc23d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5beec64804178bdcce9d3a40bbad23d26dc23d85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edeacc1415d3cd9c67463c600fa11d0689bae9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edeacc1415d3cd9c67463c600fa11d0689bae9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edeacc1415d3cd9c67463c600fa11d0689bae9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edeacc1415d3cd9c67463c600fa11d0689bae9e9/comments", "author": null, "committer": null, "parents": [{"sha": "183f019bd776acebb4600f70c041ae7fdb562189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183f019bd776acebb4600f70c041ae7fdb562189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183f019bd776acebb4600f70c041ae7fdb562189"}], "stats": {"total": 656, "additions": 619, "deletions": 37}, "files": [{"sha": "2cf1b5b5610879784b2c7367813846c9c0ffbadd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -1,3 +1,63 @@\n+2004-09-04  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_RINT{,F,L}\n+\tusing rint_optab.\n+\t(expand_builtin): Expand BUILT_IN_RINT{,F,L} using\n+\texpand_builtin_mathfn.\n+\t* genopinit.c (optabs): Rename trunc_optab to btrunc_optab. Use\n+\tbtrunc?f patterns for btrunc_optab. Implement rint_optab using\n+\trint?f patterns.\n+\t* optabs.c (init_optabs): Initialize rint_optab.\n+\t* optabs.h (enum optab_index): Rename OTI_trunc to OTI_btrunc.\n+\tAdd new OTI_rint.\n+\t(btrunc_optab): Rename macro from trunc_optab.\n+\t(rint_optab): Define corresponding macro.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FRNDINT_FLOOR,\n+\tUNSPEC_FRNDINT_CEIL, UNSPEC_FRNDINT_TRUNC, UNSPEC_FRNDINT_MASK_PM.\n+\n+\t* config/i386/i386-protos.h (emit_i387_cw_initialization):\n+\tChange prototype. Add new int parameter.\n+\t* config/i386/i386.c (emit_i387_cw_initialization):\n+\tHandle new rounding modes.\n+\n+\t* config/i386/i386.h (enum fp_cw_mode): Delete.\n+\t(MODE_NEEDED): Handle new rounding modes. \n+\t(EMIT_MODE_SET): Change condition to handle new rounding modes.\n+\n+\t* config/i386/i386.md (UNSPEC_FRNDINT_FLOOR, UNSPEC_FRNDINT_CEIL,\n+\tUNSPEC_FRNDINT_TRUNC, UNSPEC_FRNDINT_MASK_PM): New unspecs to\n+\trepresent different rounding modes of frndint insn.\n+\t(type): Add frndint type.\n+\t(i387, length, memory): Handle this type.\n+\t(i387_cw): New attribute definition.\n+\t(*fix_truncdi_1, fix_truncdi_nomemory, fix_truncdi_memory,\n+\t*fix_truncsi_1, fix_truncsi_nomemory, fix_truncsi_memory,\n+\t*fix_trunchi_1, fix_trunchi_nomemory, fix_trunchi_memory):\n+\tAdd \"i387_cw\" attribute defined to \"trunc\".\n+\t(x86_fnstcw_1): Remove comment.\n+\t(*frndintxf2): Rename insn definition to frndintxf2. Move\n+\tinsn definition near rint?f2 expanders.\n+\t(rintdf2, rintsf2, rintxf2): New expanders to implement rint,\n+\trintf and rintl built-ins as inline x87 intrinsics.\n+\t(frndintxf2_floor): New pattern to implement floor rounding\n+\tmode with frndint x87 instruction.\n+\t(floordf2, floorsf2, floorxf2): New expanders to implement floor,\n+\tfloorf and floorl built-ins as inline x87 intrinsics.\n+\t(frndintxf2_ceil): New pattern to implement ceil rounding\n+\tmode with frndint x87 instruction.\n+\t(ceildf2, ceilsf2, ceilxf2): New expanders to implement ceil,\n+\tceilf and ceill built-ins as inline x87 intrinsics.\n+\t(frndintxf2_trunc): New pattern to implement trunc rounding\n+\tmode with frndint x87 instruction.\n+\t(btruncdf2, btruncsf2, btruncxf2): New expanders to implement trunc,\n+\ttruncf and truncl built-ins as inline x87 intrinsics.\n+\t(frndintxf2_mask_pm): New pattern to implement rounding\n+\tmode with exceptions with frndint x87 instruction.\n+\t(nearbyintdf2, nearbyintsf2, nearbyintxf2): New expanders to\n+\timplement nearbyint, nearbyintf and nearbyintl built-ins as\n+\tinline x87 intrinsics.\n+\n 2004-09-04  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (SHORT): New mode macro."}, {"sha": "97800bfef02dd0e4943d100417e7855b385aa6e8", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -1737,6 +1737,10 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_NEARBYINTF:\n     case BUILT_IN_NEARBYINTL:\n       builtin_optab = nearbyint_optab; break;\n+    case BUILT_IN_RINT:\n+    case BUILT_IN_RINTF:\n+    case BUILT_IN_RINTL:\n+      builtin_optab = rint_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -5599,6 +5603,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_NEARBYINT:\n     case BUILT_IN_NEARBYINTF:\n     case BUILT_IN_NEARBYINTL:\n+    case BUILT_IN_RINT:\n+    case BUILT_IN_RINTF:\n+    case BUILT_IN_RINTL:\n       target = expand_builtin_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "1c87da6385d0499e4d1b477988200b4b77e63389", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -174,7 +174,7 @@ extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,\n \t\t\t\t\t enum machine_mode, int);\n extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);\n extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);\n-extern void emit_i387_cw_initialization (rtx, rtx);\n+extern void emit_i387_cw_initialization (rtx, rtx, int);\n extern bool ix86_fp_jump_nontrivial_p (enum rtx_code);\n extern void x86_order_regs_for_local_alloc (void);\n extern void x86_function_profiler (FILE *, int);"}, {"sha": "4a8695275051342251b4ae48290c1966e9e7718e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 66, "deletions": 9, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -7108,22 +7108,79 @@ output_387_binary_op (rtx insn, rtx *operands)\n   return buf;\n }\n \n-/* Output code to initialize control word copies used by\n-   trunc?f?i patterns.  NORMAL is set to current control word, while ROUND_DOWN\n-   is set to control word rounding downwards.  */\n+/* Output code to initialize control word copies used by trunc?f?i and\n+   rounding patterns.  CURRENT_MODE is set to current control word,\n+   while NEW_MODE is set to new control word.  */\n+\n void\n-emit_i387_cw_initialization (rtx normal, rtx round_down)\n+emit_i387_cw_initialization (rtx current_mode, rtx new_mode, int mode)\n {\n   rtx reg = gen_reg_rtx (HImode);\n \n-  emit_insn (gen_x86_fnstcw_1 (normal));\n-  emit_move_insn (reg, normal);\n+  emit_insn (gen_x86_fnstcw_1 (current_mode));\n+  emit_move_insn (reg, current_mode);\n+\n   if (!TARGET_PARTIAL_REG_STALL && !optimize_size\n       && !TARGET_64BIT)\n-    emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n+    {\n+      switch (mode)\n+\t{\n+\tcase I387_CW_FLOOR:\n+\t  /* round down toward -oo */\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x4)));\n+\t  break;\n+\n+\tcase I387_CW_CEIL:\n+\t  /* round up toward +oo */\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0x8)));\n+\t  break;\n+\n+\tcase I387_CW_TRUNC:\n+\t  /* round toward zero (truncate) */\n+\t  emit_insn (gen_movsi_insv_1 (reg, GEN_INT (0xc)));\n+\t  break;\n+ \n+\tcase I387_CW_MASK_PM:\n+\t  /* mask precision exception for nearbyint() */\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0020)));\n+\t  break;\n+\n+\tdefault:\n+\t  abort();\n+\t}\n+    }\n   else\n-    emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0xc00)));\n-  emit_move_insn (round_down, reg);\n+    {\n+      switch (mode)\n+\t{\n+\tcase I387_CW_FLOOR:\n+\t  /* round down toward -oo */\n+\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0400)));\n+\t  break;\n+\n+\tcase I387_CW_CEIL:\n+\t  /* round up toward +oo */\n+\t  emit_insn (gen_andhi3 (reg, reg, GEN_INT (~0x0c00)));\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0800)));\n+\t  break;\n+\n+\tcase I387_CW_TRUNC:\n+\t  /* round toward zero (truncate) */\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0c00)));\n+\t  break;\n+\n+\tcase I387_CW_MASK_PM:\n+\t  /* mask precision exception for nearbyint() */\n+\t  emit_insn (gen_iorhi3 (reg, reg, GEN_INT (0x0020)));\n+\t  break;\n+\n+\tdefault:\n+\t  abort();\n+\t}\n+    }\n+\n+  emit_move_insn (new_mode, reg);\n }\n \n /* Output code for INSN to convert a float to a signed int.  OPERANDS"}, {"sha": "4c4ce5843dbc4f9011c4d54c6bd900dd7f974e5c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -2940,7 +2940,6 @@ extern rtx ix86_compare_op1;\t/* operand 1 for comparisons */\n    Post-reload pass may be later used to eliminate the redundant fildcw if\n    needed.  */\n \n-enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n \n /* Define this macro if the port needs extra instructions inserted\n    for mode switching in an optimizing compilation.  */\n@@ -2955,7 +2954,7 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n    starting counting at zero - determines the integer that is used to\n    refer to the mode-switched entity in question.  */\n \n-#define NUM_MODES_FOR_MODE_SWITCHING { FP_CW_ANY }\n+#define NUM_MODES_FOR_MODE_SWITCHING { I387_CW_ANY }\n \n /* ENTITY is an integer specifying a mode-switched entity.  If\n    `OPTIMIZE_MODE_SWITCHING' is defined, you must define this macro to\n@@ -2967,10 +2966,10 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n   (GET_CODE (I) == CALL_INSN\t\t\t\t\t\t\\\n    || (GET_CODE (I) == INSN && (asm_noperands (PATTERN (I)) >= 0 \t\\\n \t\t\t\t|| GET_CODE (PATTERN (I)) == ASM_INPUT))\\\n-   ? FP_CW_UNINITIALIZED\t\t\t\t\t\t\\\n-   : recog_memoized (I) < 0 || get_attr_type (I) != TYPE_FISTP\t\t\\\n-   ? FP_CW_ANY\t\t\t\t\t\t\t\t\\\n-   : FP_CW_STORED)\n+   ? I387_CW_ANY \t\t\t\t\t\t\t\\\n+   : recog_memoized (I) < 0\t\t\t\t\t\t\\\n+   ? I387_CW_ANY \t\t\t\t\t\t\t\\\n+   : get_attr_i387_cw (I))\n \n /* This macro specifies the order in which modes for ENTITY are\n    processed.  0 is the highest priority.  */\n@@ -2982,9 +2981,10 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n    are to be inserted.  */\n \n #define EMIT_MODE_SET(ENTITY, MODE, HARD_REGS_LIVE) \t\t\t\\\n-  ((MODE) == FP_CW_STORED\t\t\t\t\t\t\\\n+  ((MODE) != I387_CW_ANY\t\t\t\t\t\t\\\n    ? emit_i387_cw_initialization (assign_386_stack_local (HImode, 1),\t\\\n-\t\t\t\t  assign_386_stack_local (HImode, 2)), 0\\\n+\t\t\t\t  assign_386_stack_local (HImode, 2),   \\\n+\t\t\t\t  MODE), 0\t\t\t\t\\\n    : 0)\n \f\n /* Avoid renaming of stack registers, as doing so in combination with"}, {"sha": "3104e0aec2d11eab614731a83b64162c7b7d4dc2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 355, "deletions": 16, "changes": 371, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -134,6 +134,12 @@\n    (UNSPEC_FPREM1_F\t\t90)\n    (UNSPEC_FPREM1_U\t\t91)\n \n+   ; x87 Rounding\n+   (UNSPEC_FRNDINT_FLOOR\t96)\n+   (UNSPEC_FRNDINT_CEIL \t97)\n+   (UNSPEC_FRNDINT_TRUNC\t98)\n+   (UNSPEC_FRNDINT_MASK_PM\t99)\n+\n    ; REP instruction\n    (UNSPEC_REP\t\t\t75)\n \n@@ -185,7 +191,7 @@\n    icmp,test,ibr,setcc,icmov,\n    push,pop,call,callv,leave,\n    str,cld,\n-   fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,\n+   fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,frndint,\n    sselog,sseiadd,sseishft,sseimul,\n    sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n@@ -198,7 +204,7 @@\n \n ;; The CPU unit operations uses.\n (define_attr \"unit\" \"integer,i387,sse,mmx,unknown\"\n-  (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp\")\n+  (cond [(eq_attr \"type\" \"fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,frndint\")\n \t   (const_string \"i387\")\n \t (eq_attr \"type\" \"sselog,sseiadd,sseishft,sseimul,\n \t\t\t  sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,sseicvt,ssediv\")\n@@ -315,10 +321,11 @@\n \t (const_int 1)))\n \n ;; The (bounding maximum) length of an instruction in bytes.\n-;; ??? fistp is in fact fldcw/fistp/fldcw sequence.  Later we may want\n-;; to split it and compute proper length as for other insns.\n+;; ??? fistp and frndint are in fact fldcw/{fistp,frndint}/fldcw sequences.\n+;; Later we may want to split them and compute proper length as for\n+;; other insns.\n (define_attr \"length\" \"\"\n-  (cond [(eq_attr \"type\" \"other,multi,fistp\")\n+  (cond [(eq_attr \"type\" \"other,multi,fistp,frndint\")\n \t   (const_int 16)\n \t (eq_attr \"type\" \"fcmp\")\n \t   (const_int 4)\n@@ -346,6 +353,8 @@\n \t   (const_string \"none\")\n \t (eq_attr \"type\" \"fistp,leave\")\n \t   (const_string \"both\")\n+\t (eq_attr \"type\" \"frndint\")\n+\t   (const_string \"load\")\n \t (eq_attr \"type\" \"push\")\n \t   (if_then_else (match_operand 1 \"memory_operand\" \"\")\n \t     (const_string \"both\")\n@@ -420,6 +429,11 @@\n (define_attr \"fp_int_src\" \"false,true\"\n   (const_string \"false\"))\n \n+;; Defines rounding mode of an FP operation.\n+\n+(define_attr \"i387_cw\" \"floor,ceil,trunc,mask_pm,any\"\n+  (const_string \"any\"))\n+\n ;; Describe a user's asm statement.\n (define_asm_attributes\n   [(set_attr \"length\" \"128\")\n@@ -4098,6 +4112,7 @@\n   DONE;\n }\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"fix_truncdi_nomemory\"\n@@ -4111,6 +4126,7 @@\n    && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n   \"#\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"fix_truncdi_memory\"\n@@ -4123,6 +4139,7 @@\n    && (!SSE_FLOAT_MODE_P (GET_MODE (operands[1])) || !TARGET_64BIT)\"\n   \"* operands[5] = operands[4]; return output_fix_trunc (insn, operands);\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_split \n@@ -4263,6 +4280,7 @@\n   DONE;\n }\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"fix_truncsi_nomemory\"\n@@ -4275,6 +4293,7 @@\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"#\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"fix_truncsi_memory\"\n@@ -4286,6 +4305,7 @@\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"* return output_fix_trunc (insn, operands);\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"SI\")])\n \n ;; When SSE available, it is always faster to use it!\n@@ -4404,6 +4424,7 @@\n   DONE;\n }\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"fix_trunchi_nomemory\"\n@@ -4416,6 +4437,7 @@\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"#\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"fix_trunchi_memory\"\n@@ -4427,6 +4449,7 @@\n    && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"* return output_fix_trunc (insn, operands);\"\n   [(set_attr \"type\" \"fistp\")\n+   (set_attr \"i387_cw\" \"trunc\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_split \n@@ -4455,7 +4478,6 @@\n    (set (match_dup 0) (match_dup 4))]\n   \"\")\n \n-;; %% Not used yet.\n (define_insn \"x86_fnstcw_1\"\n   [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n \t(unspec:HI [(reg:HI FPSR_REG)] UNSPEC_FSTCW))]\n@@ -16040,16 +16062,6 @@\n   operands[3] = gen_reg_rtx (XFmode);\n })\n \n-(define_insn \"*frndintxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n-\t UNSPEC_FRNDINT))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n-  \"frndint\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n (define_insn \"*f2xm1xf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n@@ -16419,6 +16431,333 @@\n   emit_move_insn (operands[2], temp);\n   emit_move_insn (operands[9], CONST1_RTX (XFmode));  /* fld1 */\n })\n+\f\n+\n+(define_insn \"frndintxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"frndint\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"rintdf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2 (op0, op1));\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"rintsf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2 (op0, op1));\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"rintxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  emit_insn (gen_frndintxf2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"frndintxf2_floor\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT_FLOOR))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fldcw\\t%3\\n\\tfrndint\\n\\tfldcw\\t%2\"\n+  [(set_attr \"type\" \"frndint\")\n+   (set_attr \"i387_cw\" \"floor\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"floordf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_floor (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"floorsf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_floor (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"floorxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_frndintxf2_floor (operands[0], operands[1], op2, op3));\n+  DONE;\n+})\n+\n+(define_insn \"frndintxf2_ceil\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT_CEIL))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fldcw\\t%3\\n\\tfrndint\\n\\tfldcw\\t%2\"\n+  [(set_attr \"type\" \"frndint\")\n+   (set_attr \"i387_cw\" \"ceil\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"ceildf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_ceil (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"ceilsf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_ceil (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"ceilxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_frndintxf2_ceil (operands[0], operands[1], op2, op3));\n+  DONE;\n+})\n+\n+(define_insn \"frndintxf2_trunc\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT_TRUNC))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fldcw\\t%3\\n\\tfrndint\\n\\tfldcw\\t%2\"\n+  [(set_attr \"type\" \"frndint\")\n+   (set_attr \"i387_cw\" \"trunc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"btruncdf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_trunc (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"btruncsf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_trunc (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"btruncxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_frndintxf2_trunc (operands[0], operands[1], op2, op3));\n+  DONE;\n+})\n+\n+(define_insn \"frndintxf2_mask_pm\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT_MASK_PM))\n+   (use (match_operand:HI 2 \"memory_operand\" \"m\"))\n+   (use (match_operand:HI 3 \"memory_operand\" \"m\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fldcw\\t%3\\n\\tfrndint\\n\\tfclex\\n\\tfldcw\\t%2\"\n+  [(set_attr \"type\" \"frndint\")\n+   (set_attr \"i387_cw\" \"mask_pm\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"nearbyintdf2\"\n+  [(use (match_operand:DF 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extenddfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_mask_pm (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfdf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"nearbyintsf2\"\n+  [(use (match_operand:SF 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_extendsfxf2 (op1, operands[1]));\n+  emit_insn (gen_frndintxf2_mask_pm (op0, op1, op2, op3));\n+\n+  emit_insn (gen_truncxfsf2_noop (operands[0], op0));\n+  DONE;\n+})\n+\n+(define_expand \"nearbyintxf2\"\n+  [(use (match_operand:XF 0 \"register_operand\" \"\"))\n+   (use (match_operand:XF 1 \"register_operand\" \"\"))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op2 = assign_386_stack_local (HImode, 1);\n+  rtx op3 = assign_386_stack_local (HImode, 2);\n+\t\n+  ix86_optimize_mode_switching = 1;\n+\n+  emit_insn (gen_frndintxf2_mask_pm (operands[0], operands[1],\n+\t\t\t\t     op2, op3));\n+  DONE;\n+})\n+\n \f\n ;; Block operation instructions\n "}, {"sha": "40f1bbd182a955e46caef3b7f9f105452a401c31", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -122,8 +122,9 @@ static const char * const optabs[] =\n   \"floor_optab->handlers[$A].insn_code = CODE_FOR_$(floor$a2$)\",\n   \"ceil_optab->handlers[$A].insn_code = CODE_FOR_$(ceil$a2$)\",\n   \"round_optab->handlers[$A].insn_code = CODE_FOR_$(round$a2$)\",\n-  \"trunc_optab->handlers[$A].insn_code = CODE_FOR_$(trunc$a2$)\",\n+  \"btrunc_optab->handlers[$A].insn_code = CODE_FOR_$(btrunc$a2$)\",\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\",\n+  \"rint_optab->handlers[$A].insn_code = CODE_FOR_$(rint$a2$)\",\n   \"sincos_optab->handlers[$A].insn_code = CODE_FOR_$(sincos$a3$)\",\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"asin_optab->handlers[$A].insn_code = CODE_FOR_$(asin$a2$)\","}, {"sha": "de7f4dc2caa117f66d0dd511c28c48809b06950c", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -4328,6 +4328,7 @@ init_optabs (void)\n   round_optab = init_optab (UNKNOWN);\n   btrunc_optab = init_optab (UNKNOWN);\n   nearbyint_optab = init_optab (UNKNOWN);\n+  rint_optab = init_optab (UNKNOWN);\n   sincos_optab = init_optab (UNKNOWN);\n   sin_optab = init_optab (UNKNOWN);\n   asin_optab = init_optab (UNKNOWN);"}, {"sha": "648a158084ac1f48198666e7a54ff58d5c353d5e", "filename": "gcc/optabs.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -183,9 +183,10 @@ enum optab_index\n   /* Rounding functions */\n   OTI_floor,\n   OTI_ceil,\n-  OTI_trunc,\n+  OTI_btrunc,\n   OTI_round,\n   OTI_nearbyint,\n+  OTI_rint,\n   /* Tangent */\n   OTI_tan,\n   /* Inverse tangent */\n@@ -299,9 +300,10 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define log1p_optab (optab_table[OTI_log1p])\n #define floor_optab (optab_table[OTI_floor])\n #define ceil_optab (optab_table[OTI_ceil])\n-#define btrunc_optab (optab_table[OTI_trunc])\n+#define btrunc_optab (optab_table[OTI_btrunc])\n #define round_optab (optab_table[OTI_round])\n #define nearbyint_optab (optab_table[OTI_nearbyint])\n+#define rint_optab (optab_table[OTI_rint])\n #define tan_optab (optab_table[OTI_tan])\n #define atan_optab (optab_table[OTI_atan])\n "}, {"sha": "fc13759af49412d68a8b4ccc53031ddfdda5ca0a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -1728,6 +1728,12 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t      case UNSPEC_COS:\n \t      case UNSPEC_FRNDINT:\n \t      case UNSPEC_F2XM1:\n+\n+\t      case UNSPEC_FRNDINT_FLOOR:\n+\t      case UNSPEC_FRNDINT_CEIL:\n+\t      case UNSPEC_FRNDINT_TRUNC:\n+\t      case UNSPEC_FRNDINT_MASK_PM:\n+\n \t\t/* These insns only operate on the top of the stack.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));"}, {"sha": "e0f86f13f7e9d3053d9b8d48eb4fa5dff9b0399f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -1,3 +1,7 @@\n+2004-09-04  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* testsuite/gcc.dg/builtins-46.c: New.\n+\n 2004-09-03  Devang Patel  <dpatel@apple.com>\n \t\n \t* gcc.dg/tree-ssa/ifc-20040816-1.c: New test."}, {"sha": "67c979f73f0e3599bfebfa50bd299265b5264df5", "filename": "gcc/testsuite/gcc.dg/builtins-46.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edeacc1415d3cd9c67463c600fa11d0689bae9e9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-46.c?ref=edeacc1415d3cd9c67463c600fa11d0689bae9e9", "patch": "@@ -0,0 +1,105 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that rint, rintf, rintl, floor, floorf, floorl,\n+   ceil, ceilf, ceill, trunc, truncf, truncl,\n+   nearbyint, nearbyintf and nearbyintl\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 25th Aug 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double rint(double);\n+extern double floor(double);\n+extern double ceil(double);\n+extern double trunc(double);\n+extern double nearbyint(double);\n+\n+extern float rintf(float);\n+extern float floorf(float);\n+extern float ceilf(float);\n+extern float truncf(float);\n+extern float nearbyintf(float);\n+\n+extern long double rintl(long double);\n+extern long double floorl(long double);\n+extern long double ceill(long double);\n+extern long double truncl(long double);\n+extern long double nearbyintl(long double);\n+\n+\n+double test1(double x)\n+{\n+  return rint(x);\n+}\n+\n+double test2(double x)\n+{\n+  return floor(x);\n+}\n+\n+double test3(double x)\n+{\n+  return ceil(x);\n+}\n+\n+double test4(double x)\n+{\n+  return trunc(x);\n+}\n+\n+double test5(double x)\n+{\n+  return nearbyint(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return rintf(x);\n+}\n+\n+float test2f(float x)\n+{\n+  return floorf(x);\n+}\n+\n+float test3f(float x)\n+{\n+  return ceilf(x);\n+}\n+\n+float test4f(float x)\n+{\n+  return truncf(x);\n+}\n+\n+float test5f(float x)\n+{\n+  return nearbyintf(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return rintl(x);\n+}\n+\n+long double test2l(long double x)\n+{\n+  return floorl(x);\n+}\n+\n+long double test3l(long double x)\n+{\n+  return ceill(x);\n+}\n+\n+long double test4l(long double x)\n+{\n+  return truncl(x);\n+}\n+\n+long double test5l(long double x)\n+{\n+  return nearbyintl(x);\n+}"}]}