{"sha": "d694576e174d95b7f6066d924715691c55824f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY5NDU3NmUxNzRkOTViN2Y2MDY2ZDkyNDcxNTY5MWM1NTgyNGYzMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-11T12:44:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-11T12:44:12Z"}, "message": "gotest: force test package to be imported first\n    \n    When compiling the x_test package, force the test package to be\n    imported first.  That ensures that we will see the types defined in\n    the test package before the types defined in the non-test version of\n    the package.  This matters if the types differ in some way, such as by\n    adding a new method.\n    \n    This avoids a failure in internal/poll on Solaris, in which the test\n    package adds a method to a type (FD.EOFError).  I think it was Solaris-\n    specific because files are sorted in a different order by default.\n    \n    The go tool handles this kind of thing correctly, by rebuilding\n    dependent packages.  This is just a hack sufficient to run the libgo\n    testsuite without using the go tool.\n    \n    Fixes https://gcc.gnu.org/PR91712\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/194637\n\nFrom-SVN: r275648", "tree": {"sha": "af823b9b492afa34174b7e138d7d5141dee16cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af823b9b492afa34174b7e138d7d5141dee16cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d694576e174d95b7f6066d924715691c55824f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d694576e174d95b7f6066d924715691c55824f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d694576e174d95b7f6066d924715691c55824f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d694576e174d95b7f6066d924715691c55824f30/comments", "author": null, "committer": null, "parents": [{"sha": "c5748fdbf403203195e20cfc06acfa96a733486e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5748fdbf403203195e20cfc06acfa96a733486e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5748fdbf403203195e20cfc06acfa96a733486e"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "895aa6f3fcc349359cd250432ec7c17a664bbfed", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d694576e174d95b7f6066d924715691c55824f30/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d694576e174d95b7f6066d924715691c55824f30/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d694576e174d95b7f6066d924715691c55824f30", "patch": "@@ -1,4 +1,4 @@\n-bf4832d604e7522dee78fca76de220b62a131d54\n+1f4ce28409a2d9d4045b1085de55c46de8759d1c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9d46916d69af49cf3f3a42bbc8b2ae08acfb14bd", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d694576e174d95b7f6066d924715691c55824f30/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d694576e174d95b7f6066d924715691c55824f30/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=d694576e174d95b7f6066d924715691c55824f30", "patch": "@@ -419,10 +419,12 @@ esac\n # Split $gofiles into external gofiles (those in *_test packages)\n # and internal ones (those in the main package).\n xgofiles=\n+xpackage=\n for f in $gofiles; do\n     package=`grep '^package[ \t]' $f | sed 1q`\n     case \"$package\" in\n     *_test)\n+\txpackage=`echo $package | sed -e 's/package[ \t]//' -e 's/[ \t]*$//'`\n \txgofiles=\"$xgofiles $f\"\n \t;;\n     *)\n@@ -471,10 +473,17 @@ $GC -g $pkgpatharg $prefixarg -c -I . -fno-toplevel-reorder -o _gotest_.o $gofil\n if $havex; then\n \tmkdir -p `dirname $package`\n \tcp _gotest_.o `dirname $package`/lib`basename $package`.a\n+\n+\t# Force the test version of the package to be imported first,\n+\t# so that it's type definitions will be used, in case any new\n+\t# methods appear in export_test.go files.\n+\techo \"package $xpackage\" > _first_test.go\n+\techo 'import _ \"'$package'\"' >> _first_test.go\n+\n \tif test \"$trace\" = \"true\"; then\n-\t    echo $GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n+\t    echo $GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile _first_test.go $xgofiles\n \tfi\n-\t$GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n+\t$GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile _first_test.go $xgofiles\n fi\n \n # They all compile; now generate the code to call them."}]}