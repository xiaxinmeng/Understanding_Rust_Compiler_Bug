{"sha": "ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2NmY2ZTgzNWMyMjQ1OWJkZjViMGJjZDZkNGQ2N2E1NDFjZGFlNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-06-01T02:36:27Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-06-01T02:36:27Z"}, "message": "re PR tree-optimization/71077 (gcc -lto raises ICE)\n\nFix PR tree-optimization/71077\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/71077\n\t* tree-ssa-threadedge.c (simplify_control_stmt_condition_1): In\n\tthe combining step, use boolean_false_node and boolean_true_node\n\tas the designated false/true return values.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/71077\n\t* gcc.dg/tree-ssa/pr71077.c: New test.\n\nFrom-SVN: r236973", "tree": {"sha": "2b942bf0ee1022d621298134f3b9c9a955b76713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b942bf0ee1022d621298134f3b9c9a955b76713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/comments", "author": null, "committer": null, "parents": [{"sha": "98146cc95fb43043d5c9b201b242419a9de1f07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98146cc95fb43043d5c9b201b242419a9de1f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98146cc95fb43043d5c9b201b242419a9de1f07a"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "a27cc911359bb6e5fba21e26125072c07fa41830", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "patch": "@@ -1,3 +1,10 @@\n+2016-06-01  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/71077\n+\t* tree-ssa-threadedge.c (simplify_control_stmt_condition_1): In\n+\tthe combining step, use boolean_false_node and boolean_true_node\n+\tas the designated false/true return values.\n+\n 2016-05-31  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.def (PRED_LOOP_EXTRA_EXIT): Define."}, {"sha": "17cf2fa6795d6f9fd70e200cd81eb150df5d3811", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "patch": "@@ -1,3 +1,8 @@\n+2016-06-01  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR tree-optimization/71077\n+\t* gcc.dg/tree-ssa/pr71077.c: New test.\n+\n 2016-05-31  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.d/predict-lop-exit-1.C: Update template for new predictor name."}, {"sha": "4753740f762d8f96e13b11010f03748cdeddd1f5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71077.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71077.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71077.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71077.c?ref=ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "patch": "@@ -0,0 +1,18 @@\n+/* PR c++/71077  */\n+/* { dg-do link { target { i?86-*-* x86_64-*-* } } }  */\n+/* { dg-options \"-O3 -flto -march=core-avx2\" }  */\n+\n+int *a;\n+int b, c, d, e;\n+int sched_analyze(void) {\n+ for (; b; b++) {\n+   c = 0;\n+   for (; c < 32; c++)\n+     if (b & 1 << c)\n+       a[b + c] = d;\n+ }\n+ return 0;\n+}\n+\n+void schedule_insns(void) { e = sched_analyze(); }\n+int main(void) { schedule_insns(); }"}, {"sha": "de671b9463773e8a5d22807a8824670e4dc3f705", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=ff66f6e835c22459bdf5b0bcd6d4d67a541cdae7", "patch": "@@ -572,8 +572,6 @@ simplify_control_stmt_condition_1 (edge e,\n \t  enum tree_code rhs_code = gimple_assign_rhs_code (def_stmt);\n \t  const tree rhs1 = gimple_assign_rhs1 (def_stmt);\n \t  const tree rhs2 = gimple_assign_rhs2 (def_stmt);\n-\t  const tree zero_cst = build_zero_cst (TREE_TYPE (op0));\n-\t  const tree one_cst = build_one_cst (TREE_TYPE (op0));\n \n \t  /* Is A != 0 ?  */\n \t  const tree res1\n@@ -588,19 +586,19 @@ simplify_control_stmt_condition_1 (edge e,\n \t    {\n \t      /* If A == 0 then (A & B) != 0 is always false.  */\n \t      if (cond_code == NE_EXPR)\n-\t        return zero_cst;\n+\t        return boolean_false_node;\n \t      /* If A == 0 then (A & B) == 0 is always true.  */\n \t      if (cond_code == EQ_EXPR)\n-\t\treturn one_cst;\n+\t\treturn boolean_true_node;\n \t    }\n \t  else if (rhs_code == BIT_IOR_EXPR && integer_nonzerop (res1))\n \t    {\n \t      /* If A != 0 then (A | B) != 0 is always true.  */\n \t      if (cond_code == NE_EXPR)\n-\t\treturn one_cst;\n+\t\treturn boolean_true_node;\n \t      /* If A != 0 then (A | B) == 0 is always false.  */\n \t      if (cond_code == EQ_EXPR)\n-\t\treturn zero_cst;\n+\t\treturn boolean_false_node;\n \t    }\n \n \t  /* Is B != 0 ?  */\n@@ -616,19 +614,19 @@ simplify_control_stmt_condition_1 (edge e,\n \t    {\n \t      /* If B == 0 then (A & B) != 0 is always false.  */\n \t      if (cond_code == NE_EXPR)\n-\t        return zero_cst;\n+\t        return boolean_false_node;\n \t      /* If B == 0 then (A & B) == 0 is always true.  */\n \t      if (cond_code == EQ_EXPR)\n-\t\treturn one_cst;\n+\t\treturn boolean_true_node;\n \t    }\n \t  else if (rhs_code == BIT_IOR_EXPR && integer_nonzerop (res2))\n \t    {\n \t      /* If B != 0 then (A | B) != 0 is always true.  */\n \t      if (cond_code == NE_EXPR)\n-\t\treturn one_cst;\n+\t\treturn boolean_true_node;\n \t      /* If B != 0 then (A | B) == 0 is always false.  */\n \t      if (cond_code == EQ_EXPR)\n-\t\treturn zero_cst;\n+\t\treturn boolean_false_node;\n \t    }\n \n \t  if (res1 != NULL_TREE && res2 != NULL_TREE)\n@@ -640,10 +638,10 @@ simplify_control_stmt_condition_1 (edge e,\n \t\t{\n \t\t  /* If A != 0 and B != 0 then (bool)(A & B) != 0 is true.  */\n \t\t  if (cond_code == NE_EXPR)\n-\t\t    return one_cst;\n+\t\t    return boolean_true_node;\n \t\t  /* If A != 0 and B != 0 then (bool)(A & B) == 0 is false.  */\n \t\t  if (cond_code == EQ_EXPR)\n-\t\t    return zero_cst;\n+\t\t    return boolean_false_node;\n \t\t}\n \n \t      if (rhs_code == BIT_IOR_EXPR\n@@ -652,10 +650,10 @@ simplify_control_stmt_condition_1 (edge e,\n \t\t{\n \t\t  /* If A == 0 and B == 0 then (A | B) != 0 is false.  */\n \t\t  if (cond_code == NE_EXPR)\n-\t\t    return zero_cst;\n+\t\t    return boolean_false_node;\n \t\t  /* If A == 0 and B == 0 then (A | B) == 0 is true.  */\n \t\t  if (cond_code == EQ_EXPR)\n-\t\t    return one_cst;\n+\t\t    return boolean_true_node;\n \t\t}\n \t    }\n \t}"}]}