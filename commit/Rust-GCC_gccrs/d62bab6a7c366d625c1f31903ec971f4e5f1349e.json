{"sha": "d62bab6a7c366d625c1f31903ec971f4e5f1349e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyYmFiNmE3YzM2NmQ2MjVjMWYzMTkwM2VjOTcxZjRlNWYxMzQ5ZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-08-10T08:43:38Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-10T08:43:38Z"}, "message": "re PR libstdc++/1773 (__cplusplus defined to 1, should be 199711L)\n\n2011-08-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\t    Marc Glisse  <marc.glisse@normalesup.org>\n\n\tPR libstdc++-v3/1773\n\t* inclhack.def (solaris_cxx_linkage, solaris_getc_strict_stdc)\n\t(solaris_longjmp_noreturn, solaris_pow_int_overload)\n\t(solaris_std___filbuf): New fixes.\n\t* tests/base/iso/math_iso.h, tests/base/iso/setjmp_iso.h,\n\ttests/base/iso/stdio_iso.h, tests/base/iso/stdlib_iso.h: New tests.\n\t* tests/base/stdio.h [SOLARIS_STD___FILBUF_CHECK]: New test.\n\nCo-Authored-By: Marc Glisse <marc.glisse@normalesup.org>\n\nFrom-SVN: r177613", "tree": {"sha": "1e5807e498bbed185aa86e1f8e341a631b04bddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5807e498bbed185aa86e1f8e341a631b04bddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62bab6a7c366d625c1f31903ec971f4e5f1349e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62bab6a7c366d625c1f31903ec971f4e5f1349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62bab6a7c366d625c1f31903ec971f4e5f1349e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62bab6a7c366d625c1f31903ec971f4e5f1349e/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "693ed633816d191104a804686043a02146c34d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693ed633816d191104a804686043a02146c34d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693ed633816d191104a804686043a02146c34d8e"}], "stats": {"total": 424, "additions": 419, "deletions": 5}, "files": [{"sha": "deb7cec35fc26276cf3f92718412ea2d91d3b106", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -1,3 +1,14 @@\n+2011-08-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\t    Marc Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR libstdc++-v3/1773\n+\t* inclhack.def (solaris_cxx_linkage, solaris_getc_strict_stdc)\n+\t(solaris_longjmp_noreturn, solaris_pow_int_overload)\n+\t(solaris_std___filbuf): New fixes.\n+\t* tests/base/iso/math_iso.h, tests/base/iso/setjmp_iso.h,\n+\ttests/base/iso/stdio_iso.h, tests/base/iso/stdlib_iso.h: New tests.\n+\t* tests/base/stdio.h [SOLARIS_STD___FILBUF_CHECK]: New test.\n+\n 2011-07-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR c++/49347"}, {"sha": "843b5e3ad2b54631b6d88c51b4d6221f5d64c5dd", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 245, "deletions": 5, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday July 23, 2011 at 01:16:35 AM MEST\n+ * It has been AutoGen-ed  Tuesday August  9, 2011 at 09:17:43 PM MEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jul 23 01:16:35 MEST 2011\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Aug  9 21:17:43 MEST 2011\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 212 fixup descriptions.\n+ * This file contains 217 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -6341,6 +6341,127 @@ static const char* apzSolaris_Cond_InitPatch[] = {\n     \"^(#define[ \\t]+PTHREAD_COND_INITIALIZER[ \\t]+\\\\{.*0)(\\\\},[ \\t]*0\\\\}.*)$\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Cxx_Linkage fix\n+ */\n+tSCC zSolaris_Cxx_LinkageName[] =\n+     \"solaris_cxx_linkage\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Cxx_LinkageList[] =\n+  \"iso/stdlib_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Cxx_LinkageMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Cxx_LinkageSelect0[] =\n+       \"(#if __cplusplus >= 199711L)\\n\\\n+(extern \\\"C\\\\+\\\\+\\\" \\\\{\\n\\\n+)(.*(bsearch|qsort).*)\";\n+\n+#define    SOLARIS_CXX_LINKAGE_TEST_CT  1\n+static tTestDesc aSolaris_Cxx_LinkageTests[] = {\n+  { TT_EGREP,    zSolaris_Cxx_LinkageSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Cxx_Linkage\n+ */\n+static const char* apzSolaris_Cxx_LinkagePatch[] = {\n+    \"format\",\n+    \"%1 && !__GNUG__\\n\\\n+%2%3\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Getc_Strict_Stdc fix\n+ */\n+tSCC zSolaris_Getc_Strict_StdcName[] =\n+     \"solaris_getc_strict_stdc\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Getc_Strict_StdcList[] =\n+  \"iso/stdio_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Getc_Strict_StdcMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Getc_Strict_StdcSelect0[] =\n+       \"(.*&& )!defined\\\\(_STRICT_STDC\\\\)(.*)\";\n+\n+#define    SOLARIS_GETC_STRICT_STDC_TEST_CT  1\n+static tTestDesc aSolaris_Getc_Strict_StdcTests[] = {\n+  { TT_EGREP,    zSolaris_Getc_Strict_StdcSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Getc_Strict_Stdc\n+ */\n+static const char* apzSolaris_Getc_Strict_StdcPatch[] = {\n+    \"format\",\n+    \"%1(!defined(_STRICT_STDC) || (__cplusplus >= 199711L))%2\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Longjmp_Noreturn fix\n+ */\n+tSCC zSolaris_Longjmp_NoreturnName[] =\n+     \"solaris_longjmp_noreturn\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Longjmp_NoreturnList[] =\n+  \"iso/setjmp_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Longjmp_NoreturnMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Longjmp_NoreturnSelect0[] =\n+       \"(.*longjmp\\\\(jmp_buf.*[^)]+\\\\));\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Longjmp_NoreturnBypass0[] =\n+       \"__NORETURN\";\n+\n+#define    SOLARIS_LONGJMP_NORETURN_TEST_CT  2\n+static tTestDesc aSolaris_Longjmp_NoreturnTests[] = {\n+  { TT_NEGREP,   zSolaris_Longjmp_NoreturnBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Longjmp_NoreturnSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Longjmp_Noreturn\n+ */\n+static const char* apzSolaris_Longjmp_NoreturnPatch[] = {\n+    \"format\",\n+    \"%1 __attribute__ ((__noreturn__));\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Math_1 fix\n@@ -6687,6 +6808,46 @@ static const char* apzSolaris_Mutex_Init_2Patch[] = {\n [ \\t]*)\\\\{.*),[ \\t]*0\\\\}(|[ \\t].*)$\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Pow_Int_Overload fix\n+ */\n+tSCC zSolaris_Pow_Int_OverloadName[] =\n+     \"solaris_pow_int_overload\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Pow_Int_OverloadList[] =\n+  \"iso/math_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Pow_Int_OverloadMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Pow_Int_OverloadSelect0[] =\n+       \"^[ \\t]*inline [a-z ]* pow\\\\([^()]*, int [^()]*\\\\) *\\\\{[^{}]*\\n\\\n+[^{}]*\\\\}\";\n+\n+#define    SOLARIS_POW_INT_OVERLOAD_TEST_CT  1\n+static tTestDesc aSolaris_Pow_Int_OverloadTests[] = {\n+  { TT_EGREP,    zSolaris_Pow_Int_OverloadSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Pow_Int_Overload\n+ */\n+static const char* apzSolaris_Pow_Int_OverloadPatch[] = {\n+    \"format\",\n+    \"#ifndef __GXX_EXPERIMENTAL_CXX0X__\\n\\\n+%0\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Rwlock_Init_1 fix\n@@ -7043,6 +7204,55 @@ static const char* apzSolaris_Posix_Spawn_RestrictPatch[] = {\n     \"%1*_RESTRICT_KYWD %2%3\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Std___Filbuf fix\n+ */\n+tSCC zSolaris_Std___FilbufName[] =\n+     \"solaris_std___filbuf\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Std___FilbufList[] =\n+  \"stdio.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Std___FilbufMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Std___FilbufSelect0[] =\n+       \"(using std::perror;\\n\\\n+)(#endif)\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Std___FilbufBypass0[] =\n+       \"using std::__filbuf\";\n+\n+#define    SOLARIS_STD___FILBUF_TEST_CT  2\n+static tTestDesc aSolaris_Std___FilbufTests[] = {\n+  { TT_NEGREP,   zSolaris_Std___FilbufBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Std___FilbufSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Std___Filbuf\n+ */\n+static const char* apzSolaris_Std___FilbufPatch[] = {\n+    \"format\",\n+    \"%1#ifndef _LP64\\n\\\n+using std::__filbuf;\\n\\\n+using std::__flsbuf;\\n\\\n+#endif\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Stdio_Tag fix\n@@ -8628,9 +8838,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          251\n+#define REGEX_COUNT          258\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            212\n+#define FIX_COUNT            217\n \n /*\n  *  Enumerate the fixes\n@@ -8792,6 +9002,9 @@ typedef enum {\n     SOLARIS_COMPLEX_FIXIDX,\n     SOLARIS_COMPLEX_CXX_FIXIDX,\n     SOLARIS_COND_INIT_FIXIDX,\n+    SOLARIS_CXX_LINKAGE_FIXIDX,\n+    SOLARIS_GETC_STRICT_STDC_FIXIDX,\n+    SOLARIS_LONGJMP_NORETURN_FIXIDX,\n     SOLARIS_MATH_1_FIXIDX,\n     SOLARIS_MATH_2_FIXIDX,\n     SOLARIS_MATH_3_FIXIDX,\n@@ -8800,6 +9013,7 @@ typedef enum {\n     SOLARIS_MATH_9_FIXIDX,\n     SOLARIS_MATH_10_FIXIDX,\n     SOLARIS_MUTEX_INIT_2_FIXIDX,\n+    SOLARIS_POW_INT_OVERLOAD_FIXIDX,\n     SOLARIS_RWLOCK_INIT_1_FIXIDX,\n     SOLARIS_ONCE_INIT_1_FIXIDX,\n     SOLARIS_ONCE_INIT_2_FIXIDX,\n@@ -8809,6 +9023,7 @@ typedef enum {\n     SOLARIS_INT_LIMITS_3_FIXIDX,\n     SOLARIS_INT_TYPES_FIXIDX,\n     SOLARIS_POSIX_SPAWN_RESTRICT_FIXIDX,\n+    SOLARIS_STD___FILBUF_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n     SOLARIS_SYS_VA_LIST_FIXIDX,\n     STATSSWTCH_FIXIDX,\n@@ -9631,6 +9846,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_COND_INIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Cond_InitTests,   apzSolaris_Cond_InitPatch, 0 },\n \n+  {  zSolaris_Cxx_LinkageName,    zSolaris_Cxx_LinkageList,\n+     apzSolaris_Cxx_LinkageMachs,\n+     SOLARIS_CXX_LINKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Cxx_LinkageTests,   apzSolaris_Cxx_LinkagePatch, 0 },\n+\n+  {  zSolaris_Getc_Strict_StdcName,    zSolaris_Getc_Strict_StdcList,\n+     apzSolaris_Getc_Strict_StdcMachs,\n+     SOLARIS_GETC_STRICT_STDC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Getc_Strict_StdcTests,   apzSolaris_Getc_Strict_StdcPatch, 0 },\n+\n+  {  zSolaris_Longjmp_NoreturnName,    zSolaris_Longjmp_NoreturnList,\n+     apzSolaris_Longjmp_NoreturnMachs,\n+     SOLARIS_LONGJMP_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Longjmp_NoreturnTests,   apzSolaris_Longjmp_NoreturnPatch, 0 },\n+\n   {  zSolaris_Math_1Name,    zSolaris_Math_1List,\n      apzSolaris_Math_1Machs,\n      SOLARIS_MATH_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -9671,6 +9901,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_MUTEX_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Mutex_Init_2Tests,   apzSolaris_Mutex_Init_2Patch, 0 },\n \n+  {  zSolaris_Pow_Int_OverloadName,    zSolaris_Pow_Int_OverloadList,\n+     apzSolaris_Pow_Int_OverloadMachs,\n+     SOLARIS_POW_INT_OVERLOAD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Pow_Int_OverloadTests,   apzSolaris_Pow_Int_OverloadPatch, 0 },\n+\n   {  zSolaris_Rwlock_Init_1Name,    zSolaris_Rwlock_Init_1List,\n      apzSolaris_Rwlock_Init_1Machs,\n      SOLARIS_RWLOCK_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -9716,6 +9951,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Posix_Spawn_RestrictTests,   apzSolaris_Posix_Spawn_RestrictPatch, 0 },\n \n+  {  zSolaris_Std___FilbufName,    zSolaris_Std___FilbufList,\n+     apzSolaris_Std___FilbufMachs,\n+     SOLARIS_STD___FILBUF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Std___FilbufTests,   apzSolaris_Std___FilbufPatch, 0 },\n+\n   {  zSolaris_Stdio_TagName,    zSolaris_Stdio_TagList,\n      apzSolaris_Stdio_TagMachs,\n      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,"}, {"sha": "d538706156a7ab8aab4148577fcc9c29be999150", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -3357,6 +3357,59 @@ fix = {\n };\n \n \n+/*\n+ *  g++ rejects functions declared with both C and C++ linkage.\n+ */\n+fix = {\n+    hackname  = solaris_cxx_linkage;\n+    mach      = '*-*-solaris2*';\n+    files     = \"iso/stdlib_iso.h\";\n+    select    = \"(#if __cplusplus >= 199711L)\\n\"\n+\t        \"(extern \\\"C\\\\+\\\\+\\\" \\\\{\\n)\"\n+\t        \"(.*(bsearch|qsort).*)\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1 && !__GNUG__\\n%2%3\";\n+\n+    test_text =\n+    \"#if __cplusplus >= 199711L\\n\"\n+    \"extern \\\"C++\\\" {\\n\"\n+    \"\tvoid *bsearch(const void *, const void *, size_t, size_t,\";\n+};\n+\n+\n+/*\n+ *  Solaris <iso/stdio_iso.h> doesn't declare getc for C++ with\n+ *  _STRICT_STDC, but uses it.\n+ */\n+fix = {\n+    hackname  = solaris_getc_strict_stdc;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"iso/stdio_iso.h\";\n+    select    = \"(.*&& )!defined\\\\(_STRICT_STDC\\\\)(.*)\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1(!defined(_STRICT_STDC) || (__cplusplus >= 199711L))%2\";\n+\n+    test_text =\n+    \"#if\t!defined(_REENTRANT) && !defined(_LP64) && !defined(_STRICT_STDC)\";\n+};\n+\n+\n+/*\n+ *  Before Solaris 10, <iso/setjmp_iso.h> doesn't mark longjump noreturn.\n+ */\n+fix = {\n+    hackname  = solaris_longjmp_noreturn;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"iso/setjmp_iso.h\";\n+    bypass    = \"__NORETURN\";\n+    select    = \"(.*longjmp\\\\(jmp_buf.*[^)]+\\\\));\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1 __attribute__ ((__noreturn__));\";\n+\n+    test_text = \"extern void longjmp(jmp_buf, int);\";\n+};\n+\n+\n /*\n  * Sun Solaris 10 defines several C99 math macros in terms of\n  * builtins specific to the Studio compiler, in particular not\n@@ -3529,6 +3582,24 @@ fix = {\n };\n \n \n+/*\n+ *  The pow overloads with int were removed in C++ 2011.\n+ */\n+fix = {\n+    hackname  = solaris_pow_int_overload;\n+    mach      = '*-*-solaris2*';\n+    files     = \"iso/math_iso.h\";\n+    select    = \"^[ \\t]*inline [a-z ]* pow\\\\([^()]*, int [^()]*\\\\)\"\n+\t\t\" *\\\\{[^{}]*\\n[^{}]*\\\\}\";\n+    c_fix     = format;\n+    c_fix_arg = \"#ifndef __GXX_EXPERIMENTAL_CXX0X__\\n%0\\n#endif\";\n+\n+    test_text =\n+    \"\tinline long double pow(long double __X, int __Y) { return\\n\"\n+    \"\t\t__powl(__X, (long double) (__Y)); }\";\n+};\n+\n+\n /*\n  * Sun Solaris defines PTHREAD_RWLOCK_INITIALIZER with a \"0\" for some\n  *  fields of the pthread_rwlock_t structure, which are of type\n@@ -3722,6 +3793,27 @@ fix = {\n };\n \n \n+/*\n+ * Before Solaris 10, <stdio.h> lacks declarations of std::__filbuf and\n+ * std::__flsbuf, but <iso/stdio_iso.h> uses them.\n+ */\n+fix = {\n+    hackname  = solaris_std___filbuf;\n+    files     = stdio.h;\n+    mach      = '*-*-solaris2*';\n+    bypass    = \"using std::__filbuf\";\n+    select    = \"(using std::perror;\\n)(#endif)\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1#ifndef _LP64\\n\"\n+\t\t\"using std::__filbuf;\\n\"\n+\t\t\"using std::__flsbuf;\\n\"\n+\t\t\"#endif\\n%2\";\n+\n+    test_text = \"using std::perror;\\n\"\n+\t\t\"#endif\";\n+};\n+\n+\n /*\n  * Sun Solaris 8 has what appears to be some gross workaround for\n  * some old version of their c++ compiler.  G++ doesn't want it"}, {"sha": "6c08a94bb54d290ca960949658a9307b9653e3b5", "filename": "fixincludes/tests/base/iso/math_iso.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_iso.h?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -0,0 +1,17 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/math_iso.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_POW_INT_OVERLOAD_CHECK )\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+\tinline long double pow(long double __X, int __Y) { return\n+\t\t__powl(__X, (long double) (__Y)); }\n+#endif\n+#endif  /* SOLARIS_POW_INT_OVERLOAD_CHECK */"}, {"sha": "4cf872007cf5989a89f0e40bfba984fbfe55c70b", "filename": "fixincludes/tests/base/iso/setjmp_iso.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fsetjmp_iso.h?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/setjmp_iso.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_LONGJMP_NORETURN_CHECK )\n+extern void longjmp(jmp_buf, int) __attribute__ ((__noreturn__));\n+#endif  /* SOLARIS_LONGJMP_NORETURN_CHECK */"}, {"sha": "d476752f092e60f7322eac1d86753a082a0046d1", "filename": "fixincludes/tests/base/iso/stdio_iso.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/stdio_iso.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_GETC_STRICT_STDC_CHECK )\n+#if\t!defined(_REENTRANT) && !defined(_LP64) && (!defined(_STRICT_STDC) || (__cplusplus >= 199711L))\n+#endif  /* SOLARIS_GETC_STRICT_STDC_CHECK */"}, {"sha": "3fb5b349559842fb934636f179210fbc11ce1418", "filename": "fixincludes/tests/base/iso/stdlib_iso.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_iso.h?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/stdlib_iso.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_CXX_LINKAGE_CHECK )\n+#if __cplusplus >= 199711L && !__GNUG__\n+extern \"C++\" {\n+\tvoid *bsearch(const void *, const void *, size_t, size_t,\n+#endif  /* SOLARIS_CXX_LINKAGE_CHECK */"}, {"sha": "975d0a52168d2d02243c20824c9ab4837fb733ef", "filename": "fixincludes/tests/base/stdio.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62bab6a7c366d625c1f31903ec971f4e5f1349e/fixincludes%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdio.h?ref=d62bab6a7c366d625c1f31903ec971f4e5f1349e", "patch": "@@ -65,6 +65,16 @@ extern int rename(const char *_old, const char *_new);\n #endif  /* RS6000_PARAM_CHECK */\n \n \n+#if defined( SOLARIS_STD___FILBUF_CHECK )\n+using std::perror;\n+#ifndef _LP64\n+using std::__filbuf;\n+using std::__flsbuf;\n+#endif\n+#endif\n+#endif  /* SOLARIS_STD___FILBUF_CHECK */\n+\n+\n #if defined( STDIO_STDARG_H_CHECK )\n \n #endif  /* STDIO_STDARG_H_CHECK */"}]}