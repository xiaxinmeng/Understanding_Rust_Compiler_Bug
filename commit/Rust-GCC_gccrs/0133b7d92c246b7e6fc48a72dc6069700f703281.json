{"sha": "0133b7d92c246b7e6fc48a72dc6069700f703281", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzM2I3ZDkyYzI0NmI3ZTZmYzQ4YTcyZGM2MDY5NzAwZjcwMzI4MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-01T17:06:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-01T17:06:09Z"}, "message": "Move over patch from Bernd Schmidt from GC branch:\n\n        * emit-rtl.c (gen_rtx_CONST_DOUBLE): New function.\n        (gen_rtx): Call it.  Tidy cases.\n        * rtl.h (gen_rtx_CONST_DOUBLE): Prototype it.\n        * gengenrtl.c: Add commentary.\n        (special_rtx): Also match CONST_DOUBLE.\n        (gencode): Emit call to memset instead of bzero.\n\nFrom-SVN: r26110", "tree": {"sha": "83f67dcf4de9983354cae74f36289575fb39bb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83f67dcf4de9983354cae74f36289575fb39bb5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0133b7d92c246b7e6fc48a72dc6069700f703281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0133b7d92c246b7e6fc48a72dc6069700f703281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0133b7d92c246b7e6fc48a72dc6069700f703281", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0133b7d92c246b7e6fc48a72dc6069700f703281/comments", "author": null, "committer": null, "parents": [{"sha": "4b97aaeb34b0e0dadbd2eced838111fd77b4c0dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b97aaeb34b0e0dadbd2eced838111fd77b4c0dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b97aaeb34b0e0dadbd2eced838111fd77b4c0dc"}], "stats": {"total": 105, "additions": 87, "deletions": 18}, "files": [{"sha": "cf03778d8df318ddfae203a5ba51e81ebba85895", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0133b7d92c246b7e6fc48a72dc6069700f703281", "patch": "@@ -1,3 +1,13 @@\n+Thu Apr  1 17:01:50 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\tMove over patch from Bernd Schmidt from GC branch:\n+\t* emit-rtl.c (gen_rtx_CONST_DOUBLE): New function.\n+\t(gen_rtx): Call it.  Tidy cases.\n+\t* rtl.h (gen_rtx_CONST_DOUBLE): Prototype it.\n+\t* gengenrtl.c: Add commentary.\n+\t(special_rtx): Also match CONST_DOUBLE.\n+\t(gencode): Emit call to memset instead of bzero.\n+\n Fri Apr  2 12:58:26 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (ashlhi3, lshrhi3, ashrhi3): Force operand 1"}, {"sha": "4df1a6a5ba9bd2b6bcdcb14ae36117a6f8f9adf8", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0133b7d92c246b7e6fc48a72dc6069700f703281", "patch": "@@ -264,6 +264,22 @@ gen_rtx_CONST_INT (mode, arg)\n   return gen_rtx_raw_CONST_INT (mode, arg);\n }\n \n+/* CONST_DOUBLEs needs special handling because its length is known\n+   only at run-time.  */\n+rtx\n+gen_rtx_CONST_DOUBLE (mode, arg0, arg1, arg2)\n+     enum machine_mode mode;\n+     rtx arg0;\n+     HOST_WIDE_INT arg1, arg2;\n+{\n+  rtx r = rtx_alloc (CONST_DOUBLE);\n+  PUT_MODE (r, mode);\n+  XEXP (r, 0) = arg0;\n+  XINT (r, 2) = arg1;\n+  XINT (r, 3) = arg2;\n+  return r;\n+}\n+\n rtx\n gen_rtx_REG (mode, regno)\n      enum machine_mode mode;\n@@ -366,14 +382,30 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n   mode = va_arg (p, enum machine_mode);\n #endif\n \n-  if (code == CONST_INT)\n-    rt_val = gen_rtx_CONST_INT (mode, va_arg (p, HOST_WIDE_INT));\n-  else if (code == REG)\n-    rt_val = gen_rtx_REG (mode, va_arg (p, int));\n-  else if (code == MEM)\n-    rt_val = gen_rtx_MEM (mode, va_arg (p, rtx));\n-  else\n+  switch (code)\n     {\n+    case CONST_INT:\n+      rt_val = gen_rtx_CONST_INT (mode, va_arg (p, HOST_WIDE_INT));\n+      break;\n+\n+    case CONST_DOUBLE:\n+      {\n+\trtx arg0 = va_arg (p, rtx);\n+\tHOST_WIDE_INT arg1 = va_arg (p, HOST_WIDE_INT);\n+\tHOST_WIDE_INT arg2 = va_arg (p, HOST_WIDE_INT);\n+        rt_val = gen_rtx_CONST_DOUBLE (mode, arg0, arg1, arg2);\n+      }\n+      break;\n+\n+    case REG:\n+      rt_val = gen_rtx_REG (mode, va_arg (p, int));\n+      break;\n+\n+    case MEM:\n+      rt_val = gen_rtx_MEM (mode, va_arg (p, rtx));\n+      break;\n+\n+    default:\n       rt_val = rtx_alloc (code);\t/* Allocate the storage space.  */\n       rt_val->mode = mode;\t\t/* Store the machine mode...  */\n \n@@ -418,9 +450,11 @@ gen_rtx VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n \t      abort ();\n \t    }\n \t}\n+      break;\n     }\n+\n   va_end (p);\n-  return rt_val;\t\t/* Return the new RTX...\t\t*/\n+  return rt_val;\n }\n \n /* gen_rtvec (n, [rt1, ..., rtn])"}, {"sha": "29cb836df448cb1f4c628f8965d6c4db12b5941c", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=0133b7d92c246b7e6fc48a72dc6069700f703281", "patch": "@@ -1,5 +1,5 @@\n /* Generate code to allocate RTL structures.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -52,6 +52,8 @@ static void genlegend PROTO((FILE *));\n static void genheader PROTO((FILE *));\n static void gencode PROTO((FILE *));\n \n+/* Decode a format letter into a C type string.  */\n+\n static const char *\n type_from_format (c)\n      int c;\n@@ -84,6 +86,8 @@ type_from_format (c)\n     }\n }\n \n+/* Decode a format letter into the proper accessor function.  */\n+\n static const char *\n accessor_from_format (c)\n      int c;\n@@ -110,6 +114,8 @@ accessor_from_format (c)\n     }\n }\n \n+/* Return true if a format character doesn't need normal processing.  */\n+\n static int\n special_format (fmt)\n      const char *fmt;\n@@ -120,15 +126,20 @@ special_format (fmt)\n \t  || strchr (fmt, 'n') != 0);\n }\n \n+/* Return true if an rtx requires special processing.  */\n+\n static int\n special_rtx (idx)\n      int idx;\n {\n   return (strcmp (defs[idx].enumname, \"CONST_INT\") == 0\n+\t  || strcmp (defs[idx].enumname, \"CONST_DOUBLE\") == 0\n \t  || strcmp (defs[idx].enumname, \"REG\") == 0\n \t  || strcmp (defs[idx].enumname, \"MEM\") == 0);\n }\n \n+/* Fill `formats' with all unique format strings.  */\n+\n static void\n find_formats ()\n {\n@@ -142,14 +153,16 @@ find_formats ()\n \tcontinue;\n \n       for (f = formats; *f ; ++f)\n-\tif (!strcmp(*f, defs[i].format))\n+\tif (! strcmp (*f, defs[i].format))\n \t  break;\n \n       if (!*f)\n \t*f = defs[i].format;\n     }\n }\n \n+/* Emit a prototype for the rtx generator for a format.  */\n+\n static void\n gendecl (f, format)\n      FILE *f;\n@@ -166,6 +179,8 @@ gendecl (f, format)\n   fprintf (f, \"));\\n\");\n }\n \n+/* Emit a define mapping an rtx code to the generator for its format.  */\n+\n static void \n genmacro (f, idx)\n      FILE *f;\n@@ -189,6 +204,8 @@ genmacro (f, idx)\n   fprintf (f, \")\\n\");\n }\n \n+/* Emit the implementation for the rtx generator for a format.  */\n+\n static void\n gendef (f, format)\n      FILE *f;\n@@ -225,14 +242,18 @@ gendef (f, format)\n   fprintf (f, \"\\n  return rt;\\n}\\n\\n\");\n }\n \n+/* Emit the `do not edit' banner.  */\n+\n static void\n genlegend (f)\n      FILE *f;\n {\n-  fprintf (f, \"/* Generated automaticaly by the program `gengenrtl'\\n\");\n-  fprintf (f, \"   from the RTL description file `rtl.def' */\\n\\n\");\n+  fputs (\"/* Generated automaticaly by the program `gengenrtl'\\n\", f);\n+  fputs (\"   from the RTL description file `rtl.def' */\\n\\n\", f);\n }\n \n+/* Emit \"genrtl.h\".  */\n+\n static void\n genheader (f)\n      FILE *f;\n@@ -243,7 +264,7 @@ genheader (f)\n   for (fmt = formats; *fmt; ++fmt)\n     gendecl (f, *fmt);\n \n-  fprintf(f, \"\\n\");\n+  fprintf (f, \"\\n\");\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     {\n@@ -253,6 +274,8 @@ genheader (f)\n     }\n }\n \n+/* Emit \"genrtl.c\".  */\n+\n static void\n gencode (f)\n      FILE *f;\n@@ -268,7 +291,7 @@ gencode (f)\n   fputs (\"static rtx obstack_alloc_rtx (length)\\n\", f);\n   fputs (\"     register int length;\\n{\\n\", f);\n   fputs (\"  rtx rt = (rtx) obstack_alloc (rtl_obstack, length);\\n\\n\", f);\n-  fputs (\"  bzero((char *) rt, sizeof(struct rtx_def) - sizeof(rtunion));\\n\\n\", f);\n+  fputs (\"  memset(rt, 0, sizeof(struct rtx_def) - sizeof(rtunion));\\n\\n\", f);\n   fputs (\"  return rt;\\n}\\n\\n\", f);\n \n   for (fmt = formats; *fmt; ++fmt)\n@@ -308,22 +331,22 @@ main(argc, argv)\n   f = fopen (argv[1], \"w\");\n   if (f == NULL)\n     {\n-      perror(argv[1]);\n+      perror (argv[1]);\n       exit (1);\n     }\n   genlegend (f);\n   genheader (f);\n-  fclose(f);\n+  fclose (f);\n \n   f = fopen (argv[2], \"w\");\n   if (f == NULL)\n     {\n-      perror(argv[2]);\n+      perror (argv[2]);\n       exit (1);\n     }\n   genlegend (f);\n   gencode (f);\n-  fclose(f);\n+  fclose (f);\n \n   exit (0);\n }"}, {"sha": "f6a87f25942237c97a0014145295c33b6430ef28", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0133b7d92c246b7e6fc48a72dc6069700f703281/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0133b7d92c246b7e6fc48a72dc6069700f703281", "patch": "@@ -1136,6 +1136,8 @@ extern rtx return_address_pointer_rtx;\n    add to this list, modify special_rtx in gengenrtl.c as well.  You\n    should also modify gen_rtx to use the special function.  */\n \n+extern rtx gen_rtx_CONST_DOUBLE PROTO((enum machine_mode, rtx,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT));\n extern rtx gen_rtx_CONST_INT PROTO((enum machine_mode, HOST_WIDE_INT));\n extern rtx gen_rtx_REG PROTO((enum machine_mode, int));\n extern rtx gen_rtx_MEM PROTO((enum machine_mode, rtx));"}]}