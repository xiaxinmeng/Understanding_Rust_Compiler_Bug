{"sha": "8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVlYTYyZDhhYjljNjIxYjlkNDY5MjZlYjRjNTM4MGZlNTYwNmU0Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-11-15T12:42:29Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-11-15T12:42:29Z"}, "message": "re PR fortran/69654 (ICE in gfc_trans_structure_assign)\n\n2019-11-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69654\n\t* trans-expr.c (gfc_trans_structure_assign): Move assignment to\n\t'cm' after treatment of C pointer types and test that the type\n\thas been completely built before it. Add an assert that the\n\tbackend_decl for each component exists.\n\n2019-11-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/69654\n\t* gfortran.dg/derived_init_6.f90: New test.\n\nFrom-SVN: r278287", "tree": {"sha": "0b00d12b35b993e30818f9b746cfe3c739dc780f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b00d12b35b993e30818f9b746cfe3c739dc780f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/comments", "author": null, "committer": null, "parents": [{"sha": "381835c810867b1cb4658de0ee9bacc59135010c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381835c810867b1cb4658de0ee9bacc59135010c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381835c810867b1cb4658de0ee9bacc59135010c"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "bc74e46ea8fb6f4d6d7906b46c772e7daf191fa1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "patch": "@@ -1,3 +1,11 @@\n+2019-11-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69654\n+\t* trans-expr.c (gfc_trans_structure_assign): Move assignment to\n+\t'cm' after treatment of C pointer types and test that the type\n+\thas been completely built before it. Add an assert that the\n+\tbackend_decl for each component exists.\n+\n 2019-11-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* trans-expr.c (gfc_conv_procedure_call): Fold hidden"}, {"sha": "fe89c7b02edd75aa572063345b8ebd0833d4d12f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "patch": "@@ -8330,7 +8330,6 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr, bool init, bool coarray)\n   gfc_se se;\n \n   gfc_start_block (&block);\n-  cm = expr->ts.u.derived->components;\n \n   if (expr->ts.u.derived->from_intmod == INTMOD_ISO_C_BINDING\n       && (expr->ts.u.derived->intmod_sym_id == ISOCBINDING_PTR\n@@ -8348,6 +8347,17 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr, bool init, bool coarray)\n       return gfc_finish_block (&block);\n     }\n \n+  /* Make sure that the derived type has been completely built.  */\n+  if (!expr->ts.u.derived->backend_decl\n+      || !TYPE_FIELDS (expr->ts.u.derived->backend_decl))\n+    {\n+      tmp = gfc_typenode_for_spec (&expr->ts);\n+      gcc_assert (tmp);\n+    }\n+\n+  cm = expr->ts.u.derived->components;\n+\n+\n   if (coarray)\n     gfc_init_se (&se, NULL);\n \n@@ -8418,6 +8428,7 @@ gfc_trans_structure_assign (tree dest, gfc_expr * expr, bool init, bool coarray)\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n       field = cm->backend_decl;\n+      gcc_assert(field);\n       tmp = fold_build3_loc (input_location, COMPONENT_REF, TREE_TYPE (field),\n \t\t\t     dest, field, NULL_TREE);\n       if (!c->expr)"}, {"sha": "6b123832d5d941feccbc46f7aa426b904eeff421", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "patch": "@@ -1,3 +1,8 @@\n+2019-11-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/69654\n+\t* gfortran.dg/derived_init_6.f90: New test.\n+\n 2019-11-15  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* gcc.dg/rtl/aarch64/test-epilogue-set.c: New test."}, {"sha": "9641a50f5836e86af0dc8c839579eec9d564505b", "filename": "gcc/testsuite/gfortran.dg/derived_init_6.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eea62d8ab9c621b9d46926eb4c5380fe5606e4f/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_6.f90?ref=8eea62d8ab9c621b9d46926eb4c5380fe5606e4f", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do compile }\n+!\n+! Test the fix for PR69654 in which the derived type 'ty_foo2' was\n+! not completely built in time for initialization thereby causing an ICE.\n+!\n+! Contributed by Hossein Talebi  <talebi.hossein@gmail.com>\n+!\n+ Module foo_pointers_class\n+   implicit none\n+    type :: ty_foo_pointers\n+      integer :: scale=0\n+      integer,pointer :: universe_ulogfile => NULL()\n+      class(*),pointer :: foo => NULL()\n+    end type ty_foo_pointers\n+\n+   type :: ty_part_ptrs\n+      character(len=80),pointer :: part_name => NULL()\n+      class(*),pointer     :: part_fem => NULL()\n+   end type\n+\n+   type :: ty_class_basis\n+      integer :: id=0\n+    end type ty_class_basis\n+\n+   type :: ty_store_sclass\n+      class(ty_class_basis),allocatable :: OBJ\n+   end type ty_store_sclass\n+End Module foo_pointers_class\n+\n+Module foo_class\n+   use foo_pointers_class\n+   implicit none\n+   type,extends(ty_class_basis) :: ty_foo2\n+      character(200)                     :: title\n+      logical                            :: isInit=.false.\n+      type(ty_foo_pointers)              :: foo\n+   end type ty_foo2\n+ENd Module foo_class\n+\n+\n+Module foo_scripts_mod\n+  implicit none\n+contains\n+\n+subroutine  foo_script1\n+   use foo_class, only: ty_foo2\n+   implicit none\n+   type(ty_foo2) :: foo2\n+   integer i\n+\n+   Call foo_init2(foo2)\n+end subroutine  foo_script1\n+\n+subroutine foo_init2(self)\n+   use foo_class, only: ty_foo2\n+   type(ty_foo2),target :: self\n+   self%isInit=.true.\n+end subroutine foo_init2\n+\n+End Module foo_scripts_mod"}]}