{"sha": "f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjNmY3ZGE2N2ZmMjQxN2U5MTAwZTJkNDNjMTU3MWI0ODJjOWU4Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-25T17:55:12Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-27T12:41:53Z"}, "message": "When we resolve a Path to Self we cannot infer any substitions\n\nIn rust ParamTy represents type parameters and this works in this context\nif we infer all parameters it breaks type checking here.", "tree": {"sha": "6aa60b8dc2f699f9a77214cfb6d51f12e95833a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aa60b8dc2f699f9a77214cfb6d51f12e95833a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c6f7da67ff2417e9100e2d43c1571b482c9e82/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24a14371b16c316a815a9440b1d960cd3f885dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24a14371b16c316a815a9440b1d960cd3f885dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24a14371b16c316a815a9440b1d960cd3f885dd"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "5dafd64f04e3ebad2defd3aed167264bc2a4d5cc", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c6f7da67ff2417e9100e2d43c1571b482c9e82/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c6f7da67ff2417e9100e2d43c1571b482c9e82/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f1c6f7da67ff2417e9100e2d43c1571b482c9e82", "patch": "@@ -811,8 +811,15 @@ class TypeCheckExpr : public TypeCheckBase\n     else if (expr.get_num_segments () == 1)\n       {\n \tLocation locus = expr.get_segments ().back ().get_locus ();\n-\tif (tyseg->needs_generic_substitutions ())\n-\t  tyseg = SubstMapper::InferSubst (tyseg, locus);\n+\n+\tbool is_big_self\n+\t  = expr.get_segments ().front ().get_segment ().as_string ().compare (\n+\t      \"Self\")\n+\t    == 0;\n+\tif (!is_big_self && tyseg->needs_generic_substitutions ())\n+\t  {\n+\t    tyseg = SubstMapper::InferSubst (tyseg, locus);\n+\t  }\n \n \tinfered = tyseg;\n \treturn;"}]}