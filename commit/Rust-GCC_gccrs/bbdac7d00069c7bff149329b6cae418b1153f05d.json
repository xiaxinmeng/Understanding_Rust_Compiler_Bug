{"sha": "bbdac7d00069c7bff149329b6cae418b1153f05d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkYWM3ZDAwMDY5YzdiZmYxNDkzMjliNmNhZTQxOGIxMTUzZjA1ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-23T18:29:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-23T18:29:53Z"}, "message": "cpphash.h (IN_I): New flag for directive table.\n\n\t* cpphash.h (IN_I): New flag for directive table.\n\t* cpplib.c (DIRECTIVE_TABLE): Mark #define, #undef, #ident, and\n\t#pragma with IN_I.\n\t(_cpp_check_directive): If -fpreprocessed, execute directives\n\tmarked with IN_I.  Issue no warnings in this case.\n\t* cpplex.c (_cpp_get_token): Expand no macros if -fpreprocessed.\n\nFrom-SVN: r35918", "tree": {"sha": "3fe31f794ed65258db6a4470f10e576076b9829d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fe31f794ed65258db6a4470f10e576076b9829d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbdac7d00069c7bff149329b6cae418b1153f05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdac7d00069c7bff149329b6cae418b1153f05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdac7d00069c7bff149329b6cae418b1153f05d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdac7d00069c7bff149329b6cae418b1153f05d/comments", "author": null, "committer": null, "parents": [{"sha": "d8eceea40c08e7f6edfdfa626261196f3ed984bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8eceea40c08e7f6edfdfa626261196f3ed984bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8eceea40c08e7f6edfdfa626261196f3ed984bf"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "bdcc798f3965c98751937234be89649fd2e9e6f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbdac7d00069c7bff149329b6cae418b1153f05d", "patch": "@@ -1,3 +1,12 @@\n+2000-08-23  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.h (IN_I): New flag for directive table.\n+\t* cpplib.c (DIRECTIVE_TABLE): Mark #define, #undef, #ident, and\n+\t#pragma with IN_I.\n+\t(_cpp_check_directive): If -fpreprocessed, execute directives\n+\tmarked with IN_I.  Issue no warnings in this case.\n+\t* cpplex.c (_cpp_get_token): Expand no macros if -fpreprocessed.\n+\n 2000-08-23  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (print_char_table): Allow 'I' flag with %d, %i and"}, {"sha": "23e1d813b0bcaed340040c00058c14e2c32a75e1", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bbdac7d00069c7bff149329b6cae418b1153f05d", "patch": "@@ -66,11 +66,14 @@ struct answer\n    conditional.  EXPAND means that macros are to be expanded on the\n    directive line.  INCL means to treat \"...\" and <...> as\n    q-char-sequence and h-char-sequence respectively.  COMMENTS means\n-   preserve comments in the directive if -C.  */\n+   preserve comments in the directive if -C.  IN_I means this directive\n+   should be handled even if -fpreprocessed is in effect (these are the\n+   directives with callback hooks).  */\n #define COND\t\t(1 << 0)\n #define EXPAND   \t(1 << 1)\n #define INCL\t\t(1 << 2)\n #define COMMENTS\t(1 << 3)\n+#define IN_I\t\t(1 << 4)\n \n /* Defines one #-directive, including how to handle it.  */\n typedef void (*directive_handler) PARAMS ((cpp_reader *));"}, {"sha": "779bcf0d60baff0cddd17f5f2560907c76d7b755", "filename": "gcc/cpplex.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=bbdac7d00069c7bff149329b6cae418b1153f05d", "patch": "@@ -3157,6 +3157,11 @@ _cpp_get_token (pfile)\n \t be taken as a control macro.  */\n       pfile->potential_control_macro = 0;\n \n+      /* If we are rescanning preprocessed input, no macro expansion or\n+\t token pasting may occur.  */\n+      if (CPP_OPTION (pfile, preprocessed))\n+\treturn token;\n+\n       old_token = token;\n \n       /* See if there's a token to paste with this one.  */"}, {"sha": "2cc956dea4265e0c2b490f2ecb5b5257c839105b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdac7d00069c7bff149329b6cae418b1153f05d/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=bbdac7d00069c7bff149329b6cae418b1153f05d", "patch": "@@ -79,21 +79,21 @@ static void unwind_if_stack\tPARAMS ((cpp_reader *, cpp_buffer *));\n #endif\n \n #define DIRECTIVE_TABLE\t\t\t\t\t\t\t\\\n-D(define,\tT_DEFINE = 0,\tKANDR,     COMMENTS)\t   /* 270554 */ \\\n+D(define,\tT_DEFINE = 0,\tKANDR,     COMMENTS | IN_I)/* 270554 */ \\\n D(include,\tT_INCLUDE,\tKANDR,     EXPAND | INCL)  /*  52262 */ \\\n D(endif,\tT_ENDIF,\tKANDR,     COND)\t   /*  45855 */ \\\n D(ifdef,\tT_IFDEF,\tKANDR,     COND)\t   /*  22000 */ \\\n D(if,\t\tT_IF,\t\tKANDR,     COND | EXPAND)  /*  18162 */ \\\n D(else,\t\tT_ELSE,\t\tKANDR,     COND)\t   /*   9863 */ \\\n D(ifndef,\tT_IFNDEF,\tKANDR,     COND)\t   /*   9675 */ \\\n-D(undef,\tT_UNDEF,\tKANDR,     0)\t\t   /*   4837 */ \\\n+D(undef,\tT_UNDEF,\tKANDR,     IN_I)\t   /*   4837 */ \\\n D(line,\t\tT_LINE,\t\tKANDR,     EXPAND)    \t   /*   2465 */ \\\n D(elif,\t\tT_ELIF,\t\tKANDR,     COND | EXPAND)  /*    610 */ \\\n D(error,\tT_ERROR,\tSTDC89,    0)\t\t   /*    475 */ \\\n-D(pragma,\tT_PRAGMA,\tSTDC89,    0)\t\t   /*    195 */ \\\n+D(pragma,\tT_PRAGMA,\tSTDC89,    IN_I)\t   /*    195 */ \\\n D(warning,\tT_WARNING,\tEXTENSION, 0)\t\t   /*     22 GNU   */ \\\n D(include_next,\tT_INCLUDE_NEXT,\tEXTENSION, EXPAND | INCL)  /*     19 GNU   */ \\\n-D(ident,\tT_IDENT,\tEXTENSION, 0)\t\t   /*     11 SVR4  */ \\\n+D(ident,\tT_IDENT,\tEXTENSION, IN_I)\t   /*     11 SVR4  */ \\\n D(import,\tT_IMPORT,\tEXTENSION, EXPAND | INCL)  /*      0 ObjC  */ \\\n D(assert,\tT_ASSERT,\tEXTENSION, 0)  \t\t   /*      0 SVR4  */ \\\n D(unassert,\tT_UNASSERT,\tEXTENSION, 0)  \t\t   /*      0 SVR4  */ \\\n@@ -140,14 +140,19 @@ _cpp_check_directive (pfile, token, bol)\n {\n   unsigned int i;\n \n-  /* If we are rescanning preprocessed input, don't obey any directives\n-     other than # nnn.  */\n-  if (CPP_OPTION (pfile, preprocessed))\n-    return 0;\n-\n   for (i = 0; i < N_DIRECTIVES; i++)\n     if (pfile->spec_nodes->dirs[i] == token->val.node)\n       {\n+\t/* If we are rescanning preprocessed input, only directives\n+\t   tagged with IN_I are to be honored, and the warnings below\n+\t   are suppressed.  */\n+\tif (CPP_OPTION (pfile, preprocessed))\n+\t  {\n+\t    if (dtable[i].flags & IN_I)\n+\t      return &dtable[i];\n+\t    return 0;\n+\t  }\n+\n \t/* In -traditional mode, a directive is ignored unless its #\n \t   is in column 1.  In code intended to work with K+R compilers,\n \t   therefore, directives added by C89 must have their # indented,"}]}