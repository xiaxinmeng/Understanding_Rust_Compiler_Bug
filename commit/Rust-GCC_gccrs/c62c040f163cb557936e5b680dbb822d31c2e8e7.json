{"sha": "c62c040f163cb557936e5b680dbb822d31c2e8e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyYzA0MGYxNjNjYjU1NzkzNmU1YjY4MGRiYjgyMmQzMWMyZThlNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-04T14:56:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-04T14:56:14Z"}, "message": "c-decl.c (check_bitfield_type_and_width): Do not pass NULL to build_int_cst.\n\n2011-05-04  Richard Guenther  <rguenther@suse.de>\n\n\t* c-decl.c (check_bitfield_type_and_width): Do not pass NULL\n\tto build_int_cst.\n\t* c-typeck.c (really_start_incremental_init): Use bitsize_int\n\tfor constructor indices.\n\t(push_init_level): Likewise.\n\n\tc-family/\n\t* c-common.c (fix_string_type): Use size_int for index type bounds.\n\t(start_fname_decls): Do not pass NULL to build_int_cst.\n\t(c_init_attributes): Likewise.\n\t* c-lex.c (c_lex_with_flags): Likewise.\n\nFrom-SVN: r173378", "tree": {"sha": "01becb52afb237122f45f55265ad89d0694041de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01becb52afb237122f45f55265ad89d0694041de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c62c040f163cb557936e5b680dbb822d31c2e8e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62c040f163cb557936e5b680dbb822d31c2e8e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c62c040f163cb557936e5b680dbb822d31c2e8e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c62c040f163cb557936e5b680dbb822d31c2e8e7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e3287d0e91ae7f1c19ecc3031fbb548f06db652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3287d0e91ae7f1c19ecc3031fbb548f06db652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3287d0e91ae7f1c19ecc3031fbb548f06db652"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "7083a15ac365e8f93aa5e136d8ec17f67efd159d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -1,3 +1,11 @@\n+2011-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-decl.c (check_bitfield_type_and_width): Do not pass NULL\n+\tto build_int_cst.\n+\t* c-typeck.c (really_start_incremental_init): Use bitsize_int\n+\tfor constructor indices.\n+\t(push_init_level): Likewise.\n+\n 2011-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* explow.c (promote_mode): Move variable declarations before code."}, {"sha": "9b217d26de5eb79128f89ce7dacddb784a52e6df", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -4717,7 +4717,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n     {\n       error (\"width of %qs exceeds its type\", name);\n       w = max_width;\n-      *width = build_int_cst (NULL_TREE, w);\n+      *width = build_int_cst (integer_type_node, w);\n     }\n   else\n     w = tree_low_cst (*width, 1);"}, {"sha": "8ad5f6e491bd822a8ac2d682bf04ca8d20018315", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -1,3 +1,10 @@\n+2011-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-common.c (fix_string_type): Use size_int for index type bounds.\n+\t(start_fname_decls): Do not pass NULL to build_int_cst.\n+\t(c_init_attributes): Likewise.\n+\t* c-lex.c (c_lex_with_flags): Likewise.\n+\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (make_tree_vector_from_list): New."}, {"sha": "aaaa21065306e0a139781984ab74bf58f908daa7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -743,7 +743,8 @@ start_fname_decls (void)\n \n       if (decl)\n \t{\n-\t  saved = tree_cons (decl, build_int_cst (NULL_TREE, ix), saved);\n+\t  saved = tree_cons (decl, build_int_cst (integer_type_node, ix),\n+\t\t\t     saved);\n \t  *fname_vars[ix].decl = NULL_TREE;\n \t}\n     }\n@@ -946,7 +947,7 @@ fix_string_type (tree value)\n      construct the matching unqualified array type first.  The C front\n      end does not require this, but it does no harm, so we do it\n      unconditionally.  */\n-  i_type = build_index_type (build_int_cst (NULL_TREE, nchars - 1));\n+  i_type = build_index_type (size_int (nchars - 1));\n   a_type = build_array_type (e_type, i_type);\n   if (c_dialect_cxx() || warn_write_strings)\n     a_type = c_build_qualified_type (a_type, TYPE_QUAL_CONST);\n@@ -5670,7 +5671,7 @@ c_init_attributes (void)\n #define DEF_ATTR_NULL_TREE(ENUM)\t\t\t\t\\\n   built_in_attributes[(int) ENUM] = NULL_TREE;\n #define DEF_ATTR_INT(ENUM, VALUE)\t\t\t\t\\\n-  built_in_attributes[(int) ENUM] = build_int_cst (NULL_TREE, VALUE);\n+  built_in_attributes[(int) ENUM] = build_int_cst (integer_type_node, VALUE);\n #define DEF_ATTR_IDENT(ENUM, STRING)\t\t\t\t\\\n   built_in_attributes[(int) ENUM] = get_identifier (STRING);\n #define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN)\t\\"}, {"sha": "e60dcc53588997b457755971891e6bb24bfe8f37", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -437,7 +437,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n       break;\n \n     case CPP_PRAGMA:\n-      *value = build_int_cst (NULL, tok->val.pragma);\n+      *value = build_int_cst (integer_type_node, tok->val.pragma);\n       break;\n \n       /* These tokens should not be visible outside cpplib.  */"}, {"sha": "545cd01ec16eb63150c354440d754b7d36f07a56", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c62c040f163cb557936e5b680dbb822d31c2e8e7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c62c040f163cb557936e5b680dbb822d31c2e8e7", "patch": "@@ -6636,7 +6636,7 @@ really_start_incremental_init (tree type)\n     {\n       /* Vectors are like simple fixed-size arrays.  */\n       constructor_max_index =\n-\tbuild_int_cst (NULL_TREE, TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n+\tbitsize_int (TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n       constructor_index = bitsize_zero_node;\n       constructor_unfilled_index = constructor_index;\n     }\n@@ -6805,8 +6805,8 @@ push_init_level (int implicit, struct obstack * braced_init_obstack)\n     {\n       /* Vectors are like simple fixed-size arrays.  */\n       constructor_max_index =\n-\tbuild_int_cst (NULL_TREE, TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n-      constructor_index = convert (bitsizetype, integer_zero_node);\n+\tbitsize_int (TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n+      constructor_index = bitsize_int (0);\n       constructor_unfilled_index = constructor_index;\n     }\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)"}]}