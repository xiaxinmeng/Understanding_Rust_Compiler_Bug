{"sha": "3164de6ac1b8473e60f6b85e94b15930694c80d7", "node_id": "C_kwDOANBUbNoAKDMxNjRkZTZhYzFiODQ3M2U2MGY2Yjg1ZTk0YjE1OTMwNjk0YzgwZDc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-02T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-02T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "743bcd44c90646ad04a74aace248332cbbad461b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743bcd44c90646ad04a74aace248332cbbad461b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3164de6ac1b8473e60f6b85e94b15930694c80d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3164de6ac1b8473e60f6b85e94b15930694c80d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3164de6ac1b8473e60f6b85e94b15930694c80d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3164de6ac1b8473e60f6b85e94b15930694c80d7/comments", "author": null, "committer": null, "parents": [{"sha": "2d546ff69455f7deadab65309de89d19380a8864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d546ff69455f7deadab65309de89d19380a8864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d546ff69455f7deadab65309de89d19380a8864"}], "stats": {"total": 750, "additions": 749, "deletions": 1}, "files": [{"sha": "7e2ea8d742ea79794b6636d323df9d630702df8f", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,8 @@\n+2022-06-01  David Seifert  <soap@gentoo.org>\n+\n+\tPR plugins/95648\n+\t* gcc-plugin.m4: Use libtool's $ac_cv_prog_OBJDUMP.\n+\n 2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n \n \t* dfp.m4: Add aarch64 support."}, {"sha": "6d91cce532bcad2bf06ef8f25f100d748b4b3355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,388 @@\n+2022-06-01  David Seifert  <soap@gentoo.org>\n+\n+\tPR plugins/95648\n+\t* configure: Regenerate.\n+\n+2022-06-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR rtl-optimization/105638\n+\t* df-core.cc (df_find_single_def_src): Moved and renamed from\n+\tfind_single_def_src in loop-iv.cc.  Change the argument to rtx\n+\tand use rtx_equal_p.  Return null for partial or conditional\n+\tdefs.\n+\t* df.h (df_find_single_def_src): New prototype.\n+\t* dse.cc (record_store): Use the constant source if the source\n+\tregister is set only once.\n+\t* loop-iv.cc (find_single_def_src): Moved to df-core.cc.\n+\t(replace_single_def_regs): Replace find_single_def_src with\n+\tdf_find_single_def_src.\n+\n+2022-06-01  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* config/aarch64/aarch64.opt (explicit_tune_core): Rename to\n+\tselected_tune.\n+\t(explicit_arch): Rename to selected_arch.\n+\t(x_aarch64_override_tune_string): Remove.\n+\t(aarch64_ra_sign_key): Add as TargetVariable so it gets saved/restored.\n+\t(aarch64_override_tune_string): Add Save so it gets saved/restored.\n+\t* config/aarch64/aarch64.h (aarch64_architecture_version): Remove.\n+\t* config/aarch64/aarch64.cc (aarch64_architecture_version): Remove.\n+\t(processor): Remove archtecture_version field.\n+\t(selected_arch): Remove global.\n+\t(selected_cpu): Remove global.\n+\t(selected_tune): Remove global.\n+\t(aarch64_ra_sign_key): Move global to aarch64.opt so it is saved.\n+\t(aarch64_override_options_internal): Use aarch64_get_tune_cpu.\n+\t(aarch64_override_options): Further simplify code to only set\n+\tselected_arch and selected_tune globals.\n+\t(aarch64_option_save): Remove now that target options are saved.\n+\t(aarch64_option_restore): Remove redundant target option restores.\n+\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Use\n+\tAARCH64_ISA_V9.\n+\t* config/aarch64/aarch64-opts.h (aarch64_key_type): Add, moved from...\n+\t* config/aarch64/aarch64-protos.h (aarch64_key_type): Remove.\n+\t(aarch64_ra_sign_key): Remove.\n+\n+2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30314\n+\t* match.pd (__builtin_mul_overflow_p (x, cst, (utype) 0) ->\n+\tx > ~(utype)0 / cst): New simplification.\n+\n+2022-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105786\n+\t* tree-loop-distribution.cc\n+\t(loop_distribution::transform_reduction_loop): Only do strlen\n+\treplacement for integer type reductions.\n+\n+2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105770\n+\t* tree-ssa-loop-unswitch.cc (find_unswitching_predicates_for_bb): Cast\n+\tCASE_LOW and CASE_HIGH to TREE_TYPE (idx) before comparisons with idx.\n+\n+2022-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (ssa_block_ranges::dump): Convert to vrange.\n+\t(sbr_vector::sbr_vector): Same.\n+\t(sbr_vector::grow): Same.\n+\t(sbr_vector::set_bb_range): Same.\n+\t(sbr_vector::get_bb_range): Same.\n+\t(sbr_sparse_bitmap::sbr_sparse_bitmap): Same.\n+\t(sbr_sparse_bitmap::set_bb_range): Same.\n+\t(sbr_sparse_bitmap::get_bb_range): Same.\n+\t(block_range_cache::set_bb_range): Same.\n+\t(block_range_cache::get_bb_range): Same.\n+\t(block_range_cache::dump): Same.\n+\t(ssa_global_cache::get_global_range): Same.\n+\t(ssa_global_cache::set_global_range): Same.\n+\t(ssa_global_cache::clear): Same.\n+\t(ssa_global_cache::dump): Same.\n+\t(ranger_cache::get_global_range): Same.\n+\t(ranger_cache::set_global_range): Same.\n+\t(ranger_cache::range_of_def): Same.\n+\t(ranger_cache::entry_range): Same.\n+\t(ranger_cache::exit_range): Same.\n+\t(ranger_cache::edge_range): Same.\n+\t(ranger_cache::range_of_expr): Same.\n+\t(ranger_cache::range_on_edge): Same.\n+\t(ranger_cache::block_range): Same.\n+\t(ranger_cache::propagate_cache): Same.\n+\t(ranger_cache::fill_block_cache): Same.\n+\t(ranger_cache::range_from_dom): Same.\n+\t* gimple-range-cache.h: Same.\n+\t* gimple-range-edge.cc (gimple_outgoing_range::get_edge_range):\n+\tSame.\n+\t(gimple_outgoing_range::switch_edge_range): Same.\n+\t(gimple_outgoing_range::edge_range_p): Same.\n+\t* gimple-range-edge.h: Same.\n+\t* gimple-range-fold.cc (fur_source::get_operand): Same.\n+\t(fur_source::get_phi_operand): Same.\n+\t(fur_edge::get_operand): Same.\n+\t(fur_edge::get_phi_operand): Same.\n+\t(fur_stmt::get_operand): Same.\n+\t(fur_stmt::get_phi_operand): Same.\n+\t(fur_list::fur_list): Same.\n+\t(fur_list::get_operand): Same.\n+\t(fur_list::get_phi_operand): Same.\n+\t(fold_range): Same.\n+\t(adjust_imagpart_expr): Same.\n+\t(adjust_realpart_expr): Same.\n+\t(gimple_range_adjustment): Same.\n+\t(fold_using_range::fold_stmt): Same.\n+\t(fold_using_range::range_of_range_op): Same.\n+\t(fold_using_range::range_of_address): Same.\n+\t(fold_using_range::range_of_phi): Same.\n+\t(fold_using_range::range_of_call): Same.\n+\t(fold_using_range::range_of_builtin_call): Same.\n+\t(fold_using_range::range_of_builtin_int_call): Same.\n+\t(fold_using_range::range_of_cond_expr): Same.\n+\t(fur_source::register_outgoing_edges): Same.\n+\t* gimple-range-fold.h (fold_range): Same.\n+\t(gimple_range_type): Same.\n+\t(gimple_range_ssa_p): Same.\n+\t* gimple-range-gori.cc (gimple_range_calc_op1): Same.\n+\t(gimple_range_calc_op2): Same.\n+\t(gori_compute::compute_operand_range_switch): Same.\n+\t(gori_compute::compute_operand_range): Same.\n+\t(gori_compute::logical_combine): Same.\n+\t(gori_compute::compute_logical_operands): Same.\n+\t(gori_compute::compute_operand1_range): Same.\n+\t(gori_compute::compute_operand2_range): Same.\n+\t(gori_compute::compute_operand1_and_operand2_range): Same.\n+\t(gori_compute::outgoing_edge_range_p): Same.\n+\t(gori_compute::condexpr_adjust): Same.\n+\t* gimple-range-gori.h (gimple_range_calc_op1): Same.\n+\t(gimple_range_calc_op2): Same.\n+\t* gimple-range-path.cc (path_range_query::get_cache): Same.\n+\t(path_range_query::set_cache): Same.\n+\t(path_range_query::range_on_path_entry): Same.\n+\t(path_range_query::internal_range_of_expr): Same.\n+\t(path_range_query::range_of_expr): Same.\n+\t(path_range_query::ssa_range_in_phi): Same.\n+\t(path_range_query::range_defined_in_block): Same.\n+\t(path_range_query::compute_ranges_in_phis): Same.\n+\t(path_range_query::compute_ranges_in_block): Same.\n+\t(path_range_query::add_to_imports): Same.\n+\t(path_range_query::range_of_stmt): Same.\n+\t* gimple-range-path.h: Same.\n+\t* gimple-range-infer.cc (gimple_infer_range::add_range): Same.\n+\t(gimple_infer_range::~side_effect_manager): Same.\n+\t(gimple_infer_range::get_nonzero): Same.\n+\t(gimple_infer_range::maybe_adjust_range): Same.\n+\t(gimple_infer_range::add_range): Same.\n+\t* gimple-range-infer.h: Same.\n+\t* gimple-range-tests.cc: Same.\n+\t* gimple-range-trace.cc (range_tracer::trailer): Same.\n+\t(debug_seed_ranger): Same.\n+\t* gimple-range-trace.h: Same.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Same.\n+\t(gimple_ranger::range_on_entry): Same.\n+\t(gimple_ranger::range_on_exit): Same.\n+\t(gimple_ranger::range_on_edge): Same.\n+\t(gimple_ranger::fold_range_internal): Same.\n+\t(gimple_ranger::range_of_stmt): Same.\n+\t(gimple_ranger::prefill_name): Same.\n+\t(gimple_ranger::prefill_stmt_dependencies): Same.\n+\t(gimple_ranger::export_global_ranges): Same.\n+\t(gimple_ranger::dump_bb): Same.\n+\t* gimple-range.h: Same.\n+\t* gimple-ssa-warn-access.cc (check_nul_terminated_array): Same.\n+\t(memmodel_to_uhwi): Same.\n+\t* tree-ssa-loop-niter.cc (refine_value_range_using_guard): Same.\n+\t(determine_value_range): Same.\n+\t(record_nonwrapping_iv): Same.\n+\t(infer_loop_bounds_from_signedness): Same.\n+\t(scev_var_range_cant_overflow): Same.\n+\t* tree-ssa-threadedge.cc (hybrid_jt_simplifier::simplify): Same.\n+\t* value-query.cc (range_query::range_on_edge): Same.\n+\t(range_query::range_of_stmt): Same.\n+\t(range_query::value_of_expr): Same.\n+\t(range_query::value_on_edge): Same.\n+\t(range_query::value_of_stmt): Same.\n+\t(range_query::get_tree_range): Same.\n+\t(update_global_range): Same.\n+\t(get_range_global): Same.\n+\t(gimple_range_global): Same.\n+\t(global_range_query::range_of_expr): Same.\n+\t(range_query::query_relation): Same.\n+\t* value-query.h (gimple_range_global): Same.\n+\t(update_global_range): Same.\n+\t* vr-values.cc (vr_values::range_of_expr): Same.\n+\t(bounds_of_var_in_loop): Same.\n+\t(simplify_using_ranges::vrp_visit_cond_stmt): Same.\n+\t* vr-values.h (class vr_values): Same.\n+\t* tree-ssa-loop-unswitch.cc (unswitch_predicate): Same.\n+\n+2022-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (sbr_vector::sbr_vector): Adjust for\n+\tvrange allocator.\n+\t(sbr_vector::grow): Same.\n+\t(sbr_vector::set_bb_range): Same.\n+\t(sbr_sparse_bitmap::sbr_sparse_bitmap): Same.\n+\t(sbr_sparse_bitmap::set_bb_range): Same.\n+\t(block_range_cache::~block_range_cache): Same.\n+\t(block_range_cache::set_bb_range): Same.\n+\t(ssa_global_cache::ssa_global_cache): Same.\n+\t(ssa_global_cache::~ssa_global_cache): Same.\n+\t(ssa_global_cache::set_global_range): Same.\n+\t* gimple-range-cache.h (block_range_cache): Same.\n+\t(ssa_global_cache): Same.\n+\t* gimple-range-edge.cc\n+\t(gimple_outgoing_range::calc_switch_ranges): Same.\n+\t* gimple-range-edge.h (gimple_outgoing_range): Same.\n+\t* gimple-range-infer.cc (infer_range_manager::get_nonzero):\n+\tSame.\n+\t(infer_range_manager::add_range): Same.\n+\t* gimple-range-infer.h (class infer_range_manager): Same.\n+\t* value-range.h (class irange_allocator): Rename to...\n+\t(class vrange_allocator): ...this.\n+\t(irange_allocator::irange_allocator): New.\n+\t(vrange_allocator::vrange_allocator): New.\n+\t(irange_allocator::~irange_allocator): New.\n+\t(vrange_allocator::~vrange_allocator): New.\n+\t(irange_allocator::get_memory): Rename to...\n+\t(vrange_allocator::alloc): ...this.\n+\t(vrange_allocator::alloc_vrange): Rename from...\n+\t(irange_allocator::allocate): ...this.\n+\t(vrange_allocator::alloc_irange): New.\n+\n+2022-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-edge.cc (gimple_outgoing_range_stmt_p): Adjust for\n+\tvrange and convert range_op_handler function calls to use the\n+\tidentically named object.\n+\t* gimple-range-fold.cc (gimple_range_operand1): Same.\n+\t(gimple_range_operand2): Same.\n+\t(fold_using_range::fold_stmt): Same.\n+\t(fold_using_range::range_of_range_op): Same.\n+\t(fold_using_range::range_of_builtin_ubsan_call): Same.\n+\t(fold_using_range::relation_fold_and_or): Same.\n+\t(fur_source::register_outgoing_edges): Same.\n+\t* gimple-range-fold.h (gimple_range_handler): Remove.\n+\t* gimple-range-gori.cc (gimple_range_calc_op1): Adjust for vrange.\n+\t(gimple_range_calc_op2): Same.\n+\t(range_def_chain::get_def_chain): Same.\n+\t(gori_compute::compute_operand_range): Same.\n+\t(gori_compute::condexpr_adjust): Same.\n+\t* gimple-range.cc (gimple_ranger::prefill_name): Same.\n+\t(gimple_ranger::prefill_stmt_dependencies): Same.\n+\t* range-op.cc (get_bool_state): Same.\n+\t(class operator_equal): Add using clause.\n+\t(class operator_not_equal): Same.\n+\t(class operator_lt): Same.\n+\t(class operator_le): Same.\n+\t(class operator_gt): Same.\n+\t(class operator_ge): Same.\n+\t(class operator_plus): Same.\n+\t(class operator_minus): Same.\n+\t(class operator_mult): Same.\n+\t(class operator_exact_divide): Same.\n+\t(class operator_lshift): Same.\n+\t(class operator_rshift): Same.\n+\t(class operator_cast): Same.\n+\t(class operator_logical_and): Same.\n+\t(class operator_bitwise_and): Same.\n+\t(class operator_logical_or): Same.\n+\t(class operator_bitwise_or): Same.\n+\t(class operator_bitwise_xor): Same.\n+\t(class operator_trunc_mod): Same.\n+\t(class operator_logical_not): Same.\n+\t(class operator_bitwise_not): Same.\n+\t(class operator_cst): Same.\n+\t(class operator_identity): Same.\n+\t(class operator_unknown): Same.\n+\t(class operator_abs): Same.\n+\t(class operator_negate): Same.\n+\t(class operator_addr_expr): Same.\n+\t(class pointer_or_operator): Same.\n+\t(operator_plus::op1_range): Adjust for vrange.\n+\t(operator_minus::op1_range): Same.\n+\t(operator_mult::op1_range): Same.\n+\t(operator_cast::op1_range): Same.\n+\t(operator_bitwise_not::fold_range): Same.\n+\t(operator_negate::fold_range): Same.\n+\t(range_op_handler): Rename to...\n+\t(get_handler): ...this.\n+\t(range_op_handler::range_op_handler): New.\n+\t(range_op_handler::fold_range): New.\n+\t(range_op_handler::op1_range): New.\n+\t(range_op_handler::op2_range): New.\n+\t(range_op_handler::lhs_op1_relation): New.\n+\t(range_op_handler::lhs_op2_relation): New.\n+\t(range_op_handler::op1_op2_relation): New.\n+\t(range_cast): Adjust for vrange.\n+\t* range-op.h (range_op_handler): Remove function.\n+\t(range_cast): Adjust for vrange.\n+\t(class range_op_handler): New.\n+\t(get_bool_state): Adjust for vrange.\n+\t(empty_range_varying): Same.\n+\t(relop_early_resolve): Same.\n+\t* tree-data-ref.cc (compute_distributive_range): Same.\n+\t* tree-vrp.cc (get_range_op_handler): Remove.\n+\t(range_fold_binary_symbolics_p): Use range_op_handler class\n+\tinstead of get_range_op_handler.\n+\t(range_fold_unary_symbolics_p): Same.\n+\t(range_fold_binary_expr): Same.\n+\t(range_fold_unary_expr): Same.\n+\t* value-query.cc (range_query::get_tree_range): Adjust for vrange.\n+\n+2022-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.h (gimple_range_type): Check type before\n+\tcalling supports_type_p.\n+\t* gimple-range-path.cc (path_range_query::range_of_stmt): Same.\n+\t* value-query.cc (range_query::get_tree_range): Same.\n+\t* value-range.cc (Value_Range::lower_bound): New.\n+\t(Value_Range::upper_bound): New.\n+\t(Value_Range::dump): New.\n+\t* value-range.h (class Value_Range): New.\n+\t(irange::supports_type_p): Do not check if type is non-zero.\n+\n+2022-06-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-equiv.cc (value_range_equiv::set): New.\n+\t* value-range-equiv.h (class value_range_equiv): Make set method\n+\tvirtual.\n+\tRemove default bitmap argument from set method.\n+\t* value-range.cc (vrange::contains_p): New.\n+\t(vrange::singleton_p): New.\n+\t(vrange::operator=): New.\n+\t(vrange::operator==): New.\n+\t(irange::fits_p): Move to .cc file.\n+\t(irange::set_nonnegative): New.\n+\t(unsupported_range::unsupported_range): New.\n+\t(unsupported_range::set): New.\n+\t(unsupported_range::type): New.\n+\t(unsupported_range::set_undefined): New.\n+\t(unsupported_range::set_varying): New.\n+\t(unsupported_range::dump): New.\n+\t(unsupported_range::union_): New.\n+\t(unsupported_range::intersect): New.\n+\t(unsupported_range::zero_p): New.\n+\t(unsupported_range::nonzero_p): New.\n+\t(unsupported_range::set_nonzero): New.\n+\t(unsupported_range::set_zero): New.\n+\t(unsupported_range::set_nonnegative): New.\n+\t(unsupported_range::fits_p): New.\n+\t(irange::set): Call irange::set_undefined.\n+\t(irange::verify_range): Check discriminator field.\n+\t(irange::dump): Dump [irange] marker.\n+\t(irange::debug): Move to...\n+\t(vrange::debug): ...here.\n+\t(dump_value_range): Accept vrange.\n+\t(debug): Same.\n+\t* value-range.h (enum value_range_discriminator): New.\n+\t(class vrange): New.\n+\t(class unsupported_range): New.\n+\t(struct vrange_traits): New.\n+\t(is_a): New.\n+\t(as_a): New.\n+\t(class irange): Inherit from vrange.\n+\t(dump_value_range): Adjust for vrange.\n+\t(irange::kind): Rename to...\n+\t(vrange::kind): ...this.\n+\t(irange::varying_p): Rename to...\n+\t(vrange::varying_p): ...this.\n+\t(irange::undefined_p): Rename to...\n+\t(vrange::undefined_p): ...this.\n+\t(irange::irange): Set discriminator.\n+\t(irange::union_): Convert to irange before passing to irange\n+\tmethod.\n+\t(irange::intersect): Same.\n+\t(vrange::supports_type_p): New.\n+\t* vr-values.cc (vr_values::extract_range_from_binary_expr): Pass\n+\tNULL bitmap argument to value_range_equiv::set.\n+\t(vr_values::extract_range_basic): Same.\n+\n+2022-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105763\n+\t* tree-ssa-loop-unswitch.cc (find_unswitching_predicates_for_bb):\n+\tCheck gimple_range_ssa_p.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Makefile.in (TAGS): Look at libcpp/*.cc."}, {"sha": "42757d43665ffbf8bad62cebdaf97fbe80408589", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1 +1 @@\n-20220601\n+20220602"}, {"sha": "6cf00b68282602f142a16ea762d6a6b0a1cf58aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,275 @@\n+2022-06-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* contracts.adb (Check_Type_Or_Object_External_Properties): Check\n+\tthe validity of combinations only when No_Caching is not used.\n+\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Check\n+\tvalid combinations with No_Caching.\n+\n+2022-06-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks7-aarch64.ads (Word_Size): Compute\n+\tbased on Standard'Word_Size. (Memory_Size): Compute based\n+\ton Word_Size.\n+\t* libgnat/system-vxworks7-arm.ads: Likewise.\n+\t* libgnat/system-vxworks7-e500-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-ppc64-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads: Likewise.\n+\n+2022-06-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-qnx-arm.ads (Memory_Size): Compute based on\n+\tWord_Size.\n+\n+2022-06-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-util.adb (Ignore): Add missing space to message string.\n+\n+2022-06-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.ads (Assertion_Expression_Pragmas): Fix value for\n+\tpragma Subprogram_Variant.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Caller_Known_Size): Invoke Needs_Secondary_Stack in\n+\tlieu of Returns_On_Secondary_Stack.\n+\t(Expand_Call_Helper): Likewise.\n+\t(Expand_Simple_Function_Return): Likewise.\n+\t(Needs_BIP_Alloc_Form): Likewise.\n+\t* exp_ch7.adb (Wrap_Transient_Declaration): Likewise.\n+\t* sem_res.adb (Resolve_Call): Likewise.\n+\t(Resolve_Entry_Call): Likewise.\n+\t* sem_util.ads (Returns_On_Secondary_Stack): Rename into...\n+\t(Needs_Secondary_Stack): ...this.\n+\t* sem_util.adb (Returns_On_Secondary_Stack): Rename into...\n+\t(Needs_Secondary_Stack): ...this.\n+\t* fe.h (Returns_On_Secondary_Stack): Delete.\n+\t(Needs_Secondary_Stack): New function.\n+\t* gcc-interface/decl.cc (gnat_to_gnu_subprog_type): Replace call\n+\tto Returns_On_Secondary_Stack with Needs_Secondary_Stack.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): For the case where\n+\tthere is no previous declaration, freeze the body entity only after\n+\tit has been processed as a new overloaded name.\n+\tUse Was_Expression_Function to recognize expression functions.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Do not require a body\n+\twhich is the last primitive to be frozen here.\n+\n+2022-06-01  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cfdlli.adb (\"=\"): Make the function properly loop\n+\tover the right list.\n+\n+2022-06-01  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* checks.adb (Apply_Predicate_Check): Refine condition for\n+\tapplying optimization.\n+\t* sem_ch3.adb (Analyze_Component_Declaration): Adjust calls to\n+\tShould_Build_Subtype.\n+\t(Analyze_Object_Declaration): Likewise.\n+\t(Should_Build_Subtype): Rename/move to ...\n+\t* sem_util.ads (Build_Default_Subtype_OK): ... this.\n+\t* sem_util.adb (Build_Default_Subtype_OK): Moved from\n+\tsem_ch3.adb.\n+\n+2022-06-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (__gnat_adjust_context_for_raise) [QNX][__thumb2__]: Bump\n+\tthe pc an extra byte.\n+\n+2022-06-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new behavior.\n+\t* errout.adb (Write_JSON_Location): Output absolute paths when\n+\tneeded.\n+\t* switch-c.adb (Scan_Front_End_Switches): Update -gnatef\n+\tcomment.\n+\t* usage.adb (Usage): Update description of -gnatef.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* contracts.adb (Build_Postconditions_Procedure): Set Is_Inlined\n+\tunconditionnally on the procedure entity.\n+\n+2022-06-01  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Access): Propagate null-exclusion flag\n+\tfrom parent type.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Add a comment about\n+\ta finalization issue.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Caller_Known_Size): Call Returns_On_Secondary_Stack\n+\tinstead of Requires_Transient_Scope and tidy up.\n+\t(Needs_BIP_Alloc_Form): Likewise.\n+\t* exp_util.adb (Initialized_By_Aliased_BIP_Func_Call): Also return\n+\ttrue if the build-in-place function call has no BIPalloc parameter.\n+\t(Is_Finalizable_Transient): Remove redundant test.\n+\n+2022-06-01  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Note that hardening\n+\tfeatures are experimental.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-06-01  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Set the\n+\tCorresponding_Spec field of a wrapper subprogram body before\n+\tanalyzing the subprogram body; the field will be set (again)\n+\tduring analysis, but we need it to be set earlier.\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): Add wrapper subprogram\n+\tbodies to the list of declarations for which we do not want to\n+\tsuppress checks.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Indirect_Temp_Needed): Adjust reference in comment.\n+\n+2022-06-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (GNATLIB_SHARED): Revert disablement for arm-qnx.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb\n+\t(Returns_On_Secondary_Stack.Caller_Known_Size_Record): Directly\n+\tcheck the dependence on discriminants for the variant part, if\n+\tany, instead of calling the Is_Definite_Subtype predicate.\n+\n+2022-06-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Unreferenced_Entity): Fix warning tag.\n+\n+2022-06-01  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_warn.adb (Check_References): Adjust conditions under which\n+\twarning messages should be emitted and their tags as well.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.ads (Expand_Interface_Thunk): Change type of Prim.\n+\t* exp_disp.adb (Expand_Interface_Thunk): Declare Is_Predef_Op\n+\tearlier, do not initialize Iface_Formal, use No idiom and tweaks\n+\tcomments.\n+\t(Register_Primitive): Declare L earlier and tweak comments.\n+\t* sem_disp.adb (Check_Dispatching_Operation): Move tests out of\n+\tloop.\n+\n+2022-06-01  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.ads: Replace visible Build_Discr_Checking_Funcs (which\n+\tdid not need to be visible - it was not referenced outside this\n+\tpackage) with Build_Or_Copy_Discr_Checking_Funcs.\n+\t* exp_ch3.adb: Refactor existing code into 3 procedures -\n+\tBuild_Discr_Checking_Funcs, Copy_Discr_Checking_Funcs, and\n+\tBuild_Or_Copy_Discr_Checking_Funcs. This refactoring is intended\n+\tto be semantics-preserving.\n+\t* exp_ch4.adb (Expand_N_Selected_Component): Detect case where a\n+\tcall should be generated to the Discriminant_Checking_Func for\n+\tthe component in question, but that subprogram does not yet\n+\texist.\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Immediately before\n+\tcalling Build_Predicate_Function, add a call to\n+\tExp_Ch3.Build_Or_Copy_Discr_Checking_Funcs in order to ensure\n+\tthat Discriminant_Checking_Func attributes are already set when\n+\tBuild_Predicate_Function is called.\n+\t* sem_ch6.adb (Analyze_Expression_Function): If the expression\n+\tof a static expression function has been transformed into an\n+\tN_Raise_xxx_Error node, then we need to copy the original\n+\texpression in order to check the requirement that the expression\n+\tmust be a potentially static expression. We also want to set\n+\taside a copy the untransformed expression for later use in\n+\tchecking calls to the expression function via\n+\tInline_Static_Function_Call.  So introduce a new function,\n+\tMake_Expr_Copy, for use in these situations.\n+\t* sem_res.adb (Preanalyze_And_Resolve): When analyzing certain\n+\texpressions (e.g., a default parameter expression in a\n+\tsubprogram declaration) we want to suppress checks. However, we\n+\tdo not want to suppress checks for the expression of an\n+\texpression function.\n+\n+2022-06-01  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Container): For each\n+\tsubprogram found, assert that the variable is Empty, so we can\n+\tdetect bugs where we find two or more things with the same name.\n+\tWithout this patch, that bug would happen when we add the new\n+\tNext procedure.  For Step, make sure we pick the right one, by\n+\tchecking name and number of parameters.  For Get_Element_Access,\n+\tcheck that we're picking a function.  That's not really\n+\tnecessary, because there is no procedure with that name, but it\n+\tseems cleaner this way.\n+\t* rtsfind.ads: Minor comment improvement. It seems kind of odd\n+\tto say \"under no circumstances\", and then immediately contradict\n+\tthat with \"The one exception is...\".\n+\n+2022-06-01  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (QNX): __gnat_adjust_context_for_raise: New\n+\timplementation for arm-qnx.\n+\n+2022-06-01  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cofuba.ads, libgnat/a-cofuba.adb: Add reference\n+\tcounting.\n+\n+2022-06-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Package): Possibly warn.\n+\t* sem_util.adb (Enter_Name): Factor out warning on hidden entity.\n+\t(Warn_On_Hiding_Entity): Extract warning logic from Enter_Name and\n+\tgeneralize it to be applied also on use_clause.\n+\t* sem_util.ads (Warn_On_Hiding_Entity): Add new procedure.\n+\n+2022-06-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch3.adb (P_Known_Discriminant_Part_Opt): Reword error\n+\tmessage to benefit from existing codefix.\n+\t(P_Record_Definition): Detect out-of-order keywords in record\n+\tdefinition and issue appropriate messages. Other cases are\n+\talready caught at appropriate places.\n+\n+2022-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Freeze_Subprogram.Register_Predefined_DT_Entry): Put\n+\tthe actions into the Actions field of the freeze node instead of\n+\tinserting them after it.\n+\n+2022-06-01  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sinfo.ads: Add inline documention for Is_Parenthesis_Aggregate\n+\tand Is_Enum_Array_Aggregate.\n+\n+2022-06-01  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.adb (Set_Convention): Call Set_Convention\n+\trecursively, so that Set_Can_Use_Internal_Rep is called (if\n+\tappropriate) on the anonymous access type of the object, and its\n+\tdesignated subprogram type.\n+\t* sem_ch3.adb (Access_Definition): Remove redundant call to\n+\tSet_Can_Use_Internal_Rep.\n+\n+2022-06-01  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In): Do not warn in the above-mentioned\n+\tcases.\n+\t* fe.h (Assume_No_Invalid_Values): Remove from fe.h, because\n+\tthis is not used in gigi.\n+\t* opt.ads (Assume_No_Invalid_Values): Improve the comment. We\n+\tdon't need to \"clearly prove\"; we can just \"prove\". Remove the\n+\tcomment about fe.h, which is no longer true.\n+\n 2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n \n \t* erroutc.adb (Get_Warning_Option): Don't consider `?` as a"}, {"sha": "f66381b639941f58c634e17effa5ad8367a01fac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,44 @@\n+2022-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105734\n+\t* parser.cc (cp_parser_postfix_dot_deref_expression): Use typeof\n+\tif the expression has auto type.\n+\n+2022-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105779\n+\t* call.cc (resolve_args): Call mark_single_function here.\n+\t* pt.cc (unify_one_argument): Not here.\n+\n+2022-06-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.cc (fix_temporary_vars_context_r): Use data argument\n+\tfor new context.\n+\t(one_static_initialization_or_destruction): Adjust tree walk\n+\tcall.  Refactor guard generation.\n+\n+2022-06-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.cc (ssdf_decl): Delete global.\n+\t(start_static_storage_duration_function): Use some RAII.\n+\t(do_static_initialization_or_destruction): Likewise.\n+\t(c_parse_final_cleanups): Likewise.  Avoid rechecking 'vars'.\n+\n+2022-06-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.cc (start_objects): Replace 'method_type' parameter\n+\twith 'initp' boolean, rename and retype 'priority' parameter.\n+\t(finish_objects): Likewise.  Do not expand here.\n+\t(one_static_initialization_or_destruction): Move 'initp'\n+\tparameter first.\n+\t(do_static_initialization_or_destruction): Likewise.\n+\t(generate_ctor_or_dtor_function): Rename 'initp' parameter.\n+\tAdjust start_objects/finish_obects calls and expand here.\n+\t(generate_ctor_and_dtor_functions_for_priority): Adjust calls.\n+\t(c_parse_final_cleanups): Likewise.\n+\t(vtv_start_verification_constructor_init): Adjust.\n+\t(vtv_finish_verification_constructor_init): Use finish_objects.\n+\n 2022-05-31  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105758"}, {"sha": "62def2a9270bb10ad9c073f9a68645cc5561d7ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,38 @@\n+2022-06-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR rtl-optimization/105638\n+\t* g++.target/i386/pr105638.C: New test.\n+\n+2022-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105734\n+\t* g++.dg/cpp0x/auto57.C: New test.\n+\n+2022-06-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105779\n+\t* g++.dg/cpp1y/auto-fn63.C: New test.\n+\n+2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30314\n+\t* gcc.dg/tree-ssa/pr30314.c: New test.\n+\n+2022-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105786\n+\t* gcc.dg/torture/pr105786.c: New testcase.\n+\n+2022-06-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105770\n+\t* gcc.dg/pr105770.c: New test.\n+\n+2022-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105763\n+\t* gcc.dg/pr105763.c: New testcase.\n+\n 2022-05-31  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/105758"}, {"sha": "acb4b5667ab8ff6dae5339db05414da4ba2e0aa9", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,8 @@\n+2022-06-01  David Seifert  <soap@gentoo.org>\n+\n+\tPR plugins/95648\n+\t* configure: Regenerate.\n+\n 2021-12-16  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/51577"}, {"sha": "6e858b56a167408643693a41f2eaeb7c9001df8d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3164de6ac1b8473e60f6b85e94b15930694c80d7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3164de6ac1b8473e60f6b85e94b15930694c80d7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3164de6ac1b8473e60f6b85e94b15930694c80d7", "patch": "@@ -1,3 +1,8 @@\n+2022-06-01  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR libgcc/27576\n+\t* crtstuff.c (__EH_FRAME_BEGIN__): Aligned to pointer size.\n+\n 2022-05-25  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \tPR libgcc/105708"}]}