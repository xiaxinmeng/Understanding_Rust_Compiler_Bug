{"sha": "bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4MjhjYzdmMzE1MGVlZTgzYTBmM2Q0ZDI2YTg1ODA2ZDkzZmIwYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-03-05T18:07:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-03-05T18:07:12Z"}, "message": "method.c (synthesized_method_walk): Cleanups don't affect the EH spec either.\n\n\t* method.c (synthesized_method_walk): Cleanups don't affect the EH\n\tspec either.\n\nFrom-SVN: r184945", "tree": {"sha": "bd476b349706604dfb078049fff767d0a2db5e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd476b349706604dfb078049fff767d0a2db5e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3f87aa90913654a711c671568ec5bf9488a4440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f87aa90913654a711c671568ec5bf9488a4440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f87aa90913654a711c671568ec5bf9488a4440"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "71af797f77bed33c76800b51eb3c09d6bb43c004", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "patch": "@@ -1,3 +1,8 @@\n+2012-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* method.c (synthesized_method_walk): Cleanups don't affect the EH\n+\tspec either.\n+\n 2012-03-03  Jason Merrill  <jason@redhat.com>\n \n \t* init.c (perform_member_init): Cope with uninstantiated NSDMI."}, {"sha": "07189168d1ffdafaa8589e3af3a81e3ce1256793", "filename": "gcc/cp/method.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "patch": "@@ -1272,8 +1272,11 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t  rval = locate_fn_flags (base_binfo, complete_dtor_identifier,\n \t\t\t\t  NULL_TREE, flags, complain);\n \t  /* Note that we don't pass down trivial_p; the subobject\n-\t     destructors don't affect triviality of the constructor.  */\n-\t  process_subob_fn (rval, false, spec_p, NULL,\n+\t     destructors don't affect triviality of the constructor.  Nor\n+\t     do they affect constexpr-ness (a constant expression doesn't\n+\t     throw) or exception-specification (a throw from one of the\n+\t     dtors would be a double-fault).  */\n+\t  process_subob_fn (rval, false, NULL, NULL,\n \t\t\t    deleted_p, NULL, NULL,\n \t\t\t    basetype);\n \t}"}, {"sha": "5fbd14fcc8ca70fbe420e8d1d9b7511b1f29834a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "patch": "@@ -1,3 +1,7 @@\n+2012-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/implicit13.C: New.\n+\n 2012-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51721"}, {"sha": "96bc7706040efa84adfa4e570bb253861c6e6fd6", "filename": "gcc/testsuite/g++.dg/cpp0x/implicit13.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb828cc7f3150eee83a0f3d4d26a85806d93fb0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fimplicit13.C?ref=bb828cc7f3150eee83a0f3d4d26a85806d93fb0c", "patch": "@@ -0,0 +1,24 @@\n+// Make sure that A's destructor doesn't affect constexpr\n+// or exception-spec on D's default constructor.\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  constexpr A() noexcept: i(0) { }\n+  int i;\n+  ~A() noexcept(false);\n+};\n+\n+struct B: A { };\n+\n+// Should get static initialization, so no constructor call.\n+// { dg-final { scan-assembler-not \"_ZN1BC1Ev\" } }\n+B b;\n+\n+struct C { C() noexcept; ~C(); };\n+struct D: C { };\n+extern D d;\n+\n+void *operator new(__SIZE_TYPE__, void*) noexcept;\n+\n+#define SA(X) static_assert((X),#X)\n+SA(noexcept(new (&d) D));"}]}