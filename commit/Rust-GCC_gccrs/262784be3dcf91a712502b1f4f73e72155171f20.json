{"sha": "262784be3dcf91a712502b1f4f73e72155171f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyNzg0YmUzZGNmOTFhNzEyNTAyYjFmNGY3M2U3MjE1NTE3MWYyMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T19:10:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-11T19:15:30Z"}, "message": "c++: Final module preparations\n\nThis adds the final few preparations to drop modules in.  I'd missed a\ncouple of changes to core compiler -- a new pair of preprocessor\noptions, and marking the boundary of fixed and lazy global trees.\n\nFor C++, we need to add module.cc to the GTY scanner.  Parsing final\ncleanups needs a few tweaks for modules.  Lambdas used to initialize a\nglobal (for instance) get an extra scope, but we now need to point\nthat object to the lambda too.  Finally template instantiation needs\nto do lazy loading before looking at the available instantiations and\nspecializations.\n\n\tgcc/\n\t* gcc.c (cpp_unique_options): Add Mmodules, Mno-modules.\n\t* tree-core.h (enum tree_index): Add TI_MODULE_HWM.\n\tgcc/cp/\n\t* config-lang.in (gtfiles): Add cp/module.cc.\n\t* decl2.c (c_parse_final_cleanups): Add module support.\n\t* lambda.c (record_lambda_scope): Call maybe_attach_decl.\n\t* module.cc (maybe_attach_decl, lazy_load_specializations): Stubs.\n\t(finish_module_procesing): Stub.\n\t* pt.c (lookup_template_class_1): Lazy load specializations.\n\t(instantiate_template_1): Likewise.", "tree": {"sha": "14271ae9e3e5bc5af0dc299565c458b7627cd6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14271ae9e3e5bc5af0dc299565c458b7627cd6d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/262784be3dcf91a712502b1f4f73e72155171f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262784be3dcf91a712502b1f4f73e72155171f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262784be3dcf91a712502b1f4f73e72155171f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262784be3dcf91a712502b1f4f73e72155171f20/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02fc65c7263c75d222758d6c652b83e543872edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02fc65c7263c75d222758d6c652b83e543872edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02fc65c7263c75d222758d6c652b83e543872edf"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "4f5f8eca130084572c60c44b8fdd4ffd40ad4520", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -47,7 +47,7 @@ gtfiles=\"\\\n \\$(srcdir)/cp/friend.c \\\n \\$(srcdir)/cp/init.c \\\n \\$(srcdir)/cp/lambda.c \\$(srcdir)/cp/lex.c \\$(srcdir)/cp/logic.cc \\\n-\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/method.c \\\n+\\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/method.c \\$(srcdir)/cp/module.cc \\\n \\$(srcdir)/cp/name-lookup.c \\\n \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/pt.c \\\n \\$(srcdir)/cp/rtti.c \\"}, {"sha": "6d8158a66f046594a85b120dfeec09ab37765393", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -4964,6 +4964,11 @@ c_parse_final_cleanups (void)\n       instantiate_pending_templates (retries);\n       ggc_collect ();\n \n+      if (header_module_p ())\n+\t/* A header modules initializations are handled in its\n+\t   importer.  */\n+\tcontinue;\n+\n       /* Write out virtual tables as required.  Writing out the\n \t virtual table for a template class may cause the\n \t instantiation of members of that class.  If we write out\n@@ -5162,6 +5167,8 @@ c_parse_final_cleanups (void)\n \treconsider = true;\n     }\n \n+  finish_module_processing (parse_in);\n+\n   lower_var_init ();\n \n   generate_mangling_aliases ();\n@@ -5177,6 +5184,10 @@ c_parse_final_cleanups (void)\n \t     #pragma interface, etc.) we decided not to emit the\n \t     definition here.  */\n \t  && !DECL_INITIAL (decl)\n+\t  /* A defaulted fn in a header module can be synthesized on\n+\t     demand later.  (In non-header modules we should have\n+\t     synthesized it above.)  */\n+\t  && !(DECL_DEFAULTED_FN (decl) && header_module_p ())\n \t  /* Don't complain if the template was defined.  */\n \t  && !(DECL_TEMPLATE_INSTANTIATION (decl)\n \t       && DECL_INITIAL (DECL_TEMPLATE_RESULT\n@@ -5210,9 +5221,8 @@ c_parse_final_cleanups (void)\n     splay_tree_foreach (priority_info_map,\n \t\t\tgenerate_ctor_and_dtor_functions_for_priority,\n \t\t\t/*data=*/&locus_at_end_of_parsing);\n-  else if (c_dialect_objc () && objc_static_init_needed_p ())\n-    /* If this is obj-c++ and we need a static init, call\n-       generate_ctor_or_dtor_function.  */\n+  else if ((c_dialect_objc () && objc_static_init_needed_p ())\n+\t   || module_initializer_kind ())\n     generate_ctor_or_dtor_function (/*constructor_p=*/true,\n \t\t\t\t    DEFAULT_INIT_PRIORITY,\n \t\t\t\t    &locus_at_end_of_parsing);"}, {"sha": "f6746d7304be70920dcc01b56dbf53709e47560f", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -1114,6 +1114,8 @@ maybe_add_lambda_conv_op (tree type)\n     while (src)\n       {\n \ttree new_node = copy_node (src);\n+\t/* We set DECL_CONTEXT of NEW_NODE to the statfn below.\n+\t   Notice this is creating a recursive type!  */\n \n \t/* Clear TREE_ADDRESSABLE on thunk arguments.  */\n \tTREE_ADDRESSABLE (new_node) = 0;\n@@ -1393,6 +1395,12 @@ record_lambda_scope (tree lambda)\n {\n   LAMBDA_EXPR_EXTRA_SCOPE (lambda) = lambda_scope;\n   LAMBDA_EXPR_DISCRIMINATOR (lambda) = lambda_count++;\n+  if (lambda_scope)\n+    {\n+      tree closure = LAMBDA_EXPR_CLOSURE (lambda);\n+      gcc_checking_assert (closure);\n+      maybe_attach_decl (lambda_scope, TYPE_NAME (closure));\n+    }\n }\n \n /* This lambda is an instantiation of a lambda in a template default argument"}, {"sha": "d8012d75ca4a3d3bb6474c9f9b5e90d38161e0d1", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -154,11 +154,21 @@ set_originating_module (tree, bool)\n {\n }\n \n+void\n+maybe_attach_decl (tree, tree)\n+{\n+}\n+\n void\n lazy_load_binding (unsigned, tree, tree, binding_slot *)\n {\n }\n \n+void\n+lazy_load_specializations (tree)\n+{\n+}\n+\n void\n lazy_load_members (tree)\n {\n@@ -216,6 +226,11 @@ maybe_check_all_macros (cpp_reader *)\n {\n }\n \n+void\n+finish_module_processing (cpp_reader *)\n+{\n+}\n+\n void\n fini_modules ()\n {"}, {"sha": "e5f18d23ea06c26898dce76ad3b16ad0d785e98c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -9788,6 +9788,15 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \treturn error_mark_node;\n \n       gen_tmpl = most_general_template (templ);\n+      if (modules_p ())\n+\t{\n+\t  tree origin = get_originating_module_decl (gen_tmpl);\n+\t  load_pending_specializations (CP_DECL_CONTEXT (origin),\n+\t\t\t\t\tDECL_NAME (origin));\n+\t  if (DECL_MODULE_PENDING_SPECIALIZATIONS_P (gen_tmpl))\n+\t    lazy_load_specializations (gen_tmpl);\n+\t}\n+\n       parmlist = DECL_TEMPLATE_PARMS (gen_tmpl);\n       parm_depth = TMPL_PARMS_DEPTH (parmlist);\n       arg_depth = TMPL_ARGS_DEPTH (arglist);\n@@ -20907,6 +20916,15 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \t\t(DECL_TI_ARGS (DECL_TEMPLATE_RESULT (tmpl)),\n \t\t targ_ptr));\n \n+  if (modules_p ())\n+    {\n+      tree origin = get_originating_module_decl (gen_tmpl);\n+      load_pending_specializations (CP_DECL_CONTEXT (origin),\n+\t\t\t\t    DECL_NAME (origin));\n+      if (DECL_MODULE_PENDING_SPECIALIZATIONS_P (gen_tmpl))\n+\tlazy_load_specializations (gen_tmpl);\n+    }\n+\n   /* It would be nice to avoid hashing here and then again in tsubst_decl,\n      but it doesn't seem to be on the hot path.  */\n   spec = retrieve_specialization (gen_tmpl, targ_ptr, 0);"}, {"sha": "d179de7d97f3fe1eac1ef55050890d9ce715b094", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -1232,6 +1232,7 @@ static const char *cpp_unique_options =\n  %{MD:-MD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n+ %{Mmodules} %{Mno-modules}\\\n  %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}}\\\n  %{remap} %{%:debug-level-gt(2):-dD}\\\n  %{!iplugindir*:%{fplugin*:%:find-plugindir()}}\\"}, {"sha": "a89f063ab55a748551802092c627c10324354473", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262784be3dcf91a712502b1f4f73e72155171f20/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=262784be3dcf91a712502b1f4f73e72155171f20", "patch": "@@ -773,6 +773,10 @@ enum tree_index {\n   TI_SAT_UDA_TYPE,\n   TI_SAT_UTA_TYPE,\n \n+  TI_MODULE_HWM,\n+  /* Nodes below here change during compilation, and should therefore\n+     not be in the C++ module's global tree table.  */\n+\n   TI_OPTIMIZATION_DEFAULT,\n   TI_OPTIMIZATION_CURRENT,\n   TI_TARGET_OPTION_DEFAULT,"}]}