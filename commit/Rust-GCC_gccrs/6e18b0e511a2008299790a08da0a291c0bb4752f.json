{"sha": "6e18b0e511a2008299790a08da0a291c0bb4752f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxOGIwZTUxMWEyMDA4Mjk5NzkwYTA4ZGEwYTI5MWMwYmI0NzUyZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T07:56:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:56:02Z"}, "message": "opt.ads, opt.adb: Add new switches Debug_Pragmas_Enabled[_Config]\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads, opt.adb: Add new switches Debug_Pragmas_Enabled[_Config]\n\n\t* par-prag.adb: Implement new pragma Debug_Policy\n\n\t* sem_prag.adb Implement new pragma Debug_Policy\n\t(Analyze_Pragma, case Pack): do not let pragma Pack override an explicit\n\tComponent_Size attribute specification. Give warning for ignored pragma\n\tPack.\n\n\t* snames.h, snames.ads, snames.adb: Introduce entries in\n\tPreset_Names for Name_Disp_Asynchronous_Select,\n\tName_Disp_Conditional_Select, Name_Disp_Get_Prim_Op_Kind,\n\tName_Disp_Timed_Select.\n\tNew pragma Debug_Policy\n\n\t* switch-c.adb (Scan_Front_End_Switches): Set Ada 2005 mode\n\texplicitly.\n\tSwitch -gnata also sets Debug_Pragmas_Enabled\n\n\t* sem.adb, par.adb (Set_Opt_Config_Switch): Add parameter Main_Unit to\n\thandle an explicit -gnata when compiling predefined files.\n\nFrom-SVN: r103873", "tree": {"sha": "b5b30756f1f19c01bed62b9b9fef8126093e6cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b30756f1f19c01bed62b9b9fef8126093e6cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e18b0e511a2008299790a08da0a291c0bb4752f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e18b0e511a2008299790a08da0a291c0bb4752f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e18b0e511a2008299790a08da0a291c0bb4752f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e18b0e511a2008299790a08da0a291c0bb4752f/comments", "author": null, "committer": null, "parents": [{"sha": "1b3b0f45a4a159b3c204749377e15b1b3dda0fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3b0f45a4a159b3c204749377e15b1b3dda0fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3b0f45a4a159b3c204749377e15b1b3dda0fab"}], "stats": {"total": 1779, "additions": 923, "deletions": 856}, "files": [{"sha": "576c0d85ecad7a583185a19e7f4b9f975acdfa64", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -31,7 +31,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Gnatvsn; use Gnatvsn;\n with System;  use System;\n with Tree_IO; use Tree_IO;\n \n@@ -52,6 +51,7 @@ package body Opt is\n       Ada_Version_Config                    := Ada_Version;\n       Ada_Version_Explicit_Config           := Ada_Version_Explicit;\n       Assertions_Enabled_Config             := Assertions_Enabled;\n+      Debug_Pragmas_Enabled_Config          := Debug_Pragmas_Enabled;\n       Dynamic_Elaboration_Checks_Config     := Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed_Config := Exception_Locations_Suppressed;\n       Extensions_Allowed_Config             := Extensions_Allowed;\n@@ -71,6 +71,7 @@ package body Opt is\n       Ada_Version                    := Save.Ada_Version;\n       Ada_Version_Explicit           := Save.Ada_Version_Explicit;\n       Assertions_Enabled             := Save.Assertions_Enabled;\n+      Debug_Pragmas_Enabled          := Save.Debug_Pragmas_Enabled;\n       Dynamic_Elaboration_Checks     := Save.Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed := Save.Exception_Locations_Suppressed;\n       Extensions_Allowed             := Save.Extensions_Allowed;\n@@ -90,6 +91,7 @@ package body Opt is\n       Save.Ada_Version                    := Ada_Version;\n       Save.Ada_Version_Explicit           := Ada_Version_Explicit;\n       Save.Assertions_Enabled             := Assertions_Enabled;\n+      Save.Debug_Pragmas_Enabled          := Debug_Pragmas_Enabled;\n       Save.Dynamic_Elaboration_Checks     := Dynamic_Elaboration_Checks;\n       Save.Exception_Locations_Suppressed := Exception_Locations_Suppressed;\n       Save.Extensions_Allowed             := Extensions_Allowed;\n@@ -104,21 +106,39 @@ package body Opt is\n    -- Set_Opt_Config_Switches --\n    -----------------------------\n \n-   procedure Set_Opt_Config_Switches (Internal_Unit : Boolean) is\n+   procedure Set_Opt_Config_Switches\n+     (Internal_Unit : Boolean;\n+      Main_Unit     : Boolean)\n+   is\n    begin\n+      --  Case of internal unit\n+\n       if Internal_Unit then\n          Ada_Version                := Ada_Version_Runtime;\n-         Assertions_Enabled         := False;\n          Dynamic_Elaboration_Checks := False;\n          Extensions_Allowed         := True;\n          External_Name_Exp_Casing   := As_Is;\n          External_Name_Imp_Casing   := Lowercase;\n          Persistent_BSS_Mode        := False;\n          Use_VADS_Size              := False;\n \n+         --  For an internal unit, assertions/debug pragmas are off unless this\n+         --  is the main unit and they were explicitly enabled.\n+\n+         if Main_Unit then\n+            Assertions_Enabled := Assertions_Enabled_Config;\n+            Debug_Pragmas_Enabled := Debug_Pragmas_Enabled_Config;\n+         else\n+            Assertions_Enabled := False;\n+            Debug_Pragmas_Enabled := False;\n+         end if;\n+\n+      --  Case of non-internal unit\n+\n       else\n          Ada_Version                := Ada_Version_Config;\n          Assertions_Enabled         := Assertions_Enabled_Config;\n+         Debug_Pragmas_Enabled      := Debug_Pragmas_Enabled_Config;\n          Dynamic_Elaboration_Checks := Dynamic_Elaboration_Checks_Config;\n          Extensions_Allowed         := Extensions_Allowed_Config;\n          External_Name_Exp_Casing   := External_Name_Exp_Casing_Config;\n@@ -158,6 +178,7 @@ package body Opt is\n       Tree_Read_Int  (Assertions_Enabled_Config_Val);\n       Tree_Read_Bool (All_Errors_Mode);\n       Tree_Read_Bool (Assertions_Enabled);\n+      Tree_Read_Bool (Debug_Pragmas_Enabled);\n       Tree_Read_Bool (Enable_Overflow_Checks);\n       Tree_Read_Bool (Full_List);\n \n@@ -226,6 +247,7 @@ package body Opt is\n       Tree_Write_Int  (Boolean'Pos (Assertions_Enabled_Config));\n       Tree_Write_Bool (All_Errors_Mode);\n       Tree_Write_Bool (Assertions_Enabled);\n+      Tree_Write_Bool (Debug_Pragmas_Enabled);\n       Tree_Write_Bool (Enable_Overflow_Checks);\n       Tree_Write_Bool (Full_List);\n       Tree_Write_Int  (Int (Version_String'Length));"}, {"sha": "d0b1d431bfa8dff40c402b8e9af08a66bf3b7e0c", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -272,6 +272,10 @@ package Opt is\n    --  Set to True (-C switch) to indicate that gnatmake will invoke\n    --  the compiler with a mapping file (-gnatem compiler switch).\n \n+   Debug_Pragmas_Enabled : Boolean := False;\n+   --  GNAT\n+   --  Enable debug statements from pragma Debug\n+\n    subtype Debug_Level_Value is Nat range 0 .. 3;\n    Debugger_Level : Debug_Level_Value := 0;\n    --  GNATBIND\n@@ -367,31 +371,19 @@ package Opt is\n       --  the code generator). AT END handlers are converted into\n       --  exception handlers by the front end in this mode.\n \n-      Front_End_ZCX_Exceptions,\n-      --  Exceptions use the zero cost table mechanism with explicit\n-      --  tables and exception regions generated by the front end.\n-      --  AT END handlers are converted into exception handlers by\n-      --  the front end in this mode.\n-\n-      Back_End_ZCX_Exceptions);\n+      Back_End_Exceptions);\n       --  Exceptions are handled by the back end. The front end simply\n       --  generates the handlers as they appear in the source, and AT\n       --  END handlers are left untouched (they are not converted into\n-      --  exception handlers when operating in this mode. Note that the\n-      --  name includes ZCX, since the expectation is that the back end\n-      --  mechanism will in fact be a ZCX approach, but nothing in the\n-      --  compiler depends on this, so for example if GNAT is run with\n-      --  a version of GCC configured for setjmp/longjmp exception handling,\n-      --  then everything will work fine.\n+      --  exception handlers when operating in this mode.\n    pragma Convention (C, Exception_Mechanism_Type);\n \n    Exception_Mechanism : Exception_Mechanism_Type :=\n                            Front_End_Setjmp_Longjmp_Exceptions;\n    --  GNAT\n    --  Set to the appropriate value depending on the default as given in\n-   --  system.ads (ZCX_By_Default, GCC_ZCX_Support, Front_End_ZCX_Support) and\n-   --  the use of -gnatL -gnatZ (and -gnatdX). The C convention is there to\n-   --  make this variable accessible to gigi.\n+   --  system.ads (ZCX_By_Default, GCC_ZCX_Support).\n+   --  The C convention is there to make this variable accessible to gigi.\n \n    Exception_Tracebacks : Boolean := False;\n    --  GNATBIND\n@@ -1122,14 +1114,6 @@ package Opt is\n    --  GNAT\n    --  Set if cross-referencing is enabled (i.e. xref info in ALI files)\n \n-   Zero_Cost_Exceptions_Val : Boolean;\n-   Zero_Cost_Exceptions_Set : Boolean := False;\n-   --  GNAT\n-   --  These values are to record the setting of the zero cost exception\n-   --  handling mode set by argument switches (-gnatZ/-gnatL). If the value is\n-   --  set by one of these switches, then Zero_Cost_Exceptions_Set is set to\n-   --  True, and Zero_Cost_Exceptions_Val indicates the setting.\n-\n    ----------------------------\n    -- Configuration Settings --\n    ----------------------------\n@@ -1160,6 +1144,12 @@ package Opt is\n    --  mode, as possibly set by the command line switch -gnata, and possibly\n    --  modified by the use of the configuration pragma Assertion_Policy.\n \n+   Debug_Pragmas_Enabled_Config : Boolean;\n+   --  GNAT\n+   --  This is the value of the configuration switch for debug pragmas enabled\n+   --  mode, as possibly set by the command line switch -gnata and possibly\n+   --  modified by the use of the configuration pragma Debug_Policy.\n+\n    Dynamic_Elaboration_Checks_Config : Boolean := False;\n    --  GNAT\n    --  Set True for dynamic elaboration checking mode, as set by the -gnatE\n@@ -1234,10 +1224,16 @@ package Opt is\n    --  initialized from the above Config values, and then resets these switches\n    --  according to the Config value settings.\n \n-   procedure Set_Opt_Config_Switches (Internal_Unit : Boolean);\n+   procedure Set_Opt_Config_Switches\n+     (Internal_Unit : Boolean;\n+      Main_Unit     : Boolean);\n    --  This procedure sets the switches to the appropriate initial values. The\n    --  parameter Internal_Unit is True for an internal or predefined unit, and\n-   --  affects the way the switches are set (see above).\n+   --  affects the way the switches are set (see above). Main_Unit is true if\n+   --  switches are being set for the main unit (this affects setting of the\n+   --  assert/debug pragm switches, which are normally set false by default for\n+   --  an internal unit, except when the internal unit is the main unit, in\n+   --  which case we use the command line settings).\n \n    procedure Restore_Opt_Config_Switches (Save : Config_Switches_Type);\n    --  This procedure restores a set of switch values previously saved by a\n@@ -1302,6 +1298,7 @@ private\n       Ada_Version                    : Ada_Version_Type;\n       Ada_Version_Explicit           : Ada_Version_Type;\n       Assertions_Enabled             : Boolean;\n+      Debug_Pragmas_Enabled          : Boolean;\n       Dynamic_Elaboration_Checks     : Boolean;\n       Exception_Locations_Suppressed : Boolean;\n       Extensions_Allowed             : Boolean;"}, {"sha": "097ddd0caf342a539d09dc6b1ee23fa2adaabe0a", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -1011,6 +1011,7 @@ begin\n            Pragma_Component_Alignment          |\n            Pragma_Controlled                   |\n            Pragma_Convention                   |\n+           Pragma_Debug_Policy                 |\n            Pragma_Detect_Blocking              |\n            Pragma_Discard_Names                |\n            Pragma_Eliminate                    |"}, {"sha": "86fa50fe8c19c8d825444e7d32d08eb33a66cdfb", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -1275,7 +1275,8 @@ begin\n \n       for Ucount in Pos loop\n          Set_Opt_Config_Switches\n-           (Is_Internal_File_Name (File_Name (Current_Source_File)));\n+           (Is_Internal_File_Name (File_Name (Current_Source_File)),\n+            Current_Source_Unit = Main_Unit);\n \n          --  Initialize scope table and other parser control variables\n "}, {"sha": "36afe180caa8a2683b66783334f44dc3bb700a14", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -27,15 +27,13 @@\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Debug_A;  use Debug_A;\n-with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Expander; use Expander;\n with Fname;    use Fname;\n with HLO;      use HLO;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Nlists;   use Nlists;\n-with Opt;      use Opt;\n with Sem_Attr; use Sem_Attr;\n with Sem_Ch2;  use Sem_Ch2;\n with Sem_Ch3;  use Sem_Ch3;\n@@ -1299,7 +1297,8 @@ package body Sem is\n       Set_Comes_From_Source_Default (False);\n       Save_Opt_Config_Switches (Save_Config_Switches);\n       Set_Opt_Config_Switches\n-        (Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit)));\n+        (Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit)),\n+         Current_Sem_Unit = Main_Unit);\n \n       --  Only do analysis of unit that has not already been analyzed\n "}, {"sha": "29233a4f7ca6541863b7a28fbbc145c0996a29a2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 50, "deletions": 18, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -5571,12 +5571,24 @@ package body Sem_Prag is\n \n             Rewrite (N, Make_Implicit_If_Statement (N,\n               Condition => New_Occurrence_Of (Boolean_Literals (\n-                Assertions_Enabled and Expander_Active), Loc),\n+                Debug_Pragmas_Enabled and Expander_Active), Loc),\n               Then_Statements => New_List (\n                 Relocate_Node (Debug_Statement (N)))));\n             Analyze (N);\n          end Debug;\n \n+         ------------------\n+         -- Debug_Policy --\n+         ------------------\n+\n+         --  pragma Debug_Policy (Check | Ignore)\n+\n+         when Pragma_Debug_Policy =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Arg_Is_One_Of (Arg1, Name_Check, Name_Ignore);\n+            Debug_Pragmas_Enabled := Chars (Expression (Arg1)) = Name_Check;\n+\n          ---------------------\n          -- Detect_Blocking --\n          ---------------------\n@@ -6519,7 +6531,9 @@ package body Sem_Prag is\n          -- Float_Representation --\n          --------------------------\n \n-         --  pragma Float_Representation (VAX_Float | IEEE_Float);\n+         --  pragma Float_Representation (FLOAT_REP[, float_type_LOCAL_NAME]);\n+\n+         --  FLOAT_REP ::= VAX_Float | IEEE_Float\n \n          when Pragma_Float_Representation => Float_Representation : declare\n             Argx : Node_Id;\n@@ -6552,9 +6566,7 @@ package body Sem_Prag is\n             --  One argument case\n \n             if Arg_Count = 1 then\n-\n                if Chars (Expression (Arg1)) = Name_VAX_Float then\n-\n                   if Opt.Float_Format = 'I' then\n                      Error_Pragma (\"'I'E'E'E format previously specified\");\n                   end if;\n@@ -6590,7 +6602,6 @@ package body Sem_Prag is\n                --  Two arguments, VAX_Float case\n \n                if Chars (Expression (Arg1)) = Name_VAX_Float then\n-\n                   case Digs is\n                      when  6 => Set_F_Float (Ent);\n                      when  9 => Set_D_Float (Ent);\n@@ -8091,6 +8102,8 @@ package body Sem_Prag is\n          -- No_Strict_Aliasing --\n          ------------------------\n \n+         --  pragma No_Strict_Aliasing [([Entity =>] type_LOCAL_NAME)];\n+\n          when Pragma_No_Strict_Aliasing => No_Strict_Alias : declare\n             E_Id : Entity_Id;\n \n@@ -8324,15 +8337,12 @@ package body Sem_Prag is\n             if Has_Pragma_Pack (Typ) then\n                Error_Pragma (\"duplicate pragma%, only one allowed\");\n \n-            --  Array type. We set the Has_Pragma_Pack flag, and Is_Packed,\n-            --  but not Has_Non_Standard_Rep, because we don't actually know\n-            --  till freeze time if the array can have packed representation.\n-            --  That's because in the general case we do not know enough about\n-            --  the component type until it in turn is frozen, which certainly\n-            --  happens before the array type is frozen, but not necessarily\n-            --  till that point (i.e. right now it may be unfrozen).\n+            --  Array type\n \n             elsif Is_Array_Type (Typ) then\n+\n+               --  Pack not allowed for aliased or atomic components\n+\n                if Has_Aliased_Components (Base_Type (Typ)) then\n                   Error_Pragma\n                     (\"pragma% ignored, cannot pack aliased components?\");\n@@ -8341,15 +8351,36 @@ package body Sem_Prag is\n                  or else Is_Atomic (Component_Type (Typ))\n                then\n                   Error_Pragma\n-                    (\"?pragma% ignored, cannot pack atomic components\");\n+                       (\"?pragma% ignored, cannot pack atomic components\");\n+               end if;\n \n-               elsif not Rep_Item_Too_Late (Typ, N) then\n-                  Set_Is_Packed            (Base_Type (Typ));\n-                  Set_Has_Pragma_Pack      (Base_Type (Typ));\n-                  Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+               --  If we had an explicit component size given, then we do not\n+               --  let Pack override this given size. We also give a warning\n+               --  that Pack is being ignored unless we can tell for sure that\n+               --  the Pack would not have had any effect anyway.\n+\n+               if Has_Component_Size_Clause (Typ) then\n+                  if Known_Static_RM_Size (Component_Type (Typ))\n+                    and then\n+                      RM_Size (Component_Type (Typ)) = Component_Size (Typ)\n+                  then\n+                     null;\n+                  else\n+                     Error_Pragma\n+                       (\"?pragma% ignored, explicit component size given\");\n+                  end if;\n+\n+               --  If no prior array component size given, Pack is effective\n+\n+               else\n+                  if not Rep_Item_Too_Late (Typ, N) then\n+                     Set_Is_Packed            (Base_Type (Typ));\n+                     Set_Has_Pragma_Pack      (Base_Type (Typ));\n+                     Set_Has_Non_Standard_Rep (Base_Type (Typ));\n+                  end if;\n                end if;\n \n-            --  Record type. For record types, the pack is always effective\n+            --  For record types, the pack is always effective\n \n             else pragma Assert (Is_Record_Type (Typ));\n                if not Rep_Item_Too_Late (Typ, N) then\n@@ -10563,6 +10594,7 @@ package body Sem_Prag is\n       Pragma_Convention                   =>  0,\n       Pragma_Convention_Identifier        =>  0,\n       Pragma_Debug                        => -1,\n+      Pragma_Debug_Policy                 =>  0,\n       Pragma_Detect_Blocking              => -1,\n       Pragma_Discard_Names                =>  0,\n       Pragma_Elaborate                    => -1,"}, {"sha": "4993c64c83d07275e33baf5ce2b769a74843c5c6", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -89,6 +89,10 @@ package body Snames is\n      \"_task_info#\" &\n      \"_task_name#\" &\n      \"_trace_sp#\" &\n+     \"_disp_asynchronous_select#\" &\n+     \"_disp_conditional_select#\" &\n+     \"_disp_get_prim_op_kind#\" &\n+     \"_disp_timed_select#\" &\n      \"initialize#\" &\n      \"adjust#\" &\n      \"finalize#\" &\n@@ -174,6 +178,7 @@ package body Snames is\n      \"compile_time_warning#\" &\n      \"component_alignment#\" &\n      \"convention_identifier#\" &\n+     \"debug_policy#\" &\n      \"detect_blocking#\" &\n      \"discard_names#\" &\n      \"elaboration_checks#\" &"}, {"sha": "6cdb34433eab657230c073b51af18f9a8964de98", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 662, "deletions": 652, "changes": 1314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -173,127 +173,135 @@ package Snames is\n    Name_uTask_Name                     : constant Name_Id := N + 030;\n    Name_uTrace_Sp                      : constant Name_Id := N + 031;\n \n+   --  Names of routines used in the expansion of asynchronous, conditional\n+   --  and timed dispatching selects.\n+\n+   Name_uDisp_Asynchronous_Select      : constant Name_Id := N + 032;\n+   Name_uDisp_Conditional_Select       : constant Name_Id := N + 033;\n+   Name_uDisp_Get_Prim_Op_Kind         : constant Name_Id := N + 034;\n+   Name_uDisp_Timed_Select             : constant Name_Id := N + 035;\n+\n    --  Names of routines in Ada.Finalization, needed by expander\n \n-   Name_Initialize                     : constant Name_Id := N + 032;\n-   Name_Adjust                         : constant Name_Id := N + 033;\n-   Name_Finalize                       : constant Name_Id := N + 034;\n+   Name_Initialize                     : constant Name_Id := N + 036;\n+   Name_Adjust                         : constant Name_Id := N + 037;\n+   Name_Finalize                       : constant Name_Id := N + 038;\n \n    --  Names of fields declared in System.Finalization_Implementation,\n    --  needed by the expander when generating code for finalization.\n \n-   Name_Next                           : constant Name_Id := N + 035;\n-   Name_Prev                           : constant Name_Id := N + 036;\n+   Name_Next                           : constant Name_Id := N + 039;\n+   Name_Prev                           : constant Name_Id := N + 040;\n \n    --  Names of TSS routines for implementation of DSA over PolyORB\n \n-   Name_uTypeCode                      : constant Name_Id := N + 037;\n-   Name_uFrom_Any                      : constant Name_Id := N + 038;\n-   Name_uTo_Any                        : constant Name_Id := N + 039;\n+   Name_uTypeCode                      : constant Name_Id := N + 041;\n+   Name_uFrom_Any                      : constant Name_Id := N + 042;\n+   Name_uTo_Any                        : constant Name_Id := N + 043;\n \n    --  Names of allocation routines, also needed by expander\n \n-   Name_Allocate                       : constant Name_Id := N + 040;\n-   Name_Deallocate                     : constant Name_Id := N + 041;\n-   Name_Dereference                    : constant Name_Id := N + 042;\n+   Name_Allocate                       : constant Name_Id := N + 044;\n+   Name_Deallocate                     : constant Name_Id := N + 045;\n+   Name_Dereference                    : constant Name_Id := N + 046;\n \n    --  Names of Text_IO generic subpackages (see Rtsfind.Text_IO_Kludge)\n \n-   First_Text_IO_Package               : constant Name_Id := N + 043;\n-   Name_Decimal_IO                     : constant Name_Id := N + 043;\n-   Name_Enumeration_IO                 : constant Name_Id := N + 044;\n-   Name_Fixed_IO                       : constant Name_Id := N + 045;\n-   Name_Float_IO                       : constant Name_Id := N + 046;\n-   Name_Integer_IO                     : constant Name_Id := N + 047;\n-   Name_Modular_IO                     : constant Name_Id := N + 048;\n-   Last_Text_IO_Package                : constant Name_Id := N + 048;\n+   First_Text_IO_Package               : constant Name_Id := N + 047;\n+   Name_Decimal_IO                     : constant Name_Id := N + 047;\n+   Name_Enumeration_IO                 : constant Name_Id := N + 048;\n+   Name_Fixed_IO                       : constant Name_Id := N + 049;\n+   Name_Float_IO                       : constant Name_Id := N + 050;\n+   Name_Integer_IO                     : constant Name_Id := N + 051;\n+   Name_Modular_IO                     : constant Name_Id := N + 052;\n+   Last_Text_IO_Package                : constant Name_Id := N + 052;\n \n    subtype Text_IO_Package_Name is Name_Id\n      range First_Text_IO_Package .. Last_Text_IO_Package;\n \n    --  Some miscellaneous names used for error detection/recovery\n \n-   Name_Const                          : constant Name_Id := N + 049;\n-   Name_Error                          : constant Name_Id := N + 050;\n-   Name_Go                             : constant Name_Id := N + 051;\n-   Name_Put                            : constant Name_Id := N + 052;\n-   Name_Put_Line                       : constant Name_Id := N + 053;\n-   Name_To                             : constant Name_Id := N + 054;\n+   Name_Const                          : constant Name_Id := N + 053;\n+   Name_Error                          : constant Name_Id := N + 054;\n+   Name_Go                             : constant Name_Id := N + 055;\n+   Name_Put                            : constant Name_Id := N + 056;\n+   Name_Put_Line                       : constant Name_Id := N + 057;\n+   Name_To                             : constant Name_Id := N + 058;\n \n    --  Names for packages that are treated specially by the compiler\n \n-   Name_Finalization                   : constant Name_Id := N + 055;\n-   Name_Finalization_Root              : constant Name_Id := N + 056;\n-   Name_Interfaces                     : constant Name_Id := N + 057;\n-   Name_Standard                       : constant Name_Id := N + 058;\n-   Name_System                         : constant Name_Id := N + 059;\n-   Name_Text_IO                        : constant Name_Id := N + 060;\n-   Name_Wide_Text_IO                   : constant Name_Id := N + 061;\n-   Name_Wide_Wide_Text_IO              : constant Name_Id := N + 062;\n+   Name_Finalization                   : constant Name_Id := N + 059;\n+   Name_Finalization_Root              : constant Name_Id := N + 060;\n+   Name_Interfaces                     : constant Name_Id := N + 061;\n+   Name_Standard                       : constant Name_Id := N + 062;\n+   Name_System                         : constant Name_Id := N + 063;\n+   Name_Text_IO                        : constant Name_Id := N + 064;\n+   Name_Wide_Text_IO                   : constant Name_Id := N + 065;\n+   Name_Wide_Wide_Text_IO              : constant Name_Id := N + 066;\n \n    --  Names of implementations of the distributed systems annex\n \n-   First_PCS_Name                      : constant Name_Id := N + 063;\n-   Name_No_DSA                         : constant Name_Id := N + 063;\n-   Name_GARLIC_DSA                     : constant Name_Id := N + 064;\n-   Name_PolyORB_DSA                    : constant Name_Id := N + 065;\n-   Last_PCS_Name                       : constant Name_Id := N + 065;\n+   First_PCS_Name                      : constant Name_Id := N + 067;\n+   Name_No_DSA                         : constant Name_Id := N + 067;\n+   Name_GARLIC_DSA                     : constant Name_Id := N + 068;\n+   Name_PolyORB_DSA                    : constant Name_Id := N + 069;\n+   Last_PCS_Name                       : constant Name_Id := N + 069;\n \n    subtype PCS_Names is Name_Id\n      range First_PCS_Name .. Last_PCS_Name;\n \n    --  Names of identifiers used in expanding distribution stubs\n \n-   Name_Addr                           : constant Name_Id := N + 066;\n-   Name_Async                          : constant Name_Id := N + 067;\n-   Name_Get_Active_Partition_ID        : constant Name_Id := N + 068;\n-   Name_Get_RCI_Package_Receiver       : constant Name_Id := N + 069;\n-   Name_Get_RCI_Package_Ref            : constant Name_Id := N + 070;\n-   Name_Origin                         : constant Name_Id := N + 071;\n-   Name_Params                         : constant Name_Id := N + 072;\n-   Name_Partition                      : constant Name_Id := N + 073;\n-   Name_Partition_Interface            : constant Name_Id := N + 074;\n-   Name_Ras                            : constant Name_Id := N + 075;\n-   Name_Call                           : constant Name_Id := N + 076;\n-   Name_RCI_Name                       : constant Name_Id := N + 077;\n-   Name_Receiver                       : constant Name_Id := N + 078;\n-   Name_Result                         : constant Name_Id := N + 079;\n-   Name_Rpc                            : constant Name_Id := N + 080;\n-   Name_Subp_Id                        : constant Name_Id := N + 081;\n-   Name_Operation                      : constant Name_Id := N + 082;\n-   Name_Argument                       : constant Name_Id := N + 083;\n-   Name_Arg_Modes                      : constant Name_Id := N + 084;\n-   Name_Handler                        : constant Name_Id := N + 085;\n-   Name_Target                         : constant Name_Id := N + 086;\n-   Name_Req                            : constant Name_Id := N + 087;\n-   Name_Obj_TypeCode                   : constant Name_Id := N + 088;\n-   Name_Stub                           : constant Name_Id := N + 089;\n+   Name_Addr                           : constant Name_Id := N + 070;\n+   Name_Async                          : constant Name_Id := N + 071;\n+   Name_Get_Active_Partition_ID        : constant Name_Id := N + 072;\n+   Name_Get_RCI_Package_Receiver       : constant Name_Id := N + 073;\n+   Name_Get_RCI_Package_Ref            : constant Name_Id := N + 074;\n+   Name_Origin                         : constant Name_Id := N + 075;\n+   Name_Params                         : constant Name_Id := N + 076;\n+   Name_Partition                      : constant Name_Id := N + 077;\n+   Name_Partition_Interface            : constant Name_Id := N + 078;\n+   Name_Ras                            : constant Name_Id := N + 079;\n+   Name_Call                           : constant Name_Id := N + 080;\n+   Name_RCI_Name                       : constant Name_Id := N + 081;\n+   Name_Receiver                       : constant Name_Id := N + 082;\n+   Name_Result                         : constant Name_Id := N + 083;\n+   Name_Rpc                            : constant Name_Id := N + 084;\n+   Name_Subp_Id                        : constant Name_Id := N + 085;\n+   Name_Operation                      : constant Name_Id := N + 086;\n+   Name_Argument                       : constant Name_Id := N + 087;\n+   Name_Arg_Modes                      : constant Name_Id := N + 088;\n+   Name_Handler                        : constant Name_Id := N + 089;\n+   Name_Target                         : constant Name_Id := N + 090;\n+   Name_Req                            : constant Name_Id := N + 091;\n+   Name_Obj_TypeCode                   : constant Name_Id := N + 092;\n+   Name_Stub                           : constant Name_Id := N + 093;\n \n    --  Operator Symbol entries. The actual names have an upper case O at\n    --  the start in place of the Op_ prefix (e.g. the actual name that\n    --  corresponds to Name_Op_Abs is \"Oabs\".\n \n-   First_Operator_Name                 : constant Name_Id := N + 090;\n-   Name_Op_Abs                         : constant Name_Id := N + 090; -- \"abs\"\n-   Name_Op_And                         : constant Name_Id := N + 091; -- \"and\"\n-   Name_Op_Mod                         : constant Name_Id := N + 092; -- \"mod\"\n-   Name_Op_Not                         : constant Name_Id := N + 093; -- \"not\"\n-   Name_Op_Or                          : constant Name_Id := N + 094; -- \"or\"\n-   Name_Op_Rem                         : constant Name_Id := N + 095; -- \"rem\"\n-   Name_Op_Xor                         : constant Name_Id := N + 096; -- \"xor\"\n-   Name_Op_Eq                          : constant Name_Id := N + 097; -- \"=\"\n-   Name_Op_Ne                          : constant Name_Id := N + 098; -- \"/=\"\n-   Name_Op_Lt                          : constant Name_Id := N + 099; -- \"<\"\n-   Name_Op_Le                          : constant Name_Id := N + 100; -- \"<=\"\n-   Name_Op_Gt                          : constant Name_Id := N + 101; -- \">\"\n-   Name_Op_Ge                          : constant Name_Id := N + 102; -- \">=\"\n-   Name_Op_Add                         : constant Name_Id := N + 103; -- \"+\"\n-   Name_Op_Subtract                    : constant Name_Id := N + 104; -- \"-\"\n-   Name_Op_Concat                      : constant Name_Id := N + 105; -- \"&\"\n-   Name_Op_Multiply                    : constant Name_Id := N + 106; -- \"*\"\n-   Name_Op_Divide                      : constant Name_Id := N + 107; -- \"/\"\n-   Name_Op_Expon                       : constant Name_Id := N + 108; -- \"**\"\n-   Last_Operator_Name                  : constant Name_Id := N + 108;\n+   First_Operator_Name                 : constant Name_Id := N + 094;\n+   Name_Op_Abs                         : constant Name_Id := N + 094; -- \"abs\"\n+   Name_Op_And                         : constant Name_Id := N + 095; -- \"and\"\n+   Name_Op_Mod                         : constant Name_Id := N + 096; -- \"mod\"\n+   Name_Op_Not                         : constant Name_Id := N + 097; -- \"not\"\n+   Name_Op_Or                          : constant Name_Id := N + 098; -- \"or\"\n+   Name_Op_Rem                         : constant Name_Id := N + 099; -- \"rem\"\n+   Name_Op_Xor                         : constant Name_Id := N + 100; -- \"xor\"\n+   Name_Op_Eq                          : constant Name_Id := N + 101; -- \"=\"\n+   Name_Op_Ne                          : constant Name_Id := N + 102; -- \"/=\"\n+   Name_Op_Lt                          : constant Name_Id := N + 103; -- \"<\"\n+   Name_Op_Le                          : constant Name_Id := N + 104; -- \"<=\"\n+   Name_Op_Gt                          : constant Name_Id := N + 105; -- \">\"\n+   Name_Op_Ge                          : constant Name_Id := N + 106; -- \">=\"\n+   Name_Op_Add                         : constant Name_Id := N + 107; -- \"+\"\n+   Name_Op_Subtract                    : constant Name_Id := N + 108; -- \"-\"\n+   Name_Op_Concat                      : constant Name_Id := N + 109; -- \"&\"\n+   Name_Op_Multiply                    : constant Name_Id := N + 110; -- \"*\"\n+   Name_Op_Divide                      : constant Name_Id := N + 111; -- \"/\"\n+   Name_Op_Expon                       : constant Name_Id := N + 112; -- \"**\"\n+   Last_Operator_Name                  : constant Name_Id := N + 112;\n \n    --  Names for all pragmas recognized by GNAT. The entries with the comment\n    --  \"Ada 83\" are pragmas that are defined in Ada 83, but not in Ada 95.\n@@ -316,145 +324,146 @@ package Snames is\n    --  only in GNAT for the AAMP. They are ignored in other versions with\n    --  appropriate warnings.\n \n-   First_Pragma_Name                   : constant Name_Id := N + 109;\n+   First_Pragma_Name                   : constant Name_Id := N + 113;\n \n    --  Configuration pragmas are grouped at start\n \n-   Name_Ada_83                         : constant Name_Id := N + 109; -- GNAT\n-   Name_Ada_95                         : constant Name_Id := N + 110; -- GNAT\n-   Name_Ada_05                         : constant Name_Id := N + 111; -- GNAT\n-   Name_Assertion_Policy               : constant Name_Id := N + 112; -- Ada 05\n-   Name_C_Pass_By_Copy                 : constant Name_Id := N + 113; -- GNAT\n-   Name_Compile_Time_Warning           : constant Name_Id := N + 114; -- GNAT\n-   Name_Component_Alignment            : constant Name_Id := N + 115; -- GNAT\n-   Name_Convention_Identifier          : constant Name_Id := N + 116; -- GNAT\n-   Name_Detect_Blocking                : constant Name_Id := N + 117; -- Ada 05\n-   Name_Discard_Names                  : constant Name_Id := N + 118;\n-   Name_Elaboration_Checks             : constant Name_Id := N + 119; -- GNAT\n-   Name_Eliminate                      : constant Name_Id := N + 120; -- GNAT\n-   Name_Explicit_Overriding            : constant Name_Id := N + 121; -- Ada 05\n-   Name_Extend_System                  : constant Name_Id := N + 122; -- GNAT\n-   Name_Extensions_Allowed             : constant Name_Id := N + 123; -- GNAT\n-   Name_External_Name_Casing           : constant Name_Id := N + 124; -- GNAT\n-   Name_Float_Representation           : constant Name_Id := N + 125; -- GNAT\n-   Name_Initialize_Scalars             : constant Name_Id := N + 126; -- GNAT\n-   Name_Interrupt_State                : constant Name_Id := N + 127; -- GNAT\n-   Name_License                        : constant Name_Id := N + 128; -- GNAT\n-   Name_Locking_Policy                 : constant Name_Id := N + 129;\n-   Name_Long_Float                     : constant Name_Id := N + 130; -- VMS\n-   Name_No_Run_Time                    : constant Name_Id := N + 131; -- GNAT\n-   Name_No_Strict_Aliasing             : constant Name_Id := N + 132; -- GNAT\n-   Name_Normalize_Scalars              : constant Name_Id := N + 133;\n-   Name_Polling                        : constant Name_Id := N + 134; -- GNAT\n-   Name_Persistent_BSS                 : constant Name_Id := N + 135; -- GNAT\n-   Name_Profile                        : constant Name_Id := N + 136; -- Ada 05\n-   Name_Profile_Warnings               : constant Name_Id := N + 137; -- GNAT\n-   Name_Propagate_Exceptions           : constant Name_Id := N + 138; -- GNAT\n-   Name_Queuing_Policy                 : constant Name_Id := N + 139;\n-   Name_Ravenscar                      : constant Name_Id := N + 140; -- Ada 05\n-   Name_Restricted_Run_Time            : constant Name_Id := N + 141; -- GNAT\n-   Name_Restrictions                   : constant Name_Id := N + 142;\n-   Name_Restriction_Warnings           : constant Name_Id := N + 143; -- GNAT\n-   Name_Reviewable                     : constant Name_Id := N + 144;\n-   Name_Source_File_Name               : constant Name_Id := N + 145; -- GNAT\n-   Name_Source_File_Name_Project       : constant Name_Id := N + 146; -- GNAT\n-   Name_Style_Checks                   : constant Name_Id := N + 147; -- GNAT\n-   Name_Suppress                       : constant Name_Id := N + 148;\n-   Name_Suppress_Exception_Locations   : constant Name_Id := N + 149; -- GNAT\n-   Name_Task_Dispatching_Policy        : constant Name_Id := N + 150;\n-   Name_Universal_Data                 : constant Name_Id := N + 151; -- AAMP\n-   Name_Unsuppress                     : constant Name_Id := N + 152; -- GNAT\n-   Name_Use_VADS_Size                  : constant Name_Id := N + 153; -- GNAT\n-   Name_Validity_Checks                : constant Name_Id := N + 154; -- GNAT\n-   Name_Warnings                       : constant Name_Id := N + 155; -- GNAT\n-   Last_Configuration_Pragma_Name      : constant Name_Id := N + 155;\n+   Name_Ada_83                         : constant Name_Id := N + 113; -- GNAT\n+   Name_Ada_95                         : constant Name_Id := N + 114; -- GNAT\n+   Name_Ada_05                         : constant Name_Id := N + 115; -- GNAT\n+   Name_Assertion_Policy               : constant Name_Id := N + 116; -- Ada 05\n+   Name_C_Pass_By_Copy                 : constant Name_Id := N + 117; -- GNAT\n+   Name_Compile_Time_Warning           : constant Name_Id := N + 118; -- GNAT\n+   Name_Component_Alignment            : constant Name_Id := N + 119; -- GNAT\n+   Name_Convention_Identifier          : constant Name_Id := N + 120; -- GNAT\n+   Name_Debug_Policy                   : constant Name_Id := N + 121; -- GNAT\n+   Name_Detect_Blocking                : constant Name_Id := N + 122; -- Ada 05\n+   Name_Discard_Names                  : constant Name_Id := N + 123;\n+   Name_Elaboration_Checks             : constant Name_Id := N + 124; -- GNAT\n+   Name_Eliminate                      : constant Name_Id := N + 125; -- GNAT\n+   Name_Explicit_Overriding            : constant Name_Id := N + 126; -- Ada 05\n+   Name_Extend_System                  : constant Name_Id := N + 127; -- GNAT\n+   Name_Extensions_Allowed             : constant Name_Id := N + 128; -- GNAT\n+   Name_External_Name_Casing           : constant Name_Id := N + 129; -- GNAT\n+   Name_Float_Representation           : constant Name_Id := N + 130; -- GNAT\n+   Name_Initialize_Scalars             : constant Name_Id := N + 131; -- GNAT\n+   Name_Interrupt_State                : constant Name_Id := N + 132; -- GNAT\n+   Name_License                        : constant Name_Id := N + 133; -- GNAT\n+   Name_Locking_Policy                 : constant Name_Id := N + 134;\n+   Name_Long_Float                     : constant Name_Id := N + 135; -- VMS\n+   Name_No_Run_Time                    : constant Name_Id := N + 136; -- GNAT\n+   Name_No_Strict_Aliasing             : constant Name_Id := N + 137; -- GNAT\n+   Name_Normalize_Scalars              : constant Name_Id := N + 138;\n+   Name_Polling                        : constant Name_Id := N + 139; -- GNAT\n+   Name_Persistent_BSS                 : constant Name_Id := N + 140; -- GNAT\n+   Name_Profile                        : constant Name_Id := N + 141; -- Ada 05\n+   Name_Profile_Warnings               : constant Name_Id := N + 142; -- GNAT\n+   Name_Propagate_Exceptions           : constant Name_Id := N + 143; -- GNAT\n+   Name_Queuing_Policy                 : constant Name_Id := N + 144;\n+   Name_Ravenscar                      : constant Name_Id := N + 145; -- Ada 05\n+   Name_Restricted_Run_Time            : constant Name_Id := N + 146; -- GNAT\n+   Name_Restrictions                   : constant Name_Id := N + 147;\n+   Name_Restriction_Warnings           : constant Name_Id := N + 148; -- GNAT\n+   Name_Reviewable                     : constant Name_Id := N + 149;\n+   Name_Source_File_Name               : constant Name_Id := N + 150; -- GNAT\n+   Name_Source_File_Name_Project       : constant Name_Id := N + 151; -- GNAT\n+   Name_Style_Checks                   : constant Name_Id := N + 152; -- GNAT\n+   Name_Suppress                       : constant Name_Id := N + 153;\n+   Name_Suppress_Exception_Locations   : constant Name_Id := N + 154; -- GNAT\n+   Name_Task_Dispatching_Policy        : constant Name_Id := N + 155;\n+   Name_Universal_Data                 : constant Name_Id := N + 156; -- AAMP\n+   Name_Unsuppress                     : constant Name_Id := N + 157; -- GNAT\n+   Name_Use_VADS_Size                  : constant Name_Id := N + 158; -- GNAT\n+   Name_Validity_Checks                : constant Name_Id := N + 159; -- GNAT\n+   Name_Warnings                       : constant Name_Id := N + 160; -- GNAT\n+   Last_Configuration_Pragma_Name      : constant Name_Id := N + 160;\n \n    --  Remaining pragma names\n \n-   Name_Abort_Defer                    : constant Name_Id := N + 156; -- GNAT\n-   Name_All_Calls_Remote               : constant Name_Id := N + 157;\n-   Name_Annotate                       : constant Name_Id := N + 158; -- GNAT\n+   Name_Abort_Defer                    : constant Name_Id := N + 161; -- GNAT\n+   Name_All_Calls_Remote               : constant Name_Id := N + 162;\n+   Name_Annotate                       : constant Name_Id := N + 163; -- GNAT\n \n    --  Note: AST_Entry is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n    --  definition of the type Attribute_Id, and the functions Get_Pragma_Id\n    --  and Check_Pragma_Id correctly recognize and process Name_AST_Entry.\n    --  AST_Entry is a VMS specific pragma.\n \n-   Name_Assert                         : constant Name_Id := N + 159; -- Ada 05\n-   Name_Asynchronous                   : constant Name_Id := N + 160;\n-   Name_Atomic                         : constant Name_Id := N + 161;\n-   Name_Atomic_Components              : constant Name_Id := N + 162;\n-   Name_Attach_Handler                 : constant Name_Id := N + 163;\n-   Name_Comment                        : constant Name_Id := N + 164; -- GNAT\n-   Name_Common_Object                  : constant Name_Id := N + 165; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 166; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 167;\n-   Name_Convention                     : constant Name_Id := N + 168;\n-   Name_CPP_Class                      : constant Name_Id := N + 169; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 170; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 171; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 172; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 173; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 174; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 175;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 176;\n-   Name_Export                         : constant Name_Id := N + 177;\n-   Name_Export_Exception               : constant Name_Id := N + 178; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 179; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 180; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 181; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 182; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 183; -- GNAT\n-   Name_External                       : constant Name_Id := N + 184; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 185; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 186; -- VMS\n-   Name_Import                         : constant Name_Id := N + 187;\n-   Name_Import_Exception               : constant Name_Id := N + 188; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 189; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 190; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 191; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 192; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 193;\n-   Name_Inline_Always                  : constant Name_Id := N + 194; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 195; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 196;\n-   Name_Interface_Name                 : constant Name_Id := N + 197; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 198;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 199;\n-   Name_Java_Constructor               : constant Name_Id := N + 200; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 201; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 202; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 203; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 204; -- GNAT\n-   Name_Linker_Constructor             : constant Name_Id := N + 205; -- GNAT\n-   Name_Linker_Destructor              : constant Name_Id := N + 206; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 207;\n-   Name_Linker_Section                 : constant Name_Id := N + 208; -- GNAT\n-   Name_List                           : constant Name_Id := N + 209;\n-   Name_Machine_Attribute              : constant Name_Id := N + 210; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 211; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 212; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 213; -- Ada 83\n-   Name_No_Return                      : constant Name_Id := N + 214; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 215; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 216;\n-   Name_Optional_Overriding            : constant Name_Id := N + 217; -- Ada 05\n-   Name_Pack                           : constant Name_Id := N + 218;\n-   Name_Page                           : constant Name_Id := N + 219;\n-   Name_Passive                        : constant Name_Id := N + 220; -- GNAT\n-   Name_Preelaborate                   : constant Name_Id := N + 221;\n-   Name_Preelaborate_05                : constant Name_Id := N + 222; -- GNAT\n-   Name_Priority                       : constant Name_Id := N + 223;\n-   Name_Psect_Object                   : constant Name_Id := N + 224; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 225;\n-   Name_Pure_05                        : constant Name_Id := N + 226; -- GNAT\n-   Name_Pure_Function                  : constant Name_Id := N + 227; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 228;\n-   Name_Remote_Types                   : constant Name_Id := N + 229;\n-   Name_Share_Generic                  : constant Name_Id := N + 230; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 231; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 232;\n+   Name_Assert                         : constant Name_Id := N + 164; -- Ada 05\n+   Name_Asynchronous                   : constant Name_Id := N + 165;\n+   Name_Atomic                         : constant Name_Id := N + 166;\n+   Name_Atomic_Components              : constant Name_Id := N + 167;\n+   Name_Attach_Handler                 : constant Name_Id := N + 168;\n+   Name_Comment                        : constant Name_Id := N + 169; -- GNAT\n+   Name_Common_Object                  : constant Name_Id := N + 170; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 171; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 172;\n+   Name_Convention                     : constant Name_Id := N + 173;\n+   Name_CPP_Class                      : constant Name_Id := N + 174; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 175; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 176; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 177; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 178; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 179; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 180;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 181;\n+   Name_Export                         : constant Name_Id := N + 182;\n+   Name_Export_Exception               : constant Name_Id := N + 183; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 184; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 185; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 186; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 187; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 188; -- GNAT\n+   Name_External                       : constant Name_Id := N + 189; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 190; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 191; -- VMS\n+   Name_Import                         : constant Name_Id := N + 192;\n+   Name_Import_Exception               : constant Name_Id := N + 193; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 194; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 195; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 196; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 197; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 198;\n+   Name_Inline_Always                  : constant Name_Id := N + 199; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 200; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 201;\n+   Name_Interface_Name                 : constant Name_Id := N + 202; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 203;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 204;\n+   Name_Java_Constructor               : constant Name_Id := N + 205; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 206; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 207; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 208; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 209; -- GNAT\n+   Name_Linker_Constructor             : constant Name_Id := N + 210; -- GNAT\n+   Name_Linker_Destructor              : constant Name_Id := N + 211; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 212;\n+   Name_Linker_Section                 : constant Name_Id := N + 213; -- GNAT\n+   Name_List                           : constant Name_Id := N + 214;\n+   Name_Machine_Attribute              : constant Name_Id := N + 215; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 216; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 217; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 218; -- Ada 83\n+   Name_No_Return                      : constant Name_Id := N + 219; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 220; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 221;\n+   Name_Optional_Overriding            : constant Name_Id := N + 222; -- Ada 05\n+   Name_Pack                           : constant Name_Id := N + 223;\n+   Name_Page                           : constant Name_Id := N + 224;\n+   Name_Passive                        : constant Name_Id := N + 225; -- GNAT\n+   Name_Preelaborate                   : constant Name_Id := N + 226;\n+   Name_Preelaborate_05                : constant Name_Id := N + 227; -- GNAT\n+   Name_Priority                       : constant Name_Id := N + 228;\n+   Name_Psect_Object                   : constant Name_Id := N + 229; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 230;\n+   Name_Pure_05                        : constant Name_Id := N + 231; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 232; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 233;\n+   Name_Remote_Types                   : constant Name_Id := N + 234;\n+   Name_Share_Generic                  : constant Name_Id := N + 235; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 236; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 237;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -464,27 +473,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 233; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 234; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 235; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 236; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 237; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 238; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 239; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 240; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 241; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 242; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 243; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 244; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 245; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 246; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 247; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 248; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 249; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 250;\n-   Name_Volatile_Components            : constant Name_Id := N + 251;\n-   Name_Weak_External                  : constant Name_Id := N + 252; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 252;\n+   Name_Source_Reference               : constant Name_Id := N + 238; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 239; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 240; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 241; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 242; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 243; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 244; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 245; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 246; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 247; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 248; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 249; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 250; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 251; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 252; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 253; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 254; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 255;\n+   Name_Volatile_Components            : constant Name_Id := N + 256;\n+   Name_Weak_External                  : constant Name_Id := N + 257; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 257;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -495,114 +504,114 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 253;\n-   Name_Ada                            : constant Name_Id := N + 253;\n-   Name_Assembler                      : constant Name_Id := N + 254;\n-   Name_COBOL                          : constant Name_Id := N + 255;\n-   Name_CPP                            : constant Name_Id := N + 256;\n-   Name_Fortran                        : constant Name_Id := N + 257;\n-   Name_Intrinsic                      : constant Name_Id := N + 258;\n-   Name_Java                           : constant Name_Id := N + 259;\n-   Name_Stdcall                        : constant Name_Id := N + 260;\n-   Name_Stubbed                        : constant Name_Id := N + 261;\n-   Last_Convention_Name                : constant Name_Id := N + 261;\n+   First_Convention_Name               : constant Name_Id := N + 258;\n+   Name_Ada                            : constant Name_Id := N + 258;\n+   Name_Assembler                      : constant Name_Id := N + 259;\n+   Name_COBOL                          : constant Name_Id := N + 260;\n+   Name_CPP                            : constant Name_Id := N + 261;\n+   Name_Fortran                        : constant Name_Id := N + 262;\n+   Name_Intrinsic                      : constant Name_Id := N + 263;\n+   Name_Java                           : constant Name_Id := N + 264;\n+   Name_Stdcall                        : constant Name_Id := N + 265;\n+   Name_Stubbed                        : constant Name_Id := N + 266;\n+   Last_Convention_Name                : constant Name_Id := N + 266;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 262;\n-   Name_Assembly                       : constant Name_Id := N + 263;\n+   Name_Asm                            : constant Name_Id := N + 267;\n+   Name_Assembly                       : constant Name_Id := N + 268;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 264;\n+   Name_Default                        : constant Name_Id := N + 269;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 265;\n-   Name_Win32                          : constant Name_Id := N + 266;\n+   Name_DLL                            : constant Name_Id := N + 270;\n+   Name_Win32                          : constant Name_Id := N + 271;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 267;\n-   Name_Attribute_Name                 : constant Name_Id := N + 268;\n-   Name_Body_File_Name                 : constant Name_Id := N + 269;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 270;\n-   Name_Check                          : constant Name_Id := N + 271;\n-   Name_Casing                         : constant Name_Id := N + 272;\n-   Name_Code                           : constant Name_Id := N + 273;\n-   Name_Component                      : constant Name_Id := N + 274;\n-   Name_Component_Size_4               : constant Name_Id := N + 275;\n-   Name_Copy                           : constant Name_Id := N + 276;\n-   Name_D_Float                        : constant Name_Id := N + 277;\n-   Name_Descriptor                     : constant Name_Id := N + 278;\n-   Name_Dot_Replacement                : constant Name_Id := N + 279;\n-   Name_Dynamic                        : constant Name_Id := N + 280;\n-   Name_Entity                         : constant Name_Id := N + 281;\n-   Name_Entry_Count                    : constant Name_Id := N + 282;\n-   Name_External_Name                  : constant Name_Id := N + 283;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 284;\n-   Name_Form                           : constant Name_Id := N + 285;\n-   Name_G_Float                        : constant Name_Id := N + 286;\n-   Name_Gcc                            : constant Name_Id := N + 287;\n-   Name_Gnat                           : constant Name_Id := N + 288;\n-   Name_GPL                            : constant Name_Id := N + 289;\n-   Name_IEEE_Float                     : constant Name_Id := N + 290;\n-   Name_Ignore                         : constant Name_Id := N + 291;\n-   Name_Info                           : constant Name_Id := N + 292;\n-   Name_Internal                       : constant Name_Id := N + 293;\n-   Name_Link_Name                      : constant Name_Id := N + 294;\n-   Name_Lowercase                      : constant Name_Id := N + 295;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 296;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 297;\n-   Name_Max_Size                       : constant Name_Id := N + 298;\n-   Name_Mechanism                      : constant Name_Id := N + 299;\n-   Name_Message                        : constant Name_Id := N + 300;\n-   Name_Mixedcase                      : constant Name_Id := N + 301;\n-   Name_Modified_GPL                   : constant Name_Id := N + 302;\n-   Name_Name                           : constant Name_Id := N + 303;\n-   Name_NCA                            : constant Name_Id := N + 304;\n-   Name_No                             : constant Name_Id := N + 305;\n-   Name_No_Dependence                  : constant Name_Id := N + 306;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 307;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 308;\n-   Name_No_Requeue                     : constant Name_Id := N + 309;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 310;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 311;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 312;\n-   Name_On                             : constant Name_Id := N + 313;\n-   Name_Parameter_Types                : constant Name_Id := N + 314;\n-   Name_Reference                      : constant Name_Id := N + 315;\n-   Name_Restricted                     : constant Name_Id := N + 316;\n-   Name_Result_Mechanism               : constant Name_Id := N + 317;\n-   Name_Result_Type                    : constant Name_Id := N + 318;\n-   Name_Runtime                        : constant Name_Id := N + 319;\n-   Name_SB                             : constant Name_Id := N + 320;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 321;\n-   Name_Section                        : constant Name_Id := N + 322;\n-   Name_Semaphore                      : constant Name_Id := N + 323;\n-   Name_Simple_Barriers                : constant Name_Id := N + 324;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 325;\n-   Name_State                          : constant Name_Id := N + 326;\n-   Name_Static                         : constant Name_Id := N + 327;\n-   Name_Stack_Size                     : constant Name_Id := N + 328;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 329;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 330;\n-   Name_Task_Type                      : constant Name_Id := N + 331;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 332;\n-   Name_Top_Guard                      : constant Name_Id := N + 333;\n-   Name_UBA                            : constant Name_Id := N + 334;\n-   Name_UBS                            : constant Name_Id := N + 335;\n-   Name_UBSB                           : constant Name_Id := N + 336;\n-   Name_Unit_Name                      : constant Name_Id := N + 337;\n-   Name_Unknown                        : constant Name_Id := N + 338;\n-   Name_Unrestricted                   : constant Name_Id := N + 339;\n-   Name_Uppercase                      : constant Name_Id := N + 340;\n-   Name_User                           : constant Name_Id := N + 341;\n-   Name_VAX_Float                      : constant Name_Id := N + 342;\n-   Name_VMS                            : constant Name_Id := N + 343;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 344;\n-   Name_Working_Storage                : constant Name_Id := N + 345;\n+   Name_As_Is                          : constant Name_Id := N + 272;\n+   Name_Attribute_Name                 : constant Name_Id := N + 273;\n+   Name_Body_File_Name                 : constant Name_Id := N + 274;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 275;\n+   Name_Check                          : constant Name_Id := N + 276;\n+   Name_Casing                         : constant Name_Id := N + 277;\n+   Name_Code                           : constant Name_Id := N + 278;\n+   Name_Component                      : constant Name_Id := N + 279;\n+   Name_Component_Size_4               : constant Name_Id := N + 280;\n+   Name_Copy                           : constant Name_Id := N + 281;\n+   Name_D_Float                        : constant Name_Id := N + 282;\n+   Name_Descriptor                     : constant Name_Id := N + 283;\n+   Name_Dot_Replacement                : constant Name_Id := N + 284;\n+   Name_Dynamic                        : constant Name_Id := N + 285;\n+   Name_Entity                         : constant Name_Id := N + 286;\n+   Name_Entry_Count                    : constant Name_Id := N + 287;\n+   Name_External_Name                  : constant Name_Id := N + 288;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 289;\n+   Name_Form                           : constant Name_Id := N + 290;\n+   Name_G_Float                        : constant Name_Id := N + 291;\n+   Name_Gcc                            : constant Name_Id := N + 292;\n+   Name_Gnat                           : constant Name_Id := N + 293;\n+   Name_GPL                            : constant Name_Id := N + 294;\n+   Name_IEEE_Float                     : constant Name_Id := N + 295;\n+   Name_Ignore                         : constant Name_Id := N + 296;\n+   Name_Info                           : constant Name_Id := N + 297;\n+   Name_Internal                       : constant Name_Id := N + 298;\n+   Name_Link_Name                      : constant Name_Id := N + 299;\n+   Name_Lowercase                      : constant Name_Id := N + 300;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 301;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 302;\n+   Name_Max_Size                       : constant Name_Id := N + 303;\n+   Name_Mechanism                      : constant Name_Id := N + 304;\n+   Name_Message                        : constant Name_Id := N + 305;\n+   Name_Mixedcase                      : constant Name_Id := N + 306;\n+   Name_Modified_GPL                   : constant Name_Id := N + 307;\n+   Name_Name                           : constant Name_Id := N + 308;\n+   Name_NCA                            : constant Name_Id := N + 309;\n+   Name_No                             : constant Name_Id := N + 310;\n+   Name_No_Dependence                  : constant Name_Id := N + 311;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 312;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 313;\n+   Name_No_Requeue                     : constant Name_Id := N + 314;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 315;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 316;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 317;\n+   Name_On                             : constant Name_Id := N + 318;\n+   Name_Parameter_Types                : constant Name_Id := N + 319;\n+   Name_Reference                      : constant Name_Id := N + 320;\n+   Name_Restricted                     : constant Name_Id := N + 321;\n+   Name_Result_Mechanism               : constant Name_Id := N + 322;\n+   Name_Result_Type                    : constant Name_Id := N + 323;\n+   Name_Runtime                        : constant Name_Id := N + 324;\n+   Name_SB                             : constant Name_Id := N + 325;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 326;\n+   Name_Section                        : constant Name_Id := N + 327;\n+   Name_Semaphore                      : constant Name_Id := N + 328;\n+   Name_Simple_Barriers                : constant Name_Id := N + 329;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 330;\n+   Name_State                          : constant Name_Id := N + 331;\n+   Name_Static                         : constant Name_Id := N + 332;\n+   Name_Stack_Size                     : constant Name_Id := N + 333;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 334;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 335;\n+   Name_Task_Type                      : constant Name_Id := N + 336;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 337;\n+   Name_Top_Guard                      : constant Name_Id := N + 338;\n+   Name_UBA                            : constant Name_Id := N + 339;\n+   Name_UBS                            : constant Name_Id := N + 340;\n+   Name_UBSB                           : constant Name_Id := N + 341;\n+   Name_Unit_Name                      : constant Name_Id := N + 342;\n+   Name_Unknown                        : constant Name_Id := N + 343;\n+   Name_Unrestricted                   : constant Name_Id := N + 344;\n+   Name_Uppercase                      : constant Name_Id := N + 345;\n+   Name_User                           : constant Name_Id := N + 346;\n+   Name_VAX_Float                      : constant Name_Id := N + 347;\n+   Name_VMS                            : constant Name_Id := N + 348;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 349;\n+   Name_Working_Storage                : constant Name_Id := N + 350;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -616,403 +625,403 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 346;\n-   Name_Abort_Signal                   : constant Name_Id := N + 346; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 347;\n-   Name_Address                        : constant Name_Id := N + 348;\n-   Name_Address_Size                   : constant Name_Id := N + 349; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 350;\n-   Name_Alignment                      : constant Name_Id := N + 351;\n-   Name_Asm_Input                      : constant Name_Id := N + 352; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 353; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 354; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 355; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 356;\n-   Name_Bit_Position                   : constant Name_Id := N + 357; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 358;\n-   Name_Callable                       : constant Name_Id := N + 359;\n-   Name_Caller                         : constant Name_Id := N + 360;\n-   Name_Code_Address                   : constant Name_Id := N + 361; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 362;\n-   Name_Compose                        : constant Name_Id := N + 363;\n-   Name_Constrained                    : constant Name_Id := N + 364;\n-   Name_Count                          : constant Name_Id := N + 365;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 366; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 367;\n-   Name_Delta                          : constant Name_Id := N + 368;\n-   Name_Denorm                         : constant Name_Id := N + 369;\n-   Name_Digits                         : constant Name_Id := N + 370;\n-   Name_Elaborated                     : constant Name_Id := N + 371; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 372; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 373; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 374; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 375;\n-   Name_External_Tag                   : constant Name_Id := N + 376;\n-   Name_First                          : constant Name_Id := N + 377;\n-   Name_First_Bit                      : constant Name_Id := N + 378;\n-   Name_Fixed_Value                    : constant Name_Id := N + 379; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 380;\n-   Name_Has_Access_Values              : constant Name_Id := N + 381; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 382; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 383;\n-   Name_Img                            : constant Name_Id := N + 384; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 385; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 386; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 387;\n-   Name_Last_Bit                       : constant Name_Id := N + 388;\n-   Name_Leading_Part                   : constant Name_Id := N + 389;\n-   Name_Length                         : constant Name_Id := N + 390;\n-   Name_Machine_Emax                   : constant Name_Id := N + 391;\n-   Name_Machine_Emin                   : constant Name_Id := N + 392;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 393;\n-   Name_Machine_Overflows              : constant Name_Id := N + 394;\n-   Name_Machine_Radix                  : constant Name_Id := N + 395;\n-   Name_Machine_Rounds                 : constant Name_Id := N + 396;\n-   Name_Machine_Size                   : constant Name_Id := N + 397; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 398; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 399;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 400; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 401; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 402;\n-   Name_Model_Emin                     : constant Name_Id := N + 403;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 404;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 405;\n-   Name_Model_Small                    : constant Name_Id := N + 406;\n-   Name_Modulus                        : constant Name_Id := N + 407;\n-   Name_Null_Parameter                 : constant Name_Id := N + 408; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 409; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 410;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 411; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 412;\n-   Name_Pos                            : constant Name_Id := N + 413;\n-   Name_Position                       : constant Name_Id := N + 414;\n-   Name_Range                          : constant Name_Id := N + 415;\n-   Name_Range_Length                   : constant Name_Id := N + 416; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 417;\n-   Name_Safe_Emax                      : constant Name_Id := N + 418; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 419;\n-   Name_Safe_Large                     : constant Name_Id := N + 420; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 421;\n-   Name_Safe_Small                     : constant Name_Id := N + 422; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 423;\n-   Name_Scaling                        : constant Name_Id := N + 424;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 425;\n-   Name_Size                           : constant Name_Id := N + 426;\n-   Name_Small                          : constant Name_Id := N + 427;\n-   Name_Storage_Size                   : constant Name_Id := N + 428;\n-   Name_Storage_Unit                   : constant Name_Id := N + 429; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 430; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 431;\n-   Name_Target_Name                    : constant Name_Id := N + 432; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 433;\n-   Name_To_Address                     : constant Name_Id := N + 434; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 435; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 436; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 437;\n-   Name_Unchecked_Access               : constant Name_Id := N + 438;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 439;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 440; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 441; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 442; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 443;\n-   Name_Valid                          : constant Name_Id := N + 444;\n-   Name_Value_Size                     : constant Name_Id := N + 445; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 446;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 447; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 448; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 449;\n-   Name_Width                          : constant Name_Id := N + 450;\n-   Name_Word_Size                      : constant Name_Id := N + 451; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 351;\n+   Name_Abort_Signal                   : constant Name_Id := N + 351; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 352;\n+   Name_Address                        : constant Name_Id := N + 353;\n+   Name_Address_Size                   : constant Name_Id := N + 354; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 355;\n+   Name_Alignment                      : constant Name_Id := N + 356;\n+   Name_Asm_Input                      : constant Name_Id := N + 357; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 358; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 359; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 360; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 361;\n+   Name_Bit_Position                   : constant Name_Id := N + 362; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 363;\n+   Name_Callable                       : constant Name_Id := N + 364;\n+   Name_Caller                         : constant Name_Id := N + 365;\n+   Name_Code_Address                   : constant Name_Id := N + 366; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 367;\n+   Name_Compose                        : constant Name_Id := N + 368;\n+   Name_Constrained                    : constant Name_Id := N + 369;\n+   Name_Count                          : constant Name_Id := N + 370;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 371; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 372;\n+   Name_Delta                          : constant Name_Id := N + 373;\n+   Name_Denorm                         : constant Name_Id := N + 374;\n+   Name_Digits                         : constant Name_Id := N + 375;\n+   Name_Elaborated                     : constant Name_Id := N + 376; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 377; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 378; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 379; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 380;\n+   Name_External_Tag                   : constant Name_Id := N + 381;\n+   Name_First                          : constant Name_Id := N + 382;\n+   Name_First_Bit                      : constant Name_Id := N + 383;\n+   Name_Fixed_Value                    : constant Name_Id := N + 384; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 385;\n+   Name_Has_Access_Values              : constant Name_Id := N + 386; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 387; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 388;\n+   Name_Img                            : constant Name_Id := N + 389; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 390; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 391; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 392;\n+   Name_Last_Bit                       : constant Name_Id := N + 393;\n+   Name_Leading_Part                   : constant Name_Id := N + 394;\n+   Name_Length                         : constant Name_Id := N + 395;\n+   Name_Machine_Emax                   : constant Name_Id := N + 396;\n+   Name_Machine_Emin                   : constant Name_Id := N + 397;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 398;\n+   Name_Machine_Overflows              : constant Name_Id := N + 399;\n+   Name_Machine_Radix                  : constant Name_Id := N + 400;\n+   Name_Machine_Rounds                 : constant Name_Id := N + 401;\n+   Name_Machine_Size                   : constant Name_Id := N + 402; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 403; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 404;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 405; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 406; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 407;\n+   Name_Model_Emin                     : constant Name_Id := N + 408;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 409;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 410;\n+   Name_Model_Small                    : constant Name_Id := N + 411;\n+   Name_Modulus                        : constant Name_Id := N + 412;\n+   Name_Null_Parameter                 : constant Name_Id := N + 413; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 414; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 415;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 416; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 417;\n+   Name_Pos                            : constant Name_Id := N + 418;\n+   Name_Position                       : constant Name_Id := N + 419;\n+   Name_Range                          : constant Name_Id := N + 420;\n+   Name_Range_Length                   : constant Name_Id := N + 421; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 422;\n+   Name_Safe_Emax                      : constant Name_Id := N + 423; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 424;\n+   Name_Safe_Large                     : constant Name_Id := N + 425; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 426;\n+   Name_Safe_Small                     : constant Name_Id := N + 427; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 428;\n+   Name_Scaling                        : constant Name_Id := N + 429;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 430;\n+   Name_Size                           : constant Name_Id := N + 431;\n+   Name_Small                          : constant Name_Id := N + 432;\n+   Name_Storage_Size                   : constant Name_Id := N + 433;\n+   Name_Storage_Unit                   : constant Name_Id := N + 434; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 435; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 436;\n+   Name_Target_Name                    : constant Name_Id := N + 437; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 438;\n+   Name_To_Address                     : constant Name_Id := N + 439; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 440; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 441; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 442;\n+   Name_Unchecked_Access               : constant Name_Id := N + 443;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 444;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 445; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 446; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 447; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 448;\n+   Name_Valid                          : constant Name_Id := N + 449;\n+   Name_Value_Size                     : constant Name_Id := N + 450; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 451;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 452; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 453; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 454;\n+   Name_Width                          : constant Name_Id := N + 455;\n+   Name_Word_Size                      : constant Name_Id := N + 456; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 452;\n-   Name_Adjacent                       : constant Name_Id := N + 452;\n-   Name_Ceiling                        : constant Name_Id := N + 453;\n-   Name_Copy_Sign                      : constant Name_Id := N + 454;\n-   Name_Floor                          : constant Name_Id := N + 455;\n-   Name_Fraction                       : constant Name_Id := N + 456;\n-   Name_Image                          : constant Name_Id := N + 457;\n-   Name_Input                          : constant Name_Id := N + 458;\n-   Name_Machine                        : constant Name_Id := N + 459;\n-   Name_Max                            : constant Name_Id := N + 460;\n-   Name_Min                            : constant Name_Id := N + 461;\n-   Name_Model                          : constant Name_Id := N + 462;\n-   Name_Pred                           : constant Name_Id := N + 463;\n-   Name_Remainder                      : constant Name_Id := N + 464;\n-   Name_Rounding                       : constant Name_Id := N + 465;\n-   Name_Succ                           : constant Name_Id := N + 466;\n-   Name_Truncation                     : constant Name_Id := N + 467;\n-   Name_Value                          : constant Name_Id := N + 468;\n-   Name_Wide_Image                     : constant Name_Id := N + 469;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 470;\n-   Name_Wide_Value                     : constant Name_Id := N + 471;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 472;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 472;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 457;\n+   Name_Adjacent                       : constant Name_Id := N + 457;\n+   Name_Ceiling                        : constant Name_Id := N + 458;\n+   Name_Copy_Sign                      : constant Name_Id := N + 459;\n+   Name_Floor                          : constant Name_Id := N + 460;\n+   Name_Fraction                       : constant Name_Id := N + 461;\n+   Name_Image                          : constant Name_Id := N + 462;\n+   Name_Input                          : constant Name_Id := N + 463;\n+   Name_Machine                        : constant Name_Id := N + 464;\n+   Name_Max                            : constant Name_Id := N + 465;\n+   Name_Min                            : constant Name_Id := N + 466;\n+   Name_Model                          : constant Name_Id := N + 467;\n+   Name_Pred                           : constant Name_Id := N + 468;\n+   Name_Remainder                      : constant Name_Id := N + 469;\n+   Name_Rounding                       : constant Name_Id := N + 470;\n+   Name_Succ                           : constant Name_Id := N + 471;\n+   Name_Truncation                     : constant Name_Id := N + 472;\n+   Name_Value                          : constant Name_Id := N + 473;\n+   Name_Wide_Image                     : constant Name_Id := N + 474;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 475;\n+   Name_Wide_Value                     : constant Name_Id := N + 476;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 477;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 477;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 473;\n-   Name_Output                         : constant Name_Id := N + 473;\n-   Name_Read                           : constant Name_Id := N + 474;\n-   Name_Write                          : constant Name_Id := N + 475;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 475;\n+   First_Procedure_Attribute           : constant Name_Id := N + 478;\n+   Name_Output                         : constant Name_Id := N + 478;\n+   Name_Read                           : constant Name_Id := N + 479;\n+   Name_Write                          : constant Name_Id := N + 480;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 480;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 476;\n-   Name_Elab_Body                      : constant Name_Id := N + 476; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 477; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 478;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 481;\n+   Name_Elab_Body                      : constant Name_Id := N + 481; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 482; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 483;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 479;\n-   Name_Base                           : constant Name_Id := N + 479;\n-   Name_Class                          : constant Name_Id := N + 480;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 480;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 480;\n-   Last_Attribute_Name                 : constant Name_Id := N + 480;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 484;\n+   Name_Base                           : constant Name_Id := N + 484;\n+   Name_Class                          : constant Name_Id := N + 485;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 485;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 485;\n+   Last_Attribute_Name                 : constant Name_Id := N + 485;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 481;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 481;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 482;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 482;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 486;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 486;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 487;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 487;\n \n-   --  Names of recognized queuing policy identifiers.\n+   --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 483;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 483;\n-   Name_Priority_Queuing               : constant Name_Id := N + 484;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 484;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 488;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 488;\n+   Name_Priority_Queuing               : constant Name_Id := N + 489;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 489;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 485;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 485;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 485;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 490;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 490;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 490;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 486;\n-   Name_Access_Check                   : constant Name_Id := N + 486;\n-   Name_Accessibility_Check            : constant Name_Id := N + 487;\n-   Name_Discriminant_Check             : constant Name_Id := N + 488;\n-   Name_Division_Check                 : constant Name_Id := N + 489;\n-   Name_Elaboration_Check              : constant Name_Id := N + 490;\n-   Name_Index_Check                    : constant Name_Id := N + 491;\n-   Name_Length_Check                   : constant Name_Id := N + 492;\n-   Name_Overflow_Check                 : constant Name_Id := N + 493;\n-   Name_Range_Check                    : constant Name_Id := N + 494;\n-   Name_Storage_Check                  : constant Name_Id := N + 495;\n-   Name_Tag_Check                      : constant Name_Id := N + 496;\n-   Name_All_Checks                     : constant Name_Id := N + 497;\n-   Last_Check_Name                     : constant Name_Id := N + 497;\n+   First_Check_Name                    : constant Name_Id := N + 491;\n+   Name_Access_Check                   : constant Name_Id := N + 491;\n+   Name_Accessibility_Check            : constant Name_Id := N + 492;\n+   Name_Discriminant_Check             : constant Name_Id := N + 493;\n+   Name_Division_Check                 : constant Name_Id := N + 494;\n+   Name_Elaboration_Check              : constant Name_Id := N + 495;\n+   Name_Index_Check                    : constant Name_Id := N + 496;\n+   Name_Length_Check                   : constant Name_Id := N + 497;\n+   Name_Overflow_Check                 : constant Name_Id := N + 498;\n+   Name_Range_Check                    : constant Name_Id := N + 499;\n+   Name_Storage_Check                  : constant Name_Id := N + 500;\n+   Name_Tag_Check                      : constant Name_Id := N + 501;\n+   Name_All_Checks                     : constant Name_Id := N + 502;\n+   Last_Check_Name                     : constant Name_Id := N + 502;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 498;\n-   Name_Abs                            : constant Name_Id := N + 499;\n-   Name_Accept                         : constant Name_Id := N + 500;\n-   Name_And                            : constant Name_Id := N + 501;\n-   Name_All                            : constant Name_Id := N + 502;\n-   Name_Array                          : constant Name_Id := N + 503;\n-   Name_At                             : constant Name_Id := N + 504;\n-   Name_Begin                          : constant Name_Id := N + 505;\n-   Name_Body                           : constant Name_Id := N + 506;\n-   Name_Case                           : constant Name_Id := N + 507;\n-   Name_Constant                       : constant Name_Id := N + 508;\n-   Name_Declare                        : constant Name_Id := N + 509;\n-   Name_Delay                          : constant Name_Id := N + 510;\n-   Name_Do                             : constant Name_Id := N + 511;\n-   Name_Else                           : constant Name_Id := N + 512;\n-   Name_Elsif                          : constant Name_Id := N + 513;\n-   Name_End                            : constant Name_Id := N + 514;\n-   Name_Entry                          : constant Name_Id := N + 515;\n-   Name_Exception                      : constant Name_Id := N + 516;\n-   Name_Exit                           : constant Name_Id := N + 517;\n-   Name_For                            : constant Name_Id := N + 518;\n-   Name_Function                       : constant Name_Id := N + 519;\n-   Name_Generic                        : constant Name_Id := N + 520;\n-   Name_Goto                           : constant Name_Id := N + 521;\n-   Name_If                             : constant Name_Id := N + 522;\n-   Name_In                             : constant Name_Id := N + 523;\n-   Name_Is                             : constant Name_Id := N + 524;\n-   Name_Limited                        : constant Name_Id := N + 525;\n-   Name_Loop                           : constant Name_Id := N + 526;\n-   Name_New                            : constant Name_Id := N + 527;\n-   Name_Not                            : constant Name_Id := N + 528;\n-   Name_Null                           : constant Name_Id := N + 529;\n-   Name_Of                             : constant Name_Id := N + 530;\n-   Name_Or                             : constant Name_Id := N + 531;\n-   Name_Others                         : constant Name_Id := N + 532;\n-   Name_Out                            : constant Name_Id := N + 533;\n-   Name_Package                        : constant Name_Id := N + 534;\n-   Name_Pragma                         : constant Name_Id := N + 535;\n-   Name_Private                        : constant Name_Id := N + 536;\n-   Name_Procedure                      : constant Name_Id := N + 537;\n-   Name_Raise                          : constant Name_Id := N + 538;\n-   Name_Record                         : constant Name_Id := N + 539;\n-   Name_Rem                            : constant Name_Id := N + 540;\n-   Name_Renames                        : constant Name_Id := N + 541;\n-   Name_Return                         : constant Name_Id := N + 542;\n-   Name_Reverse                        : constant Name_Id := N + 543;\n-   Name_Select                         : constant Name_Id := N + 544;\n-   Name_Separate                       : constant Name_Id := N + 545;\n-   Name_Subtype                        : constant Name_Id := N + 546;\n-   Name_Task                           : constant Name_Id := N + 547;\n-   Name_Terminate                      : constant Name_Id := N + 548;\n-   Name_Then                           : constant Name_Id := N + 549;\n-   Name_Type                           : constant Name_Id := N + 550;\n-   Name_Use                            : constant Name_Id := N + 551;\n-   Name_When                           : constant Name_Id := N + 552;\n-   Name_While                          : constant Name_Id := N + 553;\n-   Name_With                           : constant Name_Id := N + 554;\n-   Name_Xor                            : constant Name_Id := N + 555;\n+   Name_Abort                          : constant Name_Id := N + 503;\n+   Name_Abs                            : constant Name_Id := N + 504;\n+   Name_Accept                         : constant Name_Id := N + 505;\n+   Name_And                            : constant Name_Id := N + 506;\n+   Name_All                            : constant Name_Id := N + 507;\n+   Name_Array                          : constant Name_Id := N + 508;\n+   Name_At                             : constant Name_Id := N + 509;\n+   Name_Begin                          : constant Name_Id := N + 510;\n+   Name_Body                           : constant Name_Id := N + 511;\n+   Name_Case                           : constant Name_Id := N + 512;\n+   Name_Constant                       : constant Name_Id := N + 513;\n+   Name_Declare                        : constant Name_Id := N + 514;\n+   Name_Delay                          : constant Name_Id := N + 515;\n+   Name_Do                             : constant Name_Id := N + 516;\n+   Name_Else                           : constant Name_Id := N + 517;\n+   Name_Elsif                          : constant Name_Id := N + 518;\n+   Name_End                            : constant Name_Id := N + 519;\n+   Name_Entry                          : constant Name_Id := N + 520;\n+   Name_Exception                      : constant Name_Id := N + 521;\n+   Name_Exit                           : constant Name_Id := N + 522;\n+   Name_For                            : constant Name_Id := N + 523;\n+   Name_Function                       : constant Name_Id := N + 524;\n+   Name_Generic                        : constant Name_Id := N + 525;\n+   Name_Goto                           : constant Name_Id := N + 526;\n+   Name_If                             : constant Name_Id := N + 527;\n+   Name_In                             : constant Name_Id := N + 528;\n+   Name_Is                             : constant Name_Id := N + 529;\n+   Name_Limited                        : constant Name_Id := N + 530;\n+   Name_Loop                           : constant Name_Id := N + 531;\n+   Name_New                            : constant Name_Id := N + 532;\n+   Name_Not                            : constant Name_Id := N + 533;\n+   Name_Null                           : constant Name_Id := N + 534;\n+   Name_Of                             : constant Name_Id := N + 535;\n+   Name_Or                             : constant Name_Id := N + 536;\n+   Name_Others                         : constant Name_Id := N + 537;\n+   Name_Out                            : constant Name_Id := N + 538;\n+   Name_Package                        : constant Name_Id := N + 539;\n+   Name_Pragma                         : constant Name_Id := N + 540;\n+   Name_Private                        : constant Name_Id := N + 541;\n+   Name_Procedure                      : constant Name_Id := N + 542;\n+   Name_Raise                          : constant Name_Id := N + 543;\n+   Name_Record                         : constant Name_Id := N + 544;\n+   Name_Rem                            : constant Name_Id := N + 545;\n+   Name_Renames                        : constant Name_Id := N + 546;\n+   Name_Return                         : constant Name_Id := N + 547;\n+   Name_Reverse                        : constant Name_Id := N + 548;\n+   Name_Select                         : constant Name_Id := N + 549;\n+   Name_Separate                       : constant Name_Id := N + 550;\n+   Name_Subtype                        : constant Name_Id := N + 551;\n+   Name_Task                           : constant Name_Id := N + 552;\n+   Name_Terminate                      : constant Name_Id := N + 553;\n+   Name_Then                           : constant Name_Id := N + 554;\n+   Name_Type                           : constant Name_Id := N + 555;\n+   Name_Use                            : constant Name_Id := N + 556;\n+   Name_When                           : constant Name_Id := N + 557;\n+   Name_While                          : constant Name_Id := N + 558;\n+   Name_With                           : constant Name_Id := N + 559;\n+   Name_Xor                            : constant Name_Id := N + 560;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 556;\n-   Name_Divide                          : constant Name_Id := N + 556;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 557;\n-   Name_Exception_Information           : constant Name_Id := N + 558;\n-   Name_Exception_Message               : constant Name_Id := N + 559;\n-   Name_Exception_Name                  : constant Name_Id := N + 560;\n-   Name_File                            : constant Name_Id := N + 561;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 562;\n-   Name_Import_Address                  : constant Name_Id := N + 563;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 564;\n-   Name_Import_Value                    : constant Name_Id := N + 565;\n-   Name_Is_Negative                     : constant Name_Id := N + 566;\n-   Name_Line                            : constant Name_Id := N + 567;\n-   Name_Rotate_Left                     : constant Name_Id := N + 568;\n-   Name_Rotate_Right                    : constant Name_Id := N + 569;\n-   Name_Shift_Left                      : constant Name_Id := N + 570;\n-   Name_Shift_Right                     : constant Name_Id := N + 571;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 572;\n-   Name_Source_Location                 : constant Name_Id := N + 573;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 574;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 575;\n-   Name_To_Pointer                      : constant Name_Id := N + 576;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 576;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 561;\n+   Name_Divide                          : constant Name_Id := N + 561;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 562;\n+   Name_Exception_Information           : constant Name_Id := N + 563;\n+   Name_Exception_Message               : constant Name_Id := N + 564;\n+   Name_Exception_Name                  : constant Name_Id := N + 565;\n+   Name_File                            : constant Name_Id := N + 566;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 567;\n+   Name_Import_Address                  : constant Name_Id := N + 568;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 569;\n+   Name_Import_Value                    : constant Name_Id := N + 570;\n+   Name_Is_Negative                     : constant Name_Id := N + 571;\n+   Name_Line                            : constant Name_Id := N + 572;\n+   Name_Rotate_Left                     : constant Name_Id := N + 573;\n+   Name_Rotate_Right                    : constant Name_Id := N + 574;\n+   Name_Shift_Left                      : constant Name_Id := N + 575;\n+   Name_Shift_Right                     : constant Name_Id := N + 576;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 577;\n+   Name_Source_Location                 : constant Name_Id := N + 578;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 579;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 580;\n+   Name_To_Pointer                      : constant Name_Id := N + 581;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 581;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 577;\n-   Name_Abstract                       : constant Name_Id := N + 577;\n-   Name_Aliased                        : constant Name_Id := N + 578;\n-   Name_Protected                      : constant Name_Id := N + 579;\n-   Name_Until                          : constant Name_Id := N + 580;\n-   Name_Requeue                        : constant Name_Id := N + 581;\n-   Name_Tagged                         : constant Name_Id := N + 582;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 582;\n+   First_95_Reserved_Word              : constant Name_Id := N + 582;\n+   Name_Abstract                       : constant Name_Id := N + 582;\n+   Name_Aliased                        : constant Name_Id := N + 583;\n+   Name_Protected                      : constant Name_Id := N + 584;\n+   Name_Until                          : constant Name_Id := N + 585;\n+   Name_Requeue                        : constant Name_Id := N + 586;\n+   Name_Tagged                         : constant Name_Id := N + 587;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 587;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 583;\n+   Name_Raise_Exception                : constant Name_Id := N + 588;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 584;\n-   Name_Binder                         : constant Name_Id := N + 585;\n-   Name_Binder_Driver                  : constant Name_Id := N + 586;\n-   Name_Body_Suffix                    : constant Name_Id := N + 587;\n-   Name_Builder                        : constant Name_Id := N + 588;\n-   Name_Compiler                       : constant Name_Id := N + 589;\n-   Name_Compiler_Driver                : constant Name_Id := N + 590;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 591;\n-   Name_Compute_Dependency             : constant Name_Id := N + 592;\n-   Name_Cross_Reference                : constant Name_Id := N + 593;\n-   Name_Default_Linker                 : constant Name_Id := N + 594;\n-   Name_Default_Switches               : constant Name_Id := N + 595;\n-   Name_Dependency_Option              : constant Name_Id := N + 596;\n-   Name_Exec_Dir                       : constant Name_Id := N + 597;\n-   Name_Executable                     : constant Name_Id := N + 598;\n-   Name_Executable_Suffix              : constant Name_Id := N + 599;\n-   Name_Extends                        : constant Name_Id := N + 600;\n-   Name_Externally_Built               : constant Name_Id := N + 601;\n-   Name_Finder                         : constant Name_Id := N + 602;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 603;\n-   Name_Gnatls                         : constant Name_Id := N + 604;\n-   Name_Gnatstub                       : constant Name_Id := N + 605;\n-   Name_Implementation                 : constant Name_Id := N + 606;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 607;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 608;\n-   Name_Include_Option                 : constant Name_Id := N + 609;\n-   Name_Language_Processing            : constant Name_Id := N + 610;\n-   Name_Languages                      : constant Name_Id := N + 611;\n-   Name_Library_Dir                    : constant Name_Id := N + 612;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 613;\n-   Name_Library_GCC                    : constant Name_Id := N + 614;\n-   Name_Library_Interface              : constant Name_Id := N + 615;\n-   Name_Library_Kind                   : constant Name_Id := N + 616;\n-   Name_Library_Name                   : constant Name_Id := N + 617;\n-   Name_Library_Options                : constant Name_Id := N + 618;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 619;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 620;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 621;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 622;\n-   Name_Library_Version                : constant Name_Id := N + 623;\n-   Name_Linker                         : constant Name_Id := N + 624;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 625;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 626;\n-   Name_Metrics                        : constant Name_Id := N + 627;\n-   Name_Naming                         : constant Name_Id := N + 628;\n-   Name_Object_Dir                     : constant Name_Id := N + 629;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 630;\n-   Name_Project                        : constant Name_Id := N + 631;\n-   Name_Separate_Suffix                : constant Name_Id := N + 632;\n-   Name_Source_Dirs                    : constant Name_Id := N + 633;\n-   Name_Source_Files                   : constant Name_Id := N + 634;\n-   Name_Source_List_File               : constant Name_Id := N + 635;\n-   Name_Spec                           : constant Name_Id := N + 636;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 637;\n-   Name_Specification                  : constant Name_Id := N + 638;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 639;\n-   Name_Specification_Suffix           : constant Name_Id := N + 640;\n-   Name_Switches                       : constant Name_Id := N + 641;\n+   Name_Ada_Roots                      : constant Name_Id := N + 589;\n+   Name_Binder                         : constant Name_Id := N + 590;\n+   Name_Binder_Driver                  : constant Name_Id := N + 591;\n+   Name_Body_Suffix                    : constant Name_Id := N + 592;\n+   Name_Builder                        : constant Name_Id := N + 593;\n+   Name_Compiler                       : constant Name_Id := N + 594;\n+   Name_Compiler_Driver                : constant Name_Id := N + 595;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 596;\n+   Name_Compute_Dependency             : constant Name_Id := N + 597;\n+   Name_Cross_Reference                : constant Name_Id := N + 598;\n+   Name_Default_Linker                 : constant Name_Id := N + 599;\n+   Name_Default_Switches               : constant Name_Id := N + 600;\n+   Name_Dependency_Option              : constant Name_Id := N + 601;\n+   Name_Exec_Dir                       : constant Name_Id := N + 602;\n+   Name_Executable                     : constant Name_Id := N + 603;\n+   Name_Executable_Suffix              : constant Name_Id := N + 604;\n+   Name_Extends                        : constant Name_Id := N + 605;\n+   Name_Externally_Built               : constant Name_Id := N + 606;\n+   Name_Finder                         : constant Name_Id := N + 607;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 608;\n+   Name_Gnatls                         : constant Name_Id := N + 609;\n+   Name_Gnatstub                       : constant Name_Id := N + 610;\n+   Name_Implementation                 : constant Name_Id := N + 611;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 612;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 613;\n+   Name_Include_Option                 : constant Name_Id := N + 614;\n+   Name_Language_Processing            : constant Name_Id := N + 615;\n+   Name_Languages                      : constant Name_Id := N + 616;\n+   Name_Library_Dir                    : constant Name_Id := N + 617;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 618;\n+   Name_Library_GCC                    : constant Name_Id := N + 619;\n+   Name_Library_Interface              : constant Name_Id := N + 620;\n+   Name_Library_Kind                   : constant Name_Id := N + 621;\n+   Name_Library_Name                   : constant Name_Id := N + 622;\n+   Name_Library_Options                : constant Name_Id := N + 623;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 624;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 625;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 626;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 627;\n+   Name_Library_Version                : constant Name_Id := N + 628;\n+   Name_Linker                         : constant Name_Id := N + 629;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 630;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 631;\n+   Name_Metrics                        : constant Name_Id := N + 632;\n+   Name_Naming                         : constant Name_Id := N + 633;\n+   Name_Object_Dir                     : constant Name_Id := N + 634;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 635;\n+   Name_Project                        : constant Name_Id := N + 636;\n+   Name_Separate_Suffix                : constant Name_Id := N + 637;\n+   Name_Source_Dirs                    : constant Name_Id := N + 638;\n+   Name_Source_Files                   : constant Name_Id := N + 639;\n+   Name_Source_List_File               : constant Name_Id := N + 640;\n+   Name_Spec                           : constant Name_Id := N + 641;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 642;\n+   Name_Specification                  : constant Name_Id := N + 643;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 644;\n+   Name_Specification_Suffix           : constant Name_Id := N + 645;\n+   Name_Switches                       : constant Name_Id := N + 646;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 642;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 647;\n \n    --  ----------------------------------------------------------------\n-   First_2005_Reserved_Word            : constant Name_Id := N + 643;\n-   Name_Interface                      : constant Name_Id := N + 643;\n-   Name_Overriding                     : constant Name_Id := N + 644;\n-   Name_Synchronized                   : constant Name_Id := N + 645;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 645;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 648;\n+   Name_Interface                      : constant Name_Id := N + 648;\n+   Name_Overriding                     : constant Name_Id := N + 649;\n+   Name_Synchronized                   : constant Name_Id := N + 650;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 650;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 645;\n+   Last_Predefined_Name                : constant Name_Id := N + 650;\n \n    subtype Any_Operator_Name is Name_Id range\n      First_Operator_Name .. Last_Operator_Name;\n@@ -1229,6 +1238,7 @@ package Snames is\n       Pragma_Compile_Time_Warning,\n       Pragma_Component_Alignment,\n       Pragma_Convention_Identifier,\n+      Pragma_Debug_Policy,\n       Pragma_Detect_Blocking,\n       Pragma_Discard_Names,\n       Pragma_Elaboration_Checks,\n@@ -1403,7 +1413,7 @@ package Snames is\n    -----------------\n \n    procedure Initialize;\n-   --  Called to initialize the preset names in the names table.\n+   --  Called to initialize the preset names in the names table\n \n    function Is_Attribute_Name (N : Name_Id) return Boolean;\n    --  Test to see if the name N is the name of a recognized attribute"}, {"sha": "0ff742e816d1a8a77964914b62f4606a78d4dbc0", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 141, "deletions": 140, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -219,145 +219,146 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Compile_Time_Warning          5\n #define  Pragma_Component_Alignment           6\n #define  Pragma_Convention_Identifier         7\n-#define  Pragma_Detect_Blocking               8\n-#define  Pragma_Discard_Names                 9\n-#define  Pragma_Elaboration_Checks            10\n-#define  Pragma_Eliminate                     11\n-#define  Pragma_Explicit_Overriding           12\n-#define  Pragma_Extend_System                 13\n-#define  Pragma_Extensions_Allowed            14\n-#define  Pragma_External_Name_Casing          15\n-#define  Pragma_Float_Representation          16\n-#define  Pragma_Initialize_Scalars            17\n-#define  Pragma_Interrupt_State               18\n-#define  Pragma_License                       19\n-#define  Pragma_Locking_Policy                20\n-#define  Pragma_Long_Float                    21\n-#define  Pragma_No_Run_Time                   22\n-#define  Pragma_No_Strict_Aliasing            23\n-#define  Pragma_Normalize_Scalars             24\n-#define  Pragma_Polling                       25\n-#define  Pragma_Persistent_BSS                26\n-#define  Pragma_Profile                       27\n-#define  Pragma_Profile_Warnings              28\n-#define  Pragma_Propagate_Exceptions          29\n-#define  Pragma_Queuing_Policy                30\n-#define  Pragma_Ravenscar                     31\n-#define  Pragma_Restricted_Run_Time           32\n-#define  Pragma_Restrictions                  33\n-#define  Pragma_Restriction_Warnings          34\n-#define  Pragma_Reviewable                    35\n-#define  Pragma_Source_File_Name              36\n-#define  Pragma_Source_File_Name_Project      37\n-#define  Pragma_Style_Checks                  38\n-#define  Pragma_Suppress                      39\n-#define  Pragma_Suppress_Exception_Locations  40\n-#define  Pragma_Task_Dispatching_Policy       41\n-#define  Pragma_Universal_Data                42\n-#define  Pragma_Unsuppress                    43\n-#define  Pragma_Use_VADS_Size                 44\n-#define  Pragma_Validity_Checks               45\n-#define  Pragma_Warnings                      46\n-#define  Pragma_Abort_Defer                   47\n-#define  Pragma_All_Calls_Remote              48\n-#define  Pragma_Annotate                      49\n-#define  Pragma_Assert                        50\n-#define  Pragma_Asynchronous                  51\n-#define  Pragma_Atomic                        52\n-#define  Pragma_Atomic_Components             53\n-#define  Pragma_Attach_Handler                54\n-#define  Pragma_Comment                       55\n-#define  Pragma_Common_Object                 56\n-#define  Pragma_Complex_Representation        57\n-#define  Pragma_Controlled                    58\n-#define  Pragma_Convention                    59\n-#define  Pragma_CPP_Class                     60\n-#define  Pragma_CPP_Constructor               61\n-#define  Pragma_CPP_Virtual                   62\n-#define  Pragma_CPP_Vtable                    63\n-#define  Pragma_Debug                         64\n-#define  Pragma_Elaborate                     65\n-#define  Pragma_Elaborate_All                 66\n-#define  Pragma_Elaborate_Body                67\n-#define  Pragma_Export                        68\n-#define  Pragma_Export_Exception              69\n-#define  Pragma_Export_Function               70\n-#define  Pragma_Export_Object                 71\n-#define  Pragma_Export_Procedure              72\n-#define  Pragma_Export_Value                  73\n-#define  Pragma_Export_Valued_Procedure       74\n-#define  Pragma_External                      75\n-#define  Pragma_Finalize_Storage_Only         76\n-#define  Pragma_Ident                         77\n-#define  Pragma_Import                        78\n-#define  Pragma_Import_Exception              79\n-#define  Pragma_Import_Function               80\n-#define  Pragma_Import_Object                 81\n-#define  Pragma_Import_Procedure              82\n-#define  Pragma_Import_Valued_Procedure       83\n-#define  Pragma_Inline                        84\n-#define  Pragma_Inline_Always                 85\n-#define  Pragma_Inline_Generic                86\n-#define  Pragma_Inspection_Point              87\n-#define  Pragma_Interface_Name                88\n-#define  Pragma_Interrupt_Handler             89\n-#define  Pragma_Interrupt_Priority            90\n-#define  Pragma_Java_Constructor              91\n-#define  Pragma_Java_Interface                92\n-#define  Pragma_Keep_Names                    93\n-#define  Pragma_Link_With                     94\n-#define  Pragma_Linker_Alias                  95\n-#define  Pragma_Linker_Constructor            96\n-#define  Pragma_Linker_Destructor             97\n-#define  Pragma_Linker_Options                98\n-#define  Pragma_Linker_Section                99\n-#define  Pragma_List                          100\n-#define  Pragma_Machine_Attribute             101\n-#define  Pragma_Main                          102\n-#define  Pragma_Main_Storage                  103\n-#define  Pragma_Memory_Size                   104\n-#define  Pragma_No_Return                     105\n-#define  Pragma_Obsolescent                   106\n-#define  Pragma_Optimize                      107\n-#define  Pragma_Optional_Overriding           108\n-#define  Pragma_Pack                          109\n-#define  Pragma_Page                          110\n-#define  Pragma_Passive                       111\n-#define  Pragma_Preelaborate                  112\n-#define  Pragma_Preelaborate_05               113\n-#define  Pragma_Priority                      114\n-#define  Pragma_Psect_Object                  115\n-#define  Pragma_Pure                          116\n-#define  Pragma_Pure_05                       117\n-#define  Pragma_Pure_Function                 118\n-#define  Pragma_Remote_Call_Interface         119\n-#define  Pragma_Remote_Types                  120\n-#define  Pragma_Share_Generic                 121\n-#define  Pragma_Shared                        122\n-#define  Pragma_Shared_Passive                123\n-#define  Pragma_Source_Reference              124\n-#define  Pragma_Stream_Convert                125\n-#define  Pragma_Subtitle                      126\n-#define  Pragma_Suppress_All                  127\n-#define  Pragma_Suppress_Debug_Info           128\n-#define  Pragma_Suppress_Initialization       129\n-#define  Pragma_System_Name                   130\n-#define  Pragma_Task_Info                     131\n-#define  Pragma_Task_Name                     132\n-#define  Pragma_Task_Storage                  133\n-#define  Pragma_Thread_Body                   134\n-#define  Pragma_Time_Slice                    135\n-#define  Pragma_Title                         136\n-#define  Pragma_Unchecked_Union               137\n-#define  Pragma_Unimplemented_Unit            138\n-#define  Pragma_Unreferenced                  139\n-#define  Pragma_Unreserve_All_Interrupts      140\n-#define  Pragma_Volatile                      141\n-#define  Pragma_Volatile_Components           142\n-#define  Pragma_Weak_External                 143\n-#define  Pragma_AST_Entry                     144\n-#define  Pragma_Interface                     145\n-#define  Pragma_Storage_Size                  146\n-#define  Pragma_Storage_Unit                  147\n+#define  Pragma_Debug_Policy                  8\n+#define  Pragma_Detect_Blocking               9\n+#define  Pragma_Discard_Names                 10\n+#define  Pragma_Elaboration_Checks            11\n+#define  Pragma_Eliminate                     12\n+#define  Pragma_Explicit_Overriding           13\n+#define  Pragma_Extend_System                 14\n+#define  Pragma_Extensions_Allowed            15\n+#define  Pragma_External_Name_Casing          16\n+#define  Pragma_Float_Representation          17\n+#define  Pragma_Initialize_Scalars            18\n+#define  Pragma_Interrupt_State               19\n+#define  Pragma_License                       20\n+#define  Pragma_Locking_Policy                21\n+#define  Pragma_Long_Float                    22\n+#define  Pragma_No_Run_Time                   23\n+#define  Pragma_No_Strict_Aliasing            24\n+#define  Pragma_Normalize_Scalars             25\n+#define  Pragma_Polling                       26\n+#define  Pragma_Persistent_BSS                27\n+#define  Pragma_Profile                       28\n+#define  Pragma_Profile_Warnings              29\n+#define  Pragma_Propagate_Exceptions          30\n+#define  Pragma_Queuing_Policy                31\n+#define  Pragma_Ravenscar                     32\n+#define  Pragma_Restricted_Run_Time           33\n+#define  Pragma_Restrictions                  34\n+#define  Pragma_Restriction_Warnings          35\n+#define  Pragma_Reviewable                    36\n+#define  Pragma_Source_File_Name              37\n+#define  Pragma_Source_File_Name_Project      38\n+#define  Pragma_Style_Checks                  39\n+#define  Pragma_Suppress                      40\n+#define  Pragma_Suppress_Exception_Locations  41\n+#define  Pragma_Task_Dispatching_Policy       42\n+#define  Pragma_Universal_Data                43\n+#define  Pragma_Unsuppress                    44\n+#define  Pragma_Use_VADS_Size                 45\n+#define  Pragma_Validity_Checks               46\n+#define  Pragma_Warnings                      47\n+#define  Pragma_Abort_Defer                   48\n+#define  Pragma_All_Calls_Remote              49\n+#define  Pragma_Annotate                      50\n+#define  Pragma_Assert                        51\n+#define  Pragma_Asynchronous                  52\n+#define  Pragma_Atomic                        53\n+#define  Pragma_Atomic_Components             54\n+#define  Pragma_Attach_Handler                55\n+#define  Pragma_Comment                       56\n+#define  Pragma_Common_Object                 57\n+#define  Pragma_Complex_Representation        58\n+#define  Pragma_Controlled                    59\n+#define  Pragma_Convention                    60\n+#define  Pragma_CPP_Class                     61\n+#define  Pragma_CPP_Constructor               62\n+#define  Pragma_CPP_Virtual                   63\n+#define  Pragma_CPP_Vtable                    64\n+#define  Pragma_Debug                         65\n+#define  Pragma_Elaborate                     66\n+#define  Pragma_Elaborate_All                 67\n+#define  Pragma_Elaborate_Body                68\n+#define  Pragma_Export                        69\n+#define  Pragma_Export_Exception              70\n+#define  Pragma_Export_Function               71\n+#define  Pragma_Export_Object                 72\n+#define  Pragma_Export_Procedure              73\n+#define  Pragma_Export_Value                  74\n+#define  Pragma_Export_Valued_Procedure       75\n+#define  Pragma_External                      76\n+#define  Pragma_Finalize_Storage_Only         77\n+#define  Pragma_Ident                         78\n+#define  Pragma_Import                        79\n+#define  Pragma_Import_Exception              80\n+#define  Pragma_Import_Function               81\n+#define  Pragma_Import_Object                 82\n+#define  Pragma_Import_Procedure              83\n+#define  Pragma_Import_Valued_Procedure       84\n+#define  Pragma_Inline                        85\n+#define  Pragma_Inline_Always                 86\n+#define  Pragma_Inline_Generic                87\n+#define  Pragma_Inspection_Point              88\n+#define  Pragma_Interface_Name                89\n+#define  Pragma_Interrupt_Handler             90\n+#define  Pragma_Interrupt_Priority            91\n+#define  Pragma_Java_Constructor              92\n+#define  Pragma_Java_Interface                93\n+#define  Pragma_Keep_Names                    94\n+#define  Pragma_Link_With                     95\n+#define  Pragma_Linker_Alias                  96\n+#define  Pragma_Linker_Constructor            97\n+#define  Pragma_Linker_Destructor             98\n+#define  Pragma_Linker_Options                99\n+#define  Pragma_Linker_Section                100\n+#define  Pragma_List                          101\n+#define  Pragma_Machine_Attribute             102\n+#define  Pragma_Main                          103\n+#define  Pragma_Main_Storage                  104\n+#define  Pragma_Memory_Size                   105\n+#define  Pragma_No_Return                     106\n+#define  Pragma_Obsolescent                   107\n+#define  Pragma_Optimize                      108\n+#define  Pragma_Optional_Overriding           109\n+#define  Pragma_Pack                          110\n+#define  Pragma_Page                          111\n+#define  Pragma_Passive                       112\n+#define  Pragma_Preelaborate                  113\n+#define  Pragma_Preelaborate_05               114\n+#define  Pragma_Priority                      115\n+#define  Pragma_Psect_Object                  116\n+#define  Pragma_Pure                          117\n+#define  Pragma_Pure_05                       118\n+#define  Pragma_Pure_Function                 119\n+#define  Pragma_Remote_Call_Interface         120\n+#define  Pragma_Remote_Types                  121\n+#define  Pragma_Share_Generic                 122\n+#define  Pragma_Shared                        123\n+#define  Pragma_Shared_Passive                124\n+#define  Pragma_Source_Reference              125\n+#define  Pragma_Stream_Convert                126\n+#define  Pragma_Subtitle                      127\n+#define  Pragma_Suppress_All                  128\n+#define  Pragma_Suppress_Debug_Info           129\n+#define  Pragma_Suppress_Initialization       130\n+#define  Pragma_System_Name                   131\n+#define  Pragma_Task_Info                     132\n+#define  Pragma_Task_Name                     133\n+#define  Pragma_Task_Storage                  134\n+#define  Pragma_Thread_Body                   135\n+#define  Pragma_Time_Slice                    136\n+#define  Pragma_Title                         137\n+#define  Pragma_Unchecked_Union               138\n+#define  Pragma_Unimplemented_Unit            139\n+#define  Pragma_Unreferenced                  140\n+#define  Pragma_Unreserve_All_Interrupts      141\n+#define  Pragma_Volatile                      142\n+#define  Pragma_Volatile_Components           143\n+#define  Pragma_Weak_External                 144\n+#define  Pragma_AST_Entry                     145\n+#define  Pragma_Interface                     146\n+#define  Pragma_Storage_Size                  147\n+#define  Pragma_Storage_Unit                  148\n \n /* End of snames.h (C version of Snames package spec) */"}, {"sha": "c89eb1bc0fb598da08d96bd1e415ce7fbc1796c9", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e18b0e511a2008299790a08da0a291c0bb4752f/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=6e18b0e511a2008299790a08da0a291c0bb4752f", "patch": "@@ -31,7 +31,6 @@ with Lib;      use Lib;\n with Osint;    use Osint;\n with Opt;      use Opt;\n with Prepcomp; use Prepcomp;\n-with Types;    use Types;\n with Validsw;  use Validsw;\n with Stylesw;  use Stylesw;\n \n@@ -192,6 +191,7 @@ package body Switch.C is\n             when 'a' =>\n                Ptr := Ptr + 1;\n                Assertions_Enabled := True;\n+               Debug_Pragmas_Enabled := True;\n \n             --  Processing for A switch\n \n@@ -265,14 +265,6 @@ package body Switch.C is\n                   end if;\n                end loop;\n \n-               --  Make sure Zero_Cost_Exceptions is set if gnatdX set. This\n-               --  is for backwards compatibility with old versions and usage.\n-\n-               if Debug_Flag_XX then\n-                  Zero_Cost_Exceptions_Set := True;\n-                  Zero_Cost_Exceptions_Val := True;\n-               end if;\n-\n                return;\n \n             --  Processing for D switch\n@@ -485,6 +477,13 @@ package body Switch.C is\n                System_Extend_Unit := Empty;\n                Warning_Mode := Treat_As_Error;\n \n+               --  Set Ada 2005 mode explicitly. We don't want to rely on the\n+               --  implicit setting here, since for example, we want\n+               --  Preelaborate_05 treated as Preelaborate\n+\n+               Ada_Version := Ada_05;\n+               Ada_Version_Explicit := Ada_Version;\n+\n                --  Set default warnings for -gnatg (same set as -gnatwa)\n \n                Check_Unreferenced           := True;\n@@ -564,8 +563,8 @@ package body Switch.C is\n \n             when 'L' =>\n                Ptr := Ptr + 1;\n-               Zero_Cost_Exceptions_Set := True;\n-               Zero_Cost_Exceptions_Val := False;\n+               Osint.Fail\n+                 (\"-gnatL is no longer supported: consider using --RTS=sjlj\");\n \n             --  Processing for m switch\n \n@@ -1059,8 +1058,8 @@ package body Switch.C is\n \n             when 'Z' =>\n                Ptr := Ptr + 1;\n-               Zero_Cost_Exceptions_Set := True;\n-               Zero_Cost_Exceptions_Val := True;\n+               Osint.Fail\n+                 (\"-gnatZ is no longer supported: consider using --RTS=zcx\");\n \n             --  Processing for 83 switch\n "}]}