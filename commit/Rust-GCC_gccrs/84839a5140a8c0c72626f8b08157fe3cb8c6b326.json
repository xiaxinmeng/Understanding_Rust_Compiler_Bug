{"sha": "84839a5140a8c0c72626f8b08157fe3cb8c6b326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4MzlhNTE0MGE4YzBjNzI2MjZmOGIwODE1N2ZlM2NiOGM2YjMyNg==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2015-03-10T18:41:46Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2015-03-10T18:41:46Z"}, "message": "re PR libstdc++/64441 (A match_results returns an incorrect sub_match if the sub_match::matched is false)\n\n\tPR libstdc++/64441\n\t* include/bits/regex.h (match_results<>::size,\n\tmatch_results<>::position, match_results<>::str,\n\tmatch_results<>::operator[], match_results<>::prefix,\n\tmatch_results<>::suffix, match_results<>::end,\n\tmatch_results<>::_M_resize, match_results<>::_M_unmatched_sub,\n\tmatch_results<>::_M_prefix, match_results<>::_M_suffix): Remove\n\tglobal __unmatched_sub. Add unmatched submatch as part of\n\tmatch_results.\n\t* include/bits/regex.tcc (__regex_algo_impl<>, regex_replace<>,\n\tregex_iterator<>::operator++): Adjust to use match_results::_M_prefix.\n\t* testsuite/28_regex/match_results/out_of_range_submatches.cc:\n\tNew testcases.\n\nFrom-SVN: r221330", "tree": {"sha": "6fefe0bed48a4affec5e16ccff708e752acebcc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fefe0bed48a4affec5e16ccff708e752acebcc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84839a5140a8c0c72626f8b08157fe3cb8c6b326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84839a5140a8c0c72626f8b08157fe3cb8c6b326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84839a5140a8c0c72626f8b08157fe3cb8c6b326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84839a5140a8c0c72626f8b08157fe3cb8c6b326/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9315dff064f2ddbbc159d5afcee176cab06bfcba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9315dff064f2ddbbc159d5afcee176cab06bfcba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9315dff064f2ddbbc159d5afcee176cab06bfcba"}], "stats": {"total": 216, "additions": 170, "deletions": 46}, "files": [{"sha": "476650cb2b5c9c37032aaafd072cbe0154bf9d2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=84839a5140a8c0c72626f8b08157fe3cb8c6b326", "patch": "@@ -1,3 +1,19 @@\n+2015-03-10  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/64441\n+\t* include/bits/regex.h (match_results<>::size,\n+\tmatch_results<>::position, match_results<>::str,\n+\tmatch_results<>::operator[], match_results<>::prefix,\n+\tmatch_results<>::suffix, match_results<>::end,\n+\tmatch_results<>::_M_resize, match_results<>::_M_unmatched_sub,\n+\tmatch_results<>::_M_prefix, match_results<>::_M_suffix): Remove\n+\tglobal __unmatched_sub. Add unmatched submatch as part of\n+\tmatch_results.\n+\t* include/bits/regex.tcc (__regex_algo_impl<>, regex_replace<>,\n+\tregex_iterator<>::operator++): Adjust to use match_results::_M_prefix.\n+\t* testsuite/28_regex/match_results/out_of_range_submatches.cc:\n+\tNew testcases.\n+\n 2015-03-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64467"}, {"sha": "a23c2c9b3ceedd4f1d00a50f951625d134bf8c0f", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=84839a5140a8c0c72626f8b08157fe3cb8c6b326", "patch": "@@ -1483,17 +1483,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n   // [7.10] Class template match_results\n \n-  /*\n-   * Special sub_match object representing an unmatched sub-expression.\n-   */\n-  template<typename _Bi_iter>\n-    inline const sub_match<_Bi_iter>&\n-    __unmatched_sub()\n-    {\n-      static const sub_match<_Bi_iter> __unmatched = sub_match<_Bi_iter>();\n-      return __unmatched;\n-    }\n-\n   /**\n    * @brief The results of a match or search operation.\n    *\n@@ -1523,15 +1512,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     {\n     private:\n       /*\n-       * The vector base is empty if this does not represent a successful match.\n-       * Otherwise it contains n+3 elements where n is the number of marked\n+       * The vector base is empty if this does not represent a match (!ready());\n+       * Otherwise if it's a match failure, it contains 3 elements:\n+       * [0] unmatched\n+       * [1] prefix\n+       * [2] suffix\n+       * Otherwise it contains n+4 elements where n is the number of marked\n        * sub-expressions:\n        * [0] entire match\n        * [1] 1st marked subexpression\n        * ...\n        * [n] nth marked subexpression\n-       * [n+1] prefix\n-       * [n+2] suffix\n+       * [n+1] unmatched\n+       * [n+2] prefix\n+       * [n+3] suffix\n        */\n       typedef std::vector<sub_match<_Bi_iter>, _Alloc>     _Base_type;\n       typedef std::iterator_traits<_Bi_iter>   \t   \t   __iter_traits;\n@@ -1623,10 +1617,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       size_type\n       size() const\n-      {\n-      \tsize_type __size = _Base_type::size();\n-      \treturn (__size && _Base_type::operator[](0).matched) ? __size - 2 : 0;\n-      }\n+      { return _Base_type::empty() ? 0 : _Base_type::size() - 3; }\n \n       size_type\n       max_size() const\n@@ -1670,15 +1661,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * is zero (the default), in which case this function returns the offset\n        * from the beginning of the target sequence to the beginning of the\n        * match.\n-       *\n-       * Returns -1 if @p __sub is out of range.\n        */\n       difference_type\n       position(size_type __sub = 0) const\n-      {\n-\treturn __sub < size() ? std::distance(_M_begin,\n-\t\t\t\t\t      (*this)[__sub].first) : -1;\n-      }\n+      { return std::distance(_M_begin, (*this)[__sub].first); }\n \n       /**\n        * @brief Gets the match or submatch converted to a string type.\n@@ -1691,7 +1677,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       string_type\n       str(size_type __sub = 0) const\n-      { return (*this)[__sub].str(); }\n+      { return string_type((*this)[__sub]); }\n \n       /**\n        * @brief Gets a %sub_match reference for the match or submatch.\n@@ -1707,10 +1693,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       operator[](size_type __sub) const\n       {\n-      \t_GLIBCXX_DEBUG_ASSERT( ready() );\n-      \treturn __sub < size()\n-\t       ?  _Base_type::operator[](__sub)\n-\t       : __unmatched_sub<_Bi_iter>();\n+\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\treturn __sub < size()\n+\t       ? _Base_type::operator[](__sub)\n+\t       : _M_unmatched_sub();\n       }\n \n       /**\n@@ -1724,10 +1710,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       prefix() const\n       {\n-      \t_GLIBCXX_DEBUG_ASSERT( ready() );\n-      \treturn !empty()\n-      \t       ? _Base_type::operator[](_Base_type::size() - 2)\n-\t       : __unmatched_sub<_Bi_iter>();\n+\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\treturn !empty() ? _M_prefix() : _M_unmatched_sub();\n       }\n \n       /**\n@@ -1742,9 +1726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       suffix() const\n       {\n \t_GLIBCXX_DEBUG_ASSERT( ready() );\n-\treturn !empty()\n-\t       ? _Base_type::operator[](_Base_type::size() - 1)\n-\t       : __unmatched_sub<_Bi_iter>();\n+\treturn !empty() ? _M_suffix() : _M_unmatched_sub();\n       }\n \n       /**\n@@ -1766,7 +1748,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       const_iterator\n       end() const\n-      { return _Base_type::end() - 2; }\n+      { return _Base_type::end() - 3; }\n \n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection.\n@@ -1883,6 +1865,34 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t    const basic_regex<_Cp, _Rp>&,\n \t\t\t\t    regex_constants::match_flag_type);\n \n+      void\n+      _M_resize(unsigned int __size)\n+      { _Base_type::resize(__size + 3); }\n+\n+      const_reference\n+      _M_unmatched_sub() const\n+      { return _Base_type::operator[](_Base_type::size() - 3); }\n+\n+      sub_match<_Bi_iter>&\n+      _M_unmatched_sub()\n+      { return _Base_type::operator[](_Base_type::size() - 3); }\n+\n+      const_reference\n+      _M_prefix() const\n+      { return _Base_type::operator[](_Base_type::size() - 2); }\n+\n+      sub_match<_Bi_iter>&\n+      _M_prefix()\n+      { return _Base_type::operator[](_Base_type::size() - 2); }\n+\n+      const_reference\n+      _M_suffix() const\n+      { return _Base_type::operator[](_Base_type::size() - 1); }\n+\n+      sub_match<_Bi_iter>&\n+      _M_suffix()\n+      { return _Base_type::operator[](_Base_type::size() - 1); }\n+\n       _Bi_iter _M_begin;\n     };\n "}, {"sha": "823ad51c3e8b9139cdb339b070ab7690b0571228", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=84839a5140a8c0c72626f8b08157fe3cb8c6b326", "patch": "@@ -63,7 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       typename match_results<_BiIter, _Alloc>::_Base_type& __res = __m;\n       __m._M_begin = __s;\n-      __res.resize(__re._M_automaton->_M_sub_count() + 2);\n+      __m._M_resize(__re._M_automaton->_M_sub_count());\n       for (auto& __it : __res)\n \t__it.matched = false;\n \n@@ -99,8 +99,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  for (auto& __it : __res)\n \t    if (!__it.matched)\n \t      __it.first = __it.second = __e;\n-\t  auto& __pre = __res[__res.size()-2];\n-\t  auto& __suf = __res[__res.size()-1];\n+\t  auto& __pre = __m._M_prefix();\n+\t  auto& __suf = __m._M_suffix();\n \t  if (__match_mode)\n \t    {\n \t      __pre.matched = false;\n@@ -120,6 +120,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __suf.matched = (__suf.first != __suf.second);\n \t    }\n \t}\n+      else\n+\t{\n+\t  __m._M_resize(0);\n+\t  for (auto& __it : __res)\n+\t    {\n+\t      __it.matched = false;\n+\t      __it.first = __it.second = __e;\n+\t    }\n+\t}\n       return __ret;\n     }\n \n@@ -374,7 +383,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       auto __output = [&](size_t __idx)\n \t{\n-\t  auto& __sub = _Base_type::operator[](__idx);\n+\t  auto& __sub = (*this)[__idx];\n \t  if (__sub.matched)\n \t    __out = std::copy(__sub.first, __sub.second, __out);\n \t};\n@@ -425,9 +434,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      else if (__eat('&'))\n \t\t__output(0);\n \t      else if (__eat('`'))\n-\t\t__output(_Base_type::size()-2);\n+\t\t{\n+\t\t  auto& __sub = _M_prefix();\n+\t\t  if (__sub.matched)\n+\t\t    __out = std::copy(__sub.first, __sub.second, __out);\n+\t\t}\n \t      else if (__eat('\\''))\n-\t\t__output(_Base_type::size()-1);\n+\t\t{\n+\t\t  auto& __sub = _M_suffix();\n+\t\t  if (__sub.matched)\n+\t\t    __out = std::copy(__sub.first, __sub.second, __out);\n+\t\t}\n \t      else if (__fctyp.is(__ctype_type::digit, *__next))\n \t\t{\n \t\t  long __num = __traits.value(*__next, 10);\n@@ -532,7 +549,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   | regex_constants::match_continuous))\n \t\t    {\n \t\t      _GLIBCXX_DEBUG_ASSERT(_M_match[0].matched);\n-\t\t      auto& __prefix = _M_match.at(_M_match.size());\n+\t\t      auto& __prefix = _M_match._M_prefix();\n \t\t      __prefix.first = __prefix_first;\n \t\t      __prefix.matched = __prefix.first != __prefix.second;\n \t\t      // [28.12.1.4.5]\n@@ -547,7 +564,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (regex_search(__start, _M_end, _M_match, *_M_pregex, _M_flags))\n \t    {\n \t      _GLIBCXX_DEBUG_ASSERT(_M_match[0].matched);\n-\t      auto& __prefix = _M_match.at(_M_match.size());\n+\t      auto& __prefix = _M_match._M_prefix();\n \t      __prefix.first = __prefix_first;\n \t      __prefix.matched = __prefix.first != __prefix.second;\n \t      // [28.12.1.4.5]"}, {"sha": "2309b13f0dbe236399f98ad07103f2ac0fcb7eae", "filename": "libstdc++-v3/testsuite/28_regex/match_results/out_of_range_submatches.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84839a5140a8c0c72626f8b08157fe3cb8c6b326/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2Fout_of_range_submatches.cc?ref=84839a5140a8c0c72626f8b08157fe3cb8c6b326", "patch": "@@ -0,0 +1,81 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_regex.h>\n+\n+using namespace std;\n+using namespace __gnu_test;\n+\n+// libstdc++/64441\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const char s[] = \"abc\";\n+  const std::regex re(\"(\\\\d+)|(\\\\w+)\");\n+\n+  std::cmatch m;\n+  VERIFY(regex_search_debug(s, m, re));\n+\n+  std::tuple<bool, string, int, int> expected[] = {\n+      make_tuple(true, \"abc\", 0, 3),\n+      make_tuple(false, \"\", 3, 3),\n+      make_tuple(true, \"abc\", 0, 3),\n+      make_tuple(false, \"\", 3, 3),\n+  };\n+  for (size_t i = 0, n = m.size(); i <= n; ++i) {\n+      auto&& sub = m[i];\n+      VERIFY(sub.matched == std::get<0>(expected[i]));\n+      VERIFY(sub.str() == std::get<1>(expected[i]));\n+      VERIFY((sub.first - s) == std::get<2>(expected[i]));\n+      VERIFY((sub.second - s) == std::get<3>(expected[i]));\n+  }\n+}\n+\n+// libstdc++/64781\n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::match_results<const char*> m;\n+  const char s[] = \"a\";\n+  VERIFY(regex_search_debug(s, m, std::regex(\"a\")));\n+\n+  VERIFY(m.size() == 1);\n+\n+  VERIFY(m[0].first == s+0);\n+  VERIFY(m[0].second == s+1);\n+  VERIFY(m[0].matched == true);\n+\n+  VERIFY(m[42].first == s+1);\n+  VERIFY(m[42].second == s+1);\n+  VERIFY(m[42].matched == false);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}