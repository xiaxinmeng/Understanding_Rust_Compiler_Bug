{"sha": "a32fbc1558ffc585ee4c9a6178ffd8b409c2868d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyZmJjMTU1OGZmYzU4NWVlNGM5YTYxNzhmZmQ4YjQwOWMyODY4ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-05T18:36:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-05T18:36:04Z"}, "message": "(add_equal_note...\n\n(add_equal_note, expand_binop, expand_unop): Make copy of operands for\nREG_EQUAL note to avoid sharing RTL if called later than RTL\ngeneration.\n(emit_libcall_block, expand_fix): Likewise.\n\nFrom-SVN: r4338", "tree": {"sha": "adb12f6ecb66f61290decfd0d0ab31564216fd2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb12f6ecb66f61290decfd0d0ab31564216fd2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d/comments", "author": null, "committer": null, "parents": [{"sha": "2a46424aae4937edbf84d2076ca709cbe709acee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a46424aae4937edbf84d2076ca709cbe709acee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a46424aae4937edbf84d2076ca709cbe709acee"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "9f37c5233a4ade73e24396ceb6b1972d73ddc1ba", "filename": "gcc/optabs.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a32fbc1558ffc585ee4c9a6178ffd8b409c2868d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a32fbc1558ffc585ee4c9a6178ffd8b409c2868d", "patch": "@@ -259,9 +259,9 @@ add_equal_note (seq, target, code, op0, op1)\n \treturn 0;\n \n   if (GET_RTX_CLASS (code) == '1')\n-    note = gen_rtx (code, GET_MODE (target), op0);\n+    note = gen_rtx (code, GET_MODE (target), copy_rtx (op0));\n   else\n-    note = gen_rtx (code, GET_MODE (target), op0, op1);\n+    note = gen_rtx (code, GET_MODE (target), copy_rtx (op0), copy_rtx (op1));\n \n   REG_NOTES (XVECEXP (seq, 0, XVECLEN (seq, 0) - 1))\n     = gen_rtx (EXPR_LIST, REG_EQUAL, note,\n@@ -560,7 +560,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       end_sequence ();\n \n       if (binoptab->code != UNKNOWN)\n-\tequiv_value = gen_rtx (binoptab->code, mode, op0, op1);\n+\tequiv_value\n+\t  = gen_rtx (binoptab->code, mode, copy_rtx (op0), copy_rtx (op1));\n       else\n \tequiv_value = 0;\n \n@@ -667,7 +668,9 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t  \n \t  temp = emit_move_insn (target, target);\n \t  REG_NOTES (temp) = gen_rtx (EXPR_LIST, REG_EQUAL,\n-\t\t\t\t      gen_rtx (binoptab->code, mode, xop0, xop1),\n+\t\t\t\t      gen_rtx (binoptab->code, mode,\n+\t\t\t\t\t       copy_rtx (xop0),\n+\t\t\t\t\t       copy_rtx (xop1)),\n \t\t\t\t      REG_NOTES (temp));\n \t  return target;\n \t}\n@@ -840,7 +843,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n \t      temp = emit_move_insn (product, product);\n \t      REG_NOTES (temp) = gen_rtx (EXPR_LIST, REG_EQUAL,\n-\t\t\t\t\t  gen_rtx (MULT, mode, op0, op1),\n+\t\t\t\t\t  gen_rtx (MULT, mode, copy_rtx (op0),\n+\t\t\t\t\t\t   copy_rtx (op1)),\n \t\t\t\t\t  REG_NOTES (temp));\n \n \t      return product;\n@@ -1090,7 +1094,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       end_sequence ();\n \n       if (binoptab->code != UNKNOWN)\n-\tequiv_value = gen_rtx (binoptab->code, mode, op0, op1);\n+\tequiv_value\n+\t  = gen_rtx (binoptab->code, mode, copy_rtx (op0), copy_rtx (op1));\n       else\n \tequiv_value = 0;\n \t  \n@@ -1567,7 +1572,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n       end_sequence ();\n \n       emit_no_conflict_block (insns, target, op0, NULL_RTX,\n-\t\t\t      gen_rtx (unoptab->code, mode, op0));\n+\t\t\t      gen_rtx (unoptab->code, mode, copy_rtx (op0)));\n       return target;\n     }\n \n@@ -1611,7 +1616,7 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n       end_sequence ();\n \n       emit_no_conflict_block (seq, target, op0, 0,\n-\t\t\t      gen_rtx (unoptab->code, mode, op0));\n+\t\t\t      gen_rtx (unoptab->code, mode, copy_rtx (op0)));\n       return target;\n     }\n \n@@ -2127,7 +2132,8 @@ emit_libcall_block (insns, target, result, equiv)\n     }\n \n   last = emit_move_insn (target, result);\n-  REG_NOTES (last) = gen_rtx (EXPR_LIST, REG_EQUAL, equiv, REG_NOTES (last));\n+  REG_NOTES (last) = gen_rtx (EXPR_LIST,\n+\t\t\t      REG_EQUAL, copy_rtx (equiv), REG_NOTES (last));\n \n   if (prev == 0)\n     first = get_insns ();\n@@ -3081,7 +3087,8 @@ expand_fix (to, from, unsignedp)\n \t  insn = emit_move_insn (to, to);\n \t  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_EQUAL,\n \t\t\t\t      gen_rtx (UNSIGNED_FIX, GET_MODE (to),\n-\t\t\t\t\t       from), REG_NOTES (insn));\n+\t\t\t\t\t       copy_rtx (from)),\n+\t\t\t\t      REG_NOTES (insn));\n \n \t  return;\n \t}"}]}