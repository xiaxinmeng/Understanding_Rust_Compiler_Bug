{"sha": "244480db09260422e323000b8106bfbf951762ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0NDgwZGIwOTI2MDQyMmUzMjMwMDBiODEwNmJmYmY5NTE3NjJjZQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2005-09-05T07:55:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:55:06Z"}, "message": "layout.adb (SO_Ref_From_Expr): Change Subtype_Mark to Result_Definition.\n\n2005-09-01  Gary Dismukes  <dismukes@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* layout.adb (SO_Ref_From_Expr): Change Subtype_Mark to\n\tResult_Definition.\n\n\t* par-ch6.adb (P_Subprogram): Handle parsing of Access_Definitions in\n\tfunction specs.\n\tCall Set_Result_Definition instead of Set_Subtype_Mark.\n\t(P_Subprogram_Specification): Add parsing of anonymous access result\n\tplus null exclusions. Call Set_Result_Definition instead of\n\tSet_Subtype_Mark.\n\n\t* par-ch3.adb: Add support for LIMITED NEW for Ada 2005 AI-419\n\t(P_Access_Type_Definition): Add parsing for an anonymous access result\n\tsubtype, plus parsing for null exclusions. Call Set_Result_Definition\n\tinstead of Set_Subtype_Mark.\n\n\t* sinfo.adb: Add support for LIMITED NEW for Ada 2005 AI-419\n\t(Null_Exclusion_Present): Allow this flag for N_Function_Specification.\n\t(Result_Definition): New function for N_Function_Specifications.\n\t(Subtype_Mark): No longer allowed for N_Access_Function_Definition and\n\tN_Function_Specification.\n\t(Set_Null_Exclusion_Present): Allow this flag for\n\tN_Function_Specification.\n\t(Set_Result_Definition): New procedure for N_Function_Specifications.\n\t(Set_Subtype_Mark): No longer allowed for N_Access_Function_Definition\n\tand N_Function_Specification.\n\n\t* sinfo.ads: Update grammar rules for 9.7.2: Entry_Call_Alternative,\n\tProcedure_Or_Entry_Call; 9.7.4: Triggering_Statement.\n\tAdd support for LIMITED NEW for Ada 2005 AI-419\n\tUpdate the syntax of PARAMETER_AND_RESULT_PROFILE to reflect the new\n\tsyntax for anonymous access results.\n\tReplace Subtype_Mark field by Result_Definition in\n\tN_Function_Specification and N_Access_Definition specs.\n\tAdd Null_Exclusion_Present to spec of N_Function_Specification.\n\t(Result_Definition): New function for N_Function_Specification and\n\tN_Access_Function_Definition.\n\t(Set_Result_Definition): New procedure for N_Function_Specification and\n\tN_Access_Function_Definition.\n\n\t* sprint.adb (S_Print_Node_Actual): Change Subtype_Mark calls to\n\tResult_Definition for cases of N_Access_Function_Definition and\n\tN_Function_Specification.\n\tPrint \"not null\" if Null_Exclusion_Present on N_Function_Specification.\n\nFrom-SVN: r103869", "tree": {"sha": "ca03f56b83fd1b69463f7671fb71cbbae90118a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca03f56b83fd1b69463f7671fb71cbbae90118a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/244480db09260422e323000b8106bfbf951762ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244480db09260422e323000b8106bfbf951762ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244480db09260422e323000b8106bfbf951762ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244480db09260422e323000b8106bfbf951762ce/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec53a6da66d89c335c60585eb62ad469cf9922f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec53a6da66d89c335c60585eb62ad469cf9922f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec53a6da66d89c335c60585eb62ad469cf9922f2"}], "stats": {"total": 238, "additions": 189, "deletions": 49}, "files": [{"sha": "6f702c0f551bbecaca2a1255590620b3727c388b", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -3017,7 +3017,7 @@ package body Layout is\n                          Make_Defining_Identifier (Loc, Chars => Vname),\n                        Parameter_Type      =>\n                          New_Occurrence_Of (Vtype_Primary_View, Loc))),\n-                   Subtype_Mark =>\n+                   Result_Definition =>\n                      New_Occurrence_Of (Standard_Unsigned, Loc)),\n \n              Declarations => Empty_List,\n@@ -3039,7 +3039,8 @@ package body Layout is\n                Make_Function_Specification (Loc,\n                  Defining_Unit_Name => K,\n                    Parameter_Specifications => Empty_List,\n-                   Subtype_Mark => New_Occurrence_Of (Standard_Unsigned, Loc)),\n+                   Result_Definition =>\n+                     New_Occurrence_Of (Standard_Unsigned, Loc)),\n \n              Declarations => Empty_List,\n "}, {"sha": "d4e84a5da31c68e0e0410cf20e098e6a0ca95e24", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -644,6 +644,31 @@ package body Ch3 is\n                      Is_Derived_Iface := True;\n                   end if;\n \n+                  --  Ada 2005 (AI-419): LIMITED NEW\n+\n+               elsif Token = Tok_New then\n+                  if Ada_Version < Ada_05 then\n+                     Error_Msg_SP\n+                       (\"LIMITED in derived type is an Ada 2005 extension\");\n+                     Error_Msg_SP\n+                       (\"\\unit must be compiled with -gnat05 switch\");\n+                  end if;\n+\n+                  Typedef_Node := P_Derived_Type_Def_Or_Private_Ext_Decl;\n+                  Set_Limited_Present (Typedef_Node);\n+\n+                  if Nkind (Typedef_Node) = N_Derived_Type_Definition\n+                    and then Present (Record_Extension_Part (Typedef_Node))\n+                  then\n+                     End_Labl :=\n+                       Make_Identifier (Token_Ptr,\n+                                        Chars => Chars (Ident_Node));\n+                     Set_Comes_From_Source (End_Labl, False);\n+\n+                     Set_End_Label\n+                       (Record_Extension_Part (Typedef_Node), End_Labl);\n+                  end if;\n+\n                --  LIMITED PRIVATE is the only remaining possibility here\n \n                else\n@@ -853,6 +878,7 @@ package body Ch3 is\n    function P_Subtype_Declaration return Node_Id is\n       Decl_Node        : Node_Id;\n       Not_Null_Present : Boolean := False;\n+\n    begin\n       Decl_Node := New_Node (N_Subtype_Declaration, Token_Ptr);\n       Scan; -- past SUBTYPE\n@@ -1732,12 +1758,12 @@ package body Ch3 is\n    -------------------------------------------------------------------------\n \n    --  DERIVED_TYPE_DEFINITION ::=\n-   --    [abstract] new [NULL_EXCLUSION] parent_SUBTYPE_INDICATION\n+   --    [abstract] [limited] new [NULL_EXCLUSION] parent_SUBTYPE_INDICATION\n    --    [[AND interface_list] RECORD_EXTENSION_PART]\n \n    --  PRIVATE_EXTENSION_DECLARATION ::=\n    --     type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n-   --       [abstract] new ancestor_SUBTYPE_INDICATION\n+   --       [abstract] [limited] new ancestor_SUBTYPE_INDICATION\n    --       [AND interface_list] with PRIVATE;\n \n    --  RECORD_EXTENSION_PART ::= with RECORD_DEFINITION\n@@ -3579,6 +3605,8 @@ package body Ch3 is\n       Prot_Flag             : Boolean;\n       Not_Null_Present      : Boolean := False;\n       Type_Def_Node         : Node_Id;\n+      Result_Not_Null       : Boolean;\n+      Result_Node           : Node_Id;\n \n       procedure Check_Junk_Subprogram_Name;\n       --  Used in access to subprogram definition cases to check for an\n@@ -3649,8 +3677,32 @@ package body Ch3 is\n          Set_Parameter_Specifications (Type_Def_Node, P_Parameter_Profile);\n          Set_Protected_Present (Type_Def_Node, Prot_Flag);\n          TF_Return;\n-         Set_Subtype_Mark (Type_Def_Node, P_Subtype_Mark);\n-         No_Constraint;\n+\n+         Result_Not_Null := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n+\n+         --  Ada 2005 (AI-318-02)\n+\n+         if Token = Tok_Access then\n+            if Ada_Version < Ada_05 then\n+               Error_Msg_SC\n+                 (\"anonymous access result type is an Ada 2005 extension\");\n+               Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n+            end if;\n+\n+            Result_Node := P_Access_Definition (Result_Not_Null);\n+\n+         else\n+            Result_Node := P_Subtype_Mark;\n+            No_Constraint;\n+         end if;\n+\n+         --  Note: A null exclusion given on the result type needs to\n+         --  be coded by a distinct flag, since Null_Exclusion_Present\n+         --  on an access-to-function type pertains to a null exclusion\n+         --  on the access type itself (as set above). ???\n+         --  Set_Null_Exclusion_Present??? (Type_Def_Node, Result_Not_Null);\n+\n+         Set_Result_Definition (Type_Def_Node, Result_Node);\n \n       else\n          Type_Def_Node :="}, {"sha": "69960071e8566fb8859d87431dcd74a8a4751887", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -138,19 +138,20 @@ package body Ch6 is\n \n    function P_Subprogram (Pf_Flags : Pf_Rec) return Node_Id is\n       Specification_Node : Node_Id;\n-      Name_Node   : Node_Id;\n-      Fpart_List  : List_Id;\n-      Fpart_Sloc  : Source_Ptr;\n-      Return_Node : Node_Id;\n-      Inst_Node   : Node_Id;\n-      Body_Node   : Node_Id;\n-      Decl_Node   : Node_Id;\n-      Rename_Node : Node_Id;\n-      Absdec_Node : Node_Id;\n-      Stub_Node   : Node_Id;\n-      Fproc_Sloc  : Source_Ptr;\n-      Func        : Boolean;\n-      Scan_State  : Saved_Scan_State;\n+      Name_Node          : Node_Id;\n+      Fpart_List         : List_Id;\n+      Fpart_Sloc         : Source_Ptr;\n+      Result_Not_Null    : Boolean := False;\n+      Result_Node        : Node_Id;\n+      Inst_Node          : Node_Id;\n+      Body_Node          : Node_Id;\n+      Decl_Node          : Node_Id;\n+      Rename_Node        : Node_Id;\n+      Absdec_Node        : Node_Id;\n+      Stub_Node          : Node_Id;\n+      Fproc_Sloc         : Source_Ptr;\n+      Func               : Boolean;\n+      Scan_State         : Saved_Scan_State;\n \n       --  Flags for optional overriding indication. Two flags are needed,\n       --  to distinguish positive and negative overriding indicators from\n@@ -318,7 +319,7 @@ package body Ch6 is\n       --  since later RETURN statements will be valid in either case.\n \n       Check_Junk_Semicolon_Before_Return;\n-      Return_Node := Error;\n+      Result_Node := Error;\n \n       if Token = Tok_Return then\n          if not Func then\n@@ -327,8 +328,24 @@ package body Ch6 is\n          end if;\n \n          Scan; -- past RETURN\n-         Return_Node := P_Subtype_Mark;\n-         No_Constraint;\n+\n+         Result_Not_Null := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n+\n+         --  Ada 2005 (AI-318-02)\n+\n+         if Token = Tok_Access then\n+            if Ada_Version < Ada_05 then\n+               Error_Msg_SC\n+                 (\"anonymous access result type is an Ada 2005 extension\");\n+               Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n+            end if;\n+\n+            Result_Node := P_Access_Definition (Result_Not_Null);\n+\n+         else\n+            Result_Node := P_Subtype_Mark;\n+            No_Constraint;\n+         end if;\n \n       else\n          if Func then\n@@ -340,7 +357,9 @@ package body Ch6 is\n       if Func then\n          Specification_Node :=\n            New_Node (N_Function_Specification, Fproc_Sloc);\n-         Set_Subtype_Mark (Specification_Node, Return_Node);\n+\n+         Set_Null_Exclusion_Present (Specification_Node, Result_Not_Null);\n+         Set_Result_Definition (Specification_Node, Result_Node);\n \n       else\n          Specification_Node :=\n@@ -618,6 +637,8 @@ package body Ch6 is\n \n    function P_Subprogram_Specification return Node_Id is\n       Specification_Node : Node_Id;\n+      Result_Not_Null    : Boolean;\n+      Result_Node        : Node_Id;\n \n    begin\n       if Token = Tok_Function then\n@@ -629,8 +650,27 @@ package body Ch6 is\n            (Specification_Node, P_Parameter_Profile);\n          Check_Junk_Semicolon_Before_Return;\n          TF_Return;\n-         Set_Subtype_Mark (Specification_Node, P_Subtype_Mark);\n-         No_Constraint;\n+\n+         Result_Not_Null := P_Null_Exclusion;     --  Ada 2005 (AI-231)\n+\n+         --  Ada 2005 (AI-318-02)\n+\n+         if Token = Tok_Access then\n+            if Ada_Version < Ada_05 then\n+               Error_Msg_SC\n+                 (\"anonymous access result type is an Ada 2005 extension\");\n+               Error_Msg_SC (\"\\unit must be compiled with -gnat05 switch\");\n+            end if;\n+\n+            Result_Node := P_Access_Definition (Result_Not_Null);\n+\n+         else\n+            Result_Node := P_Subtype_Mark;\n+            No_Constraint;\n+         end if;\n+\n+         Set_Null_Exclusion_Present (Specification_Node, Result_Not_Null);\n+         Set_Result_Definition (Specification_Node, Result_Node);\n          return Specification_Node;\n \n       elsif Token = Tok_Procedure then"}, {"sha": "83e094caae37d49a2dfe38d975d9cf77575de33e", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -1668,6 +1668,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n         or else NT (N).Nkind = N_Record_Definition\n         or else NT (N).Nkind = N_With_Clause);\n@@ -1915,6 +1916,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Definition\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Discriminant_Specification\n+        or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n         or else NT (N).Nkind = N_Subtype_Declaration);\n@@ -2243,6 +2245,15 @@ package body Sinfo is\n       return Flag13 (N);\n    end Redundant_Use;\n \n+   function Result_Definition\n+     (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_Function_Definition\n+        or else NT (N).Nkind = N_Function_Specification);\n+      return Node4 (N);\n+   end Result_Definition;\n+\n    function Return_Type\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -2415,10 +2426,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Access_Definition\n-        or else NT (N).Nkind = N_Access_Function_Definition\n         or else NT (N).Nkind = N_Formal_Derived_Type_Definition\n         or else NT (N).Nkind = N_Formal_Object_Declaration\n-        or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Renaming_Declaration\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Subtype_Indication\n@@ -4220,6 +4229,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration\n         or else NT (N).Nkind = N_Private_Type_Declaration\n         or else NT (N).Nkind = N_Record_Definition\n         or else NT (N).Nkind = N_With_Clause);\n@@ -4467,6 +4477,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Component_Definition\n         or else NT (N).Nkind = N_Derived_Type_Definition\n         or else NT (N).Nkind = N_Discriminant_Specification\n+        or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n         or else NT (N).Nkind = N_Subtype_Declaration);\n@@ -4795,6 +4806,15 @@ package body Sinfo is\n       Set_Flag13 (N, Val);\n    end Set_Redundant_Use;\n \n+   procedure Set_Result_Definition\n+     (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Access_Function_Definition\n+        or else NT (N).Nkind = N_Function_Specification);\n+      Set_Node4_With_Parent (N, Val);\n+   end Set_Result_Definition;\n+\n    procedure Set_Return_Type\n       (N : Node_Id; Val : Node_Id) is\n    begin\n@@ -4967,10 +4987,8 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Access_Definition\n-        or else NT (N).Nkind = N_Access_Function_Definition\n         or else NT (N).Nkind = N_Formal_Derived_Type_Definition\n         or else NT (N).Nkind = N_Formal_Object_Declaration\n-        or else NT (N).Nkind = N_Function_Specification\n         or else NT (N).Nkind = N_Object_Renaming_Declaration\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Subtype_Indication"}, {"sha": "6bc6926bba19c01e01a51b1d6374f0a2c42d110d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -1120,6 +1120,11 @@ package Sinfo is\n    --    suppress any warnings that would otherwise be issued inside the\n    --    loop since they are probably not useful.\n \n+   --  Is_Overloaded (Flag5-Sem)\n+   --    A flag present in all expression nodes. Used temporarily during\n+   --    overloading determination. The setting of this flag is not\n+   --    relevant once overloading analysis is complete.\n+\n    --  Is_Power_Of_2_For_Shift (Flag13-Sem)\n    --    A flag present only in N_Op_Expon nodes. It is set when the\n    --    exponentiation is of the forma 2 ** N, where the type of N is\n@@ -2052,10 +2057,11 @@ package Sinfo is\n       ----------------------------------\n \n       --  DERIVED_TYPE_DEFINITION ::=\n-      --    [abstract] new [NULL_EXCLUSION] parent_SUBTYPE_INDICATION\n+      --    [abstract] [limited] new [NULL_EXCLUSION] parent_SUBTYPE_INDICATION\n       --    [[and INTERFACE_LIST] RECORD_EXTENSION_PART]\n \n-      --  Note: ABSTRACT, record extension part not permitted in Ada 83 mode\n+   --  Note: ABSTRACT, LIMITED and record extension part are not permitted\n+   --  in Ada 83 mode\n \n       --  Note: a record extension part is required if ABSTRACT is present\n \n@@ -2065,17 +2071,16 @@ package Sinfo is\n       --  Null_Exclusion_Present (Flag11) (set to False if not present)\n       --  Subtype_Indication (Node5)\n       --  Record_Extension_Part (Node3) (set to Empty if not present)\n-      --  Limited_Present (Flag17) set in interfaces\n+      --  Limited_Present (Flag17)\n       --  Task_Present (Flag5) set in task interfaces\n       --  Protected_Present (Flag6) set in protected interfaces\n       --  Synchronized_Present (Flag7) set in interfaces\n       --  Interface_List (List2) (set to No_List if none)\n       --  Interface_Present (Flag16) set in abstract interfaces\n \n-      --  Note: The attributes Limited_Present, Task_Present, Protected_Present\n-      --        Synchronized_Present, Interface_List and Interface_Present are\n-      --        used for abstract interfaces (see comment in the definition\n-      --        of INTERFACE_TYPE_DEFINITION)\n+   --  Note: Task_Present, Protected_Present, Synchronized_Present,\n+   --        Interface_List, and Interface_Present are used for abstract\n+   --        interfaces (see comments for INTERFACE_TYPE_DEFINITION).\n \n       ---------------------------\n       -- 3.5  Range Constraint --\n@@ -2531,10 +2536,9 @@ package Sinfo is\n       --  Interface_Present (Flag16) set in abstract interfaces\n       --  Interface_List (List2) (set to No_List if none)\n \n-      --  Note: The attributes Task_Present, Protected_Present, Synchronized\n-      --        _Present, Interface_List and Interface_Present are\n-      --        used for abstract interfaces (see comment in the definition\n-      --        of INTERFACE_TYPE_DEFINITION)\n+      --  Note: Task_Present, Protected_Present, Synchronized _Present,\n+      --        Interface_List and Interface_Present are used for abstract\n+      --        interfaces (see comments for INTERFACE_TYPE_DEFINITION).\n \n       -------------------------\n       -- 3.8  Component List --\n@@ -2731,7 +2735,7 @@ package Sinfo is\n       --  Null_Exclusion_Present (Flag11)\n       --  Protected_Present (Flag6)\n       --  Parameter_Specifications (List3) (set to No_List if no formal part)\n-      --  Subtype_Mark (Node4) result subtype\n+      --  Result_Definition (Node4) result subtype (subtype mark or access def)\n \n       --  N_Access_Procedure_Definition\n       --  Sloc points to ACCESS\n@@ -3913,7 +3917,8 @@ package Sinfo is\n       --  Defining_Unit_Name (Node1) (the designator)\n       --  Elaboration_Boolean (Node2-Sem)\n       --  Parameter_Specifications (List3) (set to No_List if no formal part)\n-      --  Subtype_Mark (Node4) for return type\n+      --  Null_Exclusion_Present (Flag11)\n+      --  Result_Definition (Node4) for result subtype\n       --  Generic_Parent (Node5-Sem)\n       --  Must_Override (Flag14) set if overriding indicator present\n       --  Must_Not_Override (Flag15) set if not_overriding indicator present\n@@ -4041,7 +4046,9 @@ package Sinfo is\n       -- 6.1  Parameter and Result Profile --\n       ---------------------------------------\n \n-      --  PARAMETER_AND_RESULT_PROFILE ::= [FORMAL_PART] return SUBTYPE_MARK\n+      --  PARAMETER_AND_RESULT_PROFILE ::=\n+      --    [FORMAL_PART] return [NULL_EXCLUSION] SUBTYPE_MARK\n+      --  | [FORMAL_PART] return ACCESS_DEFINITION\n \n       --  There is no explicit node in the tree for a parameter and result\n       --  profile. Instead the information appears directly in the parent.\n@@ -4315,10 +4322,11 @@ package Sinfo is\n \n       --  PRIVATE_EXTENSION_DECLARATION ::=\n       --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART] is\n-      --      [abstract] new ancestor_SUBTYPE_INDICATION\n+      --      [abstract] [limited] new ancestor_SUBTYPE_INDICATION\n       --      [and INTERFACE_LIST] with private;\n \n-      --  Note: private extension declarations are not allowed in Ada 83 mode\n+   --  Note: LIMITED, and private extension declarations are not allowed\n+   --        in Ada 83 mode.\n \n       --  N_Private_Extension_Declaration\n       --  Sloc points to TYPE\n@@ -4327,6 +4335,7 @@ package Sinfo is\n       --   discriminant part)\n       --  Unknown_Discriminants_Present (Flag13) set if (<>) discriminant\n       --  Abstract_Present (Flag4)\n+      --  Limited_Present (Flag17)\n       --  Subtype_Indication (Node5)\n       --  Interface_List (List2) (set to No_List if none)\n \n@@ -4956,7 +4965,10 @@ package Sinfo is\n       -----------------------------------\n \n       --  ENTRY_CALL_ALTERNATIVE ::=\n-      --    ENTRY_CALL_STATEMENT [SEQUENCE_OF_STATEMENTS]\n+      --    PROCEDURE_OR_ENTRY_CALL [SEQUENCE_OF_STATEMENTS]\n+\n+      --  PROCEDURE_OR_ENTRY_CALL ::=\n+      --    PROCEDURE_CALL_STATEMENT | ENTRY_CALL_STATEMENT\n \n       --  Gigi restriction: This node never appears\n \n@@ -5023,7 +5035,7 @@ package Sinfo is\n       -- 9.7.4  Triggering Statement --\n       ---------------------------------\n \n-      --  TRIGGERING_STATEMENT ::= ENTRY_CALL_STATEMENT | DELAY_STATEMENT\n+      --  TRIGGERING_STATEMENT ::= PROCEDURE_OR_ENTRY_CALL | DELAY_STATEMENT\n \n       ---------------------------\n       -- 9.7.4  Abortable Part --\n@@ -7742,6 +7754,9 @@ package Sinfo is\n    function Redundant_Use\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Result_Definition\n+     (N : Node_Id) return Node_Id;    -- Node4\n+\n    function Return_Type\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -8549,6 +8564,9 @@ package Sinfo is\n    procedure Set_Redundant_Use\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n+   procedure Set_Result_Definition\n+     (N : Node_Id; Val : Node_Id);            -- Node4\n+\n    procedure Set_Return_Type\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -8921,6 +8939,7 @@ package Sinfo is\n    pragma Inline (Reason);\n    pragma Inline (Record_Extension_Part);\n    pragma Inline (Redundant_Use);\n+   pragma Inline (Result_Definition);\n    pragma Inline (Return_Type);\n    pragma Inline (Reverse_Present);\n    pragma Inline (Right_Opnd);\n@@ -9186,6 +9205,7 @@ package Sinfo is\n    pragma Inline (Set_Reason);\n    pragma Inline (Set_Record_Extension_Part);\n    pragma Inline (Set_Redundant_Use);\n+   pragma Inline (Set_Result_Definition);\n    pragma Inline (Set_Return_Type);\n    pragma Inline (Set_Reverse_Present);\n    pragma Inline (Set_Right_Opnd);"}, {"sha": "58e61df896755220b0d71666dc32d7327a0234b0", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244480db09260422e323000b8106bfbf951762ce/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=244480db09260422e323000b8106bfbf951762ce", "patch": "@@ -749,7 +749,7 @@ package body Sprint is\n             Write_Str_With_Col_Check (\"function\");\n             Write_Param_Specs (Node);\n             Write_Str_With_Col_Check (\" return \");\n-            Sprint_Node (Subtype_Mark (Node));\n+            Sprint_Node (Result_Definition (Node));\n \n          when N_Access_Procedure_Definition =>\n \n@@ -1546,7 +1546,16 @@ package body Sprint is\n             Sprint_Node (Defining_Unit_Name (Node));\n             Write_Param_Specs (Node);\n             Write_Str_With_Col_Check (\" return \");\n-            Sprint_Node (Subtype_Mark (Node));\n+\n+            --  Ada 2005 (AI-231)\n+\n+            if Nkind (Result_Definition (Node)) /= N_Access_Definition\n+              and then Null_Exclusion_Present (Node)\n+            then\n+               Write_Str (\" not null \");\n+            end if;\n+\n+            Sprint_Node (Result_Definition (Node));\n \n          when N_Generic_Association =>\n             Set_Debug_Sloc;"}]}