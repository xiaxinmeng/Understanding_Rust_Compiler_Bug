{"sha": "da694a7701bc6c2defe09cc590166de096dd26da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2OTRhNzcwMWJjNmMyZGVmZTA5Y2M1OTAxNjZkZTA5NmRkMjZkYQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-04-03T09:44:28Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-04-03T09:44:28Z"}, "message": "simplify-rtx.c (simplify_binary_operation_1): Handle VEC_MERGE.\n\n2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* simplify-rtx.c (simplify_binary_operation_1) <VEC_SELECT>:\n\tHandle VEC_MERGE.\n\t(simplify_ternary_operation) <VEC_MERGE>: Use unsigned HOST_WIDE_INT\n\tfor masks. Test for side effects. Handle nested VEC_MERGE. Handle\n\tequal arguments.\n\ngcc/testsuite/\n\t* gcc.target/i386/merge-1.c: New testcase.\n\t* gcc.target/i386/avx2-vpblendd128-1.c: Make it non-trivial.\n\nFrom-SVN: r197394", "tree": {"sha": "ece4f79c1b1627fac4524994f1ce7a3179e31280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece4f79c1b1627fac4524994f1ce7a3179e31280"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da694a7701bc6c2defe09cc590166de096dd26da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da694a7701bc6c2defe09cc590166de096dd26da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da694a7701bc6c2defe09cc590166de096dd26da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da694a7701bc6c2defe09cc590166de096dd26da/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e7d7b3d5d5cefd5e19a736a83c3077f7c95baad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7d7b3d5d5cefd5e19a736a83c3077f7c95baad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7d7b3d5d5cefd5e19a736a83c3077f7c95baad"}], "stats": {"total": 132, "additions": 117, "deletions": 15}, "files": [{"sha": "33773594e296fe1cf42ff79b2d6320dbe3a4c450", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da694a7701bc6c2defe09cc590166de096dd26da", "patch": "@@ -1,3 +1,11 @@\n+2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1) <VEC_SELECT>:\n+\tHandle VEC_MERGE.\n+\t(simplify_ternary_operation) <VEC_MERGE>: Use unsigned HOST_WIDE_INT\n+\tfor masks. Test for side effects. Handle nested VEC_MERGE. Handle\n+\tequal arguments.\n+\n 2013-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/19449"}, {"sha": "791f91a34a87b5a0ed1a96e8ce421fe23dcf38aa", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=da694a7701bc6c2defe09cc590166de096dd26da", "patch": "@@ -3560,6 +3560,31 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t    return vec;\n \t}\n \n+      /* If we select elements in a vec_merge that all come from the same\n+\t operand, select from that operand directly.  */\n+      if (GET_CODE (op0) == VEC_MERGE)\n+\t{\n+\t  rtx trueop02 = avoid_constant_pool_reference (XEXP (op0, 2));\n+\t  if (CONST_INT_P (trueop02))\n+\t    {\n+\t      unsigned HOST_WIDE_INT sel = UINTVAL (trueop02);\n+\t      bool all_operand0 = true;\n+\t      bool all_operand1 = true;\n+\t      for (int i = 0; i < XVECLEN (trueop1, 0); i++)\n+\t\t{\n+\t\t  rtx j = XVECEXP (trueop1, 0, i);\n+\t\t  if (sel & (1 << UINTVAL (j)))\n+\t\t    all_operand1 = false;\n+\t\t  else\n+\t\t    all_operand0 = false;\n+\t\t}\n+\t      if (all_operand0 && !side_effects_p (XEXP (op0, 1)))\n+\t\treturn simplify_gen_binary (VEC_SELECT, mode, XEXP (op0, 0), op1);\n+\t      if (all_operand1 && !side_effects_p (XEXP (op0, 0)))\n+\t\treturn simplify_gen_binary (VEC_SELECT, mode, XEXP (op0, 1), op1);\n+\t    }\n+\t}\n+\n       return 0;\n     case VEC_CONCAT:\n       {\n@@ -5224,7 +5249,7 @@ simplify_ternary_operation (enum rtx_code code, enum machine_mode mode,\n {\n   unsigned int width = GET_MODE_PRECISION (mode);\n   bool any_change = false;\n-  rtx tem;\n+  rtx tem, trueop2;\n \n   /* VOIDmode means \"infinite\" precision.  */\n   if (width == 0)\n@@ -5370,33 +5395,74 @@ simplify_ternary_operation (enum rtx_code code, enum machine_mode mode,\n       gcc_assert (GET_MODE (op0) == mode);\n       gcc_assert (GET_MODE (op1) == mode);\n       gcc_assert (VECTOR_MODE_P (mode));\n-      op2 = avoid_constant_pool_reference (op2);\n-      if (CONST_INT_P (op2))\n+      trueop2 = avoid_constant_pool_reference (op2);\n+      if (CONST_INT_P (trueop2))\n \t{\n-          int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t  int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n \t  unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n-\t  int mask = (1 << n_elts) - 1;\n+\t  unsigned HOST_WIDE_INT sel = UINTVAL (trueop2);\n+\t  unsigned HOST_WIDE_INT mask;\n+\t  if (n_elts == HOST_BITS_PER_WIDE_INT)\n+\t    mask = -1;\n+\t  else\n+\t    mask = ((unsigned HOST_WIDE_INT) 1 << n_elts) - 1;\n \n-\t  if (!(INTVAL (op2) & mask))\n+\t  if (!(sel & mask) && !side_effects_p (op0))\n \t    return op1;\n-\t  if ((INTVAL (op2) & mask) == mask)\n+\t  if ((sel & mask) == mask && !side_effects_p (op1))\n \t    return op0;\n \n-\t  op0 = avoid_constant_pool_reference (op0);\n-\t  op1 = avoid_constant_pool_reference (op1);\n-\t  if (GET_CODE (op0) == CONST_VECTOR\n-\t      && GET_CODE (op1) == CONST_VECTOR)\n+\t  rtx trueop0 = avoid_constant_pool_reference (op0);\n+\t  rtx trueop1 = avoid_constant_pool_reference (op1);\n+\t  if (GET_CODE (trueop0) == CONST_VECTOR\n+\t      && GET_CODE (trueop1) == CONST_VECTOR)\n \t    {\n \t      rtvec v = rtvec_alloc (n_elts);\n \t      unsigned int i;\n \n \t      for (i = 0; i < n_elts; i++)\n-\t\tRTVEC_ELT (v, i) = (INTVAL (op2) & (1 << i)\n-\t\t\t\t    ? CONST_VECTOR_ELT (op0, i)\n-\t\t\t\t    : CONST_VECTOR_ELT (op1, i));\n+\t\tRTVEC_ELT (v, i) = ((sel & ((unsigned HOST_WIDE_INT) 1 << i))\n+\t\t\t\t    ? CONST_VECTOR_ELT (trueop0, i)\n+\t\t\t\t    : CONST_VECTOR_ELT (trueop1, i));\n \t      return gen_rtx_CONST_VECTOR (mode, v);\n \t    }\n+\n+\t  /* Replace (vec_merge (vec_merge a b m) c n) with (vec_merge b c n)\n+\t     if no element from a appears in the result.  */\n+\t  if (GET_CODE (op0) == VEC_MERGE)\n+\t    {\n+\t      tem = avoid_constant_pool_reference (XEXP (op0, 2));\n+\t      if (CONST_INT_P (tem))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT sel0 = UINTVAL (tem);\n+\t\t  if (!(sel & sel0 & mask) && !side_effects_p (XEXP (op0, 0)))\n+\t\t    return simplify_gen_ternary (code, mode, mode,\n+\t\t\t\t\t\t XEXP (op0, 1), op1, op2);\n+\t\t  if (!(sel & ~sel0 & mask) && !side_effects_p (XEXP (op0, 1)))\n+\t\t    return simplify_gen_ternary (code, mode, mode,\n+\t\t\t\t\t\t XEXP (op0, 0), op1, op2);\n+\t\t}\n+\t    }\n+\t  if (GET_CODE (op1) == VEC_MERGE)\n+\t    {\n+\t      tem = avoid_constant_pool_reference (XEXP (op1, 2));\n+\t      if (CONST_INT_P (tem))\n+\t\t{\n+\t\t  unsigned HOST_WIDE_INT sel1 = UINTVAL (tem);\n+\t\t  if (!(~sel & sel1 & mask) && !side_effects_p (XEXP (op1, 0)))\n+\t\t    return simplify_gen_ternary (code, mode, mode,\n+\t\t\t\t\t\t op0, XEXP (op1, 1), op2);\n+\t\t  if (!(~sel & ~sel1 & mask) && !side_effects_p (XEXP (op1, 1)))\n+\t\t    return simplify_gen_ternary (code, mode, mode,\n+\t\t\t\t\t\t op0, XEXP (op1, 0), op2);\n+\t\t}\n+\t    }\n \t}\n+\n+      if (rtx_equal_p (op0, op1)\n+\t  && !side_effects_p (op2) && !side_effects_p (op1))\n+\treturn op0;\n+\n       break;\n \n     default:"}, {"sha": "9ce315c5cf455877d79ca2fbe42126fd363e19ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da694a7701bc6c2defe09cc590166de096dd26da", "patch": "@@ -1,3 +1,8 @@\n+2013-04-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.target/i386/merge-1.c: New testcase.\n+\t* gcc.target/i386/avx2-vpblendd128-1.c: Make it non-trivial.\n+\n 2013-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/19449"}, {"sha": "a3fea9554e1fe84a5ddadece42aab5f47de75b4c", "filename": "gcc/testsuite/gcc.target/i386/avx2-vpblendd128-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vpblendd128-1.c?ref=da694a7701bc6c2defe09cc590166de096dd26da", "patch": "@@ -5,9 +5,10 @@\n #include <immintrin.h>\n \n __m128i x;\n+__m128i y;\n \n void extern\n avx2_test (void)\n {\n-  x = _mm_blend_epi32 (x, x, 13);\n+  x = _mm_blend_epi32 (x, y, 13);\n }"}, {"sha": "d52568510965678bf4bf09d2aa47519a76def9b4", "filename": "gcc/testsuite/gcc.target/i386/merge-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da694a7701bc6c2defe09cc590166de096dd26da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c?ref=da694a7701bc6c2defe09cc590166de096dd26da", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -msse2\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+f (double *r, __m128d x, __m128d y, __m128d z)\n+{\n+  __m128d t=_mm_move_sd(x,y);\n+  __m128d u=_mm_move_sd(t,z);\n+  *r = u[0];\n+}\n+\n+__m128d\n+g(__m128d x, __m128d y, __m128d z)\n+{\n+  __m128d t=_mm_move_sd(x,y);\n+  __m128d u=_mm_move_sd(t,z);\n+  return u;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movsd\" 1 } } */"}]}