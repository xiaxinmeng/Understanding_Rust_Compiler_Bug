{"sha": "affd4f3309d3ae078f95268e18b44293e096c9b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmZDRmMzMwOWQzYWUwNzhmOTUyNjhlMThiNDQyOTNlMDk2YzliOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-10-29T22:13:41Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-10-29T22:13:41Z"}, "message": "loop.h (struct induction): Rename ext_dependant to ext_dependent.\n\n\t* loop.h (struct induction): Rename ext_dependant to\n\text_dependent.\n\t* loop.c: Change all uses.\n\t(check_ext_dependant_givs): Rename to check_ext_dependent_givs.\n\tAll callers changed.\n\t* timevar.c (DEFTIMEVAR): Fix spelling of identifier__ parameter.\n\nFrom-SVN: r46620", "tree": {"sha": "d22145edf221e99e022f8fc75bc7ff7175dbca90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22145edf221e99e022f8fc75bc7ff7175dbca90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/affd4f3309d3ae078f95268e18b44293e096c9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affd4f3309d3ae078f95268e18b44293e096c9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affd4f3309d3ae078f95268e18b44293e096c9b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affd4f3309d3ae078f95268e18b44293e096c9b9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686deecbf3455251410ee0908cde6df818f0587c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686deecbf3455251410ee0908cde6df818f0587c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686deecbf3455251410ee0908cde6df818f0587c"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "2fa2928199ebaba53563e0b900ced30cd9316231", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=affd4f3309d3ae078f95268e18b44293e096c9b9", "patch": "@@ -1,3 +1,12 @@\n+2001-10-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* loop.h (struct induction): Rename ext_dependant to\n+\text_dependent.\n+\t* loop.c: Change all uses.\n+\t(check_ext_dependant_givs): Rename to check_ext_dependent_givs.\n+\tAll callers changed.\n+\t* timevar.c (DEFTIMEVAR): Fix spelling of identifier__ parameter.\n+\n 2001-10-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-parse.in (expr_no_commas, primary), c-typeck.c"}, {"sha": "baaa74b59ab9c32d594286d5030c09af8f609bb1", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=affd4f3309d3ae078f95268e18b44293e096c9b9", "patch": "@@ -208,7 +208,7 @@ static void record_giv PARAMS ((const struct loop *, struct induction *,\n \t\t\t\trtx, rtx, rtx, rtx, rtx, rtx, int,\n \t\t\t\tenum g_types, int, int, rtx *));\n static void update_giv_derive PARAMS ((const struct loop *, rtx));\n-static void check_ext_dependant_givs PARAMS ((struct iv_class *,\n+static void check_ext_dependent_givs PARAMS ((struct iv_class *,\n \t\t\t\t\t      struct loop_info *));\n static int basic_induction_var PARAMS ((const struct loop *, rtx,\n \t\t\t\t\tenum machine_mode, rtx, rtx,\n@@ -4332,7 +4332,7 @@ strength_reduce (loop, flags)\n \n       /* Check each extension dependent giv in this class to see if its\n \t root biv is safe from wrapping in the interior mode.  */\n-      check_ext_dependant_givs (bl, loop_info);\n+      check_ext_dependent_givs (bl, loop_info);\n \n       /* Combine all giv's for this iv_class.  */\n       combine_givs (regs, bl);\n@@ -4832,7 +4832,7 @@ record_biv (loop, v, insn, dest_reg, inc_val, mult_val, location,\n   v->dest_reg = dest_reg;\n   v->mult_val = mult_val;\n   v->add_val = inc_val;\n-  v->ext_dependant = NULL_RTX;\n+  v->ext_dependent = NULL_RTX;\n   v->location = location;\n   v->mode = GET_MODE (dest_reg);\n   v->always_computable = ! not_every_iteration;\n@@ -4934,7 +4934,7 @@ record_giv (loop, v, insn, src_reg, dest_reg, mult_val, add_val, ext_val,\n   v->dest_reg = dest_reg;\n   v->mult_val = mult_val;\n   v->add_val = add_val;\n-  v->ext_dependant = ext_val;\n+  v->ext_dependent = ext_val;\n   v->benefit = benefit;\n   v->location = location;\n   v->cant_derive = 0;\n@@ -5995,12 +5995,12 @@ simplify_giv_expr (loop, x, ext_val, benefit)\n \t    arg0 = simplify_giv_expr (loop, tem, ext_val, benefit);\n \t    if (*ext_val)\n \t      {\n-\t\tif (!v->ext_dependant)\n+\t\tif (!v->ext_dependent)\n \t\t  return arg0;\n \t      }\n \t    else\n \t      {\n-\t\t*ext_val = v->ext_dependant;\n+\t\t*ext_val = v->ext_dependent;\n \t\treturn arg0;\n \t      }\n \t    return 0;\n@@ -6217,7 +6217,7 @@ consec_sets_giv (loop, first_benefit, p, src_reg, dest_reg,\n   v->benefit = first_benefit;\n   v->cant_derive = 0;\n   v->derive_adjustment = 0;\n-  v->ext_dependant = NULL_RTX;\n+  v->ext_dependent = NULL_RTX;\n \n   REG_IV_TYPE (ivs, REGNO (dest_reg)) = GENERAL_INDUCT;\n   REG_IV_INFO (ivs, REGNO (dest_reg)) = v;\n@@ -6531,7 +6531,7 @@ combine_givs_p (g1, g2)\n    make the giv illegal.  */\n \n static void\n-check_ext_dependant_givs (bl, loop_info)\n+check_ext_dependent_givs (bl, loop_info)\n      struct iv_class *bl;\n      struct loop_info *loop_info;\n {\n@@ -6616,9 +6616,9 @@ check_ext_dependant_givs (bl, loop_info)\n \n   /* Invalidate givs that fail the tests.  */\n   for (v = bl->giv; v; v = v->next_iv)\n-    if (v->ext_dependant)\n+    if (v->ext_dependent)\n       {\n-\tenum rtx_code code = GET_CODE (v->ext_dependant);\n+\tenum rtx_code code = GET_CODE (v->ext_dependent);\n \tint ok = 0;\n \n \tswitch (code)\n@@ -6638,7 +6638,7 @@ check_ext_dependant_givs (bl, loop_info)\n \t       derived GIV.  */\n \t    if (se_ok && ze_ok)\n \t      {\n-\t\tenum machine_mode outer_mode = GET_MODE (v->ext_dependant);\n+\t\tenum machine_mode outer_mode = GET_MODE (v->ext_dependent);\n \t\tunsigned HOST_WIDE_INT max = GET_MODE_MASK (outer_mode) >> 1;\n \n \t\t/* We know from the above that both endpoints are nonnegative,\n@@ -6697,12 +6697,12 @@ extend_value_for_giv (v, value)\n      struct induction *v;\n      rtx value;\n {\n-  rtx ext_dep = v->ext_dependant;\n+  rtx ext_dep = v->ext_dependent;\n \n   if (! ext_dep)\n     return value;\n \n-  /* Recall that check_ext_dependant_givs verified that the known bounds\n+  /* Recall that check_ext_dependent_givs verified that the known bounds\n      of a biv did not overflow or wrap with respect to the extension for\n      the giv.  Therefore, constants need no additional adjustment.  */\n   if (CONSTANT_P (value) && GET_MODE (value) == VOIDmode)\n@@ -9797,9 +9797,9 @@ loop_giv_dump (v, file, verbose)\n   if (v->no_const_addval)\n     fprintf (file, \" ncav\");\n \n-  if (v->ext_dependant)\n+  if (v->ext_dependent)\n     {\n-      switch (GET_CODE (v->ext_dependant))\n+      switch (GET_CODE (v->ext_dependent))\n \t{\n \tcase SIGN_EXTEND:\n \t  fprintf (file, \" ext se\");"}, {"sha": "d6f83804948acc285a58b1a5fc1a8f498fd7a85e", "filename": "gcc/loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=affd4f3309d3ae078f95268e18b44293e096c9b9", "patch": "@@ -135,7 +135,7 @@ struct induction\n \t\t\t\t   subtracted from add_val when this giv\n \t\t\t\t   derives another.  This occurs when the\n \t\t\t\t   giv spans a biv update by incrementation.  */\n-  rtx ext_dependant;\t\t/* If nonzero, is a sign or zero extension\n+  rtx ext_dependent;\t\t/* If nonzero, is a sign or zero extension\n \t\t\t\t   if a biv on which this giv is dependent.  */\n   struct induction *next_iv;\t/* For givs, links together all givs that are\n \t\t\t\t   based on the same biv.  For bivs, links"}, {"sha": "4b026299b4f3abff7b0e9e7df5dc37386a29f6b7", "filename": "gcc/timevar.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/affd4f3309d3ae078f95268e18b44293e096c9b9/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=affd4f3309d3ae078f95268e18b44293e096c9b9", "patch": "@@ -232,8 +232,8 @@ init_timevar ()\n   memset ((void *) timevars, 0, sizeof (timevars));\n \n   /* Initialize the names of timing variables.  */\n-#define DEFTIMEVAR(identifer__, name__) \\\n-  timevars[identifer__].name = name__;\n+#define DEFTIMEVAR(identifier__, name__) \\\n+  timevars[identifier__].name = name__;\n #include \"timevar.def\"\n #undef DEFTIMEVAR\n "}]}