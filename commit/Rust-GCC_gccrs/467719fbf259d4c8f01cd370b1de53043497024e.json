{"sha": "467719fbf259d4c8f01cd370b1de53043497024e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3NzE5ZmJmMjU5ZDRjOGYwMWNkMzcwYjFkZTUzMDQzNDk3MDI0ZQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2016-08-06T05:04:07Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2016-08-06T05:04:07Z"}, "message": "match.pd ((intptr_t) x eq/ne CST to x eq/ne (typeof x) cst): Disable transform if operand's type is pointer to function or method.\n\n2016-08-06  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\t* match.pd ((intptr_t) x eq/ne CST to x eq/ne (typeof x) cst): Disable\n\ttransform if operand's type is pointer to function or method.\n\nFrom-SVN: r239190", "tree": {"sha": "d960feb43ecb26f38086a6e842c15adfc2f5f5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d960feb43ecb26f38086a6e842c15adfc2f5f5d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467719fbf259d4c8f01cd370b1de53043497024e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467719fbf259d4c8f01cd370b1de53043497024e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467719fbf259d4c8f01cd370b1de53043497024e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467719fbf259d4c8f01cd370b1de53043497024e/comments", "author": null, "committer": null, "parents": [{"sha": "e0f69f36ea1e068cb9aa48ea0d274b98530f2488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f69f36ea1e068cb9aa48ea0d274b98530f2488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f69f36ea1e068cb9aa48ea0d274b98530f2488"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "c72eb5ff5ec4bfff2171e48f043037249a6c6661", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467719fbf259d4c8f01cd370b1de53043497024e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467719fbf259d4c8f01cd370b1de53043497024e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467719fbf259d4c8f01cd370b1de53043497024e", "patch": "@@ -1,3 +1,8 @@\n+2016-08-06  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* match.pd ((intptr_t) x eq/ne CST to x eq/ne (typeof x) cst): Disable\n+\ttransform if operand's type is pointer to function or method.\n+\n 2016-08-05  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR tree-optimization/18046"}, {"sha": "ac7cfff0ae25106819e330f0a16d6bac71e72952", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467719fbf259d4c8f01cd370b1de53043497024e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467719fbf259d4c8f01cd370b1de53043497024e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=467719fbf259d4c8f01cd370b1de53043497024e", "patch": "@@ -2528,12 +2528,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    { neeq == EQ_EXPR ? boolean_false_node : boolean_true_node; })))\n \n /* PR70920: Transform (intptr_t)x eq/ne CST to x eq/ne (typeof x) CST.\n-   and (typeof ptr_cst) x eq/ne ptr_cst to x eq/ne (typeof x) CST */\n+   and (typeof ptr_cst) x eq/ne ptr_cst to x eq/ne (typeof x) CST.\n+   Disable the transform if either operand is pointer to function.\n+   This broke pr22051-2.c for arm where function pointer\n+   canonicalizaion is not wanted.  */\n+ \n (for cmp (ne eq)\n  (simplify\n   (cmp (convert @0) INTEGER_CST@1)\n-  (if ((POINTER_TYPE_P (TREE_TYPE (@0)) && INTEGRAL_TYPE_P (TREE_TYPE (@1)))\n-        || (INTEGRAL_TYPE_P (TREE_TYPE (@0)) && POINTER_TYPE_P (TREE_TYPE (@1))))\n+  (if ((POINTER_TYPE_P (TREE_TYPE (@0)) && !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (@0)))\n+\t&& INTEGRAL_TYPE_P (TREE_TYPE (@1)))\n+      || (INTEGRAL_TYPE_P (TREE_TYPE (@0)) && POINTER_TYPE_P (TREE_TYPE (@1))\n+\t  && !FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (@1)))))\n    (cmp @0 (convert @1)))))\n \n /* Non-equality compare simplifications from fold_binary  */"}]}