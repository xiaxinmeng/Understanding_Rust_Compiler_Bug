{"sha": "3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2M2I2NjNkNzJkMWJhODQzZDNkMWMyZjcyOWM5NDk2YzIzNmZkNQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-03-13T05:06:57Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-03-13T05:06:57Z"}, "message": "re PR libfortran/38199 (missed optimization: I/O performance)\n\n2014-03-12  Jerry DeLisle  <jvdelisle@gcc.gnu>\n\n\tPR libfortran/38199\n\t* io/read.c (read_decimal): Quickly skip spaces to avoid calls\n\tto next_char.\n\t* io/unit.c (is_trim_ok): New helper function to check various\n\tconditions to see if its OK to trim the internal unit string.\n\t(get_internal_unit): Use LEN_TRIM to shorten selected internal\n\tunit strings for optimizing READ. Enable this optimization for\n\tformatted READ.\n\t* io/list_read.c (finish_list_read): Don't call eat_line for\n\tinternal units.\n\nFrom-SVN: r208528", "tree": {"sha": "b980f94f900882f85d9c491d4432aa4e0a68277d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b980f94f900882f85d9c491d4432aa4e0a68277d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/comments", "author": null, "committer": null, "parents": [{"sha": "d731ee04423f788ff370a82eab69b4038bb14cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d731ee04423f788ff370a82eab69b4038bb14cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d731ee04423f788ff370a82eab69b4038bb14cdd"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "f32b34cd8a485c8245050dccda25275bff0d47b7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "patch": "@@ -1,3 +1,16 @@\n+2014-03-12  Jerry DeLisle  <jvdelisle@gcc.gnu>\n+\n+\tPR libfortran/38199\n+\t* io/read.c (read_decimal): Quickly skip spaces to avoid calls\n+\tto next_char.\n+\t* io/unit.c (is_trim_ok): New helper function to check various\n+\tconditions to see if its OK to trim the internal unit string.\n+\t(get_internal_unit): Use LEN_TRIM to shorten selected internal\n+\tunit strings for optimizing READ. Enable this optimization for\n+\tformatted READ.\n+\t* io/list_read.c (finish_list_read): Don't call eat_line for\n+\tinternal units.\n+\t \n 2014-03-08  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/38199"}, {"sha": "2467569d639679d406222592a0e1d175334fcaa8", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "patch": "@@ -2104,11 +2104,14 @@ finish_list_read (st_parameter_dt *dtp)\n       return;\n     }\n \n-  err = eat_line (dtp);\n-  if (err == LIBERROR_END)\n+  if (!is_internal_unit (dtp))\n     {\n-      free_line (dtp);\n-      hit_eof (dtp);\n+      err = eat_line (dtp);\n+      if (err == LIBERROR_END)\n+\t{\n+\t  free_line (dtp);\n+\t  hit_eof (dtp);\n+\t}\n     }\n }\n "}, {"sha": "64f2ddf49a194b6628a13c691b1591d3dddc1590", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "patch": "@@ -677,7 +677,13 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \t\n       if (c == ' ')\n         {\n-\t  if (dtp->u.p.blank_status == BLANK_NULL) continue;\n+\t  if (dtp->u.p.blank_status == BLANK_NULL)\n+\t    {\n+\t      /* Skip spaces.  */\n+\t      for ( ; w > 0; p++, w--)\n+\t\tif (*p != ' ') break; \n+\t      continue;\n+\t    }\n \t  if (dtp->u.p.blank_status == BLANK_ZERO) c = '0';\n         }\n         "}, {"sha": "e522195e5dddc06954ea957b9848faab773b6441", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b63b663d72d1ba843d3d1c2f729c9496c236fd5/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=3b63b663d72d1ba843d3d1c2f729c9496c236fd5", "patch": "@@ -375,6 +375,38 @@ find_or_create_unit (int n)\n }\n \n \n+/* Helper function to check rank, stride, format string, and namelist.\n+   This is used for optimization. You can't trim out blanks or shorten\n+   the string if trailing spaces are significant.  */\n+static bool\n+is_trim_ok (st_parameter_dt *dtp)\n+{\n+  /* Check rank and stride.  */\n+  if (dtp->internal_unit_desc\n+      && (GFC_DESCRIPTOR_RANK (dtp->internal_unit_desc) > 1\n+\t  || GFC_DESCRIPTOR_STRIDE(dtp->internal_unit_desc, 0) != 1))\n+    return false;\n+  /* Format strings can not have 'BZ' or '/'.  */\n+  if (dtp->common.flags & IOPARM_DT_HAS_FORMAT)\n+    {\n+      char *p = dtp->format;\n+      off_t i;\n+      if (dtp->common.flags & IOPARM_DT_HAS_BLANK)\n+\treturn false;\n+      for (i = 0; i < dtp->format_len; i++)\n+\t{\n+\t  if (p[i] == '/') return false;\n+\t  if (p[i] == 'b' || p[i] == 'B')\n+\t    if (p[i+1] == 'z' || p[i+1] == 'Z')\n+\t      return false;\n+\t}\n+    }\n+  if (dtp->u.p.ionml) /* A namelist.  */\n+    return false;\n+  return true;\n+}\n+\n+\n gfc_unit *\n get_internal_unit (st_parameter_dt *dtp)\n {\n@@ -402,6 +434,22 @@ get_internal_unit (st_parameter_dt *dtp)\n      some other file I/O unit.  */\n   iunit->unit_number = -1;\n \n+  /* As an optimization, adjust the unit record length to not\n+     include trailing blanks. This will not work under certain conditions\n+     where trailing blanks have significance.  */\n+  if (dtp->u.p.mode == READING && is_trim_ok (dtp))\n+    {\n+      int len;\n+      if (dtp->common.unit == 0)\n+\t  len = string_len_trim (dtp->internal_unit_len,\n+\t\t\t\t\t\t   dtp->internal_unit);\n+      else\n+\t  len = string_len_trim_char4 (dtp->internal_unit_len,\n+\t\t\t      (const gfc_char4_t*) dtp->internal_unit);\n+      dtp->internal_unit_len = len; \n+      iunit->recl = dtp->internal_unit_len;\n+    }\n+\n   /* Set up the looping specification from the array descriptor, if any.  */\n \n   if (is_array_io (dtp))\n@@ -414,27 +462,6 @@ get_internal_unit (st_parameter_dt *dtp)\n \n       start_record *= iunit->recl;\n     }\n-  else\n-    {\n-      /* If we are not processing an array, adjust the unit record length not\n-\t to include trailing blanks for list-formatted reads.  */\n-      if (dtp->u.p.mode == READING && !(dtp->common.flags & IOPARM_DT_HAS_FORMAT))\n-\t{\n-\t  if (dtp->common.unit == 0)\n-\t    {\n-\t      dtp->internal_unit_len =\n-\t\tstring_len_trim (dtp->internal_unit_len, dtp->internal_unit);\n-\t      iunit->recl = dtp->internal_unit_len;\n-\t    }\n-\t  else\n-\t    {\n-\t      dtp->internal_unit_len =\n-\t\tstring_len_trim_char4 (dtp->internal_unit_len,\n-\t\t\t\t       (const gfc_char4_t*) dtp->internal_unit);\n-\t      iunit->recl = dtp->internal_unit_len;\n-\t    }\n-\t}\n-    }\n \n   /* Set initial values for unit parameters.  */\n   if (dtp->common.unit)"}]}