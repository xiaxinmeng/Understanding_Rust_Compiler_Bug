{"sha": "d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkZTllMTM2ZjFkYmUzMDdlMWQ2ZWJiMDRiMjMxMzEwNTZjZmEyOQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2013-12-19T12:00:43Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2013-12-19T12:00:43Z"}, "message": "s390.c (s390_hotpatch_trampoline_halfwords_default): New constant\n\n2013-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (s390_hotpatch_trampoline_halfwords_default): New\n\tconstant\n\t(s390_hotpatch_trampoline_halfwords_max): New constant\n\t(s390_hotpatch_trampoline_halfwords): New static variable\n\t(get_hotpatch_attribute): New function\n\t(s390_handle_hotpatch_attribute): New function\n\t(s390_attribute_table): New target specific attribute table to implement\n\tthe hotpatch attribute\n\t(s390_option_override): Parse hotpatch options\n\t(s390_function_num_hotpatch_trampoline_halfwords): New function\n\t(s390_can_inline_p): Implement target hook to\n\tsuppress hotpatching for explicitly inlined functions\n\t(s390_asm_output_function_label): Generate hotpatch prologue\n\t(TARGET_ATTRIBUTE_TABLE): Define to implement target attribute table\n\t(TARGET_CAN_INLINE_P): Define to implement target hook\n\t* config/s390/s390.opt (mhotpatch): New options -mhotpatch, -mhotpatch=\n\t* config/s390/s390-protos.h (s390_asm_output_function_label): Add\n\tprototype\n\t* config/s390/s390.h (ASM_OUTPUT_FUNCTION_LABEL): Target specific\n\tfunction label generation for hotpatching\n\t(FUNCTION_BOUNDARY): Align functions to eight bytes\n\t* doc/extend.texi: Document hotpatch attribute\n\t* doc/invoke.texi: Document -mhotpatch option\n\n2013-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc/testsuite/gcc.target/s390/hotpatch-1.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-2.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-3.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-4.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-5.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-6.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-7.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-8.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-9.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-10.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-11.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-12.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c: New test\n\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c: New test\n\n\n\nCo-Authored-By: Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n\nFrom-SVN: r206111", "tree": {"sha": "1db5b5b063976f159ca72b6bc57086c6c957a104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db5b5b063976f159ca72b6bc57086c6c957a104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f62165dce49a99b72d729aae9f2d992a85c7765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f62165dce49a99b72d729aae9f2d992a85c7765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f62165dce49a99b72d729aae9f2d992a85c7765"}], "stats": {"total": 752, "additions": 750, "deletions": 2}, "files": [{"sha": "94170651d7f81b23fd20256da3828538f7d7972e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -1,3 +1,30 @@\n+2013-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_hotpatch_trampoline_halfwords_default): New\n+\tconstant\n+\t(s390_hotpatch_trampoline_halfwords_max): New constant\n+\t(s390_hotpatch_trampoline_halfwords): New static variable\n+\t(get_hotpatch_attribute): New function\n+\t(s390_handle_hotpatch_attribute): New function\n+\t(s390_attribute_table): New target specific attribute table to implement\n+\tthe hotpatch attribute\n+\t(s390_option_override): Parse hotpatch options\n+\t(s390_function_num_hotpatch_trampoline_halfwords): New function\n+\t(s390_can_inline_p): Implement target hook to\n+\tsuppress hotpatching for explicitly inlined functions\n+\t(s390_asm_output_function_label): Generate hotpatch prologue\n+\t(TARGET_ATTRIBUTE_TABLE): Define to implement target attribute table\n+\t(TARGET_CAN_INLINE_P): Define to implement target hook\n+\t* config/s390/s390.opt (mhotpatch): New options -mhotpatch, -mhotpatch=\n+\t* config/s390/s390-protos.h (s390_asm_output_function_label): Add\n+\tprototype\n+\t* config/s390/s390.h (ASM_OUTPUT_FUNCTION_LABEL): Target specific\n+\tfunction label generation for hotpatching\n+\t(FUNCTION_BOUNDARY): Align functions to eight bytes\n+\t* doc/extend.texi: Document hotpatch attribute\n+\t* doc/invoke.texi: Document -mhotpatch option\n+\n 2013-12-19  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/i386.c: Include cfgloop.h. "}, {"sha": "7b43ed01b65052bb602f646962bb7919040ba3ac", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -110,5 +110,6 @@ extern bool s390_decompose_shift_count (rtx, rtx *, HOST_WIDE_INT *);\n extern int s390_branch_condition_mask (rtx);\n extern int s390_compare_and_branch_condition_mask (rtx);\n extern bool s390_extzv_shift_ok (int, int, unsigned HOST_WIDE_INT);\n+extern void s390_asm_output_function_label (FILE *, const char *, tree);\n \n #endif /* RTX_CODE */"}, {"sha": "5319a69e6e61c0ec38451b272dce0881ee595f82", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -434,6 +434,65 @@ struct GTY(()) machine_function\n    bytes on a z10 (or higher) CPU.  */\n #define PREDICT_DISTANCE (TARGET_Z10 ? 384 : 2048)\n \n+static const int s390_hotpatch_trampoline_halfwords_default = 12;\n+static const int s390_hotpatch_trampoline_halfwords_max = 1000000;\n+static int s390_hotpatch_trampoline_halfwords = -1;\n+\n+/* Return the argument of the given hotpatch attribute or the default value if\n+   no argument is present.  */\n+\n+static inline int\n+get_hotpatch_attribute (tree hotpatch_attr)\n+{\n+  const_tree args;\n+\n+  args = TREE_VALUE (hotpatch_attr);\n+\n+  return (args) ?\n+    TREE_INT_CST_LOW (TREE_VALUE (args)):\n+    s390_hotpatch_trampoline_halfwords_default;\n+}\n+\n+/* Check whether the hotpatch attribute is applied to a function and, if it has\n+   an argument, the argument is valid.  */\n+\n+static tree\n+s390_handle_hotpatch_attribute (tree *node, tree name, tree args,\n+\t\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+  else if (args)\n+    {\n+      tree expr = TREE_VALUE (args);\n+\n+      if (TREE_CODE (expr) != INTEGER_CST\n+\t  || !INTEGRAL_TYPE_P (TREE_TYPE (expr))\n+\t  || TREE_INT_CST_HIGH (expr) != 0\n+\t  || TREE_INT_CST_LOW (expr) > (unsigned int)\n+\t  s390_hotpatch_trampoline_halfwords_max)\n+\t{\n+\t  error (\"requested %qE attribute is not a non-negative integer\"\n+\t\t \" constant or too large (max. %d)\", name,\n+\t\t s390_hotpatch_trampoline_halfwords_max);\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+static const struct attribute_spec s390_attribute_table[] = {\n+  { \"hotpatch\", 0, 1, true, false, false, s390_handle_hotpatch_attribute, false\n+  },\n+  /* End element.  */\n+  { NULL,        0, 0, false, false, false, NULL, false }\n+};\n+\n /* Return the alignment for LABEL.  We default to the -falign-labels\n    value except for the literal pool base label.  */\n int\n@@ -1622,6 +1681,46 @@ s390_init_machine_status (void)\n static void\n s390_option_override (void)\n {\n+  unsigned int i;\n+  cl_deferred_option *opt;\n+  vec<cl_deferred_option> *v =\n+    (vec<cl_deferred_option> *) s390_deferred_options;\n+\n+  if (v)\n+    FOR_EACH_VEC_ELT (*v, i, opt)\n+      {\n+\tswitch (opt->opt_index)\n+\t  {\n+\t  case OPT_mhotpatch:\n+\t    s390_hotpatch_trampoline_halfwords = (opt->value) ?\n+\t      s390_hotpatch_trampoline_halfwords_default : -1;\n+\t    break;\n+\t  case OPT_mhotpatch_:\n+\t    {\n+\t      int val;\n+\n+\t      val = integral_argument (opt->arg);\n+\t      if (val == -1)\n+\t\t{\n+\t\t  /* argument is not a plain number */\n+\t\t  error (\"argument to %qs should be a non-negative integer\",\n+\t\t\t \"-mhotpatch=\");\n+\t\t  break;\n+\t\t}\n+\t      else if (val > s390_hotpatch_trampoline_halfwords_max)\n+\t\t{\n+\t\t  error (\"argument to %qs is too large (max. %d)\",\n+\t\t\t \"-mhotpatch=\", s390_hotpatch_trampoline_halfwords_max);\n+\t\t  break;\n+\t\t}\n+\t      s390_hotpatch_trampoline_halfwords = val;\n+\t      break;\n+\t    }\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n+      }\n+\n   /* Set up function hooks.  */\n   init_machine_status = s390_init_machine_status;\n \n@@ -5347,6 +5446,102 @@ get_some_local_dynamic_name (void)\n   gcc_unreachable ();\n }\n \n+/* Returns -1 if the function should not be made hotpatchable.  Otherwise it\n+   returns a number >= 0 that is the desired size of the hotpatch trampoline\n+   in halfwords. */\n+\n+static int s390_function_num_hotpatch_trampoline_halfwords (tree decl,\n+\t\t\t\t\t\t\t    bool do_warn)\n+{\n+  tree attr;\n+\n+  if (DECL_DECLARED_INLINE_P (decl)\n+      || DECL_ARTIFICIAL (decl)\n+      || MAIN_NAME_P (DECL_NAME (decl)))\n+    {\n+      /* - Explicitly inlined functions cannot be hotpatched.\n+\t - Artificial functions need not be hotpatched.\n+\t - Making the main function hotpatchable is useless. */\n+      return -1;\n+    }\n+  attr = lookup_attribute (\"hotpatch\", DECL_ATTRIBUTES (decl));\n+  if (attr || s390_hotpatch_trampoline_halfwords >= 0)\n+    {\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  if (do_warn)\n+\t    warning (OPT_Wattributes, \"function %qE with the %qs attribute\"\n+\t\t     \" is not hotpatchable\", DECL_NAME (decl), \"always_inline\");\n+\t  return -1;\n+\t}\n+      else\n+\t{\n+\t  return (attr) ?\n+\t    get_hotpatch_attribute (attr) : s390_hotpatch_trampoline_halfwords;\n+\t}\n+    }\n+\n+  return -1;\n+}\n+\n+/* Hook to determine if one function can safely inline another.  */\n+\n+static bool\n+s390_can_inline_p (tree caller, tree callee)\n+{\n+  if (s390_function_num_hotpatch_trampoline_halfwords (callee, false) >= 0)\n+    return false;\n+\n+  return default_target_can_inline_p (caller, callee);\n+}\n+\n+/* Write the extra assembler code needed to declare a function properly.  */\n+\n+void\n+s390_asm_output_function_label (FILE *asm_out_file, const char *fname,\n+\t\t\t\ttree decl)\n+{\n+  int hotpatch_trampoline_halfwords = -1;\n+\n+  if (decl)\n+    {\n+      hotpatch_trampoline_halfwords =\n+\ts390_function_num_hotpatch_trampoline_halfwords (decl, true);\n+      if (hotpatch_trampoline_halfwords >= 0\n+\t  && decl_function_context (decl) != NULL_TREE)\n+\t{\n+\t  warning_at (0, DECL_SOURCE_LOCATION (decl),\n+\t\t      \"hotpatch_prologue is not compatible with nested\"\n+\t\t      \" function\");\n+\t  hotpatch_trampoline_halfwords = -1;\n+\t}\n+    }\n+\n+  if (hotpatch_trampoline_halfwords > 0)\n+    {\n+      int i;\n+\n+      /* Add a trampoline code area before the function label and initialize it\n+\t with two-byte nop instructions.  This area can be overwritten with code\n+\t that jumps to a patched version of the function.  */\n+      for (i = 0; i < hotpatch_trampoline_halfwords; i++)\n+\tasm_fprintf (asm_out_file, \"\\tnopr\\t%%r7\\n\");\n+      /* Note:  The function label must be aligned so that (a) the bytes of the\n+\t following nop do not cross a cacheline boundary, and (b) a jump address\n+\t (eight bytes for 64 bit targets, 4 bytes for 32 bit targets) can be\n+\t stored directly before the label without crossing a cacheline\n+\t boundary.  All this is necessary to make sure the trampoline code can\n+\t be changed atomically.  */\n+    }\n+\n+  ASM_OUTPUT_LABEL (asm_out_file, fname);\n+\n+  /* Output a four-byte nop if hotpatching is enabled.  This can be overwritten\n+     atomically with a relative backwards jump to the trampoline area.  */\n+  if (hotpatch_trampoline_halfwords >= 0)\n+    asm_fprintf (asm_out_file, \"\\tnop\\t0\\n\");\n+}\n+\n /* Output machine-dependent UNSPECs occurring in address constant X\n    in assembler syntax to stdio stream FILE.  Returns true if the\n    constant X could be recognized, false otherwise.  */\n@@ -11920,6 +12115,12 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_HARD_REGNO_SCRATCH_OK\n #define TARGET_HARD_REGNO_SCRATCH_OK s390_hard_regno_scratch_ok\n \n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE s390_attribute_table\n+\n+#undef TARGET_CAN_INLINE_P\n+#define TARGET_CAN_INLINE_P s390_can_inline_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "75b642b4c2b9d5bd8a5d9b8e017c462e4215b319", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -217,7 +217,7 @@ enum processor_flags\n #define STACK_BOUNDARY 64\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n-#define FUNCTION_BOUNDARY 32\n+#define FUNCTION_BOUNDARY 64\n \n /* There is no point aligning anything to a rounder boundary than this.  */\n #define BIGGEST_ALIGNMENT 64\n@@ -878,6 +878,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n } while (0)\n \n+#undef ASM_OUTPUT_FUNCTION_LABEL\n+#define ASM_OUTPUT_FUNCTION_LABEL(FILE, NAME, DECL) \\\n+  s390_asm_output_function_label (FILE, NAME, DECL)\n \n /* Miscellaneous parameters.  */\n "}, {"sha": "ef92f465baf8ac81c7455fede17be540c41bdd4d", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -96,6 +96,14 @@ mhard-float\n Target Report RejectNegative Negative(msoft-float) InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Enable hardware floating point\n \n+mhotpatch\n+Target Report Var(s390_deferred_options) Defer\n+Prepend the function label with 12 two-byte Nop instructions, and add a four byte Nop instruction after the label for hotpatching.\n+\n+mhotpatch=\n+Target RejectNegative Report Joined Var(s390_deferred_options) Defer\n+Prepend the function label with the given number of two-byte Nop instructions, and add a four byte Nop instruction after the label for hotpatching.\n+\n mlong-double-128\n Target Report RejectNegative Negative(mlong-double-64) Mask(LONG_DOUBLE_128)\n Use 128-bit long double"}, {"sha": "2ce00989bcbab0a21766619628816834494ba628", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -3266,6 +3266,17 @@ this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n \n+@item hotpatch [(@var{prologue-halfwords})]\n+@cindex @code{hotpatch} attribute\n+\n+On S/390 System z targets, you can use this function attribute to\n+make GCC generate a ``hot-patching'' function prologue.  The\n+@code{hotpatch} has no effect on funtions that are explicitly\n+inline.  If the @option{-mhotpatch} or @option{-mno-hotpatch}\n+command-line option is used at the same time, the @code{hotpatch}\n+attribute takes precedence.  If an argument is given, the maximum\n+allowed value is 1000000.\n+\n @item naked\n @cindex function without a prologue/epilogue code\n Use this attribute on the ARM, AVR, MCORE, MSP430, NDS32, RL78, RX and SPU"}, {"sha": "6e888bdbe45120aa1a3e6f57446aaf34a2eac73d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -933,7 +933,8 @@ See RS/6000 and PowerPC Options.\n -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle @gol\n -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch @gol\n -mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd @gol\n--mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard}\n+-mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard @gol\n+-mhotpatch[=@var{halfwords}] -mno-hotpatch}\n \n @emph{Score Options}\n @gccoptlist{-meb -mel @gol\n@@ -19777,6 +19778,21 @@ values have to be exact powers of 2 and @var{stack-size} has to be greater than\n In order to be efficient the extra code makes the assumption that the stack starts\n at an address aligned to the value given by @var{stack-size}.\n The @var{stack-guard} option can only be used in conjunction with @var{stack-size}.\n+\n+@item -mhotpatch[=@var{halfwords}]\n+@itemx -mno-hotpatch\n+@opindex mhotpatch\n+If the hotpatch option is enabled, a ``hot-patching'' function\n+prologue is generated for all functions in the compilation unit.\n+The funtion label is prepended with the given number of two-byte\n+Nop instructions (@var{halfwords}, maximum 1000000) or 12 Nop\n+instructions if no argument is present.  Functions with a\n+hot-patching prologue are never inlined automatically, and a\n+hot-patching prologue is never generated for functions functions\n+that are explicitly inline.\n+\n+This option can be overridden for individual functions with the\n+@code{hotpatch} attribute.\n @end table\n \n @node Score Options"}, {"sha": "3f9884fa91373e35be4a19002953418bac71af59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -1,3 +1,26 @@\n+2013-12-19  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-1.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-2.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-3.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-4.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-5.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-6.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-7.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-8.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-9.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-10.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-11.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-12.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c: New test\n+\t* gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c: New test\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* c-c++-common/cilk-plus/SE/ef_error.c: Add fopenmp effective"}, {"sha": "b9d6139b080a99ba24894f85b6409ddc64ff37d6", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-1.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 12 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "b91b3478ee312f0bd6fdc8b19aec43f0f149f611", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-10.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,21 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mno-hotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(2)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 2 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "491677342530e7f4f7ce3316a46433ef576164ad", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-11.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-11.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch -mno-hotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */"}, {"sha": "b3e9427d4e2734f3cc943330f607bd7d595238ba", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-12.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-12.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mno-hotpatch -mhotpatch=1 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "6cc29447de4a52f736d44693edfb6a32525d432d", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-2.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "9f0b2b756a41242bc26d688f8cb3aee198bce28d", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-3.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,20 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "c1dba20a37925645854f1f8a278551bc346f9f3e", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-4.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,26 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+inline void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((always_inline))\n+void hp2(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp2' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */"}, {"sha": "ec267d65aaeb9b94823126030d14678f1d54a3d3", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-5.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,21 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 12 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "5af090d03a66a7eb900726dd5488dd777b0f47ce", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-6.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,21 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(1)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 1 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "e73a510b4d6bd37d6fec7fc8607e4fd1398e7ff9", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-7.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,21 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(0)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "399aa7260b4fe3fed3319983aecec939ae56cd8d", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-8.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,28 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch))\n+inline void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch))\n+__attribute__ ((always_inline))\n+void hp2(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp2' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-not \"nopr\\t%r7\" } } */\n+/* { dg-final { scan-assembler-not \"nop\\t0\" } } */"}, {"sha": "5da675866b32657af2959c1e1f8fafeb6b7c6008", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-9.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-9.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,21 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1 --save-temps\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch(2)))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* Check number of occurences of certain instructions.  */\n+/* { dg-final { scan-assembler-times \"nopr\\t%r7\" 2 } } */\n+/* { dg-final { scan-assembler-times \"nop\\t0\" 1 } } */"}, {"sha": "45a2cc5dc20660a52553864442f6c6d26b8c7f0f", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-1.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,27 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+inline void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((always_inline))\n+void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "5947f564f53009b0881ecad2a266926c7de68c9e", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-2.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,27 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=0\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+inline void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((always_inline))\n+void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "e0c7f6f52c193a1b0e3931f686180354027c3105", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-3.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-3.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,27 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+inline void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((always_inline))\n+void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "d9f13425adc249ece9ad6c90238cb60905bebd5f", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-4.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,11 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=-1\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' should be a non-negative integer\" } */"}, {"sha": "53f7eac9e5405f213fa1946f36e99c2dcdda4f45", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-5.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,28 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1000000\" } */\n+\n+#include <stdio.h>\n+\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1000000)))\n+void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1000001)))\n+void hp3(void)\n+{ /* { dg-error \"requested 'hotpatch' attribute is not a non-negative integer constant or too large .max. 1000000.\" } */\n+  printf(\"hello, world!\\n\");\n+}\n+\n+int main (void)\n+{\n+  return 0;\n+}"}, {"sha": "cb10b66f0d3c6fd7acd32f97019d2453a390a530", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-6.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,11 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -mhotpatch=1000001\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-excess-errors \"argument to '-mhotpatch=' is too large .max. 1000000.\" } */"}, {"sha": "98ccb42c003d883a621a7f23959158456f72cc3b", "filename": "gcc/testsuite/gcc.target/s390/hotpatch-compile-7.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0de9e136f1dbe307e1d6ebb04b23131056cfa29/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhotpatch-compile-7.c?ref=d0de9e136f1dbe307e1d6ebb04b23131056cfa29", "patch": "@@ -0,0 +1,68 @@\n+/* Functional tests for the function hotpatching feature.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -mno-hotpatch\" } */\n+\n+#include <stdio.h>\n+\n+__attribute__ ((hotpatch))\n+void hp1(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch))\n+inline void hp2(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch))\n+__attribute__ ((always_inline))\n+void hp3(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp3' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+__attribute__ ((hotpatch(0)))\n+void hp4(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(0)))\n+inline void hp5(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(0)))\n+__attribute__ ((always_inline))\n+void hp6(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp6' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+__attribute__ ((hotpatch(1)))\n+void hp7(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1)))\n+inline void hp8(void)\n+{\n+  printf(\"hello, world!\\n\");\n+}\n+\n+__attribute__ ((hotpatch(1)))\n+__attribute__ ((always_inline))\n+void hp9(void) /* { dg-warning \"always_inline function might not be inlinable\" } */\n+{\n+  printf(\"hello, world!\\n\");\n+} /* { dg-warning \"function 'hp9' with the 'always_inline' attribute is not hotpatchable\" } */\n+\n+int main (void)\n+{\n+  return 0;\n+}"}]}