{"sha": "3961bedab9b39baa27cd7844ec4a1be5db348a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2MWJlZGFiOWIzOWJhYTI3Y2Q3ODQ0ZWM0YTFiZTVkYjM0OGExMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-26T09:53:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:31Z"}, "message": "[Ada] AI12-0074 View conversions and out parameters passed by copy\n\n2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Actuals): Check for AI12-0074.", "tree": {"sha": "85562baf8cd4d88a0a8c4080bf4552ea7c5cf917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85562baf8cd4d88a0a8c4080bf4552ea7c5cf917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3961bedab9b39baa27cd7844ec4a1be5db348a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961bedab9b39baa27cd7844ec4a1be5db348a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3961bedab9b39baa27cd7844ec4a1be5db348a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961bedab9b39baa27cd7844ec4a1be5db348a11/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4739f95b008ff61288e46a5f615e97fbdb06af01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4739f95b008ff61288e46a5f615e97fbdb06af01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4739f95b008ff61288e46a5f615e97fbdb06af01"}], "stats": {"total": 137, "additions": 81, "deletions": 56}, "files": [{"sha": "ee64248231adf507b9fdbc33c1753cc27fc81aa3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 81, "deletions": 56, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961bedab9b39baa27cd7844ec4a1be5db348a11/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961bedab9b39baa27cd7844ec4a1be5db348a11/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3961bedab9b39baa27cd7844ec4a1be5db348a11", "patch": "@@ -4010,69 +4010,94 @@ package body Sem_Res is\n               and then not Is_Class_Wide_Type (Etype (Expression (A)))\n               and then not Is_Interface (Etype (A))\n             then\n-               if Ekind (F) = E_In_Out_Parameter\n-                 and then Is_Array_Type (Etype (F))\n-               then\n-                  --  In a view conversion, the conversion must be legal in\n-                  --  both directions, and thus both component types must be\n-                  --  aliased, or neither (4.6 (8)).\n-\n-                  --  The extra rule in 4.6 (24.9.2) seems unduly restrictive:\n-                  --  the privacy requirement should not apply to generic\n-                  --  types, and should be checked in an instance. ARG query\n-                  --  is in order ???\n-\n-                  if Has_Aliased_Components (Etype (Expression (A))) /=\n-                     Has_Aliased_Components (Etype (F))\n+               declare\n+                  Expr_Typ : constant Entity_Id := Etype (Expression (A));\n+               begin\n+                  if Ekind (F) = E_In_Out_Parameter\n+                    and then Is_Array_Type (Etype (F))\n                   then\n-                     Error_Msg_N\n-                       (\"both component types in a view conversion must be\"\n-                         & \" aliased, or neither\", A);\n+                     --  In a view conversion, the conversion must be legal in\n+                     --  both directions, and thus both component types must be\n+                     --  aliased, or neither (4.6 (8)).\n \n-                  --  Comment here??? what set of cases???\n+                     --  The extra rule in 4.6 (24.9.2) seems unduly\n+                     --  restrictive: the privacy requirement should not apply\n+                     --  to generic types, and should be checked in an\n+                     --  instance. ARG query is in order ???\n \n-                  elsif\n-                     not Same_Ancestor (Etype (F), Etype (Expression (A)))\n-                  then\n-                     --  Check view conv between unrelated by ref array types\n-\n-                     if Is_By_Reference_Type (Etype (F))\n-                        or else Is_By_Reference_Type (Etype (Expression (A)))\n+                     if Has_Aliased_Components (Expr_Typ) /=\n+                        Has_Aliased_Components (Etype (F))\n                      then\n                         Error_Msg_N\n-                          (\"view conversion between unrelated by reference \"\n-                           & \"array types not allowed (\\'A'I-00246)\", A);\n-\n-                     --  In Ada 2005 mode, check view conversion component\n-                     --  type cannot be private, tagged, or volatile. Note\n-                     --  that we only apply this to source conversions. The\n-                     --  generated code can contain conversions which are\n-                     --  not subject to this test, and we cannot extract the\n-                     --  component type in such cases since it is not present.\n-\n-                     elsif Comes_From_Source (A)\n-                       and then Ada_Version >= Ada_2005\n-                     then\n-                        declare\n-                           Comp_Type : constant Entity_Id :=\n-                                         Component_Type\n-                                           (Etype (Expression (A)));\n-                        begin\n-                           if (Is_Private_Type (Comp_Type)\n-                                 and then not Is_Generic_Type (Comp_Type))\n-                             or else Is_Tagged_Type (Comp_Type)\n-                             or else Is_Volatile (Comp_Type)\n-                           then\n-                              Error_Msg_N\n-                                (\"component type of a view conversion cannot\"\n-                                   & \" be private, tagged, or volatile\"\n-                                   & \" (RM 4.6 (24))\",\n-                                   Expression (A));\n-                           end if;\n-                        end;\n+                          (\"both component types in a view conversion must be\"\n+                            & \" aliased, or neither\", A);\n+\n+                     --  Comment here??? what set of cases???\n+\n+                     elsif not Same_Ancestor (Etype (F), Expr_Typ) then\n+                        --  Check view conv between unrelated by ref array\n+                        --  types.\n+\n+                        if Is_By_Reference_Type (Etype (F))\n+                           or else Is_By_Reference_Type (Expr_Typ)\n+                        then\n+                           Error_Msg_N\n+                             (\"view conversion between unrelated by reference \"\n+                              & \"array types not allowed (\\'A'I-00246)\", A);\n+\n+                        --  In Ada 2005 mode, check view conversion component\n+                        --  type cannot be private, tagged, or volatile. Note\n+                        --  that we only apply this to source conversions. The\n+                        --  generated code can contain conversions which are\n+                        --  not subject to this test, and we cannot extract the\n+                        --  component type in such cases since it is not\n+                        --  present.\n+\n+                        elsif Comes_From_Source (A)\n+                          and then Ada_Version >= Ada_2005\n+                        then\n+                           declare\n+                              Comp_Type : constant Entity_Id :=\n+                                            Component_Type (Expr_Typ);\n+                           begin\n+                              if (Is_Private_Type (Comp_Type)\n+                                    and then not Is_Generic_Type (Comp_Type))\n+                                or else Is_Tagged_Type (Comp_Type)\n+                                or else Is_Volatile (Comp_Type)\n+                              then\n+                                 Error_Msg_N\n+                                   (\"component type of a view conversion \" &\n+                                    \"cannot be private, tagged, or volatile\" &\n+                                    \" (RM 4.6 (24))\",\n+                                    Expression (A));\n+                              end if;\n+                           end;\n+                        end if;\n                      end if;\n+\n+                  --  AI12-0074\n+                  --  Check 6.4.1: If the mode is out, the actual parameter is\n+                  --  a view conversion, and the type of the formal parameter\n+                  --  is a scalar type that has the Default_Value aspect\n+                  --  specified, then\n+                  --    - there shall exist a type (other than a root numeric\n+                  --      type) that is an ancestor of both the target type and\n+                  --      the operand type; and\n+                  --    - the type of the operand of the conversion shall have\n+                  --      the Default_Value aspect specified.\n+\n+                  elsif Ekind (F) = E_Out_Parameter\n+                    and then Is_Scalar_Type (Etype (F))\n+                    and then Present (Default_Aspect_Value (Etype (F)))\n+                    and then\n+                      (not Same_Ancestor (Etype (F), Expr_Typ)\n+                         or else No (Default_Aspect_Value (Expr_Typ)))\n+                  then\n+                     Error_Msg_N\n+                       (\"view conversion between unrelated types with \"\n+                        & \"Default_Value not allowed (RM 6.4.1)\", A);\n                   end if;\n-               end if;\n+               end;\n \n                --  Resolve expression if conversion is all OK\n "}]}