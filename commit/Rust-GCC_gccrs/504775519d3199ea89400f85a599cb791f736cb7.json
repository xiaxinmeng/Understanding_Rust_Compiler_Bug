{"sha": "504775519d3199ea89400f85a599cb791f736cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0Nzc1NTE5ZDMxOTllYTg5NDAwZjg1YTU5OWNiNzkxZjczNmNiNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-11T11:10:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:10:27Z"}, "message": "[Ada] Complete implementation of RM C.6(19) clause\n\nThis ensures that the compiler fully implements the C.6(19) clause of\nthe Ada Reference Manual and gives a warning when the clause does change\nthe passing mechanism of the affected parameter.\n\n2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* fe.h (Is_Atomic_Object): Declare.\n\t(Is_Volatile_Object): Likewise.\n\t* gcc-interface/trans.c (atomic_or_volatile_copy_required_p):\n\tNew.\n\t(Call_to_gnu): Generate a copy for an actual parameter passed by\n\treference if the conditions set forth by RM C.6(19) are met and\n\tspecificially deal with an atomic actual parameter.\n\ngcc/testsuite/\n\n\t* gnat.dg/atomic11.adb, gnat.dg/atomic11_pkg1.ads,\n\tgnat.dg/atomic11_pkg2.ads: New testcase.\n\nFrom-SVN: r266993", "tree": {"sha": "ccc7225b608c67e93265f33bc741e4dac5c7e268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc7225b608c67e93265f33bc741e4dac5c7e268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/504775519d3199ea89400f85a599cb791f736cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504775519d3199ea89400f85a599cb791f736cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504775519d3199ea89400f85a599cb791f736cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504775519d3199ea89400f85a599cb791f736cb7/comments", "author": null, "committer": null, "parents": [{"sha": "f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e0577c2a2d3463ec8e05ec187ed7ad4f906159"}], "stats": {"total": 116, "additions": 110, "deletions": 6}, "files": [{"sha": "8c5d2a9b11e4624995ac94a779692563fb5726eb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -1,3 +1,13 @@\n+2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Is_Atomic_Object): Declare.\n+\t(Is_Volatile_Object): Likewise.\n+\t* gcc-interface/trans.c (atomic_or_volatile_copy_required_p):\n+\tNew.\n+\t(Call_to_gnu): Generate a copy for an actual parameter passed by\n+\treference if the conditions set forth by RM C.6(19) are met and\n+\tspecificially deal with an atomic actual parameter.\n+\n 2018-12-11  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_util.adb (Is_Subprogram_Stub_Without_Prior_Declaration):"}, {"sha": "cbd3ee2558763b04e8edfbf60b857fe3b31369da", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -281,13 +281,17 @@ extern Boolean Is_OK_Static_Subtype\t(Entity_Id);\n #define Defining_Entity\t\t\tsem_util__defining_entity\n #define First_Actual\t\t\tsem_util__first_actual\n #define Next_Actual\t\t\tsem_util__next_actual\n+#define Is_Atomic_Object\t\tsem_util__is_atomic_object\n #define Is_Variable_Size_Record \tsem_util__is_variable_size_record\n+#define Is_Volatile_Object\t\tsem_util__is_volatile_object\n #define Requires_Transient_Scope\tsem_util__requires_transient_scope\n \n extern Entity_Id Defining_Entity\t(Node_Id);\n extern Node_Id First_Actual\t\t(Node_Id);\n extern Node_Id Next_Actual\t\t(Node_Id);\n+extern Boolean Is_Atomic_Object \t(Node_Id);\n extern Boolean Is_Variable_Size_Record \t(Entity_Id Id);\n+extern Boolean Is_Volatile_Object \t(Node_Id);\n extern Boolean Requires_Transient_Scope\t(Entity_Id);\n \n /* sinfo: */"}, {"sha": "c2553d83ec82b2522bb9e50f31fb3fc8c4f56309", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -4936,6 +4936,35 @@ create_init_temporary (const char *prefix, tree gnu_init, tree *gnu_init_stmt,\n   return gnu_temp;\n }\n \n+/* Return whether ACTUAL parameter corresponding to FORMAL_TYPE must be passed\n+   by copy in a call as per RM C.6(19).  Note that we use the same predicates\n+   as in the front-end for RM C.6(12) because it's purely a legality issue.  */\n+\n+static bool\n+atomic_or_volatile_copy_required_p (Node_Id actual, Entity_Id formal_type)\n+{\n+  /* We should not have a scalar type here because such a type is passed\n+     by copy.  But the Interlocked routines in System.Aux_DEC force some\n+     of the their scalar parameters to be passed by reference so we need\n+     to preserve that if we do not want to break the interface.  */\n+  if (Is_Scalar_Type (formal_type))\n+    return false;\n+\n+  if (Is_Atomic_Object (actual) && !Is_Atomic (formal_type))\n+    {\n+      post_error (\"?atomic actual passed by copy (RM C.6(19))\", actual);\n+      return true;\n+    }\n+\n+  if (Is_Volatile_Object (actual) && !Is_Volatile (formal_type))\n+    {\n+      post_error (\"?volatile actual passed by copy (RM C.6(19))\", actual);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Subroutine of gnat_to_gnu to translate gnat_node, either an N_Function_Call\n    or an N_Procedure_Call_Statement, to a GCC tree, which is returned.\n    GNU_RESULT_TYPE_P is a pointer to where we should place the result type.\n@@ -5150,13 +5179,18 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t      = build_compound_expr (TREE_TYPE (gnu_name), init, gnu_name);\n \t}\n \n-      /* If we are passing a non-addressable parameter by reference, pass the\n-\t address of a copy.  In the In Out or Out case, set up to copy back\n-\t out after the call.  */\n+      /* If we are passing a non-addressable actual parameter by reference,\n+\t pass the address of a copy and, in the In Out or Out case, set up\n+\t to copy back after the call.  We also need to do that if the actual\n+\t parameter is atomic or volatile but the formal parameter is not.  */\n       if (is_by_ref_formal_parm\n \t  && (gnu_name_type = gnat_to_gnu_type (Etype (gnat_name)))\n-\t  && !addressable_p (gnu_name, gnu_name_type))\n+\t  && (!addressable_p (gnu_name, gnu_name_type)\n+\t      || (Comes_From_Source (gnat_node)\n+\t\t  && atomic_or_volatile_copy_required_p (gnat_actual,\n+\t\t\t\t\t\t\t gnat_formal_type))))\n \t{\n+\t  const bool atomic_p = atomic_access_required_p (gnat_actual, &sync);\n \t  tree gnu_orig = gnu_name, gnu_temp, gnu_stmt;\n \n \t  /* Do not issue warnings for CONSTRUCTORs since this is not a copy\n@@ -5236,6 +5270,8 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t    }\n \n \t  /* Create an explicit temporary holding the copy.  */\n+\t  if (atomic_p)\n+\t    gnu_name = build_atomic_load (gnu_name, sync);\n \t  gnu_temp\n \t    = create_init_temporary (\"A\", gnu_name, &gnu_stmt, gnat_actual);\n \n@@ -5256,8 +5292,13 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t     (TREE_OPERAND (TREE_OPERAND (gnu_orig, 1), 1)))\n \t\tgnu_orig = TREE_OPERAND (gnu_orig, 2);\n \n-\t      gnu_stmt\n-\t\t= build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_orig, gnu_temp);\n+\t      if (atomic_p)\n+\t\tgnu_stmt\n+\t\t  = build_atomic_store (gnu_orig, gnu_temp, sync);\n+\t      else\n+\t\tgnu_stmt\n+\t\t  = build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_orig,\n+\t\t\t\t     gnu_temp);\n \t      set_expr_location_from_node (gnu_stmt, gnat_node);\n \n \t      append_to_statement_list (gnu_stmt, &gnu_after_list);"}, {"sha": "8591d318f56cabb2c84f6b70f9c6de6cac6355e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -1,3 +1,8 @@\n+2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/atomic11.adb, gnat.dg/atomic11_pkg1.ads,\n+\tgnat.dg/atomic11_pkg2.ads: New testcase.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/aspect1.adb, gnat.dg/aspect1_horizontal.adb,"}, {"sha": "18a3191e1cb2a8a8fdda8887c44f38a37ade0091", "filename": "gcc/testsuite/gnat.dg/atomic11.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11.adb?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -0,0 +1,19 @@\n+--  { dg-do compile }\n+\n+with Atomic11_Pkg1; use Atomic11_Pkg1;\n+\n+procedure Atomic11 is\n+\n+  R1 : Rec1;\n+  pragma Atomic (R1);\n+\n+  R2 : Rec2;\n+  pragma Volatile (R2);\n+\n+begin\n+  R1.I := 0;\n+  Proc1 (R1);    -- { dg-warning \"atomic actual passed by copy\" }\n+  R2.A(1) := 0;\n+  Proc1 (R1);    -- { dg-warning \"atomic actual passed by copy\" }\n+  Proc2 (R2);    -- { dg-warning \"volatile actual passed by copy\" }\n+end;"}, {"sha": "574fd6329b5eae29fae845855656c1e949c56264", "filename": "gcc/testsuite/gnat.dg/atomic11_pkg1.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg1.ads?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -0,0 +1,20 @@\n+with Atomic11_Pkg2;\n+\n+package Atomic11_Pkg1 is\n+\n+  type Rec1 is record\n+    I : Integer;\n+  end record;\n+\n+  procedure Proc1 (R : Rec1);\n+  pragma Import (C, Proc1);\n+\n+  type Arr is array (Positive range <>) of Integer;\n+\n+  type Rec2 is record\n+    A : Arr (1 .. Atomic11_Pkg2.Max);\n+  end record;\n+\n+  procedure Proc2 (R : Rec2);\n+\n+end Atomic11_Pkg1;"}, {"sha": "681bcab8a6530c5d7f0b11e66dccb52ee0abf93d", "filename": "gcc/testsuite/gnat.dg/atomic11_pkg2.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504775519d3199ea89400f85a599cb791f736cb7/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic11_pkg2.ads?ref=504775519d3199ea89400f85a599cb791f736cb7", "patch": "@@ -0,0 +1,5 @@\n+package Atomic11_Pkg2 is\n+\n+  function Max return Positive;\n+\n+end Atomic11_Pkg2;"}]}