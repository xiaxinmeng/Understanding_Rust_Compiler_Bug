{"sha": "7c95bbfbddcdadec7ca9f7662f55c74159064107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5NWJiZmJkZGNkYWRlYzdjYTlmNzY2MmY1NWM3NDE1OTA2NDEwNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-03T14:33:06Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-09-03T14:33:06Z"}, "message": "re PR target/23671 (ICE in fixup_eh_region_note, at reload1.c:3808)\n\n\tPR middle-end/23671\n\tpa.c (emit_move_sequence): Use replace_equiv_address instead of\n\tgen_rtx_MEM.\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r103803", "tree": {"sha": "40e1d7b6476b9cc868d1f4190179ae5de4a28f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e1d7b6476b9cc868d1f4190179ae5de4a28f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c95bbfbddcdadec7ca9f7662f55c74159064107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c95bbfbddcdadec7ca9f7662f55c74159064107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c95bbfbddcdadec7ca9f7662f55c74159064107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c95bbfbddcdadec7ca9f7662f55c74159064107/comments", "author": null, "committer": null, "parents": [{"sha": "8244630eadcb30197185f0f426195a0be2344936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8244630eadcb30197185f0f426195a0be2344936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8244630eadcb30197185f0f426195a0be2344936"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "4b488faa1ff0dff081ba3ab64923ddf85016867e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c95bbfbddcdadec7ca9f7662f55c74159064107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c95bbfbddcdadec7ca9f7662f55c74159064107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c95bbfbddcdadec7ca9f7662f55c74159064107", "patch": "@@ -1,3 +1,10 @@\n+2005-09-03  Richard Henderson  <rth@redhat.com>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/23671\n+\tpa.c (emit_move_sequence): Use replace_equiv_address instead of\n+\tgen_rtx_MEM.\n+\n 2005-09-02  Nicolas Pitre <nico@cam.org>\n \n \t* config/arm/arm.c (arm_legitimize_address): Limit the value passed"}, {"sha": "35c7d50035d9e4412db017a3601916057aa8f2de", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c95bbfbddcdadec7ca9f7662f55c74159064107/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c95bbfbddcdadec7ca9f7662f55c74159064107/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7c95bbfbddcdadec7ca9f7662f55c74159064107", "patch": "@@ -1377,12 +1377,12 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n   if (scratch_reg && reload_in_progress && GET_CODE (operand0) == MEM\n       && ((tem = find_replacement (&XEXP (operand0, 0)))\n \t  != XEXP (operand0, 0)))\n-    operand0 = gen_rtx_MEM (GET_MODE (operand0), tem);\n+    operand0 = replace_equiv_address (operand0, tem);\n \n   if (scratch_reg && reload_in_progress && GET_CODE (operand1) == MEM\n       && ((tem = find_replacement (&XEXP (operand1, 0)))\n \t  != XEXP (operand1, 0)))\n-    operand1 = gen_rtx_MEM (GET_MODE (operand1), tem);\n+    operand1 = replace_equiv_address (operand1, tem);\n \n   /* Handle secondary reloads for loads/stores of FP registers from\n      REG+D addresses where D does not fit in 5 or 14 bits, including\n@@ -1420,7 +1420,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n       else\n \temit_move_insn (scratch_reg, XEXP (operand1, 0));\n       emit_insn (gen_rtx_SET (VOIDmode, operand0,\n-\t\t\t      gen_rtx_MEM (mode, scratch_reg)));\n+\t\t\t      replace_equiv_address (operand1, scratch_reg)));\n       return 1;\n     }\n   else if (scratch_reg\n@@ -1457,7 +1457,8 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t}\n       else\n \temit_move_insn (scratch_reg, XEXP (operand0, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_MEM (mode, scratch_reg),\n+      emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t      replace_equiv_address (operand0, scratch_reg),\n \t\t\t      operand1));\n       return 1;\n     }\n@@ -1474,7 +1475,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t   && CONSTANT_P (operand1)\n \t   && fp_reg_operand (operand0, mode))\n     {\n-      rtx xoperands[2];\n+      rtx const_mem, xoperands[2];\n \n       /* SCRATCH_REG will hold an address and maybe the actual data.  We want\n \t it in WORD_MODE regardless of what mode it was originally given\n@@ -1483,13 +1484,14 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \n       /* Force the constant into memory and put the address of the\n \t memory location into scratch_reg.  */\n+      const_mem = force_const_mem (mode, operand1);\n       xoperands[0] = scratch_reg;\n-      xoperands[1] = XEXP (force_const_mem (mode, operand1), 0);\n+      xoperands[1] = XEXP (const_mem, 0);\n       emit_move_sequence (xoperands, Pmode, 0);\n \n       /* Now load the destination register.  */\n       emit_insn (gen_rtx_SET (mode, operand0,\n-\t\t\t      gen_rtx_MEM (mode, scratch_reg)));\n+\t\t\t      replace_equiv_address (const_mem, scratch_reg)));\n       return 1;\n     }\n   /* Handle secondary reloads for SAR.  These occur when trying to load\n@@ -1526,8 +1528,8 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t     OPERAND0.  */\n \t  scratch_reg = force_mode (GET_MODE (operand0), scratch_reg);\n \n-\t  emit_move_insn (scratch_reg, gen_rtx_MEM (GET_MODE (operand0),\n-\t\t\t\t\t\t    scratch_reg));\n+\t  emit_move_insn (scratch_reg,\n+\t\t\t  replace_equiv_address (operand1, scratch_reg));\n \t}\n       else\n \t{\n@@ -1754,10 +1756,10 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n \t\t       && (reload_completed || reload_in_progress)\n \t\t       && flag_pic)\n \t\t{\n-\t\t  operands[1] = force_const_mem (mode, operand1);\n+\t\t  rtx const_mem = force_const_mem (mode, operand1);\n \t\t  operands[1] = legitimize_pic_address (XEXP (operands[1], 0),\n \t\t\t\t\t\t\tmode, temp);\n-\t\t  operands[1] = gen_rtx_MEM (mode, operands[1]);\n+\t\t  operands[1] = replace_equiv_address (const_mem, operands[1]);\n \t\t  emit_move_sequence (operands, mode, temp);\n \t\t}\n \t      else"}]}