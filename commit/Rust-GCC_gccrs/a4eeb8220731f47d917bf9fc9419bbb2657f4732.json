{"sha": "a4eeb8220731f47d917bf9fc9419bbb2657f4732", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlZWI4MjIwNzMxZjQ3ZDkxN2JmOWZjOTQxOWJiYjI2NTdmNDczMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-08-11T17:53:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-08-11T17:53:05Z"}, "message": "future: constexpr functions are implicitly inline.\n\n2011-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/future: constexpr functions are implicitly inline.\n\t* include/std/chrono: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/bits/move.h: Likewise.\n\t* include/bits/stl_pair.h: Likewise.\n\nFrom-SVN: r177679", "tree": {"sha": "e77313f8a40001d91fa6a88c26442d6e8a13a5ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e77313f8a40001d91fa6a88c26442d6e8a13a5ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4eeb8220731f47d917bf9fc9419bbb2657f4732", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4eeb8220731f47d917bf9fc9419bbb2657f4732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4eeb8220731f47d917bf9fc9419bbb2657f4732", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4eeb8220731f47d917bf9fc9419bbb2657f4732/comments", "author": null, "committer": null, "parents": [{"sha": "4309e92c980377d6f2c2ba2bb224f254b3cda49f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4309e92c980377d6f2c2ba2bb224f254b3cda49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4309e92c980377d6f2c2ba2bb224f254b3cda49f"}], "stats": {"total": 102, "additions": 55, "deletions": 47}, "files": [{"sha": "c52b84912f27e0cd2507fef200a0a31f2d0a6ea9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -1,3 +1,11 @@\n+2011-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/future: constexpr functions are implicitly inline.\n+\t* include/std/chrono: Likewise.\n+\t* include/std/complex: Likewise.\n+\t* include/bits/move.h: Likewise.\n+\t* include/bits/stl_pair.h: Likewise.\n+\n 2011-08-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/alloc_traits.h: Fix doxygen @headername."}, {"sha": "0af8fdac0b59316f652b4d28a952c7e681ddf554", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -58,12 +58,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n   /// forward (as per N3143)\n   template<typename _Tp>\n-    inline constexpr _Tp&&\n+    constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n     { return static_cast<_Tp&&>(__t); }\n \n   template<typename _Tp>\n-    inline constexpr _Tp&&\n+    constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\n     {\n       static_assert(!std::is_lvalue_reference<_Tp>::value, \"template argument\"\n@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @return Same, moved.\n   */\n   template<typename _Tp>\n-    inline constexpr typename std::remove_reference<_Tp>::type&&\n+    constexpr typename std::remove_reference<_Tp>::type&&\n     move(_Tp&& __t) noexcept\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n "}, {"sha": "c4f33d0dcf68d6b874148be28d1f964a66a14fe7", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -275,8 +275,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   // NB: DR 706.\n   template<class _T1, class _T2>\n-    inline constexpr pair<typename __decay_and_strip<_T1>::__type,\n-\t\t\t  typename __decay_and_strip<_T2>::__type>\n+    constexpr pair<typename __decay_and_strip<_T1>::__type,\n+                   typename __decay_and_strip<_T2>::__type>\n     make_pair(_T1&& __x, _T2&& __y)\n     {\n       typedef typename __decay_and_strip<_T1>::__type __ds_type1;"}, {"sha": "4d2241ae475efee412d85c4daa3f5cd6d4c14c2c", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -168,8 +168,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     /// duration_cast\n     template<typename _ToDur, typename _Rep, typename _Period>\n-      inline constexpr typename enable_if<__is_duration<_ToDur>::value,\n-\t\t\t\t_ToDur>::type\n+      constexpr typename enable_if<__is_duration<_ToDur>::value,\n+\t\t\t\t   _ToDur>::type\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n \ttypedef typename _ToDur::period\t\t\t\t__to_period;\n@@ -352,8 +352,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n+      constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t     duration<_Rep2, _Period2>>::type\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -365,8 +365,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n+      constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t     duration<_Rep2, _Period2>>::type\n       operator-(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -386,7 +386,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       { typedef typename common_type<_Rep1, _Rep2>::type type; };\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline constexpr\n+      constexpr\n       duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n@@ -396,13 +396,13 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline constexpr\n+      constexpr\n       duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>\n       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n       { return __d * __s; }\n \n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline constexpr duration<typename __common_rep_type<_Rep1, typename\n+      constexpr duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n@@ -411,9 +411,9 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \treturn __cd(__cd(__d).count() / __s);\n       }\n \n-     template<typename _Rep1, typename _Period1,\n-\t      typename _Rep2, typename _Period2>\n-      inline constexpr typename common_type<_Rep1, _Rep2>::type\n+    template<typename _Rep1, typename _Period1,\n+\t     typename _Rep2, typename _Period2>\n+      constexpr typename common_type<_Rep1, _Rep2>::type\n       operator/(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -425,7 +425,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     // DR 934.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n-      inline constexpr duration<typename __common_rep_type<_Rep1, typename\n+      constexpr duration<typename __common_rep_type<_Rep1, typename\n \tenable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>\n       operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n       {\n@@ -434,10 +434,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \treturn __cd(__cd(__d).count() % __s);\n       }\n \n-     template<typename _Rep1, typename _Period1,\n-\t      typename _Rep2, typename _Period2>\n-      inline constexpr typename common_type<duration<_Rep1, _Period1>,\n-\t\t\t\t\t    duration<_Rep2, _Period2>>::type\n+    template<typename _Rep1, typename _Period1,\n+\t     typename _Rep2, typename _Period2>\n+      constexpr typename common_type<duration<_Rep1, _Period1>,\n+\t\t\t\t     duration<_Rep2, _Period2>>::type\n       operator%(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -450,7 +450,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n     // comparisons\n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator==(const duration<_Rep1, _Period1>& __lhs,\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -462,7 +462,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator<(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       {\n@@ -474,28 +474,28 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator!=(const duration<_Rep1, _Period1>& __lhs,\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       { return !(__lhs == __rhs); }\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator<=(const duration<_Rep1, _Period1>& __lhs,\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       { return !(__rhs < __lhs); }\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator>(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n       { return __rhs < __lhs; }\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr bool\n+      constexpr bool\n       operator>=(const duration<_Rep1, _Period1>& __lhs,\n \t\t const duration<_Rep2, _Period2>& __rhs)\n       { return !(__lhs < __rhs); }\n@@ -575,8 +575,8 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     /// time_point_cast\n     template<typename _ToDur, typename _Clock, typename _Dur>\n-      inline constexpr typename enable_if<__is_duration<_ToDur>::value,\n-\t\t\t\ttime_point<_Clock, _ToDur>>::type\n+      constexpr typename enable_if<__is_duration<_ToDur>::value,\n+\t\t\t\t   time_point<_Clock, _ToDur>>::type\n       time_point_cast(const time_point<_Clock, _Dur>& __t)\n       {\n \ttypedef time_point<_Clock, _ToDur> \t\t\t__time_point;\n@@ -585,7 +585,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr time_point<_Clock,\n+      constexpr time_point<_Clock,\n \ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n       operator+(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n@@ -598,7 +598,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Rep1, typename _Period1,\n \t     typename _Clock, typename _Dur2>\n-      inline constexpr time_point<_Clock,\n+      constexpr time_point<_Clock,\n \ttypename common_type<duration<_Rep1, _Period1>, _Dur2>::type>\n       operator+(const duration<_Rep1, _Period1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n@@ -611,7 +611,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n     template<typename _Clock, typename _Dur1,\n \t     typename _Rep2, typename _Period2>\n-      inline constexpr time_point<_Clock,\n+      constexpr time_point<_Clock,\n \ttypename common_type<_Dur1, duration<_Rep2, _Period2>>::type>\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst duration<_Rep2, _Period2>& __rhs)\n@@ -623,43 +623,43 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr typename common_type<_Dur1, _Dur2>::type\n+      constexpr typename common_type<_Dur1, _Dur2>::type\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator==(const time_point<_Clock, _Dur1>& __lhs,\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator!=(const time_point<_Clock, _Dur1>& __lhs,\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs == __rhs); }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator<(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return  __lhs.time_since_epoch() < __rhs.time_since_epoch(); }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator<=(const time_point<_Clock, _Dur1>& __lhs,\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__rhs < __lhs); }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator>(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __rhs < __lhs; }\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n-      inline constexpr bool\n+      constexpr bool\n       operator>=(const time_point<_Clock, _Dur1>& __lhs,\n \t\t const time_point<_Clock, _Dur2>& __rhs)\n       { return !(__lhs < __rhs); }"}, {"sha": "82ac62de61b149b5f31a6bea2e9ad2ddad1fa0f5", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -531,12 +531,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Values\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<typename _Tp>\n-    inline constexpr _Tp\n+    constexpr _Tp\n     real(const complex<_Tp>& __z)\n     { return __z.real(); }\n-    \n+\n   template<typename _Tp>\n-    inline constexpr _Tp\n+    constexpr _Tp\n     imag(const complex<_Tp>& __z)\n     { return __z.imag(); }\n #else"}, {"sha": "497b964833f099c5b0be6b80e61cba8d34ca6713", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4eeb8220731f47d917bf9fc9419bbb2657f4732/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=a4eeb8220731f47d917bf9fc9419bbb2657f4732", "patch": "@@ -129,25 +129,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     deferred = 2\n   };\n \n-  inline constexpr launch operator&(launch __x, launch __y)\n+  constexpr launch operator&(launch __x, launch __y)\n   {\n     return static_cast<launch>(\n \tstatic_cast<int>(__x) & static_cast<int>(__y));\n   }\n \n-  inline constexpr launch operator|(launch __x, launch __y)\n+  constexpr launch operator|(launch __x, launch __y)\n   {\n     return static_cast<launch>(\n \tstatic_cast<int>(__x) | static_cast<int>(__y));\n   }\n \n-  inline constexpr launch operator^(launch __x, launch __y)\n+  constexpr launch operator^(launch __x, launch __y)\n   {\n     return static_cast<launch>(\n \tstatic_cast<int>(__x) ^ static_cast<int>(__y));\n   }\n \n-  inline constexpr launch operator~(launch __x)\n+  constexpr launch operator~(launch __x)\n   { return static_cast<launch>(~static_cast<int>(__x)); }\n \n   inline launch& operator&=(launch& __x, launch __y)"}]}