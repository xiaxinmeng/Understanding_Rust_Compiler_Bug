{"sha": "0b0b41a89e519888e7a1edc583e54571f180fb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwYjQxYTg5ZTUxOTg4OGU3YTFlZGM1ODNlNTQ1NzFmMTgwZmI0OA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-07T22:07:48Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-07T22:07:48Z"}, "message": "In libobjc/: 2011-06-07 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-private/module-abi-8.h (class_get_instance_size): Removed.\n\t* objects.c (class_create_instance): Removed.\n\t* error.c (__USE_FIXED_PROTOTYPES__): Removed.\n\t* gc.c (__objc_generate_gc_type_description): Use\n\tclass_getInstanceSize() instead of class_get_instance_size().\n\t* selector.c (sel_types_match): Made static.\n\t(sel_get_typed_uid): Removed.\n\t(sel_get_any_typed_uid): Removed.\n\t(sel_get_name): Removed.\n\t(sel_get_type): Removed.\n\t(sel_register_name): Removed.\n\t(sel_register_typed_name): Removed.\n\t(sel_get_uid): Removed.\n\nFrom-SVN: r174773", "tree": {"sha": "e5b82f4dfe9df54ded3816a18f630012d3b9c2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5b82f4dfe9df54ded3816a18f630012d3b9c2a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b0b41a89e519888e7a1edc583e54571f180fb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0b41a89e519888e7a1edc583e54571f180fb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0b41a89e519888e7a1edc583e54571f180fb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0b41a89e519888e7a1edc583e54571f180fb48/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ff609751050030ea83a7ff58eca5c07a3adcdfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff609751050030ea83a7ff58eca5c07a3adcdfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff609751050030ea83a7ff58eca5c07a3adcdfc"}], "stats": {"total": 149, "additions": 18, "deletions": 131}, "files": [{"sha": "3a0a0ecacc1a1eeefe66b209fd1084903eb6fdd8", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -1,3 +1,19 @@\n+2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-private/module-abi-8.h (class_get_instance_size): Removed.\n+\t* objects.c (class_create_instance): Removed.\n+\t* error.c (__USE_FIXED_PROTOTYPES__): Removed.\n+\t* gc.c (__objc_generate_gc_type_description): Use\n+\tclass_getInstanceSize() instead of class_get_instance_size().\n+\t* selector.c (sel_types_match): Made static.\n+\t(sel_get_typed_uid): Removed.\n+\t(sel_get_any_typed_uid): Removed.\n+\t(sel_get_name): Removed.\n+\t(sel_get_type): Removed.\n+\t(sel_register_name): Removed.\n+\t(sel_register_typed_name): Removed.\n+\t(sel_get_uid): Removed.\n+\n 2011-06-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* encoding.c (method_get_number_of_arguments): Removed."}, {"sha": "b56aa4da66550a47c21d3f27ea049c45fcb917be", "filename": "libobjc/error.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Ferror.c?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -26,10 +26,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n \n-/* __USE_FIXED_PROTOTYPES__ used to be required to get prototypes for\n-   malloc, free, etc. on some platforms.  It is unclear if we still\n-   need it, but it can't hurt.  */\n-#define __USE_FIXED_PROTOTYPES__\n #include <stdlib.h>\n #include <stdio.h>\n #include <stdarg.h>"}, {"sha": "d009230b78fc04b6d456dcbe50faa8f61324a728", "filename": "libobjc/gc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fgc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fgc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fgc.c?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -304,7 +304,7 @@ __objc_generate_gc_type_description (Class class)\n \n   /* The number of bits in the mask is the size of an instance in bytes divided\n      by the size of a pointer. */\n-  bits_no = (ROUND (class_get_instance_size (class), sizeof (void *))\n+  bits_no = (ROUND (class_getInstanceSize (class), sizeof (void *))\n              / sizeof (void *));\n   size = ROUND (bits_no, BITS_PER_WORD) / BITS_PER_WORD;\n   mask = objc_atomic_malloc (size * sizeof (int));"}, {"sha": "06846e796904c41b19cfc42d80781edb33949da3", "filename": "libobjc/objc-private/module-abi-8.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -277,12 +277,6 @@ struct objc_class {\n      (cls)->info >>= (HOST_BITS_PER_LONG/2); \\\n      __CLS_SETINFO(cls, (((unsigned long)num) << (HOST_BITS_PER_LONG/2))); })\n \n-static inline long\n-class_get_instance_size(Class _class)\n-{\n-  return CLS_ISCLASS(_class)?_class->instance_size:0;\n-}\n-\n /* The compiler generates one of these structures for each category.\n    A class may have many categories and contain both instance and\n    factory methods.  */"}, {"sha": "fe11062835b05e928b085c7f846255d0e00b7d41", "filename": "libobjc/objects.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fobjects.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fobjects.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjects.c?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -66,12 +66,6 @@ class_createInstance (Class class, size_t extraBytes)\n }\n \n /* Traditional GNU Objective-C Runtime API.  */\n-id\n-class_create_instance (Class class)\n-{\n-  return class_createInstance (class, 0);\n-}\n-\n id\n object_copy (id object, size_t extraBytes)\n {\n@@ -122,4 +116,3 @@ object_setClass (id object, Class class_)\n       return old_class;\n     }\n }\n-"}, {"sha": "55ca7064bd2c80c3fc62de282464fc63a2673faf", "filename": "libobjc/selector.c", "status": "modified", "additions": 1, "deletions": 113, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0b41a89e519888e7a1edc583e54571f180fb48/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=0b0b41a89e519888e7a1edc583e54571f180fb48", "patch": "@@ -227,7 +227,7 @@ sel_isEqual (SEL s1, SEL s2)\n \n /* Return YES iff t1 and t2 have same method types.  Ignore the\n    argframe layout.  */\n-BOOL\n+static BOOL\n sel_types_match (const char *t1, const char *t2)\n {\n   if (! t1 || ! t2)\n@@ -252,83 +252,6 @@ sel_types_match (const char *t1, const char *t2)\n   return NO;\n }\n \n-/* Return selector representing name.  In the Modern API, you'd\n-   normally use sel_registerTypedName() for this, which does the same\n-   but would register the selector with the runtime if not registered\n-   yet (if you only want to check for selectors without registering,\n-   use sel_copyTypedSelectorList()).  */\n-SEL\n-sel_get_typed_uid (const char *name, const char *types)\n-{\n-  struct objc_list *l;\n-  sidx i;\n-\n-  objc_mutex_lock (__objc_runtime_mutex);\n-\n-  i = (sidx) objc_hash_value_for_key (__objc_selector_hash, name);\n-  if (i == 0)\n-    {\n-      objc_mutex_unlock (__objc_runtime_mutex);\n-      return 0;\n-    }\n-\n-  for (l = (struct objc_list *) sarray_get_safe (__objc_selector_array, i);\n-       l; l = l->tail)\n-    {\n-      SEL s = (SEL) l->head;\n-      if (types == 0 || s->sel_types == 0)\n-\t{\n-\t  if (s->sel_types == types)\n-\t    {\n-\t      objc_mutex_unlock (__objc_runtime_mutex);\n-\t      return s;\n-\t    }\n-\t}\n-      else if (sel_types_match (s->sel_types, types))\n-\t{\n-\t  objc_mutex_unlock (__objc_runtime_mutex);\n-\t  return s;\n-\t}\n-    }\n-\n-  objc_mutex_unlock (__objc_runtime_mutex);\n-  return 0;\n-}\n-\n-/* Return selector representing name; prefer a selector with non-NULL\n-   type.  In the Modern API, sel_getTypedSelector() is similar but\n-   returns NULL if a typed selector couldn't be found.  */\n-SEL\n-sel_get_any_typed_uid (const char *name)\n-{\n-  struct objc_list *l;\n-  sidx i;\n-  SEL s = NULL;\n-\n-  objc_mutex_lock (__objc_runtime_mutex);\n-\n-  i = (sidx) objc_hash_value_for_key (__objc_selector_hash, name);\n-  if (i == 0)\n-    {\n-      objc_mutex_unlock (__objc_runtime_mutex);\n-      return 0;\n-    }\n-\n-  for (l = (struct objc_list *) sarray_get_safe (__objc_selector_array, i);\n-       l; l = l->tail)\n-    {\n-      s = (SEL) l->head;\n-      if (s->sel_types)\n-\t{\n-\t  objc_mutex_unlock (__objc_runtime_mutex);\n-\t  return s;\n-\t}\n-    }\n-\n-  objc_mutex_unlock (__objc_runtime_mutex);\n-  return s;\n-}\n-\n /* Return selector representing name.  */\n SEL\n sel_get_any_uid (const char *name)\n@@ -493,15 +416,6 @@ const char *sel_getName (SEL selector)\n   return ret;\n }\n \n-/* Traditional GNU Objective-C Runtime API.  */\n-const char *sel_get_name (SEL selector)\n-{\n-  if (selector == NULL)\n-    return 0;\n-\n-  return sel_getName (selector);\n-}\n-\n BOOL\n sel_is_mapped (SEL selector)\n {\n@@ -517,12 +431,6 @@ const char *sel_getTypeEncoding (SEL selector)\n     return 0;\n }\n \n-/* Traditional GNU Objective-C Runtime API.  */\n-const char *sel_get_type (SEL selector)\n-{\n-  return sel_getTypeEncoding (selector);\n-}\n-\n /* The uninstalled dispatch table.  */\n extern struct sarray *__objc_uninstalled_dtable;\n \n@@ -707,13 +615,6 @@ sel_registerName (const char *name)\n   return ret;\n }\n \n-/* Traditional GNU Objective-C Runtime API.  */\n-SEL\n-sel_register_name (const char *name)\n-{\n-  return sel_registerName (name);\n-}\n-\n SEL\n sel_registerTypedName (const char *name, const char *type)\n {\n@@ -732,22 +633,9 @@ sel_registerTypedName (const char *name, const char *type)\n   return ret;\n }\n \n-SEL\n-sel_register_typed_name (const char *name, const char *type)\n-{\n-  return sel_registerTypedName (name, type);\n-}\n-\n /* Return the selector representing name.  */\n SEL\n sel_getUid (const char *name)\n {\n   return sel_registerTypedName (name, 0);\n }\n-\n-/* Traditional GNU Objective-C Runtime API.  */\n-SEL\n-sel_get_uid (const char *name)\n-{\n-  return sel_getUid (name);\n-}"}]}