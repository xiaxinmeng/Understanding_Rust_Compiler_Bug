{"sha": "02886c2e8a6056b5e969f57431671d0980596f0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI4ODZjMmU4YTYwNTZiNWU5NjlmNTc0MzE2NzFkMDk4MDU5NmYwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:39:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:39:41Z"}, "message": "2015-10-26  Joel Brobecker  <brobecker@adacore.com brobecker>\n\n\t* adaint.c (__gnat_lwp_self): Replace current implementation re-using\n\tthe Linux one, which uses an __NR_gettid syscall rather than\n\tpthread_self.\n\n2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sinfo.ads, exp_ch3.adb (Build_Array_Init_Proc,\n\tBuild_Record_Init_Proc): Do not inline init procs when\n\tModify_Tree_For_C is True.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* errout.ads: Minor comment fix.\n\t* einfo.ads: Minor style fix.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch3.adb (Derive_Interface_Subprogram): Fix\n\tIs_Abstract_Subprogram, which might have been calculated\n\tincorrectly, because we're passing Ultimate_Alias (Subp) (and\n\tits dispatching type) to Derive_Subprogram, instead of the true\n\tparent subprogram and type.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch13.adb (Check_Iterator_Functions): When\n\tprinting the \"default iterator must be unique\" error message,\n\talso print references to the places where the duplicates are\n\tdeclared. This makes the message clearer.\n\nFrom-SVN: r229320", "tree": {"sha": "49e526ca3aacced71bb9e4c9238a41de95737534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49e526ca3aacced71bb9e4c9238a41de95737534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02886c2e8a6056b5e969f57431671d0980596f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02886c2e8a6056b5e969f57431671d0980596f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02886c2e8a6056b5e969f57431671d0980596f0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02886c2e8a6056b5e969f57431671d0980596f0b/comments", "author": null, "committer": null, "parents": [{"sha": "51022ff73102918ab0574d677b6d572a0cb2c59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51022ff73102918ab0574d677b6d572a0cb2c59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51022ff73102918ab0574d677b6d572a0cb2c59b"}], "stats": {"total": 227, "additions": 137, "deletions": 90}, "files": [{"sha": "7b5a82872ac097b02ea95b24041a7cea9cd99cb7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -1,3 +1,35 @@\n+2015-10-26  Joel Brobecker  <brobecker@adacore.com brobecker>\n+\n+\t* adaint.c (__gnat_lwp_self): Replace current implementation re-using\n+\tthe Linux one, which uses an __NR_gettid syscall rather than\n+\tpthread_self.\n+\n+2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sinfo.ads, exp_ch3.adb (Build_Array_Init_Proc,\n+\tBuild_Record_Init_Proc): Do not inline init procs when\n+\tModify_Tree_For_C is True.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.ads: Minor comment fix.\n+\t* einfo.ads: Minor style fix.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Interface_Subprogram): Fix\n+\tIs_Abstract_Subprogram, which might have been calculated\n+\tincorrectly, because we're passing Ultimate_Alias (Subp) (and\n+\tits dispatching type) to Derive_Subprogram, instead of the true\n+\tparent subprogram and type.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Iterator_Functions): When\n+\tprinting the \"default iterator must be unique\" error message,\n+\talso print references to the places where the duplicates are\n+\tdeclared. This makes the message clearer.\n+\n 2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Do not set"}, {"sha": "6e18d9433fed1d65243438ef928c4fc9f6351e6a", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -3061,17 +3061,7 @@ __gnat_sals_init_using_constructors (void)\n #endif\n }\n \n-#if defined (__ANDROID__)\n-\n-#include <pthread.h>\n-\n-void *\n-__gnat_lwp_self (void)\n-{\n-   return (void *) pthread_self ();\n-}\n-\n-#elif defined (__linux__)\n+#if defined (__linux__) || defined (__ANDROID__)\n /* There is no function in the glibc to retrieve the LWP of the current\n    thread. We need to do a system call in order to retrieve this\n    information. */\n@@ -3081,7 +3071,9 @@ __gnat_lwp_self (void)\n {\n    return (void *) syscall (__NR_gettid);\n }\n+#endif\n \n+#if defined (__linux__)\n #include <sched.h>\n \n /* glibc versions earlier than 2.7 do not define the routines to handle"}, {"sha": "ae22e96bbdc219312979b5717c78f63377a8e6cd", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -704,6 +704,12 @@ package Einfo is\n --       bodies. Set if the entity contains any ignored Ghost code in the form\n --       of declaration, procedure call, assignment statement or pragma.\n \n+--    Contract (Node34)\n+--       Defined in constant, entry, entry family, [generic] package, package\n+--       body, [generic] subprogram, subprogram body, and variable entities.\n+--       Points to the contract of the entity, holding various assertion items\n+--       and data classifiers.\n+\n --    Corresponding_Concurrent_Type (Node18)\n --       Defined in record types that are constructed by the expander to\n --       represent task and protected types (Is_Concurrent_Record_Type flag\n@@ -1123,12 +1129,6 @@ package Einfo is\n --       accept statement for a member of the family, and in the prefix of\n --       'COUNT when it applies to a family member.\n \n---    Contract (Node34)\n---       Defined in constant, entry, entry family, [generic] package, package\n---       body, [generic] subprogram, subprogram body, and variable entities.\n---       Points to the contract of the entity, holding various assertion items\n---       and data classifiers.\n-\n --    Entry_Parameters_Type (Node15)\n --       Defined in entries. Points to the access-to-record type that is\n --       constructed by the expander to hold a reference to the parameter\n@@ -1519,16 +1519,16 @@ package Einfo is\n --       Defined in enumeration types. Set if the type as a representation\n --       clause whose entries are successive integers.\n \n---    Has_Controlling_Result (Flag98)\n---       Defined in E_Function entities. Set if the function is a primitive\n---       function of a tagged type which can dispatch on result.\n-\n --    Has_Controlled_Component (Flag43) [base type only]\n --       Defined in all type and subtype entities. Set only for composite type\n --       entities which contain a component that either is a controlled type,\n --       or itself contains controlled component (i.e. either Is_Controlled or\n --       Has_Controlled_Component is set for at least one component).\n \n+--    Has_Controlling_Result (Flag98)\n+--       Defined in E_Function entities. Set if the function is a primitive\n+--       function of a tagged type which can dispatch on result.\n+\n --    Has_Convention_Pragma (Flag119)\n --       Defined in all entities. Set for an entity for which a valid pragma\n --       Convention, Import, or Export has been given. Used to prevent more\n@@ -1836,19 +1836,19 @@ package Einfo is\n --       valid pragma Pack was given for the type. Note that this flag is not\n --       inherited by derived type. See also the Is_Packed flag.\n \n+--    Has_Pragma_Preelab_Init (Flag221)\n+--       Defined in type and subtype entities. If set indicates that a valid\n+--       pragma Preelaborable_Initialization applies to the type.\n+\n --    Has_Pragma_Pure (Flag203)\n --       Defined in all entities. If set, indicates that a valid pragma Pure\n --       was given for the entity. In some cases, we need to test whether\n --       Is_Pure was explicitly set using this pragma.\n \n---    Has_Pragma_Preelab_Init (Flag221)\n---       Defined in type and subtype entities. If set indicates that a valid\n---       pragma Preelaborable_Initialization applies to the type.\n-\n --    Has_Pragma_Pure_Function (Flag179)\n --       Defined in all entities. If set, indicates that a valid pragma\n---       Pure_Function was given for the entity. In some cases, we need to\n---       know that Is_Pure was explicitly set using this pragma. We also set\n+--       Pure_Function was given for the entity. In some cases, we need to test\n+--       whether Is_Pure was explicitly set using this pragma. We also set\n --       this flag for some internal entities that we know should be treated\n --       as pure for optimization purposes.\n \n@@ -2209,6 +2209,13 @@ package Einfo is\n --       carry the keyword aliased, and on record components that have the\n --       keyword. For Ada 2012, also applies to formal parameters.\n \n+--    Is_Array_Type (synthesized)\n+--       Applies to all entities, true for array types and subtypes\n+\n+--    Is_Asynchronous (Flag81)\n+--       Defined in all type entities and in procedure entities. Set\n+--       if a pragma Asynchronous applies to the entity.\n+\n --    Is_Atomic (Flag85)\n --       Defined in all type entities, and also in constants, components, and\n --       variables. Set if a pragma Atomic or Shared applies to the entity.\n@@ -2223,13 +2230,6 @@ package Einfo is\n --       usage. In the case of private and incomplete types, the predicate\n --       applies to both the partial view and the full view.\n \n---    Is_Array_Type (synthesized)\n---       Applies to all entities, true for array types and subtypes\n-\n---    Is_Asynchronous (Flag81)\n---       Defined in all type entities and in procedure entities. Set\n---       if a pragma Asynchronous applies to the entity.\n-\n --    Is_Base_Type (synthesized)\n --       Applies to type and subtype entities. True if entity is a base type\n \n@@ -2266,14 +2266,14 @@ package Einfo is\n --       Defined in all entities. Set only for defining entities of program\n --       units that are child units (but False for subunits).\n \n---    Is_Class_Wide_Type (synthesized)\n---       Applies to all entities, true for class wide types and subtypes\n-\n --    Is_Class_Wide_Equivalent_Type (Flag35)\n --       Defined in record types and subtypes. Set to True, if the type acts\n --       as a class-wide equivalent type, i.e. the Equivalent_Type field of\n --       some class-wide subtype entity references this record type.\n \n+--    Is_Class_Wide_Type (synthesized)\n+--       Applies to all entities, true for class wide types and subtypes\n+\n --    Is_Compilation_Unit (Flag149)\n --       Defined in all entities. Set if the entity is a package or subprogram\n --       entity for a compilation unit other than a subunit (since we treat\n@@ -2360,13 +2360,13 @@ package Einfo is\n --       Defined in all entities. True if the entity is type System.Address,\n --       or (recursively) a subtype or derived type of System.Address.\n \n---    Is_Discrete_Type (synthesized)\n---       Applies to all entities, true for all discrete types and subtypes\n-\n --    Is_Discrete_Or_Fixed_Point_Type (synthesized)\n --       Applies to all entities, true for all discrete types and subtypes\n --       and all fixed-point types and subtypes.\n \n+--    Is_Discrete_Type (synthesized)\n+--       Applies to all entities, true for all discrete types and subtypes\n+\n --    Is_Discrim_SO_Function (Flag176)\n --       Defined in all entities. Set only in E_Function entities that Layout\n --       creates to compute discriminant-dependent dynamic size/offset values.\n@@ -2404,9 +2404,6 @@ package Einfo is\n --       of pragma Eliminate. Also used to mark subprogram entities whose\n --       declaration and body are within unreachable code that is removed.\n \n---    Is_Enumeration_Type (synthesized)\n---       Defined in all entities, true for enumeration types and subtypes\n-\n --    Is_Entry (synthesized)\n --       Applies to all entities, True only for entry and entry family\n --       entities and False for all other entity kinds.\n@@ -2416,6 +2413,9 @@ package Einfo is\n --       be in, in-out or out parameters). This flag is used to speed up the\n --       test for the need to replace references in Exp_Ch2.\n \n+--    Is_Enumeration_Type (synthesized)\n+--       Defined in all entities, true for enumeration types and subtypes\n+\n --    Is_Exported (Flag99)\n --       Defined in all entities. Set if the entity is exported. For now we\n --       only allow the export of constants, exceptions, functions, procedures\n@@ -2807,14 +2807,14 @@ package Einfo is\n --       Applies to all entities, true for ordinary fixed point types and\n --       subtypes.\n \n---    Is_Package_Or_Generic_Package (synthesized)\n---       Applies to all entities. True for packages and generic packages.\n---       False for all other entities.\n-\n --    Is_Package_Body_Entity (Flag160)\n --       Defined in all entities. Set for entities defined at the top level\n --       of a package body. Used to control externally generated names.\n \n+--    Is_Package_Or_Generic_Package (synthesized)\n+--       Applies to all entities. True for packages and generic packages.\n+--       False for all other entities.\n+\n --    Is_Packed (Flag51) [implementation base type only]\n --       Defined in all type entities. This flag is set only for record and\n --       array types which have a packed representation. There are three\n@@ -2946,6 +2946,10 @@ package Einfo is\n --       Defined in types that are interfaces. True if interface is declared\n --       protected, or is derived from protected interfaces.\n \n+--    Is_Protected_Record_Type (synthesized)\n+--       Applies to all entities, true if Is_Concurrent_Record_Type is true and\n+--       Corresponding_Concurrent_Type is a protected type.\n+\n --    Is_Protected_Type (synthesized)\n --       Applies to all entities, true for protected types and subtypes\n \n@@ -2956,10 +2960,6 @@ package Einfo is\n --       example in the case of a variable name, then the backend will generate\n --       an appropriate external name for use by the linker.\n \n---    Is_Protected_Record_Type (synthesized)\n---       Applies to all entities, true if Is_Concurrent_Record_Type is true and\n---       Corresponding_Concurrent_Type is a protected type.\n-\n --    Is_Pure (Flag44)\n --       Defined in all entities. Set in all entities of a unit to which a\n --       pragma Pure is applied except for non-intrinsic imported subprograms,\n@@ -3772,16 +3772,16 @@ package Einfo is\n --       in the shadow entity, it points to the proper location in which to\n --       restore the private view saved in the shadow.\n \n+--    Protected_Body_Subprogram (Node11)\n+--       Defined in protected operations. References the entity for the\n+--       subprogram which implements the body of the operation.\n+\n --    Protected_Formal (Node22)\n --       Defined in formal parameters (in, in out and out parameters). Used\n --       only for formals of protected operations. References corresponding\n --       formal parameter in the unprotected version of the operation that\n --       is created during expansion.\n \n---    Protected_Body_Subprogram (Node11)\n---       Defined in protected operations. References the entity for the\n---       subprogram which implements the body of the operation.\n-\n --    Protection_Object (Node23)\n --       Applies to protected entries, entry families and subprograms. Denotes\n --       the entity which is used to rename the _object component of protected\n@@ -3902,20 +3902,20 @@ package Einfo is\n --       is True only for implicitly declared subprograms; it is not set on the\n --       parent type's subprogram. See also Is_Abstract_Subprogram.\n \n---    Return_Present (Flag54)\n---       Defined in function and generic function entities. Set if the\n---       function contains a return statement (used for error checking).\n---       This flag can also be set in procedure and generic procedure\n---       entities (for convenience in setting it), but is only tested\n---       for the function case.\n-\n --    Return_Applies_To (Node8)\n --       Defined in E_Return_Statement. Points to the entity representing\n --       the construct to which the return statement applies, as defined in\n --       RM-6.5(4/2). Note that a (simple) return statement within an\n --       extended_return_statement applies to the extended_return_statement,\n --       even though it causes the whole function to return.\n \n+--    Return_Present (Flag54)\n+--       Defined in function and generic function entities. Set if the\n+--       function contains a return statement (used for error checking).\n+--       This flag can also be set in procedure and generic procedure\n+--       entities (for convenience in setting it), but is only tested\n+--       for the function case.\n+\n --    Returns_By_Ref (Flag90)\n --       Defined in function entities. Set if the function returns the result\n --       by reference, either because its return type is a by-reference-type\n@@ -4127,6 +4127,21 @@ package Einfo is\n --       are fully analyzed and typed with the base type of the subtype. Note\n --       that all entries are static and have values within the subtype range.\n \n+--    Static_Elaboration_Desired (Flag77)\n+--       Defined in library-level packages. Set by the pragma of the same\n+--       name, to indicate that static initialization must be attempted for\n+--       all types declared in the package, and that a warning must be emitted\n+--       for those types to which static initialization is not available.\n+\n+--    Static_Initialization (Node30)\n+--       Defined in initialization procedures for types whose objects can be\n+--       initialized statically. The value of this attribute is a positional\n+--       aggregate whose components are compile-time static values. Used\n+--       when available in object declarations to eliminate the call to the\n+--       initialization procedure, and to minimize elaboration code. Note:\n+--       This attribute uses the same field as Overridden_Operation, which is\n+--       irrelevant in init_procs.\n+\n --    Static_Real_Or_String_Predicate (Node25)\n --       Defined in real types/subtypes with static predicates (with the two\n --       flags Has_Predicates and Has_Static_Predicate set). Set if the type\n@@ -4156,21 +4171,6 @@ package Einfo is\n --       or the declaration of a \"hook\" object.\n --       In which case is it a flag, or a hook object???\n \n---    Static_Elaboration_Desired (Flag77)\n---       Defined in library-level packages. Set by the pragma of the same\n---       name, to indicate that static initialization must be attempted for\n---       all types declared in the package, and that a warning must be emitted\n---       for those types to which static initialization is not available.\n-\n---    Static_Initialization (Node30)\n---       Defined in initialization procedures for types whose objects can be\n---       initialized statically. The value of this attribute is a positional\n---       aggregate whose components are compile-time static values. Used\n---       when available in object declarations to eliminate the call to the\n---       initialization procedure, and to minimize elaboration code. Note:\n---       This attribute uses the same field as Overridden_Operation, which is\n---       irrelevant in init_procs.\n-\n --    Storage_Size_Variable (Node26) [implementation base type only]\n --       Defined in access types and task type entities. This flag is set\n --       if a valid and effective pragma Storage_Size applies to the base"}, {"sha": "be0c936d29857c3d33172a797388cdc030f35ebe", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -111,9 +111,6 @@ package Errout is\n    --  This normal suppression action may be overridden in cases 2-5 (but not\n    --  in case 1 or 7 by setting All_Errors mode, or by setting the special\n    --  unconditional message insertion character (!) as described below.\n-   --  This normal suppression action may be overridden in cases 2-5 (but\n-   --  not in case 1) by setting All_Errors mode, or by setting the special\n-   --  unconditional message insertion character (!) as described below.\n \n    ---------------------------------------------------------\n    -- Error Message Text and Message Insertion Characters --"}, {"sha": "04d1fc821f9c7d6835e2d84b3ebc4ba21ad5773b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -760,8 +760,10 @@ package body Exp_Ch3 is\n          --  want to inline, because nested stuff may cause difficulties in\n          --  inter-unit inlining, and furthermore there is in any case no\n          --  point in inlining such complex init procs.\n+         --  Also do not inline in case of Modify_Tree_For_C where front-end\n+         --  inlining is used and may not always play well with init procs.\n \n-         if not Has_Task (Proc_Id) then\n+         if not Has_Task (Proc_Id) and then not Modify_Tree_For_C then\n             Set_Is_Inlined (Proc_Id);\n          end if;\n \n@@ -3598,9 +3600,12 @@ package body Exp_Ch3 is\n          --  In addition, when compiled for another unit for inlining purposes,\n          --  it may make reference to entities that have not been elaborated\n          --  yet. Similar considerations apply to task types.\n+         --  Also do not inline in case of Modify_Tree_For_C where front-end\n+         --  inlining is used and may not always play well with init procs.\n \n          if not Is_Concurrent_Type (Rec_Type)\n            and then not Has_Task (Rec_Type)\n+           and then not Modify_Tree_For_C\n          then\n             Set_Is_Inlined  (Proc_Id);\n          end if;"}, {"sha": "06b5cf801f2518129d70f328a62e76e5fdc3a470", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -4219,8 +4219,6 @@ package body Sem_Ch13 is\n       ------------------------------\n \n       procedure Check_Iterator_Functions is\n-         Default : Entity_Id;\n-\n          function Valid_Default_Iterator (Subp : Entity_Id) return Boolean;\n          --  Check one possible interpretation for validity\n \n@@ -4277,8 +4275,8 @@ package body Sem_Ch13 is\n             end if;\n \n          else\n-            Default := Empty;\n             declare\n+               Default : Entity_Id := Empty;\n                I : Interp_Index;\n                It : Interp;\n \n@@ -4292,19 +4290,23 @@ package body Sem_Ch13 is\n \n                   elsif Present (Default) then\n                      Error_Msg_N (\"default iterator must be unique\", Expr);\n+                     Error_Msg_Sloc := Sloc (Default);\n+                     Error_Msg_N (\"\\\\possible interpretation#\", Expr);\n+                     Error_Msg_Sloc := Sloc (It.Nam);\n+                     Error_Msg_N (\"\\\\possible interpretation#\", Expr);\n \n                   else\n                      Default := It.Nam;\n                   end if;\n \n                   Get_Next_Interp (I, It);\n                end loop;\n-            end;\n \n-            if Present (Default) then\n-               Set_Entity (Expr, Default);\n-               Set_Is_Overloaded (Expr, False);\n-            end if;\n+               if Present (Default) then\n+                  Set_Entity (Expr, Default);\n+                  Set_Is_Overloaded (Expr, False);\n+               end if;\n+            end;\n          end if;\n       end Check_Iterator_Functions;\n "}, {"sha": "09c72f7a904d231f23b09c43a256bced44c0492e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -15012,11 +15012,27 @@ package body Sem_Ch3 is\n          --  Given that this new interface entity corresponds with a primitive\n          --  of the parent that was not overridden we must leave it associated\n          --  with its parent primitive to ensure that it will share the same\n-         --  dispatch table slot when overridden.\n+         --  dispatch table slot when overridden. We must set the Alias to Subp\n+         --  (instead of Iface_Subp), and we must fix Is_Abstract_Subprogram\n+         --  (in case we inherited Subp from Iface_Type via a nonabstract\n+         --  generic formal type).\n \n          if No (Actual_Subp) then\n             Set_Alias (New_Subp, Subp);\n \n+            declare\n+               T : Entity_Id := Find_Dispatching_Type (Subp);\n+            begin\n+               while Etype (T) /= T loop\n+                  if Is_Generic_Type (T) and then not Is_Abstract_Type (T) then\n+                     Set_Is_Abstract_Subprogram (New_Subp, False);\n+                     exit;\n+                  end if;\n+\n+                  T := Etype (T);\n+               end loop;\n+            end;\n+\n          --  For instantiations this is not needed since the previous call to\n          --  Derive_Subprogram leaves the entity well decorated.\n "}, {"sha": "3528f9fbd1243ae63ebb2f7aaa904f68b08d6401", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02886c2e8a6056b5e969f57431671d0980596f0b/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=02886c2e8a6056b5e969f57431671d0980596f0b", "patch": "@@ -735,6 +735,9 @@ package Sinfo is\n    --    they are systematically expanded into loops (for arrays) and\n    --    individual assignments (for records).\n \n+   --    Initialization procedures (init procs) for records and arrays are\n+   --    not inlined.\n+\n    ------------------------------------\n    -- Description of Semantic Fields --\n    ------------------------------------"}]}