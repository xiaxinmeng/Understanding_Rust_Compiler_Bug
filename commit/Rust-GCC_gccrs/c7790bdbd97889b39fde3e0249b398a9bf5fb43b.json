{"sha": "c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3OTBiZGJkOTc4ODliMzlmZGUzZTAyNDliMzk4YTliZjVmYjQzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-11T11:32:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-11T11:32:29Z"}, "message": "Make ext allocators support heterogeneous equality comparison\n\nThe Allocator requirements include the ability to compare different\nspecializations of the same allocator class template. This did not work\nfor __gnu_cxx::new_allocator and other extension allocators.  This patch\nreplaces the equality operators for those allocators with inline friends\nthat support heterogeneous comparisons.  (I'm not changing all ext\nallocators because some are bit-rotted already).\n\nAdditionally, the equality operators for comparing two std::allocator\nobjects of the same type are now defined as inline friends. Those\noverloads don't need to be declared at namespace scope, because they\naren't specified in the standard (but they're needed in this\nimplementation to avoid ambiguities caused by the extra overloads\ndefined for the base allocator type).\n\n\t* include/bits/allocator.h\n\t(operator==(const allocator<_Tp>&, const allocator<_Tp>))\n\t(operator!=(const allocator<_Tp>&, const allocator<_Tp>)): Replace\n\twith inline friends.\n\t* include/ext/debug_allocator.h (operator==, operator!=): Replace\n\twith inline friend functions that compare to rebound allocators.\n\t* include/ext/malloc_allocator.h (operator==, operator!=): Likewise.\n\t* include/ext/new_allocator.h (operator==, operator!=): Likewise.\n\t* testsuite/ext/debug_allocator/eq.cc: New test.\n\t* testsuite/ext/ext_pointer/alloc_eq.cc: New test.\n\t* testsuite/ext/malloc_allocator/eq.cc: New test.\n\t* testsuite/ext/new_allocator/eq.cc: New test.\n\nFrom-SVN: r265036", "tree": {"sha": "b1c73116191a1c6dd4176e76678744adf18f30cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c73116191a1c6dd4176e76678744adf18f30cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7336b8e23f93d73be60850d11b1830753b13e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7336b8e23f93d73be60850d11b1830753b13e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7336b8e23f93d73be60850d11b1830753b13e0f"}], "stats": {"total": 221, "additions": 181, "deletions": 40}, "files": [{"sha": "136989619102c3e2803135554469914be0b43029", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -1,3 +1,18 @@\n+2018-10-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/allocator.h\n+\t(operator==(const allocator<_Tp>&, const allocator<_Tp>))\n+\t(operator!=(const allocator<_Tp>&, const allocator<_Tp>)): Replace\n+\twith inline friends.\n+\t* include/ext/debug_allocator.h (operator==, operator!=): Replace\n+\twith inline friend functions that compare to rebound allocators.\n+\t* include/ext/malloc_allocator.h (operator==, operator!=): Likewise.\n+\t* include/ext/new_allocator.h (operator==, operator!=): Likewise.\n+\t* testsuite/ext/debug_allocator/eq.cc: New test.\n+\t* testsuite/ext/ext_pointer/alloc_eq.cc: New test.\n+\t* testsuite/ext/malloc_allocator/eq.cc: New test.\n+\t* testsuite/ext/new_allocator/eq.cc: New test.\n+\n 2018-10-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/87544"}, {"sha": "d9d1d26e13aafd5f79a71078303b26747665063a", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -148,6 +148,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       ~allocator() _GLIBCXX_NOTHROW { }\n \n+      friend bool\n+      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n+      { return true; }\n+\n+      friend bool\n+      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n+      { return false; }\n+\n       // Inherit everything else.\n     };\n \n@@ -157,24 +165,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_NOTHROW\n     { return true; }\n \n-  template<typename _Tp>\n-    inline bool\n-    operator==(const allocator<_Tp>&, const allocator<_Tp>&)\n-    _GLIBCXX_NOTHROW\n-    { return true; }\n-\n   template<typename _T1, typename _T2>\n     inline bool\n     operator!=(const allocator<_T1>&, const allocator<_T2>&)\n     _GLIBCXX_NOTHROW\n     { return false; }\n \n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)\n-    _GLIBCXX_NOTHROW\n-    { return false; }\n-\n   // Invalid allocator<cv T> partial specializations.\n   // allocator_traits::rebind_alloc can be used to form a valid allocator type.\n   template<typename _Tp>"}, {"sha": "3bc750e473bea30005a47df8bc54a2d09ccb3dea", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -174,16 +174,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       max_size() const throw()\n       { return _Traits::max_size(_M_allocator) - _M_extra; }\n \n-      friend bool\n-      operator==(const debug_allocator& __lhs, const debug_allocator& __rhs)\n-      { return __lhs._M_allocator == __rhs._M_allocator; }\n-    };\n+      template<typename _Alloc2>\n+\tfriend bool\n+\toperator==(const debug_allocator& __lhs,\n+\t\t   const debug_allocator<_Alloc2>& __rhs) _GLIBCXX_NOTHROW\n+\t{ return __lhs._M_allocator == debug_allocator(__rhs)._M_allocator; }\n \n-  template<typename _Alloc>\n-    inline bool\n-    operator!=(const debug_allocator<_Alloc>& __lhs,\n-\t       const debug_allocator<_Alloc>& __rhs)\n-    { return !(__lhs == __rhs); }\n+      template<typename _Alloc2>\n+\tfriend bool\n+\toperator!=(const debug_allocator& __lhs,\n+\t\t   const debug_allocator<_Alloc2>& __rhs) _GLIBCXX_NOTHROW\n+\t{ return !(__lhs == __rhs); }\n+    };\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "1ae53b11ddb536898831a36ba58a3023beeb85ff", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -166,17 +166,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void \n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n-    };\n \n-  template<typename _Tp>\n-    inline bool\n-    operator==(const malloc_allocator<_Tp>&, const malloc_allocator<_Tp>&)\n-    { return true; }\n-  \n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const malloc_allocator<_Tp>&, const malloc_allocator<_Tp>&)\n-    { return false; }\n+      template<typename _Up>\n+\tfriend bool\n+\toperator==(const malloc_allocator&, const malloc_allocator<_Up>&)\n+\t_GLIBCXX_NOTHROW\n+\t{ return true; }\n+\n+      template<typename _Up>\n+\tfriend bool\n+\toperator!=(const malloc_allocator&, const malloc_allocator<_Up>&)\n+\t_GLIBCXX_NOTHROW\n+\t{ return false; }\n+    };\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "83c894ce0a778d70c6e287378dfa6cab5724cf41", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -157,17 +157,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n-    };\n \n-  template<typename _Tp>\n-    inline bool\n-    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)\n-    { return true; }\n+      template<typename _Up>\n+\tfriend bool\n+\toperator==(const new_allocator&, const new_allocator<_Up>&)\n+\t_GLIBCXX_NOTHROW\n+\t{ return true; }\n \n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)\n-    { return false; }\n+      template<typename _Up>\n+\tfriend bool\n+\toperator!=(const new_allocator&, const new_allocator<_Up>&)\n+\t_GLIBCXX_NOTHROW\n+\t{ return false; }\n+    };\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "4623fde384e42b67370b6322edc1d9f6f075c450", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/eq.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Feq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Feq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Feq.cc?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <ext/debug_allocator.h>\n+\n+__gnu_cxx::debug_allocator< std::allocator<int> > i;\n+__gnu_cxx::debug_allocator< std::allocator<float> > f;\n+\n+bool b1 = i == i;\n+bool b2 = f == f;\n+bool b3 = i == f;\n+\n+bool n1 = i != i;\n+bool n2 = f != f;\n+bool n3 = i != f;"}, {"sha": "0b846cd6a1f7fdf95fa11d7bca1dcfbcae6d43da", "filename": "libstdc++-v3/testsuite/ext/ext_pointer/alloc_eq.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2Falloc_eq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2Falloc_eq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fext_pointer%2Falloc_eq.cc?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <ext/extptr_allocator.h>\n+\n+__gnu_cxx::_ExtPtr_allocator<int> i;\n+__gnu_cxx::_ExtPtr_allocator<float> f;\n+\n+bool b1 = i == i;\n+bool b2 = f == f;\n+bool b3 = i == f;\n+\n+bool n1 = i != i;\n+bool n2 = f != f;\n+bool n3 = i != f;"}, {"sha": "12063f1f5eb1b60104cffc86636a684768770740", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/eq.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Feq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Feq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Feq.cc?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <ext/malloc_allocator.h>\n+\n+__gnu_cxx::malloc_allocator<int> i;\n+__gnu_cxx::malloc_allocator<float> f;\n+\n+bool b1 = i == i;\n+bool b2 = f == f;\n+bool b3 = i == f;\n+\n+bool n1 = i != i;\n+bool n2 = f != f;\n+bool n3 = i != f;"}, {"sha": "6dc60038802213f46f302ec8a3299492f047affe", "filename": "libstdc++-v3/testsuite/ext/new_allocator/eq.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Feq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7790bdbd97889b39fde3e0249b398a9bf5fb43b/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Feq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Feq.cc?ref=c7790bdbd97889b39fde3e0249b398a9bf5fb43b", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <ext/new_allocator.h>\n+\n+__gnu_cxx::new_allocator<int> i;\n+__gnu_cxx::new_allocator<float> f;\n+\n+bool b1 = i == i;\n+bool b2 = f == f;\n+bool b3 = i == f;\n+\n+bool n1 = i != i;\n+bool n2 = f != f;\n+bool n3 = i != f;"}]}