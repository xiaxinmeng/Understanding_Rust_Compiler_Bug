{"sha": "5b667039e939f8f855fb06f617a6ade13e9b010d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2NjcwMzllOTM5ZjhmODU1ZmIwNmY2MTdhNmFkZTEzZTliMDEwZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-07-06T09:16:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-07-06T09:16:53Z"}, "message": "rs6000.h (RS6000_VARARGS_AREA, [...]): Remove.\n\n\t* config/rs6000/rs6000.h (RS6000_VARARGS_AREA, RS6000_VARARGS_SIZE):\n\tRemove.\n\t(STARTING_FRAME_OFFSET): Don't add RS6000_VARARGS_AREA.\n\t(machine_function): Move typedef to...\n\t* config/rs6000/rs6000.c (machine_function): ... here.  Add\n\tvarargs_save_offset field.\n\t(rs6000_stack_t): Remove varargs_size field.\n\t(setup_incoming_varargs): Allocate varargs save area using\n\tassign_stack_local, try to make it as small as possible.\n\tSave offset from virtual_stack_vars_rtx to the save area\n\tin cfun->machine->varargs_save_offset.  Use UNITS_PER_FP_WORD\n\tinstead of magic 8 when fp word byte size is used.\n\t(rs6000_va_start): Use cfun->machine->varargs_save_offset\n\tinstead of -RS6000_VARARGS_SIZE.\n\t(rs6000_stack_info, debug_stack_info,\n\trs6000_initial_elimination_offset): Remove all traces of\n\tvarargs_size.\n\t* config/rs6000/sysv4.h (RS6000_VARARGS_AREA): Remove.\n\t* config/rs6000/darwin.h (STARTING_FRAME_OFFSET): Don't add\n\tRS6000_VARARGS_AREA.\n\nFrom-SVN: r101655", "tree": {"sha": "b5e9eab605583ad47e9f746ca3871aa9749f131c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e9eab605583ad47e9f746ca3871aa9749f131c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b667039e939f8f855fb06f617a6ade13e9b010d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b667039e939f8f855fb06f617a6ade13e9b010d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b667039e939f8f855fb06f617a6ade13e9b010d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b667039e939f8f855fb06f617a6ade13e9b010d/comments", "author": null, "committer": null, "parents": [{"sha": "c456a94a49c9497da22209bb479c63487bb93c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c456a94a49c9497da22209bb479c63487bb93c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c456a94a49c9497da22209bb479c63487bb93c7c"}], "stats": {"total": 173, "additions": 118, "deletions": 55}, "files": [{"sha": "d25480b6b71fbfdfba90cffb2d2532afd2b3101a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b667039e939f8f855fb06f617a6ade13e9b010d", "patch": "@@ -1,3 +1,26 @@\n+2005-07-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/rs6000/rs6000.h (RS6000_VARARGS_AREA, RS6000_VARARGS_SIZE):\n+\tRemove.\n+\t(STARTING_FRAME_OFFSET): Don't add RS6000_VARARGS_AREA.\n+\t(machine_function): Move typedef to...\n+\t* config/rs6000/rs6000.c (machine_function): ... here.  Add\n+\tvarargs_save_offset field.\n+\t(rs6000_stack_t): Remove varargs_size field.\n+\t(setup_incoming_varargs): Allocate varargs save area using\n+\tassign_stack_local, try to make it as small as possible.\n+\tSave offset from virtual_stack_vars_rtx to the save area\n+\tin cfun->machine->varargs_save_offset.  Use UNITS_PER_FP_WORD\n+\tinstead of magic 8 when fp word byte size is used.\n+\t(rs6000_va_start): Use cfun->machine->varargs_save_offset\n+\tinstead of -RS6000_VARARGS_SIZE.\n+\t(rs6000_stack_info, debug_stack_info,\n+\trs6000_initial_elimination_offset): Remove all traces of\n+\tvarargs_size.\n+\t* config/rs6000/sysv4.h (RS6000_VARARGS_AREA): Remove.\n+\t* config/rs6000/darwin.h (STARTING_FRAME_OFFSET): Don't add\n+\tRS6000_VARARGS_AREA.\n+\n 2005-07-06  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/21963\n@@ -467,9 +490,9 @@\n \n 2005-07-02  Richard Henderson  <rth@redhat.com>\n \n-        * config/alpha/alpha.c (alpha_legitimize_address): Check for\n-         TLS_MODEL_NONE.\n-        (alpha_stdarg_optimize_hook): Use DECL_UID with va_list_vars.\n+\t* config/alpha/alpha.c (alpha_legitimize_address): Check for\n+\tTLS_MODEL_NONE.\n+\t(alpha_stdarg_optimize_hook): Use DECL_UID with va_list_vars.\n \n 2005-07-02  Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "72ec64b853106a7790b088b3f1195e0aedf6ab7c", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=5b667039e939f8f855fb06f617a6ade13e9b010d", "patch": "@@ -164,7 +164,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n    ? 0\t\t\t\t\t\t\t\t\t\\\n    : (RS6000_ALIGN (current_function_outgoing_args_size, 16)\t\t\\\n-      + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n       + RS6000_SAVE_AREA))\n \n #undef STACK_DYNAMIC_OFFSET"}, {"sha": "fb5f3ae4074c4dbbded668e6cadfcdfd640012b8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 92, "deletions": 22, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5b667039e939f8f855fb06f617a6ade13e9b010d", "patch": "@@ -93,7 +93,6 @@ typedef struct rs6000_stack {\n   int varargs_save_offset;\t/* offset to save the varargs registers */\n   int ehrd_offset;\t\t/* offset to EH return data */\n   int reg_size;\t\t\t/* register size (4 or 8) */\n-  int varargs_size;\t\t/* size to hold V.4 args passed in regs */\n   HOST_WIDE_INT vars_size;\t/* variable save area size */\n   int parm_size;\t\t/* outgoing parameter size */\n   int save_size;\t\t/* save area size */\n@@ -113,6 +112,23 @@ typedef struct rs6000_stack {\n   int spe_64bit_regs_used;\n } rs6000_stack_t;\n \n+/* A C structure for machine-specific, per-function data.\n+   This is added to the cfun structure.  */\n+typedef struct machine_function GTY(())\n+{\n+  /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n+  int ra_needs_full_frame;\n+  /* Some local-dynamic symbol.  */\n+  const char *some_ld_name;\n+  /* Whether the instruction chain has been scanned already.  */\n+  int insn_chain_scanned_p;\n+  /* Flags if __builtin_return_address (0) was used.  */\n+  int ra_need_lr;\n+  /* Offset from virtual_stack_vars_rtx to the start of the ABI_V4\n+     varargs save area.  */\n+  HOST_WIDE_INT varargs_save_offset;\n+} machine_function;\n+\n /* Target cpu type */\n \n enum processor_type rs6000_cpu;\n@@ -5218,11 +5234,70 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n   if (DEFAULT_ABI == ABI_V4)\n     {\n+      first_reg_offset = next_cum.sysv_gregno - GP_ARG_MIN_REG;\n+\n       if (! no_rtl)\n-\tsave_area = plus_constant (virtual_stack_vars_rtx,\n-\t\t\t\t   - RS6000_VARARGS_SIZE);\n+\t{\n+\t  int gpr_reg_num = 0, gpr_size = 0, fpr_size = 0;\n+\t  HOST_WIDE_INT offset = 0;\n+\n+\t  /* Try to optimize the size of the varargs save area.\n+\t     The ABI requires that ap.reg_save_area is doubleword\n+\t     aligned, but we don't need to allocate space for all\n+\t     the bytes, only those to which we actually will save\n+\t     anything.  */\n+\t  if (cfun->va_list_gpr_size && first_reg_offset < GP_ARG_NUM_REG)\n+\t    gpr_reg_num = GP_ARG_NUM_REG - first_reg_offset;\n+\t  if (TARGET_HARD_FLOAT && TARGET_FPRS\n+\t      && next_cum.fregno <= FP_ARG_V4_MAX_REG\n+\t      && cfun->va_list_fpr_size)\n+\t    {\n+\t      if (gpr_reg_num)\n+\t\tfpr_size = (next_cum.fregno - FP_ARG_MIN_REG)\n+\t\t\t   * UNITS_PER_FP_WORD;\n+\t      if (cfun->va_list_fpr_size\n+\t\t  < FP_ARG_V4_MAX_REG + 1 - next_cum.fregno)\n+\t\tfpr_size += cfun->va_list_fpr_size * UNITS_PER_FP_WORD;\n+\t      else\n+\t\tfpr_size += (FP_ARG_V4_MAX_REG + 1 - next_cum.fregno)\n+\t\t\t    * UNITS_PER_FP_WORD;\n+\t    }\n+\t  if (gpr_reg_num)\n+\t    {\n+\t      offset = -((first_reg_offset * reg_size) & ~7);\n+\t      if (!fpr_size && gpr_reg_num > cfun->va_list_gpr_size)\n+\t\t{\n+\t\t  gpr_reg_num = cfun->va_list_gpr_size;\n+\t\t  if (reg_size == 4 && (first_reg_offset & 1))\n+\t\t    gpr_reg_num++;\n+\t\t}\n+\t      gpr_size = (gpr_reg_num * reg_size + 7) & ~7;\n+\t    }\n+\t  else if (fpr_size)\n+\t    offset = - (int) (next_cum.fregno - FP_ARG_MIN_REG)\n+\t\t       * UNITS_PER_FP_WORD\n+\t\t     - (int) (GP_ARG_NUM_REG * reg_size);\n \n-      first_reg_offset = next_cum.sysv_gregno - GP_ARG_MIN_REG;\n+\t  if (gpr_size + fpr_size)\n+\t    {\n+\t      rtx reg_save_area\n+\t\t= assign_stack_local (BLKmode, gpr_size + fpr_size, 64);\n+\t      gcc_assert (GET_CODE (reg_save_area) == MEM);\n+\t      reg_save_area = XEXP (reg_save_area, 0);\n+\t      if (GET_CODE (reg_save_area) == PLUS)\n+\t\t{\n+\t\t  gcc_assert (XEXP (reg_save_area, 0)\n+\t\t\t      == virtual_stack_vars_rtx);\n+\t\t  gcc_assert (GET_CODE (XEXP (reg_save_area, 1)) == CONST_INT);\n+\t\t  offset += INTVAL (XEXP (reg_save_area, 1));\n+\t\t}\n+\t      else\n+\t\tgcc_assert (reg_save_area == virtual_stack_vars_rtx);\n+\t    }\n+\n+\t  cfun->machine->varargs_save_offset = offset;\n+\t  save_area = plus_constant (virtual_stack_vars_rtx, offset);\n+\t}\n     }\n   else\n     {\n@@ -5272,7 +5347,8 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       int fregno = next_cum.fregno, nregs;\n       rtx cr1 = gen_rtx_REG (CCmode, CR1_REGNO);\n       rtx lab = gen_label_rtx ();\n-      int off = (GP_ARG_NUM_REG * reg_size) + ((fregno - FP_ARG_MIN_REG) * 8);\n+      int off = (GP_ARG_NUM_REG * reg_size) + ((fregno - FP_ARG_MIN_REG)\n+\t\t\t\t\t       * UNITS_PER_FP_WORD);\n \n       emit_jump_insn\n \t(gen_rtx_SET (VOIDmode,\n@@ -5285,7 +5361,7 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n       for (nregs = 0;\n \t   fregno <= FP_ARG_V4_MAX_REG && nregs < cfun->va_list_fpr_size;\n-\t   fregno++, off += 8, nregs++)\n+\t   fregno++, off += UNITS_PER_FP_WORD, nregs++)\n \t{\n \t  mem = gen_rtx_MEM (DFmode, plus_constant (save_area, off));\n \t  set_mem_alias_set (mem, set);\n@@ -5423,8 +5499,9 @@ rs6000_va_start (tree valist, rtx nextarg)\n \n   /* Find the register save area.  */\n   t = make_tree (TREE_TYPE (sav), virtual_stack_vars_rtx);\n-  t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n-\t     build_int_cst (NULL_TREE, -RS6000_VARARGS_SIZE));\n+  if (cfun->machine->varargs_save_offset)\n+    t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n+\t       build_int_cst (NULL_TREE, cfun->machine->varargs_save_offset));\n   t = build (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -12116,17 +12193,16 @@ rs6000_stack_info (void)\n   /* Determine various sizes.  */\n   info_ptr->reg_size     = reg_size;\n   info_ptr->fixed_size   = RS6000_SAVE_AREA;\n-  info_ptr->varargs_size = RS6000_VARARGS_AREA;\n   info_ptr->vars_size    = RS6000_ALIGN (get_frame_size (), 8);\n   info_ptr->parm_size    = RS6000_ALIGN (current_function_outgoing_args_size,\n \t\t\t\t\t TARGET_ALTIVEC ? 16 : 8);\n   if (FRAME_GROWS_DOWNWARD)\n     info_ptr->vars_size\n-      += RS6000_ALIGN (info_ptr->fixed_size + info_ptr->varargs_size\n-\t\t       + info_ptr->vars_size + info_ptr->parm_size,\n+      += RS6000_ALIGN (info_ptr->fixed_size + info_ptr->vars_size\n+\t\t       + info_ptr->parm_size,\n \t\t       ABI_STACK_BOUNDARY / BITS_PER_UNIT)\n-\t - (info_ptr->fixed_size + info_ptr->varargs_size\n-\t    + info_ptr->vars_size + info_ptr->parm_size);\n+\t - (info_ptr->fixed_size + info_ptr->vars_size\n+\t    + info_ptr->parm_size);\n \n   if (TARGET_SPE_ABI && info_ptr->spe_64bit_regs_used != 0)\n     info_ptr->spe_gp_size = 8 * (32 - info_ptr->first_gp_reg_save);\n@@ -12251,8 +12327,7 @@ rs6000_stack_info (void)\n \n   non_fixed_size\t = (info_ptr->vars_size\n \t\t\t    + info_ptr->parm_size\n-\t\t\t    + info_ptr->save_size\n-\t\t\t    + info_ptr->varargs_size);\n+\t\t\t    + info_ptr->save_size);\n \n   info_ptr->total_size = RS6000_ALIGN (non_fixed_size + info_ptr->fixed_size,\n \t\t\t\t       ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n@@ -12452,9 +12527,6 @@ debug_stack_info (rs6000_stack_t *info)\n     fprintf (stderr, \"\\ttotal_size          = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t     info->total_size);\n \n-  if (info->varargs_size)\n-    fprintf (stderr, \"\\tvarargs_size        = %5d\\n\", info->varargs_size);\n-\n   if (info->vars_size)\n     fprintf (stderr, \"\\tvars_size           = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t     info->vars_size);\n@@ -18261,13 +18333,11 @@ rs6000_initial_elimination_offset (int from, int to)\n     {\n       offset = info->push_p ? 0 : -info->total_size;\n       if (FRAME_GROWS_DOWNWARD)\n-\toffset += info->fixed_size + info->varargs_size\n-\t\t  + info->vars_size + info->parm_size;\n+\toffset += info->fixed_size + info->vars_size + info->parm_size;\n     }\n   else if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     offset = FRAME_GROWS_DOWNWARD\n-\t     ? info->fixed_size + info->varargs_size\n-\t       + info->vars_size + info->parm_size\n+\t     ? info->fixed_size + info->vars_size + info->parm_size\n \t     : 0;\n   else if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     offset = info->total_size;"}, {"sha": "269d5bb0dfcef83d0c3c24294a00bc4426de4208", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5b667039e939f8f855fb06f617a6ade13e9b010d", "patch": "@@ -1251,16 +1251,9 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n \t\t\t\t     plus_constant (stack_pointer_rtx, \\\n \t\t\t\t\t\t    (TARGET_32BIT ? 20 : 40)))\n \n-/* Size of the V.4 varargs area if needed */\n-#define RS6000_VARARGS_AREA 0\n-\n /* Align an address */\n #define RS6000_ALIGN(n,a) (((n) + (a) - 1) & ~((a) - 1))\n \n-/* Size of V.4 varargs area in bytes */\n-#define RS6000_VARARGS_SIZE \\\n-  ((GP_ARG_NUM_REG * (TARGET_32BIT ? 4 : 8)) + (FP_ARG_NUM_REG * 8) + 8)\n-\n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n    first local allocated.  Otherwise, it is the offset to the BEGINNING\n@@ -1275,7 +1268,6 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n    ? 0\t\t\t\t\t\t\t\t\t\\\n    : (RS6000_ALIGN (current_function_outgoing_args_size,\t\t\\\n \t\t    TARGET_ALTIVEC ? 16 : 8)\t\t\t\t\\\n-      + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n       + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n@@ -1413,20 +1405,6 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n    || ((unsigned) (N) - FP_ARG_MIN_REG < FP_ARG_NUM_REG\t\t\t\\\n        && TARGET_HARD_FLOAT && TARGET_FPRS))\n \f\n-/* A C structure for machine-specific, per-function data.\n-   This is added to the cfun structure.  */\n-typedef struct machine_function GTY(())\n-{\n-  /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n-  int ra_needs_full_frame;\n-  /* Some local-dynamic symbol.  */\n-  const char *some_ld_name;\n-  /* Whether the instruction chain has been scanned already.  */\n-  int insn_chain_scanned_p;\n-  /* Flags if __builtin_return_address (0) was used.  */\n-  int ra_need_lr;\n-} machine_function;\n-\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n    hold all necessary information about the function itself"}, {"sha": "2d5b6e8526d35bdcf5c8265e8f12f70fd1bf0518", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b667039e939f8f855fb06f617a6ade13e9b010d/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=5b667039e939f8f855fb06f617a6ade13e9b010d", "patch": "@@ -249,13 +249,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    so it is not available to the normal user.  */\n #define FIXED_R13 1\n \n-/* Size of the V.4 varargs area if needed.  */\n-/* Override rs6000.h definition.  */\n-#undef\tRS6000_VARARGS_AREA\n-#define RS6000_VARARGS_AREA \\\n-  ((DEFAULT_ABI == ABI_V4 && current_function_stdarg)\t\t\\\n-   ? RS6000_VARARGS_SIZE : 0)\n-\n /* Override default big endianism definitions in rs6000.h.  */\n #undef\tBYTES_BIG_ENDIAN\n #undef\tWORDS_BIG_ENDIAN"}]}