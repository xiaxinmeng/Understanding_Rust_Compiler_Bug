{"sha": "4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxYTg4MzgzNWIyODA4NWUyZDZlNmExM2M0NzQ1NjgwZTRmMmVmNg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-23T21:51:16Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-23T21:51:16Z"}, "message": "Fix sparc so that reload doesn't try to load non-trivial vector consts directly.\n\n\t* config/sparc/predicates.md (input_operand): Disallow vector\n\tconstants other than 0 and -1.\n\t* config/sparc/sparc.c (sparc_preferred_reload_class): Return\n\tNO_REGS for vector constants other than 0 and -1.\n\nFrom-SVN: r180351", "tree": {"sha": "6e88fe0134950aa4cc047f5a9e5be02f13167fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e88fe0134950aa4cc047f5a9e5be02f13167fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a53588ff09224348d467976fb196225ecf9c8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a53588ff09224348d467976fb196225ecf9c8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a53588ff09224348d467976fb196225ecf9c8d9"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "3dc4ba9bd749f85d819f9cf51e4678688108b396", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "patch": "@@ -1,5 +1,10 @@\n 2011-10-23  David S. Miller  <davem@davemloft.net>\n \n+\t* config/sparc/predicates.md (input_operand): Disallow vector\n+\tconstants other than 0 and -1.\n+\t* config/sparc/sparc.c (sparc_preferred_reload_class): Return\n+\tNO_REGS for vector constants other than 0 and -1.\n+\n \t* config/sparc/sparc.h (SPARC_FIRST_INT_REG, SPARC_LAST_INT_REG,\n \tSPARC_INT_REG_P): Define.\n \t(HARD_REGNO_NREGS): Use SPARC_INT_REG_P."}, {"sha": "4dd734f047e3a5958a9ff177814650b9bca1995f", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "patch": "@@ -427,8 +427,12 @@\n       && (GET_CODE (op) == CONST_DOUBLE || GET_CODE (op) == CONST_INT))\n     return true;\n \n-  if ((mclass == MODE_FLOAT && GET_CODE (op) == CONST_DOUBLE)\n-      || (mclass == MODE_VECTOR_INT && GET_CODE (op) == CONST_VECTOR))\n+  if (mclass == MODE_FLOAT && GET_CODE (op) == CONST_DOUBLE)\n+    return true;\n+\n+  if (mclass == MODE_VECTOR_INT && GET_CODE (op) == CONST_VECTOR\n+      && (const_zero_operand (op, mode)\n+          || const_all_ones_operand (op, mode)))\n     return true;\n \n   if (register_operand (op, mode))"}, {"sha": "df0d825dbc486d662e5e56bf6b802d9ddeaa8a10", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a883835b28085e2d6e6a13c4745680e4f2ef6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4d1a883835b28085e2d6e6a13c4745680e4f2ef6", "patch": "@@ -11116,17 +11116,26 @@ sparc_conditional_register_usage (void)\n static reg_class_t\n sparc_preferred_reload_class (rtx x, reg_class_t rclass)\n {\n+  enum machine_mode mode = GET_MODE (x);\n   if (CONSTANT_P (x))\n     {\n       if (FP_REG_CLASS_P (rclass)\n \t  || rclass == GENERAL_OR_FP_REGS\n \t  || rclass == GENERAL_OR_EXTRA_FP_REGS\n-\t  || (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT && ! TARGET_FPU)\n-\t  || (GET_MODE (x) == TFmode && ! const_zero_operand (x, TFmode)))\n+\t  || (GET_MODE_CLASS (mode) == MODE_FLOAT && ! TARGET_FPU)\n+\t  || (mode == TFmode && ! const_zero_operand (x, mode)))\n \treturn NO_REGS;\n \n-      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n+      if (GET_MODE_CLASS (mode) == MODE_INT)\n \treturn GENERAL_REGS;\n+\n+      if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n+\t{\n+\t  if (! FP_REG_CLASS_P (rclass)\n+\t      || !(const_zero_operand (x, mode)\n+\t\t   || const_all_ones_operand (x, mode)))\n+\t    return NO_REGS;\n+\t}\n     }\n \n   return rclass;"}]}