{"sha": "a93f3513c2c1fef4541306f24597f1fc154548b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzZjM1MTNjMmMxZmVmNDU0MTMwNmYyNDU5N2YxZmMxNTQ1NDhiMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-22T03:45:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-22T03:45:37Z"}, "message": "PR c++/71913 - missing copy elision with new.\n\n\t* call.c (unsafe_copy_elision_p): It's OK to elide when\n\tinitializing an unknown object.\n\nFrom-SVN: r238621", "tree": {"sha": "27ca6255ab8e5023a9107be93aafb36e5fce54a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ca6255ab8e5023a9107be93aafb36e5fce54a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a93f3513c2c1fef4541306f24597f1fc154548b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93f3513c2c1fef4541306f24597f1fc154548b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93f3513c2c1fef4541306f24597f1fc154548b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93f3513c2c1fef4541306f24597f1fc154548b3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5ec842cde69dedaf9a447d7d7a00735c9b4da40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ec842cde69dedaf9a447d7d7a00735c9b4da40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ec842cde69dedaf9a447d7d7a00735c9b4da40"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "b196d54937d8cc17eac5db55a5e9cdf6683ee1ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a93f3513c2c1fef4541306f24597f1fc154548b3", "patch": "@@ -1,5 +1,9 @@\n 2016-07-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71913\n+\t* call.c (unsafe_copy_elision_p): It's OK to elide when\n+\tinitializing an unknown object.\n+\n \t* call.c (build_over_call): Check unsafe_copy_elision_p even for\n \ttrivial constructors.\n \t* method.c (do_build_copy_constructor): Don't copy tail padding"}, {"sha": "061e7084d37fc27b01f8e046bc8d3b7703460688", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a93f3513c2c1fef4541306f24597f1fc154548b3", "patch": "@@ -7275,10 +7275,11 @@ unsafe_copy_elision_p (tree target, tree exp)\n   if (TREE_CODE (exp) != TARGET_EXPR)\n     return false;\n   tree type = TYPE_MAIN_VARIANT (TREE_TYPE (exp));\n-  if (type == CLASSTYPE_AS_BASE (type))\n+  /* It's safe to elide the copy for a class with no tail padding.  */\n+  if (tree_int_cst_equal (TYPE_SIZE (type), CLASSTYPE_SIZE (type)))\n     return false;\n-  if (!is_base_field_ref (target)\n-      && resolves_to_fixed_type_p (target, NULL))\n+  /* It's safe to elide the copy if we aren't initializing a base object.  */\n+  if (!is_base_field_ref (target))\n     return false;\n   tree init = TARGET_EXPR_INITIAL (exp);\n   /* build_compound_expr pushes COMPOUND_EXPR inside TARGET_EXPR.  */"}, {"sha": "0a9978ca6615046e149702af04ecf422873bb459", "filename": "gcc/testsuite/g++.dg/init/elide5.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a93f3513c2c1fef4541306f24597f1fc154548b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide5.C?ref=a93f3513c2c1fef4541306f24597f1fc154548b3", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/71913\n+// { dg-do link { target c++11 } }\n+\n+void* operator new(unsigned long, void* p) { return p; }\n+\n+struct IndirectReturn {\n+  IndirectReturn() {}\n+  // Undefined so we get a link error if the indirect return value is copied\n+  IndirectReturn(const IndirectReturn&);\n+  IndirectReturn& operator=(const IndirectReturn&) = delete;\n+  ~IndirectReturn() {}\n+};\n+\n+IndirectReturn foo() { return IndirectReturn(); }\n+\n+void bar(void* ptr) {\n+  new (ptr) IndirectReturn(foo());\n+}\n+\n+alignas (alignof (IndirectReturn))\n+unsigned char c[sizeof(IndirectReturn)];\n+\n+int main()\n+{\n+  bar(c);\n+}\n+"}]}