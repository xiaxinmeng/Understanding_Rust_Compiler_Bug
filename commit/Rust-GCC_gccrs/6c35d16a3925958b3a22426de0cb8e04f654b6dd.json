{"sha": "6c35d16a3925958b3a22426de0cb8e04f654b6dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzNWQxNmEzOTI1OTU4YjNhMjI0MjZkZTBjYjhlMDRmNjU0YjZkZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-24T11:39:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-06-24T14:57:27Z"}, "message": "x86: Share _isa_names_table and use cpuinfo.h\n\nBoth driver-i386.c and libgcc use CPUID to detect the processor name\nas well as available ISAs.  To detect the same processor or ISAs, the\nsame detection logic is duplicated in 2 places.  Sometimes only one place\nwas up to date or got it right.  Sometimes both places got it wrong.\n\n1. Add common/config/i386/i386-isas.h to define _isa_names_table.\n2. Use isa_names_table to auto-generate ISA command-line options.\n3. Use isa_names_table to auto-generate __builtin_cpu_supports tests.\n4. Use common/config/i386/cpuinfo.h to check available ISAs and detect\nnewer Intel processors in driver-i386.c and builtin_target.c.\n5. Detection of AMD processors and older processors in driver-i386.c is\nunchanged.\n\ngcc/\n\n\tPR target/95843\n\t* common/config/i386/i386-isas.h: New file.  Extracted from\n\tgcc/config/i386/i386-builtins.c.\n\t(_isa_names_table): Add option.\n\t(ISA_NAMES_TABLE_START): New.\n\t(ISA_NAMES_TABLE_END): Likewise.\n\t(ISA_NAMES_TABLE_ENTRY): Likewise.\n\t(isa_names_table): Defined with ISA_NAMES_TABLE_START,\n\tISA_NAMES_TABLE_END and ISA_NAMES_TABLE_ENTRY.  Add more ISAs\n\tfrom enum processor_features.\n\t* config/i386/driver-i386.c: Include\n\t\"common/config/i386/cpuinfo.h\" and\n\t\"common/config/i386/i386-isas.h\".\n\t(has_feature): New macro.\n\t(host_detect_local_cpu): Call cpu_indicator_init to get CPU\n\tfeatures.  Use has_feature to detect processor features.  Call\n\tCall get_intel_cpu to get the newer Intel CPU name.  Use\n\tisa_names_table to generate command-line options.\n\t* config/i386/i386-builtins.c: Include\n\t\"common/config/i386/i386-isas.h\".\n\t(_arch_names_table): Removed.\n\t(isa_names_table): Likewise.\n\ngcc/testsuite/\n\n\tPR target/95843\n\t* gcc.target/i386/builtin_target.c: Include <stdlib.h>,\n\t../../../common/config/i386/i386-cpuinfo.h and\n\t../../../common/config/i386/cpuinfo.h.\n\t(check_amd_cpu_model): Removed.\n\t(check_intel_cpu_model): Likewise,\n\t(CHECK___builtin_cpu_is): New.\n\t(gcc_assert): New.  Defined as assert.\n\t(gcc_unreachable): New.  Defined as abort.\n\t(inline): New.  Defined as empty.\n\t(ISA_NAMES_TABLE_START): Likewise.\n\t(ISA_NAMES_TABLE_END): Likewise.\n\t(ISA_NAMES_TABLE_ENTRY): New.\n\t(check_features): Include\n\t\"../../../common/config/i386/i386-isas.h\".\n\t(check_detailed): Call cpu_indicator_init.  Always call\n\tcheck_features.  Call get_amd_cpu instead of check_amd_cpu_model.\n\tCall get_intel_cpu instead of check_intel_cpu_model.", "tree": {"sha": "6ac739fcb7e96daf0ae174c84786c069fea11f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ac739fcb7e96daf0ae174c84786c069fea11f1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c35d16a3925958b3a22426de0cb8e04f654b6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c35d16a3925958b3a22426de0cb8e04f654b6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c35d16a3925958b3a22426de0cb8e04f654b6dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c35d16a3925958b3a22426de0cb8e04f654b6dd/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acba4660b4c30354c586ea8ae9fc40ccf53bd6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acba4660b4c30354c586ea8ae9fc40ccf53bd6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acba4660b4c30354c586ea8ae9fc40ccf53bd6e3"}], "stats": {"total": 1214, "additions": 306, "deletions": 908}, "files": [{"sha": "08c9dbecc76443d50667a56abb76965a3d111d76", "filename": "gcc/common/config/i386/i386-isas.h", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=6c35d16a3925958b3a22426de0cb8e04f654b6dd", "patch": "@@ -0,0 +1,163 @@\n+/* i386 ISA table.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* These are the target attribute strings for which a dispatcher is\n+   available, from fold_builtin_cpu.  */\n+struct _isa_names_table\n+{\n+  const char *const name;\n+  const enum processor_features feature;\n+  const enum feature_priority priority;\n+  const char *const option;\n+};\n+\n+/* NB: isa_names_table is shared by i386-builtins.c, driver-i386.c and\n+   gcc.target/i386/builtin_target.c.  isa_names_table is a static const\n+   array in i386-builtins.c and driver-i386.c.  But it is a list of\n+   assert statements in gcc.target/i386/builtin_target.c.  */\n+\n+#ifndef ISA_NAMES_TABLE_START\n+# define ISA_NAMES_TABLE_START \\\n+    static const struct _isa_names_table isa_names_table[] = {\n+#endif\n+\n+#ifndef ISA_NAMES_TABLE_END\n+# define ISA_NAMES_TABLE_END };\n+#endif\n+\n+#ifndef ISA_NAMES_TABLE_ENTRY\n+# define ISA_NAMES_TABLE_ENTRY(name, feature, priority, option)  \\\n+    {name, feature, priority, option},\n+#endif\n+\n+ISA_NAMES_TABLE_START\n+  ISA_NAMES_TABLE_ENTRY(\"cmov\", FEATURE_CMOV, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"mmx\", FEATURE_MMX, P_MMX, \"-mmmx\")\n+  ISA_NAMES_TABLE_ENTRY(\"popcnt\", FEATURE_POPCNT, P_POPCNT, \"-mpopcnt\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse\", FEATURE_SSE, P_SSE, \"-msse\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse2\", FEATURE_SSE2, P_SSE2, \"-msse2\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse3\", FEATURE_SSE3, P_SSE3, \"-msse3\")\n+  ISA_NAMES_TABLE_ENTRY(\"ssse3\", FEATURE_SSSE3, P_SSSE3, \"-mssse3\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse4.1\", FEATURE_SSE4_1, P_SSE4_1, \"-msse4.1\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse4.2\", FEATURE_SSE4_2, P_SSE4_2, \"-msse4.2\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx\", FEATURE_AVX, P_AVX, \"-mavx\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx2\", FEATURE_AVX2, P_AVX2, \"-mavx2\")\n+  ISA_NAMES_TABLE_ENTRY(\"sse4a\", FEATURE_SSE4_A, P_SSE4_A, \"-msse4a\")\n+  ISA_NAMES_TABLE_ENTRY(\"fma4\", FEATURE_FMA4, P_FMA4, \"-mfma4\")\n+  ISA_NAMES_TABLE_ENTRY(\"xop\", FEATURE_XOP, P_XOP, \"-mxop\")\n+  ISA_NAMES_TABLE_ENTRY(\"fma\", FEATURE_FMA, P_FMA, \"-mfma\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512f\", FEATURE_AVX512F, P_AVX512F,\n+\t\t\t\"-mavx512f\")\n+  ISA_NAMES_TABLE_ENTRY(\"bmi\", FEATURE_BMI, P_BMI, \"-mbmi\")\n+  ISA_NAMES_TABLE_ENTRY(\"bmi2\", FEATURE_BMI2, P_BMI2, \"-mbmi2\")\n+  ISA_NAMES_TABLE_ENTRY(\"aes\", FEATURE_AES, P_AES, \"-maes\")\n+  ISA_NAMES_TABLE_ENTRY(\"pclmul\", FEATURE_PCLMUL, P_PCLMUL, \"-mpclmul\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vl\", FEATURE_AVX512VL, P_NONE,\n+\t\t\t\"-mavx512vl\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512bw\", FEATURE_AVX512BW, P_NONE,\n+\t\t\t\"-mavx512bw\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512dq\", FEATURE_AVX512DQ, P_NONE,\n+\t\t\t\"-mavx512dq\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512cd\", FEATURE_AVX512CD, P_NONE,\n+\t\t\t\"-mavx512cd\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512er\", FEATURE_AVX512ER, P_NONE,\n+\t\t\t\"-mavx512er\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512pf\", FEATURE_AVX512PF, P_NONE,\n+\t\t\t\"-mavx512pf\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vbmi\", FEATURE_AVX512VBMI, P_NONE,\n+\t\t\t\"-mavx512vbmi\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512ifma\", FEATURE_AVX512IFMA, P_NONE,\n+\t\t\t\"-mavx512ifma\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx5124vnniw\", FEATURE_AVX5124VNNIW, P_NONE,\n+\t\t\t\"-mavx5124vnniw\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx5124fmaps\", FEATURE_AVX5124FMAPS, P_NONE,\n+\t\t\t\"-mavx5124fmaps\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vpopcntdq\", FEATURE_AVX512VPOPCNTDQ,\n+\t\t\tP_NONE, \"-mavx512vpopcntdq\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vbmi2\", FEATURE_AVX512VBMI2, P_NONE,\n+\t\t\t\"-mavx512vbmi2\")\n+  ISA_NAMES_TABLE_ENTRY(\"gfni\", FEATURE_GFNI, P_NONE, \"-mgfni\")\n+  ISA_NAMES_TABLE_ENTRY(\"vpclmulqdq\", FEATURE_VPCLMULQDQ, P_NONE,\n+\t\t\t\"-mvpclmulqdq\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vnni\", FEATURE_AVX512VNNI, P_NONE,\n+\t\t\t\"-mavx512vnni\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512bitalg\", FEATURE_AVX512BITALG, P_NONE,\n+\t\t\t\"-mavx512bitalg\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512bf16\", FEATURE_AVX512BF16, P_NONE,\n+\t\t\t\"-mavx512bf16\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512vp2intersect\", FEATURE_AVX512VP2INTERSECT,\n+\t\t\tP_NONE, \"-mavx512vp2intersect\")\n+  ISA_NAMES_TABLE_ENTRY(\"3dnow\", FEATURE_3DNOW, P_NONE, \"-m3dnow\")\n+  ISA_NAMES_TABLE_ENTRY(\"3dnowp\", FEATURE_3DNOWP, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"adx\", FEATURE_ADX, P_NONE, \"-madx\")\n+  ISA_NAMES_TABLE_ENTRY(\"abm\", FEATURE_ABM, P_NONE, \"-mabm\")\n+  ISA_NAMES_TABLE_ENTRY(\"cldemote\", FEATURE_CLDEMOTE, P_NONE,\n+\t\t\t\"-mcldemote\")\n+  ISA_NAMES_TABLE_ENTRY(\"clflushopt\", FEATURE_CLFLUSHOPT, P_NONE,\n+\t\t\t\"-mclflushopt\")\n+  ISA_NAMES_TABLE_ENTRY(\"clwb\", FEATURE_CLWB, P_NONE, \"-mclwb\")\n+  ISA_NAMES_TABLE_ENTRY(\"clzero\", FEATURE_CLZERO, P_NONE, \"-mclzero\")\n+  ISA_NAMES_TABLE_ENTRY(\"cmpxchg16b\", FEATURE_CMPXCHG16B, P_NONE,\n+\t\t\t\"-mcx16\")\n+  ISA_NAMES_TABLE_ENTRY(\"cmpxchg8b\", FEATURE_CMPXCHG8B, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"enqcmd\", FEATURE_ENQCMD, P_NONE, \"-menqcmd\")\n+  ISA_NAMES_TABLE_ENTRY(\"f16c\", FEATURE_F16C, P_NONE, \"-mf16c\")\n+  ISA_NAMES_TABLE_ENTRY(\"fsgsbase\", FEATURE_FSGSBASE, P_NONE,\n+\t\t\t\"-mfsgsbase\")\n+  ISA_NAMES_TABLE_ENTRY(\"fxsave\", FEATURE_FXSAVE, P_NONE, \"-mfxsr\")\n+  ISA_NAMES_TABLE_ENTRY(\"hle\", FEATURE_HLE, P_NONE, \"-mhle\")\n+  ISA_NAMES_TABLE_ENTRY(\"ibt\", FEATURE_IBT, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"lahf_lm\", FEATURE_LAHF_LM, P_NONE, \"-msahf\")\n+  ISA_NAMES_TABLE_ENTRY(\"lm\", FEATURE_LM, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"lwp\", FEATURE_LWP, P_NONE, \"-mlwp\")\n+  ISA_NAMES_TABLE_ENTRY(\"lzcnt\", FEATURE_LZCNT, P_NONE, \"-mlzcnt\")\n+  ISA_NAMES_TABLE_ENTRY(\"movbe\", FEATURE_MOVBE, P_NONE, \"-mmovbe\")\n+  ISA_NAMES_TABLE_ENTRY(\"movdir64b\", FEATURE_MOVDIR64B, P_NONE,\n+\t\t\t\"-mmovdir64b\")\n+  ISA_NAMES_TABLE_ENTRY(\"movdiri\", FEATURE_MOVDIRI, P_NONE, \"-mmovdiri\")\n+  ISA_NAMES_TABLE_ENTRY(\"mwaitx\", FEATURE_MWAITX, P_NONE, \"-mmwaitx\")\n+  ISA_NAMES_TABLE_ENTRY(\"osxsave\", FEATURE_OSXSAVE, P_NONE, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"pconfig\", FEATURE_PCONFIG, P_NONE, \"-mpconfig\")\n+  ISA_NAMES_TABLE_ENTRY(\"pku\", FEATURE_PKU, P_NONE, \"-mpku\")\n+  ISA_NAMES_TABLE_ENTRY(\"prefetchwt1\", FEATURE_PREFETCHWT1, P_NONE,\n+\t\t\t\"-mprefetchwt1\")\n+  ISA_NAMES_TABLE_ENTRY(\"prfchw\", FEATURE_PRFCHW, P_NONE, \"-mprfchw\")\n+  ISA_NAMES_TABLE_ENTRY(\"ptwrite\", FEATURE_PTWRITE, P_NONE, \"-mptwrite\")\n+  ISA_NAMES_TABLE_ENTRY(\"rdpid\", FEATURE_RDPID, P_NONE, \"-mrdpid\")\n+  ISA_NAMES_TABLE_ENTRY(\"rdrnd\", FEATURE_RDRND, P_NONE, \"-mrdrnd\")\n+  ISA_NAMES_TABLE_ENTRY(\"rdseed\", FEATURE_RDSEED, P_NONE, \"-mrdseed\")\n+  ISA_NAMES_TABLE_ENTRY(\"rtm\", FEATURE_RTM, P_NONE, \"-mrtm\")\n+  ISA_NAMES_TABLE_ENTRY(\"serialize\", FEATURE_SERIALIZE, P_NONE,\n+\t\t\t\"-mserialize\")\n+  ISA_NAMES_TABLE_ENTRY(\"sgx\", FEATURE_SGX, P_NONE, \"-msgx\")\n+  ISA_NAMES_TABLE_ENTRY(\"sha\", FEATURE_SHA, P_NONE, \"-msha\")\n+  ISA_NAMES_TABLE_ENTRY(\"shstk\", FEATURE_SHSTK, P_NONE, \"-mshstk\")\n+  ISA_NAMES_TABLE_ENTRY(\"tbm\", FEATURE_TBM, P_NONE, \"-mtbm\")\n+  ISA_NAMES_TABLE_ENTRY(\"tsxldtrk\", FEATURE_TSXLDTRK, P_NONE,\n+\t\t\t\"-mtsxldtrk\")\n+  ISA_NAMES_TABLE_ENTRY(\"vaes\", FEATURE_VAES, P_NONE, \"-mvaes\")\n+  ISA_NAMES_TABLE_ENTRY(\"waitpkg\", FEATURE_WAITPKG, P_NONE, \"-mwaitpkg\")\n+  ISA_NAMES_TABLE_ENTRY(\"wbnoinvd\", FEATURE_WBNOINVD, P_NONE,\n+\t\t\t\"-mwbnoinvd\")\n+  ISA_NAMES_TABLE_ENTRY(\"xsave\", FEATURE_XSAVE, P_NONE, \"-mxsave\")\n+  ISA_NAMES_TABLE_ENTRY(\"xsavec\", FEATURE_XSAVEC, P_NONE, \"-mxsavec\")\n+  ISA_NAMES_TABLE_ENTRY(\"xsaveopt\", FEATURE_XSAVEOPT, P_NONE,\n+\t\t\t\"-mxsaveopt\")\n+  ISA_NAMES_TABLE_ENTRY(\"xsaves\", FEATURE_XSAVES, P_NONE, \"-mxsaves\")\n+ISA_NAMES_TABLE_END"}, {"sha": "e9e4d6ed023766de6f5c3f0f5af8b0e9233ea2b3", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 112, "deletions": 532, "changes": 644, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=6c35d16a3925958b3a22426de0cb8e04f654b6dd", "patch": "@@ -28,6 +28,8 @@ const char *host_detect_local_cpu (int argc, const char **argv);\n \n #if defined(__GNUC__) && (__GNUC__ >= 5 || !defined(__PIC__))\n #include \"cpuid.h\"\n+#include \"common/config/i386/cpuinfo.h\"\n+#include \"common/config/i386/i386-isas.h\"\n \n struct cache_desc\n {\n@@ -388,53 +390,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   const char *cache = \"\";\n   const char *options = \"\";\n \n-  unsigned int eax, ebx, ecx, edx;\n+  unsigned int ebx, ecx, edx;\n \n   unsigned int max_level, ext_level;\n \n   unsigned int vendor;\n   unsigned int model, family;\n \n-  unsigned int has_sse3, has_ssse3, has_cmpxchg16b;\n-  unsigned int has_cmpxchg8b, has_cmov, has_mmx, has_sse, has_sse2;\n-\n-  /* Extended features */\n-  unsigned int has_lahf_lm = 0, has_sse4a = 0;\n-  unsigned int has_longmode = 0, has_3dnowp = 0, has_3dnow = 0;\n-  unsigned int has_movbe = 0, has_sse4_1 = 0, has_sse4_2 = 0;\n-  unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0, has_avx2 = 0;\n-  unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n-  unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n-  unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n-  unsigned int has_hle = 0, has_rtm = 0, has_sgx = 0;\n-  unsigned int has_pconfig = 0, has_wbnoinvd = 0;\n-  unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n-  unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n-  unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n-  unsigned int has_avx512er = 0, has_avx512pf = 0, has_avx512cd = 0;\n-  unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n-  unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n-  unsigned int has_avx512dq = 0, has_avx512bw = 0, has_avx512vl = 0;\n-  unsigned int has_avx512vbmi = 0, has_avx512ifma = 0, has_clwb = 0;\n-  unsigned int has_mwaitx = 0, has_clzero = 0, has_pku = 0, has_rdpid = 0;\n-  unsigned int has_avx5124fmaps = 0, has_avx5124vnniw = 0;\n-  unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n-  unsigned int has_avx512bitalg = 0;\n-  unsigned int has_avx512vpopcntdq = 0;\n-  unsigned int has_shstk = 0;\n-  unsigned int has_avx512vnni = 0, has_vaes = 0;\n-  unsigned int has_vpclmulqdq = 0;\n-  unsigned int has_avx512vp2intersect = 0;\n-  unsigned int has_movdiri = 0, has_movdir64b = 0;\n-  unsigned int has_enqcmd = 0;\n-  unsigned int has_waitpkg = 0;\n-  unsigned int has_cldemote = 0;\n-  unsigned int has_avx512bf16 = 0;\n-  unsigned int has_serialize = 0;\n-  unsigned int has_tsxldtrk = 0;\n-\n-  unsigned int has_ptwrite = 0;\n-\n   bool arch;\n \n   unsigned int l2sizekb = 0;\n@@ -447,218 +409,39 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   if (!arch && strcmp (argv[0], \"tune\"))\n     return NULL;\n \n-  max_level = __get_cpuid_max (0, &vendor);\n-  if (max_level < 1)\n-    goto done;\n-\n-  __cpuid (1, eax, ebx, ecx, edx);\n+  struct __processor_model cpu_model = { };\n+  struct __processor_model2 cpu_model2 = { };\n+  unsigned int cpu_features2[SIZE_OF_CPU_FEATURES] = { };\n \n-  model = (eax >> 4) & 0x0f;\n-  family = (eax >> 8) & 0x0f;\n-  if (vendor == signature_INTEL_ebx\n-      || vendor == signature_AMD_ebx)\n-    {\n-      unsigned int extended_model, extended_family;\n-\n-      extended_model = (eax >> 12) & 0xf0;\n-      extended_family = (eax >> 20) & 0xff;\n-      if (family == 0x0f)\n-\t{\n-\t  family += extended_family;\n-\t  model += extended_model;\n-\t}\n-      else if (family == 0x06)\n-\tmodel += extended_model;\n-    }\n-\n-  has_sse3 = ecx & bit_SSE3;\n-  has_ssse3 = ecx & bit_SSSE3;\n-  has_sse4_1 = ecx & bit_SSE4_1;\n-  has_sse4_2 = ecx & bit_SSE4_2;\n-  has_avx = ecx & bit_AVX;\n-  has_osxsave = ecx & bit_OSXSAVE;\n-  has_cmpxchg16b = ecx & bit_CMPXCHG16B;\n-  has_movbe = ecx & bit_MOVBE;\n-  has_popcnt = ecx & bit_POPCNT;\n-  has_aes = ecx & bit_AES;\n-  has_pclmul = ecx & bit_PCLMUL;\n-  has_fma = ecx & bit_FMA;\n-  has_f16c = ecx & bit_F16C;\n-  has_rdrnd = ecx & bit_RDRND;\n-  has_xsave = ecx & bit_XSAVE;\n-\n-  has_cmpxchg8b = edx & bit_CMPXCHG8B;\n-  has_cmov = edx & bit_CMOV;\n-  has_mmx = edx & bit_MMX;\n-  has_fxsr = edx & bit_FXSAVE;\n-  has_sse = edx & bit_SSE;\n-  has_sse2 = edx & bit_SSE2;\n-\n-  if (max_level >= 7)\n-    {\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\n-      has_bmi = ebx & bit_BMI;\n-      has_sgx = ebx & bit_SGX;\n-      has_hle = ebx & bit_HLE;\n-      has_rtm = ebx & bit_RTM;\n-      has_avx2 = ebx & bit_AVX2;\n-      has_bmi2 = ebx & bit_BMI2;\n-      has_fsgsbase = ebx & bit_FSGSBASE;\n-      has_rdseed = ebx & bit_RDSEED;\n-      has_adx = ebx & bit_ADX;\n-      has_avx512f = ebx & bit_AVX512F;\n-      has_avx512er = ebx & bit_AVX512ER;\n-      has_avx512pf = ebx & bit_AVX512PF;\n-      has_avx512cd = ebx & bit_AVX512CD;\n-      has_sha = ebx & bit_SHA;\n-      has_clflushopt = ebx & bit_CLFLUSHOPT;\n-      has_clwb = ebx & bit_CLWB;\n-      has_avx512dq = ebx & bit_AVX512DQ;\n-      has_avx512bw = ebx & bit_AVX512BW;\n-      has_avx512vl = ebx & bit_AVX512VL;\n-      has_avx512ifma = ebx & bit_AVX512IFMA;\n-\n-      has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n-      has_avx512vbmi = ecx & bit_AVX512VBMI;\n-      has_pku = ecx & bit_OSPKE;\n-      has_avx512vbmi2 = ecx & bit_AVX512VBMI2;\n-      has_avx512vnni = ecx & bit_AVX512VNNI;\n-      has_rdpid = ecx & bit_RDPID;\n-      has_gfni = ecx & bit_GFNI;\n-      has_vaes = ecx & bit_VAES;\n-      has_vpclmulqdq = ecx & bit_VPCLMULQDQ;\n-      has_avx512bitalg = ecx & bit_AVX512BITALG;\n-      has_avx512vpopcntdq = ecx & bit_AVX512VPOPCNTDQ;\n-      has_movdiri = ecx & bit_MOVDIRI;\n-      has_movdir64b = ecx & bit_MOVDIR64B;\n-      has_enqcmd = ecx & bit_ENQCMD;\n-      has_cldemote = ecx & bit_CLDEMOTE;\n-\n-      has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n-      has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n-      has_avx512vp2intersect = edx & bit_AVX512VP2INTERSECT;\n-      has_serialize = edx & bit_SERIALIZE;\n-      has_tsxldtrk = edx & bit_TSXLDTRK;\n-\n-      has_shstk = ecx & bit_SHSTK;\n-      has_pconfig = edx & bit_PCONFIG;\n-      has_waitpkg = ecx & bit_WAITPKG;\n-\n-      __cpuid_count (7, 1, eax, ebx, ecx, edx);\n-      has_avx512bf16 = eax & bit_AVX512BF16;\n-    }\n-\n-  if (max_level >= 13)\n-    {\n-      __cpuid_count (13, 1, eax, ebx, ecx, edx);\n-\n-      has_xsaveopt = eax & bit_XSAVEOPT;\n-      has_xsavec = eax & bit_XSAVEC;\n-      has_xsaves = eax & bit_XSAVES;\n-    }\n-\n-  if (max_level >= 0x14)\n-    {\n-      __cpuid_count (0x14, 0, eax, ebx, ecx, edx);\n-\n-      has_ptwrite = ebx & bit_PTWRITE;\n-    }\n-\n-  /* Check cpuid level of extended features.  */\n-  __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n-\n-  if (ext_level >= 0x80000001)\n-    {\n-      __cpuid (0x80000001, eax, ebx, ecx, edx);\n-\n-      has_lahf_lm = ecx & bit_LAHF_LM;\n-      has_sse4a = ecx & bit_SSE4a;\n-      has_abm = ecx & bit_ABM;\n-      has_lwp = ecx & bit_LWP;\n-      has_fma4 = ecx & bit_FMA4;\n-      has_xop = ecx & bit_XOP;\n-      has_tbm = ecx & bit_TBM;\n-      has_lzcnt = ecx & bit_LZCNT;\n-      has_prfchw = ecx & bit_PRFCHW;\n-\n-      has_longmode = edx & bit_LM;\n-      has_3dnowp = edx & bit_3DNOWP;\n-      has_3dnow = edx & bit_3DNOW;\n-      has_mwaitx = ecx & bit_MWAITX;\n-    }\n-\n-  if (ext_level >= 0x80000008)\n-    {\n-      __cpuid (0x80000008, eax, ebx, ecx, edx);\n-      has_clzero = ebx & bit_CLZERO;\n-      has_wbnoinvd = ebx & bit_WBNOINVD;\n-    }\n-\n-  /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n-#define XCR_XFEATURE_ENABLED_MASK\t0x0\n-#define XSTATE_FP\t\t\t0x1\n-#define XSTATE_SSE\t\t\t0x2\n-#define XSTATE_YMM\t\t\t0x4\n-#define XSTATE_OPMASK\t\t\t0x20\n-#define XSTATE_ZMM\t\t\t0x40\n-#define XSTATE_HI_ZMM\t\t\t0x80\n-\n-#define XCR_AVX_ENABLED_MASK \\\n-  (XSTATE_SSE | XSTATE_YMM)\n-#define XCR_AVX512F_ENABLED_MASK \\\n-  (XSTATE_SSE | XSTATE_YMM | XSTATE_OPMASK | XSTATE_ZMM | XSTATE_HI_ZMM)\n-\n-  if (has_osxsave)\n-    asm (\".byte 0x0f; .byte 0x01; .byte 0xd0\"\n-\t : \"=a\" (eax), \"=d\" (edx)\n-\t : \"c\" (XCR_XFEATURE_ENABLED_MASK));\n-  else\n-    eax = 0;\n-\n-  /* Check if AVX registers are supported.  */\n-  if ((eax & XCR_AVX_ENABLED_MASK) != XCR_AVX_ENABLED_MASK)\n-    {\n-      has_avx = 0;\n-      has_avx2 = 0;\n-      has_fma = 0;\n-      has_fma4 = 0;\n-      has_f16c = 0;\n-      has_xop = 0;\n-      has_xsave = 0;\n-      has_xsaveopt = 0;\n-      has_xsaves = 0;\n-      has_xsavec = 0;\n-    }\n+  if (cpu_indicator_init (&cpu_model, &cpu_model2, cpu_features2) != 0)\n+    goto done;\n \n-  /* Check if AVX512F registers are supported.  */\n-  if ((eax & XCR_AVX512F_ENABLED_MASK) != XCR_AVX512F_ENABLED_MASK)\n-    {\n-      has_avx512f = 0;\n-      has_avx512er = 0;\n-      has_avx512pf = 0;\n-      has_avx512cd = 0;\n-      has_avx512dq = 0;\n-      has_avx512bw = 0;\n-      has_avx512vl = 0;\n-    }\n+  vendor = cpu_model.__cpu_vendor;\n+  family = cpu_model2.__cpu_family;\n+  model = cpu_model2.__cpu_model;\n+  max_level = cpu_model2.__cpu_max_level;\n+  ext_level = cpu_model2.__cpu_ext_level;\n \n   if (!arch)\n     {\n-      if (vendor == signature_AMD_ebx\n-\t  || vendor == signature_CENTAUR_ebx\n-\t  || vendor == signature_CYRIX_ebx\n-\t  || vendor == signature_NSC_ebx)\n+      if (vendor == VENDOR_AMD\n+\t  || vendor == VENDOR_CENTAUR\n+\t  || vendor == VENDOR_CYRIX\n+\t  || vendor == VENDOR_NSC)\n \tcache = detect_caches_amd (ext_level);\n-      else if (vendor == signature_INTEL_ebx)\n+      else if (vendor == VENDOR_INTEL)\n \t{\n \t  bool xeon_mp = (family == 15 && model == 6);\n \t  cache = detect_caches_intel (xeon_mp, max_level,\n \t\t\t\t       ext_level, &l2sizekb);\n \t}\n     }\n \n-  if (vendor == signature_AMD_ebx)\n+  /* Extended features */\n+#define has_feature(f) \\\n+  has_cpu_feature (&cpu_model, cpu_features2, f)\n+\n+  if (vendor == VENDOR_AMD)\n     {\n       unsigned int name;\n \n@@ -670,34 +453,36 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       if (name == signature_NSC_ebx)\n \tprocessor = PROCESSOR_GEODE;\n-      else if (has_movbe && family == 22)\n+      else if (has_feature (FEATURE_MOVBE) && family == 22)\n \tprocessor = PROCESSOR_BTVER2;\n-      else if (has_clwb)\n+      else if (has_feature (FEATURE_CLWB))\n \tprocessor = PROCESSOR_ZNVER2;\n-      else if (has_clzero)\n+      else if (has_feature (FEATURE_CLZERO))\n \tprocessor = PROCESSOR_ZNVER1;\n-      else if (has_avx2)\n-        processor = PROCESSOR_BDVER4;\n-      else if (has_xsaveopt)\n-        processor = PROCESSOR_BDVER3;\n-      else if (has_bmi)\n-        processor = PROCESSOR_BDVER2;\n-      else if (has_xop)\n+      else if (has_feature (FEATURE_AVX2))\n+\tprocessor = PROCESSOR_BDVER4;\n+      else if (has_feature (FEATURE_XSAVEOPT))\n+\tprocessor = PROCESSOR_BDVER3;\n+      else if (has_feature (FEATURE_BMI))\n+\tprocessor = PROCESSOR_BDVER2;\n+      else if (has_feature (FEATURE_XOP))\n \tprocessor = PROCESSOR_BDVER1;\n-      else if (has_sse4a && has_ssse3)\n-        processor = PROCESSOR_BTVER1;\n-      else if (has_sse4a)\n+      else if (has_feature (FEATURE_SSE4_A)\n+\t       && has_feature (FEATURE_SSSE3))\n+\tprocessor = PROCESSOR_BTVER1;\n+      else if (has_feature (FEATURE_SSE4_A))\n \tprocessor = PROCESSOR_AMDFAM10;\n-      else if (has_sse2 || has_longmode)\n+      else if (has_feature (FEATURE_SSE2)\n+\t       || has_feature (FEATURE_LM))\n \tprocessor = PROCESSOR_K8;\n-      else if (has_3dnowp && family == 6)\n+      else if (has_feature (FEATURE_3DNOWP) && family == 6)\n \tprocessor = PROCESSOR_ATHLON;\n-      else if (has_mmx)\n+      else if (has_feature (FEATURE_MMX))\n \tprocessor = PROCESSOR_K6;\n       else\n \tprocessor = PROCESSOR_PENTIUM;\n     }\n-  else if (vendor == signature_CENTAUR_ebx)\n+  else if (vendor == VENDOR_CENTAUR)\n     {\n       processor = PROCESSOR_GENERIC;\n \n@@ -708,12 +493,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  break;\n \n \tcase 5:\n-\t  if (has_3dnow || has_mmx)\n+\t  if (has_feature (FEATURE_3DNOW)\n+\t      || has_feature (FEATURE_MMX))\n \t    processor = PROCESSOR_I486;\n \t  break;\n \n \tcase 6:\n-\t  if (has_longmode)\n+\t  if (has_feature (FEATURE_LM))\n \t    processor = PROCESSOR_K8;\n \t  else if (model >= 9)\n \t    processor = PROCESSOR_PENTIUMPRO;\n@@ -749,11 +535,11 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       /* Default.  */\n       break;\n     case PROCESSOR_I486:\n-      if (arch && vendor == signature_CENTAUR_ebx)\n+      if (arch && vendor == VENDOR_CENTAUR)\n \t{\n \t  if (model >= 6)\n \t    cpu = \"c3\";\n-\t  else if (has_3dnow)\n+\t  else if (has_feature (FEATURE_3DNOW))\n \t    cpu = \"winchip2\";\n \t  else\n \t    /* Assume WinChip C6.  */\n@@ -763,226 +549,104 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tcpu = \"i486\";\n       break;\n     case PROCESSOR_PENTIUM:\n-      if (arch && has_mmx)\n+      if (arch && has_feature (FEATURE_MMX))\n \tcpu = \"pentium-mmx\";\n       else\n \tcpu = \"pentium\";\n       break;\n     case PROCESSOR_PENTIUMPRO:\n-      switch (model)\n+      cpu = get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2, 0);\n+      if (cpu == NULL)\n \t{\n-\tcase 0x1c:\n-\tcase 0x26:\n-\t  /* Bonnell.  */\n-\t  cpu = \"bonnell\";\n-\t  break;\n-\tcase 0x37:\n-\tcase 0x4a:\n-\tcase 0x4d:\n-\tcase 0x5d:\n-\t  /* Silvermont.  */\n-\tcase 0x4c:\n-\tcase 0x5a:\n-\tcase 0x75:\n-\t  /* Airmont.  */\n-\t  cpu = \"silvermont\";\n-\t  break;\n-\tcase 0x5c:\n-\tcase 0x5f:\n-\t  /* Goldmont.  */\n-\t  cpu = \"goldmont\";\n-\t  break;\n-\tcase 0x7a:\n-\t  /* Goldmont Plus.  */\n-\t  cpu = \"goldmont-plus\";\n-\t  break;\n-\tcase 0x86:\n-\tcase 0x96:\n-\tcase 0x9c:\n-\t  /* Tremont.  */\n-\t  cpu = \"tremont\";\n-\t  break;\n-\tcase 0x0f:\n-\t  /* Merom.  */\n-\tcase 0x17:\n-\tcase 0x1d:\n-\t  /* Penryn.  */\n-\t  cpu = \"core2\";\n-\t  break;\n-\tcase 0x1a:\n-\tcase 0x1e:\n-\tcase 0x1f:\n-\tcase 0x2e:\n-\t  /* Nehalem.  */\n-\t  cpu = \"nehalem\";\n-\t  break;\n-\tcase 0x25:\n-\tcase 0x2c:\n-\tcase 0x2f:\n-\t  /* Westmere.  */\n-\t  cpu = \"westmere\";\n-\t  break;\n-\tcase 0x2a:\n-\tcase 0x2d:\n-\t  /* Sandy Bridge.  */\n-\t  cpu = \"sandybridge\";\n-\t  break;\n-\tcase 0x3a:\n-\tcase 0x3e:\n-\t  /* Ivy Bridge.  */\n-\t  cpu = \"ivybridge\";\n-\t  break;\n-\tcase 0x3c:\n-\tcase 0x3f:\n-\tcase 0x45:\n-\tcase 0x46:\n-\t  /* Haswell.  */\n-\t  cpu = \"haswell\";\n-\t  break;\n-\tcase 0x3d:\n-\tcase 0x47:\n-\tcase 0x4f:\n-\tcase 0x56:\n-\t  /* Broadwell.  */\n-\t  cpu = \"broadwell\";\n-\t  break;\n-\tcase 0x4e:\n-\tcase 0x5e:\n-\t  /* Skylake.  */\n-\tcase 0x8e:\n-\tcase 0x9e:\n-\t  /* Kaby Lake.  */\n-\tcase 0xa5:\n-\tcase 0xa6:\n-\t  /* Comet Lake.  */\n-\t  cpu = \"skylake\";\n-\t  break;\n-\tcase 0x55:\n-\t  if (has_avx512vnni)\n-\t    /* Cascade Lake.  */\n-\t    cpu = \"cascadelake\";\n-\t  else\n-\t    /* Skylake with AVX-512.  */\n-\t    cpu = \"skylake-avx512\";\n-\t  break;\n-\tcase 0x6a:\n-\tcase 0x6c:\n-\t  /* Ice Lake server.  */\n-\t  cpu = \"icelake-server\";\n-\t  break;\n-\tcase 0x7e:\n-\tcase 0x7d:\n-\tcase 0x9d:\n-\t  /* Ice Lake client.  */\n-\t  cpu = \"icelake-client\";\n-\t  break;\n-\tcase 0x8c:\n-\tcase 0x8d:\n-\t  /* Tiger Lake.  */\n-\t  cpu = \"tigerlake\";\n-\t  break;\n-\tcase 0x57:\n-\t  /* Knights Landing.  */\n-\t  cpu = \"knl\";\n-\t  break;\n-\tcase 0x66:\n-\t  /* Cannon Lake.  */\n-\t  cpu = \"cannonlake\";\n-\t  break;\n-\tcase 0x85:\n-\t  /* Knights Mill.  */\n-\t  cpu = \"knm\";\n-\t  break;\n-\tdefault:\n \t  if (arch)\n \t    {\n \t      /* This is unknown family 0x6 CPU.  */\n-\t      if (has_avx)\n-\t      {\n-\t\t/* Assume Tiger Lake */\n-\t\tif (has_avx512vp2intersect)\n-\t\t  cpu = \"tigerlake\";\n-\t\t/* Assume Cooper Lake */\n-\t\telse if (has_avx512bf16)\n-\t\t  cpu = \"cooperlake\";\n-\t\t/* Assume Ice Lake Server.  */\n-\t\telse if (has_wbnoinvd)\n-\t\t  cpu = \"icelake-server\";\n+\t      if (has_feature (FEATURE_AVX))\n+\t\t{\n+\t\t  /* Assume Tiger Lake */\n+\t\t  if (has_feature (FEATURE_AVX512VP2INTERSECT))\n+\t\t    cpu = \"tigerlake\";\n+\t\t  /* Assume Cooper Lake */\n+\t\t  else if (has_feature (FEATURE_AVX512BF16))\n+\t\t    cpu = \"cooperlake\";\n+\t\t  /* Assume Ice Lake Server.  */\n+\t\t  else if (has_feature (FEATURE_WBNOINVD))\n+\t\t    cpu = \"icelake-server\";\n \t\t/* Assume Ice Lake.  */\n-\t\telse if (has_avx512bitalg)\n+\t\telse if (has_feature (FEATURE_AVX512BITALG))\n \t\t  cpu = \"icelake-client\";\n \t\t/* Assume Cannon Lake.  */\n-\t\telse if (has_avx512vbmi)\n+\t\telse if (has_feature (FEATURE_AVX512VBMI))\n \t\t  cpu = \"cannonlake\";\n \t\t/* Assume Knights Mill.  */\n-\t\telse if (has_avx5124vnniw)\n+\t\telse if (has_feature (FEATURE_AVX5124VNNIW))\n \t\t  cpu = \"knm\";\n \t\t/* Assume Knights Landing.  */\n-\t\telse if (has_avx512er)\n+\t\telse if (has_feature (FEATURE_AVX512ER))\n \t\t  cpu = \"knl\";\n \t\t/* Assume Skylake with AVX-512.  */\n-\t\telse if (has_avx512f)\n+\t\telse if (has_feature (FEATURE_AVX512F))\n \t\t  cpu = \"skylake-avx512\";\n \t\t/* Assume Skylake.  */\n-\t\telse if (has_clflushopt)\n+\t\telse if (has_feature (FEATURE_CLFLUSHOPT))\n \t\t  cpu = \"skylake\";\n \t\t/* Assume Broadwell.  */\n-\t\telse if (has_adx)\n+\t\telse if (has_feature (FEATURE_ADX))\n \t\t  cpu = \"broadwell\";\n-\t\telse if (has_avx2)\n+\t\telse if (has_feature (FEATURE_AVX2))\n \t\t/* Assume Haswell.  */\n \t\t  cpu = \"haswell\";\n \t\telse\n \t\t/* Assume Sandy Bridge.  */\n \t\t  cpu = \"sandybridge\";\t      \n \t      }\n-\t      else if (has_sse4_2)\n+\t      else if (has_feature (FEATURE_SSE4_2))\n \t\t{\n-\t\t  if (has_gfni)\n+\t\t  if (has_feature (FEATURE_GFNI))\n \t\t    /* Assume Tremont.  */\n \t\t    cpu = \"tremont\";\n-\t\t  else if (has_sgx)\n+\t\t  else if (has_feature (FEATURE_SGX))\n \t\t    /* Assume Goldmont Plus.  */\n \t\t    cpu = \"goldmont-plus\";\n-\t\t  else if (has_xsave)\n+\t\t  else if (has_feature (FEATURE_XSAVE))\n \t\t    /* Assume Goldmont.  */\n \t\t    cpu = \"goldmont\";\n-\t\t  else if (has_movbe)\n+\t\t  else if (has_feature (FEATURE_MOVBE))\n \t\t    /* Assume Silvermont.  */\n \t\t    cpu = \"silvermont\";\n \t\t  else\n \t\t    /* Assume Nehalem.  */\n \t\t    cpu = \"nehalem\";\n \t\t}\n-\t      else if (has_ssse3)\n+\t      else if (has_feature (FEATURE_SSSE3))\n \t\t{\n-\t\t  if (has_movbe)\n+\t\t  if (has_feature (FEATURE_MOVBE))\n \t\t    /* Assume Bonnell.  */\n \t\t    cpu = \"bonnell\";\n \t\t  else\n \t\t    /* Assume Core 2.  */\n \t\t    cpu = \"core2\";\n \t\t}\n-\t      else if (has_longmode)\n+\t      else if (has_feature (FEATURE_LM))\n \t\t/* Perhaps some emulator?  Assume x86-64, otherwise gcc\n \t\t   -march=native would be unusable for 64-bit compilations,\n \t\t   as all the CPUs below are 32-bit only.  */\n \t\tcpu = \"x86-64\";\n-\t      else if (has_sse3)\n+\t      else if (has_feature (FEATURE_SSE3))\n \t\t{\n-\t\t  if (vendor == signature_CENTAUR_ebx)\n+\t\t  if (vendor == VENDOR_CENTAUR)\n \t\t    /* C7 / Eden \"Esther\" */\n \t\t    cpu = \"c7\";\n \t\t  else\n \t\t    /* It is Core Duo.  */\n \t\t    cpu = \"pentium-m\";\n \t\t}\n-\t      else if (has_sse2)\n+\t      else if (has_feature (FEATURE_SSE2))\n \t\t/* It is Pentium M.  */\n \t\tcpu = \"pentium-m\";\n-\t      else if (has_sse)\n+\t      else if (has_feature (FEATURE_SSE))\n \t\t{\n-\t\t  if (vendor == signature_CENTAUR_ebx)\n+\t\t  if (vendor == VENDOR_CENTAUR)\n \t\t    {\n \t\t      if (model >= 9)\n \t\t\t/* Eden \"Nehemiah\" */\n@@ -994,7 +658,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t    /* It is Pentium III.  */\n \t\t    cpu = \"pentium3\";\n \t\t}\n-\t      else if (has_mmx)\n+\t      else if (has_feature (FEATURE_MMX))\n \t\t/* It is Pentium II.  */\n \t\tcpu = \"pentium2\";\n \t      else\n@@ -1004,13 +668,12 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t  else\n \t    /* For -mtune, we default to -mtune=generic.  */\n \t    cpu = \"generic\";\n-\t  break;\n \t}\n       break;\n     case PROCESSOR_PENTIUM4:\n-      if (has_sse3)\n+      if (has_feature (FEATURE_SSE3))\n \t{\n-\t  if (has_longmode)\n+\t  if (has_feature (FEATURE_LM))\n \t    cpu = \"nocona\";\n \t  else\n \t    cpu = \"prescott\";\n@@ -1022,36 +685,36 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       cpu = \"geode\";\n       break;\n     case PROCESSOR_K6:\n-      if (arch && has_3dnow)\n+      if (arch && has_feature (FEATURE_3DNOW))\n \tcpu = \"k6-3\";\n       else\n \tcpu = \"k6\";\n       break;\n     case PROCESSOR_ATHLON:\n-      if (arch && has_sse)\n+      if (arch && has_feature (FEATURE_SSE))\n \tcpu = \"athlon-4\";\n       else\n \tcpu = \"athlon\";\n       break;\n     case PROCESSOR_K8:\n       if (arch)\n \t{\n-\t  if (vendor == signature_CENTAUR_ebx)\n+\t  if (vendor == VENDOR_CENTAUR)\n \t    {\n-\t      if (has_sse4_1)\n+\t      if (has_feature (FEATURE_SSE4_1))\n \t\t/* Nano 3000 | Nano dual / quad core | Eden X4 */\n \t\tcpu = \"nano-3000\";\n-\t      else if (has_ssse3)\n+\t      else if (has_feature (FEATURE_SSSE3))\n \t\t/* Nano 1000 | Nano 2000 */\n \t\tcpu = \"nano\";\n-\t      else if (has_sse3)\n+\t      else if (has_feature (FEATURE_SSE3))\n \t\t/* Eden X2 */\n \t\tcpu = \"eden-x2\";\n \t      else\n \t\t/* Default to k8 */\n \t\tcpu = \"k8\";\n \t    }\n-\t  else if (has_sse3)\n+\t  else if (has_feature (FEATURE_SSE3))\n \t    cpu = \"k8-sse3\";\n \t  else\n \t    cpu = \"k8\";\n@@ -1092,27 +755,27 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       /* Use something reasonable.  */\n       if (arch)\n \t{\n-\t  if (has_ssse3)\n+\t  if (has_feature (FEATURE_SSSE3))\n \t    cpu = \"core2\";\n-\t  else if (has_sse3)\n+\t  else if (has_feature (FEATURE_SSE3))\n \t    {\n-\t      if (has_longmode)\n+\t      if (has_feature (FEATURE_LM))\n \t\tcpu = \"nocona\";\n \t      else\n \t\tcpu = \"prescott\";\n \t    }\n-\t  else if (has_longmode)\n+\t  else if (has_feature (FEATURE_LM))\n \t    /* Perhaps some emulator?  Assume x86-64, otherwise gcc\n \t       -march=native would be unusable for 64-bit compilations,\n \t       as all the CPUs below are 32-bit only.  */\n \t    cpu = \"x86-64\";\n-\t  else if (has_sse2)\n+\t  else if (has_feature (FEATURE_SSE2))\n \t    cpu = \"pentium4\";\n-\t  else if (has_cmov)\n+\t  else if (has_feature (FEATURE_CMOV))\n \t    cpu = \"pentiumpro\";\n-\t  else if (has_mmx)\n+\t  else if (has_feature (FEATURE_MMX))\n \t    cpu = \"pentium-mmx\";\n-\t  else if (has_cmpxchg8b)\n+\t  else if (has_feature (FEATURE_CMPXCHG8B))\n \t    cpu = \"pentium\";\n \t}\n       else\n@@ -1121,101 +784,18 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n   if (arch)\n     {\n-      const char *mmx = has_mmx ? \" -mmmx\" : \" -mno-mmx\";\n-      const char *mmx3dnow = has_3dnow ? \" -m3dnow\" : \" -mno-3dnow\";\n-      const char *sse = has_sse ? \" -msse\" : \" -mno-sse\";\n-      const char *sse2 = has_sse2 ? \" -msse2\" : \" -mno-sse2\";\n-      const char *sse3 = has_sse3 ? \" -msse3\" : \" -mno-sse3\";\n-      const char *ssse3 = has_ssse3 ? \" -mssse3\" : \" -mno-ssse3\";\n-      const char *sse4a = has_sse4a ? \" -msse4a\" : \" -mno-sse4a\";\n-      const char *cx16 = has_cmpxchg16b ? \" -mcx16\" : \" -mno-cx16\";\n-      const char *sahf = has_lahf_lm ? \" -msahf\" : \" -mno-sahf\";\n-      const char *movbe = has_movbe ? \" -mmovbe\" : \" -mno-movbe\";\n-      const char *aes = has_aes ? \" -maes\" : \" -mno-aes\";\n-      const char *sha = has_sha ? \" -msha\" : \" -mno-sha\";\n-      const char *pclmul = has_pclmul ? \" -mpclmul\" : \" -mno-pclmul\";\n-      const char *popcnt = has_popcnt ? \" -mpopcnt\" : \" -mno-popcnt\";\n-      const char *abm = has_abm ? \" -mabm\" : \" -mno-abm\";\n-      const char *lwp = has_lwp ? \" -mlwp\" : \" -mno-lwp\";\n-      const char *fma = has_fma ? \" -mfma\" : \" -mno-fma\";\n-      const char *fma4 = has_fma4 ? \" -mfma4\" : \" -mno-fma4\";\n-      const char *xop = has_xop ? \" -mxop\" : \" -mno-xop\";\n-      const char *bmi = has_bmi ? \" -mbmi\" : \" -mno-bmi\";\n-      const char *pconfig = has_pconfig ? \" -mpconfig\" : \" -mno-pconfig\";\n-      const char *wbnoinvd = has_wbnoinvd ? \" -mwbnoinvd\" : \" -mno-wbnoinvd\";\n-      const char *sgx = has_sgx ? \" -msgx\" : \" -mno-sgx\";\n-      const char *bmi2 = has_bmi2 ? \" -mbmi2\" : \" -mno-bmi2\";\n-      const char *tbm = has_tbm ? \" -mtbm\" : \" -mno-tbm\";\n-      const char *avx = has_avx ? \" -mavx\" : \" -mno-avx\";\n-      const char *avx2 = has_avx2 ? \" -mavx2\" : \" -mno-avx2\";\n-      const char *sse4_2 = has_sse4_2 ? \" -msse4.2\" : \" -mno-sse4.2\";\n-      const char *sse4_1 = has_sse4_1 ? \" -msse4.1\" : \" -mno-sse4.1\";\n-      const char *lzcnt = has_lzcnt ? \" -mlzcnt\" : \" -mno-lzcnt\";\n-      const char *hle = has_hle ? \" -mhle\" : \" -mno-hle\";\n-      const char *rtm = has_rtm ? \" -mrtm\" : \" -mno-rtm\";\n-      const char *rdrnd = has_rdrnd ? \" -mrdrnd\" : \" -mno-rdrnd\";\n-      const char *f16c = has_f16c ? \" -mf16c\" : \" -mno-f16c\";\n-      const char *fsgsbase = has_fsgsbase ? \" -mfsgsbase\" : \" -mno-fsgsbase\";\n-      const char *rdseed = has_rdseed ? \" -mrdseed\" : \" -mno-rdseed\";\n-      const char *prfchw = has_prfchw ? \" -mprfchw\" : \" -mno-prfchw\";\n-      const char *adx = has_adx ? \" -madx\" : \" -mno-adx\";\n-      const char *fxsr = has_fxsr ? \" -mfxsr\" : \" -mno-fxsr\";\n-      const char *xsave = has_xsave ? \" -mxsave\" : \" -mno-xsave\";\n-      const char *xsaveopt = has_xsaveopt ? \" -mxsaveopt\" : \" -mno-xsaveopt\";\n-      const char *avx512f = has_avx512f ? \" -mavx512f\" : \" -mno-avx512f\";\n-      const char *avx512er = has_avx512er ? \" -mavx512er\" : \" -mno-avx512er\";\n-      const char *avx512cd = has_avx512cd ? \" -mavx512cd\" : \" -mno-avx512cd\";\n-      const char *avx512pf = has_avx512pf ? \" -mavx512pf\" : \" -mno-avx512pf\";\n-      const char *prefetchwt1 = has_prefetchwt1 ? \" -mprefetchwt1\" : \" -mno-prefetchwt1\";\n-      const char *clflushopt = has_clflushopt ? \" -mclflushopt\" : \" -mno-clflushopt\";\n-      const char *xsavec = has_xsavec ? \" -mxsavec\" : \" -mno-xsavec\";\n-      const char *xsaves = has_xsaves ? \" -mxsaves\" : \" -mno-xsaves\";\n-      const char *avx512dq = has_avx512dq ? \" -mavx512dq\" : \" -mno-avx512dq\";\n-      const char *avx512bw = has_avx512bw ? \" -mavx512bw\" : \" -mno-avx512bw\";\n-      const char *avx512vl = has_avx512vl ? \" -mavx512vl\" : \" -mno-avx512vl\";\n-      const char *avx512ifma = has_avx512ifma ? \" -mavx512ifma\" : \" -mno-avx512ifma\";\n-      const char *avx512vbmi = has_avx512vbmi ? \" -mavx512vbmi\" : \" -mno-avx512vbmi\";\n-      const char *avx5124vnniw = has_avx5124vnniw ? \" -mavx5124vnniw\" : \" -mno-avx5124vnniw\";\n-      const char *avx512vbmi2 = has_avx512vbmi2 ? \" -mavx512vbmi2\" : \" -mno-avx512vbmi2\";\n-      const char *avx512vnni = has_avx512vnni ? \" -mavx512vnni\" : \" -mno-avx512vnni\";\n-      const char *avx5124fmaps = has_avx5124fmaps ? \" -mavx5124fmaps\" : \" -mno-avx5124fmaps\";\n-      const char *clwb = has_clwb ? \" -mclwb\" : \" -mno-clwb\";\n-      const char *mwaitx  = has_mwaitx  ? \" -mmwaitx\"  : \" -mno-mwaitx\"; \n-      const char *clzero  = has_clzero  ? \" -mclzero\"  : \" -mno-clzero\";\n-      const char *pku = has_pku ? \" -mpku\" : \" -mno-pku\";\n-      const char *rdpid = has_rdpid ? \" -mrdpid\" : \" -mno-rdpid\";\n-      const char *gfni = has_gfni ? \" -mgfni\" : \" -mno-gfni\";\n-      const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n-      const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n-      const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n-      const char *avx512vp2intersect = has_avx512vp2intersect ? \" -mavx512vp2intersect\" : \" -mno-avx512vp2intersect\";\n-      const char *tsxldtrk = has_tsxldtrk ? \" -mtsxldtrk \" : \" -mno-tsxldtrk\";\n-      const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n-      const char *avx512vpopcntdq = has_avx512vpopcntdq ? \" -mavx512vpopcntdq\" : \" -mno-avx512vpopcntdq\";\n-      const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n-      const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n-      const char *enqcmd = has_enqcmd ? \" -menqcmd\" : \" -mno-enqcmd\";\n-      const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n-      const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n-      const char *serialize = has_serialize ? \" -mserialize\" : \" -mno-serialize\";\n-      const char *ptwrite = has_ptwrite ? \" -mptwrite\" : \" -mno-ptwrite\";\n-      const char *avx512bf16 = has_avx512bf16 ? \" -mavx512bf16\" : \" -mno-avx512bf16\";\n-\n-      options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n-\t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n-\t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n-\t\t\tpconfig, wbnoinvd,\n-\t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n-\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n-\t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n-\t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n-\t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n-\t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n-\t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n-\t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n-\t\t\tavx512bitalg, avx512vpopcntdq, movdiri, movdir64b,\n-\t\t\twaitpkg, cldemote, ptwrite, avx512bf16, enqcmd,\n-\t\t\tavx512vp2intersect, serialize, tsxldtrk, NULL);\n+      unsigned int i;\n+      const char *const neg_option = \" -mno-\";\n+      for (i = 0; i < ARRAY_SIZE (isa_names_table); i++)\n+\tif (isa_names_table[i].option)\n+\t  {\n+\t    if (has_feature (isa_names_table[i].feature))\n+\t      options = concat (options, \" \",\n+\t\t\t\tisa_names_table[i].option, NULL);\n+\t    else\n+\t      options = concat (options, neg_option,\n+\t\t\t\tisa_names_table[i].option + 2, NULL);\n+\t  }\n     }\n \n done:"}, {"sha": "2246507a8d5a2b7a6e296c0de22ba2538fdaaf77", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=6c35d16a3925958b3a22426de0cb8e04f654b6dd", "patch": "@@ -90,6 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"dwarf2out.h\"\n #include \"i386-builtins.h\"\n+#include \"common/config/i386/i386-isas.h\"\n \n #undef BDESC\n #undef BDESC_FIRST\n@@ -1835,57 +1836,6 @@ ix86_builtin_reciprocal (tree fndecl)\n     }\n }\n \n-/* These are the target attribute strings for which a dispatcher is\n-   available, from fold_builtin_cpu.  */\n-struct _isa_names_table\n-{\n-  const char *const name;\n-  const enum processor_features feature;\n-  const enum feature_priority priority;\n-};\n-\n-static const _isa_names_table isa_names_table[] =\n-{\n-  {\"cmov\",    FEATURE_CMOV,\tP_NONE},\n-  {\"mmx\",     FEATURE_MMX,\tP_MMX},\n-  {\"popcnt\",  FEATURE_POPCNT,\tP_POPCNT},\n-  {\"sse\",     FEATURE_SSE,\tP_SSE},\n-  {\"sse2\",    FEATURE_SSE2,\tP_SSE2},\n-  {\"sse3\",    FEATURE_SSE3,\tP_SSE3},\n-  {\"ssse3\",   FEATURE_SSSE3,\tP_SSSE3},\n-  {\"sse4a\",   FEATURE_SSE4_A,\tP_SSE4_A},\n-  {\"sse4.1\",  FEATURE_SSE4_1,\tP_SSE4_1},\n-  {\"sse4.2\",  FEATURE_SSE4_2,\tP_SSE4_2},\n-  {\"avx\",     FEATURE_AVX,\tP_AVX},\n-  {\"fma4\",    FEATURE_FMA4,\tP_FMA4},\n-  {\"xop\",     FEATURE_XOP,\tP_XOP},\n-  {\"fma\",     FEATURE_FMA,\tP_FMA},\n-  {\"avx2\",    FEATURE_AVX2,\tP_AVX2},\n-  {\"avx512f\", FEATURE_AVX512F, P_AVX512F},\n-  {\"bmi\",     FEATURE_BMI,\tP_BMI},\n-  {\"bmi2\",    FEATURE_BMI2,\tP_BMI2},\n-  {\"aes\",     FEATURE_AES,\tP_AES},\n-  {\"pclmul\",  FEATURE_PCLMUL,\tP_PCLMUL},\n-  {\"avx512vl\",FEATURE_AVX512VL, P_NONE},\n-  {\"avx512bw\",FEATURE_AVX512BW, P_NONE},\n-  {\"avx512dq\",FEATURE_AVX512DQ, P_NONE},\n-  {\"avx512cd\",FEATURE_AVX512CD, P_NONE},\n-  {\"avx512er\",FEATURE_AVX512ER, P_NONE},\n-  {\"avx512pf\",FEATURE_AVX512PF, P_NONE},\n-  {\"avx512vbmi\",FEATURE_AVX512VBMI, P_NONE},\n-  {\"avx512ifma\",FEATURE_AVX512IFMA, P_NONE},\n-  {\"avx5124vnniw\",FEATURE_AVX5124VNNIW, P_NONE},\n-  {\"avx5124fmaps\",FEATURE_AVX5124FMAPS, P_NONE},\n-  {\"avx512vpopcntdq\",FEATURE_AVX512VPOPCNTDQ,\tP_NONE},\n-  {\"avx512vbmi2\", FEATURE_AVX512VBMI2, P_NONE},\n-  {\"gfni\",\tFEATURE_GFNI,\tP_NONE},\n-  {\"vpclmulqdq\", FEATURE_VPCLMULQDQ, P_NONE},\n-  {\"avx512vnni\", FEATURE_AVX512VNNI, P_NONE},\n-  {\"avx512bitalg\", FEATURE_AVX512BITALG, P_NONE},\n-  {\"avx512bf16\", FEATURE_AVX512BF16, P_NONE},\n-  {\"avx512vp2intersect\",FEATURE_AVX512VP2INTERSECT, P_NONE}\n-};\n-\n /* This parses the attribute arguments to target in DECL and determines\n    the right builtin to use to match the platform specification.\n    It returns the priority value for this version decl.  If PREDICATE_LIST"}, {"sha": "e87f262a775c42f2449cfca00b3795b03c8e158f", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 30, "deletions": 325, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c35d16a3925958b3a22426de0cb8e04f654b6dd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=6c35d16a3925958b3a22426de0cb8e04f654b6dd", "patch": "@@ -7,348 +7,53 @@\n /* { dg-do run } */\n \n #include <assert.h>\n+#include <stdlib.h>\n #include \"cpuid.h\"\n-\n-/* Check if the Intel CPU model and sub-model are identified.  */\n-static void\n-check_intel_cpu_model (unsigned int family, unsigned int model,\n-\t\t       unsigned int brand_id)\n-{\n-  /* Parse family and model only if brand ID is 0. */\n-  if (brand_id == 0)\n-    {\n-      switch (family)\n-\t{\n-\tcase 0x5:\n-\t  /* Pentium.  */\n-\t  break;\n-\tcase 0x6:\n-\t  switch (model)\n-\t    {\n-\t    case 0x1c:\n-\t    case 0x26:\n-\t      /* Atom.  */\n-\t      assert (__builtin_cpu_is (\"atom\"));\n-\t      break;\n-\t    case 0x37:\n-\t    case 0x4a:\n-\t    case 0x4d:\n-\t    case 0x5a:\n-\t    case 0x5d:\n-\t      /* Silvermont.  */\n-\t      assert (__builtin_cpu_is (\"silvermont\"));\n-\t      break;\n-\t    case 0x5c:\n-\t    case 0x5f:\n-\t      /* Goldmont.  */\n-\t      assert (__builtin_cpu_is (\"goldmont\"));\n-\t      break;\n-\t    case 0x7a:\n-\t      /* Goldmont Plus.  */\n-\t      assert (__builtin_cpu_is (\"goldmont-plus\"));\n-\t      break;\n-\t    case 0x57:\n-\t      /* Knights Landing.  */\n-\t      assert (__builtin_cpu_is (\"knl\"));\n-\t      break;\n-\t    case 0x85:\n-\t      /* Knights Mill */\n-\t      assert (__builtin_cpu_is (\"knm\"));\n-\t      break;\n-\t    case 0x1a:\n-\t    case 0x1e:\n-\t    case 0x1f:\n-\t    case 0x2e:\n-\t      /* Nehalem.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"nehalem\"));\n-\t      break;\n-\t    case 0x25:\n-\t    case 0x2c:\n-\t    case 0x2f:\n-\t      /* Westmere.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"westmere\"));\n-\t      break;\n-\t    case 0x2a:\n-\t    case 0x2d:\n-\t      /* Sandy Bridge.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"sandybridge\"));\n-\t      break;\n-\t    case 0x3a:\n-\t    case 0x3e:\n-\t      /* Ivy Bridge.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"ivybridge\"));\n-\t      break;\n-\t    case 0x3c:\n-\t    case 0x3f:\n-\t    case 0x45:\n-\t    case 0x46:\n-\t      /* Haswell.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"haswell\"));\n-\t      break;\n-\t    case 0x3d:\n-\t    case 0x47:\n-\t    case 0x4f:\n-\t    case 0x56:\n-\t      /* Broadwell.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"broadwell\"));\n-\t      break;\n-\t    case 0x4e:\n-\t    case 0x5e:\n-\t      /* Skylake.  */\n-\t    case 0x8e:\n-\t    case 0x9e:\n-\t      /* Kaby Lake.  */\n-\t      assert (__builtin_cpu_is (\"corei7\"));\n-\t      assert (__builtin_cpu_is (\"skylake\"));\n-\t      break;\n-\t    case 0x55:\n-\t      {\n-\t        unsigned int eax, ebx, ecx, edx;\n-\t        __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-\t        assert (__builtin_cpu_is (\"corei7\"));\n-\t        if (ecx & bit_AVX512VNNI)\n-\t          /* Cascade Lake.  */\n-\t          assert (__builtin_cpu_is (\"cascadelake\"));\n-\t        else\n-\t          /* Skylake with AVX-512 support.  */\n-\t          assert (__builtin_cpu_is (\"skylake-avx512\"));\n-\t        break;\n-\t      }\n-\t    case 0x66:\n-\t      /* Cannon Lake.  */\n-\t      assert (__builtin_cpu_is (\"cannonlake\"));\n-\t      break;\n-\t    case 0x17:\n-\t    case 0x1d:\n-\t      /* Penryn.  */\n-\t    case 0x0f:\n-\t      /* Merom.  */\n-\t      assert (__builtin_cpu_is (\"core2\"));\n-\t      break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t  break;\n-\tdefault:\n-\t  /* We have no idea.  */\n-\t  break;\n-\t}\n-    }\n-}\n-\n-/* Check if the AMD CPU model and sub-model are identified.  */\n-static void\n-check_amd_cpu_model (unsigned int family, unsigned int model)\n-{\n-  switch (family)\n-    {\n-    /* AMD Family 10h.  */\n-    case 0x10:\n-      switch (model)\n-\t{\n-\tcase 0x2:\n-\t  /* Barcelona.  */\n-\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n-\t  assert (__builtin_cpu_is (\"barcelona\"));\n-\t  break;\n-\tcase 0x4:\n-\t  /* Shanghai.  */\n-\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n-\t  assert (__builtin_cpu_is (\"shanghai\"));\n-\t  break;\n-\tcase 0x8:\n-\t  /* Istanbul.  */\n-\t  assert (__builtin_cpu_is (\"amdfam10h\"));\n-\t  assert (__builtin_cpu_is (\"istanbul\"));\n-\t  break;\n-\tdefault:\n-\t  break;\n-\t}\n-      break;\n-    /* AMD Family 15h.  */\n-    case 0x15:\n-      assert (__builtin_cpu_is (\"amdfam15h\"));\n-      /* Bulldozer version 1.  */\n-      if ( model <= 0xf)\n-\tassert (__builtin_cpu_is (\"bdver1\"));\n-      /* Bulldozer version 2.  */\n-      if (model >= 0x10 && model <= 0x1f)\n-\tassert (__builtin_cpu_is (\"bdver2\"));\n-      break;\n-    default:\n-      break;\n-    }\n-}\n+#define CHECK___builtin_cpu_is(cpu) assert (__builtin_cpu_is (cpu))\n+#define gcc_assert(a) assert (a)\n+#define gcc_unreachable() abort ()\n+#define inline\n+#include \"../../../common/config/i386/i386-cpuinfo.h\"\n+#include \"../../../common/config/i386/cpuinfo.h\"\n \n /* Check if the ISA features are identified.  */\n static void\n-check_features (unsigned int ecx, unsigned int edx,\n-\t\tint max_cpuid_level)\n+check_features (struct __processor_model *cpu_model,\n+\t\tunsigned int *cpu_features2)\n {\n-  unsigned int eax, ebx;\n-  unsigned int ext_level;\n-\n-  if (edx & bit_CMOV)\n-    assert (__builtin_cpu_supports (\"cmov\"));\n-  if (edx & bit_MMX)\n-    assert (__builtin_cpu_supports (\"mmx\"));\n-  if (edx & bit_SSE)\n-    assert (__builtin_cpu_supports (\"sse\"));\n-  if (edx & bit_SSE2)\n-    assert (__builtin_cpu_supports (\"sse2\"));\n-  if (ecx & bit_POPCNT)\n-    assert (__builtin_cpu_supports (\"popcnt\"));\n-  if (ecx & bit_AES)\n-    assert (__builtin_cpu_supports (\"aes\"));\n-  if (ecx & bit_PCLMUL)\n-    assert (__builtin_cpu_supports (\"pclmul\"));\n-  if (ecx & bit_SSE3)\n-    assert (__builtin_cpu_supports (\"sse3\"));\n-  if (ecx & bit_SSSE3)\n-    assert (__builtin_cpu_supports (\"ssse3\"));\n-  if (ecx & bit_SSE4_1)\n-    assert (__builtin_cpu_supports (\"sse4.1\"));\n-  if (ecx & bit_SSE4_2)\n-    assert (__builtin_cpu_supports (\"sse4.2\"));\n-  if (ecx & bit_AVX)\n-    assert (__builtin_cpu_supports (\"avx\"));\n-  if (ecx & bit_FMA)\n-    assert (__builtin_cpu_supports (\"fma\"));\n-\n-  /* Get advanced features at level 7 (eax = 7, ecx = 0).  */\n-  if (max_cpuid_level >= 7)\n-    {\n-      __cpuid_count (7, 0, eax, ebx, ecx, edx);\n-      if (ebx & bit_BMI)\n-\tassert (__builtin_cpu_supports (\"bmi\"));\n-      if (ebx & bit_AVX2)\n-\tassert (__builtin_cpu_supports (\"avx2\"));\n-      if (ebx & bit_BMI2)\n-\tassert (__builtin_cpu_supports (\"bmi2\"));\n-      if (ebx & bit_AVX512F)\n-\tassert (__builtin_cpu_supports (\"avx512f\"));\n-      if (ebx & bit_AVX512VL)\n-\tassert (__builtin_cpu_supports (\"avx512vl\"));\n-      if (ebx & bit_AVX512BW)\n-\tassert (__builtin_cpu_supports (\"avx512bw\"));\n-      if (ebx & bit_AVX512DQ)\n-\tassert (__builtin_cpu_supports (\"avx512dq\"));\n-      if (ebx & bit_AVX512CD)\n-\tassert (__builtin_cpu_supports (\"avx512cd\"));\n-      if (ebx & bit_AVX512PF)\n-\tassert (__builtin_cpu_supports (\"avx512pf\"));\n-      if (ebx & bit_AVX512ER)\n-\tassert (__builtin_cpu_supports (\"avx512er\"));\n-      if (ebx & bit_AVX512IFMA)\n-\tassert (__builtin_cpu_supports (\"avx512ifma\"));\n-      if (ecx & bit_AVX512VBMI)\n-\tassert (__builtin_cpu_supports (\"avx512vbmi\"));\n-      if (ecx & bit_AVX512VBMI2)\n-\tassert (__builtin_cpu_supports (\"avx512vbmi2\"));\n-      if (ecx & bit_GFNI)\n-\tassert (__builtin_cpu_supports (\"gfni\"));\n-      if (ecx & bit_VPCLMULQDQ)\n-\tassert (__builtin_cpu_supports (\"vpclmulqdq\"));\n-      if (ecx & bit_AVX512VNNI)\n-\tassert (__builtin_cpu_supports (\"avx512vnni\"));\n-      if (ecx & bit_AVX512BITALG)\n-\tassert (__builtin_cpu_supports (\"avx512bitalg\"));\n-      if (ecx & bit_AVX512VPOPCNTDQ)\n-\tassert (__builtin_cpu_supports (\"avx512vpopcntdq\"));\n-      if (edx & bit_AVX5124VNNIW)\n-\tassert (__builtin_cpu_supports (\"avx5124vnniw\"));\n-      if (edx & bit_AVX5124FMAPS)\n-\tassert (__builtin_cpu_supports (\"avx5124fmaps\"));\n-\n-      __cpuid_count (7, 1, eax, ebx, ecx, edx);\n-      if (eax & bit_AVX512BF16)\n-\tassert (__builtin_cpu_supports (\"avx512bf16\"));\n-    }\n-\n-  /* Check cpuid level of extended features.  */\n-  __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n-\n-  if (ext_level >= 0x80000001)\n-    {\n-      __cpuid (0x80000001, eax, ebx, ecx, edx);\n-\n-      if (ecx & bit_SSE4a)\n-\tassert (__builtin_cpu_supports (\"sse4a\"));\n-      if (ecx & bit_FMA4)\n-\tassert (__builtin_cpu_supports (\"fma4\"));\n-      if (ecx & bit_XOP)\n-\tassert (__builtin_cpu_supports (\"xop\"));\n-    }\n-}\n-\n-static int __attribute__ ((noinline))\n-__get_cpuid_output (unsigned int __level,\n-\t\t    unsigned int *__eax, unsigned int *__ebx,\n-\t\t    unsigned int *__ecx, unsigned int *__edx)\n-{\n-  return __get_cpuid (__level, __eax, __ebx, __ecx, __edx);\n+#define has_feature(f) \\\n+  has_cpu_feature (cpu_model, cpu_features2, f)\n+#define ISA_NAMES_TABLE_START\n+#define ISA_NAMES_TABLE_END\n+#define ISA_NAMES_TABLE_ENTRY(name, feature, priority, option)  \\\n+  assert (!!has_feature (feature) == !!__builtin_cpu_supports (name));\n+#include \"../../../common/config/i386/i386-isas.h\"\n }\n \n static int\n check_detailed ()\n {\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  int max_level; \n-  unsigned int vendor;\n-  unsigned int model, family, brand_id;\n-  unsigned int extended_model, extended_family;\n-\n-  /* Assume cpuid insn present. Run in level 0 to get vendor id. */\n-  if (!__get_cpuid_output (0, &eax, &ebx, &ecx, &edx))\n-    return 0;\n+  struct __processor_model cpu_model = { 0 };\n+  struct __processor_model2 cpu_model2 = { 0 };\n+  unsigned int cpu_features2[SIZE_OF_CPU_FEATURES] = { 0 };\n \n-  vendor = ebx;\n-  max_level = eax;\n-\n-  if (max_level < 1)\n-    return 0;\n-\n-  if (!__get_cpuid_output (1, &eax, &ebx, &ecx, &edx))\n+  if (cpu_indicator_init (&cpu_model, &cpu_model2, cpu_features2) != 0)\n     return 0;\n \n-  model = (eax >> 4) & 0x0f;\n-  family = (eax >> 8) & 0x0f;\n-  brand_id = ebx & 0xff;\n-  extended_model = (eax >> 12) & 0xf0;\n-  extended_family = (eax >> 20) & 0xff;\n+  check_features (&cpu_model, cpu_features2);\n \n-  if (vendor == signature_INTEL_ebx)\n+  switch (cpu_model.__cpu_vendor)\n     {\n+    case VENDOR_INTEL:\n       assert (__builtin_cpu_is (\"intel\"));\n-      /* Adjust family and model for Intel CPUs.  */\n-      if (family == 0x0f)\n-\t{\n-\t  family += extended_family;\n-\t  model += extended_model;\n-\t}\n-      else if (family == 0x06)\n-\tmodel += extended_model;\n-      check_intel_cpu_model (family, model, brand_id);\n-      check_features (ecx, edx, max_level);\n-    }\n-  else if (vendor == signature_AMD_ebx)\n-    {\n+      get_intel_cpu (&cpu_model, &cpu_model2, cpu_features2, 0);\n+      break;\n+    case VENDOR_AMD:\n       assert (__builtin_cpu_is (\"amd\"));\n-      /* Adjust model and family for AMD CPUS. */\n-      if (family == 0x0f)\n-\t{\n-\t  family += extended_family;\n-\t  model += (extended_model << 4);\n-\t}\n-      check_amd_cpu_model (family, model);\n-      check_features (ecx, edx, max_level);\n+      get_amd_cpu (&cpu_model, &cpu_model2, cpu_features2);\n+      break;\n+    default:\n+      break;\n     }\n \n   return 0;"}]}