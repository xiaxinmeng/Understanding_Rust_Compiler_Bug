{"sha": "7597472624abf9a3e0f92d3a53d829cf38d58ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5NzQ3MjYyNGFiZjlhM2UwZjkyZDNhNTNkODI5Y2YzOGQ1OGNjZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T22:37:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-08T22:37:55Z"}, "message": "(record_constant_rtx, force_const_mem): Ensure everything is in\nsaveable_obstack, not current_obstack.\n\nFrom-SVN: r7689", "tree": {"sha": "4b48de914c36bcf658226608378e6b41ed255d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b48de914c36bcf658226608378e6b41ed255d5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7597472624abf9a3e0f92d3a53d829cf38d58ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7597472624abf9a3e0f92d3a53d829cf38d58ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7597472624abf9a3e0f92d3a53d829cf38d58ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7597472624abf9a3e0f92d3a53d829cf38d58ccf/comments", "author": null, "committer": null, "parents": [{"sha": "1c75dfa4420861aab38c2ebc5fa469bea22dae04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c75dfa4420861aab38c2ebc5fa469bea22dae04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c75dfa4420861aab38c2ebc5fa469bea22dae04"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "910d60664cdb6ae14c90f69ef51bf296da44d742", "filename": "gcc/varasm.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7597472624abf9a3e0f92d3a53d829cf38d58ccf/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7597472624abf9a3e0f92d3a53d829cf38d58ccf/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7597472624abf9a3e0f92d3a53d829cf38d58ccf", "patch": "@@ -69,6 +69,7 @@ char *first_global_object_name;\n \n extern struct obstack *current_obstack;\n extern struct obstack *saveable_obstack;\n+extern struct obstack *rtl_obstack;\n extern struct obstack permanent_obstack;\n #define obstack_chunk_alloc xmalloc\n \n@@ -2987,13 +2988,16 @@ record_constant_rtx (mode, x)\n \n   decode_rtx_const (mode, x, &value);\n \n-  obstack_grow (current_obstack, &ptr, sizeof ptr);\n-  obstack_grow (current_obstack, &label, sizeof label);\n+  /* Put these things in the saveable obstack so we can ensure it won't\n+     be freed if we are called from combine or some other phase that discards\n+     memory allocated from function_obstack (current_obstack).  */\n+  obstack_grow (saveable_obstack, &ptr, sizeof ptr);\n+  obstack_grow (saveable_obstack, &label, sizeof label);\n \n   /* Record constant contents.  */\n-  obstack_grow (current_obstack, &value, sizeof value);\n+  obstack_grow (saveable_obstack, &value, sizeof value);\n \n-  return (struct constant_descriptor *) obstack_finish (current_obstack);\n+  return (struct constant_descriptor *) obstack_finish (saveable_obstack);\n }\n \f\n /* Given a constant rtx X, make (or find) a memory constant for its value\n@@ -3064,9 +3068,26 @@ force_const_mem (mode, x)\n       pool_offset += align - 1;\n       pool_offset &= ~ (align - 1);\n \n+      /* If RTL is not being placed into the saveable obstack, make a\n+\t copy of X that is in the saveable obstack in case we are being\n+\t called from combine or some other phase that discards memory\n+\t it allocates.  We need only do this if it is a CONST, since\n+\t no other RTX should be allocated in this situation. */\n+      if (rtl_obstack != saveable_obstack\n+\t  && GET_CODE (x) == CONST)\n+\t{\n+\t  push_obstacks_nochange ();\n+\t  rtl_in_saveable_obstack ();\n+\n+\t  x = gen_rtx (CONST, GET_MODE (x), \n+\t\t       gen_rtx (PLUS, GET_MODE (x), \n+\t\t\t\tXEXP (XEXP (x, 0), 0), XEXP (XEXP (x, 0), 1)));\n+\t  pop_obstacks ();\n+\t}\n+\n       /* Allocate a pool constant descriptor, fill it in, and chain it in.  */\n \n-      pool = (struct pool_constant *) oballoc (sizeof (struct pool_constant));\n+      pool = (struct pool_constant *) savealloc (sizeof (struct pool_constant));\n       pool->desc = desc;\n       pool->constant = x;\n       pool->mode = mode;\n@@ -3093,7 +3114,7 @@ force_const_mem (mode, x)\n \n       /* Add label to symbol hash table.  */\n       hash = SYMHASH (found);\n-      sym = (struct pool_sym *) oballoc (sizeof (struct pool_sym));\n+      sym = (struct pool_sym *) savealloc (sizeof (struct pool_sym));\n       sym->label = found;\n       sym->pool = pool;\n       sym->next = const_rtx_sym_hash_table[hash];"}]}