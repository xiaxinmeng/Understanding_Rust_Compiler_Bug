{"sha": "1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwNmVlOTA4NmIxNzFhNzE4OWZlMGM5NzU4NzI3Y2E1YzhjNWZlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-08-23T14:23:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-23T14:23:40Z"}, "message": "re PR target/17390 (missing floating point compare optimization)\n\n\tPR target/17390\n\t* config/i386/i386.c (ix86_expand_fp_compare): Expand fp comparison to\n\tfake fcomi i387 instruction for !TARGET_CMOVE.\n\t(ix86_expand_branch): Expand natural sequence with one jump for\n\tall targets, not only TARGET_CMOVE.\n\t* config/i386/i386.md (*cmpfp_0_cc): New define_insn_and_split\n\tpattern to implement fake fcomi sequence.  Split instruction after\n\treload to correct compare sequences.\n\t(*cmpfp_xf_cc): Ditto.\n\t(*cmpfp_<mode>_cc): Ditto.\n\t(*cmpfp_u_cc): Ditto.\n\t(*cmpfp_<mode>_cc): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/17390\n\t* gcc.target/i386/pr17390.c: New test.\n\nFrom-SVN: r127742", "tree": {"sha": "9f9f17da59f58dce8b45052dae9dfe07e200a1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f9f17da59f58dce8b45052dae9dfe07e200a1c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f7b7ba4c4087874da78ad591eaf13fa99ee1c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7b7ba4c4087874da78ad591eaf13fa99ee1c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7b7ba4c4087874da78ad591eaf13fa99ee1c31"}], "stats": {"total": 182, "additions": 167, "deletions": 15}, "files": [{"sha": "1b881ffd5b7b34456e925e48118cdc6d1ea7d26d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "patch": "@@ -1,3 +1,18 @@\n+2007-08-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/17390\n+\t* config/i386/i386.c (ix86_expand_fp_compare): Expand fp comparison to\n+\tfake fcomi i387 instruction for !TARGET_CMOVE.\n+\t(ix86_expand_branch): Expand natural sequence with one jump for\n+\tall targets, not only TARGET_CMOVE.\n+\t* config/i386/i386.md (*cmpfp_0_cc): New define_insn_and_split\n+\tpattern to implement fake fcomi sequence.  Split instruction after\n+\treload to correct compare sequences.\n+\t(*cmpfp_xf_cc): Ditto.\n+\t(*cmpfp_<mode>_cc): Ditto.\n+\t(*cmpfp_u_cc): Ditto.\n+\t(*cmpfp_<mode>_cc): Ditto.\n+\n 2007-08-23  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-pretty-print.c (dump_generic_node): Annotate"}, {"sha": "c474f017d973e223538fa8c97b636575829aa18c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "patch": "@@ -11471,26 +11471,24 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch,\n   ix86_fp_comparison_codes (code, &bypass_code, &first_code, &second_code);\n \n   /* Do fcomi/sahf based test when profitable.  */\n-  if ((TARGET_CMOVE || TARGET_SAHF)\n+  if (ix86_fp_comparison_arithmetics_cost (code) > cost\n       && (bypass_code == UNKNOWN || bypass_test)\n-      && (second_code == UNKNOWN || second_test)\n-      && ix86_fp_comparison_arithmetics_cost (code) > cost)\n+      && (second_code == UNKNOWN || second_test))\n     {\n+      tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n+      tmp = gen_rtx_SET (VOIDmode, gen_rtx_REG (fpcmp_mode, FLAGS_REG),\n+\t\t\t tmp);\n       if (TARGET_CMOVE)\n-\t{\n-\t  tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n-\t  tmp = gen_rtx_SET (VOIDmode, gen_rtx_REG (fpcmp_mode, FLAGS_REG),\n-\t\t\t     tmp);\n-\t  emit_insn (tmp);\n-\t}\n+\temit_insn (tmp);\n       else\n \t{\n-\t  tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n-\t  tmp2 = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), UNSPEC_FNSTSW);\n+\t  gcc_assert (TARGET_SAHF);\n+\n \t  if (!scratch)\n \t    scratch = gen_reg_rtx (HImode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, scratch, tmp2));\n-\t  emit_insn (gen_x86_sahf_1 (scratch));\n+\t  tmp2 = gen_rtx_CLOBBER (VOIDmode, scratch);\n+\n+\t  emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, tmp2)));\n \t}\n \n       /* The FP codes work out to act like unsigned.  */\n@@ -11717,8 +11715,7 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n \t/* Check whether we will use the natural sequence with one jump.  If\n \t   so, we can expand jump early.  Otherwise delay expansion by\n \t   creating compound insn to not confuse optimizers.  */\n-\tif (bypass_code == UNKNOWN && second_code == UNKNOWN\n-\t    && TARGET_CMOVE)\n+\tif (bypass_code == UNKNOWN && second_code == UNKNOWN)\n \t  {\n \t    ix86_split_fp_branch (code, ix86_compare_op0, ix86_compare_op1,\n \t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, label),"}, {"sha": "a518aaeaca9d7da467e5cb485f34e36bf58c8c7e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "patch": "@@ -925,6 +925,34 @@\n \t   ]\n \t   (const_string \"XF\")))])\n \n+(define_insn_and_split \"*cmpfp_0_cc\"\n+  [(set (reg:CCFP FLAGS_REG)\n+\t(compare:CCFP\n+\t  (match_operand 1 \"register_operand\" \"f\")\n+\t  (match_operand 2 \"const0_operand\" \"X\")))\n+   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n+  \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && TARGET_SAHF && !TARGET_CMOVE\n+   && GET_MODE (operands[1]) == GET_MODE (operands[2])\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:HI\n+\t  [(compare:CCFP (match_dup 1)(match_dup 2))]\n+\tUNSPEC_FNSTSW))\n+   (set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set (attr \"mode\")\n+     (cond [(match_operand:SF 1 \"\" \"\")\n+\t      (const_string \"SF\")\n+\t    (match_operand:DF 1 \"\" \"\")\n+\t      (const_string \"DF\")\n+\t   ]\n+\t   (const_string \"XF\")))])\n+\n (define_insn \"*cmpfp_xf\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -938,6 +966,27 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"XF\")])\n \n+(define_insn_and_split \"*cmpfp_xf_cc\"\n+  [(set (reg:CCFP FLAGS_REG)\n+\t(compare:CCFP\n+\t  (match_operand:XF 1 \"register_operand\" \"f\")\n+\t  (match_operand:XF 2 \"register_operand\" \"f\")))\n+   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n+  \"TARGET_80387\n+   && TARGET_SAHF && !TARGET_CMOVE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:HI\n+\t  [(compare:CCFP (match_dup 1)(match_dup 2))]\n+\tUNSPEC_FNSTSW))\n+   (set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"mode\" \"XF\")])\n+\n (define_insn \"*cmpfp_<mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -951,6 +1000,27 @@\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*cmpfp_<mode>_cc\"\n+  [(set (reg:CCFP FLAGS_REG)\n+\t(compare:CCFP\n+\t  (match_operand:X87MODEF12 1 \"register_operand\" \"f\")\n+\t  (match_operand:X87MODEF12 2 \"nonimmediate_operand\" \"fm\")))\n+   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n+  \"TARGET_80387\n+   && TARGET_SAHF && !TARGET_CMOVE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:HI\n+\t  [(compare:CCFP (match_dup 1)(match_dup 2))]\n+\tUNSPEC_FNSTSW))\n+   (set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*cmpfp_u\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -971,6 +1041,34 @@\n \t   ]\n \t   (const_string \"XF\")))])\n \n+(define_insn_and_split \"*cmpfp_u_cc\"\n+  [(set (reg:CCFPU FLAGS_REG)\n+\t(compare:CCFPU\n+\t  (match_operand 1 \"register_operand\" \"f\")\n+\t  (match_operand 2 \"register_operand\" \"f\")))\n+   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n+  \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && TARGET_SAHF && !TARGET_CMOVE\n+   && GET_MODE (operands[1]) == GET_MODE (operands[2])\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:HI\n+\t  [(compare:CCFPU (match_dup 1)(match_dup 2))]\n+\tUNSPEC_FNSTSW))\n+   (set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set (attr \"mode\")\n+     (cond [(match_operand:SF 1 \"\" \"\")\n+\t      (const_string \"SF\")\n+\t    (match_operand:DF 1 \"\" \"\")\n+\t      (const_string \"DF\")\n+\t   ]\n+\t   (const_string \"XF\")))])\n+\n (define_insn \"*cmpfp_<mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n \t(unspec:HI\n@@ -988,6 +1086,33 @@\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*cmpfp_<mode>_cc\"\n+  [(set (reg:CCFP FLAGS_REG)\n+\t(compare:CCFP\n+\t  (match_operand 1 \"register_operand\" \"f\")\n+\t  (match_operator 3 \"float_operator\"\n+\t    [(match_operand:X87MODEI12 2 \"memory_operand\" \"m\")])))\n+   (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n+  \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n+   && TARGET_SAHF && !TARGET_CMOVE\n+   && TARGET_USE_<MODE>MODE_FIOP\n+   && (GET_MODE (operands [3]) == GET_MODE (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec:HI\n+\t  [(compare:CCFP\n+\t     (match_dup 1)\n+\t     (match_op_dup 3 [(match_dup 2)]))]\n+\tUNSPEC_FNSTSW))\n+   (set (reg:CC FLAGS_REG)\n+\t(unspec:CC [(match_dup 0)] UNSPEC_SAHF))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"unit\" \"i387\")\n+   (set_attr \"fp_int_src\" \"true\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; FP compares, step 2\n ;; Move the fpsw to ax.\n "}, {"sha": "340c95e456ccac44e00bd1420a145ea59812ee2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "patch": "@@ -1,3 +1,8 @@\n+2007-08-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/17390\n+\t* gcc.target/i386/pr17390.c: New test.\n+\n 2007-08-23  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/fprinf-1.c: Adjust patterns."}, {"sha": "3cf22e6d0bd33f1f6dd17e14077db86f7838bcd6", "filename": "gcc/testsuite/gcc.target/i386/pr17390.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr17390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1406ee9086b171a7189fe0c9758727ca5c8c5fe4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr17390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr17390.c?ref=1406ee9086b171a7189fe0c9758727ca5c8c5fe4", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+double sgn (double __x)\n+{\n+  return __x == 0.0 ? 0.0 : (__x > 0.0 ? 1.0 : -1.0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"fnstsw\" 1 } } */"}]}