{"sha": "e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkNjJiNDZjOGQxMjRjNzA4ZWY2ZmQ3Y2IwMzhkNzg1YzY5Y2M3ZA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-04-20T11:42:36Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-04-20T11:42:36Z"}, "message": "tree-scalar-evolution.c (interpret_rhs_expr): Handle BIT_AND_EXPR.\n\n\t* tree-scalar-evolution.c (interpret_rhs_expr): Handle BIT_AND_EXPR.\n\n\t* gcc.dg/tree-ssa/scev-11.c: New test.\n\t* gcc.dg/tree-ssa/scev-12.c: New test.\n\nFrom-SVN: r235269", "tree": {"sha": "de19acc569b141faf898e304ca956383c72e0066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de19acc569b141faf898e304ca956383c72e0066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/comments", "author": null, "committer": null, "parents": [{"sha": "6905a0499b633ec67f5eb8dac39a8eea57184c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6905a0499b633ec67f5eb8dac39a8eea57184c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6905a0499b633ec67f5eb8dac39a8eea57184c39"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "2cca3a216da166ea4f51c6926404ed0aaa5f554e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "patch": "@@ -1,3 +1,7 @@\n+2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-scalar-evolution.c (interpret_rhs_expr): Handle BIT_AND_EXPR.\n+\n 2016-04-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/70725"}, {"sha": "f869541b4eb85b90cf9b5d24f5b433f3caf02381", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "patch": "@@ -1,3 +1,8 @@\n+2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/scev-11.c: New test.\n+\t* gcc.dg/tree-ssa/scev-12.c: New test.\n+\n 2016-04-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/70725"}, {"sha": "a7181b2208b8ada80af207b959772fefa094b8b3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-11.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c?ref=e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int a[128];\n+extern int b[];\n+\n+int bar (int *);\n+\n+int\n+foo (int n)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      unsigned char uc = (unsigned char)i;\n+      a[i] = i;\n+      b[uc] = 0;\n+    }\n+\n+  bar (a);\n+  return 0;\n+}\n+\n+/* Address of array reference to b is scev.  */\n+/* { dg-final { scan-tree-dump-times \"use \\[0-9\\]\\n  address\" 2 \"ivopts\" } } */\n+\n+"}, {"sha": "6915ba8b31d7a2e4673366dad766c94ce4366b9f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-12.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-12.c?ref=e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+int a[128];\n+extern int b[];\n+\n+int bar (int *);\n+\n+int\n+foo (int x, int n)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      unsigned char uc = (unsigned char)i;\n+      if (x)\n+\ta[i] = i;\n+      b[uc] = 0;\n+    }\n+\n+  bar (a);\n+  return 0;\n+}\n+\n+/* Address of array reference to b is not scev.  */\n+/* { dg-final { scan-tree-dump-times \"use \\[0-9\\]\\n  address\" 1 \"ivopts\" } } */\n+\n+\n+"}, {"sha": "d6f2a2fba1403b80cf5defda8f705f3f1b1d7a1a", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d62b46c8d124c708ef6fd7cb038d785c69cc7d/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=e6d62b46c8d124c708ef6fd7cb038d785c69cc7d", "patch": "@@ -1937,6 +1937,36 @@ interpret_rhs_expr (struct loop *loop, gimple *at_stmt,\n       res = chrec_convert (type, chrec1, at_stmt);\n       break;\n \n+    case BIT_AND_EXPR:\n+      /* Given int variable A, handle A&0xffff as (int)(unsigned short)A.\n+\t If A is SCEV and its value is in the range of representable set\n+\t of type unsigned short, the result expression is a (no-overflow)\n+\t SCEV.  */\n+      res = chrec_dont_know;\n+      if (tree_fits_uhwi_p (rhs2))\n+\t{\n+\t  int precision;\n+\t  unsigned HOST_WIDE_INT val = tree_to_uhwi (rhs2);\n+\n+\t  val ++;\n+\t  /* Skip if value of rhs2 wraps in unsigned HOST_WIDE_INT or\n+\t     it's not the maximum value of a smaller type than rhs1.  */\n+\t  if (val != 0\n+\t      && (precision = exact_log2 (val)) > 0\n+\t      && (unsigned) precision < TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t    {\n+\t      tree utype = build_nonstandard_integer_type (precision, 1);\n+\n+\t      if (TYPE_PRECISION (utype) < TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t\t{\n+\t\t  chrec1 = analyze_scalar_evolution (loop, rhs1);\n+\t\t  chrec1 = chrec_convert (utype, chrec1, at_stmt);\n+\t\t  res = chrec_convert (TREE_TYPE (rhs1), chrec1, at_stmt);\n+\t\t}\n+\t    }\n+\t}\n+      break;\n+\n     default:\n       res = chrec_dont_know;\n       break;"}]}