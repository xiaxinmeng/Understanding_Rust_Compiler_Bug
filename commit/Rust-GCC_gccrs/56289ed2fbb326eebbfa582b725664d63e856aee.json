{"sha": "56289ed2fbb326eebbfa582b725664d63e856aee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyODllZDJmYmIzMjZlZWJiZmE1ODJiNzI1NjY0ZDYzZTg1NmFlZQ==", "commit": {"author": {"name": "Sameera Deshpande", "email": "sameera.deshpande@arm.com", "date": "2012-10-22T09:46:25Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2012-10-22T09:46:25Z"}, "message": "arm-protos.h (offset_ok_for_ldrd_strd): New declaration.\n\n2012-10-22  Sameera Deshpande  <sameera.deshpande@arm.com>\n\t    Greta Yorsh  <Greta.Yorsh@arm.com>\n\n        * config/arm/arm-protos.h (offset_ok_for_ldrd_strd): New\n        declaration.\n        (operands_ok_ldrd_strd): Likewise.\n        * config/arm/arm.c (offset_ok_for_ldrd_strd): New function.\n        (operands_ok_ldrd_strd): Likewise.\n        * config/arm/arm.md (thumb2_ldrd, thumb2_ldrd_base): New patterns.\n        (thumb2_ldrd_base_neg): Likewise.\n        (thumb2_strd, thumb2_strd_base, thumb_strd_base_neg): Likewise.\n        * predicates.md (ldrd_strd_offset_operand): New predicate.\n        * config/arm/constraints.md (Do): New constraint.\n\n\n\nCo-Authored-By: Greta Yorsh <greta.yorsh@arm.com>\n\nFrom-SVN: r192678", "tree": {"sha": "946dddfac93cfd256aa377899551eb36b44dc7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946dddfac93cfd256aa377899551eb36b44dc7f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56289ed2fbb326eebbfa582b725664d63e856aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56289ed2fbb326eebbfa582b725664d63e856aee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56289ed2fbb326eebbfa582b725664d63e856aee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56289ed2fbb326eebbfa582b725664d63e856aee/comments", "author": null, "committer": null, "parents": [{"sha": "a271e61c6b31a86ec77d60db62ba322574b15881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271e61c6b31a86ec77d60db62ba322574b15881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a271e61c6b31a86ec77d60db62ba322574b15881"}], "stats": {"total": 190, "additions": 189, "deletions": 1}, "files": [{"sha": "56656c8491a83d5cd75e87a6a255fee61afa658e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -1,3 +1,17 @@\n+2012-10-22  Sameera Deshpande  <sameera.deshpande@arm.com>\n+\t    Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+        * config/arm/arm-protos.h (offset_ok_for_ldrd_strd): New\n+        declaration.\n+        (operands_ok_ldrd_strd): Likewise.\n+        * config/arm/arm.c (offset_ok_for_ldrd_strd): New function.\n+        (operands_ok_ldrd_strd): Likewise.\n+        * config/arm/arm.md (thumb2_ldrd, thumb2_ldrd_base): New patterns.\n+        (thumb2_ldrd_base_neg): Likewise.\n+        (thumb2_strd, thumb2_strd_base, thumb_strd_base_neg): Likewise.\n+        * predicates.md (ldrd_strd_offset_operand): New predicate.\n+        * config/arm/constraints.md (Do): New constraint.\n+\n 2012-10-22  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md (\"nonlocal_goto_receiver\"): Refer to the"}, {"sha": "bfe96ead1eb7dd01e1699b5ba939415b6419f388", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -116,6 +116,8 @@ extern bool gen_stm_seq (rtx *, int);\n extern bool gen_const_stm_seq (rtx *, int);\n extern rtx arm_gen_load_multiple (int *, int, rtx, int, rtx, HOST_WIDE_INT *);\n extern rtx arm_gen_store_multiple (int *, int, rtx, int, rtx, HOST_WIDE_INT *);\n+extern bool offset_ok_for_ldrd_strd (HOST_WIDE_INT);\n+extern bool operands_ok_ldrd_strd (rtx, rtx, rtx, HOST_WIDE_INT, bool, bool);\n extern int arm_gen_movmemqi (rtx *);\n extern enum machine_mode arm_select_cc_mode (RTX_CODE, rtx, rtx);\n extern enum machine_mode arm_select_dominance_cc_mode (rtx, rtx,"}, {"sha": "d562858c89d919fa4720e94653549ba015f25d12", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -12193,6 +12193,75 @@ arm_pad_reg_upward (enum machine_mode mode,\n   return !BYTES_BIG_ENDIAN;\n }\n \n+/* Returns true iff OFFSET is valid for use in an LDRD/STRD instruction,\n+   assuming that the address in the base register is word aligned.  */\n+bool\n+offset_ok_for_ldrd_strd (HOST_WIDE_INT offset)\n+{\n+  HOST_WIDE_INT max_offset;\n+\n+  /* Offset must be a multiple of 4 in Thumb mode.  */\n+  if (TARGET_THUMB2 && ((offset & 3) != 0))\n+    return false;\n+\n+  if (TARGET_THUMB2)\n+    max_offset = 1020;\n+  else if (TARGET_ARM)\n+    max_offset = 255;\n+  else\n+    gcc_unreachable ();\n+\n+  return ((offset <= max_offset) && (offset >= -max_offset));\n+}\n+\n+/* Checks whether the operands are valid for use in an LDRD/STRD instruction.\n+   Assumes that RT, RT2, and RN are REG.  This is guaranteed by the patterns.\n+   Assumes that the address in the base register RN is word aligned.  Pattern\n+   guarantees that both memory accesses use the same base register,\n+   the offsets are constants within the range, and the gap between the offsets is 4.\n+   If preload complete then check that registers are legal.  WBACK indicates whether\n+   address is updated.  LOAD indicates whether memory access is load or store.  */\n+bool\n+operands_ok_ldrd_strd (rtx rt, rtx rt2, rtx rn, HOST_WIDE_INT offset,\n+                       bool wback, bool load)\n+{\n+  unsigned int t, t2, n;\n+\n+  if (!reload_completed)\n+    return true;\n+\n+  if (!offset_ok_for_ldrd_strd (offset))\n+    return false;\n+\n+  t = REGNO (rt);\n+  t2 = REGNO (rt2);\n+  n = REGNO (rn);\n+\n+  if ((TARGET_THUMB2)\n+      && ((wback && (n == t || n == t2))\n+          || (t == SP_REGNUM)\n+          || (t == PC_REGNUM)\n+          || (t2 == SP_REGNUM)\n+          || (t2 == PC_REGNUM)\n+          || (!load && (n == PC_REGNUM))\n+          || (load && (t == t2))\n+          /* Triggers Cortex-M3 LDRD errata.  */\n+          || (!wback && load && fix_cm3_ldrd && (n == t))))\n+    return false;\n+\n+  if ((TARGET_ARM)\n+      && ((wback && (n == t || n == t2))\n+          || (t2 == PC_REGNUM)\n+          || (t % 2 != 0)   /* First destination register is not even.  */\n+          || (t2 != t + 1)\n+          /* PC can be used as base register (for offset addressing only),\n+             but it is depricated.  */\n+          || (n == PC_REGNUM)))\n+    return false;\n+\n+  return true;\n+}\n+\n \f\n /* Print a symbolic form of X to the debug file, F.  */\n static void"}, {"sha": "e169af910dd17e0b7c2e192eb0e8d1359e4c0e8b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -11511,6 +11511,99 @@\n \"\"\n )\n \n+;; Patterns for LDRD/STRD in Thumb2 mode\n+\n+(define_insn \"*thumb2_ldrd\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"rk\")\n+                         (match_operand:SI 2 \"ldrd_strd_offset_operand\" \"Do\"))))\n+   (set (match_operand:SI 3 \"s_register_operand\" \"=r\")\n+        (mem:SI (plus:SI (match_dup 1)\n+                         (match_operand:SI 4 \"const_int_operand\" \"\"))))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && ((INTVAL (operands[2]) + 4) == INTVAL (operands[4]))\n+     && (operands_ok_ldrd_strd (operands[0], operands[3],\n+                                  operands[1], INTVAL (operands[2]),\n+                                  false, true))\"\n+  \"ldrd%?\\t%0, %3, [%1, %2]\"\n+  [(set_attr \"type\" \"load2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+(define_insn \"*thumb2_ldrd_base\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (mem:SI (match_operand:SI 1 \"s_register_operand\" \"rk\")))\n+   (set (match_operand:SI 2 \"s_register_operand\" \"=r\")\n+        (mem:SI (plus:SI (match_dup 1)\n+                         (const_int 4))))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && (operands_ok_ldrd_strd (operands[0], operands[2],\n+                                  operands[1], 0, false, true))\"\n+  \"ldrd%?\\t%0, %2, [%1]\"\n+  [(set_attr \"type\" \"load2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+(define_insn \"*thumb2_ldrd_base_neg\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"rk\")\n+                         (const_int -4))))\n+   (set (match_operand:SI 2 \"s_register_operand\" \"=r\")\n+        (mem:SI (match_dup 1)))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && (operands_ok_ldrd_strd (operands[0], operands[2],\n+                                  operands[1], -4, false, true))\"\n+  \"ldrd%?\\t%0, %2, [%1, #-4]\"\n+  [(set_attr \"type\" \"load2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+(define_insn \"*thumb2_strd\"\n+  [(set (mem:SI (plus:SI (match_operand:SI 0 \"s_register_operand\" \"rk\")\n+                         (match_operand:SI 1 \"ldrd_strd_offset_operand\" \"Do\")))\n+        (match_operand:SI 2 \"s_register_operand\" \"r\"))\n+   (set (mem:SI (plus:SI (match_dup 0)\n+                         (match_operand:SI 3 \"const_int_operand\" \"\")))\n+        (match_operand:SI 4 \"s_register_operand\" \"r\"))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && ((INTVAL (operands[1]) + 4) == INTVAL (operands[3]))\n+     && (operands_ok_ldrd_strd (operands[2], operands[4],\n+                                  operands[0], INTVAL (operands[1]),\n+                                  false, false))\"\n+  \"strd%?\\t%2, %4, [%0, %1]\"\n+  [(set_attr \"type\" \"store2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+(define_insn \"*thumb2_strd_base\"\n+  [(set (mem:SI (match_operand:SI 0 \"s_register_operand\" \"rk\"))\n+        (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+   (set (mem:SI (plus:SI (match_dup 0)\n+                         (const_int 4)))\n+        (match_operand:SI 2 \"s_register_operand\" \"r\"))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && (operands_ok_ldrd_strd (operands[1], operands[2],\n+                                  operands[0], 0, false, false))\"\n+  \"strd%?\\t%1, %2, [%0]\"\n+  [(set_attr \"type\" \"store2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+(define_insn \"*thumb2_strd_base_neg\"\n+  [(set (mem:SI (plus:SI (match_operand:SI 0 \"s_register_operand\" \"rk\")\n+                         (const_int -4)))\n+        (match_operand:SI 1 \"s_register_operand\" \"r\"))\n+   (set (mem:SI (match_dup 0))\n+        (match_operand:SI 2 \"s_register_operand\" \"r\"))]\n+  \"TARGET_LDRD && TARGET_THUMB2 && reload_completed\n+     && current_tune->prefer_ldrd_strd\n+     && (operands_ok_ldrd_strd (operands[1], operands[2],\n+                                  operands[0], -4, false, false))\"\n+  \"strd%?\\t%1, %2, [%0, #-4]\"\n+  [(set_attr \"type\" \"store2\")\n+   (set_attr \"predicable\" \"yes\")])\n+\n+\n ;; Load the load/store multiple patterns\n (include \"ldmstm.md\")\n "}, {"sha": "1b4167e15e2264a4fe8d02a9a3fda5f4da46c1f3", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -31,7 +31,7 @@\n ;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Dv, Dy, Di, Dt, Dz\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dz\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n \n@@ -279,6 +279,12 @@\n       (match_test \"TARGET_32BIT\n \t\t   && imm_for_neon_inv_logic_operand (op, GET_MODE (op))\")))\n \n+(define_constraint \"Do\"\n+ \"@internal\n+  In ARM/Thumb2 state valid offset for an ldrd/strd instruction.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_LDRD && offset_ok_for_ldrd_strd (ival)\")))\n+\n (define_constraint \"Dv\"\n  \"@internal\n   In ARM/Thumb-2 state a const_double which can be used with a VFP fconsts"}, {"sha": "8f49450780a706faa9d8ac83736c212abf18bf88", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56289ed2fbb326eebbfa582b725664d63e856aee/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=56289ed2fbb326eebbfa582b725664d63e856aee", "patch": "@@ -137,6 +137,10 @@\n        (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)) <= GET_MODE_BITSIZE (mode)\n \t&& ((unsigned HOST_WIDE_INT) INTVAL (op)) > 0\")))\n \n+(define_predicate \"ldrd_strd_offset_operand\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"TARGET_LDRD && offset_ok_for_ldrd_strd (INTVAL (op))\")))\n+\n (define_predicate \"arm_add_operand\"\n   (ior (match_operand 0 \"arm_rhs_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))"}]}