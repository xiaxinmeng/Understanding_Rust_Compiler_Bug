{"sha": "e9d34968823670f95b9b2caba30f007ac9f383c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkMzQ5Njg4MjM2NzBmOTViOWIyY2FiYTMwZjAwN2FjOWYzODNjNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-04-23T07:21:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-23T07:21:46Z"}, "message": "2004-04-23  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URL.java\n\t(hashcode): Don't initialize with default value explicitely.\n\t(getContent): Removed redundant \"final\" keyword.\n\t(openStream): Likewise.\n\t(getURLStreamHandler): Fixed coding style.\n\t* java/net/URLConnection.java\n\t(defaultAllowUserInteraction): Don't initialize with default value\n\texplicitely.\n\t(connected): Likewise.\n\t(doOutput): Likewise.\n\t(ifModifiedSince): Likewise.\n\t(dateformats_initialized): Likewise.\n\t(setURLStreamHander): Use StreamTokenizer where it belongs to.\n\nFrom-SVN: r81080", "tree": {"sha": "58c86148a9fdb9651559b0e2870b409d9678979c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c86148a9fdb9651559b0e2870b409d9678979c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d34968823670f95b9b2caba30f007ac9f383c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d34968823670f95b9b2caba30f007ac9f383c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d34968823670f95b9b2caba30f007ac9f383c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d34968823670f95b9b2caba30f007ac9f383c5/comments", "author": null, "committer": null, "parents": [{"sha": "87939d70f8e59736e8d8d19b04694363452a817e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87939d70f8e59736e8d8d19b04694363452a817e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87939d70f8e59736e8d8d19b04694363452a817e"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "59f1fcea0acf88b387294dfd756af9d48aa83118", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e9d34968823670f95b9b2caba30f007ac9f383c5", "patch": "@@ -1,3 +1,19 @@\n+2004-04-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URL.java\n+\t(hashcode): Don't initialize with default value explicitely.\n+\t(getContent): Removed redundant \"final\" keyword.\n+\t(openStream): Likewise.\n+\t(getURLStreamHandler): Fixed coding style.\n+\t* java/net/URLConnection.java\n+\t(defaultAllowUserInteraction): Don't initialize with default value\n+\texplicitely.\n+\t(connected): Likewise.\n+\t(doOutput): Likewise.\n+\t(ifModifiedSince): Likewise.\n+\t(dateformats_initialized): Likewise.\n+\t(setURLStreamHander): Use StreamTokenizer where it belongs to.\n+\n 2004-04-23  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/channels/FileChannelImpl.java"}, {"sha": "729d96fa87812ee99944245808e0375bd30989f8", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=e9d34968823670f95b9b2caba30f007ac9f383c5", "patch": "@@ -140,6 +140,11 @@ public final class URL implements Serializable\n    */\n   private String host;\n \n+  /**\n+   * The user information necessary to establish the connection.\n+   */\n+  private String userInfo;\n+\n   /**\n    * The port number of this protocol or -1 if the port number used is\n    * the default for this protocol.\n@@ -159,7 +164,7 @@ public final class URL implements Serializable\n   /**\n    * This is the hashCode for this URL\n    */\n-  private int hashCode = 0;\n+  private int hashCode;\n \n   /**\n    * The protocol handler in use for this URL\n@@ -276,7 +281,9 @@ public URL(String protocol, String host, int port, String file,\n \n     this.host = host;\n     this.port = port;\n-    this.authority = null;\n+    this.authority = (host != null) ? host : \"\";\n+    if (port >= 0)\n+\tthis.authority += \":\" + port;\n \n     int hashAt = file.indexOf('#');\n     if (hashAt < 0)\n@@ -480,7 +487,7 @@ public boolean equals(Object obj)\n    *\n    * @since 1.3\n    */\n-  public final Object getContent() throws IOException\n+  public Object getContent() throws IOException\n   {\n     return openConnection().getContent();\n   }\n@@ -494,7 +501,7 @@ public final Object getContent() throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final Object getContent (Class[] classes) throws IOException\n+  public Object getContent(Class[] classes) throws IOException\n   {\n     // FIXME: implement this\n     return getContent();\n@@ -653,7 +660,7 @@ public URLConnection openConnection() throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public final InputStream openStream() throws IOException\n+  public InputStream openStream() throws IOException\n   {\n     return openConnection().getInputStream();\n   }\n@@ -694,11 +701,17 @@ protected void set(String protocol, String host, int port, String file,\n     // be aware of this.\n     this.ph = getURLStreamHandler(protocol);\n     this.protocol = protocol.toLowerCase();\n-    this.authority = null;\n+    this.authority = \"\";\n     this.port = port;\n     this.host = host;\n     this.file = file;\n     this.ref = ref;\n+\n+    if (host != null)\n+      this.authority += host;\n+    if (port >= 0)\n+      this.authority += \":\" + port;\n+\n     hashCode = hashCode(); // Used for serialization.\n   }\n \n@@ -727,15 +740,15 @@ protected void set(String protocol, String host, int port, String authority,\n     // be aware of this.\n     this.ph = getURLStreamHandler(protocol);\n     this.protocol = protocol.toLowerCase();\n-    if (userInfo == null)\n-      this.host = host;\n-    else\n-      this.host = userInfo + \"@\" + host;\n+    this.host = host;\n+    this.userInfo = userInfo;\n     this.port = port;\n+    this.file = path;\n+    this.authority = authority;\n     if (query == null)\n-      this.file = path;\n+      this.file = file;\n     else\n-      this.file = path + \"?\" + query;\n+      this.file = file + \"?\" + query;\n     this.ref = ref;\n     hashCode = hashCode(); // Used for serialization.\n   }\n@@ -811,13 +824,13 @@ private static synchronized URLStreamHandler getURLStreamHandler(String protocol\n     // If a non-default factory has been set, use it to find the protocol.\n     if (factory != null)\n       {\n-\tph = factory.createURLStreamHandler (protocol);\n+\tph = factory.createURLStreamHandler(protocol);\n       }\n-    else if (protocol.equals (\"core\"))\n+    else if (protocol.equals(\"core\"))\n       {\n  \tph = new gnu.java.net.protocol.core.Handler();\n       }\n-    else if (protocol.equals (\"file\"))\n+    else if (protocol.equals(\"file\"))\n       {\n \t// This is an interesting case.  It's tempting to think that we\n \t// could call Class.forName (\"gnu.java.net.protocol.file.Handler\") to"}, {"sha": "867a53450c8c0cb0ad7f8040e1820b6c2bf11944", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d34968823670f95b9b2caba30f007ac9f383c5/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=e9d34968823670f95b9b2caba30f007ac9f383c5", "patch": "@@ -432,10 +432,10 @@ public Object getContent() throws IOException\n     String type = getContentType();\n     ContentHandler ch = setContentHandler(type);\n \n-    if (ch != null)\n-      return ch.getContent(this);\n+    if (ch == null)\n+      return getInputStream();\n \n-    return getInputStream();\n+    return ch.getContent(this);\n   }\n \n   /**\n@@ -993,7 +993,6 @@ private ContentHandler setContentHandler(String contentType)\n \n \t// Replace the '/' character in the content type with '.' and\n \t// all other non-alphabetic, non-numeric characters with '_'.\n-\tStringTokenizer pkgPrefix = new StringTokenizer(propVal, \"|\");\n \tchar[] cArray = contentType.toCharArray();\n \tfor (int i = 0; i < cArray.length; i++)\n \t  {\n@@ -1007,6 +1006,7 @@ else if (! ((cArray[i] >= 'A' && cArray[i] <= 'Z') ||\n \tString contentClass = new String(cArray);\n \n \t// See if a class of this content type exists in any of the packages.\n+\tStringTokenizer pkgPrefix = new StringTokenizer(propVal, \"|\");\n \tdo\n \t  {\n \t    String facName = pkgPrefix.nextToken() + \".\" + contentClass;"}]}