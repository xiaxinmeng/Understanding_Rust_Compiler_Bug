{"sha": "b77302be88147ea826ab87d7d31e810fa68f4279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3MzAyYmU4ODE0N2VhODI2YWI4N2Q3ZDMxZTgxMGZhNjhmNDI3OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-24T08:54:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-24T08:54:25Z"}, "message": "re PR middle-end/19551 (pure (complex types) function call removed as dead (LAPACK routine claic1.f bug))\n\n\t* flow.c (propagate_one_insn): Formatting.\n\n\tPR middle-end/19551\n\t* flow.c (libcall_dead_p): Be more conservative if unsure.\n\tIf there are any instructions between insn and call, see if they are\n\tall dead before saying the libcall is dead.\n\n\t* gcc.c-torture/execute/20050121-1.c: New test.\n\t* gcc.dg/20050121-2.c: New test.\n\nFrom-SVN: r94145", "tree": {"sha": "0acef8526681eeb1372d896c1eb2e4f5656de04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0acef8526681eeb1372d896c1eb2e4f5656de04d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77302be88147ea826ab87d7d31e810fa68f4279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77302be88147ea826ab87d7d31e810fa68f4279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77302be88147ea826ab87d7d31e810fa68f4279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77302be88147ea826ab87d7d31e810fa68f4279/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11c56af5905097e03289cdf395db4fb0eb78d61c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c56af5905097e03289cdf395db4fb0eb78d61c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c56af5905097e03289cdf395db4fb0eb78d61c"}], "stats": {"total": 163, "additions": 159, "deletions": 4}, "files": [{"sha": "815f01f9b4fa69d57b3912e140db19a8c0d51dd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b77302be88147ea826ab87d7d31e810fa68f4279", "patch": "@@ -1,3 +1,12 @@\n+2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* flow.c (propagate_one_insn): Formatting.\n+\n+\tPR middle-end/19551\n+\t* flow.c (libcall_dead_p): Be more conservative if unsure.\n+\tIf there are any instructions between insn and call, see if they are\n+\tall dead before saying the libcall is dead.\n+\n 2005-01-24  Uros Bizjak  <uros@kss-loka.si>\n \n \t* config/i386/i386.md (*extendsfdf2_sse): Use \"nonimmediate_operand\""}, {"sha": "0aa23c03d2247e524f780d8b8937ca92851fb7da", "filename": "gcc/flow.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=b77302be88147ea826ab87d7d31e810fa68f4279", "patch": "@@ -1581,7 +1581,7 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n       pbi->cc0_live = 0;\n \n       if (libcall_is_dead)\n-\tprev = propagate_block_delete_libcall ( insn, note);\n+\tprev = propagate_block_delete_libcall (insn, note);\n       else\n \t{\n \n@@ -2284,7 +2284,7 @@ libcall_dead_p (struct propagate_block_info *pbi, rtx note, rtx insn)\n     {\n       rtx r = SET_SRC (x);\n \n-      if (REG_P (r))\n+      if (REG_P (r) || GET_CODE (r) == SUBREG)\n \t{\n \t  rtx call = XEXP (note, 0);\n \t  rtx call_pat;\n@@ -2318,10 +2318,20 @@ libcall_dead_p (struct propagate_block_info *pbi, rtx note, rtx insn)\n \t      call_pat = XVECEXP (call_pat, 0, i);\n \t    }\n \n-\t  return insn_dead_p (pbi, call_pat, 1, REG_NOTES (call));\n+\t  if (! insn_dead_p (pbi, call_pat, 1, REG_NOTES (call)))\n+\t    return 0;\n+\n+\t  while ((insn = PREV_INSN (insn)) != call)\n+\t    {\n+\t      if (! INSN_P (insn))\n+\t\tcontinue;\n+\t      if (! insn_dead_p (pbi, PATTERN (insn), 0, REG_NOTES (insn)))\n+\t\treturn 0;\n+\t    }\n+\t  return 1;\n \t}\n     }\n-  return 1;\n+  return 0;\n }\n \n /* 1 if register REGNO was alive at a place where `setjmp' was called"}, {"sha": "b64036b9f7089eeeebaf049a38b3b64a23463186", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b77302be88147ea826ab87d7d31e810fa68f4279", "patch": "@@ -1,3 +1,9 @@\n+2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/19551\n+\t* gcc.c-torture/execute/20050121-1.c: New test.\n+\t* gcc.dg/20050121-2.c: New test.\n+\n 2004-01-23  Steven G. Kargl  <kargls@comcast.net>\n \tPaul Brook  <paul@codesourcery.com>\n "}, {"sha": "9d5dec416421792e8e9d6afb850fa1b3e256d820", "filename": "gcc/testsuite/gcc.c-torture/execute/20050121-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050121-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050121-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050121-1.c?ref=b77302be88147ea826ab87d7d31e810fa68f4279", "patch": "@@ -0,0 +1,63 @@\n+/* PR middle-end/19551 */\n+\n+extern void abort ();\n+\n+#define T(type, name) \\\n+__attribute__((pure)) _Complex type\t\t\\\n+foo_##name (int x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  _Complex type r;\t\t\t\t\\\n+  __real r = x + 1;\t\t\t\t\\\n+  __imag r = x - 1;\t\t\t\t\\\n+  return r;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\\\n+bar_##name (type *x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  *x = __real foo_##name (5);\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\\\n+baz_##name (type *x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  *x = __imag foo_##name (5);\t\t\t\\\n+}\n+\n+typedef long double ldouble_t;\n+typedef long long llong;\n+\n+T (float, float)\n+T (double, double)\n+T (long double, ldouble_t)\n+T (char, char)\n+T (short, short)\n+T (int, int)\n+T (long, long)\n+T (long long, llong)\n+#undef T\n+\n+int\n+main (void)\n+{\n+#define T(type, name) \\\n+  {\t\t\t\t\t\t\\\n+    type var = 0;\t\t\t\t\\\n+    bar_##name (&var);\t\t\t\t\\\n+    if (var != 6)\t\t\t\t\\\n+      abort ();\t\t\t\t\t\\\n+    var = 0;\t\t\t\t\t\\\n+    baz_##name (&var);\t\t\t\t\\\n+    if (var != 4)\t\t\t\t\\\n+      abort ();\t\t\t\t\t\\\n+  }\n+  T (float, float)\n+  T (double, double)\n+  T (long double, ldouble_t)\n+  T (char, char)\n+  T (short, short)\n+  T (int, int)\n+  T (long, long)\n+  T (long long, llong)\n+  return 0;\n+}"}, {"sha": "6a6092c900a6fc93a2f4e5138acd7a84c297541a", "filename": "gcc/testsuite/gcc.dg/20050121-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2Fgcc.dg%2F20050121-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77302be88147ea826ab87d7d31e810fa68f4279/gcc%2Ftestsuite%2Fgcc.dg%2F20050121-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050121-2.c?ref=b77302be88147ea826ab87d7d31e810fa68f4279", "patch": "@@ -0,0 +1,67 @@\n+/* PR middle-end/19551 */\n+/* { dg-options \"-O2\" } */\n+/* { dg-do link } */\n+\n+extern void abort ();\n+\n+#define T(type, name) \\\n+extern __attribute__((pure)) _Complex type\t\\\n+foo_c##name (int x);\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\\\n+bar_c##name (type *x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  type f = __real foo_c##name (5);\t\t\\\n+  if (0) *x = f;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\\\n+baz_c##name (type *x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  type f = __imag foo_c##name (5);\t\t\\\n+  if (0) *x = f;\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+extern __attribute__((pure)) type\t\t\\\n+foo_##name (int x);\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\\\n+bar_##name (type *x)\t\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  type f = foo_##name (5);\t\t\t\\\n+  if (0) *x = f;\t\t\t\t\\\n+}\n+\n+typedef long double ldouble_t;\n+typedef long long llong;\n+\n+T (float, float)\n+T (double, double)\n+T (long double, ldouble_t)\n+T (char, char)\n+T (short, short)\n+T (int, int)\n+T (long, long)\n+T (long long, llong)\n+#undef T\n+\n+int\n+main (void)\n+{\n+#define T(type, name) \\\n+  {\t\t\t\t\t\t\\\n+    type var = 0;\t\t\t\t\\\n+    bar_c##name (&var);\t\t\t\t\\\n+    baz_c##name (&var);\t\t\t\t\\\n+    bar_##name (&var);\t\t\t\t\\\n+  }\n+  T (float, float)\n+  T (double, double)\n+  T (long double, ldouble_t)\n+  T (char, char)\n+  T (short, short)\n+  T (int, int)\n+  T (long, long)\n+  T (long long, llong)\n+  return 0;\n+}"}]}