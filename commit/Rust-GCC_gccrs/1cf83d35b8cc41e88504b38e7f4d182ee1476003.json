{"sha": "1cf83d35b8cc41e88504b38e7f4d182ee1476003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmODNkMzViOGNjNDFlODg1MDRiMzhlN2Y0ZDE4MmVlMTQ3NjAwMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-11-12T18:49:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-11-12T18:49:31Z"}, "message": "PR tree-optimization/92412 - excessive errno aliasing assumption defeats optimization\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/92412\n\t* targhooks.c (default_ref_may_alias_errno): Errono can only alias\n\textern variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/92412\n\t* gcc.dg/strlenopt-91.c: New test.\n\nFrom-SVN: r278099", "tree": {"sha": "a742c38dd6d5945907aedef8f840b613ef15f311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a742c38dd6d5945907aedef8f840b613ef15f311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf83d35b8cc41e88504b38e7f4d182ee1476003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf83d35b8cc41e88504b38e7f4d182ee1476003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf83d35b8cc41e88504b38e7f4d182ee1476003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf83d35b8cc41e88504b38e7f4d182ee1476003/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "937a86b49e4ed8ef72c1384d617feff26580a048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937a86b49e4ed8ef72c1384d617feff26580a048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937a86b49e4ed8ef72c1384d617feff26580a048"}], "stats": {"total": 141, "additions": 139, "deletions": 2}, "files": [{"sha": "a434f25311c5933358de917aa5783a1c4932852a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cf83d35b8cc41e88504b38e7f4d182ee1476003", "patch": "@@ -1,3 +1,9 @@\n+2019-11-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92412\n+\t* targhooks.c (default_ref_may_alias_errno): Errono can only alias\n+\textern variables.\n+\n 2019-11-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/83688"}, {"sha": "b6443d204a6dfdf5cc57843230ede66f2173e030", "filename": "gcc/targhooks.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=1cf83d35b8cc41e88504b38e7f4d182ee1476003", "patch": "@@ -1414,9 +1414,11 @@ default_ref_may_alias_errno (ao_ref *ref)\n   if (TYPE_UNSIGNED (TREE_TYPE (base))\n       || TYPE_MODE (TREE_TYPE (base)) != TYPE_MODE (integer_type_node))\n     return false;\n-  /* The default implementation assumes an errno location\n-     declaration is never defined in the current compilation unit.  */\n+  /* The default implementation assumes an errno location declaration\n+     is never defined in the current compilation unit and may not be\n+     aliased by a local variable.  */\n   if (DECL_P (base)\n+      && DECL_EXTERNAL (base)\n       && !TREE_STATIC (base))\n     return true;\n   else if (TREE_CODE (base) == MEM_REF"}, {"sha": "584ccd7e14386c84d0f710784166697af256f596", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cf83d35b8cc41e88504b38e7f4d182ee1476003", "patch": "@@ -1,3 +1,8 @@\n+2019-11-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92412\n+\t* gcc.dg/strlenopt-91.c: New test.\n+\n 2019-11-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/35503"}, {"sha": "2381d03e44a24038a80910482547cb9f571c7666", "filename": "gcc/testsuite/gcc.dg/strlenopt-91.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf83d35b8cc41e88504b38e7f4d182ee1476003/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-91.c?ref=1cf83d35b8cc41e88504b38e7f4d182ee1476003", "patch": "@@ -0,0 +1,124 @@\n+/* PR tree-optimization/92412 - excessive errno aliasing assumption defeats\n+   optimization\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* alloca (size_t);\n+extern void* calloc (size_t, size_t);\n+extern void* malloc (size_t);\n+\n+extern const char exta[4];\n+static char stata[] = \"123\";\n+\n+void sink (const void*, ...);\n+\n+#define T(ptr, alloc) do {\t\t\t\t\t\t\\\n+    const char *p = ptr;\t\t\t\t\t\t\\\n+    if (p[0] != '1' || p[1] != '2' || p[2] != '3' || p[3] != '\\0'\t\\\n+\t|| __builtin_strlen (p) != 3)\t\t\t\t\t\\\n+      return;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    void *q = alloc;\t\t\t\t\t\t\t\\\n+    __builtin_strcpy (q, p);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (p[0] != '1' || p[1] != '2' || p[2] != '3' || p[3] != '\\0'\t\\\n+\t|| __builtin_strlen (p) != 3\t\t\t\t\t\\\n+\t|| __builtin_strlen (q) != 3)\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    sink (p, q);\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+void alloca_test_local (unsigned n)\n+{\n+  char loca[] = \"123\";\n+  T (loca, alloca (n));\n+}\n+\n+void alloca_test_extern_const (unsigned n)\n+{\n+  T (exta, alloca (n));\n+}\n+\n+void alloca_test_static (unsigned n)\n+{\n+  T (stata, alloca (n));\n+}\n+\n+\n+// Verify fix for PR tree-optimization/92412.\n+void calloc_test_local (unsigned m, unsigned n)\n+{\n+  char loca[] = \"123\";\n+  T (loca, calloc (m, n));\n+}\n+\n+void calloc_test_extern_const (unsigned m, unsigned n)\n+{\n+  T (exta, calloc (m, n));\n+}\n+\n+void calloc_test_static (unsigned m, unsigned n)\n+{\n+  T (stata, calloc (m, n));\n+}\n+\n+\n+// Verify fix for PR tree-optimization/92412.\n+void malloc_test_local (unsigned n)\n+{\n+  char loca[] = \"123\";\n+  T (loca, malloc (n));\n+}\n+\n+void malloc_test_extern_const (unsigned n)\n+{\n+  T (exta, malloc (n));\n+}\n+\n+void malloc_test_static (unsigned n)\n+{\n+  T (stata, malloc (n));\n+}\n+\n+\n+#undef T\n+#define T(ptr, n) do {\t\t\t\t\t\t\t\\\n+    const char *p = ptr;\t\t\t\t\t\t\\\n+    if (p[0] != '1' || p[1] != '2' || p[2] != '3' || p[3] != '\\0'\t\\\n+\t|| __builtin_strlen (p) != 3)\t\t\t\t\t\\\n+      return;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    char vla[n];\t\t\t\t\t\t\t\\\n+    char *q = vla;\t\t\t\t\t\t\t\\\n+    __builtin_strcpy (q, p);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (p[0] != '1' || p[1] != '2' || p[2] != '3' || p[3] != '\\0'\t\\\n+\t|| __builtin_strlen (p) != 3\t\t\t\t\t\\\n+\t|| __builtin_strlen (q) != 3)\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    sink (p, vla);\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+\n+void vla_test_local (unsigned n)\n+{\n+  char loca[] = \"123\";\n+  T (loca, n);\n+}\n+\n+void vla_test_extern_const (unsigned n)\n+{\n+  T (exta, n);\n+}\n+\n+void vla_test_static (unsigned n)\n+{\n+  T (stata, n);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}]}