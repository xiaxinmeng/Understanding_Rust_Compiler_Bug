{"sha": "f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhMGU4NzNiZThhNmMyNzg3YzEzYmQyOWMwYjJhNWRmMzMyYWRlYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-03T18:13:57Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-03T18:15:03Z"}, "message": "i386: Fix ix86_function_arg_regno_p to return correct SSE regno for 32bit TARGET_MACHO\n\nUse up to SSE_REGPARM_MAX registers to pass function parameters\nfor 32bit Mach-O targets.  Also, define X86_32_MMX_REGPARM_MAX\nto return 0 for 32bit Mach-O targets.\n\n2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\n\t* config/i386/i386.c (ix86_function_arg_regno_p): Use up to\n\tSSE_REGPARM_MAX registers to pass function parameters\n\tfor 32bit Mach-O targets.\n\t* config/i386/i386.h (X86_32_MMX_REGPARM_MAX): New macro.\n\t(MMX_REGPARM_MAX): Use it.", "tree": {"sha": "12fd1f704055f2eaf6c04b6a9592e53c98f94c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12fd1f704055f2eaf6c04b6a9592e53c98f94c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b01425ec2019f822f9eb628ef0932f6deff44f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b01425ec2019f822f9eb628ef0932f6deff44f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b01425ec2019f822f9eb628ef0932f6deff44f9"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "ddd1c7161d4d4d8585a9dd4c6b3eb7355b049f82", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "patch": "@@ -1423,23 +1423,15 @@ ix86_function_arg_regno_p (int regno)\n   enum calling_abi call_abi;\n   const int *parm_regs;\n \n-  if (!TARGET_64BIT)\n-    {\n-      if (TARGET_MACHO)\n-        return (regno < REGPARM_MAX\n-                || (TARGET_SSE && SSE_REGNO_P (regno) && !fixed_regs[regno]));\n-      else\n-        return (regno < REGPARM_MAX\n-\t        || (TARGET_MMX && MMX_REGNO_P (regno)\n-\t  \t    && (regno < FIRST_MMX_REG + MMX_REGPARM_MAX))\n-\t        || (TARGET_SSE && SSE_REGNO_P (regno)\n-\t\t    && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX)));\n-    }\n-\n   if (TARGET_SSE && SSE_REGNO_P (regno)\n-      && (regno < FIRST_SSE_REG + SSE_REGPARM_MAX))\n+      && regno < FIRST_SSE_REG + SSE_REGPARM_MAX)\n     return true;\n \n+   if (!TARGET_64BIT)\n+     return (regno < REGPARM_MAX\n+\t     || (TARGET_MMX && MMX_REGNO_P (regno)\n+\t\t && regno < FIRST_MMX_REG + MMX_REGPARM_MAX));\n+\n   /* TODO: The function should depend on current function ABI but\n      builtins.c would need updating then. Therefore we use the\n      default ABI.  */"}, {"sha": "d0c157a9970c7ad36e2f4369a656385aec08cf5d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a0e873be8a6c2787c13bd29c0b2a5df332adeb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f4a0e873be8a6c2787c13bd29c0b2a5df332adeb", "patch": "@@ -1950,7 +1950,9 @@ typedef struct ix86_args {\n       : X86_64_SSE_REGPARM_MAX)\t\t\t\t\t\t\\\n    : X86_32_SSE_REGPARM_MAX)\n \n-#define MMX_REGPARM_MAX (TARGET_64BIT ? 0 : (TARGET_MMX ? 3 : 0))\n+#define X86_32_MMX_REGPARM_MAX (TARGET_MMX ? (TARGET_MACHO ? 0 : 3) : 0)\n+\n+#define MMX_REGPARM_MAX (TARGET_64BIT ? 0 : X86_32_MMX_REGPARM_MAX)\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}]}