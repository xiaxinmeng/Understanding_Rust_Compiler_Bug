{"sha": "d419e176d74162af6513be0b3bc1031726543993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxOWUxNzZkNzQxNjJhZjY1MTNiZTBiM2JjMTAzMTcyNjU0Mzk5Mw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-17T19:47:15Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-20T23:14:13Z"}, "message": "c++: Fix ICE with { } as template argument [PR94592]\n\nAs an extension (there should be a CWG about this though), we support\nbraced-init-list as a template argument, but convert_nontype_argument\nhad trouble digesting them.  We ICEd because of the double coercion we\nperform for template arguments: convert_nontype_argument called from\nfinish_template_type got a { }, and since a class type was involved and\nwe were in a template, convert_like created an IMPLICIT_CONV_EXPR.  Then\nthe second conversion of the same argument crashed in constexpr.c\nbecause the IMPLICIT_CONV_EXPR had gotten wrapped in a TARGET_EXPR.\nAnother issue was that an IMPLICIT_CONV_EXPR leaked to constexpr.c when\nbuilding an aggregate init.\n\nWe should have instantiated the IMPLICIT_CONV_EXPR in the first call to\nconvert_nontype_argument, but we didn't, because the call to\nis_nondependent_constant_expression returned false because it checks\n!BRACE_ENCLOSED_INITIALIZER_P.  Then non_dep was false even though the\nexpression didn't contain anything dependent and we didn't instantiate\nit in convert_nontype_argument.  To fix this, check\nBRACE_ENCLOSED_INITIALIZER_P in cxx_eval_outermost_constant_expr rather\nthan in is_nondependent_*.\n\n\tPR c++/94592\n\t* constexpr.c (cxx_eval_outermost_constant_expr): Return when T is\n\ta BRACE_ENCLOSED_INITIALIZER_P.\n\t(is_nondependent_constant_expression): Don't check\n\tBRACE_ENCLOSED_INITIALIZER_P.\n\t(is_nondependent_static_init_expression): Likewise.\n\n\t* g++.dg/cpp2a/nontype-class34.C: New test.\n\t* g++.dg/cpp2a/nontype-class35.C: New test.", "tree": {"sha": "f62b0b8f150b75990e81d8030fb99d730ec6ec75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f62b0b8f150b75990e81d8030fb99d730ec6ec75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d419e176d74162af6513be0b3bc1031726543993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d419e176d74162af6513be0b3bc1031726543993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d419e176d74162af6513be0b3bc1031726543993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d419e176d74162af6513be0b3bc1031726543993/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3a4f6be0c7ac1536c4d1def14217840b04dd488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a4f6be0c7ac1536c4d1def14217840b04dd488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a4f6be0c7ac1536c4d1def14217840b04dd488"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "53daab16c1542db43f8a8841350f8da9b7ff1d02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d419e176d74162af6513be0b3bc1031726543993/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d419e176d74162af6513be0b3bc1031726543993/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d419e176d74162af6513be0b3bc1031726543993", "patch": "@@ -1,3 +1,12 @@\n+2020-04-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94592\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Return when T is\n+\ta BRACE_ENCLOSED_INITIALIZER_P.\n+\t(is_nondependent_constant_expression): Don't check\n+\tBRACE_ENCLOSED_INITIALIZER_P.\n+\t(is_nondependent_static_init_expression): Likewise.\n+\n 2020-04-20  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94628"}, {"sha": "6b3e514398b9e0b7153564e3022fa80343d39a37", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d419e176d74162af6513be0b3bc1031726543993/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d419e176d74162af6513be0b3bc1031726543993/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d419e176d74162af6513be0b3bc1031726543993", "patch": "@@ -6534,6 +6534,12 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n   bool non_constant_p = false;\n   bool overflow_p = false;\n \n+  if (BRACE_ENCLOSED_INITIALIZER_P (t))\n+    {\n+      gcc_checking_assert (allow_non_constant);\n+      return t;\n+    }\n+\n   constexpr_global_ctx global_ctx;\n   constexpr_ctx ctx = { &global_ctx, NULL, NULL, NULL, NULL, NULL, NULL,\n \t\t\tallow_non_constant, strict,\n@@ -8295,7 +8301,6 @@ bool\n is_nondependent_constant_expression (tree t)\n {\n   return (!type_unknown_p (t)\n-\t  && !BRACE_ENCLOSED_INITIALIZER_P (t)\n \t  && is_constant_expression (t)\n \t  && !instantiation_dependent_expression_p (t));\n }\n@@ -8307,7 +8312,6 @@ bool\n is_nondependent_static_init_expression (tree t)\n {\n   return (!type_unknown_p (t)\n-\t  && !BRACE_ENCLOSED_INITIALIZER_P (t)\n \t  && is_static_init_expression (t)\n \t  && !instantiation_dependent_expression_p (t));\n }"}, {"sha": "e733cae0e918f0de94f504e91562b636e2bc7708", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d419e176d74162af6513be0b3bc1031726543993", "patch": "@@ -1,3 +1,9 @@\n+2020-04-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94592\n+\t* g++.dg/cpp2a/nontype-class34.C: New test.\n+\t* g++.dg/cpp2a/nontype-class35.C: New test.\n+\n 2020-04-20  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94628"}, {"sha": "2d3ba018618dd9d9d4362f6e359d0bb1cc05326f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class34.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class34.C?ref=d419e176d74162af6513be0b3bc1031726543993", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94592 - ICE with { } as template argument.\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  constexpr A() {}\n+};\n+\n+template <A> struct B { };\n+\n+template<typename> void bar () {\n+    B<{}> var;\n+}\n+\n+void fu() {\n+    bar<int>();\n+}"}, {"sha": "78cf0a39c81664a7e8f85106a95cfb0be55db18e", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class35.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d419e176d74162af6513be0b3bc1031726543993/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class35.C?ref=d419e176d74162af6513be0b3bc1031726543993", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/94592 - ICE with { } as template argument.\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+    int i;\n+    constexpr A(int n) : i(n) {}\n+};\n+\n+template <A a> struct B { int i; constexpr B() : i(a.i) { } };\n+\n+template<typename> void bar () {\n+    B<{1}> var;\n+}\n+\n+void fu() {\n+    bar<int>();\n+}"}]}