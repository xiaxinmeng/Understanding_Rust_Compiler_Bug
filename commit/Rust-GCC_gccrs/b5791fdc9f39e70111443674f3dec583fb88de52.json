{"sha": "b5791fdc9f39e70111443674f3dec583fb88de52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3OTFmZGM5ZjM5ZTcwMTExNDQzNjc0ZjNkZWM1ODNmYjg4ZGU1Mg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-01-25T08:45:44Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-01-25T08:45:44Z"}, "message": "cp-tree.h (get_primary_binfo): Remove prototype.\n\n\t* cp-tree.h (get_primary_binfo): Remove prototype.\n\t(push_using_decl): Likewise.\n\t(current_template_args): Likewise.\n\t(more_specialized_class): Likewise.\n\t(mark_class_instantiated): Likewise.\n\t(default_conversion): Likewise.\n\t(pfn_from_ptrmemfunc): Likewise.\n\t* class.c (get_primary_binfo): Add prototype, make static, simplify.\n\t* name-lookup.c (push_using_decl): Make static.\n\t* pt.c (current_template_args): Likewise.\n\t(more_specialized_class): Likewise.\n\t(mark_class_instantiated): Likewise.\n\t* typeck.c (default_conversion): Make static.\n\t(pfn_from_ptrmemfunc): Add prototype, make static.\n\nFrom-SVN: r110208", "tree": {"sha": "96929012c1a30a58a388ef3d847a5366b4ce7912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96929012c1a30a58a388ef3d847a5366b4ce7912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5791fdc9f39e70111443674f3dec583fb88de52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5791fdc9f39e70111443674f3dec583fb88de52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5791fdc9f39e70111443674f3dec583fb88de52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5791fdc9f39e70111443674f3dec583fb88de52/comments", "author": null, "committer": null, "parents": [{"sha": "916b9d4bbcc2775b750a45a633f0a672b0604650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916b9d4bbcc2775b750a45a633f0a672b0604650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916b9d4bbcc2775b750a45a633f0a672b0604650"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "a4f2fab7e0ebd0b1079067618bc1f2a88bb80af5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -1,3 +1,20 @@\n+2006-01-25  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* cp-tree.h (get_primary_binfo): Remove prototype.\n+\t(push_using_decl): Likewise.\n+\t(current_template_args): Likewise.\n+\t(more_specialized_class): Likewise.\n+\t(mark_class_instantiated): Likewise.\n+\t(default_conversion): Likewise.\n+\t(pfn_from_ptrmemfunc): Likewise.\n+\t* class.c (get_primary_binfo): Add prototype, make static, simplify.\n+\t* name-lookup.c (push_using_decl): Make static.\n+\t* pt.c (current_template_args): Likewise.\n+\t(more_specialized_class): Likewise.\n+\t(mark_class_instantiated): Likewise.\n+\t* typeck.c (default_conversion): Make static.\n+\t(pfn_from_ptrmemfunc): Add prototype, make static.\n+\n 2006-01-24  Dirk Mueller  <dmueller@suse.de>\n \t\n \t* typeck.c (build_binary_op): Use OPT_Wfloat_equal in warning()."}, {"sha": "bcbed7be4d2b3a289ca30bcc6424a5a99f229f7c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -167,6 +167,7 @@ static tree dfs_find_final_overrider_pre (tree, void *);\n static tree dfs_find_final_overrider_post (tree, void *);\n static tree find_final_overrider (tree, tree, tree);\n static int make_new_vtable (tree, tree);\n+static tree get_primary_binfo (tree);\n static int maybe_indent_hierarchy (FILE *, int, int);\n static tree dump_class_hierarchy_r (FILE *, int, tree, tree, int);\n static void dump_class_hierarchy (tree);\n@@ -6362,18 +6363,16 @@ get_vtbl_decl_for_binfo (tree binfo)\n    BINFO in the complete object.  Check BINFO_PRIMARY_P or\n    BINFO_LOST_PRIMARY_P to be sure.  */\n \n-tree\n+static tree\n get_primary_binfo (tree binfo)\n {\n   tree primary_base;\n-  tree result;\n \n   primary_base = CLASSTYPE_PRIMARY_BINFO (BINFO_TYPE (binfo));\n   if (!primary_base)\n     return NULL_TREE;\n \n-  result = copied_binfo (primary_base, binfo);\n-  return result;\n+  return copied_binfo (primary_base, binfo);\n }\n \n /* If INDENTED_P is zero, indent to INDENT. Return nonzero.  */"}, {"sha": "e7394075b2449cea7676ec2a3b218d1429c0c8e7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -3740,7 +3740,6 @@ extern void invalidate_class_lookup_cache\t(void);\n extern void maybe_note_name_used_in_class\t(tree, tree);\n extern void note_name_declared_in_class\t\t(tree, tree);\n extern tree get_vtbl_decl_for_binfo\t\t(tree);\n-extern tree get_primary_binfo\t\t\t(tree);\n extern void debug_class\t\t\t\t(tree);\n extern void debug_thunks\t\t\t(tree);\n extern tree cp_fold_obj_type_ref\t\t(tree, tree);\n@@ -3787,7 +3786,6 @@ extern tree duplicate_decls\t\t\t(tree, tree, bool);\n extern tree pushdecl_top_level\t\t\t(tree);\n extern tree pushdecl_top_level_maybe_friend\t(tree, bool);\n extern tree pushdecl_top_level_and_finish\t(tree, tree);\n-extern tree push_using_decl\t\t\t(tree, tree);\n extern tree declare_local_label\t\t\t(tree);\n extern tree define_label\t\t\t(location_t, tree);\n extern void check_goto\t\t\t\t(tree);\n@@ -4006,7 +4004,6 @@ extern tree check_explicit_specialization\t(tree, tree, int, int);\n extern tree process_template_parm\t\t(tree, tree, bool);\n extern tree end_template_parm_list\t\t(tree);\n extern void end_template_decl\t\t\t(void);\n-extern tree current_template_args\t\t(void);\n extern tree push_template_decl\t\t\t(tree);\n extern tree push_template_decl_real\t\t(tree, bool);\n extern void redeclare_class_template\t\t(tree, tree);\n@@ -4021,13 +4018,11 @@ extern int fn_type_unification\t\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t tree, unification_kind_t, int);\n extern void mark_decl_instantiated\t\t(tree, int);\n extern int more_specialized_fn\t\t\t(tree, tree, int);\n-extern void mark_class_instantiated\t\t(tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n extern tree instantiate_decl\t\t\t(tree, int, bool);\n extern int push_tinst_level\t\t\t(tree);\n extern void pop_tinst_level\t\t\t(void);\n-extern int more_specialized_class\t\t(tree, tree, tree);\n extern int comp_template_parms\t\t\t(tree, tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n@@ -4309,7 +4304,6 @@ extern tree cxx_sizeof_or_alignof_type\t\t(tree, enum tree_code, bool);\n #define cxx_sizeof_nowarn(T) cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, false)\n extern tree inline_conversion\t\t\t(tree);\n extern tree decay_conversion\t\t\t(tree);\n-extern tree default_conversion\t\t\t(tree);\n extern tree build_class_member_access_expr      (tree, tree, tree, bool);\n extern tree finish_class_member_access_expr     (tree, tree, bool);\n extern tree build_x_indirect_ref\t\t(tree, const char *);\n@@ -4342,7 +4336,6 @@ extern bool at_least_as_qualified_p\t\t(tree, tree);\n extern void cp_apply_type_quals_to_decl\t\t(int, tree);\n extern tree build_ptrmemfunc1\t\t\t(tree, tree, tree);\n extern void expand_ptrmemfunc_cst\t\t(tree, tree *, tree *);\n-extern tree pfn_from_ptrmemfunc\t\t\t(tree);\n extern tree type_after_usual_arithmetic_conversions (tree, tree);\n extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t const char*);"}, {"sha": "e0ee7a2a4e1b1848c3708e1da2f853ffbcf9b3d5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -1789,7 +1789,7 @@ binding_for_name (cxx_scope *scope, tree name)\n    return NULL_TREE if this not in namespace scope (in namespace\n    scope, a using decl might extend any previous bindings).  */\n \n-tree\n+static tree\n push_using_decl (tree scope, tree name)\n {\n   tree decl;"}, {"sha": "d3d8961cfd04cd1ff0bce67be78c2451e35a61a9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -2451,7 +2451,7 @@ end_template_decl (void)\n /* Given a template argument vector containing the template PARMS.\n    The innermost PARMS are given first.  */\n \n-tree\n+static tree\n current_template_args (void)\n {\n   tree header;\n@@ -10710,7 +10710,7 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n    FULL_ARGS is the full set of template arguments that triggers this\n    partial ordering.  */\n \n-int\n+static int\n more_specialized_class (tree pat1, tree pat2, tree full_args)\n {\n   tree targs;\n@@ -11138,7 +11138,7 @@ do_decl_instantiation (tree decl, tree storage)\n \t\t      /*expl_inst_class_mem_p=*/false);\n }\n \n-void\n+static void\n mark_class_instantiated (tree t, int extern_p)\n {\n   SET_CLASSTYPE_EXPLICIT_INSTANTIATION (t);"}, {"sha": "792b919a9aa8deaab239ecb0a01cd5c2c582009e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5791fdc9f39e70111443674f3dec583fb88de52/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b5791fdc9f39e70111443674f3dec583fb88de52", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"convert.h\"\n #include \"c-common.h\"\n \n+static tree pfn_from_ptrmemfunc (tree);\n static tree convert_for_assignment (tree, tree, const char *, tree, int);\n static tree cp_pointer_int_sum (enum tree_code, tree, tree);\n static tree rationalize_conditional_expr (enum tree_code, tree);\n@@ -1422,7 +1423,7 @@ decay_conversion (tree exp)\n   return exp;\n }\n \n-tree\n+static tree\n default_conversion (tree exp)\n {\n   exp = decay_conversion (exp);\n@@ -5963,7 +5964,7 @@ expand_ptrmemfunc_cst (tree cst, tree *delta, tree *pfn)\n /* Return an expression for PFN from the pointer-to-member function\n    given by T.  */\n \n-tree\n+static tree\n pfn_from_ptrmemfunc (tree t)\n {\n   if (TREE_CODE (t) == PTRMEM_CST)"}]}