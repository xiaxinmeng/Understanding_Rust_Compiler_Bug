{"sha": "85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "node_id": "C_kwDOANBUbNoAKDg1YjI0ZTMyZGMyN2VjMmU3MGI4NTM3MTNlMDcxM2NiYzFmZjA4YzM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-13T16:02:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-13T19:36:51Z"}, "message": "libstdc++: Fix dangling string_view in filesystem::path [PR102592]\n\nWhen creating a path from a pair of non-contiguous iterators we pass the\niterators to _S_convert(Iter, Iter). That function passes the iterators\nto __string_from_range to get a contiguous sequence of characters, and\nthen calls _S_convert(const C*, const C*) to perform the encoding\nconversions. If the value type, C, is char8_t, then no conversion is\nneeded and the _S_convert<char8_t>(const char8_t*, const char8_t*)\nspecialization casts the pointer to const char* and returns a\nstd::string_view that refs to the char8_t sequence. However, that\nsequence is owned by the std::u8string rvalue returned by\n__string_from_range, which goes out of scope when _S_convert(Iter, Iter)\nreturns. That means the std::string_view is dangling and we get\nundefined behaviour when parsing it as a path.\n\nThe same problem does not exist for the path members taking a \"Source\"\nargument, because those functions all convert a non-contiguous range\ninto a basic_string<C> immediately, using __effective_range(__source).\nThat means that the rvalue string returned by that function is still in\nscope for the full expression, so the string_view does not dangle.\n\nThe solution for the buggy functions is to do the same thing, and call\n__string_from_range immediately, so that the returned rvalue is still in\nscope for the lifetime of the string_view returned by _S_convert. To\navoid reintroducing the same problem, remove the _S_convert(Iter, Iter)\noverload that calls __string_from_range and returns a dangling view.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102592\n\t* include/bits/fs_path.h (path::path(Iter, Iter, format))\n\t(path::append(Iter, Iter), path::concat(Iter, Iter)): Call\n\t__string_from_range directly, instead of two-argument overload\n\tof _S_convert.\n\t(path::_S_convert(Iter, Iter)): Remove.\n\t* testsuite/27_io/filesystem/path/construct/102592.C: New test.", "tree": {"sha": "4561fe1c36a564c7f213e4694eda75a6cd487a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4561fe1c36a564c7f213e4694eda75a6cd487a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b24e32dc27ec2e70b853713e0713cbc1ff08c3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97c320016642a40a347d558abc952cc487ad4ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c320016642a40a347d558abc952cc487ad4ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c320016642a40a347d558abc952cc487ad4ff6"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "7ead8ac299c6aac636a5616fbcb53cdf0665bfd5", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b24e32dc27ec2e70b853713e0713cbc1ff08c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b24e32dc27ec2e70b853713e0713cbc1ff08c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "patch": "@@ -292,7 +292,7 @@ namespace __detail\n     template<typename _InputIterator,\n \t     typename _Require = __detail::_Path2<_InputIterator>>\n       path(_InputIterator __first, _InputIterator __last, format = auto_format)\n-      : _M_pathname(_S_convert(__first, __last))\n+      : _M_pathname(_S_convert(__detail::__string_from_range(__first, __last)))\n       { _M_split_cmpts(); }\n \n     template<typename _Source,\n@@ -358,7 +358,7 @@ namespace __detail\n       __detail::_Path2<_InputIterator>&\n       append(_InputIterator __first, _InputIterator __last)\n       {\n-\t_M_append(_S_convert(__first, __last));\n+\t_M_append(_S_convert(__detail::__string_from_range(__first, __last)));\n \treturn *this;\n       }\n \n@@ -390,7 +390,7 @@ namespace __detail\n       __detail::_Path2<_InputIterator>&\n       concat(_InputIterator __first, _InputIterator __last)\n       {\n-\t_M_concat(_S_convert(__first, __last));\n+\t_M_concat(_S_convert(__detail::__string_from_range(__first, __last)));\n \treturn *this;\n       }\n \n@@ -602,11 +602,6 @@ namespace __detail\n       static auto\n       _S_convert(const _EcharT* __first, const _EcharT* __last);\n \n-    template<typename _Iter>\n-      static auto\n-      _S_convert(_Iter __first, _Iter __last)\n-      { return _S_convert(__detail::__string_from_range(__first, __last)); }\n-\n     static string_type\n     _S_convert_loc(const char* __first, const char* __last,\n \t\t   const std::locale& __loc);"}, {"sha": "3bbd07e2494d2a1ee02ed1cf75911d3e68104d64", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/102592.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b24e32dc27ec2e70b853713e0713cbc1ff08c3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F102592.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b24e32dc27ec2e70b853713e0713cbc1ff08c3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F102592.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2F102592.C?ref=85b24e32dc27ec2e70b853713e0713cbc1ff08c3", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-fchar8_t\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::input_container;\n+\n+void test01()\n+{\n+  const char8_t src[] = u8\"/long/path/to/a/file/to/avoid/small/string\";\n+  input_container<const char8_t> c1(src);     // includes null terminator\n+  std::filesystem::path p1(c1.begin());       // read up to null terminator\n+  VERIFY( p1.u8string() == src );\n+\n+  std::u8string_view sv = src;\n+  input_container<const char8_t> c2(sv.data(), sv.data() + sv.size());\n+  std::filesystem::path p2(c2.begin(), c2.end()); // PR libstdc++/102592\n+  VERIFY( p2.u8string() == src );\n+  VERIFY( p1 == p2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}