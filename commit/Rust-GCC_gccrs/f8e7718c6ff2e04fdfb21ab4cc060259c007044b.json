{"sha": "f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlNzcxOGM2ZmYyZTA0ZmRmYjIxYWI0Y2MwNjAyNTljMDA3MDQ0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-01-03T23:45:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-01-03T23:45:47Z"}, "message": "unwind-dw2.c (SIGNAL_FRAME_BIT, [...]): Define.\n\n\t* unwind-dw2.c (SIGNAL_FRAME_BIT, EXTENDED_CONTEXT_BIT): Define.\n\t(struct _Unwind_Context): Rename args_size to flags, remove\n\tsignal_frame field, add a new args_size field and version field.\n\t(_Unwind_IsSignalFrame, _Unwind_SetSignalFrame,\n\t_Unwind_IsExtendedContext): New inline functions.\n\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_GetGRPtr, _Unwind_SetGRPtr):\n\tAssume by_value array is only present if _Unwind_IsExtendedContext.\n\t(_Unwind_GetIPInfo, execute_cfa_program, uw_frame_state_for): Use\n\t_Unwind_IsSignalFrame.\n\t(__frame_state_for): Initialize context.flags to EXTENDED_CONTEXT_BIT.\n\t(uw_update_context_1): Use _Unwind_SetSignalFrame.\n\t(uw_init_context_1): Initialize context->flags to\n\tEXTENDED_CONTEXT_BIT.\n\t* config/rs6000/linux-unwind.h (frob_update_context): Use\n\t_Unwind_SetSignalFrame.\n\nFrom-SVN: r120406", "tree": {"sha": "ec76ec68c8e73f9a55d9067135b9d8006d3dbb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec76ec68c8e73f9a55d9067135b9d8006d3dbb56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798d1cc9ee8d4d9a354609b263bdf021eafc6a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798d1cc9ee8d4d9a354609b263bdf021eafc6a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798d1cc9ee8d4d9a354609b263bdf021eafc6a9f"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "db31113ff4007b8b46d593b5fdabee35d9a71098", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "patch": "@@ -1,3 +1,21 @@\n+2007-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* unwind-dw2.c (SIGNAL_FRAME_BIT, EXTENDED_CONTEXT_BIT): Define.\n+\t(struct _Unwind_Context): Rename args_size to flags, remove\n+\tsignal_frame field, add a new args_size field and version field.\n+\t(_Unwind_IsSignalFrame, _Unwind_SetSignalFrame,\n+\t_Unwind_IsExtendedContext): New inline functions.\n+\t(_Unwind_GetGR, _Unwind_SetGR, _Unwind_GetGRPtr, _Unwind_SetGRPtr):\n+\tAssume by_value array is only present if _Unwind_IsExtendedContext.\n+\t(_Unwind_GetIPInfo, execute_cfa_program, uw_frame_state_for): Use\n+\t_Unwind_IsSignalFrame.\n+\t(__frame_state_for): Initialize context.flags to EXTENDED_CONTEXT_BIT.\n+\t(uw_update_context_1): Use _Unwind_SetSignalFrame.\n+\t(uw_init_context_1): Initialize context->flags to\n+\tEXTENDED_CONTEXT_BIT.\n+\t* config/rs6000/linux-unwind.h (frob_update_context): Use\n+\t_Unwind_SetSignalFrame.\n+\n 2007-01-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/30353"}, {"sha": "182bb6d9f3498ac5a65b12f4fe520daa428526cf", "filename": "gcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "patch": "@@ -319,7 +319,7 @@ frob_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs ATT\n   if (pc[0] == 0x38210000 + SIGNAL_FRAMESIZE\n       && (pc[1] == 0x38000077 || pc[1] == 0x380000AC)\n       && pc[2] == 0x44000002)\n-    context->signal_frame = 1;\n+    _Unwind_SetSignalFrame (context, 1);\n #else\n   /* li r0, 0x7777; sc  (sigreturn old)  */\n   /* li r0, 0x0077; sc  (sigreturn new)  */\n@@ -328,7 +328,7 @@ frob_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs ATT\n   if ((pc[0] == 0x38007777 || pc[0] == 0x38000077\n        || pc[0] == 0x38006666 || pc[0] == 0x380000AC)\n       && pc[1] == 0x44000002)\n-    context->signal_frame = 1;\n+    _Unwind_SetSignalFrame (context, 1);\n #endif\n \n #ifdef __powerpc64__"}, {"sha": "da8289f794fb4c7676f36c2d85fbc6a5fa2af905", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e7718c6ff2e04fdfb21ab4cc060259c007044b/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=f8e7718c6ff2e04fdfb21ab4cc060259c007044b", "patch": "@@ -70,8 +70,15 @@ struct _Unwind_Context\n   void *ra;\n   void *lsda;\n   struct dwarf_eh_bases bases;\n+  /* Signal frame context.  */\n+#define SIGNAL_FRAME_BIT ((~(_Unwind_Word) 0 >> 1) + 1)\n+  /* Context which has version/args_size/by_value fields.  */\n+#define EXTENDED_CONTEXT_BIT ((~(_Unwind_Word) 0 >> 2) + 1)\n+  _Unwind_Word flags;\n+  /* 0 for now, can be increased when further fields are added to\n+     struct _Unwind_Context.  */\n+  _Unwind_Word version;\n   _Unwind_Word args_size;\n-  char signal_frame;\n   char by_value[DWARF_FRAME_REGISTERS+1];\n };\n \n@@ -123,6 +130,27 @@ read_8u (const void *p) { const union unaligned *up = p; return up->u8; }\n static inline unsigned long\n read_8s (const void *p) { const union unaligned *up = p; return up->s8; }\n \f\n+static inline _Unwind_Word\n+_Unwind_IsSignalFrame (struct _Unwind_Context *context)\n+{\n+  return (context->flags & SIGNAL_FRAME_BIT) ? 1 : 0;\n+}\n+\n+static inline void\n+_Unwind_SetSignalFrame (struct _Unwind_Context *context, int val)\n+{\n+  if (val)\n+    context->flags |= SIGNAL_FRAME_BIT;\n+  else\n+    context->flags &= ~SIGNAL_FRAME_BIT;\n+}\n+\n+static inline _Unwind_Word\n+_Unwind_IsExtendedContext (struct _Unwind_Context *context)\n+{\n+  return context->flags & EXTENDED_CONTEXT_BIT;\n+}\n+\f\n /* Get the value of register INDEX as saved in CONTEXT.  */\n \n inline _Unwind_Word\n@@ -141,7 +169,7 @@ _Unwind_GetGR (struct _Unwind_Context *context, int index)\n   size = dwarf_reg_size_table[index];\n   ptr = context->reg[index];\n \n-  if (context->by_value[index])\n+  if (_Unwind_IsExtendedContext (context) && context->by_value[index])\n     return (_Unwind_Word) (_Unwind_Internal_Ptr) ptr;\n \n   /* This will segfault if the register hasn't been saved.  */\n@@ -180,7 +208,7 @@ _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n   gcc_assert (index < (int) sizeof(dwarf_reg_size_table));\n   size = dwarf_reg_size_table[index];\n \n-  if (context->by_value[index])\n+  if (_Unwind_IsExtendedContext (context) && context->by_value[index])\n     {\n       context->reg[index] = (void *) (_Unwind_Internal_Ptr) val;\n       return;\n@@ -203,7 +231,7 @@ static inline void *\n _Unwind_GetGRPtr (struct _Unwind_Context *context, int index)\n {\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n-  if (context->by_value[index])\n+  if (_Unwind_IsExtendedContext (context) && context->by_value[index])\n     return &context->reg[index];\n   return context->reg[index];\n }\n@@ -214,7 +242,8 @@ static inline void\n _Unwind_SetGRPtr (struct _Unwind_Context *context, int index, void *p)\n {\n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n-  context->by_value[index] = 0;\n+  if (_Unwind_IsExtendedContext (context))\n+    context->by_value[index] = 0;\n   context->reg[index] = p;\n }\n \n@@ -256,7 +285,7 @@ _Unwind_GetIP (struct _Unwind_Context *context)\n inline _Unwind_Ptr\n _Unwind_GetIPInfo (struct _Unwind_Context *context, int *ip_before_insn)\n {\n-  *ip_before_insn = context->signal_frame != 0;\n+  *ip_before_insn = _Unwind_IsSignalFrame (context);\n   return (_Unwind_Ptr) context->ra;\n }\n \n@@ -824,7 +853,8 @@ execute_cfa_program (const unsigned char *insn_ptr,\n      reflected at the point immediately before the call insn.\n      In signal frames, return address is after last completed instruction,\n      so we add 1 to return address to make the comparison <=.  */\n-  while (insn_ptr < insn_end && fs->pc < context->ra + context->signal_frame)\n+  while (insn_ptr < insn_end\n+\t && fs->pc < context->ra + _Unwind_IsSignalFrame (context))\n     {\n       unsigned char insn = *insn_ptr++;\n       _Unwind_Word reg, utmp;\n@@ -1063,7 +1093,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   if (context->ra == 0)\n     return _URC_END_OF_STACK;\n \n-  fde = _Unwind_Find_FDE (context->ra + context->signal_frame - 1,\n+  fde = _Unwind_Find_FDE (context->ra + _Unwind_IsSignalFrame (context) - 1,\n \t\t\t  &context->bases);\n   if (fde == NULL)\n     {\n@@ -1142,6 +1172,7 @@ __frame_state_for (void *pc_target, struct frame_state *state_in)\n   int reg;\n \n   memset (&context, 0, sizeof (struct _Unwind_Context));\n+  context.flags = EXTENDED_CONTEXT_BIT;\n   context.ra = pc_target + 1;\n \n   if (uw_frame_state_for (&context, &fs) != _URC_NO_REASON)\n@@ -1306,7 +1337,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \tbreak;\n       }\n \n-  context->signal_frame = fs->signal_frame;\n+  _Unwind_SetSignalFrame (context, fs->signal_frame);\n \n #ifdef MD_FROB_UPDATE_CONTEXT\n   MD_FROB_UPDATE_CONTEXT (context, fs);\n@@ -1366,6 +1397,7 @@ uw_init_context_1 (struct _Unwind_Context *context,\n \n   memset (context, 0, sizeof (struct _Unwind_Context));\n   context->ra = ra;\n+  context->flags = EXTENDED_CONTEXT_BIT;\n \n   code = uw_frame_state_for (context, &fs);\n   gcc_assert (code == _URC_NO_REASON);"}]}