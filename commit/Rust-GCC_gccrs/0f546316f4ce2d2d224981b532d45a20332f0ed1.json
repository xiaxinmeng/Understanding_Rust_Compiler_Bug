{"sha": "0f546316f4ce2d2d224981b532d45a20332f0ed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY1NDYzMTZmNGNlMmQyZDIyNDk4MWI1MzJkNDVhMjAzMzJmMGVkMQ==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-10-14T20:11:12Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-10-14T20:11:12Z"}, "message": "java-insns.h (enum java_code): Add op_breakpoint.\n\n        * include/java-insns.h (enum java_code): Add op_breakpoint.\n        * include/java-interp.h (_Jv_InterpMethod): Declare breakpoint_insn.\n        [INTERPRETER]: Declare _Jv_InterpMethod::bp_insn_slot.\n        [!INTERPRETER]: Declare _Jv_InterpMethod::bp_insn_opcode.\n        (install_break): Declare.\n        * interpret.cc (breakpoint_insn): Define breakpoint insn.\n        (compile): Add op_breakpoint to \"can't happen\" cases.\n        [INTERPRETER] Initialize breakpoint insn if necessary.\n        (install_break): New method.\n        * interpret-run.cc: Add op_breakpoint to insn_targets.\n        Add insn_breakpoint label.\n        * verify.cc (branch_prepass): Add op_breakpoint to unrecognized\n        opcodes section of switch statement.\n        (verify_instructions_0): Likewise.\n\nFrom-SVN: r117734", "tree": {"sha": "e1e9bbc74493dff5ebbd6ee844018c6a7cb62049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1e9bbc74493dff5ebbd6ee844018c6a7cb62049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f546316f4ce2d2d224981b532d45a20332f0ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f546316f4ce2d2d224981b532d45a20332f0ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f546316f4ce2d2d224981b532d45a20332f0ed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f546316f4ce2d2d224981b532d45a20332f0ed1/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1526c4b5b64e0271567425e10e3abeedfa088fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1526c4b5b64e0271567425e10e3abeedfa088fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1526c4b5b64e0271567425e10e3abeedfa088fe3"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "ababe76515cce4b15d2bbfba7d2504054f01c2e1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -1,3 +1,20 @@\n+2006-10-14  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-insns.h (enum java_code): Add op_breakpoint.\n+\t* include/java-interp.h (_Jv_InterpMethod): Declare breakpoint_insn.\n+\t[INTERPRETER]: Declare _Jv_InterpMethod::bp_insn_slot.\n+\t[!INTERPRETER]: Declare _Jv_InterpMethod::bp_insn_opcode.\n+\t(install_break): Declare.\n+\t* interpret.cc (breakpoint_insn): Define breakpoint insn.\n+\t(compile): Add op_breakpoint to \"can't happen\" cases.\n+\t[INTERPRETER] Initialize breakpoint insn if necessary.\n+\t(install_break): New method.\n+\t* interpret-run.cc: Add op_breakpoint to insn_targets.\n+\tAdd insn_breakpoint label.\n+\t* verify.cc (branch_prepass): Add op_breakpoint to unrecognized\n+\topcodes section of switch statement.\n+\t(verify_instructions_0): Likewise.\n+\n 2006-10-12  Keith Seitz  <keiths@redhat.com>\n \n \t* include/jvmti-int.h (JVMTI): Declare all members \"extern\"."}, {"sha": "824e44186a0d9fff21055ef41734ef57a3c608fb", "filename": "libjava/include/java-insns.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finclude%2Fjava-insns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finclude%2Fjava-insns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-insns.h?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -1,6 +1,6 @@\n // java-insns.h - Instruction encodings. This is -*- c++ -*-\n \n-/* Copyright (C) 1999, 2001, 2002  Free Software Foundation\n+/* Copyright (C) 1999, 2001, 2002, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -199,9 +199,7 @@ enum java_opcode\n   op_invokespecial = 0xb7,\n   op_invokestatic = 0xb8,\n   op_invokeinterface = 0xb9,\n-\n-  // 0xba is unused.\n-\n+  op_breakpoint = 0xba,\n   op_new = 0xbb,\n   op_newarray = 0xbc,\n   op_anewarray = 0xbd,"}, {"sha": "74846c9f6b28b354101acd2ec7dbe8c64fdccf49", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -133,6 +133,14 @@ struct  _Jv_LineTableEntry\n \n class _Jv_InterpMethod : public _Jv_MethodBase\n {\n+  // Breakpoint instruction\n+  static pc_t breakpoint_insn;\n+#ifdef DIRECT_THREADED\n+  static insn_slot bp_insn_slot;\n+#else\n+  static unsigned char bp_insn_opcode;\n+#endif\n+\n   _Jv_ushort       max_stack;\n   _Jv_ushort       max_locals;\n   int              code_length;\n@@ -206,6 +214,10 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n   void get_line_table (jlong& start, jlong& end, jintArray& line_numbers,\n \t\t       jlongArray& code_indices);\n \n+  /* Installs a break instruction at the given code index. Returns\n+     the pc_t of the breakpoint or NULL if index is invalid. */\n+  pc_t install_break (jlong index);\n+\n   // Gets the instruction at the given index\n   pc_t get_insn (jlong index);\n "}, {"sha": "26cc4a616ddc62c53ddb41c916607989b2a829ae", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -217,7 +217,7 @@ details.  */\n     INSN_LABEL(invokespecial),\n     INSN_LABEL(invokestatic),\n     INSN_LABEL(invokeinterface),\n-    0, /* Unused.  */\n+    INSN_LABEL (breakpoint),\n     INSN_LABEL(new),\n     INSN_LABEL(newarray),\n     INSN_LABEL(anewarray),\n@@ -2463,6 +2463,11 @@ details.  */\n \n       }\n #endif /* DIRECT_THREADED */\n+\n+    insn_breakpoint:\n+      {\n+\t// nothing just yet\n+      }\n     }\n   catch (java::lang::Throwable *ex)\n     {"}, {"sha": "4b3725855f6e662662fdfd931451eeae4cdad9c4", "filename": "libjava/interpret.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -75,6 +75,18 @@ _Jv_InitInterpreter()\n void _Jv_InitInterpreter() {}\n #endif\n \n+// The breakpoint instruction. For the direct threaded case,\n+// _Jv_InterpMethod::compile will initialize breakpoint_insn\n+// the first time it is called.\n+#ifdef DIRECT_THREADED\n+insn_slot _Jv_InterpMethod::bp_insn_slot;\n+pc_t _Jv_InterpMethod::breakpoint_insn = NULL;\n+#else\n+unsigned char _Jv_InterpMethod::bp_insn_opcode\n+  = static_cast<unsigned char> (op_breakpoint);\n+pc_t _Jv_InterpMethod::breakpoint_insn = &_Jv_InterpMethod::bp_insn_opcode;\n+#endif\n+\n extern \"C\" double __ieee754_fmod (double,double);\n \n static inline void dupx (_Jv_word *sp, int n, int x)\n@@ -844,6 +856,7 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n \t    case op_getstatic_4:\n \t    case op_getstatic_8:\n \t    case op_getstatic_a:\n+\t    case op_breakpoint:\n \t    default:\n \t      // Fail somehow.\n \t      break;\n@@ -879,6 +892,12 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n     }  \n \n   prepared = insns;\n+\n+  if (breakpoint_insn == NULL)\n+    {\n+      bp_insn_slot.insn = const_cast<void *> (insn_targets[op_breakpoint]);\n+      breakpoint_insn = &bp_insn_slot;\n+    }\n }\n #endif /* DIRECT_THREADED */\n \n@@ -1384,6 +1403,12 @@ _Jv_InterpMethod::get_line_table (jlong& start, jlong& end,\n #endif // !DIRECT_THREADED\n }\n \n+pc_t\n+_Jv_InterpMethod::install_break (jlong index)\n+{\n+  return set_insn (index, breakpoint_insn);\n+}\n+\n pc_t\n _Jv_InterpMethod::get_insn (jlong index)\n {"}, {"sha": "b002c1c0aabfb99ec7aeec267aef64a7a59876cc", "filename": "libjava/verify.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f546316f4ce2d2d224981b532d45a20332f0ed1/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=0f546316f4ce2d2d224981b532d45a20332f0ed1", "patch": "@@ -1,6 +1,6 @@\n // verify.cc - verify bytecode\n \n-/* Copyright (C) 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -1976,6 +1976,7 @@ class _Jv_BytecodeVerifier\n \t  case op_getstatic_4:\n \t  case op_getstatic_8:\n \t  case op_getstatic_a:\n+\t  case op_breakpoint:\n \t  default:\n \t    verify_fail (\"unrecognized instruction in branch_prepass\",\n \t\t\t start_PC);\n@@ -3153,6 +3154,7 @@ class _Jv_BytecodeVerifier\n \t  case op_getstatic_4:\n \t  case op_getstatic_8:\n \t  case op_getstatic_a:\n+\t  case op_breakpoint:\n \t  default:\n \t    // Unrecognized opcode.\n \t    verify_fail (\"unrecognized instruction in verify_instructions_0\","}]}