{"sha": "22d9c8802add09a93308319fc37dd3a0f1125393", "node_id": "C_kwDOANBUbNoAKDIyZDljODgwMmFkZDA5YTkzMzA4MzE5ZmMzN2RkM2EwZjExMjUzOTM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-03T09:58:18Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-09T08:39:55Z"}, "message": "Come up with {,UN}LIKELY macros.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.cc (c_parser_conditional_expression): Use {,UN}LIKELY\n\tmacros.\n\t(c_parser_binary_expression): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_genericize_r): Use {,UN}LIKELY\n\tmacros.\n\t* parser.cc (cp_finalize_omp_declare_simd): Likewise.\n\t(cp_finalize_oacc_routine): Likewise.\n\ngcc/ChangeLog:\n\n\t* system.h (LIKELY): Define.\n\t(UNLIKELY): Likewise.\n\t* domwalk.cc (sort_bbs_postorder): Use {,UN}LIKELY\n\tmacros.\n\t* dse.cc (set_position_unneeded): Likewise.\n\t(set_all_positions_unneeded): Likewise.\n\t(any_positions_needed_p): Likewise.\n\t(all_positions_needed_p): Likewise.\n\t* expmed.cc (flip_storage_order): Likewise.\n\t* genmatch.cc (dt_simplify::gen_1): Likewise.\n\t* ggc-common.cc (gt_pch_save): Likewise.\n\t* print-rtl.cc: Likewise.\n\t* rtl-iter.h (T>::array_type::~array_type): Likewise.\n\t(T>::next): Likewise.\n\t* rtl-ssa/internals.inl: Likewise.\n\t* rtl-ssa/member-fns.inl: Likewise.\n\t* rtlanal.cc (T>::add_subrtxes_to_queue): Likewise.\n\t(rtx_properties::try_to_add_dest): Likewise.\n\t* rtlanal.h (growing_rtx_properties::repeat): Likewise.\n\t(vec_rtx_properties_base::~vec_rtx_properties_base): Likewise.\n\t* simplify-rtx.cc (simplify_replace_fn_rtx): Likewise.\n\t* sort.cc (likely): Likewise.\n\t(mergesort): Likewise.\n\t* wide-int.h (wi::eq_p): Likewise.\n\t(wi::ltu_p): Likewise.\n\t(wi::cmpu): Likewise.\n\t(wi::bit_and): Likewise.\n\t(wi::bit_and_not): Likewise.\n\t(wi::bit_or): Likewise.\n\t(wi::bit_or_not): Likewise.\n\t(wi::bit_xor): Likewise.\n\t(wi::add): Likewise.\n\t(wi::sub): Likewise.", "tree": {"sha": "1b15e7fe5c3bbb56688e2eb29aa1c7c1f317a4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b15e7fe5c3bbb56688e2eb29aa1c7c1f317a4a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d9c8802add09a93308319fc37dd3a0f1125393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d9c8802add09a93308319fc37dd3a0f1125393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d9c8802add09a93308319fc37dd3a0f1125393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d9c8802add09a93308319fc37dd3a0f1125393/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27239e13b1ba383e2706231917062aa6e14150a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27239e13b1ba383e2706231917062aa6e14150a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27239e13b1ba383e2706231917062aa6e14150a8"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "d431d5fb4c1782edfaa91fcf3e671fbafdbc0986", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -7669,7 +7669,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after,\n   c_inhibit_evaluation_warnings -= cond.value == truthvalue_true_node;\n   location_t loc1 = make_location (exp1.get_start (), exp1.src_range);\n   location_t loc2 = make_location (exp2.get_start (), exp2.src_range);\n-  if (__builtin_expect (omp_atomic_lhs != NULL, 0)\n+  if (UNLIKELY (omp_atomic_lhs != NULL)\n       && (TREE_CODE (cond.value) == GT_EXPR\n \t  || TREE_CODE (cond.value) == LT_EXPR\n \t  || TREE_CODE (cond.value) == EQ_EXPR)\n@@ -7865,7 +7865,7 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after,\n     stack[sp].expr\t\t\t\t\t\t\t      \\\n       = convert_lvalue_to_rvalue (stack[sp].loc,\t\t\t      \\\n \t\t\t\t  stack[sp].expr, true, true);\t\t      \\\n-    if (__builtin_expect (omp_atomic_lhs != NULL_TREE, 0) && sp == 1\t      \\\n+    if (UNLIKELY (omp_atomic_lhs != NULL_TREE) && sp == 1\t\t      \\\n \t&& ((c_parser_next_token_is (parser, CPP_SEMICOLON)\t\t      \\\n \t     && ((1 << stack[sp].prec)\t\t\t\t\t      \\\n \t\t & ((1 << PREC_BITOR) | (1 << PREC_BITXOR)\t\t      \\"}, {"sha": "7ab44efa058cc80461db24e8e33dad20c05e7607", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -1178,7 +1178,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n   hash_set<tree> *p_set = wtd->p_set;\n \n   /* If in an OpenMP context, note var uses.  */\n-  if (__builtin_expect (wtd->omp_ctx != NULL, 0)\n+  if (UNLIKELY (wtd->omp_ctx != NULL)\n       && (VAR_P (stmt)\n \t  || TREE_CODE (stmt) == PARM_DECL\n \t  || TREE_CODE (stmt) == RESULT_DECL)\n@@ -1242,7 +1242,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       if (is_invisiref_parm (TREE_OPERAND (stmt, 0)))\n \t{\n \t  /* If in an OpenMP context, note var uses.  */\n-\t  if (__builtin_expect (wtd->omp_ctx != NULL, 0)\n+\t  if (UNLIKELY (wtd->omp_ctx != NULL)\n \t      && omp_var_to_track (TREE_OPERAND (stmt, 0)))\n \t    omp_cxx_notice_variable (wtd->omp_ctx, TREE_OPERAND (stmt, 0));\n \t  *stmt_p = fold_convert (TREE_TYPE (stmt), TREE_OPERAND (stmt, 0));\n@@ -1369,7 +1369,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       break;\n \n     case BIND_EXPR:\n-      if (__builtin_expect (wtd->omp_ctx != NULL, 0))\n+      if (UNLIKELY (wtd->omp_ctx != NULL))\n \t{\n \t  tree decl;\n \t  for (decl = BIND_EXPR_VARS (stmt); decl; decl = DECL_CHAIN (decl))"}, {"sha": "a28e0e20c75d128cbea2ab0c5f1411ffa4a297b1", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -1454,7 +1454,7 @@ cp_ensure_no_omp_declare_simd (cp_parser *parser)\n static inline void\n cp_finalize_omp_declare_simd (cp_parser *parser, tree fndecl)\n {\n-  if (__builtin_expect (parser->omp_declare_simd != NULL, 0))\n+  if (UNLIKELY (parser->omp_declare_simd != NULL))\n     {\n       if (fndecl == error_mark_node)\n \t{\n@@ -22660,7 +22660,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t  bool ok = (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)\n \t\t     || cp_lexer_next_token_is (parser->lexer, CPP_COMMA));\n \t  cp_lexer_rollback_tokens (parser->lexer);\n-\t  if (__builtin_expect (!ok, 0))\n+\t  if (UNLIKELY (!ok))\n \t    /* Not an init-declarator.  */\n \t    return error_mark_node;\n \t}\n@@ -47196,7 +47196,7 @@ cp_parser_late_parsing_oacc_routine (cp_parser *parser, tree attrs)\n static void\n cp_finalize_oacc_routine (cp_parser *parser, tree fndecl, bool is_defn)\n {\n-  if (__builtin_expect (parser->oacc_routine != NULL, 0))\n+  if (UNLIKELY (parser->oacc_routine != NULL))\n     {\n       /* Keep going if we're in error reporting mode.  */\n       if (parser->oacc_routine->error_seen"}, {"sha": "d633088dff336ebfa448bc724fcf334d8d5aee97", "filename": "gcc/domwalk.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fdomwalk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fdomwalk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -144,13 +144,13 @@ cmp_bb_postorder (const void *a, const void *b, void *data)\n static void\n sort_bbs_postorder (basic_block *bbs, int n, int *bb_postorder)\n {\n-  if (__builtin_expect (n == 2, true))\n+  if (LIKELY (n == 2))\n     {\n       basic_block bb0 = bbs[0], bb1 = bbs[1];\n       if (bb_postorder[bb0->index] < bb_postorder[bb1->index])\n \tbbs[0] = bb1, bbs[1] = bb0;\n     }\n-  else if (__builtin_expect (n == 3, true))\n+  else if (LIKELY (n == 3))\n     {\n       basic_block bb0 = bbs[0], bb1 = bbs[1], bb2 = bbs[2];\n       if (bb_postorder[bb0->index] < bb_postorder[bb1->index])"}, {"sha": "a58c17e0ccbde0e9a576243c7143fa8e195a15e7", "filename": "gcc/dse.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fdse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fdse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -1249,7 +1249,7 @@ clear_rhs_from_active_local_stores (void)\n static inline void\n set_position_unneeded (store_info *s_info, int pos)\n {\n-  if (__builtin_expect (s_info->is_large, false))\n+  if (UNLIKELY (s_info->is_large))\n     {\n       if (bitmap_set_bit (s_info->positions_needed.large.bmap, pos))\n \ts_info->positions_needed.large.count++;\n@@ -1264,7 +1264,7 @@ set_position_unneeded (store_info *s_info, int pos)\n static inline void\n set_all_positions_unneeded (store_info *s_info)\n {\n-  if (__builtin_expect (s_info->is_large, false))\n+  if (UNLIKELY (s_info->is_large))\n     {\n       HOST_WIDE_INT width;\n       if (s_info->width.is_constant (&width))\n@@ -1287,7 +1287,7 @@ set_all_positions_unneeded (store_info *s_info)\n static inline bool\n any_positions_needed_p (store_info *s_info)\n {\n-  if (__builtin_expect (s_info->is_large, false))\n+  if (UNLIKELY (s_info->is_large))\n     {\n       HOST_WIDE_INT width;\n       if (s_info->width.is_constant (&width))\n@@ -1328,7 +1328,7 @@ all_positions_needed_p (store_info *s_info, poly_int64 start,\n       || !width.is_constant (&const_width))\n     return false;\n \n-  if (__builtin_expect (s_info->is_large, false))\n+  if (UNLIKELY (s_info->is_large))\n     {\n       for (HOST_WIDE_INT i = const_start; i < const_start + const_width; ++i)\n \tif (bitmap_bit_p (s_info->positions_needed.large.bmap, i))"}, {"sha": "41738c1efe903f05e9c2c13f3d935380b19675d2", "filename": "gcc/expmed.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -403,13 +403,13 @@ flip_storage_order (machine_mode mode, rtx x)\n       return gen_rtx_CONCAT (mode, real, imag);\n     }\n \n-  if (__builtin_expect (reverse_storage_order_supported < 0, 0))\n+  if (UNLIKELY (reverse_storage_order_supported < 0))\n     check_reverse_storage_order_support ();\n \n   if (!is_a <scalar_int_mode> (mode, &int_mode))\n     {\n       if (FLOAT_MODE_P (mode)\n-\t  && __builtin_expect (reverse_float_storage_order_supported < 0, 0))\n+\t  && UNLIKELY (reverse_float_storage_order_supported < 0))\n \tcheck_reverse_float_storage_order_support ();\n \n       if (!int_mode_for_size (GET_MODE_PRECISION (mode), 0).exists (&int_mode)"}, {"sha": "2b84b8493308947d2249ecd110ee6e0964d37cdb", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -3358,9 +3358,9 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n     }\n \n   if (s->kind == simplify::SIMPLIFY)\n-    fprintf_indent (f, indent, \"if (__builtin_expect (!dbg_cnt (match), 0)) goto %s;\\n\", fail_label);\n+    fprintf_indent (f, indent, \"if (UNLIKELY (!dbg_cnt (match))) goto %s;\\n\", fail_label);\n \n-  fprintf_indent (f, indent, \"if (__builtin_expect (dump_file && (dump_flags & TDF_FOLDING), 0)) \"\n+  fprintf_indent (f, indent, \"if (UNLIKELY (dump_file && (dump_flags & TDF_FOLDING))) \"\n \t   \"fprintf (dump_file, \\\"%s \",\n \t   s->kind == simplify::SIMPLIFY\n \t   ? \"Applying pattern\" : \"Matching expression\");"}, {"sha": "9d737d079aaccfe56280d8b46bdffc05d1265723", "filename": "gcc/ggc-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fggc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fggc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -592,7 +592,7 @@ gt_pch_save (FILE *f)\n \t temporarily defined and then restoring previous state.  */\n       int get_vbits = 0;\n       size_t valid_size = state.ptrs[i]->size;\n-      if (__builtin_expect (RUNNING_ON_VALGRIND, 0))\n+      if (UNLIKELY (RUNNING_ON_VALGRIND))\n \t{\n \t  if (vbits.length () < valid_size)\n \t    vbits.safe_grow (valid_size, true);\n@@ -644,7 +644,7 @@ gt_pch_save (FILE *f)\n       if (state.ptrs[i]->note_ptr_fn != gt_pch_p_S)\n \tmemcpy (state.ptrs[i]->obj, this_object, state.ptrs[i]->size);\n #if defined ENABLE_VALGRIND_ANNOTATIONS && defined VALGRIND_GET_VBITS\n-      if (__builtin_expect (get_vbits == 1, 0))\n+      if (UNLIKELY (get_vbits == 1))\n \t{\n \t  (void) VALGRIND_SET_VBITS (state.ptrs[i]->obj, vbits.address (),\n \t\t\t\t     valid_size);"}, {"sha": "60c845485bc57088f3d666cda6d77cace35f8f1e", "filename": "gcc/print-rtl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fprint-rtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fprint-rtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -941,7 +941,7 @@ rtx_writer::print_rtx (const_rtx in_rtx)\n     {\n #ifndef GENERATOR_FILE\n     case MEM:\n-      if (__builtin_expect (final_insns_dump_p, false))\n+      if (UNLIKELY (final_insns_dump_p))\n \tfprintf (m_outfile, \" [\");\n       else\n \tfprintf (m_outfile, \" [\" HOST_WIDE_INT_PRINT_DEC,"}, {"sha": "8ee0d39b5c67f7a6ebe19cdefa44dfab103af661", "filename": "gcc/rtl-iter.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-iter.h?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -114,7 +114,7 @@ inline generic_subrtx_iterator <T>::array_type::array_type () : heap (0) {}\n template <typename T>\n inline generic_subrtx_iterator <T>::array_type::~array_type ()\n {\n-  if (__builtin_expect (heap != 0, false))\n+  if (UNLIKELY (heap != 0))\n     free_array (*this);\n }\n \n@@ -172,20 +172,20 @@ generic_subrtx_iterator <T>::next ()\n     {\n       /* Add the subrtxes of M_CURRENT.  */\n       rtx_type x = T::get_rtx (m_current);\n-      if (__builtin_expect (x != 0, true))\n+      if (LIKELY (x != 0))\n \t{\n \t  enum rtx_code code = GET_CODE (x);\n \t  ssize_t count = m_bounds[code].count;\n \t  if (count > 0)\n \t    {\n \t      /* Handle the simple case of a single \"e\" block that is known\n \t\t to fit into the current array.  */\n-\t      if (__builtin_expect (m_end + count <= LOCAL_ELEMS + 1, true))\n+\t      if (LIKELY (m_end + count <= LOCAL_ELEMS + 1))\n \t\t{\n \t\t  /* Set M_CURRENT to the first subrtx and queue the rest.  */\n \t\t  ssize_t start = m_bounds[code].start;\n \t\t  rtunion_type *src = &x->u.fld[start];\n-\t\t  if (__builtin_expect (count > 2, false))\n+\t\t  if (UNLIKELY (count > 2))\n \t\t    m_base[m_end++] = T::get_value (src[2].rt_rtx);\n \t\t  if (count > 1)\n \t\t    m_base[m_end++] = T::get_value (src[1].rt_rtx);"}, {"sha": "b36a7f459b95e668e0f426e862d10b0e95916381", "filename": "gcc/rtl-ssa/internals.inl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-ssa%2Finternals.inl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-ssa%2Finternals.inl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Finternals.inl?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -305,7 +305,7 @@ inline clobber_info::clobber_info (insn_info *insn, unsigned int regno)\n inline void\n clobber_info::update_group (clobber_group *group)\n {\n-  if (__builtin_expect (m_group != group, 0))\n+  if (UNLIKELY (m_group != group))\n     m_group = group;\n }\n "}, {"sha": "25a8750aefa3cde89ff66b5f96e3a34c88155651", "filename": "gcc/rtl-ssa/member-fns.inl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-ssa%2Fmember-fns.inl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtl-ssa%2Fmember-fns.inl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Fmember-fns.inl?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -484,7 +484,7 @@ insn_info::operator< (const insn_info &other) const\n   if (this == &other)\n     return false;\n \n-  if (__builtin_expect (m_point != other.m_point, 1))\n+  if (LIKELY (m_point != other.m_point))\n     return m_point < other.m_point;\n \n   return slow_compare_with (other) < 0;\n@@ -514,7 +514,7 @@ insn_info::compare_with (const insn_info *other) const\n   if (this == other)\n     return 0;\n \n-  if (__builtin_expect (m_point != other->m_point, 1))\n+  if (LIKELY (m_point != other->m_point))\n     // Assume that points remain in [0, INT_MAX].\n     return m_point - other->m_point;\n "}, {"sha": "7c296824cc2ff9e3e3efb4a92ef89c12b08206c1", "filename": "gcc/rtlanal.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtlanal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtlanal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -131,7 +131,7 @@ generic_subrtx_iterator <T>::add_subrtxes_to_queue (array_type &array,\n   enum rtx_code code = GET_CODE (x);\n   const char *format = GET_RTX_FORMAT (code);\n   size_t orig_end = end;\n-  if (__builtin_expect (INSN_P (x), false))\n+  if (UNLIKELY (INSN_P (x)))\n     {\n       /* Put the pattern at the top of the queue, since that's what\n \t we're likely to want most.  It also allows for the SEQUENCE\n@@ -140,7 +140,7 @@ generic_subrtx_iterator <T>::add_subrtxes_to_queue (array_type &array,\n \tif (format[i] == 'e')\n \t  {\n \t    value_type subx = T::get_value (x->u.fld[i].rt_rtx);\n-\t    if (__builtin_expect (end < LOCAL_ELEMS, true))\n+\t    if (LIKELY (end < LOCAL_ELEMS))\n \t      base[end++] = subx;\n \t    else\n \t      base = add_single_to_queue (array, base, end++, subx);\n@@ -151,7 +151,7 @@ generic_subrtx_iterator <T>::add_subrtxes_to_queue (array_type &array,\n       if (format[i] == 'e')\n \t{\n \t  value_type subx = T::get_value (x->u.fld[i].rt_rtx);\n-\t  if (__builtin_expect (end < LOCAL_ELEMS, true))\n+\t  if (LIKELY (end < LOCAL_ELEMS))\n \t    base[end++] = subx;\n \t  else\n \t    base = add_single_to_queue (array, base, end++, subx);\n@@ -160,7 +160,7 @@ generic_subrtx_iterator <T>::add_subrtxes_to_queue (array_type &array,\n \t{\n \t  unsigned int length = GET_NUM_ELEM (x->u.fld[i].rt_rtvec);\n \t  rtx *vec = x->u.fld[i].rt_rtvec->elem;\n-\t  if (__builtin_expect (end + length <= LOCAL_ELEMS, true))\n+\t  if (LIKELY (end + length <= LOCAL_ELEMS))\n \t    for (unsigned int j = 0; j < length; j++)\n \t      base[end++] = T::get_value (vec[j]);\n \t  else\n@@ -2114,7 +2114,7 @@ rtx_properties::try_to_add_dest (const_rtx x, unsigned int flags)\n {\n   /* If we have a PARALLEL, SET_DEST is a list of EXPR_LIST expressions,\n      each of whose first operand is a register.  */\n-  if (__builtin_expect (GET_CODE (x) == PARALLEL, 0))\n+  if (UNLIKELY (GET_CODE (x) == PARALLEL))\n     {\n       for (int i = XVECLEN (x, 0) - 1; i >= 0; --i)\n \tif (rtx dest = XEXP (XVECEXP (x, 0, i), 0))\n@@ -2159,7 +2159,7 @@ rtx_properties::try_to_add_dest (const_rtx x, unsigned int flags)\n       return;\n     }\n \n-  if (__builtin_expect (REG_P (x), 1))\n+  if (LIKELY (REG_P (x)))\n     {\n       /* We want to keep sp alive everywhere -  by making all\n \t writes to sp also use sp. */"}, {"sha": "f23aac7a8253b1cdc02ab56fe880eb1c922a3741", "filename": "gcc/rtlanal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtlanal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Frtlanal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.h?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -247,7 +247,7 @@ growing_rtx_properties<Base>::repeat (AddFn add)\n       /* This retries if the storage happened to be exactly the right size,\n \t but that's expected to be a rare case and so isn't worth\n \t optimizing for.  */\n-      if (__builtin_expect (this->ref_iter != this->ref_end, 1))\n+      if (LIKELY (this->ref_iter != this->ref_end))\n \tbreak;\n       this->grow (count);\n     }\n@@ -313,7 +313,7 @@ inline vec_rtx_properties_base::vec_rtx_properties_base ()\n \n inline vec_rtx_properties_base::~vec_rtx_properties_base ()\n {\n-  if (__builtin_expect (ref_begin != m_storage, 0))\n+  if (UNLIKELY (ref_begin != m_storage))\n     free (ref_begin);\n }\n "}, {"sha": "fa20665bb010271543816c39a82eac18097d88f7", "filename": "gcc/simplify-rtx.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsimplify-rtx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsimplify-rtx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -414,7 +414,7 @@ simplify_replace_fn_rtx (rtx x, const_rtx old_rtx,\n   rtvec vec, newvec;\n   int i, j;\n \n-  if (__builtin_expect (fn != NULL, 0))\n+  if (UNLIKELY (fn != NULL))\n     {\n       newx = fn (x, old_rtx, data);\n       if (newx)"}, {"sha": "87f826818bb91b8b70cd6e1c9f745d26703fc35d", "filename": "gcc/sort.cc", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsort.cc?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -37,8 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"system.h\"\n \n-#define likely(cond) __builtin_expect ((cond), 1)\n-\n #ifdef __GNUC__\n #define noinline __attribute__ ((__noinline__))\n #else\n@@ -86,15 +84,15 @@ do {                                                     \\\n   memcpy (&t0, e0 + OFFSET, sizeof (TYPE));              \\\n   memcpy (&t1, e1 + OFFSET, sizeof (TYPE));              \\\n   char *out = c->out + OFFSET;                           \\\n-  if (likely (c->n == 3))                                \\\n+  if (LIKELY (c->n == 3))                                \\\n     memmove (out + 2*STRIDE, e2 + OFFSET, sizeof (TYPE));\\\n   memcpy (out, &t0, sizeof (TYPE)); out += STRIDE;       \\\n   memcpy (out, &t1, sizeof (TYPE));                      \\\n } while (0)\n \n-  if (likely (c->size == sizeof (size_t)))\n+  if (LIKELY (c->size == sizeof (size_t)))\n     REORDER_23 (size_t, sizeof (size_t), 0);\n-  else if (likely (c->size == sizeof (int)))\n+  else if (LIKELY (c->size == sizeof (int)))\n     REORDER_23 (int, sizeof (int), 0);\n   else\n     {\n@@ -119,17 +117,17 @@ do {                                                     \\\n   memcpy (&t2, e2 + OFFSET, sizeof (TYPE));              \\\n   memcpy (&t3, e3 + OFFSET, sizeof (TYPE));              \\\n   char *out = c->out + OFFSET;                           \\\n-  if (likely (c->n == 5))                                \\\n+  if (LIKELY (c->n == 5))                                \\\n     memmove (out + 4*STRIDE, e4 + OFFSET, sizeof (TYPE));\\\n   memcpy (out, &t0, sizeof (TYPE)); out += STRIDE;       \\\n   memcpy (out, &t1, sizeof (TYPE)); out += STRIDE;       \\\n   memcpy (out, &t2, sizeof (TYPE)); out += STRIDE;       \\\n   memcpy (out, &t3, sizeof (TYPE));                      \\\n } while (0)\n \n-  if (likely (c->size == sizeof (size_t)))\n+  if (LIKELY (c->size == sizeof (size_t)))\n     REORDER_45 (size_t, sizeof (size_t), 0);\n-  else if (likely(c->size == sizeof (int)))\n+  else if (LIKELY (c->size == sizeof (int)))\n     REORDER_45 (int,  sizeof (int), 0);\n   else\n     {\n@@ -168,21 +166,21 @@ do {                                  \\\n \n   char *e0 = in, *e1 = e0 + c->size, *e2 = e1 + c->size;\n   CMP (e0, e1);\n-  if (likely (c->n == 3))\n+  if (LIKELY (c->n == 3))\n     {\n       CMP (e1, e2);\n       CMP (e0, e1);\n     }\n   if (c->n <= 3)\n     return reorder23 (c, e0, e1, e2);\n   char *e3 = e2 + c->size, *e4 = e3 + c->size;\n-  if (likely (c->n == 5))\n+  if (LIKELY (c->n == 5))\n     {\n       CMP (e3, e4);\n       CMP (e2, e4);\n     }\n   CMP (e2, e3);\n-  if (likely (c->n == 5))\n+  if (LIKELY (c->n == 5))\n     {\n       CMP (e0, e3);\n       CMP (e1, e4);\n@@ -200,7 +198,7 @@ template<typename sort_ctx>\n static void\n mergesort (char *in, sort_ctx *c, size_t n, char *out, char *tmp)\n {\n-  if (likely (n <= c->nlim))\n+  if (LIKELY (n <= c->nlim))\n     {\n       c->out = out;\n       c->n = n;\n@@ -225,12 +223,12 @@ do {                                            \\\n   l += ~mr & SIZE;                              \\\n } while (r != end)\n \n-  if (likely (c->cmp(r, l + (r - out) - c->size) < 0))\n+  if (LIKELY (c->cmp (r, l + (r - out) - c->size) < 0))\n     {\n       char *end = out + n * c->size;\n-      if (sizeof (size_t) == 8 && likely (c->size == 8))\n+      if (sizeof (size_t) == 8 && LIKELY (c->size == 8))\n \tMERGE_ELTSIZE (8);\n-      else if (likely (c->size == 4))\n+      else if (LIKELY (c->size == 4))\n \tMERGE_ELTSIZE (4);\n       else\n \tMERGE_ELTSIZE (c->size);"}, {"sha": "1121af485a4025113c293e19bcf85f99bc490fab", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -736,6 +736,9 @@ extern int vsnprintf (char *, size_t, const char *, va_list);\n #define __builtin_expect(a, b) (a)\n #endif\n \n+#define LIKELY(x) (__builtin_expect ((x), 1))\n+#define UNLIKELY(x) (__builtin_expect ((x), 0))\n+\n /* Some of the headers included by <memory> can use \"abort\" within a\n    namespace, e.g. \"_VSTD::abort();\", which fails after we use the\n    preprocessor to redefine \"abort\" as \"fancy_abort\" below.  */\n@@ -783,7 +786,7 @@ extern void fancy_abort (const char *, int, const char *)\n    ((void)(!(EXPR) ? fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0 : 0))\n #elif (GCC_VERSION >= 4005)\n #define gcc_assert(EXPR) \t\t\t\t\t\t\\\n-  ((void)(__builtin_expect (!(EXPR), 0) ? __builtin_unreachable (), 0 : 0))\n+  ((void)(UNLIKELY (!(EXPR)) ? __builtin_unreachable (), 0 : 0))\n #else\n /* Include EXPR, so that unused variable warnings do not occur.  */\n #define gcc_assert(EXPR) ((void)(0 && (EXPR)))"}, {"sha": "8041b6104f94120dd16c05d7d8bae494357959a5", "filename": "gcc/wide-int.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d9c8802add09a93308319fc37dd3a0f1125393/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=22d9c8802add09a93308319fc37dd3a0f1125393", "patch": "@@ -1867,7 +1867,7 @@ wi::eq_p (const T1 &x, const T2 &y)\n       while (++i != xi.len);\n       return true;\n     }\n-  if (__builtin_expect (yi.len == 1, true))\n+  if (LIKELY (yi.len == 1))\n     {\n       /* XI is only equal to YI if it too has a single HWI.  */\n       if (xi.len != 1)\n@@ -1943,7 +1943,7 @@ wi::ltu_p (const T1 &x, const T2 &y)\n   /* Optimize the case of two HWIs.  The HWIs are implicitly sign-extended\n      for precisions greater than HOST_BITS_WIDE_INT, but sign-extending both\n      values does not change the result.  */\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       unsigned HOST_WIDE_INT xl = xi.to_uhwi ();\n       unsigned HOST_WIDE_INT yl = yi.to_uhwi ();\n@@ -2114,7 +2114,7 @@ wi::cmpu (const T1 &x, const T2 &y)\n   /* Optimize the case of two HWIs.  The HWIs are implicitly sign-extended\n      for precisions greater than HOST_BITS_WIDE_INT, but sign-extending both\n      values does not change the result.  */\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       unsigned HOST_WIDE_INT xl = xi.to_uhwi ();\n       unsigned HOST_WIDE_INT yl = yi.to_uhwi ();\n@@ -2321,7 +2321,7 @@ wi::bit_and (const T1 &x, const T2 &y)\n   WIDE_INT_REF_FOR (T1) xi (x, precision);\n   WIDE_INT_REF_FOR (T2) yi (y, precision);\n   bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       val[0] = xi.ulow () & yi.ulow ();\n       result.set_len (1, is_sign_extended);\n@@ -2342,7 +2342,7 @@ wi::bit_and_not (const T1 &x, const T2 &y)\n   WIDE_INT_REF_FOR (T1) xi (x, precision);\n   WIDE_INT_REF_FOR (T2) yi (y, precision);\n   bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       val[0] = xi.ulow () & ~yi.ulow ();\n       result.set_len (1, is_sign_extended);\n@@ -2363,7 +2363,7 @@ wi::bit_or (const T1 &x, const T2 &y)\n   WIDE_INT_REF_FOR (T1) xi (x, precision);\n   WIDE_INT_REF_FOR (T2) yi (y, precision);\n   bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       val[0] = xi.ulow () | yi.ulow ();\n       result.set_len (1, is_sign_extended);\n@@ -2384,7 +2384,7 @@ wi::bit_or_not (const T1 &x, const T2 &y)\n   WIDE_INT_REF_FOR (T1) xi (x, precision);\n   WIDE_INT_REF_FOR (T2) yi (y, precision);\n   bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       val[0] = xi.ulow () | ~yi.ulow ();\n       result.set_len (1, is_sign_extended);\n@@ -2405,7 +2405,7 @@ wi::bit_xor (const T1 &x, const T2 &y)\n   WIDE_INT_REF_FOR (T1) xi (x, precision);\n   WIDE_INT_REF_FOR (T2) yi (y, precision);\n   bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;\n-  if (__builtin_expect (xi.len + yi.len == 2, true))\n+  if (LIKELY (xi.len + yi.len == 2))\n     {\n       val[0] = xi.ulow () ^ yi.ulow ();\n       result.set_len (1, is_sign_extended);\n@@ -2441,7 +2441,7 @@ wi::add (const T1 &x, const T2 &y)\n      HOST_BITS_PER_WIDE_INT are relatively rare and there's not much\n      point handling them inline.  */\n   else if (STATIC_CONSTANT_P (precision > HOST_BITS_PER_WIDE_INT)\n-\t   && __builtin_expect (xi.len + yi.len == 2, true))\n+\t   && LIKELY (xi.len + yi.len == 2))\n     {\n       unsigned HOST_WIDE_INT xl = xi.ulow ();\n       unsigned HOST_WIDE_INT yl = yi.ulow ();\n@@ -2527,7 +2527,7 @@ wi::sub (const T1 &x, const T2 &y)\n      HOST_BITS_PER_WIDE_INT are relatively rare and there's not much\n      point handling them inline.  */\n   else if (STATIC_CONSTANT_P (precision > HOST_BITS_PER_WIDE_INT)\n-\t   && __builtin_expect (xi.len + yi.len == 2, true))\n+\t   && LIKELY (xi.len + yi.len == 2))\n     {\n       unsigned HOST_WIDE_INT xl = xi.ulow ();\n       unsigned HOST_WIDE_INT yl = yi.ulow ();"}]}