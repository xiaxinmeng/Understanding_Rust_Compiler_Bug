{"sha": "058d6acefe8bac4a66c8e7fb4951276db188e2d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ZDZhY2VmZThiYWM0YTY2YzhlN2ZiNDk1MTI3NmRiMTg4ZTJkOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T15:28:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-04T21:46:24Z"}, "message": "libstdc++: Fix null dereferences in std::promise\n\nThis fixes some ubsan errors in std::promise:\n\nfuture:1153:34: runtime error: member call on null pointer of type 'struct element_type'\nfuture:1153:34: runtime error: member access within null pointer of type 'struct element_type'\n\nThe problem is that the check for a null pointer is done inside the\n_State::__Setter function, which is only evaluated after evaluating the\n_M_future->_M_set_result postfix-expression.\n\nThis change adds a new promise::_M_state() helper for accessing\n_M_future, and moves the check for no shared state into there, instead\nof inside the __setter functions. The __setter functions are made\nalways_inline, to avoid the situation where the linker selects the old\nversion of set_value (without the _S_check call) and the new version of\n__setter (without the _S_check call) and so there is no check. With the\nalways_inline attribute the old version of set_value will either inline\nthe old __setter or call an extern definition of it, and the new\nset_value will do the check itself, so both versions do the check.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/future (promise::set_value): Check for existence\n\tof shared state before dereferncing it.\n\t(promise::set_exception, promise::set_value_at_thread_exit)\n\t(promise::set_exception_at_thread_exit): Likewise.\n\t(promise<R&>::set_value, promise<R&>::set_exception)\n\t(promise<R&>::set_value_at_thread_exit)\n\t(promise<R&>::set_exception_at_thread_exit): Likewise.\n\t(promise<void>::set_value, promise<void>::set_exception)\n\t(promise<void>::set_value_at_thread_exit)\n\t(promise<void>::set_exception_at_thread_exit): Likewise.\n\t* testsuite/30_threads/promise/members/at_thread_exit2.cc:\n\tRemove unused variable.", "tree": {"sha": "cefa327bd9c3bc7b792203a9e22289f97e980d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cefa327bd9c3bc7b792203a9e22289f97e980d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058d6acefe8bac4a66c8e7fb4951276db188e2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058d6acefe8bac4a66c8e7fb4951276db188e2d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058d6acefe8bac4a66c8e7fb4951276db188e2d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058d6acefe8bac4a66c8e7fb4951276db188e2d8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789c57bc5fe023fc6dc72ade4afcb0916ff788d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789c57bc5fe023fc6dc72ade4afcb0916ff788d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789c57bc5fe023fc6dc72ade4afcb0916ff788d3"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "09e54c3703baa7413f132c82922cd5b99162f0fb", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d6acefe8bac4a66c8e7fb4951276db188e2d8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d6acefe8bac4a66c8e7fb4951276db188e2d8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=058d6acefe8bac4a66c8e7fb4951276db188e2d8", "patch": "@@ -532,26 +532,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         };\n \n       template<typename _Res, typename _Arg>\n+\t__attribute__((__always_inline__))\n         static _Setter<_Res, _Arg&&>\n-        __setter(promise<_Res>* __prom, _Arg&& __arg)\n+        __setter(promise<_Res>* __prom, _Arg&& __arg) noexcept\n         {\n-\t  _S_check(__prom->_M_future);\n           return _Setter<_Res, _Arg&&>{ __prom, std::__addressof(__arg) };\n         }\n \n       template<typename _Res>\n+\t__attribute__((__always_inline__))\n         static _Setter<_Res, __exception_ptr_tag>\n-        __setter(exception_ptr& __ex, promise<_Res>* __prom)\n+        __setter(exception_ptr& __ex, promise<_Res>* __prom) noexcept\n         {\n-\t  _S_check(__prom->_M_future);\n           return _Setter<_Res, __exception_ptr_tag>{ __prom, &__ex };\n         }\n \n       template<typename _Res>\n+\t__attribute__((__always_inline__))\n \tstatic _Setter<_Res, void>\n-\t__setter(promise<_Res>* __prom)\n+\t__setter(promise<_Res>* __prom) noexcept\n \t{\n-\t  _S_check(__prom->_M_future);\n \t  return _Setter<_Res, void>{ __prom };\n \t}\n \n@@ -1130,36 +1130,44 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Setting the result\n       void\n       set_value(const _Res& __r)\n-      { _M_future->_M_set_result(_State::__setter(this, __r)); }\n+      { _M_state()._M_set_result(_State::__setter(this, __r)); }\n \n       void\n       set_value(_Res&& __r)\n-      { _M_future->_M_set_result(_State::__setter(this, std::move(__r))); }\n+      { _M_state()._M_set_result(_State::__setter(this, std::move(__r))); }\n \n       void\n       set_exception(exception_ptr __p)\n-      { _M_future->_M_set_result(_State::__setter(__p, this)); }\n+      { _M_state()._M_set_result(_State::__setter(__p, this)); }\n \n       void\n       set_value_at_thread_exit(const _Res& __r)\n       {\n-\t_M_future->_M_set_delayed_result(_State::__setter(this, __r),\n+\t_M_state()._M_set_delayed_result(_State::__setter(this, __r),\n \t\t\t\t\t _M_future);\n       }\n \n       void\n       set_value_at_thread_exit(_Res&& __r)\n       {\n-\t_M_future->_M_set_delayed_result(\n+\t_M_state()._M_set_delayed_result(\n \t    _State::__setter(this, std::move(__r)), _M_future);\n       }\n \n       void\n       set_exception_at_thread_exit(exception_ptr __p)\n       {\n-\t_M_future->_M_set_delayed_result(_State::__setter(__p, this),\n+\t_M_state()._M_set_delayed_result(_State::__setter(__p, this),\n \t\t\t\t\t _M_future);\n       }\n+\n+    private:\n+      _State&\n+      _M_state()\n+      {\n+\t__future_base::_State_base::_S_check(_M_future);\n+\treturn *_M_future;\n+      }\n     };\n \n   template<typename _Res>\n@@ -1241,25 +1249,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Setting the result\n       void\n       set_value(_Res& __r)\n-      { _M_future->_M_set_result(_State::__setter(this, __r)); }\n+      { _M_state()._M_set_result(_State::__setter(this, __r)); }\n \n       void\n       set_exception(exception_ptr __p)\n-      { _M_future->_M_set_result(_State::__setter(__p, this)); }\n+      { _M_state()._M_set_result(_State::__setter(__p, this)); }\n \n       void\n       set_value_at_thread_exit(_Res& __r)\n       {\n-\t_M_future->_M_set_delayed_result(_State::__setter(this, __r),\n+\t_M_state()._M_set_delayed_result(_State::__setter(this, __r),\n \t\t\t\t\t _M_future);\n       }\n \n       void\n       set_exception_at_thread_exit(exception_ptr __p)\n       {\n-\t_M_future->_M_set_delayed_result(_State::__setter(__p, this),\n+\t_M_state()._M_set_delayed_result(_State::__setter(__p, this),\n \t\t\t\t\t _M_future);\n       }\n+\n+    private:\n+      _State&\n+      _M_state()\n+      {\n+\t__future_base::_State_base::_S_check(_M_future);\n+\treturn *_M_future;\n+      }\n     };\n \n   /// Explicit specialization for promise<void>\n@@ -1333,22 +1349,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Setting the result\n       void\n       set_value()\n-      { _M_future->_M_set_result(_State::__setter(this)); }\n+      { _M_state()._M_set_result(_State::__setter(this)); }\n \n       void\n       set_exception(exception_ptr __p)\n-      { _M_future->_M_set_result(_State::__setter(__p, this)); }\n+      { _M_state()._M_set_result(_State::__setter(__p, this)); }\n \n       void\n       set_value_at_thread_exit()\n-      { _M_future->_M_set_delayed_result(_State::__setter(this), _M_future); }\n+      { _M_state()._M_set_delayed_result(_State::__setter(this), _M_future); }\n \n       void\n       set_exception_at_thread_exit(exception_ptr __p)\n       {\n-\t_M_future->_M_set_delayed_result(_State::__setter(__p, this),\n+\t_M_state()._M_set_delayed_result(_State::__setter(__p, this),\n \t\t\t\t\t _M_future);\n       }\n+\n+    private:\n+      _State&\n+      _M_state()\n+      {\n+\t__future_base::_State_base::_S_check(_M_future);\n+\treturn *_M_future;\n+      }\n     };\n \n   template<typename _Ptr_type, typename _Fn, typename _Res>"}, {"sha": "679d580cee3ccc794b5f8045c02bfbf592354f9b", "filename": "libstdc++-v3/testsuite/30_threads/promise/members/at_thread_exit2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058d6acefe8bac4a66c8e7fb4951276db188e2d8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fat_thread_exit2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058d6acefe8bac4a66c8e7fb4951276db188e2d8/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fat_thread_exit2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Fmembers%2Fat_thread_exit2.cc?ref=058d6acefe8bac4a66c8e7fb4951276db188e2d8", "patch": "@@ -118,7 +118,6 @@ void test02()\n void test03()\n {\n   std::promise<void> p1;\n-  int i = 0;\n   p1.set_value();\n   try {\n     p1.set_value_at_thread_exit();"}]}