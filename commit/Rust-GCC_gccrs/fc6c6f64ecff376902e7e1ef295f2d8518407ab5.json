{"sha": "fc6c6f64ecff376902e7e1ef295f2d8518407ab5", "node_id": "C_kwDOANBUbNoAKGZjNmM2ZjY0ZWNmZjM3NjkwMmU3ZTFlZjI5NWYyZDg1MTg0MDdhYjU", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-22T17:09:43Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-11-19T20:00:50Z"}, "message": "rs6000: Add optimizations for _mm_sad_epu8\n\nPower9 ISA added `vabsdub` instruction which is realized in the\n`vec_absd` instrinsic.\n\nUse `vec_absd` for `_mm_sad_epu8` compatibility intrinsic, when\n`_ARCH_PWR9`.\n\nAlso, the realization of `vec_sum2s` on little-endian includes\ntwo rotates in order to position the input and output to match\nthe semantics of `vec_sum2s`:\n- Rotate the second input vector left 12 bytes. In the current usage,\n  that vector is `{0}`, so this shift is unnecessary, but is currently\n  not eliminated under optimization.\n- Rotate the vector produced by the `vsum2sws` instruction left 4 bytes.\n  The two words within each doubleword of this (rotated) result must then\n  be explicitly swapped to match the semantics of `_mm_sad_epu8`,\n  effectively reversing this rotate.  So, this rotate (and a susequent\n  swap) are unnecessary, but not currently removed under optimization.\n\nUsing `__builtin_altivec_vsum2sws` retains both rotates, so is not an\noption for removing the rotates.\n\nFor little-endian, use the `vsum2sws` instruction directly, and\neliminate the explicit rotate (swap).\n\n2021-11-19  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/emmintrin.h (_mm_sad_epu8): Use vec_absd when\n\t_ARCH_PWR9, optimize vec_sum2s when LE.", "tree": {"sha": "b1f730004ecc8962aff5df9b37f6d620898ed60f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f730004ecc8962aff5df9b37f6d620898ed60f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6c6f64ecff376902e7e1ef295f2d8518407ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c6f64ecff376902e7e1ef295f2d8518407ab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6c6f64ecff376902e7e1ef295f2d8518407ab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6c6f64ecff376902e7e1ef295f2d8518407ab5/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b903e0f3adef830c4e2eef79040d213088e7332f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b903e0f3adef830c4e2eef79040d213088e7332f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b903e0f3adef830c4e2eef79040d213088e7332f"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "4125b12fa092508acfe807b7d14d11aeef745a75", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6c6f64ecff376902e7e1ef295f2d8518407ab5/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6c6f64ecff376902e7e1ef295f2d8518407ab5/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=fc6c6f64ecff376902e7e1ef295f2d8518407ab5", "patch": "@@ -2189,27 +2189,37 @@ extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __arti\n _mm_sad_epu8 (__m128i __A, __m128i __B)\n {\n   __v16qu a, b;\n-  __v16qu vmin, vmax, vabsdiff;\n+  __v16qu vabsdiff;\n   __v4si vsum;\n   const __v4su zero = { 0, 0, 0, 0 };\n   __v4si result;\n \n   a = (__v16qu) __A;\n   b = (__v16qu) __B;\n-  vmin = vec_min (a, b);\n-  vmax = vec_max (a, b);\n+#ifndef _ARCH_PWR9\n+  __v16qu vmin = vec_min (a, b);\n+  __v16qu vmax = vec_max (a, b);\n   vabsdiff = vec_sub (vmax, vmin);\n+#else\n+  vabsdiff = vec_absd (a, b);\n+#endif\n   /* Sum four groups of bytes into integers.  */\n   vsum = (__vector signed int) vec_sum4s (vabsdiff, zero);\n+#ifdef __LITTLE_ENDIAN__\n+  /* Sum across four integers with two integer results.  */\n+  asm (\"vsum2sws %0,%1,%2\" : \"=v\" (result) : \"v\" (vsum), \"v\" (zero));\n+  /* Note: vec_sum2s could be used here, but on little-endian, vector\n+     shifts are added that are not needed for this use-case.\n+     A vector shift to correctly position the 32-bit integer results\n+     (currently at [0] and [2]) to [1] and [3] would then need to be\n+     swapped back again since the desired results are two 64-bit\n+     integers ([1]|[0] and [3]|[2]).  Thus, no shift is performed.  */\n+#else\n   /* Sum across four integers with two integer results.  */\n   result = vec_sum2s (vsum, (__vector signed int) zero);\n   /* Rotate the sums into the correct position.  */\n-#ifdef __LITTLE_ENDIAN__\n-  result = vec_sld (result, result, 4);\n-#else\n   result = vec_sld (result, result, 6);\n #endif\n-  /* Rotate the sums into the correct position.  */\n   return (__m128i) result;\n }\n "}]}