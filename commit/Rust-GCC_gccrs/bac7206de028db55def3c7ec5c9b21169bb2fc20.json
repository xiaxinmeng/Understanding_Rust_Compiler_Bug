{"sha": "bac7206de028db55def3c7ec5c9b21169bb2fc20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjNzIwNmRlMDI4ZGI1NWRlZjNjN2VjNWM5YjIxMTY5YmIyZmMyMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-09-16T12:25:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-09-16T12:25:44Z"}, "message": "[multiple changes]\n\n2009-09-16  Vincent Celier  <celier@adacore.com>\n\n\t* gprep.adb (Yes_No): New global constant\n\tUnix_Line_Terminators: New global Boolean variable\n\t(Process_One_File): Create the out file with a \"Text_Translation=\" form\n\tthat depends on the use of option -T.\n\t(Scan_Command_Line): Add option -T\n\t(Usage): Add line for option -T\n\n2009-09-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.ads, exp_disp.adb (Is_Predefined_Internal_Operation): New\n\tpredicate that describes a proper subset of\n\tIs_Predefined_Dispatching_Operation and excludes stream operations,\n\twhich can be overridden by the user.\n\t* sem_ch6.adb (Create_Extra_Formals): use\n\tIs_Predefined_Internal_Operation, so that stream operations get extra\n\tformals.\n\t* exp_ch6.adb (Prevent double generation of extra actuals in calls to\n\t'Input, which may be expanded twice, first as a function call and then\n\tas a dispatching call.\n\nFrom-SVN: r151748", "tree": {"sha": "8b23d75781efef9f8cfad1896c1183b94134f9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b23d75781efef9f8cfad1896c1183b94134f9a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bac7206de028db55def3c7ec5c9b21169bb2fc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac7206de028db55def3c7ec5c9b21169bb2fc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac7206de028db55def3c7ec5c9b21169bb2fc20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac7206de028db55def3c7ec5c9b21169bb2fc20/comments", "author": null, "committer": null, "parents": [{"sha": "f5bb1134c9e0974a05ed7533c82efa3861cff27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5bb1134c9e0974a05ed7533c82efa3861cff27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5bb1134c9e0974a05ed7533c82efa3861cff27c"}], "stats": {"total": 124, "additions": 113, "deletions": 11}, "files": [{"sha": "158d9094315d0a1fc7e6780e6834e2c8633eeefe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -1,3 +1,25 @@\n+2009-09-16  Vincent Celier  <celier@adacore.com>\n+\n+\t* gprep.adb (Yes_No): New global constant\n+\tUnix_Line_Terminators: New global Boolean variable\n+\t(Process_One_File): Create the out file with a \"Text_Translation=\" form\n+\tthat depends on the use of option -T.\n+\t(Scan_Command_Line): Add option -T\n+\t(Usage): Add line for option -T\n+\n+2009-09-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Is_Predefined_Internal_Operation): New\n+\tpredicate that describes a proper subset of\n+\tIs_Predefined_Dispatching_Operation and excludes stream operations,\n+\twhich can be overridden by the user.\n+\t* sem_ch6.adb (Create_Extra_Formals): use\n+\tIs_Predefined_Internal_Operation, so that stream operations get extra\n+\tformals.\n+\t* exp_ch6.adb (Prevent double generation of extra actuals in calls to\n+\t'Input, which may be expanded twice, first as a function call and then\n+\tas a dispatching call.\n+\n 2009-09-16  Thomas Quinot  <quinot@adacore.com>\n \n \t* s-oscons-tmplt.c (Target_OS, Target_Name): New constants."}, {"sha": "8827870432d5fc6bd3906ebeed4f189832254d2b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -2282,14 +2282,31 @@ package body Exp_Ch6 is\n                   when N_Attribute_Reference =>\n                      case Get_Attribute_Id (Attribute_Name (Prev_Orig)) is\n \n-                        --  For X'Access, pass on the level of the prefix X\n+                        --  For X'Access, pass on the level of the prefix X.\n+                        --  If the call is a rewritten attribute reference to\n+                        --  'Input and the prefix is a tagged type, prevent\n+                        --  double expansion (once as a function call and once\n+                        --  as a dispatching call)\n \n                         when Attribute_Access =>\n-                           Add_Extra_Actual\n-                             (Make_Integer_Literal (Loc,\n-                                Intval =>\n-                                  Object_Access_Level (Prefix (Prev_Orig))),\n-                              Extra_Accessibility (Formal));\n+                           declare\n+                              Onode : constant Node_Id :=\n+                                        Original_Node (Parent (N));\n+                           begin\n+                              if Nkind (Onode) = N_Attribute_Reference\n+                                and then Attribute_Name (Onode) = Name_Input\n+                                and then Is_Tagged_Type (Etype (Subp))\n+                              then\n+                                 null;\n+                              else\n+                                 Add_Extra_Actual\n+                                   (Make_Integer_Literal (Loc,\n+                                      Intval =>\n+                                        Object_Access_Level\n+                                          (Prefix (Prev_Orig))),\n+                                    Extra_Accessibility (Formal));\n+                              end if;\n+                           end;\n \n                         --  Treat the unchecked attributes as library-level\n \n@@ -2328,7 +2345,6 @@ package body Exp_Ch6 is\n                        (Make_Integer_Literal (Loc,\n                           Intval => Type_Access_Level (Etype (Prev))),\n                         Extra_Accessibility (Formal));\n-\n                end case;\n             end if;\n          end if;"}, {"sha": "671b6633e4ac68bd9cd93d0d6a6e7019d46f4f7b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -1740,6 +1740,48 @@ package body Exp_Disp is\n       return False;\n    end Is_Predefined_Dispatching_Operation;\n \n+   ---------------------------------------\n+   -- Is_Predefined_Internal_Operation  --\n+   ---------------------------------------\n+\n+   function Is_Predefined_Internal_Operation\n+     (E : Entity_Id) return Boolean\n+   is\n+      TSS_Name : TSS_Name_Type;\n+\n+   begin\n+      if not Is_Dispatching_Operation (E) then\n+         return False;\n+      end if;\n+\n+      Get_Name_String (Chars (E));\n+\n+      --  Most predefined primitives have internally generated names. Equality\n+      --  must be treated differently; the predefined operation is recognized\n+      --  as a homogeneous binary operator that returns Boolean.\n+\n+      if Name_Len > TSS_Name_Type'Last then\n+         TSS_Name :=\n+           TSS_Name_Type\n+             (Name_Buffer (Name_Len - TSS_Name'Length + 1 .. Name_Len));\n+\n+         if        Chars (E) = Name_uSize\n+           or else Chars (E) = Name_uAlignment\n+           or else\n+             (Chars (E) = Name_Op_Eq\n+                and then Etype (First_Entity (E)) = Etype (Last_Entity (E)))\n+           or else Chars (E) = Name_uAssign\n+           or else TSS_Name  = TSS_Deep_Adjust\n+           or else TSS_Name  = TSS_Deep_Finalize\n+           or else Is_Predefined_Interface_Primitive (E)\n+         then\n+            return True;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Is_Predefined_Internal_Operation;\n+\n    -------------------------------------\n    -- Is_Predefined_Dispatching_Alias --\n    -------------------------------------"}, {"sha": "4aea2ca1e6519eefebb8f36816e886d900aa63b1", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -218,6 +218,11 @@ package Exp_Disp is\n    function Is_Predefined_Dispatching_Operation (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-251): Determines if E is a predefined primitive operation\n \n+   function Is_Predefined_Internal_Operation (E : Entity_Id) return Boolean;\n+   --  Similar to the previous one, but excludes stream operations, because\n+   --  these may be overridden, and need extra formals, like user-defined\n+   --  operations.\n+\n    function Is_Predefined_Interface_Primitive (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-345): Returns True if E is one of the predefined primitives\n    --  required to implement interfaces."}, {"sha": "b5e6b063cac445fc148db02455c7f5040356a3cc", "filename": "gcc/ada/gprep.adb", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fgprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fgprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprep.adb?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,6 +55,14 @@ package body GPrep is\n    -- Argument Line Data --\n    ------------------------\n \n+   Unix_Line_Terminators : Boolean := False;\n+   --  Set to True with option -T\n+\n+   type String_Array is array (Boolean) of String_Access;\n+   Yes_No : constant String_Array :=\n+     (False => new String'(\"YES\"),\n+      True  => new String'(\"NO\"));\n+\n    Infile_Name  : Name_Id := No_Name;\n    Outfile_Name : Name_Id := No_Name;\n    Deffile_Name : Name_Id := No_Name;\n@@ -484,7 +492,12 @@ package body GPrep is\n          --  Create the output file (fails if this does not work)\n \n          begin\n-            Create (Text_Outfile, Out_File, Get_Name_String (Outfile_Name));\n+            Create\n+              (File => Text_Outfile,\n+               Mode => Out_File,\n+               Name => Get_Name_String (Outfile_Name),\n+               Form => \"Text_Translation=\" &\n+                       Yes_No (Unix_Line_Terminators).all);\n \n          exception\n             when others =>\n@@ -722,7 +735,7 @@ package body GPrep is\n \n       loop\n          begin\n-            Switch := GNAT.Command_Line.Getopt (\"D: b c C r s u v\");\n+            Switch := GNAT.Command_Line.Getopt (\"D: b c C r s T u v\");\n \n             case Switch is\n \n@@ -748,6 +761,9 @@ package body GPrep is\n                when 's' =>\n                   Opt.List_Preprocessing_Symbols := True;\n \n+               when 'T' =>\n+                  Unix_Line_Terminators := True;\n+\n                when 'u' =>\n                   Opt.Undefined_Symbols_Are_False := True;\n \n@@ -813,6 +829,7 @@ package body GPrep is\n       Write_Line (\"   -D  Associate symbol with value\");\n       Write_Line (\"   -r  Generate Source_Reference pragma\");\n       Write_Line (\"   -s  Print a sorted list of symbol names and values\");\n+      Write_Line (\"   -T  Use LF as line terminators\");\n       Write_Line (\"   -u  Treat undefined symbols as FALSE\");\n       Write_Line (\"   -v  Verbose mode\");\n       Write_Eol;"}, {"sha": "94ed69e2598016cf7420c356f912cb140a6edc6c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac7206de028db55def3c7ec5c9b21169bb2fc20/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bac7206de028db55def3c7ec5c9b21169bb2fc20", "patch": "@@ -5465,7 +5465,7 @@ package body Sem_Ch6 is\n       --  generated stream attributes do get passed through because extra\n       --  build-in-place formals are needed in some cases (limited 'Input).\n \n-      if Is_Predefined_Dispatching_Operation (E) then\n+      if Is_Predefined_Internal_Operation (E) then\n          goto Test_For_BIP_Extras;\n       end if;\n "}]}