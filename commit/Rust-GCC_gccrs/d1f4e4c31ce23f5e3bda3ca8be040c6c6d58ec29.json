{"sha": "d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmNGU0YzMxY2UyM2Y1ZTNiZGEzY2E4YmUwNDBjNmM2ZDU4ZWMyOQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-05T21:42:21Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-05T21:42:21Z"}, "message": "invoke.texi: Fix incorrect uses of @code, @option, @samp, etc markup throughout the file.\n\n2015-01-05  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Fix incorrect uses of @code, @option, @samp,\n\tetc markup throughout the file.\n\nFrom-SVN: r219199", "tree": {"sha": "7030d0a7100acca10ca2ed14b51b418941c6599d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7030d0a7100acca10ca2ed14b51b418941c6599d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d5782429515e4abaa95a5e5be87a8998b3d9797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5782429515e4abaa95a5e5be87a8998b3d9797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5782429515e4abaa95a5e5be87a8998b3d9797"}], "stats": {"total": 378, "additions": 193, "deletions": 185}, "files": [{"sha": "cdf71081426bb800e5ac9d83f2168ef71e630ef0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "patch": "@@ -1,3 +1,8 @@\n+2015-01-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Fix incorrect uses of @code, @option, @samp,\n+\tetc markup throughout the file.\n+\n 2015-01-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tEnable experimental TSAN support for Ada."}, {"sha": "21784aa2d8fc7c338e03f5eb120792972deefe06", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 188, "deletions": 185, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d1f4e4c31ce23f5e3bda3ca8be040c6c6d58ec29", "patch": "@@ -2032,7 +2032,7 @@ basic integer types such as @code{int} are signed types.\n This section describes the command-line options that are only meaningful\n for C++ programs.  You can also use most of the GNU compiler options\n regardless of what language your program is in.  For example, you\n-might compile a file @code{firstClass.C} like this:\n+might compile a file @file{firstClass.C} like this:\n \n @smallexample\n g++ -g -frepo -O -c firstClass.C\n@@ -2318,7 +2318,7 @@ void operator delete[] (void *, std::size_t) noexcept;\n as introduced in C++14.  This is useful for user-defined replacement\n deallocation functions that, for example, use the size of the object\n to make deallocation faster.  Enabled by default under\n-@samp{-std=c++14} and above.  The flag @option{-Wsized-deallocation}\n+@option{-std=c++14} and above.  The flag @option{-Wsized-deallocation}\n warns about places that might want to add a definition.\n \n @item -fstats\n@@ -2628,7 +2628,8 @@ by @option{-Wall}.\n Warn when a string or character literal is followed by a ud-suffix which does\n not begin with an underscore.  As a conforming extension, GCC treats such\n suffixes as separate preprocessing tokens in order to maintain backwards\n-compatibility with code that uses formatting macros from @code{<inttypes.h>}.\n+compatibility with code that uses formatting macros from\n+the standard header file @file{inttypes.h}.\n For example:\n \n @smallexample\n@@ -2847,7 +2848,7 @@ Supported by GCC}, for references.)\n This section describes the command-line options that are only meaningful\n for Objective-C and Objective-C++ programs.  You can also use most of\n the language-independent GNU compiler options.\n-For example, you might compile a file @code{some_class.m} like this:\n+For example, you might compile a file @file{some_class.m} like this:\n \n @smallexample\n gcc -g -fgnu-runtime -O -c some_class.m\n@@ -4017,7 +4018,7 @@ either specify @option{-Wextra -Wunused} (note that @option{-Wall} implies\n @opindex Wno-uninitialized\n Warn if an automatic variable is used without first being initialized\n or if a variable may be clobbered by a @code{setjmp} call. In C++,\n-warn if a non-static reference or non-static @samp{const} member\n+warn if a non-static reference or non-static @code{const} member\n appears in a class without constructors.\n \n If you want to warn about code that uses the uninitialized value of the\n@@ -4416,7 +4417,8 @@ The unary plus operator.\n The @samp{U} integer constant suffix, or the @samp{F} or @samp{L} floating-point\n constant suffixes.  (Traditional C does support the @samp{L} suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n-headers of most modern systems, e.g.@: the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n+headers of most modern systems, e.g.@: the @samp{_MIN}/@samp{_MAX} macros in \n+@file{limits.h}.\n Use of these macros in user code might normally lead to spurious\n warnings, however GCC's integrated preprocessor has enough context to\n avoid warning in these cases.\n@@ -5506,8 +5508,8 @@ Allow using extensions of later DWARF standard version than selected with\n Produce compressed debug sections in DWARF format, if that is supported.\n If @var{type} is not given, the default type depends on the capabilities\n of the assembler and linker used.  @var{type} may be one of\n-@option{none} (don't compress debug sections), @option{zlib} (use zlib\n-compression in ELF gABI format), or @option{zlib-gnu} (use zlib\n+@samp{none} (don't compress debug sections), @samp{zlib} (use zlib\n+compression in ELF gABI format), or @samp{zlib-gnu} (use zlib\n compression in traditional GNU format).  If the linker doesn't support\n writing compressed debug sections, the option is rejected.  Otherwise,\n if the assembler does not support them, @option{-gz} is silently ignored\n@@ -5782,7 +5784,7 @@ of the final representation and the second compilation, preventing even\n @env{GCC_COMPARE_DEBUG} from taking effect.\n \n To verify full coverage during @option{-fcompare-debug} testing, set\n-@env{GCC_COMPARE_DEBUG} to say @samp{-fcompare-debug-not-overridden},\n+@env{GCC_COMPARE_DEBUG} to say @option{-fcompare-debug-not-overridden},\n which GCC rejects as an invalid option in any actual compilation\n (rather than preprocessing, assembly or linking).  To get just a\n warning, setting @env{GCC_COMPARE_DEBUG} to @samp{-w%n-fcompare-debug\n@@ -7736,7 +7738,7 @@ Enabled by default at @option{-O} and higher.\n Attempt to transform conditional jumps into branch-less equivalents.  This\n includes use of conditional moves, min, max, set flags and abs instructions, and\n some tricks doable by standard arithmetics.  The use of conditional execution\n-on chips where it is available is controlled by @code{if-conversion2}.\n+on chips where it is available is controlled by @option{-fif-conversion2}.\n \n Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n@@ -8633,23 +8635,23 @@ Perform basic block vectorization on trees. This flag is enabled by default at\n @item -fvect-cost-model=@var{model}\n @opindex fvect-cost-model\n Alter the cost model used for vectorization.  The @var{model} argument\n-should be one of @code{unlimited}, @code{dynamic} or @code{cheap}.\n-With the @code{unlimited} model the vectorized code-path is assumed\n-to be profitable while with the @code{dynamic} model a runtime check\n+should be one of @samp{unlimited}, @samp{dynamic} or @samp{cheap}.\n+With the @samp{unlimited} model the vectorized code-path is assumed\n+to be profitable while with the @samp{dynamic} model a runtime check\n guards the vectorized code-path to enable it only for iteration\n counts that will likely execute faster than when executing the original\n-scalar loop.  The @code{cheap} model disables vectorization of\n+scalar loop.  The @samp{cheap} model disables vectorization of\n loops where doing so would be cost prohibitive for example due to\n required runtime checks for data dependence or alignment but otherwise\n-is equal to the @code{dynamic} model.\n+is equal to the @samp{dynamic} model.\n The default cost model depends on other optimization flags and is\n-either @code{dynamic} or @code{cheap}.\n+either @samp{dynamic} or @samp{cheap}.\n \n @item -fsimd-cost-model=@var{model}\n @opindex fsimd-cost-model\n Alter the cost model used for vectorization of loops marked with the OpenMP\n or Cilk Plus simd directive.  The @var{model} argument should be one of\n-@code{unlimited}, @code{dynamic}, @code{cheap}.  All values of @var{model}\n+@samp{unlimited}, @samp{dynamic}, @samp{cheap}.  All values of @var{model}\n have the same meaning as described in @option{-fvect-cost-model} and by\n default a cost model defined with @option{-fvect-cost-model} is used.\n \n@@ -8986,7 +8988,7 @@ compiled.  All public functions and variables with the exception of @code{main}\n and those merged by attribute @code{externally_visible} become static functions\n and in effect are optimized more aggressively by interprocedural optimizers.\n \n-This option should not be used in combination with @code{-flto}.\n+This option should not be used in combination with @option{-flto}.\n Instead relying on a linker plugin should provide safer and more precise\n information.\n \n@@ -9141,7 +9143,8 @@ If object files containing GIMPLE bytecode are stored in a library archive, say\n @file{libfoo.a}, it is possible to extract and use them in an LTO link if you\n are using a linker with plugin support.  To create static libraries suitable\n for LTO, use @command{gcc-ar} and @command{gcc-ranlib} instead of @command{ar}\n-and @code{ranlib}; to show the symbols of object files with GIMPLE bytecode, use\n+and @command{ranlib}; \n+to show the symbols of object files with GIMPLE bytecode, use\n @command{gcc-nm}.  Those commands require that @command{ar}, @command{ranlib}\n and @command{nm} have been compiled with plugin support.  At link time, use the the\n flag @option{-fuse-linker-plugin} to ensure that the library participates in\n@@ -9160,7 +9163,7 @@ enable the linker plugin, then the objects inside @file{libfoo.a}\n are extracted and linked as usual, but they do not participate\n in the LTO optimization process.  In order to make a static library suitable\n for both LTO optimization and usual linkage, compile its object files with\n-@option{-flto} @code{-ffat-lto-objects}.\n+@option{-flto} @option{-ffat-lto-objects}.\n \n Link-time optimizations do not require the presence of the whole program to\n operate.  If the program does not require any symbols to be exported, it is\n@@ -9197,16 +9200,16 @@ GNU make.\n @item -flto-partition=@var{alg}\n @opindex flto-partition\n Specify the partitioning algorithm used by the link-time optimizer.\n-The value is either @code{1to1} to specify a partitioning mirroring\n-the original source files or @code{balanced} to specify partitioning\n-into equally sized chunks (whenever possible) or @code{max} to create\n-new partition for every symbol where possible.  Specifying @code{none}\n+The value is either @samp{1to1} to specify a partitioning mirroring\n+the original source files or @samp{balanced} to specify partitioning\n+into equally sized chunks (whenever possible) or @samp{max} to create\n+new partition for every symbol where possible.  Specifying @samp{none}\n as an algorithm disables partitioning and streaming completely. \n-The default value is @code{balanced}. While @code{1to1} can be used\n-as an workaround for various code ordering issues, the @code{max}\n+The default value is @samp{balanced}. While @samp{1to1} can be used\n+as an workaround for various code ordering issues, the @samp{max}\n partitioning is intended for internal testing only.\n-The value @code{one} specifies that exactly one partition should be\n-used while the value @code{none} bypasses partitioning and executes\n+The value @samp{one} specifies that exactly one partition should be\n+used while the value @samp{none} bypasses partitioning and executes\n the link-time optimization step directly from the WPA phase.\n \n @item -flto-odr-type-merging\n@@ -9249,7 +9252,7 @@ of library archives. This improves the quality of optimization by exposing\n more code to the link-time optimizer.  This information specifies what\n symbols can be accessed externally (by non-LTO object or during dynamic\n linking).  Resulting code quality improvements on binaries (and shared\n-libraries that use hidden visibility) are similar to @code{-fwhole-program}.\n+libraries that use hidden visibility) are similar to @option{-fwhole-program}.\n See @option{-flto} for a description of the effect of this flag and how to\n use it.\n \n@@ -9755,7 +9758,7 @@ the future.\n Only use these options when there are significant benefits from doing\n so.  When you specify these options, the assembler and linker\n create larger object and executable files and are also slower.\n-You cannot use @code{gprof} on all systems if you\n+You cannot use @command{gprof} on all systems if you\n specify this option, and you may have problems with debugging if\n you specify both this option and @option{-g}.\n \n@@ -10883,8 +10886,8 @@ or @option{-nodefaultlibs} is used.\n @opindex nodefaultlibs\n Do not use the standard system libraries when linking.\n Only the libraries you specify are passed to the linker, and options\n-specifying linkage of the system libraries, such as @code{-static-libgcc}\n-or @code{-shared-libgcc}, are ignored.  \n+specifying linkage of the system libraries, such as @option{-static-libgcc}\n+or @option{-shared-libgcc}, are ignored.  \n The standard startup files are used normally, unless @option{-nostartfiles}\n is used.  \n \n@@ -10899,7 +10902,7 @@ mechanism when this option is specified.\n Do not use the standard system startup files or libraries when linking.\n No startup files and only the libraries you specify are passed to\n the linker, and options specifying linkage of the system libraries, such as\n-@code{-static-libgcc} or @code{-shared-libgcc}, are ignored.\n+@option{-static-libgcc} or @option{-shared-libgcc}, are ignored.\n \n The compiler may generate calls to @code{memcmp}, @code{memset},\n @code{memcpy} and @code{memmove}.\n@@ -11509,7 +11512,7 @@ following, for example, @samp{.o}.\n \n @item %p\n Substitutes the standard macro predefinitions for the\n-current target machine.  Use this when running @code{cpp}.\n+current target machine.  Use this when running @command{cpp}.\n \n @item %P\n Like @samp{%p}, but puts @samp{__} before and after the name of each\n@@ -11599,11 +11602,11 @@ to be passed to the C preprocessor.\n \n @item %1\n Process the @code{cc1} spec.  This is used to construct the options to be\n-passed to the actual C compiler (@samp{cc1}).\n+passed to the actual C compiler (@command{cc1}).\n \n @item %2\n Process the @code{cc1plus} spec.  This is used to construct the options to be\n-passed to the actual C++ compiler (@samp{cc1plus}).\n+passed to the actual C++ compiler (@command{cc1plus}).\n \n @item %*\n Substitute the variable part of a matched option.  See below.\n@@ -11759,7 +11762,7 @@ string.  For example, a spec string like this:\n @end smallexample\n \n @noindent\n-when matching an option like @code{-mcu=newchip} produces:\n+when matching an option like @option{-mcu=newchip} produces:\n \n @smallexample\n --script=newchip/memory.ld\n@@ -12265,7 +12268,7 @@ is being compiled:\n @item -mbarrel-shifter\n @opindex mbarrel-shifter\n Generate instructions supported by barrel shifter.  This is the default\n-unless @samp{-mcpu=ARC601} is in effect.\n+unless @option{-mcpu=ARC601} is in effect.\n \n @item -mcpu=@var{cpu}\n @opindex mcpu\n@@ -12288,7 +12291,7 @@ Compile for ARC601.  Alias: @option{-mARC601}.\n @opindex mA7\n @opindex mARC700\n Compile for ARC700.  Aliases: @option{-mA7}, @option{-mARC700}.\n-This is the default when configured with @samp{--with-cpu=arc700}@.\n+This is the default when configured with @option{--with-cpu=arc700}@.\n @end table\n \n @item -mdpfp\n@@ -12311,7 +12314,7 @@ Disable LR and SR instructions from using FPX extension aux registers.\n @opindex mea\n Generate Extended arithmetic instructions.  Currently only\n @code{divaw}, @code{adds}, @code{subs}, and @code{sat16} are\n-supported.  This is always enabled for @samp{-mcpu=ARC700}.\n+supported.  This is always enabled for @option{-mcpu=ARC700}.\n \n @item -mno-mpy\n @opindex mno-mpy\n@@ -12323,11 +12326,11 @@ Generate 32x16 bit multiply and mac instructions.\n \n @item -mmul64\n @opindex mmul64\n-Generate mul64 and mulu64 instructions.  Only valid for @samp{-mcpu=ARC600}.\n+Generate mul64 and mulu64 instructions.  Only valid for @option{-mcpu=ARC600}.\n \n @item -mnorm\n @opindex mnorm\n-Generate norm instruction.  This is the default if @samp{-mcpu=ARC700}\n+Generate norm instruction.  This is the default if @option{-mcpu=ARC700}\n is in effect.\n \n @item -mspfp\n@@ -12345,7 +12348,7 @@ implementation.\n @item -msimd\n @opindex msimd\n Enable generation of ARC SIMD instructions via target-specific\n-builtins.  Only valid for @samp{-mcpu=ARC700}.\n+builtins.  Only valid for @option{-mcpu=ARC700}.\n \n @item -msoft-float\n @opindex msoft-float\n@@ -12570,7 +12573,7 @@ the case.\n @opindex mlra\n Enable Local Register Allocation.  This is still experimental for ARC,\n so by default the compiler uses standard reload\n-(i.e. @samp{-mno-lra}).\n+(i.e. @option{-mno-lra}).\n \n @item -mlra-priority-none\n @opindex mlra-priority-none\n@@ -12711,39 +12714,39 @@ building the tool chain, for which little-endian is the default.\n \n @item -mbarrel_shifter\n @opindex mbarrel_shifter\n-Replaced by @samp{-mbarrel-shifter}\n+Replaced by @option{-mbarrel-shifter}.\n \n @item -mdpfp_compact\n @opindex mdpfp_compact\n-Replaced by @samp{-mdpfp-compact}\n+Replaced by @option{-mdpfp-compact}.\n \n @item -mdpfp_fast\n @opindex mdpfp_fast\n-Replaced by @samp{-mdpfp-fast}\n+Replaced by @option{-mdpfp-fast}.\n \n @item -mdsp_packa\n @opindex mdsp_packa\n-Replaced by @samp{-mdsp-packa}\n+Replaced by @option{-mdsp-packa}.\n \n @item -mEA\n @opindex mEA\n-Replaced by @samp{-mea}\n+Replaced by @option{-mea}.\n \n @item -mmac_24\n @opindex mmac_24\n-Replaced by @samp{-mmac-24}\n+Replaced by @option{-mmac-24}.\n \n @item -mmac_d16\n @opindex mmac_d16\n-Replaced by @samp{-mmac-d16}\n+Replaced by @option{-mmac-d16}.\n \n @item -mspfp_compact\n @opindex mspfp_compact\n-Replaced by @samp{-mspfp-compact}\n+Replaced by @option{-mspfp-compact}.\n \n @item -mspfp_fast\n @opindex mspfp_fast\n-Replaced by @samp{-mspfp-fast}\n+Replaced by @option{-mspfp-fast}.\n \n @item -mtune=@var{cpu}\n @opindex mtune\n@@ -12753,7 +12756,7 @@ Values @samp{arc600}, @samp{arc601}, @samp{arc700} and\n \n @item -multcost=@var{num}\n @opindex multcost\n-Replaced by @samp{-mmultcost}.\n+Replaced by @option{-mmultcost}.\n \n @end table\n \n@@ -13121,11 +13124,11 @@ by default.\n @item -mtp=@var{name}\n @opindex mtp\n Specify the access model for the thread local storage pointer.  The valid\n-models are @option{soft}, which generates calls to @code{__aeabi_read_tp},\n-@option{cp15}, which fetches the thread pointer from @code{cp15} directly\n-(supported in the arm6k architecture), and @option{auto}, which uses the\n+models are @samp{soft}, which generates calls to @code{__aeabi_read_tp},\n+@samp{cp15}, which fetches the thread pointer from @code{cp15} directly\n+(supported in the arm6k architecture), and @samp{auto}, which uses the\n best available method for the selected processor.  The default setting is\n-@option{auto}.\n+@samp{auto}.\n \n @item -mtls-dialect=@var{dialect}\n @opindex mtls-dialect\n@@ -13209,7 +13212,7 @@ These options are defined for AVR implementations:\n @opindex mmcu\n Specify Atmel AVR instruction set architectures (ISA) or MCU type.\n \n-The default for this option is@tie{}@code{avr2}.\n+The default for this option is@tie{}@samp{avr2}.\n \n GCC supports the following AVR devices and ISAs:\n \n@@ -13259,7 +13262,7 @@ Code size is smaller.\n @opindex mrelax\n Try to replace @code{CALL} resp.@: @code{JMP} instruction by the shorter\n @code{RCALL} resp.@: @code{RJMP} instruction if applicable.\n-Setting @code{-mrelax} just adds the @code{--relax} option to the\n+Setting @option{-mrelax} just adds the @option{--relax} option to the\n linker command line when the linker is called.\n \n Jump relaxing is performed by the linker because jump offsets are not\n@@ -13279,7 +13282,7 @@ In general, you don't need to set this option by hand.\n This option is used internally by the compiler to select and\n build multilibs for architectures @code{avr2} and @code{avr25}.\n These architectures mix devices with and without @code{SPH}.\n-For any setting other than @code{-mmcu=avr2} or @code{-mmcu=avr25}\n+For any setting other than @option{-mmcu=avr2} or @option{-mmcu=avr25}\n the compiler driver adds or removes this option from the compiler\n proper's command line, because the compiler then knows if the device\n or architecture has an 8-bit stack pointer and thus no @code{SPH}\n@@ -13354,7 +13357,7 @@ The stub contains a direct jump to the desired address.\n @item\n Linker relaxation must be turned on so that the linker generates\n the stubs correctly in all situations. See the compiler option\n-@code{-mrelax} and the linker option @code{--relax}.\n+@option{-mrelax} and the linker option @option{--relax}.\n There are corner cases where the linker is supposed to generate stubs\n but aborts without relaxation and without a helpful error message.\n \n@@ -13446,7 +13449,7 @@ int main (void)\n @}\n @end example\n \n-and the application be linked with @code{-Wl,--defsym,func_4=0x4}.\n+and the application be linked with @option{-Wl,--defsym,func_4=0x4}.\n Alternatively, @code{func_4} can be defined in the linker script.\n @end itemize\n \n@@ -13497,7 +13500,7 @@ you must reset it to zero after the access.\n GCC defines several built-in macros so that the user code can test\n for the presence or absence of features.  Almost any of the following\n built-in macros are deduced from device capabilities and thus\n-triggered by the @code{-mmcu=} command-line option.\n+triggered by the @option{-mmcu=} command-line option.\n \n For even more AVR-specific built-in macros see\n @ref{AVR Named Address Spaces} and @ref{AVR Built-in Functions}.\n@@ -13506,7 +13509,7 @@ For even more AVR-specific built-in macros see\n \n @item __AVR_ARCH__\n Build-in macro that resolves to a decimal number that identifies the\n-architecture and depends on the @code{-mmcu=@var{mcu}} option.\n+architecture and depends on the @option{-mmcu=@var{mcu}} option.\n Possible values are:\n \n @code{2}, @code{25}, @code{3}, @code{31}, @code{35},\n@@ -13518,31 +13521,31 @@ for @var{mcu}=@code{avr2}, @code{avr25}, @code{avr3},\n @code{avr6}, @code{avrxmega2}, @code{avrxmega4}, @code{avrxmega5},\n @code{avrxmega6}, @code{avrxmega7}, respectively.\n If @var{mcu} specifies a device, this built-in macro is set\n-accordingly. For example, with @code{-mmcu=atmega8} the macro is\n+accordingly. For example, with @option{-mmcu=atmega8} the macro is\n defined to @code{4}.\n \n @item __AVR_@var{Device}__\n-Setting @code{-mmcu=@var{device}} defines this built-in macro which reflects\n-the device's name. For example, @code{-mmcu=atmega8} defines the\n-built-in macro @code{__AVR_ATmega8__}, @code{-mmcu=attiny261a} defines\n+Setting @option{-mmcu=@var{device}} defines this built-in macro which reflects\n+the device's name. For example, @option{-mmcu=atmega8} defines the\n+built-in macro @code{__AVR_ATmega8__}, @option{-mmcu=attiny261a} defines\n @code{__AVR_ATtiny261A__}, etc.\n \n The built-in macros' names follow\n the scheme @code{__AVR_@var{Device}__} where @var{Device} is\n the device name as from the AVR user manual. The difference between\n @var{Device} in the built-in macro and @var{device} in\n-@code{-mmcu=@var{device}} is that the latter is always lowercase.\n+@option{-mmcu=@var{device}} is that the latter is always lowercase.\n \n If @var{device} is not a device but only a core architecture like\n-@code{avr51}, this macro is not defined.\n+@samp{avr51}, this macro is not defined.\n \n @item   __AVR_DEVICE_NAME__\n-Setting @code{-mmcu=@var{device}} defines this built-in macro to\n-the device's name. For example, with @code{-mmcu=atmega8} the macro\n+Setting @option{-mmcu=@var{device}} defines this built-in macro to\n+the device's name. For example, with @option{-mmcu=atmega8} the macro\n is defined to @code{atmega8}.\n \n If @var{device} is not a device but only a core architecture like\n-@code{avr51}, this macro is not defined.\n+@samp{avr51}, this macro is not defined.\n \n @item __AVR_XMEGA__\n The device / architecture belongs to the XMEGA family of devices.\n@@ -13585,15 +13588,15 @@ with up to 128@tie{}KiB of program memory.\n @itemx __AVR_HAVE_16BIT_SP__\n The stack pointer (SP) register is treated as 8-bit respectively\n 16-bit register by the compiler.\n-The definition of these macros is affected by @code{-mtiny-stack}.\n+The definition of these macros is affected by @option{-mtiny-stack}.\n \n @item __AVR_HAVE_SPH__\n @itemx __AVR_SP8__\n The device has the SPH (high part of stack pointer) special function\n register or has an 8-bit stack pointer, respectively.\n-The definition of these macros is affected by @code{-mmcu=} and\n-in the cases of @code{-mmcu=avr2} and @code{-mmcu=avr25} also\n-by @code{-msp8}.\n+The definition of these macros is affected by @option{-mmcu=} and\n+in the cases of @option{-mmcu=avr2} and @option{-mmcu=avr25} also\n+by @option{-msp8}.\n \n @item __AVR_HAVE_RAMPD__\n @itemx __AVR_HAVE_RAMPX__\n@@ -13603,7 +13606,7 @@ The device has the @code{RAMPD}, @code{RAMPX}, @code{RAMPY},\n @code{RAMPZ} special function register, respectively.\n \n @item __NO_INTERRUPTS__\n-This macro reflects the @code{-mno-interrupts} command line option.\n+This macro reflects the @option{-mno-interrupts} command line option.\n \n @item __AVR_ERRATA_SKIP__\n @itemx __AVR_ERRATA_SKIP_JMP_CALL__\n@@ -13626,7 +13629,7 @@ respective I/O@tie{}address.\n \n @item __WITH_AVRLIBC__\n The compiler is configured to be used together with AVR-Libc.\n-See the @code{--with-avrlibc} configure option.\n+See the @option{--with-avrlibc} configure option.\n \n @end table\n \n@@ -14167,7 +14170,7 @@ switch to conform to a non-default data model.\n @opindex ffix-and-continue\n @opindex findirect-data\n Generate code suitable for fast turnaround development, such as to\n-allow GDB to dynamically load @code{.o} files into already-running\n+allow GDB to dynamically load @file{.o} files into already-running\n programs.  @option{-findirect-data} and @option{-ffix-and-continue}\n are provided for backwards compatibility.\n \n@@ -14203,7 +14206,7 @@ an executable when linking, using the Darwin @file{libtool} command.\n \n @item -force_cpusubtype_ALL\n @opindex force_cpusubtype_ALL\n-This causes GCC's output file to have the @var{ALL} subtype, instead of\n+This causes GCC's output file to have the @samp{ALL} subtype, instead of\n one controlled by the @option{-mcpu} or @option{-march} option.\n \n @item -allowable_client  @var{client_name}\n@@ -15274,7 +15277,7 @@ of the C library.  Thus, @emph{extreme} care is needed in using this\n option.\n \n Library code that is intended to operate with more than one UNIX\n-standard must test, set and restore the variable @var{__xpg4_extended_mask}\n+standard must test, set and restore the variable @code{__xpg4_extended_mask}\n as appropriate.  Most GNU software doesn't provide this capability.\n \n @item -nolibdld\n@@ -16220,7 +16223,7 @@ increase in code size.  This switch implies @option{-mno-push-args}.\n Support thread-safe exception handling on MinGW.  Programs that rely\n on thread-safe exception handling must compile and link all code with the\n @option{-mthreads} option.  When compiling, @option{-mthreads} defines\n-@code{-D_MT}; when linking, it links in a special thread helper library\n+@option{-D_MT}; when linking, it links in a special thread helper library\n @option{-lmingwthrd} which cleans up per-thread exception-handling data.\n \n @item -mno-align-stringops\n@@ -16980,7 +16983,7 @@ Specifies that the cache cannot be flushed by using a trap.\n @item -mflush-func=@var{name}\n @opindex mflush-func=@var{name}\n Specifies the name of the operating system function to call to flush\n-the cache.  The default is @emph{_flush_cache}, but a function call\n+the cache.  The default is @samp{_flush_cache}, but a function call\n is only used if a trap is not available.\n \n @item -mno-flush-func\n@@ -17056,8 +17059,8 @@ below, which also classifies the CPUs into families:\n @var{arch} is compatible with @var{cpu}.  Other combinations of\n @option{-mcpu} and @option{-march} are rejected.\n \n-GCC defines the macro @samp{__mcf_cpu_@var{cpu}} when ColdFire target\n-@var{cpu} is selected.  It also defines @samp{__mcf_family_@var{family}},\n+GCC defines the macro @code{__mcf_cpu_@var{cpu}} when ColdFire target\n+@var{cpu} is selected.  It also defines @code{__mcf_family_@var{family}},\n where the value of @var{family} is given by the table above.\n \n @item -mtune=@var{tune}\n@@ -17075,14 +17078,14 @@ to run relatively well on 68020, 68030 and 68040 targets.\n as well.  These two options select the same tuning decisions as\n @option{-m68020-40} and @option{-m68020-60} respectively.\n \n-GCC defines the macros @samp{__mc@var{arch}} and @samp{__mc@var{arch}__}\n+GCC defines the macros @code{__mc@var{arch}} and @code{__mc@var{arch}__}\n when tuning for 680x0 architecture @var{arch}.  It also defines\n-@samp{mc@var{arch}} unless either @option{-ansi} or a non-GNU @option{-std}\n+@code{mc@var{arch}} unless either @option{-ansi} or a non-GNU @option{-std}\n option is used.  If GCC is tuning for a range of architectures,\n as selected by @option{-mtune=68020-40} or @option{-mtune=68020-60},\n it defines the macros for every architecture in the range.\n \n-GCC also defines the macro @samp{__m@var{uarch}__} when tuning for\n+GCC also defines the macro @code{__m@var{uarch}__} when tuning for\n ColdFire microarchitecture @var{uarch}, where @var{uarch} is one\n of the arguments given above.\n \n@@ -17209,7 +17212,7 @@ The option is equivalent to @option{-march=68020} @option{-mtune=68020-60}.\n @opindex m68881\n Generate floating-point instructions.  This is the default for 68020\n and above, and for ColdFire devices that have an FPU@.  It defines the\n-macro @samp{__HAVE_68881__} on M680x0 targets and @samp{__mcffpu__}\n+macro @code{__HAVE_68881__} on M680x0 targets and @code{__mcffpu__}\n on ColdFire targets.\n \n @item -msoft-float\n@@ -17230,7 +17233,7 @@ architectures.  Otherwise, the default is taken from the target CPU\n example, the default is ``off'' for @option{-mcpu=5206} and ``on'' for\n @option{-mcpu=5206e}.\n \n-GCC defines the macro @samp{__mcfhwdiv__} when this option is enabled.\n+GCC defines the macro @code{__mcfhwdiv__} when this option is enabled.\n \n @item -mshort\n @opindex mshort\n@@ -17490,12 +17493,12 @@ test-and-set (@code{tas}).\n @item -mc=@var{name}\n @opindex mc=\n Selects which section constant data is placed in.  @var{name} may\n-be @code{tiny}, @code{near}, or @code{far}.\n+be @samp{tiny}, @samp{near}, or @samp{far}.\n \n @item -mclip\n @opindex mclip\n-Enables the @code{clip} instruction.  Note that @code{-mclip} is not\n-useful unless you also provide @code{-mminmax}.\n+Enables the @code{clip} instruction.  Note that @option{-mclip} is not\n+useful unless you also provide @option{-mminmax}.\n \n @item -mconfig=@var{name}\n @opindex mconfig=\n@@ -17505,13 +17508,13 @@ coprocessors, optional instructions, and peripherals.  The\n @code{MeP-Integrator} tool, not part of GCC, provides these\n configurations through this option; using this option is the same as\n using all the corresponding command-line options.  The default\n-configuration is @code{default}.\n+configuration is @samp{default}.\n \n @item -mcop\n @opindex mcop\n Enables the coprocessor instructions.  By default, this is a 32-bit\n coprocessor.  Note that the coprocessor is normally enabled via the\n-@code{-mconfig=} option.\n+@option{-mconfig=} option.\n \n @item -mcop32\n @opindex mcop32\n@@ -17568,7 +17571,7 @@ Enables the multiplication and multiply-accumulate instructions.\n \n @item -mno-opts\n @opindex mno-opts\n-Disables all the optional instructions enabled by @code{-mall-opts}.\n+Disables all the optional instructions enabled by @option{-mall-opts}.\n \n @item -mrepeat\n @opindex mrepeat\n@@ -17796,17 +17799,17 @@ for @samp{@var{n}f2_1} while @samp{@var{n}x} and @samp{@var{b}fx} are\n accepted as synonyms for @samp{@var{n}f1_1}.\n \n GCC defines two macros based on the value of this option.  The first\n-is @samp{_MIPS_ARCH}, which gives the name of target architecture, as\n-a string.  The second has the form @samp{_MIPS_ARCH_@var{foo}},\n-where @var{foo} is the capitalized value of @samp{_MIPS_ARCH}@.\n-For example, @option{-march=r2000} sets @samp{_MIPS_ARCH}\n-to @samp{\"r2000\"} and defines the macro @samp{_MIPS_ARCH_R2000}.\n+is @code{_MIPS_ARCH}, which gives the name of target architecture, as\n+a string.  The second has the form @code{_MIPS_ARCH_@var{foo}},\n+where @var{foo} is the capitalized value of @code{_MIPS_ARCH}@.\n+For example, @option{-march=r2000} sets @code{_MIPS_ARCH}\n+to @code{\"r2000\"} and defines the macro @code{_MIPS_ARCH_R2000}.\n \n-Note that the @samp{_MIPS_ARCH} macro uses the processor names given\n+Note that the @code{_MIPS_ARCH} macro uses the processor names given\n above.  In other words, it has the full prefix and does not\n abbreviate @samp{000} as @samp{k}.  In the case of @samp{from-abi},\n-the macro names the resolved architecture (either @samp{\"mips1\"} or\n-@samp{\"mips3\"}).  It names the default architecture when no\n+the macro names the resolved architecture (either @code{\"mips1\"} or\n+@code{\"mips3\"}).  It names the default architecture when no\n @option{-march} option is given.\n \n @item -mtune=@var{arch}\n@@ -17822,8 +17825,8 @@ specified by @option{-march}.  By using @option{-march} and\n runs on a family of processors, but optimize the code for one\n particular member of that family.\n \n-@option{-mtune} defines the macros @samp{_MIPS_TUNE} and\n-@samp{_MIPS_TUNE_@var{foo}}, which work in the same way as the\n+@option{-mtune} defines the macros @code{_MIPS_TUNE} and\n+@code{_MIPS_TUNE_@var{foo}}, which work in the same way as the\n @option{-march} ones described above.\n \n @item -mips1\n@@ -18068,7 +18071,7 @@ This option is presently supported only by some bare-metal MIPS\n configurations, where it may select a special set of libraries\n that lack all floating-point support (including, for example, the\n floating-point @code{printf} formats).  \n-If code compiled with @code{-mno-float} accidentally contains\n+If code compiled with @option{-mno-float} accidentally contains\n floating-point operations, it is likely to suffer a link-time\n or run-time failure.\n \n@@ -18088,7 +18091,7 @@ operations.  This is the default.\n @opindex mno-odd-spreg\n Enable the use of odd-numbered single-precision floating-point registers\n for the o32 ABI.  This is the default for processors that are known to\n-support these registers.  When using the o32 FPXX ABI, @code{-mno-odd-spreg}\n+support these registers.  When using the o32 FPXX ABI, @option{-mno-odd-spreg}\n is set by default.\n \n @item -mabs=2008\n@@ -18155,17 +18158,17 @@ configurations; see the installation documentation for details.\n @opindex mno-dsp\n Use (do not use) revision 1 of the MIPS DSP ASE@.\n @xref{MIPS DSP Built-in Functions}.  This option defines the\n-preprocessor macro @samp{__mips_dsp}.  It also defines\n-@samp{__mips_dsp_rev} to 1.\n+preprocessor macro @code{__mips_dsp}.  It also defines\n+@code{__mips_dsp_rev} to 1.\n \n @item -mdspr2\n @itemx -mno-dspr2\n @opindex mdspr2\n @opindex mno-dspr2\n Use (do not use) revision 2 of the MIPS DSP ASE@.\n @xref{MIPS DSP Built-in Functions}.  This option defines the\n-preprocessor macros @samp{__mips_dsp} and @samp{__mips_dspr2}.\n-It also defines @samp{__mips_dsp_rev} to 2.\n+preprocessor macros @code{__mips_dsp} and @code{__mips_dspr2}.\n+It also defines @code{__mips_dsp_rev} to 2.\n \n @item -msmartmips\n @itemx -mno-smartmips\n@@ -18633,7 +18636,7 @@ arguments as the common @code{_flush_func()}, that is, the address of the\n memory range for which the cache is being flushed, the size of the\n memory range, and the number 3 (to flush both caches).  The default\n depends on the target GCC was configured for, but commonly is either\n-@samp{_flush_func} or @samp{__cpu_flush}.\n+@code{_flush_func} or @code{__cpu_flush}.\n \n @item mbranch-cost=@var{num}\n @opindex mbranch-cost\n@@ -18686,8 +18689,8 @@ architectures that support it.  The @code{synci} instructions (if\n enabled) are generated when @code{__builtin___clear_cache()} is\n compiled.\n \n-This option defaults to @code{-mno-synci}, but the default can be\n-overridden by configuring with @code{--with-synci}.\n+This option defaults to @option{-mno-synci}, but the default can be\n+overridden by configuring GCC with @option{--with-synci}.\n \n When compiling code for single processor systems, it is generally safe\n to use @code{synci}.  However, on many multi-core (SMP) systems, it\n@@ -18704,8 +18707,8 @@ range for a direct call.\n \n @option{-mrelax-pic-calls} is the default if GCC was configured to use\n an assembler and a linker that support the @code{.reloc} assembly\n-directive and @code{-mexplicit-relocs} is in effect.  With\n-@code{-mno-explicit-relocs}, this optimization can be performed by the\n+directive and @option{-mexplicit-relocs} is in effect.  With\n+@option{-mno-explicit-relocs}, this optimization can be performed by the\n assembler and the linker alone without help from the compiler.\n \n @item -mmcount-ra-address\n@@ -18881,25 +18884,25 @@ This option makes symbolic debugging impossible.\n @opindex mliw\n Allow the compiler to generate @emph{Long Instruction Word}\n instructions if the target is the @samp{AM33} or later.  This is the\n-default.  This option defines the preprocessor macro @samp{__LIW__}.\n+default.  This option defines the preprocessor macro @code{__LIW__}.\n \n @item -mnoliw\n @opindex mnoliw\n Do not allow the compiler to generate @emph{Long Instruction Word}\n instructions.  This option defines the preprocessor macro\n-@samp{__NO_LIW__}.\n+@code{__NO_LIW__}.\n \n @item -msetlb\n @opindex msetlb\n Allow the compiler to generate the @emph{SETLB} and @emph{Lcc}\n instructions if the target is the @samp{AM33} or later.  This is the\n-default.  This option defines the preprocessor macro @samp{__SETLB__}.\n+default.  This option defines the preprocessor macro @code{__SETLB__}.\n \n @item -mnosetlb\n @opindex mnosetlb\n Do not allow the compiler to generate @emph{SETLB} or @emph{Lcc}\n instructions.  This option defines the preprocessor macro\n-@samp{__NO_SETLB__}.\n+@code{__NO_SETLB__}.\n \n @end table\n \n@@ -18948,13 +18951,13 @@ testsuite and/or aesthetic purposes.\n Select the MCU to target.  This is used to create a C preprocessor\n symbol based upon the MCU name, converted to upper case and pre- and\n post-fixed with @samp{__}.  This in turn is used by the\n-@code{msp430.h} header file to select an MCU-specific supplementary\n+@file{msp430.h} header file to select an MCU-specific supplementary\n header file.\n \n The option also sets the ISA to use.  If the MCU name is one that is\n known to only support the 430 ISA then that is selected, otherwise the\n-430X ISA is selected.  A generic MCU name of @code{msp430} can also be\n-used to select the 430 ISA.  Similarly the generic @code{msp430x} MCU\n+430X ISA is selected.  A generic MCU name of @samp{msp430} can also be\n+used to select the 430 ISA.  Similarly the generic @samp{msp430x} MCU\n name selects the 430X ISA.\n \n In addition an MCU-specific linker script is added to the linker\n@@ -18967,8 +18970,8 @@ This option is also passed on to the assembler.\n \n @item -mcpu=\n @opindex mcpu=\n-Specifies the ISA to use.  Accepted values are @code{msp430},\n-@code{msp430x} and @code{msp430xv2}.  This option is deprecated.  The\n+Specifies the ISA to use.  Accepted values are @samp{msp430},\n+@samp{msp430x} and @samp{msp430xv2}.  This option is deprecated.  The\n @option{-mmcu=} option should be used to select the ISA.\n \n @item -msim\n@@ -18993,19 +18996,19 @@ the final link.\n @item mhwmult=\n @opindex mhwmult=\n Describes the type of hardware multiply supported by the target.\n-Accepted values are @code{none} for no hardware multiply, @code{16bit}\n+Accepted values are @samp{none} for no hardware multiply, @samp{16bit}\n for the original 16-bit-only multiply supported by early MCUs.\n-@code{32bit} for the 16/32-bit multiply supported by later MCUs and\n-@code{f5series} for the 16/32-bit multiply supported by F5-series MCUs.\n-A value of @code{auto} can also be given.  This tells GCC to deduce\n+@samp{32bit} for the 16/32-bit multiply supported by later MCUs and\n+@samp{f5series} for the 16/32-bit multiply supported by F5-series MCUs.\n+A value of @samp{auto} can also be given.  This tells GCC to deduce\n the hardware multiply support based upon the MCU name provided by the\n @option{-mmcu} option.  If no @option{-mmcu} option is specified then\n-@code{32bit} hardware multiply support is assumed.  @code{auto} is the\n+@samp{32bit} hardware multiply support is assumed.  @samp{auto} is the\n default setting.\n \n Hardware multiplies are normally performed by calling a library\n routine.  This saves space in the generated code.  When compiling at\n-@code{-O3} or higher however the hardware multiplier is invoked\n+@option{-O3} or higher however the hardware multiplier is invoked\n inline.  This makes for bigger, but faster code.\n \n The hardware multiply routines disable interrupts whilst running and\n@@ -19206,7 +19209,7 @@ and not emit @code{div} and @code{mulx}.\n @opindex mno-custom-@var{insn}\n Each @option{-mcustom-@var{insn}=@var{N}} option enables use of a\n custom instruction with encoding @var{N} when generating code that uses \n-@var{insn}.  For example, @code{-mcustom-fadds=253} generates custom\n+@var{insn}.  For example, @option{-mcustom-fadds=253} generates custom\n instruction 253 for single-precision floating-point add operations instead\n of the default behavior of using a library call.\n \n@@ -19575,9 +19578,9 @@ simulator.\n @itemx -mmul=rl78\n @opindex mmul\n Specifies the type of hardware multiplication support to be used.  The\n-default is @code{none}, which uses software multiplication functions.\n-The @code{g13} option is for the hardware multiply/divide peripheral\n-only on the RL78/G13 targets.  The @code{rl78} option is for the\n+default is @samp{none}, which uses software multiplication functions.\n+The @samp{g13} option is for the hardware multiply/divide peripheral\n+only on the RL78/G13 targets.  The @samp{rl78} option is for the\n standard hardware multiplication defined in the RL78 software manual.\n \n @item -m64bit-doubles\n@@ -19954,13 +19957,13 @@ This switch enables or disables the generation of floating-point\n operations on the general-purpose registers for architectures that\n support it.\n \n-The argument @var{yes} or @var{single} enables the use of\n+The argument @samp{yes} or @samp{single} enables the use of\n single-precision floating-point operations.\n \n-The argument @var{double} enables the use of single and\n+The argument @samp{double} enables the use of single and\n double-precision floating-point operations.\n \n-The argument @var{no} disables floating-point operations on the\n+The argument @samp{no} disables floating-point operations on the\n general-purpose registers.\n \n This option is currently only available on the MPC854x.\n@@ -20365,9 +20368,9 @@ SVR4 ABI)@.\n @item -mabi=@var{abi-type}\n @opindex mabi\n Extend the current ABI with a particular extension, or remove such extension.\n-Valid values are @var{altivec}, @var{no-altivec}, @var{spe},\n-@var{no-spe}, @var{ibmlongdouble}, @var{ieeelongdouble},\n-@var{elfv1}, @var{elfv2}@.\n+Valid values are @samp{altivec}, @samp{no-altivec}, @samp{spe},\n+@samp{no-spe}, @samp{ibmlongdouble}, @samp{ieeelongdouble},\n+@samp{elfv1}, @samp{elfv2}@.\n \n @item -mabi=spe\n @opindex mabi=spe\n@@ -20410,7 +20413,7 @@ likely to fail in spectacular ways.\n On System V.4 and embedded PowerPC systems assume that all calls to\n variable argument functions are properly prototyped.  Otherwise, the\n compiler must insert an instruction before every non-prototyped call to\n-set or clear bit 6 of the condition code register (@var{CR}) to\n+set or clear bit 6 of the condition code register (@code{CR}) to\n indicate whether floating-point values are passed in the floating-point\n registers in case the function takes variable arguments.  With\n @option{-mprototype}, only calls to prototyped variable argument functions\n@@ -20448,7 +20451,7 @@ compiling for a VxWorks system.\n \n @item -memb\n @opindex memb\n-On embedded PowerPC systems, set the @var{PPC_EMB} bit in the ELF flags\n+On embedded PowerPC systems, set the @code{PPC_EMB} bit in the ELF flags\n header to indicate that @samp{eabi} extended relocations are used.\n \n @item -meabi\n@@ -20637,7 +20640,7 @@ estimate that converges after three steps.\n @item -mveclibabi=@var{type}\n @opindex mveclibabi\n Specifies the ABI type to use for vectorizing intrinsics using an\n-external library.  The only type supported at present is @code{mass},\n+external library.  The only type supported at present is @samp{mass},\n which specifies to use IBM's Mathematical Acceleration Subsystem\n (MASS) libraries for vectorizing intrinsics using external libraries.\n GCC currently emits calls to @code{acosd2}, @code{acosf4},\n@@ -20671,10 +20674,10 @@ the floating-point number is too large to fit in an integer.\n @itemx -mno-pointers-to-nested-functions\n @opindex mpointers-to-nested-functions\n Generate (do not generate) code to load up the static chain register\n-(@var{r11}) when calling through a pointer on AIX and 64-bit Linux\n+(@code{r11}) when calling through a pointer on AIX and 64-bit Linux\n systems where a function pointer points to a 3-word descriptor giving\n-the function address, TOC value to be loaded in register @var{r2}, and\n-static chain value to be loaded in register @var{r11}.  The\n+the function address, TOC value to be loaded in register @code{r2}, and\n+static chain value to be loaded in register @code{r11}.  The\n @option{-mpointers-to-nested-functions} is on by default.  You cannot\n call through pointers to nested functions or pointers\n to functions compiled in other languages that use the static chain if\n@@ -20728,8 +20731,8 @@ works on 32-bit values, which is why the default is\n @opindex fpu\n @opindex nofpu\n Enables (@option{-fpu}) or disables (@option{-nofpu}) the use of RX\n-floating-point hardware.  The default is enabled for the @var{RX600}\n-series and disabled for the @var{RX200} series.\n+floating-point hardware.  The default is enabled for the RX600\n+series and disabled for the RX200 series.\n \n Floating-point instructions are only generated for 32-bit floating-point \n values, however, so the FPU hardware is not used for doubles if the\n@@ -20742,13 +20745,13 @@ This is because the RX FPU instructions are themselves unsafe.\n @item -mcpu=@var{name}\n @opindex mcpu\n Selects the type of RX CPU to be targeted.  Currently three types are\n-supported, the generic @var{RX600} and @var{RX200} series hardware and\n-the specific @var{RX610} CPU.  The default is @var{RX600}.\n+supported, the generic @samp{RX600} and @samp{RX200} series hardware and\n+the specific @samp{RX610} CPU.  The default is @samp{RX600}.\n \n-The only difference between @var{RX600} and @var{RX610} is that the\n-@var{RX610} does not support the @code{MVTIPL} instruction.\n+The only difference between @samp{RX600} and @samp{RX610} is that the\n+@samp{RX610} does not support the @code{MVTIPL} instruction.\n \n-The @var{RX200} series does not have a hardware floating-point unit\n+The @samp{RX200} series does not have a hardware floating-point unit\n and so @option{-nofpu} is enabled by default when this type is\n selected.\n \n@@ -21693,21 +21696,21 @@ mapped to @option{-ffp-contract=off}.\n @opindex mfsca\n @opindex mno-fsca\n Allow or disallow the compiler to emit the @code{fsca} instruction for sine\n-and cosine approximations.  The option @code{-mfsca} must be used in\n-combination with @code{-funsafe-math-optimizations}.  It is enabled by default\n-when generating code for SH4A.  Using @code{-mno-fsca} disables sine and cosine\n-approximations even if @code{-funsafe-math-optimizations} is in effect.\n+and cosine approximations.  The option @option{-mfsca} must be used in\n+combination with @option{-funsafe-math-optimizations}.  It is enabled by default\n+when generating code for SH4A.  Using @option{-mno-fsca} disables sine and cosine\n+approximations even if @option{-funsafe-math-optimizations} is in effect.\n \n @item -mfsrra\n @itemx -mno-fsrra\n @opindex mfsrra\n @opindex mno-fsrra\n Allow or disallow the compiler to emit the @code{fsrra} instruction for\n-reciprocal square root approximations.  The option @code{-mfsrra} must be used\n-in combination with @code{-funsafe-math-optimizations} and\n-@code{-ffinite-math-only}.  It is enabled by default when generating code for\n-SH4A.  Using @code{-mno-fsrra} disables reciprocal square root approximations\n-even if @code{-funsafe-math-optimizations} and @code{-ffinite-math-only} are\n+reciprocal square root approximations.  The option @option{-mfsrra} must be used\n+in combination with @option{-funsafe-math-optimizations} and\n+@option{-ffinite-math-only}.  It is enabled by default when generating code for\n+SH4A.  Using @option{-mno-fsrra} disables reciprocal square root approximations\n+even if @option{-funsafe-math-optimizations} and @option{-ffinite-math-only} are\n in effect.\n \n @item -mpretend-cmove\n@@ -22555,7 +22558,7 @@ When this version of the ABI is enabled the C preprocessor symbol\n @itemx -mno-8byte-align\n @opindex m8byte-align\n @opindex mno-8byte-align\n-Enables support for @code{doubles} and @code{long long} types to be\n+Enables support for @code{double} and @code{long long} types to be\n aligned on 8-byte boundaries.  The default is to restrict the\n alignment of all objects to at most 4-bytes.  When\n @option{-m8byte-align} is in effect the C preprocessor symbol\n@@ -23243,7 +23246,7 @@ routines generate output or allocate memory).\n @opindex finstrument-functions-exclude-file-list\n \n Set the list of functions that are excluded from instrumentation (see\n-the description of @code{-finstrument-functions}).  If the file that\n+the description of @option{-finstrument-functions}).  If the file that\n contains a function definition matches with one of @var{file}, then\n that function is not instrumented.  The match is done on substrings:\n if the @var{file} parameter is a substring of the file name, it is\n@@ -23257,17 +23260,17 @@ For example:\n \n @noindent\n excludes any inline function defined in files whose pathnames\n-contain @code{/bits/stl} or @code{include/sys}.\n+contain @file{/bits/stl} or @file{include/sys}.\n \n-If, for some reason, you want to include letter @code{','} in one of\n-@var{sym}, write @code{'\\,'}. For example,\n-@code{-finstrument-functions-exclude-file-list='\\,\\,tmp'}\n+If, for some reason, you want to include letter @samp{,} in one of\n+@var{sym}, write @samp{\\,}. For example,\n+@option{-finstrument-functions-exclude-file-list='\\,\\,tmp'}\n (note the single quote surrounding the option).\n \n @item -finstrument-functions-exclude-function-list=@var{sym},@var{sym},@dots{}\n @opindex finstrument-functions-exclude-function-list\n \n-This is similar to @code{-finstrument-functions-exclude-file-list},\n+This is similar to @option{-finstrument-functions-exclude-file-list},\n but this option sets the list of function names to be excluded from\n instrumentation.  The function name to be matched is its user-visible\n name, such as @code{vector<int> blah(const vector<int> &)}, not the\n@@ -23289,9 +23292,9 @@ Note that this switch does not actually cause checking to be done; the\n operating system or the language runtime must do that.  The switch causes\n generation of code to ensure that they see the stack being extended.\n \n-You can additionally specify a string parameter: @code{no} means no\n-checking, @code{generic} means force the use of old-style checking,\n-@code{specific} means use the best checking method and is equivalent\n+You can additionally specify a string parameter: @samp{no} means no\n+checking, @samp{generic} means force the use of old-style checking,\n+@samp{specific} means use the best checking method and is equivalent\n to bare @option{-fstack-check}.\n \n Old-style checking is a generic mechanism that requires no specific\n@@ -23313,7 +23316,7 @@ generic implementation, code performance is hampered.\n @end enumerate\n \n Note that old-style stack checking is also the fallback method for\n-@code{specific} if no target support has been added in the compiler.\n+@samp{specific} if no target support has been added in the compiler.\n \n @item -fstack-limit-register=@var{reg}\n @itemx -fstack-limit-symbol=@var{sym}\n@@ -23366,14 +23369,14 @@ Not all targets provide complete support for this switch.\n @item -ftls-model=@var{model}\n @opindex ftls-model\n Alter the thread-local storage model to be used (@pxref{Thread-Local}).\n-The @var{model} argument should be one of @code{global-dynamic},\n-@code{local-dynamic}, @code{initial-exec} or @code{local-exec}.\n+The @var{model} argument should be one of @samp{global-dynamic},\n+@samp{local-dynamic}, @samp{initial-exec} or @samp{local-exec}.\n Note that the choice is subject to optimization: the compiler may use\n a more efficient model for symbols not visible outside of the translation\n unit, or if @option{-fpic} is not given on the command line.\n \n-The default without @option{-fpic} is @code{initial-exec}; with\n-@option{-fpic} the default is @code{global-dynamic}.\n+The default without @option{-fpic} is @samp{initial-exec}; with\n+@option{-fpic} the default is @samp{global-dynamic}.\n \n @item -fvisibility=@var{default|internal|hidden|protected}\n @opindex fvisibility\n@@ -23385,12 +23388,12 @@ code, provide near-perfect API export and prevent symbol clashes.\n It is @strong{strongly} recommended that you use this in any shared objects\n you distribute.\n \n-Despite the nomenclature, @code{default} always means public; i.e.,\n+Despite the nomenclature, @samp{default} always means public; i.e.,\n available to be linked against from outside the shared object.\n-@code{protected} and @code{internal} are pretty useless in real-world\n-usage so the only other commonly used option is @code{hidden}.\n+@samp{protected} and @samp{internal} are pretty useless in real-world\n+usage so the only other commonly used option is @samp{hidden}.\n The default if @option{-fvisibility} isn't specified is\n-@code{default}, i.e., make every\n+@samp{default}, i.e., make every\n symbol public---this causes the same behavior as previous versions of\n GCC@.\n "}]}