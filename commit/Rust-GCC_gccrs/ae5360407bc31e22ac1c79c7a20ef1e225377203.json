{"sha": "ae5360407bc31e22ac1c79c7a20ef1e225377203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1MzYwNDA3YmMzMWUyMmFjMWM3OWM3YTIwZWYxZTIyNTM3NzIwMw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-10-24T00:12:16Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-10-24T00:12:16Z"}, "message": "re PR tree-optimization/14784 ([Tree-ssa] alias analysis deficiency)\n\n\tPR tree-optimization/14784\n\t* tree-flow.h (struct var_ann_d): Add is_heapvar bit.\n\t* tree-ssa-structalias.c (get_constraint_for,\n\tintra_create_variable_infos): Set is_heapvar.\n\t* tree-ssa-operands.c (access_can_touch_variable): Do not handle\n\tnon-heapvar pointer variables specially.\n\n\t* gcc.dg/alias-10.c: New test.\n\nFrom-SVN: r117986", "tree": {"sha": "0f094604ce261f01a2cff72be5821a4342da1e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f094604ce261f01a2cff72be5821a4342da1e37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5360407bc31e22ac1c79c7a20ef1e225377203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5360407bc31e22ac1c79c7a20ef1e225377203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5360407bc31e22ac1c79c7a20ef1e225377203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5360407bc31e22ac1c79c7a20ef1e225377203/comments", "author": null, "committer": null, "parents": [{"sha": "4d5fc916770f9cb56c3b4b8c81fcc09191e71a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d5fc916770f9cb56c3b4b8c81fcc09191e71a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d5fc916770f9cb56c3b4b8c81fcc09191e71a52"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "22f7d0c5e6002a976ad61f8d1203d6e9099acc9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -1,3 +1,12 @@\n+2006-10-23  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/14784\n+\t* tree-flow.h (struct var_ann_d): Add is_heapvar bit.\n+\t* tree-ssa-structalias.c (get_constraint_for,\n+\tintra_create_variable_infos): Set is_heapvar.\n+\t* tree-ssa-operands.c (access_can_touch_variable): Do not handle\n+\tnon-heapvar pointer variables specially.\n+\n 2006-10-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/29335"}, {"sha": "1af046debbd240076ef844691e73f27080578f70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -1,3 +1,8 @@\n+2006-10-23  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/14784\n+\t* gcc.dg/alias-10.c: New test.\n+\n 2006-10-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-sin-mpfr-1.c: New test."}, {"sha": "6e9cb3f3c4240a53ea541fd0e0f7183a0e599775", "filename": "gcc/testsuite/gcc.dg/alias-10.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftestsuite%2Fgcc.dg%2Falias-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftestsuite%2Fgcc.dg%2Falias-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-10.c?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -0,0 +1,32 @@\n+/* For PR tree-optimization/14784  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+\n+typedef struct bitmap_element_def\n+{\n+  unsigned int indx;\n+} bitmap_element;\n+\n+typedef struct bitmap_head_def {\n+    bitmap_element *first;\n+    int using_obstack;\n+} bitmap_head;\n+typedef struct bitmap_head_def *bitmap;\n+\n+bitmap_element *bitmap_free;\n+\n+void foo (bitmap head, bitmap_element *elt)\n+{\n+  while (1)\n+    {\n+      /* Alias analysis problems used to prevent us from recognizing\n+\t that this condition is invariant.  */\n+      if (head->using_obstack)\n+\tbitmap_free = elt;\n+    }\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"Unswitching\" 1 \"unswitch\"} } */\n+/* { dg-final { cleanup-tree-dump \"unswitch\" } } */"}, {"sha": "ff1006f339c8a3049b2f23db740aabedbf4cfa77", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -184,6 +184,9 @@ struct var_ann_d GTY(())\n      in the v_may_def list.  */\n   unsigned in_v_may_def_list : 1;\n \n+  /* True for HEAP and PARM_NOALIAS artificial variables.  */\n+  unsigned is_heapvar : 1;\n+\n   /* An artificial variable representing the memory location pointed-to by\n      all the pointer symbols that flow-insensitive alias analysis\n      (mostly type-based) considers to be aliased.  If the variable is"}, {"sha": "234eace9b4c2e1c4c2be729c8535ef25697b2609", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -1151,11 +1151,11 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n \t   && flag_strict_aliasing\n \t   && TREE_CODE (ref) != INDIRECT_REF\n \t   && !MTAG_P (alias)\n+\t   && !var_ann (alias)->is_heapvar\n \t   && (TREE_CODE (base) != INDIRECT_REF\n \t       || TREE_CODE (TREE_TYPE (base)) != UNION_TYPE)\n \t   && !AGGREGATE_TYPE_P (TREE_TYPE (alias))\n \t   && TREE_CODE (TREE_TYPE (alias)) != COMPLEX_TYPE\n-\t   && !POINTER_TYPE_P (TREE_TYPE (alias))\n \t   /* When the struct has may_alias attached to it, we need not to\n \t      return true.  */\n \t   && get_alias_set (base))"}, {"sha": "98ab99b4c927b9343eb09bcd3c1555195e1134d3", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5360407bc31e22ac1c79c7a20ef1e225377203/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=ae5360407bc31e22ac1c79c7a20ef1e225377203", "patch": "@@ -2640,6 +2640,7 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t\t  {\t\t    \n \t\t    heapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n \t\t    DECL_EXTERNAL (heapvar) = 1;\n+\t\t    get_var_ann (heapvar)->is_heapvar = 1;\n \t\t    if (referenced_vars)\n \t\t      add_referenced_var (heapvar);\n \t\t    heapvar_insert (t, heapvar);\n@@ -4281,6 +4282,7 @@ intra_create_variable_infos (void)\n \t    {\n \t      heapvar = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (t)), \n \t\t\t\t\t    \"PARM_NOALIAS\");\n+\t      get_var_ann (heapvar)->is_heapvar = 1;\n \t      DECL_EXTERNAL (heapvar) = 1;\n \t      if (referenced_vars)\n \t\tadd_referenced_var (heapvar);"}]}