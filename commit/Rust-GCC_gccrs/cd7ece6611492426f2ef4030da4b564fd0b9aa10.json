{"sha": "cd7ece6611492426f2ef4030da4b564fd0b9aa10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q3ZWNlNjYxMTQ5MjQyNmYyZWY0MDMwZGE0YjU2NGZkMGI5YWExMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-10T19:54:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-10T19:54:54Z"}, "message": "(fold): Don't modify tree with newly-allocated nodes; instead make new\ntree in those cases.\n\nFrom-SVN: r8901", "tree": {"sha": "1284b7c0c2b735372d724488e290ae286bd3baaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1284b7c0c2b735372d724488e290ae286bd3baaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd7ece6611492426f2ef4030da4b564fd0b9aa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7ece6611492426f2ef4030da4b564fd0b9aa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7ece6611492426f2ef4030da4b564fd0b9aa10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7ece6611492426f2ef4030da4b564fd0b9aa10/comments", "author": null, "committer": null, "parents": [{"sha": "35c2dbf43bd8e88b514e67b2c1334e1c04f4724e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c2dbf43bd8e88b514e67b2c1334e1c04f4724e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c2dbf43bd8e88b514e67b2c1334e1c04f4724e"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "75bba1ff64a25b3fc55d866e01156c54c2a0e81c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7ece6611492426f2ef4030da4b564fd0b9aa10/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7ece6611492426f2ef4030da4b564fd0b9aa10/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cd7ece6611492426f2ef4030da4b564fd0b9aa10", "patch": "@@ -3663,10 +3663,8 @@ fold (expr)\n \t\t    return t;\n \n \t\t  /* Otherwise return (CON +- ARG1) - VAR.  */\n-\t\t  TREE_SET_CODE (t, MINUS_EXPR);\n-\t\t  TREE_OPERAND (t, 1) = var;\n-\t\t  TREE_OPERAND (t, 0)\n-\t\t    = fold (build (code, TREE_TYPE (t), con, arg1));\n+\t\t  t = build (MINUS_EXPR, type,\n+\t\t\t     fold (build (code, type, con, arg1)), var);\n \t\t}\n \t      else\n \t\t{\n@@ -3682,9 +3680,9 @@ fold (expr)\n \t\t    return t;\n \n \t\t  /* Otherwise return VAR +- (ARG1 +- CON).  */\n-\t\t  TREE_OPERAND (t, 1) = tem\n-\t\t    = fold (build (code, TREE_TYPE (t), arg1, con));\n-\t\t  TREE_OPERAND (t, 0) = var;\n+\t\t  tem = fold (build (code, type, arg1, con));\n+\t\t  t = build (code, type, var, tem);\n+\n \t\t  if (integer_zerop (tem)\n \t\t      && (code == PLUS_EXPR || code == MINUS_EXPR))\n \t\t    return convert (type, var);\n@@ -3725,9 +3723,9 @@ fold (expr)\n \t\t\t\t       convert (TREE_TYPE (t), con)));\n \t\t}\n \n-\t      TREE_OPERAND (t, 0)\n-\t\t= fold (build (code, TREE_TYPE (t), arg0, con));\n-\t      TREE_OPERAND (t, 1) = var;\n+\t      t = build (TREE_CODE (t), type,\n+\t\t\t fold (build (code, TREE_TYPE (t), arg0, con)), var);\n+\n \t      if (integer_zerop (TREE_OPERAND (t, 0))\n \t\t  && TREE_CODE (t) == PLUS_EXPR)\n \t\treturn convert (TREE_TYPE (t), var);\n@@ -4270,12 +4268,12 @@ fold (expr)\n \t and the other one.  */\n       {\n \ttree constop = 0, varop;\n-\ttree *constoploc;\n+\tint constopnum = -1;\n \n \tif (TREE_CONSTANT (arg1))\n-\t  constoploc = &TREE_OPERAND (t, 1), constop = arg1, varop = arg0;\n+\t  constopnum = 1, constop = arg1, varop = arg0;\n \tif (TREE_CONSTANT (arg0))\n-\t  constoploc = &TREE_OPERAND (t, 0), constop = arg0, varop = arg1;\n+\t  constopnum = 0, constop = arg0, varop = arg1;\n \n \tif (constop && TREE_CODE (varop) == POSTINCREMENT_EXPR)\n \t  {\n@@ -4291,7 +4289,10 @@ fold (expr)\n \t\t  = fold (build (PLUS_EXPR, TREE_TYPE (varop),\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n \t\tTREE_SET_CODE (varop, PREINCREMENT_EXPR);\n-\t\t*constoploc = newconst;\n+\n+\t\tt = build (code, type, TREE_OPERAND (t, 0),\n+\t\t\t   TREE_OPERAND (t, 1));\n+\t\tTREE_OPERAND (t, constopnum) = newconst;\n \t\treturn t;\n \t      }\n \t  }\n@@ -4305,7 +4306,9 @@ fold (expr)\n \t\t  = fold (build (MINUS_EXPR, TREE_TYPE (varop),\n \t\t\t\t constop, TREE_OPERAND (varop, 1)));\n \t\tTREE_SET_CODE (varop, PREDECREMENT_EXPR);\n-\t\t*constoploc = newconst;\n+\t\tt = build (code, type, TREE_OPERAND (t, 0),\n+\t\t\t   TREE_OPERAND (t, 1));\n+\t\tTREE_OPERAND (t, constopnum) = newconst;\n \t\treturn t;\n \t      }\n \t  }\n@@ -4320,16 +4323,15 @@ fold (expr)\n \t    {\n \t    case GE_EXPR:\n \t      code = GT_EXPR;\n-\t      TREE_SET_CODE (t, code);\n \t      arg1 = const_binop (MINUS_EXPR, arg1, integer_one_node, 0);\n-\t      TREE_OPERAND (t, 1) = arg1;\n+\t      t = build (code, type, TREE_OPERAND (t, 0), arg1);\n \t      break;\n \n \t    case LT_EXPR:\n \t      code = LE_EXPR;\n-\t      TREE_SET_CODE (t, code);\n \t      arg1 = const_binop (MINUS_EXPR, arg1, integer_one_node, 0);\n-\t      TREE_OPERAND (t, 1) = arg1;\n+\t      t = build (code, type, TREE_OPERAND (t, 0), arg1);\n+\t      break;\n \t    }\n \t}\n \n@@ -4734,10 +4736,10 @@ fold (expr)\n \n \t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n \t    {\n-\t      arg0 = TREE_OPERAND (t, 0) = tem;\n+\t      t = build (code, type, tem,\n+\t\t\t TREE_OPERAND (t, 2), TREE_OPERAND (t, 1));\n+\t      arg0 = tem;\n \t      arg1 = TREE_OPERAND (t, 2);\n-\t      TREE_OPERAND (t, 2) = TREE_OPERAND (t, 1);\n-\t      TREE_OPERAND (t, 1) = arg1;\n \t      STRIP_NOPS (arg1);\n \t    }\n \t}\n@@ -4837,8 +4839,9 @@ fold (expr)\n \t      {\n \t      case EQ_EXPR:\n \t\t/* We can replace A with C1 in this case.  */\n-\t\targ1 = TREE_OPERAND (t, 1)\n-\t\t  = convert (type, TREE_OPERAND (arg0, 1));\n+\t\targ1 = convert (type, TREE_OPERAND (arg0, 1));\n+\t\tt = build (code, type, TREE_OPERAND (t, 0), arg1,\n+\t\t\t   TREE_OPERAND (t, 2));\n \t\tbreak;\n \n \t      case LT_EXPR:\n@@ -4898,10 +4901,10 @@ fold (expr)\n \n \t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n \t    {\n-\t      arg0 = TREE_OPERAND (t, 0) = tem;\n+\t      t = build (code, type, tem,\n+\t\t\t TREE_OPERAND (t, 2), TREE_OPERAND (t, 1));\n+\t      arg0 = tem;\n \t      arg1 = TREE_OPERAND (t, 2);\n-\t      TREE_OPERAND (t, 2) = TREE_OPERAND (t, 1);\n-\t      TREE_OPERAND (t, 1) = arg1;\n \t      STRIP_NOPS (arg1);\n \t    }\n \t}"}]}