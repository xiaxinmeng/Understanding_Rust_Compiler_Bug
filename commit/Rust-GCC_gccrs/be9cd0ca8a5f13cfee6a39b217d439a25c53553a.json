{"sha": "be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "node_id": "C_kwDOANBUbNoAKGJlOWNkMGNhOGE1ZjEzY2ZlZTZhMzliMjE3ZDQzOWEyNWM1MzU1M2E", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-09T14:17:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-09T14:17:52Z"}, "message": "dwarf2out: Don't call expand_expr during early_dwarf [PR104407]\n\nAs mentioned in the PR, since PR96690 r11-2834 we call rtl_for_decl_init\nwhich can call expand_expr already during early_dwarf.  The comment and PR\nexplains it that the intent is to ensure the referenced vars and functions\nare properly mangled because free_lang_data doesn't cover everything, like\ntemplate parameters etc.  It doesn't work well though, because expand_expr\ncan set DECL_RTLs e.g. on referenced vars and keep them there, and they can\nbe created e.g. with different MEM_ALIGN compared to what they would be\ncreated with if they were emitted later.\nSo, the following patch stops calling rtl_for_decl_init and instead\nfor cases for which rtl_for_decl_init does anything at all walks the\ninitializer and ensures referenced vars or functions are mangled.\n\n2022-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/104407\n\t* dwarf2out.cc (mangle_referenced_decls): New function.\n\t(tree_add_const_value_attribute): Don't call rtl_for_decl_init if\n\tearly_dwarf.  Instead walk the initializer and try to mangle vars or\n\tfunctions referenced from it.\n\n\t* g++.dg/debug/dwarf2/pr104407.C: New test.", "tree": {"sha": "df128b7a16483ac0fad48cf82c9ffde9dbaa93c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df128b7a16483ac0fad48cf82c9ffde9dbaa93c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be9cd0ca8a5f13cfee6a39b217d439a25c53553a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bb1db76b3ac127aff7dacf391fc1798a94bb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6bb1db76b3ac127aff7dacf391fc1798a94bb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6bb1db76b3ac127aff7dacf391fc1798a94bb7d"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "5681b01749add28c52666b41e44cbbc239f7204a", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9cd0ca8a5f13cfee6a39b217d439a25c53553a/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9cd0ca8a5f13cfee6a39b217d439a25c53553a/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "patch": "@@ -20431,7 +20431,10 @@ rtl_for_decl_init (tree init, tree type)\n \t}\n     }\n   /* Other aggregates, and complex values, could be represented using\n-     CONCAT: FIXME!  */\n+     CONCAT: FIXME!\n+     If this changes, please adjust tree_add_const_value_attribute\n+     so that for early_dwarf it will for such initializers mangle referenced\n+     decls.  */\n   else if (AGGREGATE_TYPE_P (type)\n \t   || (TREE_CODE (init) == VIEW_CONVERT_EXPR\n \t       && AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (init, 0))))\n@@ -20881,6 +20884,19 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl, bool cache_p)\n   return tree_add_const_value_attribute_for_decl (die, decl);\n }\n \n+/* Mangle referenced decls.  */\n+static tree\n+mangle_referenced_decls (tree *tp, int *walk_subtrees, void *)\n+{\n+  if (! EXPR_P (*tp) && ! CONSTANT_CLASS_P (*tp))\n+    *walk_subtrees = 0;\n+\n+  if (VAR_OR_FUNCTION_DECL_P (*tp))\n+    assign_assembler_name_if_needed (*tp);\n+\n+  return NULL_TREE;\n+}\n+\n /* Attach a DW_AT_const_value attribute to DIE. The value of the\n    attribute is the const value T.  */\n \n@@ -20889,7 +20905,6 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n {\n   tree init;\n   tree type = TREE_TYPE (t);\n-  rtx rtl;\n \n   if (!t || !TREE_TYPE (t) || TREE_TYPE (t) == error_mark_node)\n     return false;\n@@ -20910,11 +20925,26 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n \t  return true;\n \t}\n     }\n-  /* Generate the RTL even if early_dwarf to force mangling of all refered to\n-     symbols.  */\n-  rtl = rtl_for_decl_init (init, type);\n-  if (rtl && !early_dwarf)\n-    return add_const_value_attribute (die, TYPE_MODE (type), rtl);\n+  if (!early_dwarf)\n+    {\n+      rtx rtl = rtl_for_decl_init (init, type);\n+      if (rtl)\n+\treturn add_const_value_attribute (die, TYPE_MODE (type), rtl);\n+    }\n+  else\n+    {\n+      /* For early_dwarf force mangling of all referenced symbols.  */\n+      tree initializer = init;\n+      STRIP_NOPS (initializer);\n+      /* rtl_for_decl_init punts on other aggregates, and complex values.  */\n+      if (AGGREGATE_TYPE_P (type)\n+\t  || (TREE_CODE (initializer) == VIEW_CONVERT_EXPR\n+\t      && AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (initializer, 0))))\n+\t  || TREE_CODE (type) == COMPLEX_TYPE)\n+\t;\n+      else if (initializer_constant_valid_p (initializer, type))\n+\twalk_tree (&initializer, mangle_referenced_decls, NULL, NULL);\n+    }\n   /* If the host and target are sane, try harder.  */\n   if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n       && initializer_constant_valid_p (init, type))"}, {"sha": "4752587459c90901581e7c39aef41ad1c49b8c47", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr104407.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be9cd0ca8a5f13cfee6a39b217d439a25c53553a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr104407.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be9cd0ca8a5f13cfee6a39b217d439a25c53553a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr104407.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr104407.C?ref=be9cd0ca8a5f13cfee6a39b217d439a25c53553a", "patch": "@@ -0,0 +1,12 @@\n+// PR debug/104407\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-O1 -fcompare-debug\" }\n+\n+struct A { int i; long j; int k : 2; char l; } a;\n+\n+auto [ aa, bb, cc, dd ] = a;\n+\n+namespace N\n+{\n+  auto & [ m, n, o, ppp ] = a;\n+}"}]}