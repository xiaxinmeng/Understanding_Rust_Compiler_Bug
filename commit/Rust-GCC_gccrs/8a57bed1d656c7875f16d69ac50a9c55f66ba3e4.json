{"sha": "8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1N2JlZDFkNjU2Yzc4NzVmMTZkNjlhYzUwYTljNTVmNjZiYTNlNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-04T02:49:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-04T02:49:20Z"}, "message": "Use aliases for type traits in C++14 mode.\n\n\t* include/bits/unique_ptr.h (make_unique): Use alias for trait.\n\t* include/experimental/optional (__constexpr_addressof): Likewise.\n\t(_Optional_base, optional, make_optional): Likewise.\n\nFrom-SVN: r217064", "tree": {"sha": "b6dd5854566cc100a9ff6590c08a6c2fe6f89775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6dd5854566cc100a9ff6590c08a6c2fe6f89775"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc628a81535098376b64677c3f718c3b50ed164f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc628a81535098376b64677c3f718c3b50ed164f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc628a81535098376b64677c3f718c3b50ed164f"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "88e93524d2b14c8c72b8fd67a768a418b4863f8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "patch": "@@ -1,3 +1,9 @@\n+2014-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (make_unique): Use alias for trait.\n+\t* include/experimental/optional (__constexpr_addressof): Likewise.\n+\t(_Optional_base, optional, make_optional): Likewise.\n+\n 2014-11-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/algo.h: Do not use default arguments in function"}, {"sha": "5c2c534911d3072e38ff3e117f973eed658f4409", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "patch": "@@ -768,7 +768,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline typename _MakeUniq<_Tp>::__array\n     make_unique(size_t __num)\n-    { return unique_ptr<_Tp>(new typename remove_extent<_Tp>::type[__num]()); }\n+    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }\n \n   /// Disable std::make_unique for arrays of known bound\n   template<typename _Tp, typename... _Args>"}, {"sha": "7e01abedb76d4ebce3b3812536da7e7ff59b8476", "filename": "libstdc++-v3/include/experimental/optional", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a57bed1d656c7875f16d69ac50a9c55f66ba3e4/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Foptional?ref=8a57bed1d656c7875f16d69ac50a9c55f66ba3e4", "patch": "@@ -151,16 +151,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     * overloaded addressof operator (unary operator&), in which case the call\n     * will not be a constant expression.\n     */\n-  template<typename _Tp, typename enable_if<!_Has_addressof<_Tp>::value,\n-                                            int>::type...>\n+  template<typename _Tp, enable_if_t<!_Has_addressof<_Tp>::value, int>...>\n     constexpr _Tp* __constexpr_addressof(_Tp& __t)\n     { return &__t; }\n \n   /**\n     * @brief Fallback overload that defers to __addressof.\n     */\n-  template<typename _Tp, typename enable_if<_Has_addressof<_Tp>::value,\n-                                            int>::type...>\n+  template<typename _Tp, enable_if_t<_Has_addressof<_Tp>::value, int>...>\n     inline _Tp* __constexpr_addressof(_Tp& __t)\n     { return std::__addressof(__t); }\n \n@@ -184,7 +182,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Remove const to avoid prohibition of reusing object storage for\n       // const-qualified types in [3.8/9]. This is strictly internal\n       // and even optional itself is oblivious to it.\n-      using _Stored_type = typename remove_const<_Tp>::type;\n+      using _Stored_type = remove_const_t<_Tp>;\n \n     public:\n       // [X.Y.4.1] Constructors.\n@@ -208,10 +206,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n \n       template<typename _Up, typename... _Args,\n-               typename enable_if<is_constructible<_Tp,\n-                                                   initializer_list<_Up>&,\n-                                                   _Args&&...>::value,\n-                                  int>::type...>\n+               enable_if_t<is_constructible<_Tp,\n+                                            initializer_list<_Up>&,\n+                                            _Args&&...>::value,\n+                           int>...>\n         constexpr explicit _Optional_base(in_place_t,\n                                           initializer_list<_Up> __il,\n                                           _Args&&... __args)\n@@ -330,7 +328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class _Optional_base<_Tp, false>\n     {\n     private:\n-      using _Stored_type = typename remove_const<_Tp>::type;\n+      using _Stored_type = remove_const_t<_Tp>;\n \n     public:\n       constexpr _Optional_base() noexcept\n@@ -350,10 +348,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n \n       template<typename _Up, typename... _Args,\n-               typename enable_if<is_constructible<_Tp,\n-                                                   initializer_list<_Up>&,\n-                                                   _Args&&...>::value,\n-                                  int>::type...>\n+               enable_if_t<is_constructible<_Tp,\n+                                            initializer_list<_Up>&,\n+                                            _Args&&...>::value,\n+\t\t\t   int>...>\n         constexpr explicit _Optional_base(in_place_t,\n                                           initializer_list<_Up> __il,\n                                           _Args&&... __args)\n@@ -472,10 +470,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         // Unique tag type.\n         optional<_Tp>>\n     {\n-      static_assert(__and_<__not_<is_same<typename remove_cv<_Tp>::type,\n-\t\t\t\t\t  nullopt_t>>,\n-\t\t\t   __not_<is_same<typename remove_cv<_Tp>::type,\n-\t\t\t\t\t  in_place_t>>,\n+      static_assert(__and_<__not_<is_same<remove_cv_t<_Tp>, nullopt_t>>,\n+\t\t\t   __not_<is_same<remove_cv_t<_Tp>, in_place_t>>,\n \t\t\t   __not_<is_reference<_Tp>>>(),\n                     \"Invalid instantiation of optional<T>\");\n \n@@ -497,10 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<typename _Up>\n-        typename enable_if<\n-                 is_same<_Tp, typename decay<_Up>::type>::value,\n-                 optional&\n-               >::type\n+        enable_if_t<is_same<_Tp, decay_t<_Up>>::value, optional&>\n         operator=(_Up&& __u)\n         {\n           static_assert(__and_<is_constructible<_Tp, _Up>,\n@@ -527,11 +520,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up, typename... _Args>\n-        typename enable_if<\n-                 is_constructible<_Tp,\n-                                  initializer_list<_Up>&,\n-                                  _Args&&...>::value\n-               >::type\n+        enable_if_t<is_constructible<_Tp, initializer_list<_Up>&,\n+\t\t\t\t     _Args&&...>::value>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  this->_M_reset();\n@@ -795,9 +785,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { __lhs.swap(__rhs); }\n \n   template<typename _Tp>\n-    constexpr optional<typename decay<_Tp>::type>\n+    constexpr optional<decay_t<_Tp>>\n     make_optional(_Tp&& __t)\n-    { return optional<typename decay<_Tp>::type> { std::forward<_Tp>(__t) }; }\n+    { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }\n \n   // @} group optional\n _GLIBCXX_END_NAMESPACE_VERSION"}]}