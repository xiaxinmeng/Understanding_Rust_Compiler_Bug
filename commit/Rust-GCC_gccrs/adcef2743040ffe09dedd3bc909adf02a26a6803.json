{"sha": "adcef2743040ffe09dedd3bc909adf02a26a6803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjZWYyNzQzMDQwZmZlMDlkZWRkM2JjOTA5YWRmMDJhMjZhNjgwMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-07T04:34:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-07T04:34:36Z"}, "message": "static_assert8.C: Fix for -std=c++1z.\n\n\t* g++.dg/cpp0x/static_assert8.C: Fix for -std=c++1z.\n\t* g++.dg/cpp0x/auto3.C: Fix for -std=c++1z.\n\t* g++.dg/cpp1y/feat-cxx14.C: Only run with -std=c++14.\n\t* g++.dg/cpp1y/feat-cxx14-neg.C: Only run with -std=c++14.\n\t* g++.dg/cpp1z/feat-cxx1z.C: Fill in from feat-cxx14.C.\n\t* g++.dg/cpp1z/fold5.C: Don't run with -std=c++1z.\n\t* g++.dg/template/function1.C: Don't run with -std=c++1z.\n\t* g++.dg/template/call4.C: Fix access.\n\t* g++.dg/parse/crash31.C: Remove expected error text.\n\nFrom-SVN: r231348", "tree": {"sha": "271e442f1c2fde77f825350c31f5568608df2538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/271e442f1c2fde77f825350c31f5568608df2538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adcef2743040ffe09dedd3bc909adf02a26a6803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcef2743040ffe09dedd3bc909adf02a26a6803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcef2743040ffe09dedd3bc909adf02a26a6803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcef2743040ffe09dedd3bc909adf02a26a6803/comments", "author": null, "committer": null, "parents": [{"sha": "c5d0746fadee243090eeb7317a5305472c507742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5d0746fadee243090eeb7317a5305472c507742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5d0746fadee243090eeb7317a5305472c507742"}], "stats": {"total": 354, "additions": 336, "deletions": 18}, "files": [{"sha": "27aab5738c829573010cef88e3cfb0f3ab3c0eeb", "filename": "gcc/testsuite/g++.dg/cpp0x/auto3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto3.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -17,11 +17,11 @@ struct A { };\n \n A<int> A1;\n // CWG issue 625\n-A<auto> A2 = A1;\t\t// { dg-error \"\" }\n+A<auto> A2 = A1;\t\t// { dg-error \"\" \"\" { target { ! c++1z } } }\n \n auto foo() { }\t\t\t// { dg-error \"auto\" \"\" { target { ! c++14 } } }\n \n-void bar(auto i)\t\t// { dg-error \"incomplete|auto\" }\n+void bar(auto i)\t\t// { dg-error \"incomplete|auto\" \"\" { target { ! c++1z } } }\n {\n   (void)i;\n }"}, {"sha": "6602e70b0b8ee34160aac785a064ebe9362601ef", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -6,4 +6,4 @@ static_assert (1 == 0,); // { dg-error \"expected string-literal before '\\\\)'\" }\n \n static_assert (1 == 0, \"oops\"); // { dg-error \"static assertion failed\" }\n \n-// { dg-error \"static_assert without a message only available with \" \"\" { target *-*-* } 3 }\n+// { dg-error \"static_assert without a message only available with \" \"\" { target { ! c++1z } } 3 }"}, {"sha": "d5793abba8a729675eafff209aaec417d24d56dd", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx14-neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14-neg.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target c++14 } }\n+// { dg-options -std=c++14 }\n \n // C++17 features:\n "}, {"sha": "d9dbf6283a28aeba5c0111f82b6b77a0560561aa", "filename": "gcc/testsuite/g++.dg/cpp1y/feat-cxx14.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Ffeat-cxx14.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile { target c++14 } }\n-// { dg-options \"-I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n+// { dg-options \"-std=c++14 -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n \n //  C++98 features:\n "}, {"sha": "9b3b284bf40aa1f5a0edcbb77ebf33f6d2e43f52", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 321, "deletions": 2, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,5 +1,306 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++1z -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n+\n+//  C++98 features:\n+\n+#ifndef __cpp_rtti\n+#  error \"__cpp_rtti\"\n+#elif  __cpp_rtti != 199711\n+#  error \"__cpp_rtti != 199711\"\n+#endif\n+\n+#ifndef __cpp_exceptions\n+#  error \"__cpp_exceptions\"\n+#elif  __cpp_exceptions != 199711\n+#  error \"__cpp_exceptions != 199711\"\n+#endif\n+\n+//  C++11 features:\n+\n+#ifndef __cpp_raw_strings\n+#  error \"__cpp_raw_strings\"\n+#elif __cpp_raw_strings != 200710\n+#  error \"__cpp_raw_strings != 200710\"\n+#endif\n+\n+#ifndef __cpp_unicode_literals\n+#  error \"__cpp_unicode_literals\"\n+#elif __cpp_unicode_literals != 200710\n+#  error \"__cpp_unicode_literals != 200710\"\n+#endif\n+\n+#ifndef __cpp_user_defined_literals\n+#  error \"__cpp_user_defined_literals\"\n+#elif __cpp_user_defined_literals != 200809\n+#  error \"__cpp_user_defined_literals != 200809\"\n+#endif\n+\n+#ifndef __cpp_lambdas\n+#  error \"__cpp_lambdas\"\n+#elif __cpp_lambdas != 200907\n+#  error \"__cpp_lambdas != 200907\"\n+#endif\n+\n+#ifndef __cpp_range_based_for\n+#  error \"__cpp_range_based_for\"\n+#elif __cpp_range_based_for != 200907\n+#  error \"__cpp_range_based_for != 200907\"\n+#endif\n+\n+#ifndef __cpp_decltype\n+#  error \"__cpp_decltype\"\n+#elif __cpp_decltype != 200707\n+#  error \"__cpp_decltype != 200707\"\n+#endif\n+\n+#ifndef __cpp_attributes\n+#  error \"__cpp_attributes\"\n+#elif __cpp_attributes != 200809\n+#  error \"__cpp_attributes != 200809\"\n+#endif\n+\n+#ifndef __cpp_rvalue_reference\n+#  error \"__cpp_rvalue_reference\"\n+#elif __cpp_rvalue_reference != 200610\n+#  error \"__cpp_rvalue_reference != 200610\"\n+#endif\n+\n+#ifndef __cpp_variadic_templates\n+#  error \"__cpp_variadic_templates\"\n+#elif __cpp_variadic_templates != 200704\n+#  error \"__cpp_variadic_templates != 200704\"\n+#endif\n+\n+#ifndef __cpp_initializer_lists\n+#  error \"__cpp_initializer_lists\"\n+#elif __cpp_initializer_lists != 200806\n+#  error \"__cpp_initializer_lists != 200806\"\n+#endif\n+\n+#ifndef __cpp_delegating_constructors\n+#  error \"__cpp_delegating_constructors\"\n+#elif __cpp_delegating_constructors != 200604\n+#  error \"__cpp_delegating_constructors != 200604\"\n+#endif\n+\n+#ifndef __cpp_nsdmi\n+#  error \"__cpp_nsdmi\"\n+#elif __cpp_nsdmi != 200809\n+#  error \"__cpp_nsdmi != 200809\"\n+#endif\n+\n+#ifndef __cpp_inheriting_constructors\n+#  error \"__cpp_inheriting_constructors\"\n+#elif  __cpp_inheriting_constructors!= 200802\n+#  error \"__cpp_inheriting_constructors != 200802\"\n+#endif\n+\n+#ifndef __cpp_ref_qualifiers\n+#  error \"__cpp_ref_qualifiers\"\n+#elif __cpp_ref_qualifiers != 200710\n+#  error \"__cpp_ref_qualifiers != 200710\"\n+#endif\n+\n+#ifndef __cpp_alias_templates\n+#  error \"__cpp_alias_templates\"\n+#elif __cpp_alias_templates != 200704\n+#  error \"__cpp_alias_templates != 200704\"\n+#endif\n+\n+//  C++14 features:\n+\n+#ifndef __cpp_binary_literals\n+#  error \"__cpp_binary_literals\"\n+#elif __cpp_binary_literals != 201304\n+#  error \"__cpp_binary_literals != 201304\"\n+#endif\n+\n+#ifndef __cpp_init_captures\n+#  error \"__cpp_init_captures\"\n+#elif __cpp_init_captures != 201304\n+#  error \"__cpp_init_captures != 201304\"\n+#endif\n+\n+#ifndef __cpp_generic_lambdas\n+#  error \"__cpp_generic_lambdas\"\n+#elif __cpp_generic_lambdas != 201304\n+#  error \"__cpp_generic_lambdas != 201304\"\n+#endif\n+\n+#ifndef __cpp_constexpr\n+#  error \"__cpp_constexpr\"\n+#elif __cpp_constexpr != 201304\n+#  error \"__cpp_constexpr != 201304\"\n+#endif\n+\n+#ifndef __cpp_decltype_auto\n+#  error \"__cpp_decltype_auto\"\n+#elif __cpp_decltype_auto != 201304\n+#  error \"__cpp_decltype_auto != 201304\"\n+#endif\n+\n+#ifndef __cpp_return_type_deduction\n+#  error \"__cpp_return_type_deduction\"\n+#elif __cpp_return_type_deduction != 201304\n+#  error \"__cpp_return_type_deduction != 201304\"\n+#endif\n+\n+#ifndef __cpp_aggregate_nsdmi\n+#  error \"__cpp_aggregate_nsdmi\"\n+#elif __cpp_aggregate_nsdmi != 201304\n+#  error \"__cpp_aggregate_nsdmi != 201304\"\n+#endif\n+\n+#ifndef __cpp_variable_templates\n+#  error \"__cpp_variable_templates\"\n+#elif __cpp_variable_templates != 201304\n+#  error \"__cpp_variable_templates != 201304\"\n+#endif\n+\n+#ifndef __cpp_digit_separators\n+#  error \"__cpp_digit_separators\"\n+#elif __cpp_digit_separators != 201309\n+#  error \"__cpp_digit_separators != 201309\"\n+#endif\n+\n+#ifndef __cpp_sized_deallocation\n+#  error \"__cpp_sized_deallocation\"\n+#elif __cpp_sized_deallocation != 201309\n+#  error \"__cpp_sized_deallocation != 201309\"\n+#endif\n+\n+//  GNU VLA support:\n+\n+#ifndef __cpp_runtime_arrays\n+#  error \"__cpp_runtime_arrays\"\n+#elif __cpp_runtime_arrays != 198712\n+#  error \"__cpp_runtime_arrays != 198712\"\n+#endif\n+\n+//  C++11 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(noreturn)\n+#    error \"__has_cpp_attribute(noreturn)\"\n+#  elif __has_cpp_attribute(noreturn) != 200809\n+#    error \"__has_cpp_attribute(noreturn) != 200809\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  Attribute carries_dependency not in yet.\n+//#ifdef __has_cpp_attribute\n+//#  if ! __has_cpp_attribute(carries_dependency)\n+//#    error \"__has_cpp_attribute(carries_dependency)\"\n+//#  elif __has_cpp_attribute(carries_dependency) != 200809\n+//#    error \"__has_cpp_attribute(carries_dependency) != 200809\"\n+//#  endif\n+//#else\n+//#  error \"__has_cpp_attribute\"\n+//#endif\n+\n+//  C++14 attributes:\n+\n+#ifdef __has_cpp_attribute\n+#  if ! __has_cpp_attribute(deprecated)\n+#    error \"__has_cpp_attribute(deprecated)\"\n+#  elif __has_cpp_attribute(deprecated) != 201309\n+#    error \"__has_cpp_attribute(deprecated) != 201309\"\n+#  endif\n+#else\n+#  error \"__has_cpp_attribute\"\n+#endif\n+\n+//  Include checks:\n+\n+//  Check for __has_include macro.\n+#ifndef __has_include\n+#  error \"__has_include\"\n+#endif\n+\n+//  Quoted complex.h should find at least the bracket version (use operator).\n+#if __has_include__ \"complex.h\"\n+#else\n+#  error \"complex.h\"\n+#endif\n+\n+//  Try known bracket header (use operator).\n+#if __has_include__(<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+//  Define and use a macro to invoke the operator.\n+#define sluggo(TXT) __has_include__(TXT)\n+\n+#if sluggo(<complex>)\n+#else\n+#  error \"<complex>\"\n+#endif\n+\n+#if ! sluggo(<complex>)\n+#  error \"<complex>\"\n+#else\n+#endif\n+\n+//  Quoted complex.h should find at least the bracket version.\n+#if __has_include(\"complex.h\")\n+#else\n+#  error \"complex.h\"\n+#endif\n+\n+//  Try known local quote header.\n+#if __has_include(\"complex_literals.h\")\n+#else\n+#  error \"\\\"complex_literals.h\\\"\"\n+#endif\n+\n+//  Try nonexistent bracket header.\n+#if __has_include(<stuff>)\n+#  error \"<stuff>\"\n+#else\n+#endif\n+\n+//  Try nonexistent quote header.\n+#if __has_include(\"phlegm\")\n+#  error \"\\\"phlegm\\\"\"\n+#else\n+#endif\n+\n+//  Test __has_include_next.\n+#if __has_include(\"phoobhar.h\")\n+#  include \"phoobhar.h\"\n+#else\n+#  error \"__has_include(\\\"phoobhar.h\\\")\"\n+#endif\n+\n+//  Try a macro.\n+#define COMPLEX_INC \"complex.h\"\n+#if __has_include(COMPLEX_INC)\n+#else\n+#  error COMPLEX_INC\n+#endif\n+\n+//  Realistic use of __has_include.\n+#if __has_include(<array>)\n+#  define STD_ARRAY 1\n+#  include <array>\n+  template<typename _Tp, size_t _Num>\n+    using array = std::array<_Tp, _Num>;\n+#elif __has_include(<tr1/array>)\n+#  define TR1_ARRAY 1\n+#  include <tr1/array>\n+  template<typename _Tp, size_t _Num>\n+    typedef std::tr1::array<_Tp, _Num> array;\n+#endif\n+\n+// C++17 features:\n+\n+#ifndef __cpp_unicode_characters\n+#  error \"__cpp_unicode_characters\"\n+#elif __cpp_unicode_characters != 201411\n+#  error \"__cpp_unicode_characters != 201411\"\n+#endif\n \n #ifndef __cpp_static_assert\n #  error \"__cpp_static_assert\"\n@@ -13,8 +314,26 @@\n #  error \"__cpp_namespace_attributes != 201411\"\n #endif\n \n+#ifndef __cpp_enumerator_attributes\n+#  error \"__cpp_enumerator_attributes\"\n+#elif __cpp_enumerator_attributes != 201411\n+#  error \"__cpp_enumerator_attributes != 201411\"\n+#endif\n+\n #ifndef __cpp_nested_namespace_definitions\n #  error \"__cpp_nested_namespace_definitions\"\n #elif __cpp_nested_namespace_definitions != 201411\n #  error \"__cpp_nested_namespace_definitions != 201411\"\n #endif\n+\n+#ifndef __cpp_fold_expressions\n+#  error \"__cpp_fold_expressions\"\n+#elif __cpp_fold_expressions != 201411\n+#  error \"__cpp_fold_expressions != 201411\"\n+#endif\n+\n+#ifndef __cpp_nontype_template_args\n+#  error \"__cpp_nontype_template_args\"\n+#elif __cpp_nontype_template_args != 201411\n+#  error \"__cpp_nontype_template_args != 201411\"\n+#endif"}, {"sha": "da6544bddba1659bd709f8a2537a39ed307799e7", "filename": "gcc/testsuite/g++.dg/cpp1z/fold5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,5 +1,5 @@\n // Test that we complain about fold-expressions in C++11 and C++14.\n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target { c++11 && { ! c++1z } } } }\n \n template <class...T>\n constexpr int f(T... t)"}, {"sha": "b7ca1e46260de9bc845fff7a1711bc1266049d33", "filename": "gcc/testsuite/g++.dg/parse/crash31.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash31.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,9 +1,9 @@\n-struct A // { dg-message \"not complete\" }\n+struct A\n {\n-  A : A; // { dg-error \"expected|incomplete\" }\n-  A : B; // { dg-error \"not declared|incomplete\" }\n-  A : A(); // { dg-error \"undefined type|incomplete\" }\n-  A : B(); // { dg-error \"function call|incomplete|not declared\" }\n-  A : A[]; // { dg-error \"expected|array reference|incomplete\" }\n-  A : B[]; // { dg-error \"not declared|expected|array reference|incomplete\" }\n+  A : A; // { dg-error \"\" }\n+  A : B; // { dg-error \"\" }\n+  A : A(); // { dg-error \"\" }\n+  A : B(); // { dg-error \"\" }\n+  A : A[]; // { dg-error \"\" }\n+  A : B[]; // { dg-error \"\" }\n };"}, {"sha": "19587699cbc881ac8091d9798761f9429644c0e4", "filename": "gcc/testsuite/g++.dg/template/call4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall4.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,6 +1,6 @@\n // PR c++/25364\n \n-class OFX_PropertySuiteV1\n+struct OFX_PropertySuiteV1\n {\n   static int propGetDouble ();\n };"}, {"sha": "f2345855ed972d3770664a8b7638d359af14e032", "filename": "gcc/testsuite/g++.dg/template/function1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcef2743040ffe09dedd3bc909adf02a26a6803/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunction1.C?ref=adcef2743040ffe09dedd3bc909adf02a26a6803", "patch": "@@ -1,5 +1,5 @@\n // PR c++/38647\n-// { dg-do compile }\n+// { dg-do compile { target { ! c++1z } } }\n // { dg-prune-output \"note\" }\n \n template<const char *, int> struct A {};"}]}