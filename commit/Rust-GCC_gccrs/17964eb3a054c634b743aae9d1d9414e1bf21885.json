{"sha": "17964eb3a054c634b743aae9d1d9414e1bf21885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5NjRlYjNhMDU0YzYzNGI3NDNhYWU5ZDFkOTQxNGUxYmYyMTg4NQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-06-23T14:03:40Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-06-23T17:28:09Z"}, "message": "build: Change conditional include and empty.mk to -include in Makefiles\n\nGNU Make supports \"-include\" keyword to prevent warnings and errors due to\ninclusion of non-existent files.  This patch changes gcc/ and libgcc/ to use\n\"-include\" in place of the historical conditional inclusion and use of\nempty.mk work-arounds.\n\ngcc/ChangeLog\n\n2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.in (LANG_MAKEFRAGS): Same.\n\t(tmake_file): Use -include.\n\t(xmake_file): Same.\n\nlibgcc/ChangeLog\n\n2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.in: Remove uses of empty.mk. Use -include.\n\t* config/avr/t-avr: Use -include.\n\t* empty.mk: Delete.\n\nlibgcc/config/avr/libf7/ChangeLog\n\n2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* t-libf7: Same.", "tree": {"sha": "d2a54a775f5fa36e4e4a8c60bde22d5ad2ea7e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2a54a775f5fa36e4e4a8c60bde22d5ad2ea7e1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17964eb3a054c634b743aae9d1d9414e1bf21885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17964eb3a054c634b743aae9d1d9414e1bf21885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17964eb3a054c634b743aae9d1d9414e1bf21885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17964eb3a054c634b743aae9d1d9414e1bf21885/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec24341d0aac1ca57031d066503c420fb850023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec24341d0aac1ca57031d066503c420fb850023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec24341d0aac1ca57031d066503c420fb850023"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "d5dcc03d59be696d535d0df21de8f63ab58fb894", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17964eb3a054c634b743aae9d1d9414e1bf21885/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17964eb3a054c634b743aae9d1d9414e1bf21885/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=17964eb3a054c634b743aae9d1d9414e1bf21885", "patch": "@@ -1763,22 +1763,16 @@ SELFTEST_DEPS = $(GCC_PASSES) stmp-int-hdrs $(srcdir)/testsuite/selftests\n gnat_install_lib = @gnat_install_lib@\n \n # per-language makefile fragments\n-ifneq ($(LANG_MAKEFRAGS),)\n-include $(LANG_MAKEFRAGS)\n-endif\n+-include $(LANG_MAKEFRAGS)\n \n # target and host overrides must follow the per-language makefile fragments\n # so they can override or augment language-specific variables\n \n # target overrides\n-ifneq ($(tmake_file),)\n-include $(tmake_file)\n-endif\n+-include $(tmake_file)\n \n # host overrides\n-ifneq ($(xmake_file),)\n-include $(xmake_file)\n-endif\n+-include $(xmake_file)\n \n # all-tree.def includes all the tree.def files.\n all-tree.def: s-alltree; @true"}, {"sha": "d6075d32bd4834edbfd820ee76bacec20ae4ba02", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=17964eb3a054c634b743aae9d1d9414e1bf21885", "patch": "@@ -373,7 +373,7 @@ gthr-default.h: $(srcdir)/$(thread_header)\n \t-$(LN_S) $< $@\n \n tmake_file = @tmake_file@\n-include $(srcdir)/empty.mk $(tmake_file)\n+-include $(tmake_file)\n \n # Collect target defines and headers from config.host.\n libgcc_tm_defines = @tm_defines@\n@@ -393,7 +393,7 @@ ifeq ($(SHLIB_LINK),)\n endif\n \n ifeq ($(enable_shared),yes)\n-  iterator = $(srcdir)/empty.mk $(patsubst %,$(srcdir)/shared-object.mk,$(iter-items))\n+  iterator = $(patsubst %,$(srcdir)/shared-object.mk,$(iter-items))\n \n   install-shared = install-shared\n \n@@ -425,7 +425,7 @@ gen-hide-list = echo > $@\n endif\n \n ifneq ($(enable_shared),yes)\n-iterator = $(srcdir)/empty.mk $(patsubst %,$(srcdir)/static-object.mk,$(iter-items))\n+iterator = $(patsubst %,$(srcdir)/static-object.mk,$(iter-items))\n endif\n \n LIB2ADD += enable-execute-stack.c\n@@ -522,7 +522,7 @@ iter-items := $(sifuncs) $(difuncs) $(tifuncs)\n iter-labels := $(sifuncs) $(difuncs) $(difuncs)\n iter-sizes := $(patsubst %,4,$(sifuncs) $(difuncs)) $(patsubst %,8,$(tifuncs))\n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,%$(objext),$(sifuncs) $(difuncs) $(tifuncs))\n ifeq ($(enable_shared),yes)\n@@ -805,7 +805,7 @@ iter-items := $(fixed-funcs)\n iter-labels := $(fixed-labels)\n iter-from := $(fixed-modes)\n iter-to := $(fixed-modes)\n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n \n # Add arithmetic functions to list of objects to be built\n libgcc-objects += $(patsubst %,%$(objext),$(filter-out $(LIB2FUNCS_EXCLUDE),$(fixed-funcs)))\n@@ -824,7 +824,7 @@ iter-items := $(fixed-conv-funcs)\n iter-labels := $(fixed-conv-labels)\n iter-from := $(fixed-conv-from)\n iter-to := $(fixed-conv-to)\n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/fixed-obj.mk,$(iter-items))\n \n # Add conversion functions to list of objects to be built\n libgcc-objects += $(patsubst %,%$(objext),$(filter-out $(LIB2FUNCS_EXCLUDE),$(fixed-conv-funcs)))\n@@ -844,7 +844,7 @@ libgcc-objects += $(addsuffix $(objext),$(basename $(notdir $(LIB2ADD_ST))))\n \n c_flags :=\n iter-items := $(LIB2ADD) $(LIB2ADD_ST)\n-include $(iterator)\n+-include $(iterator)\n \n ifeq ($(enable_shared),yes)\n libgcc-s-objects += $(addsuffix _s$(objext),$(basename $(notdir $(LIB2ADD))))\n@@ -862,15 +862,15 @@ libgcc-eh-objects += $(addsuffix $(objext),$(basename $(notdir $(LIB2ADDEHSTATIC\n libgcc-s-objects += $(addsuffix _s$(objext),$(basename $(notdir $(LIB2ADDEHSHARED))))\n \n iter-items := $(sort $(LIB2ADDEHSTATIC) $(LIB2ADDEHSHARED))\n-include $(iterator)\n+-include $(iterator)\n \n else\n # Not shared.  LIB2ADDEH are added to libgcc.a.\n \n libgcc-objects += $(addsuffix $(objext),$(basename $(notdir $(LIB2ADDEH))))\n \n iter-items := $(LIB2ADDEH)\n-include $(iterator)\n+-include $(iterator)\n \n endif\n \n@@ -886,7 +886,7 @@ libunwind-s-objects += $(addsuffix _s$(objext),$(basename $(notdir $(LIBUNWIND))\n endif\n \n iter-items := $(LIBUNWIND)\n-include $(iterator)\n+-include $(iterator)\n \n # Build libgcov components.\n \n@@ -1203,4 +1203,4 @@ install-strip: install\n # configure.\n .NOEXPORT:\n \n-include $(srcdir)/empty.mk $(wildcard *.dep)\n+-include $(wildcard *.dep)"}, {"sha": "30aa280d11e301edf1a04854db3ff3a581bcf1f9", "filename": "libgcc/config/avr/libf7/t-libf7", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2Fconfig%2Favr%2Flibf7%2Ft-libf7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2Fconfig%2Favr%2Flibf7%2Ft-libf7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flibf7%2Ft-libf7?ref=17964eb3a054c634b743aae9d1d9414e1bf21885", "patch": "@@ -125,7 +125,7 @@ f7_parts := $(F7_C_PARTS)\n iter-items  := $(f7_parts)\n iter-labels := $(f7_parts)\n \n-include $(srcdir)/empty.mk $(patsubst %,$(libf7)/libf7-c-object.mk,$(iter-items))\n+-include $(patsubst %,$(libf7)/libf7-c-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,f7_c_%$(objext),$(F7_C_PARTS))\n \n@@ -136,7 +136,7 @@ f7_parts := $(F7_ASM_PARTS)\n iter-items  := $(f7_parts)\n iter-labels := $(f7_parts)\n \n-include $(srcdir)/empty.mk $(patsubst %,$(libf7)/libf7-asm-object.mk,$(iter-items))\n+-include $(patsubst %,$(libf7)/libf7-asm-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,f7_asm_%$(objext),$(F7_ASM_PARTS))\n "}, {"sha": "ed84b3f342e31376caf5aa9fe4354aad882186ab", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17964eb3a054c634b743aae9d1d9414e1bf21885/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=17964eb3a054c634b743aae9d1d9414e1bf21885", "patch": "@@ -132,7 +132,7 @@ iter-labels := $(siintfuncs16)\n iter-sizes := $(patsubst %,2,$(siintfuncs16)) $(patsubst %,2,$(hiintfuncs16))\n \n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/siditi-object.mk,$(iter-items))\n libgcc-objects += $(patsubst %,%$(objext),$(hiintfuncs16))\n \n ifeq ($(enable_shared),yes)\n@@ -167,7 +167,7 @@ iter-items  := $(round_funcs)\n iter-labels := $(round_suffix)\n iter-flags  := $(patsubst %,-DL_round,$(iter-items))\n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,%$(objext),$(round_funcs))\n \n@@ -181,7 +181,7 @@ iter-items  := $(clrsb_funcs)\n iter-labels := $(clrsb_funcs)\n iter-flags  := $(patsubst %,-DL_clrsb,$(iter-items))\n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,%$(objext),$(clrsb_funcs))\n \n@@ -195,7 +195,7 @@ iter-items  := $(countls_funcs)\n iter-labels := $(countls_modes)\n iter-flags  := $(patsubst %,-DL_countls,$(iter-items))\n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,%$(objext),$(countls_funcs))\n \n@@ -209,7 +209,7 @@ iter-items  := $(countlsu_funcs)\n iter-labels := $(countlsu_modes)\n iter-flags  := $(patsubst %,-DL_countlsu,$(iter-items))\n \n-include $(srcdir)/empty.mk $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n+-include $(patsubst %,$(srcdir)/config/avr/lib2-object.mk,$(iter-items))\n \n libgcc-objects += $(patsubst %,%$(objext),$(countlsu_funcs))\n "}, {"sha": "7b1d97b8b049266c670f7faca339a88573ae33c1", "filename": "libgcc/empty.mk", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec24341d0aac1ca57031d066503c420fb850023/libgcc%2Fempty.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec24341d0aac1ca57031d066503c420fb850023/libgcc%2Fempty.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fempty.mk?ref=aec24341d0aac1ca57031d066503c420fb850023", "patch": "@@ -1,2 +0,0 @@\n-# Empty.  This file exists to suppress errors in the parent Makefile\n-# when a variable (e.g. LIB2ADD) is empty."}]}