{"sha": "873c716480f5aedc692af4d4ddf15e72682c5f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODczYzcxNjQ4MGY1YWVkYzY5MmFmNGQ0ZGRmMTVlNzI2ODJjNWYyNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-11-06T00:30:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-11-06T00:30:52Z"}, "message": "re PR target/33579 (INIT_PRIORITY is broken)\n\n\tPR target/33579\n\t* tree.h (DECL_INIT_PRIORITY): Do not require\n\tDECL_HAS_INIT_PRIORITY_P.\n\t(DECL_FINI_PRIORITY): Likewise.\n\t* tree.c (decl_init_priority_lookup): Remove assert.\n\t(decl_fini_priority_insert): Likewise.\n\t* cgraphunit.c (static_ctors): Make it a VEC.\n\t(static_dtors): Likewise.\n\t(record_cdtor_fn): Adjust accordingly.\n\t(build_cdtor): Generate multiple functions for each initialization\n\tpriority.\n\t(compare_ctor): New function.\n\t(compare_dtor): Likewise.\n\t(cgraph_build_cdtor_fns): Sort the functions by priority before\n\tcalling build_cdtor.\n\t(cgraph_build_static_cdtor): Put the priority in the function's\n\tname.\n\nFrom-SVN: r129918", "tree": {"sha": "9f613ed6139732d5c70a2af1d163031b7b40cb0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f613ed6139732d5c70a2af1d163031b7b40cb0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/873c716480f5aedc692af4d4ddf15e72682c5f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c716480f5aedc692af4d4ddf15e72682c5f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873c716480f5aedc692af4d4ddf15e72682c5f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873c716480f5aedc692af4d4ddf15e72682c5f27/comments", "author": null, "committer": null, "parents": [{"sha": "7ef52af45236848a5fdbbf645e1883001bf97899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef52af45236848a5fdbbf645e1883001bf97899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef52af45236848a5fdbbf645e1883001bf97899"}], "stats": {"total": 180, "additions": 145, "deletions": 35}, "files": [{"sha": "b9d370ed9e16e1ef13cc165ac50d4b4e96e8a1a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=873c716480f5aedc692af4d4ddf15e72682c5f27", "patch": "@@ -1,3 +1,23 @@\n+2007-11-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR target/33579\n+\t* tree.h (DECL_INIT_PRIORITY): Do not require\n+\tDECL_HAS_INIT_PRIORITY_P.\n+\t(DECL_FINI_PRIORITY): Likewise.\n+\t* tree.c (decl_init_priority_lookup): Remove assert.\n+\t(decl_fini_priority_insert): Likewise.\n+\t* cgraphunit.c (static_ctors): Make it a VEC.\n+\t(static_dtors): Likewise.\n+\t(record_cdtor_fn): Adjust accordingly.\n+\t(build_cdtor): Generate multiple functions for each initialization\n+\tpriority.\n+\t(compare_ctor): New function.\n+\t(compare_dtor): Likewise.\n+\t(cgraph_build_cdtor_fns): Sort the functions by priority before\n+\tcalling build_cdtor.\n+\t(cgraph_build_static_cdtor): Put the priority in the function's\n+\tname.\n+\n 2007-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/32632"}, {"sha": "11a625d0812ec219824663525ea9fde5cb873dcf", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 122, "deletions": 27, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=873c716480f5aedc692af4d4ddf15e72682c5f27", "patch": "@@ -158,8 +158,10 @@ static void cgraph_output_pending_asms (void);\n \n static FILE *cgraph_dump_file;\n \n-static GTY (()) tree static_ctors;\n-static GTY (()) tree static_dtors;\n+/* A vector of FUNCTION_DECLs declared as static constructors.  */\n+static GTY (()) VEC(tree, gc) *static_ctors;\n+/* A vector of FUNCTION_DECLs declared as static destructors.  */\n+static GTY (()) VEC(tree, gc) *static_dtors;\n \n /* When target does not have ctors and dtors, we call all constructor\n    and destructor by special initialization/destruction function\n@@ -179,12 +181,12 @@ record_cdtor_fn (tree fndecl)\n \n   if (DECL_STATIC_CONSTRUCTOR (fndecl))\n     {\n-      static_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n+      VEC_safe_push (tree, gc, static_ctors, fndecl);\n       DECL_STATIC_CONSTRUCTOR (fndecl) = 0;\n     }\n   if (DECL_STATIC_DESTRUCTOR (fndecl))\n     {\n-      static_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n+      VEC_safe_push (tree, gc, static_dtors, fndecl);\n       DECL_STATIC_DESTRUCTOR (fndecl) = 0;\n     }\n   DECL_INLINE (fndecl) = 1;\n@@ -193,22 +195,98 @@ record_cdtor_fn (tree fndecl)\n   cgraph_mark_reachable_node (node);\n }\n \n-/* Synthesize a function which calls all the global ctors or global\n-   dtors in this file.  This is only used for targets which do not\n-   support .ctors/.dtors sections.  */\n+/* Define global constructors/destructor functions for the CDTORS, of\n+   which they are LEN.  The CDTORS are sorted by initialization\n+   priority.  If CTOR_P is true, these are constructors; otherwise,\n+   they are destructors.  */\n+\n static void\n-build_cdtor (int method_type, tree cdtors)\n+build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n {\n-  tree body = 0;\n+  size_t i;\n \n-  if (!cdtors)\n-    return;\n+  i = 0;\n+  while (i < len)\n+    {\n+      tree body;\n+      tree fn;\n+      priority_type priority;\n+\n+      priority = 0;\n+      body = NULL_TREE;\n+      /* Find the next batch of constructors/destructors with the same\n+\t initialization priority.  */\n+      do\n+\t{\n+\t  priority_type p;\n+\t  fn = cdtors[i];\n+\t  p = ctor_p ? DECL_INIT_PRIORITY (fn) : DECL_FINI_PRIORITY (fn);\n+\t  if (!body)\n+\t    priority = p;\n+\t  else if (p != priority)\n+\t    break;\n+\t  append_to_statement_list (build_function_call_expr (fn, 0),\n+\t\t\t\t    &body);\n+\t  ++i;\n+\t}\n+      while (i < len);\n+      gcc_assert (body != NULL_TREE);\n+      /* Generate a function to call all the function of like\n+\t priority.  */\n+      cgraph_build_static_cdtor (ctor_p ? 'I' : 'D', body, priority);\n+    }\n+}\n+\n+/* Comparison function for qsort.  P1 and P2 are actually of type\n+   \"tree *\" and point to static constructors.  DECL_INIT_PRIORITY is\n+   used to determine the sort order.  */\n \n-  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n-    append_to_statement_list (build_function_call_expr (TREE_VALUE (cdtors), 0),\n-\t\t\t      &body);\n+static int\n+compare_ctor (const void *p1, const void *p2)\n+{\n+  tree f1;\n+  tree f2;\n+  int priority1;\n+  int priority2;\n+\n+  f1 = *(const tree *)p1;\n+  f2 = *(const tree *)p2;\n+  priority1 = DECL_INIT_PRIORITY (f1);\n+  priority2 = DECL_INIT_PRIORITY (f2);\n+  \n+  if (priority1 < priority2)\n+    return -1;\n+  else if (priority1 > priority2)\n+    return 1;\n+  else\n+    /* Ensure a stable sort.  */\n+    return (const tree *)p1 - (const tree *)p2;\n+}\n+\n+/* Comparison function for qsort.  P1 and P2 are actually of type\n+   \"tree *\" and point to static destructors.  DECL_FINI_PRIORITY is\n+   used to determine the sort order.  */\n \n-  cgraph_build_static_cdtor (method_type, body, DEFAULT_INIT_PRIORITY);\n+static int\n+compare_dtor (const void *p1, const void *p2)\n+{\n+  tree f1;\n+  tree f2;\n+  int priority1;\n+  int priority2;\n+\n+  f1 = *(const tree *)p1;\n+  f2 = *(const tree *)p2;\n+  priority1 = DECL_FINI_PRIORITY (f1);\n+  priority2 = DECL_FINI_PRIORITY (f2);\n+  \n+  if (priority1 < priority2)\n+    return -1;\n+  else if (priority1 > priority2)\n+    return 1;\n+  else\n+    /* Ensure a stable sort.  */\n+    return (const tree *)p1 - (const tree *)p2;\n }\n \n /* Generate functions to call static constructors and destructors\n@@ -218,17 +296,30 @@ build_cdtor (int method_type, tree cdtors)\n static void\n cgraph_build_cdtor_fns (void)\n {\n-  if (!targetm.have_ctors_dtors)\n+  if (!VEC_empty (tree, static_ctors))\n     {\n-      build_cdtor ('I', static_ctors); \n-      static_ctors = NULL_TREE;\n-      build_cdtor ('D', static_dtors); \n-      static_dtors = NULL_TREE;\n+      gcc_assert (!targetm.have_ctors_dtors);\n+      qsort (VEC_address (tree, static_ctors),\n+\t     VEC_length (tree, static_ctors), \n+\t     sizeof (tree),\n+\t     compare_ctor);\n+      build_cdtor (/*ctor_p=*/true,\n+\t\t   VEC_address (tree, static_ctors),\n+\t\t   VEC_length (tree, static_ctors)); \n+      VEC_truncate (tree, static_ctors, 0);\n     }\n-  else\n+\n+  if (!VEC_empty (tree, static_dtors))\n     {\n-      gcc_assert (!static_ctors);\n-      gcc_assert (!static_dtors);\n+      gcc_assert (!targetm.have_ctors_dtors);\n+      qsort (VEC_address (tree, static_dtors),\n+\t     VEC_length (tree, static_dtors), \n+\t     sizeof (tree),\n+\t     compare_dtor);\n+      build_cdtor (/*ctor_p=*/false,\n+\t\t   VEC_address (tree, static_dtors),\n+\t\t   VEC_length (tree, static_dtors)); \n+      VEC_truncate (tree, static_dtors, 0);\n     }\n }\n \n@@ -1364,9 +1455,10 @@ cgraph_optimize (void)\n     }\n #endif\n }\n-/* Generate and emit a static constructor or destructor.  WHICH must be\n-   one of 'I' or 'D'.  BODY should be a STATEMENT_LIST containing\n-   GENERIC statements.  */\n+/* Generate and emit a static constructor or destructor.  WHICH must\n+   be one of 'I' (for a constructor) or 'D' (for a destructor).  BODY\n+   is a STATEMENT_LIST containing GENERIC statements.  PRIORITY is the\n+   initialization priority fot this constructor or destructor.  */\n \n void\n cgraph_build_static_cdtor (char which, tree body, int priority)\n@@ -1375,7 +1467,10 @@ cgraph_build_static_cdtor (char which, tree body, int priority)\n   char which_buf[16];\n   tree decl, name, resdecl;\n \n-  sprintf (which_buf, \"%c_%d\", which, counter++);\n+  /* The priority is encoded in the constructor or destructor name.\n+     collect2 will sort the names and arrange that they are called at\n+     program startup.  */\n+  sprintf (which_buf, \"%c_%.5d_%d\", which, priority, counter++);\n   name = get_file_function_name (which_buf);\n \n   decl = build_decl (FUNCTION_DECL, name,"}, {"sha": "81c54d0edf49f6fa70548976dcc988bf1f1ee2ca", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=873c716480f5aedc692af4d4ddf15e72682c5f27", "patch": "@@ -4306,9 +4306,6 @@ decl_init_priority_lookup (tree decl)\n   struct tree_map_base in;\n \n   gcc_assert (VAR_OR_FUNCTION_DECL_P (decl));\n-  gcc_assert (TREE_CODE (decl) == VAR_DECL\n-\t      ? DECL_HAS_INIT_PRIORITY_P (decl)\n-\t      : DECL_STATIC_CONSTRUCTOR (decl));\n   in.from = decl;\n   h = htab_find (init_priority_for_decl, &in);\n   return h ? h->init : DEFAULT_INIT_PRIORITY;\n@@ -4323,7 +4320,6 @@ decl_fini_priority_lookup (tree decl)\n   struct tree_map_base in;\n \n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n-  gcc_assert (DECL_STATIC_DESTRUCTOR (decl));\n   in.from = decl;\n   h = htab_find (init_priority_for_decl, &in);\n   return h ? h->fini : DEFAULT_INIT_PRIORITY;"}, {"sha": "ede0cd8303b3fc2e4350cc834cd1b183e38701d2", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/873c716480f5aedc692af4d4ddf15e72682c5f27/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=873c716480f5aedc692af4d4ddf15e72682c5f27", "patch": "@@ -3144,16 +3144,15 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define DECL_HAS_INIT_PRIORITY_P(NODE) \\\n   (VAR_DECL_CHECK (NODE)->decl_with_vis.init_priority_p)\n \n-/* For a VAR_DECL or FUNCTION_DECL with DECL_HAS_INIT_PRIORITY_P set,\n-   the initialization priority of NODE.  */\n+/* For a VAR_DECL or FUNCTION_DECL the initialization priority of\n+   NODE.  */ \n #define DECL_INIT_PRIORITY(NODE) \\\n   (decl_init_priority_lookup (NODE))\n /* Set the initialization priority for NODE to VAL.  */\n #define SET_DECL_INIT_PRIORITY(NODE, VAL) \\\n   (decl_init_priority_insert (NODE, VAL))\n \n-/* For a FUNCTION_DECL with DECL_HAS_INIT_PRIORITY_P set, the\n-   finalization priority of NODE.  */\n+/* For a FUNCTION_DECL the finalization priority of NODE.  */\n #define DECL_FINI_PRIORITY(NODE) \\\n   (decl_fini_priority_lookup (NODE))\n /* Set the finalization priority for NODE to VAL.  */"}]}