{"sha": "dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmYzViODJkNWQ1NDk3MjU5M2Y2MjcwYjdiMWVkMTRlMmMxOGJjYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-05T01:33:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-05T01:33:27Z"}, "message": "i386-local.c: New.\n\n\n\t* gcc.dg/i386-local.c: New.\n\n\t* toplev.c (rest_of_compilation):  Deffer RTL compilation only when\n\tRTL inlining is done.\n\n\t* cgraphunit.c (cgraph_mark_local_functions): New local function.\n\t(cgraph_optimize): Mark local functions.\n\t* i386-protos.h (init_cumulative_args): Update prototype.\n\t* i386.c (init_cumulative_args): Use register passing convention for\n\tlocal functions.\n\n\t* cgraph.c (cgraph_global_info_ready): New global variable\n\t(cgraph_local_info, cgraph_global_info): New functions.\n\t* cgraph.h (struct cgraph_local_info, cgraph_global_info): New\n\tstructures.\n\t(cgraph_local_info, cgraph_global_info, cgraph_global_info_ready):\n\tDeclare.\n\t* cgraphunit.c (cgraph_finalize_function): Set inline_many.\n\t(cgraph_mark_functions_to_output): Use inline_many.\n\t(cgraph_expand_function): Free DECL_SAVED_TREE uncondtionally.\n\t(cgraph_expand_functions): Expand inline functions last.\n\t(cgraph_optimize): Do not emit uneeded functions.\n\nFrom-SVN: r63822", "tree": {"sha": "c65a7c71518b86c824939e78d633204bce6006c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c65a7c71518b86c824939e78d633204bce6006c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/comments", "author": null, "committer": null, "parents": [{"sha": "75d8f260dfdb422996bb96fc3d120f451c009927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d8f260dfdb422996bb96fc3d120f451c009927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d8f260dfdb422996bb96fc3d120f451c009927"}], "stats": {"total": 231, "additions": 200, "deletions": 31}, "files": [{"sha": "4d30aba002be0785f7bf77372b0b3fb403292071", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -1,3 +1,26 @@\n+Wed Mar  5 02:04:04 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (rest_of_compilation):  Deffer RTL compilation only when\n+\tRTL inlining is done.\n+\n+\t* cgraphunit.c (cgraph_mark_local_functions): New local function.\n+\t(cgraph_optimize): Mark local functions.\n+\t* i386-protos.h (init_cumulative_args): Update prototype.\n+\t* i386.c (init_cumulative_args): Use register passing convention for\n+\tlocal functions.\n+\n+\t* cgraph.c (cgraph_global_info_ready): New global variable\n+\t(cgraph_local_info, cgraph_global_info): New functions.\n+\t* cgraph.h (struct cgraph_local_info, cgraph_global_info): New\n+\tstructures.\n+\t(cgraph_local_info, cgraph_global_info, cgraph_global_info_ready):\n+\tDeclare.\n+\t* cgraphunit.c (cgraph_finalize_function): Set inline_many.\n+\t(cgraph_mark_functions_to_output): Use inline_many.\n+\t(cgraph_expand_function): Free DECL_SAVED_TREE uncondtionally.\n+\t(cgraph_expand_functions): Expand inline functions last.\n+\t(cgraph_optimize): Do not emit uneeded functions.\n+\n 2003-03-04  Steve Ellcey  <sje@cup.hp.com>\n \n \t* expr.c (convert_modes): Check for legal hard register."}, {"sha": "d947eb9991072d2590ac5613f4a346c1b849ad98", "filename": "gcc/cgraph.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -43,6 +43,9 @@ struct cgraph_node *cgraph_nodes;\n /* Number of nodes in existence.  */\n int cgraph_n_nodes;\n \n+/* Set when whole unit has been analyzed so we can access global info.  */\n+bool cgraph_global_info_ready = false;\n+\n static struct cgraph_edge *create_edge PARAMS ((struct cgraph_node *,\n \t\t\t\t\t\tstruct cgraph_node *));\n static void remove_edge PARAMS ((struct cgraph_node *, struct cgraph_node *));\n@@ -175,6 +178,33 @@ cgraph_calls_p (caller_decl, callee_decl)\n   return edge != NULL;\n }\n \n+/* Return local info for the compiled function.  */\n+\n+struct cgraph_local_info *\n+cgraph_local_info (decl)\n+     tree decl;\n+{\n+  struct cgraph_node *node;\n+  if (TREE_CODE (decl) != FUNCTION_DECL)\n+    abort ();\n+  node = cgraph_node (decl);\n+  return &node->local;\n+}\n+\n+/* Return local info for the compiled function.  */\n+\n+struct cgraph_global_info *\n+cgraph_global_info (decl)\n+     tree decl;\n+{\n+  struct cgraph_node *node;\n+  if (TREE_CODE (decl) != FUNCTION_DECL || !cgraph_global_info_ready)\n+    abort ();\n+  node = cgraph_node (decl);\n+  return &node->global;\n+}\n+\n+\n /* Dump the callgraph.  */\n \n void"}, {"sha": "4404fb8b838742a5cced70f368deee1c0a5e3f38", "filename": "gcc/cgraph.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -22,6 +22,27 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_CGRAPH_H\n #define GCC_CGRAPH_H\n \n+/* Information about the function collected locally.\n+   Available after function is lowered  */\n+\n+struct cgraph_local_info\n+{\n+  /* Set when function function is visiable in current compilation unit only\n+     and it's address is never taken.  */\n+  bool local;\n+  bool inline_many;\n+};\n+\n+/* Information about the function that needs to be computed globally\n+   once compilation is finished.  Available only with -funit-at-time.  */\n+\n+struct cgraph_global_info\n+{\n+  /* Empty for the moment.  */\n+  int dummy;\n+};\n+\n+\n /* The cgraph data strutcture.\n    Each function decl has assigned cgraph_node listing calees and callers.  */\n \n@@ -51,6 +72,8 @@ struct cgraph_node\n   bool lowered;\n   /* Set when function is scheduled to be assembled.  */\n   bool output;\n+  struct cgraph_local_info local;\n+  struct cgraph_global_info global;\n };\n \n struct cgraph_edge\n@@ -62,13 +85,16 @@ struct cgraph_edge\n \n extern struct cgraph_node *cgraph_nodes;\n extern int cgraph_n_nodes;\n+extern bool cgraph_global_info_ready;\n \n /* In cgraph.c  */\n void dump_cgraph\t\t\tPARAMS ((FILE *));\n void cgraph_remove_call\t\t\tPARAMS ((tree, tree));\n struct cgraph_edge *cgraph_record_call\tPARAMS ((tree, tree));\n struct cgraph_node *cgraph_node\t\tPARAMS ((tree decl));\n bool cgraph_calls_p\t\t\tPARAMS ((tree, tree));\n+struct cgraph_local_info *cgraph_local_info PARAMS ((tree));\n+struct cgraph_global_info *cgraph_global_info PARAMS ((tree));\n \n /* In cgraphunit.c  */\n void cgraph_finalize_function\t\tPARAMS ((tree, tree));"}, {"sha": "81a8b2e29f47d387c04517511182a48cb1047dbc", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -33,11 +33,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"debug.h\"\n #include \"target.h\"\n #include \"cgraph.h\"\n+#include \"diagnostic.h\"\n \n static void cgraph_expand_functions PARAMS ((void));\n static void cgraph_mark_functions_to_output PARAMS ((void));\n static void cgraph_expand_function PARAMS ((struct cgraph_node *));\n static tree record_call_1 PARAMS ((tree *, int *, void *));\n+static void cgraph_mark_local_functions PARAMS ((void));\n \n /* Analyze function once it is parsed.  Set up the local information\n    available - create cgraph edges for function calles via BODY.  */\n@@ -51,8 +53,10 @@ cgraph_finalize_function (decl, body)\n \n   node->decl = decl;\n \n-  /* Set TREE_UNINLINABLE flag.  */\n-  tree_inlinable_function_p (decl);\n+  if (flag_inline_trees)\n+    node->local.inline_many = tree_inlinable_function_p (decl);\n+  else\n+    node->local.inline_many = 0;\n \n   (*debug_hooks->deferred_inline_function) (decl);\n }\n@@ -217,7 +221,7 @@ cgraph_mark_functions_to_output ()\n \n       if (DECL_SAVED_TREE (decl)\n \t  && (node->needed\n-\t      || (DECL_UNINLINABLE (decl) && node->reachable)\n+\t      || (!node->local.inline_many && node->reachable)\n \t      || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \t  && !TREE_ASM_WRITTEN (decl) && !node->origin\n \t  && !DECL_EXTERNAL (decl))\n@@ -235,6 +239,8 @@ cgraph_expand_function (node)\n   announce_function (decl);\n   if (flag_inline_trees)\n     optimize_inline_calls (decl);\n+\n+  /* Avoid RTL inlining from taking place.  */\n   (*lang_hooks.callgraph.expand_function) (decl);\n   if (DECL_UNINLINABLE (decl))\n     DECL_SAVED_TREE (decl) = NULL;\n@@ -325,15 +331,41 @@ cgraph_expand_functions ()\n   free (order);\n }\n \n+/* Mark all local functions.\n+   We can not use node->needed directly as it is modified during\n+   execution of cgraph_optimize.  */\n+\n+static void\n+cgraph_mark_local_functions ()\n+{\n+  struct cgraph_node *node;\n+\n+  if (!quiet_flag)\n+    fprintf (stderr, \"\\n\\nMarking local functions:\");\n+\n+  /* Figure out functions we want to assemble.  */\n+  for (node = cgraph_nodes; node; node = node->next)\n+    {\n+      node->local.local = (!node->needed\n+\t\t           && DECL_SAVED_TREE (node->decl)\n+\t\t           && !TREE_PUBLIC (node->decl));\n+      if (node->local.local)\n+\tannounce_function (node->decl);\n+    }\n+}\n+\n+\n /* Perform simple optimizations based on callgraph.  */\n \n void\n cgraph_optimize ()\n {\n   struct cgraph_node *node;\n   bool changed = true;\n-  struct cgraph_edge *edge;\n \n+  cgraph_mark_local_functions ();\n+\n+  cgraph_global_info_ready = true;\n   if (!quiet_flag)\n     fprintf (stderr, \"\\n\\nAssembling functions:\");\n \n@@ -343,18 +375,29 @@ cgraph_optimize ()\n      Later we should move all inlining decisions to callgraph code to make\n      this impossible.  */\n   cgraph_expand_functions ();\n-  while (changed)\n+  if (!quiet_flag)\n+    fprintf (stderr, \"\\n\\nAssembling functions that failed to inline:\");\n+  while (changed && !errorcount && !sorrycount)\n     {\n       changed = false;\n       for (node = cgraph_nodes; node; node = node->next)\n \t{\n-\t  if (!node->needed)\n-\t    continue;\n-\n-\t  for (edge = node->callees; edge; edge = edge->next_callee)\n-\t    if (!edge->callee->needed)\n-\t      changed = edge->callee->needed = true;\n+\t  tree decl = node->decl;\n+\t  if (!node->origin\n+\t      && !TREE_ASM_WRITTEN (decl)\n+\t      && DECL_SAVED_TREE (decl)\n+\t      && !DECL_EXTERNAL (decl))\n+\t    {\n+\t      struct cgraph_edge *edge;\n+\n+\t      for (edge = node->callers; edge; edge = edge->next_caller)\n+\t\tif (TREE_ASM_WRITTEN (edge->caller->decl))\n+\t\t  {\n+\t\t    changed = true;\n+\t\t    cgraph_expand_function (node);\n+\t\t    break;\n+\t\t  }\n+\t    }\n \t}\n     }\n-  cgraph_expand_functions ();\n }"}, {"sha": "beafa792cc7c1ee0ab2557e7de3f11890cec4779", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -194,7 +194,7 @@ extern void x86_emit_floatuns PARAMS ((rtx [2]));\n \n \n #ifdef TREE_CODE\n-extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx));\n+extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, tree));\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern int function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t   enum machine_mode,\n@@ -226,6 +226,7 @@ extern int x86_field_alignment PARAMS ((tree, int));\n \n extern rtx ix86_tls_get_addr PARAMS ((void));\n extern void x86_machine_dependent_reorg PARAMS ((rtx));\n+extern bool ix86_must_pass_in_stack PARAMS ((enum machine_mode mode, tree));\n \n /* In winnt.c  */\n extern int i386_pe_dllexport_name_p PARAMS ((const char *));"}, {"sha": "639ea1b180bcfece1148618814b2b6b201a9e9ad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n+#include \"cgraph.h\"\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT (-1)\n@@ -1765,13 +1766,15 @@ ix86_function_arg_regno_p (regno)\n    For a library call, FNTYPE is 0.  */\n \n void\n-init_cumulative_args (cum, fntype, libname)\n+init_cumulative_args (cum, fntype, libname, fndecl)\n      CUMULATIVE_ARGS *cum;\t/* Argument info to initialize */\n      tree fntype;\t\t/* tree ptr for function decl */\n      rtx libname;\t\t/* SYMBOL_REF of library name or 0 */\n+     tree fndecl;\n {\n   static CUMULATIVE_ARGS zero_cum;\n   tree param, next_param;\n+  bool user_convention = false;\n \n   if (TARGET_DEBUG_ARG)\n     {\n@@ -1797,7 +1800,10 @@ init_cumulative_args (cum, fntype, libname)\n       tree attr = lookup_attribute (\"regparm\", TYPE_ATTRIBUTES (fntype));\n \n       if (attr)\n-\tcum->nregs = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n+\t{\n+\t  cum->nregs = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (attr)));\n+\t  user_convention = true;\n+\t}\n     }\n   cum->maybe_vaarg = false;\n \n@@ -1808,6 +1814,23 @@ init_cumulative_args (cum, fntype, libname)\n \t{\n \t  cum->nregs = 2;\n \t  cum->fastcall = 1;\n+\t  user_convention = true;\n+\t}\n+    }\n+\n+  /* Use register calling convention for local functions when possible.  */\n+  if (!TARGET_64BIT && !user_convention && fndecl\n+      && flag_unit_at_a_time)\n+    {\n+      struct cgraph_local_info *i = cgraph_local_info (fndecl);\n+      if (i && i->local)\n+\t{\n+\t  /* We can't use regparm(3) for nested functions as these use\n+\t     static chain pointer in third argument.  */\n+\t  if (DECL_CONTEXT (fndecl) && !DECL_NO_STATIC_CHAIN (fndecl))\n+\t    cum->nregs = 2;\n+\t  else\n+\t    cum->nregs = 3;\n \t}\n     }\n \n@@ -1914,6 +1937,10 @@ classify_argument (mode, type, classes, bit_offset)\n   if (bytes < 0)\n     return 0;\n \n+  if (mode != VOIDmode\n+      && MUST_PASS_IN_STACK (mode, type))\n+    return 0;\n+\n   if (type && AGGREGATE_TYPE_P (type))\n     {\n       int i;\n@@ -15639,4 +15666,15 @@ x86_emit_floatuns (operands)\n   emit_label (donelab);\n }\n \n+/* Return if we do not know how to pass TYPE solely in registers.  */\n+bool\n+ix86_must_pass_in_stack (mode, type)\n+\tenum machine_mode mode;\n+\ttree type;\n+{\n+   if (default_must_pass_in_stack (mode, type))\n+     return true;\n+   return (!TARGET_64BIT && type && mode == TImode);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "4b21c8691614eeb5359828da9d891ecddea9d178", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -1664,18 +1664,7 @@ enum reg_class\n    definition that is usually appropriate, refer to expr.h for additional\n    documentation. If `REG_PARM_STACK_SPACE' is defined, the argument will be\n    computed in the stack and then loaded into a register.  */\n-#define MUST_PASS_IN_STACK(MODE, TYPE)\t\t\t\t\\\n-  ((TYPE) != 0\t\t\t\t\t\t\t\\\n-   && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\t\\\n-       || TREE_ADDRESSABLE (TYPE)\t\t\t\t\\\n-       || ((MODE) == TImode)\t\t\t\t\t\\\n-       || ((MODE) == BLKmode \t\t\t\t\t\\\n-\t   && ! ((TYPE) != 0\t\t\t\t\t\\\n-\t\t && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST \\\n-\t\t && 0 == (int_size_in_bytes (TYPE)\t\t\\\n-\t\t\t  % (PARM_BOUNDARY / BITS_PER_UNIT)))\t\\\n-\t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\t\\\n-\t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n+#define MUST_PASS_IN_STACK(MODE, TYPE)  ix86_must_pass_in_stack ((MODE), (TYPE))\n \n /* Value is the number of bytes of arguments automatically\n    popped when returning from a subroutine call.\n@@ -1743,8 +1732,8 @@ typedef struct ix86_args {\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n-#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT) \\\n-  init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME))\n+#define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL) \\\n+  init_cumulative_args (&(CUM), (FNTYPE), (LIBNAME), (FNDECL))\n \n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE."}, {"sha": "c779bfba8381a73f36de02567679755b9f676307", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -3521,8 +3521,8 @@ invoking @option{-O2} on programs that use computed gotos.\n @item -O3\n @opindex O3\n Optimize yet more.  @option{-O3} turns on all optimizations specified by\n-@option{-O2} and also turns on the @option{-finline-functions} and\n-@option{-frename-registers} options.\n+@option{-O2} and also turns on the @option{-finline-functions},\n+@option{-funit-at-a-time} and @option{-frename-registers} options.\n \n @item -O0\n @opindex O0"}, {"sha": "b67b566c858a40368bc0dfdfbf7b23f5e21b3f2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -1,3 +1,7 @@\n+Wed Mar  5 02:05:19 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/i386-local.c: New.\n+\n Tue Mar  4 19:39:18 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc.dg/sh-relax.c: Disable for sh64-*-*."}, {"sha": "ed4cef3f337ae26a2723fd42691572254092c43f", "filename": "gcc/testsuite/gcc.dg/i386-local.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-local.c?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -funit-at-a-time\" } */\n+/* { dg-final { scan-assembler \"magic.*eax\" } } */\n+\n+/* Verify that local calling convention is used.  */\n+static t(int) __attribute__ ((noinline));\n+m()\n+{\n+\tt(1);\n+}\n+static t(int a)\n+{\n+\tasm(\"magic %1\"::\"g\"(a));\n+}"}, {"sha": "2dbdf4f8c95cc0a9aaf8ae73a75e0ca70e29c955", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafc5b82d5d54972593f6270b7b1ed14e2c18bca/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dafc5b82d5d54972593f6270b7b1ed14e2c18bca", "patch": "@@ -2518,6 +2518,7 @@ rest_of_compilation (decl)\n \n       if (inlinable\n \t  || (DECL_INLINE (decl)\n+\t      && flag_inline_functions\n \t      && ((! TREE_PUBLIC (decl) && ! TREE_ADDRESSABLE (decl)\n \t\t   && ! TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n \t\t   && ! flag_keep_inline_functions)"}]}