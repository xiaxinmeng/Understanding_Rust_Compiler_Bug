{"sha": "93c89ab30835c0b518ea2d0c822edc74a68f192a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNjODlhYjMwODM1YzBiNTE4ZWEyZDBjODIyZWRjNzRhNjhmMTkyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-10-27T21:30:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-27T21:30:52Z"}, "message": "alpha.h (enum reg_class): Add PV_REG.\n\n        * config/alpha/alpha.h (enum reg_class): Add PV_REG.\n        (REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS): Update.\n        (REG_CLASS_FROM_LETTER): Assign it to 'c'.\n        * config/alpha/alpha.md (call_osf_1): Use it.\n        (call_value_osf_1): Likewise.\n\nFrom-SVN: r37091", "tree": {"sha": "da90883b82a9a27e072be2810a265d0b96d792b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da90883b82a9a27e072be2810a265d0b96d792b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93c89ab30835c0b518ea2d0c822edc74a68f192a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c89ab30835c0b518ea2d0c822edc74a68f192a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93c89ab30835c0b518ea2d0c822edc74a68f192a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93c89ab30835c0b518ea2d0c822edc74a68f192a/comments", "author": null, "committer": null, "parents": [{"sha": "10c9f189d4c0730eb59e940edb462b58f58c8457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c9f189d4c0730eb59e940edb462b58f58c8457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c9f189d4c0730eb59e940edb462b58f58c8457"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "db875db9d3f9f3803be7628120132a0e8f9e9448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93c89ab30835c0b518ea2d0c822edc74a68f192a", "patch": "@@ -1,5 +1,11 @@\n 2000-10-27  Richard Henderson  <rth@redhat.com>\n \n+\t* config/alpha/alpha.h (enum reg_class): Add PV_REG.\n+\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS, REGNO_REG_CLASS): Update.\n+\t(REG_CLASS_FROM_LETTER): Assign it to 'c'.\n+\t* config/alpha/alpha.md (call_osf_1): Use it.\n+\t(call_value_osf_1): Likewise.\n+\n \t* config/ia64/ia64.c: Revert 10-23 patch.\n \t(ia64_hard_regno_rename_ok): New.\n \t* config/ia64/ia64-protos.h: Declare it."}, {"sha": "428bd47403e0718911ffd37a132ee0200bd11717", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=93c89ab30835c0b518ea2d0c822edc74a68f192a", "patch": "@@ -719,30 +719,32 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    For any two classes, it is very desirable that there be another\n    class that represents their union.  */\n    \n-enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n+enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n \t\t LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n #define REG_CLASS_NAMES\t\t\t\t\\\n- {\"NO_REGS\", \"GENERAL_REGS\", \"FLOAT_REGS\", \"ALL_REGS\" }\n+ {\"NO_REGS\", \"PV_REG\", \"GENERAL_REGS\", \"FLOAT_REGS\", \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n #define REG_CLASS_CONTENTS\t\\\n-  { {0, 0}, {~0, 0x80000000}, {0, 0x7fffffff}, {~0, ~0} }\n+  { {0, 0}, {0x08000000, 0}, {~0, 0x80000000}, {0, 0x7fffffff}, {~0, ~0} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO) \\\n- ((REGNO) >= 32 && (REGNO) <= 62 ? FLOAT_REGS : GENERAL_REGS)\n+#define REGNO_REG_CLASS(REGNO)\t\t\t\\\n+ ((REGNO) == 27 ? PV_REG\t\t\t\\\n+  : (REGNO) >= 32 && (REGNO) <= 62 ? FLOAT_REGS\t\\\n+  : GENERAL_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS NO_REGS\n@@ -751,7 +753,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n /* Get reg_class from a letter such as appears in the machine description.  */\n \n #define REG_CLASS_FROM_LETTER(C)\t\\\n- ((C) == 'f' ? FLOAT_REGS : NO_REGS)\n+ ((C) == 'c' ? PV_REG : (C) == 'f' ? FLOAT_REGS : NO_REGS)\n \n /* Define this macro to change register usage conditional on target flags.  */\n /* #define CONDITIONAL_REGISTER_USAGE  */"}, {"sha": "eb1c2e5e1d920a01073674279e98ebbeb1072ec8", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93c89ab30835c0b518ea2d0c822edc74a68f192a/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=93c89ab30835c0b518ea2d0c822edc74a68f192a", "patch": "@@ -4223,7 +4223,7 @@\n }\")\n \n (define_insn \"*call_osf_1\"\n-  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,i\"))\n+  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"c,R,i\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 27))\n    (clobber (reg:DI 26))]\n@@ -5976,7 +5976,7 @@\n \n (define_insn \"*call_value_osf_1\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,R,i\"))\n+\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"c,R,i\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:DI 27))\n    (clobber (reg:DI 26))]"}]}