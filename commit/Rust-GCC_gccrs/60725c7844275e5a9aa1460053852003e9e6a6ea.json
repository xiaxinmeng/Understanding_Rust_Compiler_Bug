{"sha": "60725c7844275e5a9aa1460053852003e9e6a6ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3MjVjNzg0NDI3NWU1YTlhYTE0NjAwNTM4NTIwMDNlOWU2YTZlYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-29T09:44:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-29T09:44:27Z"}, "message": "(convert_memory_address, case PLUS): Fix error in last change.\n\nFrom-SVN: r12378", "tree": {"sha": "de4a6aa487e6f4821282b0ee827ef5d181eee078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4a6aa487e6f4821282b0ee827ef5d181eee078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60725c7844275e5a9aa1460053852003e9e6a6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60725c7844275e5a9aa1460053852003e9e6a6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60725c7844275e5a9aa1460053852003e9e6a6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60725c7844275e5a9aa1460053852003e9e6a6ea/comments", "author": null, "committer": null, "parents": [{"sha": "100338dfc493aef6cfcaba4d6faca31fc4a6f0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100338dfc493aef6cfcaba4d6faca31fc4a6f0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100338dfc493aef6cfcaba4d6faca31fc4a6f0a8"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "ce5128b756b2e68592abbf7d2d1bb82c57c59de6", "filename": "gcc/explow.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60725c7844275e5a9aa1460053852003e9e6a6ea/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60725c7844275e5a9aa1460053852003e9e6a6ea/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=60725c7844275e5a9aa1460053852003e9e6a6ea", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for manipulating rtx's in semantically interesting ways.\n-   Copyright (C) 1987, 1991, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1991, 1994, 1995, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -331,10 +331,12 @@ convert_memory_address (to_mode, x)\n     case MULT:\n       /* For addition the second operand is a small constant, we can safely\n \t permute the converstion and addition operation.  We can always safely\n-\t permute them if we are making the address narrower.  */\n+\t permute them if we are making the address narrower.  In addition,\n+\t always permute the operations if this is a constant.  */\n       if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n \t  || (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t      && INTVAL (x) + 20000 < 40000))\n+\t      && (INTVAL (XEXP (x, 1)) + 20000 < 40000\n+\t\t  || CONSTANT_P (XEXP (x, 0)))))\n \treturn gen_rtx (GET_CODE (x), to_mode, \n \t\t\tconvert_memory_address (to_mode, XEXP (x, 0)),\n \t\t\tconvert_memory_address (to_mode, XEXP (x, 1)));"}]}