{"sha": "2290121c716d27dbb5078b87a78e2479fea4ac97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5MDEyMWM3MTZkMjdkYmI1MDc4Yjg3YTc4ZTI0NzlmZWE0YWM5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-10-17T08:25:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-10-17T08:25:15Z"}, "message": "re PR target/32961 (Gcc has different requirements for x86 shift xmm intrinsics)\n\n\tPR target/32961\n\t* config/i386/i386.c (ix86_expand_builtin) [IX86_BUILTIN_PSLLWI128,\n\tIX86_BUILTIN_PSLLDI128, BUILTIN_PSLLQI128, IX86_BUILTIN_PSRAWI128,\n\tIX86_BUILTIN_PSRADI128, IX86_BUILTIN_PSRLWI128,\n\tIX86_BUILTIN_PSRLDI128, IX86_BUILTIN_PSRLQI128]: Do not require\n\timmediate shift value.\n\tconfig/i386/emmintrin.h (_mm_slli_epi16, _mm_slli_epi32,\n\t_mm_slli_epi64, _mm_srai_epi16, _mm_srai_epi32, _mm_srli_epi16,\n\t_mm_srli_epi32, _mm_srli_epi64): Remove 'const' from count argument.\n\tRemove macros for !__OPTIMIZE__ case.\n\ntestsuite/ChangeLog:\n\n\tPR target/32961\n\t* gcc.target/i386/pr32961.c: New testcase.\n\t* gcc.target/i386/sse-13.c: Remove __builtin_ia32_psllwi128,\n\t__builtin_ia32_psrlqi128, __builtin_ia32_psrlwi128,\n\t__builtin_ia32_psrldi128, __builtin_ia32_psrawi128,\n\t__builtin_ia32_psradi128, __builtin_ia32_psllqi128 and\n\t__builtin_ia32_pslldi128 defines.\n\nFrom-SVN: r129403", "tree": {"sha": "5e2d9406e6e6795981e3fbfabc6edef884e135ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e2d9406e6e6795981e3fbfabc6edef884e135ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2290121c716d27dbb5078b87a78e2479fea4ac97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2290121c716d27dbb5078b87a78e2479fea4ac97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2290121c716d27dbb5078b87a78e2479fea4ac97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2290121c716d27dbb5078b87a78e2479fea4ac97/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36dcec91428522bf62c0f1bac6bff84b67fff8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36dcec91428522bf62c0f1bac6bff84b67fff8a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36dcec91428522bf62c0f1bac6bff84b67fff8a7"}], "stats": {"total": 152, "additions": 56, "deletions": 96}, "files": [{"sha": "a37131f8f1f9898f9137066f191a822b8df141db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1,3 +1,16 @@\n+2007-10-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32961\n+\t* config/i386/i386.c (ix86_expand_builtin) [IX86_BUILTIN_PSLLWI128,\n+\tIX86_BUILTIN_PSLLDI128, BUILTIN_PSLLQI128, IX86_BUILTIN_PSRAWI128,\n+\tIX86_BUILTIN_PSRADI128, IX86_BUILTIN_PSRLWI128,\n+\tIX86_BUILTIN_PSRLDI128, IX86_BUILTIN_PSRLQI128]: Do not require\n+\timmediate shift value.\n+\tconfig/i386/emmintrin.h (_mm_slli_epi16, _mm_slli_epi32,\n+\t_mm_slli_epi64, _mm_srai_epi16, _mm_srai_epi32, _mm_srli_epi16,\n+\t_mm_srli_epi32, _mm_srli_epi64): Remove 'const' from count argument.\n+\tRemove macros for !__OPTIMIZE__ case.\n+\n 2007-10-17  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-ssa-structalias.c (rewrite_constraints): Don't test for"}, {"sha": "0451ed7deffb7091247646aceb68342de68cea20", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1113,51 +1113,35 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n   return (__m128i)__builtin_ia32_pmuludq128 ((__v4si)__A, (__v4si)__B);\n }\n \n-#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_slli_epi16 (__m128i __A, const int __B)\n+_mm_slli_epi16 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_slli_epi32 (__m128i __A, const int __B)\n+_mm_slli_epi32 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_pslldi128 ((__v4si)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_slli_epi64 (__m128i __A, const int __B)\n+_mm_slli_epi64 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psllqi128 ((__v2di)__A, __B);\n }\n-#else\n-#define _mm_slli_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psllwi128 ((__v8hi)(__A), __B))\n-#define _mm_slli_epi32(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pslldi128 ((__v4si)(__A), __B))\n-#define _mm_slli_epi64(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psllqi128 ((__v2di)(__A), __B))\n-#endif\n \n-#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srai_epi16 (__m128i __A, const int __B)\n+_mm_srai_epi16 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psrawi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srai_epi32 (__m128i __A, const int __B)\n+_mm_srai_epi32 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);\n }\n-#else\n-#define _mm_srai_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrawi128 ((__v8hi)(__A), __B))\n-#define _mm_srai_epi32(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psradi128 ((__v4si)(__A), __B))\n-#endif\n \n #ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n@@ -1178,32 +1162,23 @@ _mm_slli_si128 (__m128i __A, const int __B)\n   ((__m128i)__builtin_ia32_pslldqi128 (__A, (__B) * 8))\n #endif\n \n-#ifdef __OPTIMIZE__\n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srli_epi16 (__m128i __A, const int __B)\n+_mm_srli_epi16 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psrlwi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srli_epi32 (__m128i __A, const int __B)\n+_mm_srli_epi32 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psrldi128 ((__v4si)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n-_mm_srli_epi64 (__m128i __A, const int __B)\n+_mm_srli_epi64 (__m128i __A, int __B)\n {\n   return (__m128i)__builtin_ia32_psrlqi128 ((__v2di)__A, __B);\n }\n-#else\n-#define _mm_srli_epi16(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrlwi128 ((__v8hi)(__A), __B))\n-#define _mm_srli_epi32(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrldi128 ((__v4si)(__A), __B))\n-#define _mm_srli_epi64(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrlqi128 ((__v2di)(__A), __B))\n-#endif\n \n static __inline __m128i __attribute__((__always_inline__, __artificial__))\n _mm_sll_epi16 (__m128i __A, __m128i __B)"}, {"sha": "5ed8e2d372e24de13079157e697f2e78f76c8901", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 52, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -20680,80 +20680,38 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return target;\n \n-    case IX86_BUILTIN_PSLLWI128:\n-      icode = CODE_FOR_ashlv8hi3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSLLDI128:\n-      icode = CODE_FOR_ashlv4si3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSLLQI128:\n-      icode = CODE_FOR_ashlv2di3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSRAWI128:\n-      icode = CODE_FOR_ashrv8hi3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSRADI128:\n-      icode = CODE_FOR_ashrv4si3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSRLWI128:\n-      icode = CODE_FOR_lshrv8hi3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSRLDI128:\n-      icode = CODE_FOR_lshrv4si3;\n-      goto do_pshifti;\n-    case IX86_BUILTIN_PSRLQI128:\n-      icode = CODE_FOR_lshrv2di3;\n-      goto do_pshifti;\n-    do_pshifti:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      if (!CONST_INT_P (op1))\n-\t{\n-\t  error (\"shift must be an immediate\");\n-\t  return const0_rtx;\n-\t}\n-      if (INTVAL (op1) < 0 || INTVAL (op1) > 255)\n-\top1 = GEN_INT (255);\n-\n-      tmode = insn_data[icode].operand[0].mode;\n-      mode1 = insn_data[icode].operand[1].mode;\n-      if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n-\top0 = copy_to_reg (op0);\n-\n-      target = gen_reg_rtx (tmode);\n-      pat = GEN_FCN (icode) (target, op0, op1);\n-      if (!pat)\n-\treturn 0;\n-      emit_insn (pat);\n-      return target;\n-\n     case IX86_BUILTIN_PSLLW128:\n+    case IX86_BUILTIN_PSLLWI128:\n       icode = CODE_FOR_ashlv8hi3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSLLD128:\n+    case IX86_BUILTIN_PSLLDI128:\n       icode = CODE_FOR_ashlv4si3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSLLQ128:\n+    case IX86_BUILTIN_PSLLQI128:\n       icode = CODE_FOR_ashlv2di3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSRAW128:\n+    case IX86_BUILTIN_PSRAWI128:\n       icode = CODE_FOR_ashrv8hi3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSRAD128:\n+    case IX86_BUILTIN_PSRADI128:\n       icode = CODE_FOR_ashrv4si3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSRLW128:\n+    case IX86_BUILTIN_PSRLWI128:\n       icode = CODE_FOR_lshrv8hi3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSRLD128:\n+    case IX86_BUILTIN_PSRLDI128:\n       icode = CODE_FOR_lshrv4si3;\n       goto do_pshift;\n     case IX86_BUILTIN_PSRLQ128:\n+    case IX86_BUILTIN_PSRLQI128:\n       icode = CODE_FOR_lshrv2di3;\n-      goto do_pshift;\n+\n     do_pshift:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -20766,7 +20724,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       if (! (*insn_data[icode].operand[1].predicate) (op0, mode1))\n \top0 = copy_to_reg (op0);\n \n-      op1 = simplify_gen_subreg (SImode, op1, GET_MODE (op1), 0);\n+      if (!CONST_INT_P (op1))\n+\top1 = simplify_gen_subreg (SImode, op1, GET_MODE (op1), 0);\n+\n       if (! (*insn_data[icode].operand[2].predicate) (op1, SImode))\n \top1 = copy_to_reg (op1);\n "}, {"sha": "49133d6ce61cdf37a31af8795400140d1f5f11a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1,3 +1,13 @@\n+2007-10-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32961\n+\t* gcc.target/i386/pr32961.c: New testcase.\n+\t* gcc.target/i386/sse-13.c: Remove __builtin_ia32_psllwi128,\n+\t__builtin_ia32_psrlqi128, __builtin_ia32_psrlwi128,\n+\t__builtin_ia32_psrldi128, __builtin_ia32_psrawi128,\n+\t__builtin_ia32_psradi128, __builtin_ia32_psllqi128 and\n+\t__builtin_ia32_pslldi128 defines.\n+\n 2007-10-17  Christopher D. Rickett <crickett@lanl.gov>\n \n \tPR fortran/33760"}, {"sha": "a2326289af982c72528770f22ef96c1d21ed0b0f", "filename": "gcc/testsuite/gcc.target/i386/pr32961.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32961.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32961.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32961.c?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -msse2\" } */\n+\n+#include <xmmintrin.h>\n+\n+void x (int n)\n+{\n+  __m128i a;\n+  a = _mm_slli_epi32 (a, n);\n+}"}, {"sha": "d32b14469ba765beb73653533a1b73bf73447ed0", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1,6 +1,6 @@\n /* Test that {,x,e,p,t,s,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -std=c89 -pedantic-errors.  */\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -msse4.1 -msse5\" } */\n \n #include <bmmintrin.h>"}, {"sha": "d4db15db6610a95e45a14cff08f35dd6de2a15e9", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2 -msse4.1 -msse5 \" } */\n \n /* Test that the intrinsics compile with optimization.  All of them are\n@@ -40,16 +40,8 @@\n #define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n \n /* emmintrin.h */\n-#define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n-#define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n-#define __builtin_ia32_psrlwi128(A, B) __builtin_ia32_psrlwi128(A, 1)\n-#define __builtin_ia32_psrldi128(A, B) __builtin_ia32_psrldi128(A, 1)\n #define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n #define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n-#define __builtin_ia32_psrawi128(A, B) __builtin_ia32_psrawi128(A, 1)\n-#define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n-#define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n-#define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n #define __builtin_ia32_pshufhw(A, N) __builtin_ia32_pshufhw(A, 0)\n #define __builtin_ia32_pshuflw(A, N) __builtin_ia32_pshuflw(A, 0)\n #define __builtin_ia32_pshufd(A, N) __builtin_ia32_pshufd(A, 0)"}, {"sha": "fc8266bf11b542dbdaa5acca1731c66cd9b6c94e", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2290121c716d27dbb5078b87a78e2479fea4ac97/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=2290121c716d27dbb5078b87a78e2479fea4ac97", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O0 -msse4.1 -msse5\" } */\n \n /* Test that the intrinsics compile without optimization.  All of them are"}]}