{"sha": "363dc72c15e5191a3f04bde3098793326f681b07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzZGM3MmMxNWU1MTkxYTNmMDRiZGUzMDk4NzkzMzI2ZjY4MWIwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-06-07T08:57:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-06-07T08:57:11Z"}, "message": "dumpfile.h (enum tree_dump_index): Rename TDI_generic to TDI_gimple.\n\n\t* dumpfile.h (enum tree_dump_index): Rename TDI_generic to\n\tTDI_gimple.\n\t(class dump_manager): Add register_dumps method.\n\t* dumpfile.c: Include langhooks.h.\n\t(dump_files): Use 0 instead of 3/4/5 for TDI_{original,gimple,nested}.\n\t(FIRST_AUTO_NUMBERED_DUMP): Decrease to 1.\n\t(FIRST_ME_AUTO_NUMBERED_DUMP): Define.\n\t(dump_manager::dump_register): Start with 512 entries instead of 32.\n\t(dump_manager::register_dumps): New method.\n\t* toplev.c (general_init): Instead of invoking register_dumps\n\tlanghook, invoke register_dumps method on the dump manager.\n\t* gimplify.c (gimplify_function_tree): Use TDI_gimple instead of\n\tTDI_generic.\n\n\t* gimple-parser.c (c_parser_parse_gimple_body): Use TDI_gimple instead\n\tof TDI_generic.\n\nFrom-SVN: r248947", "tree": {"sha": "112f3d360faa21defe2642147dcd3f2b5b6e39f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112f3d360faa21defe2642147dcd3f2b5b6e39f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/363dc72c15e5191a3f04bde3098793326f681b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363dc72c15e5191a3f04bde3098793326f681b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363dc72c15e5191a3f04bde3098793326f681b07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363dc72c15e5191a3f04bde3098793326f681b07/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49e478afe327f4950287bf77e8d8ba19e96a60f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e478afe327f4950287bf77e8d8ba19e96a60f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e478afe327f4950287bf77e8d8ba19e96a60f2"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "f5fc52765d59eb4f07902047c31d69276dc2fac5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -1,3 +1,19 @@\n+2017-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dumpfile.h (enum tree_dump_index): Rename TDI_generic to\n+\tTDI_gimple.\n+\t(class dump_manager): Add register_dumps method.\n+\t* dumpfile.c: Include langhooks.h.\n+\t(dump_files): Use 0 instead of 3/4/5 for TDI_{original,gimple,nested}.\n+\t(FIRST_AUTO_NUMBERED_DUMP): Decrease to 1.\n+\t(FIRST_ME_AUTO_NUMBERED_DUMP): Define.\n+\t(dump_manager::dump_register): Start with 512 entries instead of 32.\n+\t(dump_manager::register_dumps): New method.\n+\t* toplev.c (general_init): Instead of invoking register_dumps\n+\tlanghook, invoke register_dumps method on the dump manager.\n+\t* gimplify.c (gimplify_function_tree): Use TDI_gimple instead of\n+\tTDI_generic.\n+\n 2017-06-07  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/md.texi: Clarify the restrictions on a define_insn condition."}, {"sha": "0f23eb3773b6391c1e1b7d7e5230c8761f51305a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -1,3 +1,8 @@\n+2017-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-parser.c (c_parser_parse_gimple_body): Use TDI_gimple instead\n+\tof TDI_generic.\n+\n 2017-06-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/79983"}, {"sha": "4a55904662e96cc3bb703ac3a9d27c1c289fc5fd", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -116,7 +116,7 @@ c_parser_parse_gimple_body (c_parser *parser)\n      we have to go through lowering again.  */\n   cfun->curr_properties = PROP_gimple_any;\n \n-  dump_function (TDI_generic, current_function_decl);\n+  dump_function (TDI_gimple, current_function_decl);\n }\n \n /* Parse a compound statement in gimple function body."}, {"sha": "c746d0b24fffd57fcb005637e8bb350c27f2f5d3", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"context.h\"\n #include \"tree-cfg.h\"\n+#include \"langhooks.h\"\n \n /* If non-NULL, return one past-the-end of the matching SUBPART of\n    the WHOLE string.  */\n@@ -59,10 +60,11 @@ static struct dump_file_info dump_files[TDI_end] =\n   DUMP_FILE_INFO (\".cgraph\", \"ipa-cgraph\", DK_ipa, 0),\n   DUMP_FILE_INFO (\".type-inheritance\", \"ipa-type-inheritance\", DK_ipa, 0),\n   DUMP_FILE_INFO (\".ipa-clones\", \"ipa-clones\", DK_ipa, 0),\n-  DUMP_FILE_INFO (\".original\", \"tree-original\", DK_tree, 3),\n-  DUMP_FILE_INFO (\".gimple\", \"tree-gimple\", DK_tree, 4),\n-  DUMP_FILE_INFO (\".nested\", \"tree-nested\", DK_tree, 5),\n-#define FIRST_AUTO_NUMBERED_DUMP 3\n+  DUMP_FILE_INFO (\".original\", \"tree-original\", DK_tree, 0),\n+  DUMP_FILE_INFO (\".gimple\", \"tree-gimple\", DK_tree, 0),\n+  DUMP_FILE_INFO (\".nested\", \"tree-nested\", DK_tree, 0),\n+#define FIRST_AUTO_NUMBERED_DUMP 1\n+#define FIRST_ME_AUTO_NUMBERED_DUMP 3\n \n   DUMP_FILE_INFO (NULL, \"lang-all\", DK_lang, 0),\n   DUMP_FILE_INFO (NULL, \"tree-all\", DK_tree, 0),\n@@ -179,7 +181,7 @@ dump_register (const char *suffix, const char *swtch, const char *glob,\n   if (count >= m_extra_dump_files_alloced)\n     {\n       if (m_extra_dump_files_alloced == 0)\n-\tm_extra_dump_files_alloced = 32;\n+\tm_extra_dump_files_alloced = 512;\n       else\n \tm_extra_dump_files_alloced *= 2;\n       m_extra_dump_files = XRESIZEVEC (struct dump_file_info,\n@@ -200,6 +202,25 @@ dump_register (const char *suffix, const char *swtch, const char *glob,\n }\n \n \n+/* Allow languages and middle-end to register their dumps before the\n+   optimization passes.  */\n+\n+void\n+gcc::dump_manager::\n+register_dumps ()\n+{\n+  lang_hooks.register_dumps (this);\n+  /* If this assert fails, some FE registered more than\n+     FIRST_ME_AUTO_NUMBERED_DUMP - FIRST_AUTO_NUMBERED_DUMP\n+     dump files.  Bump FIRST_ME_AUTO_NUMBERED_DUMP accordingly.  */\n+  gcc_assert (m_next_dump <= FIRST_ME_AUTO_NUMBERED_DUMP);\n+  m_next_dump = FIRST_ME_AUTO_NUMBERED_DUMP;\n+  dump_files[TDI_original].num = m_next_dump++;\n+  dump_files[TDI_gimple].num = m_next_dump++;\n+  dump_files[TDI_nested].num = m_next_dump++;\n+}\n+\n+\n /* Return the dump_file_info for the given phase.  */\n \n struct dump_file_info *"}, {"sha": "4d9f6b3656a694124f2521ed46a42cef4fd7d44a", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -31,7 +31,7 @@ enum tree_dump_index\n   TDI_inheritance,\t\t/* dump type inheritance graph.  */\n   TDI_clones,\t\t\t/* dump IPA cloning decisions.  */\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n-  TDI_generic,\t\t\t/* dump each function after genericizing it */\n+  TDI_gimple,\t\t\t/* dump each function after gimplifying it */\n   TDI_nested,\t\t\t/* dump each function after unnesting it */\n \n   TDI_lang_all,\t\t\t/* enable all the language dumps.  */\n@@ -212,6 +212,11 @@ class dump_manager\n   dump_register (const char *suffix, const char *swtch, const char *glob,\n \t\t dump_kind dkind, int optgroup_flags, bool take_ownership);\n \n+  /* Allow languages and middle-end to register their dumps before the\n+     optimization passes.  */\n+  void\n+  register_dumps ();\n+\n   /* Return the dump_file_info for the given phase.  */\n   struct dump_file_info *\n   get_dump_file_info (int phase) const;"}, {"sha": "653057fd543cfe71306a95a61a88d2a81696fa0e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -12732,7 +12732,7 @@ gimplify_function_tree (tree fndecl)\n \n   pop_cfun ();\n \n-  dump_function (TDI_generic, fndecl);\n+  dump_function (TDI_gimple, fndecl);\n }\n \n /* Return a dummy expression of type TYPE in order to keep going after an"}, {"sha": "e6c69a4ba931bdbcf55bf0482f6474f6740bc683", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363dc72c15e5191a3f04bde3098793326f681b07/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=363dc72c15e5191a3f04bde3098793326f681b07", "patch": "@@ -1168,9 +1168,9 @@ general_init (const char *argv0, bool init_signals)\n      dump manager.  */\n   g = new gcc::context ();\n \n-  /* Allow languages to register their dumps before the optimization\n-     passes.  */\n-  lang_hooks.register_dumps (g->get_dumps ());\n+  /* Allow languages and middle-end to register their dumps before the\n+     optimization passes.  */\n+  g->get_dumps ()->register_dumps ();\n \n   /* Create the passes.  */\n   g->set_passes (new gcc::pass_manager (g));"}]}