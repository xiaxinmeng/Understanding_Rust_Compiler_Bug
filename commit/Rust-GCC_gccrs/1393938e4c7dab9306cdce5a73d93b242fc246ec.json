{"sha": "1393938e4c7dab9306cdce5a73d93b242fc246ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5MzkzOGU0YzdkYWI5MzA2Y2RjZTVhNzNkOTNiMjQyZmMyNDZlYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-31T10:26:06Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-31T10:26:06Z"}, "message": "aarch64: Fix target alignment for SVE [PR98119]\n\nThe vectoriser supports peeling for alignment using predication:\nwe move back to the previous aligned boundary and make the skipped\nelements inactive in the first loop iteration.  As it happens,\nthe costs for existing CPUs give an equal cost to aligned and\nunaligned accesses, so this feature is rarely used.\n\nHowever, the PR shows that when the feature was forced on, we were\nstill trying to align to a full-vector boundary even when using\npartial vectors.\n\ngcc/\n\tPR target/98119\n\t* config/aarch64/aarch64.c\n\t(aarch64_vectorize_preferred_vector_alignment): Query the size\n\tof the provided SVE vector; do not assume that all SVE vectors\n\thave the same size.\n\ngcc/testsuite/\n\tPR target/98119\n\t* gcc.target/aarch64/sve/pr98119.c: New test.", "tree": {"sha": "82f448fd1b8f033b997c7895a7850486f4ac5804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f448fd1b8f033b997c7895a7850486f4ac5804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1393938e4c7dab9306cdce5a73d93b242fc246ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1393938e4c7dab9306cdce5a73d93b242fc246ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1393938e4c7dab9306cdce5a73d93b242fc246ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1393938e4c7dab9306cdce5a73d93b242fc246ec/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7145b4bb6c8729a1e782373cb6256c06ed60465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7145b4bb6c8729a1e782373cb6256c06ed60465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7145b4bb6c8729a1e782373cb6256c06ed60465"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "f878721f13cce42e4b1806279f3da6addf04ba59", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1393938e4c7dab9306cdce5a73d93b242fc246ec/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1393938e4c7dab9306cdce5a73d93b242fc246ec/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1393938e4c7dab9306cdce5a73d93b242fc246ec", "patch": "@@ -20275,10 +20275,11 @@ aarch64_vectorize_preferred_vector_alignment (const_tree type)\n {\n   if (aarch64_sve_data_mode_p (TYPE_MODE (type)))\n     {\n-      /* If the length of the vector is fixed, try to align to that length,\n-\t otherwise don't try to align at all.  */\n+      /* If the length of the vector is a fixed power of 2, try to align\n+\t to that length, otherwise don't try to align at all.  */\n       HOST_WIDE_INT result;\n-      if (!BITS_PER_SVE_VECTOR.is_constant (&result))\n+      if (!GET_MODE_BITSIZE (TYPE_MODE (type)).is_constant (&result)\n+\t  || !pow2p_hwi (result))\n \tresult = TYPE_ALIGN (TREE_TYPE (type));\n       return result;\n     }"}, {"sha": "da6208c2ce35e48f3a6de9901c09383e69114da0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr98119.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1393938e4c7dab9306cdce5a73d93b242fc246ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1393938e4c7dab9306cdce5a73d93b242fc246ec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98119.c?ref=1393938e4c7dab9306cdce5a73d93b242fc246ec", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O3 -msve-vector-bits=512 -mtune=thunderx\" } */\n+\n+void\n+f (unsigned short *x)\n+{\n+  for (int i = 0; i < 1000; ++i)\n+    x[i] += x[i - 16];\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tubfx\\t[wx][0-9]+, [wx][0-9]+, #?1, #?5\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tx[0-9]+, x[0-9]+, #?-63\\n} } } */\n+/* { dg-final { scan-assembler {\\tubfx\\t[wx][0-9]+, [wx][0-9]+, #?1, #?4\\n} } } */\n+/* { dg-final { scan-assembler {\\tand\\tx[0-9]+, x[0-9]+, #?-31\\n} } } */"}]}