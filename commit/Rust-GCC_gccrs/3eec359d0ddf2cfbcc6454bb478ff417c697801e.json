{"sha": "3eec359d0ddf2cfbcc6454bb478ff417c697801e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlYzM1OWQwZGRmMmNmYmNjNjQ1NGJiNDc4ZmY0MTdjNjk3ODAxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-17T02:27:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-17T02:27:45Z"}, "message": "PR c++/80831 - ICE with -fsyntax-only.\n\n\t* decl2.c (c_parse_final_cleanups): Use cgraph_node::get_create.\n\nFrom-SVN: r249318", "tree": {"sha": "8345ca6d0b69339ee8befd8f77c7c88443d5bcec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8345ca6d0b69339ee8befd8f77c7c88443d5bcec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eec359d0ddf2cfbcc6454bb478ff417c697801e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eec359d0ddf2cfbcc6454bb478ff417c697801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eec359d0ddf2cfbcc6454bb478ff417c697801e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eec359d0ddf2cfbcc6454bb478ff417c697801e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b126bff44d96201be452bf3d1b220c515bc0e26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b126bff44d96201be452bf3d1b220c515bc0e26a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b126bff44d96201be452bf3d1b220c515bc0e26a"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "48a9cf698fe34494da5fc49631dcfccea72d48bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3eec359d0ddf2cfbcc6454bb478ff417c697801e", "patch": "@@ -1,5 +1,8 @@\n 2017-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/80831 - ICE with -fsyntax-only.\n+\t* decl2.c (c_parse_final_cleanups): Use cgraph_node::get_create.\n+\n \tPR c++/80639 - ICE with invalid PMF initialization.\n \tPR c++/80043 - ICE with -fpermissive\n \t* typeck.c (convert_for_assignment): Recurse when instantiate_type"}, {"sha": "69cb40f29983171b4facf9ecd86fc4f86e2e9653", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3eec359d0ddf2cfbcc6454bb478ff417c697801e", "patch": "@@ -4627,6 +4627,8 @@ c_parse_final_cleanups (void)\n \t  if (!DECL_SAVED_TREE (decl))\n \t    continue;\n \n+\t  cgraph_node *node = cgraph_node::get_create (decl);\n+\n \t  /* We lie to the back end, pretending that some functions\n \t     are not defined when they really are.  This keeps these\n \t     functions from being put out unnecessarily.  But, we must\n@@ -4647,9 +4649,6 @@ c_parse_final_cleanups (void)\n \t      && DECL_INITIAL (decl)\n \t      && decl_needed_p (decl))\n \t    {\n-\t      struct cgraph_node *node, *next;\n-\n-\t      node = cgraph_node::get (decl);\n \t      if (node->cpp_implicit_alias)\n \t\tnode = node->get_alias_target ();\n \n@@ -4659,7 +4658,8 @@ c_parse_final_cleanups (void)\n \t\t group, we need to mark all symbols in the same comdat group\n \t\t that way.  */\n \t      if (node->same_comdat_group)\n-\t\tfor (next = dyn_cast<cgraph_node *> (node->same_comdat_group);\n+\t\tfor (cgraph_node *next\n+\t\t       = dyn_cast<cgraph_node *> (node->same_comdat_group);\n \t\t     next != node;\n \t\t     next = dyn_cast<cgraph_node *> (next->same_comdat_group))\n \t\t  next->call_for_symbol_thunks_and_aliases (clear_decl_external,\n@@ -4673,7 +4673,7 @@ c_parse_final_cleanups (void)\n \t  if (!DECL_EXTERNAL (decl)\n \t      && decl_needed_p (decl)\n \t      && !TREE_ASM_WRITTEN (decl)\n-\t      && !cgraph_node::get (decl)->definition)\n+\t      && !node->definition)\n \t    {\n \t      /* We will output the function; no longer consider it in this\n \t\t loop.  */"}, {"sha": "19adb7e612939bf69a839a15de90ac4ab3918164", "filename": "gcc/testsuite/g++.dg/other/fsyntax-only1.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffsyntax-only1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eec359d0ddf2cfbcc6454bb478ff417c697801e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffsyntax-only1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffsyntax-only1.C?ref=3eec359d0ddf2cfbcc6454bb478ff417c697801e", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/80831\n+// { dg-options -fsyntax-only }\n+// { dg-do compile { target c++11 } }\n+\n+class A\n+{\n+public:\n+    virtual ~A() { }\n+};\n+\n+class B { };\n+\n+class C : public A { };\n+\n+template<class J>\n+class D : public C\n+{\n+public:\n+    D() { }\n+    ~D() { }\n+};\n+\n+class E\n+{\n+public:\n+    static E& p();\n+    B q();\n+    template<class J>\n+    B q(void (J::*r)())\n+    {\n+        new D<J>();\n+        return q();\n+    }\n+};\n+\n+void t()\n+{\n+  class F\n+  {\n+  public:\n+    virtual void s() { }\n+  };\n+  E& x = E::p();\n+  B y = x.q(&F::s);\n+}"}]}