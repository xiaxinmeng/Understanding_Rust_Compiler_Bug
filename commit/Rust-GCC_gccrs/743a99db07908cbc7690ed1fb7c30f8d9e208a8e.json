{"sha": "743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzYTk5ZGIwNzkwOGNiYzc2OTBlZDFmYjdjMzBmOGQ5ZTIwOGE4ZQ==", "commit": {"author": {"name": "Jan Kratochvil", "email": "jan.kratochvil@redhat.com", "date": "2011-06-13T22:30:02Z"}, "committer": {"name": "Jan Kratochvil", "email": "jkratoch@gcc.gnu.org", "date": "2011-06-13T22:30:02Z"}, "message": "cp-demangle.c (struct d_print_info): Remove field options.\n\nlibiberty/\n\t* cp-demangle.c (struct d_print_info): Remove field options.\n\t(d_print_init): Remove parameter options.\n\t(cplus_demangle_print_callback): Update all the callers.\n\t(d_print_comp, d_print_mod_list, d_print_mod, d_print_function_type)\n\t(d_print_array_type, d_print_expr_op, d_print_cast, d_print_subexpr):\n\tAdd parameter options, update all the callers.\n\nFrom-SVN: r174999", "tree": {"sha": "edbfb20aca65497bb0d913c3876e2a19c8529eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edbfb20aca65497bb0d913c3876e2a19c8529eff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743a99db07908cbc7690ed1fb7c30f8d9e208a8e/comments", "author": {"login": "jankratochvil", "id": 1223939, "node_id": "MDQ6VXNlcjEyMjM5Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1223939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankratochvil", "html_url": "https://github.com/jankratochvil", "followers_url": "https://api.github.com/users/jankratochvil/followers", "following_url": "https://api.github.com/users/jankratochvil/following{/other_user}", "gists_url": "https://api.github.com/users/jankratochvil/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankratochvil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankratochvil/subscriptions", "organizations_url": "https://api.github.com/users/jankratochvil/orgs", "repos_url": "https://api.github.com/users/jankratochvil/repos", "events_url": "https://api.github.com/users/jankratochvil/events{/privacy}", "received_events_url": "https://api.github.com/users/jankratochvil/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a45fe02fe761ba0c7642d0eb569283daef15a49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45fe02fe761ba0c7642d0eb569283daef15a49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45fe02fe761ba0c7642d0eb569283daef15a49e"}], "stats": {"total": 242, "additions": 124, "deletions": 118}, "files": [{"sha": "c2d49664f8f8ae74d98b830f368edb6192e3865c", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743a99db07908cbc7690ed1fb7c30f8d9e208a8e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743a99db07908cbc7690ed1fb7c30f8d9e208a8e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "patch": "@@ -1,3 +1,12 @@\n+2011-06-13  Jan Kratochvil  <jan.kratochvil@redhat.com>\n+\n+\t* cp-demangle.c (struct d_print_info): Remove field options.\n+\t(d_print_init): Remove parameter options.\n+\t(cplus_demangle_print_callback): Update all the callers.\n+\t(d_print_comp, d_print_mod_list, d_print_mod, d_print_function_type)\n+\t(d_print_array_type, d_print_expr_op, d_print_cast, d_print_subexpr):\n+\tAdd parameter options, update all the callers.\n+\n 2011-04-20  Jim Meyering  <meyering@redhat.com>\n \n \t* cp-demint.c (cplus_demangle_v3_components): Remove useless"}, {"sha": "0ac90f1a62523438b268139302ed1f681ecae5da", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 115, "deletions": 118, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743a99db07908cbc7690ed1fb7c30f8d9e208a8e/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743a99db07908cbc7690ed1fb7c30f8d9e208a8e/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=743a99db07908cbc7690ed1fb7c30f8d9e208a8e", "patch": "@@ -278,8 +278,6 @@ struct d_growable_string\n enum { D_PRINT_BUFFER_LENGTH = 256 };\n struct d_print_info\n {\n-  /* The options passed to the demangler.  */\n-  int options;\n   /* Fixed-length allocated buffer for demangled data, flushed to the\n      callback with a NUL termination once full.  */\n   char buf[D_PRINT_BUFFER_LENGTH];\n@@ -436,7 +434,7 @@ static void\n d_growable_string_callback_adapter (const char *, size_t, void *);\n \n static void\n-d_print_init (struct d_print_info *, int, demangle_callbackref, void *);\n+d_print_init (struct d_print_info *, demangle_callbackref, void *);\n \n static inline void d_print_error (struct d_print_info *);\n \n@@ -454,32 +452,32 @@ static inline void d_append_string (struct d_print_info *, const char *);\n static inline char d_last_char (struct d_print_info *);\n \n static void\n-d_print_comp (struct d_print_info *, const struct demangle_component *);\n+d_print_comp (struct d_print_info *, int, const struct demangle_component *);\n \n static void\n d_print_java_identifier (struct d_print_info *, const char *, int);\n \n static void\n-d_print_mod_list (struct d_print_info *, struct d_print_mod *, int);\n+d_print_mod_list (struct d_print_info *, int, struct d_print_mod *, int);\n \n static void\n-d_print_mod (struct d_print_info *, const struct demangle_component *);\n+d_print_mod (struct d_print_info *, int, const struct demangle_component *);\n \n static void\n-d_print_function_type (struct d_print_info *,\n+d_print_function_type (struct d_print_info *, int,\n                        const struct demangle_component *,\n                        struct d_print_mod *);\n \n static void\n-d_print_array_type (struct d_print_info *,\n+d_print_array_type (struct d_print_info *, int,\n                     const struct demangle_component *,\n                     struct d_print_mod *);\n \n static void\n-d_print_expr_op (struct d_print_info *, const struct demangle_component *);\n+d_print_expr_op (struct d_print_info *, int, const struct demangle_component *);\n \n static void\n-d_print_cast (struct d_print_info *, const struct demangle_component *);\n+d_print_cast (struct d_print_info *, int, const struct demangle_component *);\n \n static int d_demangle_callback (const char *, int,\n                                 demangle_callbackref, void *);\n@@ -3293,10 +3291,9 @@ d_growable_string_callback_adapter (const char *s, size_t l, void *opaque)\n /* Initialize a print information structure.  */\n \n static void\n-d_print_init (struct d_print_info *dpi, int options,\n-              demangle_callbackref callback, void *opaque)\n+d_print_init (struct d_print_info *dpi, demangle_callbackref callback,\n+\t      void *opaque)\n {\n-  dpi->options = options;\n   dpi->len = 0;\n   dpi->last_char = '\\0';\n   dpi->templates = NULL;\n@@ -3392,9 +3389,9 @@ cplus_demangle_print_callback (int options,\n {\n   struct d_print_info dpi;\n \n-  d_print_init (&dpi, options, callback, opaque);\n+  d_print_init (&dpi, callback, opaque);\n \n-  d_print_comp (&dpi, dc);\n+  d_print_comp (&dpi, options, dc);\n \n   d_print_flush (&dpi);\n \n@@ -3537,7 +3534,7 @@ d_pack_length (const struct demangle_component *dc)\n    if needed.  */\n \n static void\n-d_print_subexpr (struct d_print_info *dpi,\n+d_print_subexpr (struct d_print_info *dpi, int options,\n \t\t const struct demangle_component *dc)\n {\n   int simple = 0;\n@@ -3546,15 +3543,15 @@ d_print_subexpr (struct d_print_info *dpi,\n     simple = 1;\n   if (!simple)\n     d_append_char (dpi, '(');\n-  d_print_comp (dpi, dc);\n+  d_print_comp (dpi, options, dc);\n   if (!simple)\n     d_append_char (dpi, ')');\n }\n \n /* Subroutine to handle components.  */\n \n static void\n-d_print_comp (struct d_print_info *dpi,\n+d_print_comp (struct d_print_info *dpi, int options,\n               const struct demangle_component *dc)\n {\n   if (dc == NULL)\n@@ -3568,20 +3565,20 @@ d_print_comp (struct d_print_info *dpi,\n   switch (dc->type)\n     {\n     case DEMANGLE_COMPONENT_NAME:\n-      if ((dpi->options & DMGL_JAVA) == 0)\n+      if ((options & DMGL_JAVA) == 0)\n \td_append_buffer (dpi, dc->u.s_name.s, dc->u.s_name.len);\n       else\n \td_print_java_identifier (dpi, dc->u.s_name.s, dc->u.s_name.len);\n       return;\n \n     case DEMANGLE_COMPONENT_QUAL_NAME:\n     case DEMANGLE_COMPONENT_LOCAL_NAME:\n-      d_print_comp (dpi, d_left (dc));\n-      if ((dpi->options & DMGL_JAVA) == 0)\n+      d_print_comp (dpi, options, d_left (dc));\n+      if ((options & DMGL_JAVA) == 0)\n \td_append_string (dpi, \"::\");\n       else\n \td_append_char (dpi, '.');\n-      d_print_comp (dpi, d_right (dc));\n+      d_print_comp (dpi, options, d_right (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_TYPED_NAME:\n@@ -3671,7 +3668,7 @@ d_print_comp (struct d_print_info *dpi,\n \t      }\n \t  }\n \n-\td_print_comp (dpi, d_right (dc));\n+\td_print_comp (dpi, options, d_right (dc));\n \n \tif (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)\n \t  dpi->templates = dpt.next;\n@@ -3684,7 +3681,7 @@ d_print_comp (struct d_print_info *dpi,\n \t    if (! adpm[i].printed)\n \t      {\n \t\td_append_char (dpi, ' ');\n-\t\td_print_mod (dpi, adpm[i].mod);\n+\t\td_print_mod (dpi, options, adpm[i].mod);\n \t      }\n \t  }\n \n@@ -3707,24 +3704,24 @@ d_print_comp (struct d_print_info *dpi,\n \n         dcl = d_left (dc);\n \n-        if ((dpi->options & DMGL_JAVA) != 0\n+        if ((options & DMGL_JAVA) != 0\n             && dcl->type == DEMANGLE_COMPONENT_NAME\n             && dcl->u.s_name.len == 6\n             && strncmp (dcl->u.s_name.s, \"JArray\", 6) == 0)\n           {\n             /* Special-case Java arrays, so that JArray<TYPE> appears\n                instead as TYPE[].  */\n \n-            d_print_comp (dpi, d_right (dc));\n+            d_print_comp (dpi, options, d_right (dc));\n             d_append_string (dpi, \"[]\");\n           }\n         else\n           {\n-\t    d_print_comp (dpi, dcl);\n+\t    d_print_comp (dpi, options, dcl);\n \t    if (d_last_char (dpi) == '<')\n \t      d_append_char (dpi, ' ');\n \t    d_append_char (dpi, '<');\n-\t    d_print_comp (dpi, d_right (dc));\n+\t    d_print_comp (dpi, options, d_right (dc));\n \t    /* Avoid generating two consecutive '>' characters, to avoid\n \t       the C++ syntactic ambiguity.  */\n \t    if (d_last_char (dpi) == '>')\n@@ -3759,87 +3756,87 @@ d_print_comp (struct d_print_info *dpi,\n \thold_dpt = dpi->templates;\n \tdpi->templates = hold_dpt->next;\n \n-\td_print_comp (dpi, a);\n+\td_print_comp (dpi, options, a);\n \n \tdpi->templates = hold_dpt;\n \n \treturn;\n       }\n \n     case DEMANGLE_COMPONENT_CTOR:\n-      d_print_comp (dpi, dc->u.s_ctor.name);\n+      d_print_comp (dpi, options, dc->u.s_ctor.name);\n       return;\n \n     case DEMANGLE_COMPONENT_DTOR:\n       d_append_char (dpi, '~');\n-      d_print_comp (dpi, dc->u.s_dtor.name);\n+      d_print_comp (dpi, options, dc->u.s_dtor.name);\n       return;\n \n     case DEMANGLE_COMPONENT_VTABLE:\n       d_append_string (dpi, \"vtable for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_VTT:\n       d_append_string (dpi, \"VTT for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_CONSTRUCTION_VTABLE:\n       d_append_string (dpi, \"construction vtable for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       d_append_string (dpi, \"-in-\");\n-      d_print_comp (dpi, d_right (dc));\n+      d_print_comp (dpi, options, d_right (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_TYPEINFO:\n       d_append_string (dpi, \"typeinfo for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_TYPEINFO_NAME:\n       d_append_string (dpi, \"typeinfo name for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_TYPEINFO_FN:\n       d_append_string (dpi, \"typeinfo fn for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_THUNK:\n       d_append_string (dpi, \"non-virtual thunk to \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_VIRTUAL_THUNK:\n       d_append_string (dpi, \"virtual thunk to \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_COVARIANT_THUNK:\n       d_append_string (dpi, \"covariant return thunk to \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_JAVA_CLASS:\n       d_append_string (dpi, \"java Class for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_GUARD:\n       d_append_string (dpi, \"guard variable for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_REFTEMP:\n       d_append_string (dpi, \"reference temporary for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_HIDDEN_ALIAS:\n       d_append_string (dpi, \"hidden alias for \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_SUB_STD:\n@@ -3866,7 +3863,7 @@ d_print_comp (struct d_print_info *dpi,\n \t\t  break;\n \t\tif (pdpm->mod->type == dc->type)\n \t\t  {\n-\t\t    d_print_comp (dpi, d_left (dc));\n+\t\t    d_print_comp (dpi, options, d_left (dc));\n \t\t    return;\n \t\t  }\n \t      }\n@@ -3892,20 +3889,20 @@ d_print_comp (struct d_print_info *dpi,\n \tdpm.printed = 0;\n \tdpm.templates = dpi->templates;\n \n-\td_print_comp (dpi, d_left (dc));\n+\td_print_comp (dpi, options, d_left (dc));\n \n \t/* If the modifier didn't get printed by the type, print it\n \t   now.  */\n \tif (! dpm.printed)\n-\t  d_print_mod (dpi, dc);\n+\t  d_print_mod (dpi, options, dc);\n \n \tdpi->modifiers = dpm.next;\n \n \treturn;\n       }\n \n     case DEMANGLE_COMPONENT_BUILTIN_TYPE:\n-      if ((dpi->options & DMGL_JAVA) == 0)\n+      if ((options & DMGL_JAVA) == 0)\n \td_append_buffer (dpi, dc->u.s_builtin.type->name,\n \t\t\t dc->u.s_builtin.type->len);\n       else\n@@ -3914,13 +3911,13 @@ d_print_comp (struct d_print_info *dpi,\n       return;\n \n     case DEMANGLE_COMPONENT_VENDOR_TYPE:\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_FUNCTION_TYPE:\n       {\n-\tif ((dpi->options & DMGL_RET_POSTFIX) != 0)\n-\t  d_print_function_type (dpi, dc, dpi->modifiers);\n+\tif ((options & DMGL_RET_POSTFIX) != 0)\n+\t  d_print_function_type (dpi, options, dc, dpi->modifiers);\n \n \t/* Print return type if present */\n \tif (d_left (dc) != NULL)\n@@ -3935,7 +3932,7 @@ d_print_comp (struct d_print_info *dpi,\n \t    dpm.printed = 0;\n \t    dpm.templates = dpi->templates;\n \n-\t    d_print_comp (dpi, d_left (dc));\n+\t    d_print_comp (dpi, options, d_left (dc));\n \n \t    dpi->modifiers = dpm.next;\n \n@@ -3944,12 +3941,12 @@ d_print_comp (struct d_print_info *dpi,\n \n \t    /* In standard prefix notation, there is a space between the\n \t       return type and the function signature.  */\n-\t    if ((dpi->options & DMGL_RET_POSTFIX) == 0)\n+\t    if ((options & DMGL_RET_POSTFIX) == 0)\n \t      d_append_char (dpi, ' ');\n \t  }\n \n-\tif ((dpi->options & DMGL_RET_POSTFIX) == 0) \n-\t  d_print_function_type (dpi, dc, dpi->modifiers);\n+\tif ((options & DMGL_RET_POSTFIX) == 0)\n+\t  d_print_function_type (dpi, options, dc, dpi->modifiers);\n \n \treturn;\n       }\n@@ -4002,7 +3999,7 @@ d_print_comp (struct d_print_info *dpi,\n \t    pdpm = pdpm->next;\n \t  }\n \n-\td_print_comp (dpi, d_right (dc));\n+\td_print_comp (dpi, options, d_right (dc));\n \n \tdpi->modifiers = hold_modifiers;\n \n@@ -4012,10 +4009,10 @@ d_print_comp (struct d_print_info *dpi,\n \twhile (i > 1)\n \t  {\n \t    --i;\n-\t    d_print_mod (dpi, adpm[i].mod);\n+\t    d_print_mod (dpi, options, adpm[i].mod);\n \t  }\n \n-\td_print_array_type (dpi, dc, dpi->modifiers);\n+\td_print_array_type (dpi, options, dc, dpi->modifiers);\n \n \treturn;\n       }\n@@ -4031,12 +4028,12 @@ d_print_comp (struct d_print_info *dpi,\n \tdpm.printed = 0;\n \tdpm.templates = dpi->templates;\n \n-\td_print_comp (dpi, d_right (dc));\n+\td_print_comp (dpi, options, d_right (dc));\n \n \t/* If the modifier didn't get printed by the type, print it\n \t   now.  */\n \tif (! dpm.printed)\n-\t  d_print_mod (dpi, dc);\n+\t  d_print_mod (dpi, options, dc);\n \n \tdpi->modifiers = dpm.next;\n \n@@ -4050,7 +4047,7 @@ d_print_comp (struct d_print_info *dpi,\n       if (dc->u.s_fixed.length->u.s_builtin.type\n \t  != &cplus_demangle_builtin_types['i'-'a'])\n \t{\n-\t  d_print_comp (dpi, dc->u.s_fixed.length);\n+\t  d_print_comp (dpi, options, dc->u.s_fixed.length);\n \t  d_append_char (dpi, ' ');\n \t}\n       if (dc->u.s_fixed.accum)\n@@ -4062,7 +4059,7 @@ d_print_comp (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_ARGLIST:\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n       if (d_left (dc) != NULL)\n-\td_print_comp (dpi, d_left (dc));\n+\td_print_comp (dpi, options, d_left (dc));\n       if (d_right (dc) != NULL)\n \t{\n \t  size_t len;\n@@ -4074,7 +4071,7 @@ d_print_comp (struct d_print_info *dpi,\n \t  d_append_string (dpi, \", \");\n \t  len = dpi->len;\n \t  flush_count = dpi->flush_count;\n-\t  d_print_comp (dpi, d_right (dc));\n+\t  d_print_comp (dpi, options, d_right (dc));\n \t  /* If that didn't print anything (which can happen with empty\n \t     template argument packs), remove the comma and space.  */\n \t  if (dpi->flush_count == flush_count && dpi->len == len)\n@@ -4097,24 +4094,24 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n       d_append_string (dpi, \"operator \");\n-      d_print_comp (dpi, dc->u.s_extended_operator.name);\n+      d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n       return;\n \n     case DEMANGLE_COMPONENT_CAST:\n       d_append_string (dpi, \"operator \");\n-      d_print_cast (dpi, dc);\n+      d_print_cast (dpi, options, dc);\n       return;\n \n     case DEMANGLE_COMPONENT_UNARY:\n       if (d_left (dc)->type != DEMANGLE_COMPONENT_CAST)\n-\td_print_expr_op (dpi, d_left (dc));\n+\td_print_expr_op (dpi, options, d_left (dc));\n       else\n \t{\n \t  d_append_char (dpi, '(');\n-\t  d_print_cast (dpi, d_left (dc));\n+\t  d_print_cast (dpi, options, d_left (dc));\n \t  d_append_char (dpi, ')');\n \t}\n-      d_print_subexpr (dpi, d_right (dc));\n+      d_print_subexpr (dpi, options, d_right (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_BINARY:\n@@ -4132,18 +4129,18 @@ d_print_comp (struct d_print_info *dpi,\n \t  && d_left (dc)->u.s_operator.op->name[0] == '>')\n \td_append_char (dpi, '(');\n \n-      d_print_subexpr (dpi, d_left (d_right (dc)));\n+      d_print_subexpr (dpi, options, d_left (d_right (dc)));\n       if (strcmp (d_left (dc)->u.s_operator.op->code, \"ix\") == 0)\n \t{\n \t  d_append_char (dpi, '[');\n-\t  d_print_comp (dpi, d_right (d_right (dc)));\n+\t  d_print_comp (dpi, options, d_right (d_right (dc)));\n \t  d_append_char (dpi, ']');\n \t}\n       else\n \t{\n \t  if (strcmp (d_left (dc)->u.s_operator.op->code, \"cl\") != 0)\n-\t    d_print_expr_op (dpi, d_left (dc));\n-\t  d_print_subexpr (dpi, d_right (d_right (dc)));\n+\t    d_print_expr_op (dpi, options, d_left (dc));\n+\t  d_print_subexpr (dpi, options, d_right (d_right (dc)));\n \t}\n \n       if (d_left (dc)->type == DEMANGLE_COMPONENT_OPERATOR\n@@ -4165,11 +4162,11 @@ d_print_comp (struct d_print_info *dpi,\n \t  d_print_error (dpi);\n \t  return;\n \t}\n-      d_print_subexpr (dpi, d_left (d_right (dc)));\n-      d_print_expr_op (dpi, d_left (dc));\n-      d_print_subexpr (dpi, d_left (d_right (d_right (dc))));\n+      d_print_subexpr (dpi, options, d_left (d_right (dc)));\n+      d_print_expr_op (dpi, options, d_left (dc));\n+      d_print_subexpr (dpi, options, d_left (d_right (d_right (dc))));\n       d_append_string (dpi, \" : \");\n-      d_print_subexpr (dpi, d_right (d_right (d_right (dc))));\n+      d_print_subexpr (dpi, options, d_right (d_right (d_right (dc))));\n       return;\n \n     case DEMANGLE_COMPONENT_TRINARY_ARG1:\n@@ -4200,7 +4197,7 @@ d_print_comp (struct d_print_info *dpi,\n \t\t  {\n \t\t    if (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n \t\t      d_append_char (dpi, '-');\n-\t\t    d_print_comp (dpi, d_right (dc));\n+\t\t    d_print_comp (dpi, options, d_right (dc));\n \t\t    switch (tp)\n \t\t      {\n \t\t      default:\n@@ -4250,13 +4247,13 @@ d_print_comp (struct d_print_info *dpi,\n \t  }\n \n \td_append_char (dpi, '(');\n-\td_print_comp (dpi, d_left (dc));\n+\td_print_comp (dpi, options, d_left (dc));\n \td_append_char (dpi, ')');\n \tif (dc->type == DEMANGLE_COMPONENT_LITERAL_NEG)\n \t  d_append_char (dpi, '-');\n \tif (tp == D_PRINT_FLOAT)\n \t  d_append_char (dpi, '[');\n-\td_print_comp (dpi, d_right (dc));\n+\td_print_comp (dpi, options, d_right (dc));\n \tif (tp == D_PRINT_FLOAT)\n \t  d_append_char (dpi, ']');\n       }\n@@ -4268,12 +4265,12 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n       d_append_string (dpi, \"java resource \");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n-      d_print_comp (dpi, d_left (dc));\n-      d_print_comp (dpi, d_right (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n+      d_print_comp (dpi, options, d_right (dc));\n       return;\n \n     case DEMANGLE_COMPONENT_CHARACTER:\n@@ -4282,7 +4279,7 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_DECLTYPE:\n       d_append_string (dpi, \"decltype (\");\n-      d_print_comp (dpi, d_left (dc));\n+      d_print_comp (dpi, options, d_left (dc));\n       d_append_char (dpi, ')');\n       return;\n \n@@ -4296,7 +4293,7 @@ d_print_comp (struct d_print_info *dpi,\n \t    /* d_find_pack won't find anything if the only packs involved\n \t       in this expansion are function parameter packs; in that\n \t       case, just print the pattern and \"...\".  */\n-\t    d_print_subexpr (dpi, d_left (dc));\n+\t    d_print_subexpr (dpi, options, d_left (dc));\n \t    d_append_string (dpi, \"...\");\n \t    return;\n \t  }\n@@ -4306,7 +4303,7 @@ d_print_comp (struct d_print_info *dpi,\n \tfor (i = 0; i < len; ++i)\n \t  {\n \t    dpi->pack_index = i;\n-\t    d_print_comp (dpi, dc);\n+\t    d_print_comp (dpi, options, dc);\n \t    if (i < len-1)\n \t      d_append_string (dpi, \", \");\n \t  }\n@@ -4321,17 +4318,17 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS:\n       d_append_string (dpi, \"global constructors keyed to \");\n-      d_print_comp (dpi, dc->u.s_binary.left);\n+      d_print_comp (dpi, options, dc->u.s_binary.left);\n       return;\n \n     case DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS:\n       d_append_string (dpi, \"global destructors keyed to \");\n-      d_print_comp (dpi, dc->u.s_binary.left);\n+      d_print_comp (dpi, options, dc->u.s_binary.left);\n       return;\n \n     case DEMANGLE_COMPONENT_LAMBDA:\n       d_append_string (dpi, \"{lambda(\");\n-      d_print_comp (dpi, dc->u.s_unary_num.sub);\n+      d_print_comp (dpi, options, dc->u.s_unary_num.sub);\n       d_append_string (dpi, \")#\");\n       d_append_num (dpi, dc->u.s_unary_num.num + 1);\n       d_append_char (dpi, '}');\n@@ -4405,7 +4402,7 @@ d_print_java_identifier (struct d_print_info *dpi, const char *name, int len)\n    qualifiers on this after printing a function.  */\n \n static void\n-d_print_mod_list (struct d_print_info *dpi,\n+d_print_mod_list (struct d_print_info *dpi, int options,\n                   struct d_print_mod *mods, int suffix)\n {\n   struct d_print_template *hold_dpt;\n@@ -4419,7 +4416,7 @@ d_print_mod_list (struct d_print_info *dpi,\n \t      || mods->mod->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n \t      || mods->mod->type == DEMANGLE_COMPONENT_CONST_THIS)))\n     {\n-      d_print_mod_list (dpi, mods->next, suffix);\n+      d_print_mod_list (dpi, options, mods->next, suffix);\n       return;\n     }\n \n@@ -4430,13 +4427,13 @@ d_print_mod_list (struct d_print_info *dpi,\n \n   if (mods->mod->type == DEMANGLE_COMPONENT_FUNCTION_TYPE)\n     {\n-      d_print_function_type (dpi, mods->mod, mods->next);\n+      d_print_function_type (dpi, options, mods->mod, mods->next);\n       dpi->templates = hold_dpt;\n       return;\n     }\n   else if (mods->mod->type == DEMANGLE_COMPONENT_ARRAY_TYPE)\n     {\n-      d_print_array_type (dpi, mods->mod, mods->next);\n+      d_print_array_type (dpi, options, mods->mod, mods->next);\n       dpi->templates = hold_dpt;\n       return;\n     }\n@@ -4452,10 +4449,10 @@ d_print_mod_list (struct d_print_info *dpi,\n \n       hold_modifiers = dpi->modifiers;\n       dpi->modifiers = NULL;\n-      d_print_comp (dpi, d_left (mods->mod));\n+      d_print_comp (dpi, options, d_left (mods->mod));\n       dpi->modifiers = hold_modifiers;\n \n-      if ((dpi->options & DMGL_JAVA) == 0)\n+      if ((options & DMGL_JAVA) == 0)\n \td_append_string (dpi, \"::\");\n       else\n \td_append_char (dpi, '.');\n@@ -4475,23 +4472,23 @@ d_print_mod_list (struct d_print_info *dpi,\n \t     || dc->type == DEMANGLE_COMPONENT_CONST_THIS)\n \tdc = d_left (dc);\n \n-      d_print_comp (dpi, dc);\n+      d_print_comp (dpi, options, dc);\n \n       dpi->templates = hold_dpt;\n       return;\n     }\n \n-  d_print_mod (dpi, mods->mod);\n+  d_print_mod (dpi, options, mods->mod);\n \n   dpi->templates = hold_dpt;\n \n-  d_print_mod_list (dpi, mods->next, suffix);\n+  d_print_mod_list (dpi, options, mods->next, suffix);\n }\n \n /* Print a modifier.  */\n \n static void\n-d_print_mod (struct d_print_info *dpi,\n+d_print_mod (struct d_print_info *dpi, int options,\n              const struct demangle_component *mod)\n {\n   switch (mod->type)\n@@ -4510,11 +4507,11 @@ d_print_mod (struct d_print_info *dpi,\n       return;\n     case DEMANGLE_COMPONENT_VENDOR_TYPE_QUAL:\n       d_append_char (dpi, ' ');\n-      d_print_comp (dpi, d_right (mod));\n+      d_print_comp (dpi, options, d_right (mod));\n       return;\n     case DEMANGLE_COMPONENT_POINTER:\n       /* There is no pointer symbol in Java.  */\n-      if ((dpi->options & DMGL_JAVA) == 0)\n+      if ((options & DMGL_JAVA) == 0)\n \td_append_char (dpi, '*');\n       return;\n     case DEMANGLE_COMPONENT_REFERENCE:\n@@ -4532,30 +4529,30 @@ d_print_mod (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_PTRMEM_TYPE:\n       if (d_last_char (dpi) != '(')\n \td_append_char (dpi, ' ');\n-      d_print_comp (dpi, d_left (mod));\n+      d_print_comp (dpi, options, d_left (mod));\n       d_append_string (dpi, \"::*\");\n       return;\n     case DEMANGLE_COMPONENT_TYPED_NAME:\n-      d_print_comp (dpi, d_left (mod));\n+      d_print_comp (dpi, options, d_left (mod));\n       return;\n     case DEMANGLE_COMPONENT_VECTOR_TYPE:\n       d_append_string (dpi, \" __vector(\");\n-      d_print_comp (dpi, d_left (mod));\n+      d_print_comp (dpi, options, d_left (mod));\n       d_append_char (dpi, ')');\n       return;\n \n     default:\n       /* Otherwise, we have something that won't go back on the\n \t modifier stack, so we can just print it.  */\n-      d_print_comp (dpi, mod);\n+      d_print_comp (dpi, options, mod);\n       return;\n     }\n }\n \n /* Print a function type, except for the return type.  */\n \n static void\n-d_print_function_type (struct d_print_info *dpi,\n+d_print_function_type (struct d_print_info *dpi, int options,\n                        const struct demangle_component *dc,\n                        struct d_print_mod *mods)\n {\n@@ -4615,27 +4612,27 @@ d_print_function_type (struct d_print_info *dpi,\n   hold_modifiers = dpi->modifiers;\n   dpi->modifiers = NULL;\n \n-  d_print_mod_list (dpi, mods, 0);\n+  d_print_mod_list (dpi, options, mods, 0);\n \n   if (need_paren)\n     d_append_char (dpi, ')');\n \n   d_append_char (dpi, '(');\n \n   if (d_right (dc) != NULL)\n-    d_print_comp (dpi, d_right (dc));\n+    d_print_comp (dpi, options, d_right (dc));\n \n   d_append_char (dpi, ')');\n \n-  d_print_mod_list (dpi, mods, 1);\n+  d_print_mod_list (dpi, options, mods, 1);\n \n   dpi->modifiers = hold_modifiers;\n }\n \n /* Print an array type, except for the element type.  */\n \n static void\n-d_print_array_type (struct d_print_info *dpi,\n+d_print_array_type (struct d_print_info *dpi, int options,\n                     const struct demangle_component *dc,\n                     struct d_print_mod *mods)\n {\n@@ -4669,7 +4666,7 @@ d_print_array_type (struct d_print_info *dpi,\n       if (need_paren)\n \td_append_string (dpi, \" (\");\n \n-      d_print_mod_list (dpi, mods, 0);\n+      d_print_mod_list (dpi, options, mods, 0);\n \n       if (need_paren)\n \td_append_char (dpi, ')');\n@@ -4681,32 +4678,32 @@ d_print_array_type (struct d_print_info *dpi,\n   d_append_char (dpi, '[');\n \n   if (d_left (dc) != NULL)\n-    d_print_comp (dpi, d_left (dc));\n+    d_print_comp (dpi, options, d_left (dc));\n \n   d_append_char (dpi, ']');\n }\n \n /* Print an operator in an expression.  */\n \n static void\n-d_print_expr_op (struct d_print_info *dpi,\n+d_print_expr_op (struct d_print_info *dpi, int options,\n                  const struct demangle_component *dc)\n {\n   if (dc->type == DEMANGLE_COMPONENT_OPERATOR)\n     d_append_buffer (dpi, dc->u.s_operator.op->name,\n \t\t     dc->u.s_operator.op->len);\n   else\n-    d_print_comp (dpi, dc);\n+    d_print_comp (dpi, options, dc);\n }\n \n /* Print a cast.  */\n \n static void\n-d_print_cast (struct d_print_info *dpi,\n+d_print_cast (struct d_print_info *dpi, int options,\n               const struct demangle_component *dc)\n {\n   if (d_left (dc)->type != DEMANGLE_COMPONENT_TEMPLATE)\n-    d_print_comp (dpi, d_left (dc));\n+    d_print_comp (dpi, options, d_left (dc));\n   else\n     {\n       struct d_print_mod *hold_dpm;\n@@ -4724,14 +4721,14 @@ d_print_cast (struct d_print_info *dpi,\n       dpi->templates = &dpt;\n       dpt.template_decl = d_left (dc);\n \n-      d_print_comp (dpi, d_left (d_left (dc)));\n+      d_print_comp (dpi, options, d_left (d_left (dc)));\n \n       dpi->templates = dpt.next;\n \n       if (d_last_char (dpi) == '<')\n \td_append_char (dpi, ' ');\n       d_append_char (dpi, '<');\n-      d_print_comp (dpi, d_right (d_left (dc)));\n+      d_print_comp (dpi, options, d_right (d_left (dc)));\n       /* Avoid generating two consecutive '>' characters, to avoid\n \t the C++ syntactic ambiguity.  */\n       if (d_last_char (dpi) == '>')"}]}