{"sha": "a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "node_id": "C_kwDOANBUbNoAKGEzMDVhYzg3YjQ2ZTI2M2EzYmMwYzg4NmY5ZGZkZGYyNjY0ZjZhZjg", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T12:36:33Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-09T12:56:33Z"}, "message": "docs: fix: WARNING: Parsing of expression failed. Using fallback parser.\n\nFor the future, we can use https://sphinx-fortran.readthedocs.io/ for\nFortran functions which can have optional arguments. However, it's an\nadditional dependency.\n\nSimplify the function declration.\n\ngcc/fortran/ChangeLog:\n\n\t* doc/gfortran/intrinsic-procedures/aint.rst: Simplify function\n\t  declaration.\n\t* doc/gfortran/intrinsic-procedures/int.rst: Likewise.\n\t* doc/gfortran/intrinsic-procedures/anint.rst: Likewise.\n\t* doc/gfortran/intrinsic-procedures/char.rst: Likewise.\n\t* doc/gfortran/intrinsic-procedures/real.rst: Likewise.", "tree": {"sha": "6f4bfd18732965dfecaa35cd13f4d69294693920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f4bfd18732965dfecaa35cd13f4d69294693920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3bc557995463fe1dcc37ec503af780a6c1a341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c3bc557995463fe1dcc37ec503af780a6c1a341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c3bc557995463fe1dcc37ec503af780a6c1a341"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "f95a60121aa4117f979aa05951e30017e15e314f", "filename": "gcc/fortran/doc/gfortran/intrinsic-procedures/aint.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Faint.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Faint.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Faint.rst?ref=a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "patch": "@@ -16,7 +16,7 @@\n AINT --- Truncate to a whole number\n ***********************************\n \n-.. function:: AINT(A [, KIND])\n+.. function:: AINT(A, KIND)\n \n   ``AINT(A [, KIND])`` truncates its argument to a whole number.\n \n@@ -75,4 +75,4 @@ AINT --- Truncate to a whole number\n        * - ``DINT(A)``\n          - ``REAL(8) A``\n          - ``REAL(8)``\n-         - Fortran 77 and later\n\\ No newline at end of file\n+         - Fortran 77 and later"}, {"sha": "7c1d324cfc7835625dafe33909ff8aa5a59ce770", "filename": "gcc/fortran/doc/gfortran/intrinsic-procedures/anint.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fanint.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fanint.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fanint.rst?ref=a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "patch": "@@ -16,7 +16,7 @@\n ANINT --- Nearest whole number\n ******************************\n \n-.. function:: ANINT(A [, KIND])\n+.. function:: ANINT(A, KIND)\n \n   ``ANINT(A [, KIND])`` rounds its argument to the nearest whole number.\n \n@@ -73,4 +73,4 @@ ANINT --- Nearest whole number\n        * - ``DNINT(A)``\n          - ``REAL(8) A``\n          - ``REAL(8)``\n-         - Fortran 77 and later\n\\ No newline at end of file\n+         - Fortran 77 and later"}, {"sha": "a51b927d0b3473bf77d5a7b2b4cb8c08a2256fb5", "filename": "gcc/fortran/doc/gfortran/intrinsic-procedures/char.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fchar.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fchar.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fchar.rst?ref=a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "patch": "@@ -12,7 +12,7 @@\n CHAR --- Character conversion function\n **************************************\n \n-.. function:: CHAR(I [, KIND])\n+.. function:: CHAR(I, KIND)\n \n   ``CHAR(I [, KIND])`` returns the character represented by the integer :samp:`{I}`.\n \n@@ -68,4 +68,4 @@ CHAR --- Character conversion function\n   See also:\n     :ref:`ACHAR`,\n     :ref:`IACHAR`,\n-    :ref:`ICHAR`\n\\ No newline at end of file\n+    :ref:`ICHAR`"}, {"sha": "83a35aef52985bde2ab708c1c4206ecb5a4eb3c7", "filename": "gcc/fortran/doc/gfortran/intrinsic-procedures/int.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fint.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fint.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Fint.rst?ref=a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "patch": "@@ -16,7 +16,7 @@\n INT --- Convert to integer type\n *******************************\n \n-.. function:: INT(A , KIND))\n+.. function:: INT(A, KIND)\n \n   Convert to integer type\n \n@@ -73,4 +73,4 @@ INT --- Convert to integer type\n        * - ``IDINT(A)``\n          - ``REAL(8) A``\n          - ``INTEGER``\n-         - Fortran 77 and later\n\\ No newline at end of file\n+         - Fortran 77 and later"}, {"sha": "be19a01723dc75e2396d46c71d7d0305a1251148", "filename": "gcc/fortran/doc/gfortran/intrinsic-procedures/real.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Freal.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a305ac87b46e263a3bc0c886f9dfddf2664f6af8/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Freal.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fintrinsic-procedures%2Freal.rst?ref=a305ac87b46e263a3bc0c886f9dfddf2664f6af8", "patch": "@@ -28,7 +28,7 @@\n REAL --- Convert to real type\n ******************************\n \n-.. function:: REAL(A [, KIND])\n+.. function:: REAL(A, KIND)\n \n   ``REAL(A [, KIND])`` converts its argument :samp:`{A}` to a real type.  The\n   ``REALPART`` function is provided for compatibility with :command:`g77`,\n@@ -101,4 +101,4 @@ REAL --- Convert to real type\n          - Fortran 77 and later\n \n   See also:\n-    :ref:`DBLE`\n\\ No newline at end of file\n+    :ref:`DBLE`"}]}