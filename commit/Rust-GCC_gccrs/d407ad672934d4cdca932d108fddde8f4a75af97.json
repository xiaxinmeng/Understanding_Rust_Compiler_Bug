{"sha": "d407ad672934d4cdca932d108fddde8f4a75af97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwN2FkNjcyOTM0ZDRjZGNhOTMyZDEwOGZkZGRlOGY0YTc1YWY5Nw==", "commit": {"author": {"name": "Seongbae Park", "email": "seongbae.park@gmail.com", "date": "2007-08-16T17:30:20Z"}, "committer": {"name": "Seongbae Park", "email": "spark@gcc.gnu.org", "date": "2007-08-16T17:30:20Z"}, "message": "tree-eh.c (lower_try_finally_onedest): Reset the locus of GOTO that's relocated to a different block.\n\ngcc/ChangeLog:\n2007-08-16  Seongbae Park <seongbae.park@gmail.com>\n\n\t* tree-eh.c (lower_try_finally_onedest): Reset the locus\n\tof GOTO that's relocated to a different block.\n\ngcc/testsuite/ChangeLog:\n2007-08-16  Seongbae Park  <seongbae.park@gmail.com>\n\n\t* g++.dg/gcov/gcov-4.C: New test.\n\t* lib/gcov.exp (verify-lines): Add support for\n\tchecking no-coverage lines.\n\nFrom-SVN: r127562", "tree": {"sha": "d788fd42d7efa7d166ddd35978c8f79553fe4db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d788fd42d7efa7d166ddd35978c8f79553fe4db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d407ad672934d4cdca932d108fddde8f4a75af97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d407ad672934d4cdca932d108fddde8f4a75af97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d407ad672934d4cdca932d108fddde8f4a75af97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d407ad672934d4cdca932d108fddde8f4a75af97/comments", "author": null, "committer": null, "parents": [{"sha": "ac7d7749c082ec30d145860578ebd905a709ce50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7d7749c082ec30d145860578ebd905a709ce50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7d7749c082ec30d145860578ebd905a709ce50"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "6f8ed5a2a8564dbe137e5f881d2dbb7a543dd7bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d407ad672934d4cdca932d108fddde8f4a75af97", "patch": "@@ -1,3 +1,8 @@\n+2007-08-16  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* tree-eh.c (lower_try_finally_onedest): Reset the locus\n+\tof GOTO that's relocated to a different block.\n+\n 2007-08-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c (const_strip_array_types): New."}, {"sha": "37532f5213100112bd2cbbdbe7a85b3ae8510971", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d407ad672934d4cdca932d108fddde8f4a75af97", "patch": "@@ -1,3 +1,9 @@\n+2007-08-16  Seongbae Park  <seongbae.park@gmail.com>\n+\n+\t* g++.dg/gcov/gcov-4.C: New test.\n+\t* lib/gcov.exp (verify-lines): Add support for\n+\tchecking no-coverage lines.\n+\n 2007-08-16  Victor Kaplansky <victork@il.ibm.com>\n \n \t* gcc.dg/vect/vect-vfa-01.c: New."}, {"sha": "2f83ff1becc68a5131423ae7050704faa978dc9e", "filename": "gcc/testsuite/g++.dg/gcov/gcov-4.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-4.C?ref=d407ad672934d4cdca932d108fddde8f4a75af97", "patch": "@@ -0,0 +1,41 @@\n+/* Check that execution counts and branch probabilities for various C\n+   constructs are reported correctly by gcov. */\n+\n+#include <stdio.h>\n+\n+/* { dg-options \"-fprofile-arcs -ftest-coverage -fno-exceptions\" } */\n+/* { dg-do run { target native } } */\n+\n+class foo {\n+public:\n+  foo() { printf(\"foo()\\n\"); };\n+  ~foo() { printf(\"~foo()\\n\"); };\n+  void method(void) { printf(\"method()\\n\"); }; \n+};\n+\n+int func(int i, int j) __attribute__((noinline));\n+\n+int func(int i, int j){\n+  if (j) {\n+    printf(\"unreachable\\n\");\n+    return 3;\n+  }\n+\n+  foo f;\n+\n+  if (i == 1) {\n+    f.method();\n+    f.method();\n+  } else {\n+    f.method();\n+    printf(\"unreachable\\n\");\n+    return 2;        /* count(#####) */\n+  }\n+  f.method();\n+  return 0;\n+}\n+\n+int main() {\n+  return func(1, 0);\n+}\n+/* { dg-final { run-gcov gcov-4.C } } */"}, {"sha": "1c7484785db1f36532ae521c414088665f341143", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=d407ad672934d4cdca932d108fddde8f4a75af97", "patch": "@@ -42,7 +42,9 @@ proc verify-lines { testcase file } {\n     set failed 0\n     set fd [open $file r]\n     while { [gets $fd line] >= 0 } {\n-\tif [regexp \"^ *(\\[^:]*): *(\\[0-9\\]+):.*count\\\\((\\[0-9\\]+)\\\\)\" \\\n+        # We want to match both \"-\" and \"#####\" as count as well as numbers,\n+        # since we want to detect lines that shouldn't be marked as covered.\n+\tif [regexp \"^ *(\\[^:]*): *(\\[0-9\\\\-#]+):.*count\\\\((\\[0-9\\\\-#]+)\\\\)\" \\\n \t\t\"$line\" all is n shouldbe] {\n \t    if { $is == \"\" } {\n \t\tfail \"$n:no data available for this line\""}, {"sha": "89f863fb85f182feee79e7cd9506122f875941ff", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d407ad672934d4cdca932d108fddde8f4a75af97/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=d407ad672934d4cdca932d108fddde8f4a75af97", "patch": "@@ -1020,6 +1020,9 @@ lower_try_finally_onedest (struct leh_state *state, struct leh_tf_state *tf)\n \t}\n     }\n \n+  /* Reset the locus of the goto since we're moving \n+     goto to a different block which might be on a different line. */\n+  SET_EXPR_LOCUS (tf->goto_queue[0].cont_stmt, NULL);\n   append_to_statement_list (tf->goto_queue[0].cont_stmt, tf->top_p);\n   maybe_record_in_goto_queue (state, tf->goto_queue[0].cont_stmt);\n }"}]}