{"sha": "6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwZDdjNmUwZDhkNzQ0YTU3ZTJkMTExYWI5NWE3YWI4MTE1ZWJmOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-23T15:13:48Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-04-23T15:13:48Z"}, "message": "re PR fortran/31630 (ICE on nasty derived types code)\n\n2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31630\n\t* resolve.c (resolve_symbol): Allow resolution of formal\n\tnamespaces nested within formal namespaces coming from modules.\n\n\tPR fortran/31620\n\t* trans-expr.c (gfc_trans_assignment): Make the call to\n\tgfc_trans_zero_assign conditional on the lhs array ref being\n\tthe only reference.\n\n2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31630\n\t* gfortran.dg/used_types_17.f90: New test.\n\n\tPR fortran/31620\n\t* gfortran.dg/zero_array_components_1.f90: New test.\n\nFrom-SVN: r124069", "tree": {"sha": "cd69678252d64187f28421f356008d5cce4dce95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd69678252d64187f28421f356008d5cce4dce95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/comments", "author": null, "committer": null, "parents": [{"sha": "a8a423360bf1e0e8dffac6087084a129d9251dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a423360bf1e0e8dffac6087084a129d9251dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a423360bf1e0e8dffac6087084a129d9251dc4"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "70919a4c95353ec37bc257d856ccd3f91b4c91b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -1,3 +1,14 @@\n+2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31630\n+\t* resolve.c (resolve_symbol): Allow resolution of formal\n+\tnamespaces nested within formal namespaces coming from modules.\n+\n+\tPR fortran/31620\n+\t* trans-expr.c (gfc_trans_assignment): Make the call to\n+\tgfc_trans_zero_assign conditional on the lhs array ref being\n+\tthe only reference.\n+\n 2007-04-23  Tobias Burnus  <burnus@net-b.de>\n \n \t* primary.c (match_integer_constant): Mention -fno-range-check"}, {"sha": "c759f6938ea250661926f50f3ebfedc4732871db", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -6339,12 +6339,15 @@ resolve_symbol (gfc_symbol *sym)\n \n   formal_arg_flag = 0;\n \n-  /* Resolve formal namespaces.  */\n-\n+  /* Resolve formal namespaces.  The symbols in formal namespaces that\n+     themselves are from procedures in formal namespaces will not stand\n+     resolution, except when they are use associated.\n+     TODO: Fix the symbols in formal namespaces so that resolution can\n+     be done unconditionally.  */\n   if (formal_ns_flag && sym != NULL && sym->formal_ns != NULL)\n     {\n       formal_ns_save = formal_ns_flag;\n-      formal_ns_flag = 0;\n+      formal_ns_flag = sym->attr.use_assoc ? 1 : 0;\n       gfc_resolve (sym->formal_ns);\n       formal_ns_flag = formal_ns_save;\n     }"}, {"sha": "182ec19e12b61cfa4defceeb0f6bf607a54123f5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -3943,6 +3943,7 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n   if (expr1->expr_type == EXPR_VARIABLE\n       && expr1->rank > 0\n       && expr1->ref\n+      && expr1->ref->next == NULL\n       && gfc_full_array_ref_p (expr1->ref)\n       && is_zero_initializer_p (expr2))\n     {"}, {"sha": "22b6f46b259e520a9faf89aa4ee32b17c6a0bf5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -1,3 +1,11 @@\n+2007-04-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31630\n+\t* gfortran.dg/used_types_17.f90: New test.\n+\n+\tPR fortran/31620\n+\t* gfortran.dg/zero_array_components_1.f90: New test.\n+\n 2007-04-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR fortran/31616"}, {"sha": "964f37187886c3034db8fd0f06fb539fa9742262", "filename": "gcc/testsuite/gfortran.dg/used_types_17.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_17.f90?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -0,0 +1,50 @@\n+! { dg do-compile }\n+! Tests the fix for PR31630, in which the association of the argument\n+! of 'cmp' did not work.\n+!\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+!\n+module box_module\n+  type box\n+    integer :: m = 0\n+  end type box\n+end module box_module\n+\n+module sort_box_module\n+contains\n+\n+  subroutine heapsort_box(cmp)\n+    interface\n+       subroutine cmp(a)\n+         use box_module\n+         type(box) :: a\n+       end subroutine cmp\n+    end interface\n+    optional :: cmp\n+  end subroutine heapsort_box\n+\n+end module sort_box_module\n+\n+\n+module boxarray_module\n+  use box_module\n+  implicit none\n+\n+  type boxarray\n+    type(box), allocatable :: bxs(:)\n+  end type boxarray\n+contains\n+\n+  subroutine boxarray_build_l(ba)\n+    type(boxarray) :: ba\n+    allocate(ba%bxs(1))\n+  end subroutine boxarray_build_l\n+\n+  subroutine boxarray_sort()\n+    use sort_box_module\n+    call heapsort_box\n+  end subroutine boxarray_sort\n+\n+end module boxarray_module\n+\n+! { dg-final { cleanup-modules \"box_module sort_box_module boxarray_module\" } }"}, {"sha": "514f90c5440a64d863f9b9203421b35845f1608b", "filename": "gcc/testsuite/gfortran.dg/zero_array_components_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_array_components_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_array_components_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_array_components_1.f90?ref=6e0d7c6e0d8d744a57e2d111ab95a7ab8115ebf8", "patch": "@@ -0,0 +1,17 @@\n+! { dg do-run }\n+! Tests the fix for PR31620, in which zeroing the component a for the array,\n+! would zero all the components of the array.\n+!\n+! David Ham <David@ham.dropbear.id.au>\n+!\n+program test_assign\n+  type my_type\n+     integer :: a\n+     integer :: b\n+  end type my_type\n+  type(my_type), dimension(1) :: mine        ! note that MINE is an array\n+  mine%b=4\n+  mine%a=1\n+  mine%a=0\n+  if (any (mine%b .ne. 4)) call abort ()\n+end program test_assign"}]}