{"sha": "02de9d26b1820e4af35ebdd271c3a788e3c99035", "node_id": "C_kwDOANBUbNoAKDAyZGU5ZDI2YjE4MjBlNGFmMzVlYmRkMjcxYzNhNzg4ZTNjOTkwMzU", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-24T14:10:25Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-08-24T14:10:25Z"}, "message": "tree.cc: Fix optimization of DFP default initialization\n\nWhen an object of decimal floating-point type is default-initialized,\nGCC is inconsistent about whether it is given the all-zero-bits\nrepresentation (zero with the least quantum exponent) or whether it\nacts like a conversion of integer 0 to the DFP type (zero with quantum\nexponent 0).  In particular, the representation stored in memory can\nhave all zero bits, but optimization of access to the same object\nbased on its known constant value can then produce zero with quantum\nexponent 0 instead.\n\nC2x leaves the quantum exponent for default initialization\nimplementation-defined, but that doesn't allow such inconsistency in\nthe interpretation of a single object.  All zero bits seems most\nappropriate; change build_real to special-case dconst0 the same way\nother constants are special-cased and ensure that the correct zero for\nthe type is generated.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/\n\t* tree.cc (build_real): Give DFP dconst0 the minimum quantum\n\texponent for the type.\n\ngcc/testsuite/\n\t* gcc.dg/torture/dfp-default-init-1.c,\n\tgcc.dg/torture/dfp-default-init-2.c,\n\tgcc.dg/torture/dfp-default-init-3.c: New tests.", "tree": {"sha": "3763d4ec40ff6f2f5c578cfdabe382db7d8ebcb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3763d4ec40ff6f2f5c578cfdabe382db7d8ebcb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02de9d26b1820e4af35ebdd271c3a788e3c99035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02de9d26b1820e4af35ebdd271c3a788e3c99035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02de9d26b1820e4af35ebdd271c3a788e3c99035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02de9d26b1820e4af35ebdd271c3a788e3c99035/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1f144b3e6e3761375bea657718f58fb720fb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1f144b3e6e3761375bea657718f58fb720fb44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1f144b3e6e3761375bea657718f58fb720fb44"}], "stats": {"total": 142, "additions": 140, "deletions": 2}, "files": [{"sha": "f893ddb52b90d494987b2d9aaffa012409956ef6", "filename": "gcc/testsuite/gcc.dg/torture/dfp-default-init-1.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-1.c?ref=02de9d26b1820e4af35ebdd271c3a788e3c99035", "patch": "@@ -0,0 +1,113 @@\n+/* Test that default-initialized DFP values consistently have the least quantum\n+   exponent.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp } */\n+\n+extern void exit (int);\n+extern void abort (void);\n+void *memset (void *, int, __SIZE_TYPE__);\n+int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+#ifndef TYPE\n+#define TYPE _Decimal32\n+#endif\n+\n+#ifndef ZEROFP\n+#define ZEROFP 0e-101DF\n+#endif\n+\n+TYPE zero_int = 0;\n+TYPE zero_fp = ZEROFP;\n+TYPE default_init;\n+TYPE zero_bytes;\n+TYPE x;\n+\n+struct s { TYPE a, b; };\n+struct s s_default_init;\n+struct s s_empty_init = {};\n+struct s s_first_int = { 0 };\n+struct s s_both_int = { 0, 0 };\n+struct s sx;\n+\n+const TYPE a_default_init[10];\n+const TYPE a_empty_init[10] = {};\n+const TYPE a_first_int[10] = { 0 };\n+const TYPE a_two_int[10] = { 0, 0 };\n+\n+#define CHECK_ZERO_BYTES(expr)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (memcmp (expr, &zero_bytes, sizeof zero_bytes) != 0)\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      TYPE tmp = *expr;\t\t\t\t\t\t\\\n+      if (memcmp (&tmp, &zero_bytes, sizeof zero_bytes) != 0)\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define CHECK_INT_BYTES(expr)\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (memcmp (expr, &zero_int, sizeof zero_int) != 0)\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      TYPE tmp = *expr;\t\t\t\t\t\t\\\n+      if (memcmp (&tmp, &zero_int, sizeof zero_int) != 0)\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+int\n+main (void)\n+{\n+  memset (&zero_bytes, 0, sizeof zero_bytes);\n+  if (memcmp (&zero_bytes, &zero_int, sizeof zero_int) == 0)\n+    abort ();\n+  CHECK_ZERO_BYTES (&zero_fp);\n+  CHECK_ZERO_BYTES (&default_init);\n+  CHECK_ZERO_BYTES (&s_default_init.a);\n+  CHECK_ZERO_BYTES (&s_default_init.b);\n+  CHECK_ZERO_BYTES (&s_empty_init.a);\n+  CHECK_ZERO_BYTES (&s_empty_init.b);\n+  CHECK_INT_BYTES (&s_first_int.a);\n+  CHECK_ZERO_BYTES (&s_first_int.b);\n+  CHECK_INT_BYTES (&s_both_int.a);\n+  CHECK_INT_BYTES (&s_both_int.b);\n+  CHECK_ZERO_BYTES (&a_default_init[0]);\n+  CHECK_ZERO_BYTES (&a_default_init[1]);\n+  CHECK_ZERO_BYTES (&a_default_init[2]);\n+  CHECK_ZERO_BYTES (&a_default_init[9]);\n+  CHECK_ZERO_BYTES (&a_empty_init[0]);\n+  CHECK_ZERO_BYTES (&a_empty_init[1]);\n+  CHECK_ZERO_BYTES (&a_empty_init[2]);\n+  CHECK_ZERO_BYTES (&a_empty_init[9]);\n+  CHECK_INT_BYTES (&a_first_int[0]);\n+  CHECK_ZERO_BYTES (&a_first_int[1]);\n+  CHECK_ZERO_BYTES (&a_first_int[2]);\n+  CHECK_ZERO_BYTES (&a_first_int[9]);\n+  CHECK_INT_BYTES (&a_two_int[0]);\n+  CHECK_INT_BYTES (&a_two_int[1]);\n+  CHECK_ZERO_BYTES (&a_two_int[2]);\n+  CHECK_ZERO_BYTES (&a_two_int[9]);\n+  struct s s2 = {};\n+  CHECK_ZERO_BYTES (&s2.a);\n+  CHECK_ZERO_BYTES (&s2.b);\n+  struct s s3 = { 0 };\n+  CHECK_INT_BYTES (&s3.a);\n+  CHECK_ZERO_BYTES (&s3.b);\n+  struct s s4 = { 0, 0 };\n+  CHECK_INT_BYTES (&s4.a);\n+  CHECK_INT_BYTES (&s4.b);\n+  struct s s5 = { 0 };\n+  sx = s5;\n+  CHECK_INT_BYTES (&sx.a);\n+  CHECK_ZERO_BYTES (&sx.b);\n+  x = default_init;\n+  CHECK_ZERO_BYTES (&x);\n+  x = zero_int;\n+  CHECK_INT_BYTES (&x);\n+  x = s_default_init.a;\n+  CHECK_ZERO_BYTES (&x);\n+  x = s_default_init.b;\n+  CHECK_ZERO_BYTES (&x);\n+  exit (0);\n+}"}, {"sha": "30f850be2eed13d15bb0cb010edc6385fd0fe431", "filename": "gcc/testsuite/gcc.dg/torture/dfp-default-init-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-2.c?ref=02de9d26b1820e4af35ebdd271c3a788e3c99035", "patch": "@@ -0,0 +1,8 @@\n+/* Test that default-initialized DFP values consistently have the least quantum\n+   exponent.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp } */\n+\n+#define TYPE _Decimal64\n+#define ZEROFP 0e-398DD\n+#include \"dfp-default-init-1.c\""}, {"sha": "cdf73508c7676944910b41091e98673f676c476c", "filename": "gcc/testsuite/gcc.dg/torture/dfp-default-init-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdfp-default-init-3.c?ref=02de9d26b1820e4af35ebdd271c3a788e3c99035", "patch": "@@ -0,0 +1,8 @@\n+/* Test that default-initialized DFP values consistently have the least quantum\n+   exponent.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp } */\n+\n+#define TYPE _Decimal128\n+#define ZEROFP 0e-6176DL\n+#include \"dfp-default-init-1.c\""}, {"sha": "007c9325b17076f474e6681c49966c59cf6b91c7", "filename": "gcc/tree.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02de9d26b1820e4af35ebdd271c3a788e3c99035/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=02de9d26b1820e4af35ebdd271c3a788e3c99035", "patch": "@@ -2385,12 +2385,12 @@ build_real (tree type, REAL_VALUE_TYPE d)\n   tree v;\n   int overflow = 0;\n \n-  /* dconst{1,2,m1,half} are used in various places in\n+  /* dconst{0,1,2,m1,half} are used in various places in\n      the middle-end and optimizers, allow them here\n      even for decimal floating point types as an exception\n      by converting them to decimal.  */\n   if (DECIMAL_FLOAT_MODE_P (TYPE_MODE (type))\n-      && d.cl == rvc_normal\n+      && (d.cl == rvc_normal || d.cl == rvc_zero)\n       && !d.decimal)\n     {\n       if (memcmp (&d, &dconst1, sizeof (d)) == 0)\n@@ -2401,6 +2401,15 @@ build_real (tree type, REAL_VALUE_TYPE d)\n \tdecimal_real_from_string (&d, \"-1\");\n       else if (memcmp (&d, &dconsthalf, sizeof (d)) == 0)\n \tdecimal_real_from_string (&d, \"0.5\");\n+      else if (memcmp (&d, &dconst0, sizeof (d)) == 0)\n+\t{\n+\t  /* Make sure to give zero the minimum quantum exponent for\n+\t     the type (which corresponds to all bits zero).  */\n+\t  const struct real_format *fmt = REAL_MODE_FORMAT (TYPE_MODE (type));\n+\t  char buf[16];\n+\t  sprintf (buf, \"0e%d\", fmt->emin - fmt->p);\n+\t  decimal_real_from_string (&d, buf);\n+\t}\n       else\n \tgcc_unreachable ();\n     }"}]}