{"sha": "bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjNjdmZDZhNDU3NmExODY3YmIwYWY4Y2Q0N2FhODE5ZGE2ZTJiMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-03T14:27:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-03T14:27:02Z"}, "message": "tree-streamer.h (struct streamer_tree_cache_d): Add next_idx member.\n\n2014-04-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-streamer.h (struct streamer_tree_cache_d): Add next_idx\n\tmember.\n\t(streamer_tree_cache_create): Adjust.\n\t* tree-streamer.c (streamer_tree_cache_add_to_node_array): Adjust\n\tto allow optional nodes array.\n\t(streamer_tree_cache_insert_1): Use next_idx to assign idx.\n\t(streamer_tree_cache_append): Likewise.\n\t(streamer_tree_cache_create): Create nodes array optionally\n\tas specified by parameter.\n\t* lto-streamer-out.c (create_output_block): Avoid maintaining\n\tthe node array in the writer cache.\n\t(DFS_write_tree): Remove assertion.\n\t(produce_asm_for_decls): Free the out decl state hash table\n\tearly.\n\t* lto-streamer-in.c (lto_data_in_create): Adjust for\n\tstreamer_tree_cache_create prototype change.\n\nFrom-SVN: r209059", "tree": {"sha": "4b026a1f81d4c8c69be6f59244a2cbe97a3763e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b026a1f81d4c8c69be6f59244a2cbe97a3763e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0daf6598ad37ed021d6bc5d4bcbdd0a068b6719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0daf6598ad37ed021d6bc5d4bcbdd0a068b6719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0daf6598ad37ed021d6bc5d4bcbdd0a068b6719"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "8d0c02162eda954884db3819aa70665c27f54ce8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "patch": "@@ -1,3 +1,22 @@\n+2014-04-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-streamer.h (struct streamer_tree_cache_d): Add next_idx\n+\tmember.\n+\t(streamer_tree_cache_create): Adjust.\n+\t* tree-streamer.c (streamer_tree_cache_add_to_node_array): Adjust\n+\tto allow optional nodes array.\n+\t(streamer_tree_cache_insert_1): Use next_idx to assign idx.\n+\t(streamer_tree_cache_append): Likewise.\n+\t(streamer_tree_cache_create): Create nodes array optionally\n+\tas specified by parameter.\n+\t* lto-streamer-out.c (create_output_block): Avoid maintaining\n+\tthe node array in the writer cache.\n+\t(DFS_write_tree): Remove assertion.\n+\t(produce_asm_for_decls): Free the out decl state hash table\n+\tearly.\n+\t* lto-streamer-in.c (lto_data_in_create): Adjust for\n+\tstreamer_tree_cache_create prototype change.\n+\n 2014-04-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-streamer-out.c (streamer_write_chain): Do not temporarily"}, {"sha": "e19b11558d9da7848fdd4ecb400d45b5d6430046", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "patch": "@@ -1365,8 +1365,7 @@ lto_data_in_create (struct lto_file_decl_data *file_data, const char *strings,\n   data_in->strings = strings;\n   data_in->strings_len = len;\n   data_in->globals_resolution = resolutions;\n-  data_in->reader_cache = streamer_tree_cache_create (false, false);\n-\n+  data_in->reader_cache = streamer_tree_cache_create (false, false, true);\n   return data_in;\n }\n "}, {"sha": "69b5a79e5395eedd2e582101606a92bed4315bb3", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "patch": "@@ -79,7 +79,7 @@ create_output_block (enum lto_section_type section_type)\n   ob->decl_state = lto_get_out_decl_state ();\n   ob->main_stream = XCNEW (struct lto_output_stream);\n   ob->string_stream = XCNEW (struct lto_output_stream);\n-  ob->writer_cache = streamer_tree_cache_create (!flag_wpa, true);\n+  ob->writer_cache = streamer_tree_cache_create (!flag_wpa, true, false);\n \n   if (section_type == LTO_section_function_body)\n     ob->cfg_stream = XCNEW (struct lto_output_stream);\n@@ -1277,7 +1277,6 @@ DFS_write_tree (struct output_block *ob, sccs *from_state,\n \t     ???  We still wrap these in LTO_tree_scc so at the\n \t     input side we can properly identify the tree we want\n \t     to ultimatively return.  */\n-\t  size_t old_len = ob->writer_cache->nodes.length ();\n \t  if (size == 1)\n \t    lto_output_tree_1 (ob, expr, scc_hash, ref_p, this_ref_p);\n \t  else\n@@ -1315,7 +1314,6 @@ DFS_write_tree (struct output_block *ob, sccs *from_state,\n \t\t  streamer_write_zero (ob);\n \t\t}\n \t    }\n-\t  gcc_assert (old_len + size == ob->writer_cache->nodes.length ());\n \n \t  /* Finally truncate the vector.  */\n \t  sccstack.truncate (first);\n@@ -2423,10 +2421,18 @@ produce_asm_for_decls (void)\n \n   gcc_assert (!alias_pairs);\n \n-  /* Write the global symbols.  */\n+  /* Get rid of the global decl state hash tables to save some memory.  */\n   out_state = lto_get_out_decl_state ();\n-  num_fns = lto_function_decl_states.length ();\n+  for (int i = 0; i < LTO_N_DECL_STREAMS; i++)\n+    if (out_state->streams[i].tree_hash_table)\n+      {\n+\tdelete out_state->streams[i].tree_hash_table;\n+\tout_state->streams[i].tree_hash_table = NULL;\n+      }\n+\n+  /* Write the global symbols.  */\n   lto_output_decl_state_streams (ob, out_state);\n+  num_fns = lto_function_decl_states.length ();\n   for (idx = 0; idx < num_fns; idx++)\n     {\n       fn_out_state ="}, {"sha": "517bf77f66ba7881acdc02e041fedf41aea0e94c", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "patch": "@@ -101,20 +101,19 @@ static void\n streamer_tree_cache_add_to_node_array (struct streamer_tree_cache_d *cache,\n \t\t\t\t       unsigned ix, tree t, hashval_t hash)\n {\n-  /* Make sure we're either replacing an old element or\n-     appending consecutively.  */\n-  gcc_assert (ix <= cache->nodes.length ());\n-\n-  if (ix == cache->nodes.length ())\n+  /* We're either replacing an old element or appending consecutively.  */\n+  if (cache->nodes.exists ())\n     {\n-      cache->nodes.safe_push (t);\n-      if (cache->hashes.exists ())\n-\tcache->hashes.safe_push (hash);\n+      if (cache->nodes.length () == ix)\n+\tcache->nodes.safe_push (t);\n+      else\n+\tcache->nodes[ix] = t;\n     }\n-  else\n+  if (cache->hashes.exists ())\n     {\n-      cache->nodes[ix] = t;\n-      if (cache->hashes.exists ())\n+      if (cache->hashes.length () == ix)\n+\tcache->hashes.safe_push (hash);\n+      else\n \tcache->hashes[ix] = hash;\n     }\n }\n@@ -146,7 +145,7 @@ streamer_tree_cache_insert_1 (struct streamer_tree_cache_d *cache,\n     {\n       /* Determine the next slot to use in the cache.  */\n       if (insert_at_next_slot_p)\n-\tix = cache->nodes.length ();\n+\tix = cache->next_idx++;\n       else\n \tix = *ix_p;\n        *slot = ix;\n@@ -211,7 +210,7 @@ void\n streamer_tree_cache_append (struct streamer_tree_cache_d *cache,\n \t\t\t    tree t, hashval_t hash)\n {\n-  unsigned ix = cache->nodes.length ();\n+  unsigned ix = cache->next_idx++;\n   if (!cache->node_map)\n     streamer_tree_cache_add_to_node_array (cache, ix, t, hash);\n   else\n@@ -326,15 +325,17 @@ preload_common_nodes (struct streamer_tree_cache_d *cache)\n /* Create a cache of pickled nodes.  */\n \n struct streamer_tree_cache_d *\n-streamer_tree_cache_create (bool with_hashes, bool with_map)\n+streamer_tree_cache_create (bool with_hashes, bool with_map, bool with_vec)\n {\n   struct streamer_tree_cache_d *cache;\n \n   cache = XCNEW (struct streamer_tree_cache_d);\n \n   if (with_map)\n     cache->node_map = new pointer_map<unsigned>;\n-  cache->nodes.create (165);\n+  cache->next_idx = 0;\n+  if (with_vec)\n+    cache->nodes.create (165);\n   if (with_hashes)\n     cache->hashes.create (165);\n "}, {"sha": "20dbba024f0051740e78eb726f831f7074cd41d3", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=bdc67fd6a4576a1867bb0af8cd47aa819da6e2b3", "patch": "@@ -52,6 +52,9 @@ struct streamer_tree_cache_d\n   vec<tree> nodes;\n   /* The node hashes (if available).  */\n   vec<hashval_t> hashes;\n+\n+  /* Next index to assign.  */\n+  unsigned next_idx;\n };\n \n /* Return true if tree node EXPR should be streamed as a builtin.  For\n@@ -97,7 +100,7 @@ void streamer_tree_cache_append (struct streamer_tree_cache_d *, tree,\n \t\t\t\t hashval_t);\n bool streamer_tree_cache_lookup (struct streamer_tree_cache_d *, tree,\n \t\t\t\t unsigned *);\n-struct streamer_tree_cache_d *streamer_tree_cache_create (bool, bool);\n+struct streamer_tree_cache_d *streamer_tree_cache_create (bool, bool, bool);\n void streamer_tree_cache_delete (struct streamer_tree_cache_d *);\n \n /* Return the tree node at slot IX in CACHE.  */"}]}