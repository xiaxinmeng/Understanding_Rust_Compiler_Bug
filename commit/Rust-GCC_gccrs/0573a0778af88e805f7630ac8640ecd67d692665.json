{"sha": "0573a0778af88e805f7630ac8640ecd67d692665", "node_id": "C_kwDOANBUbNoAKDA1NzNhMDc3OGFmODhlODA1Zjc2MzBhYzg2NDBlY2Q2N2Q2OTI2NjU", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2023-01-26T12:07:03Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2023-01-26T12:20:53Z"}, "message": "tree-optimization/108522 Use component_ref_field_offset\n\nInstead of using TREE_OPERAND (expr, 2) directly, use\ncomponent_ref_field_offset instead, which does scaling for us.  The\nfunction also substitutes PLACEHOLDER_EXPRs but it is not relevant for\ntree-object-size.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/108522\n\t* tree-object-size.cc (compute_object_offset): Make EXPR\n\targument non-const.  Call component_ref_field_offset.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/108522\n\t* gcc.dg/builtin-dynamic-object-size-0.c (DEFSTRUCT): New\n\tmacro.\n\t(test_dynarray_struct_member_b, test_dynarray_struct_member_c,\n\ttest_dynarray_struct_member_d,\n\ttest_dynarray_struct_member_subobj_b,\n\ttest_dynarray_struct_member_subobj_c,\n\ttest_dynarray_struct_member_subobj_d): New tests.\n\t(main): Call them.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "b723e9358ec03b916d7619f3d67a267f41901125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b723e9358ec03b916d7619f3d67a267f41901125"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0573a0778af88e805f7630ac8640ecd67d692665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0573a0778af88e805f7630ac8640ecd67d692665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0573a0778af88e805f7630ac8640ecd67d692665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0573a0778af88e805f7630ac8640ecd67d692665/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a42fe6a99db39f2fed21c2a69faf6fa78ccfd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a42fe6a99db39f2fed21c2a69faf6fa78ccfd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a42fe6a99db39f2fed21c2a69faf6fa78ccfd4"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "76079d8702ed4a7048ef561dc15c28eeb683b77d", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0573a0778af88e805f7630ac8640ecd67d692665/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0573a0778af88e805f7630ac8640ecd67d692665/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=0573a0778af88e805f7630ac8640ecd67d692665", "patch": "@@ -315,19 +315,70 @@ test_dynarray_struct_subobj2 (size_t sz, size_t off, size_t *objsz)\n }\n \n /* See pr #108522.  */\n+\n+#define DEFSTRUCT(_s, _n) \\\n+  struct DS\t\t\t\t\t\t\t\t      \\\n+    {\t\t\t\t\t\t\t\t\t      \\\n+      char a[_n];\t\t\t\t\t\t\t      \\\n+      unsigned long long b;\t\t\t\t\t\t      \\\n+      int c;\t\t\t\t\t\t\t\t      \\\n+      char d[2 * _n];\t\t\t\t\t\t\t      \\\n+    } _s\n+\n size_t\n __attribute__ ((noinline))\n-test_dynarray_struct_member (size_t sz)\n+test_dynarray_struct_member_b (size_t sz)\n {\n-  struct\n-    {\n-      char a[sz];\n-      char b;\n-    } s;\n+  DEFSTRUCT (s, sz);\n \n   return __builtin_dynamic_object_size (&s.b, 0);\n }\n \n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_member_c (size_t sz)\n+{\n+  DEFSTRUCT (s, sz);\n+\n+  return __builtin_dynamic_object_size (&s.c, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_member_d (size_t sz, size_t offset)\n+{\n+  DEFSTRUCT (s, sz);\n+\n+  return __builtin_dynamic_object_size (&s.d[offset], 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_member_subobj_b (size_t sz)\n+{\n+  DEFSTRUCT (s, sz);\n+\n+  return __builtin_dynamic_object_size (&s.b, 1);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_member_subobj_c (size_t sz)\n+{\n+  DEFSTRUCT (s, sz);\n+\n+  return __builtin_dynamic_object_size (&s.c, 1);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_struct_member_subobj_d (size_t sz, size_t offset)\n+{\n+  DEFSTRUCT (s, sz);\n+\n+  return __builtin_dynamic_object_size (&s.d[offset], 1);\n+}\n+\n size_t\n __attribute__ ((noinline))\n test_substring (size_t sz, size_t off)\n@@ -633,7 +684,23 @@ main (int argc, char **argv)\n   if (test_dynarray_struct_subobj2 (42, 4, &objsz)\n     != objsz - 4 - sizeof (long) - sizeof (int))\n     FAIL ();\n-  if (test_dynarray_struct_member (42) != sizeof (char))\n+  DEFSTRUCT(ds, 64);\n+  const size_t n = sizeof (ds.a);\n+  if (test_dynarray_struct_member_b (n)\n+      != sizeof (ds) - __builtin_offsetof (struct DS, b))\n+    FAIL ();\n+  if (test_dynarray_struct_member_c (n)\n+      != sizeof (ds) - __builtin_offsetof (struct DS, c))\n+    FAIL ();\n+  if (test_dynarray_struct_member_d (n, 0)\n+      != sizeof (ds) - __builtin_offsetof (struct DS, d))\n+    FAIL ();\n+  if (test_dynarray_struct_member_subobj_b (n) != sizeof (ds.b))\n+    FAIL ();\n+  if (test_dynarray_struct_member_subobj_c (n) != sizeof (ds.c))\n+    FAIL ();\n+  if (test_dynarray_struct_member_subobj_d (n, n - 2)\n+      != sizeof (ds) - __builtin_offsetof (struct DS, d) - n + 2)\n     FAIL ();\n   if (test_substring_ptrplus (128, 4) != (128 - 4) * sizeof (int))\n     FAIL ();"}, {"sha": "9a936a919839006c7266b4251e76046711ba99cc", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0573a0778af88e805f7630ac8640ecd67d692665/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0573a0778af88e805f7630ac8640ecd67d692665/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=0573a0778af88e805f7630ac8640ecd67d692665", "patch": "@@ -56,7 +56,7 @@ struct GTY(()) object_size\n   tree wholesize;\n };\n \n-static tree compute_object_offset (const_tree, const_tree);\n+static tree compute_object_offset (tree, const_tree);\n static bool addr_object_size (struct object_size_info *,\n \t\t\t      const_tree, int, tree *, tree *t = NULL);\n static tree alloc_object_size (const gcall *, int);\n@@ -396,7 +396,7 @@ size_for_offset (tree sz, tree offset, tree wholesize = NULL_TREE)\n    if unknown.  */\n \n static tree\n-compute_object_offset (const_tree expr, const_tree var)\n+compute_object_offset (tree expr, const_tree var)\n {\n   enum tree_code code = PLUS_EXPR;\n   tree base, off, t;\n@@ -413,8 +413,7 @@ compute_object_offset (const_tree expr, const_tree var)\n \n       t = TREE_OPERAND (expr, 1);\n       off = size_binop (PLUS_EXPR,\n-\t\t\t(TREE_OPERAND (expr, 2) ? TREE_OPERAND (expr, 2)\n-\t\t\t : DECL_FIELD_OFFSET (t)),\n+\t\t\tcomponent_ref_field_offset (expr),\n \t\t\tsize_int (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (t))\n \t\t\t\t  / BITS_PER_UNIT));\n       break;"}]}