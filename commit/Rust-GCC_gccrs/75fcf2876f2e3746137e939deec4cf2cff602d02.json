{"sha": "75fcf2876f2e3746137e939deec4cf2cff602d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmY2YyODc2ZjJlMzc0NjEzN2U5MzlkZWVjNGNmMmNmZjYwMmQwMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-12-02T15:13:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-12-02T15:13:52Z"}, "message": "tree-ssa-operands.c (opf_implicit): Remove.\n\n2013-12-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-operands.c (opf_implicit): Remove.\n\t(opf_address_taken): New flag.\n\t(get_expr_operands): Remove early out, pass down\n\topf_address_taken for ADDR_EXPRs, add a use operand only\n\tfor non-opf_address_taken bases.\n\t(get_indirect_ref_operands): Rename to ...\n\t(get_mem_ref_operands): ... this.\n\t(get_asm_expr_operands): Rename to ...\n\t(get_asm_stmt_operands): ... this.\n\nFrom-SVN: r205587", "tree": {"sha": "f779301d102df611bffba5be6472dcc27901adb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f779301d102df611bffba5be6472dcc27901adb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75fcf2876f2e3746137e939deec4cf2cff602d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fcf2876f2e3746137e939deec4cf2cff602d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fcf2876f2e3746137e939deec4cf2cff602d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fcf2876f2e3746137e939deec4cf2cff602d02/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1656a814242d64c040c4d638b280fc6405346af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1656a814242d64c040c4d638b280fc6405346af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1656a814242d64c040c4d638b280fc6405346af9"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "8126621d73bb88dba266c5bd071471636ea41b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fcf2876f2e3746137e939deec4cf2cff602d02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fcf2876f2e3746137e939deec4cf2cff602d02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75fcf2876f2e3746137e939deec4cf2cff602d02", "patch": "@@ -1,3 +1,15 @@\n+2013-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-operands.c (opf_implicit): Remove.\n+\t(opf_address_taken): New flag.\n+\t(get_expr_operands): Remove early out, pass down\n+\topf_address_taken for ADDR_EXPRs, add a use operand only\n+\tfor non-opf_address_taken bases.\n+\t(get_indirect_ref_operands): Rename to ...\n+\t(get_mem_ref_operands): ... this.\n+\t(get_asm_expr_operands): Rename to ...\n+\t(get_asm_stmt_operands): ... this.\n+\n 2013-12-02  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* ipa-inline.c (check_callers): Add missed pointer de-reference."}, {"sha": "84ec0024d5d6e3e41c482c3b3426e54063da6bf8", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fcf2876f2e3746137e939deec4cf2cff602d02/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fcf2876f2e3746137e939deec4cf2cff602d02/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=75fcf2876f2e3746137e939deec4cf2cff602d02", "patch": "@@ -105,17 +105,15 @@ along with GCC; see the file COPYING3.  If not see\n    VUSE for 'b'.  */\n #define opf_no_vops \t(1 << 1)\n \n-/* Operand is an implicit reference.  This is used to distinguish\n-   explicit assignments in the form of MODIFY_EXPR from\n-   clobbering sites like function calls or ASM_EXPRs.  */\n-#define opf_implicit\t(1 << 2)\n-\n /* Operand is in a place where address-taken does not imply addressable.  */\n #define opf_non_addressable (1 << 3)\n \n /* Operand is in a place where opf_non_addressable does not apply.  */\n #define opf_not_non_addressable (1 << 4)\n \n+/* Operand is having its address taken.  */\n+#define opf_address_taken (1 << 5)\n+\n /* Array for building all the use operands.  */\n static vec<tree> build_uses;\n \n@@ -597,8 +595,8 @@ mark_address_taken (tree ref)\n    FLAGS is as in get_expr_operands.  */\n \n static void\n-get_indirect_ref_operands (struct function *fn,\n-\t\t\t   gimple stmt, tree expr, int flags)\n+get_mem_ref_operands (struct function *fn,\n+\t\t      gimple stmt, tree expr, int flags)\n {\n   tree *pptr = &TREE_OPERAND (expr, 0);\n \n@@ -664,7 +662,7 @@ maybe_add_call_vops (struct function *fn, gimple stmt)\n /* Scan operands in the ASM_EXPR stmt referred to in INFO.  */\n \n static void\n-get_asm_expr_operands (struct function *fn, gimple stmt)\n+get_asm_stmt_operands (struct function *fn, gimple stmt)\n {\n   size_t i, noutputs;\n   const char **oconstraints;\n@@ -750,34 +748,30 @@ get_expr_operands (struct function *fn, gimple stmt, tree *expr_p, int flags)\n \t  && !is_gimple_debug (stmt))\n \tmark_address_taken (TREE_OPERAND (expr, 0));\n \n-      /* If the address is invariant, there may be no interesting\n-\t variable references inside.  */\n-      if (is_gimple_min_invariant (expr))\n-\treturn;\n-\n       /* Otherwise, there may be variables referenced inside but there\n \t should be no VUSEs created, since the referenced objects are\n \t not really accessed.  The only operands that we should find\n \t here are ARRAY_REF indices which will always be real operands\n \t (GIMPLE does not allow non-registers as array indices).  */\n       flags |= opf_no_vops;\n       get_expr_operands (fn, stmt, &TREE_OPERAND (expr, 0),\n-\t\t\t flags | opf_not_non_addressable);\n+\t\t\t flags | opf_not_non_addressable | opf_address_taken);\n       return;\n \n     case SSA_NAME:\n     case VAR_DECL:\n     case PARM_DECL:\n     case RESULT_DECL:\n-      add_stmt_operand (fn, expr_p, stmt, flags);\n+      if (!(flags & opf_address_taken))\n+\tadd_stmt_operand (fn, expr_p, stmt, flags);\n       return;\n \n     case DEBUG_EXPR_DECL:\n       gcc_assert (gimple_debug_bind_p (stmt));\n       return;\n \n     case MEM_REF:\n-      get_indirect_ref_operands (fn, stmt, expr, flags);\n+      get_mem_ref_operands (fn, stmt, expr, flags);\n       return;\n \n     case TARGET_MEM_REF:\n@@ -921,7 +915,7 @@ parse_ssa_operands (struct function *fn, gimple stmt)\n   switch (code)\n     {\n     case GIMPLE_ASM:\n-      get_asm_expr_operands (fn, stmt);\n+      get_asm_stmt_operands (fn, stmt);\n       break;\n \n     case GIMPLE_TRANSACTION:"}]}