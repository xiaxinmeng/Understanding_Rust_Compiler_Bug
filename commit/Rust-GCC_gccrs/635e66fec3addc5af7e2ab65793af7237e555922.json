{"sha": "635e66fec3addc5af7e2ab65793af7237e555922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM1ZTY2ZmVjM2FkZGM1YWY3ZTJhYjY1NzkzYWY3MjM3ZTU1NTkyMg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T13:16:58Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T13:16:58Z"}, "message": "[AArch64 array_mode 8/8] Add d-registers to TARGET_ARRAY_MODE_SUPPORTED_P\n\ngcc/:\n\n\t* config/aarch64/aarch64.h (AARCH64_VALID_SIMD_DREG_MODE): New.\n\n\t* config/aarch64/aarch64.c (aarch64_array_mode_supported_p): Add\n\tAARCH64_VALID_SIMD_DREG_MODE.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/vect_int32x2x4_1.c: New.\n\nFrom-SVN: r227794", "tree": {"sha": "a36477036f51b2283384f554965e11a741eaa284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a36477036f51b2283384f554965e11a741eaa284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/635e66fec3addc5af7e2ab65793af7237e555922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635e66fec3addc5af7e2ab65793af7237e555922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635e66fec3addc5af7e2ab65793af7237e555922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635e66fec3addc5af7e2ab65793af7237e555922/comments", "author": null, "committer": null, "parents": [{"sha": "97755701afbdc34215954008d6550065631ca826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97755701afbdc34215954008d6550065631ca826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97755701afbdc34215954008d6550065631ca826"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "38719b9e03aad40fb42ad7328a90c225b900011b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=635e66fec3addc5af7e2ab65793af7237e555922", "patch": "@@ -1,3 +1,10 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_VALID_SIMD_DREG_MODE): New.\n+\n+\t* config/aarch64/aarch64.c (aarch64_array_mode_supported_p): Add\n+\tAARCH64_VALID_SIMD_DREG_MODE.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_ld2r<mode>,"}, {"sha": "bbac271488fc878b0e896a4b87dba0e86fccf680", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=635e66fec3addc5af7e2ab65793af7237e555922", "patch": "@@ -677,7 +677,8 @@ aarch64_array_mode_supported_p (machine_mode mode,\n \t\t\t\tunsigned HOST_WIDE_INT nelems)\n {\n   if (TARGET_SIMD\n-      && AARCH64_VALID_SIMD_QREG_MODE (mode)\n+      && (AARCH64_VALID_SIMD_QREG_MODE (mode)\n+\t  || AARCH64_VALID_SIMD_DREG_MODE (mode))\n       && (nelems >= 2 && nelems <= 4))\n     return true;\n "}, {"sha": "5a8db763222ac059d5ae4dc09d033d9bbfe56072", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=635e66fec3addc5af7e2ab65793af7237e555922", "patch": "@@ -872,6 +872,12 @@ extern enum aarch64_code_model aarch64_cmodel;\n   (aarch64_cmodel == AARCH64_CMODEL_TINY\t\t\\\n    || aarch64_cmodel == AARCH64_CMODEL_TINY_PIC)\n \n+/* Modes valid for AdvSIMD D registers, i.e. that fit in half a Q register.  */\n+#define AARCH64_VALID_SIMD_DREG_MODE(MODE) \\\n+  ((MODE) == V2SImode || (MODE) == V4HImode || (MODE) == V8QImode \\\n+   || (MODE) == V2SFmode || (MODE) == V4HFmode || (MODE) == DImode \\\n+   || (MODE) == DFmode)\n+\n /* Modes valid for AdvSIMD Q registers.  */\n #define AARCH64_VALID_SIMD_QREG_MODE(MODE) \\\n   ((MODE) == V4SImode || (MODE) == V8HImode || (MODE) == V16QImode \\"}, {"sha": "6cea108480075c711c3057fb6a36cef4d1d884e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=635e66fec3addc5af7e2ab65793af7237e555922", "patch": "@@ -1,3 +1,7 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vect_int32x2x4_1.c: New.\n+\n 2015-09-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67563"}, {"sha": "734cfd61bdaa625fe370d885c1cf258e39c87713", "filename": "gcc/testsuite/gcc.target/aarch64/vect_int32x2x4_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_int32x2x4_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/635e66fec3addc5af7e2ab65793af7237e555922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_int32x2x4_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_int32x2x4_1.c?ref=635e66fec3addc5af7e2ab65793af7237e555922", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-rtl-expand\" } */\n+\n+#include <arm_neon.h>\n+\n+uint32x2x4_t\n+test_1 (uint32x2x4_t a, uint32x2x4_t b)\n+{\n+   uint32x2x4_t result;\n+\n+   for (unsigned index = 0; index < 4; ++index)\n+     result.val[index] = a.val[index] + b.val[index];\n+\n+   return result;\n+}\n+\n+/* Should not use the stack in expand.  */\n+/* { dg-final { scan-rtl-dump-not \"virtual-stack-vars\" \"expand\" } } */\n+/* Should not have to modify the stack pointer.  */\n+/* { dg-final { scan-assembler-not \"\\t(add|sub).*sp\" } } */\n+/* Should not have to store or load anything.  */\n+/* { dg-final { scan-assembler-not \"\\t(ld|st)\\[rp\\]\" } } */"}]}