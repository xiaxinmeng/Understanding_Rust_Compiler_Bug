{"sha": "4df1190a74679ca430b7800123393625ffa0b6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRmMTE5MGE3NDY3OWNhNDMwYjc4MDAxMjMzOTM2MjVmZmEwYjZlMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-11-25T17:38:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-11-25T17:38:58Z"}, "message": "sparc.md (muldi3_v8plus): Remove H constraint.\n\n\t* config/sparc/sparc.md (muldi3_v8plus): Remove H constraint.\n\tHandle CONST_INT as second argument.\n\t* config/sparc/sparc.c (set_extends): Remove first argument.\n\tProperly handle AND, CONST_INT and CONST_DOUBLE, handle IOR, XOR and\n\tMOV.\n\t(sparc_check_64): Abort if first argument is not REG.\n\tIf it is DImode REG, look at the lower register of the register\n\tpair.\n\n\t* config/sparc/sparc.c (load_pic_register, restore_regs,\n\toutput_return, sparc_v8plus_shift, sparc_function_profiler,\n\tsparc_function_block_profiler, sparc_block_profiler): Fix output\n\tformatting.\n\n\t* gcc.dg/ultrasp3.c: New test.\n\nFrom-SVN: r37738", "tree": {"sha": "1a1b2c5a6074468346931b1dfea1f30c3e4ef1c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a1b2c5a6074468346931b1dfea1f30c3e4ef1c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4df1190a74679ca430b7800123393625ffa0b6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df1190a74679ca430b7800123393625ffa0b6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df1190a74679ca430b7800123393625ffa0b6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df1190a74679ca430b7800123393625ffa0b6e0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fe0a76c67073e9a162488ef84d700a7c0932a22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe0a76c67073e9a162488ef84d700a7c0932a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe0a76c67073e9a162488ef84d700a7c0932a22"}], "stats": {"total": 198, "additions": 141, "deletions": 57}, "files": [{"sha": "724c75f46e365af62b4d78e36f07859671526abb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4df1190a74679ca430b7800123393625ffa0b6e0", "patch": "@@ -1,3 +1,19 @@\n+2000-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.md (muldi3_v8plus): Remove H constraint.\n+\tHandle CONST_INT as second argument.\n+\t* config/sparc/sparc.c (set_extends): Remove first argument.\n+\tProperly handle AND, CONST_INT and CONST_DOUBLE, handle IOR, XOR and\n+\tMOV.\n+\t(sparc_check_64): Abort if first argument is not REG.\n+\tIf it is DImode REG, look at the lower register of the register\n+\tpair.\n+\n+\t* config/sparc/sparc.c (load_pic_register, restore_regs,\n+\toutput_return, sparc_v8plus_shift, sparc_function_profiler,\n+\tsparc_function_block_profiler, sparc_block_profiler): Fix output\n+\tformatting.\n+\n 2000-11-25  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.h (TARGET_NONE): New."}, {"sha": "863b3eb3387b0d9444fe101ecd5d72a4c1828aa1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 77, "deletions": 56, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4df1190a74679ca430b7800123393625ffa0b6e0", "patch": "@@ -153,7 +153,7 @@ static rtx *ultra_find_type PARAMS ((int, rtx *, int));\n static void ultra_build_types_avail PARAMS ((rtx *, int));\n static void ultra_flush_pipeline PARAMS ((void));\n static void ultra_rescan_pipeline_state PARAMS ((rtx *, int));\n-static int set_extends PARAMS ((rtx, rtx));\n+static int set_extends PARAMS ((rtx));\n static void output_restore_regs PARAMS ((FILE *, int));\n \f\n /* Option handling.  */\n@@ -2852,7 +2852,7 @@ load_pic_register ()\n       if (align > 0)\n \tASM_OUTPUT_ALIGN (asm_out_file, align);\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LGETPC\", 0);\n-      fputs (\"\\tretl\\n\\tadd %o7,%l7,%l7\\n\", asm_out_file);\n+      fputs (\"\\tretl\\n\\tadd\\t%o7, %l7, %l7\\n\", asm_out_file);\n     }\n \n   /* Initialize every time through, since we can't easily\n@@ -3253,11 +3253,11 @@ restore_regs (file, low, high, base, offset, n_regs)\n \t\t       base, offset + 4 * n_regs, reg_names[i]),\n \t      n_regs += 2;\n \t    else\n-\t      fprintf (file, \"\\tld\\t[%s+%d],%s\\n\",\n+\t      fprintf (file, \"\\tld\\t[%s+%d], %s\\n\",\n \t\t       base, offset + 4 * n_regs, reg_names[i]),\n \t      n_regs += 2;\n \t  else if (regs_ever_live[i+1] && ! call_used_regs[i+1])\n-\t    fprintf (file, \"\\tld\\t[%s+%d],%s\\n\",\n+\t    fprintf (file, \"\\tld\\t[%s+%d], %s\\n\",\n \t\t     base, offset + 4 * n_regs + 4, reg_names[i+1]),\n \t    n_regs += 2;\n \t}\n@@ -5417,9 +5417,9 @@ output_return (operands)\n       else\n \t{\n \t  if ((actual_fsize & 0x3ff) != 0)\n-\t    return \"sethi %%hi(%a0),%%g1\\n\\tor %%g1,%%lo(%a0),%%g1\\n\\tretl\\n\\tadd %%sp,%%g1,%%sp\";\n+\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tor\\t%%g1, %%lo(%a0), %%g1\\n\\tretl\\n\\tadd\\t%%sp, %%g1, %%sp\";\n \t  else\n-\t    return \"sethi %%hi(%a0),%%g1\\n\\tretl\\n\\tadd %%sp,%%g1,%%sp\";\n+\t    return \"sethi\\t%%hi(%a0), %%g1\\n\\tretl\\n\\tadd\\t%%sp, %%g1, %%sp\";\n \t}\n     }\n   else if (TARGET_V9)\n@@ -7978,8 +7978,8 @@ sparc_issue_rate ()\n }\n \n static int\n-set_extends(x, insn)\n-     rtx x, insn;\n+set_extends (insn)\n+     rtx insn;\n {\n   register rtx pat = PATTERN (insn);\n \n@@ -8003,27 +8003,40 @@ set_extends(x, insn)\n       return 1;\n     case AND:\n       {\n+\trtx op0 = XEXP (SET_SRC (pat), 0);\n \trtx op1 = XEXP (SET_SRC (pat), 1);\n \tif (GET_CODE (op1) == CONST_INT)\n \t  return INTVAL (op1) >= 0;\n-\tif (GET_CODE (XEXP (SET_SRC (pat), 0)) == REG\n-\t    && sparc_check_64 (XEXP (SET_SRC (pat), 0), insn) == 1)\n-\t  return 1;\n-\tif (GET_CODE (op1) == REG\n-\t    && sparc_check_64 ((op1), insn) == 1)\n+\tif (GET_CODE (op0) != REG)\n+\t  return 0;\n+\tif (sparc_check_64 (op0, insn) == 1)\n \t  return 1;\n+\treturn (GET_CODE (op1) == REG && sparc_check_64 (op1, insn) == 1);\n+      }\n+    case IOR:\n+    case XOR:\n+      {\n+\trtx op0 = XEXP (SET_SRC (pat), 0);\n+\trtx op1 = XEXP (SET_SRC (pat), 1);\n+\tif (GET_CODE (op0) != REG || sparc_check_64 (op0, insn) <= 0)\n+\t  return 0;\n+\tif (GET_CODE (op1) == CONST_INT)\n+\t  return INTVAL (op1) >= 0;\n+\treturn (GET_CODE (op1) == REG && sparc_check_64 (op1, insn) == 1);\n       }\n     case ASHIFT:\n     case LSHIFTRT:\n       return GET_MODE (SET_SRC (pat)) == SImode;\n       /* Positive integers leave the high bits zero. */\n     case CONST_DOUBLE:\n-      return ! (CONST_DOUBLE_LOW (x) & 0x80000000);\n+      return ! (CONST_DOUBLE_LOW (SET_SRC (pat)) & 0x80000000);\n     case CONST_INT:\n-      return ! (INTVAL (x) & 0x80000000);\n+      return ! (INTVAL (SET_SRC (pat)) & 0x80000000);\n     case ASHIFTRT:\n     case SIGN_EXTEND:\n       return - (GET_MODE (SET_SRC (pat)) == SImode);\n+    case REG:\n+      return sparc_check_64 (SET_SRC (pat), insn);\n     default:\n       return 0;\n     }\n@@ -8145,10 +8158,16 @@ sparc_check_64 (x, insn)\n      the single set and return the correct value or fail to recognize\n      it and return 0.  */\n   int set_once = 0;\n+  rtx y = x;\n+\n+  if (GET_CODE (x) != REG)\n+    abort ();\n+\n+  if (GET_MODE (x) == DImode)\n+    y = gen_rtx_REG (SImode, REGNO (x) + WORDS_BIG_ENDIAN);\n \n-  if (GET_CODE (x) == REG\n-      && flag_expensive_optimizations\n-      && REG_N_SETS (REGNO (x)) == 1)\n+  if (flag_expensive_optimizations\n+      && REG_N_SETS (REGNO (y)) == 1)\n     set_once = 1;\n \n   if (insn == 0)\n@@ -8178,8 +8197,10 @@ sparc_check_64 (x, insn)\n \t    if (GET_CODE (pat) != SET)\n \t      return 0;\n \t    if (rtx_equal_p (x, SET_DEST (pat)))\n-\t      return set_extends (x, insn);\n-\t    if (reg_overlap_mentioned_p (SET_DEST (pat), x))\n+\t      return set_extends (insn);\n+\t    if (y && rtx_equal_p (y, SET_DEST (pat)))\n+\t      return set_extends (insn);\n+\t    if (reg_overlap_mentioned_p (SET_DEST (pat), y))\n \t      return 0;\n \t  }\n \t}\n@@ -8199,21 +8220,21 @@ sparc_v8plus_shift (operands, insn, opcode)\n     operands[3] = operands[0];\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n-      output_asm_insn (\"mov %1,%3\", operands);\n+      output_asm_insn (\"mov\\t%1, %3\", operands);\n     }\n   else\n     {\n-      output_asm_insn (\"sllx %H1,32,%3\", operands);\n+      output_asm_insn (\"sllx\\t%H1, 32, %3\", operands);\n       if (sparc_check_64 (operands[1], insn) <= 0)\n-\toutput_asm_insn (\"srl %L1,0,%L1\", operands);\n-      output_asm_insn (\"or %L1,%3,%3\", operands);\n+\toutput_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n+      output_asm_insn (\"or\\t%L1, %3, %3\", operands);\n     }\n \n   strcpy(asm_code, opcode);\n   if (which_alternative != 2)\n-    return strcat (asm_code, \" %0,%2,%L0\\n\\tsrlx %L0,32,%H0\");\n+    return strcat (asm_code, \"\\t%0, %2, %L0\\n\\tsrlx\\t%L0, 32, %H0\");\n   else\n-    return strcat (asm_code, \" %3,%2,%3\\n\\tsrlx %3,32,%H0\\n\\tmov %3,%L0\");\n+    return strcat (asm_code, \"\\t%3, %2, %3\\n\\tsrlx\\t%3, 32, %H0\\n\\tmov\\t%3, %L0\");\n }\n \n \n@@ -8250,22 +8271,22 @@ sparc_function_profiler (file, labelno)\n   ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n \n   if (! TARGET_ARCH64)\n-    fputs (\"\\tst\\t%g2,[%fp-4]\\n\", file);\n+    fputs (\"\\tst\\t%g2, [%fp-4]\\n\", file);\n \n   fputs (\"\\tsethi\\t%hi(\", file);\n   assemble_name (file, buf);\n-  fputs (\"),%o0\\n\", file);\n+  fputs (\"), %o0\\n\", file);\n \n   fputs (\"\\tcall\\t\", file);\n   assemble_name (file, MCOUNT_FUNCTION);\n   putc ('\\n', file);\n \n-  fputs (\"\\t or\\t%o0,%lo(\", file);\n+  fputs (\"\\t or\\t%o0, %lo(\", file);\n   assemble_name (file, buf);\n-  fputs (\"),%o0\\n\", file);\n+  fputs (\"), %o0\\n\", file);\n \n   if (! TARGET_ARCH64)\n-    fputs (\"\\tld\\t[%fp-4],%g2\\n\", file);\n+    fputs (\"\\tld\\t[%fp-4], %g2\\n\", file);\n }\n \n \n@@ -8337,17 +8358,17 @@ sparc_function_block_profiler(file, block_or_label)\n     {\n       fputs (\"\\tsethi\\t%hi(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%o0\\n\", file);\n+      fputs (\"), %o0\\n\", file);\n   \n-      fprintf (file, \"\\tsethi\\t%%hi(%d),%%o1\\n\", block_or_label);\n+      fprintf (file, \"\\tsethi\\t%%hi(%d), %%o1\\n\", block_or_label);\n \n-      fputs (\"\\tor\\t%o0,%lo(\", file);\n+      fputs (\"\\tor\\t%o0, %lo(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%o0\\n\", file);\n+      fputs (\"), %o0\\n\", file);\n   \n       fprintf (file, \"\\tcall\\t%s__bb_init_trace_func\\n\", user_label_prefix);\n \n-      fprintf (file, \"\\t or\\t%%o1,%%lo(%d),%%o1\\n\", block_or_label);\n+      fprintf (file, \"\\t or\\t%%o1, %%lo(%d), %%o1\\n\", block_or_label);\n     }\n   else if (profile_block_flag != 0)\n     {\n@@ -8356,11 +8377,11 @@ sparc_function_block_profiler(file, block_or_label)\n \n       fputs (\"\\tsethi\\t%hi(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%o0\\n\", file);\n+      fputs (\"), %o0\\n\", file);\n       \n       fputs (\"\\tld\\t[%lo(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\")+%o0],%o1\\n\", file);\n+      fputs (\")+%o0], %o1\\n\", file);\n \n       fputs (\"\\ttst\\t%o1\\n\", file);\n \n@@ -8377,9 +8398,9 @@ sparc_function_block_profiler(file, block_or_label)\n \t  putc ('\\n', file);\n \t}\n \n-      fputs (\"\\t or\\t%o0,%lo(\", file);\n+      fputs (\"\\t or\\t%o0, %lo(\", file);\n       assemble_name (file, LPBX);\n-      fputs (\"),%o0\\n\", file);\n+      fputs (\"), %o0\\n\", file);\n \n       fprintf (file, \"\\tcall\\t%s__bb_init_func\\n\\t nop\\n\", user_label_prefix);\n \n@@ -8464,46 +8485,46 @@ sparc_block_profiler(file, blockno)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (LPBX, \"LPBX\", 0);\n \n-      fprintf (file, \"\\tsethi\\t%%hi(%s__bb),%%g1\\n\", user_label_prefix);\n-      fprintf (file, \"\\tsethi\\t%%hi(%d),%%g%d\\n\", blockno, bbreg);\n-      fprintf (file, \"\\tor\\t%%g1,%%lo(%s__bb),%%g1\\n\", user_label_prefix);\n-      fprintf (file, \"\\tor\\t%%g%d,%%lo(%d),%%g%d\\n\", bbreg, blockno, bbreg);\n+      fprintf (file, \"\\tsethi\\t%%hi(%s__bb), %%g1\\n\", user_label_prefix);\n+      fprintf (file, \"\\tsethi\\t%%hi(%d), %%g%d\\n\", blockno, bbreg);\n+      fprintf (file, \"\\tor\\t%%g1, %%lo(%s__bb), %%g1\\n\", user_label_prefix);\n+      fprintf (file, \"\\tor\\t%%g%d, %%lo(%d), %%g%d\\n\", bbreg, blockno, bbreg);\n \n-      fprintf (file, \"\\tst\\t%%g%d,[%%g1]\\n\", bbreg);\n+      fprintf (file, \"\\tst\\t%%g%d, [%%g1]\\n\", bbreg);\n \n       fputs (\"\\tsethi\\t%hi(\", file);\n       assemble_name (file, LPBX);\n-      fprintf (file, \"),%%g%d\\n\", bbreg);\n+      fprintf (file, \"), %%g%d\\n\", bbreg);\n   \n-      fputs (\"\\tor\\t%o2,%lo(\", file);\n+      fputs (\"\\tor\\t%o2, %lo(\", file);\n       assemble_name (file, LPBX);\n-      fprintf (file, \"),%%g%d\\n\", bbreg);\n+      fprintf (file, \"), %%g%d\\n\", bbreg);\n   \n-      fprintf (file, \"\\tst\\t%%g%d,[%%g1+4]\\n\", bbreg);\n-      fprintf (file, \"\\tmov\\t%%o7,%%g%d\\n\", bbreg);\n+      fprintf (file, \"\\tst\\t%%g%d, [%%g1 + 4]\\n\", bbreg);\n+      fprintf (file, \"\\tmov\\t%%o7, %%g%d\\n\", bbreg);\n \n       fprintf (file, \"\\tcall\\t%s__bb_trace_func\\n\\t nop\\n\", user_label_prefix);\n \n-      fprintf (file, \"\\tmov\\t%%g%d,%%o7\\n\", bbreg);\n+      fprintf (file, \"\\tmov\\t%%g%d, %%o7\\n\", bbreg);\n     }\n   else if (profile_block_flag != 0)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (LPBX, \"LPBX\", 2);\n \n       fputs (\"\\tsethi\\t%hi(\", file);\n       assemble_name (file, LPBX);\n-      fprintf (file, \"+%d),%%g1\\n\", blockno*4);\n+      fprintf (file, \"+%d), %%g1\\n\", blockno*4);\n \n       fputs (\"\\tld\\t[%g1+%lo(\", file);\n       assemble_name (file, LPBX);\n       if (TARGET_ARCH64 && USE_AS_OFFSETABLE_LO10)\n-\tfprintf (file, \")+%d],%%g%d\\n\", blockno*4, bbreg);\n+\tfprintf (file, \")+%d], %%g%d\\n\", blockno*4, bbreg);\n       else\n-\tfprintf (file, \"+%d)],%%g%d\\n\", blockno*4, bbreg);\n+\tfprintf (file, \"+%d)], %%g%d\\n\", blockno*4, bbreg);\n \n-      fprintf (file, \"\\tadd\\t%%g%d,1,%%g%d\\n\", bbreg, bbreg);\n+      fprintf (file, \"\\tadd\\t%%g%d, 1, %%g%d\\n\", bbreg, bbreg);\n \n-      fprintf (file, \"\\tst\\t%%g%d,[%%g1+%%lo(\", bbreg);\n+      fprintf (file, \"\\tst\\t%%g%d, [%%g1+%%lo(\", bbreg);\n       assemble_name (file, LPBX);\n       if (TARGET_ARCH64 && USE_AS_OFFSETABLE_LO10)\n \tfprintf (file, \")+%d]\\n\", blockno*4);"}, {"sha": "21cf0a3bc8c38114a446665d0fcd70f73fd65d66", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=4df1190a74679ca430b7800123393625ffa0b6e0", "patch": "@@ -6088,7 +6088,7 @@\n (define_insn \"muldi3_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n \t(mult:DI (match_operand:DI 1 \"arith_double_operand\" \"%r,0\")\n-\t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI,rHI\")))\n+\t\t (match_operand:DI 2 \"arith_double_operand\" \"rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n   \"TARGET_V8PLUS\"\n@@ -6098,6 +6098,13 @@\n     output_asm_insn (\\\"srl\\\\t%L1, 0, %L1\\\", operands);\n   if (which_alternative == 1)\n     output_asm_insn (\\\"sllx\\\\t%H1, 32, %H1\\\", operands);\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    {\n+      if (which_alternative == 1)\n+\treturn \\\"or\\\\t%L1, %H1, %H1\\\\n\\\\tmulx\\\\t%H1, %2, %L0\\;srlx\\\\t%L0, 32, %H0\\\";\n+      else\n+\treturn \\\"sllx\\\\t%H1, 32, %3\\\\n\\\\tor\\\\t%L1, %3, %3\\\\n\\\\tmulx\\\\t%3, %2, %3\\\\n\\\\tsrlx\\\\t%3, 32, %H0\\\\n\\\\tmov\\\\t%3, %L0\\\";\n+    }\n   if (sparc_check_64 (operands[2], insn) <= 0)\n     output_asm_insn (\\\"srl\\\\t%L2, 0, %L2\\\", operands);\n   if (which_alternative == 1)"}, {"sha": "b328ff3402741f01b356d0a47c5a8035a6fd33b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4df1190a74679ca430b7800123393625ffa0b6e0", "patch": "@@ -1,3 +1,7 @@\n+2000-11-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/ultrasp3.c: New test.\n+\n 2000-11-25  Neil Booth  <neilb@earthling.net>\n \n \t* gcc.dg/cpp/include2.c: Update test to be locale independent."}, {"sha": "5156c17e82218390c27de914b26eb069d6e9b710", "filename": "gcc/testsuite/gcc.dg/ultrasp3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df1190a74679ca430b7800123393625ffa0b6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fultrasp3.c?ref=4df1190a74679ca430b7800123393625ffa0b6e0", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mcpu=ultrasparc -mv8plus\" { target sparc-*-* } } */\n+\n+unsigned long long foo (unsigned long long x)\n+{\n+  return 0x73500000735LL * x;\n+}\n+\n+unsigned long long a, b;\n+unsigned long p;\n+\n+unsigned long long bar (void)  \n+{\n+  unsigned long long c = a | b;\n+  return 0x73500000735LL * c;\n+}\n+\n+unsigned long long baz (void)\n+{\n+  unsigned long long c = (p + 345) & -2;\n+  return c * a;\n+}\n+\n+main ()\n+{\n+  if (foo (0x56789LL) != 0x26f32e5d26f32e5dLL)\n+    abort ();\n+  a = 0x8000000080000000LL;\n+  b = 0x0000000180000001LL;\n+  if (bar () != 0x120480000735LL)\n+    abort ();\n+  p = 0xffffffff;\n+  if (baz () != 0xac00000000LL)\n+    abort ();\n+  exit (0);\n+}"}]}