{"sha": "d9725c411caad2a174d3e3d91929240323661778", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3MjVjNDExY2FhZDJhMTc0ZDNlM2Q5MTkyOTI0MDMyMzY2MTc3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-26T05:27:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-26T05:27:14Z"}, "message": "re PR middle-end/17965 (ice in expand_call)\n\n\tPR middle-end/17965\n\t* calls.c (expand_call, emit_library_call_value_1): Use xmalloc/free\n\tinstead of alloca for really big argument sizes.\n\n\t* gcc.c-torture/compile/20050622-1.c: New test.\n\nFrom-SVN: r101333", "tree": {"sha": "8c9bcda4847f4df544cda5ec12d8094d3a8ec3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c9bcda4847f4df544cda5ec12d8094d3a8ec3f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9725c411caad2a174d3e3d91929240323661778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9725c411caad2a174d3e3d91929240323661778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9725c411caad2a174d3e3d91929240323661778", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9725c411caad2a174d3e3d91929240323661778/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19dbbf3697cff8c0eb50b5ada203860c623f2cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dbbf3697cff8c0eb50b5ada203860c623f2cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dbbf3697cff8c0eb50b5ada203860c623f2cde"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "f6ff44e99ce2230c8ace342fdb07188569cd0bdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9725c411caad2a174d3e3d91929240323661778/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9725c411caad2a174d3e3d91929240323661778/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9725c411caad2a174d3e3d91929240323661778", "patch": "@@ -1,5 +1,9 @@\n 2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/17965\n+\t* calls.c (expand_call, emit_library_call_value_1): Use xmalloc/free\n+\tinstead of alloca for really big argument sizes.\n+\n \tPR middle-end/22028\n \t* gimplify.c (gimplify_type_sizes): Check for type == error_mark_node\n \tearlier in the function."}, {"sha": "1613e883746e5e7f210b36c55a3ce2491c139967", "filename": "gcc/calls.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9725c411caad2a174d3e3d91929240323661778/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9725c411caad2a174d3e3d91929240323661778/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d9725c411caad2a174d3e3d91929240323661778", "patch": "@@ -1864,6 +1864,7 @@ expand_call (tree exp, rtx target, int ignore)\n \n   int initial_highest_arg_in_use = highest_outgoing_arg_in_use;\n   char *initial_stack_usage_map = stack_usage_map;\n+  char *stack_usage_map_buf = NULL;\n \n   int old_stack_allocated;\n \n@@ -2350,7 +2351,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,\n \t\t\t\t\t\t     needed);\n #endif\n-\t\t  stack_usage_map = alloca (highest_outgoing_arg_in_use);\n+\t\t  if (stack_usage_map_buf)\n+\t\t    free (stack_usage_map_buf);\n+\t\t  stack_usage_map_buf = xmalloc (highest_outgoing_arg_in_use);\n+\t\t  stack_usage_map = stack_usage_map_buf;\n \n \t\t  if (initial_highest_arg_in_use)\n \t\t    memcpy (stack_usage_map, initial_stack_usage_map,\n@@ -2455,7 +2459,10 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t    = stack_arg_under_construction;\n \t\t  stack_arg_under_construction = 0;\n \t\t  /* Make a new map for the new argument list.  */\n-\t\t  stack_usage_map = alloca (highest_outgoing_arg_in_use);\n+\t\t  if (stack_usage_map_buf)\n+\t\t    free (stack_usage_map_buf);\n+\t\t  stack_usage_map_buf = xmalloc (highest_outgoing_arg_in_use);\n+\t\t  stack_usage_map = stack_usage_map_buf;\n \t\t  memset (stack_usage_map, 0, highest_outgoing_arg_in_use);\n \t\t  highest_outgoing_arg_in_use = 0;\n \t\t}\n@@ -3009,6 +3016,9 @@ expand_call (tree exp, rtx target, int ignore)\n       emit_move_insn (virtual_stack_dynamic_rtx, stack_pointer_rtx);\n     }\n \n+  if (stack_usage_map_buf)\n+    free (stack_usage_map_buf);\n+\n   return target;\n }\n \n@@ -3203,6 +3213,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n   /* Size of the stack reserved for parameter registers.  */\n   int initial_highest_arg_in_use = highest_outgoing_arg_in_use;\n   char *initial_stack_usage_map = stack_usage_map;\n+  char *stack_usage_map_buf = NULL;\n \n   rtx struct_value = targetm.calls.struct_value_rtx (0, 0);\n \n@@ -3481,7 +3492,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,\n \t\t\t\t\t needed);\n #endif\n-      stack_usage_map = alloca (highest_outgoing_arg_in_use);\n+      stack_usage_map_buf = xmalloc (highest_outgoing_arg_in_use);\n+      stack_usage_map = stack_usage_map_buf;\n \n       if (initial_highest_arg_in_use)\n \tmemcpy (stack_usage_map, initial_stack_usage_map,\n@@ -3835,6 +3847,9 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       stack_usage_map = initial_stack_usage_map;\n     }\n \n+  if (stack_usage_map_buf)\n+    free (stack_usage_map_buf);\n+\n   return value;\n \n }"}, {"sha": "e0a2ce55290a44a50df8dfa420f348b3d3891764", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9725c411caad2a174d3e3d91929240323661778/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9725c411caad2a174d3e3d91929240323661778/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9725c411caad2a174d3e3d91929240323661778", "patch": "@@ -1,5 +1,8 @@\n 2005-06-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/17965\n+\t* gcc.c-torture/compile/20050622-1.c: New test.\n+\n \tPR middle-end/22028\n \t* gcc.dg/20050620-1.c: New test.\n "}, {"sha": "db183909f401e67ece7f0bca88e466392f7fdb8d", "filename": "gcc/testsuite/gcc.c-torture/compile/20050622-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9725c411caad2a174d3e3d91929240323661778/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050622-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9725c411caad2a174d3e3d91929240323661778/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050622-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050622-1.c?ref=d9725c411caad2a174d3e3d91929240323661778", "patch": "@@ -0,0 +1,16 @@\n+#if __SCHAR_MAX__ == 127 && __INT_MAX__ >= 2147483647\n+struct S { char buf[72*1024*1024]; };\n+#else\n+struct S { char buf[64]; };\n+#endif\n+\n+extern void bar (struct S);\n+\n+struct S s;\n+\n+int\n+foo (void)\n+{\n+  bar (s);\n+  return 0;\n+}"}]}