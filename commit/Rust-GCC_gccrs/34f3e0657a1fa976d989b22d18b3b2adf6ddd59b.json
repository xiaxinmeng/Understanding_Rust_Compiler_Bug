{"sha": "34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmM2UwNjU3YTFmYTk3NmQ5ODliMjJkMThiM2IyYWRmNmRkZDU5Yg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-08-29T18:04:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-08-29T23:14:18Z"}, "message": "libiberty: Add support for demangling D function literals as template value parameters\n\nThe D language now allows instantiating templates using struct literals\nthat have function literal fields as a value argument.\n\nlibiberty/ChangeLog:\n\n\t* d-demangle.c (dlang_parse_arrayliteral): Add 'info' parameter.\n\t(dlang_parse_assocarray): Likewise.\n\t(dlang_parse_structlit): Likewise.\n\t(dlang_value): Likewise.  Handle function literal symbols.\n\t(dlang_template_args): Pass 'info' to dlang_value.\n\t* testsuite/d-demangle-expected: Add new test.", "tree": {"sha": "f42ebab871e2504b77aa9d328bb4b63abd7957be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42ebab871e2504b77aa9d328bb4b63abd7957be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e32a5aa8bc967bc183142a596d0a6460be27438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e32a5aa8bc967bc183142a596d0a6460be27438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e32a5aa8bc967bc183142a596d0a6460be27438"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "d74cf47b1a935ee2f03991494769a8e202d3e553", "filename": "libiberty/d-demangle.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b/libiberty%2Fd-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b/libiberty%2Fd-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fd-demangle.c?ref=34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "patch": "@@ -191,7 +191,8 @@ static const char *dlang_function_args (string *, const char *,\n \n static const char *dlang_type (string *, const char *, struct dlang_info *);\n \n-static const char *dlang_value (string *, const char *, const char *, char);\n+static const char *dlang_value (string *, const char *, const char *, char,\n+\t\t\t\tstruct dlang_info *);\n \n static const char *dlang_parse_qualified (string *, const char *,\n \t\t\t\t\t  struct dlang_info *, int);\n@@ -1386,7 +1387,8 @@ dlang_parse_string (string *decl, const char *mangled)\n /* Extract the static array value from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n-dlang_parse_arrayliteral (string *decl, const char *mangled)\n+dlang_parse_arrayliteral (string *decl, const char *mangled,\n+\t\t\t  struct dlang_info *info)\n {\n   unsigned long elements;\n \n@@ -1397,7 +1399,7 @@ dlang_parse_arrayliteral (string *decl, const char *mangled)\n   string_append (decl, \"[\");\n   while (elements--)\n     {\n-      mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      mangled = dlang_value (decl, mangled, NULL, '\\0', info);\n       if (mangled == NULL)\n \treturn NULL;\n \n@@ -1412,7 +1414,8 @@ dlang_parse_arrayliteral (string *decl, const char *mangled)\n /* Extract the associative array value from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n-dlang_parse_assocarray (string *decl, const char *mangled)\n+dlang_parse_assocarray (string *decl, const char *mangled,\n+\t\t\tstruct dlang_info *info)\n {\n   unsigned long elements;\n \n@@ -1423,12 +1426,12 @@ dlang_parse_assocarray (string *decl, const char *mangled)\n   string_append (decl, \"[\");\n   while (elements--)\n     {\n-      mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      mangled = dlang_value (decl, mangled, NULL, '\\0', info);\n       if (mangled == NULL)\n \treturn NULL;\n \n       string_append (decl, \":\");\n-      mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      mangled = dlang_value (decl, mangled, NULL, '\\0', info);\n       if (mangled == NULL)\n \treturn NULL;\n \n@@ -1443,7 +1446,8 @@ dlang_parse_assocarray (string *decl, const char *mangled)\n /* Extract the struct literal value for NAME from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n-dlang_parse_structlit (string *decl, const char *mangled, const char *name)\n+dlang_parse_structlit (string *decl, const char *mangled, const char *name,\n+\t\t       struct dlang_info *info)\n {\n   unsigned long args;\n \n@@ -1457,7 +1461,7 @@ dlang_parse_structlit (string *decl, const char *mangled, const char *name)\n   string_append (decl, \"(\");\n   while (args--)\n     {\n-      mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      mangled = dlang_value (decl, mangled, NULL, '\\0', info);\n       if (mangled == NULL)\n \treturn NULL;\n \n@@ -1472,7 +1476,8 @@ dlang_parse_structlit (string *decl, const char *mangled, const char *name)\n /* Extract the value from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n-dlang_value (string *decl, const char *mangled, const char *name, char type)\n+dlang_value (string *decl, const char *mangled, const char *name, char type,\n+\t     struct dlang_info *info)\n {\n   if (mangled == NULL || *mangled == '\\0')\n     return NULL;\n@@ -1533,15 +1538,24 @@ dlang_value (string *decl, const char *mangled, const char *name, char type)\n     case 'A':\n       mangled++;\n       if (type == 'H')\n-\tmangled = dlang_parse_assocarray (decl, mangled);\n+\tmangled = dlang_parse_assocarray (decl, mangled, info);\n       else\n-\tmangled = dlang_parse_arrayliteral (decl, mangled);\n+\tmangled = dlang_parse_arrayliteral (decl, mangled, info);\n       break;\n \n       /* Struct values.  */\n     case 'S':\n       mangled++;\n-      mangled = dlang_parse_structlit (decl, mangled, name);\n+      mangled = dlang_parse_structlit (decl, mangled, name, info);\n+      break;\n+\n+      /* Function literal symbol.  */\n+    case 'f':\n+      mangled++;\n+      if (strncmp (mangled, \"_D\", 2) != 0\n+\t  || !dlang_symbol_name_p (mangled + 2, info))\n+\treturn NULL;\n+      mangled = dlang_parse_mangle (decl, mangled, info);\n       break;\n \n     default:\n@@ -1814,7 +1828,7 @@ dlang_template_args (string *decl, const char *mangled, struct dlang_info *info)\n \t  string_need (&name, 1);\n \t  *(name.p) = '\\0';\n \n-\t  mangled = dlang_value (decl, mangled, name.b, type);\n+\t  mangled = dlang_value (decl, mangled, name.b, type, info);\n \t  string_delete (&name);\n \t  break;\n \t}"}, {"sha": "87ed8d330a86273f9dcc461b9b363d9931ed303e", "filename": "libiberty/testsuite/d-demangle-expected", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b/libiberty%2Ftestsuite%2Fd-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f3e0657a1fa976d989b22d18b3b2adf6ddd59b/libiberty%2Ftestsuite%2Fd-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fd-demangle-expected?ref=34f3e0657a1fa976d989b22d18b3b2adf6ddd59b", "patch": "@@ -1418,3 +1418,7 @@ std.algorithm.iteration.FilterResult!(std.typecons.Tuple!(int, \"a\", int, \"b\", in\n --format=dlang\n _D3std3uni__T6toCaseS_DQvQt12toLowerIndexFNaNbNiNewZtVii1043S_DQCjQCi10toLowerTabFNaNbNiNemZwSQDo5ascii7toLowerTAyaZQDzFNaNeQmZ14__foreachbody2MFNaNeKmKwZ14__foreachbody3MFNaNeKwZi\n std.uni.toCase!(std.uni.toLowerIndex(dchar), 1043, std.uni.toLowerTab(ulong), std.ascii.toLower, immutable(char)[]).toCase(immutable(char)[]).__foreachbody2(ref ulong, ref dchar).__foreachbody3(ref dchar)\n+#\n+--format=dlang\n+_D6mangle__T8fun21753VSQv6S21753S1f_DQBj10__lambda71MFNaNbNiNfZvZQCbQp\n+mangle.fun21753!(mangle.S21753(mangle.__lambda71())).fun21753"}]}