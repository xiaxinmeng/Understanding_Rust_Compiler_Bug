{"sha": "c6e434f5b73538b766aed99c2d33a46f6e547006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlNDM0ZjViNzM1MzhiNzY2YWVkOTljMmQzM2E0NmY2ZTU0NzAwNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-25T18:58:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-25T18:58:49Z"}, "message": "re PR target/70738 (Add -mgeneral-regs-only option)\n\n\tPR target/70738\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): New.\n\t(ix86_handle_option) <case OPT_mgeneral_regs_only>: Disable\n\tMPX, MMX, SSE and x87 instructions for -mgeneral-regs-only.\n\t* config/i386/i386.opt (ix86_target_flags): Add new Variable.\n\t(-mgeneral-regs-only): Add new option.\n\t* config/i386/i386.c (ix86_option_override_internal): Don't enable\n\tx87 instructions if only general registers are allowed.\n\t(ix86_target_string): Add ix86_flags argument. Handle additional\n\tflags options through ix86_flags argument.  Update all callers.\n\t* doc/invoke.texi: Document -mgeneral-regs-only.\n\ntestsuite/ChangeLog:\n\n\tPR target/70738\n\t* gcc.target/i386/pr70738-1.c: New test.\n\t* gcc.target/i386/pr70738-2.c: Likewise.\n\t* gcc.target/i386/pr70738-3.c: Likewise.\n\t* gcc.target/i386/pr70738-4.c: Likewise.\n\t* gcc.target/i386/pr70738-5.c: Likewise.\n\t* gcc.target/i386/pr70738-6.c: Likewise.\n\t* gcc.target/i386/pr70738-7.c: Likewise.\n\t* gcc.target/i386/pr70738-8.c: Likewise.\n\t* gcc.target/i386/pr70738-9.c: Likewise.\n\nFrom-SVN: r236738", "tree": {"sha": "8ede5bf7c533630d3573246cbf1ee6ca0c9e2e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ede5bf7c533630d3573246cbf1ee6ca0c9e2e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e434f5b73538b766aed99c2d33a46f6e547006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e434f5b73538b766aed99c2d33a46f6e547006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e434f5b73538b766aed99c2d33a46f6e547006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e434f5b73538b766aed99c2d33a46f6e547006/comments", "author": null, "committer": null, "parents": [{"sha": "0ab22eb32cc212b8c52991d3cc74f00783293060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab22eb32cc212b8c52991d3cc74f00783293060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab22eb32cc212b8c52991d3cc74f00783293060"}], "stats": {"total": 265, "additions": 244, "deletions": 21}, "files": [{"sha": "0172c8ba1546210d84470c87f3666c85b81a8038", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -1,3 +1,27 @@\n+2016-05-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.opt (ix86_target_flags_explicit): Remove.\n+\t(x_ix86_target_flags_explicit): Remove.\n+\t* config/i386/i386.c (ix86_function_specific_save): Do not copy\n+\tx_ix86_target_flags_explicit.\n+\t(ix86_function_specific_restore): Ditto.\n+\n+2016-05-25  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70738\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET): New.\n+\t(ix86_handle_option) <case OPT_mgeneral_regs_only>: Disable\n+\tMPX, MMX, SSE and x87 instructions for -mgeneral-regs-only.\n+\t* config/i386/i386.opt (ix86_target_flags): Add new Variable.\n+\t(-mgeneral-regs-only): Add new option.\n+\t* config/i386/i386.c (ix86_option_override_internal): Don't enable\n+\tx87 instructions if only general registers are allowed.\n+\t(ix86_target_string): Add ix86_flags argument. Handle additional\n+\tflags options through ix86_flags argument.  Update all callers.\n+\t* doc/invoke.texi: Document -mgeneral-regs-only.\n+\n 2016-05-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/66940"}, {"sha": "4f0a55fee66da5e0adab91cdd89719807da33014", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -223,6 +223,11 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n #define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n \n+#define OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET \\\n+  (OPTION_MASK_ISA_MMX_UNSET \\\n+   | OPTION_MASK_ISA_SSE_UNSET \\\n+   | OPTION_MASK_ISA_MPX)\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n bool\n@@ -236,6 +241,22 @@ ix86_handle_option (struct gcc_options *opts,\n \n   switch (code)\n     {\n+    case OPT_mgeneral_regs_only:\n+      if (value)\n+\t{\n+\t  /* Disable MPX, MMX, SSE and x87 instructions if only\n+\t     general registers are allowed.  */\n+\t  opts->x_ix86_isa_flags\n+\t    &= ~OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit\n+\t    |= OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;\n+\n+\t  opts->x_target_flags &= ~MASK_80387;\n+\t}\n+      else\n+\tgcc_unreachable ();\n+      return true;\n+\n     case OPT_mmmx:\n       if (value)\n \t{"}, {"sha": "7e9f51148f5000e216980e5dd11934a2771f14e7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -2586,7 +2586,7 @@ enum ix86_function_specific_strings\n   IX86_FUNCTION_SPECIFIC_MAX\n };\n \n-static char *ix86_target_string (HOST_WIDE_INT, int, const char *,\n+static char *ix86_target_string (HOST_WIDE_INT, int, int, const char *,\n \t\t\t\t const char *, enum fpmath_unit, bool);\n static void ix86_function_specific_save (struct cl_target_option *,\n \t\t\t\t\t struct gcc_options *opts);\n@@ -4084,9 +4084,9 @@ ix86_using_red_zone (void)\n    responsible for freeing the string.  */\n \n static char *\n-ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n-\t\t    const char *tune, enum fpmath_unit fpmath,\n-\t\t    bool add_nl_p)\n+ix86_target_string (HOST_WIDE_INT isa, int flags, int ix86_flags,\n+\t\t    const char *arch, const char *tune,\n+\t\t    enum fpmath_unit fpmath, bool add_nl_p)\n {\n   struct ix86_target_opts\n   {\n@@ -4189,10 +4189,18 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128},\n   };\n \n-  const char *opts[ARRAY_SIZE (isa_opts) + ARRAY_SIZE (flag_opts) + 6][2];\n+  /* Additional flag options.  */\n+  static struct ix86_target_opts ix86_flag_opts[] =\n+  {\n+    { \"-mgeneral-regs-only\",\t\tOPTION_MASK_GENERAL_REGS_ONLY },\n+  };\n+\n+  const char *opts[ARRAY_SIZE (isa_opts) + ARRAY_SIZE (flag_opts)\n+\t\t   + ARRAY_SIZE (ix86_flag_opts) + 6][2];\n \n   char isa_other[40];\n   char target_other[40];\n+  char ix86_target_other[40];\n   unsigned num = 0;\n   unsigned i, j;\n   char *ret;\n@@ -4266,6 +4274,22 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n       sprintf (target_other, \"(other flags: %#x)\", flags);\n     }\n \n+    /* Add additional flag options.  */\n+  for (i = 0; i < ARRAY_SIZE (ix86_flag_opts); i++)\n+    {\n+      if ((ix86_flags & ix86_flag_opts[i].mask) != 0)\n+\t{\n+\t  opts[num++][0] = ix86_flag_opts[i].option;\n+\t  ix86_flags &= ~ ix86_flag_opts[i].mask;\n+\t}\n+    }\n+\n+  if (ix86_flags && add_nl_p)\n+    {\n+      opts[num++][0] = ix86_target_other;\n+      sprintf (ix86_target_other, \"(other flags: %#x)\", ix86_flags);\n+    }\n+\n   /* Add -fpmath= option.  */\n   if (fpmath)\n     {\n@@ -4360,6 +4384,7 @@ void ATTRIBUTE_UNUSED\n ix86_debug_options (void)\n {\n   char *opts = ix86_target_string (ix86_isa_flags, target_flags,\n+\t\t\t\t   ix86_target_flags,\n \t\t\t\t   ix86_arch_string, ix86_tune_string,\n \t\t\t\t   ix86_fpmath, true);\n \n@@ -5337,7 +5362,10 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PKU))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PKU;\n \n-\tif (!(opts_set->x_target_flags & MASK_80387))\n+\t/* Don't enable x87 instructions if only\n+\t   general registers are allowed.  */\n+\tif (!(opts_set->x_ix86_target_flags & OPTION_MASK_GENERAL_REGS_ONLY)\n+\t    && !(opts_set->x_target_flags & MASK_80387))\n \t  {\n \t    if (processor_alias_table[i].flags & PTA_NO_80387)\n \t      opts->x_target_flags &= ~MASK_80387;\n@@ -6075,7 +6103,6 @@ ix86_function_specific_save (struct cl_target_option *ptr,\n   ptr->tune_defaulted = ix86_tune_defaulted;\n   ptr->arch_specified = ix86_arch_specified;\n   ptr->x_ix86_isa_flags_explicit = opts->x_ix86_isa_flags_explicit;\n-  ptr->x_ix86_target_flags_explicit = opts->x_ix86_target_flags_explicit;\n   ptr->x_recip_mask_explicit = opts->x_recip_mask_explicit;\n   ptr->x_ix86_arch_string = opts->x_ix86_arch_string;\n   ptr->x_ix86_tune_string = opts->x_ix86_tune_string;\n@@ -6132,7 +6159,6 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   ix86_tune_defaulted = ptr->tune_defaulted;\n   ix86_arch_specified = ptr->arch_specified;\n   opts->x_ix86_isa_flags_explicit = ptr->x_ix86_isa_flags_explicit;\n-  opts->x_ix86_target_flags_explicit = ptr->x_ix86_target_flags_explicit;\n   opts->x_recip_mask_explicit = ptr->x_recip_mask_explicit;\n   opts->x_ix86_arch_string = ptr->x_ix86_arch_string;\n   opts->x_ix86_tune_string = ptr->x_ix86_tune_string;\n@@ -6239,7 +6265,8 @@ ix86_function_specific_print (FILE *file, int indent,\n {\n   char *target_string\n     = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_target_flags,\n-\t\t\t  NULL, NULL, ptr->x_ix86_fpmath, false);\n+\t\t\t  ptr->x_ix86_target_flags, NULL, NULL,\n+\t\t\t  ptr->x_ix86_fpmath, false);\n \n   gcc_assert (ptr->arch < PROCESSOR_max);\n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n@@ -40593,9 +40620,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n   if (ix86_builtins_isa[fcode].isa\n       && !(ix86_builtins_isa[fcode].isa & ix86_isa_flags))\n     {\n-      char *opts = ix86_target_string (ix86_builtins_isa[fcode].isa, 0, NULL,\n-\t\t\t\t       NULL, (enum fpmath_unit) 0, false);\n-\n+      char *opts = ix86_target_string (ix86_builtins_isa[fcode].isa, 0, 0,\n+\t\t\t\t       NULL, NULL, (enum fpmath_unit) 0,\n+\t\t\t\t       false);\n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);\n       else"}, {"sha": "4b75ba8911a6bd1a33abe0c28a0c7986fd497629", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -30,6 +30,10 @@ HOST_WIDE_INT ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAU\n Variable\n HOST_WIDE_INT ix86_isa_flags_explicit\n \n+; Additional target flags\n+Variable\n+int ix86_target_flags\n+\n TargetVariable\n int recip_mask = RECIP_MASK_DEFAULT\n \n@@ -72,14 +76,6 @@ unsigned char branch_cost\n TargetSave\n HOST_WIDE_INT x_ix86_isa_flags_explicit\n \n-;; which flags were passed by the user\n-Variable\n-int ix86_target_flags_explicit\n-\n-;; which flags were passed by the user\n-TargetSave\n-HOST_WIDE_INT x_ix86_target_flags_explicit\n-\n ;; whether -mtune was not specified\n TargetSave\n unsigned char tune_defaulted\n@@ -897,3 +893,7 @@ Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n mmitigate-rop\n Target Var(flag_mitigate_rop) Init(0)\n Attempt to avoid generating instruction sequences containing ret bytes.\n+\n+mgeneral-regs-only\n+Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Var(ix86_target_flags) Save\n+Generate code which uses only the general registers."}, {"sha": "9e921335c3edcf7e12387a602f0f6e203f4335d2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -1173,7 +1173,7 @@ See RS/6000 and PowerPC Options.\n -msse2avx -mfentry -mrecord-mcount -mnop-mcount -m8bit-idiv @gol\n -mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n -malign-data=@var{type} -mstack-protector-guard=@var{guard} @gol\n--mmitigate-rop}\n+-mmitigate-rop -mgeneral-regs-only}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n@@ -24298,6 +24298,12 @@ opcodes, to mitigate against certain forms of attack. At the moment,\n this option is limited in what it can do and should not be relied\n on to provide serious protection.\n \n+@item -mgeneral-regs-only\n+@opindex mgeneral-regs-only\n+Generate code that uses only the general-purpose registers.  This\n+prevents the compiler from using floating-point, vector, mask and bound\n+registers.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "d7b3796ff3bccd72b4c2a057907d78b1c850c0d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -1,3 +1,16 @@\n+2016-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/70738\n+\t* gcc.target/i386/pr70738-1.c: New test.\n+\t* gcc.target/i386/pr70738-2.c: Likewise.\n+\t* gcc.target/i386/pr70738-3.c: Likewise.\n+\t* gcc.target/i386/pr70738-4.c: Likewise.\n+\t* gcc.target/i386/pr70738-5.c: Likewise.\n+\t* gcc.target/i386/pr70738-6.c: Likewise.\n+\t* gcc.target/i386/pr70738-7.c: Likewise.\n+\t* gcc.target/i386/pr70738-8.c: Likewise.\n+\t* gcc.target/i386/pr70738-9.c: Likewise.\n+\n 2016-05-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/66940"}, {"sha": "19381c269322052bd71ba35923c4b5fa05b6e70e", "filename": "gcc/testsuite/gcc.target/i386/pr70738-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-1.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+int32x2_t test (int32x2_t a, int32x2_t b)\n+{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+  return a + b;\n+}"}, {"sha": "8b909047be52b085b4a41cafd713c4c2743e3004", "filename": "gcc/testsuite/gcc.target/i386/pr70738-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-2.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-mmmx -mgeneral-regs-only\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+int32x2_t\n+test (int32x2_t a, int32x2_t b) /* { dg-warning \"MMX vector argument without MMX enabled\" } */\n+{ /* { dg-warning \"MMX vector return without MMX enabled\" } */\n+  return a + b;\n+}"}, {"sha": "1ac3adbaedaca427639a97fb27b64a7f3ea0f9e8", "filename": "gcc/testsuite/gcc.target/i386/pr70738-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-3.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+extern int32x4_t c;\n+\n+void\n+test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n+{\n+  c = a + b;\n+}"}, {"sha": "c6d20f2ba116351d78e62dfa38d07e7b02d1bea8", "filename": "gcc/testsuite/gcc.target/i386/pr70738-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-4.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+\n+int32x4_t\n+test (int32x4_t a, int32x4_t b) /* { dg-warning \"SSE vector argument without SSE enabled\" } */\n+{ /* { dg-warning \"SSE vector return without SSE enabled\" } */\n+  return a + b;\n+}"}, {"sha": "8b4380921f45bfcb0261fae44a5f0995526a0cd3", "filename": "gcc/testsuite/gcc.target/i386/pr70738-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-5.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+#include <stdarg.h>\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+int\n+test (int i, ...)\n+{\n+  va_list argp;\n+  va_start (argp, i);\n+  int32x2_t x = (int32x2_t) {0, 1};\n+  x += va_arg (argp, int32x2_t); /* { dg-error \"SSE register argument with SSE disabled\" } */\n+  return x[0] + x[1];\n+}"}, {"sha": "3bccabb0b5ed5bb8f39e96c110946f1ef3164525", "filename": "gcc/testsuite/gcc.target/i386/pr70738-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-6.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+extern float a, b, c;\n+\n+void\n+foo (void)\n+{\n+  c = a * b; /* { dg-error \"SSE register return with SSE disabled\" } */\n+}"}, {"sha": "2e5b49f619de8e7b37a37b58cbd40df576c9c5d7", "filename": "gcc/testsuite/gcc.target/i386/pr70738-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-7.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-msse2 -mgeneral-regs-only\" } */\n+\n+extern float a, b, c;\n+\n+void\n+foo (void)\n+{\n+  c = a * b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mulss\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]__mulsf3\" } } */"}, {"sha": "0740460b237a6973ff8cb1b3bee4b8338d929a10", "filename": "gcc/testsuite/gcc.target/i386/pr70738-8.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-8.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n+\n+extern void abort ();\n+\n+int\n+dec (int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int\n+cal (int a, int b)\n+{\n+  int sum1 = a * b;\n+  int sum2 = a / b;\n+  int sum = dec (sum1, sum2);\n+  return a + b + sum + sum1 + sum2;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (2, 1);\n+\n+  if (ret != 11)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c71f0b0c43f34bc4dfcaddcaa836da07692dc4c0", "filename": "gcc/testsuite/gcc.target/i386/pr70738-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e434f5b73538b766aed99c2d33a46f6e547006/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70738-9.c?ref=c6e434f5b73538b766aed99c2d33a46f6e547006", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mgeneral-regs-only\" } */\n+\n+extern void abort ();\n+\n+int\n+cal (int a, int b)\n+{\n+  int sum = a + b;\n+  int sum1 = a * b;\n+  return (a + b + sum + sum1);\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int ret = cal (1, 2);\n+\n+  if (ret != 8)\n+    abort ();\n+\n+  return 0;\n+}"}]}