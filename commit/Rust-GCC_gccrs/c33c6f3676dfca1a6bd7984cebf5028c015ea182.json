{"sha": "c33c6f3676dfca1a6bd7984cebf5028c015ea182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzYzZmMzY3NmRmY2ExYTZiZDc5ODRjZWJmNTAyOGMwMTVlYTE4Mg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-01T10:37:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-01T10:37:18Z"}, "message": "Merge #654\n\n654: Cleanup some StructExpr related classes r=philberty a=dkm\n\nFrom Mark Wielaard: https://gcc.gnu.org/pipermail/gcc-rust/2021-September/000163.html\r\n\r\n> There are various Structure Expressions that don't actually \"exist\"\r\n> because they are syntactically equivalent to other constructs. So we\r\n> never really construct or use these classes. But they are still listed\r\n> in various visitors, which is somewhat confusing. Removing the AST and\r\n> HIR variants of these classes really cleans up the code IMHO.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "0c830b9a468c78f3b0e4a140093cd09ebdda2989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c830b9a468c78f3b0e4a140093cd09ebdda2989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c33c6f3676dfca1a6bd7984cebf5028c015ea182", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhL1feCRBK7hj4Ov3rIwAAvPsIAH638174HRxDxnxKZ7Wrnelz\nqilhB/5BAJjX45ofrE1fIOqSRc5K3msEvhiYjgQNutz3YhWfuH3VwIUwqGJ6VDUB\noQUCtThig2seGw+Jjww6QL2Sma3eYkmrJEtSO7K5FuOhPpxb4nIJUG5KKrMizBDK\nFPsjakEVTQMxww5ECLyq5yoiXLR2h72DLBh9bMBMxUj/TFv2Enpw/bjGuG7oT2R9\naQNLbAbUUhzQcrCuMtcAnM6N3VrOMeW28+pjqKto+NF0RzAalHCWUBgK+nGDK15I\neBoQxTLrRt6mQVjsTMv7Z+I9gTxSPItWvyIzjBlYqFcyA5+DDXV48ACKD8pQoVs=\n=9nGe\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c830b9a468c78f3b0e4a140093cd09ebdda2989\nparent 82e1061579796adaa39ab34da77b6c8c6ea82539\nparent 3b5c0f65ef12bd4771f69195d232588cff86b270\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630492638 +0000\ncommitter GitHub <noreply@github.com> 1630492638 +0000\n\nMerge #654\n\n654: Cleanup some StructExpr related classes r=philberty a=dkm\n\nFrom Mark Wielaard: https://gcc.gnu.org/pipermail/gcc-rust/2021-September/000163.html\r\n\r\n> There are various Structure Expressions that don't actually \"exist\"\r\n> because they are syntactically equivalent to other constructs. So we\r\n> never really construct or use these classes. But they are still listed\r\n> in various visitors, which is somewhat confusing. Removing the AST and\r\n> HIR variants of these classes really cleans up the code IMHO.\r\n\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33c6f3676dfca1a6bd7984cebf5028c015ea182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33c6f3676dfca1a6bd7984cebf5028c015ea182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33c6f3676dfca1a6bd7984cebf5028c015ea182/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e1061579796adaa39ab34da77b6c8c6ea82539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e1061579796adaa39ab34da77b6c8c6ea82539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e1061579796adaa39ab34da77b6c8c6ea82539"}, {"sha": "3b5c0f65ef12bd4771f69195d232588cff86b270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c0f65ef12bd4771f69195d232588cff86b270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5c0f65ef12bd4771f69195d232588cff86b270"}], "stats": {"total": 1346, "additions": 0, "deletions": 1346}, "files": [{"sha": "2be7e777234523d95a0a9fc6a86207112a65001c", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -109,17 +109,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprTuple;\n-class StructExprUnit;\n-class EnumVariantExpr;\n-class EnumExprField;\n-class EnumExprFieldIdentifier;\n-class EnumExprFieldWithVal;\n-class EnumExprFieldIdentifierValue;\n-class EnumExprFieldIndexValue;\n-class EnumExprStruct;\n-class EnumExprTuple;\n-class EnumExprFieldless;\n class CallExpr;\n class MethodCallExpr;\n class FieldAccessExpr;"}, {"sha": "6241710226da6a62a5d6ae469e7255eadab10241", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -3239,44 +3239,6 @@ StructExpr::as_string () const\n   return str;\n }\n \n-std::string\n-StructExprTuple::as_string () const\n-{\n-  std::string str = StructExpr::as_string ();\n-\n-  if (exprs.empty ())\n-    {\n-      str += \"()\";\n-    }\n-  else\n-    {\n-      auto i = exprs.begin ();\n-      auto e = exprs.end ();\n-\n-      // debug - null pointer check\n-      if (*i == nullptr)\n-\treturn \"ERROR_MARK_STRING - nullptr struct expr tuple field\";\n-\n-      str += '(';\n-      for (; i != e; i++)\n-\t{\n-\t  str += (*i)->as_string ();\n-\t  if (e != i + 1)\n-\t    str += \", \";\n-\t}\n-      str += ')';\n-    }\n-\n-  indent_spaces (enter);\n-  indent_spaces (enter);\n-  // inner attributes\n-  str += append_attributes (inner_attrs, INNER);\n-  indent_spaces (out);\n-  indent_spaces (out);\n-\n-  return str;\n-}\n-\n std::string\n StructExprStruct::as_string () const\n {\n@@ -3346,48 +3308,6 @@ StructExprStructFields::as_string () const\n   return str;\n }\n \n-std::string\n-EnumExprStruct::as_string () const\n-{\n-  std::string str (\"EnumExprStruct (or subclass): \");\n-\n-  str += \"\\n Path: \" + get_enum_variant_path ().as_string ();\n-\n-  str += \"\\n Fields: \";\n-  if (fields.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      for (const auto &field : fields)\n-\tstr += \"\\n  \" + field->as_string ();\n-    }\n-\n-  return str;\n-}\n-\n-std::string\n-EnumExprFieldWithVal::as_string () const\n-{\n-  // used to get value string\n-  return value->as_string ();\n-}\n-\n-std::string\n-EnumExprFieldIdentifierValue::as_string () const\n-{\n-  // TODO: rewrite to work with non-linearisable exprs\n-  return field_name + \" : \" + EnumExprFieldWithVal::as_string ();\n-}\n-\n-std::string\n-EnumExprFieldIndexValue::as_string () const\n-{\n-  // TODO: rewrite to work with non-linearisable exprs\n-  return std::to_string (index) + \" : \" + EnumExprFieldWithVal::as_string ();\n-}\n-\n std::string\n EnumItem::as_string () const\n {\n@@ -5222,54 +5142,6 @@ StructExprStructBase::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprTuple::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-StructExprUnit::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifier::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifierValue::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIndexValue::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprStruct::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprTuple::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldless::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n CallExpr::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "15bf0864ddbc7298587489ad880ab63881f6ca36", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -93,15 +93,6 @@ class ASTVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprTuple &expr) = 0;\n-  virtual void visit (StructExprUnit &expr) = 0;\n-  // virtual void visit(EnumExprField& field) = 0;\n-  virtual void visit (EnumExprFieldIdentifier &field) = 0;\n-  virtual void visit (EnumExprFieldIdentifierValue &field) = 0;\n-  virtual void visit (EnumExprFieldIndexValue &field) = 0;\n-  virtual void visit (EnumExprStruct &expr) = 0;\n-  virtual void visit (EnumExprTuple &expr) = 0;\n-  virtual void visit (EnumExprFieldless &expr) = 0;\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;"}, {"sha": "f26ed988a02da194f8ff3a67864401716cd8ba36", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 445, "changes": 445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -1852,451 +1852,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// AST node of a tuple struct creator\n-class StructExprTuple : public StructExpr\n-{\n-  std::vector<Attribute> inner_attrs;\n-  std::vector<std::unique_ptr<Expr> > exprs;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  const std::vector<Attribute> &get_inner_attrs () const { return inner_attrs; }\n-  std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n-\n-  StructExprTuple (PathInExpression struct_path,\n-\t\t   std::vector<std::unique_ptr<Expr> > tuple_exprs,\n-\t\t   std::vector<Attribute> inner_attribs,\n-\t\t   std::vector<Attribute> outer_attribs, Location locus)\n-    : StructExpr (std::move (struct_path), std::move (outer_attribs)),\n-      inner_attrs (std::move (inner_attribs)), exprs (std::move (tuple_exprs)),\n-      locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  StructExprTuple (StructExprTuple const &other)\n-    : StructExpr (other), inner_attrs (other.inner_attrs), locus (other.locus)\n-  {\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  StructExprTuple &operator= (StructExprTuple const &other)\n-  {\n-    StructExpr::operator= (other);\n-    inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n-\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  StructExprTuple (StructExprTuple &&other) = default;\n-  StructExprTuple &operator= (StructExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  const std::vector<std::unique_ptr<Expr> > &get_elems () const\n-  {\n-    return exprs;\n-  }\n-  std::vector<std::unique_ptr<Expr> > &get_elems () { return exprs; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-};\n-\n-// AST node of a \"unit\" struct creator (no fields and no braces)\n-class StructExprUnit : public StructExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    return get_struct_name ().as_string ();\n-  }\n-\n-  StructExprUnit (PathInExpression struct_path,\n-\t\t  std::vector<Attribute> outer_attribs, Location locus)\n-    : StructExpr (std::move (struct_path), std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-};\n-\n-// aka EnumerationVariantExpr\n-// Base AST node representing creation of an enum variant instance - abstract\n-class EnumVariantExpr : public ExprWithoutBlock\n-{\n-  std::vector<Attribute> outer_attrs;\n-  PathInExpression enum_variant_path;\n-\n-protected:\n-  // Protected constructor for initialising enum_variant_path\n-  EnumVariantExpr (PathInExpression path_to_enum_variant,\n-\t\t   std::vector<Attribute> outer_attribs)\n-    : outer_attrs (std::move (outer_attribs)),\n-      enum_variant_path (std::move (path_to_enum_variant))\n-  {}\n-\n-public:\n-  const PathInExpression &get_enum_variant_path () const\n-  {\n-    return enum_variant_path;\n-  }\n-  PathInExpression &get_enum_variant_path () { return enum_variant_path; }\n-\n-  // Invalid if path is in error state, so base stripping on that.\n-  void mark_for_strip () override\n-  {\n-    enum_variant_path = PathInExpression::create_error ();\n-  }\n-  bool is_marked_for_strip () const override\n-  {\n-    return enum_variant_path.is_error ();\n-  }\n-\n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n-\n-  void set_outer_attrs (std::vector<Attribute> new_attrs) override\n-  {\n-    outer_attrs = std::move (new_attrs);\n-  }\n-};\n-\n-/* Base AST node for a single enum expression field (in enum instance creation)\n- * - abstract */\n-class EnumExprField\n-{\n-public:\n-  virtual ~EnumExprField () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<EnumExprField> clone_enum_expr_field () const\n-  {\n-    return std::unique_ptr<EnumExprField> (clone_enum_expr_field_impl ());\n-  }\n-\n-  virtual std::string as_string () const = 0;\n-\n-  virtual void accept_vis (ASTVisitor &vis) = 0;\n-\n-  virtual Location get_locus () const = 0;\n-\n-protected:\n-  // Clone function implementation as pure virtual method\n-  virtual EnumExprField *clone_enum_expr_field_impl () const = 0;\n-};\n-\n-// Identifier-only variant of EnumExprField AST node\n-class EnumExprFieldIdentifier : public EnumExprField\n-{\n-  Identifier field_name;\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIdentifier (Identifier field_identifier, Location locus)\n-    : field_name (std::move (field_identifier)), locus (locus)\n-  {}\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  std::string as_string () const override { return field_name; }\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifier *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifier (*this);\n-  }\n-};\n-\n-/* Base AST node for a single enum expression field with an assigned value -\n- * abstract */\n-class EnumExprFieldWithVal : public EnumExprField\n-{\n-  std::unique_ptr<Expr> value;\n-\n-protected:\n-  EnumExprFieldWithVal (std::unique_ptr<Expr> field_value)\n-    : value (std::move (field_value))\n-  {}\n-\n-  // Copy constructor must clone unique_ptr value\n-  EnumExprFieldWithVal (EnumExprFieldWithVal const &other)\n-    : value (other.value->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal const &other)\n-  {\n-    value = other.value->clone_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprFieldWithVal (EnumExprFieldWithVal &&other) = default;\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal &&other) = default;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  // TODO: is this better? Or is a \"vis_block\" better?\n-  std::unique_ptr<Expr> &get_value ()\n-  {\n-    rust_assert (value != nullptr);\n-    return value;\n-  }\n-};\n-\n-// Identifier and value variant of EnumExprField AST node\n-class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n-{\n-  Identifier field_name;\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIdentifierValue (Identifier field_name,\n-\t\t\t\tstd::unique_ptr<Expr> field_value,\n-\t\t\t\tLocation locus)\n-    : EnumExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_name)), locus (locus)\n-  {}\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifierValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifierValue (*this);\n-  }\n-};\n-\n-// Tuple index and value variant of EnumExprField AST node\n-class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n-{\n-  TupleIndex index;\n-  // TODO: implement \"with val\" as a template with EnumExprField as type param?\n-\n-  Location locus;\n-\n-public:\n-  EnumExprFieldIndexValue (TupleIndex field_index,\n-\t\t\t   std::unique_ptr<Expr> field_value, Location locus)\n-    : EnumExprFieldWithVal (std::move (field_value)), index (field_index),\n-      locus (locus)\n-  {}\n-\n-  std::string as_string () const override;\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIndexValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIndexValue (*this);\n-  }\n-};\n-\n-// Struct-like syntax enum variant instance creation AST node\n-class EnumExprStruct : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<EnumExprField> > fields;\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  EnumExprStruct (PathInExpression enum_variant_path,\n-\t\t  std::vector<std::unique_ptr<EnumExprField> > variant_fields,\n-\t\t  std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      fields (std::move (variant_fields)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprStruct (EnumExprStruct const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprStruct &operator= (EnumExprStruct const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprStruct (EnumExprStruct &&other) = default;\n-  EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  // TODO: this mutable getter seems really dodgy. Think up better way.\n-  std::vector<std::unique_ptr<EnumExprField> > &get_fields () { return fields; }\n-  const std::vector<std::unique_ptr<EnumExprField> > &get_fields () const\n-  {\n-    return fields;\n-  }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-};\n-\n-// Tuple-like syntax enum variant instance creation AST node\n-class EnumExprTuple : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<Expr> > values;\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  EnumExprTuple (PathInExpression enum_variant_path,\n-\t\t std::vector<std::unique_ptr<Expr> > variant_values,\n-\t\t std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      values (std::move (variant_values)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprTuple (EnumExprTuple const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprTuple &operator= (EnumExprTuple const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprTuple (EnumExprTuple &&other) = default;\n-  EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  const std::vector<std::unique_ptr<Expr> > &get_elems () const\n-  {\n-    return values;\n-  }\n-  std::vector<std::unique_ptr<Expr> > &get_elems () { return values; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-};\n-\n-// No-field enum variant instance creation AST node\n-class EnumExprFieldless : public EnumVariantExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    // return enum_variant_path.as_string();\n-    return get_enum_variant_path ().as_string ();\n-  }\n-\n-  EnumExprFieldless (PathInExpression enum_variant_path,\n-\t\t     std::vector<Attribute> outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-};\n-\n // Forward decl for Function - used in CallExpr\n class Function;\n "}, {"sha": "c0cfacf4e575aa36402f1327c6752f6cca7faabc", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -72,15 +72,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n   virtual void visit (HIR::StructExprStructFields &expr) {}\n   virtual void visit (HIR::StructExprStructBase &expr) {}\n-  virtual void visit (HIR::StructExprTuple &expr) {}\n-  virtual void visit (HIR::StructExprUnit &expr) {}\n-  // virtual void visit(EnumExprField& field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (HIR::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (HIR::EnumExprStruct &expr) {}\n-  virtual void visit (HIR::EnumExprTuple &expr) {}\n-  virtual void visit (HIR::EnumExprFieldless &expr) {}\n   virtual void visit (HIR::CallExpr &expr) {}\n   virtual void visit (HIR::MethodCallExpr &expr) {}\n   virtual void visit (HIR::FieldAccessExpr &expr) {}"}, {"sha": "8134f7e59aa0c0c1a548940f8474aa6ccf2eafa9", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -939,142 +939,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n-  void visit (AST::StructExprTuple &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    /* strip test based on inner attrs - spec says these are inner\n-     * attributes, not outer attributes of inner expr */\n-    expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // strip sub-exprs of path\n-    auto &struct_name = expr.get_struct_name ();\n-    visit (struct_name);\n-    if (struct_name.is_marked_for_strip ())\n-      rust_error_at (struct_name.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec says outer attributes are specifically allowed for elements\n-     * of tuple-style struct expressions, so full stripping possible */\n-    expand_pointer_allow_strip (expr.get_elems ());\n-  }\n-  void visit (AST::StructExprUnit &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // strip sub-exprs of path\n-    auto &struct_name = expr.get_struct_name ();\n-    visit (struct_name);\n-    if (struct_name.is_marked_for_strip ())\n-      rust_error_at (struct_name.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-  }\n-  void visit (AST::EnumExprFieldIdentifier &) override\n-  {\n-    // as no attrs (at moment, at least), no stripping possible\n-  }\n-  void visit (AST::EnumExprFieldIdentifierValue &field) override\n-  {\n-    /* as no attrs possible (at moment, at least), only sub-expression\n-     * stripping is possible */\n-    auto &value = field.get_value ();\n-    value->accept_vis (*this);\n-    if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus (),\n-\t\t     \"cannot strip expression in this position - outer \"\n-\t\t     \"attributes not allowed\");\n-  }\n-  void visit (AST::EnumExprFieldIndexValue &field) override\n-  {\n-    /* as no attrs possible (at moment, at least), only sub-expression\n-     * stripping is possible */\n-    auto &value = field.get_value ();\n-    value->accept_vis (*this);\n-    if (value->is_marked_for_strip ())\n-      rust_error_at (value->get_locus (),\n-\t\t     \"cannot strip expression in this position - outer \"\n-\t\t     \"attributes not allowed\");\n-  }\n-  void visit (AST::EnumExprStruct &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // supposedly spec doesn't allow inner attributes in enum exprs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec does not specify whether expressions are allowed to be\n-     * stripped at top level of expression fields, but I wouldn't think\n-     * that they would be, so operating under the assumption that only\n-     * sub-expressions can be stripped. */\n-    for (auto &field : expr.get_fields ())\n-      {\n-\tfield->accept_vis (*this);\n-\t// shouldn't strip in this\n-      }\n-  }\n-  void visit (AST::EnumExprTuple &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // supposedly spec doesn't allow inner attributes in enum exprs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec says outer attributes are specifically allowed for elements\n-     * of tuple-style enum expressions, so full stripping possible */\n-    expand_pointer_allow_strip (expr.get_elems ());\n-  }\n-  void visit (AST::EnumExprFieldless &expr) override\n-  {\n-    // can't be stripped as no attrs\n-\n-    // strip sub-exprs of path\n-    auto &enum_path = expr.get_enum_variant_path ();\n-    visit (enum_path);\n-    if (enum_path.is_marked_for_strip ())\n-      rust_error_at (enum_path.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-  }\n   void visit (AST::CallExpr &expr) override\n   {\n     // initial strip test based on outer attrs"}, {"sha": "d4455998301690c31a9968eed66d761a446692d0", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -96,15 +96,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::StructExprFieldIndexValue &field) {}\n   virtual void visit (AST::StructExprStructFields &expr) {}\n   virtual void visit (AST::StructExprStructBase &expr) {}\n-  virtual void visit (AST::StructExprTuple &expr) {}\n-  virtual void visit (AST::StructExprUnit &expr) {}\n-  //  virtual void visit(EnumExprField& field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (AST::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (AST::EnumExprStruct &expr) {}\n-  virtual void visit (AST::EnumExprTuple &expr) {}\n-  virtual void visit (AST::EnumExprFieldless &expr) {}\n   virtual void visit (AST::CallExpr &expr) {}\n   virtual void visit (AST::MethodCallExpr &expr) {}\n   virtual void visit (AST::FieldAccessExpr &expr) {}"}, {"sha": "05bc1f9f0554eec869c695ecd0f3c0560b2c851d", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 435, "changes": 435, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -1578,441 +1578,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// HIR node of a tuple struct creator\n-class StructExprTuple : public StructExpr\n-{\n-  AST::AttrVec inner_attrs;\n-  std::vector<std::unique_ptr<Expr> > exprs;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  const AST::AttrVec &get_inner_attrs () const { return inner_attrs; }\n-\n-  /*inline std::vector<std::unique_ptr<Expr>> get_exprs() const {\n-      return exprs;\n-  }*/\n-\n-  StructExprTuple (Analysis::NodeMapping mappings, PathInExpression struct_path,\n-\t\t   std::vector<std::unique_ptr<Expr> > tuple_exprs,\n-\t\t   AST::AttrVec inner_attribs, AST::AttrVec outer_attribs,\n-\t\t   Location locus)\n-    : StructExpr (std::move (mappings), std::move (struct_path),\n-\t\t  std::move (outer_attribs)),\n-      inner_attrs (std::move (inner_attribs)), exprs (std::move (tuple_exprs)),\n-      locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  StructExprTuple (StructExprTuple const &other)\n-    : StructExpr (other), inner_attrs (other.inner_attrs), locus (other.locus)\n-  {\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  StructExprTuple &operator= (StructExprTuple const &other)\n-  {\n-    StructExpr::operator= (other);\n-    inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n-\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  StructExprTuple (StructExprTuple &&other) = default;\n-  StructExprTuple &operator= (StructExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-};\n-\n-// HIR node of a \"unit\" struct creator (no fields and no braces)\n-class StructExprUnit : public StructExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override { return struct_name.as_string (); }\n-\n-  StructExprUnit (Analysis::NodeMapping mappings, PathInExpression struct_path,\n-\t\t  AST::AttrVec outer_attribs, Location locus)\n-    : StructExpr (std::move (mappings), std::move (struct_path),\n-\t\t  std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprUnit *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprUnit (*this);\n-  }\n-};\n-\n-// aka EnumerationVariantExpr\n-// Base HIR node representing creation of an enum variant instance - abstract\n-class EnumVariantExpr : public ExprWithoutBlock\n-{\n-  PathInExpression enum_variant_path;\n-\n-protected:\n-  // Protected constructor for initialising enum_variant_path\n-  EnumVariantExpr (Analysis::NodeMapping mappings,\n-\t\t   PathInExpression path_to_enum_variant,\n-\t\t   AST::AttrVec outer_attribs)\n-    : ExprWithoutBlock (std::move (mappings), std::move (outer_attribs)),\n-      enum_variant_path (std::move (path_to_enum_variant))\n-  {}\n-\n-public:\n-  // TODO: maybe remove and have string version gotten here directly\n-  PathInExpression get_enum_variant_path () const { return enum_variant_path; }\n-};\n-\n-/* Base HIR node for a single enum expression field (in enum instance creation)\n- * - abstract */\n-class EnumExprField\n-{\n-public:\n-  virtual ~EnumExprField () {}\n-\n-  // Unique pointer custom clone function\n-  std::unique_ptr<EnumExprField> clone_enum_expr_field () const\n-  {\n-    return std::unique_ptr<EnumExprField> (clone_enum_expr_field_impl ());\n-  }\n-\n-  virtual void accept_vis (HIRVisitor &vis) = 0;\n-\n-protected:\n-  // Clone function implementation as pure virtual method\n-  virtual EnumExprField *clone_enum_expr_field_impl () const = 0;\n-};\n-\n-// Identifier-only variant of EnumExprField HIR node\n-class EnumExprFieldIdentifier : public EnumExprField\n-{\n-  Identifier field_name;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIdentifier (Identifier field_identifier)\n-    : field_name (std::move (field_identifier))\n-  {}\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifier *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifier (*this);\n-  }\n-};\n-\n-/* Base HIR node for a single enum expression field with an assigned value -\n- * abstract */\n-class EnumExprFieldWithVal : public EnumExprField\n-{\n-  std::unique_ptr<Expr> value;\n-\n-  // TODO: should this store location data?\n-\n-protected:\n-  EnumExprFieldWithVal (std::unique_ptr<Expr> field_value)\n-    : value (std::move (field_value))\n-  {}\n-\n-  // Copy constructor must clone unique_ptr value\n-  EnumExprFieldWithVal (EnumExprFieldWithVal const &other)\n-    : value (other.value->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal const &other)\n-  {\n-    value = other.value->clone_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprFieldWithVal (EnumExprFieldWithVal &&other) = default;\n-  EnumExprFieldWithVal &operator= (EnumExprFieldWithVal &&other) = default;\n-};\n-\n-// Identifier and value variant of EnumExprField HIR node\n-class EnumExprFieldIdentifierValue : public EnumExprFieldWithVal\n-{\n-  Identifier field_name;\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIdentifierValue (Identifier field_name,\n-\t\t\t\tstd::unique_ptr<Expr> field_value)\n-    : EnumExprFieldWithVal (std::move (field_value)),\n-      field_name (std::move (field_name))\n-  {}\n-\n-  // copy constructor, destructor, and assignment operator should not need\n-  // defining\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIdentifierValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIdentifierValue (*this);\n-  }\n-};\n-\n-// Tuple index and value variant of EnumExprField HIR node\n-class EnumExprFieldIndexValue : public EnumExprFieldWithVal\n-{\n-  TupleIndex index;\n-  // TODO: implement \"with val\" as a template with EnumExprField as type param?\n-\n-  // TODO: should this store location data?\n-\n-public:\n-  EnumExprFieldIndexValue (TupleIndex field_index,\n-\t\t\t   std::unique_ptr<Expr> field_value)\n-    : EnumExprFieldWithVal (std::move (field_value)), index (field_index)\n-  {}\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldIndexValue *clone_enum_expr_field_impl () const override\n-  {\n-    return new EnumExprFieldIndexValue (*this);\n-  }\n-};\n-\n-// Struct-like syntax enum variant instance creation HIR node\n-class EnumExprStruct : public EnumVariantExpr\n-{\n-  // std::vector<EnumExprField> fields;\n-  std::vector<std::unique_ptr<EnumExprField> > fields;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  /*inline std::vector<std::unique_ptr<EnumExprField>> get_fields() const\n-  { return fields;\n-  }*/\n-\n-  EnumExprStruct (Analysis::NodeMapping mappings,\n-\t\t  PathInExpression enum_variant_path,\n-\t\t  std::vector<std::unique_ptr<EnumExprField> > variant_fields,\n-\t\t  AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      fields (std::move (variant_fields)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprStruct (EnumExprStruct const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprStruct &operator= (EnumExprStruct const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    fields.reserve (other.fields.size ());\n-    for (const auto &e : other.fields)\n-      fields.push_back (e->clone_enum_expr_field ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprStruct (EnumExprStruct &&other) = default;\n-  EnumExprStruct &operator= (EnumExprStruct &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprStruct *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprStruct (*this);\n-  }\n-};\n-\n-// Tuple-like syntax enum variant instance creation HIR node\n-class EnumExprTuple : public EnumVariantExpr\n-{\n-  std::vector<std::unique_ptr<Expr> > values;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  /*inline std::vector<std::unique_ptr<Expr>> get_values() const {\n-      return values;\n-  }*/\n-\n-  EnumExprTuple (Analysis::NodeMapping mappings,\n-\t\t PathInExpression enum_variant_path,\n-\t\t std::vector<std::unique_ptr<Expr> > variant_values,\n-\t\t AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      values (std::move (variant_values)), locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  EnumExprTuple (EnumExprTuple const &other)\n-    : EnumVariantExpr (other), locus (other.locus)\n-  {\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  EnumExprTuple &operator= (EnumExprTuple const &other)\n-  {\n-    EnumVariantExpr::operator= (other);\n-    locus = other.locus;\n-\n-    values.reserve (other.values.size ());\n-    for (const auto &e : other.values)\n-      values.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  EnumExprTuple (EnumExprTuple &&other) = default;\n-  EnumExprTuple &operator= (EnumExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprTuple (*this);\n-  }\n-};\n-\n-// No-field enum variant instance creation HIR node\n-class EnumExprFieldless : public EnumVariantExpr\n-{\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override\n-  {\n-    // return enum_variant_path.as_string();\n-    return get_enum_variant_path ().as_string ();\n-  }\n-\n-  EnumExprFieldless (Analysis::NodeMapping mappings,\n-\t\t     PathInExpression enum_variant_path,\n-\t\t     AST::AttrVec outer_attribs, Location locus)\n-    : EnumVariantExpr (std::move (mappings), std::move (enum_variant_path),\n-\t\t       std::move (outer_attribs)),\n-      locus (locus)\n-  {}\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  EnumExprFieldless *clone_expr_without_block_impl () const override\n-  {\n-    return new EnumExprFieldless (*this);\n-  }\n-};\n-\n // Forward decl for Function - used in CallExpr\n class Function;\n "}, {"sha": "ffa08127ddcfc3bfc41c5cffeacd7e2a6772fc81", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -90,17 +90,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprTuple;\n-class StructExprUnit;\n-class EnumVariantExpr;\n-class EnumExprField;\n-class EnumExprFieldIdentifier;\n-class EnumExprFieldWithVal;\n-class EnumExprFieldIdentifierValue;\n-class EnumExprFieldIndexValue;\n-class EnumExprStruct;\n-class EnumExprTuple;\n-class EnumExprFieldless;\n class CallExpr;\n class MethodCallExpr;\n class FieldAccessExpr;"}, {"sha": "f328ae67abe644a91d8e377574b287ef5c288de1", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -2994,59 +2994,6 @@ StructExpr::as_string () const\n   return str;\n }\n \n-std::string\n-StructExprTuple::as_string () const\n-{\n-  std::string str = StructExpr::as_string ();\n-\n-  if (exprs.empty ())\n-    {\n-      str += \"()\";\n-    }\n-  else\n-    {\n-      auto i = exprs.begin ();\n-      auto e = exprs.end ();\n-\n-      // debug - null pointer check\n-      if (*i == nullptr)\n-\t{\n-\t  return \"ERROR_MARK_STRING - nullptr struct expr tuple field\";\n-\t}\n-\n-      str += '(';\n-      for (; i != e; i++)\n-\t{\n-\t  str += (*i)->as_string ();\n-\t  if (e != i + 1)\n-\t    str += \", \";\n-\t}\n-      str += ')';\n-    }\n-\n-  indent_spaces (enter);\n-  indent_spaces (enter);\n-  // inner attributes\n-  str += \"\\n\" + indent_spaces (stay) + \"inner attributes:\";\n-  if (inner_attrs.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      /* note that this does not print them with \"inner attribute\" syntax -\n-       * just the body */\n-      for (const auto &attr : inner_attrs)\n-\t{\n-\t  str += \"\\n\" + indent_spaces (stay) + attr.as_string ();\n-\t}\n-    }\n-  indent_spaces (out);\n-  indent_spaces (out);\n-\n-  return str;\n-}\n-\n std::string\n StructExprStruct::as_string () const\n {\n@@ -3983,54 +3930,6 @@ StructExprStructBase::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprTuple::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-StructExprUnit::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifier::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIdentifierValue::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldIndexValue::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprStruct::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprTuple::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-EnumExprFieldless::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n CallExpr::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "d5fbff99bc6d680223c547a25c3830bd64185204", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -60,14 +60,6 @@ class HIRVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprTuple &expr) = 0;\n-  virtual void visit (StructExprUnit &expr) = 0;\n-  virtual void visit (EnumExprFieldIdentifier &field) = 0;\n-  virtual void visit (EnumExprFieldIdentifierValue &field) = 0;\n-  virtual void visit (EnumExprFieldIndexValue &field) = 0;\n-  virtual void visit (EnumExprStruct &expr) = 0;\n-  virtual void visit (EnumExprTuple &expr) = 0;\n-  virtual void visit (EnumExprFieldless &expr) = 0;\n   virtual void visit (CallExpr &expr) = 0;\n   virtual void visit (MethodCallExpr &expr) = 0;\n   virtual void visit (FieldAccessExpr &expr) = 0;"}, {"sha": "e7b01945b1c1349e9d199677cbc41d1e3f422f75", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -70,16 +70,7 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "025052d290b0e881d5c40f26da3c867a2f620aa6", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -73,14 +73,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::StructExprFieldIndexValue &) {}\n   void visit (AST::StructExprStructFields &) {}\n   void visit (AST::StructExprStructBase &) {}\n-  void visit (AST::StructExprTuple &) {}\n-  void visit (AST::StructExprUnit &) {}\n-  void visit (AST::EnumExprFieldIdentifier &) {}\n-  void visit (AST::EnumExprFieldIdentifierValue &) {}\n-  void visit (AST::EnumExprFieldIndexValue &) {}\n-  void visit (AST::EnumExprStruct &) {}\n-  void visit (AST::EnumExprTuple &) {}\n-  void visit (AST::EnumExprFieldless &) {}\n   void visit (AST::CallExpr &) {}\n   void visit (AST::MethodCallExpr &) {}\n   void visit (AST::FieldAccessExpr &) {}"}, {"sha": "0c23ec81efb8b99f67e13fbcf08aff4b31e019cb", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -73,16 +73,7 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "26fb5061227d94f5690b5846e3e8d37d1faa5948", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -74,16 +74,7 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}, {"sha": "78d35a6fadd5028704739cab76c67d7e0c8a4fae", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33c6f3676dfca1a6bd7984cebf5028c015ea182/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=c33c6f3676dfca1a6bd7984cebf5028c015ea182", "patch": "@@ -68,16 +68,7 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n-  virtual void visit (HIR::StructExprUnit &) override {}\n \n-  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n-\n-  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n-  virtual void visit (HIR::EnumExprStruct &) override {}\n-  virtual void visit (HIR::EnumExprTuple &) override {}\n-  virtual void visit (HIR::EnumExprFieldless &) override {}\n   virtual void visit (HIR::CallExpr &) override {}\n   virtual void visit (HIR::MethodCallExpr &) override {}\n   virtual void visit (HIR::FieldAccessExpr &) override {}"}]}