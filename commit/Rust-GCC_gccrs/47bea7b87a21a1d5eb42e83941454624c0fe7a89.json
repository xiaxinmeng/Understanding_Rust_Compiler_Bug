{"sha": "47bea7b87a21a1d5eb42e83941454624c0fe7a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiZWE3Yjg3YTIxYTFkNWViNDJlODM5NDE0NTQ2MjRjMGZlN2E4OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-09-07T22:48:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-09-07T22:48:50Z"}, "message": "debug.h (_GLIBCXX_DEBUG_ONLY): New.\n\n2006-09-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/debug/debug.h (_GLIBCXX_DEBUG_ONLY): New.\n\t* include/ext/bitmap_allocator.h (_BALLOC_SANITY_CHECK,\n\t_BALLOC_ASSERT): Remove. Use _GLIBCXX_DEBUG,\n\t_GLIBCXX_DEBUG_ASSERT.\n\t* include/ext/pb_ds/hash_policy.hpp (PB_DS_DBG_ASSERT): Convert to\n\t_GLIBCXX_DEBUG_ASSERT. Formatting corrections.\n\t(PB_DS_DBG_VERIFY): Remove, unused.\n\t(PB_DS_DBG_ONLY): Convert to _GLIBCXX_DEBUG blocks.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tinsert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tbinomial_heap_base_.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/\n\tsplit_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tdebug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tdebug_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/unordered_iterator/\n\tconst_point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tsplit_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_store_hash_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tdebug_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tdebug_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\terase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tleft_child_next_sibling_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconst_iterator.hpp: Same.\t\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tinsert_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tdebug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconst_point_iterator.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/map_debug_base.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp: Same.\n\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\titerators_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\trc_binomial_heap_.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Same.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n\tsplit_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/\n\tconstructors_destructor_fn_imps.hpp: Same.\t\n\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n\t* testsuite/util/regression/res_mng/forced_exception.hpp: Same.\n\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp: Same.\n\t* testsuite/util/regression/res_mng/dbg_ex_allocator.hpp: Same.\n\t* testsuite/util/rng/twister_rand_gen.cc\n\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp: Same.\n\nFrom-SVN: r116766", "tree": {"sha": "247a242e2b4ff36868d072acef436c650d7340bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247a242e2b4ff36868d072acef436c650d7340bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47bea7b87a21a1d5eb42e83941454624c0fe7a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bea7b87a21a1d5eb42e83941454624c0fe7a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47bea7b87a21a1d5eb42e83941454624c0fe7a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bea7b87a21a1d5eb42e83941454624c0fe7a89/comments", "author": null, "committer": null, "parents": [{"sha": "5de1a1eb07a702a1a79395f0d956b1bba469138e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de1a1eb07a702a1a79395f0d956b1bba469138e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de1a1eb07a702a1a79395f0d956b1bba469138e"}], "stats": {"total": 7237, "additions": 2525, "deletions": 4712}, "files": [{"sha": "103f75d50e635913c1482d7af1bbde77adc42a7b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -1,3 +1,216 @@\n+2006-09-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/debug/debug.h (_GLIBCXX_DEBUG_ONLY): New.\n+\t* include/ext/bitmap_allocator.h (_BALLOC_SANITY_CHECK,\n+\t_BALLOC_ASSERT): Remove. Use _GLIBCXX_DEBUG,\n+\t_GLIBCXX_DEBUG_ASSERT.\n+\t* include/ext/pb_ds/hash_policy.hpp (PB_DS_DBG_ASSERT): Convert to\n+\t_GLIBCXX_DEBUG_ASSERT. Formatting corrections.\n+\t(PB_DS_DBG_VERIFY): Remove, unused.\n+\t(PB_DS_DBG_ONLY): Convert to _GLIBCXX_DEBUG blocks.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tinsert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tbinomial_heap_base_.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tdebug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tdebug_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/unordered_iterator/\n+\tconst_point_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/head.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/leaf.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/internal_node.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_store_hash_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tdebug_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tdebug_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/types_traits.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\terase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tleft_child_next_sibling_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconst_iterator.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tinsert_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tdebug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconst_point_iterator.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/map_debug_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp: Same.\n+\t* include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\titerators_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\trc_binomial_heap_.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp: Same.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\t\n+\t* include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp: Same.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* testsuite/util/regression/res_mng/forced_exception.hpp: Same.\n+\t* testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp: Same.\n+\t* testsuite/util/regression/res_mng/dbg_ex_allocator.hpp: Same.\n+\t* testsuite/util/rng/twister_rand_gen.cc\n+\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp: Same.\n+\n 2006-09-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (find(const _CharT*, size_type,"}, {"sha": "72aefd7a64adb3fc7c991e4f901a7c5b43c07a15", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -60,6 +60,7 @@ namespace __gnu_debug\n \n # define _GLIBCXX_DEBUG_ASSERT(_Condition)\n # define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_ONLY(_Statement) ;\n # define __glibcxx_requires_cond(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\n # define __glibcxx_requires_sorted(_First,_Last)\n@@ -109,6 +110,7 @@ namespace std\n #else\n # define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n #endif\n+# define _GLIBCXX_DEBUG_ONLY(_Statement) _Statement\n \n # define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last) \\"}, {"sha": "6452cb8f69c585ba001cac995e6e49b9ade5c3da", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -1,6 +1,6 @@\n // Bitmap Allocator. -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -52,23 +52,14 @@\n // For __gthread_mutex_t, __gthread_mutex_lock and __gthread_mutex_unlock.\n #include <bits/gthr.h>\n \n-// Define this to enable error checking withing the allocator\n-// itself(to debug the allocator itself).\n-//#define _BALLOC_SANITY_CHECK\n+#include <debug/debug.h> // _GLIBCXX_DEBUG_ASSERT\n+\n \n /** @brief The constant in the expression below is the alignment\n  * required in bytes.\n  */\n #define _BALLOC_ALIGN_BYTES 8\n \n-#if defined _BALLOC_SANITY_CHECK\n-#include <cassert>\n-#define _BALLOC_ASSERT(_EXPR) assert(_EXPR)\n-#else\n-#define _BALLOC_ASSERT(_EXPR)\n-#endif\n-\n-\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   using std::size_t;\n@@ -618,7 +609,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  _M_curr_bmap = reinterpret_cast<size_t*>\n \t    (_M_vbp[_M_curr_index].first) - 1;\n \t  \n-\t  _BALLOC_ASSERT(__index <= (long)_M_vbp.size() - 1);\n+\t  _GLIBCXX_DEBUG_ASSERT(__index <= (long)_M_vbp.size() - 1);\n \t\n \t  _M_last_bmap_in_block = _M_curr_bmap\n \t    - ((_M_vbp[_M_curr_index].second \n@@ -904,7 +895,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename \n       balloc::__mini_vector<_Block_pair> _BPVector;\n \n-#if defined _BALLOC_SANITY_CHECK\n+#if defined _GLIBCXX_DEBUG\n       // Complexity: O(lg(N)). Where, N is the number of block of size\n       // sizeof(value_type).\n       void \n@@ -919,7 +910,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  (_S_mem_blocks.begin(), _S_mem_blocks.end(), \n \t   __gnu_cxx::balloc::_Functor_Ref<_FFF>(__fff));\n \n-\t_BALLOC_ASSERT(__bpi == _S_mem_blocks.end());\n+\t_GLIBCXX_DEBUG_ASSERT(__bpi == _S_mem_blocks.end());\n       }\n #endif\n \n@@ -937,7 +928,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       void \n       _S_refill_pool() throw(std::bad_alloc)\n       {\n-#if defined _BALLOC_SANITY_CHECK\n+#if defined _GLIBCXX_DEBUG\n \t_S_check_for_free_blocks();\n #endif\n \n@@ -1110,14 +1101,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_Difference_type __diff;\n \tlong __displacement;\n \n-\t_BALLOC_ASSERT(_S_last_dealloc_index >= 0);\n+\t_GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index >= 0);\n \n \t\n \tif (__gnu_cxx::balloc::_Inclusive_between<_Alloc_block*>\n \t    (__real_p)\n \t    (_S_mem_blocks[_S_last_dealloc_index]))\n \t  {\n-\t    _BALLOC_ASSERT(_S_last_dealloc_index <= _S_mem_blocks.size() - 1);\n+\t    _GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index <= _S_mem_blocks.size() - 1);\n \n \t    // Initial Assumption was correct!\n \t    __diff = _S_last_dealloc_index;\n@@ -1132,7 +1123,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t__gnu_cxx::balloc::\n \t\t\t_Inclusive_between<_Alloc_block*>(__real_p));\n \n-\t    _BALLOC_ASSERT(_iter != _S_mem_blocks.end());\n+\t    _GLIBCXX_DEBUG_ASSERT(_iter != _S_mem_blocks.end());\n \n \t    __diff = _iter - _S_mem_blocks.begin();\n \t    __displacement = __real_p - _S_mem_blocks[__diff].first;\n@@ -1152,7 +1143,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  (_S_mem_blocks[__diff].first)\n \t  - (__gnu_cxx::balloc::__num_bitmaps(_S_mem_blocks[__diff]) + 1);\n \t\n-\t_BALLOC_ASSERT(*__puse_count != 0);\n+\t_GLIBCXX_DEBUG_ASSERT(*__puse_count != 0);\n \n \t--(*__puse_count);\n \n@@ -1182,7 +1173,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    if (_S_last_dealloc_index >= _S_mem_blocks.size())\n \t      {\n \t\t_S_last_dealloc_index =(__diff != -1 ? __diff : 0);\n-\t\t_BALLOC_ASSERT(_S_last_dealloc_index >= 0);\n+\t\t_GLIBCXX_DEBUG_ASSERT(_S_last_dealloc_index >= 0);\n \t      }\n \t  }\n       }"}, {"sha": "fa0ff416b42a007f52757c8f8a904deb8391c08c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -58,40 +58,26 @@\n #include <ext/pb_ds/detail/tree_trace_base.hpp>\n #include <utility>\n #include <functional>\n-#include <assert.h>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\tclass Node_And_It_Traits, \\\n-\t\t\t\t\t\tclass Allocator>\n+    template<typename Key, typename Mapped, class Cmp_Fn,\t\t\\\n+\t     class Node_And_It_Traits, class Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     bin_search_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     bin_search_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n@@ -108,26 +94,23 @@ namespace pb_ds\n \t\t\t\t\t\tAllocator,\t\\\n \t\t\t\t\t\tfalse>\n \n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n #define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tKey,\t\\\n-\t\t\t\t\t\t\t\teq_by_less<Key, Cmp_Fn>, \\\n-\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+    map_debug_base<Key,\teq_by_less<Key, Cmp_Fn>, \\\n+\t      typename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #ifdef PB_DS_TREE_TRACE\n #define PB_DS_TREE_TRACE_BASE_C_DEC\t\t\t\t\t\\\n@@ -137,7 +120,7 @@ namespace pb_ds\n \t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n \t\t\t\t\t\t\t\t\ttrue, \\\n \t\t\t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n \n     /**\n      * class description = \"8i|\\|4ree $34rc|-| 7r33 74813.\">\n@@ -148,12 +131,12 @@ namespace pb_ds\n \t     class Node_And_It_Traits,\n \t     class Allocator>\n     class PB_DS_CLASS_NAME :\n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       public PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif \n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n       public Cmp_Fn,\n       public PB_DS_TYPES_TRAITS_C_DEC,\n       public Node_And_It_Traits::node_update\n@@ -178,9 +161,9 @@ namespace pb_ds\n     private:\n       typedef cond_dealtor< node, Allocator> cond_dealtor_t;\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif \n \n     public:\n \n@@ -203,7 +186,6 @@ namespace pb_ds\n       const_key_reference;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\n       typedef typename PB_DS_TYPES_TRAITS_C_DEC::mapped_type mapped_type;\n \n       typedef\n@@ -221,8 +203,7 @@ namespace pb_ds\n       typedef\n       typename PB_DS_TYPES_TRAITS_C_DEC::const_mapped_reference\n       const_mapped_reference;\n-\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       typedef typename PB_DS_TYPES_TRAITS_C_DEC::value_type value_type;\n \n@@ -426,8 +407,7 @@ namespace pb_ds\n       size_type\n       recursive_count(node_pointer p_nd) const;\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n@@ -436,12 +416,10 @@ namespace pb_ds\n \n       void\n       assert_node_consistent(const node_pointer p_nd) const;\n-\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif \n \n     private:\n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_iterators() const;\n \n@@ -476,8 +454,7 @@ namespace pb_ds\n \n       node_consistent_t\n       assert_node_consistent_(const node_pointer p_nd) const;\n-\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif \n \n       void\n       initialize();\n@@ -516,15 +493,11 @@ namespace pb_ds\n \n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n \n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "454d46b6f5cd82d4502d2cae86c14ef1c258b187", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 27, "deletions": 60, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,26 +50,20 @@ PB_DS_CLASS_C_DEC::s_node_allocator;\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() :\n-  m_p_head(s_node_allocator.allocate(1)),\n-  m_size(0)\n+PB_DS_CLASS_NAME() : m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n-  Cmp_Fn(r_cmp_fn),\n-  m_p_head(s_node_allocator.allocate(1)),\n-  m_size(0)\n+  Cmp_Fn(r_cmp_fn), m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -80,79 +74,64 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   m_size(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   map_debug_base(other),\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif \n #ifdef PB_DS_TREE_TRACE\n   PB_DS_TREE_TRACE_BASE_C_DEC(other),\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n   Cmp_Fn(other),\n   node_update(other),\n   m_p_head(s_node_allocator.allocate(1)),\n   m_size(0)\n {\n   initialize();\n-\n   m_size = other.m_size;\n-\n-  PB_DS_DBG_ONLY(other.structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n \n     try\n       {\n-        m_p_head->m_p_parent =\n-\t  recursive_copy_node(other.m_p_head->m_p_parent);\n-\n+        m_p_head->m_p_parent = recursive_copy_node(other.m_p_head->m_p_parent);\n         if (m_p_head->m_p_parent != NULL)\n \t  m_p_head->m_p_parent->m_p_parent = m_p_head;\n-\n         m_size = other.m_size;\n-\n         initialize_min_max();\n       }\n     catch(...)\n       {\n-        PB_DS_DBG_ONLY(map_debug_base::clear();)\n-\n-\t  s_node_allocator.deallocate(m_p_head, 1);\n-\n+        _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+\ts_node_allocator.deallocate(m_p_head, 1);\n         throw;\n       }\n-\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    PB_DS_DBG_ONLY(other.structure_only_assert_valid();)\n-\n-    value_swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n+  value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n-    PB_DS_DBG_ONLY(other.structure_only_assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(map_debug_base::swap(other);)\n-\n-    std::swap(m_p_head, other.m_p_head);\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  std::swap(m_p_head, other.m_p_head);\n   std::swap(m_size, other.m_size);\n }\n \n@@ -161,7 +140,6 @@ PB_DS_CLASS_C_DEC::\n ~PB_DS_CLASS_NAME()\n {\n   clear();\n-\n   s_node_allocator.deallocate(m_p_head, 1);\n }\n \n@@ -173,7 +151,6 @@ initialize()\n   m_p_head->m_p_parent = NULL;\n   m_p_head->m_p_left = m_p_head;\n   m_p_head->m_p_right = m_p_head;\n-\n   m_size = 0;\n }\n \n@@ -186,15 +163,13 @@ recursive_copy_node(const node_pointer p_nd)\n     return (NULL);\n \n   node_pointer p_ret = s_node_allocator.allocate(1);\n-\n   try\n     {\n       new (p_ret) node(*p_nd);\n     }\n   catch(...)\n     {\n       s_node_allocator.deallocate(p_ret, 1);\n-\n       throw;\n     }\n \n@@ -203,13 +178,11 @@ recursive_copy_node(const node_pointer p_nd)\n   try\n     {\n       p_ret->m_p_left = recursive_copy_node(p_nd->m_p_left);\n-\n       p_ret->m_p_right = recursive_copy_node(p_nd->m_p_right);\n     }\n   catch(...)\n     {\n       clear_imp(p_ret);\n-\n       throw;\n     }\n \n@@ -219,9 +192,8 @@ recursive_copy_node(const node_pointer p_nd)\n   if (p_ret->m_p_right != NULL)\n     p_ret->m_p_right->m_p_parent = p_ret;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_ret);)\n-\n-    return (p_ret);\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_ret);)\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -232,25 +204,20 @@ initialize_min_max()\n   if (m_p_head->m_p_parent == NULL)\n     {\n       m_p_head->m_p_left = m_p_head->m_p_right = m_p_head;\n-\n       return;\n     }\n \n   {\n     node_pointer p_min = m_p_head->m_p_parent;\n-\n     while (p_min->m_p_left != NULL)\n       p_min = p_min->m_p_left;\n-\n     m_p_head->m_p_left = p_min;\n   }\n \n   {\n     node_pointer p_max = m_p_head->m_p_parent;\n-\n     while (p_max->m_p_right != NULL)\n       p_max = p_max->m_p_right;\n-\n     m_p_head->m_p_right = p_max;\n   }\n }"}, {"sha": "eff970a36954705dd10a3c8b50d31a639191584c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 39, "deletions": 86, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,28 +44,24 @@\n  * Contains an implementation class for bin_search_tree_.\n  */\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   structure_only_assert_valid();\n-\n   assert_consistent_with_debug_base();\n-\n   assert_size();\n-\n   assert_iterators();\n-\n   if (m_p_head->m_p_parent == NULL)\n     {\n-      PB_DS_DBG_ASSERT(m_size == 0);\n+      _GLIBCXX_DEBUG_ASSERT(m_size == 0);\n     }\n   else\n     {\n-      PB_DS_DBG_ASSERT(m_size > 0);\n+      _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n     }\n }\n \n@@ -74,24 +70,21 @@ void\n PB_DS_CLASS_C_DEC::\n structure_only_assert_valid() const\n {\n-  PB_DS_DBG_ASSERT(m_p_head != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(m_p_head != NULL);\n   if (m_p_head->m_p_parent == NULL)\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_left == m_p_head);\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_right == m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n     }\n   else\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_parent->m_p_parent == m_p_head);\n-\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_left != m_p_head);\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_right != m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent->m_p_parent == m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left != m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right != m_p_head);\n     }\n \n   if (m_p_head->m_p_parent != NULL)\n     assert_node_consistent(m_p_head->m_p_parent);\n-\n   assert_min();\n   assert_max();\n }\n@@ -116,22 +109,18 @@ assert_node_consistent_(const node_pointer p_nd) const\n   assert_node_consistent_with_right(p_nd);\n \n   const std::pair<const_pointer, const_pointer>\n-    l_range =\n-    assert_node_consistent_(p_nd->m_p_left);\n+    l_range = assert_node_consistent_(p_nd->m_p_left);\n \n   if (l_range.second != NULL)\n-    PB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\tPB_DS_V2F(*l_range.second),\n-\t\t\t\t\tPB_DS_V2F(p_nd->m_value)));\n+    _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*l_range.second),\n+\t\t\t\t\t     PB_DS_V2F(p_nd->m_value)));\n \n   const std::pair<const_pointer, const_pointer>\n-    r_range =\n-    assert_node_consistent_(p_nd->m_p_right);\n+    r_range = assert_node_consistent_(p_nd->m_p_right);\n \n   if (r_range.first != NULL)\n-    PB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\tPB_DS_V2F(p_nd->m_value),\n-\t\t\t\t\tPB_DS_V2F(*r_range.first)));\n+    _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n+\t\t\t\t\t     PB_DS_V2F(*r_range.first)));\n \n   return (std::make_pair((l_range.first != NULL)? l_range.first :& p_nd->m_value,(r_range.second != NULL)? r_range.second :& p_nd->m_value));\n }\n@@ -143,12 +132,9 @@ assert_node_consistent_with_left(const node_pointer p_nd) const\n {\n   if (p_nd->m_p_left == NULL)\n     return;\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_p_left->m_p_parent == p_nd);\n-\n-  PB_DS_DBG_ASSERT(!Cmp_Fn::operator()(\n-\t\t\t\t       PB_DS_V2F(p_nd->m_value),\n-\t\t\t\t       PB_DS_V2F(p_nd->m_p_left->m_value)));\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left->m_p_parent == p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n+\t\t\t\t\t    PB_DS_V2F(p_nd->m_p_left->m_value)));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -158,11 +144,8 @@ assert_node_consistent_with_right(const node_pointer p_nd) const\n {\n   if (p_nd->m_p_right == NULL)\n     return;\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_p_right->m_p_parent == p_nd);\n-\n-  PB_DS_DBG_ASSERT(!Cmp_Fn::operator()(\n-\t\t\t\t       PB_DS_V2F(p_nd->m_p_right->m_value),\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right->m_p_parent == p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_p_right->m_value),\n \t\t\t\t       PB_DS_V2F(p_nd->m_value)));\n }\n \n@@ -181,18 +164,15 @@ assert_min_imp(const node_pointer p_nd) const\n {\n   if (p_nd == NULL)\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_left == m_p_head);\n-\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n       return;\n     }\n \n   if (p_nd->m_p_left == NULL)\n     {\n-      PB_DS_DBG_ASSERT(p_nd == m_p_head->m_p_left);\n-\n+      _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_left);\n       return;\n     }\n-\n   assert_min_imp(p_nd->m_p_left);\n }\n \n@@ -211,15 +191,13 @@ assert_max_imp(const node_pointer p_nd) const\n {\n   if (p_nd == NULL)\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_right == m_p_head);\n-\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n       return;\n     }\n \n   if (p_nd->m_p_right == NULL)\n     {\n-      PB_DS_DBG_ASSERT(p_nd == m_p_head->m_p_right);\n-\n+      _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_right);\n       return;\n     }\n \n@@ -232,61 +210,40 @@ PB_DS_CLASS_C_DEC::\n assert_iterators() const\n {\n   size_type iterated_num = 0;\n-\n   const_iterator prev_it = end();\n-\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;\n-\n-      PB_DS_DBG_ASSERT(lower_bound(\n-\t\t\t\t   PB_DS_V2F(*it)).m_p_nd == it.m_p_nd);\n-\n-      const_iterator upper_bound_it = upper_bound(\n-\t\t\t\t\t\t  PB_DS_V2F(*it));\n-\n+      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)).m_p_nd == it.m_p_nd);\n+      const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*it));\n       --upper_bound_it;\n-\n-      PB_DS_DBG_ASSERT(upper_bound_it.m_p_nd == it.m_p_nd);\n+      _GLIBCXX_DEBUG_ASSERT(upper_bound_it.m_p_nd == it.m_p_nd);\n \n       if (prev_it != end())\n-\tPB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\t    PB_DS_V2F(*prev_it),\n-\t\t\t\t\t    PB_DS_V2F(*it)));\n-\n+\t_GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n+\t\t\t\t\t\t PB_DS_V2F(*it)));\n       prev_it = it;\n     }\n \n-  PB_DS_DBG_ASSERT(iterated_num == m_size);\n-\n+  _GLIBCXX_DEBUG_ASSERT(iterated_num == m_size);\n   size_type reverse_iterated_num = 0;\n-\n   const_reverse_iterator reverse_prev_it = rend();\n-\n   for (const_reverse_iterator reverse_it = rbegin(); reverse_it != rend();\n        ++reverse_it)\n     {\n       ++reverse_iterated_num;\n-\n-      PB_DS_DBG_ASSERT(lower_bound(\n+      _GLIBCXX_DEBUG_ASSERT(lower_bound(\n \t\t\t\t   PB_DS_V2F(*reverse_it)).m_p_nd == reverse_it.m_p_nd);\n \n-      const_iterator upper_bound_it = upper_bound(\n-\t\t\t\t\t\t  PB_DS_V2F(*reverse_it));\n-\n+      const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*reverse_it));\n       --upper_bound_it;\n-\n-      PB_DS_DBG_ASSERT(upper_bound_it.m_p_nd == reverse_it.m_p_nd);\n-\n+      _GLIBCXX_DEBUG_ASSERT(upper_bound_it.m_p_nd == reverse_it.m_p_nd);\n       if (reverse_prev_it != rend())\n-\tPB_DS_DBG_ASSERT(!Cmp_Fn::operator()(\n-\t\t\t\t\t     PB_DS_V2F(*reverse_prev_it),\n-\t\t\t\t\t     PB_DS_V2F(*reverse_it)));\n-\n+\t_GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(*reverse_prev_it),\n+\t\t\t\t\t\t  PB_DS_V2F(*reverse_it)));\n       reverse_prev_it = reverse_it;\n     }\n-\n-  PB_DS_DBG_ASSERT(reverse_iterated_num == m_size);\n+  _GLIBCXX_DEBUG_ASSERT(reverse_iterated_num == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -295,7 +252,6 @@ PB_DS_CLASS_C_DEC::\n assert_consistent_with_debug_base() const\n {\n   map_debug_base::check_size(m_size);\n-\n   assert_consistent_with_debug_base(m_p_head->m_p_parent);\n }\n \n@@ -306,10 +262,7 @@ assert_consistent_with_debug_base(const node_pointer p_nd) const\n {\n   if (p_nd == NULL)\n     return;\n-\n-  map_debug_base::check_key_exists(\n-\t\t\t\t   PB_DS_V2F(p_nd->m_value));\n-\n+  map_debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value));\n   assert_consistent_with_debug_base(p_nd->m_p_left);\n   assert_consistent_with_debug_base(p_nd->m_p_right);\n }\n@@ -319,7 +272,7 @@ void\n PB_DS_CLASS_C_DEC::\n assert_size() const\n {\n-  PB_DS_DBG_ASSERT(recursive_count(m_p_head->m_p_parent) == m_size);\n+  _GLIBCXX_DEBUG_ASSERT(recursive_count(m_p_head->m_p_parent) == m_size);\n }\n \n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n+#endif "}, {"sha": "2006a82b68060cd34424a010fd56e05f964d8b08", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,10 +49,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n actual_erase_node(node_pointer p_z)\n {\n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  PB_DS_DBG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n \n   p_z->~node();\n \n@@ -94,17 +94,17 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n     clear_imp(m_p_head->m_p_parent);\n \n   m_size = 0;\n \n   initialize();\n \n-  PB_DS_DBG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n \n-    PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "5f534d1c753c34b98fe0544e80a00f1ef18aef07", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -139,7 +139,7 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n     node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n@@ -165,7 +165,7 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n     node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;"}, {"sha": "91fe41ab9d265f1c30704d8bbaada6556a2aaa65", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_leaf(const_reference r_value)\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n     if (m_size == 0)\n       return (std::make_pair(\n@@ -80,15 +80,15 @@ insert_leaf(const_reference r_value)\n \t\t\t  PB_DS_V2F(r_value),\n \t\t\t  PB_DS_V2F(p_pot->m_value)))\n     {\n-      PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n-        PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n+        _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n \t\t\t\t\t\t\tPB_DS_V2F(r_value)));\n \n       return (std::make_pair(p_pot, false));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t  PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;\n@@ -115,8 +115,8 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   if (left_nd)\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_p_left == NULL);\n-      PB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n \t\t\t\t\t  PB_DS_V2F(r_value),\n \t\t\t\t\t  PB_DS_V2F(p_nd->m_value)));\n \n@@ -127,8 +127,8 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n     }\n   else\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_p_right == NULL);\n-      PB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(\n \t\t\t\t\t  PB_DS_V2F(p_nd->m_value),\n \t\t\t\t\t  PB_DS_V2F(r_value)));\n \n@@ -142,11 +142,11 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   p_new_nd->m_p_left = p_new_nd->m_p_right = NULL;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_nd));\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_nd));\n \n   update_to_top(p_new_nd, (node_update* )this);\n \n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_value)));\n \n   return (iterator(p_new_nd));\n@@ -167,7 +167,7 @@ insert_imp_empty(const_reference r_value)\n \n   p_new_node->m_p_left = p_new_node->m_p_right = NULL;\n \n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_value)));\n \n   update_to_top(m_p_head->m_p_parent, (node_update* )this);"}, {"sha": "275177e10e0975b8cca7d883f9c6dbcb7a13d2ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/point_iterators.hpp", "status": "modified", "additions": 50, "deletions": 124, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fpoint_iterators.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,10 +47,8 @@\n #ifndef PB_DS_BIN_SEARCH_TREE_FIND_ITERATORS_HPP\n #define PB_DS_BIN_SEARCH_TREE_FIND_ITERATORS_HPP\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n #include <ext/pb_ds/tag_and_trait.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n@@ -101,16 +99,6 @@ namespace pb_ds\n \t\t\t\t\t\t\t!Is_Forward_Iterator, \\\n \t\t\t\t\t\t\tAllocator>\n \n-#ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BIN_SEARCH_TREE_DEBUG_\n-\n     // Const iterator.\n     template<typename Node_Pointer,\n \t     typename Value_Type,\n@@ -142,124 +130,96 @@ namespace pb_ds\n     public:\n \n       inline\n-      bin_search_tree_const_it_(const Node_Pointer p_nd = NULL) : m_p_nd(const_cast<Node_Pointer>(p_nd))\n+      bin_search_tree_const_it_(const Node_Pointer p_nd = NULL) \n+      : m_p_nd(const_cast<Node_Pointer>(p_nd))\n       { }\n \n       inline\n-      bin_search_tree_const_it_(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& \n-\t\t\t\tother) : m_p_nd(other.m_p_nd)\n+      bin_search_tree_const_it_(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& other) \n+      : m_p_nd(other.m_p_nd)\n       { }\n \n       inline\n       PB_DS_TREE_CONST_IT_C_DEC& \n-      operator=(const PB_DS_TREE_CONST_IT_C_DEC& \n-\t\tother)\n+      operator=(const PB_DS_TREE_CONST_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline\n       PB_DS_TREE_CONST_IT_C_DEC& \n-      operator=(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& \n-\t\tother)\n+      operator=(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline const_pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd != NULL);\n-\n-\treturn (&m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\treturn &m_p_nd->m_value;\n       }\n \n       inline const_reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd != NULL);\n-\n-\treturn (m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\treturn m_p_nd->m_value;\n       }\n \n       inline bool\n-      operator==(const PB_DS_TREE_CONST_IT_C_DEC\n-\t\t & other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      operator==(const PB_DS_TREE_CONST_IT_C_DEC & other) const\n+      { return m_p_nd == other.m_p_nd; }\n \n       inline bool\n-      operator==(const PB_DS_TREE_CONST_ODIR_IT_C_DEC\n-\t\t & other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      operator==(const PB_DS_TREE_CONST_ODIR_IT_C_DEC & other) const\n+      { return m_p_nd == other.m_p_nd; }\n \n       inline bool\n-      operator!=(const PB_DS_TREE_CONST_IT_C_DEC& \n-\t\t other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      operator!=(const PB_DS_TREE_CONST_IT_C_DEC& other) const\n+      { return m_p_nd != other.m_p_nd; }\n \n       inline bool\n-      operator!=(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& \n-\t\t other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      operator!=(const PB_DS_TREE_CONST_ODIR_IT_C_DEC& other) const\n+      { return m_p_nd != other.m_p_nd; }\n \n       inline PB_DS_TREE_CONST_IT_C_DEC& \n       operator++()\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd != NULL);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n \tinc(integral_constant<int,Is_Forward_Iterator>());\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_TREE_CONST_IT_C_DEC\n       operator++(int)\n       {\n-\tPB_DS_TREE_CONST_IT_C_DEC\n-\t  ret_it(m_p_nd);\n-\n+\tPB_DS_TREE_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator++();\n-\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n       inline PB_DS_TREE_CONST_IT_C_DEC& \n       operator--()\n       {\n \tdec(integral_constant<int,Is_Forward_Iterator>());\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_TREE_CONST_IT_C_DEC\n       operator--(int)\n       {\n-\tPB_DS_TREE_CONST_IT_C_DEC\n-\t  ret_it(m_p_nd);\n-\n+\tPB_DS_TREE_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator--();\n-\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n     protected:\n       inline void\n       inc(false_type)\n-      {\n-\tdec(true_type());\n-      }\n+      { dec(true_type()); }\n \n       void\n       inc(true_type)\n@@ -268,26 +228,21 @@ namespace pb_ds\n \t    m_p_nd->m_p_parent->m_p_parent == m_p_nd)\n \t  {\n \t    m_p_nd = m_p_nd->m_p_left;\n-\n \t    return;\n \t  }\n \n \tif (m_p_nd->m_p_right != NULL)\n \t  {\n \t    m_p_nd = m_p_nd->m_p_right;\n-\n \t    while (m_p_nd->m_p_left != NULL)\n \t      m_p_nd = m_p_nd->m_p_left;\n-\n \t    return;\n \t  }\n \n \tNode_Pointer p_y = m_p_nd->m_p_parent;\n-\n \twhile (m_p_nd == p_y->m_p_right)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    p_y = p_y->m_p_parent;\n \t  }\n \n@@ -297,42 +252,32 @@ namespace pb_ds\n \n       inline void\n       dec(false_type)\n-      {\n-\tinc(true_type());\n-      }\n+      { inc(true_type()); }\n \n       void\n       dec(true_type)\n       {\n-\tif (m_p_nd->special()&& \n-\t    m_p_nd->m_p_parent->m_p_parent == m_p_nd)\n+\tif (m_p_nd->special() && m_p_nd->m_p_parent->m_p_parent == m_p_nd)\n \t  {\n \t    m_p_nd = m_p_nd->m_p_right;\n-\n \t    return;\n \t  }\n \n \tif (m_p_nd->m_p_left != NULL)\n \t  {\n \t    Node_Pointer p_y = m_p_nd->m_p_left;\n-\n \t    while (p_y->m_p_right != NULL)\n \t      p_y = p_y->m_p_right;\n-\n \t    m_p_nd = p_y;\n-\n \t    return;\n \t  }\n \n \tNode_Pointer p_y = m_p_nd->m_p_parent;\n-\n \twhile (m_p_nd == p_y->m_p_left)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    p_y = p_y->m_p_parent;\n \t  }\n-\n \tif (m_p_nd->m_p_left != p_y)\n \t  m_p_nd = p_y;\n       }\n@@ -358,104 +303,85 @@ namespace pb_ds\n     public:\n \n       inline\n-      bin_search_tree_it_(const Node_Pointer p_nd = NULL) : PB_DS_TREE_CONST_IT_C_DEC((Node_Pointer)p_nd)\n+      bin_search_tree_it_(const Node_Pointer p_nd = NULL) \n+      : PB_DS_TREE_CONST_IT_C_DEC((Node_Pointer)p_nd)\n       { }\n \n       inline\n-      bin_search_tree_it_(const PB_DS_TREE_ODIR_IT_C_DEC& other) : PB_DS_TREE_CONST_IT_C_DEC(other.m_p_nd)\n+      bin_search_tree_it_(const PB_DS_TREE_ODIR_IT_C_DEC& other) \n+      : PB_DS_TREE_CONST_IT_C_DEC(other.m_p_nd)\n       { }\n \n       inline\n       PB_DS_TREE_IT_C_DEC& \n       operator=(const PB_DS_TREE_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline\n       PB_DS_TREE_IT_C_DEC& \n       operator=(const PB_DS_TREE_ODIR_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline typename PB_DS_TREE_CONST_IT_C_DEC::pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(base_it_type::m_p_nd != NULL);\n-\n-\treturn (&base_it_type::m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != NULL);\n+\treturn &base_it_type::m_p_nd->m_value;\n       }\n \n       inline typename PB_DS_TREE_CONST_IT_C_DEC::reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(base_it_type::m_p_nd != NULL);\n-\n-\treturn (base_it_type::m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd != NULL);\n+\treturn base_it_type::m_p_nd->m_value;\n       }\n \n       inline PB_DS_TREE_IT_C_DEC& \n       operator++()\n       {\n-\tPB_DS_TREE_CONST_IT_C_DEC::\n-\t  operator++();\n-\n-\treturn (*this);\n+\tPB_DS_TREE_CONST_IT_C_DEC:: operator++();\n+\treturn *this;\n       }\n \n       inline PB_DS_TREE_IT_C_DEC\n       operator++(int)\n       {\n-\tPB_DS_TREE_IT_C_DEC\n-\t  ret_it(base_it_type::m_p_nd);\n-\n+\tPB_DS_TREE_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator++();\n-\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n       inline PB_DS_TREE_IT_C_DEC& \n       operator--()\n       {\n-\tPB_DS_TREE_CONST_IT_C_DEC::\n-\t  operator--();\n-\n-\treturn (*this);\n+\tPB_DS_TREE_CONST_IT_C_DEC:: operator--();\n+\treturn *this;\n       }\n \n       inline PB_DS_TREE_IT_C_DEC\n       operator--(int)\n       {\n-\tPB_DS_TREE_IT_C_DEC\n-\t  ret_it(base_it_type::m_p_nd);\n-\n+\tPB_DS_TREE_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator--();\n-\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n     protected:\n       typedef PB_DS_TREE_CONST_IT_C_DEC base_it_type;\n     };\n \n #undef PB_DS_TREE_CONST_IT_C_DEC\n-\n #undef PB_DS_TREE_CONST_ODIR_IT_C_DEC\n-\n #undef PB_DS_TREE_IT_C_DEC\n-\n #undef PB_DS_TREE_ODIR_IT_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BIN_SEARCH_TREE_FIND_ITERATORS_HPP\n+#endif "}, {"sha": "2bad9795b2bdeea1e0a92c77890cce924dfc616b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,10 +49,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n actual_erase_node(node_pointer p_z)\n {\n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  PB_DS_DBG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n \n   p_z->~node();\n \n@@ -94,17 +94,17 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n \n     clear_imp(m_p_head->m_p_parent);\n \n   m_size = 0;\n \n   initialize();\n \n-  PB_DS_DBG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n \n-    PB_DS_DBG_ONLY(structure_only_assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "4e32aae637f3319c64bf8ee67a826cb22c3c5c92", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -68,8 +68,8 @@ rotate_left(node_pointer p_x)\n   p_y->m_p_left = p_x;\n   p_x->m_p_parent = p_y;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_x);)\n-    PB_DS_DBG_ONLY(assert_node_consistent(p_y);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n+    _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n \n     apply_update(p_x, (node_update* )this);\n   apply_update(p_x->m_p_parent, (node_update* )this);\n@@ -99,8 +99,8 @@ rotate_right(node_pointer p_x)\n   p_y->m_p_right = p_x;\n   p_x->m_p_parent = p_y;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_x);)\n-    PB_DS_DBG_ONLY(assert_node_consistent(p_y);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n+    _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n \n     apply_update(p_x, (node_update* )this);\n   apply_update(p_x->m_p_parent, (node_update* )this);\n@@ -118,8 +118,8 @@ rotate_parent(node_pointer p_nd)\n   else\n     rotate_left(p_parent);\n \n-  PB_DS_DBG_ASSERT(p_parent->m_p_parent = p_nd);\n-  PB_DS_DBG_ASSERT(p_nd->m_p_left == p_parent ||\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_parent = p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == p_parent ||\n \t\t   p_nd->m_p_right == p_parent);\n }\n "}, {"sha": "ee7e2e8a3c3ba3b649becd19937aa62aafc8cb03", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,8 +49,8 @@ bool\n PB_DS_CLASS_C_DEC::\n join_prep(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     if (other.m_size == 0)\n       return (false);\n@@ -78,7 +78,7 @@ join_prep(PB_DS_CLASS_C_DEC& other)\n \n   m_size += other.m_size;\n \n-  PB_DS_DBG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n \n     return (true);\n }\n@@ -98,15 +98,15 @@ bool\n PB_DS_CLASS_C_DEC::\n split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     other.clear();\n \n   if (m_size == 0)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return (false);\n     }\n@@ -115,8 +115,8 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n     {\n       value_swap(other);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return (false);\n     }\n@@ -125,8 +125,8 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \t\t\t  r_key,\n \t\t\t  PB_DS_V2F(m_p_head->m_p_right->m_value)))\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return (false);\n     }\n@@ -135,13 +135,13 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n     {\n       value_swap(other);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return (false);\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::split(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(\n \t\t\t\t       r_key,(Cmp_Fn& )(*this),\n \t\t\t\t       other);)\n \n@@ -162,8 +162,8 @@ split_finish(PB_DS_CLASS_C_DEC& other)\n \n   initialize_min_max();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "a47033a64afb29b2d145df5d6a48c8580c10afcf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 15, "deletions": 48, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -63,44 +63,25 @@\n #include <ext/pb_ds/detail/binary_heap_/const_iterator.hpp>\n #ifdef PB_DS_BINARY_HEAP_TRACE_\n #include <iostream>\n-#endif // #ifdef PB_DS_BINARY_HEAP_TRACE_\n+#endif\n #include <ext/pb_ds/detail/type_utils.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    binary_heap_<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    binary_heap_<Value_Type, Cmp_Fn, Allocator>\n \n-#define PB_DS_ENTRY_CMP_DEC\t\t\t\t\t\t\\\n-    entry_cmp<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\tis_simple< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tValue_Type>::value, \\\n-\t\t\t\t\t\t\t\tAllocator>::type\n+#define PB_DS_ENTRY_CMP_DEC \\\n+    entry_cmp<Value_Type, Cmp_Fn, is_simple<Value_Type>::value, Allocator>::type\n \n-#define PB_DS_RESIZE_POLICY_DEC\t\t\t\t\t\t\\\n-    resize_policy<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\ttypename Allocator::size_type>\n+#define PB_DS_RESIZE_POLICY_DEC\t\\\n+    resize_policy<typename Allocator::size_type>\n \n     /**\n      * class description = \"Base class for some types of h3ap$\">\n@@ -113,8 +94,7 @@ namespace pb_ds\n     private:\n       enum\n \t{\n-\t  simple_value = is_simple<\n-\t  Value_Type>::value\n+\t  simple_value = is_simple<Value_Type>::value\n \t};\n \n       typedef integral_constant<int, simple_value> no_throw_copies_t;\n@@ -276,11 +256,9 @@ namespace pb_ds\n       join(PB_DS_CLASS_C_DEC& other);\n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_BINARY_HEAP_TRACE_\n+#endif \n \n     protected:\n \n@@ -336,22 +314,18 @@ namespace pb_ds\n       size_type\n       partition(Pred pred);\n \n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n-\n       void\n       trace_entry(const entry& r_e, false_type) const;\n \n       void\n       trace_entry(const entry& r_e, true_type) const;\n-\n-#endif // #ifdef PB_DS_BINARY_HEAP_TRACE_\n+#endif \n \n     private:\n       static entry_allocator s_entry_allocator;\n@@ -379,18 +353,11 @@ namespace pb_ds\n #include <ext/pb_ds/detail/binary_heap_/policy_access_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_ENTRY_CMP_DEC\n-\n #undef PB_DS_RESIZE_POLICY_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BINARY_HEAP_HPP\n+#endif "}, {"sha": "12b96e766ba0ce9d1be814b3aaf8480a056392ed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_iterator.hpp", "status": "modified", "additions": 13, "deletions": 42, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,35 +49,18 @@\n #define PB_DS_BINARY_HEAP_CONST_ITERATOR_HPP\n \n #include <ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef BINARY_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    binary_heap_const_iterator_<\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tEntry,\t\t\\\n-\t\t\t\t\t\tSimple,\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\\\n-    binary_heap_const_point_iterator_<\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tEntry,\t\t\\\n-\t\t\t\t\t\tSimple,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    binary_heap_const_iterator_<Value_Type, Entry, Simple, Allocator>\n+\n+#define PB_DS_BASE_C_DEC \\\n+    binary_heap_const_point_iterator_<Value_Type, Entry, Simple, Allocator>\n \n     // Const point-type iterator.\n     template<typename Value_Type,\n@@ -135,53 +118,41 @@ namespace pb_ds\n       inline bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n       {\n-\treturn (base_type::m_p_e == other.m_p_e);\n+\treturn base_type::m_p_e == other.m_p_e;\n       }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n       {\n-\treturn (base_type::m_p_e != other.m_p_e);\n+\treturn base_type::m_p_e != other.m_p_e;\n       }\n \n       inline PB_DS_CLASS_C_DEC& \n       operator++()\n       {\n-\tPB_DS_DBG_ASSERT(base_type::m_p_e != NULL);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_e != NULL);\n \tinc();\n-\n-\treturn (*this);\n+\treturn *this;\n       }\n \n       inline PB_DS_CLASS_C_DEC\n       operator++(int)\n       {\n \tPB_DS_CLASS_C_DEC ret_it(base_type::m_p_e);\n-\n \toperator++();\n-\n-\treturn (ret_it);\n+\treturn ret_it;\n       }\n \n     private:\n       void\n       inc()\n-      {\n-\t++base_type::m_p_e;\n-      }\n+      { ++base_type::m_p_e; }\n     };\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BINARY_HEAP_CONST_ITERATOR_HPP\n+#endif "}, {"sha": "670b6ecf07b384b47a4bd0ac5f3f75e3b19e465b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/const_point_iterator.hpp", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconst_point_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,35 +49,18 @@\n #define PB_DS_BINARY_HEAP_CONST_FIND_ITERATOR_HPP\n \n #include <ext/pb_ds/tag_and_trait.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;m_p_prev_or_parent\n-#endif // #ifdef BINARY_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Value_Type,\t\\\n-\t\t\t\t\t\ttypename Entry,\t\t\\\n-\t\t\t\t\t\tbool Simple,\t\t\\\n-\t\t\t\t\t\tclass Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    binary_heap_const_point_iterator_<\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tEntry,\t\t\\\n-\t\t\t\t\t\tSimple,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Value_Type, typename Entry, bool Simple, class Allocator>\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    binary_heap_const_point_iterator_<Value_Type, Entry, Simple, Allocator>\n \n     // Const point-type iterator.\n     template<typename Value_Type,\n@@ -136,62 +119,48 @@ namespace pb_ds\n \n       // Default constructor.\n       inline\n-      binary_heap_const_point_iterator_()\n-\n-\t: m_p_e(NULL)\n-      { }\n+      binary_heap_const_point_iterator_() : m_p_e(NULL) { }\n \n       // Copy constructor.\n       inline\n       binary_heap_const_point_iterator_(const PB_DS_CLASS_C_DEC& other)\n-\n-\t: m_p_e(other.m_p_e)\n+      : m_p_e(other.m_p_e)\n       { }\n \n       // Access.\n       inline const_pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_e != NULL);\n-\n-\treturn (to_ptr(integral_constant<int,Simple>()));\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n+\treturn to_ptr(integral_constant<int,Simple>());\n       }\n \n       // Access.\n       inline const_reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_e != NULL);\n-\n-\treturn (*to_ptr(integral_constant<int,Simple>()));\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_e != NULL);\n+\treturn *to_ptr(integral_constant<int,Simple>());\n       }\n \n       // Compares content to a different iterator object.\n       inline bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_e == other.m_p_e);\n-      }\n+      { return m_p_e == other.m_p_e; }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_e != other.m_p_e);\n-      }\n+      { return m_p_e != other.m_p_e; }\n \n     private:\n       inline const_pointer\n       to_ptr(true_type) const\n-      {\n-\treturn m_p_e;\n-      }\n+      { return m_p_e; }\n \n       inline const_pointer\n       to_ptr(false_type) const\n-      {\n-\treturn* m_p_e;\n-      }\n+      { return *m_p_e; }\n \n     public:\n       entry_pointer m_p_e;\n@@ -200,11 +169,7 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BINARY_HEAP_CONST_FIND_ITERATOR_HPP\n+#endif "}, {"sha": "ada9c2af083ac9ec0f2743eea110e5754d30d6ef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -71,7 +71,7 @@ copy_from_range(It first_it, It last_it)\n \n   std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -81,7 +81,7 @@ binary_heap_() :\n   m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -92,7 +92,7 @@ binary_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -104,8 +104,8 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n   m_actual_size(other.m_actual_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  PB_DS_DBG_ONLY(other.assert_valid();)\n-    PB_DS_DBG_ASSERT(m_a_entries != other.m_a_entries);\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   const_iterator first_it = other.begin();\n   const_iterator last_it = other.end();\n@@ -129,24 +129,24 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n       throw;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-    PB_DS_DBG_ASSERT(m_a_entries != other.m_a_entries);\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   value_swap(other);\n \n   std::swap((entry_cmp& )(*this), (entry_cmp& )other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "198d6608e37a86c9705c9f5e41360fc919dadbd1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains an implementation class for a binary_heap.\n  */\n \n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n@@ -53,28 +53,26 @@ assert_valid() const\n {\n #ifdef PB_DS_REGRESSION\n   s_entry_allocator.check_allocated(m_a_entries, m_actual_size);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n   resize_policy::assert_valid();\n-\n-  PB_DS_DBG_ASSERT(m_size <= m_actual_size);\n-\n+  _GLIBCXX_DEBUG_ASSERT(m_size <= m_actual_size);\n   for (size_type i = 0; i < m_size; ++i)\n     {\n #ifdef PB_DS_REGRESSION\n       s_value_allocator.check_allocated(m_a_entries[i], 1);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n       if (left_child(i) < m_size)\n-\tPB_DS_DBG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[left_child(i)]));\n+\t_GLIBCXX_DEBUG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[left_child(i)]));\n \n-      PB_DS_DBG_ASSERT(parent(left_child(i)) == i);\n+      _GLIBCXX_DEBUG_ASSERT(parent(left_child(i)) == i);\n \n       if (right_child(i) < m_size)\n-\tPB_DS_DBG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[right_child(i)]));\n+\t_GLIBCXX_DEBUG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[right_child(i)]));\n \n-      PB_DS_DBG_ASSERT(parent(right_child(i)) == i);\n+      _GLIBCXX_DEBUG_ASSERT(parent(right_child(i)) == i);\n     }\n }\n \n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#endif "}, {"sha": "72686d1297435d37cafa3bceb9e27003cae88399", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -71,7 +71,7 @@ clear()\n \n   m_size = 0;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -95,19 +95,19 @@ inline void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   erase_at(m_a_entries, 0, s_no_throw_copies_ind);\n \n   std::pop_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n   resize_for_erase_if_needed();\n \n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -116,7 +116,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     typedef\n     typename entry_pred<\n@@ -128,7 +128,7 @@ erase_if(Pred pred)\n \n   const size_type left = partition(pred_t(pred));\n \n-  PB_DS_DBG_ASSERT(m_size >= left);\n+  _GLIBCXX_DEBUG_ASSERT(m_size >= left);\n \n   const size_type ersd = m_size - left;\n \n@@ -157,7 +157,7 @@ erase_if(Pred pred)\n \n   std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return ersd;\n }\n@@ -167,8 +167,8 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   const size_type fix_pos = it.m_p_e - m_a_entries;\n \n@@ -178,15 +178,15 @@ erase(point_iterator it)\n \n   resize_for_erase_if_needed();\n \n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  PB_DS_DBG_ASSERT(fix_pos <= m_size);\n+  _GLIBCXX_DEBUG_ASSERT(fix_pos <= m_size);\n \n   if (fix_pos != m_size)\n     fix(m_a_entries + fix_pos);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -206,7 +206,7 @@ resize_for_erase_if_needed()\n \n       resize_policy::notify_shrink_resize();\n \n-      PB_DS_DBG_ASSERT(m_size > 0);\n+      _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n       std::copy(m_a_entries, m_a_entries + m_size - 1, a_new_entries);\n \n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n@@ -230,15 +230,15 @@ partition(Pred pred)\n \n   while (right + 1 != left)\n     {\n-      PB_DS_DBG_ASSERT(left <= m_size);\n+      _GLIBCXX_DEBUG_ASSERT(left <= m_size);\n \n       if (!pred(m_a_entries[left]))\n \t++left;\n       else if (pred(m_a_entries[right]))\n \t--right;\n       else\n         {\n-\t  PB_DS_DBG_ASSERT(left < right);\n+\t  _GLIBCXX_DEBUG_ASSERT(left < right);\n \n \t  std::swap(m_a_entries[left], m_a_entries[right]);\n "}, {"sha": "b7606b673d8e563255d99e644c8a84306e79eeed", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,8 +49,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   return top_imp(s_no_throw_copies_ind);\n }"}, {"sha": "489ccc124653f87bbc70f958690ff82f5ae142eb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,13 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     insert_value(r_val, s_no_throw_copies_ind);\n \n   std::push_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return point_iterator(m_a_entries);\n }\n@@ -105,7 +105,7 @@ resize_for_insert_if_needed()\n {\n   if (!resize_policy::resize_needed_for_grow(m_size))\n     {\n-      PB_DS_DBG_ASSERT(m_size < m_actual_size);\n+      _GLIBCXX_DEBUG_ASSERT(m_size < m_actual_size);\n \n       return;\n     }\n@@ -131,13 +131,13 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     swap_value_imp(it.m_p_e, r_new_val, s_no_throw_copies_ind);\n \n   fix(it.m_p_e);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -160,7 +160,7 @@ fix(entry_pointer p_e)\n \t  parent_i = parent(i);\n         }\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return;\n     }\n@@ -170,7 +170,7 @@ fix(entry_pointer p_e)\n       const size_type left_child_i = left_child(i);\n       const size_type right_child_i = right_child(i);\n \n-      PB_DS_DBG_ASSERT(right_child_i > left_child_i);\n+      _GLIBCXX_DEBUG_ASSERT(right_child_i > left_child_i);\n \n       const bool smaller_than_left_child =\n \tleft_child_i < m_size&& "}, {"sha": "c6021a998041fb969a08e3f2d072dd059df834a7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,27 +47,16 @@\n #ifndef PB_DS_BINARY_HEAP_RESIZE_POLICY_HPP\n #define PB_DS_BINARY_HEAP_RESIZE_POLICY_HPP\n \n+#include <debug/debug.h>\n+\n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Size_Type>\n+#define PB_DS_CLASS_T_DEC template<typename Size_Type>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    resize_policy<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tSize_Type>\n+#define PB_DS_CLASS_C_DEC resize_policy<Size_Type>\n \n     template<typename Size_Type>\n     class resize_policy\n@@ -117,17 +106,15 @@ namespace pb_ds\n       void\n       notify_arbitrary(size_type actual_size);\n \n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_BINARY_HEAP_TRACE_\n+#endif \n \n     private:\n       enum\n@@ -138,7 +125,6 @@ namespace pb_ds\n \n     private:\n       size_type m_next_shrink_size;\n-\n       size_type m_next_grow_size;\n     };\n \n@@ -148,9 +134,7 @@ namespace pb_ds\n     resize_policy() :\n       m_next_shrink_size(0),\n       m_next_grow_size(min_size)\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n@@ -166,8 +150,7 @@ namespace pb_ds\n     PB_DS_CLASS_C_DEC::\n     resize_needed_for_grow(size_type size) const\n     {\n-      PB_DS_DBG_ASSERT(size <= m_next_grow_size);\n-\n+      _GLIBCXX_DEBUG_ASSERT(size <= m_next_grow_size);\n       return size == m_next_grow_size;\n     }\n \n@@ -176,26 +159,22 @@ namespace pb_ds\n     PB_DS_CLASS_C_DEC::\n     resize_needed_for_shrink(size_type size) const\n     {\n-      PB_DS_DBG_ASSERT(size <= m_next_grow_size);\n-\n+      _GLIBCXX_DEBUG_ASSERT(size <= m_next_grow_size);\n       return size == m_next_shrink_size;\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     get_new_size_for_grow() const\n-    {\n-      return m_next_grow_size*  factor;\n-    }\n+    { return m_next_grow_size*  factor; }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     get_new_size_for_shrink() const\n     {\n       const size_type half_size = m_next_grow_size / factor;\n-\n       return std::max(static_cast<size_type>(min_size), half_size);\n     }\n \n@@ -205,10 +184,8 @@ namespace pb_ds\n     get_new_size_for_arbitrary(size_type size) const\n     {\n       size_type ret = min_size;\n-\n       while (ret < size)\n \tret *= factor;\n-\n       return ret;\n     }\n \n@@ -217,58 +194,50 @@ namespace pb_ds\n     PB_DS_CLASS_C_DEC::\n     notify_grow_resize()\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tPB_DS_DBG_ASSERT(m_next_grow_size >= min_size);\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= min_size);\n       m_next_grow_size *= factor;\n-\n       m_next_shrink_size = m_next_grow_size / ratio;\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     notify_shrink_resize()\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tm_next_shrink_size /= factor;\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      m_next_shrink_size /= factor;\n       if (m_next_shrink_size == 1)\n \tm_next_shrink_size = 0;\n \n       m_next_grow_size =\n \tstd::max(m_next_grow_size / factor, static_cast<size_type>(min_size));\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     notify_arbitrary(size_type actual_size)\n     {\n       m_next_grow_size = actual_size;\n-\n       m_next_shrink_size = m_next_grow_size / ratio;\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n-\n-#ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     assert_valid() const\n     {\n-      PB_DS_DBG_ASSERT(m_next_shrink_size == 0 ||\n+      _GLIBCXX_DEBUG_ASSERT(m_next_shrink_size == 0 ||\n \t\t       m_next_shrink_size*  ratio == m_next_grow_size);\n \n-      PB_DS_DBG_ASSERT(m_next_grow_size >= min_size);\n+      _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= min_size);\n     }\n-#endif // #ifdef PB_DS_BINARY_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n     PB_DS_CLASS_T_DEC\n@@ -279,17 +248,12 @@ namespace pb_ds\n       std::cerr << \"shrink = \" << m_next_shrink_size <<\n \t\" grow = \" << m_next_grow_size << std::endl;\n     }\n-#endif // #ifdef PB_DS_BINARY_HEAP_TRACE_\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace detail\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BINARY_HEAP_RESIZE_POLICY_HPP\n+#endif "}, {"sha": "1cca3818139a6db8a0c3bab4b183ea5a9589cd25", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     typedef\n     typename entry_pred<\n@@ -62,11 +62,11 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   const size_type left = partition(pred_t(pred));\n \n-  PB_DS_DBG_ASSERT(m_size >= left);\n+  _GLIBCXX_DEBUG_ASSERT(m_size >= left);\n \n   const size_type ersd = m_size - left;\n \n-  PB_DS_DBG_ASSERT(m_size >= ersd);\n+  _GLIBCXX_DEBUG_ASSERT(m_size >= ersd);\n \n   const size_type actual_size =\n     resize_policy::get_new_size_for_arbitrary(left);\n@@ -97,7 +97,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   for (size_type i = 0; i < other.m_size; ++i)\n     erase_at(other.m_a_entries, i, s_no_throw_copies_ind);\n \n-  PB_DS_DBG_ASSERT(actual_size >= left);\n+  _GLIBCXX_DEBUG_ASSERT(actual_size >= left);\n   std::copy(m_a_entries, m_a_entries + left, a_entries);\n   std::copy(m_a_entries + left, m_a_entries + m_size, a_other_entries);\n \n@@ -119,17 +119,17 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   resize_policy::notify_arbitrary(m_actual_size);\n   other.notify_arbitrary(other.m_actual_size);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     const size_type size = m_size + other.m_size;\n   const size_type actual_size = resize_policy::get_new_size_for_arbitrary(size);\n@@ -173,7 +173,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   other.notify_arbitrary(resize_policy::min_size);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n "}, {"sha": "8fdc97d4f74b7c2cabfc28566076c24adc33e612", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,9 +50,7 @@\n  * Modified from CLRS.\n  */\n \n-#ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n+#include <debug/debug.h>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp>\n@@ -62,30 +60,14 @@ namespace pb_ds\n   namespace detail\n   {\n \n-#ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    binomial_heap_<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    binomial_heap_<Value_Type, Cmp_Fn, Allocator>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    binomial_heap_base_<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_BASE_C_DEC \\\n+    binomial_heap_base_<Value_Type, Cmp_Fn, Allocator>\n \n     /**\n      * class description = \"8y|\\|0|\\/|i41 h34p 74813\">\n@@ -140,12 +122,10 @@ namespace pb_ds\n       ~binomial_heap_();\n \n     protected:\n-#ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n+#endif \n     };\n \n #include <ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp>\n@@ -156,10 +136,5 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n \n #undef PB_DS_BASE_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "2e63cf8e923ace5d7de4a94de2bc4471ee3c082c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,28 +47,21 @@\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_()\n-{\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n-{\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other)\n-{\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-~binomial_heap_()\n-{ }\n+~binomial_heap_() { }\n "}, {"sha": "540bd7cd84672f47cc4f803977eebc316fc6f4d4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,14 +44,12 @@\n  * Contains an implementation for binomial_heap_.\n  */\n \n-#ifdef PB_DS_BINOMIAL_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n-{\n-  base_type::assert_valid(true);\n-}\n+{ base_type::assert_valid(true); }\n \n-#endif // #ifdef PB_DS_BINOMIAL_HEAP__DEBUG_\n+#endif "}, {"sha": "09af8cfffd7167eba38ba94475b969734fdb633d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp", "status": "modified", "additions": 21, "deletions": 51, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -53,9 +53,7 @@\n  * Modified from CLRS.\n  */\n \n-#ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n+#include <debug/debug.h>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp>\n@@ -66,41 +64,22 @@ namespace pb_ds\n   namespace detail\n   {\n \n-#ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    binomial_heap_base_<\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::size_type, \\\n-\t\t\t\t\t\t\t\t\tAllocator, \\\n-\t\t\t\t\t\t\t\t\tfalse>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::size_type, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#define PB_DS_CLASS_C_DEC \\\n+    binomial_heap_base_<Value_Type, Cmp_Fn, Allocator>\n+\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_BASE_C_DEC \\\n+    left_child_next_sibling_heap_<Value_Type, Cmp_Fn, \\\n+\t\t\t\t  typename Allocator::size_type, \\\n+\t\t\t\t  Allocator, false>\n+#else \n+#define PB_DS_BASE_C_DEC \\\n+    left_child_next_sibling_heap_<Value_Type, Cmp_Fn,\t\\\n+\t\t\t\ttypename Allocator::size_type, Allocator>\n+#endif \n \n     /**\n      * class description = \"8y|\\|0|\\/|i41 h34p 74813\">\n@@ -212,15 +191,13 @@ namespace pb_ds\n       inline void\n       find_max();\n \n-#ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid(bool strictly_binomial) const;\n \n       void\n       assert_max() const;\n-\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n+#endif \n \n     private:\n \n@@ -236,12 +213,10 @@ namespace pb_ds\n       inline node_pointer\n       join(node_pointer p_lhs, node_pointer p_rhs) const;\n \n-#ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n-      assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial, bool increasing) const;\n-\n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n+      assert_node_consistent(const_node_pointer, bool, bool) const;\n+#endif\n \n     protected:\n       node_pointer m_p_max;\n@@ -255,16 +230,11 @@ namespace pb_ds\n #include <ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n \n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_BINOMIAL_HEAP_BASE_HPP\n+#endif "}, {"sha": "24ea2955917f2c44c0c4518f5dfb6613e1b5efcc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -53,15 +53,15 @@ copy_from_range(It first_it, It last_it)\n   while (first_it != last_it)\n     push(*(first_it++));\n \n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_() :\n   m_p_max(NULL)\n {\n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -70,7 +70,7 @@ binomial_heap_base_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn),\n   m_p_max(NULL)\n {\n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -79,21 +79,21 @@ binomial_heap_base_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other),\n   m_p_max(NULL)\n {\n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n \n     base_type::swap(other);\n \n   std::swap(m_p_max, other.m_p_max);\n \n-  PB_DS_DBG_ONLY(assert_valid(false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "200249d8d9881cc5b657800fe60e4d32ff22beab", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,17 +44,15 @@\n  * Contains an implementation class for a base of binomial heaps.\n  */\n \n-#ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid(bool strictly_binomial) const\n {\n   base_type::assert_valid();\n-\n   assert_node_consistent(base_type::m_p_root, strictly_binomial, true);\n-\n   assert_max();\n }\n \n@@ -65,44 +63,35 @@ assert_max() const\n {\n   if (m_p_max == NULL)\n     return;\n-\n-  PB_DS_DBG_ASSERT(base_type::parent(m_p_max) == NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == NULL);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n-    PB_DS_DBG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n+    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial, bool increasing) const\n {\n-  PB_DS_DBG_ASSERT(increasing || strictly_binomial);\n-\n+  _GLIBCXX_DEBUG_ASSERT(increasing || strictly_binomial);\n   base_type::assert_node_consistent(p_nd, false);\n-\n   if (p_nd == NULL)\n     return;\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_metadata == base_type::degree(p_nd));\n-\n-  PB_DS_DBG_ASSERT(base_type::size_under_node(p_nd) ==\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == base_type::degree(p_nd));\n+  _GLIBCXX_DEBUG_ASSERT(base_type::size_under_node(p_nd) ==\n \t\t   static_cast<size_type>(1 << p_nd->m_metadata));\n-\n   assert_node_consistent(p_nd->m_p_next_sibling, strictly_binomial, increasing);\n-\n   assert_node_consistent(p_nd->m_p_l_child, true, false);\n-\n   if (p_nd->m_p_next_sibling != NULL)\n     if (increasing)\n       {\n \tif (strictly_binomial)\n-\t  PB_DS_DBG_ASSERT(p_nd->m_metadata < p_nd->m_p_next_sibling->m_metadata);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata < p_nd->m_p_next_sibling->m_metadata);\n \telse\n-\t  PB_DS_DBG_ASSERT(p_nd->m_metadata <= p_nd->m_p_next_sibling->m_metadata);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata <= p_nd->m_p_next_sibling->m_metadata);\n       }\n     else\n-      PB_DS_DBG_ASSERT(p_nd->m_metadata > p_nd->m_p_next_sibling->m_metadata);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata > p_nd->m_p_next_sibling->m_metadata);\n }\n \n-#endif // #ifdef PB_DS_BINOMIAL_HEAP_BASE_DEBUG_\n+#endif "}, {"sha": "8109b53ec01b6edf6e06b7e0fbe7934536ede71a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,13 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   if (m_p_max == NULL)\n     find_max();\n \n-  PB_DS_DBG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n \n   node_pointer p_nd = m_p_max;\n \n@@ -65,16 +65,16 @@ pop()\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n remove_parentless_node(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(base_type::parent(p_nd) == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(p_nd) == NULL);\n \n   node_pointer p_cur_root = p_nd == base_type::m_p_root?\n     p_nd->m_p_next_sibling :\n@@ -119,8 +119,8 @@ void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   base_type::bubble_to_top(it.m_p_nd);\n \n@@ -130,7 +130,7 @@ erase(point_iterator it)\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -139,11 +139,11 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n     if (base_type::empty())\n       {\n-        PB_DS_DBG_ONLY(assert_valid(true);)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n \t  return 0;\n       }\n@@ -191,7 +191,7 @@ erase_if(Pred pred)\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n     return ersd;\n }"}, {"sha": "6014c0725267fd3e790989b2f365d873b3b7499f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,13 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  PB_DS_DBG_ONLY(assert_valid(false);)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   if (m_p_max == NULL)\n     const_cast<PB_DS_CLASS_C_DEC* >(this)->find_max();\n \n-  PB_DS_DBG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n   return m_p_max->m_value;\n }\n "}, {"sha": "91b04e165fdd935efe2fd32a2e33389bda654909", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,15 +49,15 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n     node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n   insert_node(p_nd);\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n     return point_iterator(p_nd);\n }\n@@ -120,7 +120,7 @@ insert_node(node_pointer p_nd)\n \n       p_nd->m_metadata = 0;\n \n-      PB_DS_DBG_ASSERT(base_type::m_p_root->m_p_l_child == 0);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root->m_p_l_child == 0);\n       base_type::m_p_root->m_p_l_child = p_nd;\n \n       base_type::m_p_root->m_metadata = 1;\n@@ -177,11 +177,11 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     node_pointer p_nd = it.m_p_nd;\n \n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd, false);)\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false);)\n \n     const bool bubble_up = Cmp_Fn::operator()(p_nd->m_value, r_new_val);\n \n@@ -204,7 +204,7 @@ modify(point_iterator it, const_reference r_new_val)\n \n       m_p_max = NULL;\n \n-      PB_DS_DBG_ONLY(assert_valid(true);)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n \n         return;\n     }\n@@ -217,6 +217,6 @@ modify(point_iterator it, const_reference r_new_val)\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n     }\n "}, {"sha": "05f9f1278bcd66d7ca03c3f240a05873a9b593c6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,15 +50,15 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ONLY(other.assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n \n     other.clear();\n \n   if (base_type::empty())\n     {\n-      PB_DS_DBG_ONLY(assert_valid(true);)\n-        PB_DS_DBG_ONLY(other.assert_valid(true);)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n \n         return;\n     }\n@@ -69,7 +69,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   while (p_out != NULL)\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_size > 0);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n \n       ++other.m_size;\n@@ -92,7 +92,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(other.assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n@@ -120,17 +120,17 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ONLY(other.assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ONLY(other.assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n \n     node_pointer p_other = other.m_p_root;\n \n@@ -153,8 +153,8 @@ join(PB_DS_CLASS_C_DEC& other)\n   other.m_size = 0;\n   other.m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid(true);)\n-    PB_DS_DBG_ONLY(other.assert_valid(true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "2659a0bb34744c89ec47a4742da8741182d2568c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 106, "deletions": 233, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,105 +52,62 @@\n #include <ext/pb_ds/detail/types_traits.hpp>\n #include <ext/pb_ds/exception.hpp>\n #include <ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp>\n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/map_debug_base.hpp>\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif \n #ifdef PB_DS_HT_MAP_TRACE_\n #include <iostream>\n-#endif // PB_DS_HT_MAP_TRACE_\n+#endif \n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_CC_HT_MAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Hash_Fn,\t\t\\\n-\t\t\t\t\t\tclass Eq_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tbool Store_Hash,\t\\\n-\t\t\t\t\t\tclass Comb_Hash_Fn,\t\\\n-\t\t\t\t\t\tclass Resize_Policy>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, class Hash_Fn, \\\n+\t     class Eq_Fn, class Allocator, bool Store_Hash, \\\n+\t     class Comb_Hash_Fn, class Resize_Policy>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    cc_ht_map_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_CLASS_NAME cc_ht_map_data_\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    cc_ht_map_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash,\t\\\n-\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\tResize_Policy >\n-\n-#define PB_DS_HASH_EQ_FN_C_DEC\t\t\t\t\t\\\n-    hash_eq_fn<\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash>\n-\n-#define PB_DS_RANGED_HASH_FN_C_DEC\t\t\t\t\t\\\n-    ranged_hash_fn<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\t\tHash_Fn,\t\\\n-\t\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\t\tComb_Hash_Fn,\t\\\n-\t\t\t\t\t\t\tStore_Hash>\n-\n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tStore_Hash>\n-\n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tKey,\t\\\n-\t\t\t\t\t\t\t\tEq_Fn,\t\\\n-\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#define PB_DS_CLASS_NAME cc_ht_map_no_data_\n+#endif \n+\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Hash_Fn, Eq_Fn, Allocator,\t\\\n+\t\t     Store_Hash, Comb_Hash_Fn, Resize_Policy>\n+\n+#define PB_DS_HASH_EQ_FN_C_DEC \\\n+    hash_eq_fn<Key, Eq_Fn, Allocator, Store_Hash>\n+\n+#define PB_DS_RANGED_HASH_FN_C_DEC \\\n+    ranged_hash_fn<Key,\tHash_Fn, Allocator, Comb_Hash_Fn, Store_Hash>\n+\n+#define PB_DS_TYPES_TRAITS_C_DEC \\\n+    types_traits<Key, Mapped, Allocator, Store_Hash>\n+\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n+    map_debug_base<Key,\tEq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n-#define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n-    typedef\t\t\t\t\t\t\t\t\\\n-    static_assert_dumclass<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tsizeof(static_assert<(bool)(E)>)> \\\n+#define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n+    typedef static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> \\\n     UNIQUE##static_assert_type\n \n     // <011i$i0|\\|-<|-|4i|\\|i|\\|g |-|4$|-| 74813.\n@@ -163,9 +120,9 @@ namespace pb_ds\n \t     class Comb_Hash_Fn,\n \t     class Resize_Policy >\n     class PB_DS_CLASS_NAME:\n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif \n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n       public PB_DS_RANGED_HASH_FN_C_DEC,\n@@ -214,10 +171,7 @@ namespace pb_ds\n       typename PB_DS_TYPES_TRAITS_C_DEC::const_reference\n       const_reference_;\n \n-#define PB_DS_GEN_POS\t\t\t\t\t\t\t\\\n-      std::pair<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tentry_pointer,\t\\\n-\t\t\t\t\t\t\ttypename Allocator::size_type>\n+#define PB_DS_GEN_POS std::pair<entry_pointer, typename Allocator::size_type>\n \n #include <ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp>\n #include <ext/pb_ds/detail/unordered_iterator/point_iterator.hpp>\n@@ -293,21 +247,21 @@ namespace pb_ds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_point_iterator_ const_point_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_iterator_ const_iterator;\n \n@@ -374,19 +328,18 @@ namespace pb_ds\n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n       {\n-\treturn (insert_imp(r_val, traits_base::m_store_extra_indicator));\n+\treturn insert_imp(r_val, traits_base::m_store_extra_indicator);\n       }\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n \treturn (subscript_imp(r_key, traits_base::m_store_extra_indicator));\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#else \n \tinsert(r_key);\n-\n-\treturn (traits_base::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn traits_base::s_null_mapped;\n+#endif \n       }\n \n       inline point_iterator\n@@ -423,19 +376,15 @@ namespace pb_ds\n       inline const_iterator\n       end() const;\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_HT_MAP_TRACE_\n+#endif \n \n     private:\n       typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n@@ -446,9 +395,9 @@ namespace pb_ds\n \n       typedef Resize_Policy resize_base;\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif \n \n       typedef\n       typename PB_DS_TYPES_TRAITS_C_DEC::store_extra_false_type\n@@ -486,10 +435,10 @@ namespace pb_ds\n       do_resize(size_type new_size);\n \n       void\n-      resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_resized, size_type old_size);\n+      resize_imp_no_exceptions(size_type, entry_pointer_array, size_type);\n \n       inline entry_pointer\n-      resize_imp_no_exceptions_reassign_pointer(entry_pointer p_e, entry_pointer_array a_p_entries_resized, store_hash_false_type);\n+      resize_imp_no_exceptions_reassign_pointer(entry_pointer, entry_pointer_array, store_hash_false_type);\n \n       inline entry_pointer\n       resize_imp_no_exceptions_reassign_pointer(entry_pointer p_e, entry_pointer_array a_p_entries_resized, store_hash_true_type);\n@@ -510,86 +459,59 @@ namespace pb_ds\n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, store_hash_false_type)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  const size_type pos = ranged_hash_fn_base::operator()(r_key);\n-\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        const size_type pos = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_a_p_entries[pos];\n-\n \tresize_base::notify_insert_search_start();\n \n-\twhile (p_e != NULL&& \n-\t       !hash_eq_fn_base::operator()(p_e->m_value.first, r_key))\n+\twhile (p_e != NULL \n+\t       && !hash_eq_fn_base::operator()(p_e->m_value.first, r_key))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n-\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_insert_search_end();\n-\n \tif (p_e != NULL)\n \t  {\n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-\t      return (p_e->m_value.second);\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t    return (p_e->m_value.second);\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-\t  return (insert_new_imp(\n-\t\t\t\t value_type(\n-\t\t\t\t\t    r_key,\n-\t\t\t\t\t    mapped_type()),\n-\t\t\t\t pos)->second);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\treturn insert_new_imp(value_type(r_key, mapped_type()), pos)->second;\n       }\n \n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, store_hash_true_type)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n-\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_a_p_entries[pos_hash_pair.first];\n-\n \tresize_base::notify_insert_search_start();\n-\n-\twhile (p_e != NULL&& \n+\twhile (p_e != NULL && \n \t       !hash_eq_fn_base::operator()(p_e->m_value.first, p_e->m_hash, r_key, pos_hash_pair.second))\n \t  {\n \t    resize_base::notify_insert_search_collision();\n-\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_insert_search_end();\n-\n \tif (p_e != NULL)\n \t  {\n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n-\n-\t      return (p_e->m_value.second);\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t    return p_e->m_value.second;\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n-\n-\t  return (insert_new_imp(\n-\t\t\t\t value_type(\n-\t\t\t\t\t    r_key,\n-\t\t\t\t\t    mapped_type()),\n-\t\t\t\t pos_hash_pair)->second);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+\treturn insert_new_imp(value_type(r_key, mapped_type()), pos_hash_pair)->second;\n       }\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n+      inline std::pair<point_iterator, bool>\n       insert_imp(const_reference r_val, store_hash_false_type);\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n+      inline std::pair<point_iterator, bool>\n       insert_imp(const_reference r_val, store_hash_true_type);\n \n       inline pointer\n@@ -599,111 +521,84 @@ namespace pb_ds\n \t  pos = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n \t// Following lines might throw an exception.\n-\tentry_pointer p_e = get_entry(            r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n-\n \tp_e->m_p_next = m_a_p_entries[pos];\n-\n \tm_a_p_entries[pos] = p_e;\n-\n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\tPB_DS_DBG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t\t  PB_DS_V2F(r_val));)\n-\n-\t  PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return (&p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn &p_e->m_value;\n       }\n \n       inline pointer\n       insert_new_imp(const_reference r_val, comp_hash& r_pos_hash_pair)\n       {\n \t// Following lines might throw an exception.\n-\n \tif (do_resize_if_needed())\n-\t  r_pos_hash_pair = ranged_hash_fn_base::operator()(\n-\t\t\t\t\t\t\t    PB_DS_V2F(r_val));\n+\t  r_pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(r_val));\n \n-\tentry_pointer p_e = get_entry(            r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\tentry_pointer p_e = get_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n \n \t// At this point no exceptions can be thrown.\n-\n \tp_e->m_hash = r_pos_hash_pair.second;\n-\n \tp_e->m_p_next = m_a_p_entries[r_pos_hash_pair.first];\n-\n \tm_a_p_entries[r_pos_hash_pair.first] = p_e;\n-\n \tresize_base::notify_inserted(++m_num_used_e);\n-\n-\tPB_DS_DBG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t\t  PB_DS_V2F(r_val));)\n-\n-\t  PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return (&p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn &p_e->m_value;\n       }\n \n       inline pointer\n       find_key_pointer(const_key_reference r_key, store_hash_false_type)\n       {\n-\tentry_pointer p_e =\n-\t  m_a_p_entries[ranged_hash_fn_base::operator()(r_key)];\n-\n+\tentry_pointer p_e = m_a_p_entries[ranged_hash_fn_base::operator()(r_key)];\n \tresize_base::notify_find_search_start();\n-\n-\twhile (p_e != NULL&& \n+\twhile (p_e != NULL && \n \t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n \t  {\n \t    resize_base::notify_find_search_collision();\n-\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_find_search_end();\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \tif (p_e == NULL)\n \t  map_debug_base::check_key_does_not_exist(r_key);\n \telse\n \t  map_debug_base::check_key_exists(r_key);\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG_\n-\n-\treturn (&p_e->m_value);\n+#endif \n+\treturn &p_e->m_value;\n       }\n \n       inline pointer\n       find_key_pointer(const_key_reference r_key, store_hash_true_type)\n       {\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n-\n \tentry_pointer p_e = m_a_p_entries[pos_hash_pair.first];\n-\n \tresize_base::notify_find_search_start();\n-\n-\twhile (p_e != NULL&& \n-\t       !hash_eq_fn_base::operator()(\n-\t\t\t\t\t    PB_DS_V2F(p_e->m_value),\n+\twhile (p_e != NULL && \n+\t       !hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value),\n \t\t\t\t\t    p_e->m_hash,\n \t\t\t\t\t    r_key, pos_hash_pair.second))\n \t  {\n \t    resize_base::notify_find_search_collision();\n-\n \t    p_e = p_e->m_p_next;\n \t  }\n \n \tresize_base::notify_find_search_end();\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \tif (p_e == NULL)\n \t  map_debug_base::check_key_does_not_exist(r_key);\n \telse\n \t  map_debug_base::check_key_exists(r_key);\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG_\n-\n-\treturn (&p_e->m_value);\n+#endif \n+\treturn &p_e->m_value;\n       }\n \n       inline bool\n@@ -721,70 +616,61 @@ namespace pb_ds\n       {\n \tinc_it_state((const_mapped_pointer& )r_p_value, r_pos);\n       }\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       void\n-      inc_it_state(const_pointer& r_p_value, std::pair<entry_pointer, size_type>& r_pos) const\n+      inc_it_state(const_pointer& r_p_value, \n+\t\t   std::pair<entry_pointer, size_type>& r_pos) const\n       {\n-\tPB_DS_DBG_ASSERT(r_p_value != NULL);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(r_p_value != NULL);\n \tr_pos.first = r_pos.first->m_p_next;\n-\n \tif (r_pos.first != NULL)\n \t  {\n \t    r_p_value =& r_pos.first->m_value;\n-\n \t    return;\n \t  }\n \n \tfor (++r_pos.second; r_pos.second < m_num_e_p; ++r_pos.second)\n \t  if (m_a_p_entries[r_pos.second] != NULL)\n \t    {\n \t      r_pos.first = m_a_p_entries[r_pos.second];\n-\n \t      r_p_value =& r_pos.first->m_value;\n-\n \t      return;\n \t    }\n-\n \tr_p_value = NULL;\n       }\n \n       void\n-      get_start_it_state(pointer& r_p_value, std::pair<entry_pointer, size_type>& r_pos) const\n+      get_start_it_state(pointer& r_p_value, \n+\t\t\t std::pair<entry_pointer, size_type>& r_pos) const\n       {\n \tfor (r_pos.second = 0; r_pos.second < m_num_e_p; ++r_pos.second)\n \t  if (m_a_p_entries[r_pos.second] != NULL)\n \t    {\n \t      r_pos.first = m_a_p_entries[r_pos.second];\n-\n \t      r_p_value =& r_pos.first->m_value;\n-\n \t      return;\n \t    }\n-\n \tr_p_value = NULL;\n       }\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n-      assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const;\n+      assert_entry_pointer_array_valid(const entry_pointer_array) const;\n \n       void\n-      assert_entry_pointer_valid(const entry_pointer p_e, store_hash_true_type) const;\n+      assert_entry_pointer_valid(const entry_pointer, \n+\t\t\t\t store_hash_true_type) const;\n \n       void\n-      assert_entry_pointer_valid(const entry_pointer p_e, store_hash_false_type) const;\n-\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+      assert_entry_pointer_valid(const entry_pointer, \n+\t\t\t\t store_hash_false_type) const;\n+#endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n-\n       void\n       trace_list(const_entry_pointer p_l) const;\n-\n-#endif // #ifdef PB_DS_HT_MAP_TRACE_\n+#endif \n \n     private:\n       static entry_allocator s_entry_allocator;\n@@ -801,7 +687,7 @@ namespace pb_ds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       friend class const_iterator_;\n \n@@ -815,11 +701,8 @@ namespace pb_ds\n \n       enum\n \t{\n-\t  store_hash_ok =\n-\t  !Store_Hash ||\n-\t  !is_same<\n-\t  Hash_Fn,\n-\t  pb_ds::null_hash_fn>::value\n+\t  store_hash_ok = !Store_Hash \n+\t                  || !is_same<Hash_Fn, pb_ds::null_hash_fn>::value\n \t};\n \n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n@@ -838,26 +721,16 @@ namespace pb_ds\n #include <ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp>\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_HASH_EQ_FN_C_DEC\n-\n #undef PB_DS_RANGED_HASH_FN_C_DEC\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n-\n #undef PB_DS_CLASS_NAME\n \n #undef PB_DS_V2F\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "94c1fc669a839965e8e73f2b75aedcb4770b098e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cmp_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcmp_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -78,7 +78,7 @@ cmp_with_other(const Other_Map_Type& other) const\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       if (p_mapped_value->second != it->second)\n \treturn (false);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif\n     }\n \n   return (true);"}, {"sha": "9d6ee01efff0de8355a5496d662bc2771e4338d8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 33, "deletions": 66, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -67,151 +67,122 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME() :\n   ranged_hash_fn_base(resize_base::get_nearest_larger_size(1)),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn) :\n-  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t      r_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n+  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n-  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n-\t\t      r_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n+  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   std::fill(m_a_p_entries, m_a_p_entries + m_num_e_p, (entry_pointer)NULL);\n-\n   Resize_Policy::notify_cleared();\n-\n   ranged_hash_fn_base::notify_resized(m_num_e_p);\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n-  ranged_hash_fn_base(\n-\t\t      resize_base::get_nearest_larger_size(1),\n+  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t      r_hash_fn,\n \t\t      r_comb_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash_Fn& r_comb_hash_fn, const Resize_Policy& r_resize_policy) :\n   PB_DS_HASH_EQ_FN_C_DEC(r_eq_fn),\n   Resize_Policy(r_resize_policy),\n-  ranged_hash_fn_base(\n-\t\t      resize_base::get_nearest_larger_size(1),\n+  ranged_hash_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t      r_hash_fn,\n \t\t      r_comb_hash_fn),\n-  m_a_p_entries(s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  m_a_p_entries(s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_CC_HT_MAP_DEBUG_\n-  PB_DS_MAP_DEBUG_BASE_C_DEC(other),\n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n+  map_debug_base(other),\n+#endif \n   PB_DS_HASH_EQ_FN_C_DEC(other),\n   resize_base(other),\n   ranged_hash_fn_base(other),\n-  m_a_p_entries(m_a_p_entries = s_entry_pointer_allocator.allocate(\n-\t\t\t\t\t\t\t\t   resize_base::get_nearest_larger_size(1))),\n+  m_a_p_entries(m_a_p_entries = s_entry_pointer_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e_p(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n     try\n       {\n         copy_from_range(other.begin(), other.end());\n       }\n     catch(...)\n       {\n         deallocate_all();\n-\n         throw;\n       }\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n ~PB_DS_CLASS_NAME()\n-{\n-  deallocate_all();\n-}\n+{ deallocate_all(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n \n   std::swap(m_a_p_entries, other.m_a_p_entries);\n-\n   std::swap(m_num_e_p, other.m_num_e_p);\n-\n   std::swap(m_num_used_e, other.m_num_used_e);\n-\n   ranged_hash_fn_base::swap(other);\n-\n   hash_eq_fn_base::swap(other);\n-\n   resize_base::swap(other);\n \n-  PB_DS_DBG_ONLY(map_debug_base::swap(other));\n-\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other));\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -220,7 +191,6 @@ PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   clear();\n-\n   s_entry_pointer_allocator.deallocate(m_a_p_entries, m_num_e_p);\n }\n \n@@ -229,11 +199,8 @@ void\n PB_DS_CLASS_C_DEC::\n initialize()\n {\n-  std::fill(m_a_p_entries, m_a_p_entries + m_num_e_p, (entry_pointer)NULL);\n-\n+  std::fill(m_a_p_entries, m_a_p_entries + m_num_e_p, entry_pointer(NULL));\n   Resize_Policy::notify_resized(m_num_e_p);\n-\n   Resize_Policy::notify_cleared();\n-\n   ranged_hash_fn_base::notify_resized(m_num_e_p);\n }"}, {"sha": "3bf820f94e6e98ba04123c09ef814b5f8bc1efec", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -56,8 +56,6 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral\n   // At this point no exceptions can be thrown.\n \n   p_e->m_p_next = m_a_p_entries[pos];\n-\n   m_a_p_entries[pos] = p_e;\n-\n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(r_key);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n+}"}, {"sha": "8dbbe5cbf9929cdbde36d71c18853df883c73bbc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,15 +51,13 @@ PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_reference r_val, size_type pos, true_type)\n {\n   // Following lines might throw an exception.\n-  entry_pointer p_e = get_entry(r_val, traits_base::s_no_throw_copies_indicator);\n+  entry_pointer p_e = get_entry(r_val, \n+\t\t\t\ttraits_base::s_no_throw_copies_indicator);\n \n   // At this point no exceptions can be thrown.\n-\n   p_e->m_p_next = m_a_p_entries[pos];\n-\n   p_e->m_hash = ranged_hash_fn_base::operator()((const_key_reference)(PB_DS_V2F(p_e->m_value))).second;\n \n   m_a_p_entries[pos] = p_e;\n-\n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(r_key);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(r_key);)\n+}"}, {"sha": "9de8696c422b5201743cab730c2b83daf002c2ac", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,15 +44,14 @@\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   map_debug_base::check_size(m_num_used_e);\n-\n   assert_entry_pointer_array_valid(m_a_p_entries);\n }\n \n@@ -62,25 +61,20 @@ PB_DS_CLASS_C_DEC::\n assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n {\n   size_type iterated_num_used_e = 0;\n-\n   for (size_type pos = 0; pos < m_num_e_p; ++pos)\n     {\n       entry_pointer p_e = a_p_entries[pos];\n-\n       while (p_e != NULL)\n         {\n \t  ++iterated_num_used_e;\n-\n-\t  assert_entry_pointer_valid(p_e,  traits_base::m_store_hash_indicator);\n-\n+\t  assert_entry_pointer_valid(p_e, traits_base::m_store_hash_indicator);\n \t  p_e = p_e->m_p_next;\n         }\n     }\n-\n-  PB_DS_DBG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n }\n \n #include <ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp>\n #include <ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp>\n \n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif "}, {"sha": "42503edd18fb8fa44765bf04ad57de02096b3ef7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,14 +44,13 @@\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_valid(const entry_pointer    p_e, store_hash_false_type) const\n-{\n-  map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n-}\n+assert_entry_pointer_valid(const entry_pointer p_e, \n+\t\t\t   store_hash_false_type) const\n+{ map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value)); }\n \n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif "}, {"sha": "cfa2af6434b3e61b7db09e5f1a40acf8bd8ca1df", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,19 +44,17 @@\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_entry_pointer_valid(const entry_pointer    p_e, store_hash_true_type) const\n {\n   map_debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n+  comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n \n-  comp_hash pos_hash_pair =\n-    ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n-\n-  PB_DS_DBG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n+  _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n }\n \n-#endif // #ifdef PB_DS_CC_HT_MAP_DEBUG__\n+#endif "}, {"sha": "be92f2f9c8d8e6f00ab6a938b73a163407737be1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase_entry_pointer(entry_pointer& r_p_e)\n {\n-  PB_DS_DBG_ONLY(map_debug_base::erase_existing(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n \t\t\t\t\t\tPB_DS_V2F(r_p_e->m_value)));\n \n   entry_pointer p_e = r_p_e;\n@@ -58,7 +58,7 @@ erase_entry_pointer(entry_pointer& r_p_e)\n \n   rels_entry(p_e);\n \n-  PB_DS_DBG_ASSERT(m_num_used_e > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_num_used_e > 0);\n   resize_base::notify_erased(--m_num_used_e);\n }\n "}, {"sha": "3d3dd9d1f81b559aba6ab4997f3e122e91b50ac1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (erase_in_pos_imp(r_key,\n \t\t\t     ranged_hash_fn_base::operator()(r_key)));\n@@ -61,7 +61,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, size_type pos)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     entry_pointer p_e = m_a_p_entries[pos];\n \n@@ -71,10 +71,10 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n     {\n       resize_base::notify_erase_search_end();\n \n-      PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t      r_key);)\n \n-        PB_DS_DBG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return (false);\n     }\n@@ -85,14 +85,14 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n     {\n       resize_base::notify_erase_search_end();\n \n-      PB_DS_DBG_ONLY(map_debug_base::\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t     check_key_exists(r_key);)\n \n         erase_entry_pointer(m_a_p_entries[pos]);\n \n       do_resize_if_needed_no_throw();\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return (true);\n     }\n@@ -105,10 +105,10 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n         {\n \t  resize_base::notify_erase_search_end();\n \n-\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t check_key_does_not_exist(r_key);)\n \n-            PB_DS_DBG_ONLY(assert_valid();)\n+            _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n             return (false);\n         }\n@@ -119,14 +119,14 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n         {\n \t  resize_base::notify_erase_search_end();\n \n-\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t check_key_exists(r_key);)\n \n             erase_entry_pointer(p_e->m_p_next);\n \n \t  do_resize_if_needed_no_throw();\n \n-\t  PB_DS_DBG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n             return (true);\n         }"}, {"sha": "490c365c9fd9659bc872c1e8b991e9258ba53140", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     entry_pointer p_e = m_a_p_entries[r_pos_hash_pair.first];\n \n@@ -60,11 +60,11 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n     {\n       resize_base::notify_erase_search_end();\n \n-      PB_DS_DBG_ONLY(map_debug_base::\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t     check_key_does_not_exist(\n \t\t\t\t\t      r_key);)\n \n-        PB_DS_DBG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return (false);\n     }\n@@ -77,14 +77,14 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n     {\n       resize_base::notify_erase_search_end();\n \n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n \t\t\t\t\t\t      r_key);)\n \n         erase_entry_pointer(m_a_p_entries[r_pos_hash_pair.first]);\n \n       do_resize_if_needed_no_throw();\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return (true);\n     }\n@@ -97,10 +97,10 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n         {\n \t  resize_base::notify_erase_search_end();\n \n-\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t check_key_does_not_exist(r_key);)\n \n-            PB_DS_DBG_ONLY(assert_valid();)\n+            _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n             return (false);\n         }\n@@ -113,15 +113,15 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n         {\n \t  resize_base::notify_erase_search_end();\n \n-\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t check_key_exists(\n \t\t\t\t\t  r_key);)\n \n             erase_entry_pointer(p_e->m_p_next);\n \n \t  do_resize_if_needed_no_throw();\n \n-\t  PB_DS_DBG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n             return (true);\n         }"}, {"sha": "942879f4e2033ebf09827e800cb08bb9ad21739c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (find_key_pointer(r_key, traits_base::m_store_extra_indicator));\n }\n@@ -59,7 +59,7 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (const_cast<PB_DS_CLASS_C_DEC& >(*this).find_key_pointer(        r_key, traits_base::m_store_extra_indicator));\n }"}, {"sha": "64ce3928f6a5cdc33e147454f4e9b07e247544f8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,7 +52,7 @@ inline std::pair<\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_false_type)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     const_key_reference r_key = PB_DS_V2F(r_val);\n \n@@ -74,13 +74,13 @@ insert_imp(const_reference r_val, store_hash_false_type)\n \n   if (p_e != NULL)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n         return (\n \t\tstd::make_pair(               & p_e->m_value,  false));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n     return (std::make_pair(\n \t\t\t   insert_new_imp(r_val, pos),"}, {"sha": "b3841391d898735f0366fb8b4a11edce55b135cb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,7 +52,7 @@ inline std::pair<\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, store_hash_true_type)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     const_key_reference r_key = PB_DS_V2F(r_val);\n \n@@ -77,12 +77,12 @@ insert_imp(const_reference r_val, store_hash_true_type)\n \n   if (p_e != NULL)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n         return (std::make_pair(           & p_e->m_value, false));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n     return (std::make_pair(\n \t\t\t   insert_new_imp(r_val, pos_hash_pair),"}, {"sha": "b508d4da1385912beabf91b2d62131c22ae5cb7a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -81,15 +81,15 @@ do_resize_if_needed_no_throw()\n   catch(...)\n     { }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n resize_imp(size_type new_size)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     if (new_size == m_num_e_p)\n       return;\n@@ -123,7 +123,7 @@ resize_imp(size_type new_size)\n \n   Resize_Policy::notify_resized(new_size);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -143,13 +143,13 @@ resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_res\n \n   m_num_e_p = new_size;\n \n-  PB_DS_DBG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized);)\n+  _GLIBCXX_DEBUG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized);)\n \n     s_entry_pointer_allocator.deallocate(m_a_p_entries, old_size);\n \n   m_a_p_entries = a_p_entries_resized;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n #include <ext/pb_ds/detail/cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp>"}, {"sha": "8218ea47ab5cf502b288bf78964b12c00ff13d5c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/eq_fn/hash_eq_fn.hpp", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Feq_fn%2Fhash_eq_fn.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,34 +49,20 @@\n #define PB_DS_HASH_EQ_FN_HPP\n \n #include <utility>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#ifdef PB_DS_HASH_EQ_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_HASH_EQ_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_HASH_EQ_FN_DEBUG\n-\n     template<typename Key, class Eq_Fn, class Allocator, bool Store_Hash>\n     struct hash_eq_fn;\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Key, class Eq_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    hash_eq_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\tfalse>\n+#define PB_DS_CLASS_C_DEC \\\n+    hash_eq_fn<Key, Eq_Fn, Allocator, false>\n \n     /**\n      * Specialization 1- The client requests that hash values not be stored.\n@@ -110,9 +96,7 @@ namespace pb_ds\n     inline void\n     PB_DS_CLASS_C_DEC::\n     swap(const PB_DS_CLASS_C_DEC& other)\n-    {\n-      std::swap((Eq_Fn& )(*this), (Eq_Fn& )other);\n-    }\n+    { std::swap((Eq_Fn& )(*this), (Eq_Fn& )other); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n@@ -124,22 +108,16 @@ namespace pb_ds\n     inline bool\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference r_lhs_key, const_key_reference r_rhs_key) const\n-    {\n-      return (eq_fn_base::operator()(r_lhs_key, r_rhs_key));\n-    }\n+    { return (eq_fn_base::operator()(r_lhs_key, r_rhs_key)); }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Key, class Eq_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    hash_eq_fn<\t\t\t\t\t\t\\\n-\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\ttrue>\n+#define PB_DS_CLASS_C_DEC \\\n+    hash_eq_fn<Key, Eq_Fn, Allocator, true>\n \n     /**\n      * Specialization 2- The client requests that hash values be stored.\n@@ -161,7 +139,8 @@ namespace pb_ds\n       hash_eq_fn(const Eq_Fn& r_eq_fn);\n \n       inline bool\n-      operator()(const_key_reference r_lhs_key, size_type lhs_hash, const_key_reference r_rhs_key, size_type rhs_hash) const;\n+      operator()(const_key_reference r_lhs_key, size_type lhs_hash, \n+\t\t const_key_reference r_rhs_key, size_type rhs_hash) const;\n \n       inline void\n       swap(const PB_DS_CLASS_C_DEC& other);\n@@ -181,31 +160,26 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     inline bool\n     PB_DS_CLASS_C_DEC::\n-    operator()(const_key_reference r_lhs_key, size_type lhs_hash, const_key_reference r_rhs_key, size_type rhs_hash) const\n+    operator()(const_key_reference r_lhs_key, size_type lhs_hash, \n+\t       const_key_reference r_rhs_key, size_type rhs_hash) const\n     {\n-      PB_DS_DBG_ASSERT(!eq_fn_base::operator()(r_lhs_key, r_rhs_key) ||\n-\t\t       lhs_hash == rhs_hash);\n+      _GLIBCXX_DEBUG_ASSERT(!eq_fn_base::operator()(r_lhs_key, r_rhs_key) \n+\t\t            || lhs_hash == rhs_hash);\n \n-      return (lhs_hash == rhs_hash&& \n+      return (lhs_hash == rhs_hash && \n \t      eq_fn_base::operator()(r_lhs_key, r_rhs_key));\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     swap(const PB_DS_CLASS_C_DEC& other)\n-    {\n-      std::swap((Eq_Fn& )(*this), (Eq_Fn& )(other));\n-    }\n+    { std::swap((Eq_Fn& )(*this), (Eq_Fn& )(other)); }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_HASH_EQ_FN_HPP\n+#endif "}, {"sha": "817bcd0ca70c39b50beb5f9d52986315e0ff2027", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 27, "deletions": 55, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -63,76 +63,66 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME() :\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1)),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)    :\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1), r_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_hash_fn) :\n   hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t       r_hash_fn, r_comb_hash_fn),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Probe_Fn& r_comb_hash_fn, const Probe_Fn& r_probe_fn) :\n   hash_eq_fn_base(r_eq_fn),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t       r_hash_fn, r_comb_hash_fn, r_probe_fn),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -141,22 +131,20 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Prob\n   resize_base(r_resize_policy),\n   ranged_probe_fn_base(resize_base::get_nearest_larger_size(1),\n \t\t       r_hash_fn, r_comb_hash_fn, r_probe_fn),\n-  m_a_entries(s_entry_allocator.allocate(\n-\t\t\t\t\t resize_base::get_nearest_larger_size(1))),\n+  m_a_entries(s_entry_allocator.allocate(resize_base::get_nearest_larger_size(1))),\n   m_num_e(resize_base::get_nearest_larger_size(1)),\n   m_num_used_e(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n-  PB_DS_MAP_DEBUG_BASE_C_DEC(other),\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n+  map_debug_base(other),\n+#endif \n   hash_eq_fn_base(other),\n   resize_base(other),\n   ranged_probe_fn_base(other),\n@@ -172,19 +160,17 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n       for (size_type i = 0; i < m_num_e; ++i)\n         {\n \t  m_a_entries[i].m_stat = other.m_a_entries[i].m_stat;\n-\n \t  if (m_a_entries[i].m_stat == valid_entry_status)\n \t    new (m_a_entries + i) entry(other.m_a_entries[i]);\n         }\n     }\n   catch(...)\n     {\n       deallocate_all();\n-\n       throw;\n     }\n \n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -199,25 +185,17 @@ void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n   std::swap(m_a_entries, other.m_a_entries);\n-\n   std::swap(m_num_e, other.m_num_e);\n-\n   std::swap(m_num_used_e, other.m_num_used_e);\n-\n   ranged_probe_fn_base::swap(other);\n-\n   hash_eq_fn_base::swap(other);\n-\n   resize_base::swap(other);\n-\n-  PB_DS_DBG_ONLY(map_debug_base::swap(other));\n-\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other));\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -226,9 +204,7 @@ PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   clear();\n-\n   erase_all_valid_entries(m_a_entries, m_num_e);\n-\n   s_entry_allocator.deallocate(m_a_entries, m_num_e);\n }\n \n@@ -240,7 +216,6 @@ erase_all_valid_entries(entry_array a_entries_resized, size_type size)\n   for (size_type pos = 0; pos < size; ++pos)\n     {\n       entry_pointer p_e =& a_entries_resized[pos];\n-\n       if (p_e->m_stat == valid_entry_status)\n \tp_e->m_value.~value_type();\n     }\n@@ -252,11 +227,8 @@ PB_DS_CLASS_C_DEC::\n initialize()\n {\n   Resize_Policy::notify_resized(m_num_e);\n-\n   Resize_Policy::notify_cleared();\n-\n   ranged_probe_fn_base::notify_resized(m_num_e);\n-\n   for (size_type i = 0; i < m_num_e; ++i)\n     m_a_entries[i].m_stat = (entry_status)empty_entry_status;\n }"}, {"sha": "c7a3d403ff49a8d1a02a7fd15f0e8292a0716822", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,14 +50,14 @@ inline void\n PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, integral_constant<int,false>)\n {\n-  PB_DS_DBG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+  _GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n \n   entry* const p_e = m_a_entries + pos;\n \n   new (&p_e->m_value) mapped_value_type(r_val);\n \n   p_e->m_stat = valid_entry_status;\n \n-  PB_DS_DBG_ONLY(map_debug_base::\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t insert_new(p_e->m_value.first);)\n     }"}, {"sha": "74e5429b42074c6ed56fe7d7eed8ca781a1f39e2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, true_type)\n {\n-  PB_DS_DBG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+  _GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n \n   entry* const p_e = m_a_entries + pos;\n \n@@ -61,6 +61,6 @@ constructor_insert_new_imp(const_mapped_reference r_val, size_type pos, true_typ\n \n   p_e->m_stat = valid_entry_status;\n \n-  PB_DS_DBG_ONLY(map_debug_base::\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t insert_new(p_e->m_value.first);)\n     }"}, {"sha": "1efdd183b80dd3c0c9e6c03ca46d2a805ca94941", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,19 +44,18 @@\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   map_debug_base::check_size(m_num_used_e);\n-\n   assert_entry_array_valid(m_a_entries, traits_base::m_store_extra_indicator);\n }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp>\n #include <ext/pb_ds/detail/gp_hash_table_map_/debug_store_hash_fn_imps.hpp>\n \n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif "}, {"sha": "5669f60282b732d5a73bf08d1bb717ce857f5238", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n@@ -74,11 +74,11 @@ assert_entry_array_valid(const entry_array a_entries, store_hash_false_type) con\n \t    break;\n \t  }\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n \n-  PB_DS_DBG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n }\n \n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif "}, {"sha": "eef17cdd931eedf020a368350b40412772677410", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains implementations of gp_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n@@ -56,34 +56,28 @@ assert_entry_array_valid(const entry_array a_entries, store_hash_true_type) cons\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n       const_entry_pointer p_e =& a_entries[pos];\n-\n       switch(p_e->m_stat)\n         {\n         case empty_entry_status:\n         case erased_entry_status:\n \t  break;\n         case valid_entry_status:\n \t  {\n-\t    const_key_reference r_key =\n-\t      PB_DS_V2F(p_e->m_value);\n-\n+\t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n \t    map_debug_base::check_key_exists(r_key);\n \n-\t    const comp_hash pos_hash_pair =\n-\t      ranged_probe_fn_base::operator()(r_key);\n-\n-\t    PB_DS_DBG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n+\t    const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n \n+\t    _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n \t    ++iterated_num_used_e;\n-\n \t    break;\n \t  }\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n \n-  PB_DS_DBG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n }\n \n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif "}, {"sha": "df4f673bb5f7bb2560e974b6936517723e3e3d1c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,9 +49,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase_entry(entry_pointer p_e)\n {\n-  PB_DS_DBG_ASSERT(p_e->m_stat = valid_entry_status);\n+  _GLIBCXX_DEBUG_ASSERT(p_e->m_stat = valid_entry_status);\n \n-  PB_DS_DBG_ONLY(map_debug_base::erase_existing(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n \t\t\t\t\t\tPB_DS_V2F(p_e->m_value));)\n \n     typedef\n@@ -62,7 +62,7 @@ erase_entry(entry_pointer p_e)\n \n   p_e->m_stat = erased_entry_status;\n \n-  PB_DS_DBG_ASSERT(m_num_used_e > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_num_used_e > 0);\n   resize_base::notify_erased(--m_num_used_e);\n }\n \n@@ -90,7 +90,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     size_type num_ersd = 0;\n \n@@ -109,7 +109,7 @@ erase_if(Pred pred)\n \n   do_resize_if_needed_no_throw();\n \n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     return (num_ersd);\n }"}, {"sha": "0f6949a912d97091f208756e313e5849a91d9d53", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_imp(const_key_reference r_key,  false_type)\n {\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     size_type hash = ranged_probe_fn_base::operator()(r_key);\n \n@@ -71,7 +71,7 @@ erase_imp(const_key_reference r_key,  false_type)\n \t  {\n \t    resize_base::notify_erase_search_end();\n \n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n \n \t    return (false);\n@@ -94,7 +94,7 @@ erase_imp(const_key_reference r_key,  false_type)\n         case erased_entry_status:\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n \n       resize_base::notify_erase_search_collision();"}, {"sha": "d4eda6bda58b0135d033e7638d6887424ff8148e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -69,7 +69,7 @@ erase_imp(const_key_reference r_key,  true_type)\n \t  {\n \t    resize_base::notify_erase_search_end();\n \n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t\t    r_key));\n \n \t    return (false);\n@@ -94,7 +94,7 @@ erase_imp(const_key_reference r_key,  true_type)\n         case erased_entry_status:\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n \n       resize_base::notify_erase_search_collision();"}, {"sha": "2f89522744ed83cacd5cc5f96b5ee95b0484ed6d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return ((find_key_pointer(r_key, traits_base::m_store_extra_indicator)));\n }\n@@ -59,7 +59,7 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (const_cast<PB_DS_CLASS_C_DEC& >(*this).\n \t    find_key_pointer(r_key, traits_base::m_store_extra_indicator));"}, {"sha": "0497fbc8619a9cacd4182c640e2c89c6f26afd45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 48, "deletions": 71, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,26 +52,17 @@\n #include <utility>\n #ifdef PB_DS_HT_MAP_TRACE_\n #include <iostream>\n-#endif // PB_DS_HT_MAP_TRACE_\n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif \n+#ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/map_debug_base.hpp>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Key,\t\t\\\n@@ -85,14 +76,12 @@ namespace pb_ds\n \t\t\t\t\t\tclass Resize_Policy>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    gp_ht_map_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_CLASS_NAME gp_ht_map_data_\n+#endif\n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    gp_ht_map_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#define PB_DS_CLASS_NAME gp_ht_map_no_data_\n+#endif \n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n     PB_DS_CLASS_NAME<\t\t\t\t\t\t\\\n@@ -129,24 +118,20 @@ namespace pb_ds\n \t\t\t\t\t\tAllocator,\t\\\n \t\t\t\t\t\tStore_Hash>\n \n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n #define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\tEq_Fn, \\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+    map_debug_base<Key, Eq_Fn, typename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped()\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n     typedef\t\t\t\t\t\t\t\t\\\n@@ -164,9 +149,9 @@ namespace pb_ds\n \t     class Probe_Fn,\n \t     class Resize_Policy>\n     class PB_DS_CLASS_NAME :\n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif \n       public PB_DS_HASH_EQ_FN_C_DEC,\n       public Resize_Policy,\n       public PB_DS_RANGED_PROBE_FN_C_DEC,\n@@ -362,7 +347,7 @@ namespace pb_ds\n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n       {\n-\tPB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n \t  return (insert_imp(r_val, traits_base::m_store_extra_indicator));\n       }\n@@ -413,19 +398,15 @@ namespace pb_ds\n       inline const_iterator\n       end() const;\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_HT_MAP_TRACE_\n+#endif \n \n     private:\n       typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n@@ -462,9 +443,9 @@ namespace pb_ds\n \n       typedef PB_DS_RANGED_PROBE_FN_C_DEC ranged_probe_fn_base;\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+#endif \n \n       typedef PB_DS_HASH_EQ_FN_C_DEC hash_eq_fn_base;\n \n@@ -525,13 +506,13 @@ namespace pb_ds\n       inline pointer\n       insert_new_imp(const_reference r_val, size_type pos)\n       {\n-\tPB_DS_DBG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n \n \tif (do_resize_if_needed())\n \t  pos = find_ins_pos(PB_DS_V2F(r_val),\n \t\t\t     traits_base::m_store_extra_indicator);\n \n-\tPB_DS_DBG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n+\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[pos].m_stat != valid_entry_status);\n \n \tentry* const p_e = m_a_entries + pos;\n \n@@ -541,26 +522,26 @@ namespace pb_ds\n \n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\tPB_DS_DBG_ONLY(map_debug_base::\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t       insert_new(PB_DS_V2F(p_e->m_value));)\n \n-\t  PB_DS_DBG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  return (&p_e->m_value);\n       }\n \n       inline pointer\n       insert_new_imp(const_reference r_val, comp_hash& r_pos_hash_pair)\n       {\n-\tPB_DS_DBG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n+\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n \t\t\t valid_entry_status);\n \n \tif (do_resize_if_needed())\n \t  r_pos_hash_pair = find_ins_pos(\n \t\t\t\t\t PB_DS_V2F(r_val),\n \t\t\t\t\t traits_base::m_store_extra_indicator);\n \n-\tPB_DS_DBG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n+\t_GLIBCXX_DEBUG_ASSERT(m_a_entries[r_pos_hash_pair.first].m_stat !=\n \t\t\t valid_entry_status);\n \n \tentry* const p_e = m_a_entries + r_pos_hash_pair.first;\n@@ -573,10 +554,10 @@ namespace pb_ds\n \n \tresize_base::notify_inserted(++m_num_used_e);\n \n-\tPB_DS_DBG_ONLY(map_debug_base::insert_new(\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t\t  PB_DS_V2F(p_e->m_value));)\n \n-\t  PB_DS_DBG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  return (&p_e->m_value);\n       }\n@@ -585,7 +566,7 @@ namespace pb_ds\n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, store_hash_false_type)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  const size_type pos =\n \t  find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n@@ -599,15 +580,15 @@ namespace pb_ds\n \t\t\t\t\t    mapped_type()),\n \t\t\t\t pos)->second);\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n \t  return (p_e->m_value.second);\n       }\n \n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, store_hash_true_type)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  comp_hash pos_hash_pair =\n \t  find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n@@ -619,7 +600,7 @@ namespace pb_ds\n \t\t\t\t\t    mapped_type()),\n \t\t\t\t pos_hash_pair)->second);\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \n \treturn ((m_a_entries + pos_hash_pair.first)->m_value.second);\n       }\n@@ -649,7 +630,7 @@ namespace pb_ds\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n \n-\t\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t\t check_key_does_not_exist(r_key);)\n \n \t\t    return (NULL);\n@@ -662,21 +643,21 @@ namespace pb_ds\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n \n-\t\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n \t\t      return ((pointer)&p_e->m_value);\n \t\t  }\n \t\tbreak;\n \t      case erased_entry_status:\n \t\tbreak;\n \t      default:\n-\t\tPB_DS_DBG_ASSERT(0);\n+\t\t_GLIBCXX_DEBUG_ASSERT(0);\n \t      };\n \n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t       check_key_does_not_exist(r_key);)\n \n \t  resize_base::notify_find_search_end();\n@@ -708,7 +689,7 @@ namespace pb_ds\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n \n-\t\t  PB_DS_DBG_ONLY(map_debug_base::\n+\t\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t\t\t check_key_does_not_exist(r_key);)\n \n \t\t    return (NULL);\n@@ -722,21 +703,21 @@ namespace pb_ds\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n \n-\t\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n \t\t      return ((pointer)&p_e->m_value);\n \t\t  }\n \t\tbreak;\n \t      case erased_entry_status:\n \t\tbreak;\n \t      default:\n-\t\tPB_DS_DBG_ASSERT(0);\n+\t\t_GLIBCXX_DEBUG_ASSERT(0);\n \t      };\n \n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::\n \t\t       check_key_does_not_exist(r_key);)\n \n \t  resize_base::notify_find_search_end();\n@@ -764,7 +745,7 @@ namespace pb_ds\n       void\n       inc_it_state(const_pointer& r_p_value, size_type& r_pos) const\n       {\n-\tPB_DS_DBG_ASSERT(r_p_value != NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(r_p_value != NULL);\n \n \tfor (++r_pos; r_pos < m_num_e; ++r_pos)\n \t  {\n@@ -817,15 +798,15 @@ namespace pb_ds\n \tr_p_value = NULL;\n       }\n \n-#ifdef PB_DS_GP_HT_MAP_DEBUG__\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n-      assert_entry_array_valid(const entry_array a_entries, store_hash_false_type) const;\n+      assert_entry_array_valid(const entry_array a_entries, \n+\t\t\t       store_hash_false_type) const;\n \n       void\n-      assert_entry_array_valid(const entry_array a_entries, store_hash_true_type) const;\n-\n-#endif // #ifdef PB_DS_GP_HT_MAP_DEBUG__\n+      assert_entry_array_valid(const entry_array a_entries, \n+\t\t\t       store_hash_true_type) const;\n+#endif \n \n     private:\n       static entry_allocator s_entry_allocator;\n@@ -880,10 +861,6 @@ namespace pb_ds\n #undef PB_DS_V2F\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "ef5ea837ff7fca6a5c7dfd8f06a8286216862bbf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -66,7 +66,7 @@ find_ins_pos(const_key_reference r_key, store_hash_false_type)\n       const size_type pos =\n \tranged_probe_fn_base::operator()(r_key, hash, i);\n \n-      PB_DS_DBG_ASSERT(pos < m_num_e);\n+      _GLIBCXX_DEBUG_ASSERT(pos < m_num_e);\n \n       entry* const p_e = m_a_entries + pos;\n \n@@ -76,7 +76,7 @@ find_ins_pos(const_key_reference r_key, store_hash_false_type)\n \t  {\n             resize_base::notify_insert_search_end();\n \n-            PB_DS_DBG_ONLY(\n+            _GLIBCXX_DEBUG_ONLY(\n \t\t\t   map_debug_base::check_key_does_not_exist(r_key);)\n \n \t      return ((ins_pos == m_num_e)? pos : ins_pos);\n@@ -92,13 +92,13 @@ find_ins_pos(const_key_reference r_key, store_hash_false_type)\n             {\n \t      resize_base::notify_insert_search_end();\n \n-\t      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n                 return (pos);\n             }\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n \n       resize_base::notify_insert_search_collision();\n@@ -124,14 +124,14 @@ insert_imp(const_reference r_val, store_hash_false_type)\n \n   if (m_a_entries[pos].m_stat == valid_entry_status)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n         return (std::make_pair(\n \t\t\t       & (m_a_entries + pos)->m_value,\n \t\t\t       false));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n \n   return (std::make_pair(\n \t\t\t insert_new_imp(r_val, pos),"}, {"sha": "4f2ae016ed8941b6e1a902aa4a9cbd39c585daf9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,7 +50,7 @@ inline typename PB_DS_CLASS_C_DEC::comp_hash\n PB_DS_CLASS_C_DEC::\n find_ins_pos(const_key_reference r_key, store_hash_true_type)\n {\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n \n@@ -76,7 +76,7 @@ find_ins_pos(const_key_reference r_key, store_hash_true_type)\n \t  {\n             resize_base::notify_insert_search_end();\n \n-            PB_DS_DBG_ONLY(\n+            _GLIBCXX_DEBUG_ONLY(\n \t\t\t   map_debug_base::check_key_does_not_exist(r_key);)\n \n \t      return ((ins_pos == m_num_e)?\n@@ -97,13 +97,13 @@ find_ins_pos(const_key_reference r_key, store_hash_true_type)\n             {\n \t      resize_base::notify_insert_search_end();\n \n-\t      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+\t      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n                 return (std::make_pair(pos, pos_hash_pair.second));\n             }\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n \n       resize_base::notify_insert_search_collision();\n@@ -127,18 +127,18 @@ insert_imp(const_reference r_val, store_hash_true_type)\n   comp_hash pos_hash_pair =\n     find_ins_pos(r_key, traits_base::m_store_extra_indicator);\n \n-  PB_DS_DBG_ASSERT(pos_hash_pair.first < m_num_e);\n+  _GLIBCXX_DEBUG_ASSERT(pos_hash_pair.first < m_num_e);\n \n   entry_pointer p_e =& m_a_entries[pos_hash_pair.first];\n \n   if (p_e->m_stat == valid_entry_status)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \n       return (std::make_pair(&p_e->m_value, false));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n \n   return (std::make_pair(\n \t\t\t insert_new_imp(r_val, pos_hash_pair),"}, {"sha": "fb31e2b0d1f5a30f320b9cd1446f627f9e312282", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -81,7 +81,7 @@ do_resize_if_needed_no_throw()\n   catch(...)\n     { }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -96,7 +96,7 @@ resize_imp(size_type new_size)\n   if (new_size == m_num_e)\n     return;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     const size_type old_size = m_num_e;\n \n@@ -132,7 +132,7 @@ resize_imp(size_type new_size)\n \n   // At this point no exceptions can be thrown.\n \n-  PB_DS_DBG_ONLY(assert_entry_array_valid(a_entries_resized, traits_base::m_store_extra_indicator);)\n+  _GLIBCXX_DEBUG_ONLY(assert_entry_array_valid(a_entries_resized, traits_base::m_store_extra_indicator);)\n \n     Resize_Policy::notify_resized(new_size);\n \n@@ -142,7 +142,7 @@ resize_imp(size_type new_size)\n \n   m_a_entries = a_entries_resized;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "32e1b111bdc23a0ad69667d673dfb69c016388e5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -73,12 +73,12 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash\n \n \t  return;\n         case erased_entry_status:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n \t  break;\n         case valid_entry_status:\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n "}, {"sha": "e3dd24c070f9c2341cca20eef76b715ab788c902", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -76,12 +76,12 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized, store_hash\n \n \t  return;\n         case erased_entry_status:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n \t  break;\n         case valid_entry_status:\n \t  break;\n         default:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n "}, {"sha": "f41e38040e14a39232045c243b3ec260ff65560b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ftrace_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -70,7 +70,7 @@ trace() const\n \t  std::cerr << PB_DS_V2F(m_a_entries[i].m_value);\n \t  break;\n \tdefault:\n-\t  PB_DS_DBG_ASSERT(0);\n+\t  _GLIBCXX_DEBUG_ASSERT(0);\n \t};\n \n       std::cerr << std::endl;"}, {"sha": "e72a47ef825675b56c1eaecf302a69ffdd6b3660", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/probe_fn_base.hpp", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Fprobe_fn_base.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,48 +51,15 @@\n \n namespace pb_ds\n {\n-\n   namespace detail\n   {\n-\n-#ifdef PROBE_FN_BASE_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PROBE_FN_BASE_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PROBE_FN_BASE_DEBUG\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename Allocator>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    probe_fn_base<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n     template<typename Allocator>\n     class probe_fn_base\n     {\n     protected:\n-      ~probe_fn_base();\n+      ~probe_fn_base() { }\n     };\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ~probe_fn_base()\n-    { }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace detail\n-\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PROBE_FN_BASE_HPP\n+#endif "}, {"sha": "5d524859cfbf0f96837d2365867aef97b4609fef", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_hash_fn.hpp", "status": "modified", "additions": 18, "deletions": 50, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_hash_fn.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,22 +50,13 @@\n \n #include <ext/pb_ds/detail/basic_types.hpp>\n #include <utility>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_RANGED_HASH_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_RANGED_HASH_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_RANGED_HASH_FN_DEBUG\n-\n     template<typename Key,\n \t     class Hash_Fn,\n \t     class Allocator,\n@@ -254,68 +245,57 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn) :\n       Hash_Fn(r_hash_fn)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Hash_Fn(r_comb_hash_fn)\n-    {\n-      comb_hash_fn_base::notify_resized(size);\n-    }\n+    { comb_hash_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n       comb_hash_fn_base::swap(other);\n-\n       std::swap((Hash_Fn& )(*this), (Hash_Fn& )other);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     notify_resized(size_type size)\n-    {\n-      comb_hash_fn_base::notify_resized(size);\n-    }\n+    { comb_hash_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::comp_hash\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference r_key) const\n     {\n       const size_type hash = hash_fn_base::operator()(r_key);\n-\n-      return (std::make_pair(comb_hash_fn_base::operator()(hash), hash));\n+      return std::make_pair(comb_hash_fn_base::operator()(hash), hash);\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::comp_hash\n     PB_DS_CLASS_C_DEC::\n     operator()\n-#ifdef PB_DS_RANGED_HASH_FN_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n       (const_key_reference r_key, size_type hash) const\n-#else // #ifdef PB_DS_RANGED_HASH_FN_DEBUG\n+#else \n       (const_key_reference /*r_key*/, size_type hash) const\n-#endif // #ifdef PB_DS_RANGED_HASH_FN_DEBUG\n+#endif\n     {\n-      PB_DS_DBG_ASSERT(hash == hash_fn_base::operator()(r_key));\n-\n-      return (std::make_pair(comb_hash_fn_base::operator()(hash), hash));\n+      _GLIBCXX_DEBUG_ASSERT(hash == hash_fn_base::operator()(r_key));\n+      return std::make_pair(comb_hash_fn_base::operator()(hash), hash);\n     }\n \n #undef PB_DS_CLASS_T_DEC\n@@ -359,7 +339,7 @@ namespace pb_ds\n \n       ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn);\n \n-      ranged_hash_fn(size_type size, const null_hash_fn           & r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n \n       void\n       swap(PB_DS_CLASS_C_DEC& other);\n@@ -368,9 +348,7 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n@@ -388,9 +366,7 @@ namespace pb_ds\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      comb_hash_fn_base::swap(other);\n-    }\n+    { comb_hash_fn_base::swap(other); }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n@@ -432,7 +408,7 @@ namespace pb_ds\n \n       ranged_hash_fn(size_type size, const Comb_Hash_Fn& r_comb_hash_fn);\n \n-      ranged_hash_fn(size_type size, const null_hash_fn           & r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n+      ranged_hash_fn(size_type size, const null_hash_fn& r_null_hash_fn, const Comb_Hash_Fn& r_comb_hash_fn);\n \n       void\n       swap(PB_DS_CLASS_C_DEC& other);\n@@ -441,9 +417,7 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_hash_fn(size_type size)\n-    {\n-      Comb_Hash_Fn::notify_resized(size);\n-    }\n+    { Comb_Hash_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n@@ -461,18 +435,12 @@ namespace pb_ds\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      comb_hash_fn_base::swap(other);\n-    }\n+    { comb_hash_fn_base::swap(other); }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RANGED_HASH_FN_HPP\n+#endif "}, {"sha": "6fddfeb9d28e84313247f3bd2f181158fea92afa", "filename": "libstdc++-v3/include/ext/pb_ds/detail/hash_fn/ranged_probe_fn.hpp", "status": "modified", "additions": 16, "deletions": 49, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fhash_fn%2Franged_probe_fn.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,22 +50,12 @@\n \n #include <ext/pb_ds/detail/basic_types.hpp>\n #include <utility>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n-\n     template<typename Key,\n \t     class Hash_Fn,\n \t     class Allocator,\n@@ -298,87 +288,73 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size)\n-    {\n-      Comb_Probe_Fn::notify_resized(size);\n-    }\n+    { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn) :\n       Hash_Fn(r_hash_fn)\n-    {\n-      Comb_Probe_Fn::notify_resized(size);\n-    }\n+    { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size, const Hash_Fn& r_hash_fn, const Comb_Probe_Fn& r_comb_probe_fn, const Probe_Fn& r_probe_fn) :\n       Hash_Fn(r_hash_fn),\n       Comb_Probe_Fn(r_comb_probe_fn),\n       Probe_Fn(r_probe_fn)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n       comb_probe_fn_base::swap(other);\n-\n       std::swap((Hash_Fn& )(*this), (Hash_Fn& )other);\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     notify_resized(size_type size)\n-    {\n-      comb_probe_fn_base::notify_resized(size);\n-    }\n+    { comb_probe_fn_base::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::comp_hash\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference r_key) const\n     {\n       const size_type hash = hash_fn_base::operator()(r_key);\n-\n-      return (std::make_pair(comb_probe_fn_base::operator()(hash), hash));\n+      return std::make_pair(comb_probe_fn_base::operator()(hash), hash);\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     operator()(const_key_reference /*r_key*/, size_type hash, size_type i) const\n     {\n-      return (comb_probe_fn_base::operator()(\n-\t\t\t\t\t     hash + probe_fn_base::operator()(i)));\n+      return comb_probe_fn_base::operator()(hash + probe_fn_base::operator()(i));\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     operator()\n-#ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n       (const_key_reference r_key, size_type hash) const\n-#else // #ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n+#else \n       (const_key_reference /*r_key*/, size_type hash) const\n-#endif // #ifdef PB_DS_RANGED_PROBE_FN_DEBUG\n+#endif \n     {\n-      PB_DS_DBG_ASSERT(hash == hash_fn_base::operator()(r_key));\n-\n-      return (hash);\n+      _GLIBCXX_DEBUG_ASSERT(hash == hash_fn_base::operator()(r_key));\n+      return hash;\n     }\n \n #undef PB_DS_CLASS_T_DEC\n@@ -435,9 +411,7 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ranged_probe_fn(size_type size)\n-    {\n-      Comb_Probe_Fn::notify_resized(size);\n-    }\n+    { Comb_Probe_Fn::notify_resized(size); }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n@@ -455,19 +429,12 @@ namespace pb_ds\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n-    {\n-      comb_probe_fn_base::swap(other);\n-    }\n+    { comb_probe_fn_base::swap(other); }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RANGED_PROBE_FN_HPP\n+#endif\n "}, {"sha": "cff9bb808dd1be1e723450fed3e3615662589815", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,31 +49,18 @@\n #define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_ITERATOR_HPP\n \n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-\n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_const_iterator_<\t\t\t\\\n-\t\t\t\t\t\t\t\tNode,\t\\\n-\t\t\t\t\t\t\t\tAllocator>\n+    left_child_next_sibling_heap_const_iterator_<Node, Allocator>\n \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_node_const_point_iterator_<\t\t\\\n-\t\t\t\t\t\t\t\t\tNode, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n+    left_child_next_sibling_heap_node_const_point_iterator_<Node, Allocator>\n \n     // Const point-type iterator.\n     template<typename Node, class Allocator>\n@@ -127,34 +114,26 @@ namespace pb_ds\n       // Compares content to a different iterator object.\n       inline bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (base_type::m_p_nd == other.m_p_nd);\n-      }\n+      { return (base_type::m_p_nd == other.m_p_nd); }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (base_type::m_p_nd != other.m_p_nd);\n-      }\n+      { return (base_type::m_p_nd != other.m_p_nd); }\n \n       inline PB_DS_CLASS_C_DEC& \n       operator++()\n       {\n-\tPB_DS_DBG_ASSERT(base_type::m_p_nd != NULL);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd != NULL);\n \tinc();\n-\n \treturn (*this);\n       }\n \n       inline PB_DS_CLASS_C_DEC\n       operator++(int)\n       {\n \tPB_DS_CLASS_C_DEC ret_it(base_type::m_p_nd);\n-\n \toperator++();\n-\n \treturn (ret_it);\n       }\n \n@@ -165,33 +144,25 @@ namespace pb_ds\n \tif (base_type::m_p_nd->m_p_next_sibling != NULL)\n \t  {\n \t    base_type::m_p_nd = base_type::m_p_nd->m_p_next_sibling;\n-\n \t    while (base_type::m_p_nd->m_p_l_child != NULL)\n \t      base_type::m_p_nd = base_type::m_p_nd->m_p_l_child;\n-\n \t    return;\n \t  }\n \n \twhile (true)\n \t  {\n \t    node_pointer p_next = base_type::m_p_nd;\n \t    base_type::m_p_nd = base_type::m_p_nd->m_p_prev_or_parent;\n-\n \t    if (base_type::m_p_nd == NULL || base_type::m_p_nd->m_p_l_child == p_next)\n \t      return;\n \t  }\n       }\n     };\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_ITERATOR_HPP\n+#endif "}, {"sha": "ea45b624ac1f2ada8de37389dfeb01321aa981bd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/const_point_iterator.hpp", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconst_point_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,40 +49,26 @@\n #define PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_FIND_ITERATOR_HPP\n \n #include <ext/pb_ds/tag_and_trait.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;m_p_prev_or_parent\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\\\n     template<typename Node, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_node_const_point_iterator_<\t\t\\\n-\t\t\t\t\t\t\t\t\tNode, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    left_child_next_sibling_heap_node_const_point_iterator_<Node, Allocator>\n \n     // Const point-type iterator.\n     template<typename Node, class Allocator>\n     class left_child_next_sibling_heap_node_const_point_iterator_\n     {\n \n     protected:\n-      typedef\n-      typename Allocator::template rebind<\n-      Node>::other::pointer\n-      node_pointer;\n+      typedef typename Allocator::template rebind<Node>::other::pointer node_pointer;\n \n     public:\n \n@@ -127,49 +113,39 @@ namespace pb_ds\n \n       // Default constructor.\n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_()\n-\n-\t: m_p_nd(NULL)\n+      left_child_next_sibling_heap_node_const_point_iterator_() : m_p_nd(NULL)\n       { }\n \n       // Copy constructor.\n       inline\n-      left_child_next_sibling_heap_node_const_point_iterator_(const PB_DS_CLASS_C_DEC& other)\n-\n-\t: m_p_nd(other.m_p_nd)\n+      left_child_next_sibling_heap_node_const_point_iterator_(const PB_DS_CLASS_C_DEC& other) : m_p_nd(other.m_p_nd)\n       { }\n \n       // Access.\n       inline const_pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd != NULL);\n-\n-\treturn (&m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\treturn &m_p_nd->m_value;\n       }\n \n       // Access.\n       inline const_reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd != NULL);\n-\n-\treturn (m_p_nd->m_value);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd != NULL);\n+\treturn m_p_nd->m_value;\n       }\n \n       // Compares content to a different iterator object.\n       inline bool\n       operator==(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      { return m_p_nd == other.m_p_nd; }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const PB_DS_CLASS_C_DEC& other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      { return m_p_nd != other.m_p_nd; }\n \n     public:\n       node_pointer m_p_nd;\n@@ -178,11 +154,7 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_CONST_FIND_ITERATOR_HPP\n+#endif "}, {"sha": "0d310d511d4aa33293dcf818f013cf86acafbfdd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -58,7 +58,7 @@ left_child_next_sibling_heap_() :\n   m_p_root(NULL),\n   m_size(0)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -68,7 +68,7 @@ left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_p_root(NULL),\n   m_size(0)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -80,29 +80,29 @@ left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other) :\n {\n   m_size = other.m_size;\n \n-  PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     m_p_root = recursive_copy_node(other.m_p_root);\n \n   m_size = other.m_size;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     value_swap(other);\n \n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "f16e912018fb2b254d8c0ec4040503917475b811", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,20 +44,18 @@\n  * Contains an implementation class for left_child_next_sibling_heap_.\n  */\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  PB_DS_DBG_ASSERT(m_p_root == NULL || m_p_root->m_p_prev_or_parent == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_root == NULL || m_p_root->m_p_prev_or_parent == NULL);\n \n   if (m_p_root != NULL)\n     assert_node_consistent(m_p_root, Single_Link_Roots);\n-\n   assert_size();\n-\n   assert_iterators();\n }\n \n@@ -73,25 +71,21 @@ assert_node_consistent(const_node_pointer p_nd, bool single_link) const\n   assert_node_consistent(p_nd->m_p_next_sibling, single_link);\n \n   if (single_link)\n-    PB_DS_DBG_ASSERT(p_nd->m_p_prev_or_parent == NULL);\n+    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent == NULL);\n   else if (p_nd->m_p_next_sibling != NULL)\n-    PB_DS_DBG_ASSERT(p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd);\n+    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd);\n \n   if (p_nd->m_p_l_child == NULL)\n     return;\n \n   const_node_pointer p_child = p_nd->m_p_l_child;\n-\n   while (p_child != NULL)\n     {\n       const_node_pointer p_next_child = p_child->m_p_next_sibling;\n-\n-      PB_DS_DBG_ASSERT(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n-\n+      _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n       p_child = p_next_child;\n     }\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_p_l_child->m_p_prev_or_parent == p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child->m_p_prev_or_parent == p_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -100,11 +94,9 @@ PB_DS_CLASS_C_DEC::\n assert_iterators() const\n {\n   const size_type calc_size = std::distance(begin(), end());\n-\n   if (calc_size == size())\n     return;\n-\n-  PB_DS_DBG_ASSERT(0);\n+  _GLIBCXX_DEBUG_ASSERT(0);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -114,32 +106,26 @@ assert_size() const\n {\n   if (size_from_node(m_p_root) == m_size)\n     return;\n-\n-  PB_DS_DBG_ASSERT(0);\n+  _GLIBCXX_DEBUG_ASSERT(0);\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size_under_node(const_node_pointer p_nd)\n-{\n-  return 1 + size_from_node(p_nd->m_p_l_child);\n-}\n+{ return 1 + size_from_node(p_nd->m_p_l_child); }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size_from_node(const_node_pointer p_nd)\n {\n   size_type ret = 0;\n-\n   while (p_nd != NULL)\n     {\n       ret += 1 + size_from_node(p_nd->m_p_l_child);\n-\n       p_nd = p_nd->m_p_next_sibling;\n     }\n-\n   return ret;\n }\n \n@@ -149,17 +135,13 @@ PB_DS_CLASS_C_DEC::\n degree(const_node_pointer p_nd)\n {\n   size_type ret = 0;\n-\n   const_node_pointer p_child = p_nd->m_p_l_child;\n-\n   while (p_child != NULL)\n     {\n       ++ret;\n-\n       p_child = p_child->m_p_next_sibling;\n     }\n-\n   return ret;\n }\n \n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif "}, {"sha": "52817639f999b232b9fddfe24f9a0f15f30ae74a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,8 +50,7 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   clear_imp(m_p_root);\n-\n-  PB_DS_DBG_ASSERT(m_size == 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size == 0);\n   m_p_root = NULL;\n }\n \n@@ -60,11 +59,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n actual_erase_node(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n   p_nd->~node();\n-\n   s_node_allocator.deallocate(p_nd, 1);\n }\n \n@@ -76,11 +73,8 @@ clear_imp(node_pointer p_nd)\n   while (p_nd != NULL)\n     {\n       clear_imp(p_nd->m_p_l_child);\n-\n       node_pointer p_next = p_nd->m_p_next_sibling;\n-\n       actual_erase_node(p_nd);\n-\n       p_nd = p_next;\n     }\n }\n@@ -90,40 +84,30 @@ void\n PB_DS_CLASS_C_DEC::\n to_linked_list()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    node_pointer p_cur = m_p_root;\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  node_pointer p_cur = m_p_root;\n   while (p_cur != NULL)\n     if (p_cur->m_p_l_child != NULL)\n       {\n \tnode_pointer p_child_next = p_cur->m_p_l_child->m_p_next_sibling;\n-\n \tp_cur->m_p_l_child->m_p_next_sibling = p_cur->m_p_next_sibling;\n-\n \tp_cur->m_p_next_sibling = p_cur->m_p_l_child;\n-\n \tp_cur->m_p_l_child = p_child_next;\n       }\n     else\n       p_cur = p_cur->m_p_next_sibling;\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const_node_pointer p_counter = m_p_root;\n-\n   size_type count = 0;\n-\n   while (p_counter != NULL)\n     {\n       ++count;\n-\n-      PB_DS_DBG_ASSERT(p_counter->m_p_l_child == NULL);\n-\n+      _GLIBCXX_DEBUG_ASSERT(p_counter->m_p_l_child == NULL);\n       p_counter = p_counter->m_p_next_sibling;\n     }\n-\n-  PB_DS_DBG_ASSERT(count == m_size);\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+  _GLIBCXX_DEBUG_ASSERT(count == m_size);\n+#endif \n }\n \n PB_DS_CLASS_T_DEC\n@@ -133,37 +117,27 @@ PB_DS_CLASS_C_DEC::\n prune(Pred pred)\n {\n   node_pointer p_cur = m_p_root;\n-\n   m_p_root = NULL;\n-\n   node_pointer p_out = NULL;\n-\n   while (p_cur != NULL)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-\n       if (pred(p_cur->m_value))\n         {\n \t  p_cur->m_p_next_sibling = p_out;\n-\n \t  if (p_out != NULL)\n \t    p_out->m_p_prev_or_parent = p_cur;\n-\n \t  p_out = p_cur;\n         }\n       else\n         {\n \t  p_cur->m_p_next_sibling = m_p_root;\n-\n \t  if (m_p_root != NULL)\n \t    m_p_root->m_p_prev_or_parent = p_cur;\n-\n \t  m_p_root = p_cur;\n         }\n-\n       p_cur = p_next;\n     }\n-\n   return p_out;\n }\n \n@@ -173,11 +147,9 @@ PB_DS_CLASS_C_DEC::\n bubble_to_top(node_pointer p_nd)\n {\n   node_pointer p_parent = parent(p_nd);\n-\n   while (p_parent != NULL)\n     {\n       swap_with_parent(p_nd, p_parent);\n-\n       p_parent = parent(p_nd);\n     }\n }"}, {"sha": "479690d2bc9be873c40e6f16e1f9a631849fde54", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -93,8 +93,8 @@ inline void\n PB_DS_CLASS_C_DEC::\n make_child_of(node_pointer p_nd, node_pointer p_new_parent)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(p_new_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_new_parent != NULL);\n \n   p_nd->m_p_next_sibling = p_new_parent->m_p_l_child;\n \n@@ -130,9 +130,9 @@ swap_with_parent(node_pointer p_nd, node_pointer p_parent)\n   if (p_parent == m_p_root)\n     m_p_root = p_nd;\n \n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(p_parent != NULL);\n-  PB_DS_DBG_ASSERT(parent(p_nd) == p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(parent(p_nd) == p_parent);\n \n   const bool nd_direct_child = p_parent->m_p_l_child == p_nd;\n   const bool parent_root = p_parent->m_p_prev_or_parent == NULL;\n@@ -144,8 +144,8 @@ swap_with_parent(node_pointer p_nd, node_pointer p_parent)\n   std::swap(p_parent->m_p_l_child, p_nd->m_p_l_child);\n   std::swap(p_parent->m_metadata, p_nd->m_metadata);\n \n-  PB_DS_DBG_ASSERT(p_nd->m_p_l_child != NULL);\n-  PB_DS_DBG_ASSERT(p_parent->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_prev_or_parent != NULL);\n \n   if (p_nd->m_p_next_sibling != NULL)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n@@ -169,13 +169,13 @@ swap_with_parent(node_pointer p_nd, node_pointer p_parent)\n     }\n   else\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_p_l_child == p_nd);\n-      PB_DS_DBG_ASSERT(p_parent->m_p_prev_or_parent == p_parent);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child == p_nd);\n+      _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_prev_or_parent == p_parent);\n \n       p_nd->m_p_l_child = p_parent;\n       p_parent->m_p_prev_or_parent = p_nd;\n     }\n \n-  PB_DS_DBG_ASSERT(parent(p_parent) == p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(parent(p_parent) == p_nd);\n }\n "}, {"sha": "e06358d2f22b406040448b0afcc72f4920b41f3f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -59,72 +59,63 @@\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/const_iterator.hpp>\n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n #include <iostream>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_TRACE_\n+#endif \n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-\n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Value_Type,\t\\\n \t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n \t\t\t\t\t\ttypename Node_Metadata,\t\\\n \t\t\t\t\t\tclass Allocator,\t\\\n \t\t\t\t\t\tbool Single_Link_Roots>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#else \n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Value_Type,\t\\\n \t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n \t\t\t\t\t\ttypename Node_Metadata,\t\\\n \t\t\t\t\t\tclass Allocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     left_child_next_sibling_heap_<\t\t\t\t\t\\\n \t\t\t\t\t\t\tValue_Type,\t\\\n \t\t\t\t\t\t\tCmp_Fn,\t\t\\\n \t\t\t\t\t\t\tNode_Metadata,\t\\\n \t\t\t\t\t\t\tAllocator,\t\\\n \t\t\t\t\t\t\tSingle_Link_Roots>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#else \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     left_child_next_sibling_heap_<\t\t\t\t\t\\\n \t\t\t\t\t\t\tValue_Type,\t\\\n \t\t\t\t\t\t\tCmp_Fn,\t\t\\\n \t\t\t\t\t\t\tNode_Metadata,\t\\\n \t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n \n     /**\n      * class description = \"Base class for some types of h3ap$\">\n      **/\n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     template<typename Value_Type,\n \t     class Cmp_Fn,\n \t     typename Node_Metadata,\n \t     class Allocator,\n \t     bool Single_Link_Roots>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#else \n     template<typename Value_Type,\n \t     class Cmp_Fn,\n \t     typename Node_Metadata,\n \t     class Allocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n     class left_child_next_sibling_heap_ : public Cmp_Fn\n     {\n \n@@ -152,8 +143,7 @@ namespace pb_ds\n \n       enum\n \t{\n-\t  simple_value = is_simple<\n-\t  Value_Type>::value\n+\t  simple_value = is_simple<Value_Type>::value\n \t};\n \n       typedef integral_constant<int, simple_value> no_throw_copies_t;\n@@ -250,11 +240,9 @@ namespace pb_ds\n       clear();\n \n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_LC_NS_HEAP_TRACE_\n+#endif \n \n     protected:\n \n@@ -289,8 +277,7 @@ namespace pb_ds\n       node_pointer\n       prune(Pred pred);\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n@@ -302,24 +289,20 @@ namespace pb_ds\n \n       static size_type\n       degree(const_node_pointer p_nd);\n-\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n-\n       static void\n       trace_node(const_node_pointer, size_type level);\n-\n-#endif // #ifdef PB_DS_LC_NS_HEAP_TRACE_\n+#endif \n \n     protected:\n       node_pointer m_p_root;\n \n       size_type m_size;\n \n     private:\n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_iterators() const;\n \n@@ -328,8 +311,7 @@ namespace pb_ds\n \n       static size_type\n       size_from_node(const_node_pointer p_nd);\n-\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n \n       node_pointer\n       recursive_copy_node(const_node_pointer p_nd);\n@@ -341,15 +323,13 @@ namespace pb_ds\n       get_new_node_for_insert(const_reference r_val, true_type);\n \n #ifdef PB_DS_LC_NS_HEAP_TRACE_\n-\n       template<typename Metadata_>\n       static void\n       trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>);\n \n       static void\n       trace_node_metadata(const_node_pointer, type_to_type<null_left_child_next_sibling_heap_node_metadata>);\n-\n-#endif // #ifdef PB_DS_LC_NS_HEAP_TRACE_\n+#endif \n \n     private:\n       static node_allocator s_node_allocator;\n@@ -367,14 +347,9 @@ namespace pb_ds\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/policy_access_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_LEFT_CHILD_NEXT_SIBLING_HEAP_HPP\n+#endif "}, {"sha": "932b3412390eb108420cfc27f04e156c0c1af906", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -73,93 +73,75 @@ copy_from_range(It first_it, It last_it)\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME() :\n-  m_p_l(NULL)\n-{\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+PB_DS_CLASS_NAME() : m_p_l(NULL)\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(It first_it, It last_it) :\n-  m_p_l(NULL)\n+PB_DS_CLASS_NAME(It first_it, It last_it) : m_p_l(NULL)\n {\n   copy_from_range(first_it, last_it);\n-\n-  PB_DS_DBG_ONLY(assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_LU_MAP_DEBUG_\n-  PB_DS_MAP_DEBUG_BASE_C_DEC(),\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n-  m_p_l(NULL)\n+PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) : \n+#ifdef _GLIBCXX_DEBUG\n+  map_debug_base(),\n+#endif\n+m_p_l(NULL)\n {\n   try\n     {\n-\n       for (const_iterator it = other.begin(); it != other.end(); ++it)\n         {\n-\t  entry_pointer p_l =\n-\t    allocate_new_entry(                   * it,  PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n+\t  entry_pointer p_l = allocate_new_entry(*it, \n+\t\t\tPB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n \n \t  p_l->m_p_next = m_p_l;\n-\n \t  m_p_l = p_l;\n         }\n     }\n   catch(...)\n     {\n       deallocate_all();\n-\n       throw;\n     }\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-\n-    PB_DS_DBG_ONLY(map_debug_base::swap(other);)\n-\n-    std::swap(m_p_l, other.m_p_l);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  std::swap(m_p_l, other.m_p_l);\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n deallocate_all()\n {\n   entry_pointer p_l = m_p_l;\n-\n   while (p_l != NULL)\n     {\n       entry_pointer p_next_l = p_l->m_p_next;\n-\n       actual_erase_entry(p_l);\n-\n       p_l = p_next_l;\n     }\n-\n   m_p_l = NULL;\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n ~PB_DS_CLASS_NAME()\n-{\n-  deallocate_all();\n-}\n+{ deallocate_all(); }\n "}, {"sha": "1427f83749bb6d80e5919840d8a2bcebceb97aca", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,23 +44,20 @@\n  * Contains implementations of cc_ht_map_'s debug-mode functions.\n  */\n \n-#ifdef PB_DS_LU_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   size_type calc_size = 0;\n-\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       map_debug_base::check_key_exists(PB_DS_V2F(*it));\n-\n       ++calc_size;\n     }\n-\n   map_debug_base::check_size(calc_size);\n }\n \n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif "}, {"sha": "d23c76beb2f96aeabb1aa06c45462c689cf210ab", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     if (m_p_l == NULL)\n       return false;\n@@ -94,7 +94,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     size_type num_ersd = 0;\n \n@@ -126,7 +126,7 @@ erase_if(Pred pred)\n \tp_l = p_l->m_p_next;\n     }\n \n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n \n     return (num_ersd);\n }\n@@ -136,9 +136,9 @@ void\n PB_DS_CLASS_C_DEC::\n erase_next(entry_pointer p_l)\n {\n-  PB_DS_DBG_ASSERT(p_l != NULL);\n-  PB_DS_DBG_ASSERT(p_l != m_p_l);\n-  PB_DS_DBG_ASSERT(p_l->m_p_next != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != m_p_l);\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_next != NULL);\n \n   entry_pointer p_next_l = p_l->m_p_next->m_p_next;\n \n@@ -152,7 +152,7 @@ void\n PB_DS_CLASS_C_DEC::\n actual_erase_entry(entry_pointer p_l)\n {\n-  PB_DS_DBG_ONLY(map_debug_base::erase_existing(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::erase_existing(\n \t\t\t\t\t\tPB_DS_V2F(p_l->m_value));)\n \n     p_l->~entry();"}, {"sha": "dd43185896e724ae94365f076f4d27b45472eea9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -56,7 +56,7 @@ find_imp(const_key_reference r_key) const\n     {\n       apply_update(m_p_l, s_metadata_type_indicator);\n \n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key);)\n \n         return m_p_l;\n     }\n@@ -86,7 +86,7 @@ find_imp(const_key_reference r_key) const\n \tp_l = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n     return NULL;\n }"}, {"sha": "a9b94ead688a8985b97ae571c22e50e9db079c46", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,19 +51,19 @@ inline std::pair<\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     entry_pointer p_l = find_imp(PB_DS_V2F(r_val));\n \n   if (p_l != NULL)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n \t\t\t\t\t\t      PB_DS_V2F(r_val));)\n \n         return std::make_pair(point_iterator(&p_l->m_value), false);\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t  PB_DS_V2F(r_val));)\n \n     p_l = allocate_new_entry(r_val, PB_DS_TYPES_TRAITS_C_DEC::m_no_throw_copies_indicator);\n@@ -72,7 +72,7 @@ insert(const_reference r_val)\n \n   m_p_l = p_l;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return std::make_pair(point_iterator(&p_l->m_value), true);\n }\n@@ -92,7 +92,7 @@ allocate_new_entry(const_reference r_val, false_type)\n \n   cond.set_no_action();\n \n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_val));)\n \n     init_entry_metadata(p_l, s_metadata_type_indicator);\n@@ -109,7 +109,7 @@ allocate_new_entry(const_reference    r_val, true_type)\n \n   new (&p_l->m_value) value_type(r_val);\n \n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t    PB_DS_V2F(r_val));)\n \n     init_entry_metadata(p_l, s_metadata_type_indicator);"}, {"sha": "4fd72070a167aa9c065d1fcb90ad247fae9ebfc6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/iterators_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fiterators_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,7 +51,7 @@ begin()\n {\n   if (m_p_l == NULL)\n     {\n-      PB_DS_DBG_ASSERT(empty());\n+      _GLIBCXX_DEBUG_ASSERT(empty());\n \n       return (end());\n     }\n@@ -66,7 +66,7 @@ begin() const\n {\n   if (m_p_l == NULL)\n     {\n-      PB_DS_DBG_ASSERT(empty());\n+      _GLIBCXX_DEBUG_ASSERT(empty());\n \n       return (end());\n     }"}, {"sha": "6eaa370f0b145cc857a81fffed7823a8f7d2bb90", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 51, "deletions": 113, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,111 +51,72 @@\n #include <ext/pb_ds/detail/types_traits.hpp>\n #include <ext/pb_ds/detail/list_update_map_/entry_metadata_base.hpp>\n #include <ext/pb_ds/exception.hpp>\n-#ifdef PB_DS_LU_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/map_debug_base.hpp>\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif \n #ifdef PB_DS_LU_MAP_TRACE_\n #include <iostream>\n-#endif // PB_DS_LU_MAP_TRACE_\n+#endif \n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_LU_MAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_LU_MAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Eq_Fn,\t\t\\\n-\t\t\t\t\t\tclass Allocator,\t\\\n-\t\t\t\t\t\tclass Update_Policy>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, class Eq_Fn, \\\n+\t     class Allocator, class Update_Policy>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    lu_map_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_CLASS_NAME lu_map_data_\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    lu_map_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    PB_DS_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tUpdate_Policy>\n-\n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tfalse>\n-\n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\tEq_Fn, \\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#define PB_DS_CLASS_NAME lu_map_no_data_\n+#endif \n+\n+#define PB_DS_CLASS_C_DEC \\\n+    PB_DS_CLASS_NAME<Key, Mapped, Eq_Fn, Allocator, Update_Policy>\n+\n+#define PB_DS_TYPES_TRAITS_C_DEC \\\n+    types_traits<Key, Mapped, Allocator, false>\n+\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n+    map_debug_base<Key, Eq_Fn, \\\n+\t      typename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n-\n-#ifdef PB_DS_LU_MAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_LU_MAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif \n \n     /* Skip to the lu, my darling. */\n-\n     // list-based (with updates) associative container.\n     template<typename Key,\n \t     typename Mapped,\n \t     class Eq_Fn,\n \t     class Allocator,\n \t     class Update_Policy>\n     class PB_DS_CLASS_NAME :\n-#ifdef PB_DS_LU_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif \n       public PB_DS_TYPES_TRAITS_C_DEC\n     {\n \n     private:\n \n-      struct entry : public lu_map_entry_metadata_base<\n-      typename Update_Policy::metadata_type>\n+      struct entry : public lu_map_entry_metadata_base<typename Update_Policy::metadata_type>\n       {\n \ttypename PB_DS_TYPES_TRAITS_C_DEC::value_type m_value;\n \n@@ -172,9 +133,7 @@ namespace pb_ds\n \n       typedef typename entry_allocator::reference entry_reference;\n \n-      typedef\n-      typename entry_allocator::const_reference\n-      const_entry_reference;\n+      typedef typename entry_allocator::const_reference const_entry_reference;\n \n       typedef\n       typename Allocator::template rebind<entry_pointer>::other\n@@ -265,21 +224,21 @@ namespace pb_ds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_point_iterator_ point_iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_point_iterator_ const_point_iterator;\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n       typedef const_iterator_ iterator;\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n       typedef const_iterator_ const_iterator;\n \n@@ -311,39 +270,31 @@ namespace pb_ds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return insert(std::make_pair(r_key, mapped_type())).first->second;\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn insert(std::make_pair(r_key, mapped_type())).first->second;\n+#else \n \tinsert(r_key);\n-\n-\treturn (traits_base::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn traits_base::s_null_mapped;\n+#endif \n       }\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n+      inline std::pair<point_iterator, bool>\n       insert(const_reference r_val);\n \n       inline point_iterator\n       find(const_key_reference r_key)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  entry_pointer p_e = find_imp(r_key);\n-\n-\treturn point_iterator(p_e == NULL? NULL :& p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tentry_pointer p_e = find_imp(r_key);\n+\treturn point_iterator(p_e == NULL ? NULL: &p_e->m_value);\n       }\n \n       inline const_point_iterator\n       find(const_key_reference r_key) const\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  entry_pointer p_e = find_imp(r_key);\n-\n-\treturn const_point_iterator(p_e == NULL? NULL :& p_e->m_value);\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tentry_pointer p_e = find_imp(r_key);\n+\treturn const_point_iterator(p_e == NULL ? NULL: &p_e->m_value);\n       }\n \n       inline bool\n@@ -368,26 +319,22 @@ namespace pb_ds\n       inline const_iterator\n       end() const;\n \n-#ifdef PB_DS_LU_MAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_LU_MAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // PB_DS_LU_MAP_TRACE_\n+#endif\n \n     private:\n       typedef PB_DS_TYPES_TRAITS_C_DEC traits_base;\n \n-#ifdef PB_DS_LU_MAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_LU_MAP_DEBUG_\n+#endif \n \n       typedef\n       typename PB_DS_TYPES_TRAITS_C_DEC::\n@@ -433,7 +380,6 @@ namespace pb_ds\n       inc_it_state(const_pointer& r_p_value, entry_pointer& r_pos) const\n       {\n \tr_pos = r_pos->m_p_next;\n-\n \tr_p_value = (r_pos == NULL)? NULL :& r_pos->m_value;\n       }\n \n@@ -454,7 +400,7 @@ namespace pb_ds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       friend class iterator_;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       friend class const_iterator_;\n \n@@ -479,22 +425,14 @@ namespace pb_ds\n #include <ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp>\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n-\n #undef PB_DS_CLASS_NAME\n \n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "fce62566edc8431e2c512b2c7b782925ecac0e39", "filename": "libstdc++-v3/include/ext/pb_ds/detail/map_debug_base.hpp", "status": "modified", "additions": 75, "deletions": 157, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fmap_debug_base.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -38,7 +38,7 @@\n // representation about the suitability of this software for any\n // purpose. It is provided \"as is\" without express or implied\n // warranty.\n-\n+ \n /**\n  * @file map_debug_base.hpp\n  * Contains a debug-mode base for all maps.\n@@ -47,37 +47,23 @@\n #ifndef PB_DS_MAP_DEBUG_BASE_HPP\n #define PB_DS_MAP_DEBUG_BASE_HPP\n \n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n \n-#include <assert.h>\n #include <list>\n #include <utility>\n-#include <pb_ds/testsuite/regression/res_mng/dbg_ex_allocator.hpp>\n+#include <regression/res_mng/dbg_ex_allocator.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n-\n   namespace detail\n   {\n \n-#ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\t\\\n-\t\t\t\t\t\tEq_Fn,\t\t\t\\\n-\t\t\t\t\t\tConst_Key_Reference>\n+#define PB_DS_CLASS_C_DEC \\\n+    map_debug_base<Key, Eq_Fn, Const_Key_Reference>\n \n     template<typename Key, class Eq_Fn, typename Const_Key_Reference>\n     class map_debug_base\n@@ -119,75 +105,58 @@ namespace pb_ds\n \n       template<typename Cmp_Fn>\n       void\n-      split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other);\n+      split(const_key_reference, Cmp_Fn, PB_DS_CLASS_C_DEC&);\n \n       void\n       join(PB_DS_CLASS_C_DEC& other);\n \n     private:\n-      typedef std::list< Key> key_set;\n-\n-      typedef typename key_set::iterator key_set_iterator;\n+      typedef std::list< Key> \t\t\tkey_set;\n+      typedef typename key_set::iterator \tkey_set_iterator;\n+      typedef typename key_set::const_iterator \tconst_key_set_iterator;\n \n-      typedef typename key_set::const_iterator const_key_set_iterator;\n-\n-    private:\n-#ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-#endif // #ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n+#endif \n \n       const_key_set_iterator\n       find(const_key_reference r_key) const;\n \n       key_set_iterator\n       find(const_key_reference r_key);\n \n-    private:\n-      key_set m_key_set;\n-\n-      Eq_Fn m_eq;\n+      key_set \tm_key_set;\n+      Eq_Fn \tm_eq;\n     };\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     map_debug_base()\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    map_debug_base(const PB_DS_CLASS_C_DEC& other) :\n-      m_key_set(other.m_key_set)\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    map_debug_base(const PB_DS_CLASS_C_DEC& other) : m_key_set(other.m_key_set)\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ~map_debug_base()\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     insert_new(const_key_reference r_key)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tpb_ds::test::dbg_ex_allocator<char> alloc;\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      pb_ds::test::dbg_ex_allocator<char> alloc;\n       const double orig_throw_prob = alloc.get_throw_prob();\n-\n       alloc.set_throw_prob(0);\n-\n       if (find(r_key) != m_key_set.end())\n \t{\n \t  std::cerr << \"insert_new \" << r_key << std::endl;\n-\n \t  abort();\n \t}\n \n@@ -198,174 +167,142 @@ namespace pb_ds\n       catch(...)\n \t{\n \t  std::cerr << \"insert_new 1\" << r_key << std::endl;\n-\n \t  abort();\n \t}\n-\n       alloc.set_throw_prob(orig_throw_prob);\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     erase_existing(const_key_reference r_key)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tkey_set_iterator it = find(r_key);\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      key_set_iterator it = find(r_key);\n       if (it == m_key_set.end())\n \t{\n \t  std::cerr << \"erase_existing \" << r_key << std::endl;\n-\n \t  abort();\n \t}\n-\n       m_key_set.erase(it);\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     clear()\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tm_key_set.clear();\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      m_key_set.clear();\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     check_key_exists(const_key_reference r_key) const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tif (find(r_key) == m_key_set.end())\n-\t  {\n-\t    std::cerr << \"check_key_exists \" << r_key << std::endl;\n-\n-\t    abort();\n-\t  }\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      if (find(r_key) == m_key_set.end())\n+        {\n+          std::cerr << \"check_key_exists \" << r_key << std::endl;\n+          abort();\n+        }\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     check_key_does_not_exist(const_key_reference r_key) const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tif (find(r_key) != m_key_set.end())\n-\t  {\n-\t    std::cerr << \"check_key_does_not_exist \" << r_key << std::endl;\n-\n-\t    abort();\n-\t  }\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      if (find(r_key) != m_key_set.end())\n+        {\n+\t  std::cerr << \"check_key_does_not_exist \" << r_key << std::endl;\n+          abort();\n+        }\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     check_size(size_type size) const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tconst size_type key_set_size = m_key_set.size();\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      const size_type key_set_size = m_key_set.size();\n       if (size != key_set_size)\n \t{\n-\t  std::cerr << \"check_size \" << size << \" \" << key_set_size << std::endl;\n-\n+\t  std::cerr << \"check_size \" << size \n+\t\t    << \" \" << key_set_size << std::endl;\n \t  abort();\n \t}\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tm_key_set.swap(other.m_key_set);\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      m_key_set.swap(other.m_key_set);\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::const_key_set_iterator\n     PB_DS_CLASS_C_DEC::\n     find(const_key_reference r_key) const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tfor (const_key_set_iterator it = m_key_set.begin(); it != m_key_set.end();\n-\t     ++it)\n-\t  if (m_eq(*it, r_key))\n-            return (it);\n-\n-      return (m_key_set.end());\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      typedef const_key_set_iterator iterator_type;\n+      for (iterator_type it = m_key_set.begin(); it != m_key_set.end(); ++it)\n+\tif (m_eq(*it, r_key))\n+          return it;\n+      return m_key_set.end();\n     }\n \n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::key_set_iterator\n     PB_DS_CLASS_C_DEC::\n     find(const_key_reference r_key)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tkey_set_iterator it = m_key_set.begin();\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      key_set_iterator it = m_key_set.begin();\n       while (it != m_key_set.end())\n \t{\n \t  if (m_eq(*it, r_key))\n-            return (it);\n-\n+            return it;\n \t  ++it;\n \t}\n+      return it;\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+     }\n \n-      return (it);\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n-\n-#ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     assert_valid() const\n     {\n       const_key_set_iterator prime_it = m_key_set.begin();\n-\n       while (prime_it != m_key_set.end())\n \t{\n \t  const_key_set_iterator sec_it = prime_it;\n-\n \t  ++sec_it;\n-\n \t  while (sec_it != m_key_set.end())\n \t    {\n-\t      assert(!m_eq(*sec_it, * prime_it));\n-\t      assert(!m_eq(*prime_it, * sec_it));\n-\n+\t      _GLIBCXX_DEBUG_ASSERT(!m_eq(*sec_it, *prime_it));\n+\t      _GLIBCXX_DEBUG_ASSERT(!m_eq(*prime_it, *sec_it));\n \t      ++sec_it;\n \t    }\n-\n \t  ++prime_it;\n \t}\n     }\n-#endif // #ifdef PB_DS_MAP_DEBUG_BASE_DEBUG\n+#endif \n \n     PB_DS_CLASS_T_DEC\n     template<typename Cmp_Fn>\n@@ -374,25 +311,18 @@ namespace pb_ds\n     split(const_key_reference r_key, Cmp_Fn cmp_fn, PB_DS_CLASS_C_DEC& other)\n     {\n       pb_ds::test::dbg_ex_allocator<char> alloc;\n-\n       const double orig_throw_prob = alloc.get_throw_prob();\n-\n       alloc.set_throw_prob(0);\n-\n       other.clear();\n-\n       key_set_iterator it = m_key_set.begin();\n-\n       while (it != m_key_set.end())\n         if (cmp_fn(r_key, * it))\n \t  {\n             other.insert_new(*it);\n-\n             it = m_key_set.erase(it);\n \t  }\n         else\n \t  ++it;\n-\n       alloc.set_throw_prob(orig_throw_prob);\n     }\n \n@@ -402,37 +332,25 @@ namespace pb_ds\n     join(PB_DS_CLASS_C_DEC& other)\n     {\n       pb_ds::test::dbg_ex_allocator<char> alloc;\n-\n       const double orig_throw_prob = alloc.get_throw_prob();\n-\n       alloc.set_throw_prob(0);\n-\n       key_set_iterator it = other.m_key_set.begin();\n-\n       while (it != other.m_key_set.end())\n \t{\n \t  insert_new(*it);\n-\n \t  it = other.m_key_set.erase(it);\n \t}\n-\n-      PB_DS_DBG_ASSERT(other.m_key_set.empty());\n-\n+      _GLIBCXX_DEBUG_ASSERT(other.m_key_set.empty());\n       alloc.set_throw_prob(orig_throw_prob);\n     }\n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace detail\n-\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif \n \n-#endif // #ifndef PB_DS_MAP_DEBUG_BASE_HPP\n+#endif \n "}, {"sha": "072fce447a8faa610bc114b5304d1b7597f64eb0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/cond_dtor.hpp", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fcond_dtor.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -48,23 +48,19 @@ template<typename Size_Type>\n class cond_dtor\n {\n public:\n-  cond_dtor(value_vector a_vec, iterator& r_last_it, Size_Type total_size) : m_a_vec(a_vec),\n-\t\t\t\t\t\t\t\t\t     m_r_last_it(r_last_it),\n-\t\t\t\t\t\t\t\t\t     m_max_size(total_size),\n-\t\t\t\t\t\t\t\t\t     m_no_action(false)\n+  cond_dtor(value_vector a_vec, iterator& r_last_it, Size_Type total_size) \n+  : m_a_vec(a_vec), m_r_last_it(r_last_it), m_max_size(total_size),\n+    m_no_action(false)\n   { }\n \n   ~cond_dtor()\n   {\n     if (m_no_action)\n       return;\n-\n     iterator it = m_a_vec;\n-\n     while (it != m_r_last_it)\n       {\n \tit->~value_type();\n-\n \t++it;\n       }\n \n@@ -74,16 +70,11 @@ class cond_dtor\n \n   inline void\n   set_no_action()\n-  {\n-    m_no_action = true;\n-  }\n+  { m_no_action = true; }\n \n protected:\n   value_vector m_a_vec;\n-\n   iterator& m_r_last_it;\n-\n   const Size_Type m_max_size;\n-\n   bool m_no_action;\n };"}, {"sha": "ecd6aeab3867511f050c8a4b2ef1d41cd75137ee", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 30, "deletions": 76, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -59,9 +59,7 @@ PB_DS_OV_TREE_CLASS_NAME() :\n   m_a_metadata(NULL),\n   m_end_it(NULL),\n   m_size(0)\n-{\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -71,9 +69,7 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   m_a_metadata(NULL),\n   m_end_it(NULL),\n   m_size(0)\n-{\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -84,19 +80,17 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_updat\n   m_a_metadata(NULL),\n   m_end_it(NULL),\n   m_size(0)\n-{\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_OV_TREE_DEBUG_\n-  PB_DS_MAP_DEBUG_BASE_C_DEC(other),\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n+  map_debug_base(other),\n+#endif \n #ifdef PB_DS_TREE_TRACE\n   PB_DS_TREE_TRACE_BASE_C_DEC(other),\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n   cmp_fn_base(other),\n   node_update(other),\n   m_a_values(NULL),\n@@ -105,9 +99,8 @@ PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   m_size(0)\n {\n   copy_from_ordered_range(other.begin(), other.end());\n-\n-  PB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n@@ -124,18 +117,17 @@ copy_from_range(It first_it, It last_it)\n     typename Allocator::template rebind<\n     value_type>::other>\n     map_type;\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#else \n   typedef\n     std::set<\n     key_type,\n     Cmp_Fn,\n     typename Allocator::template rebind<\n     Key>::other>\n     map_type;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n   map_type m(first_it, last_it);\n-\n   copy_from_ordered_range(m.begin(), m.end());\n }\n \n@@ -146,64 +138,51 @@ PB_DS_CLASS_C_DEC::\n copy_from_ordered_range(It first_it, It last_it)\n {\n   const size_type size = std::distance(first_it, last_it);\n-\n   if (size == 0)\n     return;\n \n   value_vector a_values = s_value_alloc.allocate(size);\n-\n   iterator target_it = a_values;\n   It source_it = first_it;\n   It source_end_it = last_it;\n \n   cond_dtor<size_type> cd(a_values, target_it, size);\n-\n   while (source_it != source_end_it)\n     {\n-      new (const_cast<void* >(\n-\t\t\t      static_cast<const void* >(target_it)))\n+      new (const_cast<void* >(static_cast<const void* >(target_it)))\n \tvalue_type(*source_it++);\n \n       ++target_it;\n     }\n \n   reallocate_metadata((node_update* )this, size);\n-\n   cd.set_no_action();\n-\n   m_a_values = a_values;\n-\n   m_size = size;\n-\n   m_end_it = m_a_values + m_size;\n-\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const_iterator dbg_it = m_a_values;\n-\n   while (dbg_it != m_end_it)\n     {\n       map_debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-\n       dbg_it++;\n     }\n-\n   PB_DS_CLASS_C_DEC::assert_valid();\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#endif \n }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n void\n PB_DS_CLASS_C_DEC::\n-copy_from_ordered_range(It first_it, It last_it, It other_first_it, It other_last_it)\n+copy_from_ordered_range(It first_it, It last_it, It other_first_it, \n+\t\t\tIt other_last_it)\n {\n   clear();\n-\n-  const size_type size =\n-    std::distance(first_it, last_it) +\n-    std::distance(other_first_it, other_last_it);\n+  const size_type size = std::distance(first_it, last_it) \n+    \t\t         + std::distance(other_first_it, other_last_it);\n \n   value_vector a_values = s_value_alloc.allocate(size);\n \n@@ -212,13 +191,10 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it, It other_las\n   It source_end_it = last_it;\n \n   cond_dtor<size_type> cd(a_values, target_it, size);\n-\n   while (source_it != source_end_it)\n     {\n-      new (const_cast<void* >(\n-\t\t\t      static_cast<const void* >(target_it)))\n+      new (const_cast<void* >(static_cast<const void* >(target_it)))\n \tvalue_type(*source_it++);\n-\n       ++target_it;\n     }\n \n@@ -227,77 +203,58 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it, It other_las\n \n   while (source_it != source_end_it)\n     {\n-      new (const_cast<void* >(\n-\t\t\t      static_cast<const void* >(target_it)))\n+      new (const_cast<void* >(static_cast<const void* >(target_it)))\n \tvalue_type(*source_it++);\n-\n       ++target_it;\n     }\n \n   reallocate_metadata((node_update* )this, size);\n-\n   cd.set_no_action();\n-\n   m_a_values = a_values;\n-\n   m_size = size;\n-\n   m_end_it = m_a_values + m_size;\n-\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const_iterator dbg_it = m_a_values;\n-\n   while (dbg_it != m_end_it)\n     {\n       map_debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-\n       dbg_it++;\n     }\n-\n   PB_DS_CLASS_C_DEC::assert_valid();\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#endif \n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    value_swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n   std::swap(m_a_values, other.m_a_values);\n-\n   std::swap(m_a_metadata, other.m_a_metadata);\n-\n   std::swap(m_size, other.m_size);\n-\n   std::swap(m_end_it, other.m_end_it);\n-\n-  PB_DS_DBG_ONLY(map_debug_base::swap(other);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n ~PB_DS_OV_TREE_CLASS_NAME()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n   reallocate_metadata((node_update* )this, 0);\n }\n \n@@ -314,12 +271,9 @@ PB_DS_CLASS_C_DEC::\n update(node_iterator nd_it, Node_Update* p_update)\n {\n   const_node_iterator end_it = PB_DS_node_end_imp();\n-\n   if (nd_it == end_it)\n     return;\n-\n   update(nd_it.get_l_child(), p_update);\n   update(nd_it.get_r_child(), p_update);\n-\n   node_update::operator()(nd_it, end_it);\n }"}, {"sha": "e8b418da345a9d7b301857a532b8d078897f161e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains an implementation class for ov_tree_.\n  */\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n@@ -54,13 +54,10 @@ assert_valid() const\n   std::cout << \"av1\" << std::endl;\n \n   if (m_a_values == NULL || m_end_it == NULL || m_size == 0)\n-    PB_DS_DBG_ASSERT(m_a_values == NULL&&  m_end_it == NULL&& \n-\t\t     m_size == 0);\n+    _GLIBCXX_DEBUG_ASSERT(m_a_values == NULL&&  m_end_it == NULL && m_size == 0);\n \n   std::cout << \"av2\" << std::endl;\n-\n   assert_iterators();\n-\n   std::cout << \"av3\" << std::endl;\n }\n \n@@ -70,40 +67,24 @@ PB_DS_CLASS_C_DEC::\n assert_iterators() const\n {\n   map_debug_base::check_size(m_size);\n-\n   size_type iterated_num = 0;\n-\n   const_iterator prev_it = end();\n-\n-  PB_DS_DBG_ASSERT( m_end_it == m_a_values + m_size);\n-\n+  _GLIBCXX_DEBUG_ASSERT( m_end_it == m_a_values + m_size);\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;\n-\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n-\t\t\t\t\t\t      PB_DS_V2F(*it));)\n-\n-        PB_DS_DBG_ASSERT(lower_bound(\n-\t\t\t\t     PB_DS_V2F(*it)) == it);\n-\n-      const_iterator upper_bound_it = upper_bound(\n-\t\t\t\t\t\t  PB_DS_V2F(*it));\n-\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(*it));)\n+      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n+      const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*it));\n       --upper_bound_it;\n-\n-      PB_DS_DBG_ASSERT(upper_bound_it == it);\n-\n+      _GLIBCXX_DEBUG_ASSERT(upper_bound_it == it);\n       if (prev_it != end())\n-\tPB_DS_DBG_ASSERT(Cmp_Fn::operator()(\n-\t\t\t\t\t    PB_DS_V2F(*prev_it),\n-\t\t\t\t\t    PB_DS_V2F(*it)));\n-\n+\t_GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n+\t\t\t\t\t\t PB_DS_V2F(*it)));\n       prev_it = it;\n     }\n-\n-  PB_DS_DBG_ASSERT(iterated_num == m_size);\n+  _GLIBCXX_DEBUG_ASSERT(iterated_num == m_size);\n }\n \n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#endif \n "}, {"sha": "c6ff3531143b73f665dc4dc5602062fc146a355b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,11 +49,11 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     if (m_size == 0)\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  return;\n       }\n@@ -64,15 +64,15 @@ clear()\n         cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n       }\n \n-  PB_DS_DBG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n \n     m_a_values = NULL;\n \n   m_size = 0;\n \n   m_end_it = m_a_values;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -81,7 +81,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_throw_prob_adjustor adjust(m_size);\n@@ -112,7 +112,7 @@ erase_if(Pred pred)\n \n   cond_dtor<size_type> cd(a_new_values, target_it, new_size);\n \n-  PB_DS_DBG_ONLY(map_debug_base::clear());\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear());\n \n   for (source_it = begin(); source_it != m_end_it; ++source_it)\n     {\n@@ -122,7 +122,7 @@ erase_if(Pred pred)\n \t\t\t\t  static_cast<const void* >(target_it)))\n \t    value_type(*source_it);\n \n-\t  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n+\t  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(\n \t\t\t\t\t\t    PB_DS_V2F(*source_it)));\n \n \t  ++target_it;\n@@ -145,7 +145,7 @@ erase_if(Pred pred)\n \n   update(node_begin(), (node_update* )this);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (num_val_ersd);\n }\n@@ -156,19 +156,19 @@ It\n PB_DS_CLASS_C_DEC::\n erase_imp(It it)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     if (it == end())\n       return end();\n \n-  PB_DS_DBG_ONLY(\n+  _GLIBCXX_DEBUG_ONLY(\n \t\t PB_DS_CLASS_C_DEC::check_key_exists(PB_DS_V2F(*it));)\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_throw_prob_adjustor adjust(m_size);\n #endif // #ifdef PB_DS_REGRESSION\n \n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n \n   value_vector a_values = s_value_alloc.allocate(m_size - 1);\n \n@@ -179,14 +179,14 @@ erase_imp(It it)\n \n   cond_dtor<size_type> cd(a_values, target_it, m_size - 1);\n \n-  PB_DS_DBG_ONLY(size_type cnt = 0;)\n+  _GLIBCXX_DEBUG_ONLY(size_type cnt = 0;)\n \n     while (source_it != source_end_it)\n       {\n         if (source_it != it)\n \t  {\n-            PB_DS_DBG_ONLY(++cnt;)\n-\t      PB_DS_DBG_ASSERT(cnt != m_size);\n+            _GLIBCXX_DEBUG_ONLY(++cnt;)\n+\t      _GLIBCXX_DEBUG_ASSERT(cnt != m_size);\n \n             new (const_cast<void* >(\n \t\t\t\t    static_cast<const void* >(target_it)))\n@@ -200,13 +200,13 @@ erase_imp(It it)\n         ++source_it;\n       }\n \n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n \n   reallocate_metadata((node_update* )this, m_size - 1);\n \n   cd.set_no_action();\n \n-  PB_DS_DBG_ONLY(\n+  _GLIBCXX_DEBUG_ONLY(\n \t\t PB_DS_CLASS_C_DEC::erase_existing(PB_DS_V2F(*it));)\n     {\n       cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n@@ -220,7 +220,7 @@ erase_imp(It it)\n \n   update(node_begin(), (node_update* )this);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (It(ret_it));\n }"}, {"sha": "bb7c4dc0153bc120fa1611eb75517a9db59c1956", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (m_size);\n }"}, {"sha": "719a824dfc932d733bcebd6bae3cbbe8cc25e934", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/node_iterators.hpp", "status": "modified", "additions": 24, "deletions": 68, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fnode_iterators.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,11 +47,9 @@\n #ifndef PB_DS_OV_TREE_NODE_ITERATORS_HPP\n #define PB_DS_OV_TREE_NODE_ITERATORS_HPP\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n #include <ext/pb_ds/tag_and_trait.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n@@ -60,25 +58,11 @@ namespace pb_ds\n \n #define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n     typedef\t\t\t\t\t\t\t\t\\\n-    static_assert_dumclass<\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tsizeof(static_assert<(bool)(E)>)> \\\n+    static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> \\\n     UNIQUE##static_assert_type\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X);\n-#define PB_DS_DBG_VERIFY(X) PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_OV_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) ((void)0)\n-#define PB_DS_DBG_VERIFY(X) X\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n-\n #define PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC\t\t\t\\\n-    ov_tree_node_const_it_<\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tMetadata_Type,\t\\\n-\t\t\t\t\t\tAllocator>\n+    ov_tree_node_const_it_<Value_Type, Metadata_Type, Allocator>\n \n     // Const node reference.\n     template<typename Value_Type, typename Metadata_Type, class Allocator>\n@@ -109,8 +93,7 @@ namespace pb_ds\n       inline static Ptr\n       mid_pointer(Ptr p_begin, Ptr p_end)\n       {\n-\tPB_DS_DBG_ASSERT(p_end >= p_begin);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(p_end >= p_begin);\n \treturn (p_begin + (p_end - p_begin) / 2);\n       }\n \n@@ -146,47 +129,36 @@ namespace pb_ds\n \n     public:\n       inline\n-      ov_tree_node_const_it_(const_pointer p_nd = NULL,  const_pointer p_begin_nd = NULL,  const_pointer p_end_nd = NULL,  const_metadata_pointer p_metadata = NULL) : m_p_value(const_cast<pointer>(p_nd)),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       m_p_begin_value(const_cast<pointer>(p_begin_nd)),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       m_p_end_value(const_cast<pointer>(p_end_nd)),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       m_p_metadata(p_metadata)\n+      ov_tree_node_const_it_(const_pointer p_nd = NULL,  const_pointer p_begin_nd = NULL,  const_pointer p_end_nd = NULL,  const_metadata_pointer p_metadata = NULL) : m_p_value(const_cast<pointer>(p_nd)), m_p_begin_value(const_cast<pointer>(p_begin_nd)), m_p_end_value(const_cast<pointer>(p_end_nd)), m_p_metadata(p_metadata)\n       { }\n \n       inline const_reference\n       operator*() const\n-      {\n-\treturn (m_p_value);\n-      }\n+      { return m_p_value; }\n \n       inline const_metadata_reference\n       get_metadata() const\n       {\n \tenum\n \t  {\n-\t    has_metadata =\n-\t    !is_same<\n-\t    Metadata_Type,\n-\t    null_node_metadata>::value\n+\t    has_metadata = !is_same<Metadata_Type, null_node_metadata>::value\n \t  };\n \n \tPB_DS_STATIC_ASSERT(should_have_metadata, has_metadata);\n-\n-\tPB_DS_DBG_ASSERT(m_p_metadata != NULL);\n-\n-\treturn (*m_p_metadata);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_metadata != NULL);\n+\treturn *m_p_metadata;\n       }\n \n       inline this_type\n       get_l_child() const\n       {\n \tif (m_p_begin_value == m_p_value)\n-\t  return (this_type(                m_p_begin_value,  m_p_begin_value,  m_p_begin_value));\n+\t  return (this_type(m_p_begin_value, m_p_begin_value, m_p_begin_value));\n \n \tconst_metadata_pointer p_begin_metadata =\n \t  m_p_metadata - (m_p_value - m_p_begin_value);\n \n-\treturn (this_type(\n-\t\t\t  mid_pointer(m_p_begin_value, m_p_value),\n+\treturn (this_type(mid_pointer(m_p_begin_value, m_p_value),\n \t\t\t  m_p_begin_value,\n \t\t\t  m_p_value,\n \t\t\t  mid_pointer(p_begin_metadata, m_p_metadata)));\n@@ -196,15 +168,14 @@ namespace pb_ds\n       get_r_child() const\n       {\n \tif (m_p_value == m_p_end_value)\n-\t  return (this_type(                m_p_end_value,  m_p_end_value,  m_p_end_value));\n+\t  return (this_type(m_p_end_value,  m_p_end_value,  m_p_end_value));\n \n \tconst_metadata_pointer p_end_metadata =\n \t  m_p_metadata + (m_p_end_value - m_p_value);\n \n-\treturn (this_type(\n-\t\t\t  mid_pointer(m_p_value + 1, m_p_end_value),\n+\treturn (this_type(mid_pointer(m_p_value + 1, m_p_end_value),\n \t\t\t  m_p_value + 1,\n-\t\t\t  m_p_end_value,(m_p_metadata == NULL)?\n+\t\t\t  m_p_end_value,(m_p_metadata == NULL) ?\n \t\t\t  NULL : mid_pointer(m_p_metadata + 1, p_end_metadata)));\n       }\n \n@@ -220,14 +191,12 @@ namespace pb_ds\n \tif (is_other_end)\n \t  return (is_end);\n \n-\treturn (m_p_value == other.m_p_value);\n+\treturn m_p_value == other.m_p_value;\n       }\n \n       inline bool\n       operator!=(const this_type& other) const\n-      {\n-\treturn (!operator==(other));\n-      }\n+      { return !operator==(other); }\n \n     public:\n       pointer m_p_value;\n@@ -238,10 +207,7 @@ namespace pb_ds\n     };\n \n #define PB_DS_OV_TREE_NODE_ITERATOR_C_DEC\t\t\t\\\n-    ov_tree_node_it_<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tMetadata_Type,\t\\\n-\t\t\t\t\t\tAllocator>\n+    ov_tree_node_it_<Value_Type, Metadata_Type, Allocator>\n \n     // Node reference.\n     template<typename Value_Type, typename Metadata_Type, class Allocator>\n@@ -292,22 +258,19 @@ namespace pb_ds\n       // Access.\n       inline reference\n       operator*() const\n-      {\n-\treturn (reference(base_type::m_p_value));\n-      }\n+      { return reference(base_type::m_p_value); }\n \n       // Returns the node reference associated with the left node.\n       inline ov_tree_node_it_\n       get_l_child() const\n       {\n \tif (base_type::m_p_begin_value == base_type::m_p_value)\n-\t  return (this_type(                base_type::m_p_begin_value,  base_type::m_p_begin_value,  base_type::m_p_begin_value));\n+\t  return (this_type(base_type::m_p_begin_value,  base_type::m_p_begin_value,  base_type::m_p_begin_value));\n \n \tconst_metadata_pointer p_begin_metadata =\n \t  base_type::m_p_metadata - (base_type::m_p_value - base_type::m_p_begin_value);\n \n-\treturn (this_type(\n-\t\t\t  base_type::mid_pointer(base_type::m_p_begin_value, base_type::m_p_value),\n+\treturn (this_type(base_type::mid_pointer(base_type::m_p_begin_value, base_type::m_p_value),\n \t\t\t  base_type::m_p_begin_value,\n \t\t\t  base_type::m_p_value,\n \t\t\t  base_type::mid_pointer(p_begin_metadata, base_type::m_p_metadata)));\n@@ -318,13 +281,12 @@ namespace pb_ds\n       get_r_child() const\n       {\n \tif (base_type::m_p_value == base_type::m_p_end_value)\n-\t  return (this_type(                base_type::m_p_end_value,  base_type::m_p_end_value,  base_type::m_p_end_value));\n+\t  return (this_type(base_type::m_p_end_value,  base_type::m_p_end_value,  base_type::m_p_end_value));\n \n \tconst_metadata_pointer p_end_metadata =\n \t  base_type::m_p_metadata + (base_type::m_p_end_value - base_type::m_p_value);\n \n-\treturn (this_type(\n-\t\t\t  base_type::mid_pointer(base_type::m_p_value + 1, base_type::m_p_end_value),\n+\treturn (this_type(base_type::mid_pointer(base_type::m_p_value + 1, base_type::m_p_end_value),\n \t\t\t  base_type::m_p_value + 1,\n \t\t\t  base_type::m_p_end_value,(base_type::m_p_metadata == NULL)?\n \t\t\t  NULL : base_type::mid_pointer(base_type::m_p_metadata + 1, p_end_metadata)));\n@@ -333,16 +295,10 @@ namespace pb_ds\n     };\n \n #undef PB_DS_OV_TREE_NODE_ITERATOR_C_DEC\n-\n #undef PB_DS_OV_TREE_CONST_NODE_ITERATOR_C_DEC\n-\n #undef PB_DS_STATIC_ASSERT\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace detail\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_OV_TREE_NODE_ITERATORS_HPP\n+#endif "}, {"sha": "242169cd7ba513ff8be458b198be2589ac5b853c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 89, "deletions": 201, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -58,105 +58,72 @@\n #include <algorithm>\n #include <vector>\n #include <assert.h>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X);\n-#define PB_DS_DBG_VERIFY(X) PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_OV_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) ((void)0)\n-#define PB_DS_DBG_VERIFY(X) X\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Cmp_Fn,\t\t\\\n-\t\t\t\t\t\tclass Node_And_It_Traits, \\\n-\t\t\t\t\t\tclass Allocator>\n+#define PB_DS_CLASS_T_DEC \\\n+    template<typename Key, typename Mapped, class Cmp_Fn, \\\n+\t     class Node_And_It_Traits, class Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-#define PB_DS_OV_TREE_CLASS_NAME\t\t\\\n-    ov_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#define PB_DS_OV_TREE_CLASS_NAME ov_tree_data_\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_OV_TREE_CLASS_NAME\t\t\\\n-    ov_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#define PB_DS_OV_TREE_CLASS_NAME ov_tree_no_data_\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_const_node_iterator_data_\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#else \n #define PB_DS_CONST_NODE_ITERATOR_NAME ov_tree_const_node_iterator_no_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    PB_DS_OV_TREE_CLASS_NAME<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tNode_And_It_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_TYPES_TRAITS_C_DEC\t\t\t\t\\\n-    types_traits<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tKey,\t\t\\\n-\t\t\t\t\t\tMapped,\t\t\\\n-\t\t\t\t\t\tAllocator,\t\\\n-\t\t\t\t\t\tfalse>\n-\n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n-#define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\teq_by_less<Key, Cmp_Fn>, \\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif \n+\n+#define PB_DS_CLASS_C_DEC \\\n+   PB_DS_OV_TREE_CLASS_NAME<Key, Mapped, Cmp_Fn, Node_And_It_Traits, Allocator>\n+\n+#define PB_DS_TYPES_TRAITS_C_DEC \\\n+    types_traits<Key, Mapped, Allocator, false>\n+\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_MAP_DEBUG_BASE_C_DEC \\\n+    map_debug_base<Key, eq_by_less<Key, Cmp_Fn>, \\\n+       \ttypename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #ifdef PB_DS_TREE_TRACE\n-#define PB_DS_TREE_TRACE_BASE_C_DEC\t\t\t\t\t\\\n-    tree_trace_base<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\ttypename Node_And_It_Traits::const_node_iterator, \\\n-\t\t\t\t\t\t\t\t\ttypename Node_And_It_Traits::node_iterator, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\tfalse, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#define PB_DS_TREE_TRACE_BASE_C_DEC \\\n+    tree_trace_base<typename Node_And_It_Traits::const_node_iterator, \\\n+\t\t    typename Node_And_It_Traits::node_iterator, \\\n+\t\t    Cmp_Fn, false, Allocator>\n+#endif \n \n     // Ordered-vector tree associative-container.\n-    template<typename Key,\n-\t     typename Mapped,\n-\t     class Cmp_Fn,\n-\t     class Node_And_It_Traits,\n-\t     class Allocator>\n+    template<typename Key, typename Mapped, class Cmp_Fn,\n+\t     class Node_And_It_Traits, class Allocator>\n     class PB_DS_OV_TREE_CLASS_NAME :\n-#ifdef PB_DS_OV_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       protected PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#endif \n #ifdef PB_DS_TREE_TRACE\n       public PB_DS_TREE_TRACE_BASE_C_DEC,\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n       public Cmp_Fn,\n       public Node_And_It_Traits::node_update,\n       public PB_DS_TYPES_TRAITS_C_DEC\n@@ -179,9 +146,9 @@ namespace pb_ds\n \n       typedef Cmp_Fn cmp_fn_base;\n \n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif \n \n       typedef typename PB_DS_TYPES_TRAITS_C_DEC::pointer mapped_pointer_;\n \n@@ -268,9 +235,9 @@ namespace pb_ds\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       typedef pointer point_iterator;\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#else \n       typedef const_point_iterator point_iterator;\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n       typedef const_point_iterator const_iterator;\n \n@@ -322,79 +289,55 @@ namespace pb_ds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  point_iterator it = lower_bound(r_key);\n-\n-\tif (it != end()&&  !Cmp_Fn::operator()(\n-\t\t\t\t\t       r_key,\n-\t\t\t\t\t       PB_DS_V2F(*it)))\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tpoint_iterator it = lower_bound(r_key);\n+\tif (it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n-\t    PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t      return (it->second);\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t     return it->second;\n \t  }\n \n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return (insert_new_val(it,\n-\t\t\t\t std::make_pair(\n-\t\t\t\t\t\tr_key,\n-\t\t\t\t\t\tmapped_type()))->second);\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn (insert_new_val(it, std::make_pair(r_key, mapped_type()))->second);\n+#else \n \tinsert(r_key);\n-\n-\treturn (traits_base::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\treturn traits_base::s_null_mapped;\n+#endif \n       }\n \n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_value)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  const_key_reference r_key = PB_DS_V2F(r_value);\n-\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tconst_key_reference r_key = PB_DS_V2F(r_value);\n \tpoint_iterator it = lower_bound(r_key);\n \n-\tif (it != end()&&  !Cmp_Fn::operator()(\n-\t\t\t\t\t       r_key,\n-\t\t\t\t\t       PB_DS_V2F(*it)))\n+\tif (it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n-\t    PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n-\t    return (std::make_pair(it, false));\n+\t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n+\t    return std::make_pair(it, false);\n \t  }\n \n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return (std::make_pair(insert_new_val(it, r_value), true));\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn std::make_pair(insert_new_val(it, r_value), true);\n       }\n \n       inline point_iterator\n       lower_bound(const_key_reference r_key)\n       {\n \tpointer it = m_a_values;\n-\n \tpointer e_it = m_a_values + m_size;\n-\n \twhile (it != e_it)\n \t  {\n \t    pointer mid_it = it + ((e_it - it) >> 1);\n-\n-\t    if (cmp_fn_base::operator()(\n-\t\t\t\t\tPB_DS_V2F(*mid_it),\n-\t\t\t\t\tr_key))\n+\t    if (cmp_fn_base::operator()(PB_DS_V2F(*mid_it), r_key))\n \t      it = ++mid_it;\n \t    else\n \t      e_it = mid_it;\n \t  }\n-\n-\treturn (it);\n+\treturn it;\n       }\n \n       inline const_point_iterator\n@@ -407,53 +350,38 @@ namespace pb_ds\n       upper_bound(const_key_reference r_key)\n       {\n \titerator pot_it = lower_bound(r_key);\n-\n-\tif (pot_it != end()&&  !Cmp_Fn::operator()(\n-\t\t\t\t\t\t   r_key,\n-\t\t\t\t\t\t   PB_DS_V2F(*pot_it)))\n+\tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \t    return (++pot_it);\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n-\n-\treturn (pot_it);\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+\treturn pot_it;\n       }\n \n       inline const_point_iterator\n       upper_bound(const_key_reference r_key) const\n-      {\n-\treturn (const_cast<PB_DS_CLASS_C_DEC& >(*this).upper_bound(r_key));\n-      }\n+      { return const_cast<PB_DS_CLASS_C_DEC& >(*this).upper_bound(r_key); }\n \n       inline point_iterator\n       find(const_key_reference r_key)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  iterator pot_it = lower_bound(r_key);\n-\n-\tif (pot_it != end()&&  !Cmp_Fn::operator()(\n-\t\t\t\t\t\t   r_key,\n-\t\t\t\t\t\t   PB_DS_V2F(*pot_it)))\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\titerator pot_it = lower_bound(r_key);\n+\tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n-\n+\t    _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \t    return (pot_it);\n \t  }\n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n-\n-\treturn (end());\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key));\n+\treturn end();\n       }\n \n       inline const_point_iterator\n       find(const_key_reference r_key) const\n-      {\n-\treturn (const_cast<PB_DS_CLASS_C_DEC& >(*this).find(r_key));\n-      }\n+      { return (const_cast<PB_DS_CLASS_C_DEC& >(*this).find(r_key)); }\n \n       bool\n       erase(const_key_reference r_key);\n@@ -464,9 +392,7 @@ namespace pb_ds\n \n       inline iterator\n       erase(iterator it)\n-      {\n-\treturn (erase_imp<iterator>(it));\n-      }\n+      { return erase_imp<iterator>(it); }\n \n       void\n       clear();\n@@ -479,27 +405,19 @@ namespace pb_ds\n \n       inline iterator\n       begin()\n-      {\n-\treturn (m_a_values);\n-      }\n+      { return m_a_values; }\n \n       inline const_iterator\n       begin() const\n-      {\n-\treturn (m_a_values);\n-      }\n+      { return m_a_values; }\n \n       inline iterator\n       end()\n-      {\n-\treturn (m_end_it);\n-      }\n+      { return m_end_it; }\n \n       inline const_iterator\n       end() const\n-      {\n-\treturn (m_end_it);\n-      }\n+      { return m_end_it; }\n \n       inline const_node_iterator\n       node_begin() const;\n@@ -544,22 +462,19 @@ namespace pb_ds\n       inline static Ptr\n       mid_pointer(Ptr p_begin, Ptr p_end)\n       {\n-\tPB_DS_DBG_ASSERT(p_end >= p_begin);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(p_end >= p_begin);\n \treturn (p_begin + (p_end - p_begin) / 2);\n       }\n \n       inline iterator\n       insert_new_val(iterator it, const_reference r_value)\n       {\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n #ifdef PB_DS_REGRESSION\n \t  typename Allocator::group_throw_prob_adjustor adjust(m_size);\n-#endif // #ifdef PB_DS_REGRESSION\n+#endif \n \n-\tPB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t\tPB_DS_V2F(r_value)));\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_value)));\n \n \tvalue_vector a_values = s_value_alloc.allocate(m_size + 1);\n \n@@ -569,65 +484,47 @@ namespace pb_ds\n \titerator ret_it;\n \n \tcond_dtor<size_type> cd(a_values, target_it, m_size + 1);\n-\n \twhile (source_it != it)\n \t  {\n-\t    new (const_cast<void* >(\n-\t\t\t\t    static_cast<const void* >(target_it)))\n+\t    new (const_cast<void* >(static_cast<const void* >(target_it)))\n \t      value_type(*source_it++);\n-\n \t    ++target_it;\n \t  }\n \n-\tnew (const_cast<void* >(\n-\t\t\t\tstatic_cast<const void* >(ret_it = target_it)))\n+\tnew (const_cast<void* >(static_cast<const void* >(ret_it = target_it)))\n \t  value_type(r_value);\n-\n \t++target_it;\n \n \twhile (source_it != source_end_it)\n \t  {\n-\t    new (const_cast<void* >(\n-\t\t\t\t    static_cast<const void* >(target_it)))\n+\t    new (const_cast<void* >(static_cast<const void* >(target_it)))\n \t      value_type(*source_it++);\n-\n \t    ++target_it;\n \t  }\n \n \treallocate_metadata((node_update* )this, m_size + 1);\n-\n \tcd.set_no_action();\n-\n \tif (m_size != 0)\n \t  {\n \t    cond_dtor<size_type> cd1(m_a_values, m_end_it, m_size);\n \t  }\n \n \t++m_size;\n-\n \tm_a_values = a_values;\n-\n \tm_end_it = m_a_values + m_size;\n-\n-\tPB_DS_DBG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t\t  PB_DS_V2F(r_value)));\n-\n+\t_GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_value)));\n \tupdate(node_begin(), (node_update* )this);\n-\n-\tPB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-\t  return (ret_it);\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\treturn ret_it;\n       }\n \n-#ifdef PB_DS_OV_TREE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n       void\n       assert_iterators() const;\n-\n-#endif // #ifdef PB_DS_OV_TREE_DEBUG_\n+#endif \n \n       template<typename It>\n       It\n@@ -669,27 +566,18 @@ namespace pb_ds\n #include <ext/pb_ds/detail/bin_search_tree_/policy_access_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_OV_TREE_CLASS_NAME\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n-\n #ifdef PB_DS_TREE_TRACE\n #undef PB_DS_TREE_TRACE_BASE_C_DEC\n-#endif // #ifdef PB_DS_TREE_TRACE\n+#endif \n \n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n #undef PB_DS_CONST_NODE_ITERATOR_NAME\n \n   } // namespace detail"}, {"sha": "e20086b6718eabaa8e4bd36f29f14dcd5155e4f9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,15 +49,15 @@ void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     if (m_size == 0)\n       {\n         other.clear();\n \n-        PB_DS_DBG_ONLY(assert_valid();)\n-\t  PB_DS_DBG_ONLY(other.assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n \t  return;\n       }\n@@ -66,8 +66,8 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n     {\n       value_swap(other);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return;\n     }\n@@ -76,8 +76,8 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \t\t\t  r_key,\n \t\t\t  PB_DS_V2F(*(end() - 1))))\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return;\n     }\n@@ -86,13 +86,13 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n     {\n       value_swap(other);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return;\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n \n     iterator it = upper_bound(r_key);\n \n@@ -106,7 +106,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \n   // No exceptions from this point.\n \n-  PB_DS_DBG_ONLY(map_debug_base::split(\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(\n \t\t\t\t       r_key,(Cmp_Fn& )(*this),\n \t\t\t\t       other);)\n \n@@ -118,17 +118,17 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \n   value_swap(new_this);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     if (other.m_size == 0)\n       return;\n@@ -168,12 +168,12 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   // No exceptions from this point.\n \n-  PB_DS_DBG_ONLY(map_debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n \n     value_swap(new_this);\n \n   other.clear();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }"}, {"sha": "6534f208604c60a9193a4d03485d52fd6f68ac16", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -53,42 +53,42 @@ copy_from_range(It first_it, It last_it)\n   while (first_it != last_it)\n     push(*(first_it++));\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     PB_DS_BASE_C_DEC::swap(other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "5e6bb373968b59944172c5c1f2255a1521350c55", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,17 +44,16 @@\n  * Contains an implementation class for a pairing heap.\n  */\n \n-#ifdef PB_DS_PAIRING_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  PB_DS_DBG_ASSERT(base_type::m_p_root == NULL ||\n-\t\t   base_type::m_p_root->m_p_next_sibling == NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root == NULL \n+\t\t        || base_type::m_p_root->m_p_next_sibling == NULL);\n   base_type::assert_valid();\n }\n \n-#endif // #ifdef PB_DS_PAIRING_HEAP_DEBUG_\n+#endif "}, {"sha": "038b490b46c1813c42903ca1618956a6d11e7739", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 43, "deletions": 103, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,176 +49,135 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   node_pointer p_new_root = join_node_children(base_type::m_p_root);\n-  PB_DS_DBG_ONLY(assert_node_consistent(p_new_root, false);)\n-\n-    if (p_new_root != NULL)\n-      p_new_root->m_p_prev_or_parent = NULL;\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_new_root, false);)\n+  if (p_new_root != NULL)\n+    p_new_root->m_p_prev_or_parent = NULL;\n \n   base_type::actual_erase_node(base_type::m_p_root);\n-\n   base_type::m_p_root = p_new_root;\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n   remove_node(it.m_p_nd);\n-\n   base_type::actual_erase_node(it.m_p_nd);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n remove_node(node_pointer p_nd)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n   node_pointer p_new_child = join_node_children(p_nd);\n \n-#ifdef PB_DS_PAIRING_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   if (p_new_child != NULL)\n     base_type::assert_node_consistent(p_new_child, false);\n-#endif // #ifdef PB_DS_PAIRING_HEAP_DEBUG_\n+#endif \n \n   if (p_nd == base_type::m_p_root)\n     {\n       if (p_new_child != NULL)\n \tp_new_child->m_p_prev_or_parent = NULL;\n-\n       base_type::m_p_root = p_new_child;\n-\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false);)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false);)\n+      return;\n     }\n \n-  PB_DS_DBG_ASSERT(p_nd->m_p_prev_or_parent != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent != NULL);\n   if (p_nd->m_p_prev_or_parent->m_p_l_child == p_nd)\n     {\n       if (p_new_child != NULL)\n         {\n \t  p_new_child->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n \t  p_new_child->m_p_next_sibling = p_nd->m_p_next_sibling;\n-\n \t  if (p_new_child->m_p_next_sibling != NULL)\n \t    p_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n-\n \t  p_nd->m_p_prev_or_parent->m_p_l_child = p_new_child;\n-\n-\t  PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n-\n-            return;\n+\t  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+          return;\n         }\n \n       p_nd->m_p_prev_or_parent->m_p_l_child = p_nd->m_p_next_sibling;\n-\n       if (p_nd->m_p_next_sibling != NULL)\n \tp_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+      return;\n     }\n \n   if (p_new_child != NULL)\n     {\n       p_new_child->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n       p_new_child->m_p_next_sibling = p_nd->m_p_next_sibling;\n-\n       if (p_new_child->m_p_next_sibling != NULL)\n \tp_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n-\n       p_new_child->m_p_prev_or_parent->m_p_next_sibling = p_new_child;\n-\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+      return;\n     }\n \n   p_nd->m_p_prev_or_parent->m_p_next_sibling = p_nd->m_p_next_sibling;\n-\n   if (p_nd->m_p_next_sibling != NULL)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n-  PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+}\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n join_node_children(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n   node_pointer p_ret = p_nd->m_p_l_child;\n-\n   if (p_ret == NULL)\n     return NULL;\n-\n   while (p_ret->m_p_next_sibling != NULL)\n     p_ret = forward_join(p_ret, p_ret->m_p_next_sibling);\n-\n   while (p_ret->m_p_prev_or_parent != p_nd)\n     p_ret = back_join(p_ret->m_p_prev_or_parent, p_ret);\n-\n-  PB_DS_DBG_ONLY(assert_node_consistent(p_ret, false);)\n-\n-    return p_ret;\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_ret, false);)\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n forward_join(node_pointer p_nd, node_pointer p_next)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(p_nd->m_p_next_sibling == p_next);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == p_next);\n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n       p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n       base_type::make_child_of(p_nd, p_next);\n-\n-      return p_next->m_p_next_sibling == NULL?\n-\tp_next :\n-\tp_next->m_p_next_sibling;\n+      return p_next->m_p_next_sibling == NULL \n+\t? p_next : p_next->m_p_next_sibling;\n     }\n \n   if (p_next->m_p_next_sibling != NULL)\n     {\n       p_next->m_p_next_sibling->m_p_prev_or_parent = p_nd;\n-\n       p_nd->m_p_next_sibling = p_next->m_p_next_sibling;\n-\n       base_type::make_child_of(p_next, p_nd);\n-\n       return p_nd->m_p_next_sibling;\n     }\n \n   p_nd->m_p_next_sibling = NULL;\n-\n   base_type::make_child_of(p_next, p_nd);\n-  PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd, false));\n-\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n   return p_nd;\n }\n \n@@ -227,24 +186,20 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n back_join(node_pointer p_nd, node_pointer p_next)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(p_next->m_p_next_sibling == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == NULL);\n \n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n       p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-\n       base_type::make_child_of(p_nd, p_next);\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_next, false));\n-\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_next, false));\n       return p_next;\n     }\n \n   p_nd->m_p_next_sibling = NULL;\n-\n   base_type::make_child_of(p_next, p_nd);\n-  PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd, false));\n-\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n   return p_nd;\n }\n \n@@ -254,49 +209,34 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     if (base_type::empty())\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return 0;\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\treturn 0;\n       }\n-\n   base_type::to_linked_list();\n-\n   node_pointer p_out = base_type::prune(pred);\n-\n   size_type ersd = 0;\n-\n   while (p_out != NULL)\n     {\n       ++ersd;\n-\n       node_pointer p_next = p_out->m_p_next_sibling;\n-\n       base_type::actual_erase_node(p_out);\n-\n       p_out = p_next;\n     }\n \n   node_pointer p_cur = base_type::m_p_root;\n-\n   base_type::m_p_root = NULL;\n-\n   while (p_cur != NULL)\n     {\n       node_pointer p_next = p_cur->m_p_next_sibling;\n-\n       p_cur->m_p_l_child = p_cur->m_p_next_sibling = p_cur->m_p_prev_or_parent = NULL;\n \n       push_imp(p_cur);\n-\n       p_cur = p_next;\n     }\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    return ersd;\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  return ersd;\n }\n "}, {"sha": "f74b0bbbf3c994a7576f918cacff18727a4e7fa6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,8 +49,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   return base_type::m_p_root->m_value;\n }"}, {"sha": "41ff3918b85be6fbda5a4a21793a57ab3e09f387", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,13 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     node_pointer p_new_nd = base_type::get_new_node_for_insert(r_val);\n \n   push_imp(p_new_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return point_iterator(p_new_nd);\n }\n@@ -78,14 +78,14 @@ push_imp(node_pointer p_nd)\n       p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = NULL;\n \n       base_type::make_child_of(base_type::m_p_root, p_nd);\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(p_nd, false));\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n \n       base_type::m_p_root = p_nd;\n     }\n   else\n     {\n       base_type::make_child_of(p_nd, base_type::m_p_root);\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n     }\n }\n \n@@ -94,14 +94,14 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     remove_node(it.m_p_nd);\n \n   it.m_p_nd->m_value = r_new_val;\n \n   push_imp(it.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n "}, {"sha": "647547497964915438e8bec47114b06ec5ca7d7f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -55,47 +55,35 @@\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_PAIRING_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAIRING_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAIRING_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    pairing_heap_<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    pairing_heap_<Value_Type, Cmp_Fn, Allocator>\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_BASE_C_DEC \\\n     left_child_next_sibling_heap_<\t\t\t\\\n \t\t\t\t\t\t\t\t\tValue_Type, \\\n \t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n \t\t\t\t\t\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n \t\t\t\t\t\t\t\t\tAllocator, \\\n \t\t\t\t\t\t\t\t\tfalse>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#else \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n     left_child_next_sibling_heap_<\t\t\t\\\n \t\t\t\t\t\t\t\t\tValue_Type, \\\n \t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n \t\t\t\t\t\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n \t\t\t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#endif \n \n     /**\n      * class description = \"P4ri|\\|g h3ap$\">\n@@ -195,7 +183,7 @@ namespace pb_ds\n       void\n       copy_from_range(It first_it, It last_it);\n \n-#ifdef PB_DS_PAIRING_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n #endif\n@@ -229,9 +217,6 @@ namespace pb_ds\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_BASE_C_DEC\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n \n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "29b802500acfc11495e40f2ebe1b7393c32f1bc3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,15 +50,15 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     other.clear();\n \n   if (base_type::empty())\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return;\n     }\n@@ -69,7 +69,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   while (p_out != NULL)\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_size > 0);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n \n       ++other.m_size;\n@@ -83,7 +83,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n@@ -100,22 +100,22 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_cur = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     if (other.m_p_root == NULL)\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n-\t  PB_DS_DBG_ONLY(other.assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n \t  return;\n       }\n@@ -125,22 +125,22 @@ join(PB_DS_CLASS_C_DEC& other)\n   else if (Cmp_Fn::operator()(base_type::m_p_root->m_value, other.m_p_root->m_value))\n     {\n       base_type::make_child_of(base_type::m_p_root, other.m_p_root);\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(other.m_p_root, false));\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(other.m_p_root, false));\n \n       base_type::m_p_root = other.m_p_root;\n     }\n   else\n     {\n       base_type::make_child_of(other.m_p_root, base_type::m_p_root);\n-      PB_DS_DBG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n+      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n     }\n \n   base_type::m_size += other.m_size;\n \n   other.m_p_root = NULL;\n   other.m_size = 0;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n "}, {"sha": "79dc307258a3615566cc0f20accaf158be90873c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/child_iterator.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fchild_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -95,15 +95,15 @@ struct iterator : public const_iterator\n   node_pointer_pointer\n   operator->()\n   {\n-    PB_DS_DBG_ONLY(const_iterator::assert_referencible();)\n+    _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n \n       return (const_iterator::m_p_p_cur);\n   }\n \n   node_pointer\n   operator*()\n   {\n-    PB_DS_DBG_ONLY(const_iterator::assert_referencible();)\n+    _GLIBCXX_DEBUG_ONLY(const_iterator::assert_referencible();)\n \n       return (*const_iterator::m_p_p_cur);\n   }"}, {"sha": "cd383755896233747141e36094e1391861cbe36f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/const_child_iterator.hpp", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconst_child_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -59,70 +59,59 @@ struct const_iterator\n \n public:\n   inline\n-  const_iterator(node_pointer_pointer p_p_cur = NULL,  node_pointer_pointer p_p_end = NULL) : m_p_p_cur(p_p_cur),\n-\t\t\t\t\t\t\t\t\t\t\t      m_p_p_end(p_p_end)\n+  const_iterator(node_pointer_pointer p_p_cur = NULL,  \n+\t\t node_pointer_pointer p_p_end = NULL) \n+  : m_p_p_cur(p_p_cur), m_p_p_end(p_p_end)\n   { }\n \n   inline bool\n   operator==(const const_iterator& other) const\n-  {\n-    return (m_p_p_cur == other.m_p_p_cur);\n-  }\n+  { return m_p_p_cur == other.m_p_p_cur; }\n \n   inline bool\n   operator!=(const const_iterator& other) const\n-  {\n-    return (m_p_p_cur != other.m_p_p_cur);\n-  }\n+  { return m_p_p_cur != other.m_p_p_cur; }\n \n   inline const_iterator& \n   operator++()\n   {\n     do\n       ++m_p_p_cur;\n     while (m_p_p_cur != m_p_p_end&& * m_p_p_cur == NULL);\n-\n-    return (*this);\n+    return *this;\n   }\n \n   inline const_iterator\n   operator++(int)\n   {\n     const_iterator ret_it(*this);\n-\n     operator++();\n-\n-    return (ret_it);\n+    return ret_it;\n   }\n \n   const node_pointer_pointer\n   operator->() const\n   {\n-    PB_DS_DBG_ONLY(assert_referencible();)\n-\n-      return (m_p_p_cur);\n+    _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n+    return (m_p_p_cur);\n   }\n \n   const_node_pointer\n   operator*() const\n   {\n-    PB_DS_DBG_ONLY(assert_referencible();)\n-\n-      return (*m_p_p_cur);\n+    _GLIBCXX_DEBUG_ONLY(assert_referencible();)\n+    return (*m_p_p_cur);\n   }\n \n protected:\n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   void\n   assert_referencible() const\n-  {\n-    PB_DS_DBG_ASSERT(m_p_p_cur != m_p_p_end&& * m_p_p_cur != NULL);\n-  }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+  { _GLIBCXX_DEBUG_ASSERT(m_p_p_cur != m_p_p_end&& * m_p_p_cur != NULL); }\n+#endif \n \n public:\n   node_pointer_pointer m_p_p_cur;\n-\n   node_pointer_pointer m_p_p_end;\n };\n "}, {"sha": "5664eb0bef9b2bea82429d1c966aeebb1c98df45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 28, "deletions": 70, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -63,9 +63,8 @@ PB_DS_CLASS_NAME() :\n   m_size(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -75,79 +74,64 @@ PB_DS_CLASS_NAME(const e_access_traits& r_e_access_traits) :\n   m_size(0)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   map_debug_base(other),\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n   synth_e_access_traits(other),\n   node_update(other),\n   m_p_head(s_head_allocator.allocate(1)),\n   m_size(0)\n {\n   initialize();\n-\n   m_size = other.m_size;\n-\n-  PB_DS_DBG_ONLY(other.assert_valid();)\n-\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     if (other.m_p_head->m_p_parent == NULL)\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  return;\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        return;\n       }\n-\n   try\n     {\n-      m_p_head->m_p_parent =\n-\trecursive_copy_node(other.m_p_head->m_p_parent);\n+      m_p_head->m_p_parent = recursive_copy_node(other.m_p_head->m_p_parent);\n     }\n   catch(...)\n     {\n       s_head_allocator.deallocate(m_p_head, 1);\n-\n       throw;\n     }\n \n   m_p_head->m_p_min = leftmost_descendant(m_p_head->m_p_parent);\n   m_p_head->m_p_max = rightmost_descendant(m_p_head->m_p_parent);\n-\n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-\n-    value_swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  value_swap(other);\n   std::swap((e_access_traits& )(*this), (e_access_traits& )other);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(map_debug_base::swap(other);)\n-\n-    std::swap(m_p_head, other.m_p_head);\n-\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::swap(other);)\n+  std::swap(m_p_head, other.m_p_head);\n   std::swap(m_size, other.m_size);\n }\n \n@@ -156,7 +140,6 @@ PB_DS_CLASS_C_DEC::\n ~PB_DS_CLASS_NAME()\n {\n   clear();\n-\n   s_head_allocator.deallocate(m_p_head, 1);\n }\n \n@@ -166,12 +149,9 @@ PB_DS_CLASS_C_DEC::\n initialize()\n {\n   new (m_p_head) head();\n-\n   m_p_head->m_p_parent = NULL;\n-\n   m_p_head->m_p_min = m_p_head;\n   m_p_head->m_p_max = m_p_head;\n-\n   m_size = 0;\n }\n \n@@ -190,73 +170,51 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n recursive_copy_node(const_node_pointer p_other_nd)\n {\n-  PB_DS_DBG_ASSERT(p_other_nd != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_other_nd != NULL);\n   if (p_other_nd->m_type == pat_trie_leaf_node_type)\n     {\n-      const_leaf_pointer p_other_leaf =\n-\tstatic_cast<const_leaf_pointer>(p_other_nd);\n+      const_leaf_pointer p_other_leaf = static_cast<const_leaf_pointer>(p_other_nd);\n \n       leaf_pointer p_new_lf = s_leaf_allocator.allocate(1);\n-\n       cond_dealtor cond(p_new_lf);\n-\n       new (p_new_lf) leaf(p_other_leaf->value());\n-\n       apply_update(p_new_lf, (node_update* )this);\n-\n       cond.set_no_action_dtor();\n-\n       return (p_new_lf);\n     }\n \n-  PB_DS_DBG_ASSERT(p_other_nd->m_type ==\n-\t\t   pat_trie_internal_node_type);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_other_nd->m_type == pat_trie_internal_node_type);\n   node_pointer a_p_children[internal_node::arr_size];\n-\n   size_type child_i = 0;\n-\n   const_internal_node_pointer p_other_internal_nd =\n     static_cast<const_internal_node_pointer>(p_other_nd);\n \n   typename internal_node::const_iterator child_it =\n     p_other_internal_nd->begin();\n \n   internal_node_pointer p_ret;\n-\n   try\n     {\n       while (child_it != p_other_internal_nd->end())\n \ta_p_children[child_i++] = recursive_copy_node(*(child_it++));\n-\n       p_ret = s_internal_node_allocator.allocate(1);\n     }\n   catch(...)\n     {\n       while (child_i-- > 0)\n \tclear_imp(a_p_children[child_i]);\n-\n       throw;\n     }\n \n-  new (p_ret) internal_node(\n-\t\t\t    p_other_internal_nd->get_e_ind(),\n+  new (p_ret) internal_node(p_other_internal_nd->get_e_ind(),\n \t\t\t    pref_begin(a_p_children[0]));\n \n   --child_i;\n-\n-  PB_DS_DBG_ASSERT(child_i > 1);\n-\n+  _GLIBCXX_DEBUG_ASSERT(child_i > 1);\n   do\n-    p_ret->add_child(\n-\t\t     a_p_children[child_i],\n-\t\t     pref_begin(a_p_children[child_i]),\n-\t\t     pref_end(a_p_children[child_i]),\n-\t\t     this);\n+    p_ret->add_child(a_p_children[child_i], pref_begin(a_p_children[child_i]),\n+\t\t     pref_end(a_p_children[child_i]), this);\n   while (child_i-- > 0);\n-\n   apply_update(p_ret, (node_update* )this);\n-\n-  return (p_ret);\n+  return p_ret;\n }"}, {"sha": "a2253a6a5027df4680d26352336462727688b5eb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains an implementation class for pat_trie_.\n  */\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n@@ -53,25 +53,19 @@ assert_valid() const\n {\n   if (m_p_head->m_p_parent != NULL)\n     m_p_head->m_p_parent->assert_valid(this);\n-\n   assert_iterators();\n-\n   assert_reverse_iterators();\n-\n   if (m_p_head->m_p_parent == NULL)\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_min == m_p_head);\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_max == m_p_head);\n-\n-      PB_DS_DBG_ASSERT(empty());\n-\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_min == m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_max == m_p_head);\n+      _GLIBCXX_DEBUG_ASSERT(empty());\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(m_p_head->m_p_min->m_type == pat_trie_leaf_node_type);\n-  PB_DS_DBG_ASSERT(m_p_head->m_p_max->m_type == pat_trie_leaf_node_type);\n-\n-  PB_DS_DBG_ASSERT(!empty());\n+  _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_min->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_max->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(!empty());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -80,19 +74,14 @@ PB_DS_CLASS_C_DEC::\n assert_iterators() const\n {\n   size_type calc_size = 0;\n-\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++calc_size;\n-\n       map_debug_base::check_key_exists(PB_DS_V2F(*it));\n-\n-      PB_DS_DBG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n-\n-      PB_DS_DBG_ASSERT(--upper_bound(PB_DS_V2F(*it)) == it);\n+      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n+      _GLIBCXX_DEBUG_ASSERT(--upper_bound(PB_DS_V2F(*it)) == it);\n     }\n-\n-  PB_DS_DBG_ASSERT(calc_size == m_size);\n+  _GLIBCXX_DEBUG_ASSERT(calc_size == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -101,19 +90,14 @@ PB_DS_CLASS_C_DEC::\n assert_reverse_iterators() const\n {\n   size_type calc_size = 0;\n-\n   for (const_reverse_iterator it = rbegin(); it != rend(); ++it)\n     {\n       ++calc_size;\n-\n       const_node_pointer p_nd =\n-\tconst_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(\n-\t\t\t\t\t\t\tPB_DS_V2F(*it));\n-\n-      PB_DS_DBG_ASSERT(p_nd == it.m_p_nd);\n+\tconst_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(PB_DS_V2F(*it));\n+      _GLIBCXX_DEBUG_ASSERT(p_nd == it.m_p_nd);\n     }\n-\n-  PB_DS_DBG_ASSERT(calc_size == m_size);\n+  _GLIBCXX_DEBUG_ASSERT(calc_size == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -123,22 +107,17 @@ recursive_count_leafs(const_node_pointer p_nd)\n {\n   if (p_nd == NULL)\n     return (0);\n-\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     return (1);\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n   size_type ret = 0;\n-\n   for (typename internal_node::const_iterator it =\n \t static_cast<const_internal_node_pointer>(p_nd)->begin();\n        it != static_cast<const_internal_node_pointer>(p_nd)->end();\n        ++it)\n     ret += recursive_count_leafs(*it);\n-\n-  return (ret);\n+  return ret;\n }\n \n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n "}, {"sha": "29c76eae4ce378a636f0e085b57117ff8c6d2318", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -53,29 +53,29 @@ erase(const_key_reference r_key)\n \n   if (p_nd == NULL || p_nd->m_type == pat_trie_internal_node_type)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t      r_key));\n \n       return (false);\n     }\n \n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n \n   if (!synth_e_access_traits::equal_keys(\n \t\t\t\t\t PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()),\n \t\t\t\t\t r_key))\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(\n \t\t\t\t\t\t\t      r_key));\n \n       return (false);\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \n   erase_leaf(static_cast<leaf_pointer>(p_nd));\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (true);\n }\n@@ -85,7 +85,7 @@ void\n PB_DS_CLASS_C_DEC::\n erase_fixup(internal_node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) >= 1);\n+  _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) >= 1);\n \n   if (std::distance(p_nd->begin(), p_nd->end()) == 1)\n     {\n@@ -95,7 +95,7 @@ erase_fixup(internal_node_pointer p_nd)\n \tm_p_head->m_p_parent =* p_nd->begin();\n       else\n         {\n-\t  PB_DS_DBG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n \n \t  node_pointer p_new_child =* p_nd->begin();\n \n@@ -114,25 +114,25 @@ erase_fixup(internal_node_pointer p_nd)\n       if (p_parent == m_p_head)\n \treturn;\n \n-      PB_DS_DBG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_parent->m_type == pat_trie_internal_node_type);\n \n       p_nd = static_cast<internal_node_pointer>(p_parent);\n     }\n \n   while (true)\n     {\n-      PB_DS_DBG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) > 1);\n+      _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) > 1);\n \n       p_nd->update_prefixes(this);\n \n       apply_update(p_nd, (node_update* )this);\n \n-      PB_DS_DBG_ONLY(p_nd->assert_valid(this);)\n+      _GLIBCXX_DEBUG_ONLY(p_nd->assert_valid(this);)\n \n         if (p_nd->m_p_parent->m_type == pat_trie_head_node_type)\n \t  return;\n \n-      PB_DS_DBG_ASSERT(p_nd->m_p_parent->m_type ==\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent->m_type ==\n \t\t       pat_trie_internal_node_type);\n \n       p_nd = static_cast<internal_node_pointer>(p_nd->m_p_parent);\n@@ -144,10 +144,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n actual_erase_leaf(leaf_pointer p_l)\n {\n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  PB_DS_DBG_ONLY(erase_existing(PB_DS_V2F(p_l->value())));\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_l->value())));\n \n   p_l->~leaf();\n \n@@ -159,7 +159,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     if (empty())\n       return;\n@@ -170,9 +170,9 @@ clear()\n \n   initialize();\n \n-  PB_DS_DBG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n \n-    PB_DS_DBG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -182,7 +182,7 @@ clear_imp(node_pointer p_nd)\n {\n   if (p_nd->m_type == pat_trie_internal_node_type)\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n \n       for (typename internal_node::iterator it =\n \t     static_cast<internal_node_pointer>(p_nd)->begin();\n@@ -200,7 +200,7 @@ clear_imp(node_pointer p_nd)\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n \n   static_cast<leaf_pointer>(p_nd)->~leaf();\n \n@@ -213,7 +213,7 @@ inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n erase(const_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == end())\n     return (it);\n@@ -222,11 +222,11 @@ erase(const_iterator it)\n \n   ++ret_it;\n \n-  PB_DS_DBG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n \n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -237,7 +237,7 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == end())\n     return (it);\n@@ -246,11 +246,11 @@ erase(iterator it)\n \n   ++ret_it;\n \n-  PB_DS_DBG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n \n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -261,7 +261,7 @@ inline typename PB_DS_CLASS_C_DEC::const_reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(const_reverse_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == m_p_head)\n     return (it);\n@@ -270,11 +270,11 @@ erase(const_reverse_iterator it)\n \n   ++ret_it;\n \n-  PB_DS_DBG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n \n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -285,7 +285,7 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == m_p_head)\n     return (it);\n@@ -294,11 +294,11 @@ erase(reverse_iterator it)\n \n   ++ret_it;\n \n-  PB_DS_DBG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n \n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -312,13 +312,13 @@ erase_if(Pred pred)\n {\n   size_type num_ersd = 0;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     iterator it = begin();\n \n   while (it != end())\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         if (pred(*it))\n \t  {\n@@ -330,7 +330,7 @@ erase_if(Pred pred)\n \t  ++it;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (num_ersd);\n }\n@@ -344,16 +344,16 @@ erase_leaf(leaf_pointer p_l)\n \n   if (p_l->m_p_parent->m_type == pat_trie_head_node_type)\n     {\n-      PB_DS_DBG_ASSERT(size() == 1);\n+      _GLIBCXX_DEBUG_ASSERT(size() == 1);\n \n       clear();\n \n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(size() > 1);\n+  _GLIBCXX_DEBUG_ASSERT(size() > 1);\n \n-  PB_DS_DBG_ASSERT(p_l->m_p_parent->m_type ==\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_p_parent->m_type ==\n \t\t   pat_trie_internal_node_type);\n \n   internal_node_pointer p_parent ="}, {"sha": "f76bc303d94e47d126d2f71cd65c9fc905868707", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,13 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     node_pointer p_nd = find_imp(r_key);\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n         return (end());\n     }\n@@ -64,12 +64,12 @@ find(const_key_reference r_key)\n \t\t\t\t\tPB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()),\n \t\t\t\t\tr_key))\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(r_key));\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(r_key));\n \n       return (iterator(p_nd));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n     return (end());\n }\n@@ -79,14 +79,14 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     const_node_pointer p_nd =\n     const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n \n   if (p_nd == NULL || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n         return (end());\n     }\n@@ -95,13 +95,13 @@ find(const_key_reference r_key) const\n \t\t\t\t\tPB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()),\n \t\t\t\t\tr_key))\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(\n \t\t\t\t\t\t      r_key));\n \n       return (const_iterator(const_cast<node_pointer>(p_nd)));\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(r_key);)\n \n     return (end());\n }\n@@ -120,11 +120,11 @@ find_imp(const_key_reference r_key)\n     synth_e_access_traits::end(r_key);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   while (p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n \n       node_pointer p_next_nd =\n \tstatic_cast<internal_node_pointer>(p_nd)->get_child_node(                b_it,  e_it,  this);\n@@ -147,7 +147,7 @@ lower_bound_imp(const_key_reference r_key)\n     return (m_p_head);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   typename PB_DS_CLASS_C_DEC::const_e_iterator b_it =\n     synth_e_access_traits::begin(r_key);\n@@ -173,7 +173,7 @@ lower_bound_imp(const_key_reference r_key)\n \t  return (it.m_p_nd);\n         }\n \n-      PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n \n       const size_type new_checked_ind =\n \tstatic_cast<internal_node_pointer>(p_nd)->get_e_ind();\n@@ -209,7 +209,7 @@ upper_bound(const_key_reference r_key)\n {\n   point_iterator l_bound_it = lower_bound(r_key);\n \n-  PB_DS_DBG_ASSERT(l_bound_it == end() ||\n+  _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n \t\t   !synth_e_access_traits::cmp_keys(\n \t\t\t\t\t\t    PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n@@ -230,7 +230,7 @@ upper_bound(const_key_reference r_key) const\n {\n   const_point_iterator l_bound_it = lower_bound(r_key);\n \n-  PB_DS_DBG_ASSERT(l_bound_it == end() ||\n+  _GLIBCXX_DEBUG_ASSERT(l_bound_it == end() ||\n \t\t   !synth_e_access_traits::cmp_keys(\n \t\t\t\t\t\t    PB_DS_V2F(*l_bound_it),\n \t\t\t\t\t\t    r_key));\n@@ -253,7 +253,7 @@ pref_begin(const_node_pointer p_nd)\n     return (synth_e_access_traits::begin(\n \t\t\t\t\t PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n \n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n \n   return (static_cast<const_internal_node_pointer>(p_nd)->pref_b_it());\n }\n@@ -267,7 +267,7 @@ pref_end(const_node_pointer p_nd)\n     return (synth_e_access_traits::end(\n \t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value())));\n \n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n \n   return (static_cast<const_internal_node_pointer>(p_nd)->pref_e_it());\n }"}, {"sha": "14f80575384003d2f99f9994a673c01d4ddd8900", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/head.hpp", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,10 +47,8 @@\n #ifndef PB_DS_PAT_TRIE_IHEAD_HPP\n #define PB_DS_PAT_TRIE_IHEAD_HPP\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n #include <ext/pb_ds/detail/pat_trie_/node_base.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n@@ -78,16 +76,6 @@ namespace pb_ds\n \t\t\t\t\tMetadata,\t\t\\\n \t\t\t\t\tAllocator>\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n     template<typename Type_Traits,\n \t     class E_Access_Traits,\n \t     class Metadata,\n@@ -107,19 +95,19 @@ namespace pb_ds\n \tPB_DS_BASE_C_DEC>::other::pointer\n       node_pointer;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef\n       typename PB_DS_BASE_C_DEC::subtree_debug_info\n       subtree_debug_info;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     public:\n       pat_trie_head();\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       virtual subtree_debug_info\n       assert_valid_imp(const_e_access_traits_pointer p_traits) const;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     public:\n       node_pointer m_p_min;\n@@ -129,34 +117,26 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    pat_trie_head() :\n-      PB_DS_BASE_C_DEC(pat_trie_head_node_type)\n+    pat_trie_head() : PB_DS_BASE_C_DEC(pat_trie_head_node_type)\n     { }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n     assert_valid_imp(const_e_access_traits_pointer /*p_traits*/) const\n     {\n-      PB_DS_DBG_ASSERT(false);\n-\n-      return (subtree_debug_info());\n+      _GLIBCXX_DEBUG_ASSERT(false);\n+      return subtree_debug_info();\n     }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_HEAD_HPP\n+#endif\n "}, {"sha": "c4290156ab1996efec65b135d6cf0925ddbd5b30", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 155, "deletions": 349, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,73 +49,57 @@ void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid(););\n-  PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n   split_join_branch_bag bag;\n-\n   if (!join_prep(other, bag))\n     {\n-      PB_DS_DBG_ONLY(assert_valid(););\n-      PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n       return;\n     }\n \n-  m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent, other.m_p_head->m_p_parent, 0, bag);\n+  m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent, \n+\t\t\t\t  other.m_p_head->m_p_parent, 0, bag);\n \n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n-\n   m_size += other.m_size;\n-\n   other.initialize();\n-\n-  PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n   m_p_head->m_p_min = leftmost_descendant(m_p_head->m_p_parent);\n   m_p_head->m_p_max = rightmost_descendant(m_p_head->m_p_parent);\n-\n-  PB_DS_DBG_ONLY(assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n }\n \n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-\n-    if (other.m_size == 0)\n-      return (false);\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  if (other.m_size == 0)\n+    return false;\n \n   if (m_size == 0)\n     {\n       value_swap(other);\n-\n-      return (false);\n+      return false;\n     }\n \n-  const bool greater = synth_e_access_traits::cmp_keys(\n-\t\t\t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\t m_p_head->m_p_max)->value()),\n-\t\t\t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(\n+  const bool greater = synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(\n+\t\t\t\t\t\t\t\t\t\t\t\t m_p_head->m_p_max)->value()),PB_DS_V2F(static_cast<const_leaf_pointer>(\n \t\t\t\t\t\t\t\t\t\t\t\t other.m_p_head->m_p_min)->value()));\n \n-  const bool lesser = synth_e_access_traits::cmp_keys(\n-\t\t\t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\tother.m_p_head->m_p_max)->value()),\n-\t\t\t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\tm_p_head->m_p_min)->value()));\n+  const bool lesser = synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(\n+\t\t\t\t\t\t\t\t\t\t\t\tother.m_p_head->m_p_max)->value()),PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value()));\n \n-  if (!greater&&  !lesser)\n+  if (!greater && !lesser)\n     throw join_error();\n \n   rec_join_prep(m_p_head->m_p_parent, other.m_p_head->m_p_parent, r_bag);\n-\n-  PB_DS_DBG_ONLY(map_debug_base::join(other);)\n-\n-    return (true);\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -127,125 +111,89 @@ rec_join_prep(const_node_pointer p_l, const_node_pointer p_r, split_join_branch_\n     {\n       if (p_r->m_type == pat_trie_leaf_node_type)\n         {\n-\t  rec_join_prep(\n-\t\t\tstatic_cast<const_leaf_pointer>(p_l),\n-\t\t\tstatic_cast<const_leaf_pointer>(p_r),\n-\t\t\tr_bag);\n-\n+\t  rec_join_prep(static_cast<const_leaf_pointer>(p_l),\n+\t\t\tstatic_cast<const_leaf_pointer>(p_r), r_bag);\n \t  return;\n         }\n \n-      PB_DS_DBG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n-\n-      rec_join_prep(\n-\t\t    static_cast<const_leaf_pointer>(p_l),\n-\t\t    static_cast<const_internal_node_pointer>(p_r),\n-\t\t    r_bag);\n-\n+      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+      rec_join_prep(static_cast<const_leaf_pointer>(p_l),\n+\t\t    static_cast<const_internal_node_pointer>(p_r), r_bag);\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n   if (p_r->m_type == pat_trie_leaf_node_type)\n     {\n-      rec_join_prep(\n-\t\t    static_cast<const_internal_node_pointer>(p_l),\n-\t\t    static_cast<const_leaf_pointer>(p_r),\n-\t\t    r_bag);\n-\n+      rec_join_prep(static_cast<const_internal_node_pointer>(p_l),\n+\t\t    static_cast<const_leaf_pointer>(p_r), r_bag);\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n \n-  rec_join_prep(\n-\t\tstatic_cast<const_internal_node_pointer>(p_l),\n-\t\tstatic_cast<const_internal_node_pointer>(p_r),\n-\t\tr_bag);\n+  rec_join_prep(static_cast<const_internal_node_pointer>(p_l),\n+\t\tstatic_cast<const_internal_node_pointer>(p_r), r_bag);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_leaf_pointer /*p_l*/, const_leaf_pointer /*p_r*/, split_join_branch_bag& r_bag)\n-{\n-  r_bag.add_branch();\n-}\n+rec_join_prep(const_leaf_pointer /*p_l*/, const_leaf_pointer /*p_r*/, \n+\t      split_join_branch_bag& r_bag)\n+{ r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_leaf_pointer /*p_l*/, const_internal_node_pointer /*p_r*/, split_join_branch_bag& r_bag)\n-{\n-  r_bag.add_branch();\n-}\n+rec_join_prep(const_leaf_pointer /*p_l*/, const_internal_node_pointer /*p_r*/, \n+\t      split_join_branch_bag& r_bag)\n+{ r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_internal_node_pointer /*p_l*/, const_leaf_pointer /*p_r*/, split_join_branch_bag& r_bag)\n-{\n-  r_bag.add_branch();\n-}\n+rec_join_prep(const_internal_node_pointer /*p_l*/, const_leaf_pointer /*p_r*/, \n+\t      split_join_branch_bag& r_bag)\n+{ r_bag.add_branch(); }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r, split_join_branch_bag& r_bag)\n+rec_join_prep(const_internal_node_pointer p_l, const_internal_node_pointer p_r,\n+\t      split_join_branch_bag& r_bag)\n {\n-  if (p_l->get_e_ind() == p_r->get_e_ind()&& \n-      synth_e_access_traits::equal_prefixes(\n-\t\t\t\t\t    p_l->pref_b_it(),\n-\t\t\t\t\t    p_l->pref_e_it(),\n-\t\t\t\t\t    p_r->pref_b_it(),\n-\t\t\t\t\t    p_r->pref_e_it()))\n+  if (p_l->get_e_ind() == p_r->get_e_ind() && \n+      synth_e_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n+\t\t\t\t\t    p_r->pref_b_it(), p_r->pref_e_it()))\n     {\n       for (typename internal_node::const_iterator it = p_r->begin();\n \t   it != p_r->end(); ++ it)\n         {\n-\t  const_node_pointer p_l_join_child =\n-\t    p_l->get_join_child(*it, this);\n-\n+\t  const_node_pointer p_l_join_child = p_l->get_join_child(*it, this);\n \t  if (p_l_join_child != NULL)\n \t    rec_join_prep(p_l_join_child, * it, r_bag);\n         }\n-\n       return;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind()&& \n-      p_r->should_be_mine(\n-\t\t\t  p_l->pref_b_it(),\n-\t\t\t  p_l->pref_e_it(),\n-\t\t\t  0,\n-\t\t\t  this))\n+  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+      p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n-      const_node_pointer p_r_join_child =\n-\tp_r->get_join_child(p_l, this);\n-\n+      const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n       if (p_r_join_child != NULL)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n-\n       return;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind()&& \n-      p_r->should_be_mine(\n-\t\t\t  p_l->pref_b_it(),\n-\t\t\t  p_l->pref_e_it(),\n-\t\t\t  0,\n-\t\t\t  this))\n+  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+      p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n-      const_node_pointer p_r_join_child =\n-\tp_r->get_join_child(p_l, this);\n-\n+      const_node_pointer p_r_join_child = p_r->get_join_child(p_l, this);\n       if (p_r_join_child != NULL)\n \trec_join_prep(p_r_join_child, p_l, r_bag);\n-\n       return;\n     }\n-\n   r_bag.add_branch();\n }\n \n@@ -254,336 +202,214 @@ typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(node_pointer p_l, node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ASSERT(p_r != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n   if (p_l == NULL)\n     {\n       apply_update(p_r, (node_update* )this);\n-\n       return (p_r);\n     }\n \n   if (p_l->m_type == pat_trie_leaf_node_type)\n     {\n       if (p_r->m_type == pat_trie_leaf_node_type)\n         {\n-\t  node_pointer p_ret = rec_join(\n-\t\t\t\t\tstatic_cast<leaf_pointer>(p_l),\n-\t\t\t\t\tstatic_cast<leaf_pointer>(p_r),\n-\t\t\t\t\tr_bag);\n-\n+\t  node_pointer p_ret = rec_join(static_cast<leaf_pointer>(p_l),\n+\t\t\t\t\tstatic_cast<leaf_pointer>(p_r), r_bag);\n \t  apply_update(p_ret, (node_update* )this);\n-\n-\t  return (p_ret);\n+\t  return p_ret;\n         }\n \n-      PB_DS_DBG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n-\n-      node_pointer p_ret = rec_join(\n-\t\t\t\t    static_cast<leaf_pointer>(p_l),\n+      _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+      node_pointer p_ret = rec_join(static_cast<leaf_pointer>(p_l),\n \t\t\t\t    static_cast<internal_node_pointer>(p_r),\n-\t\t\t\t    checked_ind,\n-\t\t\t\t    r_bag);\n-\n+\t\t\t\t    checked_ind, r_bag);\n       apply_update(p_ret, (node_update* )this);\n-\n-      return (p_ret);\n+      return p_ret;\n     }\n \n-  PB_DS_DBG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_l->m_type == pat_trie_internal_node_type);\n   if (p_r->m_type == pat_trie_leaf_node_type)\n     {\n-      node_pointer p_ret = rec_join(\n-\t\t\t\t    static_cast<internal_node_pointer>(p_l),\n+      node_pointer p_ret = rec_join(static_cast<internal_node_pointer>(p_l),\n \t\t\t\t    static_cast<leaf_pointer>(p_r),\n-\t\t\t\t    checked_ind,\n-\t\t\t\t    r_bag);\n-\n+\t\t\t\t    checked_ind, r_bag);\n       apply_update(p_ret, (node_update* )this);\n-\n-      return (p_ret);\n+      return p_ret;\n     }\n \n-  PB_DS_DBG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n-\n-  node_pointer p_ret = rec_join(\n-\t\t\t\tstatic_cast<internal_node_pointer>(p_l),\n-\t\t\t\tstatic_cast<internal_node_pointer>(p_r),\n+  _GLIBCXX_DEBUG_ASSERT(p_r->m_type == pat_trie_internal_node_type);\n+  node_pointer p_ret = rec_join(static_cast<internal_node_pointer>(p_l),\n+\t\t\t\tstatic_cast<internal_node_pointer>(p_r), \n \t\t\t\tr_bag);\n \n   apply_update(p_ret, (node_update* )this);\n-\n-  return (p_ret);\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ASSERT(p_r != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n   if (p_l == NULL)\n     return (p_r);\n-\n   node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-\n-  PB_DS_DBG_ASSERT(recursive_count_leafs(p_ret) == 2);\n-\n-  return (p_ret);\n+  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == 2);\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n-rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n+rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind, \n+\t split_join_branch_bag& r_bag)\n {\n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = recursive_count_leafs(p_l);\n-\n   const size_type rhs_leafs = recursive_count_leafs(p_r);\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n-  PB_DS_DBG_ASSERT(p_r != NULL);\n+#endif \n \n+  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n   node_pointer p_ret = rec_join(p_r, p_l, checked_ind, r_bag);\n-\n-  PB_DS_DBG_ASSERT(recursive_count_leafs(p_ret) ==\n-\t\t   lhs_leafs + rhs_leafs);\n-\n-  return (p_ret);\n+  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == lhs_leafs + rhs_leafs);\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ASSERT(p_l != NULL);\n-  PB_DS_DBG_ASSERT(p_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = recursive_count_leafs(p_l);\n-\n   const size_type rhs_leafs = recursive_count_leafs(p_r);\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n-  if (!p_l->should_be_mine(\n-\t\t\t   pref_begin(p_r),\n-\t\t\t   pref_end(p_r),\n-\t\t\t   checked_ind,\n-\t\t\t   this))\n+  if (!p_l->should_be_mine(pref_begin(p_r), pref_end(p_r), checked_ind, this))\n     {\n       node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-\n-      PB_DS_DBG_ONLY(p_ret->assert_valid(this);)\n-\n-        PB_DS_DBG_ASSERT(recursive_count_leafs(p_ret) ==\n-\t\t\t lhs_leafs + rhs_leafs);\n-\n-      return (p_ret);\n+      _GLIBCXX_DEBUG_ONLY(p_ret->assert_valid(this);)\n+      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) ==\n+       \t\t            lhs_leafs + rhs_leafs);\n+      return p_ret;\n     }\n \n-  node_pointer p_pot_child = p_l->add_child(\n-\t\t\t\t\t    p_r,\n-\t\t\t\t\t    pref_begin(p_r),\n-\t\t\t\t\t    pref_end(p_r),\n-\t\t\t\t\t    this);\n-\n+  node_pointer p_pot_child = p_l->add_child(p_r, pref_begin(p_r),\n+\t\t\t\t\t    pref_end(p_r), this);\n   if (p_pot_child != p_r)\n     {\n-      node_pointer p_new_child = rec_join(\n-\t\t\t\t\t  p_pot_child,\n-\t\t\t\t\t  p_r,\n-\t\t\t\t\t  p_l->get_e_ind(),\n+      node_pointer p_new_child = rec_join(p_pot_child, p_r, p_l->get_e_ind(),\n \t\t\t\t\t  r_bag);\n \n-      p_l->replace_child(\n-\t\t\t p_new_child,\n-\t\t\t pref_begin(p_new_child),\n-\t\t\t pref_end(p_new_child),\n-\t\t\t this);\n+      p_l->replace_child(p_new_child, pref_begin(p_new_child),\n+\t\t\t pref_end(p_new_child), this);\n     }\n \n-  PB_DS_DBG_ONLY(p_l->assert_valid(this));\n-\n-  PB_DS_DBG_ASSERT(recursive_count_leafs(p_l) ==\n-\t\t   lhs_leafs + rhs_leafs);\n-\n-  return (p_l);\n+  _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this));\n+  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_l) == lhs_leafs + rhs_leafs);\n+  return p_l;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ASSERT(p_l != NULL);\n-  PB_DS_DBG_ASSERT(p_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_l != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_r != NULL);\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const size_type lhs_leafs = recursive_count_leafs(p_l);\n-\n   const size_type rhs_leafs = recursive_count_leafs(p_r);\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n-  if (p_l->get_e_ind() == p_r->get_e_ind()&& \n-      synth_e_access_traits::equal_prefixes(\n-\t\t\t\t\t    p_l->pref_b_it(),\n-\t\t\t\t\t    p_l->pref_e_it(),\n-\t\t\t\t\t    p_r->pref_b_it(),\n-\t\t\t\t\t    p_r->pref_e_it()))\n+#endif \n+\n+  if (p_l->get_e_ind() == p_r->get_e_ind() && \n+      synth_e_access_traits::equal_prefixes(p_l->pref_b_it(), p_l->pref_e_it(),\n+\t\t\t\t\t    p_r->pref_b_it(), p_r->pref_e_it()))\n     {\n       for (typename internal_node::iterator it = p_r->begin();\n \t   it != p_r->end(); ++ it)\n         {\n-\t  node_pointer p_new_child = rec_join(\n-\t\t\t\t\t      p_l->get_join_child(*it, this),\n-\t\t\t\t\t      * it,\n-\t\t\t\t\t      0,\n-\t\t\t\t\t      r_bag);\n-\n-\t  p_l->replace_child(\n-\t\t\t     p_new_child,\n-\t\t\t     pref_begin(p_new_child),\n-\t\t\t     pref_end(p_new_child),\n-\t\t\t     this);\n+\t  node_pointer p_new_child = rec_join(p_l->get_join_child(*it, this),\n+\t\t\t\t\t      * it, 0, r_bag);\n+\t  p_l->replace_child(p_new_child, pref_begin(p_new_child),\n+\t\t\t     pref_end(p_new_child), this);\n         }\n \n       p_r->~internal_node();\n-\n       s_internal_node_allocator.deallocate(p_r, 1);\n-\n-      PB_DS_DBG_ONLY(p_l->assert_valid(this);)\n-\n-        PB_DS_DBG_ASSERT(recursive_count_leafs(p_l) ==\n-\t\t\t lhs_leafs + rhs_leafs);\n-\n-      return (p_l);\n+      _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this);)\n+      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_l) == lhs_leafs + rhs_leafs);\n+      return p_l;\n     }\n \n-  if (p_l->get_e_ind() < p_r->get_e_ind()&& \n-      p_l->should_be_mine(\n-\t\t\t  p_r->pref_b_it(),\n-\t\t\t  p_r->pref_e_it(),\n-\t\t\t  0,\n-\t\t\t  this))\n+  if (p_l->get_e_ind() < p_r->get_e_ind() && \n+      p_l->should_be_mine(p_r->pref_b_it(), p_r->pref_e_it(), 0, this))\n     {\n-      node_pointer p_new_child = rec_join(\n-\t\t\t\t\t  p_l->get_join_child(p_r, this),\n-\t\t\t\t\t  p_r,\n-\t\t\t\t\t  0,\n-\t\t\t\t\t  r_bag);\n-\n-      p_l->replace_child(\n-\t\t\t p_new_child,\n-\t\t\t pref_begin(p_new_child),\n-\t\t\t pref_end(p_new_child),\n-\t\t\t this);\n-\n-      PB_DS_DBG_ONLY(p_l->assert_valid(this);)\n-\n-        return (p_l);\n+      node_pointer p_new_child = rec_join(p_l->get_join_child(p_r, this),\n+\t\t\t\t\t  p_r, 0, r_bag);\n+      p_l->replace_child(p_new_child, pref_begin(p_new_child),\n+\t\t\t pref_end(p_new_child), this);\n+      _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this);)\n+      return p_l;\n     }\n \n-  if (p_r->get_e_ind() < p_l->get_e_ind()&& \n-      p_r->should_be_mine(\n-\t\t\t  p_l->pref_b_it(),\n-\t\t\t  p_l->pref_e_it(),\n-\t\t\t  0,\n-\t\t\t  this))\n+  if (p_r->get_e_ind() < p_l->get_e_ind() && \n+      p_r->should_be_mine(p_l->pref_b_it(), p_l->pref_e_it(), 0, this))\n     {\n-      node_pointer p_new_child = rec_join(\n-\t\t\t\t\t  p_r->get_join_child(p_l, this),\n-\t\t\t\t\t  p_l,\n-\t\t\t\t\t  0,\n-\t\t\t\t\t  r_bag);\n+      node_pointer p_new_child = rec_join(p_r->get_join_child(p_l, this), p_l,\n+\t\t\t\t\t  0, r_bag);\n \n-      p_r->replace_child(\n-\t\t\t p_new_child,\n-\t\t\t pref_begin(p_new_child),\n-\t\t\t pref_end(p_new_child),\n-\t\t\t this);\n+      p_r->replace_child(p_new_child, pref_begin(p_new_child), \n+\t\t\t pref_end(p_new_child), this);\n \n-      PB_DS_DBG_ONLY(p_r->assert_valid(this);)\n-\n-        PB_DS_DBG_ASSERT(recursive_count_leafs(p_r) ==\n-\t\t\t lhs_leafs + rhs_leafs);\n-\n-      return (p_r);\n+      _GLIBCXX_DEBUG_ONLY(p_r->assert_valid(this);)\n+      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_r) == lhs_leafs + rhs_leafs);\n+      return p_r;\n     }\n \n   node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-\n-  PB_DS_DBG_ONLY(p_ret->assert_valid(this);)\n-\n-    PB_DS_DBG_ASSERT(recursive_count_leafs(p_ret) ==\n-\t\t     lhs_leafs + rhs_leafs);\n-\n-  return (p_ret);\n+  _GLIBCXX_DEBUG_ONLY(p_ret->assert_valid(this);)\n+  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == lhs_leafs + rhs_leafs);\n+  return p_ret;\n }\n \n PB_DS_CLASS_T_DEC\n-inline std::pair<\n-  typename PB_DS_CLASS_C_DEC::iterator,\n-  bool>\n+inline std::pair<typename PB_DS_CLASS_C_DEC::iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n   node_pointer p_lf = find_imp(PB_DS_V2F(r_val));\n-\n-  if (p_lf != NULL&&  p_lf->m_type == pat_trie_leaf_node_type&& \n-      synth_e_access_traits::equal_keys(\n-\t\t\t\t\tPB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()),\n-\t\t\t\t\tPB_DS_V2F(r_val)))\n+  if (p_lf != NULL && p_lf->m_type == pat_trie_leaf_node_type && \n+      synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n     {\n-      PB_DS_DBG_ONLY(map_debug_base::check_key_exists(\n-\t\t\t\t\t\t      PB_DS_V2F(r_val)));\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-        return (std::make_pair(\n-\t\t\t       iterator(p_lf),\n-\t\t\t       false));\n+      _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_exists(PB_DS_V2F(r_val)));\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      return std::make_pair(iterator(p_lf), false);\n     }\n \n-  PB_DS_DBG_ONLY(map_debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t  PB_DS_V2F(r_val)));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::check_key_does_not_exist(PB_DS_V2F(r_val)));\n \n   leaf_pointer p_new_lf = s_leaf_allocator.allocate(1);\n-\n   cond_dealtor cond(p_new_lf);\n \n   new (p_new_lf) leaf(r_val);\n-\n   apply_update(p_new_lf, (node_update* )this);\n-\n   cond.set_call_destructor();\n-\n   split_join_branch_bag bag;\n-\n   bag.add_branch();\n-\n-  m_p_head->m_p_parent =\n-    rec_join(m_p_head->m_p_parent, p_new_lf, 0, bag);\n-\n+  m_p_head->m_p_parent = rec_join(m_p_head->m_p_parent, p_new_lf, 0, bag);\n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n-\n   cond.set_no_action_dtor();\n-\n   ++m_size;\n-\n   update_min_max_for_inserted_leaf(p_new_lf);\n-\n-  PB_DS_DBG_ONLY(map_debug_base::insert_new(\n-\t\t\t\t\t    PB_DS_V2F(r_val));)\n-\n-    PB_DS_DBG_ONLY(assert_valid();)\n-\n-    return (std::make_pair(\n-\t\t\t   point_iterator(p_new_lf),\n-\t\t\t   true));\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::insert_new(PB_DS_V2F(r_val));)   \n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  return std::make_pair(point_iterator(p_new_lf), true);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -592,58 +418,41 @@ PB_DS_CLASS_C_DEC::\n keys_diff_ind(typename e_access_traits::const_iterator b_l, typename e_access_traits::const_iterator e_l, typename e_access_traits::const_iterator b_r, typename e_access_traits::const_iterator e_r)\n {\n   size_type diff_pos = 0;\n-\n   while (b_l != e_l)\n     {\n       if (b_r == e_r)\n \treturn (diff_pos);\n-\n       if (e_access_traits::e_pos(*b_l) != e_access_traits::e_pos(*b_r))\n \treturn (diff_pos);\n-\n       ++b_l;\n       ++b_r;\n-\n       ++diff_pos;\n     }\n-\n-  PB_DS_DBG_ASSERT(b_r != e_r);\n-\n-  return (diff_pos);\n+  _GLIBCXX_DEBUG_ASSERT(b_r != e_r);\n+  return diff_pos;\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::internal_node_pointer\n PB_DS_CLASS_C_DEC::\n insert_branch(node_pointer p_l, node_pointer p_r, split_join_branch_bag& r_bag)\n {\n-  typename synth_e_access_traits::const_iterator left_b_it =\n-    pref_begin(p_l);\n-  typename synth_e_access_traits::const_iterator left_e_it =\n-    pref_end(p_l);\n-\n-  typename synth_e_access_traits::const_iterator right_b_it =\n-    pref_begin(p_r);\n-  typename synth_e_access_traits::const_iterator right_e_it =\n-    pref_end(p_r);\n+  typename synth_e_access_traits::const_iterator left_b_it = pref_begin(p_l);\n+  typename synth_e_access_traits::const_iterator left_e_it = pref_end(p_l);\n+  typename synth_e_access_traits::const_iterator right_b_it = pref_begin(p_r);\n+  typename synth_e_access_traits::const_iterator right_e_it = pref_end(p_r);\n \n-  const size_type diff_ind =\n-    keys_diff_ind(left_b_it, left_e_it, right_b_it, right_e_it);\n+  const size_type diff_ind = keys_diff_ind(left_b_it, left_e_it, \n+\t\t\t\t\t   right_b_it, right_e_it);\n \n   internal_node_pointer p_new_nd = r_bag.get_branch();\n-\n   new (p_new_nd) internal_node(diff_ind, left_b_it);\n-\n-  p_new_nd->add_child(        p_l, left_b_it, left_e_it, this);\n-\n-  p_new_nd->add_child(        p_r, right_b_it, right_e_it, this);\n-\n+  p_new_nd->add_child(p_l, left_b_it, left_e_it, this);\n+  p_new_nd->add_child(p_r, right_b_it, right_e_it, this);\n   p_l->m_p_parent = p_new_nd;\n   p_r->m_p_parent = p_new_nd;\n-\n-  PB_DS_DBG_ONLY(p_new_nd->assert_valid(this);)\n-\n-    return (p_new_nd);\n+  _GLIBCXX_DEBUG_ONLY(p_new_nd->assert_valid(this);)\n+  return (p_new_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -652,14 +461,11 @@ PB_DS_CLASS_C_DEC::\n update_min_max_for_inserted_leaf(leaf_pointer p_new_lf)\n {\n   if (m_p_head->m_p_min == m_p_head ||\n-      synth_e_access_traits::cmp_keys(\n-\t\t\t\t      PB_DS_V2F(p_new_lf->value()),\n+      synth_e_access_traits::cmp_keys(PB_DS_V2F(p_new_lf->value()),\n \t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value())))\n     m_p_head->m_p_min = p_new_lf;\n \n   if (m_p_head->m_p_max == m_p_head ||\n-      synth_e_access_traits::cmp_keys(\n-\t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value()),\n-\t\t\t\t      PB_DS_V2F(p_new_lf->value())))\n+      synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value()), PB_DS_V2F(p_new_lf->value())))\n     m_p_head->m_p_max = p_new_lf;\n }"}, {"sha": "41329e2715b8fa405b08f8e89733757171f29165", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/internal_node.hpp", "status": "modified", "additions": 27, "deletions": 43, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,9 +47,7 @@\n #ifndef PB_DS_PAT_TRIE_INTERNAL_NODE_HPP\n #define PB_DS_PAT_TRIE_INTERNAL_NODE_HPP\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#include <cassert>\n-#endif \n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n@@ -71,16 +69,6 @@ namespace pb_ds\n #define PB_DS_STATIC_ASSERT(UNIQUE, E) \\\n     typedef static_assert_dumclass<sizeof(static_assert<(bool)(E)>)> UNIQUE##static_assert_type\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else \n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) { if((X)==0); }\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif \n-\n     template<typename Type_Traits,\n \t     typename E_Access_Traits,\n \t     typename Metadata,\n@@ -111,7 +99,7 @@ namespace pb_ds\n       typedef typename internal_node_rebind::pointer internal_node_pointer;\n       typedef typename internal_node_rebind::const_pointer const_internal_node_pointer;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef typename base_type::subtree_debug_info subtree_debug_info;\n \n       virtual subtree_debug_info\n@@ -214,7 +202,7 @@ namespace pb_ds\n       const_leaf_pointer\n       rightmost_descendant() const;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       size_type\n       e_ind() const;\n #endif \n@@ -277,7 +265,7 @@ namespace pb_ds\n \t}\n       else\n \t{\n-\t  PB_DS_DBG_ASSERT(p_first->m_type == pat_trie_internal_node_type);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_first->m_type == pat_trie_internal_node_type);\n \t  m_pref_b_it = static_cast<internal_node_pointer>(p_first)->pref_b_it();\n \t}\n       m_pref_e_it = m_pref_b_it;\n@@ -326,7 +314,7 @@ namespace pb_ds\n \t\t   const_e_access_traits_pointer p_traits)\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n       return m_a_p_children[i];\n     }\n \n@@ -337,8 +325,8 @@ namespace pb_ds\n \t\t const_e_access_traits_pointer p_traits)\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n-      PB_DS_DBG_ASSERT(m_a_p_children[i] != NULL);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i] != NULL);\n       return iterator(m_a_p_children + i, m_a_p_children + i);\n     }\n \n@@ -364,7 +352,7 @@ namespace pb_ds\n \t}\n \n       size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n \n       if (m_a_p_children[i] != NULL)\n \treturn m_a_p_children[i];\n@@ -375,7 +363,7 @@ namespace pb_ds\n \t    if (m_a_p_children[i]->m_type == pat_trie_leaf_node_type)\n \t      return m_a_p_children[i];\n \n-\t    PB_DS_DBG_ASSERT(m_a_p_children[i]->m_type == pat_trie_internal_node_type);\n+\t    _GLIBCXX_DEBUG_ASSERT(m_a_p_children[i]->m_type == pat_trie_internal_node_type);\n \n \t    return static_cast<internal_node_pointer>(m_a_p_children[i])->leftmost_descendant();\n \t  }\n@@ -390,7 +378,7 @@ namespace pb_ds\n \t      const_e_access_traits_pointer p_traits)\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n       if (m_a_p_children[i] == NULL)\n \t{\n \t  m_a_p_children[i] = p_nd;\n@@ -431,7 +419,7 @@ namespace pb_ds\n \t  e_it = static_cast<internal_node_pointer>(p_nd)->pref_e_it();\n \t}\n       i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n       return m_a_p_children[i];\n     }\n \n@@ -447,7 +435,7 @@ namespace pb_ds\n \t    m_a_p_children[i] = NULL;\n \t    return;\n \t  }\n-      PB_DS_DBG_ASSERT(i != arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i != arr_size);\n     }\n \n     PB_DS_CLASS_T_DEC\n@@ -469,7 +457,7 @@ namespace pb_ds\n \t\t  const_e_access_traits_pointer p_traits)\n     {\n       const size_type i = get_pref_pos(b_it, e_it, p_traits);\n-      PB_DS_DBG_ASSERT(i < arr_size);\n+      _GLIBCXX_DEBUG_ASSERT(i < arr_size);\n       m_a_p_children[i] = p_nd;\n       p_nd->m_p_parent = this;\n     }\n@@ -528,7 +516,7 @@ namespace pb_ds\n       node_pointer p_pot =* begin();\n       if (p_pot->m_type == pat_trie_leaf_node_type)\n \treturn (static_cast<leaf_pointer>(p_pot));\n-      PB_DS_DBG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n       return static_cast<internal_node_pointer>(p_pot)->leftmost_descendant();\n     }\n \n@@ -546,14 +534,14 @@ namespace pb_ds\n     rightmost_descendant()\n     {\n       const size_type num_children = std::distance(begin(), end());\n-      PB_DS_DBG_ASSERT(num_children >= 2);\n+      _GLIBCXX_DEBUG_ASSERT(num_children >= 2);\n \n       iterator it = begin();\n       std::advance(it, num_children - 1);\n       node_pointer p_pot =* it;\n       if (p_pot->m_type == pat_trie_leaf_node_type)\n \treturn static_cast<leaf_pointer>(p_pot);\n-      PB_DS_DBG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(p_pot->m_type == pat_trie_internal_node_type);\n       return static_cast<internal_node_pointer>(p_pot)->rightmost_descendant();\n     }\n \n@@ -565,13 +553,13 @@ namespace pb_ds\n       return const_cast<internal_node_pointer>(this)->rightmost_descendant();\n     }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     e_ind() const\n     { return m_e_ind; }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::size_type\n@@ -584,41 +572,37 @@ namespace pb_ds\n       return i;\n     }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n     assert_valid_imp(const_e_access_traits_pointer p_traits) const\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_type == pat_trie_internal_node_type);\n-      PB_DS_DBG_ASSERT(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n-      PB_DS_DBG_ASSERT(std::distance(begin(), end()) >= 2);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_type == pat_trie_internal_node_type);\n+      _GLIBCXX_DEBUG_ASSERT(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n+      _GLIBCXX_DEBUG_ASSERT(std::distance(begin(), end()) >= 2);\n \n       for (typename pat_trie_internal_node::const_iterator it = begin();\n \t   it != end(); ++it)\n \t{\n \t  const_node_pointer p_nd =* it;\n-\t  PB_DS_DBG_ASSERT(p_nd->m_p_parent == this);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent == this);\n \t  subtree_debug_info child_ret = p_nd->assert_valid_imp(p_traits);\n \n-\t  PB_DS_DBG_ASSERT(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n-\t  PB_DS_DBG_ASSERT(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n-\t  PB_DS_DBG_ASSERT(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n+\t  _GLIBCXX_DEBUG_ASSERT(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n+\t  _GLIBCXX_DEBUG_ASSERT(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n+\t  _GLIBCXX_DEBUG_ASSERT(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n \t}\n       return std::make_pair(pref_b_it(), pref_e_it());\n     }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_BASE_C_DEC\n #undef PB_DS_LEAF_C_DEC\n #undef PB_DS_STATIC_ASSERT\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "db990b16346319a0cb07a117c1f0d7e547c0b7c0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/leaf.hpp", "status": "modified", "additions": 16, "deletions": 45, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,6 +47,8 @@\n #ifndef PB_DS_PAT_TRIE_LEAF_HPP\n #define PB_DS_PAT_TRIE_LEAF_HPP\n \n+#include <debug/debug.h>\n+\n namespace pb_ds\n {\n   namespace detail\n@@ -79,16 +81,6 @@ namespace pb_ds\n \t\t\t\t\t\t\tE_Access_Traits, \\\n \t\t\t\t\t\t\tAllocator>\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n     template<typename Type_Traits,\n \t     class E_Access_Traits,\n \t     class Metadata,\n@@ -107,11 +99,11 @@ namespace pb_ds\n \tE_Access_Traits>::other::const_pointer\n       const_e_access_traits_pointer;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef\n       typename PB_DS_BASE_C_DEC::subtree_debug_info\n       subtree_debug_info;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n       typedef PB_DS_BASE_C_DEC base_type;\n \n@@ -124,15 +116,13 @@ namespace pb_ds\n       inline const_reference\n       value() const;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       virtual subtree_debug_info\n       assert_valid_imp(const_e_access_traits_pointer p_traits) const;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n       virtual\n       ~pat_trie_leaf();\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     private:\n       pat_trie_leaf(const PB_DS_CLASS_C_DEC& other);\n@@ -144,64 +134,45 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     pat_trie_leaf(const_reference r_val) :\n-      PB_DS_BASE_C_DEC(pat_trie_leaf_node_type),\n-      m_value(r_val)\n+    PB_DS_BASE_C_DEC(pat_trie_leaf_node_type), m_value(r_val)\n     { }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::reference\n     PB_DS_CLASS_C_DEC::\n     value()\n-    {\n-      return (m_value);\n-    }\n+    { return m_value; }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::const_reference\n     PB_DS_CLASS_C_DEC::\n     value() const\n-    {\n-      return (m_value);\n-    }\n+    { return m_value; }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n     assert_valid_imp(const_e_access_traits_pointer p_traits) const\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_type == pat_trie_leaf_node_type);\n-\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_type == pat_trie_leaf_node_type);\n       subtree_debug_info ret;\n-\n       const_reference r_val = value();\n-\n-      return (std::make_pair(\n-\t\t\t     p_traits->begin(p_traits->extract_key(r_val)),\n-\t\t\t     p_traits->end(p_traits->extract_key(r_val))));\n+      return std::make_pair(p_traits->begin(p_traits->extract_key(r_val)),\n+\t\t\t     p_traits->end(p_traits->extract_key(r_val)));\n     }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    ~pat_trie_leaf()\n-    { }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+    ~pat_trie_leaf() { }\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n-\n #undef PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_NODE_BASE_HPP\n+#endif "}, {"sha": "de995fb87db8fa1f6d1eeafd96a2469894ef4759", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_base.hpp", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -100,26 +100,24 @@ namespace pb_ds\n \tE_Access_Traits>::other::const_pointer\n       const_e_access_traits_pointer;\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef\n       std::pair<\n \ttypename E_Access_Traits::const_iterator,\n \ttypename E_Access_Traits::const_iterator>\n       subtree_debug_info;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     public:\n       pat_trie_node_base(pat_trie_node_type type);\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid(const_e_access_traits_pointer p_traits) const;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n       virtual subtree_debug_info\n       assert_valid_imp(const_e_access_traits_pointer p_traits) const = 0;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n     public:\n       node_pointer m_p_parent;\n@@ -129,27 +127,22 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    pat_trie_node_base(pat_trie_node_type type) :\n-      m_type(type)\n+    pat_trie_node_base(pat_trie_node_type type) : m_type(type)\n     { }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     assert_valid(const_e_access_traits_pointer p_traits) const\n-    {\n-      assert_valid_imp(p_traits);\n-    }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+    { assert_valid_imp(p_traits); }\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\n \n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_NODE_BASE_HPP\n+#endif "}, {"sha": "ec6eaaf9826905109413372826a6beee553d93c9", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_iterators.hpp", "status": "modified", "additions": 27, "deletions": 58, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_iterators.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,21 +47,13 @@\n #ifndef PB_DS_PAT_TRIE_NODE_ITERATORS_HPP\n #define PB_DS_PAT_TRIE_NODE_ITERATORS_HPP\n \n+#include <debug/debug.h>\n+\n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n #define PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\t\t\t\\\n     pat_trie_const_node_it_<\t\t\t\t\t\t\\\n \t\t\t\t\t\t\tNode,\t\t\\\n@@ -136,7 +128,7 @@ namespace pb_ds\n \t\t\t\t    m_p_traits->extract_key(\n \t\t\t\t\t\t\t    static_cast<const_leaf_pointer>(m_p_nd)->value())));\n \n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n \n \treturn (static_cast<const_internal_node_pointer>(m_p_nd)->pref_b_it());\n       }\n@@ -149,7 +141,7 @@ namespace pb_ds\n \t\t\t\t  m_p_traits->extract_key(\n \t\t\t\t\t\t\t  static_cast<const_leaf_pointer>(m_p_nd)->value())));\n \n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n \n \treturn (static_cast<const_internal_node_pointer>(m_p_nd)->pref_e_it());\n       }\n@@ -198,78 +190,62 @@ namespace pb_ds\n       */\n \n       inline\n-      pat_trie_const_node_it_(node_pointer p_nd = NULL,  const_e_access_traits_pointer p_traits = NULL) : m_p_nd(const_cast<node_pointer>(p_nd)),\n-\t\t\t\t\t\t\t\t\t\t\t\t\t  m_p_traits(p_traits)\n+      pat_trie_const_node_it_(node_pointer p_nd = NULL,  \n+\t\t\t      const_e_access_traits_pointer p_traits = NULL) \n+      : m_p_nd(const_cast<node_pointer>(p_nd)), m_p_traits(p_traits)\n       { }\n \n       // Subtree valid prefix.\n-      inline std::pair<\n-\tconst_e_iterator,\n-\tconst_e_iterator>\n+      inline std::pair<const_e_iterator, const_e_iterator>\n       valid_prefix() const\n-      {\n-\treturn (std::make_pair(\n-\t\t\t       pref_begin(),\n-\t\t\t       pref_end()));\n-      }\n+      { return std::make_pair(pref_begin(), pref_end()); }\n \n-      // Const access; returns the __const iterator*  associated with the current leaf.\n+      // Const access; returns the __const iterator* associated with\n+      // the current leaf.\n       inline const_reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(num_children() == 0);\n-\n-\treturn (Const_Iterator(m_p_nd));\n+\t_GLIBCXX_DEBUG_ASSERT(num_children() == 0);\n+\treturn Const_Iterator(m_p_nd);\n       }\n \n       // Metadata access.\n       inline const_metadata_reference\n       get_metadata() const\n-      {\n-\treturn (m_p_nd->get_metadata());\n-      }\n+      { return m_p_nd->get_metadata(); }\n \n       // Returns the number of children in the corresponding node.\n       inline size_type\n       num_children() const\n       {\n \tif (m_p_nd->m_type == pat_trie_leaf_node_type)\n \t  return (0);\n-\n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\n-\treturn (std::distance(\n-\t\t\t      static_cast<internal_node_pointer>(m_p_nd)->begin(),\n-\t\t\t      static_cast<internal_node_pointer>(m_p_nd)->end()));\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n+\treturn std::distance(static_cast<internal_node_pointer>(m_p_nd)->begin(),  static_cast<internal_node_pointer>(m_p_nd)->end());\n       }\n \n-      // Returns a __const node __iterator to the corresponding node's i-th child.\n+      // Returns a __const node __iterator to the corresponding node's\n+      // i-th child.\n       PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n       get_child(size_type i) const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_internal_node_type);\n \ttypename Internal_Node::iterator it =\n \t  static_cast<internal_node_pointer>(m_p_nd)->begin();\n \n \tstd::advance(it, i);\n-\n-\treturn (PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC(*it, m_p_traits));\n+\treturn PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC(*it, m_p_traits);\n       }\n \n       // Compares content to a different iterator object.\n       inline bool\n       operator==(const PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC& other) const\n-      {\n-\treturn (m_p_nd == other.m_p_nd);\n-      }\n+      { return (m_p_nd == other.m_p_nd); }\n \n       // Compares content (negatively) to a different iterator object.\n       inline bool\n       operator!=(const PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC& other) const\n-      {\n-\treturn (m_p_nd != other.m_p_nd);\n-      }\n+      { return m_p_nd != other.m_p_nd; }\n \n     private:\n \n@@ -343,41 +319,34 @@ namespace pb_ds\n       inline reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(base_type::num_children() == 0);\n-\n-\treturn (Iterator(base_type::m_p_nd));\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::num_children() == 0);\n+\treturn Iterator(base_type::m_p_nd);\n \n       }\n \n       // Returns a node __iterator to the corresponding node's i-th child.\n       PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\n       get_child(size_type i) const\n       {\n-\tPB_DS_DBG_ASSERT(base_type::m_p_nd->m_type ==\n+\t_GLIBCXX_DEBUG_ASSERT(base_type::m_p_nd->m_type ==\n \t\t\t pat_trie_internal_node_type);\n \n \ttypename Internal_Node::iterator it =\n \t  static_cast<internal_node_pointer>(base_type::m_p_nd)->begin();\n \n \tstd::advance(it, i);\n-\n-\treturn (PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC(*it, base_type::m_p_traits));\n+\treturn PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC(*it, base_type::m_p_traits);\n       }\n \n     private:\n       friend class PB_DS_CLASS_C_DEC;\n     };\n \n #undef PB_DS_PAT_TRIE_CONST_NODE_ITERATOR_C_DEC\n-\n #undef PB_DS_PAT_TRIE_NODE_ITERATOR_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_NODE_ITERATORS_HPP\n+#endif \n "}, {"sha": "8fbc2246b367523ccff8c2ea7c9927f4a1e44aca", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -66,41 +66,29 @@\n #include <functional>\n #include <assert.h>\n #include <list>\n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n #include <ext/pb_ds/detail/map_debug_base.hpp>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#endif \n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\ttypename Key,\t\t\\\n-\t\t\t\t\t\ttypename Mapped,\t\\\n-\t\t\t\t\t\tclass Node_And_It_Traits, \\\n-\t\t\t\t\t\tclass Allocator>\n+    template<typename Key, typename Mapped, class Node_And_It_Traits, \\\n+\t     class Allocator>\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     pat_trie_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     pat_trie_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n@@ -116,29 +104,23 @@ namespace pb_ds\n \t\t\t\t\t\tAllocator,\t\\\n \t\t\t\t\t\tfalse>\n \n-#ifdef PB_DS_USE_MAP_DEBUG_BASE\n+#ifdef _GLIBCXX_DEBUG\n #define PB_DS_MAP_DEBUG_BASE_C_DEC\t\t\t\t\t\\\n-    map_debug_base<\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\tKey,\t\\\n-\t\t\t\t\t\t\t\teq_by_less< \\\n-\t\t\t\t\t\t\t\t\t\t\t\tKey, \\\n-\t\t\t\t\t\t\t\t\t\t\t\tstd::less< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tKey> >, \\\n-\t\t\t\t\t\t\t\ttypename Allocator::template rebind< \\\n-\t\t\t\t\t\t\t\t\t\t\t\t     Key>::other::const_reference>\n-#endif // #ifdef PB_DS_USE_MAP_DEBUG_BASE\n+    map_debug_base<Key,\teq_by_less<Key, \\\n+\t\t\tstd::less<Key> >, typename Allocator::template rebind<Key>::other::const_reference>\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_STATIC_ASSERT(UNIQUE, E)\t\t\t\t\t\\\n     typedef\t\t\t\t\t\t\t\t\\\n@@ -154,9 +136,9 @@ namespace pb_ds\n \t     class Node_And_It_Traits,\n \t     class Allocator>\n     class PB_DS_CLASS_NAME :\n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       public PB_DS_MAP_DEBUG_BASE_C_DEC,\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n       public Node_And_It_Traits::synth_e_access_traits,\n       public Node_And_It_Traits::node_update,\n       public PB_DS_TYPES_TRAITS_C_DEC\n@@ -228,9 +210,9 @@ namespace pb_ds\n \n #include <ext/pb_ds/detail/pat_trie_/cond_dtor_entry_dealtor.hpp>\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       typedef PB_DS_MAP_DEBUG_BASE_C_DEC map_debug_base;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n #include <ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp>\n \n@@ -571,8 +553,7 @@ namespace pb_ds\n       inline static leaf_pointer\n       rightmost_descendant(node_pointer p_nd);\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n@@ -584,11 +565,9 @@ namespace pb_ds\n \n       static size_type\n       recursive_count_leafs(const_node_pointer p_nd);\n-\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n #ifdef PB_DS_PAT_TRIE_TRACE_\n-\n       static void\n       trace_node(const_node_pointer p_nd, size_type level);\n \n@@ -597,18 +576,23 @@ namespace pb_ds\n       trace_node_metadata(const_node_pointer p_nd, type_to_type<Metadata_>);\n \n       static void\n-      trace_node_metadata(const_node_pointer, type_to_type<null_node_metadata>);\n-\n-#endif // #ifdef PB_DS_PAT_TRIE_TRACE_\n+      trace_node_metadata(const_node_pointer, \n+\t\t\t  type_to_type<null_node_metadata>);\n+#endif \n \n       leaf_pointer\n-      split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag);\n+      split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, \n+\t\t split_join_branch_bag& r_bag);\n \n       node_pointer\n-      rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag);\n+      rec_split(node_pointer p_nd, const_e_iterator b_it, \n+\t\tconst_e_iterator e_it, PB_DS_CLASS_C_DEC& other, \n+\t\tsplit_join_branch_bag& r_bag);\n \n       void\n-      split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_node::iterator child_b_it, size_type num_children, split_join_branch_bag& r_bag);\n+      split_insert_branch(size_type e_ind, const_e_iterator b_it, \n+\t\t\t  typename internal_node::iterator child_b_it, \n+\t\t\t  size_type num_children, split_join_branch_bag&);\n \n     private:\n       static head_allocator s_head_allocator;\n@@ -635,23 +619,15 @@ namespace pb_ds\n #include <ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_MAP_DEBUG_BASE_C_DEC\n \n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n #undef PB_DS_STATIC_ASSERT\n \n   } // namespace detail"}, {"sha": "b26ad6ed9d2c0734fe5f3d550543ea6d491524f6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/point_iterators.hpp", "status": "modified", "additions": 24, "deletions": 95, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpoint_iterators.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,9 +47,7 @@\n #ifndef PB_DS_PAT_TRIE_FIND_ITERATORS_HPP\n #define PB_DS_PAT_TRIE_FIND_ITERATORS_HPP\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n@@ -96,15 +94,6 @@ namespace pb_ds\n \t\t\t\t\t\t!Is_Forward_Iterator,\t\\\n \t\t\t\t\t\tAllocator>\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_PAT_TRIE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n \n     // Const iterator.\n     template<typename Type_Traits,\n@@ -166,70 +155,60 @@ namespace pb_ds\n       { }\n \n       inline\n-      pat_trie_const_it_(const PB_DS_CONST_ODIR_IT_C_DEC& \n-\t\t\t other) : m_p_nd(other.m_p_nd)\n+      pat_trie_const_it_(const PB_DS_CONST_ODIR_IT_C_DEC& other) \n+      : m_p_nd(other.m_p_nd)\n       { }\n \n       inline\n       PB_DS_CONST_IT_C_DEC& \n-      operator=(const PB_DS_CONST_IT_C_DEC& \n-\t\tother)\n+      operator=(const PB_DS_CONST_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\n \treturn (*this);\n       }\n \n       inline\n       PB_DS_CONST_IT_C_DEC& \n-      operator=(const PB_DS_CONST_ODIR_IT_C_DEC& \n-\t\tother)\n+      operator=(const PB_DS_CONST_ODIR_IT_C_DEC& other)\n       {\n \tm_p_nd = other.m_p_nd;\n-\n \treturn (*this);\n       }\n \n       inline const_pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n \treturn (&static_cast<leaf_pointer>(m_p_nd)->value());\n       }\n \n       inline const_reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(m_p_nd->m_type == pat_trie_leaf_node_type);\n \treturn (static_cast<leaf_pointer>(m_p_nd)->value());\n       }\n \n       inline bool\n-      operator==(const PB_DS_CONST_IT_C_DEC\n-\t\t & other) const\n+      operator==(const PB_DS_CONST_IT_C_DEC& other) const\n       {\n \treturn (m_p_nd == other.m_p_nd);\n       }\n \n       inline bool\n-      operator==(const PB_DS_CONST_ODIR_IT_C_DEC\n-\t\t & other) const\n+      operator==(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n       {\n \treturn (m_p_nd == other.m_p_nd);\n       }\n \n       inline bool\n-      operator!=(const PB_DS_CONST_IT_C_DEC& \n-\t\t other) const\n+      operator!=(const PB_DS_CONST_IT_C_DEC& other) const\n       {\n \treturn (m_p_nd != other.m_p_nd);\n       }\n \n       inline bool\n-      operator!=(const PB_DS_CONST_ODIR_IT_C_DEC& \n-\t\t other) const\n+      operator!=(const PB_DS_CONST_ODIR_IT_C_DEC& other) const\n       {\n \treturn (m_p_nd != other.m_p_nd);\n       }\n@@ -238,110 +217,88 @@ namespace pb_ds\n       operator++()\n       {\n \tinc(integral_constant<int,Is_Forward_Iterator>());\n-\n \treturn (*this);\n       }\n \n       inline PB_DS_CONST_IT_C_DEC\n       operator++(int)\n       {\n-\tPB_DS_CONST_IT_C_DEC\n-\t  ret_it(m_p_nd);\n-\n+\tPB_DS_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator++();\n-\n \treturn (ret_it);\n       }\n \n       inline PB_DS_CONST_IT_C_DEC& \n       operator--()\n       {\n \tdec(integral_constant<int,Is_Forward_Iterator>());\n-\n \treturn (*this);\n       }\n \n       inline PB_DS_CONST_IT_C_DEC\n       operator--(int)\n       {\n-\tPB_DS_CONST_IT_C_DEC\n-\t  ret_it(m_p_nd);\n-\n+\tPB_DS_CONST_IT_C_DEC ret_it(m_p_nd);\n \toperator--();\n-\n \treturn (ret_it);\n       }\n \n     protected:\n       inline void\n       inc(false_type)\n-      {\n-\tdec(true_type());\n-      }\n+      { dec(true_type()); }\n \n       void\n       inc(true_type)\n       {\n \tif (m_p_nd->m_type == pat_trie_head_node_type)\n \t  {\n \t    m_p_nd = static_cast<head_pointer>(m_p_nd)->m_p_min;\n-\n \t    return;\n \t  }\n \n \tnode_pointer p_y = m_p_nd->m_p_parent;\n-\n-\twhile (p_y->m_type != pat_trie_head_node_type&& \n+\twhile (p_y->m_type != pat_trie_head_node_type && \n \t       get_larger_sibling(m_p_nd) == NULL)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    p_y = p_y->m_p_parent;\n \t  }\n \n \tif (p_y->m_type == pat_trie_head_node_type)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    return;\n \t  }\n-\n \tm_p_nd = leftmost_descendant(get_larger_sibling(m_p_nd));\n       }\n \n       inline void\n       dec(false_type)\n-      {\n-\tinc(true_type());\n-      }\n+      { inc(true_type()); }\n \n       void\n       dec(true_type)\n       {\n \tif (m_p_nd->m_type == pat_trie_head_node_type)\n \t  {\n \t    m_p_nd = static_cast<head_pointer>(m_p_nd)->m_p_max;\n-\n \t    return;\n \t  }\n \n \tnode_pointer p_y = m_p_nd->m_p_parent;\n-\n-\twhile (p_y->m_type != pat_trie_head_node_type&& \n+\twhile (p_y->m_type != pat_trie_head_node_type && \n \t       get_smaller_sibling(m_p_nd) == NULL)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    p_y = p_y->m_p_parent;\n \t  }\n \n \tif (p_y->m_type == pat_trie_head_node_type)\n \t  {\n \t    m_p_nd = p_y;\n-\n \t    return;\n \t  }\n-\n \tm_p_nd = rightmost_descendant(get_smaller_sibling(m_p_nd));\n       }\n \n@@ -352,13 +309,11 @@ namespace pb_ds\n \t  static_cast<internal_node_pointer>(p_nd->m_p_parent);\n \n \ttypename Internal_Node::iterator it = p_parent->begin();\n-\n \twhile (*it != p_nd)\n \t  ++it;\n \n \ttypename Internal_Node::iterator next_it = it;\n \t++next_it;\n-\n \treturn ((next_it == p_parent->end())? NULL :* next_it);\n       }\n \n@@ -372,22 +327,17 @@ namespace pb_ds\n \n \tif (*it == p_nd)\n \t  return (NULL);\n-\n \ttypename Internal_Node::iterator prev_it;\n-\n \tdo\n \t  {\n \t    prev_it = it;\n-\n \t    ++it;\n-\n \t    if (*it == p_nd)\n \t      return (*prev_it);\n \t  }\n \twhile (true);\n \n-\tPB_DS_DBG_ASSERT(false);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(false);\n \treturn (NULL);\n       }\n \n@@ -405,7 +355,6 @@ namespace pb_ds\n       {\n \tif (p_nd->m_type == pat_trie_leaf_node_type)\n \t  return (static_cast<leaf_pointer>(p_nd));\n-\n \treturn (static_cast<internal_node_pointer>(p_nd)->rightmost_descendant());\n       }\n \n@@ -478,7 +427,6 @@ namespace pb_ds\n       operator=(const PB_DS_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\n \treturn (*this);\n       }\n \n@@ -487,14 +435,13 @@ namespace pb_ds\n       operator=(const PB_DS_ODIR_IT_C_DEC& other)\n       {\n \tbase_it_type::m_p_nd = other.m_p_nd;\n-\n \treturn (*this);\n       }\n \n       inline pointer\n       operator->() const\n       {\n-\tPB_DS_DBG_ASSERT(base_it_type::m_p_nd->m_type ==\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd->m_type ==\n \t\t\t pat_trie_leaf_node_type);\n \n \treturn (&static_cast<leaf_pointer>(base_it_type::m_p_nd)->value());\n@@ -503,9 +450,7 @@ namespace pb_ds\n       inline reference\n       operator*() const\n       {\n-\tPB_DS_DBG_ASSERT(base_it_type::m_p_nd->m_type ==\n-\t\t\t pat_trie_leaf_node_type);\n-\n+\t_GLIBCXX_DEBUG_ASSERT(base_it_type::m_p_nd->m_type == pat_trie_leaf_node_type);\n \treturn (static_cast<leaf_pointer>(base_it_type::m_p_nd)->value());\n       }\n \n@@ -514,38 +459,29 @@ namespace pb_ds\n       {\n \tPB_DS_CONST_IT_C_DEC::\n \t  operator++();\n-\n \treturn (*this);\n       }\n \n       inline PB_DS_IT_C_DEC\n       operator++(int)\n       {\n-\tPB_DS_IT_C_DEC\n-\t  ret_it(base_it_type::m_p_nd);\n-\n+\tPB_DS_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator++();\n-\n \treturn (ret_it);\n       }\n \n       inline PB_DS_IT_C_DEC& \n       operator--()\n       {\n-\tPB_DS_CONST_IT_C_DEC::\n-\t  operator--();\n-\n+\tPB_DS_CONST_IT_C_DEC::operator--();\n \treturn (*this);\n       }\n \n       inline PB_DS_IT_C_DEC\n       operator--(int)\n       {\n-\tPB_DS_IT_C_DEC\n-\t  ret_it(base_it_type::m_p_nd);\n-\n+\tPB_DS_IT_C_DEC ret_it(base_it_type::m_p_nd);\n \toperator--();\n-\n \treturn (ret_it);\n       }\n \n@@ -556,19 +492,12 @@ namespace pb_ds\n     };\n \n #undef PB_DS_CONST_IT_C_DEC\n-\n #undef PB_DS_CONST_ODIR_IT_C_DEC\n-\n #undef PB_DS_IT_C_DEC\n-\n #undef PB_DS_ODIR_IT_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_PAT_TRIE_FIND_ITERATORS_HPP\n+#endif \n "}, {"sha": "63553ec92a4bae1601509c5977d1d3621bf0f65f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/r_erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fr_erase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,13 +49,10 @@ inline void\n PB_DS_CLASS_C_DEC::\n actual_erase_node(node_pointer p_z)\n {\n-  PB_DS_DBG_ASSERT(m_size > 0);\n+  _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n-\n-  PB_DS_DBG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n-\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n   p_z->~node();\n-\n   s_node_allocator.deallocate(p_z, 1);\n }\n \n@@ -67,24 +64,19 @@ update_min_max_for_erased_node(node_pointer p_z)\n   if (m_size == 1)\n     {\n       m_p_head->m_p_left = m_p_head->m_p_right = m_p_head;\n-\n       return;\n     }\n \n   if (m_p_head->m_p_left == p_z)\n     {\n       iterator it(p_z);\n-\n       ++it;\n-\n       m_p_head->m_p_left = it.m_p_nd;\n     }\n   else if (m_p_head->m_p_right == p_z)\n     {\n       iterator it(p_z);\n-\n       --it;\n-\n       m_p_head->m_p_right = it.m_p_nd;\n     }\n }\n@@ -94,18 +86,13 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  PB_DS_DBG_ONLY(assert_valid(true, true);)\n-\n-    clear_imp(m_p_head->m_p_parent);\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true, true);)\n+  clear_imp(m_p_head->m_p_parent);\n   m_size = 0;\n-\n   initialize();\n-\n-  PB_DS_DBG_ONLY(map_debug_base::clear();)\n-\n-    PB_DS_DBG_ONLY(assert_valid(true, true);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(true, true);)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n@@ -114,13 +101,9 @@ clear_imp(node_pointer p_nd)\n {\n   if (p_nd == NULL)\n     return;\n-\n   clear_imp(p_nd->m_p_left);\n-\n   clear_imp(p_nd->m_p_right);\n-\n   p_nd->~Node();\n-\n   s_node_allocator.deallocate(p_nd, 1);\n }\n "}, {"sha": "84e6fddc088f7d0f9b0716b81ff4b1762cef7041", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/rotate_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Frotate_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,14 +50,12 @@ PB_DS_CLASS_C_DEC::\n rotate_left(node_pointer p_x)\n {\n   node_pointer p_y = p_x->m_p_right;\n-\n   p_x->m_p_right = p_y->m_p_left;\n \n   if (p_y->m_p_left != NULL)\n     p_y->m_p_left->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n-\n   if (p_x == m_p_head->m_p_parent)\n     m_p_head->m_p_parent = p_y;\n   else if (p_x == p_x->m_p_parent->m_p_left)\n@@ -68,10 +66,10 @@ rotate_left(node_pointer p_x)\n   p_y->m_p_left = p_x;\n   p_x->m_p_parent = p_y;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_x);)\n-    PB_DS_DBG_ONLY(assert_node_consistent(p_y);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n \n-    apply_update(p_x, (Node_Update* )this);\n+  apply_update(p_x, (Node_Update* )this);\n   apply_update(p_x->m_p_parent, (Node_Update* )this);\n }\n \n@@ -81,14 +79,12 @@ PB_DS_CLASS_C_DEC::\n rotate_right(node_pointer p_x)\n {\n   node_pointer p_y = p_x->m_p_left;\n-\n   p_x->m_p_left = p_y->m_p_right;\n \n   if (p_y->m_p_right != NULL)\n     p_y->m_p_right->m_p_parent = p_x;\n \n   p_y->m_p_parent = p_x->m_p_parent;\n-\n   if (p_x == m_p_head->m_p_parent)\n     m_p_head->m_p_parent = p_y;\n   else if (p_x == p_x->m_p_parent->m_p_right)\n@@ -99,10 +95,10 @@ rotate_right(node_pointer p_x)\n   p_y->m_p_right = p_x;\n   p_x->m_p_parent = p_y;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_x);)\n-    PB_DS_DBG_ONLY(assert_node_consistent(p_y);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n \n-    apply_update(p_x, (Node_Update* )this);\n+  apply_update(p_x, (Node_Update* )this);\n   apply_update(p_x->m_p_parent, (Node_Update* )this);\n }\n \n@@ -112,15 +108,12 @@ PB_DS_CLASS_C_DEC::\n rotate_parent(node_pointer p_nd)\n {\n   node_pointer p_parent = p_nd->m_p_parent;\n-\n   if (p_nd == p_parent->m_p_left)\n     rotate_right(p_parent);\n   else\n     rotate_left(p_parent);\n-\n-  PB_DS_DBG_ASSERT(p_parent->m_p_parent = p_nd);\n-  PB_DS_DBG_ASSERT(p_nd->m_p_left == p_parent ||\n-\t\t   p_nd->m_p_right == p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_parent = p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left == p_parent || p_nd->m_p_right == p_parent);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -135,10 +128,9 @@ inline void\n PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_* p_update)\n {\n-  p_update->operator()(\n-\t\t\t& PB_DS_V2F(p_nd->m_value),(p_nd->m_p_left == NULL)?\n+  p_update->operator()(& PB_DS_V2F(p_nd->m_value),(p_nd->m_p_left == NULL) ?\n \t\t\tNULL :\n-\t\t\t& PB_DS_V2F(p_nd->m_p_left->m_value),(p_nd->m_p_right == NULL)?\n+\t\t\t& PB_DS_V2F(p_nd->m_p_left->m_value),(p_nd->m_p_right == NULL) ?\n \t\t\tNULL :\n \t\t\t& PB_DS_V2F(p_nd->m_p_right->m_value));\n }\n@@ -152,7 +144,6 @@ update_to_top(node_pointer p_nd, Node_Update_* p_update)\n   while (p_nd != m_p_head)\n     {\n       apply_update(p_nd, p_update);\n-\n       p_nd = p_nd->m_p_parent;\n     }\n }"}, {"sha": "ed5d890f6f2c94fea2faeda0dad61b290e53cf55", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp", "status": "modified", "additions": 54, "deletions": 130, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,29 +49,21 @@ void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid(););\n-  PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n   split_join_branch_bag bag;\n-\n   leaf_pointer p_split_lf = split_prep(r_key, other, bag);\n-\n   if (p_split_lf == NULL)\n     {\n-      PB_DS_DBG_ASSERT(bag.empty());\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ASSERT(bag.empty());\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n     }\n \n-  PB_DS_DBG_ASSERT(!bag.empty());\n-\n+  _GLIBCXX_DEBUG_ASSERT(!bag.empty());\n   other.clear();\n-\n-  m_p_head->m_p_parent = rec_split(\n-\t\t\t\t   m_p_head->m_p_parent,\n+  m_p_head->m_p_parent = rec_split(m_p_head->m_p_parent,\n \t\t\t\t   pref_begin(p_split_lf),\n \t\t\t\t   pref_end(p_split_lf),\n \t\t\t\t   other,\n@@ -84,81 +76,61 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   other.m_p_head->m_p_min =\n     other.leftmost_descendant(other.m_p_head->m_p_parent);\n \n-  other.m_size = std::distance(\n-\t\t\t       other.PB_DS_CLASS_C_DEC::begin(),\n+  other.m_size = std::distance(other.PB_DS_CLASS_C_DEC::begin(),\n \t\t\t       other.PB_DS_CLASS_C_DEC::end());\n   m_size -= other.m_size;\n-\n-  PB_DS_DBG_ONLY(assert_valid(););\n-  PB_DS_DBG_ONLY(other.assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::leaf_pointer\n PB_DS_CLASS_C_DEC::\n split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n {\n-  PB_DS_DBG_ASSERT(r_bag.empty());\n-\n+  _GLIBCXX_DEBUG_ASSERT(r_bag.empty());\n   if (m_size == 0)\n     {\n       other.clear();\n-\n-      PB_DS_DBG_ONLY(assert_valid(););\n-      PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n       return (NULL);\n     }\n \n-  if (synth_e_access_traits::cmp_keys(\n-\t\t\t\t      r_key,\n+  if (synth_e_access_traits::cmp_keys(r_key,\n \t\t\t\t      PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value())))\n     {\n       other.clear();\n-\n       value_swap(other);\n-\n-      PB_DS_DBG_ONLY(assert_valid(););\n-      PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n       return (NULL);\n     }\n \n-  if (!synth_e_access_traits::cmp_keys(\n-\t\t\t\t       r_key,\n+  if (!synth_e_access_traits::cmp_keys(r_key,\n \t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value())))\n     {\n-      PB_DS_DBG_ONLY(assert_valid(););\n-      PB_DS_DBG_ONLY(other.assert_valid(););\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n       return (NULL);\n     }\n \n   iterator it = lower_bound(r_key);\n \n-  if (!synth_e_access_traits::equal_keys(\n-\t\t\t\t\t PB_DS_V2F(*it),\n-\t\t\t\t\t r_key))\n+  if (!synth_e_access_traits::equal_keys(PB_DS_V2F(*it), r_key))\n     --it;\n \n   node_pointer p_nd = it.m_p_nd;\n-\n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n   leaf_pointer p_ret_l = static_cast<leaf_pointer>(p_nd);\n-\n   while (p_nd->m_type != pat_trie_head_node_type)\n     {\n       r_bag.add_branch();\n-\n       p_nd = p_nd->m_p_parent;\n     }\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(synth_e_access_traits& )(*this), other);)\n \n-  PB_DS_DBG_ONLY(map_debug_base::split(\n-\t\t\t\t       r_key,(synth_e_access_traits& )(*this),\n-\t\t\t\t       other);)\n-\n-    return (p_ret_l);\n+  return (p_ret_l);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -168,36 +140,26 @@ rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS\n {\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     {\n-      PB_DS_DBG_ASSERT(other.m_p_head->m_p_parent == NULL);\n-\n+      _GLIBCXX_DEBUG_ASSERT(other.m_p_head->m_p_parent == NULL);\n       return (p_nd);\n     }\n \n-  PB_DS_DBG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+  internal_node_pointer p_internal_nd = static_cast<internal_node_pointer>(p_nd);\n \n-  internal_node_pointer p_internal_nd =\n-    static_cast<internal_node_pointer>(p_nd);\n-\n-  node_pointer p_child_ret = rec_split(\n-\t\t\t\t       p_internal_nd->get_child_node(b_it, e_it, this),\n-\t\t\t\t       b_it,\n-\t\t\t\t       e_it,\n-\t\t\t\t       other,\n-\t\t\t\t       r_bag);\n-\n-  PB_DS_DBG_ONLY(p_child_ret->assert_valid(this);)\n-\n-    p_internal_nd->replace_child(        p_child_ret, b_it, e_it, this);\n+  node_pointer p_child_ret = rec_split(p_internal_nd->get_child_node(b_it, e_it, this), b_it, e_it, other, r_bag);\n \n+  _GLIBCXX_DEBUG_ONLY(p_child_ret->assert_valid(this);)\n+  p_internal_nd->replace_child(p_child_ret, b_it, e_it, this);\n   apply_update(p_internal_nd, (node_update* )this);\n \n-  typename internal_node::iterator child_it    =\n+  typename internal_node::iterator child_it  =\n     p_internal_nd->get_child_it(b_it, e_it, this);\n \n   const size_type lhs_num_children =\n     std::distance(p_internal_nd->begin(), child_it) + 1;\n \n-  PB_DS_DBG_ASSERT(lhs_num_children > 0);\n+  _GLIBCXX_DEBUG_ASSERT(lhs_num_children > 0);\n \n   size_type rhs_num_children =\n     std::distance(p_internal_nd->begin(), p_internal_nd->end()) -\n@@ -206,55 +168,37 @@ rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS\n   if (rhs_num_children == 0)\n     {\n       apply_update(p_internal_nd, (node_update* )this);\n-\n       return (p_internal_nd);\n     }\n \n   ++child_it;\n-\n   other.split_insert_branch(p_internal_nd->get_e_ind(),\n-\t\t\t    b_it,\n-\t\t\t    child_it,\n-\t\t\t    rhs_num_children,\n-\t\t\t    r_bag);\n-\n-  child_it    =\n-    p_internal_nd->get_child_it(b_it, e_it, this);\n+\t\t\t    b_it, child_it, rhs_num_children, r_bag);\n \n+  child_it = p_internal_nd->get_child_it(b_it, e_it, this);\n   ++child_it;\n-\n   while (rhs_num_children != 0)\n     {\n       child_it = p_internal_nd->remove_child(child_it);\n-\n       --rhs_num_children;\n     }\n \n   apply_update(p_internal_nd, (node_update* )this);\n-\n-  PB_DS_DBG_ASSERT(std::distance(\n-\t\t\t\t p_internal_nd->begin(),\n-\t\t\t\t p_internal_nd->end()) >= 1);\n+  _GLIBCXX_DEBUG_ASSERT(std::distance(p_internal_nd->begin(),\n+\t\t\t\t      p_internal_nd->end()) >= 1);\n \n   if (std::distance(p_internal_nd->begin(), p_internal_nd->end()) > 1)\n     {\n       p_internal_nd->update_prefixes(this);\n-\n-      PB_DS_DBG_ONLY(p_internal_nd->assert_valid(this);)\n-\n-        apply_update(p_internal_nd, (node_update* )this);\n-\n+      _GLIBCXX_DEBUG_ONLY(p_internal_nd->assert_valid(this);)\n+      apply_update(p_internal_nd, (node_update* )this);\n       return (p_internal_nd);\n     }\n \n   node_pointer p_ret =* p_internal_nd->begin();\n-\n   p_internal_nd->~internal_node();\n-\n   s_internal_node_allocator.deallocate(p_internal_nd, 1);\n-\n   apply_update(p_ret, (node_update* )this);\n-\n   return (p_ret);\n }\n \n@@ -263,74 +207,54 @@ void\n PB_DS_CLASS_C_DEC::\n split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_node::iterator child_b_it, size_type num_children, split_join_branch_bag& r_bag)\n {\n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   if (m_p_head->m_p_parent != NULL)\n     m_p_head->m_p_parent->assert_valid(this);\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n   const size_type total_num_children =((m_p_head->m_p_parent == NULL)? 0 : 1) + num_children;\n \n   if (total_num_children == 0)\n     {\n-      PB_DS_DBG_ASSERT(m_p_head->m_p_parent == NULL);\n-\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == NULL);\n       return;\n     }\n \n   if (total_num_children == 1)\n     {\n       if (m_p_head->m_p_parent != NULL)\n         {\n-\t  PB_DS_DBG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n-\n-            return;\n+\t  _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+          return;\n         }\n \n-      PB_DS_DBG_ASSERT(m_p_head->m_p_parent == NULL);\n+      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == NULL);\n       m_p_head->m_p_parent =* child_b_it;\n-\n       m_p_head->m_p_parent->m_p_parent = m_p_head;\n-\n       apply_update(m_p_head->m_p_parent, (node_update* )this);\n-\n-      PB_DS_DBG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n-\n-        return;\n+      _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+      return;\n     }\n \n-  PB_DS_DBG_ASSERT(total_num_children > 1);\n-\n+  _GLIBCXX_DEBUG_ASSERT(total_num_children > 1);\n   internal_node_pointer p_new_root = r_bag.get_branch();\n-\n   new (p_new_root) internal_node(e_ind, b_it);\n-\n   size_type num_inserted = 0;\n-\n   while (num_inserted++ < num_children)\n     {\n-      PB_DS_DBG_ONLY((*child_b_it)->assert_valid(this);)\n-\n-        p_new_root->add_child(\n-\t\t\t      * child_b_it,\n-\t\t\t      pref_begin(*child_b_it),\n-\t\t\t      pref_end(*child_b_it),\n-\t\t\t      this);\n-\n+      _GLIBCXX_DEBUG_ONLY((*child_b_it)->assert_valid(this);)\n+        p_new_root->add_child(*child_b_it, pref_begin(*child_b_it),\n+\t\t\t      pref_end(*child_b_it), this);\n       ++child_b_it;\n     }\n \n   if (m_p_head->m_p_parent != NULL)\n-    p_new_root->add_child(\n-\t\t\t  m_p_head->m_p_parent,\n+    p_new_root->add_child(m_p_head->m_p_parent, \n \t\t\t  pref_begin(m_p_head->m_p_parent),\n-\t\t\t  pref_end(m_p_head->m_p_parent),\n-\t\t\t  this);\n+\t\t\t  pref_end(m_p_head->m_p_parent), this);\n \n   m_p_head->m_p_parent = p_new_root;\n-\n   p_new_root->m_p_parent = m_p_head;\n-\n   apply_update(m_p_head->m_p_parent, (node_update* )this);\n-\n-  PB_DS_DBG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+}"}, {"sha": "436e03a08b4501ca0df397ea1bcd7379ac8cdbe0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -76,7 +76,7 @@ class split_join_branch_bag\n   internal_node_pointer\n   get_branch()\n   {\n-    PB_DS_DBG_ASSERT(!m_bag.empty());\n+    _GLIBCXX_DEBUG_ASSERT(!m_bag.empty());\n \n     internal_node_pointer p_nd =* m_bag.begin();\n "}, {"sha": "79cd72cba2bdf2342e8c5ea2f6443a2c32a6abcc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/synth_e_access_traits.hpp", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_e_access_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_e_access_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsynth_e_access_traits.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -96,10 +96,10 @@ namespace pb_ds\n       inline static const_key_reference\n       extract_key(const_reference r_val);\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       bool\n       operator()(const_key_reference r_lhs, const_key_reference r_rhs);\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif\n \n     private:\n       inline static const_key_reference\n@@ -136,14 +136,11 @@ namespace pb_ds\n \t{\n \t  if (b_r == e_r)\n \t    return (false);\n-\n \t  if (base_type::e_pos(*b_l) != base_type::e_pos(*b_r))\n \t    return (false);\n-\n \t  ++b_l;\n \t  ++b_r;\n \t}\n-\n       return (!compare_after || b_r == e_r);\n     }\n \n@@ -168,22 +165,18 @@ namespace pb_ds\n \t{\n \t  if (b_r == e_r)\n \t    return (false);\n-\n \t  const typename base_type::size_type l_pos =\n \t    base_type::e_pos(*b_l);\n \t  const typename base_type::size_type r_pos =\n \t    base_type::e_pos(*b_r);\n-\n \t  if (l_pos != r_pos)\n \t    return (l_pos < r_pos);\n-\n \t  ++b_l;\n \t  ++b_r;\n \t}\n \n       if (!compare_after)\n \treturn (false);\n-\n       return (b_r != e_r);\n     }\n \n@@ -223,21 +216,20 @@ namespace pb_ds\n       return (r_val.first);\n     }\n \n-#ifdef PB_DS_PAT_TRIE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_SYNTH_E_ACCESS_TRAITS_T_DEC\n     bool\n     PB_DS_SYNTH_E_ACCESS_TRAITS_C_DEC::\n     operator()(const_key_reference r_lhs, const_key_reference r_rhs)\n     {\n       return (cmp_keys(r_lhs, r_rhs));\n     }\n-#endif // #ifdef PB_DS_PAT_TRIE_DEBUG_\n+#endif \n \n #undef PB_DS_SYNTH_E_ACCESS_TRAITS_T_DEC\n-\n #undef PB_DS_SYNTH_E_ACCESS_TRAITS_C_DEC\n \n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SYNTH_E_ACCESS_TRAITS_HPP\n+#endif "}, {"sha": "de220d95351507e3dc42f5be022b40d88f2a1549", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -60,7 +60,7 @@ PB_DS_CLASS_NAME()\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -70,7 +70,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -80,7 +80,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -90,19 +90,19 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     PB_DS_BASE_C_DEC::swap(other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "3a4049e9f8de1dd238c5e4513c7149d9c7969289", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,7 +44,7 @@\n  * Contains an implementation for rb_tree_.\n  */\n \n-#ifdef PB_DS_RB_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n@@ -56,16 +56,12 @@ assert_node_consistent(const node_pointer p_nd) const\n \n   const size_type l_height = assert_node_consistent(p_nd->m_p_left);\n   const size_type r_height = assert_node_consistent(p_nd->m_p_right);\n-\n   if (p_nd->m_red)\n     {\n-      PB_DS_DBG_ASSERT(is_effectively_black(p_nd->m_p_left));\n-\n-      PB_DS_DBG_ASSERT(is_effectively_black(p_nd->m_p_right));\n+      _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_nd->m_p_left));\n+      _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_nd->m_p_right));\n     }\n-\n-  PB_DS_DBG_ASSERT(l_height == r_height);\n-\n+  _GLIBCXX_DEBUG_ASSERT(l_height == r_height);\n   return ((p_nd->m_red? 0 : 1) + l_height);\n }\n \n@@ -75,18 +71,14 @@ PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   PB_DS_BASE_C_DEC::assert_valid();\n-\n   const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n-\n-  PB_DS_DBG_ASSERT(p_head->m_red);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_head->m_red);\n   if (p_head->m_p_parent != NULL)\n     {\n-      PB_DS_DBG_ASSERT(!p_head->m_p_parent->m_red);\n-\n+      _GLIBCXX_DEBUG_ASSERT(!p_head->m_p_parent->m_red);\n       assert_node_consistent(p_head->m_p_parent);\n     }\n }\n \n-#endif // #ifdef PB_DS_RB_TREE_DEBUG_\n+#endif \n "}, {"sha": "cfe212589fced8d5f21c11fdfc75b0e7091ee0c5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -64,7 +64,7 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == PB_DS_BASE_C_DEC::end())\n     return (it);\n@@ -75,7 +75,7 @@ erase(iterator it)\n \n   erase_node(it.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -85,7 +85,7 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == PB_DS_BASE_C_DEC::m_p_head)\n     return (it);\n@@ -96,7 +96,7 @@ erase(reverse_iterator it)\n \n   erase_node(it.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -107,7 +107,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     size_type num_ersd = 0;\n \n@@ -125,7 +125,7 @@ erase_if(Pred pred)\n \t++it;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (num_ersd);\n }\n@@ -139,7 +139,7 @@ erase_node(node_pointer p_nd)\n \n   PB_DS_BASE_C_DEC::actual_erase_node(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -240,7 +240,7 @@ void\n PB_DS_CLASS_C_DEC::\n remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n {\n-  PB_DS_DBG_ASSERT(p_x == NULL || p_x->m_p_parent == p_new_x_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_x == NULL || p_x->m_p_parent == p_new_x_parent);\n \n   while (p_x != PB_DS_BASE_C_DEC::m_p_head->m_p_parent&& \n \t is_effectively_black(p_x))"}, {"sha": "d0e5e10fa1bbe0a35adf56dda76bb6b9571c225d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     std::pair<point_iterator, bool> ins_pair =\n     PB_DS_BASE_C_DEC::insert_leaf(r_value);\n@@ -58,12 +58,12 @@ insert(const_reference r_value)\n     {\n       ins_pair.first.m_p_nd->m_red = true;\n \n-      PB_DS_DBG_ONLY(this->structure_only_assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid();)\n \n         insert_fixup(ins_pair.first.m_p_nd);\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (ins_pair);\n }\n@@ -73,7 +73,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n insert_fixup(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(p_nd->m_red == true);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_red == true);\n \n   while (p_nd != PB_DS_BASE_C_DEC::m_p_head->m_p_parent&& \n \t p_nd->m_p_parent->m_red)"}, {"sha": "7942480811b98e597c2131dbe351988507bcc6ae", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 26, "deletions": 55, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,37 +52,28 @@\n #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n #define PB_DS_BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n #include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n-#endif // #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n #define PB_DS_BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n-#endif // #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n+#endif \n \n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <ext/pb_ds/detail/basic_types.hpp>\n #include <utility>\n #include <vector>\n #include <assert.h>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_RB_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_RB_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_RB_TREE_DEBUG_\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Key,\t\t\\\n@@ -94,22 +85,22 @@ namespace pb_ds\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     rb_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\n-#ifdef PB_DS_DATA_FALSE_INDICATOR\n-#define PB_DS_CLASS_NAME\t\t\t\\\n-    rb_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_BASE_CLASS_NAME\t\t\t\\\n     bin_search_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n+\n+#ifdef PB_DS_DATA_FALSE_INDICATOR\n+#define PB_DS_CLASS_NAME\t\t\t\\\n+    rb_tree_no_data_\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_BASE_CLASS_NAME\t\t\t\\\n     bin_search_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n@@ -131,13 +122,13 @@ namespace pb_ds\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n     template<typename Key,\n \t     typename Mapped,\n@@ -229,40 +220,30 @@ namespace pb_ds\n       void\n       copy_from_range(It first_it, It last_it);\n \n-      inline std::pair<\n-\tpoint_iterator,\n-\tbool>\n+      inline std::pair<point_iterator, bool>\n       insert(const_reference r_value);\n \n       inline mapped_reference\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\tPB_DS_DBG_ONLY(assert_valid();)\n-\n-\t  std::pair<point_iterator, bool> ins_pair =\n-\t  PB_DS_BASE_C_DEC::insert_leaf(\n-\t\t\t\t\tvalue_type(\n-\t\t\t\t\t\t   r_key,\n-\t\t\t\t\t\t   mapped_type()));\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tstd::pair<point_iterator, bool> ins_pair =\n+\tPB_DS_BASE_C_DEC::insert_leaf(value_type(r_key, mapped_type()));\n \n \tif (ins_pair.second == true)\n \t  {\n \t    ins_pair.first.m_p_nd->m_red = true;\n-\n-\t    PB_DS_DBG_ONLY(this->structure_only_assert_valid();)\n-\n-\t      insert_fixup(ins_pair.first.m_p_nd);\n+\t    _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid();)\n+\t    insert_fixup(ins_pair.first.m_p_nd);\n \t  }\n-\n-\tPB_DS_DBG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  return (ins_pair.first.m_p_nd->m_value.second);\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#else \n \tinsert(r_key);\n-\n \treturn (PB_DS_BASE_C_DEC::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE\n+#endif \n       }\n \n       inline bool\n@@ -288,15 +269,13 @@ namespace pb_ds\n \n     private:\n \n-#ifdef PB_DS_RB_TREE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n       size_type\n       assert_node_consistent(const node_pointer p_nd) const;\n-\n-#endif // #ifdef PB_DS_RB_TREE_DEBUG_\n+#endif \n \n       inline static bool\n       is_effectively_black(const node_pointer p_nd);\n@@ -350,19 +329,11 @@ namespace pb_ds\n #include <ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp>\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_BASE_CLASS_NAME\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S"}, {"sha": "8cb57501fc7aaa3629d9631d1cdb5438c762d110", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 59, "deletions": 114, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,85 +49,68 @@ inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-    PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n-\n-    if (PB_DS_BASE_C_DEC::join_prep(other) == false)\n-      {\n-        PB_DS_DBG_ONLY(assert_valid();)\n-\t  PB_DS_DBG_ONLY(other.assert_valid();)\n-\n-\t  return;\n-      }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n+  if (PB_DS_BASE_C_DEC::join_prep(other) == false)\n+    {\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return;\n+    }\n \n   const node_pointer p_x = other.split_min();\n-\n   join_imp(p_x, other.m_p_head->m_p_parent);\n-\n   PB_DS_BASE_C_DEC::join_finish(other);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n-\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n-    PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n+ }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n join_imp(node_pointer p_x, node_pointer p_r)\n {\n-  PB_DS_DBG_ASSERT(p_x != NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(p_x != NULL);\n   if (p_r != NULL)\n     p_r->m_red = false;\n \n-  const size_type h =\n-    black_height(PB_DS_BASE_C_DEC::m_p_head->m_p_parent);\n+  const size_type h = black_height(PB_DS_BASE_C_DEC::m_p_head->m_p_parent);\n   const size_type other_h = black_height(p_r);\n-\n   node_pointer p_x_l;\n   node_pointer p_x_r;\n-\n   std::pair<node_pointer, node_pointer> join_pos;\n-\n   const bool right_join = h >= other_h;\n-\n   if (right_join)\n     {\n-      join_pos = find_join_pos_right(            PB_DS_BASE_C_DEC::m_p_head->m_p_parent, h, other_h);\n-\n+      join_pos = find_join_pos_right(PB_DS_BASE_C_DEC::m_p_head->m_p_parent, \n+\t\t\t\t     h, other_h);\n       p_x_l = join_pos.first;\n       p_x_r = p_r;\n     }\n   else\n     {\n       p_x_l = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n-\n       PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_r;\n       if (p_r != NULL)\n \tp_r->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n \n-      join_pos = find_join_pos_left(            PB_DS_BASE_C_DEC::m_p_head->m_p_parent, h, other_h);\n-\n+      join_pos = find_join_pos_left(PB_DS_BASE_C_DEC::m_p_head->m_p_parent, \n+\t\t\t\t    h, other_h);\n       p_x_r = join_pos.first;\n     }\n \n   node_pointer p_parent = join_pos.second;\n-\n   if (p_parent == PB_DS_BASE_C_DEC::m_p_head)\n     {\n       PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_x;\n-\n       p_x->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n     }\n   else\n     {\n       p_x->m_p_parent = p_parent;\n-\n       if (right_join)\n \tp_x->m_p_parent->m_p_right = p_x;\n       else\n@@ -145,14 +128,10 @@ join_imp(node_pointer p_x, node_pointer p_r)\n   p_x->m_red = true;\n \n   PB_DS_BASE_C_DEC::initialize_min_max();\n-\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-    PB_DS_BASE_C_DEC::update_to_top(p_x, (node_update* )this);\n-\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  PB_DS_BASE_C_DEC::update_to_top(p_x, (node_update* )this);\n   insert_fixup(p_x);\n-\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -162,14 +141,12 @@ split_min()\n {\n   node_pointer p_min = PB_DS_BASE_C_DEC::m_p_head->m_p_left;\n \n-#ifdef PB_DS_RB_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n   const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n-\n-  PB_DS_DBG_ASSERT(p_min != p_head);\n-#endif // #ifdef PB_DS_RB_TREE_DEBUG_\n+  _GLIBCXX_DEBUG_ASSERT(p_min != p_head);\n+#endif \n \n   remove_node(p_min);\n-\n   return (p_min);\n }\n \n@@ -180,40 +157,34 @@ std::pair<\n PB_DS_CLASS_C_DEC::\n find_join_pos_right(node_pointer p_l, size_type h_l, size_type h_r)\n {\n-  PB_DS_DBG_ASSERT(h_l >= h_r);\n+  _GLIBCXX_DEBUG_ASSERT(h_l >= h_r);\n \n   if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == NULL)\n-    return (std::make_pair((node_pointer)NULL,\n-\t\t\t   PB_DS_BASE_C_DEC::m_p_head));\n+    return (std::make_pair((node_pointer)NULL, PB_DS_BASE_C_DEC::m_p_head));\n \n   node_pointer p_l_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n   while (h_l > h_r)\n     {\n       if (p_l->m_red == false)\n         {\n-\t  PB_DS_DBG_ASSERT(h_l > 0);\n-\n+\t  _GLIBCXX_DEBUG_ASSERT(h_l > 0);\n \t  --h_l;\n         }\n \n       p_l_parent = p_l;\n-\n       p_l = p_l->m_p_right;\n     }\n \n   if (!is_effectively_black(p_l))\n     {\n       p_l_parent = p_l;\n-\n       p_l = p_l->m_p_right;\n     }\n \n-  PB_DS_DBG_ASSERT(is_effectively_black(p_l));\n-  PB_DS_DBG_ASSERT(black_height(p_l) == h_r);\n-  PB_DS_DBG_ASSERT(p_l == NULL || p_l->m_p_parent == p_l_parent);\n-\n-  return (std::make_pair(p_l, p_l_parent));\n+  _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_l));\n+  _GLIBCXX_DEBUG_ASSERT(black_height(p_l) == h_r);\n+  _GLIBCXX_DEBUG_ASSERT(p_l == NULL || p_l->m_p_parent == p_l_parent);\n+  return std::make_pair(p_l, p_l_parent);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -223,40 +194,33 @@ std::pair<\n PB_DS_CLASS_C_DEC::\n find_join_pos_left(node_pointer p_r, size_type h_l, size_type h_r)\n {\n-  PB_DS_DBG_ASSERT(h_r > h_l);\n-\n+  _GLIBCXX_DEBUG_ASSERT(h_r > h_l);\n   if (PB_DS_BASE_C_DEC::m_p_head->m_p_parent == NULL)\n     return (std::make_pair((node_pointer)NULL,\n \t\t\t   PB_DS_BASE_C_DEC::m_p_head));\n-\n   node_pointer p_r_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n   while (h_r > h_l)\n     {\n       if (p_r->m_red == false)\n         {\n-\t  PB_DS_DBG_ASSERT(h_r > 0);\n-\n+\t  _GLIBCXX_DEBUG_ASSERT(h_r > 0);\n \t  --h_r;\n         }\n \n       p_r_parent = p_r;\n-\n       p_r = p_r->m_p_left;\n     }\n \n   if (!is_effectively_black(p_r))\n     {\n       p_r_parent = p_r;\n-\n       p_r = p_r->m_p_left;\n     }\n \n-  PB_DS_DBG_ASSERT(is_effectively_black(p_r));\n-  PB_DS_DBG_ASSERT(black_height(p_r) == h_l);\n-  PB_DS_DBG_ASSERT(p_r == NULL || p_r->m_p_parent == p_r_parent);\n-\n-  return (std::make_pair(p_r, p_r_parent));\n+  _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_r));\n+  _GLIBCXX_DEBUG_ASSERT(black_height(p_r) == h_l);\n+  _GLIBCXX_DEBUG_ASSERT(p_r == NULL || p_r->m_p_parent == p_r_parent);\n+  return std::make_pair(p_r, p_r_parent);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -265,85 +229,69 @@ PB_DS_CLASS_C_DEC::\n black_height(node_pointer p_nd)\n {\n   size_type h = 1;\n-\n   while (p_nd != NULL)\n     {\n       if (p_nd->m_red == false)\n \t++h;\n-\n       p_nd = p_nd->m_p_left;\n     }\n-\n-  return (h);\n+  return h;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid();)\n \n-    PB_DS_DBG_ONLY(other.assert_valid());\n-  PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::assert_valid();)\n \n     if (PB_DS_BASE_C_DEC::split_prep(r_key, other) == false)\n       {\n-        PB_DS_DBG_ONLY(assert_valid());\n-        PB_DS_DBG_ONLY(other.assert_valid());\n-\n+        _GLIBCXX_DEBUG_ONLY(assert_valid());\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n         return;\n       }\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-    PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-    node_pointer p_nd = upper_bound(r_key).m_p_nd;\n-\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  node_pointer p_nd = upper_bound(r_key).m_p_nd;\n   do\n     {\n       node_pointer p_next_nd = p_nd->m_p_parent;\n-\n-      if (Cmp_Fn::operator()(\n-\t\t\t     r_key,\n-\t\t\t     PB_DS_V2F(p_nd->m_value)))\n+      if (Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n \tsplit_at_node(p_nd, other);\n \n-      PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-        PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n-\n-        p_nd = p_next_nd;\n+      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+      p_nd = p_next_nd;\n     }\n   while (p_nd != PB_DS_BASE_C_DEC::m_p_head);\n \n   PB_DS_BASE_C_DEC::split_finish(other);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   node_pointer p_l = p_nd->m_p_left;\n   node_pointer p_r = p_nd->m_p_right;\n-\n   node_pointer p_parent = p_nd->m_p_parent;\n-\n   if (p_parent == PB_DS_BASE_C_DEC::m_p_head)\n     {\n       PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_l;\n-\n       if (p_l != NULL)\n         {\n \t  p_l->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n \t  p_l->m_red = false;\n         }\n     }\n@@ -364,11 +312,8 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n     }\n \n   PB_DS_BASE_C_DEC::initialize_min_max();\n-\n   other.join_imp(p_nd, p_r);\n-\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n-\n-  PB_DS_DBG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.PB_DS_BASE_C_DEC::structure_only_assert_valid());\n }\n "}, {"sha": "8b439c805e9cdc5fa14fdc2087c0333b95db1fb7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -48,15 +48,15 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n rc_binomial_heap_()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n rc_binomial_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -68,7 +68,7 @@ rc_binomial_heap_(const PB_DS_CLASS_C_DEC& other) :\n \n   base_type::find_max();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -81,14 +81,14 @@ void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     base_type::swap(other);\n \n   m_rc.swap(other.m_rc);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n "}, {"sha": "e621cb58ca9048cbf7f7552b8db1062c8f09e0bc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,19 +44,17 @@\n  * Contains an implementation for rc_binomial_heap_.\n  */\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   base_type::assert_valid(false);\n-\n   if (!base_type::empty())\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_p_max != NULL);\n-\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_p_max != NULL);\n       base_type::assert_max();\n     }\n \n@@ -65,36 +63,27 @@ assert_valid() const\n   if (m_rc.empty())\n     {\n       base_type::assert_valid(true);\n-\n-      PB_DS_DBG_ASSERT(next_2_pointer(base_type::m_p_root) == NULL);\n-\n+      _GLIBCXX_DEBUG_ASSERT(next_2_pointer(base_type::m_p_root) == NULL);\n       return;\n     }\n \n   const_node_pointer p_nd = next_2_pointer(base_type::m_p_root);\n-\n   typename rc_t::const_iterator it = m_rc.end();\n   --it;\n \n   while (p_nd != NULL)\n     {\n-      PB_DS_DBG_ASSERT(*it == p_nd);\n-\n+      _GLIBCXX_DEBUG_ASSERT(*it == p_nd);\n       const_node_pointer p_next = p_nd->m_p_next_sibling;\n-\n-      PB_DS_DBG_ASSERT(p_next != NULL);\n-\n-      PB_DS_DBG_ASSERT(p_nd->m_metadata == p_next->m_metadata);\n-\n-      PB_DS_DBG_ASSERT(p_next->m_p_next_sibling == NULL ||\n+      _GLIBCXX_DEBUG_ASSERT(p_next != NULL);\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_next->m_metadata);\n+      _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == NULL ||\n \t\t       p_next->m_metadata < p_next->m_p_next_sibling->m_metadata);\n \n       --it;\n-\n       p_nd = next_2_pointer(next_after_0_pointer(p_nd));\n     }\n-\n-  PB_DS_DBG_ASSERT(it + 1 == m_rc.begin());\n+  _GLIBCXX_DEBUG_ASSERT(it + 1 == m_rc.begin());\n }\n \n PB_DS_CLASS_T_DEC\n@@ -135,4 +124,4 @@ next_after_0_pointer(const_node_pointer p_nd)\n   return next_after_0_pointer(p_next);\n }\n \n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP__DEBUG_\n+#endif "}, {"sha": "b38141cc6cb3e3debaaf7f6ba4acc0db91e1705e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,11 +50,8 @@ PB_DS_CLASS_C_DEC::\n pop()\n {\n   make_binomial_heap();\n-\n-  PB_DS_DBG_ASSERT(!base_type::empty());\n-\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n   base_type::pop();\n-\n   base_type::find_max();\n }\n \n@@ -64,7 +61,6 @@ PB_DS_CLASS_C_DEC::\n clear()\n {\n   base_type::clear();\n-\n   m_rc.clear();\n }\n \n@@ -74,21 +70,19 @@ PB_DS_CLASS_C_DEC::\n make_binomial_heap()\n {\n   node_pointer p_nd = base_type::m_p_root;\n-\n   while (p_nd != NULL)\n     {\n       node_pointer p_next = p_nd->m_p_next_sibling;\n-\n       if (p_next == NULL)\n \tp_nd = p_next;\n       else if (p_nd->m_metadata == p_next->m_metadata)\n \tp_nd = link_with_next_sibling(p_nd);\n       else if (p_nd->m_metadata < p_next->m_metadata)\n \tp_nd = p_next;\n-#ifdef PB_DS_RC_BINOMIAL_HEAP__DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       else\n-\tPB_DS_DBG_ASSERT(0);\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP__DEBUG_\n+\t_GLIBCXX_DEBUG_ASSERT(0);\n+#endif \n     }\n \n   m_rc.clear();\n@@ -101,14 +95,10 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   make_binomial_heap();\n-\n   const size_type ersd = base_type::erase_if(pred);\n-\n   base_type::find_max();\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    return ersd;\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  return ersd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -117,9 +107,7 @@ PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n   make_binomial_heap();\n-\n   base_type::erase(it);\n-\n   base_type::find_max();\n }\n "}, {"sha": "c0f0d01f746522c213246081b38d7dd46989d927", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,11 +49,11 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     make_0_exposed();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n@@ -73,7 +73,7 @@ push(const_reference r_val)\n   if (p_nd->m_p_next_sibling != NULL&&  p_nd->m_p_next_sibling->m_metadata == 0)\n     m_rc.push(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return point_iterator(p_nd);\n }\n@@ -83,15 +83,15 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     make_binomial_heap();\n \n   base_type::modify(it, r_new_val);\n \n   base_type::find_max();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -101,8 +101,8 @@ link_with_next_sibling(node_pointer p_nd)\n {\n   node_pointer p_next = p_nd->m_p_next_sibling;\n \n-  PB_DS_DBG_ASSERT(p_next != NULL);\n-  PB_DS_DBG_ASSERT(p_next->m_p_prev_or_parent == p_nd);\n+  _GLIBCXX_DEBUG_ASSERT(p_next != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_next->m_p_prev_or_parent == p_nd);\n \n   if (Cmp_Fn::operator()(p_nd->m_value, p_next->m_value))\n     {\n@@ -150,8 +150,8 @@ make_0_exposed()\n \n   m_rc.pop();\n \n-  PB_DS_DBG_ASSERT(p_nd->m_p_next_sibling != NULL);\n-  PB_DS_DBG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata);\n \n   node_pointer p_res = link_with_next_sibling(p_nd);\n "}, {"sha": "dc7869ca7a7ddcbf4665cd0a118760c0477c5b9f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp", "status": "modified", "additions": 42, "deletions": 87, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,23 +52,11 @@ namespace pb_ds\n   namespace detail\n   {\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Node, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    rc<\t\t\t\t\t\t\t\\\n-\t\t\t\t\tNode,\t\t\\\n-\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    rc<Node, Allocator>\n \n     template<typename Node, class Allocator>\n     class rc\n@@ -137,17 +125,15 @@ namespace pb_ds\n       const const_iterator\n       end() const;\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n+#endif \n \n     private:\n       node_pointer m_a_entries[max_entries];\n@@ -157,132 +143,108 @@ namespace pb_ds\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    rc() :\n-      m_over_top(0)\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    rc() : m_over_top(0)\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    rc(const PB_DS_CLASS_C_DEC& other) :\n-      m_over_top(0)\n-    {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+    rc(const PB_DS_CLASS_C_DEC& other) : m_over_top(0)\n+    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\tPB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n-\tconst size_type over_top =\n-\tstd::max(m_over_top, other.m_over_top);\n+      const size_type over_top = std::max(m_over_top, other.m_over_top);\n \n       for (size_type i = 0; i < over_top; ++i)\n \tstd::swap(m_a_entries[i], other.m_a_entries[i]);\n \n       std::swap(m_over_top, other.m_over_top);\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\tPB_DS_DBG_ONLY(other.assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     push(entry p_nd)\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\tPB_DS_DBG_ASSERT(m_over_top < max_entries);\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ASSERT(m_over_top < max_entries);\n       m_a_entries[m_over_top++] = p_nd;\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     pop()\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\tPB_DS_DBG_ASSERT(!empty());\n-\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ASSERT(!empty());\n       --m_over_top;\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::node_pointer\n     PB_DS_CLASS_C_DEC::\n     top() const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\tPB_DS_DBG_ASSERT(!empty());\n-\n-      return* (m_a_entries + m_over_top - 1);\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ASSERT(!empty());\n+      return *(m_a_entries + m_over_top - 1);\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline bool\n     PB_DS_CLASS_C_DEC::\n     empty() const\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\treturn m_over_top == 0;\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      return m_over_top == 0;\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::size_type\n     PB_DS_CLASS_C_DEC::\n     size() const\n-    {\n-      return m_over_top;\n-    }\n+    { return m_over_top; }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     clear()\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\n-\tm_over_top = 0;\n-\n-      PB_DS_DBG_ONLY(assert_valid();)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      m_over_top = 0;\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    }\n \n     PB_DS_CLASS_T_DEC\n     const typename PB_DS_CLASS_C_DEC::const_iterator\n     PB_DS_CLASS_C_DEC::\n     begin() const\n-    {\n-      return& m_a_entries[0];\n-    }\n+    { return& m_a_entries[0]; }\n \n     PB_DS_CLASS_T_DEC\n     const typename PB_DS_CLASS_C_DEC::const_iterator\n     PB_DS_CLASS_C_DEC::\n     end() const\n-    {\n-      return& m_a_entries[m_over_top];\n-    }\n+    { return& m_a_entries[m_over_top]; }\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     assert_valid() const\n-    {\n-      PB_DS_DBG_ASSERT(m_over_top < max_entries);\n-    }\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+    { _GLIBCXX_DEBUG_ASSERT(m_over_top < max_entries); }\n+#endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n     PB_DS_CLASS_T_DEC\n@@ -291,23 +253,16 @@ namespace pb_ds\n     trace() const\n     {\n       std::cout << \"rc\" << std::endl;\n-\n       for (size_type i = 0; i < m_over_top; ++i)\n \tstd::cerr << m_a_entries[i] << std::endl;\n-\n       std::cout << std::endl;\n     }\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n+#endif \n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace detail\n+} // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RC_HPP\n+#endif "}, {"sha": "42417ed82fe17ea9764162850766ee8687a07900", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc_binomial_heap_.hpp", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -48,48 +48,27 @@\n  * Redundant-counter binomial heap.\n  */\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/rc.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n-\n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    rc_binomial_heap_<\t\t\t\t\t\\\n-\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    rc_binomial_heap_<Value_Type, Cmp_Fn, Allocator>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    binomial_heap_base_<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_BASE_C_DEC \\\n+    binomial_heap_base_<Value_Type, Cmp_Fn, Allocator>\n \n-#define PB_DS_RC_C_DEC\t\t\t\t\t\t\t\\\n-    rc<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\ttypename PB_DS_BASE_C_DEC::node, \\\n-\t\t\t\t\t\t\tAllocator>\n+#define PB_DS_RC_C_DEC \\\n+    rc<typename PB_DS_BASE_C_DEC::node, Allocator>\n \n     /**\n      * class description = \"8y|\\|0|\\/|i41 h34p 74813\">\n@@ -174,19 +153,15 @@ namespace pb_ds\n       void\n       join(PB_DS_CLASS_C_DEC& other);\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n-\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n+#endif \n \n     private:\n \n@@ -199,15 +174,13 @@ namespace pb_ds\n       void\n       make_binomial_heap();\n \n-#ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       static const_node_pointer\n       next_2_pointer(const_node_pointer p_nd);\n \n       static const_node_pointer\n       next_after_0_pointer(const_node_pointer p_nd);\n-\n-#endif // #ifdef PB_DS_RC_BINOMIAL_HEAP_DEBUG_\n+#endif \n \n     private:\n       rc_t m_rc;\n@@ -227,10 +200,5 @@ namespace pb_ds\n #undef PB_DS_BASE_C_DEC\n \n #undef PB_DS_RC_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds"}, {"sha": "356732b4e0aea3b524aa5acce64e0332479de646", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,8 +50,8 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     make_binomial_heap();\n   other.make_binomial_heap();\n@@ -61,17 +61,17 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   base_type::find_max();\n   other.find_max();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     make_binomial_heap();\n   other.make_binomial_heap();\n@@ -81,7 +81,7 @@ join(PB_DS_CLASS_C_DEC& other)\n   base_type::find_max();\n   other.find_max();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n "}, {"sha": "2733030dd00777ba0fbda8289efdad4c7f9b62bf", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,61 +52,61 @@ PB_DS_CLASS_C_DEC::\n hash_load_check_resize_trigger(float load_min, float load_max) \n : m_load_min(load_min), m_load_max(load_max), m_next_shrink_size(0),\n   m_next_grow_size(0), m_resize_needed(false)\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_start()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_collision()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_end()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_start()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_collision()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_end()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_start()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_collision()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_end()\n-{ PB_DS_DBG_ONLY(assert_valid();) }\n+{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -115,7 +115,7 @@ notify_inserted(size_type num_entries)\n {\n   m_resize_needed = (num_entries >= m_next_grow_size);\n   size_base::set_size(num_entries);\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -125,15 +125,15 @@ notify_erased(size_type num_entries)\n {\n   size_base::set_size(num_entries);\n   m_resize_needed = num_entries <= m_next_shrink_size;\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_resize_needed() const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   return m_resize_needed;\n }\n \n@@ -142,7 +142,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n is_grow_needed(size_type /*size*/, size_type num_entries) const\n {\n-  PB_DS_DBG_ASSERT(m_resize_needed);\n+  _GLIBCXX_DEBUG_ASSERT(m_resize_needed);\n   return num_entries >= m_next_grow_size;\n }\n \n@@ -168,7 +168,7 @@ notify_resized(size_type new_size)\n     static_cast<unsigned long>(m_next_grow_size) << \"    \" << std::endl;\n #endif \n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -181,9 +181,9 @@ notify_externally_resized(size_type new_size)\n   size_type new_shrink_size = size_type(m_load_min * new_size );\n   if (new_grow_size >= m_next_grow_size)\n     {\n-      PB_DS_DBG_ASSERT(new_shrink_size > m_next_shrink_size);\n+      _GLIBCXX_DEBUG_ASSERT(new_shrink_size > m_next_shrink_size);\n       m_next_grow_size = new_grow_size;\n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n \tstd::cerr << \"hlcrt::notify_externally_resized1 \" <<\n@@ -196,7 +196,7 @@ notify_externally_resized(size_type new_size)\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(new_shrink_size <= m_next_shrink_size);\n+  _GLIBCXX_DEBUG_ASSERT(new_shrink_size <= m_next_shrink_size);\n   m_next_shrink_size = new_shrink_size;\n \n #ifdef PB_DS_HT_MAP_RESIZE_TRACE_\n@@ -208,27 +208,27 @@ notify_externally_resized(size_type new_size)\n     static_cast<unsigned long>(m_next_grow_size) << \"    \" << std::endl;\n #endif \n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_cleared()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n   size_base::set_size(0);\n   m_resize_needed = (0 < m_next_shrink_size);\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-  PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     \n   size_base::swap(other);\n   std::swap(m_load_min, other.m_load_min);\n@@ -237,8 +237,8 @@ swap(PB_DS_CLASS_C_DEC& other)\n   std::swap(m_next_grow_size, other.m_next_grow_size);\n   std::swap(m_next_shrink_size, other.m_next_shrink_size);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-  PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -285,14 +285,14 @@ PB_DS_CLASS_C_DEC::\n do_resize(size_type)\n { abort(); }\n \n-#ifdef PB_DS_HASH_POLICY_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n-  PB_DS_DBG_ASSERT(m_load_max > m_load_min);\n-  PB_DS_DBG_ASSERT(m_next_grow_size >= m_next_shrink_size);\n+  _GLIBCXX_DEBUG_ASSERT(m_load_max > m_load_min);\n+  _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= m_next_shrink_size);\n }\n #endif \n "}, {"sha": "459fdc1d75564c91c4e6dbdac7ce37a6dc764f63", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -60,7 +60,7 @@ PB_DS_CLASS_NAME()\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -70,7 +70,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -80,7 +80,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -90,21 +90,21 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     PB_DS_BASE_C_DEC::swap(other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "6f78bf24073dd715b3dc244146f7899e039dd53a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,17 +44,15 @@\n  * Contains an implementation class for splay_tree_.\n  */\n \n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   PB_DS_BASE_C_DEC::assert_valid();\n-\n   const node_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n-\n   assert_special_imp(p_head);\n }\n \n@@ -68,19 +66,15 @@ assert_special_imp(const node_pointer p_nd) const\n \n   if (p_nd == PB_DS_BASE_C_DEC::m_p_head)\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_special);\n-\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_special);\n       assert_special_imp(p_nd->m_p_parent);\n-\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(!p_nd->m_special);\n-\n+  _GLIBCXX_DEBUG_ASSERT(!p_nd->m_special);\n   assert_special_imp(p_nd->m_p_left);\n-\n   assert_special_imp(p_nd->m_p_right);\n }\n \n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#endif \n "}, {"sha": "272bd365bec39292805fd634a65118a47be163ee", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -64,7 +64,7 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it == PB_DS_BASE_C_DEC::end())\n     return (it);\n@@ -75,7 +75,7 @@ erase(iterator it)\n \n   erase_node(it.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -85,7 +85,7 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   if (it.m_p_nd == PB_DS_BASE_C_DEC::m_p_head)\n     return (it);\n@@ -96,7 +96,7 @@ erase(reverse_iterator it)\n \n   erase_node(it.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ret_it);\n }\n@@ -107,7 +107,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     size_type num_ersd = 0;\n \n@@ -125,7 +125,7 @@ erase_if(Pred pred)\n \t++it;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return (num_ersd);\n }\n@@ -135,12 +135,12 @@ void\n PB_DS_CLASS_C_DEC::\n erase_node(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   splay(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n \n   node_pointer p_l = p_nd->m_p_left;\n   node_pointer p_r = p_nd->m_p_right;\n@@ -156,34 +156,34 @@ erase_node(node_pointer p_nd)\n       if (p_l != NULL)\n \tp_l->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return;\n     }\n \n   node_pointer p_target_r = leftmost(p_r);\n \n-  PB_DS_DBG_ASSERT(p_target_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n \n   p_r->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n \n   PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_r;\n \n   splay(p_target_r);\n \n-  PB_DS_DBG_ONLY(p_target_r->m_p_left = NULL);\n+  _GLIBCXX_DEBUG_ONLY(p_target_r->m_p_left = NULL);\n \n-  PB_DS_DBG_ASSERT(p_target_r->m_p_parent == this->m_p_head);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_parent == this->m_p_head);\n \n-  PB_DS_DBG_ASSERT(this->m_p_head->m_p_parent ==\n+  _GLIBCXX_DEBUG_ASSERT(this->m_p_head->m_p_parent ==\n \t\t   p_target_r);\n \n   p_target_r->m_p_left = p_l;\n \n   if (p_l != NULL)\n     p_l->m_p_parent = p_target_r;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     apply_update(p_target_r, (node_update* )this);\n }\n@@ -193,7 +193,7 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n leftmost(node_pointer p_nd)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   while (p_nd->m_p_left != NULL)\n     p_nd = p_nd->m_p_left;"}, {"sha": "6be38e2abe00250d729a8ed13dbae72d5476750e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -75,7 +75,7 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key)\n {\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n \n     node_pointer p_nd = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n \n@@ -98,7 +98,7 @@ inline const typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key) const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     node_pointer p_nd = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n "}, {"sha": "c9f3768566e49e399d7c87eb2d2681990614c729", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,18 +49,18 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     std::pair<point_iterator, bool> ins_pair =\n     insert_leaf_imp(r_value);\n \n   ins_pair.first.m_p_nd->m_special = false;\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   splay(ins_pair.first.m_p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n \n   return (ins_pair);\n }\n@@ -70,7 +70,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_leaf_imp(const_reference r_value)\n {\n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::structure_only_assert_valid();)\n \n     if (PB_DS_BASE_C_DEC::m_size == 0)\n       return (std::make_pair(\n@@ -106,7 +106,7 @@ insert_leaf_imp(const_reference r_value)\n \t\t\t   PB_DS_BASE_C_DEC::insert_leaf_new(r_value,  PB_DS_BASE_C_DEC::m_p_head->m_p_right, false),\n \t\t\t   true));\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::check_key_does_not_exist(\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::check_key_does_not_exist(\n \t\t\t\t\t\t\t    PB_DS_V2F(r_value)));\n \n   p_nd = p_pot->m_p_left;"}, {"sha": "1525b5cbb03cf0a0385a7cda920a254977894548", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 41, "deletions": 49, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,66 +51,61 @@ splay(node_pointer p_nd)\n {\n   while (p_nd->m_p_parent != PB_DS_BASE_C_DEC::m_p_head)\n     {\n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n       {\n \tnode_pointer p_head = PB_DS_BASE_C_DEC::m_p_head;\n-\n \tassert_special_imp(p_head);\n       }\n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#endif\n \n-      PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n \n-        if (p_nd->m_p_parent->m_p_parent ==\n-            PB_DS_BASE_C_DEC::m_p_head)\n+        if (p_nd->m_p_parent->m_p_parent == PB_DS_BASE_C_DEC::m_p_head)\n \t  {\n             PB_DS_BASE_C_DEC::rotate_parent(p_nd);\n-\n-            PB_DS_DBG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n+            _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n \t  }\n         else\n \t  {\n             const node_pointer p_parent = p_nd->m_p_parent;\n             const node_pointer p_grandparent = p_parent->m_p_parent;\n \n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n             const size_type total =\n \t      PB_DS_BASE_C_DEC::recursive_count(p_grandparent);\n+            _GLIBCXX_DEBUG_ASSERT(total >= 3);\n+#endif \n \n-            PB_DS_DBG_ASSERT(total >= 3);\n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n-\n-            if (p_parent->m_p_left == p_nd&& \n+            if (p_parent->m_p_left == p_nd && \n \t\tp_grandparent->m_p_right == p_parent)\n \t      splay_zig_zag_left(p_nd, p_parent, p_grandparent);\n-            else if (p_parent->m_p_right == p_nd&& \n+            else if (p_parent->m_p_right == p_nd && \n \t\t     p_grandparent->m_p_left == p_parent)\n \t      splay_zig_zag_right(p_nd, p_parent, p_grandparent);\n-            else if (p_parent->m_p_left == p_nd&& \n+            else if (p_parent->m_p_left == p_nd && \n \t\t     p_grandparent->m_p_left == p_parent)\n \t      splay_zig_zig_left(p_nd, p_parent, p_grandparent);\n             else\n \t      splay_zig_zig_right(p_nd, p_parent, p_grandparent);\n-\n-            PB_DS_DBG_ASSERT(total ==this->recursive_count(p_nd));\n+            _GLIBCXX_DEBUG_ASSERT(total ==this->recursive_count(p_nd));\n \t  }\n \n-      PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n-\t}\n+      _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+  }\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n {\n-  PB_DS_DBG_ASSERT(p_parent == p_nd->m_p_parent);\n-  PB_DS_DBG_ASSERT(p_grandparent == p_parent->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n \n-    PB_DS_DBG_ASSERT(p_parent->m_p_left == p_nd&& \n-\t\t     p_grandparent->m_p_right == p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n+\t\t        p_grandparent->m_p_right == p_parent);\n \n   splay_zz_start(p_nd, p_parent, p_grandparent);\n \n@@ -139,13 +134,13 @@ inline void\n PB_DS_CLASS_C_DEC::\n splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n {\n-  PB_DS_DBG_ASSERT(p_parent == p_nd->m_p_parent);\n-  PB_DS_DBG_ASSERT(p_grandparent == p_parent->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n \n-    PB_DS_DBG_ASSERT(p_parent->m_p_right == p_nd&& \n-\t\t     p_grandparent->m_p_left == p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd && \n+\t  \t        p_grandparent->m_p_left == p_parent);\n \n   splay_zz_start(p_nd, p_parent, p_grandparent);\n \n@@ -174,12 +169,12 @@ inline void\n PB_DS_CLASS_C_DEC::\n splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n {\n-  PB_DS_DBG_ASSERT(p_parent == p_nd->m_p_parent);\n-  PB_DS_DBG_ASSERT(p_grandparent == p_parent->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n \n-    PB_DS_DBG_ASSERT(p_parent->m_p_left == p_nd&& \n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n \t\t     p_nd->m_p_parent->m_p_parent->m_p_left == p_nd->m_p_parent);\n \n   splay_zz_start(p_nd, p_parent, p_grandparent);\n@@ -209,12 +204,12 @@ inline void\n PB_DS_CLASS_C_DEC::\n splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparent)\n {\n-  PB_DS_DBG_ASSERT(p_parent == p_nd->m_p_parent);\n-  PB_DS_DBG_ASSERT(p_grandparent == p_parent->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_grandparent);)\n \n-    PB_DS_DBG_ASSERT(p_parent->m_p_right == p_nd&& \n+  _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd&& \n \t\t     p_nd->m_p_parent->m_p_parent->m_p_right == p_nd->m_p_parent);\n \n   splay_zz_start(p_nd, p_parent, p_grandparent);\n@@ -236,26 +231,24 @@ splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent, node_pointer p_gra\n   if (p_c != NULL)\n     p_c->m_p_parent = p_grandparent;\n \n-  PB_DS_BASE_C_DEC::update_to_top(\n-\t\t\t\t  p_grandparent, (node_update* )this);\n-\n+  PB_DS_BASE_C_DEC::update_to_top(p_grandparent, (node_update* )this);\n   splay_zz_end(p_nd, p_parent, p_grandparent);\n }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n splay_zz_start(node_pointer p_nd,\n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \t       node_pointer p_parent,\n-#else // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#else \n \t       node_pointer /*p_parent*/,\n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#endif\n \t       node_pointer p_grandparent)\n {\n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n-  PB_DS_DBG_ASSERT(p_parent != NULL);\n-  PB_DS_DBG_ASSERT(p_grandparent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_grandparent != NULL);\n \n   const bool grandparent_head =\n     p_grandparent->m_p_parent == PB_DS_BASE_C_DEC::m_p_head;\n@@ -266,7 +259,6 @@ splay_zz_start(node_pointer p_nd,\n \tPB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n \n       p_nd->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n-\n       return;\n     }\n \n@@ -292,6 +284,6 @@ splay_zz_end(node_pointer p_nd, node_pointer p_parent, node_pointer p_grandparen\n   apply_update(p_parent, (node_update* )this);\n   apply_update(p_nd, (node_update* )this);\n \n-  PB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_node_consistent(p_nd);)\n+}\n "}, {"sha": "281b47d2f97ba4b2798087a6b22a05fc30a15971", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 22, "deletions": 51, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -78,35 +78,26 @@\n #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n #define PB_DS_BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n #include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n-#endif // #ifndef BIN_SEARCH_TREE_HPP__DATA_TRUE_INDICATOR\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #ifndef PB_DS_BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n #define PB_DS_BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n #include <ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp>\n-#endif // #ifndef BIN_SEARCH_TREE_HPP__DATA_FALSE_INDICATOR\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n+#endif \n \n #include <utility>\n #include <vector>\n #include <assert.h>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Key,\t\t\\\n@@ -118,22 +109,22 @@ namespace pb_ds\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     splay_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_CLASS_NAME\t\t\t\\\n     splay_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n #define PB_DS_BASE_CLASS_NAME\t\t\t\\\n     bin_search_tree_data_\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_BASE_CLASS_NAME\t\t\t\\\n     bin_search_tree_no_data_\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n     PB_DS_CLASS_NAME<\t\t\t\t\t\t\t\\\n@@ -155,13 +146,13 @@ namespace pb_ds\n #define PB_DS_V2F(X) (X).first\n #define PB_DS_V2S(X) (X).second\n #define PB_DS_EP2VP(X)& ((X)->m_value)\n-#endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+#endif \n \n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n #define PB_DS_EP2VP(X)& ((X)->m_value.first)\n-#endif // #ifdef PB_DS_DATA_FALSE_INDICATOR\n+#endif \n \n     // $p14y 7r33 7481.\n     template<typename Key,\n@@ -266,28 +257,19 @@ namespace pb_ds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\tPB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-\t  std::pair<point_iterator, bool> ins_pair =\n-\t  insert_leaf_imp(\n-\t\t\t  value_type(\n-\t\t\t\t     r_key,\n-\t\t\t\t     mapped_type()));\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\tstd::pair<point_iterator, bool> ins_pair =\n+\t  insert_leaf_imp(value_type(r_key, mapped_type()));\n \n \tins_pair.first.m_p_nd->m_special = false;\n-\n-\tPB_DS_DBG_ONLY(PB_DS_BASE_C_DEC::assert_valid());\n-\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_BASE_C_DEC::assert_valid());\n \tsplay(ins_pair.first.m_p_nd);\n-\n-\tPB_DS_DBG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n-\n-\t  return (ins_pair.first.m_p_nd->m_value.second);\n-#else // #ifdef PB_DS_DATA_TRUE_INDICATOR\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\treturn ins_pair.first.m_p_nd->m_value.second;\n+#else \n \tinsert(r_key);\n-\n-\treturn (PB_DS_BASE_C_DEC::s_null_mapped);\n-#endif // #ifdef PB_DS_DATA_TRUE\n+\treturn PB_DS_BASE_C_DEC::s_null_mapped;\n+#endif\n       }\n \n       inline point_iterator\n@@ -326,15 +308,13 @@ namespace pb_ds\n       inline const node_pointer\n       find_imp(const_key_reference r_key) const;\n \n-#ifdef PB_DS_SPLAY_TREE_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n       void\n       assert_special_imp(const node_pointer p_nd) const;\n-\n-#endif // #ifdef PB_DS_SPLAY_TREE_DEBUG_\n+#endif \n \n       void\n       splay(node_pointer p_nd);\n@@ -374,23 +354,14 @@ namespace pb_ds\n #include <ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp>\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_BASE_CLASS_NAME\n-\n #undef PB_DS_BASE_C_DEC\n \n #undef PB_DS_V2F\n #undef PB_DS_EP2VP\n #undef PB_DS_V2S\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n "}, {"sha": "f8f73df9d80ef73db64d8d9809ffd605803fa34f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,29 +49,29 @@ inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     if (PB_DS_BASE_C_DEC::join_prep(other) == false)\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n-\t  PB_DS_DBG_ONLY(other.assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n \t  return;\n       }\n \n   node_pointer p_target_r = other.leftmost(other.m_p_head);\n \n-  PB_DS_DBG_ASSERT(p_target_r != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r != NULL);\n \n   other.splay(p_target_r);\n \n-  PB_DS_DBG_ASSERT(p_target_r == other.m_p_head->m_p_parent);\n-  PB_DS_DBG_ASSERT(p_target_r->m_p_left == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r == other.m_p_head->m_p_parent);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left == NULL);\n \n   p_target_r->m_p_left = PB_DS_BASE_C_DEC::m_p_head->m_p_parent;\n \n-  PB_DS_DBG_ASSERT(p_target_r->m_p_left != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_target_r->m_p_left != NULL);\n   p_target_r->m_p_left->m_p_parent = p_target_r;\n \n   PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_target_r;\n@@ -81,34 +81,34 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   PB_DS_BASE_C_DEC::join_finish(other);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n \n   if (PB_DS_BASE_C_DEC::split_prep(r_key, other) == false)\n     {\n-      PB_DS_DBG_ONLY(assert_valid());\n-      PB_DS_DBG_ONLY(other.assert_valid());\n+      _GLIBCXX_DEBUG_ONLY(assert_valid());\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n \n       return;\n     }\n \n   node_pointer p_upper_bound = upper_bound(r_key).m_p_nd;\n-  PB_DS_DBG_ASSERT(p_upper_bound != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_upper_bound != NULL);\n \n   splay(p_upper_bound);\n-  PB_DS_DBG_ASSERT(p_upper_bound->m_p_parent == this->m_p_head);\n+  _GLIBCXX_DEBUG_ASSERT(p_upper_bound->m_p_parent == this->m_p_head);\n \n   node_pointer p_new_root = p_upper_bound->m_p_left;\n-  PB_DS_DBG_ASSERT(p_new_root != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_new_root != NULL);\n \n   PB_DS_BASE_C_DEC::m_p_head->m_p_parent = p_new_root;\n   p_new_root->m_p_parent = PB_DS_BASE_C_DEC::m_p_head;\n@@ -121,7 +121,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \n   PB_DS_BASE_C_DEC::split_finish(other);\n \n-  PB_DS_DBG_ONLY(assert_valid());\n-  PB_DS_DBG_ONLY(other.assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n }\n "}, {"sha": "1b0c6e53644e3274eb7d675117c2a23b0c2cd876", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,19 +52,17 @@ copy_from_range(It first_it, It last_it)\n {\n   while (first_it != last_it)\n     push(*(first_it++));\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n thin_heap_() :\n   m_p_max(NULL)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -73,39 +71,33 @@ thin_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_p_max(NULL)\n {\n   initialize();\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n thin_heap_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other)\n {\n   initialize();\n-\n   m_p_max = base_type::m_p_root;\n-\n   for (node_pointer p_nd = base_type::m_p_root; p_nd != NULL; p_nd = p_nd->m_p_next_sibling)\n     if (Cmp_Fn::operator()(m_p_max->m_value, p_nd->m_value))\n       m_p_max = p_nd;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-\n-    base_type::swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  base_type::swap(other);\n   std::swap(m_p_max, other.m_p_max);\n-\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -116,7 +108,5 @@ PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n initialize()\n-{\n-  std::fill(m_a_aux, m_a_aux + max_rank, static_cast<node_pointer>(NULL));\n-}\n+{ std::fill(m_a_aux, m_a_aux + max_rank, static_cast<node_pointer>(NULL)); }\n "}, {"sha": "310907d88341886a88b91f1e1fc73d16b82a7c45", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -44,19 +44,16 @@\n  * Contains an implementation for thin_heap_.\n  */\n \n-#ifdef PB_DS_THIN_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_valid() const\n {\n   base_type::assert_valid();\n-\n   assert_node_consistent(base_type::m_p_root, true);\n-\n   assert_max();\n-\n   assert_aux_null();\n }\n \n@@ -66,7 +63,7 @@ PB_DS_CLASS_C_DEC::\n assert_aux_null() const\n {\n   for (size_type i = 0; i < max_rank; ++i)\n-    PB_DS_DBG_ASSERT(m_a_aux[i] == NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_a_aux[i] == NULL);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -76,18 +73,15 @@ assert_max() const\n {\n   if (m_p_max == NULL)\n     {\n-      PB_DS_DBG_ASSERT(base_type::empty());\n-\n+      _GLIBCXX_DEBUG_ASSERT(base_type::empty());\n       return;\n     }\n \n-  PB_DS_DBG_ASSERT(!base_type::empty());\n-\n-  PB_DS_DBG_ASSERT(base_type::parent(m_p_max) == NULL);\n-  PB_DS_DBG_ASSERT(m_p_max->m_p_prev_or_parent == NULL);\n-\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max->m_p_prev_or_parent == NULL);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n-    PB_DS_DBG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n+    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n@@ -96,32 +90,29 @@ PB_DS_CLASS_C_DEC::\n assert_node_consistent(const_node_pointer p_nd, bool root) const\n {\n   base_type::assert_node_consistent(p_nd, root);\n-\n   if (p_nd == NULL)\n     return;\n \n   assert_node_consistent(p_nd->m_p_next_sibling, root);\n   assert_node_consistent(p_nd->m_p_l_child, false);\n-\n   if (!root)\n     {\n       if (p_nd->m_metadata == 0)\n-\tPB_DS_DBG_ASSERT(p_nd->m_p_next_sibling == NULL);\n+\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == NULL);\n       else\n-\tPB_DS_DBG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata + 1);\n+\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata + 1);\n     }\n \n   if (p_nd->m_p_l_child != NULL)\n-    PB_DS_DBG_ASSERT(p_nd->m_p_l_child->m_metadata + 1 == base_type::degree(p_nd));\n+    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child->m_metadata + 1 == base_type::degree(p_nd));\n \n   const bool unmarked_valid =(p_nd->m_p_l_child == NULL&&  p_nd->m_metadata == 0) ||(p_nd->m_p_l_child != NULL&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 1);\n \n   const bool marked_valid =(p_nd->m_p_l_child == NULL&&  p_nd->m_metadata == 1) ||(p_nd->m_p_l_child != NULL&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 2);\n \n-  PB_DS_DBG_ASSERT(unmarked_valid || marked_valid);\n-\n+  _GLIBCXX_DEBUG_ASSERT(unmarked_valid || marked_valid);\n   if (root)\n-    PB_DS_DBG_ASSERT(unmarked_valid);\n+    _GLIBCXX_DEBUG_ASSERT(unmarked_valid);\n }\n \n-#endif // #ifdef PB_DS_THIN_HEAP_DEBUG_\n+#endif "}, {"sha": "9f409df158a7e5ca4a0e2c23e8277d815487c80a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,18 +49,18 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  PB_DS_DBG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n \n   node_pointer p_nd = m_p_max;\n \n   remove_max_node();\n \n   base_type::actual_erase_node(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -125,7 +125,7 @@ add_to_aux(node_pointer p_nd)\n \n   while (m_a_aux[r] != NULL)\n     {\n-      PB_DS_DBG_ASSERT(p_nd->m_metadata < rank_bound());\n+      _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata < rank_bound());\n \n       if (Cmp_Fn::operator()(m_a_aux[r]->m_value, p_nd->m_value))\n \tmake_child_of(m_a_aux[r], p_nd);\n@@ -141,7 +141,7 @@ add_to_aux(node_pointer p_nd)\n       ++r;\n     }\n \n-  PB_DS_DBG_ASSERT(p_nd->m_metadata < rank_bound());\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata < rank_bound());\n \n   m_a_aux[r] = p_nd;\n }\n@@ -151,8 +151,8 @@ inline void\n PB_DS_CLASS_C_DEC::\n make_child_of(node_pointer p_nd, node_pointer p_new_parent)\n {\n-  PB_DS_DBG_ASSERT(p_nd->m_metadata == p_new_parent->m_metadata);\n-  PB_DS_DBG_ASSERT(m_a_aux[p_nd->m_metadata] == p_nd ||\n+  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_new_parent->m_metadata);\n+  _GLIBCXX_DEBUG_ASSERT(m_a_aux[p_nd->m_metadata] == p_nd ||\n \t\t   m_a_aux[p_nd->m_metadata] == p_new_parent);\n \n   ++p_new_parent->m_metadata;\n@@ -183,7 +183,7 @@ make_from_aux()\n       ++i;\n     }\n \n-  PB_DS_DBG_ONLY(assert_aux_null();)\n+  _GLIBCXX_DEBUG_ONLY(assert_aux_null();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -224,16 +224,16 @@ void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   node_pointer p_nd = it.m_p_nd;\n \n   remove_node(p_nd);\n \n   base_type::actual_erase_node(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n@@ -242,11 +242,11 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     if (base_type::empty())\n       {\n-        PB_DS_DBG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n \t  return 0;\n       }\n@@ -281,7 +281,7 @@ erase_if(Pred pred)\n       p_cur = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return ersd;\n }"}, {"sha": "256bd1ceed3ad6847258d6fbdb16068452e0115f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,9 +49,9 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ASSERT(!base_type::empty());\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n-  PB_DS_DBG_ASSERT(m_p_max != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(m_p_max != NULL);\n   return m_p_max->m_value;\n }"}, {"sha": "451793fee056af36b1757c9498776d6e8edee66a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,7 +49,7 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n@@ -63,7 +63,7 @@ push(const_reference r_val)\n \n       m_p_max = base_type::m_p_root = p_nd;\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return point_iterator(p_nd);\n     }\n@@ -76,7 +76,7 @@ push(const_reference r_val)\n \n   update_max(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n     return point_iterator(p_nd);\n }\n@@ -139,7 +139,7 @@ fix(node_pointer p_y)\n         }\n       else if (p_y->m_metadata > p_y->m_p_next_sibling->m_metadata + 1)\n         {\n-\t  PB_DS_DBG_ASSERT(p_y->m_p_l_child != NULL);\n+\t  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child != NULL);\n \n \t  if (p_y->m_metadata != p_y->m_p_l_child->m_metadata + 2)\n             {\n@@ -172,89 +172,89 @@ inline void\n PB_DS_CLASS_C_DEC::\n fix_root(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent == NULL);\n \n   make_root(p_y);\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_y, true);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, true);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_rank_1_unmarked(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n \n-  PB_DS_DBG_ONLY(node_pointer p_w = p_y->m_p_l_child;)\n-    PB_DS_DBG_ASSERT(p_w != NULL);\n-  PB_DS_DBG_ASSERT(p_w->m_p_next_sibling == NULL);\n-  PB_DS_DBG_ASSERT(p_y->m_p_next_sibling == NULL);\n+  _GLIBCXX_DEBUG_ONLY(node_pointer p_w = p_y->m_p_l_child;)\n+    _GLIBCXX_DEBUG_ASSERT(p_w != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_next_sibling == NULL);\n \n   p_y->m_p_next_sibling = p_y->m_p_l_child;\n \n   p_y->m_p_next_sibling->m_p_prev_or_parent = p_y;\n \n   p_y->m_p_l_child = NULL;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_y, false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_rank_1_marked(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n-  PB_DS_DBG_ASSERT(p_y->m_p_l_child == NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_l_child == NULL);\n \n   p_y->m_metadata = 0;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_y, false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_general_unmarked(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n \n   node_pointer p_w = p_y->m_p_l_child;\n-  PB_DS_DBG_ASSERT(p_w != NULL);\n-  PB_DS_DBG_ASSERT(p_w->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != NULL);\n \n   p_y->m_p_l_child = p_w->m_p_next_sibling;\n   p_w->m_p_next_sibling->m_p_prev_or_parent = p_y;\n \n   p_w->m_p_next_sibling = p_y->m_p_next_sibling;\n-  PB_DS_DBG_ASSERT(p_w->m_p_next_sibling != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling != NULL);\n   p_w->m_p_next_sibling->m_p_prev_or_parent = p_w;\n \n   p_y->m_p_next_sibling = p_w;\n   p_w->m_p_prev_or_parent = p_y;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_y, false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n fix_sibling_general_marked(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n \n   --p_y->m_metadata;\n \n-  PB_DS_DBG_ONLY(assert_node_consistent(p_y, false);)\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n fix_child(node_pointer p_y)\n {\n-  PB_DS_DBG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != NULL);\n \n   if (p_y->m_p_next_sibling != NULL)\n     p_y->m_p_next_sibling->m_p_prev_or_parent = p_y->m_p_prev_or_parent;\n@@ -272,10 +272,10 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     node_pointer p_nd = it.m_p_nd;\n \n-  PB_DS_DBG_ASSERT(p_nd != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_nd != NULL);\n \n   const bool smaller = Cmp_Fn::operator()(r_new_val, p_nd->m_value);\n \n@@ -289,7 +289,7 @@ modify(point_iterator it, const_reference r_new_val)\n \n       make_root_and_link(p_nd);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return;\n     }\n@@ -298,13 +298,13 @@ modify(point_iterator it, const_reference r_new_val)\n     {\n       update_max(p_nd);\n \n-      PB_DS_DBG_ONLY(assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n \n         return;\n     }\n \n   node_pointer p_y = p_nd->m_p_prev_or_parent;\n-  PB_DS_DBG_ASSERT(p_y != NULL);\n+  _GLIBCXX_DEBUG_ASSERT(p_y != NULL);\n \n   if (p_nd->m_p_next_sibling != NULL)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_y;\n@@ -318,7 +318,7 @@ modify(point_iterator it, const_reference r_new_val)\n \n   make_root_and_link(p_nd);\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "a24d0aac0098bef537b91442de5ccd171b239ba1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -50,15 +50,15 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     other.clear();\n \n   if (base_type::empty())\n     {\n-      PB_DS_DBG_ONLY(assert_valid();)\n-        PB_DS_DBG_ONLY(other.assert_valid();)\n+      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n         return;\n     }\n@@ -69,7 +69,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   while (p_out != NULL)\n     {\n-      PB_DS_DBG_ASSERT(base_type::m_size > 0);\n+      _GLIBCXX_DEBUG_ASSERT(base_type::m_size > 0);\n       --base_type::m_size;\n \n       ++other.m_size;\n@@ -81,7 +81,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     node_pointer p_cur = base_type::m_p_root;\n \n@@ -98,17 +98,17 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_cur = p_next;\n     }\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n     node_pointer p_other = other.m_p_root;\n \n@@ -127,6 +127,6 @@ join(PB_DS_CLASS_C_DEC& other)\n   other.m_size = 0;\n   other.m_p_max = NULL;\n \n-  PB_DS_DBG_ONLY(assert_valid();)\n-    PB_DS_DBG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n     }"}, {"sha": "6d1f4ba9ca8726248f083ce68f2263ebfb4bbc74", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp", "status": "modified", "additions": 18, "deletions": 53, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -52,55 +52,33 @@\n  * Tarjan and Kaplan.\n  */\n \n-#ifdef PB_DS_THIN_HEAP_DEBUG_\n-#include <cassert>\n-#endif // #ifdef PB_DS_THIN_HEAP_DEBUG_\n #include <algorithm>\n #include <ext/pb_ds/detail/cond_dealtor.hpp>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/null_metadata.hpp>\n+#include <debug/debug.h>\n \n namespace pb_ds\n {\n   namespace detail\n   {\n \n-#ifdef PB_DS_THIN_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_THIN_HEAP_DEBUG_\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_THIN_HEAP_DEBUG_\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n+#define PB_DS_CLASS_T_DEC \\\n     template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    thin_heap_<\t\t\t\t\t\t\\\n-\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\tAllocator>\n+#define PB_DS_CLASS_C_DEC \\\n+    thin_heap_<Value_Type, Cmp_Fn, Allocator>\n \n-#ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+#ifdef _GLIBCXX_DEBUG\n+#define PB_DS_BASE_C_DEC \\\n+    left_child_next_sibling_heap_<Value_Type, Cmp_Fn,\t\\\n+\t\t\t        typename Allocator::size_type, Allocator, true>\n+#else \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::size_type, \\\n-\t\t\t\t\t\t\t\t\tAllocator, \\\n-\t\t\t\t\t\t\t\t\ttrue>\n-#else // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\ttypename Allocator::size_type, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n-#endif // #ifdef PB_DS_LC_NS_HEAP_DEBUG_\n+    left_child_next_sibling_heap_<Value_Type, Cmp_Fn, \\\n+\t\t\t\t  typename Allocator::size_type, Allocator>\n+#endif \n \n     /**\n      * class description = \"t|-|i|\\| h34p\">\n@@ -209,22 +187,18 @@ namespace pb_ds\n       void\n       copy_from_range(It first_it, It last_it);\n \n-#ifdef PB_DS_THIN_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_valid() const;\n \n       void\n       assert_max() const;\n-\n-#endif // #ifdef PB_DS_THIN_HEAP_DEBUG_\n+#endif \n \n #ifdef PB_DS_THIN_HEAP_TRACE_\n-\n       void\n       trace() const;\n-\n-#endif // #ifdef PB_DS_THIN_HEAP_TRACE_\n+#endif \n \n     private:\n       enum\n@@ -291,15 +265,13 @@ namespace pb_ds\n       inline node_pointer\n       join(node_pointer p_lhs, node_pointer p_rhs) const;\n \n-#ifdef PB_DS_THIN_HEAP_DEBUG_\n-\n+#ifdef _GLIBCXX_DEBUG\n       void\n       assert_node_consistent(const_node_pointer p_nd, bool root) const;\n \n       void\n       assert_aux_null() const;\n-\n-#endif // #ifdef PB_DS_THIN_HEAP_DEBUG_\n+#endif \n \n     private:\n       node_pointer m_p_max;\n@@ -313,7 +285,6 @@ namespace pb_ds\n       };\n \n     // Taken from the SGI implementation; acknowledged in the docs.\n-\n     static const std::size_t g_a_rank_bounds[num_distinct_rank_bounds] =\n       {\n \t/* Dealing cards... */\n@@ -377,16 +348,10 @@ namespace pb_ds\n #include <ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp>\n \n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace detail\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_THIN_HEAP_HPP\n+#endif "}, {"sha": "88f8757ce41d9c00b5518fe2ef2a77b848f938b6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/types_traits.hpp", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftypes_traits.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -56,24 +56,15 @@ namespace pb_ds\n   namespace detail\n   {\n \n-    template<typename Key,\n-\t     typename Mapped,\n-\t     class Allocator,\n-\t     bool Store_Extra>\n+    template<typename Key, typename Mapped, class Allocator, bool Store_Extra>\n     struct vt_base_selector\n     {\n       typedef value_type_base< Key, Mapped, Allocator, Store_Extra> type;\n     };\n \n-    template<typename Key,\n-\t     typename Mapped,\n-\t     class Allocator,\n-\t     bool Store_Extra>\n-    struct types_traits : public vt_base_selector<\n-      Key,\n-      Mapped,\n-      Allocator,\n-      Store_Extra>::type\n+    template<typename Key, typename Mapped, class Allocator, bool Store_Extra>\n+    struct types_traits \n+    : public vt_base_selector<Key, Mapped, Allocator, Store_Extra>::type\n     {\n \n       typedef typename Allocator::template rebind< Key>::other key_allocator;"}, {"sha": "e1e93a5eed9a624f527d57338f746ffa75971294", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/const_point_iterator.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fconst_point_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -105,7 +105,7 @@ class const_point_iterator_\n   inline const_pointer\n   operator->() const\n   {\n-    PB_DS_DBG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n \n     return (m_p_value);\n   }\n@@ -114,7 +114,7 @@ class const_point_iterator_\n   inline const_reference\n   operator*() const\n   {\n-    PB_DS_DBG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n \n     return (*m_p_value);\n   }"}, {"sha": "11afafbbb57684195522b185c0c0bfa03b557f50", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/iterator.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fiterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -103,7 +103,7 @@ class iterator_ :\n   inline pointer\n   operator->() const\n   {\n-    PB_DS_DBG_ASSERT(base_type::m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != NULL);\n \n     return (const_cast<pointer>(base_type::m_p_value));\n   }\n@@ -112,7 +112,7 @@ class iterator_ :\n   inline reference\n   operator*() const\n   {\n-    PB_DS_DBG_ASSERT(base_type::m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(base_type::m_p_value != NULL);\n \n     return (const_cast<reference>(*base_type::m_p_value));\n   }"}, {"sha": "7b96425b1457f634cd7fbcfda58417e333b5b6d6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/unordered_iterator/point_iterator.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Funordered_iterator%2Fpoint_iterator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -92,7 +92,7 @@ class point_iterator_\n   inline pointer\n   operator->() const\n   {\n-    PB_DS_DBG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n \n     return (m_p_value);\n   }\n@@ -101,7 +101,7 @@ class point_iterator_\n   inline reference\n   operator*() const\n   {\n-    PB_DS_DBG_ASSERT(m_p_value != NULL);\n+    _GLIBCXX_DEBUG_ASSERT(m_p_value != NULL);\n \n     return (*m_p_value);\n   }"}, {"sha": "3d3f20bac320721057e7e0d03fbf68a13f51d202", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -47,17 +47,6 @@\n #ifndef PB_DS_HASH_POLICY_HPP\n #define PB_DS_HASH_POLICY_HPP\n \n-#ifdef PB_DS_HASH_POLICY_DEBUG\n-# include <cassert>\n-# define PB_DS_DBG_ASSERT(X) assert(X)\n-# define PB_DS_DBG_VERIFY(X) assert(X)\n-# define PB_DS_DBG_ONLY(X) X\n-#else \n-# define PB_DS_DBG_ASSERT(X)\n-# define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-# define PB_DS_DBG_ONLY(X) ;\n-#endif \n-\n #include <algorithm>\n #include <vector>\n #include <cmath>\n@@ -288,7 +277,7 @@ namespace pb_ds\n \n     typedef PB_DS_SIZE_BASE_C_DEC size_base;\n \n-#ifdef PB_DS_HASH_POLICY_DEBUG\n+#ifdef _GLIBCXX_DEBUG\n     void\n     assert_valid() const;\n #endif \n@@ -615,10 +604,6 @@ namespace pb_ds\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n } // namespace pb_ds\n \n #endif "}, {"sha": "937cc6735df2aad4fdcef8545372001108b4cbb2", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_multimap.hpp", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -59,16 +59,6 @@ namespace pb_ds\n   namespace test\n   {\n \n-#ifdef NATIVE_HASH_MULTIMAP_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef NATIVE_HASH_MULTIMAP_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef NATIVE_HASH_MULTIMAP_DEBUG\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\ttypename Key,\t\t\\\n@@ -216,36 +206,25 @@ namespace pb_ds\n       static std::string\n       desc()\n       {\n-        return (make_xml_tag(            \"type\", \"value\", \"__gnucxx_hash_multimap\"));\n+        return (make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_multimap\"));\n       }\n     };\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n-    native_hash_multimap()\n-#ifdef __GNUC__\n-      :\n-    base_type(Init_Size)\n-#endif // #ifdef __GNUC__\n+    native_hash_multimap() : base_type(Init_Size)\n     { }\n \n     PB_DS_CLASS_T_DEC\n     template<typename It>\n     PB_DS_CLASS_C_DEC::\n-    native_hash_multimap(It f, It l) :\n-      base_type(f, l)\n+    native_hash_multimap(It f, It l) : base_type(f, l)\n     { }\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n \n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n   } // namespace test\n \n } // namespace pb_ds"}, {"sha": "42b9766e3c72e40adbb7e5bd528afe6800155bd6", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_multimap.hpp", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -57,16 +57,6 @@ namespace pb_ds\n   namespace test\n   {\n \n-#ifdef NATIVE_HASH_SET_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef NATIVE_HASH_SET_DEBUG\n-#define PB_DS_DBG_ASSERT(X)\n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef NATIVE_HASH_SET_DEBUG\n-\n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n     template<typename Key, typename Data, class Less_Fn, class Allocator>\n \n@@ -155,7 +145,6 @@ namespace pb_ds\n \t  {\n             if (it->second == r_val.second)\n \t      return it;\n-\n             ++it;\n \t  }\n \n@@ -179,7 +168,6 @@ namespace pb_ds\n \t  {\n             if (it->second == r_val.second)\n \t      return it;\n-\n             ++it;\n \t  }\n \n@@ -198,7 +186,7 @@ namespace pb_ds\n       static std::string\n       desc()\n       {\n-        return (make_xml_tag(            \"type\", \"value\", \"std_multimap\"));\n+        return (make_xml_tag(\"type\", \"value\", \"std_multimap\"));\n       }\n     };\n \n@@ -210,21 +198,13 @@ namespace pb_ds\n     PB_DS_CLASS_T_DEC\n     template<typename It>\n     PB_DS_CLASS_C_DEC::\n-    native_multimap(It f, It l) :\n-      base_type(f, l)\n+    native_multimap(It f, It l) : base_type(f, l)\n     { }\n \n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_BASE_C_DEC\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n-\n-  } // namespace test\n+} // namespace test\n \n } // namespace pb_ds\n "}, {"sha": "53072db887b0b20163746728772d0617364b97a5", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/dbg_ex_allocator.hpp", "status": "modified", "additions": 26, "deletions": 103, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -51,17 +51,8 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename T>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    dbg_ex_allocator<\t\t\t\t\t\\\n-\t\t\t\t\t\tT>\n-\n     template<typename T>\n     class dbg_ex_allocator : public detail::dbg_ex_allocator_base\n     {\n@@ -80,127 +71,59 @@ namespace pb_ds\n         typedef dbg_ex_allocator<U> other;\n       };\n \n-      dbg_ex_allocator() throw();\n+      dbg_ex_allocator() throw() { }\n \n-      dbg_ex_allocator(const PB_DS_CLASS_C_DEC& ) throw();\n+      dbg_ex_allocator(const dbg_ex_allocator<T>& ) throw() { }\n \n       template <class U>\n-      dbg_ex_allocator(const dbg_ex_allocator<U>& ) throw();\n+      dbg_ex_allocator(const dbg_ex_allocator<U>& ) throw() { }\n \n-      ~dbg_ex_allocator() throw();\n+      ~dbg_ex_allocator() throw() { }\n \n       size_type\n-      max_size() const throw();\n+      max_size() const throw()\n+      { return std::allocator<T>().max_size(); }\n \n       pointer\n       allocate(size_type num, std::allocator<void>::const_pointer hint = 0);\n \n       void\n-      construct(pointer p, const T& r_val);\n+      construct(pointer p, const T& r_val)\n+      { return std::allocator<T>().construct(p, r_val); }\n \n       void\n-      destroy(pointer p);\n+      destroy(pointer p)\n+      {\tstd::allocator<T>().destroy(p); }\n \n       void\n-      deallocate(pointer p, size_type num);\n+      deallocate(pointer p, size_type num)\n+      {\n+\terase(p, sizeof(T) * num);\n+\tstd::allocator<T>().deallocate(p, num);\n+      }\n \n       void\n-      check_allocated(pointer p, size_type num);\n+      check_allocated(pointer p, size_type num)\n+      { detail::dbg_ex_allocator_base::check_allocated(p, sizeof(T) * num); }\n     };\n \n-    PB_DS_CLASS_T_DEC\n-    inline bool\n-    operator==(const PB_DS_CLASS_C_DEC& , const PB_DS_CLASS_C_DEC& );\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    dbg_ex_allocator() throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    dbg_ex_allocator(const PB_DS_CLASS_C_DEC& ) throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename U>\n-    PB_DS_CLASS_C_DEC::\n-    dbg_ex_allocator(const dbg_ex_allocator<U>& ) throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ~dbg_ex_allocator() throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    max_size() const throw()\n-    {\n-      return (std::allocator<T>().max_size());\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::pointer\n-    PB_DS_CLASS_C_DEC::\n+    template<typename T>\n+    typename dbg_ex_allocator<T>::pointer\n+    dbg_ex_allocator<T>::\n     allocate(size_type num, std::allocator<void>::const_pointer hint/*= 0*/)\n     {\n       cond_throw();\n-\n       T* const a_t = std::allocator<T>().allocate(num, hint);\n-\n-      insert(a_t, sizeof(T)*  num);\n-\n-      return (a_t);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    construct(pointer p, const T& r_val)\n-    {\n-      return (std::allocator<T>().construct(p, r_val));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    destroy(pointer p)\n-    {\n-      std::allocator<T>().destroy(p);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    deallocate(pointer p, size_type num)\n-    {\n-      erase(p, sizeof(T)*  num);\n-\n-      std::allocator<T>().deallocate(p, num);\n+      insert(a_t, sizeof(T) * num);\n+      return a_t;\n     }\n \n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    check_allocated(pointer p, size_type num)\n-    {\n-      detail::dbg_ex_allocator_base::check_allocated(p, sizeof(T)*  num);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n+    template<typename T>\n     inline bool\n-    operator==(const PB_DS_CLASS_C_DEC& , const PB_DS_CLASS_C_DEC& )\n-    {\n-      return (true);\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n+    operator==(const dbg_ex_allocator<T>& , const dbg_ex_allocator<T>& )\n+    { return true; }\n \n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_DBG_EX_ALLOCATOR_HPP\n+#endif "}, {"sha": "9831281e3f113f23e38be6c7f031ad5fb4834739", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/dbg_ex_allocator_base.hpp", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fdbg_ex_allocator_base.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -57,13 +57,10 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       class dbg_ex_allocator_base;\n \n       std::ostream& \n@@ -96,14 +93,11 @@ namespace pb_ds\n \t  group_throw_prob_adjustor(size_t size) : m_orig_throw_prob(s_throw_prob)\n \t  {\n             s_throw_prob =\n-\t      1 - ::pow((double)(\n-\t\t\t\t 1 - s_throw_prob),(double)(0.5 / (size + 1)));\n+\t      1 - ::pow(double(1 - s_throw_prob), double(0.5 / (size + 1)));\n \t  }\n \n \t  ~group_throw_prob_adjustor()\n-\t  {\n-            s_throw_prob = m_orig_throw_prob;\n-\t  }\n+\t  { s_throw_prob = m_orig_throw_prob; }\n \n \tprivate:\n \t  const double m_orig_throw_prob;\n@@ -113,14 +107,10 @@ namespace pb_ds\n \t{\n \tpublic:\n \t  zero_throw_prob_adjustor() : m_orig_throw_prob(s_throw_prob)\n-\t  {\n-            s_throw_prob = 0;\n-\t  }\n+\t  { s_throw_prob = 0; }\n \n \t  ~zero_throw_prob_adjustor()\n-\t  {\n-            s_throw_prob = m_orig_throw_prob;\n-\t  }\n+\t  { s_throw_prob = m_orig_throw_prob; }\n \n \tprivate:\n \t  const double m_orig_throw_prob;\n@@ -143,17 +133,12 @@ namespace pb_ds\n         check_allocated(void* p_r, size_t size);\n \n       private:\n-\ttypedef std::pair< label, size_t> alloc_data_t;\n-\n-\ttypedef std::map< void* , alloc_data_t> map_t;\n-\n-\ttypedef map_t::value_type entry_t;\n-\n-\ttypedef map_t::const_iterator const_iterator;\n+\ttypedef std::pair<label, size_t> \talloc_data_t;\n+\ttypedef std::map<void*, alloc_data_t> \tmap_t;\n+\ttypedef map_t::value_type \t\tentry_t;\n+\ttypedef map_t::const_iterator \t\tconst_iterator;\n+\ttypedef map_t::const_reference \t\tconst_reference;\n \n-\ttypedef map_t::const_reference const_reference;\n-\n-      private:\n \tstatic void\n         print_to_ostream(std::ostream& r_os);\n \n@@ -163,25 +148,16 @@ namespace pb_ds\n \tstatic entry_t\n         make_entry(void* p_r, size_t size);\n \n-      private:\n \tstatic twister_rand_gen s_g;\n+\tstatic map_t \t\ts_map;\n+\tstatic double \t\ts_throw_prob;\n+\tstatic size_t \t\ts_label;\n \n-\tstatic map_t s_map;\n-\n-\tstatic double s_throw_prob;\n-\n-\tstatic size_t s_label;\n-\n-\tfriend std::ostream& operator<<(std::ostream& r_os, const dbg_ex_allocator_base& r_dbg);\n+\tfriend std::ostream& operator<<(std::ostream& r_os, \n+\t\t\t\t\tconst dbg_ex_allocator_base& r_dbg);\n       };\n-\n-      std::ostream& \n-      operator<<(std::ostream& r_os, const dbg_ex_allocator_base& r_dbg);\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_DBG_EX_ALLOCATOR_BASE_HPP"}, {"sha": "36942033139027848fb8ffbf85cee88366876532", "filename": "libstdc++-v3/testsuite/util/regression/res_mng/forced_exception.hpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Fres_mng%2Fforced_exception.hpp?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -49,15 +49,11 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     struct forced_exception\n     { };\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n #endif // #ifndef PB_DS_FORCED_EXCEPTION_HPP"}, {"sha": "879844a0259083c795b8b2be2f9dff34d90b9057", "filename": "libstdc++-v3/testsuite/util/rng/twister_rand_gen.cc", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bea7b87a21a1d5eb42e83941454624c0fe7a89/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Frng%2Ftwister_rand_gen.cc?ref=47bea7b87a21a1d5eb42e83941454624c0fe7a89", "patch": "@@ -43,23 +43,14 @@\n  * @file twister_rand_gen.cc\n  */\n \n-#include <util/rng/twister_rand_gen.hpp>\n #include <ctime>\n+#include <debug/debug.h>\n+#include <util/rng/twister_rand_gen.hpp>\n \n namespace pb_ds\n {\n   namespace test\n   {\n-#ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n-#define PB_DS_DBG_ASSERT(X) assert(X)\n-#define PB_DS_DBG_VERIFY(X) assert(X)\n-#define PB_DS_DBG_ONLY(X) X\n-#else // #ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n-#define PB_DS_DBG_ASSERT(X) \n-#define PB_DS_DBG_VERIFY(X) {if((X)==0);}\n-#define PB_DS_DBG_ONLY(X) ;\n-#endif // #ifdef PB_DS_TWISTER_RAND_GEN_DEBUG\n-\n     twister_rand_gen::\n     twister_rand_gen(unsigned int seed)\n     : m_base_generator(seed)\n@@ -76,14 +67,14 @@ namespace pb_ds\n     twister_rand_gen::\n     get_unsigned_long(unsigned long min, unsigned long max)\n     {\n-      PB_DS_DBG_ASSERT(max >= min);\n+      _GLIBCXX_DEBUG_ASSERT(max >= min);\n \n       const double prob = get_prob();\n \n       const unsigned long rand_word = \n \t(unsigned long)((max - min + 1) * prob) + min;\n \n-      PB_DS_DBG_ASSERT(rand_word <= max);\n+      _GLIBCXX_DEBUG_ASSERT(rand_word <= max);\n \n       return rand_word;\n     }\n@@ -101,13 +92,9 @@ namespace pb_ds\n \n       const double ret = eng_res / eng_range;\n \n-      PB_DS_DBG_ASSERT(ret >=0 && ret <= 1);\n+      _GLIBCXX_DEBUG_ASSERT(ret >=0 && ret <= 1);\n \n       return ret;\n     }\n-\n-#undef PB_DS_DBG_ASSERT\n-#undef PB_DS_DBG_VERIFY\n-#undef PB_DS_DBG_ONLY\n   } // namespace test\n } // namespace pb_ds"}]}