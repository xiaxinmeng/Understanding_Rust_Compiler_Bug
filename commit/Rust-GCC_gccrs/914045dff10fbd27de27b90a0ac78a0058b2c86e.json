{"sha": "914045dff10fbd27de27b90a0ac78a0058b2c86e", "node_id": "C_kwDOANBUbNoAKDkxNDA0NWRmZjEwZmJkMjdkZTI3YjkwYTBhYzc4YTAwNThiMmM4NmU", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-20T12:12:09Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2021-10-20T12:14:39Z"}, "message": "[Patch][GCC][middle-end] - Generate FRINTZ for (double)(int) under -ffast-math on aarch64\n\n20-10-2021  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Jirui Wu  <jirui.wu@arm.com>\ngcc/ChangeLog:\n\n\t* match.pd: Generate IFN_TRUNC.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/merge_trunc1.c: New test.", "tree": {"sha": "5d2d2b018d25bd149f22f9334b282a286684e465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2d2b018d25bd149f22f9334b282a286684e465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/914045dff10fbd27de27b90a0ac78a0058b2c86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914045dff10fbd27de27b90a0ac78a0058b2c86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914045dff10fbd27de27b90a0ac78a0058b2c86e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914045dff10fbd27de27b90a0ac78a0058b2c86e/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5e46563817f4f1bd786be1d21b85d18e61bc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5e46563817f4f1bd786be1d21b85d18e61bc0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5e46563817f4f1bd786be1d21b85d18e61bc0c"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "5bed2e12715ea213813ef8b84fd420475b04d201", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914045dff10fbd27de27b90a0ac78a0058b2c86e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914045dff10fbd27de27b90a0ac78a0058b2c86e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=914045dff10fbd27de27b90a0ac78a0058b2c86e", "patch": "@@ -3606,6 +3606,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t >= inside_prec - !inside_unsignedp)\n      (convert @0)))))))\n \n+/* (float_type)(integer_type) x -> trunc (x) if the type of x matches\n+   float_type.  Only do the transformation if we do not need to preserve\n+   trapping behaviour, so require !flag_trapping_math. */\n+#if GIMPLE\n+(simplify\n+   (float (fix_trunc @0))\n+   (if (!flag_trapping_math\n+\t&& types_match (type, TREE_TYPE (@0))\n+\t&& direct_internal_fn_supported_p (IFN_TRUNC, type,\n+\t\t\t\t\t  OPTIMIZE_FOR_BOTH))\n+      (IFN_TRUNC @0)))\n+#endif\n+\n /* If we have a narrowing conversion to an integral type that is fed by a\n    BIT_AND_EXPR, we might be able to remove the BIT_AND_EXPR if it merely\n    masks off bits outside the final type (and nothing else).  */"}, {"sha": "07217064e2ba54fcf4f5edc440e6ec19ddae66e1", "filename": "gcc/testsuite/gcc.target/aarch64/merge_trunc1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914045dff10fbd27de27b90a0ac78a0058b2c86e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmerge_trunc1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914045dff10fbd27de27b90a0ac78a0058b2c86e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmerge_trunc1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmerge_trunc1.c?ref=914045dff10fbd27de27b90a0ac78a0058b2c86e", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+float\n+f1 (float x)\n+{\n+  int y = x;\n+\n+  return (float) y;\n+}\n+\n+double\n+f2 (double x)\n+{\n+  long y = x;\n+\n+  return (double) y;\n+}\n+\n+float\n+f3 (double x)\n+{\n+  int y = x;\n+\n+  return (float) y;\n+}\n+\n+double\n+f4 (float x)\n+{\n+  int y = x;\n+\n+  return (double) y;\n+}\n+\n+/* { dg-final { scan-assembler \"frintz\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"frintz\\\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzs\\\\tw\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"scvtf\\\\ts\\[0-9\\]+, w\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"fcvtzs\\\\tw\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"scvtf\\\\td\\[0-9\\]+, w\\[0-9\\]+\" } } */"}]}