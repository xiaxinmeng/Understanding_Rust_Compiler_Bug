{"sha": "05dfb0b0e3c41fa4e3342402af348ef993e65335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkZmIwYjBlM2M0MWZhNGUzMzQyNDAyYWYzNDhlZjk5M2U2NTMzNQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-10-17T08:29:57Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-10-17T08:29:57Z"}, "message": "BindException.java, [...]: Big import statement and @author tag cleanup.\n\n2004-10-17  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/BindException.java,\n\tjava/net/ConnectException.java,\n\tjava/net/ContentHandler.java,\n\tjava/net/ContentHandlerFactory.java,\n\tjava/net/DatagramPacket.java,\n\tjava/net/DatagramSocket.java,\n\tjava/net/DatagramSocketImpl.java,\n\tjava/net/DatagramSocketImplFactory.java,\n\tjava/net/FileNameMap.java,\n\tjava/net/HttpURLConnection.java,\n\tjava/net/MalformedURLException.java,\n\tjava/net/MulticastSocket.java,\n\tjava/net/NetworkInterface.java,\n\tjava/net/NoRouteToHostException.java,\n\tjava/net/PasswordAuthentication.java,\n\tjava/net/PortUnreachableException.java,\n\tjava/net/ProtocolException.java,\n\tjava/net/ServerSocket.java,\n\tjava/net/Socket.java,\n\tjava/net/SocketException.java,\n\tjava/net/SocketImpl.java,\n\tjava/net/SocketImplFactory.java,\n\tjava/net/SocketOptions.java,\n\tjava/net/SocketPermission.java,\n\tjava/net/SocketTimeoutException.java,\n\tjava/net/URI.java,\n\tjava/net/URISyntaxException.java,\n\tjava/net/URL.java,\n\tjava/net/URLDecoder.java,\n\tjava/net/URLEncoder.java,\n\tjava/net/URLStreamHandler.java,\n\tjava/net/URLStreamHandlerFactory.java,\n\tjava/net/UnknownHostException.java,\n\tjava/net/UnknownServiceException.java:\n\tBig import statement and @author tag cleanup.\n\nFrom-SVN: r89168", "tree": {"sha": "1bd6ec137f044fdc5e7e974db97a9cb9befa6879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd6ec137f044fdc5e7e974db97a9cb9befa6879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05dfb0b0e3c41fa4e3342402af348ef993e65335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dfb0b0e3c41fa4e3342402af348ef993e65335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05dfb0b0e3c41fa4e3342402af348ef993e65335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dfb0b0e3c41fa4e3342402af348ef993e65335/comments", "author": null, "committer": null, "parents": [{"sha": "3238d4f99abf7712dbaa7126fbf10b6670c84ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3238d4f99abf7712dbaa7126fbf10b6670c84ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3238d4f99abf7712dbaa7126fbf10b6670c84ce5"}], "stats": {"total": 251, "additions": 140, "deletions": 111}, "files": [{"sha": "fb55ee6a3ccc0634d45bb7dab7a0b767517bd30f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -1,3 +1,41 @@\n+2004-10-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/BindException.java,\n+\tjava/net/ConnectException.java,\n+\tjava/net/ContentHandler.java,\n+\tjava/net/ContentHandlerFactory.java,\n+\tjava/net/DatagramPacket.java,\n+\tjava/net/DatagramSocket.java,\n+\tjava/net/DatagramSocketImpl.java,\n+\tjava/net/DatagramSocketImplFactory.java,\n+\tjava/net/FileNameMap.java,\n+\tjava/net/HttpURLConnection.java,\n+\tjava/net/MalformedURLException.java,\n+\tjava/net/MulticastSocket.java,\n+\tjava/net/NetworkInterface.java,\n+\tjava/net/NoRouteToHostException.java,\n+\tjava/net/PasswordAuthentication.java,\n+\tjava/net/PortUnreachableException.java,\n+\tjava/net/ProtocolException.java,\n+\tjava/net/ServerSocket.java,\n+\tjava/net/Socket.java,\n+\tjava/net/SocketException.java,\n+\tjava/net/SocketImpl.java,\n+\tjava/net/SocketImplFactory.java,\n+\tjava/net/SocketOptions.java,\n+\tjava/net/SocketPermission.java,\n+\tjava/net/SocketTimeoutException.java,\n+\tjava/net/URI.java,\n+\tjava/net/URISyntaxException.java,\n+\tjava/net/URL.java,\n+\tjava/net/URLDecoder.java,\n+\tjava/net/URLEncoder.java,\n+\tjava/net/URLStreamHandler.java,\n+\tjava/net/URLStreamHandlerFactory.java,\n+\tjava/net/UnknownHostException.java,\n+\tjava/net/UnknownServiceException.java:\n+\tBig import statement and @author tag cleanup.\n+\n 2004-10-17  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/security/OID.java,"}, {"sha": "fcb4f9d22d44dcac5ba4bf3e9d6317cb688a1ed6", "filename": "libjava/java/net/BindException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FBindException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FBindException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FBindException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -42,8 +42,8 @@\n  * This exception indicates that an error occurred while attempting to bind\n  * socket to a particular port.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @since 1.1\n  * @status updated to 1.4\n  */"}, {"sha": "2a3ec940d3f55987c9e8175f9ab23250112d6b00", "filename": "libjava/java/net/ConnectException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FConnectException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -43,8 +43,8 @@\n  * connect to a remote host.  Often this indicates that the remote host\n  * refused the connection (ie, is not listening on the target socket).\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @since 1.1\n  * @status updated to 1.4\n  */"}, {"sha": "a3b946cd9517c4b9a964d1d7e9d463e58e49e9e2", "filename": "libjava/java/net/ContentHandler.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FContentHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FContentHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandler.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -55,7 +55,7 @@\n   * indirectly through methods in other classes.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Warren Levy (warrenl@cygnus.com)\n   */\n public abstract class ContentHandler\n {"}, {"sha": "fa8e8188f164f34b21ebc755c10433594a7d84dc", "filename": "libjava/java/net/ContentHandlerFactory.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -49,7 +49,7 @@\n   * handler for that type.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Warren Levy (warrenl@cygnus.com)\n   */\n public interface ContentHandlerFactory\n {"}, {"sha": "087a80630b6d907285b62cd82c02eb1806604576", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -62,7 +62,7 @@\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  *\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @author Aarom M. Renn (arenn@urbanophile.com) (Documentation comments)\n  * @date April 28, 1999.\n  */"}, {"sha": "e00425f29c990df5bab59cc2f13019f2b10b9a97", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -40,6 +40,7 @@\n \n import gnu.java.net.PlainDatagramSocketImpl;\n import gnu.java.nio.DatagramChannelImpl;\n+\n import java.io.IOException;\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.IllegalBlockingModeException;"}, {"sha": "b48019f77c1bc96caa9511f28baa44e12d7e6b4d", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -53,7 +53,7 @@\n  * Status:  Believed complete and correct.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @since 1.1\n  */\n public abstract class DatagramSocketImpl implements SocketOptions"}, {"sha": "54764577d3bb131065020507d028b51545136d3a", "filename": "libjava/java/net/DatagramSocketImplFactory.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImplFactory.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -1,4 +1,4 @@\n-/* DatagramSocketImplFactory.java\n+/* DatagramSocketImplFactory.java --\n    Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -46,7 +46,7 @@\n   * <code>DatagramSocketImpl</code> object.\n   * This should not be needed by ordinary applications.\n   *\n-  * @author Michael Koch <konqueror@gmx.de>\n+  * @author Michael Koch (konqueror@gmx.de)\n   * @since 1.3\n   */\n public interface DatagramSocketImplFactory"}, {"sha": "37033c2b136cc86bebbe70748700d0aa06a33a28", "filename": "libjava/java/net/FileNameMap.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FFileNameMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FFileNameMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FFileNameMap.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -48,7 +48,7 @@\n   * the MIME type associated with that filename.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Warren Levy (warrenl@cygnus.com)\n   * @since 1.1\n   */\n public interface FileNameMap"}, {"sha": "c4c99378e621a37b19b11734f15657f2043b9ccd", "filename": "libjava/java/net/HttpURLConnection.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FHttpURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FHttpURLConnection.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -1,5 +1,5 @@\n-/* HttpURLConnection.java - Subclass of communications links using\n-                            Hypertext Transfer Protocol.\n+/* HttpURLConnection.java -- Subclass of communications links using\n+   Hypertext Transfer Protocol.\n    Copyright (C) 1998, 1999, 2000, 2002, 2003  Free Software Foundation\n \n This file is part of GNU Classpath.\n@@ -291,7 +291,7 @@ public abstract class HttpURLConnection extends URLConnection\n   /**\n    * This is a list of valid request methods, separated by \"|\" characters.\n    */\n-  private static String valid_methods =\n+  private static final String valid_methods =\n     \"|GET|POST|HEAD|OPTIONS|PUT|DELETE|TRACE|\";\n \n   // Instance Variables\n@@ -537,7 +537,7 @@ public Permission getPermission() throws IOException\n   public InputStream getErrorStream()\n   {\n     if (! connected)\n-      return (null);\n+      return null;\n \n     int code;\n     try\n@@ -550,25 +550,25 @@ public InputStream getErrorStream()\n       }\n \n     if (code == -1)\n-      return (null);\n+      return null;\n \n     if (((code / 100) != 4) || ((code / 100) != 5))\n-      return (null);\n+      return null;\n \n     try\n       {\n \tPushbackInputStream pbis = new PushbackInputStream(getInputStream());\n \n \tint i = pbis.read();\n \tif (i == -1)\n-\t  return (null);\n+\t  return null;\n \n \tpbis.unread(i);\n-\treturn (pbis);\n+\treturn pbis;\n       }\n     catch (IOException e)\n       {\n-\treturn (null);\n+\treturn null;\n       }\n   }\n "}, {"sha": "6fdf12ae507f8b497e9d5500f3cfce8f335ace14", "filename": "libjava/java/net/MalformedURLException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMalformedURLException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -44,8 +44,8 @@\n  * This exception indicates that a URL passed to an object was not in a\n  * valid format.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @status updated to 1.4\n  */\n public class MalformedURLException extends IOException"}, {"sha": "65e63253cc213ae69a556dfb810404036722d0dd", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -60,7 +60,7 @@\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  *\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @author Aaron M. Renn (arenn@urbanophile.com) (Documentation comments)\n  * @since 1.1\n  * @date May 18, 1999."}, {"sha": "defd3482583ecdb7bc6dce674ba296ff7e5269eb", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -1,4 +1,4 @@\n-/* NetworkInterface.java\n+/* NetworkInterface.java --\n    Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -49,7 +49,7 @@\n  * For example, an ethernet interface may be named \"eth0\" and have the\n  * address 192.168.1.101 assigned to it.\n  *\n- * @author Michael Koch <konqueror@gmx.de>\n+ * @author Michael Koch (konqueror@gmx.de)\n  * @since 1.4\n  */\n public final class NetworkInterface\n@@ -113,6 +113,7 @@ public Enumeration getInetAddresses()\n \t  }\n \tcatch (SecurityException e)\n \t  {\n+\t    // Ignore.\n \t  }\n       }\n "}, {"sha": "5427fb58e3d9f9516b6b308d312de755c8c5dc87", "filename": "libjava/java/net/NoRouteToHostException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -42,8 +42,8 @@\n   * This exception indicates that there is no TCP/IP route to the requested\n   * host.  This is often due to a misconfigured routing table.\n   *\n-  * @author Aaron M. Renn <arenn@urbanophile.com>\n-  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy (warrenl@cygnus.com)\n   * @since 1.1\n   * @status updated to 1.4\n   */"}, {"sha": "671783d845c44cd517404c497cebb9a0a7bff9f5", "filename": "libjava/java/net/PasswordAuthentication.java", "status": "modified", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -39,69 +39,54 @@\n \n \n /**\n-  * This class serves a container for username/password pairs.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @since 1.2\n-  */\n+ * This class serves a container for username/password pairs.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ *\n+ * @since 1.2\n+ */\n public final class PasswordAuthentication\n {\n-  /*\n-   * Instance Variables\n-   */\n-\n   /**\n-    * The username\n-    */\n+   * The username\n+   */\n   private String username;\n \n   /**\n-    * The password\n-    */\n-  private char[] password;\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n+   * The password\n    */\n+  private char[] password;\n \n   /**\n-    * Creates a new <code>PasswordAuthentication</code> object from the\n-    * specified username and password.\n-    *\n-    * @param username The username for this object\n-    * @param password The password for this object\n-    */\n+   * Creates a new <code>PasswordAuthentication</code> object from the\n+   * specified username and password.\n+   *\n+   * @param username The username for this object\n+   * @param password The password for this object\n+   */\n   public PasswordAuthentication(String username, char[] password)\n   {\n     this.username = username;\n     this.password = password;\n   }\n \n-  /*************************************************************************/\n-\n-  /*\n-   * Instance Methods\n-   */\n-\n   /**\n-    * Returns the username associated with this object\n-    *\n-    * @return The username\n-    */\n+   * Returns the username associated with this object\n+   *\n+   * @return The username\n+   */\n   public String getUserName()\n   {\n-    return (username);\n+    return username;\n   }\n \n   /**\n-    * Returns the password associated with this object\n-    *\n-    * @return The password\n-    */\n+   * Returns the password associated with this object\n+   *\n+   * @return The password\n+   */\n   public char[] getPassword()\n   {\n-    return (password);\n+    return password;\n   }\n-} // class PasswordAuthentication\n+}"}, {"sha": "f3ba17b7d4afc2708ce357a9591df524b71e4d70", "filename": "libjava/java/net/PortUnreachableException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FPortUnreachableException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FPortUnreachableException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPortUnreachableException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -42,7 +42,7 @@\n  * This exception signals that an ICMP port unreachable datagram has been\n  * received.\n  *\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.4\n  * @status updated to 1.4\n  */"}, {"sha": "7f14ab25d87077538915d09d088c2ae374c3930b", "filename": "libjava/java/net/ProtocolException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FProtocolException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FProtocolException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FProtocolException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -45,8 +45,8 @@\n  * exception occurred.  Look in the descriptive message (if any) for\n  * details on what went wrong.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @status updated to 1.4\n  */\n public class ProtocolException extends IOException"}, {"sha": "b0576bf4cd506d8b0569845f3ae02e9cfe6b05f8", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -39,6 +39,7 @@\n package java.net;\n \n import gnu.java.net.PlainSocketImpl;\n+\n import java.io.IOException;\n import java.nio.channels.IllegalBlockingModeException;\n import java.nio.channels.ServerSocketChannel;\n@@ -340,6 +341,7 @@ public Socket accept() throws IOException\n \t  }\n \tcatch (IOException e2)\n \t  {\n+\t    // Ignore.\n \t  }\n \n \tthrow e;"}, {"sha": "bebd73d547962c4a863f325c99f71d9a7ccd4fc5", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -39,6 +39,7 @@\n package java.net;\n \n import gnu.java.net.PlainSocketImpl;\n+\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;"}, {"sha": "f130d52f2811dffcf0b9b8bd07f51cc4cc022cd8", "filename": "libjava/java/net/SocketException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -45,7 +45,7 @@\n  * operation on a socket.  Check the descriptive message (if any) for\n  * details on the nature of this error\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Per Bothner\n  * @status updated to 1.4\n  */"}, {"sha": "4016a2fb69faf99736d4086e394291671e387225", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -62,7 +62,7 @@\n  * a factory.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Per Bothner <bothner@cygnus.com>\n+ * @author Per Bothner (bothner@cygnus.com)\n  */\n public abstract class SocketImpl implements SocketOptions\n {"}, {"sha": "99374dedc4d99c012562d41bfcbea61bf7020368", "filename": "libjava/java/net/SocketImplFactory.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImplFactory.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -46,7 +46,7 @@\n   * object.  This should not be needed by ordinary applications.\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n-  * @author Per Bothner <bothner@cygnus.com>\n+  * @author Per Bothner (bothner@cygnus.com)\n   */\n public interface SocketImplFactory\n {"}, {"sha": "b266919f5ec281819970cb4e73c2893153d0d720", "filename": "libjava/java/net/SocketOptions.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketOptions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketOptions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketOptions.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -51,7 +51,7 @@\n  * @since 1.2\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @status should be completely JDK 1.4 compatible\n  */\n public interface SocketOptions"}, {"sha": "0cd18c772e03b69ba6f0845571b3480b0b6841aa", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -151,13 +151,13 @@ public SocketPermission(String hostport, String actions)\n   public boolean equals(Object obj)\n   {\n     if (! (obj instanceof SocketPermission))\n-      return (false);\n+      return false;\n \n     if (((SocketPermission) obj).hostport.equals(hostport))\n       if (((SocketPermission) obj).actions.equals(actions))\n-\treturn (true);\n+\treturn true;\n \n-    return (false);\n+    return false;\n   }\n \n   /**\n@@ -216,7 +216,7 @@ public String getActions()\n     else if (actions.indexOf(\"resolve\") != -1)\n       sb.append(\"resolve\");\n \n-    return (sb.toString());\n+    return sb.toString();\n   }\n \n   /**\n@@ -229,7 +229,7 @@ public PermissionCollection newPermissionCollection()\n   {\n     // FIXME: Implement\n \n-    return (null);\n+    return null;\n   }\n \n   /**\n@@ -265,14 +265,14 @@ public boolean implies(Permission perm)\n     if (perm instanceof SocketPermission)\n       p = (SocketPermission) perm;\n     else\n-      return (false);\n+      return false;\n \n     // Next check the actions\n     String ourlist = getActions();\n     String theirlist = p.getActions();\n \n     if (! ourlist.startsWith(theirlist))\n-      return (false);\n+      return false;\n \n     // Now check ports\n     int ourfirstport = 0;\n@@ -347,7 +347,7 @@ else if (range.indexOf(\"-\") == -1)\n \n     // Now check them\n     if ((theirfirstport < ourfirstport) || (theirlastport > ourlastport))\n-      return (false);\n+      return false;\n \n     // Finally we can check the hosts\n     String ourhost;\n@@ -369,7 +369,7 @@ else if (range.indexOf(\"-\") == -1)\n \n     // Are they equal?\n     if (ourhost.equals(theirhost))\n-      return (true);\n+      return true;\n \n     // Try the canonical names\n     String ourcanonical = null;\n@@ -392,17 +392,17 @@ else if (range.indexOf(\"-\") == -1)\n       }\n \n     if (ourcanonical.equals(theircanonical))\n-      return (true);\n+      return true;\n \n     // Well, last chance.  Try for a wildcard\n     if (ourhost.indexOf(\"*.\") != -1)\n       {\n \tString wild_domain = ourhost.substring(ourhost.indexOf(\"*\" + 1));\n \tif (theircanonical.endsWith(wild_domain))\n-\t  return (true);\n+\t  return true;\n       }\n \n     // Didn't make it\n-    return (false);\n+    return false;\n   }\n }"}, {"sha": "35bae90ac15ac1840301e4293ea808009dc2db00", "filename": "libjava/java/net/SocketTimeoutException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -43,7 +43,7 @@\n /**\n  * This exception signals that a socket read or accept timed out.\n  *\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @since 1.4\n  * @status updated to 1.4\n  */"}, {"sha": "01381cd8a814ed6a80b9e4468a8c03ba400e3df3", "filename": "libjava/java/net/URI.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURI.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -1,4 +1,4 @@\n-/* URI.java - An URI class\n+/* URI.java - An URI class --\n    Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -134,14 +134,14 @@ private void readObject(ObjectInputStream is)\n   {\n     this.string = (String) is.readObject();\n     try\n-    {\n-      parseURI(this.string);\n-    }\n+      {\n+\tparseURI(this.string);\n+      }\n     catch (URISyntaxException x)\n-    {\n-      // Should not happen.\n-      throw new RuntimeException(x);\n-    }\n+      {\n+\t// Should not happen.\n+\tthrow new RuntimeException(x);\n+      }\n   }\n \n   private void writeObject(ObjectOutputStream os) throws IOException\n@@ -618,7 +618,7 @@ public String getScheme()\n    */\n   public boolean isAbsolute()\n   {\n-    return (scheme != null);\n+    return scheme != null;\n   }\n \n   /**"}, {"sha": "f170d7373d19619127c1e0d4aea6d1458ca0add3", "filename": "libjava/java/net/URISyntaxException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURISyntaxException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURISyntaxException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURISyntaxException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -41,7 +41,7 @@\n /**\n  * This exception is thrown when a String cannot be parsed as a URI.\n  *\n- * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Eric Blake (ebb9@email.byu.edu)\n  * @see URI\n  * @since 1.4\n  * @status updated to 1.4"}, {"sha": "0817126da101ae3a9e9d0048e87f16c8cd16183a", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -39,13 +39,14 @@\n package java.net;\n \n import gnu.java.net.URLParseError;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.HashMap;\n import java.util.StringTokenizer;\n \n@@ -116,8 +117,8 @@\n   * done, then the above information is superseded and the behavior of this\n   * class in loading protocol handlers is dependent on that factory.\n   *\n-  * @author Aaron M. Renn <arenn@urbanophile.com>\n-  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy (warrenl@cygnus.com)\n   *\n   * @see URLStreamHandler\n   */"}, {"sha": "f9ae588f26d95e79d83375931a1146a025eea3b7", "filename": "libjava/java/net/URLDecoder.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLDecoder.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -57,7 +57,7 @@\n  *\n  * @since 1.2\n  *\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @author Aaron M. Renn (arenn@urbanophile.com) (documentation comments)\n  * @author Mark Wielaard (mark@klomp.org)\n  */"}, {"sha": "75127af1a0f0a9c43cf6bc60c46dabc5f40813d8", "filename": "libjava/java/net/URLEncoder.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLEncoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLEncoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLEncoder.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -60,7 +60,7 @@\n  * This method is very useful for encoding strings to be sent to CGI scripts\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @author Mark Wielaard (mark@klomp.org)\n  */\n public class URLEncoder"}, {"sha": "2e91eb64014d9a853edaff82563d9c0e0f5be4b7", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -180,8 +180,8 @@ protected void parseURL(URL url, String spec, int start, int end)\n \t      }\n \t    catch (NumberFormatException e)\n \t      {\n-\t\t; // Ignore invalid port values; port is already set to u's\n-\t\t  // port.\n+\t\t// Ignore invalid port values; port is already set to u's\n+\t\t// port.\n \t      }\n \n \t    // Now we must cut the port number in the original string."}, {"sha": "ce6ba89c5e61b58364bede1e7444f30958c845ab", "filename": "libjava/java/net/URLStreamHandlerFactory.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -49,7 +49,7 @@\n  * <code>URLStreamHandler</code> object.\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Warren Levy (warrenl@cygnus.com)\n  */\n public interface URLStreamHandlerFactory\n {"}, {"sha": "39eb94c09f0c49afadebde98334d5e74f9181ae1", "filename": "libjava/java/net/UnknownHostException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownHostException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -46,7 +46,7 @@\n  * DNS problem has occurred, but most often means that the host was not\n  * correctly specified.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Per Bothner\n  * @status updated to 1.4\n  */"}, {"sha": "12f16f506ad3ce21ec3098fafe1aabcd9f898ea6", "filename": "libjava/java/net/UnknownServiceException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05dfb0b0e3c41fa4e3342402af348ef993e65335/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownServiceException.java?ref=05dfb0b0e3c41fa4e3342402af348ef993e65335", "patch": "@@ -46,8 +46,8 @@\n  * the MIME type returned from a URL could not be determined or that an\n  * attempt was made to write to a read-only URL.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  * @status updated to 1.4\n  */\n public class UnknownServiceException extends IOException"}]}