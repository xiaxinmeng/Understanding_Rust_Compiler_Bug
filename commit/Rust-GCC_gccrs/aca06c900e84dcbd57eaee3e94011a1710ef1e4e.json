{"sha": "aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhMDZjOTAwZTg0ZGNiZDU3ZWFlZTNlOTQwMTFhMTcxMGVmMWU0ZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-05-10T08:51:39Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-05-10T08:51:39Z"}, "message": "Use i386-cpuinfo.c on all i386 targets\n\n\tlibgcc:\n\t* config.host (i[34567]86-*-linux*, x86_64-*-linux*)\n\t(i[34567]86-*-kfreebsd*-gnu, x86_64-*-kfreebsd*-gnu)\n\t(i[34567]86-*-knetbsd*-gnu, i[34567]86-*-gnu*): Move\n\ti386/t-cpuinfo ...\n\t(i[34567]86-*-*, x86_64-*-*): ... here.\n\n\t* config/i386/libgcc-bsd.ver (GCC_4.8.0): New version.\n\t* config/i386/libgcc-sol2.ver (GCC_4.8.0): New version.\n\n\t* config/i386/i386-cpuinfo.c: Rename to ...\n\t* config/i386/cpuinfo.c: ... this.\n\t* config/i386/t-cpuinfo (LIB2ADD): Reflect this.\n\n\t* configure.ac (AC_CONFIG_HEADER): Call for auto-target.h.\n\t(libgcc_cv_init_priority): New test.\n\t* configure: Regenerate.\n\t* config.in: New file.\n\t* Makefile.in (clean): Rename config.h to auto-target.h.\n\t(config.h): Likewise.\n\t(stamp-h): Likewise.\n\n\t* config/i386/cpuinfo.c (auto-target.h): Include.\n\t(CONSTRUCTOR_PRIORITY): Define.\n\t(__cpu_indicator_init): Use it.\n\n\tgcc\n\t* doc/extend.texi (X86 Built-in Functions, __builtin_cpu_init):\n\tDocument requirement to call in constructors.\n\n\t* config/i386/i386.c: Update comments for i386-cpuinfo.c name\n\tchange.\n\nFrom-SVN: r187365", "tree": {"sha": "7538481d3fc7b9aee5791e44a2b759eea9dacb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7538481d3fc7b9aee5791e44a2b759eea9dacb14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "638d20652bd82d36495fc024a5a618dfd349969e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638d20652bd82d36495fc024a5a618dfd349969e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638d20652bd82d36495fc024a5a618dfd349969e"}], "stats": {"total": 402, "additions": 345, "deletions": 57}, "files": [{"sha": "7a8814afe10296d1c2830eed78f509c99acfe4ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1,3 +1,11 @@\n+2012-05-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* doc/extend.texi (X86 Built-in Functions, __builtin_cpu_init):\n+\tDocument requirement to call in constructors.\n+\n+\t* config/i386/i386.c: Update comments for i386-cpuinfo.c name\n+\tchange.\n+\n 2012-05-10  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (TYPE_IS_SIZETYPE): Remove."}, {"sha": "8c97054395da4ed0a808eb6254197e2216ce0580", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -27665,7 +27665,7 @@ ix86_init_mmx_sse_builtins (void)\n }\n \n /* This builds the processor_model struct type defined in\n-   libgcc/config/i386/i386-cpuinfo.c  */\n+   libgcc/config/i386/cpuinfo.c  */\n \n static tree\n build_processor_model_struct (void)\n@@ -27725,7 +27725,7 @@ make_var_decl (tree type, const char *name)\n }\n \n /* FNDECL is a __builtin_cpu_is or a __builtin_cpu_supports call that is folded\n-   into an integer defined in libgcc/config/i386/i386-cpuinfo.c */\n+   into an integer defined in libgcc/config/i386/cpuinfo.c */\n \n static tree\n fold_builtin_cpu (tree fndecl, tree *args)\n@@ -27735,8 +27735,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n \t\t\t\tDECL_FUNCTION_CODE (fndecl);\n   tree param_string_cst = NULL;\n \n-  /* This is the order of bit-fields in __processor_features in\n-     i386-cpuinfo.c */\n+  /* This is the order of bit-fields in __processor_features in cpuinfo.c */\n   enum processor_features\n   {\n     F_CMOV = 0,\n@@ -27754,7 +27753,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n   };\n \n   /* These are the values for vendor types and cpu types  and subtypes\n-     in i386-cpuinfo.c.  Cpu types and subtypes should be subtracted by\n+     in cpuinfo.c.  Cpu types and subtypes should be subtracted by\n      the corresponding start value.  */\n   enum processor_model\n   {"}, {"sha": "6aaf453564747834222edb99bb1d3774bf0f8fae", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -9449,8 +9449,9 @@ executed before any constructors are called.  The CPU detection code is\n automatically executed in a very high priority constructor.\n \n For example, this function has to be used in @code{ifunc} resolvers which\n-check for CPU type using the builtins, @code{__builtin_cpu_is}\n-and @code{__builtin_cpu_supports}.\n+check for CPU type using the builtins @code{__builtin_cpu_is}\n+and @code{__builtin_cpu_supports}, or in constructors on targets which\n+don't support constructor priority.\n @smallexample\n \n static void (*resolve_memcpy (void)) (void)"}, {"sha": "05478d68560ac5b0362c662f77da49ac35efeadb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1,3 +1,30 @@\n+2012-05-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config.host (i[34567]86-*-linux*, x86_64-*-linux*)\n+\t(i[34567]86-*-kfreebsd*-gnu, x86_64-*-kfreebsd*-gnu)\n+\t(i[34567]86-*-knetbsd*-gnu, i[34567]86-*-gnu*): Move\n+\ti386/t-cpuinfo ...\n+\t(i[34567]86-*-*, x86_64-*-*): ... here.\n+\n+\t* config/i386/libgcc-bsd.ver (GCC_4.8.0): New version.\n+\t* config/i386/libgcc-sol2.ver (GCC_4.8.0): New version.\n+\n+\t* config/i386/i386-cpuinfo.c: Rename to ...\n+\t* config/i386/cpuinfo.c: ... this.\n+\t* config/i386/t-cpuinfo (LIB2ADD): Reflect this.\n+\n+\t* configure.ac (AC_CONFIG_HEADER): Call for auto-target.h.\n+\t(libgcc_cv_init_priority): New test.\n+\t* configure: Regenerate.\n+\t* config.in: New file.\n+\t* Makefile.in (clean): Rename config.h to auto-target.h.\n+\t(config.h): Likewise.\n+\t(stamp-h): Likewise.\n+\n+\t* config/i386/cpuinfo.c (auto-target.h): Include.\n+\t(CONSTRUCTOR_PRIORITY): Define.\n+\t(__cpu_indicator_init): Use it.\n+\n 2012-05-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* longlong.h: Use a URL instead of an FSF postal address."}, {"sha": "f529fa2219558372d53b78d3d29584e016496a96", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -121,7 +121,7 @@ installcheck:\n .PHONY: all clean\n \n clean:\n-\t-rm -f config.h libgcc_tm.h stamp-h stmp-ldirs libgcc.map\n+\t-rm -f auto-target.h libgcc_tm.h stamp-h stmp-ldirs libgcc.map\n \t-rm -f *$(objext)\n \t-rm -f *.dep\n \t-rm -f *.a\n@@ -139,9 +139,9 @@ Makefile: $(srcdir)/Makefile.in config.status\n \n # Depending on Makefile makes sure that config.status has been re-run\n # if needed.  This prevents problems with parallel builds.\n-config.h: stamp-h ; @true\n+auto-target.h: stamp-h ; @true\n stamp-h: $(srcdir)/config.in config.status Makefile\n-\tCONFIG_FILES= CONFIG_HEADERS=config.h:$(srcdir)/config.in $(SHELL) ./config.status\n+\tCONFIG_FILES= CONFIG_HEADERS=auto-target.h:$(srcdir)/config.in $(SHELL) ./config.status\n \n config.status: $(srcdir)/configure $(srcdir)/config.host\n \t$(SHELL) ./config.status --recheck"}, {"sha": "14c705b967b3fcb37ce7af37eaedda113815d0a1", "filename": "libgcc/config.host", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1123,12 +1123,18 @@ mep*-*-*)\n \t;;\n esac\n \n+case ${host} in\n+i[34567]86-*-* | x86_64-*-*)\n+\ttmake_file=\"${tmake_file} i386/t-cpuinfo\"\n+\t;;\n+esac\n+\n case ${host} in\n i[34567]86-*-linux* | x86_64-*-linux* | \\\n   i[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu | \\\n   i[34567]86-*-knetbsd*-gnu | \\\n   i[34567]86-*-gnu*)\n-\ttmake_file=\"${tmake_file} t-tls i386/t-linux i386/t-cpuinfo\"\n+\ttmake_file=\"${tmake_file} t-tls i386/t-linux\"\n \tif test \"$libgcc_cv_cfi\" = \"yes\"; then\n \t\ttmake_file=\"${tmake_file} t-stack i386/t-stack-i386\"\n \tfi"}, {"sha": "4baab989197530c51fdd00a1d51fd4881d040531", "filename": "libgcc/config.in", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -0,0 +1,70 @@\n+/* config.in.  Generated from configure.ac by autoheader.  */\n+\n+/* Define to 1 if the target assembler supports thread-local storage. */\n+#undef HAVE_CC_TLS\n+\n+/* Define if _Unwind_GetIPInfo is available. */\n+#undef HAVE_GETIPINFO\n+\n+/* Define if the compiler supports init priority. */\n+#undef HAVE_INIT_PRIORITY\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#undef HAVE_INTTYPES_H\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#undef HAVE_MEMORY_H\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#undef HAVE_STDINT_H\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#undef HAVE_STDLIB_H\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#undef HAVE_STRINGS_H\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#undef HAVE_STRING_H\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#undef HAVE_SYS_STAT_H\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#undef HAVE_SYS_TYPES_H\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+#undef HAVE_UNISTD_H\n+\n+/* Define if the C compiler is configured for setjmp/longjmp exceptions. */\n+#undef LIBGCC_SJLJ_EXCEPTIONS\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#undef PACKAGE_BUGREPORT\n+\n+/* Define to the full name of this package. */\n+#undef PACKAGE_NAME\n+\n+/* Define to the full name and version of this package. */\n+#undef PACKAGE_STRING\n+\n+/* Define to the one symbol short name of this package. */\n+#undef PACKAGE_TARNAME\n+\n+/* Define to the home page for this package. */\n+#undef PACKAGE_URL\n+\n+/* Define to the version of this package. */\n+#undef PACKAGE_VERSION\n+\n+/* The size of `double', as computed by sizeof. */\n+#undef SIZEOF_DOUBLE\n+\n+/* The size of `long double', as computed by sizeof. */\n+#undef SIZEOF_LONG_DOUBLE\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#undef STDC_HEADERS\n+\n+/* Define to 1 if the target use emutls for thread-local storage. */\n+#undef USE_EMUTLS"}, {"sha": "1c22d7a4070e54e3d95f0a1f47615ba9f0f7d7db", "filename": "libgcc/config/i386/cpuinfo.c", "status": "renamed", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -20,8 +20,16 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"cpuid.h\"\n #include \"tsystem.h\"\n+#include \"auto-target.h\"\n \n-int __cpu_indicator_init (void) __attribute__ ((constructor (101)));\n+#ifdef HAVE_INIT_PRIORITY\n+#define CONSTRUCTOR_PRIORITY (101)\n+#else\n+#define CONSTRUCTOR_PRIORITY\n+#endif\n+\n+int __cpu_indicator_init (void)\n+  __attribute__ ((constructor CONSTRUCTOR_PRIORITY));\n \n enum vendor_signatures\n {\n@@ -253,7 +261,7 @@ __get_cpuid_output (unsigned int __level,\n    the priority set.  However, it still runs after ifunc initializers and\n    needs to be called explicitly there.  */\n \n-int __attribute__ ((constructor (101)))\n+int __attribute__ ((constructor CONSTRUCTOR_PRIORITY))\n __cpu_indicator_init (void)\n {\n   unsigned int eax, ebx, ecx, edx;", "previous_filename": "libgcc/config/i386/i386-cpuinfo.c"}, {"sha": "74622bf7763e26abad274f18869864e151fdf8b4", "filename": "libgcc/config/i386/libgcc-bsd.ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-bsd.ver?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -106,3 +106,7 @@ GCC_4.6.0 {\n   __trunctfxf2\n   __unordtf2\n }\n+\n+GCC_4.8.0 {\n+  __cpu_model\n+}"}, {"sha": "07fd1f9c5a73ea56984c3ebfe3e512d12ada11f9", "filename": "libgcc/config/i386/libgcc-glibc.ver", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-glibc.ver?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2008, 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2008, 2010, 2012 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #"}, {"sha": "af8a9a0bddbddf1ac68e78ba3553a7f2720b04cd", "filename": "libgcc/config/i386/libgcc-sol2.ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Flibgcc-sol2.ver?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2010 Free Software Foundation, Inc.\n+# Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -106,3 +106,7 @@ GCC_4.5.0 {\n   __trunctfxf2\n   __unordtf2\n }\n+\n+GCC_4.8.0 {\n+  __cpu_model\n+}"}, {"sha": "31c8db991c5afcb3c2f3552a2705a37b14823d80", "filename": "libgcc/config/i386/t-cpuinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Ft-cpuinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfig%2Fi386%2Ft-cpuinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Ft-cpuinfo?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -1 +1 @@\n-LIB2ADD += $(srcdir)/config/i386/i386-cpuinfo.c\n+LIB2ADD += $(srcdir)/config/i386/cpuinfo.c"}, {"sha": "9ce74e48d4ee040f42b21330b757fe4659dc18ad", "filename": "libgcc/configure", "status": "modified", "additions": 191, "deletions": 40, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -2176,6 +2176,8 @@ ac_config_sub=\"$SHELL $ac_aux_dir/config.sub\"  # Please don't use this var.\n ac_configure=\"$SHELL $ac_aux_dir/configure\"  # Please don't use this var.\n \n \n+ac_config_headers=\"$ac_config_headers auto-target.h:config.in\"\n+\n \n # Check whether --enable-shared was given.\n if test \"${enable_shared+set}\" = set; then :\n@@ -4756,6 +4758,38 @@ if test \"$enable_tls $gcc_cv_use_emutls\" = \"yes yes\"; then\n fi\n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for init priority support\" >&5\n+$as_echo_n \"checking for init priority support... \" >&6; }\n+if test \"${libgcc_cv_init_priority+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+void ip (void) __attribute__ ((constructor (1)));\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgcc_cv_init_priority=yes\n+else\n+  libgcc_cv_init_priority=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_init_priority\" >&5\n+$as_echo \"$libgcc_cv_init_priority\" >&6; }\n+if test $libgcc_cv_init_priority = yes; then\n+\n+$as_echo \"#define HAVE_INIT_PRIORITY 1\" >>confdefs.h\n+\n+fi\n+\n # Conditionalize the sfp-machine.h header for this target machine.\n if test -z \"${sfp_machine_header}\"; then\n \tsfp_machine_header=$cpu_type/sfp-machine.h\n@@ -4902,43 +4936,7 @@ test \"x$prefix\" = xNONE && prefix=$ac_default_prefix\n # Let make expand exec_prefix.\n test \"x$exec_prefix\" = xNONE && exec_prefix='${prefix}'\n \n-# Transform confdefs.h into DEFS.\n-# Protect against shell expansion while executing Makefile rules.\n-# Protect against Makefile macro expansion.\n-#\n-# If the first sed substitution is executed (which looks for macros that\n-# take arguments), then branch to the quote section.  Otherwise,\n-# look for a macro that doesn't take arguments.\n-ac_script='\n-:mline\n-/\\\\$/{\n- N\n- s,\\\\\\n,,\n- b mline\n-}\n-t clear\n-:clear\n-s/^[\t ]*#[\t ]*define[\t ][\t ]*\\([^\t (][^\t (]*([^)]*)\\)[\t ]*\\(.*\\)/-D\\1=\\2/g\n-t quote\n-s/^[\t ]*#[\t ]*define[\t ][\t ]*\\([^\t ][^\t ]*\\)[\t ]*\\(.*\\)/-D\\1=\\2/g\n-t quote\n-b any\n-:quote\n-s/[\t `~#$^&*(){}\\\\|;'\\''\"<>?]/\\\\&/g\n-s/\\[/\\\\&/g\n-s/\\]/\\\\&/g\n-s/\\$/$$/g\n-H\n-:any\n-${\n-\tg\n-\ts/^\\n//\n-\ts/\\n/ /g\n-\tp\n-}\n-'\n-DEFS=`sed -n \"$ac_script\" confdefs.h`\n-\n+DEFS=-DHAVE_CONFIG_H\n \n ac_libobjs=\n ac_ltlibobjs=\n@@ -5382,11 +5380,15 @@ case $ac_config_files in *\"\n \"*) set x $ac_config_files; shift; ac_config_files=$*;;\n esac\n \n+case $ac_config_headers in *\"\n+\"*) set x $ac_config_headers; shift; ac_config_headers=$*;;\n+esac\n \n \n cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n # Files that config.status was made for.\n config_files=\"$ac_config_files\"\n+config_headers=\"$ac_config_headers\"\n config_links=\"$ac_config_links\"\n config_commands=\"$ac_config_commands\"\n \n@@ -5408,10 +5410,15 @@ Usage: $0 [OPTION]... [TAG]...\n       --recheck    update $as_me by reconfiguring in the same conditions\n       --file=FILE[:TEMPLATE]\n                    instantiate the configuration file FILE\n+      --header=FILE[:TEMPLATE]\n+                   instantiate the configuration header FILE\n \n Configuration files:\n $config_files\n \n+Configuration headers:\n+$config_headers\n+\n Configuration links:\n $config_links\n \n@@ -5473,7 +5480,18 @@ do\n     esac\n     as_fn_append CONFIG_FILES \" '$ac_optarg'\"\n     ac_need_defaults=false;;\n-  --he | --h |  --help | --hel | -h )\n+  --header | --heade | --head | --hea )\n+    $ac_shift\n+    case $ac_optarg in\n+    *\\'*) ac_optarg=`$as_echo \"$ac_optarg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n+    esac\n+    as_fn_append CONFIG_HEADERS \" '$ac_optarg'\"\n+    ac_need_defaults=false;;\n+  --he | --h)\n+    # Conflict between --help and --header\n+    as_fn_error \"ambiguous option: \\`$1'\n+Try \\`$0 --help' for more information.\";;\n+  --help | --hel | -h )\n     $as_echo \"$ac_cs_usage\"; exit ;;\n   -q | -quiet | --quiet | --quie | --qui | --qu | --q \\\n   | -silent | --silent | --silen | --sile | --sil | --si | --s)\n@@ -5542,6 +5560,7 @@ cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n for ac_config_target in $ac_config_targets\n do\n   case $ac_config_target in\n+    \"auto-target.h\") CONFIG_HEADERS=\"$CONFIG_HEADERS auto-target.h:config.in\" ;;\n     \"enable-execute-stack.c\") CONFIG_LINKS=\"$CONFIG_LINKS enable-execute-stack.c:$enable_execute_stack\" ;;\n     \"unwind.h\") CONFIG_LINKS=\"$CONFIG_LINKS unwind.h:$unwind_header\" ;;\n     \"md-unwind-support.h\") CONFIG_LINKS=\"$CONFIG_LINKS md-unwind-support.h:config/$md_unwind_header\" ;;\n@@ -5561,6 +5580,7 @@ done\n # bizarre bug on SunOS 4.1.3.\n if $ac_need_defaults; then\n   test \"${CONFIG_FILES+set}\" = set || CONFIG_FILES=$config_files\n+  test \"${CONFIG_HEADERS+set}\" = set || CONFIG_HEADERS=$config_headers\n   test \"${CONFIG_LINKS+set}\" = set || CONFIG_LINKS=$config_links\n   test \"${CONFIG_COMMANDS+set}\" = set || CONFIG_COMMANDS=$config_commands\n fi\n@@ -5740,8 +5760,116 @@ fi\n cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n fi # test -n \"$CONFIG_FILES\"\n \n+# Set up the scripts for CONFIG_HEADERS section.\n+# No need to generate them if there are no CONFIG_HEADERS.\n+# This happens for instance with `./config.status Makefile'.\n+if test -n \"$CONFIG_HEADERS\"; then\n+cat >\"$tmp/defines.awk\" <<\\_ACAWK ||\n+BEGIN {\n+_ACEOF\n+\n+# Transform confdefs.h into an awk script `defines.awk', embedded as\n+# here-document in config.status, that substitutes the proper values into\n+# config.h.in to produce config.h.\n+\n+# Create a delimiter string that does not exist in confdefs.h, to ease\n+# handling of long lines.\n+ac_delim='%!_!# '\n+for ac_last_try in false false :; do\n+  ac_t=`sed -n \"/$ac_delim/p\" confdefs.h`\n+  if test -z \"$ac_t\"; then\n+    break\n+  elif $ac_last_try; then\n+    as_fn_error \"could not make $CONFIG_HEADERS\" \"$LINENO\" 5\n+  else\n+    ac_delim=\"$ac_delim!$ac_delim _$ac_delim!! \"\n+  fi\n+done\n \n-eval set X \"  :F $CONFIG_FILES    :L $CONFIG_LINKS  :C $CONFIG_COMMANDS\"\n+# For the awk script, D is an array of macro values keyed by name,\n+# likewise P contains macro parameters if any.  Preserve backslash\n+# newline sequences.\n+\n+ac_word_re=[_$as_cr_Letters][_$as_cr_alnum]*\n+sed -n '\n+s/.\\{148\\}/&'\"$ac_delim\"'/g\n+t rset\n+:rset\n+s/^[\t ]*#[\t ]*define[\t ][\t ]*/ /\n+t def\n+d\n+:def\n+s/\\\\$//\n+t bsnl\n+s/[\"\\\\]/\\\\&/g\n+s/^ \\('\"$ac_word_re\"'\\)\\(([^()]*)\\)[\t ]*\\(.*\\)/P[\"\\1\"]=\"\\2\"\\\n+D[\"\\1\"]=\" \\3\"/p\n+s/^ \\('\"$ac_word_re\"'\\)[\t ]*\\(.*\\)/D[\"\\1\"]=\" \\2\"/p\n+d\n+:bsnl\n+s/[\"\\\\]/\\\\&/g\n+s/^ \\('\"$ac_word_re\"'\\)\\(([^()]*)\\)[\t ]*\\(.*\\)/P[\"\\1\"]=\"\\2\"\\\n+D[\"\\1\"]=\" \\3\\\\\\\\\\\\n\"\\\\/p\n+t cont\n+s/^ \\('\"$ac_word_re\"'\\)[\t ]*\\(.*\\)/D[\"\\1\"]=\" \\2\\\\\\\\\\\\n\"\\\\/p\n+t cont\n+d\n+:cont\n+n\n+s/.\\{148\\}/&'\"$ac_delim\"'/g\n+t clear\n+:clear\n+s/\\\\$//\n+t bsnlc\n+s/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\"/p\n+d\n+:bsnlc\n+s/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\\\\\\\\\\\\n\"\\\\/p\n+b cont\n+' <confdefs.h | sed '\n+s/'\"$ac_delim\"'/\"\\\\\\\n+\"/g' >>$CONFIG_STATUS || ac_write_fail=1\n+\n+cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n+  for (key in D) D_is_set[key] = 1\n+  FS = \"\u0007\"\n+}\n+/^[\\t ]*#[\\t ]*(define|undef)[\\t ]+$ac_word_re([\\t (]|\\$)/ {\n+  line = \\$ 0\n+  split(line, arg, \" \")\n+  if (arg[1] == \"#\") {\n+    defundef = arg[2]\n+    mac1 = arg[3]\n+  } else {\n+    defundef = substr(arg[1], 2)\n+    mac1 = arg[2]\n+  }\n+  split(mac1, mac2, \"(\") #)\n+  macro = mac2[1]\n+  prefix = substr(line, 1, index(line, defundef) - 1)\n+  if (D_is_set[macro]) {\n+    # Preserve the white space surrounding the \"#\".\n+    print prefix \"define\", macro P[macro] D[macro]\n+    next\n+  } else {\n+    # Replace #undef with comments.  This is necessary, for example,\n+    # in the case of _POSIX_SOURCE, which is predefined and required\n+    # on some systems where configure will not decide to define it.\n+    if (defundef == \"undef\") {\n+      print \"/*\", prefix defundef, macro, \"*/\"\n+      next\n+    }\n+  }\n+}\n+{ print }\n+_ACAWK\n+_ACEOF\n+cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n+  as_fn_error \"could not setup config headers machinery\" \"$LINENO\" 5\n+fi # test -n \"$CONFIG_HEADERS\"\n+\n+\n+eval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS  :L $CONFIG_LINKS  :C $CONFIG_COMMANDS\"\n shift\n for ac_tag\n do\n@@ -5953,7 +6081,30 @@ which seems to be undefined.  Please make sure it is defined.\" >&2;}\n   esac \\\n   || as_fn_error \"could not create $ac_file\" \"$LINENO\" 5\n  ;;\n-\n+  :H)\n+  #\n+  # CONFIG_HEADER\n+  #\n+  if test x\"$ac_file\" != x-; then\n+    {\n+      $as_echo \"/* $configure_input  */\" \\\n+      && eval '$AWK -f \"$tmp/defines.awk\"' \"$ac_file_inputs\"\n+    } >\"$tmp/config.h\" \\\n+      || as_fn_error \"could not create $ac_file\" \"$LINENO\" 5\n+    if diff \"$ac_file\" \"$tmp/config.h\" >/dev/null 2>&1; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: $ac_file is unchanged\" >&5\n+$as_echo \"$as_me: $ac_file is unchanged\" >&6;}\n+    else\n+      rm -f \"$ac_file\"\n+      mv \"$tmp/config.h\" \"$ac_file\" \\\n+\t|| as_fn_error \"could not create $ac_file\" \"$LINENO\" 5\n+    fi\n+  else\n+    $as_echo \"/* $configure_input  */\" \\\n+      && eval '$AWK -f \"$tmp/defines.awk\"' \"$ac_file_inputs\" \\\n+      || as_fn_error \"could not create -\" \"$LINENO\" 5\n+  fi\n+ ;;\n   :L)\n   #\n   # CONFIG_LINK"}, {"sha": "2a93b9e614258bc024a4b69d05f980a5164567a9", "filename": "libgcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca06c900e84dcbd57eaee3e94011a1710ef1e4e/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=aca06c900e84dcbd57eaee3e94011a1710ef1e4e", "patch": "@@ -39,6 +39,7 @@ else\n fi\n AC_SUBST(libgcc_topdir)\n AC_CONFIG_AUX_DIR($libgcc_topdir)\n+AC_CONFIG_HEADER(auto-target.h:config.in)\n \n AC_ARG_ENABLE(shared,\n [  --disable-shared        don't provide a shared libgcc],\n@@ -327,6 +328,15 @@ if test \"$enable_tls $gcc_cv_use_emutls\" = \"yes yes\"; then\n fi\n AC_SUBST(set_use_emutls)\n \n+AC_CACHE_CHECK(for init priority support, libgcc_cv_init_priority, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,\n+  [[void ip (void) __attribute__ ((constructor (1)));]])],\n+  [libgcc_cv_init_priority=yes],[libgcc_cv_init_priority=no])])\n+if test $libgcc_cv_init_priority = yes; then\n+  AC_DEFINE(HAVE_INIT_PRIORITY, 1,\n+  [Define if the compiler supports init priority.])\n+fi\n+\n # Conditionalize the sfp-machine.h header for this target machine.\n if test -z \"${sfp_machine_header}\"; then\n \tsfp_machine_header=$cpu_type/sfp-machine.h"}]}