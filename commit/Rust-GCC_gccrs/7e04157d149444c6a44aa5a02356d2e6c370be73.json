{"sha": "7e04157d149444c6a44aa5a02356d2e6c370be73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UwNDE1N2QxNDk0NDRjNmE0NGFhNWEwMjM1NmQyZTZjMzcwYmU3Mw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@sunset.davemloft.net", "date": "2005-11-30T02:03:37Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2005-11-30T02:03:37Z"}, "message": "sparc.c (gen_compare_reg): Kill 2nd and 3rd argument, they are always sparc_compare_op0 and sparc_compare_op1.\n\n\t* config/sparc/sparc.c (gen_compare_reg): Kill 2nd and 3rd\n\targument, they are always sparc_compare_op0 and sparc_compare_op1.\n\t(gen_v9_scc): Update callers.\n\t* config/sparc/sparc.md: Likewise.\n\t* config/sparc/sparc-protos.h: Update extern declaration.\n\nFrom-SVN: r107696", "tree": {"sha": "e6577e30eff883a0f2fe191ad502ff767a813b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6577e30eff883a0f2fe191ad502ff767a813b4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e04157d149444c6a44aa5a02356d2e6c370be73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e04157d149444c6a44aa5a02356d2e6c370be73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e04157d149444c6a44aa5a02356d2e6c370be73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e04157d149444c6a44aa5a02356d2e6c370be73/comments", "author": null, "committer": null, "parents": [{"sha": "da817a2fea5be30ae51d16c4817196aa748eb951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da817a2fea5be30ae51d16c4817196aa748eb951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da817a2fea5be30ae51d16c4817196aa748eb951"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "89674d99baa6d60fab4a57b74bfce934091e670b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e04157d149444c6a44aa5a02356d2e6c370be73", "patch": "@@ -1,3 +1,11 @@\n+2005-11-29  David S. Miller  <davem@sunset.davemloft.net>\n+\n+\t* config/sparc/sparc.c (gen_compare_reg): Kill 2nd and 3rd\n+\targument, they are always sparc_compare_op0 and sparc_compare_op1.\n+\t(gen_v9_scc): Update callers.\n+\t* config/sparc/sparc.md: Likewise.\n+\t* config/sparc/sparc-protos.h: Update extern declaration.\n+\n 2005-11-29  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* fold-const.c (negate_expr) <case BIT_NOT_EXPR>: Add break after"}, {"sha": "08d6171a5688b52d83eed4ca750390791bb3c281", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=7e04157d149444c6a44aa5a02356d2e6c370be73", "patch": "@@ -55,7 +55,7 @@ extern void sparc_output_scratch_registers (FILE *);\n #ifdef RTX_CODE\n extern enum machine_mode select_cc_mode (enum rtx_code, rtx, rtx);\n /* Define the function that build the compare insn for scc and bcc.  */\n-extern rtx gen_compare_reg (enum rtx_code code, rtx, rtx);\n+extern rtx gen_compare_reg (enum rtx_code code);\n extern void sparc_emit_float_lib_cmp (rtx, rtx, enum rtx_code);\n extern void sparc_emit_floatunsdi (rtx [2], enum machine_mode);\n extern void sparc_emit_fixunsdi (rtx [2], enum machine_mode);"}, {"sha": "7047af36179b58b49c0a6cf4b1135294336e0ab6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7e04157d149444c6a44aa5a02356d2e6c370be73", "patch": "@@ -1900,8 +1900,10 @@ select_cc_mode (enum rtx_code op, rtx x, rtx y ATTRIBUTE_UNUSED)\n    return the rtx for the cc reg in the proper mode.  */\n \n rtx\n-gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n+gen_compare_reg (enum rtx_code code)\n {\n+  rtx x = sparc_compare_op0;\n+  rtx y = sparc_compare_op1;\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg;\n \n@@ -1990,22 +1992,20 @@ gen_compare_reg (enum rtx_code code, rtx x, rtx y)\n int\n gen_v9_scc (enum rtx_code compare_code, register rtx *operands)\n {\n-  rtx temp, op0, op1;\n-\n   if (! TARGET_ARCH64\n       && (GET_MODE (sparc_compare_op0) == DImode\n \t  || GET_MODE (operands[0]) == DImode))\n     return 0;\n \n-  op0 = sparc_compare_op0;\n-  op1 = sparc_compare_op1;\n-\n   /* Try to use the movrCC insns.  */\n   if (TARGET_ARCH64\n-      && GET_MODE_CLASS (GET_MODE (op0)) == MODE_INT\n-      && op1 == const0_rtx\n+      && GET_MODE_CLASS (GET_MODE (sparc_compare_op0)) == MODE_INT\n+      && sparc_compare_op1 == const0_rtx\n       && v9_regcmp_p (compare_code))\n     {\n+      rtx op0 = sparc_compare_op0;\n+      rtx temp;\n+\n       /* Special case for op0 != 0.  This can be done with one instruction if\n \t operands[0] == sparc_compare_op0.  */\n \n@@ -2048,7 +2048,7 @@ gen_v9_scc (enum rtx_code compare_code, register rtx *operands)\n     }\n   else\n     {\n-      operands[1] = gen_compare_reg (compare_code, op0, op1);\n+      operands[1] = gen_compare_reg (compare_code);\n \n       switch (GET_MODE (operands[1]))\n \t{"}, {"sha": "2047cfa2ddbac368c3d1f3f98791013e741e79b9", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e04157d149444c6a44aa5a02356d2e6c370be73/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7e04157d149444c6a44aa5a02356d2e6c370be73", "patch": "@@ -803,7 +803,7 @@\n       if (gen_v9_scc (LTU, operands))\n \tDONE;\n     }\n-  operands[1] = gen_compare_reg (LTU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LTU);\n })\n \n (define_expand \"sgeu\"\n@@ -816,7 +816,7 @@\n       if (gen_v9_scc (GEU, operands))\n \tDONE;\n     }\n-  operands[1] = gen_compare_reg (GEU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (GEU);\n })\n \n (define_expand \"sleu\"\n@@ -1267,7 +1267,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (EQ, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (EQ);\n })\n \n (define_expand \"bne\"\n@@ -1290,7 +1290,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (NE, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (NE);\n })\n \n (define_expand \"bgt\"\n@@ -1313,7 +1313,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (GT, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (GT);\n })\n \n (define_expand \"bgtu\"\n@@ -1323,7 +1323,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  operands[1] = gen_compare_reg (GTU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (GTU);\n })\n \n (define_expand \"blt\"\n@@ -1346,7 +1346,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (LT, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LT);\n })\n \n (define_expand \"bltu\"\n@@ -1356,7 +1356,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  operands[1] = gen_compare_reg (LTU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LTU);\n })\n \n (define_expand \"bge\"\n@@ -1379,7 +1379,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (GE, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (GE);\n })\n \n (define_expand \"bgeu\"\n@@ -1389,7 +1389,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  operands[1] = gen_compare_reg (GEU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (GEU);\n })\n \n (define_expand \"ble\"\n@@ -1412,7 +1412,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (LE, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LE);\n })\n \n (define_expand \"bleu\"\n@@ -1422,7 +1422,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  operands[1] = gen_compare_reg (LEU, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LEU);\n })\n \n (define_expand \"bunordered\"\n@@ -1439,8 +1439,7 @@\n       emit_jump_insn (gen_beq (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNORDERED, sparc_compare_op0,\n-\t\t\t\t sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNORDERED);\n })\n \n (define_expand \"bordered\"\n@@ -1456,8 +1455,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (ORDERED, sparc_compare_op0,\n-\t\t\t\t sparc_compare_op1);\n+  operands[1] = gen_compare_reg (ORDERED);\n })\n \n (define_expand \"bungt\"\n@@ -1473,7 +1471,7 @@\n       emit_jump_insn (gen_bgt (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNGT, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNGT);\n })\n \n (define_expand \"bunlt\"\n@@ -1489,7 +1487,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNLT, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNLT);\n })\n \n (define_expand \"buneq\"\n@@ -1505,7 +1503,7 @@\n       emit_jump_insn (gen_beq (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNEQ, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNEQ);\n })\n \n (define_expand \"bunge\"\n@@ -1521,7 +1519,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNGE, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNGE);\n })\n \n (define_expand \"bunle\"\n@@ -1537,7 +1535,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (UNLE, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (UNLE);\n })\n \n (define_expand \"bltgt\"\n@@ -1553,7 +1551,7 @@\n       emit_jump_insn (gen_bne (operands[0]));\n       DONE;\n     }\n-  operands[1] = gen_compare_reg (LTGT, sparc_compare_op0, sparc_compare_op1);\n+  operands[1] = gen_compare_reg (LTGT);\n })\n \f\n ;; Now match both normal and inverted jump.\n@@ -3025,8 +3023,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n })\n@@ -3054,8 +3051,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n })\n@@ -3079,8 +3075,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg),\n \t\t\t\t    cc_reg, const0_rtx);\n     }\n@@ -3105,8 +3100,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg),\n \t\t\t\t    cc_reg, const0_rtx);\n     }\n@@ -3135,8 +3129,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n })\n@@ -3164,8 +3157,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n })\n@@ -3193,8 +3185,7 @@\n     }\n   else\n     {\n-      rtx cc_reg = gen_compare_reg (code,\n-\t\t\t\t    sparc_compare_op0, sparc_compare_op1);\n+      rtx cc_reg = gen_compare_reg (code);\n       operands[1] = gen_rtx_fmt_ee (code, GET_MODE (cc_reg), cc_reg, const0_rtx);\n     }\n })\n@@ -7567,8 +7558,7 @@\n   [(trap_if (match_operator 0 \"noov_compare_operator\" [(match_dup 2) (match_dup 3)])\n \t    (match_operand:SI 1 \"arith_operand\" \"\"))]\n   \"\"\n-  \"operands[2] = gen_compare_reg (GET_CODE (operands[0]),\n-\t\t\t\t  sparc_compare_op0, sparc_compare_op1);\n+  \"operands[2] = gen_compare_reg (GET_CODE (operands[0]));\n    if (GET_MODE (operands[2]) != CCmode && GET_MODE (operands[2]) != CCXmode)\n      FAIL;\n    operands[3] = const0_rtx;\")"}]}