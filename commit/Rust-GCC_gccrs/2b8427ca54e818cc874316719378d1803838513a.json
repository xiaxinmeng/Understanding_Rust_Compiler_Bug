{"sha": "2b8427ca54e818cc874316719378d1803838513a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4NDI3Y2E1NGU4MThjYzg3NDMxNjcxOTM3OGQxODAzODM4NTEzYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-02-01T11:12:47Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-02-01T11:12:47Z"}, "message": "re PR target/64851 ([SH] Add atomic not)\n\ngcc/\n\tPR target/64851\n\t* config/sh/sync.md (atomic_fetch_notsi_hard,\n\tatomic_fetch_not<mode>_hard, atomic_fetch_not<mode>_soft_gusa,\n\tatomic_fetch_not<mode>_soft_tcb, atomic_fetch_not<mode>_soft_imask,\n\tatomic_not_fetchsi_hard, atomic_not_fetch<mode>_hard,\n\tatomic_not_fetch<mode>_soft_gusa, atomic_not_fetch<mode>_soft_tcb,\n\tatomic_not_fetch<mode>_soft_imask): New insns.\n\ngcc/testsuite/\n\tPR target/64851\n\t* gcc.target/sh/pr64851-0.h: New\n\t* gcc.target/sh/pr64851-1.c: New\n\t* gcc.target/sh/pr64851-2.c: New\n\t* gcc.target/sh/pr64851-3.c: New\n\t* gcc.target/sh/pr64851-4.c: New\n\nFrom-SVN: r220317", "tree": {"sha": "1fdc75b6d21b2098d27e84e3900832cf7047c79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdc75b6d21b2098d27e84e3900832cf7047c79d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8427ca54e818cc874316719378d1803838513a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8427ca54e818cc874316719378d1803838513a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8427ca54e818cc874316719378d1803838513a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8427ca54e818cc874316719378d1803838513a/comments", "author": null, "committer": null, "parents": [{"sha": "63387a852ee72042b7d2fb3570b85c586ba8c8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63387a852ee72042b7d2fb3570b85c586ba8c8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63387a852ee72042b7d2fb3570b85c586ba8c8f9"}], "stats": {"total": 294, "additions": 292, "deletions": 2}, "files": [{"sha": "dca250c0ec7a939dbae1418956f0b1e2886f2023", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -1,3 +1,13 @@\n+2015-02-01  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/64851\n+\t* config/sh/sync.md (atomic_fetch_notsi_hard,\n+\tatomic_fetch_not<mode>_hard, atomic_fetch_not<mode>_soft_gusa,\n+\tatomic_fetch_not<mode>_soft_tcb, atomic_fetch_not<mode>_soft_imask,\n+\tatomic_not_fetchsi_hard, atomic_not_fetch<mode>_hard,\n+\tatomic_not_fetch<mode>_soft_gusa, atomic_not_fetch<mode>_soft_tcb,\n+\tatomic_not_fetch<mode>_soft_imask): New insns.\n+\n 2015-02-01  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n \t* haifa-sched.c (INSN_RFS_DEBUG_ORIG_ORDER): New access macro.\n@@ -32,7 +42,7 @@\n \n 2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n \n-        PR target/64882\n+\tPR target/64882\n \t* config/i386/predicates.md (address_no_seg_operand): Reject\n \tnon-CONST_INT_P operands in invalid mode.\n "}, {"sha": "089a6283a47dd68fb814ae62313c0db81921ce14", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -673,6 +673,25 @@\n }\n   [(set_attr \"length\" \"10\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_fetch_notsi_hard\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=&r\")\n+\t(mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+   (set (mem:SI (match_dup 1))\n+\t(unspec:SI [(not:SI (mem:SI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (set (reg:SI T_REG) (const_int 1))\n+   (clobber (reg:SI R0_REG))]\n+  \"TARGET_ATOMIC_HARD_LLCS\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+{\n+  return \"\\r0:\tmovli.l\t@%1,r0\"\t\t\"\\n\"\n+\t \"\tmov\tr0,%0\"\t\t\"\\n\"\n+\t \"\tnot\tr0,r0\"\t\t\"\\n\"\n+\t \"\tmovco.l\tr0,@%1\"\t\t\"\\n\"\n+\t \"\tbf\t0b\";\n+}\n+  [(set_attr \"length\" \"10\")])\n+\n (define_insn \"atomic_fetch_<fetchop_name><mode>_hard\"\n   [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=&r\")\n \t(mem:QIHI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n@@ -705,6 +724,34 @@\n }\n   [(set_attr \"length\" \"28\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_fetch_not<mode>_hard\"\n+  [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=&r\")\n+\t(mem:QIHI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI [(not:QIHI (mem:QIHI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (set (reg:SI T_REG) (const_int 1))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))]\n+  \"TARGET_ATOMIC_HARD_LLCS\"\n+{\n+  return \"\\r\tmov\t#-4,%2\"\t\t\t\"\\n\"\n+\t \"\tand\t%1,%2\"\t\t\t\"\\n\"\n+\t \"\txor\t%2,%1\"\t\t\t\"\\n\"\n+\t \"\tadd\tr15,%1\"\t\t\t\"\\n\"\n+\t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n+\t \"0:\tmovli.l\t@%2,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tnot\t%0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.<bw>\tr0,@%1\"\t\t\"\\n\"\n+\t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n+\t \"\tmovco.l\tr0,@%2\"\t\t\t\"\\n\"\n+\t \"\tbf\t0b\";\n+}\n+  [(set_attr \"length\" \"26\")])\n+\n (define_insn \"atomic_fetch_<fetchop_name><mode>_soft_gusa\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&u\")\n \t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"u\")))\n@@ -732,6 +779,28 @@\n }\n   [(set_attr \"length\" \"18\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_fetch_not<mode>_soft_gusa\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&u\")\n+\t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"u\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (clobber (match_scratch:QIHISI 2 \"=&u\"))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))]\n+  \"TARGET_ATOMIC_SOFT_GUSA\"\n+{\n+  return \"\\r\tmova\t1f,r0\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tnot\t%0,%2\"\t\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t%2,@%1\"\t\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n+  [(set_attr \"length\" \"16\")])\n+\n (define_insn \"atomic_fetch_<fetchop_name><mode>_soft_tcb\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n \t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n@@ -760,6 +829,30 @@\n }\n   [(set_attr \"length\" \"20\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_fetch_not<mode>_soft_tcb\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n+\t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (use (match_operand:SI 2 \"gbr_displacement\"))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))]\n+  \"TARGET_ATOMIC_SOFT_TCB\"\n+{\n+  return \"\\r\tmova\t1f,r0\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r1\"\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@(%O2,gbr)\"\t\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,r0\"\t\t\"\\n\"\n+\t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n+\t \"\tnot\tr0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.<bwl>\tr0,@%1\"\t\t\"\\n\"\n+\t \"1:\tmov\t#0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@(%O2,gbr)\";\n+}\n+  [(set_attr \"length\" \"20\")])\n+\n (define_insn \"atomic_fetch_<fetchop_name><mode>_soft_imask\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n \t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n@@ -786,6 +879,28 @@\n }\n   [(set_attr \"length\" \"18\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_fetch_not<mode>_soft_imask\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n+\t(mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (match_scratch:QIHISI 2 \"=&r\"))]\n+  \"TARGET_ATOMIC_SOFT_IMASK\"\n+{\n+  return \"\\r\tstc\tsr,r0\"\t\t\t\"\\n\"\n+\t \"\tmov\tr0,%2\"\t\t\t\"\\n\"\n+\t \"\tor\t#0xF0,r0\"\t\t\"\\n\"\n+\t \"\tldc\tr0,sr\"\t\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t@%1,r0\"\t\t\"\\n\"\n+\t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n+\t \"\tnot\tr0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.<bwl>\tr0,@%1\"\t\t\"\\n\"\n+\t \"\tldc\t%2,sr\";\n+}\n+  [(set_attr \"length\" \"18\")])\n+\n (define_expand \"atomic_fetch_nand<mode>\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\")\n \t(match_operand:QIHISI 1 \"memory_operand\"))\n@@ -1028,6 +1143,23 @@\n }\n   [(set_attr \"length\" \"8\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_not_fetchsi_hard\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=&z\")\n+\t(not:SI (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))\n+   (set (mem:SI (match_dup 1))\n+\t(unspec:SI [(not:SI (mem:SI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (set (reg:SI T_REG) (const_int 1))]\n+  \"TARGET_ATOMIC_HARD_LLCS\n+   || (TARGET_SH4A && TARGET_ATOMIC_ANY && !TARGET_ATOMIC_STRICT)\"\n+{\n+  return \"\\r0:\tmovli.l\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tnot\t%0,%0\"\t\t\"\\n\"\n+\t \"\tmovco.l\t%0,@%1\"\t\t\"\\n\"\n+\t \"\tbf\t0b\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n (define_insn \"atomic_<fetchop_name>_fetch<mode>_hard\"\n   [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=&r\")\n \t(FETCHOP:QIHI\n@@ -1061,6 +1193,35 @@\n }\n   [(set_attr \"length\" \"28\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_not_fetch<mode>_hard\"\n+  [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=&r\")\n+\t(not:QIHI (mem:QIHI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI [(not:QIHI (mem:QIHI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (set (reg:SI T_REG) (const_int 1))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (match_scratch:SI 3 \"=1\"))]\n+  \"TARGET_ATOMIC_HARD_LLCS\"\n+{\n+  return \"\\r\tmov\t#-4,%2\"\t\t\t\"\\n\"\n+\t \"\tand\t%1,%2\"\t\t\t\"\\n\"\n+\t \"\txor\t%2,%1\"\t\t\t\"\\n\"\n+\t \"\tadd\tr15,%1\"\t\t\t\"\\n\"\n+\t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n+\t \"0:\tmovli.l\t@%2,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,r0\"\t\t\"\\n\"\n+\t \"\tnot\tr0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.<bw>\tr0,@%1\"\t\t\"\\n\"\n+\t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n+\t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n+\t \"\tmovco.l\tr0,@%2\"\t\t\t\"\\n\"\n+\t \"\tbf\t0b\";\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n (define_insn \"atomic_<fetchop_name>_fetch<mode>_soft_gusa\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&u\")\n \t(FETCHOP:QIHISI\n@@ -1086,6 +1247,27 @@\n }\n   [(set_attr \"length\" \"16\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_not_fetch<mode>_soft_gusa\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&u\")\n+\t(not:QIHISI (mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"u\"))))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))]\n+  \"TARGET_ATOMIC_SOFT_GUSA\"\n+{\n+  return \"\\r\tmova\t1f,r0\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tnot\t%0,%0\"\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t%0,@%1\"\t\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n+  [(set_attr \"length\" \"16\")])\n+\n (define_insn \"atomic_<fetchop_name>_fetch<mode>_soft_tcb\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n \t(FETCHOP:QIHISI\n@@ -1114,6 +1296,30 @@\n }\n   [(set_attr \"length\" \"20\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_not_fetch<mode>_soft_tcb\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&r\")\n+\t(not:QIHISI (mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (clobber (reg:SI R0_REG))\n+   (clobber (reg:SI R1_REG))\n+   (use (match_operand:SI 2 \"gbr_displacement\"))]\n+  \"TARGET_ATOMIC_SOFT_TCB\"\n+{\n+  return \"\\r\tmova\t1f,r0\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r1\"\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@(%O2,gbr)\"\t\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,r0\"\t\t\"\\n\"\n+\t \"\tnot\tr0,r0\"\t\t\"\\n\"\n+\t \"\tmov.<bwl>\tr0,@%1\"\t\t\"\\n\"\n+\t \"1:\tmov\tr0,%0\"\t\t\t\"\\n\"\n+\t \"\tmov\t#0,r0\"\t\t\t\"\\n\"\n+\t \"\tmov.l\tr0,@(%O2,gbr)\";\n+}\n+  [(set_attr \"length\" \"20\")])\n+\n (define_insn \"atomic_<fetchop_name>_fetch<mode>_soft_imask\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&z\")\n \t(FETCHOP:QIHISI\n@@ -1138,6 +1344,26 @@\n }\n   [(set_attr \"length\" \"16\")])\n \n+;; Combine pattern for xor (val, -1) / nand (val, -1).\n+(define_insn \"atomic_not_fetch<mode>_soft_imask\"\n+  [(set (match_operand:QIHISI 0 \"arith_reg_dest\" \"=&z\")\n+\t(not:QIHISI (mem:QIHISI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI [(not:QIHISI (mem:QIHISI (match_dup 1)))] UNSPEC_ATOMIC))\n+   (clobber (match_scratch:SI 2 \"=&r\"))]\n+  \"TARGET_ATOMIC_SOFT_IMASK\"\n+{\n+  return \"\\r\tstc\tsr,%0\"\t\t\t\"\\n\"\n+\t \"\tmov\t%0,%2\"\t\t\t\"\\n\"\n+\t \"\tor\t#0xF0,%0\"\t\t\"\\n\"\n+\t \"\tldc\t%0,sr\"\t\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tnot\t%0,%0\"\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t%0,@%1\"\t\t\"\\n\"\n+\t \"\tldc\t%2,sr\";\n+}\n+  [(set_attr \"length\" \"16\")])\n+\n (define_expand \"atomic_nand_fetch<mode>\"\n   [(set (match_operand:QIHISI 0 \"arith_reg_dest\")\n \t(not:QIHISI (and:QIHISI"}, {"sha": "3d552515f35c78c4286ebf5c4691aa19857e3bc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -1,6 +1,15 @@\n+2015-02-01  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/64851\n+\t* gcc.target/sh/pr64851-0.h: New\n+\t* gcc.target/sh/pr64851-1.c: New\n+\t* gcc.target/sh/pr64851-2.c: New\n+\t* gcc.target/sh/pr64851-3.c: New\n+\t* gcc.target/sh/pr64851-4.c: New\n+\n 2015-01-31  Uros Bizjak  <ubizjak@gmail.com>\n \n-        PR target/64882\n+\tPR target/64882\n \t* gcc.dg/torture/pr64882.c: New test.\n \n 2015-01-31  David Edelsohn  <dje.gcc@gmail.com>"}, {"sha": "5d2d90140633b682c38b80f82adf330b0ec58898", "filename": "gcc/testsuite/gcc.target/sh/pr64851-0.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-0.h?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -0,0 +1,21 @@\n+/* Check that atomic not ops are generated.  */\n+\n+#define emitfuncs(name)\\\n+  void test_ ## name ## _0 (char* mem)\\\n+  {\\\n+    name (mem, -1, __ATOMIC_ACQ_REL);\\\n+  }\\\n+  void test_ ## name ## _1 (short* mem)\\\n+  {\\\n+    name (mem, -1, __ATOMIC_ACQ_REL);\\\n+  }\\\n+  void test_ ## name ##_2 (int* mem)\\\n+  {\\\n+    name (mem, -1, __ATOMIC_ACQ_REL);\\\n+  }\\\n+\n+emitfuncs (__atomic_xor_fetch)\n+emitfuncs (__atomic_fetch_xor)\n+\n+emitfuncs (__atomic_nand_fetch)\n+emitfuncs (__atomic_fetch_nand)"}, {"sha": "26e9b2a6f97999222f54b4b77b1864d0be54841c", "filename": "gcc/testsuite/gcc.target/sh/pr64851-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-1.c?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -0,0 +1,6 @@\n+/* Check that atomic not ops are generated.  */\n+/* { dg-do compile { target { atomic_model_soft_gusa_available } } }  */\n+/* { dg-options \"-O2 -matomic-model=soft-gusa,strict\" }  */\n+/* { dg-final { scan-assembler-times \"not\\t\" 12 } }  */\n+\n+#include \"pr64851-0.h\""}, {"sha": "44358a570176294bb7cc39e1390740bbf213a1eb", "filename": "gcc/testsuite/gcc.target/sh/pr64851-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-2.c?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -0,0 +1,6 @@\n+/* Check that atomic not ops are generated.  */\n+/* { dg-do compile { target { atomic_model_soft_tcb_available } } }  */\n+/* { dg-options \"-O2 -matomic-model=soft-tcb,gbr-offset=0,strict\" }  */\n+/* { dg-final { scan-assembler-times \"not\\t\" 12 } }  */\n+\n+#include \"pr64851-0.h\""}, {"sha": "a12fd339bfa1388e4c83e246cd7fc8dbf6843317", "filename": "gcc/testsuite/gcc.target/sh/pr64851-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-3.c?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -0,0 +1,6 @@\n+/* Check that atomic not ops are generated.  */\n+/* { dg-do compile { target { atomic_model_soft_imask_available } } }  */\n+/* { dg-options \"-O2 -matomic-model=soft-imask,strict -mno-usermode\" }  */\n+/* { dg-final { scan-assembler-times \"not\\t\" 12 } }  */\n+\n+#include \"pr64851-0.h\""}, {"sha": "4c802e2e795871ebc72e1c43ce92179a5227f475", "filename": "gcc/testsuite/gcc.target/sh/pr64851-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8427ca54e818cc874316719378d1803838513a/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64851-4.c?ref=2b8427ca54e818cc874316719378d1803838513a", "patch": "@@ -0,0 +1,6 @@\n+/* Check that atomic not ops are generated.  */\n+/* { dg-do compile { target { atomic_model_hard_llcs_available } } }  */\n+/* { dg-options \"-O2 -matomic-model=hard-llcs,strict\" }  */\n+/* { dg-final { scan-assembler-times \"not\\t\" 12 } }  */\n+\n+#include \"pr64851-0.h\""}]}