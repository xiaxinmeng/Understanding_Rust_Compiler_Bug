{"sha": "d83dd29a0a29c043684586553aed29e33b57d6b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzZGQyOWEwYTI5YzA0MzY4NDU4NjU1M2FlZDI5ZTMzYjU3ZDZiNQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-05-22T12:31:05Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-05-22T12:31:05Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1046", "tree": {"sha": "b0c034dceb9beb7c3d3fccd0629a5d920d7257e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c034dceb9beb7c3d3fccd0629a5d920d7257e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d83dd29a0a29c043684586553aed29e33b57d6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83dd29a0a29c043684586553aed29e33b57d6b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83dd29a0a29c043684586553aed29e33b57d6b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83dd29a0a29c043684586553aed29e33b57d6b5/comments", "author": null, "committer": null, "parents": [{"sha": "c2a47e48d5f7620e87aff3fc214da1b698ed1cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a47e48d5f7620e87aff3fc214da1b698ed1cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a47e48d5f7620e87aff3fc214da1b698ed1cdb"}], "stats": {"total": 563, "additions": 361, "deletions": 202}, "files": [{"sha": "05d60dc4ad6dfbb7c8c321bf94ef14808834a74b", "filename": "gcc/longlong.h", "status": "modified", "additions": 361, "deletions": 202, "changes": 563, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83dd29a0a29c043684586553aed29e33b57d6b5/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83dd29a0a29c043684586553aed29e33b57d6b5/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=d83dd29a0a29c043684586553aed29e33b57d6b5", "patch": "@@ -1,5 +1,5 @@\n /* longlong.h -- definitions for mixed size 32/64 bit arithmetic.\n-   Copyright (C) 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992 Free Software Foundation, Inc.\n \n    This definition file is free software; you can redistribute it\n    and/or modify it under the terms of the GNU General Public\n@@ -68,128 +68,206 @@\n \n    Please add support for more CPUs here, or improve the current support\n    for the CPUs below!\n-   (E.g. WE32100, HP-PA (xmpyu?), i960, IBM360, TRON.)  */\n+   (E.g. WE32100, i960, IBM360.)  */\n+\n+/* We sometimes need to clobber \"cc\" with gcc2, but that would not be\n+   understood by gcc1.  Use cpp to avoid major code duplication.  */\n+#if __GNUC__ < 2\n+#define __CLOBBER_CC\n+#define __AND_CLOBBER_CC\n+#else /* __GNUC__ >= 2 */\n+#define __CLOBBER_CC : \"cc\"\n+#define __AND_CLOBBER_CC , \"cc\"\n+#endif /* __GNUC__ < 2 */\n \n #if defined (__GNUC__) && !defined (NO_ASM)\n \n #if defined (__a29k__) || defined (___AM29K__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"add %1,%4,%5\n \taddc %0,%2,%3\"\t\t\t\t\t\t\t\\\n-\t : \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl)) \\\n-\t : \"%r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)), \\\n-\t   \"%r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t    \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"sub %1,%4,%5\n \tsubc %0,%2,%3\"\t\t\t\t\t\t\t\\\n-\t : \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl)) \\\n-\t : \"r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)), \\\n-\t   \"r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl)))\n #define umul_ppmm(xh, xl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned long int __m0 = (m0), __m1 = (m1);\t\t\t\t\\\n-    __asm__ (\"multiplu %0,%1,%2\" : \"=r\" ((unsigned long int)(xl))\t\\\n-\t     : \"r\" (__m0), \"r\" (__m1));\t\t\t\t\t\\\n-    __asm__ (\"multmu %0,%1,%2\" : \"=r\" ((unsigned long int)(xh))\t\t\\\n-\t     : \"r\" (__m0), \"r\" (__m1));\t\t\t\t\t\\\n+    __asm__ (\"multiplu %0,%1,%2\"\t\t\t\t\t\\\n+\t     : \"=r\" ((unsigned long int)(xl))\t\t\t\t\\\n+\t     : \"r\" (__m0),\t\t\t\t\t\t\\\n+\t       \"r\" (__m1));\t\t\t\t\t\t\\\n+    __asm__ (\"multmu %0,%1,%2\"\t\t\t\t\t\t\\\n+\t     : \"=r\" ((unsigned long int)(xh))\t\t\t\t\\\n+\t     : \"r\" (__m0),\t\t\t\t\t\t\\\n+\t       \"r\" (__m1));\t\t\t\t\t\t\\\n   } while (0)\n #define udiv_qrnnd(q, r, n1, n0, d) \\\n   __asm__ (\"dividu %0,%3,%4\"\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(q)), \"=q\" ((unsigned long int)(r))\t\\\n-\t: \"1\" ((unsigned long int)(n1)), \"r\" ((unsigned long int)(n0)),\t\\\n-\t  \"r\" ((unsigned long int)(d)))\n+\t   : \"=r\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=q\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"1\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(d)))\n #define count_leading_zeros(count, x) \\\n-    __asm__ (\"clz %0,%1\" : \"=r\" ((unsigned long int)(count))\t\t\\\n+    __asm__ (\"clz %0,%1\"\t\t\t\t\t\t\\\n+\t     : \"=r\" ((unsigned long int)(count))\t\t\t\\\n \t     : \"r\" ((unsigned long int)(x)))\n #endif /* __a29k__ */\n \n #if defined (__arm__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"adds %1,%4,%5\n \tadc %0,%2,%3\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl)) \\\n-\t: \"%r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)), \\\n-\t  \"%r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subs %1,%4,%5\n \tsbc %0,%2,%3\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl)) \\\n-\t: \"r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)), \\\n-\t  \"r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl)))\n #endif /* __arm__ */\n \n #if defined (__gmicro__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"add.w %5,%1\n \taddx %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=g\" ((unsigned long int)(sh)), \"=&g\" ((unsigned long int)(sl))\\\n-       : \"%0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t \"%1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=g\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&g\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"sub.w %5,%1\n \tsubx %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=g\" ((unsigned long int)(sh)), \"=&g\" ((unsigned long int)(sl))\\\n-       : \"0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t \"1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=g\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&g\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define umul_ppmm(ph, pl, m0, m1) \\\n   __asm__ (\"mulx %3,%0,%1\"\t\t\t\t\t\t\\\n-\t: \"=g\" ((unsigned long int)(ph)), \"=r\" ((unsigned long int)(pl))\\\n-\t: \"%0\" ((unsigned long int)(m0)), \"g\" ((unsigned long int)(m1)))\n+\t   : \"=g\" ((unsigned long int)(ph)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(pl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(m0)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(m1)))\n #define udiv_qrnnd(q, r, nh, nl, d) \\\n   __asm__ (\"divx %4,%0,%1\"\t\t\t\t\t\t\\\n-\t: \"=g\" ((unsigned long int)(q)), \"=r\" ((unsigned long int)(r))\t\\\n-\t: \"1\" ((unsigned long int)(nh)), \"0\" ((unsigned long int)(nl)),\t\\\n-\t  \"g\" ((unsigned long int)(d)))\n+\t   : \"=g\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"1\" ((unsigned long int)(nh)),\t\t\t\t\\\n+\t     \"0\" ((unsigned long int)(nl)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(d)))\n #define count_leading_zeros(count, x) \\\n   __asm__ (\"bsch/1 %1,%0\"\t\t\t\t\t\t\\\n-\t: \"=g\" (count)\t\t\t\t\t\t\t\\\n-\t: \"g\" ((unsigned long int)(x)), \"0\" (0UL))\n+\t   : \"=g\" (count)\t\t\t\t\t\t\\\n+\t   : \"g\" ((unsigned long int)(x)),\t\t\t\t\\\n+\t     \"0\" (0UL))\n #endif\n \n #if defined (__hppa)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"add %4,%5,%1\n \taddc %2,%3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%r\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\\\n-\t  \"%r\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%rM\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rM\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%rM\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rM\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"sub %5,%4,%1\n \tsubb %3,%2,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"r\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\t\\\n-\t  \"r\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"rM\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rM\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"rM\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rM\" ((unsigned long int)(bl)))\n+#if defined (_PA_RISC1_1)\n+#define umul_ppmm(w1, w0, u, v) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    union\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tlong long __f;\t\t\t\t\t\t\t\\\n+\tstruct {unsigned long int __w1, __w0;} __w1w0;\t\t\t\\\n+      } __t;\t\t\t\t\t\t\t\t\\\n+    __asm__ (\"xmpyu %1,%2,%0\"\t\t\t\t\t\t\\\n+\t     : \"=x\" (__t.__f)\t\t\t\t\t\t\\\n+\t     : \"x\" ((u)),\t\t\t\t\t\t\\\n+\t       \"x\" ((v)));\t\t\t\t\t\t\\\n+    (w1) = __t.__w1w0.__w1;\t\t\t\t\t\t\\\n+    (w0) = __t.__w1w0.__w0;\t\t\t\t\t\t\\\n+     } while (0)\n+#define UMUL_TIME 8\n+#else\n+#define UMUL_TIME 30\n+#endif\n+#define UDIV_TIME 40\n #endif\n \n #if defined (__i386__) || defined (__i486__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"addl %5,%1\n \tadcl %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-       : \"%0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t \"%1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subl %5,%1\n \tsbbl %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-       : \"0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t \"1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"mull %3\"\t\t\t\t\t\t\t\\\n-\t: \"=a\" ((unsigned long int)(w0)), \"=d\" ((unsigned long int)(w1))\\\n-\t: \"%0\" ((unsigned long int)(u)), \"rm\" ((unsigned long int)(v)))\n+\t   : \"=a\" ((unsigned long int)(w0)),\t\t\t\t\\\n+\t     \"=d\" ((unsigned long int)(w1))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"rm\" ((unsigned long int)(v)))\n #define udiv_qrnnd(q, r, n1, n0, d) \\\n   __asm__ (\"divl %4\"\t\t\t\t\t\t\t\\\n-\t: \"=a\" ((unsigned long int)(q)), \"=d\" ((unsigned long int)(r))\t\\\n-\t: \"0\" ((unsigned long int)(n0)), \"1\" ((unsigned long int)(n1)),\t\\\n-\t  \"rm\" ((unsigned long int)(d)))\n+\t   : \"=a\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=d\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"rm\" ((unsigned long int)(d)))\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned long int __cbtmp;\t\t\t\t\t\t\\\n     __asm__ (\"bsrl %1,%0\"\t\t\t\t\t\t\\\n \t     : \"=r\" (__cbtmp) : \"rm\" ((unsigned long int)(x)));\t\t\\\n     (count) = __cbtmp ^ 31;\t\t\t\t\t\t\\\n   } while (0)\n+#define UMUL_TIME 40\n+#define UDIV_TIME 40\n #endif /* 80x86 */\n \n #if defined (__i860__)\n@@ -229,109 +307,99 @@\n \n #if defined (___IBMR2__) /* IBM RS6000 */\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n-  __asm__ (\"a %1,%4,%5\n+  __asm__ (\"a%I5 %1,%4,%5\n \tae %0,%2,%3\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%r\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\\\n-\t  \"%r\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n-  __asm__ (\"sf %1,%5,%4\n+  __asm__ (\"sf%I4 %1,%5,%4\n \tsfe %0,%3,%2\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"r\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\t\\\n-\t  \"r\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bl)))\n #define umul_ppmm(xh, xl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned long int __m0 = (m0), __m1 = (m1);\t\t\t\t\\\n     __asm__ (\"mul %0,%2,%3\"\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(xh)), \"=q\" ((unsigned long int)(xl))\\\n-\t: \"r\" (__m0), \"r\" (__m1));\t\t\t\t\t\\\n+\t     : \"=r\" ((unsigned long int)(xh)),\t\t\t\t\\\n+\t       \"=q\" ((unsigned long int)(xl))\t\t\t\t\\\n+\t     : \"r\" (__m0),\t\t\t\t\t\t\\\n+\t       \"r\" (__m1));\t\t\t\t\t\t\\\n     (xh) += ((((signed long int) __m0 >> 31) & __m1)\t\t\t\\\n \t     + (((signed long int) __m1 >> 31) & __m0));\t\t\\\n   } while (0)\n+#define smul_ppmm(xh, xl, m0, m1) \\\n+  __asm__ (\"mul %0,%2,%3\"\t\t\t\t\t\t\\\n+\t   : \"=r\" ((unsigned long int)(xh)),\t\t\t\t\\\n+\t     \"=q\" ((unsigned long int)(xl))\t\t\t\t\\\n+\t   : \"r\" (m0),\t\t\t\t\t\t\t\\\n+\t     \"r\" (m1))\n #define UMUL_TIME 8\n-#if 0 /* Overflow for nh>=FFFFFFFE, d==FFFFFFFF.  Find a good fix later.  */\n-#define udiv_qrnnd(q, r, nh, nl, d) \\\n-  do { /* Use the signed \"div\" insn, and adjust the result. */\t\t\\\n-    unsigned long int __q, __r, __nh, __nl, __d, __xh, __xl;\t\t\\\n-    __nh = 0;\t\t\t\t\t\t\t\t\\\n-    __nl = (((unsigned long int)(nh)) << 30) | ((unsigned long int)(nl) >> 2);\\\n-    __nh = (unsigned long int)(nh) >> 2;\t\t\t\t\\\n-    __d = ((unsigned long int)(d) >> 1);\t\t\t\t\\\n-    __asm__ (\"div %0,%2,%4\"\t\t\t\t\t\t\\\n-\t     : \"=r\" (__q), \"=q\" (__r)\t\t\t\t\t\\\n-\t     : \"r\" (__nh), \"1\" (__nl), \"r\" (__d));\t\t\t\\\n-    __q <<= 1;\t\t\t\t\t\t\t\t\\\n-    __asm__ (\"mul %0,%2,%3\"\t\t\t\t\t\t\\\n-\t     : \"=r\" (__xh), \"=q\" (__xl)\t\t\t\t\t\\\n-\t     : \"r\" (__q), \"r\" ((unsigned long int)(d)));\t\t\\\n-    __xh += (((signed long int) __q >> 31) & (d)) + __q;\t\t\\\n-    if ((nh) < __xh || ((nh) == __xh && (nl) < __xl))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdo\t\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    sub_ddmmss (__xh, __xl, __xh, __xl, 0, (d));\t\t\\\n-\t    __q--;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\twhile ((nh) < __xh || ((nh) == __xh && (nl) < __xl));\t\t\\\n-\t__xl = (nl) - __xl;\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsub_ddmmss (__xh, __xl, (nh), (nl), __xh, __xl);\t\t\\\n-\tif (__xh != 0)\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    do\t\t\t\t\t\t\t\t\\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tsub_ddmmss (__xh, __xl, __xh, __xl, 0, (d));\t\t\\\n-\t\t__q++;\t\t\t\t\t\t\t\\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t    while (__xh != 0);\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tif (__xl >= (d))\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    __xl -= (d);\t\t\t\t\t\t\\\n-\t    __q++;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    (q) = __q;\t\t\t\t\t\t\t\t\\\n-    (r) = __xl;\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define sdiv_qrnnd(q, r, nh, nl, d) \\\n+  __asm__ (\"div %0,%2,%4\"\t\t\t\t\t\t\\\n+\t   : \"=r\" (q), \"=q\" (r)\t\t\t\t\t\t\\\n+\t   : \"r\" (nh), \"1\" (nl), \"r\" (d))\n #define UDIV_TIME 40\n #define UDIV_NEEDS_NORMALIZATION 1\n-#endif\n #define count_leading_zeros(count, x) \\\n   __asm__ (\"cntlz %0,%1\"\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(count)) : \"r\" ((unsigned long int)(x)))\n+\t   : \"=r\" ((unsigned long int)(count))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(x)))\n #endif /* ___IBMR2__ */\n \n #if defined (__mc68000__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"add%.l %5,%1\n \taddx%.l %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=d\" ((unsigned long int)(sh)), \"=&d\" ((unsigned long int)(sl))\\\n-       : \"%0\" ((unsigned long int)(ah)), \"d\" ((unsigned long int)(bh)),\t\\\n-\t \"%1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=d\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&d\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"d\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"sub%.l %5,%1\n \tsubx%.l %3,%0\"\t\t\t\t\t\t\t\\\n-       : \"=d\" ((unsigned long int)(sh)), \"=&d\" ((unsigned long int)(sl))\\\n-       : \"0\" ((unsigned long int)(ah)), \"d\" ((unsigned long int)(bh)),\t\\\n-\t \"1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=d\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&d\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"d\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #if defined (__mc68020__) || defined (__NeXT__) || defined(mc68020)\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"mulu%.l %3,%1:%0\"\t\t\t\t\t\t\\\n-\t: \"=d\" ((unsigned long int)(w0)), \"=d\" ((unsigned long int)(w1))\\\n-\t: \"%0\" ((unsigned long int)(u)), \"dmi\" ((unsigned long int)(v)))\n+\t   : \"=d\" ((unsigned long int)(w0)),\t\t\t\t\\\n+\t     \"=d\" ((unsigned long int)(w1))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"dmi\" ((unsigned long int)(v)))\n+#define UMUL_TIME 45\n #define udiv_qrnnd(q, r, n1, n0, d) \\\n   __asm__ (\"divu%.l %4,%1:%0\"\t\t\t\t\t\t\\\n-\t: \"=d\" ((unsigned long int)(q)), \"=d\" ((unsigned long int)(r))\t\\\n-\t: \"0\" ((unsigned long int)(n0)), \"1\" ((unsigned long int)(n1)),\t\\\n-\t  \"dmi\" ((unsigned long int)(d)))\n+\t   : \"=d\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=d\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"dmi\" ((unsigned long int)(d)))\n+#define UDIV_TIME 90\n+#define sdiv_qrnnd(q, r, n1, n0, d) \\\n+  __asm__ (\"divs%.l %4,%1:%0\"\t\t\t\t\t\t\\\n+\t   : \"=d\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=d\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"dmi\" ((unsigned long int)(d)))\n #define count_leading_zeros(count, x) \\\n   __asm__ (\"bfffo %1{%b2:%b2},%0\"\t\t\t\t\t\\\n-\t: \"=d\" ((unsigned long int)(count))\t\t\t\t\\\n-\t: \"od\" ((unsigned long int)(x)), \"n\" (0))\n+\t   : \"=d\" ((unsigned long int)(count))\t\t\t\t\\\n+\t   : \"od\" ((unsigned long int)(x)), \"n\" (0))\n #else /* not mc68020 */\n #define umul_ppmm(xh, xl, a, b) \\\n   __asm__ (\"| Inlined umul_ppmm\n@@ -360,101 +428,156 @@\n \tmovel\td2,%1\n \taddl\td1,d0\n \tmovel\td0,%0\"\t\t\t\t\t\t\t\\\n-       : \"=g\" ((unsigned long int)(xh)), \"=g\" ((unsigned long int)(xl))\t\\\n-       :\"g\" ((unsigned long int)(a)), \"g\" ((unsigned long int)(b))\t\\\n-       : \"d0\", \"d1\", \"d2\", \"d3\", \"d4\")\n+\t   : \"=g\" ((unsigned long int)(xh)),\t\t\t\t\\\n+\t     \"=g\" ((unsigned long int)(xl))\t\t\t\t\\\n+\t   : \"g\" ((unsigned long int)(a)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(b))\t\t\t\t\\\n+\t   : \"d0\", \"d1\", \"d2\", \"d3\", \"d4\")\n+#define UMUL_TIME 100\n+#define UDIV_TIME 400\n #endif /* not mc68020 */\n #endif /* mc68000 */\n \n #if defined (__m88000__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"addu.co %1,%r4,%r5\n \taddu.ci %0,%r2,%r3\"\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%rJ\" ((unsigned long int)(ah)), \"rJ\" ((unsigned long int)(bh)),\\\n-\t  \"%rJ\" ((unsigned long int)(al)), \"rJ\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%rJ\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rJ\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%rJ\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rJ\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subu.co %1,%r4,%r5\n \tsubu.ci %0,%r2,%r3\"\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"rJ\" ((unsigned long int)(ah)), \"rJ\" ((unsigned long int)(bh)),\\\n-\t  \"rJ\" ((unsigned long int)(al)), \"rJ\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"rJ\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rJ\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"rJ\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rJ\" ((unsigned long int)(bl)))\n #define UMUL_TIME 17\n #define UDIV_TIME 150\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned long int __cbtmp;\t\t\t\t\t\t\\\n     __asm__ (\"ff1 %0,%1\"\t\t\t\t\t\t\\\n-\t     : \"=r\" (__cbtmp) : \"r\" ((unsigned long int)(x)));\t\t\\\n+\t     : \"=r\" (__cbtmp)\t\t\t\t\t\t\\\n+\t     : \"r\" ((unsigned long int)(x)));\t\t\t\t\\\n     (count) = __cbtmp ^ 31;\t\t\t\t\t\t\\\n   } while (0)\n+#if defined (__mc88110__)\n+#define umul_ppmm(w1, w0, u, v) \\\n+  __asm__ (\"mulu.d\tr10,%2,%3\n+\tor\t%0,r10,0\n+\tor\t%1,r11,0\"\t\t\t\t\t\t\\\n+\t   : \"=r\" (w1),\t\t\t\t\t\t\t\\\n+\t     \"=r\" (w0)\t\t\t\t\t\t\t\\\n+\t   : \"r\" (u),\t\t\t\t\t\t\t\\\n+\t     \"r\" (v)\t\t\t\t\t\t\t\\\n+\t   : \"r10\", \"r11\")\n+#define udiv_qrnnd(q, r, n1, n0, d) \\\n+  __asm__ (\"or\tr10,%2,0\n+\tor\tr11,%3,0\n+\tdivu.d\tr10,r10,%4\n+\tmulu\t%1,%4,r11\n+\tsubu\t%1,%3,%1\n+\tor\t%0,r11,0\"\t\t\t\t\t\t\\\n+\t   : \"=r\" (q),\t\t\t\t\t\t\t\\\n+\t     \"=&r\" (r)\t\t\t\t\t\t\t\\\n+\t   : \"r\" (n1),\t\t\t\t\t\t\t\\\n+\t     \"r\" (n0),\t\t\t\t\t\t\t\\\n+\t     \"r\" (d)\t\t\t\t\t\t\t\\\n+\t   : \"r10\", \"r11\")\n+#endif\n #endif /* __m88000__ */\n \n #if defined (__mips__)\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"multu %2,%3\n \tmflo %0\n \tmfhi %1\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(w0)), \"=r\" ((unsigned long int)(w1))\\\n-\t: \"r\" ((unsigned long int)(u)), \"r\" ((unsigned long int)(v)))\n+\t   : \"=r\" ((unsigned long int)(w0)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(w1))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(v)))\n #define UMUL_TIME 5\n #define UDIV_TIME 100\n #endif /* __mips__ */\n \n #if defined (__ns32000__)\n #define __umulsidi3(u, v) \\\n   ({long long int __w;\t\t\t\t\t\t\t\\\n-      __asm__ (\"meid %2,%0\" : \"=g\" (__w)\t\t\t\t\\\n-\t: \"%0\" ((unsigned long int)(u)), \"g\" ((unsigned long int)(v)));\t\\\n-      __w; })\n+    __asm__ (\"meid %2,%0\"\t\t\t\t\t\t\\\n+\t     : \"=g\" (__w)\t\t\t\t\t\t\\\n+\t     : \"%0\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t       \"g\" ((unsigned long int)(v)));\t\t\t\t\\\n+    __w; })\n #define div_qrnnd(q, r, n1, n0, d) \\\n   __asm__ (\"movd %2,r0\n \tmovd %3,r1\n \tdeid %4,r0\n \tmovd r1,%0\n \tmovd r0,%1\"\t\t\t\t\t\t\t\\\n-\t: \"=g\" ((unsigned long int)(q)), \"=g\" ((unsigned long int)(r))\t\\\n-\t: \"g\" ((unsigned long int)(n0)), \"g\" ((unsigned long int)(n1)),\t\\\n-\t  \"g\" ((unsigned long int)(d)) : \"r0\", \"r1\")\n+\t   : \"=g\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=g\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"g\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(d))\t\t\t\t\\\n+\t   : \"r0\", \"r1\")\n #endif /* __ns32000__ */\n \n #if defined (__pyr__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"addw\t%5,%1\n \taddwc\t%3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\\\n-\t  \"%1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subw\t%5,%1\n \tsubwb\t%3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t  \"1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n /* This insn doesn't work on ancient pyramids.  */\n #define umul_ppmm(w1, w0, u, v) \\\n-  __asm__ (\"movw %2,tr11\n-\tuemul %3,tr10\n-\tmovw tr10,%0\n-\tmovw tr11,%1\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(w1)), \"=r\" ((unsigned long int)(w0))\\\n-\t: \"r\" ((unsigned long int)(u)), \"r\" ((unsigned long int)(v))\t\\\n-\t: \"tr10\", \"tr11\")\n+  ({union {long long int ll;struct {unsigned long int h, l;} i;} __xx;\t\\\n+  __xx.i.l = u;\t\t\t\t\t\t\t\t\\\n+  __asm__ (\"uemul %3,%0\"\t\t\t\t\t\t\\\n+\t   : \"=r\" (__xx.i.h),\t\t\t\t\t\t\\\n+\t     \"=r\" (__xx.i.l)\t\t\t\t\t\t\\\n+\t   : \"1\" (__xx.i.l),\t\t\t\t\t\t\\\n+\t     \"g\" (v));\t\t\t\t\t\t\t\\\n+  (w1) = __xx.i.h; (w0) = __xx.i.l;})\n #endif /* __pyr__ */\n \n #if defined (__ibm032__) /* RT/ROMP */\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"a %1,%5\n \tae %0,%3\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%0\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\\\n-\t  \"%1\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"s %1,%5\n \tse %0,%3\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"0\" ((unsigned long int)(ah)), \"r\" ((unsigned long int)(bh)),\t\\\n-\t  \"1\" ((unsigned long int)(al)), \"r\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(bl)))\n #define umul_ppmm(ph, pl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned long int __m0 = (m0), __m1 = (m1);\t\t\t\t\\\n@@ -479,12 +602,16 @@\n \tm\tr2,%3\n \tcas\t%0,r2,r0\n \tmfs\tr10,%1\"\t\t\t\t\t\t\t\\\n-       : \"=r\" ((unsigned long int)(ph)), \"=r\" ((unsigned long int)(pl))\t\\\n-       : \"%r\" (__m0), \"r\" (__m1)\t\t\t\t\t\\\n-       : \"r2\");\t\t\t\t\t\t\t\t\\\n+\t     : \"=r\" ((unsigned long int)(ph)),\t\t\t\t\\\n+\t       \"=r\" ((unsigned long int)(pl))\t\t\t\t\\\n+\t     : \"%r\" (__m0),\t\t\t\t\t\t\\\n+\t\t\"r\" (__m1)\t\t\t\t\t\t\\\n+\t     : \"r2\");\t\t\t\t\t\t\t\\\n     (ph) += ((((signed long int) __m0 >> 31) & __m1)\t\t\t\\\n \t     + (((signed long int) __m1 >> 31) & __m0));\t\t\\\n   } while (0)\n+#define UMUL_TIME 20\n+#define UDIV_TIME 200\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if ((x) >= 0x10000)\t\t\t\t\t\t\t\\\n@@ -505,25 +632,37 @@\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"addcc %4,%5,%1\n \taddx %2,%3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"%r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)),\\\n-\t  \"%r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl))\t\t\t\t\\\n+\t   __CLOBBER_CC)\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subcc %4,%5,%1\n \tsubx %2,%3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(sh)), \"=&r\" ((unsigned long int)(sl))\\\n-\t: \"r\" ((unsigned long int)(ah)), \"rI\" ((unsigned long int)(bh)),\\\n-\t  \"r\" ((unsigned long int)(al)), \"rI\" ((unsigned long int)(bl)))\n+\t   : \"=r\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"rI\" ((unsigned long int)(bl))\t\t\t\t\\\n+\t   __CLOBBER_CC)\n #if defined (__sparc8__)\t/* How do we recog. version 8 SPARC?  */\n #define umul_ppmm(w1, w0, u, v) \\\n   __asm__ (\"umul %2,%3,%1;rd %%y,%0\"\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(w1)), \"=r\" ((unsigned long int)(w0))\\\n-\t: \"r\" ((unsigned long int)(u)), \"r\" ((unsigned long int)(v)))\n+\t   : \"=r\" ((unsigned long int)(w1)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(w0))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(v)))\n #define udiv_qrnnd(q, r, n1, n0, d) \\\n   __asm__ (\"mov %2,%%y;nop;nop;nop;udiv %3,%4,%0;umul %0,%4,%1;sub %3,%1,%1\"\\\n-\t: \"=&r\" ((unsigned long int)(q)), \"=&r\" ((unsigned long int)(r))\\\n-\t: \"r\" ((unsigned long int)(n1)), \"r\" ((unsigned long int)(n0)),\t\\\n-\t  \"r\" ((unsigned long int)(d)))\n+\t   : \"=&r\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(n0)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(d)))\n #else\n /* SPARC without integer multiplication and divide instructions.\n    (i.e. at least Sun4/20,40,60,65,75,110,260,280,330,360,380,470,490) */\n@@ -568,9 +707,11 @@\n \tmulscc\t%%g1,0,%%g1\n \tadd\t%%g1,%%g2,%0\n \trd\t%%y,%1\"\t\t\t\t\t\t\t\\\n-\t: \"=r\" ((unsigned long int)(w1)), \"=r\" ((unsigned long int)(w0))\\\n-\t: \"%rI\" ((unsigned long int)(u)), \"r\" ((unsigned long int)(v))\t\\\n-       : \"%g1\", \"%g2\")\n+\t   : \"=r\" ((unsigned long int)(w1)),\t\t\t\t\\\n+\t     \"=r\" ((unsigned long int)(w0))\t\t\t\t\\\n+\t   : \"%rI\" ((unsigned long int)(u)),\t\t\t\t\\\n+\t     \"r\" ((unsigned long int)(v))\t\t\t\t\\\n+\t   : \"%g1\", \"%g2\" __AND_CLOBBER_CC)\n #define UMUL_TIME 39\t\t/* 39 instructions */\n /* It's quite necessary to add this much assembler for the sparc.\n    The default udiv_qrnnd (in C) is more than 10 times slower!  */\n@@ -599,32 +740,42 @@\n \tsub\t%1,%2,%1\n 3:\txnor\t%0,0,%0\n \t! End of inline udiv_qrnnd\"\t\t\t\t\t\\\n-\t: \"=r&\" ((unsigned long int)(q)), \"=r&\" ((unsigned long int)(r))\\\n-\t: \"r\" ((unsigned long int)(d)), \"1\" ((unsigned long int)(n1)),\t\\\n-\t  \"0\" ((unsigned long int)(n0)) : \"%g1\")\n+\t   : \"=&r\" ((unsigned long int)(q)),\t\t\t\t\\\n+\t     \"=&r\" ((unsigned long int)(r))\t\t\t\t\\\n+\t   : \"r\" ((unsigned long int)(d)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(n1)),\t\t\t\t\\\n+\t     \"0\" ((unsigned long int)(n0)) : \"%g1\" __AND_CLOBBER_CC)\n #define UDIV_TIME (3+7*32)\t/* 7 instructions/iteration. 32 iterations. */\n-#endif\n #endif /* __sparc8__ */\n+#endif /* __sparc__ */\n \n #if defined (__vax__)\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"addl2 %5,%1\n \tadwc %3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=g\" ((unsigned long int)(sh)), \"=&g\" ((unsigned long int)(sl))\\\n-\t: \"%0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\\\n-\t  \"%1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=g\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&g\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"%0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"%1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   __asm__ (\"subl2 %5,%1\n \tsbwc %3,%0\"\t\t\t\t\t\t\t\\\n-\t: \"=g\" ((unsigned long int)(sh)), \"=&g\" ((unsigned long int)(sl))\\\n-\t: \"0\" ((unsigned long int)(ah)), \"g\" ((unsigned long int)(bh)),\t\\\n-\t  \"1\" ((unsigned long int)(al)), \"g\" ((unsigned long int)(bl)))\n+\t   : \"=g\" ((unsigned long int)(sh)),\t\t\t\t\\\n+\t     \"=&g\" ((unsigned long int)(sl))\t\t\t\t\\\n+\t   : \"0\" ((unsigned long int)(ah)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bh)),\t\t\t\t\\\n+\t     \"1\" ((unsigned long int)(al)),\t\t\t\t\\\n+\t     \"g\" ((unsigned long int)(bl)))\n #define umul_ppmm(xh, xl, m0, m1) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     union {long long int ll;struct {unsigned long int l, h;} i;} __xx;\t\\\n     unsigned long int __m0 = (m0), __m1 = (m1);\t\t\t\t\\\n     __asm__ (\"emul %1,%2,$0,%0\"\t\t\t\t\t\t\\\n-\t : \"=r\" (__xx.ll) : \"g\" (__m0), \"g\" (__m1));\t\t\t\\\n+\t     : \"=r\" (__xx.ll)\t\t\t\t\t\t\\\n+\t     : \"g\" (__m0),\t\t\t\t\t\t\\\n+\t       \"g\" (__m1));\t\t\t\t\t\t\\\n     (xh) = __xx.i.h; (xl) = __xx.i.l;\t\t\t\t\t\\\n     (xh) += ((((signed long int) __m0 >> 31) & __m1)\t\t\t\\\n \t     + (((signed long int) __m1 >> 31) & __m0));\t\t\\\n@@ -688,12 +839,8 @@\n     __w.ll; })\n #endif\n \n-#if !defined (udiv_qrnnd)  || defined (__LLDEBUG__)\n-#define UDIV_NEEDS_NORMALIZATION 1\n-#ifndef __LLDEBUG__\n-#define udiv_qrnnd udiv_qrnnd_c\n-#endif\n-#define udiv_qrnnd_c(q, r, n1, n0, d) \\\n+/* Define this unconditionally, so it can be used for debugging.  */\n+#define __udiv_qrnnd_c(q, r, n1, n0, d) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     unsigned int __d1, __d0, __q1, __q0;\t\t\t\t\\\n     unsigned long int __r1, __r0, __m;\t\t\t\t\t\\\n@@ -729,21 +876,33 @@\n     (q) = (unsigned long int) __q1 * __ll_B | __q0;\t\t\t\\\n     (r) = __r0;\t\t\t\t\t\t\t\t\\\n   } while (0)\n+/* If udiv_qrnnd was not defined for this processor, use __udiv_qrnnd_c.  */\n+#if !defined (udiv_qrnnd)\n+#define UDIV_NEEDS_NORMALIZATION 1\n+#define udiv_qrnnd __udiv_qrnnd_c\n #endif\n \n #if !defined (count_leading_zeros)\n extern const unsigned char __clz_tab[];\n-\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    unsigned long int xr = (x);\t\t\t\t\t\t\\\n-    unsigned int a;\t\t\t\t\t\t\t\\\n+    unsigned long int __xr = (x);\t\t\t\t\t\\\n+    unsigned int __a;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    a = xr < (1<<2*__BITS4)\t\t\t\t\t\t\\\n-      ? (xr < (1<<__BITS4) ? 0 : __BITS4)\t\t\t\t\\\n-      : (xr < (1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);\t\t\t\\\n+    if (LONG_TYPE_SIZE <= 32)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t__a = __xr < (1<<2*__BITS4)\t\t\t\t\t\\\n+\t  ? (__xr < (1<<__BITS4) ? 0 : __BITS4)\t\t\t\t\\\n+\t  : (__xr < (1<<3*__BITS4) ?  2*__BITS4 : 3*__BITS4);\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfor (__a = LONG_TYPE_SIZE - 8; __a > 0; __a -= 8)\t\t\\\n+\t  if (((__xr >> __a) & 0xff) != 0)\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    (count) = 4*__BITS4 - (__clz_tab[xr >> a] + a);\t\t\t\\\n+    (count) = LONG_TYPE_SIZE - (__clz_tab[__xr >> __a] + __a);\t\t\\\n   } while (0)\n #endif\n "}]}