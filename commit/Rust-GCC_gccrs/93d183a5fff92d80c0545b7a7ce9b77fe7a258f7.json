{"sha": "93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "node_id": "C_kwDOANBUbNoAKDkzZDE4M2E1ZmZmOTJkODBjMDU0NWI3YTdjZTliNzdmZTdhMjU4Zjc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-16T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-16T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "3f44d0b4cc4e9c5624e023721ac57f897c44f160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f44d0b4cc4e9c5624e023721ac57f897c44f160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/comments", "author": null, "committer": null, "parents": [{"sha": "e547d1341b1fe90672c9b982c4a98f8197237bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e547d1341b1fe90672c9b982c4a98f8197237bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e547d1341b1fe90672c9b982c4a98f8197237bb7"}], "stats": {"total": 379, "additions": 378, "deletions": 1}, "files": [{"sha": "c2e3dee7fb7c53d347b9f03ec0e96bc37f997832", "filename": "gcc/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,116 @@\n+2021-10-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h (LINK_COMMAND_SPEC_A): Update 'r' handling to\n+\tskip gomp and itm when r or nodefaultlibs is given.\n+\t(DSYMUTIL_SPEC): Do not call dsymutil for '-r' link lines.\n+\tUpdate ordering of exclusions, remove duplicate 'v' addition\n+\t(collect2 will add this from the main command line).\n+\n+2021-10-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-driver.c (darwin_driver_init): Revise comments, handle\n+\tfilelist and framework options in specs instead of code.\n+\t* config/darwin.h (SUBTARGET_DRIVER_SELF_SPECS): Update to handle link\n+\tspecs that are really driver ones.\n+\t(DARWIN_CC1_SPEC): Likewise.\n+\t(CPP_SPEC): Likewise.\n+\t(SYSROOT_SPEC): Append space.\n+\t(LINK_SYSROOT_SPEC): Remove most driver link specs.\n+\t(STANDARD_STARTFILE_PREFIX_2): Update link-related specs.\n+\t(STARTFILE_SPEC): Likewise.\n+\t(ASM_MMACOSX_VERSION_MIN_SPEC): Fix line wrap.\n+\t(ASM_SPEC): Update driver-related specs.\n+\t(ASM_FINAL_SPEC): Likewise.\n+\t* config/darwin.opt: Remove now unused option aliases.\n+\t* config/i386/darwin.h (EXTRA_ASM_OPTS): Ensure space after opt.\n+\t(ASM_SPEC): Update driver-related specs.\n+\n+2021-10-15  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.c (ix86_hardreg_mov_ok): For vector modes,\n+\tallow standard_sse_constant_p immediate constants.\n+\n+2021-10-15  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config.gcc: Add tm-dwarf2.h to tm_d-file.\n+\n+2021-10-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.h (gimple_range_ssa_p): Don't process names\n+\tthat occur in abnormal phis.\n+\t* gimple-range.cc (gimple_ranger::range_on_edge): Return false for\n+\tabnormal and EH edges.\n+\t* gimple-ssa-evrp.c (rvrp_folder::value_of_expr): Ditto.\n+\t(rvrp_folder::value_on_edge): Ditto.\n+\t(rvrp_folder::value_of_stmt): Ditto.\n+\t(hybrid_folder::value_of_expr): Ditto for ranger queries.\n+\t(hybrid_folder::value_on_edge): Ditto.\n+\t(hybrid_folder::value_of_stmt): Ditto.\n+\t* value-query.cc (gimple_range_global): Always return a range if\n+\tthe type is supported.\n+\n+2021-10-15  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.md: Consistently use \"rG\" constraint for copy\n+\tinstruction in move patterns.\n+\n+2021-10-15  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-hsa.h (S_FIJI): Set unconditionally.\n+\t(S_900): Likewise.\n+\t(S_906): Likewise.\n+\t* config/gcn/gcn.c: Hard code SRAM ECC settings for old architectures.\n+\t* config/gcn/mkoffload.c (ELFABIVERSION_AMDGPU_HSA): Rename to ...\n+\t(ELFABIVERSION_AMDGPU_HSA_V3): ... this.\n+\t(ELFABIVERSION_AMDGPU_HSA_V4): New.\n+\t(SET_SRAM_ECC_UNSUPPORTED): New.\n+\t(copy_early_debug_info): Create elf flags to match the other objects.\n+\t(main): Just let the attribute flags pass through.\n+\n+2021-10-15  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* tree-loop-distribution.c (reduction_var_overflows_first):\n+\tPass the type of reduction_var as first argument as it is also\n+\tdone for the load type.\n+\t(loop_distribution::transform_reduction_loop): Add missing\n+\tTREE_TYPE while determining precission of reduction_var.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* defaults.h (PREFERRED_DEBUGGING_TYPE): Choose DWARF2_DEBUG\n+\twhen not set.\n+\t* toplev.c (process_options): Warn when STABS debugging is\n+\tenabled but not the preferred format.\n+\t* config/pa/som.h (PREFERRED_DEBUGGING_TYPE): Define to\n+\tDBX_DEBUG.\n+\t* config/pdp11/pdp11.h (PREFERRED_DEBUGGING_TYPE): Likewise.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/102762\n+\t* tree-inline.c (copy_bb): Avoid underflowing nargs.\n+\n+2021-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_vec_perm): Convert\n+\tHFmode input operand to HImode.\n+\t(ix86_vectorize_vec_perm_const): Likewise.\n+\t* config/i386/sse.md (*avx512bw_permvar_truncv16siv16hi_1_hf):\n+\tNew define_insn.\n+\t(*avx512f_permvar_truncv8siv8hi_1_hf):\n+\tLikewise.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/102682\n+\t* expmed.c (store_bit_field_1): Ensure a LHS subreg would\n+\tnot create a paradoxical subreg.\n+\n+2021-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init):\n+\tFor half_vector concat for HFmode, handle them like HImode.\n+\n 2021-10-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-ssa-threadbackward.c (class back_threader): Add m_resolve."}, {"sha": "77335aac2c0a051222dec799637d7223833911de", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1 +1 @@\n-20211015\n+20211016"}, {"sha": "c6d856afe2a29f0cebf2a120777ab0a73d54edec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,8 @@\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc-interface/misc.c (gnat_post_options): Do not warn\n+\tabout DBX_DEBUG use here.\n+\n 2021-10-14  Alexandre Oliva  <oliva@adacore.com>\n \n \t* par-ch10.adb (P_Compilation_Unit): Reenable ada83 library"}, {"sha": "138731883c32bb01b0a0a1906342be31010e2ee5", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,10 @@\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/102763\n+\t* gimple-parser.c\n+\t(c_parser_gimple_postfix_expression_after_primary): Check\n+\tfor a pointer do be dereferenced by ->.\n+\n 2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* c-parser.c (c_finish_omp_declare_variant): Change call from"}, {"sha": "ffdb6906fd8395c3766f310670155ff2c6dd18a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,27 @@\n+2021-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51851\n+\tPR c++/101402\n+\tPR c++/102033\n+\tPR c++/102034\n+\tPR c++/102039\n+\tPR c++/102044\n+\t* pt.c (determine_specialization): Remove redundant code.\n+\t(fn_type_unification): Check for mismatched length.\n+\t(type_unification_real): Ignore terminal void.\n+\t(get_bindings): Don't stop at void_list_node.\n+\t* class.c (resolve_address_of_overloaded_function): Likewise.\n+\n+2021-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_bind_parameters_in_call): Replace\n+\tnew_call parameter with fun.\n+\t(cxx_eval_call_expression): Call it before instantiation.\n+\t(cxx_eval_outermost_constant_expr): Only instantiate fns\n+\twhen manifestly_const_eval.\n+\t* typeck2.c (check_narrowing): This context is manifestly\n+\tconstant-evaluated.\n+\n 2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* decl.c (omp_declare_variant_finalize_one): Change call from"}, {"sha": "2d3d33a13b06ee25e22e797779c27508cfb99b2c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,12 @@\n+2021-10-15  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102685\n+\t* decl.c (match_clist_expr): Set rank/shape of clist initializer\n+\tto match LHS.\n+\t* resolve.c (resolve_structure_cons): In a structure constructor,\n+\tcompare shapes of array components against declared shape.\n+\n 2021-10-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102717"}, {"sha": "2876c7a1494eaa8c4beb2d12c3e83750a2679a41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,72 @@\n+2021-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51851\n+\tPR c++/101402\n+\tPR c++/102033\n+\tPR c++/102034\n+\tPR c++/102039\n+\tPR c++/102044\n+\t* g++.dg/template/fnspec2.C: New test.\n+\t* g++.dg/template/parm-cv1.C: New test.\n+\t* g++.dg/template/parm-cv2.C: New test.\n+\t* g++.dg/template/parm-cv3.C: New test.\n+\n+2021-10-15  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/102685\n+\t* gfortran.dg/derived_constructor_char_1.f90: Fix invalid code.\n+\t* gfortran.dg/pr70931.f90: Likewise.\n+\t* gfortran.dg/transfer_simplify_2.f90: Likewise.\n+\t* gfortran.dg/pr102685.f90: New test.\n+\n+2021-10-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr102736.c: Make sign explicit.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* lib/prune.exp: Prune STABS obsoletion message.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/102763\n+\t* gcc.dg/gimplefe-error-12.c: New testcase.\n+\n+2021-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/102762\n+\t* gcc.dg/torture/pr102762.c: New testcase.\n+\n+2021-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-builtin_shuffle-1.c: New test.\n+\t* gcc.target/i386/avx512fp16-pr101846.c: Ditto.\n+\t* gcc.target/i386/avx512fp16-pr94680.c: Ditto.\n+\n+2021-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-v4hf-concat.c: New test.\n+\n+2021-10-15  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-vfcmaddcph-1a.c: Add scan for\n+\tvblendmps.\n+\t* gcc.target/i386/avx512fp16-vfmaddcph-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16vl-vfcmaddcph-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16vl-vfmaddcph-1a.c: Likewise.\n+\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Add -mno-avx512vl.\n+\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: Likewise.\n+\n+2021-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/vla22.C: Don't expect a narrowing error.\n+\t* g++.dg/cpp0x/constexpr-inst1.C: New test.\n+\n+2021-10-15  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr102738.c: Add target int128.\n+\n 2021-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/format/c11-dfp-printf-1.c,"}, {"sha": "49171028dbf83e009d22fff49e68581535eb4077", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,76 @@\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/affinity-1.c (struct places): Change name field\n+\ttype from char [50] to const char *.\n+\t(places_array): Add a testcase for simplified syntax place followed\n+\tby length or length and stride.\n+\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* env.c (parse_one_place): Handle non-negative-number the same\n+\tas { non-negative-number }.  Reject even !number:1 and\n+\t!number:1:stride or !place:1 or !place:1:stride instead of just\n+\tlength other than 1.\n+\t* libgomp.texi (OpenMP 5.1): Document OMP_PLACES syntax extensions\n+\tand OMP_NUM_TEAMS/OMP_TEAMS_THREAD_LIMIT and\n+\tomp_{set_num,get_max}_teams/omp_{s,g}et_teams_thread_limit features\n+\tas implemented.\n+\t* testsuite/libgomp.c/affinity-1.c: Add a test for the 5.1 place\n+\tsimplified syntax.\n+\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* env.c (parse_schedule): For strtoul or strtoull calls which don't\n+\tclearly reject return value 0 as invalid handle the case where end\n+\tpointer is the same as first argument as invalid.\n+\t(parse_unsigned_long_1): Likewise.\n+\t(parse_one_place): Likewise.\n+\t(parse_places_var): Likewise.\n+\t(parse_stacksize): Likewise.\n+\t(parse_spincount): Likewise.\n+\t(parse_affinity): Likewise.\n+\t(parse_gomp_openacc_dim): Likewise.  Avoid strict aliasing violation.\n+\tMake code valid C89.\n+\t* config/linux/affinity.c (gomp_affinity_find_last_cache_level):\n+\tFor strtoul calls which don't clearly reject return value 0 as\n+\tinvalid handle the case where end pointer is the same as first\n+\targument as invalid.\n+\t(gomp_affinity_init_level_1): Likewise.\n+\t(gomp_affinity_init_numa_domains): Likewise.\n+\t* config/rtems/proc.c (parse_thread_pools): Likewise.\n+\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/linux/affinity.c (gomp_affinity_init_level_1): For level 1\n+\tafter creating count places clean up and return immediately.\n+\t* testsuite/libgomp.c/places-6.c: New test.\n+\t* testsuite/libgomp.c/places-7.c: New test.\n+\t* testsuite/libgomp.c/places-8.c: New test.\n+\t* testsuite/libgomp.c/places-9.c: New test.\n+\t* testsuite/libgomp.c/places-10.c: New test.\n+\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* env.c (parse_places_var): Handle numa_domains as level 5.\n+\t* config/linux/affinity.c (gomp_affinity_init_numa_domains): New\n+\tfunction.\n+\t(gomp_affinity_init_level): Use it instead of\n+\tgomp_affinity_init_level_1 for level == 5.\n+\t* testsuite/libgomp.c/places-5.c: New test.\n+\n+2021-10-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* env.c (parse_places_var): Handle ll_caches as level 4.\n+\t* config/linux/affinity.c (gomp_affinity_find_last_cache_level): New\n+\tfunction.\n+\t(gomp_affinity_init_level_1): Handle level 4 as logical cpus sharing\n+\tlast level cache.\n+\t(gomp_affinity_init_level): Likewise.\n+\t* testsuite/libgomp.c/places-1.c: New test.\n+\t* testsuite/libgomp.c/places-2.c: New test.\n+\t* testsuite/libgomp.c/places-3.c: New test.\n+\t* testsuite/libgomp.c/places-4.c: New test.\n+\n 2021-10-14  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.0): Update entry for declare variant"}, {"sha": "785c9466fe43bb11abb986294612a8b99eb22cbe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d183a5fff92d80c0545b7a7ce9b77fe7a258f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93d183a5fff92d80c0545b7a7ce9b77fe7a258f7", "patch": "@@ -1,3 +1,80 @@\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::_S_convert(T)): Avoid recursive\n+\tcall to function with deduced return type.\n+\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (__cpp_lib_string_resize_and_overwrite):\n+\tDefine for C++23.\n+\t(basic_string::resize_and_overwrite): Declare.\n+\t* include/bits/basic_string.tcc (basic_string::resize_and_overwrite):\n+\tDefine.\n+\t* include/std/version (__cpp_lib_resize_and_overwrite): Define\n+\tfor C++23.\n+\t* testsuite/21_strings/basic_string/capacity/char/resize_and_overwrite.cc:\n+\tNew test.\n+\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101263\n+\t* include/std/ranges (__cached): New wrapper struct.\n+\t(__non_propagating_cache): Use __cached for contained value.\n+\t(__non_propagating_cache::_M_emplace_deref): Add constexpr. Use\n+\tstd::construct_at instead of placement new.\n+\t* testsuite/std/ranges/adaptors/join.cc: Check constexpr works.\n+\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__cpp_lib_variant): Update value for\n+\tC++20.\n+\t(__variant_cast, __variant_construct): Add constexpr for C++20.\n+\t(__variant_construct_single, __construct_by_index) Likewise. Use\n+\tstd::_Construct instead of placement new.\n+\t(_Uninitialized<T, false>) [__cplusplus >= 202002]: Replace\n+\tbuffer with a union and define a destructor.\n+\t(_Variadic_union) [__cplusplus >= 202002]: Add a specialization\n+\tfor non-trivial destruction.\n+\t(_Variant_storage::__index_of): New helper variable template.\n+\t(_Variant_storage::~_Variant_storage()): Add constexpr.\n+\t(_Variant_storage::_M_reset()): Likewise.\n+\t(_Copy_ctor_base, _Move_ctor_base): Likewise.\n+\t(_Copy_assign_base, _Move_assign_base): Likewise.\n+\t(variant, swap): Likewise.\n+\t* include/std/version (__cpp_lib_variant): Update value for\n+\tC++20.\n+\t* testsuite/20_util/optional/version.cc: Check for exact value\n+\tin C++17.\n+\t* testsuite/20_util/variant/87619.cc: Increase timeout for\n+\tC++20 mode.\n+\t* testsuite/20_util/variant/constexpr.cc: New test.\n+\t* testsuite/20_util/variant/version.cc: New test.\n+\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (__detail::__variant::__get_storage):\n+\tRemove unused function.\n+\t(__variant_construct_by_index): Set index after construction is\n+\tcomplete. Rename to ...\n+\t(__detail::__variant::__construct_by_index): ... this.\n+\t(variant): Use new name for __variant_construct_by_index friend\n+\tdeclaration. Remove __get_storage friend declaration.\n+\t(variant::emplace): Use new name and remove try-blocks.\n+\n+2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (_Variant_storage::_M_storage()): Remove.\n+\t(__detail::__variant::__get_storage): Remove.\n+\t(variant): Remove friend declaration of __get_storage.\n+\n+2021-10-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/20_util/integer_comparisons/greater_equal_neg.cc:\n+\t* testsuite/20_util/integer_comparisons/greater_neg.cc:\n+\t* testsuite/20_util/integer_comparisons/less_equal_neg.cc:\n+\tAdjust expected message.\n+\t* testsuite/lib/prune.exp: Prune 'in constexpr expansion'.\n+\n 2021-10-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/variant (__variant::__get(in_place_index_t<N>, U&&)):"}]}