{"sha": "b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4ZWNmNTUzZTBmYTJkZGViZmI4OTc1ZGNjZDZmY2EwMTQzZWM1OA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@redhat.com", "date": "2011-05-13T08:09:25Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2011-05-13T08:09:25Z"}, "message": "configure.ac: Use AS_HELP_STRING throughout.\n\n* configure.ac: Use AS_HELP_STRING throughout.\n* configure: Regenerate.\n\nFrom-SVN: r173724", "tree": {"sha": "a4828aa083d0efc615806831e00e22c8dfd4fe87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4828aa083d0efc615806831e00e22c8dfd4fe87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/comments", "author": null, "committer": null, "parents": [{"sha": "e6e9475b4b3a3da6502e5481d91d40f9cb7b6dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e9475b4b3a3da6502e5481d91d40f9cb7b6dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e9475b4b3a3da6502e5481d91d40f9cb7b6dbb"}], "stats": {"total": 246, "additions": 132, "deletions": 114}, "files": [{"sha": "4c145c8911f743c872263aaf5513a2ea1932378a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "patch": "@@ -1,3 +1,8 @@\n+2011-05-13  Andreas Schwab  <schwab@redhat.com>\n+\n+\t* configure.ac: Use AS_HELP_STRING throughout.\n+\t* configure: Regenerate.\n+\n 2011-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_save_reg): Change maybe_eh_return"}, {"sha": "b0bde294bfc855bb3b51af276a56b3ad96a22f12", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "patch": "@@ -1555,24 +1555,24 @@ Optional Features:\n   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --enable-generated-files-in-srcdir\n-                          put copies of generated files in source dir\n-                          intended for creating source tarballs for users\n-                          without texinfo bison or flex.\n+                          put copies of generated files in source dir intended\n+                          for creating source tarballs for users without\n+                          texinfo bison or flex\n   --disable-largefile     omit support for large files\n   --enable-werror-always  enable -Werror despite compiler version\n-  --enable-checking=LIST\n-\t\t\t  enable expensive run-time checks.  With LIST,\n-\t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: yes,no,all,none,release.\n-\t\t\t  Flags are: assert,df,fold,gc,gcac,gimple,misc,\n-\t\t\t  rtlflag,rtl,runtime,tree,valgrind,types.\n-  --enable-coverage=LEVEL\n-\t\t\t  enable compiler's code coverage collection.\n-\t\t\t  Use to measure compiler performance and locate\n-\t\t\t  unused parts of the compiler. With LEVEL, specify\n-\t\t\t  optimization. Values are opt, noopt,\n-\t\t\t  default is noopt\n-  --enable-gather-detailed-mem-stats         enable detailed memory allocation stats gathering\n+  --enable-checking[=LIST]\n+                          enable expensive run-time checks. With LIST, enable\n+                          only specific categories of checks. Categories are:\n+                          yes,no,all,none,release. Flags are:\n+                          assert,df,fold,gc,gcac,gimple,misc,\n+                          rtlflag,rtl,runtime,tree,valgrind,types\n+  --enable-coverage[=LEVEL]\n+                          enable compiler's code coverage collection. Use to\n+                          measure compiler performance and locate unused parts\n+                          of the compiler. With LEVEL, specify optimization.\n+                          Values are opt, noopt, default is noopt\n+  --enable-gather-detailed-mem-stats\n+                          enable detailed memory allocation stats gathering\n   --enable-build-with-cxx build with C++ compiler instead of C compiler\n   --enable-multilib       enable library support for multiple ABIs\n   --enable-__cxa_atexit   enable __cxa_atexit for C++\n@@ -1581,12 +1581,12 @@ Optional Features:\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n   --enable-fixed-point    enable fixed-point arithmetic extension to C\n-  --enable-threads        enable thread usage for target GCC\n-  --enable-threads=LIB    use LIB thread package for target GCC\n-  --enable-tls            enable or disable generation of tls code\n-                          overriding the assembler check for tls support\n-  --enable-objc-gc\t  enable the use of Boehm's garbage collector with\n-\t\t\t  the GNU Objective-C runtime\n+  --enable-threads[=LIB]  enable thread usage for target GCC, using LIB thread\n+                          package\n+  --enable-tls            enable or disable generation of tls code overriding\n+                          the assembler check for tls support\n+  --enable-objc-gc        enable the use of Boehm's garbage collector with the\n+                          GNU Objective-C runtime\n   --disable-shared        don't provide a shared libgcc\n   --enable-languages=LIST specify which front-ends to build\n   --disable-rpath         do not hardcode runtime library paths\n@@ -1595,12 +1595,13 @@ Optional Features:\n                           arrange to use setjmp/longjmp exception handling\n   --enable-secureplt      enable -msecure-plt by default for PowerPC\n   --enable-leading-mingw64-underscores\n-                          Enable leading underscores on 64 bit mingw targets\n+                          enable leading underscores on 64 bit mingw targets\n   --enable-cld            enable -mcld by default for 32bit x86\n-  --enable-frame-pointer  enable -fno-omit-frame-pointer by default for 32bit x86\n+  --enable-frame-pointer  enable -fno-omit-frame-pointer by default for 32bit\n+                          x86\n   --disable-win32-registry\n-                          disable lookup of installation paths in the\n-                          Registry on Windows hosts\n+                          disable lookup of installation paths in the Registry\n+                          on Windows hosts\n   --enable-win32-registry enable registry lookup (default)\n   --enable-win32-registry=KEY\n                           use KEY instead of GCC version as the last portion\n@@ -1620,11 +1621,11 @@ Optional Features:\n   --enable-linker-build-id\n                           compiler will always pass --build-id to linker\n   --enable-maintainer-mode\n-                          enable make rules and dependencies not useful\n-                          (and sometimes confusing) to the casual installer\n+                          enable make rules and dependencies not useful (and\n+                          sometimes confusing) to the casual installer\n   --enable-version-specific-runtime-libs\n-                          specify that runtime libraries should be\n-                          installed in a compiler-specific directory\n+                          specify that runtime libraries should be installed\n+                          in a compiler-specific directory\n   --enable-plugin         enable plugin support\n   --disable-libquadmath-support\n                           disable libquadmath support for Fortran\n@@ -1639,20 +1640,20 @@ Optional Packages:\n   --with-cpp-install-dir=DIR\n                           install the user visible C preprocessor in DIR\n                           (relative to PREFIX) as well as PREFIX/bin\n-  --with-gnu-ld           arrange to work with GNU ld.\n+  --with-gnu-ld           arrange to work with GNU ld\n   --with-ld               arrange to use the specified ld (full pathname)\n-  --with-demangler-in-ld  try to use demangler in GNU ld.\n+  --with-demangler-in-ld  try to use demangler in GNU ld\n   --with-gnu-as           arrange to work with GNU as\n   --with-as               arrange to use the specified as (full pathname)\n   --with-stabs            arrange to use stabs instead of host debug format\n   --with-dwarf2           force the default debug format to be DWARF 2\n   --with-build-sysroot=sysroot\n                           use sysroot as the system root during the build\n-  --with-sysroot=DIR Search for usr/lib, usr/include, et al, within DIR.\n+  --with-sysroot[=DIR]    search for usr/lib, usr/include, et al, within DIR\n   --with-specs=SPECS      add SPECS to driver command-line processing\n   --with-pkgversion=PKG   Use PKG in the version string in place of \"GCC\"\n   --with-bugurl=URL       Direct users to URL to report a bug\n-  --with-multilib-list    Select multilibs (SH only)\n+  --with-multilib-list    select multilibs (SH only)\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n@@ -1661,9 +1662,9 @@ Optional Packages:\n                           both]\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n   --with-plugin-ld=[ARG]  specify the plugin linker\n-  --with-long-double-128  Use 128-bit long double by default.\n-  --with-gc={page,zone}   choose the garbage collection mechanism to use\n-                          with the compiler\n+  --with-long-double-128  use 128-bit long double by default\n+  --with-gc={page,zone}   choose the garbage collection mechanism to use with\n+                          the compiler\n   --with-system-zlib      use installed libz\n   --with-slibdir=DIR      shared libraries in DIR [LIBDIR]\n   --with-linker-hash-style={sysv,gnu,both}\n@@ -6959,7 +6960,6 @@ _ACEOF\n # Check whether --enable-fixed-point was given.\n if test \"${enable_fixed_point+set}\" = set; then :\n   enableval=$enable_fixed_point;\n-\n else\n \n   case $target in"}, {"sha": "87b712045a76394f2cdbf1e06b30b4ff972604b0", "filename": "gcc/configure.ac", "status": "modified", "additions": 89, "deletions": 76, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b88ecf553e0fa2ddebfb8975dccd6fca0143ec58/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b88ecf553e0fa2ddebfb8975dccd6fca0143ec58", "patch": "@@ -105,7 +105,8 @@ fi\n # Specify the local prefix\n local_prefix=\n AC_ARG_WITH(local-prefix,\n-[  --with-local-prefix=DIR specifies directory to put local include],\n+[AS_HELP_STRING([--with-local-prefix=DIR],\n+\t\t[specifies directory to put local include])],\n [case \"${withval}\" in\n yes)\tAC_MSG_ERROR(bad value ${withval} given for local include directory prefix) ;;\n no)\t;;\n@@ -123,8 +124,8 @@ fi\n gcc_gxx_include_dir=\n # Specify the g++ header file directory\n AC_ARG_WITH(gxx-include-dir,\n-[  --with-gxx-include-dir=DIR\n-                          specifies directory to put g++ header files],\n+[AS_HELP_STRING([--with-gxx-include-dir=DIR],\n+                [specifies directory to put g++ header files])],\n [case \"${withval}\" in\n yes)\tAC_MSG_ERROR(bad value ${withval} given for g++ include directory) ;;\n no)\t;;\n@@ -145,9 +146,9 @@ if test x${gcc_gxx_include_dir} = x; then\n fi\n \n AC_ARG_WITH(cpp_install_dir,\n-[  --with-cpp-install-dir=DIR\n-                          install the user visible C preprocessor in DIR\n-                          (relative to PREFIX) as well as PREFIX/bin],\n+[AC_HELP_STRING([--with-cpp-install-dir=DIR],\n+                [install the user visible C preprocessor in DIR\n+                 (relative to PREFIX) as well as PREFIX/bin])],\n [if test x$withval = xyes; then\n   AC_MSG_ERROR([option --with-cpp-install-dir requires an argument])\n elif test x$withval != xno; then\n@@ -163,10 +164,10 @@ fi])\n AC_MSG_CHECKING([whether to place generated files in the source directory])\n   dnl generated-files-in-srcdir is disabled by default\n   AC_ARG_ENABLE(generated-files-in-srcdir, \n-[  --enable-generated-files-in-srcdir\n-                          put copies of generated files in source dir\n-                          intended for creating source tarballs for users\n-                          without texinfo bison or flex.],\n+    [AS_HELP_STRING([--enable-generated-files-in-srcdir],\n+\t\t    [put copies of generated files in source dir\n+\t\t     intended for creating source tarballs for users\n+\t\t     without texinfo bison or flex])],\n       generated_files_in_srcdir=$enableval,\n       generated_files_in_srcdir=no)\n \n@@ -185,13 +186,13 @@ AC_SUBST(GENINSRC)\n \n # With GNU ld\n AC_ARG_WITH(gnu-ld,\n-[  --with-gnu-ld           arrange to work with GNU ld.],\n+[AS_HELP_STRING([--with-gnu-ld], [arrange to work with GNU ld])],\n gnu_ld_flag=\"$with_gnu_ld\",\n gnu_ld_flag=no)\n \n # With pre-defined ld\n AC_ARG_WITH(ld,\n-[  --with-ld               arrange to use the specified ld (full pathname)],\n+[AS_HELP_STRING([--with-ld], [arrange to use the specified ld (full pathname)])],\n DEFAULT_LINKER=\"$with_ld\")\n if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n   if test ! -x \"$DEFAULT_LINKER\"; then\n@@ -219,7 +220,7 @@ fi\n \n # With demangler in GNU ld\n AC_ARG_WITH(demangler-in-ld,\n-[  --with-demangler-in-ld  try to use demangler in GNU ld.],\n+[AS_HELP_STRING([--with-demangler-in-ld], [try to use demangler in GNU ld])],\n demangler_in_ld=\"$with_demangler_in_ld\",\n demangler_in_ld=no)\n \n@@ -229,12 +230,12 @@ demangler_in_ld=no)\n \n # With GNU as\n AC_ARG_WITH(gnu-as,\n-[  --with-gnu-as           arrange to work with GNU as],\n+[AS_HELP_STRING([--with-gnu-as], [arrange to work with GNU as])],\n gas_flag=\"$with_gnu_as\",\n gas_flag=no)\n \n AC_ARG_WITH(as,\n-[  --with-as               arrange to use the specified as (full pathname)],\n+[AS_HELP_STRING([--with-as], [arrange to use the specified as (full pathname)])],\n DEFAULT_ASSEMBLER=\"$with_as\")\n if test x\"${DEFAULT_ASSEMBLER+set}\" = x\"set\"; then\n   if test ! -x \"$DEFAULT_ASSEMBLER\"; then\n@@ -359,12 +360,12 @@ if test x\"`cat $srcdir/DEV-PHASE`\" != xexperimental; then\n fi\n \n AC_ARG_ENABLE(checking,\n-[  --enable-checking[=LIST]\n-\t\t\t  enable expensive run-time checks.  With LIST,\n-\t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: yes,no,all,none,release.\n-\t\t\t  Flags are: assert,df,fold,gc,gcac,gimple,misc,\n-\t\t\t  rtlflag,rtl,runtime,tree,valgrind,types.],\n+[AS_HELP_STRING([[--enable-checking[=LIST]]],\n+\t\t[enable expensive run-time checks.  With LIST,\n+\t\t enable only specific categories of checks.\n+\t\t Categories are: yes,no,all,none,release.\n+\t\t Flags are: assert,df,fold,gc,gcac,gimple,misc,\n+\t\t rtlflag,rtl,runtime,tree,valgrind,types])],\n [ac_checking_flags=\"${enableval}\"],[\n # Determine the default checks.\n if test x$is_release = x ; then\n@@ -547,12 +548,12 @@ AC_SUBST(valgrind_command)\n \n # Enable code coverage collection\n AC_ARG_ENABLE(coverage,\n-[  --enable-coverage[=LEVEL]\n-\t\t\t  enable compiler's code coverage collection.\n-\t\t\t  Use to measure compiler performance and locate\n-\t\t\t  unused parts of the compiler. With LEVEL, specify\n-\t\t\t  optimization. Values are opt, noopt,\n-\t\t\t  default is noopt],\n+[AS_HELP_STRING([[--enable-coverage[=LEVEL]]],\n+\t\t[enable compiler's code coverage collection.\n+\t\t Use to measure compiler performance and locate\n+\t\t unused parts of the compiler. With LEVEL, specify\n+\t\t optimization. Values are opt, noopt,\n+\t\t default is noopt])],\n [case \"${enableval}\" in\n   yes|noopt)\n     coverage_flags=\"-fprofile-arcs -ftest-coverage -frandom-seed=\\$@ -O0\"\n@@ -572,7 +573,8 @@ esac],\n AC_SUBST(coverage_flags)\n \n AC_ARG_ENABLE(gather-detailed-mem-stats, \n-[  --enable-gather-detailed-mem-stats         enable detailed memory allocation stats gathering], [],\n+[AS_HELP_STRING([--enable-gather-detailed-mem-stats],\n+\t\t[enable detailed memory allocation stats gathering])], [],\n [enable_gather_detailed_mem_stats=no])\n if test x$enable_gather_detailed_mem_stats = xyes ; then\n   AC_DEFINE(GATHER_STATISTICS, 1,\n@@ -585,7 +587,8 @@ fi\n \n # See if we are building gcc with C++.\n AC_ARG_ENABLE(build-with-cxx,\n-[  --enable-build-with-cxx build with C++ compiler instead of C compiler],\n+[AS_HELP_STRING([--enable-build-with-cxx],\n+\t\t[build with C++ compiler instead of C compiler])],\n ENABLE_BUILD_WITH_CXX=$enableval,\n ENABLE_BUILD_WITH_CXX=no)\n AC_SUBST(ENABLE_BUILD_WITH_CXX)\n@@ -596,19 +599,21 @@ fi\n \n # With stabs\n AC_ARG_WITH(stabs,\n-[  --with-stabs            arrange to use stabs instead of host debug format],\n+[AS_HELP_STRING([--with-stabs],\n+\t\t[arrange to use stabs instead of host debug format])],\n stabs=\"$with_stabs\",\n stabs=no)\n \n # Determine whether or not multilibs are enabled.\n AC_ARG_ENABLE(multilib,\n-[  --enable-multilib       enable library support for multiple ABIs],\n+[AS_HELP_STRING([--enable-multilib],\n+\t\t[enable library support for multiple ABIs])],\n [], [enable_multilib=yes])\n AC_SUBST(enable_multilib)\n \n # Enable __cxa_atexit for C++.\n AC_ARG_ENABLE(__cxa_atexit,\n-[  --enable-__cxa_atexit   enable __cxa_atexit for C++],\n+[AS_HELP_STRING([--enable-__cxa_atexit], [enable __cxa_atexit for C++])],\n [], [])\n \n # Enable C extension for decimal float if target supports it.\n@@ -628,9 +633,9 @@ point format instead of DPD])\n \n # Enable C extension for fixed-point arithmetic.\n AC_ARG_ENABLE(fixed-point,\n-[  --enable-fixed-point    enable fixed-point arithmetic extension to C],\n-[\n-],\n+[AS_HELP_STRING([--enable-fixed-point],\n+\t\t[enable fixed-point arithmetic extension to C])],\n+[],\n [\n   case $target in\n     mips*-*-*)\n@@ -660,13 +665,15 @@ AC_DEFINE_UNQUOTED(ENABLE_FIXED_POINT, $fixedpoint,\n # Pass with no value to take the default\n # Pass with a value to specify a thread package\n AC_ARG_ENABLE(threads,\n-[  --enable-threads        enable thread usage for target GCC\n-  --enable-threads=LIB    use LIB thread package for target GCC],,\n+[AS_HELP_STRING([[--enable-threads[=LIB]]],\n+\t\t[enable thread usage for target GCC,\n+\t\t using LIB thread package])],,\n [enable_threads=''])\n \n AC_ARG_ENABLE(tls,\n-[  --enable-tls            enable or disable generation of tls code\n-                          overriding the assembler check for tls support],\n+[AS_HELP_STRING([--enable-tls],\n+\t\t[enable or disable generation of tls code\n+                 overriding the assembler check for tls support])],\n [\n   case $enable_tls in\n     yes | no) ;;\n@@ -676,8 +683,9 @@ Valid choices are 'yes' and 'no'.]) ;;\n ], [enable_tls=''])\n \n AC_ARG_ENABLE(objc-gc,\n-[  --enable-objc-gc\t  enable the use of Boehm's garbage collector with\n-\t\t\t  the GNU Objective-C runtime],\n+[AS_HELP_STRING([--enable-objc-gc],\n+\t\t[enable the use of Boehm's garbage collector with\n+\t\t the GNU Objective-C runtime])],\n if test x$enable_objc_gc = xno; then\n \tobjc_boehm_gc=''\n else\n@@ -686,12 +694,12 @@ fi,\n objc_boehm_gc='')\n \n AC_ARG_WITH(dwarf2,\n-[  --with-dwarf2           force the default debug format to be DWARF 2],\n+[AS_HELP_STRING([--with-dwarf2], [force the default debug format to be DWARF 2])],\n dwarf2=\"$with_dwarf2\",\n dwarf2=no)\n \n AC_ARG_ENABLE(shared,\n-[  --disable-shared        don't provide a shared libgcc],\n+[AS_HELP_STRING([--disable-shared], [don't provide a shared libgcc])],\n [\n   case $enable_shared in\n   yes | no) ;;\n@@ -710,11 +718,12 @@ AC_ARG_ENABLE(shared,\n AC_SUBST(enable_shared)\n \n AC_ARG_WITH(build-sysroot, \n-  [  --with-build-sysroot=sysroot\n-                          use sysroot as the system root during the build])\n+  [AS_HELP_STRING([--with-build-sysroot=sysroot],\n+                  [use sysroot as the system root during the build])])\n \n AC_ARG_WITH(sysroot,\n-[  --with-sysroot[=DIR] Search for usr/lib, usr/include, et al, within DIR.],\n+[AS_HELP_STRING([[--with-sysroot[=DIR]]],\n+\t\t[search for usr/lib, usr/include, et al, within DIR])],\n [\n  case ${with_sysroot} in\n  yes) TARGET_SYSTEM_ROOT='${exec_prefix}/${target_noncanonical}/sys-root' ;;\n@@ -766,7 +775,7 @@ ACX_BUGURL([http://gcc.gnu.org/bugs.html])\n # Sanity check enable_languages in case someone does not run the toplevel\n # configure # script.\n AC_ARG_ENABLE(languages,\n-[  --enable-languages=LIST specify which front-ends to build],\n+[AS_HELP_STRING([--enable-languages=LIST], [specify which front-ends to build])],\n [case ,${enable_languages}, in\n        ,,|,yes,)\n \t\t# go safe -- we cannot be much sure without the toplevel\n@@ -786,7 +795,7 @@ esac],\n [enable_languages=c])\n \n AC_ARG_WITH(multilib-list,\n-[  --with-multilib-list    Select multilibs (SH only)],\n+[AS_HELP_STRING([--with-multilib-list], [select multilibs (SH only)])],\n :,\n with_multilib_list=default)\n \n@@ -1138,8 +1147,8 @@ AC_SUBST(objext)\n \n # With Setjmp/Longjmp based exception handling.\n AC_ARG_ENABLE(sjlj-exceptions,\n-[  --enable-sjlj-exceptions\n-                          arrange to use setjmp/longjmp exception handling],\n+[AS_HELP_STRING([--enable-sjlj-exceptions],\n+                [arrange to use setjmp/longjmp exception handling])],\n [case $target in\n   *-*-hpux10*)\n     if test $enableval != yes; then\n@@ -1526,23 +1535,25 @@ case \"$LIBINTL\" in *$LIBICONV*)\n esac\n \n AC_ARG_ENABLE(secureplt,\n-[  --enable-secureplt      enable -msecure-plt by default for PowerPC],\n+[AS_HELP_STRING([--enable-secureplt],\n+\t\t[enable -msecure-plt by default for PowerPC])],\n [], [])\n \n AC_ARG_ENABLE(leading-mingw64-underscores,\n   AS_HELP_STRING([--enable-leading-mingw64-underscores],\n-                 [Enable leading underscores on 64 bit mingw targets]),\n+                 [enable leading underscores on 64 bit mingw targets]),\n   [],[])\n AS_IF([ test x\"$enable_leading_mingw64_underscores\" = xyes ],\n   [AC_DEFINE(USE_MINGW64_LEADING_UNDERSCORES, 1,\n     [Define if we should use leading underscore on 64 bit mingw targets])])\n \n AC_ARG_ENABLE(cld,\n-[  --enable-cld            enable -mcld by default for 32bit x86], [],\n+[AS_HELP_STRING([--enable-cld], [enable -mcld by default for 32bit x86])], [],\n [enable_cld=no])\n \n AC_ARG_ENABLE(frame-pointer,\n-[  --enable-frame-pointer  enable -fno-omit-frame-pointer by default for 32bit x86], [],\n+[AS_HELP_STRING([--enable-frame-pointer],\n+\t\t[enable -fno-omit-frame-pointer by default for 32bit x86])], [],\n [\n case $target_os in\n linux* | darwin[[8912]]*)\n@@ -1558,13 +1569,13 @@ esac\n \n # Windows32 Registry support for specifying GCC installation paths.\n AC_ARG_ENABLE(win32-registry,\n-[  --disable-win32-registry\n-                          disable lookup of installation paths in the\n-                          Registry on Windows hosts\n-  --enable-win32-registry enable registry lookup (default)\n-  --enable-win32-registry=KEY\n-                          use KEY instead of GCC version as the last portion\n-                          of the registry key],,)\n+[AS_HELP_STRING([--disable-win32-registry],\n+                [disable lookup of installation paths in the\n+                 Registry on Windows hosts])\n+AS_HELP_STRING([--enable-win32-registry], [enable registry lookup (default)])\n+AS_HELP_STRING([--enable-win32-registry=KEY],\n+               [use KEY instead of GCC version as the last portion\n+                of the registry key])],,)\n \n case $host_os in\n   win32 | pe | cygwin* | mingw32* | uwin*)\n@@ -1947,7 +1958,7 @@ fi])\n ORIGINAL_PLUGIN_LD_FOR_TARGET=$gcc_cv_ld\n PLUGIN_LD=`basename $gcc_cv_ld`\n AC_ARG_WITH(plugin-ld,\n-[  --with-plugin-ld=[[ARG]]  specify the plugin linker],\n+[AS_HELP_STRING([[--with-plugin-ld=[ARG]]], [specify the plugin linker])],\n [if test x\"$withval\" != x; then\n    ORIGINAL_PLUGIN_LD_FOR_TARGET=\"$withval\"\n    PLUGIN_LD=\"$withval\"\n@@ -4287,8 +4298,8 @@ if test x\"$gcc_cv_ld_buildid\" = xyes; then\n fi\n \n AC_ARG_ENABLE(linker-build-id,\n-[  --enable-linker-build-id\n-                          compiler will always pass --build-id to linker],\n+[AS_HELP_STRING([--enable-linker-build-id],\n+                [compiler will always pass --build-id to linker])],\n [],\n enable_linker_build_id=no)\n \n@@ -4429,7 +4440,8 @@ case \"$target\" in\n   s390*-*-linux* | \\\n   alpha*-*-linux*)\n     AC_ARG_WITH(long-double-128,\n-[  --with-long-double-128  Use 128-bit long double by default.],\n+      [AS_HELP_STRING([--with-long-double-128],\n+\t\t      [use 128-bit long double by default])],\n       gcc_cv_target_ldbl128=\"$with_long_double_128\",\n       [[gcc_cv_target_ldbl128=no\n       grep '^[ \t]*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n@@ -4466,8 +4478,9 @@ AC_MSG_RESULT($gcc_cv_target_dl_iterate_phdr)\n \n # Find out what GC implementation we want, or may, use.\n AC_ARG_WITH(gc,\n-[  --with-gc={page,zone}   choose the garbage collection mechanism to use\n-                          with the compiler],\n+[AS_HELP_STRING([--with-gc={page,zone}],\n+\t\t[choose the garbage collection mechanism to use\n+                 with the compiler])],\n [case \"$withval\" in\n   page)\n     GGC=ggc-$withval\n@@ -4495,7 +4508,7 @@ AC_SUBST(HOST_LIBS)\n zlibdir=-L../zlib\n zlibinc=\"-I\\$(srcdir)/../zlib\"\n AC_ARG_WITH(system-zlib,\n-[  --with-system-zlib      use installed libz],\n+[AS_HELP_STRING([--with-system-zlib], [use installed libz])],\n zlibdir=\n zlibinc=\n )\n@@ -4507,9 +4520,9 @@ dnl Very limited version of automake's enable-maintainer-mode\n AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n   dnl maintainer-mode is disabled by default\n   AC_ARG_ENABLE(maintainer-mode,\n-[  --enable-maintainer-mode\n-                          enable make rules and dependencies not useful\n-                          (and sometimes confusing) to the casual installer],\n+[AS_HELP_STRING([--enable-maintainer-mode],\n+                [enable make rules and dependencies not useful\n+                 (and sometimes confusing) to the casual installer])],\n       maintainer_mode=$enableval,\n       maintainer_mode=no)\n \n@@ -4714,12 +4727,12 @@ AC_SUBST(dollar)\n # Find a directory in which to install a shared libgcc.\n \n AC_ARG_ENABLE(version-specific-runtime-libs,\n-[  --enable-version-specific-runtime-libs\n-                          specify that runtime libraries should be\n-                          installed in a compiler-specific directory])\n+[AS_HELP_STRING([--enable-version-specific-runtime-libs],\n+                [specify that runtime libraries should be\n+                 installed in a compiler-specific directory])])\n \n AC_ARG_WITH(slibdir,\n-[  --with-slibdir=DIR      shared libraries in DIR [[LIBDIR]]],\n+[AS_HELP_STRING([--with-slibdir=DIR], [shared libraries in DIR @<:@LIBDIR@:>@])],\n slibdir=\"$with_slibdir\",\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   slibdir='$(libsubdir)'\n@@ -4827,7 +4840,7 @@ fi\n \n # Check for plugin support\n AC_ARG_ENABLE(plugin,\n-[  --enable-plugin         enable plugin support],\n+[AS_HELP_STRING([--enable-plugin], [enable plugin support])],\n enable_plugin=$enableval,\n enable_plugin=yes; default_plugin=yes)\n "}]}