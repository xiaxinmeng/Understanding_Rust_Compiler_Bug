{"sha": "5a80a1ddff8f6a6c5b7395a258361f8d46106657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4MGExZGRmZjhmNmE2YzViNzM5NWEyNTgzNjFmOGQ0NjEwNjY1Nw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-04-20T19:23:45Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-04-20T19:23:45Z"}, "message": "re PR c++/43800 (FAIL: libgomp.c++/for-4.C)\n\nFix PR c++/43800\n\ngcc/cp/ChangeLog:\n\tPR c++/43800\n\tPR c++/43704\n\t* typeck.c (incompatible_dependent_types_p): If one of the\n\tcompared types if not a typedef then honour their main variant\n\tequivalence.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/43800\n\tPR c++/43704\n\t* g++.dg/template/typedef32.C: Adjust.\n\t* g++.dg/template/typedef33.C: New test.\n\nFrom-SVN: r158571", "tree": {"sha": "62f4ffad70d86ffc0bbafdc9ecb49f5d873e0a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62f4ffad70d86ffc0bbafdc9ecb49f5d873e0a6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a80a1ddff8f6a6c5b7395a258361f8d46106657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a80a1ddff8f6a6c5b7395a258361f8d46106657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a80a1ddff8f6a6c5b7395a258361f8d46106657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a80a1ddff8f6a6c5b7395a258361f8d46106657/comments", "author": null, "committer": null, "parents": [{"sha": "9c4174d8533b2aa1386eb24a8a0debc642773e11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4174d8533b2aa1386eb24a8a0debc642773e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4174d8533b2aa1386eb24a8a0debc642773e11"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "83945e2508d9632433199586d2a2c9beb55b74e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5a80a1ddff8f6a6c5b7395a258361f8d46106657", "patch": "@@ -1,3 +1,11 @@\n+2010-04-20  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43800\n+\tPR c++/43704\n+\t* typeck.c (incompatible_dependent_types_p): If one of the\n+\tcompared types if not a typedef then honour their main variant\n+\tequivalence.\n+\n 2010-04-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (TYPE_REF_IS_RVALUE): Remove."}, {"sha": "bc699a18d96a343a2658daa45db8b14557fc5bad", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5a80a1ddff8f6a6c5b7395a258361f8d46106657", "patch": "@@ -1155,6 +1155,7 @@ static bool\n incompatible_dependent_types_p (tree t1, tree t2)\n {\n   tree tparms1 = NULL_TREE, tparms2 = NULL_TREE;\n+  bool t1_typedef_variant_p, t2_typedef_variant_p;\n \n   if (!uses_template_parms (t1) || !uses_template_parms (t2))\n     return false;\n@@ -1167,10 +1168,22 @@ incompatible_dependent_types_p (tree t1, tree t2)\n \treturn true;\n     }\n \n+  t1_typedef_variant_p = typedef_variant_p (t1);\n+  t2_typedef_variant_p = typedef_variant_p (t2);\n+\n   /* Either T1 or T2 must be a typedef.  */\n-  if (!typedef_variant_p (t1) && !typedef_variant_p (t2))\n+  if (!t1_typedef_variant_p && !t2_typedef_variant_p)\n     return false;\n \n+  if (!t1_typedef_variant_p || !t2_typedef_variant_p)\n+    /* Either T1 or T2 is not a typedef so we cannot compare the\n+       the template parms of the typedefs of T1 and T2.\n+       At this point, if the main variant type of T1 and T2 are equal\n+       it means the two types can't be incompatible, from the perspective\n+       of this function.  */\n+    if (TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n+      return false;\n+\n   /* So if we reach this point, it means either T1 or T2 is a typedef variant.\n      Let's compare their template parameters.  */\n "}, {"sha": "186c8ae256cfbbbd0e2eb788a01b14eb9109ede8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a80a1ddff8f6a6c5b7395a258361f8d46106657", "patch": "@@ -1,3 +1,10 @@\n+2010-04-20  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43800\n+\tPR c++/43704\n+\t* g++.dg/template/typedef32.C: Adjust.\n+\t* g++.dg/template/typedef33.C: New test.\n+\n 2010-04-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/43227"}, {"sha": "b32e66c3f88f74572c51f121d03fc08c50b83bd6", "filename": "gcc/testsuite/g++.dg/template/typedef32.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C?ref=5a80a1ddff8f6a6c5b7395a258361f8d46106657", "patch": "@@ -10,12 +10,13 @@ struct if_\n template<class I1>\n struct iterator_restrict_traits\n {\n+    struct iterator_category {};\n };\n \n template<class T>\n-class matrix\n+struct matrix\n {\n- class ci {};\n+ struct ci {struct ic {};};\n  class i {};\n };\n "}, {"sha": "1d2117b3a4108072d8f751fabb81609710bd04a9", "filename": "gcc/testsuite/g++.dg/template/typedef33.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a1ddff8f6a6c5b7395a258361f8d46106657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef33.C?ref=5a80a1ddff8f6a6c5b7395a258361f8d46106657", "patch": "@@ -0,0 +1,21 @@\n+// Origin PR c++/43800\n+// { dg-do compile }\n+\n+template<class T, class U=T>\n+struct V\n+{\n+  typedef T t_type;\n+};\n+\n+template<class T>\n+class J\n+{\n+  typedef typename V<T>::t_type t_type; \n+  const t_type& f(); // #0:\n+private:\n+  t_type b;\n+};\n+\n+template<class T>\n+const typename V<T>::t_type& J<T>::f() {return b;} // #1\n+"}]}