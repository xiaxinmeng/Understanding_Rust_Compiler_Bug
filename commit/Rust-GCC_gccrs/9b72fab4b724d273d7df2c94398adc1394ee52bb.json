{"sha": "9b72fab4b724d273d7df2c94398adc1394ee52bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3MmZhYjRiNzI0ZDI3M2Q3ZGYyYzk0Mzk4YWRjMTM5NGVlNTJiYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-22T18:16:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-22T18:16:15Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r565", "tree": {"sha": "25932fb8b56f77eb456b252767cc1b7e33c2a21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25932fb8b56f77eb456b252767cc1b7e33c2a21b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b72fab4b724d273d7df2c94398adc1394ee52bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b72fab4b724d273d7df2c94398adc1394ee52bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b72fab4b724d273d7df2c94398adc1394ee52bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b72fab4b724d273d7df2c94398adc1394ee52bb/comments", "author": null, "committer": null, "parents": [{"sha": "6d518002821cf412acf044fbea7d5f3d1970db03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d518002821cf412acf044fbea7d5f3d1970db03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d518002821cf412acf044fbea7d5f3d1970db03"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "f518fb89880745ce09055bd1dd7a1bf35964afdc", "filename": "gcc/reorg.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b72fab4b724d273d7df2c94398adc1394ee52bb/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b72fab4b724d273d7df2c94398adc1394ee52bb/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=9b72fab4b724d273d7df2c94398adc1394ee52bb", "patch": "@@ -2820,21 +2820,22 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n \n \t We could check for more complex cases than those tested below,\n \t but it doesn't seem worth it.  It might also be a good idea to try\n-\t to swap the two insns.  That might do better.  */\n+\t to swap the two insns.  That might do better.\n+\n+\t We can't do this if the next insn modifies our source, because that\n+\t would make the replacement into the insn invalid.  This also\n+\t prevents updating the contents of a PRE_INC.  */\n \n       if (GET_CODE (trial) == INSN && GET_CODE (pat) == SET\n \t  && GET_CODE (SET_SRC (pat)) == REG\n \t  && GET_CODE (SET_DEST (pat)) == REG)\n \t{\n \t  rtx next = next_nonnote_insn (trial);\n-\t  int our_dest = REGNO (SET_DEST (pat));\n \n \t  if (next && GET_CODE (next) == INSN\n-\t      && GET_CODE (PATTERN (next)) == SET\n-\t      && GET_CODE (SET_DEST (PATTERN (next))) == REG\n-\t      && REGNO (SET_DEST (PATTERN (next))) != our_dest\n-\t      && refers_to_regno_p (our_dest, our_dest + 1,\n-\t\t\t\t    SET_SRC (PATTERN (next)), 0))\n+\t      && GET_CODE (PATTERN (next)) != USE\n+\t      && ! reg_set_p (SET_DEST (pat), next)\n+\t      && reg_referenced_p (SET_DEST (pat), PATTERN (next)))\n \t    validate_replace_rtx (SET_DEST (pat), SET_SRC (pat), next);\n \t}\n     }"}]}