{"sha": "c560531806f36915bd7ed6eb7419af39e872092d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2MDUzMTgwNmYzNjkxNWJkN2VkNmViNzQxOWFmMzllODcyMDkyZA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2002-07-24T20:52:26Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2002-07-24T20:52:26Z"}, "message": "ra-colorize.c (INV_REG_ALLOC_ORDER): New macro.\n\n        * ra-colorize.c (INV_REG_ALLOC_ORDER): New macro.\n        (free_reg): Use it.\n\nFrom-SVN: r55721", "tree": {"sha": "5ca39f15e4bf6f8b9e6a2753c3c64d27e4258d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ca39f15e4bf6f8b9e6a2753c3c64d27e4258d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c560531806f36915bd7ed6eb7419af39e872092d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c560531806f36915bd7ed6eb7419af39e872092d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c560531806f36915bd7ed6eb7419af39e872092d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c560531806f36915bd7ed6eb7419af39e872092d/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51937d2c986f362de353e17daed695ad4a28ee32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51937d2c986f362de353e17daed695ad4a28ee32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51937d2c986f362de353e17daed695ad4a28ee32"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "ce11083950effd5ed26f1306d3c3a3aaa07e441e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560531806f36915bd7ed6eb7419af39e872092d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560531806f36915bd7ed6eb7419af39e872092d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c560531806f36915bd7ed6eb7419af39e872092d", "patch": "@@ -1,3 +1,8 @@\n+2002-07-24  Michael Matz  <matz@suse.de>\n+\n+\t* ra-colorize.c (INV_REG_ALLOC_ORDER): New macro.\n+\t(free_reg): Use it.\n+\n 2002-07-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (arm_buneq, arm_bltgt): put '\\' before ';' in output"}, {"sha": "f101eaa736311e7036199e9fda678d452b868e06", "filename": "gcc/ra-colorize.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c560531806f36915bd7ed6eb7419af39e872092d/gcc%2Fra-colorize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c560531806f36915bd7ed6eb7419af39e872092d/gcc%2Fra-colorize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-colorize.c?ref=c560531806f36915bd7ed6eb7419af39e872092d", "patch": "@@ -1031,6 +1031,13 @@ color_usable_p (c, dont_begin_colors, free_colors, mode)\n   return 0;\n }\n \n+/* I don't want to clutter up the actual code with ifdef's.  */\n+#ifdef REG_ALLOC_ORDER\n+#define INV_REG_ALLOC_ORDER(c) inv_reg_alloc_order[c]\n+#else\n+#define INV_REG_ALLOC_ORDER(c) c\n+#endif\n+\n /* Searches in FREE_COLORS for a block of hardregs of the right length\n    for MODE, which doesn't begin at a hardreg mentioned in DONT_BEGIN_COLORS.\n    If it needs more than one hardreg it prefers blocks beginning\n@@ -1065,16 +1072,16 @@ get_free_reg (dont_begin_colors, free_colors, mode)\n \t  {\n \t    if (size < 2 || (c & 1) == 0)\n \t      {\n-\t\tif (inv_reg_alloc_order[c] < pref_reg_order)\n+\t\tif (INV_REG_ALLOC_ORDER (c) < pref_reg_order)\n \t\t  {\n \t\t    pref_reg = c;\n-\t\t    pref_reg_order = inv_reg_alloc_order[c];\n+\t\t    pref_reg_order = INV_REG_ALLOC_ORDER (c);\n \t\t  }\n \t      }\n-\t    else if (inv_reg_alloc_order[c] < last_resort_reg_order)\n+\t    else if (INV_REG_ALLOC_ORDER (c) < last_resort_reg_order)\n \t      {\n \t\tlast_resort_reg = c;\n-\t\tlast_resort_reg_order = inv_reg_alloc_order[c];\n+\t\tlast_resort_reg_order = INV_REG_ALLOC_ORDER (c);\n \t      }\n \t  }\n \telse"}]}