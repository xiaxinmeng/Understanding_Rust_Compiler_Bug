{"sha": "f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2Yjk2YzIwZGE4ZTY2NzVkNDRmOTc2YmJlNTRlYTYyZjVlNWU2OQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-11-11T23:34:05Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-11-11T23:34:05Z"}, "message": "symbol.c (verify_bind_c_derived_type): Accept BIND(C) on an empty derived type.\n\n2010-11-10  Steven G. Kargl <kargl@gcc.gnu.org>\n\n\t* symbol.c (verify_bind_c_derived_type):  Accept BIND(C) on an empty\n\tderived type.\n\n2010-11-10  Steven G. Kargl <kargl@gcc.gnu.org>\n\n\t* gfortran.dg/empty_derived_type.f90: New test.\n\nFrom-SVN: r166633", "tree": {"sha": "635195a00e1d975324cb76c55c6024d31ddf0ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635195a00e1d975324cb76c55c6024d31ddf0ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/comments", "author": null, "committer": null, "parents": [{"sha": "a9c64730c2ac1eb5504209d27560d3eaebfdaff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c64730c2ac1eb5504209d27560d3eaebfdaff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c64730c2ac1eb5504209d27560d3eaebfdaff1"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "41a5bef05125027fa9883b04462be244d19c9a55", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "patch": "@@ -1,3 +1,8 @@\n+2010-11-11  Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+\t* symbol.c (verify_bind_c_derived_type):  Accept BIND(C) on an empty\n+\tderived type.\n+\n 2010-11-11  Jan Hubicka  <jh@suse.cz>\n \n \t* options.c (gfc_post_options): Remove flag_whopr."}, {"sha": "05c62351383dc88db5e15842e6bba309f037ba4a", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "patch": "@@ -3592,14 +3592,25 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n   \n   curr_comp = derived_sym->components;\n \n-  /* TODO: is this really an error?  */\n+  /* Fortran 2003 allows an empty derived type.  C99 appears to disallow an\n+     empty struct.  Section 15.2 in Fortran 2003 states:  \"The following\n+     subclauses define the conditions under which a Fortran entity is\n+     interoperable.  If a Fortran entity is interoperable, an equivalent\n+     entity may be defined by means of C and the Fortran entity is said\n+     to be interoperable with the C entity.  There does not have to be such\n+     an interoperating C entity.\"\n+  */\n   if (curr_comp == NULL)\n     {\n-      gfc_error (\"Derived type '%s' at %L is empty\",\n-\t\t derived_sym->name, &(derived_sym->declared_at));\n-      return FAILURE;\n+      gfc_warning (\"Derived type '%s' with BIND(C) attribute at %L is empty, \"\n+\t\t   \"and may be inaccessible by the C companion processor\",\n+\t\t   derived_sym->name, &(derived_sym->declared_at));\n+      derived_sym->ts.is_c_interop = 1;\n+      derived_sym->attr.is_bind_c = 1;\n+      return SUCCESS;\n     }\n \n+\n   /* Initialize the derived type as being C interoperable.\n      If we find an error in the components, this will be set false.  */\n   derived_sym->ts.is_c_interop = 1;"}, {"sha": "c05468890c625287547484d26f05bab5cbe2fe94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "patch": "@@ -1,3 +1,7 @@\n+2010-11-11  Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+\t* gfortran.dg/empty_derived_type.f90: New test.\n+\n 2010-11-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46413"}, {"sha": "6bf616c2c6ab5c11a30743b12707488630a724e8", "filename": "gcc/testsuite/gfortran.dg/empty_derived_type.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_derived_type.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76b96c20da8e6675d44f976bbe54ea62f5e5e69/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_derived_type.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fempty_derived_type.f90?ref=f76b96c20da8e6675d44f976bbe54ea62f5e5e69", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+module stuff\n+   implicit none\n+   type, bind(C) :: junk ! { dg-warning \"may be inaccessible by the C companion\" }\n+      ! Empty!\n+   end type junk\n+end module stuff "}]}