{"sha": "cddaefa37616be8fdc85d6e627962f828c75ae2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkYWVmYTM3NjE2YmU4ZmRjODVkNmU2Mjc5NjJmODI4Yzc1YWUyYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-14T13:57:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-14T13:57:00Z"}, "message": "re PR tree-optimization/60042 (vectorizer still does too many dependence tests for himeno:jacobi)\n\n2014-04-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60042\n\t* tree-ssa-pre.c (inhibit_phi_insertion): Remove.\n\t(insert_into_preds_of_block): Do not prevent PHI insertion\n\tfor REFERENCE exprs here ...\n\t(eliminate_dom_walker::before_dom_children): ... but prevent\n\ttheir use here under similar conditions when applied to the\n\tIL after PRE optimizations.\n\nFrom-SVN: r209374", "tree": {"sha": "34e30ee9788bf97b2da18c3372a9e1a481ac98a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34e30ee9788bf97b2da18c3372a9e1a481ac98a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cddaefa37616be8fdc85d6e627962f828c75ae2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddaefa37616be8fdc85d6e627962f828c75ae2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddaefa37616be8fdc85d6e627962f828c75ae2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddaefa37616be8fdc85d6e627962f828c75ae2b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9e4c82f9932ddd96de0dc2d495cdbb444e80096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e4c82f9932ddd96de0dc2d495cdbb444e80096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e4c82f9932ddd96de0dc2d495cdbb444e80096"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "a99c64117f659a5b4b818a38f4c7d1ab4a396562", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddaefa37616be8fdc85d6e627962f828c75ae2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddaefa37616be8fdc85d6e627962f828c75ae2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cddaefa37616be8fdc85d6e627962f828c75ae2b", "patch": "@@ -1,3 +1,13 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60042\n+\t* tree-ssa-pre.c (inhibit_phi_insertion): Remove.\n+\t(insert_into_preds_of_block): Do not prevent PHI insertion\n+\tfor REFERENCE exprs here ...\n+\t(eliminate_dom_walker::before_dom_children): ... but prevent\n+\ttheir use here under similar conditions when applied to the\n+\tIL after PRE optimizations.\n+\n 2014-04-14  Richard Biener  <rguenther@suse.de>\n \n \t* passes.def: Move early points-to after early SRA."}, {"sha": "df9ff23e08be804e6d2ac42960e12d2d2f25451a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 51, "deletions": 62, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cddaefa37616be8fdc85d6e627962f828c75ae2b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cddaefa37616be8fdc85d6e627962f828c75ae2b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=cddaefa37616be8fdc85d6e627962f828c75ae2b", "patch": "@@ -3013,66 +3013,6 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n }\n \n \n-/* Returns true if we want to inhibit the insertions of PHI nodes\n-   for the given EXPR for basic block BB (a member of a loop).\n-   We want to do this, when we fear that the induction variable we\n-   create might inhibit vectorization.  */\n-\n-static bool\n-inhibit_phi_insertion (basic_block bb, pre_expr expr)\n-{\n-  vn_reference_t vr = PRE_EXPR_REFERENCE (expr);\n-  vec<vn_reference_op_s> ops = vr->operands;\n-  vn_reference_op_t op;\n-  unsigned i;\n-\n-  /* If we aren't going to vectorize we don't inhibit anything.  */\n-  if (!flag_tree_loop_vectorize)\n-    return false;\n-\n-  /* Otherwise we inhibit the insertion when the address of the\n-     memory reference is a simple induction variable.  In other\n-     cases the vectorizer won't do anything anyway (either it's\n-     loop invariant or a complicated expression).  */\n-  FOR_EACH_VEC_ELT (ops, i, op)\n-    {\n-      switch (op->opcode)\n-\t{\n-\tcase CALL_EXPR:\n-\t  /* Calls are not a problem.  */\n-\t  return false;\n-\n-\tcase ARRAY_REF:\n-\tcase ARRAY_RANGE_REF:\n-\t  if (TREE_CODE (op->op0) != SSA_NAME)\n-\t    break;\n-\t  /* Fallthru.  */\n-\tcase SSA_NAME:\n-\t  {\n-\t    basic_block defbb = gimple_bb (SSA_NAME_DEF_STMT (op->op0));\n-\t    affine_iv iv;\n-\t    /* Default defs are loop invariant.  */\n-\t    if (!defbb)\n-\t      break;\n-\t    /* Defined outside this loop, also loop invariant.  */\n-\t    if (!flow_bb_inside_loop_p (bb->loop_father, defbb))\n-\t      break;\n-\t    /* If it's a simple induction variable inhibit insertion,\n-\t       the vectorizer might be interested in this one.  */\n-\t    if (simple_iv (bb->loop_father, bb->loop_father,\n-\t\t\t   op->op0, &iv, true))\n-\t      return true;\n-\t    /* No simple IV, vectorizer can't do anything, hence no\n-\t       reason to inhibit the transformation for this operand.  */\n-\t    break;\n-\t  }\n-\tdefault:\n-\t  break;\n-\t}\n-    }\n-  return false;\n-}\n-\n /* Insert the to-be-made-available values of expression EXPRNUM for each\n    predecessor, stored in AVAIL, into the predecessors of BLOCK, and\n    merge the result with a phi node, given the same value number as\n@@ -3106,8 +3046,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n \t\t\t\t\t\tEDGE_PRED (block, 1)->src);\n       /* Induction variables only have one edge inside the loop.  */\n       if ((firstinsideloop ^ secondinsideloop)\n-\t  && (expr->kind != REFERENCE\n-\t      || inhibit_phi_insertion (block, expr)))\n+\t  && expr->kind != REFERENCE)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"Skipping insertion of phi for partial redundancy: Looks like an induction variable\\n\");\n@@ -4234,6 +4173,56 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \n \t      gcc_assert (sprime != rhs);\n \n+\t      /* Inhibit the use of an inserted PHI on a loop header when\n+\t\t the address of the memory reference is a simple induction\n+\t\t variable.  In other cases the vectorizer won't do anything\n+\t\t anyway (either it's loop invariant or a complicated\n+\t\t expression).  */\n+\t      if (flag_tree_loop_vectorize\n+\t\t  && gimple_assign_single_p (stmt)\n+\t\t  && TREE_CODE (sprime) == SSA_NAME\n+\t\t  && loop_outer (b->loop_father))\n+\t\t{\n+\t\t  gimple def_stmt = SSA_NAME_DEF_STMT (sprime);\n+\t\t  basic_block def_bb = gimple_bb (def_stmt);\n+\t\t  if (gimple_code (def_stmt) == GIMPLE_PHI\n+\t\t      && b->loop_father->header == def_bb\n+\t\t      && has_zero_uses (sprime))\n+\t\t    {\n+\t\t      ssa_op_iter iter;\n+\t\t      tree op;\n+\t\t      bool found = false;\n+\t\t      FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n+\t\t\t{\n+\t\t\t  affine_iv iv;\n+\t\t\t  def_bb = gimple_bb (SSA_NAME_DEF_STMT (op));\n+\t\t\t  if (def_bb\n+\t\t\t      && flow_bb_inside_loop_p (b->loop_father,\n+\t\t\t\t\t\t\tdef_bb)\n+\t\t\t      && simple_iv (b->loop_father,\n+\t\t\t\t\t    b->loop_father, op, &iv, true))\n+\t\t\t    {\n+\t\t\t      found = true;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t}\n+\t\t      if (found)\n+\t\t\t{\n+\t\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t    {\n+\t\t\t      fprintf (dump_file, \"Not replacing \");\n+\t\t\t      print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t\t      fprintf (dump_file, \" with \");\n+\t\t\t      print_generic_expr (dump_file, sprime, 0);\n+\t\t\t      fprintf (dump_file, \" which would add a loop\"\n+\t\t\t\t       \" carried dependence to loop %d\\n\",\n+\t\t\t\t       b->loop_father->num);\n+\t\t\t    }\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"Replaced \");"}]}