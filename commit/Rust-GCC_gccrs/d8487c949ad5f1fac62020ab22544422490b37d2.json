{"sha": "d8487c949ad5f1fac62020ab22544422490b37d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg0ODdjOTQ5YWQ1ZjFmYWM2MjAyMGFiMjI1NDQ0MjI0OTBiMzdkMg==", "commit": {"author": {"name": "Mike Stump", "email": "mikestump@comcast.net", "date": "2013-10-30T03:02:00Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-10-30T03:02:00Z"}, "message": "machmode.def (PARTIAL_INT_MODE): Add precision and name.\n\n\t* machmode.def (PARTIAL_INT_MODE): Add precision and name.\n\t* genmodes.c (PARTIAL_INT_MODE): Add precision and name.\n\t(make_vector_mode): Increase namebuf to 16.\n\t(emit_insn_modes_h): When processing BImode, don't\n\talso match partial int modes.\n\t(emit_class_narrowest_mode): Likewise.\n\n\t* config/bfin/bfin-modes.def: Add precision to PDI.\n\t* config/m32c/m32c-modes.def: Add precision to PSI.\n\t* config/msp430/msp430-modes.def: Add precision to PSI.\n\t* config/rs6000/rs6000-modes.def: Add precision to PTI.\n\t* config/sh/sh-modes.def: Add precision to PSI and PDI.\n\nFrom-SVN: r204193", "tree": {"sha": "3e4d8c33a6e93f29e60f5b1a8bb6ff6874206439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e4d8c33a6e93f29e60f5b1a8bb6ff6874206439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8487c949ad5f1fac62020ab22544422490b37d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8487c949ad5f1fac62020ab22544422490b37d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8487c949ad5f1fac62020ab22544422490b37d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8487c949ad5f1fac62020ab22544422490b37d2/comments", "author": null, "committer": null, "parents": [{"sha": "f0be72ea222f22adc00c57472fcd9ebfde003cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0be72ea222f22adc00c57472fcd9ebfde003cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0be72ea222f22adc00c57472fcd9ebfde003cb1"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "ba0bf865035135f56434ae868c531a7aec434783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -1,3 +1,18 @@\n+2013-10-29  Mike Stump  <mikestump@comcast.net>\n+\n+\t* machmode.def (PARTIAL_INT_MODE): Add precision and name.\n+\t* genmodes.c (PARTIAL_INT_MODE): Add precision and name.\n+\t(make_vector_mode): Increase namebuf to 16.\n+\t(emit_insn_modes_h): When processing BImode, don't\n+\talso match partial int modes.\n+\t(emit_class_narrowest_mode): Likewise.\n+\n+\t* config/bfin/bfin-modes.def: Add precision to PDI.\n+\t* config/m32c/m32c-modes.def: Add precision to PSI.\n+\t* config/msp430/msp430-modes.def: Add precision to PSI.\n+\t* config/rs6000/rs6000-modes.def: Add precision to PTI.\n+\t* config/sh/sh-modes.def: Add precision to PSI and PDI.\n+\n 2013-10-29  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "da0303c8446b430259c24a1d8186d87303b9f15c", "filename": "gcc/config/bfin/bfin-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-modes.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -19,7 +19,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* PDImode for the 40-bit accumulators.  */\n-PARTIAL_INT_MODE (DI);\n+PARTIAL_INT_MODE (DI, 40, PDI);\n \n /* Two of those - covering both accumulators for vector multiplications.  */\n VECTOR_MODE (INT, PDI, 2);"}, {"sha": "ad266fbc85183daa7b40f136a63819a3c595f842", "filename": "gcc/config/m32c/m32c-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fm32c%2Fm32c-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fm32c%2Fm32c-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-modes.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -22,7 +22,7 @@\n /*INT_MODE (PI, 3);*/\n \n /* 24-bit pointers, in 32-bit units */\n-PARTIAL_INT_MODE (SI);\n+PARTIAL_INT_MODE (SI, 24, PSI);\n \n /* 48-bit MULEX result */\n /* INT_MODE (MI, 6); */"}, {"sha": "4e94a6df5975f7815eddfddd36f4882e1da4fb72", "filename": "gcc/config/msp430/msp430-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -1,3 +1,3 @@\n /* 20-bit address */\n-PARTIAL_INT_MODE (SI);\n+PARTIAL_INT_MODE (SI, 20, PSI);\n "}, {"sha": "a77aa26e850e5ac1966d1017b399c7e43085454c", "filename": "gcc/config/rs6000/rs6000-modes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -45,4 +45,4 @@ VECTOR_MODES (FLOAT, 32);     /*       V16HF V8SF V4DF */\n /* Replacement for TImode that only is allowed in GPRs.  We also use PTImode\n    for quad memory atomic operations to force getting an even/odd register\n    combination.  */\n-PARTIAL_INT_MODE (TI);\n+PARTIAL_INT_MODE (TI, 128, PTI);"}, {"sha": "aa56038d6143aadff22dbe2147e0dfe8a014b5ac", "filename": "gcc/config/sh/sh-modes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fsh%2Fsh-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fconfig%2Fsh%2Fsh-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-modes.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -18,9 +18,9 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* The SH uses a partial integer mode to represent the FPSCR register.  */\n-PARTIAL_INT_MODE (SI);\n+PARTIAL_INT_MODE (SI, 22, PSI);\n /* PDI mode is used to represent a function address in a target register.  */\n-PARTIAL_INT_MODE (DI);\n+PARTIAL_INT_MODE (DI, 64, PDI);\n \n /* Vector modes.  */\n VECTOR_MODE  (INT, QI, 2);    /*                 V2QI */"}, {"sha": "12a98f301628bd835cdbcc044c78bd598413d8b6", "filename": "gcc/genmodes.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -644,10 +644,10 @@ reset_float_format (const char *name, const char *format,\n   m->format = format;\n }\n \n-/* Partial integer modes are specified by relation to a full integer mode.\n-   For now, we do not attempt to narrow down their bit sizes.  */\n-#define PARTIAL_INT_MODE(M) \\\n-  make_partial_integer_mode (#M, \"P\" #M, -1U, __FILE__, __LINE__)\n+/* Partial integer modes are specified by relation to a full integer\n+   mode.  */\n+#define PARTIAL_INT_MODE(M,PREC,NAME)\t\t\t\t\\\n+  make_partial_integer_mode (#M, #NAME, PREC, __FILE__, __LINE__)\n static void ATTRIBUTE_UNUSED\n make_partial_integer_mode (const char *base, const char *name,\n \t\t\t   unsigned int precision,\n@@ -684,7 +684,7 @@ make_vector_mode (enum mode_class bclass,\n   struct mode_data *v;\n   enum mode_class vclass = vector_class (bclass);\n   struct mode_data *component = find_mode (base);\n-  char namebuf[8];\n+  char namebuf[16];\n \n   if (vclass == MODE_RANDOM)\n     return;\n@@ -932,7 +932,7 @@ enum machine_mode\\n{\");\n \t end will try to use it for bitfields in structures and the\n \t like, which we do not want.  Only the target md file should\n \t generate BImode widgets.  */\n-      if (first && first->precision == 1)\n+      if (first && first->precision == 1 && c == MODE_INT)\n \tfirst = first->next;\n \n       if (first && last)\n@@ -1202,7 +1202,7 @@ emit_class_narrowest_mode (void)\n     /* Bleah, all this to get the comment right for MIN_MODE_INT.  */\n     tagged_printf (\"MIN_%s\", mode_class_names[c],\n \t\t   modes[c]\n-\t\t   ? (modes[c]->precision != 1\n+\t\t   ? ((c != MODE_INT || modes[c]->precision != 1)\n \t\t      ? modes[c]->name\n \t\t      : (modes[c]->next\n \t\t\t ? modes[c]->next->name"}, {"sha": "8c4cd73a33500c338f2cb052765002214a366377", "filename": "gcc/machmode.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8487c949ad5f1fac62020ab22544422490b37d2/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=d8487c949ad5f1fac62020ab22544422490b37d2", "patch": "@@ -121,11 +121,11 @@ along with GCC; see the file COPYING3.  If not see\n \tto FORMAT.  Use in an ARCH-modes.def to reset the format\n \tof one of the float modes defined in this file.\n \n-     PARTIAL_INT_MODE (MODE);\n+     PARTIAL_INT_MODE (MODE, PRECISION, NAME);\n         declares a mode of class PARTIAL_INT with the same size as\n-\tMODE (which must be an INT mode).  The name of the new mode\n-\tis made by prefixing a P to the name MODE.  This statement\n-\tmay grow a PRECISION argument in the future.\n+\tMODE (which must be an INT mode) and precision PREC.\n+\tOptionally, NAME is the new name of the mode.  NAME is the\n+\tname of the mode.\n \n      VECTOR_MODE (CLASS, MODE, COUNT);\n         Declare a vector mode whose component mode is MODE (of class"}]}