{"sha": "57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhYWYwY2M5ZThiZDk4YzNhYWM1OGYyMWQyZmY0ZjYxMGJjNjM3YQ==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2018-04-08T03:21:08Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T03:21:08Z"}, "message": "[NDS32] Add intrinsic functions for TLB operation and data prefech.\n\ngcc/\n\t* config/nds32/constants.md (unspec_volatile_element): Add values for\n\tTLB operation and data prefetch.\n\t* config/nds32/nds32-intrinsic.c: Implementation of intrinsic\n\tfunctions for TLB operation and data prefetch.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32_intrinsic.h: Likewise.\n\t* config/nds32/nds32.c (nds32_dpref_names): Likewise.\n\t(nds32_print_operand): Likewise.\n\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n\nFrom-SVN: r259216", "tree": {"sha": "1995d1fa57e5f75b3936a599e1ec7c80c82fdb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1995d1fa57e5f75b3936a599e1ec7c80c82fdb3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82d800ce372be9ac4e716aaaa431e7d9d4496683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d800ce372be9ac4e716aaaa431e7d9d4496683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d800ce372be9ac4e716aaaa431e7d9d4496683"}], "stats": {"total": 272, "additions": 272, "deletions": 0}, "files": [{"sha": "1cd8f38d86d36aa60294acd873ddac172af03a31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -1,3 +1,15 @@\n+2018-04-08  Monk Chiang  <sh.chiang04@gmail.com>\n+\n+\t* config/nds32/constants.md (unspec_volatile_element): Add values for\n+\tTLB operation and data prefetch.\n+\t* config/nds32/nds32-intrinsic.c: Implementation of intrinsic\n+\tfunctions for TLB operation and data prefetch.\n+\t* config/nds32/nds32-intrinsic.md: Likewise.\n+\t* config/nds32/nds32_intrinsic.h: Likewise.\n+\t* config/nds32/nds32.c (nds32_dpref_names): Likewise.\n+\t(nds32_print_operand): Likewise.\n+\t* config/nds32/nds32.h (nds32_builtins): Likewise.\n+\n 2018-04-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \tAndrew Pinski <pinsika@gcc.gnu.org>\n "}, {"sha": "50594c3e9dc114ba643cd34b5af50d3662af365f", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -110,6 +110,18 @@\n   UNSPEC_VOLATILE_CCTL_VA_WBINVAL_LA\n   UNSPEC_VOLATILE_CCTL_IDX_WBINVAL\n   UNSPEC_VOLATILE_CCTL_VA_LCK\n+  UNSPEC_VOLATILE_DPREF_QW\n+  UNSPEC_VOLATILE_DPREF_HW\n+  UNSPEC_VOLATILE_DPREF_W\n+  UNSPEC_VOLATILE_DPREF_DW\n+  UNSPEC_VOLATILE_TLBOP_TRD\n+  UNSPEC_VOLATILE_TLBOP_TWR\n+  UNSPEC_VOLATILE_TLBOP_RWR\n+  UNSPEC_VOLATILE_TLBOP_RWLK\n+  UNSPEC_VOLATILE_TLBOP_UNLK\n+  UNSPEC_VOLATILE_TLBOP_PB\n+  UNSPEC_VOLATILE_TLBOP_INV\n+  UNSPEC_VOLATILE_TLBOP_FLUA\n   UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN\n ])"}, {"sha": "c4d75d67466dc1e50c8247e8c85e642f1a1efe63", "filename": "gcc/config/nds32/nds32-intrinsic.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.c?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -305,6 +305,42 @@ nds32_expand_triop_builtin (enum insn_code icode, tree exp, rtx target,\n   return target;\n }\n \n+/* Expand builtins that take three operands and the third is immediate.  */\n+static rtx\n+nds32_expand_triopimm_builtin (enum insn_code icode, tree exp, rtx target,\n+\t\t\t       bool return_p, const char *name)\n+{\n+  rtx pat;\n+  rtx op0 = nds32_read_argument (exp, 0);\n+  rtx op1 = nds32_read_argument (exp, 1);\n+  rtx op2 = nds32_read_argument (exp, 2);\n+  int op0_num = return_p ? 1 : 0;\n+  int op1_num = return_p ? 2 : 1;\n+  int op2_num = return_p ? 3 : 2;\n+\n+  if (return_p)\n+    target = nds32_legitimize_target (icode, target);\n+\n+  if (!nds32_check_constant_argument (icode, op2_num, op2, name))\n+    return NULL_RTX;\n+\n+  op0 = nds32_legitimize_argument (icode, op0_num, op0);\n+  op1 = nds32_legitimize_argument (icode, op1_num, op1);\n+  op2 = nds32_legitimize_argument (icode, op2_num, op2);\n+\n+  /* Emit and return the new instruction. */\n+  if (return_p)\n+    pat = GEN_FCN (icode) (target, op0, op1, op2);\n+  else\n+    pat = GEN_FCN (icode) (op0, op1, op2);\n+\n+  if (! pat)\n+    return NULL_RTX;\n+\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Expand builtins for load.  */\n static rtx\n nds32_expand_builtin_load (enum insn_code icode, tree exp, rtx target)\n@@ -463,6 +499,7 @@ static struct builtin_description bdesc_1arg[] =\n   NDS32_BUILTIN(clzsi2, \"clz\", CLZ)\n   NDS32_BUILTIN(unspec_clo, \"clo\", CLO)\n   NDS32_BUILTIN(unspec_wsbh, \"wsbh\", WSBH)\n+  NDS32_BUILTIN(unspec_tlbop_pb, \"tlbop_pb\",TLBOP_PB)\n   NDS32_BUILTIN(unaligned_load_hw, \"unaligned_load_hw\", UALOAD_HW)\n   NDS32_BUILTIN(unaligned_loadsi, \"unaligned_load_w\", UALOAD_W)\n   NDS32_BUILTIN(unaligned_loaddi, \"unaligned_load_dw\", UALOAD_DW)\n@@ -473,6 +510,12 @@ static struct builtin_description bdesc_1arg[] =\n   NDS32_NO_TARGET_BUILTIN(unspec_jral_ton, \"jral_ton\", JRAL_TON)\n   NDS32_NO_TARGET_BUILTIN(unspec_ret_toff, \"ret_toff\", RET_TOFF)\n   NDS32_NO_TARGET_BUILTIN(unspec_jral_iton, \"jral_iton\",JRAL_ITON)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_trd, \"tlbop_trd\", TLBOP_TRD)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_twr, \"tlbop_twr\", TLBOP_TWR)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_rwr, \"tlbop_rwr\", TLBOP_RWR)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_rwlk, \"tlbop_rwlk\", TLBOP_RWLK)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_unlk, \"tlbop_unlk\", TLBOP_UNLK)\n+  NDS32_NO_TARGET_BUILTIN(unspec_tlbop_inv, \"tlbop_inv\", TLBOP_INV)\n   NDS32_NO_TARGET_BUILTIN(unspec_ret_itoff, \"ret_itoff\", RET_ITOFF)\n   NDS32_NO_TARGET_BUILTIN(unspec_set_current_sp,\n \t\t\t  \"set_current_sp\", SET_CURRENT_SP)\n@@ -534,6 +577,15 @@ static struct builtin_description bdesc_3arg[] =\n   NDS32_NO_TARGET_BUILTIN(bsp, \"bsp\", BSP)\n };\n \n+/* Three-argument intrinsics with an immediate third argument.  */\n+static struct builtin_description bdesc_3argimm[] =\n+{\n+  NDS32_NO_TARGET_BUILTIN(prefetch_qw, \"prefetch_qw\", DPREF_QW)\n+  NDS32_NO_TARGET_BUILTIN(prefetch_hw, \"prefetch_hw\", DPREF_HW)\n+  NDS32_NO_TARGET_BUILTIN(prefetch_w, \"prefetch_w\", DPREF_W)\n+  NDS32_NO_TARGET_BUILTIN(prefetch_dw, \"prefetch_dw\", DPREF_DW)\n+};\n+\n /* Intrinsics that load a value.  */\n static struct builtin_description bdesc_load[] =\n {\n@@ -717,6 +769,9 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_SCHE_BARRIER:\n       emit_insn (gen_blockage ());\n       return target;\n+    case NDS32_BUILTIN_TLBOP_FLUA:\n+      emit_insn (gen_unspec_tlbop_flua ());\n+      return target;\n     case NDS32_BUILTIN_SCW:\n       return nds32_expand_scw_builtin (CODE_FOR_unspec_volatile_scw,\n \t\t\t\t       exp, target);\n@@ -752,6 +807,11 @@ nds32_expand_builtin_impl (tree exp,\n     if (d->code == fcode)\n       return nds32_expand_triop_builtin (d->icode, exp, target, d->return_p);\n \n+  for (i = 0, d = bdesc_3argimm; i < ARRAY_SIZE (bdesc_3argimm); i++, d++)\n+    if (d->code == fcode)\n+      return nds32_expand_triopimm_builtin (d->icode, exp, target,\n+\t\t\t\t\t    d->return_p, d->name);\n+\n   for (i = 0, d = bdesc_load; i < ARRAY_SIZE (bdesc_load); i++, d++)\n     if (d->code == fcode)\n       return nds32_expand_builtin_load (d->icode, exp, target);\n@@ -876,6 +936,13 @@ nds32_init_builtins_impl (void)\n   ADD_NDS32_BUILTIN3 (\"cctl_idx_write\", void, integer, unsigned, unsigned,\n \t\t      CCTL_IDX_WRITE);\n \n+  /* PREFETCH  */\n+  ADD_NDS32_BUILTIN3 (\"dpref_qw\", void, ptr_uchar, unsigned, integer, DPREF_QW);\n+  ADD_NDS32_BUILTIN3 (\"dpref_hw\", void, ptr_ushort, unsigned, integer,\n+\t\t      DPREF_HW);\n+  ADD_NDS32_BUILTIN3 (\"dpref_w\", void, ptr_uint, unsigned, integer, DPREF_W);\n+  ADD_NDS32_BUILTIN3 (\"dpref_dw\", void, ptr_ulong, unsigned, integer, DPREF_DW);\n+\n   /* Performance Extension  */\n   ADD_NDS32_BUILTIN1 (\"pe_abs\", integer, integer, ABS);\n   ADD_NDS32_BUILTIN2 (\"pe_ave\", integer, integer, integer, AVE);\n@@ -933,6 +1000,17 @@ nds32_init_builtins_impl (void)\n \n   /* Schedule Barrier */\n   ADD_NDS32_BUILTIN0 (\"schedule_barrier\", void, SCHE_BARRIER);\n+\n+  /* TLBOP  */\n+  ADD_NDS32_BUILTIN1 (\"tlbop_trd\", void, unsigned, TLBOP_TRD);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_twr\", void, unsigned, TLBOP_TWR);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_rwr\", void, unsigned, TLBOP_RWR);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_rwlk\", void, unsigned, TLBOP_RWLK);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_unlk\", void, unsigned, TLBOP_UNLK);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_pb\", unsigned, unsigned, TLBOP_PB);\n+  ADD_NDS32_BUILTIN1 (\"tlbop_inv\", void, unsigned, TLBOP_INV);\n+  ADD_NDS32_BUILTIN0 (\"tlbop_flua\", void, TLBOP_FLUA);\n+\n   /* Unaligned Load/Store  */\n   ADD_NDS32_BUILTIN1 (\"unaligned_load_hw\", short_unsigned, ptr_ushort,\n \t\t      UALOAD_HW);"}, {"sha": "9975e4af498df8c711d2a4a28d3d8c3aaad68c79", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -340,6 +340,47 @@\n   [(set_attr \"type\" \"mmu\")]\n )\n \n+;;PREFETCH\n+\n+(define_insn \"prefetch_qw\"\n+  [(unspec_volatile:QI [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 1 \"nonmemory_operand\" \"r\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_DPREF_QW)]\n+  \"\"\n+  \"dpref\\t%Z2, [%0 + %1]\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"prefetch_hw\"\n+  [(unspec_volatile:HI [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t(match_operand:SI 1 \"nonmemory_operand\" \"r\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_DPREF_HW)]\n+  \"\"\n+  \"dpref\\t%Z2, [%0 + (%1<<1)]\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"prefetch_w\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"    r, r\")\n+\t\t\t(match_operand:SI 1 \"nonmemory_operand\" \"Is15, r\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"   i, i\")] UNSPEC_VOLATILE_DPREF_W)]\n+  \"\"\n+  \"@\n+  dprefi.w\\t%Z2, [%0 + %1]\n+  dpref\\t%Z2, [%0 + (%1<<2)]\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n+\n+(define_insn \"prefetch_dw\"\n+  [(unspec_volatile:DI [(match_operand:SI 0 \"register_operand\"  \"   r, r\")\n+\t\t\t(match_operand:SI 1 \"nonmemory_operand\" \"Is15, r\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"   i, i\")] UNSPEC_VOLATILE_DPREF_DW)]\n+  \"\"\n+  \"@\n+  dprefi.d\\t%Z2, [%0 + %1]\n+  dpref\\t%Z2, [%0 + (%1<<3)]\"\n+  [(set_attr \"type\" \"misc\")]\n+)\n \n ;; Performance Extension\n \n@@ -734,6 +775,66 @@\n   [(set_attr \"type\"    \"alu\")\n    (set_attr \"length\"    \"4\")]\n )\n+\n+;; TLBOP Intrinsic\n+\n+(define_insn \"unspec_tlbop_trd\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_TRD)]\n+  \"\"\n+  \"tlbop\\t%0, TRD\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_twr\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_TWR)]\n+  \"\"\n+  \"tlbop\\t%0, TWR\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_rwr\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_RWR)]\n+  \"\"\n+  \"tlbop\\t%0, RWR\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_rwlk\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_RWLK)]\n+  \"\"\n+  \"tlbop\\t%0, RWLK\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_unlk\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_UNLK)]\n+  \"\"\n+  \"tlbop\\t%0, UNLK\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_pb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SI [(match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_PB))]\n+  \"\"\n+  \"tlbop\\t%0, %1, PB\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_inv\"\n+  [(unspec_volatile:SI [(match_operand:SI 0 \"register_operand\" \"r\")] UNSPEC_VOLATILE_TLBOP_INV)]\n+  \"\"\n+  \"tlbop\\t%0, INV\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n+(define_insn \"unspec_tlbop_flua\"\n+  [(unspec_volatile:SI [(const_int 0)] UNSPEC_VOLATILE_TLBOP_FLUA)]\n+  \"\"\n+  \"tlbop\\tFLUA\"\n+  [(set_attr \"type\" \"mmu\")]\n+)\n+\n ;;Unaligned Load/Store\n \n (define_expand \"unaligned_load_hw\""}, {"sha": "9bd7f3fdb0cf6ed328a21040ab7d721a08679b97", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -266,6 +266,16 @@ static const char * const nds32_cctl_names[] =\n   \"L1I_IX_WWD\"\n };\n \n+static const char * const nds32_dpref_names[] =\n+{\n+  \"SRD\",\n+  \"MRD\",\n+  \"SWR\",\n+  \"MWR\",\n+  \"PTE\",\n+  \"CLWR\"\n+};\n+\n /* Defining register allocation order for performance.\n    We want to allocate callee-saved registers after others.\n    It may be used by nds32_adjust_reg_alloc_order().  */\n@@ -3002,6 +3012,10 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value + 16]);\n       return;\n \n+    case 'Z': /* dpref  */\n+      fprintf (stream, \"%s\", nds32_dpref_names[op_value]);\n+      return;\n+\n     default :\n       /* Unknown flag.  */\n       output_operand_lossage (\"invalid operand output code\");"}, {"sha": "13664f187e5badd9c65cdaf764da24cf3ca82894", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -466,6 +466,18 @@ enum nds32_builtins\n   NDS32_BUILTIN_CCTL_L1D_INVALALL,\n   NDS32_BUILTIN_CCTL_L1D_WBALL_ALVL,\n   NDS32_BUILTIN_CCTL_L1D_WBALL_ONE_LVL,\n+  NDS32_BUILTIN_DPREF_QW,\n+  NDS32_BUILTIN_DPREF_HW,\n+  NDS32_BUILTIN_DPREF_W,\n+  NDS32_BUILTIN_DPREF_DW,\n+  NDS32_BUILTIN_TLBOP_TRD,\n+  NDS32_BUILTIN_TLBOP_TWR,\n+  NDS32_BUILTIN_TLBOP_RWR,\n+  NDS32_BUILTIN_TLBOP_RWLK,\n+  NDS32_BUILTIN_TLBOP_UNLK,\n+  NDS32_BUILTIN_TLBOP_PB,\n+  NDS32_BUILTIN_TLBOP_INV,\n+  NDS32_BUILTIN_TLBOP_FLUA,\n   NDS32_BUILTIN_UALOAD_HW,\n   NDS32_BUILTIN_UALOAD_W,\n   NDS32_BUILTIN_UALOAD_DW,"}, {"sha": "3feb587a8e263b0204e37ae977a281f569f92d2d", "filename": "gcc/config/nds32/nds32_intrinsic.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32_intrinsic.h?ref=57aaf0cc9e8bd98c3aac58f21d2ff4f610bc637a", "patch": "@@ -226,6 +226,16 @@ enum nds32_cctl_idxwrite\n   __NDS32_CCTL_L1I_IX_WWD__\n };\n \n+enum nds32_dpref\n+{\n+  __NDS32_DPREF_SRD__,\n+  __NDS32_DPREF_MRD__,\n+  __NDS32_DPREF_SWR__,\n+  __NDS32_DPREF_MWR__,\n+  __NDS32_DPREF_PTE__,\n+  __NDS32_DPREF_CLWR__\n+};\n+\n /* ------------------------------------------------------------------------ */\n \n /* Define intrinsic register name macro for compatibility.  */\n@@ -409,6 +419,14 @@ enum nds32_cctl_idxwrite\n #define NDS32_CCTL_L1D_IX_WWD           __NDS32_CCTL_L1D_IX_WWD__\n #define NDS32_CCTL_L1I_IX_WTAG          __NDS32_CCTL_L1I_IX_WTAG__\n #define NDS32_CCTL_L1I_IX_WWD           __NDS32_CCTL_L1I_IX_WWD__\n+\n+#define NDS32_DPREF_SRD                 __NDS32_DPREF_SRD__\n+#define NDS32_DPREF_MRD                 __NDS32_DPREF_MRD__\n+#define NDS32_DPREF_SWR                 __NDS32_DPREF_SWR__\n+#define NDS32_DPREF_MWR                 __NDS32_DPREF_MWR__\n+#define NDS32_DPREF_PTE                 __NDS32_DPREF_PTE__\n+#define NDS32_DPREF_CLWR                __NDS32_DPREF_CLWR__\n+\n /* ------------------------------------------------------------------------ */\n \n \n@@ -501,6 +519,14 @@ enum nds32_cctl_idxwrite\n   (__builtin_nds32_svs ((a), (b)))\n #define __nds32__sva(a, b) \\\n   (__builtin_nds32_sva ((a), (b)))\n+#define __nds32__dpref_qw(a, b, subtype) \\\n+  (__builtin_nds32_dpref_qw ((a), (b), (subtype)))\n+#define __nds32__dpref_hw(a, b, subtype) \\\n+  (__builtin_nds32_dpref_hw ((a), (b), (subtype)))\n+#define __nds32__dpref_w(a, b, subtype) \\\n+  (__builtin_nds32_dpref_w ((a), (b), (subtype)))\n+#define __nds32__dpref_dw(a, b, subtype) \\\n+  (__builtin_nds32_dpref_dw ((a), (b), (subtype)))\n \n #define __nds32__teqz(a, swid) \\\n   (__builtin_nds32_teqz ((a), (swid)))\n@@ -573,4 +599,21 @@ enum nds32_cctl_idxwrite\n #define __nds32__fmfcfg() \\\n   (__builtin_nds32_fmfcfg())\n \n+#define __nds32__tlbop_trd(a) \\\n+  (__builtin_nds32_tlbop_trd ((a)))\n+#define __nds32__tlbop_twr(a) \\\n+  (__builtin_nds32_tlbop_twr ((a)))\n+#define __nds32__tlbop_rwr(a) \\\n+  (__builtin_nds32_tlbop_rwr ((a)))\n+#define __nds32__tlbop_rwlk(a) \\\n+  (__builtin_nds32_tlbop_rwlk ((a)))\n+#define __nds32__tlbop_unlk(a) \\\n+  (__builtin_nds32_tlbop_unlk ((a)))\n+#define __nds32__tlbop_pb(a) \\\n+  (__builtin_nds32_tlbop_pb ((a)))\n+#define __nds32__tlbop_inv(a) \\\n+  (__builtin_nds32_tlbop_inv ((a)))\n+#define __nds32__tlbop_flua() \\\n+(__builtin_nds32_tlbop_flua())\n+\n #endif /* nds32_intrinsic.h */"}]}