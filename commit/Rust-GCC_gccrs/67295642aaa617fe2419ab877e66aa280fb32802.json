{"sha": "67295642aaa617fe2419ab877e66aa280fb32802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyOTU2NDJhYWE2MTdmZTI0MTlhYjg3N2U2NmFhMjgwZmIzMjgwMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-03-24T16:44:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-03-24T16:44:17Z"}, "message": "tree-ssa-live.c (remove_unused_scope_block_p): Remove set but unused variable \"ann\".\n\n\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Remove set but\n\tunused variable \"ann\".\n\t(remove_unused_locals): Likewise.\n\n\t* tree-ssa-copy.c (propagate_tree_value_into_stmt): Remove useless\n\tstatement.\n\n\t* cfglayout.c (fixup_reorder_chain): Do not dereference E_FALL\n\tafter it is freed.\n\nFrom-SVN: r171408", "tree": {"sha": "5c77c1979d07ecb5e2c5b708bf2756a6c827b543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c77c1979d07ecb5e2c5b708bf2756a6c827b543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67295642aaa617fe2419ab877e66aa280fb32802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67295642aaa617fe2419ab877e66aa280fb32802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67295642aaa617fe2419ab877e66aa280fb32802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67295642aaa617fe2419ab877e66aa280fb32802/comments", "author": null, "committer": null, "parents": [{"sha": "3a4639b4a6e06bc17482d8c7bd156ff0ebd35fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4639b4a6e06bc17482d8c7bd156ff0ebd35fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4639b4a6e06bc17482d8c7bd156ff0ebd35fb6"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "c8b1c7d782412ee994385fbb671ec9210ed5a554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67295642aaa617fe2419ab877e66aa280fb32802", "patch": "@@ -1,3 +1,15 @@\n+2011-03-24  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Remove set but\n+\tunused variable \"ann\".\n+\t(remove_unused_locals): Likewise.\n+\n+\t* tree-ssa-copy.c (propagate_tree_value_into_stmt): Remove useless\n+\tstatement.\n+\n+\t* cfglayout.c (fixup_reorder_chain): Do not dereference E_FALL\n+\tafter it is freed.\n+\n 2011-03-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_preferred_reload_class): Return NO_REGS"}, {"sha": "05aed221f0bd3881c4772eeeede903683082672d", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=67295642aaa617fe2419ab877e66aa280fb32802", "patch": "@@ -766,7 +766,7 @@ fixup_reorder_chain (void)\n     {\n       edge e_fall, e_taken, e;\n       rtx bb_end_insn;\n-      basic_block nb;\n+      basic_block nb, src_bb;\n       edge_iterator ei;\n \n       if (EDGE_COUNT (bb->succs) == 0)\n@@ -894,7 +894,10 @@ fixup_reorder_chain (void)\n \t    continue;\n \t}\n \n-      /* We got here if we need to add a new jump insn.  */\n+      /* We got here if we need to add a new jump insn. \n+\t Note force_nonfallthru can delete E_FALL and thus we have to\n+\t save E_FALL->src prior to the call to force_nonfallthru.  */\n+      src_bb = e_fall->src;\n       nb = force_nonfallthru (e_fall);\n       if (nb)\n \t{\n@@ -905,9 +908,9 @@ fixup_reorder_chain (void)\n \t  bb = nb;\n \n \t  /* Make sure new bb is tagged for correct section (same as\n-\t     fall-thru source, since you cannot fall-throu across\n+\t     fall-thru source, since you cannot fall-thru across\n \t     section boundaries).  */\n-\t  BB_COPY_PARTITION (e_fall->src, single_pred (bb));\n+\t  BB_COPY_PARTITION (src_bb, single_pred (bb));\n \t  if (flag_reorder_blocks_and_partition\n \t      && targetm.have_named_sections\n \t      && JUMP_P (BB_END (bb))"}, {"sha": "8062c03369734f0d5be8606970bfe8480f5242d6", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=67295642aaa617fe2419ab877e66aa280fb32802", "patch": "@@ -244,7 +244,6 @@ propagate_tree_value_into_stmt (gimple_stmt_iterator *gsi, tree val)\n         expr = gimple_assign_rhs1 (stmt);\n       propagate_tree_value (&expr, val);\n       gimple_assign_set_rhs_from_tree (gsi, expr);\n-      stmt = gsi_stmt (*gsi);\n     }\n   else if (gimple_code (stmt) == GIMPLE_COND)\n     {"}, {"sha": "c99d987b6b63044cfa71e107de10c96d4ddece8f", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67295642aaa617fe2419ab877e66aa280fb32802/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=67295642aaa617fe2419ab877e66aa280fb32802", "patch": "@@ -427,7 +427,6 @@ remove_unused_scope_block_p (tree scope)\n {\n   tree *t, *next;\n   bool unused = !TREE_USED (scope);\n-  var_ann_t ann;\n   int nsubblocks = 0;\n \n   for (t = &BLOCK_VARS (scope); *t; t = next)\n@@ -467,8 +466,7 @@ remove_unused_scope_block_p (tree scope)\n \t info about optimized-out variables in the scope blocks.\n \t Exception are the scope blocks not containing any instructions\n \t at all so user can't get into the scopes at first place.  */\n-      else if ((ann = var_ann (*t)) != NULL\n-\t       && is_used_p (*t))\n+      else if (var_ann (*t) != NULL && is_used_p (*t))\n \tunused = false;\n       else if (TREE_CODE (*t) == LABEL_DECL && TREE_USED (*t))\n \t/* For labels that are still used in the IL, the decision to\n@@ -690,7 +688,6 @@ remove_unused_locals (void)\n   basic_block bb;\n   tree var, t;\n   referenced_var_iterator rvi;\n-  var_ann_t ann;\n   bitmap global_unused_vars = NULL;\n   unsigned srcidx, dstidx, num;\n \n@@ -766,7 +763,7 @@ remove_unused_locals (void)\n     {\n       var = VEC_index (tree, cfun->local_decls, srcidx);\n       if (TREE_CODE (var) != FUNCTION_DECL\n-\t  && (!(ann = var_ann (var))\n+\t  && (!var_ann (var)\n \t      || !is_used_p (var)))\n \t{\n \t  if (is_global_var (var))\n@@ -798,7 +795,7 @@ remove_unused_locals (void)\n       FOR_EACH_LOCAL_DECL (cfun, ix, var)\n \tif (TREE_CODE (var) == VAR_DECL\n \t    && is_global_var (var)\n-\t    && (ann = var_ann (var)) != NULL\n+\t    && var_ann (var) != NULL\n \t    && is_used_p (var))\n \t  mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n "}]}