{"sha": "1082fd1084c181f2dfe01b482be65f00691f895f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4MmZkMTA4NGMxODFmMmRmZTAxYjQ4MmJlNjVmMDA2OTFmODk1Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-10-16T17:02:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-16T17:02:07Z"}, "message": "re PR c++/28211 (wrong linkage of template argument, diagnostic could be improved)\n\n\tPR c++/28211\n\t* parser.c (cp_parser_template_argument): Don't consider \"&var\" a\n\tpossible constant-expression.\n\t* pt.c (convert_nontype_argument): Refine handling of arguments of\n\tpointer type.\n\tPR c++/28211\n\t* g++.dg/tc1/dr49.C: Tweak error messages.\n\t* g++.dg/parse/template21.C: New test.\n\nFrom-SVN: r117787", "tree": {"sha": "b80e749957205e5b3b97ac86578383e1f1d210c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b80e749957205e5b3b97ac86578383e1f1d210c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1082fd1084c181f2dfe01b482be65f00691f895f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1082fd1084c181f2dfe01b482be65f00691f895f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1082fd1084c181f2dfe01b482be65f00691f895f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1082fd1084c181f2dfe01b482be65f00691f895f/comments", "author": null, "committer": null, "parents": [{"sha": "0573fa421a606a6c76468c8bcd813e02f71283d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0573fa421a606a6c76468c8bcd813e02f71283d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0573fa421a606a6c76468c8bcd813e02f71283d1"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "a4403a38da8bef4b30a7e87a1eabbc24260a2ebd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -1,3 +1,11 @@\n+2006-10-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28211\n+\t* parser.c (cp_parser_template_argument): Don't consider \"&var\" a\n+\tpossible constant-expression.\n+\t* pt.c (convert_nontype_argument): Refine handling of arguments of\n+\tpointer type.\n+\n 2006-10-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28506"}, {"sha": "691b742fd831ae039afe09775f0733173573ae18", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -9285,7 +9285,7 @@ cp_parser_template_argument (cp_parser* parser)\n \t      /* A variable without external linkage might still be a\n \t\t valid constant-expression, so no error is issued here\n \t\t if the external-linkage check fails.  */\n-\t      if (!DECL_EXTERNAL_LINKAGE_P (argument))\n+\t      if (!address_p && !DECL_EXTERNAL_LINKAGE_P (argument))\n \t\tcp_parser_simulate_error (parser);\n \t    }\n \t  else if (is_overloaded_fn (argument))"}, {"sha": "744871f35a1466b7668bc962e8208bedc6628caf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -3655,10 +3655,46 @@ convert_nontype_argument (tree type, tree expr)\n \n \tHere, we do not care about functions, as they are invalid anyway\n \tfor a parameter of type pointer-to-object.  */\n-      bool constant_address_p =\n-\t(TREE_CODE (expr) == ADDR_EXPR\n-\t || TREE_CODE (expr_type) == ARRAY_TYPE\n-\t || (DECL_P (expr) && DECL_TEMPLATE_PARM_P (expr)));\n+\n+      if (DECL_P (expr) && DECL_TEMPLATE_PARM_P (expr))\n+\t/* Non-type template parameters are OK.  */\n+\t;\n+      else if (TREE_CODE (expr) != ADDR_EXPR\n+\t       && TREE_CODE (expr_type) != ARRAY_TYPE)\n+\t{\n+\t  if (TREE_CODE (expr) == VAR_DECL)\n+\t    {\n+\t      error (\"%qD is not a valid template argument \"\n+\t\t     \"because %qD is a variable, not the address of \"\n+\t\t     \"a variable\",\n+\t\t     expr, expr);\n+\t      return NULL_TREE;\n+\t    }\n+\t  /* Other values, like integer constants, might be valid\n+\t     non-type arguments of some other type.  */\n+\t  return error_mark_node;\n+\t}\n+      else\n+\t{\n+\t  tree decl;\n+\n+\t  decl = ((TREE_CODE (expr) == ADDR_EXPR)\n+\t\t  ? TREE_OPERAND (expr, 0) : expr);\n+\t  if (TREE_CODE (decl) != VAR_DECL)\n+\t    {\n+\t      error (\"%qE is not a valid template argument of type %qT \"\n+\t\t     \"because %qE is not a variable\",\n+\t\t     expr, type, decl);\n+\t      return NULL_TREE;\n+\t    }\n+\t  else if (!DECL_EXTERNAL_LINKAGE_P (decl))\n+\t    {\n+\t      error (\"%qE is not a valid template argument of type %qT \"\n+\t\t     \"because %qD does not have external linkage\",\n+\t\t     expr, type, decl);\n+\t      return NULL_TREE;\n+\t    }\n+\t}\n \n       expr = decay_conversion (expr);\n       if (expr == error_mark_node)\n@@ -3667,13 +3703,6 @@ convert_nontype_argument (tree type, tree expr)\n       expr = perform_qualification_conversions (type, expr);\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n-\n-      if (!constant_address_p)\n-\t{\n-\t  error (\"%qE is not a valid template argument for type %qT \"\n-\t\t \"because it is not a constant pointer\", expr, type);\n-\t  return NULL_TREE;\n-\t}\n     }\n   /* [temp.arg.nontype]/5, bullet 3\n "}, {"sha": "31144a8ce6e0482472a53bae7815f9c0a56a8b17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -1,3 +1,9 @@\n+2006-10-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28211\n+\t* g++.dg/tc1/dr49.C: Tweak error messages.\n+\t* g++.dg/parse/template21.C: New test.\n+\n 2006-10-15  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR middle-end/20491"}, {"sha": "e1ac76916e7bbf013a01efcd65b8dce544d82b4e", "filename": "gcc/testsuite/g++.dg/parse/template21.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/28211\n+\n+template <const int*> class Helper { };\n+const int foo = 0;\n+typedef Helper<&foo> HelperType; // { dg-error \"linkage|type\" }"}, {"sha": "753d96b6977174804e3f2ea0caa1bf5256cfb23e", "filename": "gcc/testsuite/g++.dg/tc1/dr49.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1082fd1084c181f2dfe01b482be65f00691f895f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr49.C?ref=1082fd1084c181f2dfe01b482be65f00691f895f", "patch": "@@ -10,8 +10,8 @@ template struct R<&p>; // OK\n template struct S<&p>; // OK due to parameter adjustment\n \n int *ptr;\n-template struct R<ptr>; // { dg-error \"constant\" }\n-template struct S<ptr>; // { dg-error \"constant\" }\n+template struct R<ptr>; // { dg-error \"argument\" }\n+template struct S<ptr>; // { dg-error \"argument\" }\n \n int v[5];\n template struct R<v>; // OK due to implicit argument conversion"}]}