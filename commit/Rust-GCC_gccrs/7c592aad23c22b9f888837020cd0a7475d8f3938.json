{"sha": "7c592aad23c22b9f888837020cd0a7475d8f3938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1OTJhYWQyM2MyMmI5Zjg4ODgzNzAyMGNkMGE3NDc1ZDhmMzkzOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-22T07:03:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-22T11:08:44Z"}, "message": "tree-optimization/95268 - fix commoning of clobbers\n\nThis fixes handling of clobbers when commoning stores.\n\n2020-05-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95268\n\t* tree-ssa-sink.c (sink_common_stores_to_bb): Handle clobbers\n\tproperly.\n\n\t* g++.dg/torture/pr95268.C: New testcase.", "tree": {"sha": "d47c1442833949cabfd9859b60558c08db162065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47c1442833949cabfd9859b60558c08db162065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c592aad23c22b9f888837020cd0a7475d8f3938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c592aad23c22b9f888837020cd0a7475d8f3938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c592aad23c22b9f888837020cd0a7475d8f3938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c592aad23c22b9f888837020cd0a7475d8f3938/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1089a367c4b05b5e3f072adca8913904ed65928c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1089a367c4b05b5e3f072adca8913904ed65928c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1089a367c4b05b5e3f072adca8913904ed65928c"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "b0ba14b33056f4463fbadc37d9c27e7c100a700d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c592aad23c22b9f888837020cd0a7475d8f3938", "patch": "@@ -1,3 +1,9 @@\n+2020-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95268\n+\t* tree-ssa-sink.c (sink_common_stores_to_bb): Handle clobbers\n+\tproperly.\n+\n 2020-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-streamer.c (record_common_node): Fix hash value of pre-streamed"}, {"sha": "5a628260925c73813925a15ec30759d1e9fea7e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c592aad23c22b9f888837020cd0a7475d8f3938", "patch": "@@ -1,3 +1,8 @@\n+2020-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95268\n+\t* g++.dg/torture/pr95268.C: New testcase.\n+\n 2020-05-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95248"}, {"sha": "8385b86e179dbf0c03957a865d961c60879b057c", "filename": "gcc/testsuite/g++.dg/torture/pr95268.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95268.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95268.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95268.C?ref=7c592aad23c22b9f888837020cd0a7475d8f3938", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-require-effective-target lp64 }\n+// { dg-additional-options \"-Wno-overflow\" }\n+\n+#include <algorithm>\n+\n+extern short var_0, var_2, var_3, var_9, var_11, var_13, var_14, var_19, var_22,\n+    var_32, var_37, var_44, var_57, var_59, var_63, var_70;\n+extern unsigned var_5;\n+extern char var_6, var_12, var_18, var_38, var_39, var_43, var_55, var_64,\n+    arr_35;\n+extern long var_7, var_8, var_10, var_15, var_25, var_56;\n+extern int var_21, var_36, var_51, var_65, var_68, arr_7;\n+extern bool var_46, var_58, var_67;\n+\n+void test() {\n+  var_12 = 0 >= 0;\n+  var_13 = arr_7;\n+  var_14 = (unsigned long)var_7 >> -564810131 + 564810189;\n+  var_15 = var_5;\n+  var_18 = -602739307623583391;\n+  var_19 = -~0;\n+  var_21 = var_10 >> var_8 - 17101301574577641170ULL;\n+  var_22 = var_5;\n+  var_25 = var_9;\n+  var_32 = std::max((unsigned)var_2, var_5);\n+  var_36 = 9557;\n+  var_37 = 394545925;\n+  var_38 = 0 >= 0;\n+  var_39 = var_5;\n+  var_43 = 0;\n+  var_44 = arr_35;\n+  var_46 = var_7;\n+  for (short a = 0; a < 9; a = 021)\n+    for (short b = 0; b < 024; b += 4)\n+      var_51 = std::min((long long)(var_2 ?: var_9), (long long)var_9);\n+  var_55 = var_0;\n+  var_56 = 3896150587;\n+  var_57 = var_11;\n+  var_58 = var_59 = var_11;\n+  var_63 = 73;\n+  var_64 = 10393232284806619711ULL;\n+  var_65 = var_3;\n+  var_67 = var_6;\n+  var_68 = var_70 = 0;\n+}"}, {"sha": "b61ecf12d1fe2fb650b998ec9bfe1dede0dd2889", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c592aad23c22b9f888837020cd0a7475d8f3938/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=7c592aad23c22b9f888837020cd0a7475d8f3938", "patch": "@@ -534,7 +534,9 @@ sink_common_stores_to_bb (basic_block bb)\n \t      /* ??? We could handle differing SSA uses in the LHS by inserting\n \t\t PHIs for them.  */\n \t      else if (! operand_equal_p (gimple_assign_lhs (first_store),\n-\t\t\t\t\t  gimple_assign_lhs (def), 0))\n+\t\t\t\t\t  gimple_assign_lhs (def), 0)\n+\t\t       || (gimple_clobber_p (first_store)\n+\t\t\t   && !gimple_clobber_p (def)))\n \t\t{\n \t\t  first_store = NULL;\n \t\t  break;\n@@ -546,16 +548,17 @@ sink_common_stores_to_bb (basic_block bb)\n \n \t  /* Check if we need a PHI node to merge the stored values.  */\n \t  bool allsame = true;\n-\t  for (unsigned i = 1; i < vdefs.length (); ++i)\n-\t    {\n-\t      gimple *def = SSA_NAME_DEF_STMT (vdefs[i]);\n-\t      if (! operand_equal_p (gimple_assign_rhs1 (first_store),\n-\t\t\t\t     gimple_assign_rhs1 (def), 0))\n-\t\t{\n-\t\t  allsame = false;\n-\t\t  break;\n-\t\t}\n-\t    }\n+\t  if (!gimple_clobber_p (first_store))\n+\t    for (unsigned i = 1; i < vdefs.length (); ++i)\n+\t      {\n+\t\tgimple *def = SSA_NAME_DEF_STMT (vdefs[i]);\n+\t\tif (! operand_equal_p (gimple_assign_rhs1 (first_store),\n+\t\t\t\t       gimple_assign_rhs1 (def), 0))\n+\t\t  {\n+\t\t    allsame = false;\n+\t\t    break;\n+\t\t  }\n+\t      }\n \n \t  /* We cannot handle aggregate values if we need to merge them.  */\n \t  tree type = TREE_TYPE (gimple_assign_lhs (first_store));"}]}