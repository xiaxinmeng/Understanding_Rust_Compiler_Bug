{"sha": "7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "node_id": "C_kwDOANBUbNoAKDdiOTYyNzRhMzQwYmMwZTliY2FlZjliYWZmM2E0NGVjMmYxMmMzZGY", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-18T15:23:30Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-28T12:55:09Z"}, "message": "c++, coroutines: Improve check for throwing final await [PR104051].\n\nWe check that the final_suspend () method returns a sane type (i.e. a class\nor structure) but, unfortunately, that check has to be later than the one\nfor a throwing case.  If the use returns some nonsensical type from the\nmethod, we need to handle that in the checking for noexcept.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/104051\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_diagnose_throwing_final_aw_expr): Handle\n\tnon-target expression inputs.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr104051.C: New test.", "tree": {"sha": "3c128f69639489b6f60785c8bb5b3a42b6042bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c128f69639489b6f60785c8bb5b3a42b6042bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cae3bb65c873a2191613f7888fe949553a21f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cae3bb65c873a2191613f7888fe949553a21f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cae3bb65c873a2191613f7888fe949553a21f9e"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "551ddc9cc4139110cdc11072ac03c54e556f84d6", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "patch": "@@ -883,13 +883,14 @@ coro_diagnose_throwing_fn (tree fndecl)\n static bool\n coro_diagnose_throwing_final_aw_expr (tree expr)\n {\n-  tree t = TARGET_EXPR_INITIAL (expr);\n+  if (TREE_CODE (expr) == TARGET_EXPR)\n+    expr = TARGET_EXPR_INITIAL (expr);\n   tree fn = NULL_TREE;\n-  if (TREE_CODE (t) == CALL_EXPR)\n-    fn = CALL_EXPR_FN(t);\n-  else if (TREE_CODE (t) == AGGR_INIT_EXPR)\n-    fn = AGGR_INIT_EXPR_FN (t);\n-  else if (TREE_CODE (t) == CONSTRUCTOR)\n+  if (TREE_CODE (expr) == CALL_EXPR)\n+    fn = CALL_EXPR_FN (expr);\n+  else if (TREE_CODE (expr) == AGGR_INIT_EXPR)\n+    fn = AGGR_INIT_EXPR_FN (expr);\n+  else if (TREE_CODE (expr) == CONSTRUCTOR)\n     return false;\n   else\n     {"}, {"sha": "ce7ae55405a6e8df4282bbf20b2e1c9eb6278003", "filename": "gcc/testsuite/g++.dg/coroutines/pr104051.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr104051.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b96274a340bc0e9bcaef9baff3a44ec2f12c3df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr104051.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr104051.C?ref=7b96274a340bc0e9bcaef9baff3a44ec2f12c3df", "patch": "@@ -0,0 +1,29 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+#include <coroutine>\n+#include <vector>\n+template <typename> struct promise {\n+  struct final_awaitable {\n+    bool await_ready() noexcept;\n+    template <typename Promise>\n+    std::coroutine_handle<>\n+        await_suspend(std::coroutine_handle<Promise>) noexcept;\n+    void await_resume() noexcept;\n+  };\n+  auto get_return_object() {\n+    return std::coroutine_handle<promise>::from_promise(*this);\n+  }\n+  auto initial_suspend() { return std::suspend_always(); }\n+  auto final_suspend() noexcept { return true; }\n+  void unhandled_exception();\n+};\n+template <typename T> struct task {\n+  using promise_type = promise<T>;\n+  task(std::coroutine_handle<promise<T>>);\n+  bool await_ready();\n+  std::coroutine_handle<> await_suspend(std::coroutine_handle<>);\n+  T await_resume();\n+};\n+task<std::vector<int>> foo() { // { dg-error {awaitable type 'bool' is not a structure} }\n+  while ((co_await foo()).empty())\n+    ;\n+}"}]}