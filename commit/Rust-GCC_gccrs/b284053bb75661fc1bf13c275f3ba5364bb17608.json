{"sha": "b284053bb75661fc1bf13c275f3ba5364bb17608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4NDA1M2JiNzU2NjFmYzFiZjEzYzI3NWYzYmE1MzY0YmIxNzYwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-23T09:50:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-23T09:50:14Z"}, "message": "dwarf2out: Emit DW_AT_location for global register vars during early dwarf [PR101905]\n\nThe following patch emits DW_AT_location for global register variables\nalready during early dwarf, since usually late_global_decl hook isn't even\ncalled for those, as nothing needs to be emitted for them.\n\n2021-08-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/101905\n\t* dwarf2out.c (gen_variable_die): Add DW_AT_location for global\n\tregister variables already during early_dwarf if possible.\n\n\t* gcc.dg/guality/pr101905.c: New test.", "tree": {"sha": "ca6bb8b9025081593f9526debac0fb624756580b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6bb8b9025081593f9526debac0fb624756580b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b284053bb75661fc1bf13c275f3ba5364bb17608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b284053bb75661fc1bf13c275f3ba5364bb17608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b284053bb75661fc1bf13c275f3ba5364bb17608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b284053bb75661fc1bf13c275f3ba5364bb17608/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac3bcc813f26e6dc4c3b037d9d5c5a84f7f62cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3bcc813f26e6dc4c3b037d9d5c5a84f7f62cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3bcc813f26e6dc4c3b037d9d5c5a84f7f62cf4"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "07a479f63828b494abe4ac8aff992238c28eb108", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b284053bb75661fc1bf13c275f3ba5364bb17608/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b284053bb75661fc1bf13c275f3ba5364bb17608/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b284053bb75661fc1bf13c275f3ba5364bb17608", "patch": "@@ -24476,7 +24476,26 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t      && DECL_RTL_SET_P (decl_or_origin))))\n     {\n       if (early_dwarf)\n-\tadd_pubname (decl_or_origin, var_die);\n+\t{\n+\t  add_pubname (decl_or_origin, var_die);\n+\t  /* For global register variables, emit DW_AT_location if possible\n+\t     already during early_dwarf, as late_global_decl won't be usually\n+\t     called.  */\n+\t  if (DECL_HARD_REGISTER (decl_or_origin)\n+\t      && TREE_STATIC (decl_or_origin)\n+\t      && !decl_by_reference_p (decl_or_origin)\n+\t      && !get_AT (var_die, DW_AT_location)\n+\t      && !get_AT (var_die, DW_AT_const_value)\n+\t      && DECL_RTL_SET_P (decl_or_origin)\n+\t      && REG_P (DECL_RTL (decl_or_origin)))\n+\t    {\n+\t      dw_loc_descr_ref descr\n+\t\t= reg_loc_descriptor (DECL_RTL (decl_or_origin),\n+\t\t\t\t      VAR_INIT_STATUS_INITIALIZED);\n+\t      if (descr)\n+\t\tadd_AT_loc (var_die, DW_AT_location, descr);\n+\t    }\n+\t}\n       else\n \tadd_location_or_const_value_attribute (var_die, decl_or_origin,\n \t\t\t\t\t       decl == NULL);"}, {"sha": "71b7516905be56183ab788ac1b800caa96cc900f", "filename": "gcc/testsuite/gcc.dg/guality/pr101905.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b284053bb75661fc1bf13c275f3ba5364bb17608/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr101905.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b284053bb75661fc1bf13c275f3ba5364bb17608/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr101905.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr101905.c?ref=b284053bb75661fc1bf13c275f3ba5364bb17608", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n+/* { dg-options \"-g -ffixed-r15\" } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O0\" } } */\n+\n+register unsigned long long regVar asm (\"r15\");\n+\n+int\n+main()\n+{\n+  regVar = 0xdeadbeefcafebabeULL;\n+  asm (\"nop\" : \"+r\" (regVar));\n+  asm volatile (\"nop\");\t\t/* { dg-final { gdb-test . \"regVar\" \"0xdeadbeefcafebabeULL\" } } */\n+  asm volatile (\"nop\" : : \"r\" (regVar));\n+  return 0;\n+}"}]}