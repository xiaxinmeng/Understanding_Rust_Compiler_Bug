{"sha": "25348c94e7a966a65fe94f62563ad1982f2f9923", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzNDhjOTRlN2E5NjZhNjVmZTk0ZjYyNTYzYWQxOTgyZjJmOTkyMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-01-23T16:16:33Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-01-23T16:16:33Z"}, "message": "real.c (real_floor, real_ceil): Tweak to allow input and output arguments to overlap.\n\n\n\t* real.c (real_floor, real_ceil): Tweak to allow input and output\n\targuments to overlap.\n\t(real_round): New function to implement round(3m) semantics.\n\t* real.h (real_round): Prototype here.\n\t* builtins.c (fold_builtin_round): New function to constant fold\n\tround, roundf and roundl.\n\t(fold_builtin): Call fold_builtin_round for BUILT_IN_ROUND{,F,L}.\n\n\t* gcc.dg/builtins-29.c: New test case.\n\nFrom-SVN: r76428", "tree": {"sha": "a4e7871be466032d2019d3dd74d2f1702b848756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4e7871be466032d2019d3dd74d2f1702b848756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25348c94e7a966a65fe94f62563ad1982f2f9923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25348c94e7a966a65fe94f62563ad1982f2f9923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25348c94e7a966a65fe94f62563ad1982f2f9923", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25348c94e7a966a65fe94f62563ad1982f2f9923/comments", "author": null, "committer": null, "parents": [{"sha": "69f2de23b2401a6602271262a103270a81d5f175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f2de23b2401a6602271262a103270a81d5f175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f2de23b2401a6602271262a103270a81d5f175"}], "stats": {"total": 83, "additions": 75, "deletions": 8}, "files": [{"sha": "e70f2e8e3bcb7ebc3cbd83077985c8a141117447", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25348c94e7a966a65fe94f62563ad1982f2f9923", "patch": "@@ -1,3 +1,15 @@\n+2004-01-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* real.c (real_floor, real_ceil): Tweak to allow input and output\n+\targuments to overlap.\n+\t(real_round): New function to implement round(3m) semantics.\n+\t* real.h (real_round): Prototype here.\n+\t* builtins.c (fold_builtin_round): New function to constant fold\n+\tround, roundf and roundl.\n+\t(fold_builtin): Call fold_builtin_round for BUILT_IN_ROUND{,F,L}.\n+\n+\t* gcc.dg/builtins-29.c: New test case.\n+\n 2004-01-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR optimization/13819"}, {"sha": "2dfc0e8a89e3c13ca7ac9ecfc4b773399b987994", "filename": "gcc/builtins.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=25348c94e7a966a65fe94f62563ad1982f2f9923", "patch": "@@ -156,6 +156,7 @@ static tree fold_builtin_cabs (tree, tree, tree);\n static tree fold_builtin_trunc (tree);\n static tree fold_builtin_floor (tree);\n static tree fold_builtin_ceil (tree);\n+static tree fold_builtin_round (tree);\n static tree fold_builtin_bitop (tree);\n static tree fold_builtin_memcpy (tree);\n static tree fold_builtin_mempcpy (tree);\n@@ -5923,6 +5924,38 @@ fold_builtin_ceil (tree exp)\n   return fold_trunc_transparent_mathfn (exp);\n }\n \n+/* Fold function call to builtin round, roundf or roundl.  Return\n+   NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_round (tree exp)\n+{\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree arg;\n+\n+  if (! validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  /* Optimize ceil of constant value.  */\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+    {\n+      REAL_VALUE_TYPE x;\n+\n+      x = TREE_REAL_CST (arg);\n+      if (! REAL_VALUE_ISNAN (x) || ! flag_errno_math)\n+\t{\n+\t  tree type = TREE_TYPE (exp);\n+\t  REAL_VALUE_TYPE r;\n+\n+\t  real_round (&r, TYPE_MODE (type), &x);\n+\t  return build_real (type, r);\n+\t}\n+    }\n+\n+  return fold_trunc_transparent_mathfn (exp);\n+}\n+\n /* Fold function call to builtin ffs, clz, ctz, popcount and parity\n    and their long and long long variants (i.e. ffsl and ffsll).\n    Return NULL_TREE if no simplification can be made.  */\n@@ -6868,6 +6901,8 @@ fold_builtin (tree exp)\n     case BUILT_IN_ROUND:\n     case BUILT_IN_ROUNDF:\n     case BUILT_IN_ROUNDL:\n+      return fold_builtin_round (exp);\n+\n     case BUILT_IN_NEARBYINT:\n     case BUILT_IN_NEARBYINTF:\n     case BUILT_IN_NEARBYINTL:"}, {"sha": "cd27d3e0501cec3205d0307a735ee576c2abcae4", "filename": "gcc/real.c", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=25348c94e7a966a65fe94f62563ad1982f2f9923", "patch": "@@ -4539,11 +4539,13 @@ void\n real_floor (REAL_VALUE_TYPE *r, enum machine_mode mode,\n \t    const REAL_VALUE_TYPE *x)\n {\n-  do_fix_trunc (r, x);\n-  if (! real_identical (r, x) && r->sign)\n-    do_add (r, r, &dconstm1, 0);\n+  REAL_VALUE_TYPE t;\n+\n+  do_fix_trunc (&t, x);\n+  if (! real_identical (&t, x) && x->sign)\n+    do_add (&t, &t, &dconstm1, 0);\n   if (mode != VOIDmode)\n-    real_convert (r, mode, r);\n+    real_convert (r, mode, &t);\n }\n \n /* Round X to the smallest integer not less then argument, i.e. round\n@@ -4553,9 +4555,25 @@ void\n real_ceil (REAL_VALUE_TYPE *r, enum machine_mode mode,\n \t   const REAL_VALUE_TYPE *x)\n {\n-  do_fix_trunc (r, x);\n-  if (! real_identical (r, x) && ! r->sign)\n-    do_add (r, r, &dconst1, 0);\n+  REAL_VALUE_TYPE t;\n+\n+  do_fix_trunc (&t, x);\n+  if (! real_identical (&t, x) && ! x->sign)\n+    do_add (&t, &t, &dconst1, 0);\n+  if (mode != VOIDmode)\n+    real_convert (r, mode, &t);\n+}\n+\n+/* Round X to the nearest integer, but round halfway cases away from\n+   zero.  */\n+\n+void\n+real_round (REAL_VALUE_TYPE *r, enum machine_mode mode,\n+\t    const REAL_VALUE_TYPE *x)\n+{\n+  do_add (r, x, &dconsthalf, x->sign);\n+  do_fix_trunc (r, r);\n   if (mode != VOIDmode)\n     real_convert (r, mode, r);\n }\n+"}, {"sha": "3ff0356bd65406144f8eacecf5b3cdb435b52b41", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25348c94e7a966a65fe94f62563ad1982f2f9923/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=25348c94e7a966a65fe94f62563ad1982f2f9923", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of floating-point access for GNU compiler.\n    Copyright (C) 1989, 1991, 1994, 1996, 1997, 1998, 1999,\n-   2000, 2002, 2003 Free Software Foundation, Inc.\n+   2000, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -372,5 +372,7 @@ extern void real_floor (REAL_VALUE_TYPE *, enum machine_mode,\n \t\t\tconst REAL_VALUE_TYPE *);\n extern void real_ceil (REAL_VALUE_TYPE *, enum machine_mode,\n \t\t       const REAL_VALUE_TYPE *);\n+extern void real_round (REAL_VALUE_TYPE *, enum machine_mode,\n+\t\t\tconst REAL_VALUE_TYPE *);\n \n #endif /* ! GCC_REAL_H */"}]}