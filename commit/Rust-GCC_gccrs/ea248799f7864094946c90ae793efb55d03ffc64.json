{"sha": "ea248799f7864094946c90ae793efb55d03ffc64", "node_id": "C_kwDOANBUbNoAKGVhMjQ4Nzk5Zjc4NjQwOTQ5NDZjOTBhZTc5M2VmYjU1ZDAzZmZjNjQ", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-24T10:42:19Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-30T14:48:27Z"}, "message": "ast: Refactor SimplePath attribute name\n\nThe getter name was overly complicated and long, this could be\nrefactored to a shorter name.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-tokenstream.cc (TokenStream::visit): Change\n\tgetter name.\n\t* ast/rust-ast.cc (SimplePath::as_string): Change attribute\n\tname.\n\t* ast/rust-ast.h (class SimplePath): Refactor attribute name and\n\tchange getter name.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "b6640034f7ca3950c46f10cb5992bd993ede6e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6640034f7ca3950c46f10cb5992bd993ede6e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea248799f7864094946c90ae793efb55d03ffc64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea248799f7864094946c90ae793efb55d03ffc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea248799f7864094946c90ae793efb55d03ffc64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea248799f7864094946c90ae793efb55d03ffc64/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f580c1f44c47b7b06d2a87ba4dfb3384082cc881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f580c1f44c47b7b06d2a87ba4dfb3384082cc881"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "bbc01a274eef12729f69cd5132b6a96cfd31d650", "filename": "gcc/rust/ast/rust-ast-tokenstream.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-tokenstream.cc?ref=ea248799f7864094946c90ae793efb55d03ffc64", "patch": "@@ -182,7 +182,7 @@ TokenStream::visit (Attribute &attrib)\n void\n TokenStream::visit (SimplePath &path)\n {\n-  if (path.get_has_opening_scope_resolution ())\n+  if (path.has_opening_scope_resolution ())\n     {\n       tokens.push_back (\n \tRust::Token::make (SCOPE_RESOLUTION, path.get_locus ()));"}, {"sha": "dd73e5e2178e16ee53d3d14ce41360737d3444c6", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=ea248799f7864094946c90ae793efb55d03ffc64", "patch": "@@ -272,7 +272,7 @@ std::string\n SimplePath::as_string () const\n {\n   std::string path;\n-  if (has_opening_scope_resolution)\n+  if (opening_scope_resolution)\n     path = \"::\";\n \n   // crappy hack because doing proper for loop would be more code"}, {"sha": "0ce3ff97d57bd79c448a8e0e9c0278cc0675a300", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea248799f7864094946c90ae793efb55d03ffc64/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=ea248799f7864094946c90ae793efb55d03ffc64", "patch": "@@ -367,7 +367,7 @@ class SimplePathSegment : public PathSegment\n // A simple path without generic or type arguments\n class SimplePath\n {\n-  bool has_opening_scope_resolution;\n+  bool opening_scope_resolution;\n   std::vector<SimplePathSegment> segments;\n   Location locus;\n   NodeId node_id;\n@@ -377,7 +377,7 @@ class SimplePath\n   SimplePath (std::vector<SimplePathSegment> path_segments,\n \t      bool has_opening_scope_resolution = false,\n \t      Location locus = Location ())\n-    : has_opening_scope_resolution (has_opening_scope_resolution),\n+    : opening_scope_resolution (has_opening_scope_resolution),\n       segments (std::move (path_segments)), locus (locus),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n@@ -393,9 +393,9 @@ class SimplePath\n \n   std::string as_string () const;\n \n-  bool get_has_opening_scope_resolution () const\n+  bool has_opening_scope_resolution () const\n   {\n-    return has_opening_scope_resolution;\n+    return opening_scope_resolution;\n   }\n \n   Location get_locus () const { return locus; }\n@@ -406,7 +406,7 @@ class SimplePath\n   // path-to-string comparison operator\n   bool operator== (const std::string &rhs) const\n   {\n-    return !has_opening_scope_resolution && segments.size () == 1\n+    return !opening_scope_resolution && segments.size () == 1\n \t   && segments[0].as_string () == rhs;\n   }\n "}]}