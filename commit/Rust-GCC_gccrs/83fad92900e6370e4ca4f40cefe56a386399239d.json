{"sha": "83fad92900e6370e4ca4f40cefe56a386399239d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmYWQ5MjkwMGU2MzcwZTRjYTRmNDBjZWZlNTZhMzg2Mzk5MjM5ZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-18T09:16:19Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-18T09:16:19Z"}, "message": "re PR fortran/70260 (ICE: gimplification failed)\n\n2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/70260\n    * expr.c (gfc_check_assign): Reject assigning to an external\n    symbol.\n    (gfc_check_pointer_assign): Add suppress_type_test\n    argument. Insert line after if. A non-proc pointer can not point\n    to a constant.  Only check types if suppress_type_test is false.\n    * gfortran.h (gfc_check_pointer_assign): Add optional\n    suppress_type_test argument.\n    * resolve.c (gfc_resolve_code):  Move up gfc_check_pointer_assign\n    and give it the extra argument.\n    (resolve_fl_procedure): Set error on value for a function with\n    an inizializer.\n\n2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/70260\n    * gfortran.dg/proc_ptr_result_5.f90:  Add dg-error directive.\n    * gfortran.dg/protected_4.f90: Split line to allow for extra error.\n    * gfortran.dg/protected_6.f90: Likewise.\n    * gfortran.dg/assign_11.f90: New test.\n    * gfortran.dg/pointer_assign_12.f90: New test.\n\nFrom-SVN: r266248", "tree": {"sha": "733da04272d4bc40f47098cfc29208db9487f595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733da04272d4bc40f47098cfc29208db9487f595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83fad92900e6370e4ca4f40cefe56a386399239d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fad92900e6370e4ca4f40cefe56a386399239d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fad92900e6370e4ca4f40cefe56a386399239d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fad92900e6370e4ca4f40cefe56a386399239d/comments", "author": null, "committer": null, "parents": [{"sha": "f163ea822bbd36328ae2af9c47f2fa05ab1077f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f163ea822bbd36328ae2af9c47f2fa05ab1077f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f163ea822bbd36328ae2af9c47f2fa05ab1077f1"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "83920ab8f6d55a957e725dd4453daa7f7f7fba53", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -1,3 +1,18 @@\n+2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/70260\n+\t* expr.c (gfc_check_assign): Reject assigning to an external\n+\tsymbol.\n+\t(gfc_check_pointer_assign): Add suppress_type_test\n+\targument. Insert line after if. A non-proc pointer can not point\n+\tto a constant.  Only check types if suppress_type_test is false.\n+\t* gfortran.h (gfc_check_pointer_assign): Add optional\n+\tsuppress_type_test argument.\n+\t* resolve.c (gfc_resolve_code):  Move up gfc_check_pointer_assign\n+\tand give it the extra argument.\n+\t(resolve_fl_procedure): Set error on value for a function with\n+\tan inizializer.\n+\n 2018-11-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR other/19165"}, {"sha": "388fddab4729205ac897aa0da5b863ae24e8f950", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -3507,6 +3507,18 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \t  return false;\n \t}\n     }\n+  else\n+    {\n+      /* Reject assigning to an external symbol.  For initializers, this\n+\t was already done before, in resolve_fl_procedure.  */\n+      if (sym->attr.flavor == FL_PROCEDURE && sym->attr.external\n+\t  && sym->attr.proc != PROC_MODULE && !rvalue->error)\n+\t{\n+\t  gfc_error (\"Illegal assignment to external procedure at %L\",\n+\t\t     &lvalue->where);\n+\t  return false;\n+\t}\n+    }\n \n   if (rvalue->rank != 0 && lvalue->rank != rvalue->rank)\n     {\n@@ -3643,7 +3655,8 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n    NULLIFY statement.  */\n \n bool\n-gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n+gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n+\t\t\t  bool suppress_type_test)\n {\n   symbol_attribute attr, lhs_attr;\n   gfc_ref *ref;\n@@ -3771,6 +3784,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t     &rvalue->where);\n \t  return false;\n \t}\n+\n       if (rvalue->expr_type == EXPR_VARIABLE && !attr.proc_pointer)\n \t{\n       \t  /* Check for intrinsics.  */\n@@ -3967,6 +3981,16 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \n       return true;\n     }\n+  else\n+    {\n+      /* A non-proc pointer cannot point to a constant.  */\n+      if (rvalue->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_error_now (\"Pointer assignment target cannot be a constant at %L\",\n+\t\t\t &rvalue->where);\n+\t  return false;\n+\t}\n+    }\n \n   if (!gfc_compare_types (&lvalue->ts, &rvalue->ts))\n     {\n@@ -3980,7 +4004,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t   \"polymorphic, or of a type with the BIND or SEQUENCE \"\n \t\t   \"attribute, to be compatible with an unlimited \"\n \t\t   \"polymorphic target\", &lvalue->where);\n-      else\n+      else if (!suppress_type_test)\n \tgfc_error (\"Different types in pointer assignment at %L; \"\n \t\t   \"attempted assignment of %s to %s\", &lvalue->where,\n \t\t   gfc_typename (&rvalue->ts),"}, {"sha": "530e00794fba429616b2c6b8cbf4c6719e37a50d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -3219,7 +3219,8 @@ int gfc_kind_max (gfc_expr *, gfc_expr *);\n \n bool gfc_check_conformance (gfc_expr *, gfc_expr *, const char *, ...) ATTRIBUTE_PRINTF_3;\n bool gfc_check_assign (gfc_expr *, gfc_expr *, int, bool c = true);\n-bool gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n+bool gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n+  bool suppres_type_test = false);\n bool gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);\n \n gfc_expr *gfc_build_default_init_expr (gfc_typespec *, locus *);"}, {"sha": "df7c6cb13ac78a7afedb6399d2bc9ae71d9623d0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -11420,11 +11420,12 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t      t = gfc_check_vardef_context (e, false, false, false,\n \t\t\t\t\t    _(\"pointer assignment\"));\n \t    gfc_free_expr (e);\n+\n+\t    t = gfc_check_pointer_assign (code->expr1, code->expr2, !t) && t;\n+\n \t    if (!t)\n \t      break;\n \n-\t    gfc_check_pointer_assign (code->expr1, code->expr2);\n-\n \t    /* Assigning a class object always is a regular assign.  */\n \t    if (code->expr2->ts.type == BT_CLASS\n \t\t&& code->expr1->ts.type == BT_CLASS\n@@ -12540,6 +12541,9 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n     {\n       gfc_error (\"Function %qs at %L cannot have an initializer\",\n \t\t sym->name, &sym->declared_at);\n+\n+      /* Make sure no second error is issued for this.  */\n+      sym->value->error = 1;\n       return false;\n     }\n "}, {"sha": "571618623e7fd6ab11d7059e76f09d430c626c8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -1,3 +1,12 @@\n+2018-11-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/70260\n+\t* gfortran.dg/proc_ptr_result_5.f90:  Add dg-error directive.\n+\t* gfortran.dg/protected_4.f90: Split line to allow for extra error.\n+\t* gfortran.dg/protected_6.f90: Likewise.\n+\t* gfortran.dg/assign_11.f90: New test.\n+\t* gfortran.dg/pointer_assign_12.f90: New test.\n+\n 2018-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87546"}, {"sha": "81c0286c4f6b2cf5c84a41f7bbe1c6ddb1f10f45", "filename": "gcc/testsuite/gfortran.dg/assign_11.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_11.f90?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR 70260 - this used to ICE\n+! Original test case by Gernard Steinmetz\n+subroutine s (f)\n+   integer, external :: f, g\n+   integer :: h\n+   g = f(2) ! { dg-error \"Illegal assignment to external procedure\" }\n+   h = g(2)\n+end"}, {"sha": "d2ed3d3e369bb051198745bacf66abc13cd743fb", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_12.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_12.f90?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! PR 70260 - this used to ICE\n+! Original test case by Gehard Steinmetz\n+module m\n+   interface gkind\n+      procedure g\n+   end interface\n+contains\n+   integer function g()\n+      g => 1 ! { dg-error \"Pointer assignment target cannot be a constant\" }\n+   end\n+   subroutine f(x)\n+      character(kind=kind(gkind())) :: x\n+   end\n+end"}, {"sha": "36afedf58c7c8a40b1d65ce1a6232a4158e32446", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_5.f90?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -14,6 +14,6 @@ function f()\n      logical(1) function f()\n      end function\n    end interface\n-   f = .true._1\n+   f = .true._1 ! { dg-error \"Illegal assignment\" }\n  end function f\n end program test"}, {"sha": "46e508522b7b9618c8299609bd169497bb30ea88", "filename": "gcc/testsuite/gfortran.dg/protected_4.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_4.f90?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -26,7 +26,8 @@ program main\n   a = 43       ! { dg-error \"variable definition context\" }\n   ap => null() ! { dg-error \"pointer association context\" }\n   nullify(ap)  ! { dg-error \"pointer association context\" }\n-  ap => at     ! { dg-error \"pointer association context\" }\n+  ap => &      ! { dg-error \"pointer association context\" }\n+       & at    ! { dg-error \"Pointer assignment target has PROTECTED attribute\" }\n   ap = 3       ! OK\n   allocate(ap) ! { dg-error \"pointer association context\" }\n   ap = 73      ! OK"}, {"sha": "b386dcf5f1bcf39dcab6430cb5644f084f35e818", "filename": "gcc/testsuite/gfortran.dg/protected_6.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fad92900e6370e4ca4f40cefe56a386399239d/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprotected_6.f90?ref=83fad92900e6370e4ca4f40cefe56a386399239d", "patch": "@@ -22,7 +22,8 @@ program main\n   a = 43       ! { dg-error \"variable definition context\" }\n   ap => null() ! { dg-error \"pointer association context\" }\n   nullify(ap)  ! { dg-error \"pointer association context\" }\n-  ap => at     ! { dg-error \"pointer association context\" }\n+  ap => &      ! { dg-error \"pointer association context\" }\n+       & at    ! { dg-error \"Pointer assignment target has PROTECTED attribute\" }\n   ap = 3       ! OK\n   allocate(ap) ! { dg-error \"pointer association context\" }\n   ap = 73      ! OK"}]}