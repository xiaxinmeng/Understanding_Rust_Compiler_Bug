{"sha": "656218ab982cc22b826227045826c92743143af1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2MjE4YWI5ODJjYzIyYjgyNjIyNzA0NTgyNmM5Mjc0MzE0M2FmMQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-20T11:33:21Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-20T11:33:40Z"}, "message": "Fortran: Fix OpenMP's 'if(simd:' etc. conditions\n\ngcc/fortran/ChangeLog:\n\n\t* openmp.c (gfc_match_omp_clauses): Re-order 'if' clause pasing\n\tto avoid creating spurious symbols.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/lastprivate-conditional-10.f90: New test.", "tree": {"sha": "c133194474a2e0c74e5a1e8854d35cda80e3d29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c133194474a2e0c74e5a1e8854d35cda80e3d29b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/656218ab982cc22b826227045826c92743143af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656218ab982cc22b826227045826c92743143af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/656218ab982cc22b826227045826c92743143af1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656218ab982cc22b826227045826c92743143af1/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1763ec9b20c0146a5a47f2259a44db1fbb9c923a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1763ec9b20c0146a5a47f2259a44db1fbb9c923a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1763ec9b20c0146a5a47f2259a44db1fbb9c923a"}], "stats": {"total": 124, "additions": 122, "deletions": 2}, "files": [{"sha": "50983737af4e1c66b9721ce654d96bc151dd7b33", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656218ab982cc22b826227045826c92743143af1/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656218ab982cc22b826227045826c92743143af1/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=656218ab982cc22b826227045826c92743143af1", "patch": "@@ -1299,8 +1299,6 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t      && c->if_expr == NULL\n \t      && gfc_match (\"if ( \") == MATCH_YES)\n \t    {\n-\t      if (gfc_match (\"%e )\", &c->if_expr) == MATCH_YES)\n-\t\tcontinue;\n \t      if (!openacc)\n \t\t{\n \t\t  /* This should match the enum gfc_omp_if_kind order.  */\n@@ -1323,6 +1321,8 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t  if (i < OMP_IF_LAST)\n \t\t    continue;\n \t\t}\n+\t      if (gfc_match (\"%e )\", &c->if_expr) == MATCH_YES)\n+\t\tcontinue;\n \t      gfc_current_locus = old_loc;\n \t    }\n \t  if ((mask & OMP_CLAUSE_IF_PRESENT)"}, {"sha": "1cecdc485781ac2818961de308570c619063fab5", "filename": "gcc/testsuite/gfortran.dg/gomp/pr67500.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656218ab982cc22b826227045826c92743143af1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr67500.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656218ab982cc22b826227045826c92743143af1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr67500.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr67500.f90?ref=656218ab982cc22b826227045826c92743143af1", "patch": "@@ -0,0 +1,57 @@\n+! Fortran version of PR c/67500\n+! { dg-do compile }\n+\n+subroutine f1\n+  !$omp declare simd simdlen(d)   ! { dg-error \"requires a scalar INTEGER expression\" }\n+end subroutine\n+\n+subroutine f2\n+  !$omp declare simd simdlen(0.5)  ! { dg-error \"requires a scalar INTEGER expression\" }\n+end\n+\n+subroutine f3 (i)\n+  !$omp declare simd simdlen(-2)   ! { dg-warning \"INTEGER expression of SIMDLEN clause at .1. must be positive\" }\n+end subroutine\n+\n+subroutine f4\n+  !$omp declare simd simdlen(0)\t   ! { dg-warning \"INTEGER expression of SIMDLEN clause at .1. must be positive\" }\n+end\n+\n+subroutine foo(p, d, n)\n+  integer, allocatable :: p(:)\n+  real, value :: d\n+  integer, value :: n\n+  integer :: i\n+\n+  !$omp simd safelen(d)     ! { dg-error \"requires a scalar INTEGER expression\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd safelen(0.5)   ! { dg-error \"requires a scalar INTEGER expression\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd safelen(-2)    ! { dg-warning \"INTEGER expression of SAFELEN clause at .1. must be positive\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd safelen(0)     ! { dg-warning \"INTEGER expression of SAFELEN clause at .1. must be positive\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd aligned(p:n)   ! { dg-error \"requires a scalar positive constant integer alignment expression\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd aligned(p:0.5)  ! { dg-error \"requires a scalar positive constant integer alignment expression\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd aligned(p:-2)  ! { dg-error \"requires a scalar positive constant integer alignment expression\" }\n+  do i = 1, 16\n+  end do\n+\n+  !$omp simd aligned(p:0)    ! { dg-error \"requires a scalar positive constant integer alignment expression\" }\n+  do i = 1, 16\n+  end do\n+end"}, {"sha": "116166c48ee0aa61186c6c6b402d687857c98ca2", "filename": "libgomp/testsuite/libgomp.fortran/lastprivate-conditional-10.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656218ab982cc22b826227045826c92743143af1/libgomp%2Ftestsuite%2Flibgomp.fortran%2Flastprivate-conditional-10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656218ab982cc22b826227045826c92743143af1/libgomp%2Ftestsuite%2Flibgomp.fortran%2Flastprivate-conditional-10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Flastprivate-conditional-10.f90?ref=656218ab982cc22b826227045826c92743143af1", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do run }\n+! Fortran version of libgomp.c-c++-common/lastprivate-conditional-10.c\n+\n+module m\n+  implicit none\n+  integer :: v = 0\n+  integer :: x = 0\n+contains\n+  integer function foo (a)\n+    integer, contiguous :: a(0:)\n+    integer i\n+\n+    !$omp parallel do simd lastprivate (conditional: x) schedule(simd : static) if (simd : .false.)\n+    do i = 0, 127\n+      if (a(i) /= 0) x = a(i)\n+    end do\n+    foo = x\n+  end\n+\n+  integer function bar (a, b)\n+    integer, contiguous :: a(0:), b(0:)\n+    integer :: i\n+    !$omp parallel\n+    !$omp do simd lastprivate (conditional: x, v) schedule(static, 16) simdlen (1)\n+    do i = 16, 127\n+      if (a(i) /= 0) x = a(i);\n+      if (b(i) /= 0) v = b(i) + 10;\n+    end do\n+    !$omp end parallel\n+    bar = x\n+  end\n+\n+  integer function baz (a)\n+    integer, contiguous :: a(0:)\n+    integer :: i\n+    !$omp parallel do simd if (simd : .false.) lastprivate (conditional: x) schedule(simd : dynamic, 16)\n+    do i = 0, 127\n+      if (a(i) /= 0) x = a(i) + 5\n+    end do\n+    baz = x\n+  end\n+end module m\n+\n+program main\n+  use m\n+  implicit none\n+  integer :: a(0:127), b(0:127), i\n+  do i = 0, 127\n+      if (mod(i, 11) == 2) then\n+         a(i) =  i + 10\n+      else\n+        a(i) = 0\n+      endif\n+      if (mod(i, 13) == 5) then\n+        b(i) = i * 2\n+      else\n+        b(i) = 0\n+      endif\n+  end do\n+  if (foo (a) /= 133) stop 1\n+  if (bar (b, a) /= 244 .or. v /= 143) stop 2\n+  if (baz (b) /= 249) stop 3\n+end"}]}