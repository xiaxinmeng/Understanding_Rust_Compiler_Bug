{"sha": "9615f239753d1c6151d5459b7f552f43c4bd21c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxNWYyMzk3NTNkMWM2MTUxZDU0NTliN2Y1NTJmNDNjNGJkMjFjOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-05-12T15:10:54Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-05-12T15:10:54Z"}, "message": "rs6000.c (print_operand): Calculate signed constant more clearly.\n\n        * rs6000.c (print_operand) [w]: Calculate signed constant more clearly.\n        (rs6000_allocate_stack_space): Print as hexadecimal value.\n        * rs6000.h (CONST_OK_FOR_LETTER_P): 'L' checks for a signed,\n        16-bit shifted constant.  Fix typo for 'P'.\n        (EXTRA_CONSTARINT): 'T' checks for a 32-bit mask operand.\n        * rs6000.md (movsi, addsi3_internal1, movdi, adddi3_internal1):\n        Use 'L' for shifted constant.\n        (anddi3_internal3): Fix typo.\n        (32-bit mask patterns): Use 'T'.\n\nCo-Authored-By: Richard Henderson <rth@cygnus.com>\n\nFrom-SVN: r26904", "tree": {"sha": "944695fa7e614ae1dd727cfc5f616d8f8c39e9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944695fa7e614ae1dd727cfc5f616d8f8c39e9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9615f239753d1c6151d5459b7f552f43c4bd21c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9615f239753d1c6151d5459b7f552f43c4bd21c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9615f239753d1c6151d5459b7f552f43c4bd21c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9615f239753d1c6151d5459b7f552f43c4bd21c9/comments", "author": null, "committer": null, "parents": [{"sha": "7f8e55a0b9ee9e49badd7bf1e825f9056ed4ba95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8e55a0b9ee9e49badd7bf1e825f9056ed4ba95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8e55a0b9ee9e49badd7bf1e825f9056ed4ba95"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "14aebfef9b0c810e379e8dc895d9e0b033cd5acc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9615f239753d1c6151d5459b7f552f43c4bd21c9", "patch": "@@ -1,3 +1,16 @@\n+Wed May 12 18:08:48 1999  David Edelsohn     <edelsohn@gnu.org>\n+\t\t\t  Richard Henderson  <rth@cygnus.com>\n+\n+        * rs6000.c (print_operand) [w]: Calculate signed constant more clearly.\n+        (rs6000_allocate_stack_space): Print as hexadecimal value.\n+        * rs6000.h (CONST_OK_FOR_LETTER_P): 'L' checks for a signed,\n+        16-bit shifted constant.  Fix typo for 'P'.\n+\t(EXTRA_CONSTARINT): 'T' checks for a 32-bit mask operand.\n+\t* rs6000.md (movsi, addsi3_internal1, movdi, adddi3_internal1):\n+\tUse 'L' for shifted constant.\n+\t(anddi3_internal3): Fix typo.\n+\t(32-bit mask patterns): Use 'T'.\n+\n Wed May 12 07:30:31 1999  Bruce Korb <ddsinc09@ix.netcom.com>\n \n \t* fixinc/fixincl.c(quoted_file_exists): new procedure to ensure that"}, {"sha": "d3861e9ed1e794f25b54ea57ac45f40bd16a19e3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9615f239753d1c6151d5459b7f552f43c4bd21c9", "patch": "@@ -3063,7 +3063,7 @@ print_operand (file, x, code)\n       {\n \tint value = (INT_LOWPART (x) >> 16) & 0xffff;\n \n-\t/* Solaris assembler doesn't like lis 0,0x80000 */\n+\t/* Solaris assembler doesn't like lis 0,0x8000 */\n \tif (DEFAULT_ABI == ABI_SOLARIS && (value & 0x8000) != 0)\n \t  fprintf (file, \"%d\", value | (~0 << 16));\n \telse\n@@ -3122,8 +3122,7 @@ print_operand (file, x, code)\n       /* If constant, low-order 16 bits of constant, signed.  Otherwise, write\n \t normally.  */\n       if (INT_P (x))\n-\tfprintf (file, \"%d\",\n-\t\t (INT_LOWPART (x) & 0xffff) - 2 * (INT_LOWPART (x) & 0x8000));\n+\tfprintf (file, \"%d\", ((INT_LOWPART (x) & 0xffff) ^ 0x8000) - 0x8000);\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -3915,7 +3914,7 @@ rs6000_output_load_toc_table (file, reg)\n \t\t   reg_names[reg], reg_names[0], reg_names[reg]);\n       rs6000_pic_labelno++;\n     }\n-  else if (!TARGET_64BIT)\n+  else if (! TARGET_64BIT)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n       asm_fprintf (file, \"\\t{liu|lis} %s,\", reg_names[reg]);\n@@ -3959,7 +3958,7 @@ rs6000_allocate_stack_space (file, size, copy_r12)\n \t  if (copy_r12)\n \t    fprintf (file, \"\\tmr %s,%s\\n\", reg_names[12], reg_names[1]);\n \n-\t  asm_fprintf (file, \"\\t{liu|lis} %s,%d\\n\\t{oril|ori} %s,%s,%d\\n\",\n+\t  asm_fprintf (file, \"\\t{liu|lis} %s,0x%x\\n\\t{oril|ori} %s,%s,%d\\n\",\n \t\t       reg_names[0], (neg_size >> 16) & 0xffff,\n \t\t       reg_names[0], reg_names[0], neg_size & 0xffff);\n \t  asm_fprintf (file,\n@@ -3975,7 +3974,7 @@ rs6000_allocate_stack_space (file, size, copy_r12)\n \t\t reg_names[1], neg_size, reg_names[1]);\n       else\n \t{\n-\t  asm_fprintf (file, \"\\t{liu|lis} %s,%d\\n\\t{oril|ori} %s,%s,%d\\n\",\n+\t  asm_fprintf (file, \"\\t{liu|lis} %s,0x%x\\n\\t{oril|ori} %s,%s,%d\\n\",\n \t\t       reg_names[0], (neg_size >> 16) & 0xffff,\n \t\t       reg_names[0], reg_names[0], neg_size & 0xffff);\n \t  asm_fprintf (file, \"\\t{cax|add} %s,%s,%s\\n\", reg_names[1],\n@@ -4211,7 +4210,7 @@ output_prolog (file, size)\n \t    {\n \t      int neg_size = info->main_save_offset - info->total_size;\n \t      loc = 0;\n-\t      asm_fprintf (file, \"\\t{liu|lis} %s,%d\\n\\t{oril|ori} %s,%s,%d\\n\",\n+\t      asm_fprintf (file, \"\\t{liu|lis} %s,0x%x\\n\\t{oril|ori} %s,%s,%d\\n\",\n \t\t\t   reg_names[0], (neg_size >> 16) & 0xffff,\n \t\t\t   reg_names[0], reg_names[0], neg_size & 0xffff);\n "}, {"sha": "0ca9782af29bd9068b06e2e991d395302edfc316", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9615f239753d1c6151d5459b7f552f43c4bd21c9", "patch": "@@ -1087,10 +1087,10 @@ enum reg_class\n    C is the letter, and VALUE is a constant value.\n    Return 1 if VALUE is in the range specified by C.\n \n-   `I' is signed 16-bit constants\n+   `I' is a signed 16-bit constant\n    `J' is a constant with only the high-order 16 bits non-zero\n    `K' is a constant with only the low-order 16 bits non-zero\n-   `L' is a constant that can be placed into a mask operand\n+   `L' is a signed 16-bit constant shifted left 16 bits\n    `M' is a constant that is greater than 31\n    `N' is a constant that is an exact power of two\n    `O' is the constant zero\n@@ -1100,11 +1100,12 @@ enum reg_class\n    ( (C) == 'I' ? (unsigned HOST_WIDE_INT) ((VALUE) + 0x8000) < 0x10000\t\\\n    : (C) == 'J' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0\t\\\n    : (C) == 'K' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff)) == 0\t\t\\\n-   : (C) == 'L' ? mask_constant (VALUE)\t\t\t\t\t\\\n+   : (C) == 'L' ? (((VALUE) & 0xffff) == 0\t\t\t\t\\\n+\t\t   && ((VALUE) >> 31 == -1 || (VALUE) >> 31 == 0))\t\\\n    : (C) == 'M' ? (VALUE) > 31\t\t\t\t\t\t\\\n    : (C) == 'N' ? exact_log2 (VALUE) >= 0\t\t\t\t\\\n    : (C) == 'O' ? (VALUE) == 0\t\t\t\t\t\t\\\n-   : (C) == 'P' ? (unsigned HOST_WIDE_INT) ((- (VALUE)) + 0x8000) < 0x1000 \\\n+   : (C) == 'P' ? (unsigned HOST_WIDE_INT) ((- (VALUE)) + 0x8000) < 0x10000 \\\n    : 0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n@@ -1126,12 +1127,14 @@ enum reg_class\n    'Q' means that is a memory operand that is just an offset from a reg.\n    'R' is for AIX TOC entries.\n    'S' is a constant that can be placed into a 64-bit mask operand\n+   'T' is a consatnt that can be placed into a 32-bit mask operand\n    'U' is for V.4 small data references.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n   ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG\t\\\n    : (C) == 'R' ? LEGITIMATE_CONSTANT_POOL_ADDRESS_P (OP)\t\t\\\n    : (C) == 'S' ? mask64_operand (OP, VOIDmode)\t\t\t\t\\\n+   : (C) == 'T' ? mask_operand (OP, VOIDmode)\t\t\t\t\\\n    : (C) == 'U' ? ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS) \\\n \t\t   && small_data_operand (OP, GET_MODE (OP)))\t\t\\\n    : 0)"}, {"sha": "73728a8fd17fd21f548034bbd4887f0e62cb331e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9615f239753d1c6151d5459b7f552f43c4bd21c9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9615f239753d1c6151d5459b7f552f43c4bd21c9", "patch": "@@ -916,7 +916,7 @@\n (define_insn \"*addsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,?r,r\")\n \t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,b,r,b\")\n-\t\t (match_operand:SI 2 \"add_operand\" \"r,I,I,J\")))]\n+\t\t (match_operand:SI 2 \"add_operand\" \"r,I,I,L\")))]\n   \"\"\n   \"@\n    {cax|add} %0,%1,%2\n@@ -1853,7 +1853,7 @@\n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t(match_operand:SI 2 \"and_operand\" \"?r,L,K,J\")))\n+\t\t(match_operand:SI 2 \"and_operand\" \"?r,T,K,J\")))\n    (clobber (match_scratch:CC 3 \"=X,X,x,x\"))]\n   \"\"\n   \"@\n@@ -1870,7 +1870,7 @@\n (define_insn \"*andsi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L,r,K,J,L\"))\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,T,r,K,J,T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n@@ -1907,7 +1907,7 @@\n (define_insn \"*andsi3_internal3\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,L,r,K,J,L\"))\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,T,r,K,J,T\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r\")\n \t(and:SI (match_dup 1)\n@@ -2908,7 +2908,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n-\t\t(match_operand:SI 3 \"mask_operand\" \"L\")))]\n+\t\t(match_operand:SI 3 \"mask_operand\" \"T\")))]\n   \"\"\n   \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,%m3,%M3\")\n \n@@ -2917,7 +2917,7 @@\n \t(compare:CC (and:SI\n \t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n-\t\t     (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t     (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n   \"\"\n@@ -2929,7 +2929,7 @@\n \t(compare:CC (and:SI\n \t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"ri\"))\n-\t\t     (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t     (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (rotate:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n@@ -3093,7 +3093,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t(match_operand:SI 3 \"mask_operand\" \"L\")))]\n+\t\t(match_operand:SI 3 \"mask_operand\" \"T\")))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n   \"{rlinm|rlwinm} %0,%1,%h2,%m3,%M3\")\n \n@@ -3102,7 +3102,7 @@\n \t(compare:CC\n \t (and:SI (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n@@ -3114,7 +3114,7 @@\n \t(compare:CC\n \t (and:SI (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (ashift:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n@@ -3216,7 +3216,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t     (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t(match_operand:SI 3 \"mask_operand\" \"L\")))]\n+\t\t(match_operand:SI 3 \"mask_operand\" \"T\")))]\n   \"includes_rshift_p (operands[2], operands[3])\"\n   \"{rlinm|rlwinm} %0,%1,%s2,%m3,%M3\")\n \n@@ -3225,7 +3225,7 @@\n \t(compare:CC\n \t (and:SI (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n   \"includes_rshift_p (operands[2], operands[3])\"\n@@ -3237,7 +3237,7 @@\n \t(compare:CC\n \t (and:SI (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"i\"))\n-\t\t (match_operand:SI 3 \"mask_operand\" \"L\"))\n+\t\t (match_operand:SI 3 \"mask_operand\" \"T\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n@@ -4819,7 +4819,7 @@\n (define_insn \"*adddi3_internal1\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,?r,r\")\n \t(plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,b,r,b\")\n-\t\t (match_operand:DI 2 \"add_operand\" \"r,I,I,J\")))]\n+\t\t (match_operand:DI 2 \"add_operand\" \"r,I,I,L\")))]\n   \"TARGET_POWERPC64\"\n   \"@\n    add %0,%1,%2\n@@ -5475,7 +5475,7 @@\n    and. %0,%1,%2\n    andi. %0,%1,%b2\n    andis. %0,%1,%u2\n-   rldic%B2. %3,%1,0,%S2\"\n+   rldic%B2. %0,%1,0,%S2\"\n   [(set_attr \"type\" \"compare,compare,compare,delayed_compare\")])\n \n (define_expand \"iordi3\"\n@@ -5975,7 +5975,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,r,r,r,r,r,*q,*c*l,*h\")\n-\t(match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,J,n,R,*h,r,r,0\"))]\n+\t(match_operand:SI 1 \"input_operand\" \"r,U,m,r,I,L,n,R,*h,r,r,0\"))]\n   \"gpc_reg_operand (operands[0], SImode)\n    || gpc_reg_operand (operands[1], SImode)\"\n   \"@\n@@ -6214,7 +6214,7 @@\n \n (define_insn \"*movsf_softfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,r\")\n-\t(match_operand:SF 1 \"input_operand\" \"r,m,r,I,J,R,G,Fn\"))]\n+\t(match_operand:SF 1 \"input_operand\" \"r,m,r,I,L,R,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n    || gpc_reg_operand (operands[1], SFmode)) && TARGET_SOFT_FLOAT\"\n   \"@\n@@ -6601,7 +6601,7 @@\n \n (define_insn \"*movdi_64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,r,f,f,m,r,*h,*h\")\n-\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,J,nF,R,f,m,f,*h,r,0\"))]\n+\t(match_operand:DI 1 \"input_operand\" \"r,m,r,I,L,nF,R,f,m,f,*h,r,0\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\""}]}