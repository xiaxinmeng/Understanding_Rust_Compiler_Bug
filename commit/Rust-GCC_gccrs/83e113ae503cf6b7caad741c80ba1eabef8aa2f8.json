{"sha": "83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlMTEzYWU1MDNjZjZiN2NhYWQ3NDFjODBiYTFlYWJlZjhhYTJmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-03T14:48:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-03T14:48:14Z"}, "message": "tree-inline.c (initialize_inlined_parameters): Pass proper function context to gimplify_body.\n\n\t* tree-inline.c (initialize_inlined_parameters): Pass proper function\n\tcontext to gimplify_body.\n\t(walk_tree): Don't walk into types twice.\n\t(walk_tree, case POINTER_TYPE): Deal with mutually recursive pointers.\n\nFrom-SVN: r84058", "tree": {"sha": "858697c4229a8a6d958deda49db908fa2d17dfb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/858697c4229a8a6d958deda49db908fa2d17dfb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e113ae503cf6b7caad741c80ba1eabef8aa2f8/comments", "author": null, "committer": null, "parents": [{"sha": "51fa2e5fc3fbebd7ecb1e3fb9d9dea794c26410f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51fa2e5fc3fbebd7ecb1e3fb9d9dea794c26410f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51fa2e5fc3fbebd7ecb1e3fb9d9dea794c26410f"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "7080815c770556801c5c0e47b7d57140d056a596", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e113ae503cf6b7caad741c80ba1eabef8aa2f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e113ae503cf6b7caad741c80ba1eabef8aa2f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "patch": "@@ -1,5 +1,10 @@\n 2004-07-03  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree-inline.c (initialize_inlined_parameters): Pass proper function\n+\tcontext to gimplify_body.\n+\t(walk_tree): Don't walk into types twice.\n+\t(walk_tree, case POINTER_TYPE): Deal with mutually recursive pointers.\n+\n \t* tree-sra.c (generate_element_init): Remove any useless conversions.\n \t\n \t* gimplify.c (gimplify_conversion): Remove stripping useless"}, {"sha": "15fb9282e72fd302fb859d01ced09e7327989cc1", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e113ae503cf6b7caad741c80ba1eabef8aa2f8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e113ae503cf6b7caad741c80ba1eabef8aa2f8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=83e113ae503cf6b7caad741c80ba1eabef8aa2f8", "patch": "@@ -863,7 +863,7 @@ initialize_inlined_parameters (inline_data *id, tree args, tree static_chain,\n     }\n \n   if (gimplify_init_stmts_p && lang_hooks.gimple_before_inlining)\n-    gimplify_body (&init_stmts, fn);\n+    gimplify_body (&init_stmts, current_function_decl);\n \n   declare_inline_vars (bind_expr, vars);\n   return init_stmts;\n@@ -2038,19 +2038,19 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n       tree decl = DECL_EXPR_DECL (*tp);\n       tree type = TREE_TYPE (decl);\n \n-      /* Walk into fields of the DECL if it's not a type, then into fields\n-\t of the type in both cases.  */\n-\n-      if (TREE_CODE (decl) != TYPE_DECL\n-\t  && TREE_CODE (decl) != FIELD_DECL && TREE_CODE (decl) != PARM_DECL)\n+      /* Walk into fields of the DECL if it's not a type.  */\n+      if (TREE_CODE (decl) != TYPE_DECL)\n \t{\n-\t  WALK_SUBTREE (DECL_INITIAL (decl));\n+\t  if (TREE_CODE (decl) != FIELD_DECL && TREE_CODE (decl) != PARM_DECL)\n+\t    WALK_SUBTREE (DECL_INITIAL (decl));\n+\n \t  WALK_SUBTREE (DECL_SIZE (decl));\n-\t  WALK_SUBTREE (DECL_SIZE_UNIT (decl));\n+\t  WALK_SUBTREE_TAIL (DECL_SIZE_UNIT (decl));\n \t}\n \n-      /* First do the common fields via recursion, then the fields we only\n-\t do when we are declaring the type or object.  */\n+      /* Otherwise, we are declaring a type.  First do the common fields via\n+\t recursion, then the fields we only do when we are declaring the type\n+\t or object.  */\n       WALK_SUBTREE (type);\n       WALK_SUBTREE (TYPE_SIZE (type));\n       WALK_SUBTREE (TYPE_SIZE_UNIT (type));\n@@ -2198,6 +2198,28 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n \n \tcase POINTER_TYPE:\n \tcase REFERENCE_TYPE:\n+\t  /* We have to worry about mutually recursive pointers.  These can't\n+\t     be written in C.  They can in Ada.  It's pathlogical, but\n+\t     there's an ACATS test (c38102a) that checks it.  Deal with this\n+\t     by checking if we're pointing to another pointer, that one\n+\t     points to another pointer, that one does too, and we have no htab.\n+\t     If so, get a hash table.  We check three levels deep to avoid\n+\t     the cost of the hash table if we don't need one.  */\n+\t  if (POINTER_TYPE_P (TREE_TYPE (*tp))\n+\t      && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (*tp)))\n+\t      && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (TREE_TYPE (*tp))))\n+\t      && !htab)\n+\t    {\n+\t      result = walk_tree_without_duplicates (&TREE_TYPE (*tp),\n+\t\t\t\t\t\t     func, data);\n+\t      if (result)\n+\t\treturn result;\n+\n+\t      break;\n+\t    }\n+\n+\t  /* ... fall through ... */\n+\n \tcase COMPLEX_TYPE:\n \t  WALK_SUBTREE_TAIL (TREE_TYPE (*tp));\n \t  break;"}]}