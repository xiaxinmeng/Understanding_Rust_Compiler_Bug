{"sha": "2a976020603589e897fcfa3276590ef50b489d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5NzYwMjA2MDM1ODllODk3ZmNmYTMyNzY1OTBlZjUwYjQ4OWQzNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-03T23:39:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-16T13:40:57Z"}, "message": "Warn used and not used symbols in section with the same name\n\nWhen SECTION_RETAIN is used, issue a warning when a symbol without used\nattribute and a symbol with used attribute are placed in the section with\nthe same name, like\n\nint __attribute__((used,section(\".data.foo\"))) foo2 = 2;\nint __attribute__((section(\".data.foo\"))) foo1 = 1;\n\nsince assembler will put them in different sections with the same section\nname.\n\ngcc/\n\n\tPR target/98146\n\t* varasm.c (switch_to_section): Warn when a symbol without used\n\tattribute and a symbol with used attribute are placed in the\n\tsection with the same name.\n\ngcc/testsuite/\n\n\tPR target/98146\n\t* c-c++-common/attr-used-5.c: Updated.\n\t* c-c++-common/attr-used-6.c: Likewise.\n\t* c-c++-common/attr-used-7.c: Likewise.\n\t* c-c++-common/attr-used-8.c: Likewise.", "tree": {"sha": "909ff9b5f5bd0e29304015e097ad0b6d79144c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/909ff9b5f5bd0e29304015e097ad0b6d79144c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a976020603589e897fcfa3276590ef50b489d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a976020603589e897fcfa3276590ef50b489d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a976020603589e897fcfa3276590ef50b489d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a976020603589e897fcfa3276590ef50b489d34/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6175383249143309fdc780a02bea484f4450def7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6175383249143309fdc780a02bea484f4450def7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6175383249143309fdc780a02bea484f4450def7"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "ba59326e4523510a8544a379f3b69526283b7288", "filename": "gcc/testsuite/c-c++-common/attr-used-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-5.c?ref=2a976020603589e897fcfa3276590ef50b489d34", "patch": "@@ -10,6 +10,7 @@ extern struct dtv_slotinfo_list *list;\n \n static int __attribute__ ((section (\"__libc_freeres_fn\")))\n free_slotinfo (struct dtv_slotinfo_list **elemp)\n+/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n {\n   if (!free_slotinfo (&(*elemp)->next))\n     return 0;"}, {"sha": "5d20f875bf0f1640160e8238c8661ae72815d5ed", "filename": "gcc/testsuite/c-c++-common/attr-used-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-6.c?ref=2a976020603589e897fcfa3276590ef50b489d34", "patch": "@@ -18,6 +18,7 @@ free_slotinfo (struct dtv_slotinfo_list **elemp)\n \n __attribute__ ((section (\"__libc_freeres_fn\")))\n void free_mem (void)\n+/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n {\n   free_slotinfo (&list);\n }"}, {"sha": "75576bcabe5af20ef796eafdabecd16a493b4016", "filename": "gcc/testsuite/c-c++-common/attr-used-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-7.c?ref=2a976020603589e897fcfa3276590ef50b489d34", "patch": "@@ -3,6 +3,7 @@\n \n int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n \n /* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */\n /* { dg-final { scan-assembler \".data.foo,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "e4982db1044be7c759739267a771736892630b3a", "filename": "gcc/testsuite/c-c++-common/attr-used-8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-8.c?ref=2a976020603589e897fcfa3276590ef50b489d34", "patch": "@@ -2,6 +2,7 @@\n /* { dg-options \"-Wall -O2\" } */\n \n int __attribute__((section(\".data.foo\"))) foo1 = 1;\n+/* { dg-warning \"'.*' without 'used' attribute and '.*' with 'used' attribute are placed in a section with the same name\" \"\" { target R_flag_in_section } .-1 } */\n int __attribute__((used,section(\".data.foo\"))) foo2 = 2;\n \n /* { dg-final { scan-assembler \".data.foo,\\\"aw\\\"\" { target R_flag_in_section } } } */"}, {"sha": "a1a8d3bd73e698e983ab5a0bde5ec03c13a9533c", "filename": "gcc/varasm.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a976020603589e897fcfa3276590ef50b489d34/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2a976020603589e897fcfa3276590ef50b489d34", "patch": "@@ -7765,11 +7765,27 @@ switch_to_section (section *new_section, tree decl)\n \t{\n \t  /* If the SECTION_RETAIN bit doesn't match, switch to a new\n \t     section.  */\n+\t  tree used_decl, no_used_decl;\n+\n \t  if (DECL_PRESERVE_P (decl))\n-\t    new_section->common.flags |= SECTION_RETAIN;\n+\t    {\n+\t      new_section->common.flags |= SECTION_RETAIN;\n+\t      used_decl = decl;\n+\t      no_used_decl = new_section->named.decl;\n+\t    }\n \t  else\n-\t    new_section->common.flags &= ~(SECTION_RETAIN\n-\t\t\t\t\t   | SECTION_DECLARED);\n+\t    {\n+\t      new_section->common.flags &= ~(SECTION_RETAIN\n+\t\t\t\t\t     | SECTION_DECLARED);\n+\t      used_decl = new_section->named.decl;\n+\t      no_used_decl = decl;\n+\t    }\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%+qD without %<used%> attribute and %qD with \"\n+\t\t   \"%<used%> attribute are placed in a section with \"\n+\t\t   \"the same name\", no_used_decl, used_decl);\n+\t  inform (DECL_SOURCE_LOCATION (used_decl),\n+\t\t  \"%qD was declared here\", used_decl);\n \t}\n       else\n \treturn;"}]}