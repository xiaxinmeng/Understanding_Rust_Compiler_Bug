{"sha": "683e6ccd1d25dc749a576119eb82346e352e09a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzZTZjY2QxZDI1ZGM3NDlhNTc2MTE5ZWI4MjM0NmUzNTJlMDlhNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-21T14:20:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-21T14:20:39Z"}, "message": "(jump_optimize): Try putting RETURN at end of function both at start\nand at end of our optimization.\n\nFrom-SVN: r5376", "tree": {"sha": "26d237e60609d15d11d11b65e37fbfd2afc5c90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d237e60609d15d11d11b65e37fbfd2afc5c90e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/683e6ccd1d25dc749a576119eb82346e352e09a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683e6ccd1d25dc749a576119eb82346e352e09a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683e6ccd1d25dc749a576119eb82346e352e09a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683e6ccd1d25dc749a576119eb82346e352e09a4/comments", "author": null, "committer": null, "parents": [{"sha": "2c4c436ae8f1a6c4035fc33b87dd83fdf566a61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4c436ae8f1a6c4035fc33b87dd83fdf566a61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4c436ae8f1a6c4035fc33b87dd83fdf566a61a"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "6ab071f671bde0a230e896d4d6fe6a288e55348b", "filename": "gcc/jump.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683e6ccd1d25dc749a576119eb82346e352e09a4/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683e6ccd1d25dc749a576119eb82346e352e09a4/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=683e6ccd1d25dc749a576119eb82346e352e09a4", "patch": "@@ -1916,6 +1916,26 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t}\n   }\n \n+#ifdef HAVE_return\n+  if (HAVE_return)\n+    {\n+      /* If we fall through to the epilogue, see if we can insert a RETURN insn\n+\t in front of it.  If the machine allows it at this point (we might be\n+\t after reload for a leaf routine), it will improve optimization for it\n+\t to be there.  We do this both here and at the start of this pass since\n+\t the RETURN might have been deleted by some of our optimizations.  */\n+      insn = get_last_insn ();\n+      while (insn && GET_CODE (insn) == NOTE)\n+\tinsn = PREV_INSN (insn);\n+\n+      if (insn && GET_CODE (insn) != BARRIER)\n+\t{\n+\t  emit_jump_insn (gen_return ());\n+\t  emit_barrier ();\n+\t}\n+    }\n+#endif\n+\n   /* See if there is still a NOTE_INSN_FUNCTION_END in this function.\n      If so, delete it, and record that this function can drop off the end.  */\n "}]}