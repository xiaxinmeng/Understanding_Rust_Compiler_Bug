{"sha": "7d7b99f95bf2517caab5f9300090b471135b4fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3Yjk5Zjk1YmYyNTE3Y2FhYjVmOTMwMDA5MGI0NzExMzViNGZjMA==", "commit": {"author": {"name": "Tejas Joshi", "email": "tejasjoshi9673@gmail.com", "date": "2019-08-26T12:32:29Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-08-26T12:32:29Z"}, "message": "Builtin function roundeven folding implementation\n\n2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n\n        * builtins.c (mathfn_built_in_2): Added CASE_MATHFN_FLOATN\n        for ROUNDEVEN.\n        * builtins.def: Added function definitions for roundeven function\n        variants.\n        * fold-const-call.c (fold_const_call_ss): Added case for roundeven\n        function call.  Adjust condition for floor, ceil, trunc and round.\n        * fold-const.c (negate_mathfn_p): Added case for roundeven function.\n        (tree_call_nonnegative_warnv_p): Added case for roundeven function.\n        (integer_valued_real_call_p): Added case for roundeven function.\n        * real.c (is_even): New function. Returns true if real number is even,\n        otherwise returns false.\n        (is_halfway_below): New function. Returns true if real number is\n        halfway between two integers, else return false.\n        (real_roundeven): New function. Round real number to nearest integer,\n        rounding halfway cases towards even.\n        * real.h (real_value): Added descriptive comments.  Added function\n        declaration for roundeven function.\n        * doc/extend.texi (Other Builtins): List roundeven variants among\n        functions which can be handled as builtins.\n\ngcc/testsuite/ChangeLog:\n\n2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n\n        * gcc.dg/torture/builtin-round-roundeven.c: New test.\n        * gcc.dg/torture/builtin-round-roundevenf128.c: New test.\n\nFrom-SVN: r274927", "tree": {"sha": "c215f66b35c9f3508ceb670fbaeae05b7d223c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c215f66b35c9f3508ceb670fbaeae05b7d223c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7b99f95bf2517caab5f9300090b471135b4fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7b99f95bf2517caab5f9300090b471135b4fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7b99f95bf2517caab5f9300090b471135b4fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7b99f95bf2517caab5f9300090b471135b4fc0/comments", "author": {"login": "Joshi-Tejas", "id": 30776933, "node_id": "MDQ6VXNlcjMwNzc2OTMz", "avatar_url": "https://avatars.githubusercontent.com/u/30776933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Joshi-Tejas", "html_url": "https://github.com/Joshi-Tejas", "followers_url": "https://api.github.com/users/Joshi-Tejas/followers", "following_url": "https://api.github.com/users/Joshi-Tejas/following{/other_user}", "gists_url": "https://api.github.com/users/Joshi-Tejas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Joshi-Tejas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Joshi-Tejas/subscriptions", "organizations_url": "https://api.github.com/users/Joshi-Tejas/orgs", "repos_url": "https://api.github.com/users/Joshi-Tejas/repos", "events_url": "https://api.github.com/users/Joshi-Tejas/events{/privacy}", "received_events_url": "https://api.github.com/users/Joshi-Tejas/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48a31a09839b12127ce7c40d7adc4bd5bf1d3407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a31a09839b12127ce7c40d7adc4bd5bf1d3407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a31a09839b12127ce7c40d7adc4bd5bf1d3407"}], "stats": {"total": 227, "additions": 221, "deletions": 6}, "files": [{"sha": "c67cbe3b1069521e858163cd31cb9812742106b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -1,3 +1,25 @@\n+2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n+\n+        * builtins.c (mathfn_built_in_2): Added CASE_MATHFN_FLOATN\n+        for ROUNDEVEN.\n+        * builtins.def: Added function definitions for roundeven function\n+        variants.\n+        * fold-const-call.c (fold_const_call_ss): Added case for roundeven\n+        function call.  Adjust condition for floor, ceil, trunc and round.\n+        * fold-const.c (negate_mathfn_p): Added case for roundeven function.\n+        (tree_call_nonnegative_warnv_p): Added case for roundeven function.\n+        (integer_valued_real_call_p): Added case for roundeven function.\n+        * real.c (is_even): New function. Returns true if real number is even,\n+        otherwise returns false.\n+        (is_halfway_below): New function. Returns true if real number is\n+        halfway between two integers, else return false.\n+        (real_roundeven): New function. Round real number to nearest integer,\n+        rounding halfway cases towards even.\n+        * real.h (real_value): Added descriptive comments.  Added function\n+        declaration for roundeven function.\n+        * doc/extend.texi (Other Builtins): List roundeven variants among\n+        functions which can be handled as builtins.\n+\n 2019-08-26  Richard Biener  <rguenther@suse.de>\n \n \tPR target/91522"}, {"sha": "f902e246f1f347be4d4dc04e339fa865393039fe", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -2061,6 +2061,7 @@ mathfn_built_in_2 (tree type, combined_fn fn)\n     CASE_MATHFN (REMQUO)\n     CASE_MATHFN_FLOATN (RINT)\n     CASE_MATHFN_FLOATN (ROUND)\n+    CASE_MATHFN_FLOATN (ROUNDEVEN)\n     CASE_MATHFN (SCALB)\n     CASE_MATHFN (SCALBLN)\n     CASE_MATHFN (SCALBN)"}, {"sha": "8bb7027aac7d8e5f06612946b567100faabaeb62", "filename": "gcc/builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -542,12 +542,18 @@ DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, AT\n #define RINT_TYPE(F) BT_FN_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_RINT, \"rint\", RINT_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef RINT_TYPE\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVEN, \"roundeven\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVENF, \"roundevenf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_ROUNDEVENL, \"roundevenl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUND, \"round\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDF, \"roundf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDL, \"roundl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #define ROUND_TYPE(F) BT_FN_##F##_##F\n DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ROUND, \"round\", ROUND_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n #undef ROUND_TYPE\n+#define ROUNDEVEN_TYPE(F) BT_FN_##F##_##F\n+DEF_EXT_LIB_FLOATN_NX_BUILTINS (BUILT_IN_ROUNDEVEN, \"roundeven\", ROUNDEVEN_TYPE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+#undef ROUNDEVEN_TYPE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALB, \"scalb\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBF, \"scalbf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBL, \"scalbl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "4aea4d31761934af4883b4ed9d9cc53a681e9a0c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -12448,7 +12448,8 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c90},\n @code{j1f}, @code{j1l}, @code{j1}, @code{jnf}, @code{jnl}, @code{jn},\n @code{lgammaf_r}, @code{lgammal_r}, @code{lgamma_r}, @code{mempcpy},\n @code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n-@code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n+@code{rindex}, @code{roundeven}, @code{roundevenf}, @code{roudnevenl},\n+@code{scalbf}, @code{scalbl}, @code{scalb},\n @code{signbit}, @code{signbitf}, @code{signbitl}, @code{signbitd32},\n @code{signbitd64}, @code{signbitd128}, @code{significandf},\n @code{significandl}, @code{significand}, @code{sincosf},"}, {"sha": "3a14d2a41c1521e49edbb396eb02c24fc49c53ee", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -836,7 +836,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n \n     CASE_CFN_FLOOR:\n     CASE_CFN_FLOOR_FN:\n-      if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n+      if (!REAL_VALUE_ISSIGNALING_NAN (*arg))\n \t{\n \t  real_floor (result, format, arg);\n \t  return true;\n@@ -845,7 +845,7 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n \n     CASE_CFN_CEIL:\n     CASE_CFN_CEIL_FN:\n-      if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n+      if (!REAL_VALUE_ISSIGNALING_NAN (*arg))\n \t{\n \t  real_ceil (result, format, arg);\n \t  return true;\n@@ -854,18 +854,31 @@ fold_const_call_ss (real_value *result, combined_fn fn,\n \n     CASE_CFN_TRUNC:\n     CASE_CFN_TRUNC_FN:\n-      real_trunc (result, format, arg);\n-      return true;\n+      if (!REAL_VALUE_ISSIGNALING_NAN (*arg))\n+\t{\n+\t  real_trunc (result, format, arg);\n+\t  return true;\n+\t}\n+      return false;\n \n     CASE_CFN_ROUND:\n     CASE_CFN_ROUND_FN:\n-      if (!REAL_VALUE_ISNAN (*arg) || !flag_errno_math)\n+      if (!REAL_VALUE_ISSIGNALING_NAN (*arg))\n \t{\n \t  real_round (result, format, arg);\n \t  return true;\n \t}\n       return false;\n \n+    CASE_CFN_ROUNDEVEN:\n+    CASE_CFN_ROUNDEVEN_FN:\n+      if (!REAL_VALUE_ISSIGNALING_NAN (*arg))\n+\t{\n+\t  real_roundeven (result, format, arg);\n+\t  return true;\n+\t}\n+      return false;\n+\n     CASE_CFN_LOGB:\n       return fold_const_logb (result, arg, format);\n "}, {"sha": "0376cdb73a426caff4b18d71116f02b8537019ba", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -329,6 +329,8 @@ negate_mathfn_p (combined_fn fn)\n     CASE_CFN_LLROUND:\n     CASE_CFN_LROUND:\n     CASE_CFN_ROUND:\n+    CASE_CFN_ROUNDEVEN:\n+    CASE_CFN_ROUNDEVEN_FN:\n     CASE_CFN_SIN:\n     CASE_CFN_SINH:\n     CASE_CFN_TAN:\n@@ -13107,6 +13109,8 @@ tree_call_nonnegative_warnv_p (tree type, combined_fn fn, tree arg0, tree arg1,\n     CASE_CFN_RINT_FN:\n     CASE_CFN_ROUND:\n     CASE_CFN_ROUND_FN:\n+    CASE_CFN_ROUNDEVEN:\n+    CASE_CFN_ROUNDEVEN_FN:\n     CASE_CFN_SCALB:\n     CASE_CFN_SCALBLN:\n     CASE_CFN_SCALBN:\n@@ -13630,6 +13634,8 @@ integer_valued_real_call_p (combined_fn fn, tree arg0, tree arg1, int depth)\n     CASE_CFN_RINT_FN:\n     CASE_CFN_ROUND:\n     CASE_CFN_ROUND_FN:\n+    CASE_CFN_ROUNDEVEN:\n+    CASE_CFN_ROUNDEVEN_FN:\n     CASE_CFN_TRUNC:\n     CASE_CFN_TRUNC_FN:\n       return true;"}, {"sha": "6e6a3949a457590756a130fc062825df5ddc1168", "filename": "gcc/real.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -5010,6 +5010,101 @@ real_round (REAL_VALUE_TYPE *r, format_helper fmt,\n     real_convert (r, fmt, r);\n }\n \n+/* Return true including 0 if integer part of R is even, else return\n+   false.  The function is not valid for rvc_inf and rvc_nan classes.  */\n+\n+bool\n+is_even (REAL_VALUE_TYPE *r)\n+{\n+  gcc_assert (r->cl != rvc_inf);\n+  gcc_assert (r->cl != rvc_nan);\n+\n+  if (r->cl == rvc_zero)\n+    return true;\n+\n+  /* For (-1,1), number is even.  */\n+  if (REAL_EXP (r) <= 0)\n+    return true;\n+\n+  /* Check lowest bit, if not set, return true.  */\n+  else if (REAL_EXP (r) <= SIGNIFICAND_BITS)\n+    {\n+      unsigned int n = SIGNIFICAND_BITS - REAL_EXP (r);\n+      int w = n / HOST_BITS_PER_LONG;\n+\n+      unsigned long num = ((unsigned long)1 << (n % HOST_BITS_PER_LONG));\n+\n+      if ((r->sig[w] & num) == 0)\n+\treturn true;\n+    }\n+  else\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return true if R is halfway between two integers, else return\n+   false.  The function is not valid for rvc_inf and rvc_nan classes.  */\n+\n+bool\n+is_halfway_below (const REAL_VALUE_TYPE *r)\n+{\n+  gcc_assert (r->cl != rvc_inf);\n+  gcc_assert (r->cl != rvc_nan);\n+  int i;\n+\n+  if (r->cl == rvc_zero)\n+    return false;\n+\n+  /* For numbers (-0.5,0) and (0,0.5).  */\n+  if (REAL_EXP (r) < 0)\n+    return false;\n+\n+  else if (REAL_EXP (r) < SIGNIFICAND_BITS)\n+    {\n+      unsigned int n = SIGNIFICAND_BITS - REAL_EXP (r) - 1;\n+      int w = n / HOST_BITS_PER_LONG;\n+\n+      for (i = 0; i < w; ++i)\n+\tif (r->sig[i] != 0)\n+\t  return false;\n+\n+      unsigned long num = ((unsigned long)1 << (n % HOST_BITS_PER_LONG));\n+\n+      if (((r->sig[w] & num) != 0) && ((r->sig[w] & (num-1)) == 0))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Round X to nearest integer, rounding halfway cases towards even.  */\n+\n+void\n+real_roundeven (REAL_VALUE_TYPE *r, format_helper fmt,\n+\t\tconst REAL_VALUE_TYPE *x)\n+{\n+  if (is_halfway_below (x))\n+    {\n+      /* Special case as -0.5 rounds to -0.0 and\n+\t similarly +0.5 rounds to +0.0.  */\n+      if (REAL_EXP (x) == 0)\n+\t{\n+\t  *r = *x;\n+\t  clear_significand_below (r, SIGNIFICAND_BITS);\n+\t}\n+      else\n+\t{\n+\t  do_add (r, x, &dconsthalf, x->sign);\n+\t  if (!is_even (r))\n+\t    do_add (r, r, &dconstm1, x->sign);\n+\t}\n+      if (fmt)\n+\treal_convert (r, fmt, r);\n+    }\n+  else\n+    real_round (r, fmt, x);\n+}\n+\n /* Set the sign of R to the sign of X.  */\n \n void"}, {"sha": "2f41834ecfd22f9e2f8ec5b3de23a245fdabd958", "filename": "gcc/real.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -41,11 +41,18 @@ struct GTY(()) real_value {\n      sure they're packed together, otherwise REAL_VALUE_TYPE_SIZE will\n      be miscomputed.  */\n   unsigned int /* ENUM_BITFIELD (real_value_class) */ cl : 2;\n+  /* 1 if number is decimal floating point.  */\n   unsigned int decimal : 1;\n+  /* 1 if number is negative.  */\n   unsigned int sign : 1;\n+  /* 1 if number is signalling.  */\n   unsigned int signalling : 1;\n+  /* 1 if number is canonical\n+  All are generally used for handling cases in real.c.  */\n   unsigned int canonical : 1;\n+  /* unbiased exponent of the number.  */\n   unsigned int uexp : EXP_BITS;\n+  /* significand of the number.  */\n   unsigned long sig[SIGSZ];\n };\n \n@@ -500,6 +507,8 @@ extern void real_ceil (REAL_VALUE_TYPE *, format_helper,\n \t\t       const REAL_VALUE_TYPE *);\n extern void real_round (REAL_VALUE_TYPE *, format_helper,\n \t\t\tconst REAL_VALUE_TYPE *);\n+extern void real_roundeven (REAL_VALUE_TYPE *, format_helper,\n+\t\t\t    const REAL_VALUE_TYPE *);\n \n /* Set the sign of R to the sign of X.  */\n extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);"}, {"sha": "c68c8231570d785a82ad6112a76486c3f61544fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -1,3 +1,8 @@\n+2019-08-26  Tejas Joshi  <tejasjoshi9673@gmail.com>\n+\n+        * gcc.dg/torture/builtin-round-roundeven.c: New test.\n+        * gcc.dg/torture/builtin-round-roundevenf128.c: Likewise.\n+\n 2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* gcc.dg/tree-ssa/copy-headers-5.c: Do not run vrp pass."}, {"sha": "a39ab0c8de2d0fec8e0c768d0bcbf3a46590354c", "filename": "gcc/testsuite/gcc.dg/torture/builtin-round-roundeven.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundeven.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundeven.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundeven.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do link } */\n+\n+extern int link_error (int);\n+\n+#define TEST(FN, VALUE, RESULT) \\\n+  if (__builtin_##FN (VALUE) != RESULT) link_error (__LINE__);\n+\n+int\n+main (void)\n+{\n+  TEST(roundeven,  0, 0);\n+  TEST(roundeven,  0.5, 0);\n+  TEST(roundeven,  -0.5, 0);\n+  TEST(roundeven,  6, 6);\n+  TEST(roundeven,  -8, -8);\n+  TEST(roundeven,  2.5, 2);\n+  TEST(roundeven,  3.5, 4);\n+  TEST(roundeven,  -1.5, -2);\n+  TEST(roundeven,  3.499, 3);\n+  TEST(roundeven,  3.501, 4);\n+\n+  if (__builtin_copysign (1, __builtin_roundeven (-0.5)) != -1)\n+    link_error (__LINE__);\n+  if (__builtin_copysign (1, __builtin_roundeven (-0.0)) != -1)\n+    link_error (__LINE__);\n+  if (__builtin_copysign (-1, __builtin_roundeven (0.5)) != 1)\n+    link_error (__LINE__);\n+  if (__builtin_copysign (-1, __builtin_roundeven (0.0)) != 1)\n+    link_error (__LINE__);\n+  if (__builtin_copysign (1, __builtin_roundeven (-0.25)) != -1)\n+    link_error (__LINE__);\n+  if (__builtin_copysign (-1, __builtin_roundeven (0.25)) != 1)\n+    link_error (__LINE__);\n+ return 0;\n+}\n+"}, {"sha": "85a8cbfd5322c7520db95ccdb579f7ed8e7a36fe", "filename": "gcc/testsuite/gcc.dg/torture/builtin-round-roundevenf128.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundevenf128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7b99f95bf2517caab5f9300090b471135b4fc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundevenf128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-round-roundevenf128.c?ref=7d7b99f95bf2517caab5f9300090b471135b4fc0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do link } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128 } */\n+\n+extern int link_error (int);\n+\n+#define TEST(FN, VALUE, RESULT) \\\n+  if (__builtin_##FN##f128 (VALUE) != RESULT) link_error (__LINE__);\n+\n+int\n+main (void)\n+{\n+  TEST(roundeven,  (0x1p64+0.5f128), (0x1p64f128));\n+  TEST(roundeven,  (0x1p63+0.5f128), (0x1p63f128));\n+  TEST(roundeven,  (0x1p63-0.5f128), (0x1p63f128));\n+  TEST(roundeven,  (0x1p64-0.5f128), (0x1p64f128));\n+  TEST(roundeven,  (0x1p64+0.501f128), (0x1p64+1.0f128));\n+  TEST(roundeven,  (0x1.C00000000000039A5653p1f128), (0x1p2f128))\n+  return 0;\n+}\n+"}]}