{"sha": "b528e42751b731746d98427fb6d9ec8634a72555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyOGU0Mjc1MWI3MzE3NDZkOTg0MjdmYjZkOWVjODYzNGE3MjU1NQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-12-21T09:41:25Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-12-21T09:41:25Z"}, "message": "PR 78867 Function returning string ICE with -flto\n\nThe fix for PR 78757 was slightly too cautious, and covered only the\ncase of functions returning pointers to characters. By moving the\nblock above the if statement the DECL_EXPR is created also for\nfunctions returning non-pointer characters.\n\nRegtested on x86_64-pc-linux-gnu.\n\nfortran ChangeLog:\n\n2016-12-21  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/78867\n\t* trans-expr.c (gfc_conv_procedure_call): Emit DECL_EXPR also for\n\tnon-pointer character results.\n\ntestsuite ChangeLog:\n\n2016-12-21  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/78867\n\t* gfortran.dg/string_length_4.f90: New test.\n\nFrom-SVN: r243842", "tree": {"sha": "40a33129018f1c26c5b431a7a91fa5eb335c0ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a33129018f1c26c5b431a7a91fa5eb335c0ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b528e42751b731746d98427fb6d9ec8634a72555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b528e42751b731746d98427fb6d9ec8634a72555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b528e42751b731746d98427fb6d9ec8634a72555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b528e42751b731746d98427fb6d9ec8634a72555/comments", "author": null, "committer": null, "parents": [{"sha": "f7db9ebf2b793ee115d572267b8c97362f43575c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7db9ebf2b793ee115d572267b8c97362f43575c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7db9ebf2b793ee115d572267b8c97362f43575c"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "6bec5e794db02113272b748e7f9e4ab385510e81", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b528e42751b731746d98427fb6d9ec8634a72555", "patch": "@@ -1,3 +1,9 @@\n+2016-12-21  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78867\n+\t* trans-expr.c (gfc_conv_procedure_call): Emit DECL_EXPR also for\n+\tnon-pointer character results.\n+\n 2016-12-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* iresolve.c (gfc_resolve_ftell): Call \"ftell\" instead of \"ftell2\"."}, {"sha": "6ebdc8b3559a398ca9298e79e3ead31a15016513", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b528e42751b731746d98427fb6d9ec8634a72555", "patch": "@@ -6002,26 +6002,26 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  type = gfc_get_character_type (ts.kind, ts.u.cl);\n \t  type = build_pointer_type (type);\n \n+\t  /* Emit a DECL_EXPR for the VLA type.  */\n+\t  tmp = TREE_TYPE (type);\n+\t  if (TYPE_SIZE (tmp)\n+\t      && TREE_CODE (TYPE_SIZE (tmp)) != INTEGER_CST)\n+\t    {\n+\t      tmp = build_decl (input_location, TYPE_DECL, NULL_TREE, tmp);\n+\t      DECL_ARTIFICIAL (tmp) = 1;\n+\t      DECL_IGNORED_P (tmp) = 1;\n+\t      tmp = fold_build1_loc (input_location, DECL_EXPR,\n+\t\t\t\t     TREE_TYPE (tmp), tmp);\n+\t      gfc_add_expr_to_block (&se->pre, tmp);\n+\t    }\n+\n \t  /* Return an address to a char[0:len-1]* temporary for\n \t     character pointers.  */\n \t  if ((!comp && (sym->attr.pointer || sym->attr.allocatable))\n \t       || (comp && (comp->attr.pointer || comp->attr.allocatable)))\n \t    {\n \t      var = gfc_create_var (type, \"pstr\");\n \n-\t      /* Emit a DECL_EXPR for the VLA type.  */\n-\t      tmp = TREE_TYPE (type);\n-\t      if (TYPE_SIZE (tmp)\n-\t\t  && TREE_CODE (TYPE_SIZE (tmp)) != INTEGER_CST)\n-\t\t{\n-\t\t  tmp = build_decl (input_location, TYPE_DECL, NULL_TREE, tmp);\n-\t\t  DECL_ARTIFICIAL (tmp) = 1;\n-\t\t  DECL_IGNORED_P (tmp) = 1;\n-\t\t  tmp = fold_build1_loc (input_location, DECL_EXPR,\n-\t\t\t\t\t TREE_TYPE (tmp), tmp);\n-\t\t  gfc_add_expr_to_block (&se->pre, tmp);\n-\t\t}\n-\n \t      if ((!comp && sym->attr.allocatable)\n \t\t  || (comp && comp->attr.allocatable))\n \t\t{"}, {"sha": "4a23c1f05ceef279fc6a3594024143d14431e3c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b528e42751b731746d98427fb6d9ec8634a72555", "patch": "@@ -1,3 +1,8 @@\n+2016-12-21  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/78867\n+\t* gfortran.dg/string_length_4.f90: New test.\n+\n 2016-12-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.target/avr/mmcu: New folder for compile-tests with -mmcu=."}, {"sha": "759066b078ab8d74920cc042ad3af7812b72c61b", "filename": "gcc/testsuite/gfortran.dg/string_length_4.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b528e42751b731746d98427fb6d9ec8634a72555/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_length_4.f90?ref=b528e42751b731746d98427fb6d9ec8634a72555", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-require-effective-target lto }\n+! { dg-options \"-flto\" }\n+! PR 78867, test case adapted from gfortran.dg/string_length_1.f90\n+program pr78867\n+  if (len(bar(2_8)) /= 2) call abort\n+contains\n+\n+  function bar(i)\n+    integer(8), intent(in) :: i\n+    character(len=i) :: bar\n+  \n+    bar = \"\"\n+  end function bar\n+\n+end program pr78867"}]}