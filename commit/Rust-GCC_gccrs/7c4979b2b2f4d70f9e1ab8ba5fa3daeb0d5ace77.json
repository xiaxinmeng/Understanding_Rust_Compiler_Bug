{"sha": "7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0OTc5YjJiMmY0ZDcwZjllMWFiOGJhNWZhM2RhZWIwZDVhY2U3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-10T11:12:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-10T11:12:00Z"}, "message": "Include name of test in filesystem-test.XXXXXX filenames\n\nAlso fix some tests that were not cleaning up after themselves, as\nidentified by the change to nonexistent_path.\n\n\t* testsuite/util/testsuite_fs.h (nonexistent_path): Include name\n\tof the source file containing the caller.\n\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc: Remove\n\tdirectories created by test.\n\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/iterators/\n\trecursive_directory_iterator.cc: Likewise.\n\nFrom-SVN: r267801", "tree": {"sha": "fea1cbf8b54c76f6ef859d5b8eae4a838c79a52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea1cbf8b54c76f6ef859d5b8eae4a838c79a52f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cdf1946f6eed116552026cfeb44a669ee882ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdf1946f6eed116552026cfeb44a669ee882ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdf1946f6eed116552026cfeb44a669ee882ccf"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "6bc27c5ae3000328c337d3a4cf2f7a94f62bd02f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -1,3 +1,16 @@\n+2019-01-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_fs.h (nonexistent_path): Include name\n+\tof the source file containing the caller.\n+\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc: Remove\n+\tdirectories created by test.\n+\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/iterators/directory_iterator.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/iterators/\n+\trecursive_directory_iterator.cc: Likewise.\n+\n 2019-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88775"}, {"sha": "5288bd297bd08d88a6ff3c4e9602a685cf499c0b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -138,6 +138,9 @@ test05()\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );\n   VERIFY( end(it) == endit );\n   static_assert( noexcept(end(it)), \"end is noexcept\" );\n+\n+  std::error_code ec;\n+  remove_all(p, ec);\n }\n \n int"}, {"sha": "47b3266d3ebf5c4163bf3bcaaed7a47aa18aad70", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -179,6 +179,9 @@ test05()\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );\n   VERIFY( end(it) == endit );\n   static_assert( noexcept(end(it)), \"end is noexcept\" );\n+\n+  std::error_code ec;\n+  remove_all(p, ec);\n }\n \n int"}, {"sha": "cc3cd8798651b4c596c5f0de91a79046b390029c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -129,6 +129,9 @@ test05()\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );\n   VERIFY( end(it) == endit );\n   static_assert( noexcept(end(it)), \"end is noexcept\" );\n+\n+  std::error_code ec;\n+  remove_all(p, ec);\n }\n \n int"}, {"sha": "6217aca8b9a34c2dd944c17abd8d09475d33f1bb", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -176,6 +176,9 @@ test05()\n   static_assert( noexcept(begin(it)), \"begin is noexcept\" );\n   VERIFY( end(it) == endit );\n   static_assert( noexcept(end(it)), \"end is noexcept\" );\n+\n+  std::error_code ec;\n+  remove_all(p, ec);\n }\n \n int"}, {"sha": "48f503b3c2766ba83f9dedb7126e1403e15e5409", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=7c4979b2b2f4d70f9e1ab8ba5fa3daeb0d5ace77", "patch": "@@ -86,8 +86,18 @@ namespace __gnu_test\n   // This is NOT supposed to be a secure way to get a unique name!\n   // We just need a path that doesn't exist for testing purposes.\n   test_fs::path\n-  nonexistent_path()\n+  nonexistent_path(std::string file = __builtin_FILE())\n   {\n+    // Include the caller's filename to help identify tests that fail to\n+    // clean up the files they create.\n+    // Remove .cc extension:\n+    if (file.length() > 3 && file.compare(file.length() - 3, 3, \".cc\") == 0)\n+      file.resize(file.length() - 3);\n+    // And directory:\n+    auto pos = file.find_last_of(\"/\\\\\");\n+    if (pos != file.npos)\n+      file.erase(0, pos+1);\n+\n     test_fs::path p;\n #if defined(_GNU_SOURCE) || _XOPEN_SOURCE >= 500 || _POSIX_C_SOURCE >= 200112L\n     char tmp[] = \"filesystem-test.XXXXXX\";\n@@ -97,16 +107,22 @@ namespace __gnu_test\n \t  std::error_code(errno, std::generic_category()));\n     ::unlink(tmp);\n     ::close(fd);\n-    p = tmp;\n+    if (!file.empty())\n+      file.insert(0, 1, '-');\n+    file.insert(0, tmp);\n+    p = file;\n #else\n-    char buf[64];\n+    if (file.length() > 64)\n+      file.resize(64);\n+    char buf[128];\n     static int counter;\n #if _GLIBCXX_USE_C99_STDIO\n-    std::snprintf(buf, 64,\n+    std::snprintf(buf, 128,\n #else\n     std::sprintf(buf,\n #endif\n-      \"filesystem-test.%d.%lu\", counter++, (unsigned long) ::getpid());\n+      \"filesystem-test.%d.%lu-%s\", counter++, (unsigned long) ::getpid(),\n+      file.c_str());\n     p = buf;\n #endif\n     return p;"}]}