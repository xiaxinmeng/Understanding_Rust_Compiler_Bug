{"sha": "6e5dedda84b1879e814ad686adc3f00ab063c15c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1ZGVkZGE4NGIxODc5ZTgxNGFkNjg2YWRjM2YwMGFiMDYzYzE1Yw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-09-22T09:39:20Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-09-22T09:39:20Z"}, "message": "PR lto/63270 - new test\n\n\t* g++.dg/lto/pr63270_0.C: New test.\n\t* g++.dg/lto/pr63270_1.C: New test.\n\nFrom-SVN: r215451", "tree": {"sha": "87b336f69a9afbdc66c944b5315676e6b16d6386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87b336f69a9afbdc66c944b5315676e6b16d6386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5dedda84b1879e814ad686adc3f00ab063c15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5dedda84b1879e814ad686adc3f00ab063c15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5dedda84b1879e814ad686adc3f00ab063c15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5dedda84b1879e814ad686adc3f00ab063c15c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2095627b7499fa8ec58f29e00b12eaa6e32041e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2095627b7499fa8ec58f29e00b12eaa6e32041e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2095627b7499fa8ec58f29e00b12eaa6e32041e"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "c200560689de4f03eace411d8ce64b16d10396d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e5dedda84b1879e814ad686adc3f00ab063c15c", "patch": "@@ -1,3 +1,9 @@\n+2014-09-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/63270\n+\t* g++.dg/lto/pr63270_0.C: New test.\n+\t* g++.dg/lto/pr63270_1.C: New test.\n+\n 2014-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/avx-vzeroupper-16.c (dg-final): Remove check"}, {"sha": "98f27350d5a505e2e49595868f75f83814c09638", "filename": "gcc/testsuite/g++.dg/lto/pr63270_0.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C?ref=6e5dedda84b1879e814ad686adc3f00ab063c15c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-flto -O2 -Wno-odr}} }\n+typedef unsigned long uintptr_t;\n+namespace v8 {\n+class Extension;\n+namespace internal {\n+class A {\n+public:\n+  A(int);\n+};\n+class B {\n+public:\n+  B(int);\n+};\n+class Scanner;\n+class FuncNameInferrer;\n+template <typename Traits> class ParserBase : Traits {\n+  class FunctionState;\n+  bool parenthesized_function_;\n+  typename Traits::Type::Scope *scope_;\n+  FunctionState *function_state_;\n+  v8::Extension *extension_;\n+  FuncNameInferrer *fni_;\n+  Scanner *scanner_;\n+  uintptr_t stack_limit_;\n+  bool stack_overflow_;\n+  bool allow_lazy_;\n+  bool allow_natives_syntax_;\n+  bool allow_generators_;\n+  bool allow_for_of_;\n+  typename Traits::Type::Zone *zone_;\n+};\n+class PreParserScope;\n+class F;\n+class PreParserTraits {\n+public:\n+  struct Type {\n+    typedef PreParserScope Scope;\n+    typedef void Zone;\n+  };\n+\n+private:\n+  F *pre_parser_;\n+};\n+class F : ParserBase<PreParserTraits> {};\n+class C {\n+public:\n+  struct Type {\n+    typedef v8::internal::FuncNameInferrer Scope;\n+    typedef int Zone;\n+  };\n+};\n+class G : ParserBase<C> {\n+public:\n+  static int m_fn1();\n+  F reusable_preparser_;\n+};\n+class D {\n+public:\n+  D(int) : function_(0), context_(0), nested_scope_chain_(0) { G::m_fn1(); }\n+  B function_;\n+  B context_;\n+  A nested_scope_chain_;\n+};\n+void fn1() { D(0); }\n+}\n+}\n+\n+int main()\n+{\n+    return 0;\n+}"}, {"sha": "a842e5cfcc647c1ab20a1f75ecffcef46eeaddef", "filename": "gcc/testsuite/g++.dg/lto/pr63270_1.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5dedda84b1879e814ad686adc3f00ab063c15c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_1.C?ref=6e5dedda84b1879e814ad686adc3f00ab063c15c", "patch": "@@ -0,0 +1,53 @@\n+typedef unsigned long uintptr_t;\n+namespace v8\n+{\n+  \n+    int kPointerSize = 0;\n+  \n+  class Extension;\n+  namespace internal\n+  {\n+    class Token;\n+    class Scanner;\n+    int kCodeOffset = 0;\n+    int kOptimizedCodeMapOffset = 0;\n+    int kScopeInfoOffset = 0;\n+\n+    class FuncNameInferrer;\n+      template < typename Traits > class ParserBase:Traits\n+    {\n+      class FunctionState;\n+      bool parenthesized_function_;\n+      typename Traits::Type::Scope * scope_;\n+      FunctionState *function_state_;\n+        v8::Extension * extension_;\n+      FuncNameInferrer *fni_;\n+      Scanner *scanner_;\n+      uintptr_t stack_limit_;\n+      bool stack_overflow_;\n+      bool allow_lazy_;\n+      bool allow_natives_syntax_;\n+      bool allow_generators_;\n+      bool allow_for_of_;\n+      typename Traits::Type::Zone * zone_;\n+    };\n+    class PreParserScope;\n+    class PreParser;\n+    class PreParserTraits\n+    {\n+    public:struct Type\n+      {\n+\ttypedef PreParserScope Scope;\n+\ttypedef void Zone;\n+      };\n+      PreParser *pre_parser_;\n+    };\n+    class PreParser:ParserBase < PreParserTraits >\n+    {\n+      int ParseMemberWithNewPrefixesExpression ( bool * );\n+    };\n+    int PreParser::ParseMemberWithNewPrefixesExpression ( bool * )\n+    {\n+    }\n+  }\n+}"}]}