{"sha": "267cca3d20139ecea6b023ef0d5767ecf703e93a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY3Y2NhM2QyMDEzOWVjZWE2YjAyM2VmMGQ1NzY3ZWNmNzAzZTkzYQ==", "commit": {"author": {"name": "Roman Zhuykov", "email": "zhroma@ispras.ru", "date": "2020-02-25T07:15:49Z"}, "committer": {"name": "Roman Zhuykov", "email": "zhroma@ispras.ru", "date": "2020-02-25T07:15:49Z"}, "message": "doc: properly describe --enable-checking behavior\n\nThis patch rewords the whole description to fix minor issues:\n - documents 'gimple' and 'types' checks,\n - clarifies what happens when option is used without '=list',\n - fixes inaccurate wrong wording about release snapshots,\n - describes that release checks can only de disabled explicitly.\n\ngcc/ChangeLog:\n\t* doc/install.texi (--enable-checking): Properly document current\n\tbehavior.\n\t(--enable-stage1-checking): Minor clarification about bootstrap.", "tree": {"sha": "0331e62f423e46dcbb56bdece50a64de2afee85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0331e62f423e46dcbb56bdece50a64de2afee85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/267cca3d20139ecea6b023ef0d5767ecf703e93a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267cca3d20139ecea6b023ef0d5767ecf703e93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267cca3d20139ecea6b023ef0d5767ecf703e93a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267cca3d20139ecea6b023ef0d5767ecf703e93a/comments", "author": {"login": "zhroma", "id": 23097573, "node_id": "MDQ6VXNlcjIzMDk3NTcz", "avatar_url": "https://avatars.githubusercontent.com/u/23097573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhroma", "html_url": "https://github.com/zhroma", "followers_url": "https://api.github.com/users/zhroma/followers", "following_url": "https://api.github.com/users/zhroma/following{/other_user}", "gists_url": "https://api.github.com/users/zhroma/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhroma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhroma/subscriptions", "organizations_url": "https://api.github.com/users/zhroma/orgs", "repos_url": "https://api.github.com/users/zhroma/repos", "events_url": "https://api.github.com/users/zhroma/events{/privacy}", "received_events_url": "https://api.github.com/users/zhroma/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zhroma", "id": 23097573, "node_id": "MDQ6VXNlcjIzMDk3NTcz", "avatar_url": "https://avatars.githubusercontent.com/u/23097573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhroma", "html_url": "https://github.com/zhroma", "followers_url": "https://api.github.com/users/zhroma/followers", "following_url": "https://api.github.com/users/zhroma/following{/other_user}", "gists_url": "https://api.github.com/users/zhroma/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhroma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhroma/subscriptions", "organizations_url": "https://api.github.com/users/zhroma/orgs", "repos_url": "https://api.github.com/users/zhroma/repos", "events_url": "https://api.github.com/users/zhroma/events{/privacy}", "received_events_url": "https://api.github.com/users/zhroma/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ca2088bc393a7d3d8eef4ff85cbe949db3cde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ca2088bc393a7d3d8eef4ff85cbe949db3cde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ca2088bc393a7d3d8eef4ff85cbe949db3cde0"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "3292b9f08426fd0a9fac584454c579ebe29e2b02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267cca3d20139ecea6b023ef0d5767ecf703e93a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267cca3d20139ecea6b023ef0d5767ecf703e93a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=267cca3d20139ecea6b023ef0d5767ecf703e93a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-24  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\t* doc/install.texi (--enable-checking): Properly document current\n+\tbehavior.\n+\t(--enable-stage1-checking): Minor clarification about bootstrap.\n+\n 2020-02-24  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93032"}, {"sha": "09207ccf1da05381d5f958b5ba6ff59ea3ae1b90", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/267cca3d20139ecea6b023ef0d5767ecf703e93a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/267cca3d20139ecea6b023ef0d5767ecf703e93a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=267cca3d20139ecea6b023ef0d5767ecf703e93a", "patch": "@@ -1839,41 +1839,48 @@ final releases.  The specific files which get @option{-Werror} are\n controlled by the Makefiles.\n \n @item --enable-checking\n+@itemx --disable-checking\n @itemx --enable-checking=@var{list}\n-When you specify this option, the compiler is built to perform internal\n-consistency checks of the requested complexity.  This does not change the\n-generated code, but adds error checking within the compiler.  This will\n-slow down the compiler and may only work properly if you are building\n-the compiler with GCC@.  This is @samp{yes,extra} by default when building\n-from the source repository or snapshots, but @samp{release} for releases.  The default\n-for building the stage1 compiler is @samp{yes}.  More control\n-over the checks may be had by specifying @var{list}.  The categories of\n-checks available are @samp{yes} (most common checks\n-@samp{assert,misc,tree,gc,rtlflag,runtime}), @samp{no} (no checks at\n-all), @samp{all} (all but @samp{valgrind}), @samp{release} (cheapest\n-checks @samp{assert,runtime}) or @samp{none} (same as @samp{no}).\n-Individual checks can be enabled with these flags @samp{assert},\n-@samp{df}, @samp{fold}, @samp{gc}, @samp{gcac}, @samp{misc}, @samp{rtl},\n-@samp{rtlflag}, @samp{runtime}, @samp{tree}, @samp{extra} and @samp{valgrind}.\n-@samp{extra} adds for @samp{misc} checking extra checks that might affect\n-code generation and should therefore not differ between stage1 and later\n-stages.\n-\n-The @samp{valgrind} check requires the external @command{valgrind}\n-simulator, available from @uref{http://valgrind.org/}.  The\n-@samp{df}, @samp{rtl}, @samp{gcac} and @samp{valgrind} checks are very expensive.\n-To disable all checking, @samp{--disable-checking} or\n-@samp{--enable-checking=none} must be explicitly requested.  Disabling\n-assertions will make the compiler and runtime slightly faster but\n-increase the risk of undetected internal errors causing wrong code to be\n-generated.\n+This option controls performing internal consistency checks in the compiler.\n+It does not change the generated code, but adds error checking of the\n+requested complexity.  This slows down the compiler and may only work\n+properly if you are building the compiler with GCC@.\n+\n+When the option is not specified, the active set of checks depends on context.\n+Namely, bootstrap stage 1 defaults to @samp{--enable-checking=yes}, builds\n+from release archives default to @samp{--enable-checking=release}, and\n+otherwise @samp{--enable-checking=yes,extra} is used.  When the option is\n+specified without a @var{list}, the result is the same as\n+@samp{--enable-checking=yes}.  Likewise, @samp{--disable-checking} is\n+equivalent to @samp{--enable-checking=no}.\n+\n+The categories of checks available in @var{list} are @samp{yes} (most common\n+checks @samp{assert,misc,gc,gimple,rtlflag,runtime,tree,types}), @samp{no}\n+(no checks at all), @samp{all} (all but @samp{valgrind}), @samp{release}\n+(cheapest checks @samp{assert,runtime}) or @samp{none} (same as @samp{no}).\n+@samp{release} checks are always on and to disable them\n+@samp{--disable-checking} or @samp{--enable-checking=no[,<other checks>]}\n+must be explicitly requested.  Disabling assertions makes the compiler and\n+runtime slightly faster but increases the risk of undetected internal errors\n+causing wrong code to be generated.\n+\n+Individual checks can be enabled with these flags: @samp{assert}, @samp{df},\n+@samp{extra}, @samp{fold}, @samp{gc}, @samp{gcac}, @samp{gimple},\n+@samp{misc}, @samp{rtl}, @samp{rtlflag}, @samp{runtime}, @samp{tree},\n+@samp{types} and @samp{valgrind}.  @samp{extra} extends @samp{misc}\n+checking with extra checks that might affect code generation and should\n+therefore not differ between stage1 and later stages in bootstrap.\n+\n+The @samp{valgrind} check requires the external @command{valgrind} simulator,\n+available from @uref{http://valgrind.org/}.  The @samp{df}, @samp{rtl},\n+@samp{gcac} and @samp{valgrind} checks are very expensive.\n \n @item --disable-stage1-checking\n @itemx --enable-stage1-checking\n @itemx --enable-stage1-checking=@var{list}\n-If no @option{--enable-checking} option is specified the stage1\n-compiler will be built with @samp{yes} checking enabled, otherwise\n-the stage1 checking flags are the same as specified by\n+This option affects only bootstrap build.  If no @option{--enable-checking}\n+option is specified the stage1 compiler is built with @samp{yes} checking\n+enabled, otherwise the stage1 checking flags are the same as specified by\n @option{--enable-checking}.  To build the stage1 compiler with\n different checking options use @option{--enable-stage1-checking}.\n The list of checking options is the same as for @option{--enable-checking}."}]}