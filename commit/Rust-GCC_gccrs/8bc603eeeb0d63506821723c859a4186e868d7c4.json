{"sha": "8bc603eeeb0d63506821723c859a4186e868d7c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJjNjAzZWVlYjBkNjM1MDY4MjE3MjNjODU5YTQxODZlODY4ZDdjNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-09-19T06:47:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-19T06:47:52Z"}, "message": "locale-inst.cc: Add time_put_byname and time_get_byname instantiations.\n\n\n2000-09-18  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* src/locale-inst.cc: Add time_put_byname and\n\ttime_get_byname instantiations.\n\t* bits/locale_facets.h: Correct default, private derivation to\n\tpublic derivation in _byname declarations.\n\t* src/locale.cc (locale::classic()): Simplify.\n\t* src/localename.cc (locale::_Impl:: _Impl(const _Impl& __other,\n\tconst string& __name, category __cat, size_t __refs): Re-work for\n\tnamed locales.\n\t(_M_normalize_category_names): Remove.\n\n\t* testsuite/22_locale/global_templates.cc (test01): Tweaks.\n\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): More tests.\n\nFrom-SVN: r36526", "tree": {"sha": "0160cefdc354d328612f98b238e1724ad933adac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0160cefdc354d328612f98b238e1724ad933adac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc603eeeb0d63506821723c859a4186e868d7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc603eeeb0d63506821723c859a4186e868d7c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc603eeeb0d63506821723c859a4186e868d7c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc603eeeb0d63506821723c859a4186e868d7c4/comments", "author": null, "committer": null, "parents": [{"sha": "62f7f1f5688a2d4716f5523f08af3299c682da49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f7f1f5688a2d4716f5523f08af3299c682da49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f7f1f5688a2d4716f5523f08af3299c682da49"}], "stats": {"total": 312, "additions": 165, "deletions": 147}, "files": [{"sha": "6921b77769711058e14699054c35a26514036d95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -1,3 +1,18 @@\n+2000-09-18  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* src/locale-inst.cc: Add time_put_byname and\n+\ttime_get_byname instantiations.\n+\t* bits/locale_facets.h: Correct default, private derivation to\n+\tpublic derivation in _byname declarations.\n+\t* src/locale.cc (locale::classic()): Simplify.\n+\t* src/localename.cc (locale::_Impl:: _Impl(const _Impl& __other,\n+\tconst string& __name, category __cat, size_t __refs): Re-work for\n+\tnamed locales.\n+\t(_M_normalize_category_names): Remove.\n+\n+\t* testsuite/22_locale/global_templates.cc (test01): Tweaks.\n+\t* testsuite/22_locale/ctor_copy_dtor.cc (test01): More tests.\n+\n 2000-09-18  Yuri V. Baskakov  <yuribsk@lab.sun.mcst.ru>\n \n \t* bits/std_bitset.h (operator>>): Change to char_type."}, {"sha": "732eafce4cad1682f968e245ee854102362fcd73", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -682,6 +682,8 @@ namespace std\n       typedef _InIter  \t\t\titer_type;\n       typedef char_traits<_CharT> \t__traits_type;\n \n+      static locale::id id;\n+\n       explicit \n       num_get(size_t __refs = 0) : locale::facet(__refs) { }\n \n@@ -756,8 +758,6 @@ namespace std\n \t  ios_base::iostate& __err, void*& __v) const\n       { return do_get(__in, __end, __io, __err, __v); }      \n \n-      static locale::id id;\n-\n     protected:\n       virtual ~num_get() { }\n \n@@ -850,6 +850,8 @@ namespace std\n       typedef _CharT       char_type;\n       typedef _OutIter     iter_type;\n \n+      static locale::id id;\n+\n       explicit \n       num_put(size_t __refs = 0) : locale::facet(__refs) { }\n \n@@ -891,8 +893,6 @@ namespace std\n \t  const void* __v) const\n       { return do_put(__s, __f, __fill, __v); }\n \n-      static locale::id id;\n-\n     protected:\n       virtual \n       ~num_put() { };\n@@ -1234,6 +1234,8 @@ namespace std\n       typedef _CharT     char_type;\n       typedef _InIter    iter_type;\n \n+      static locale::id id;\n+\n       explicit \n       time_get(size_t __refs = 0) \n       : locale::facet (__refs), _M_daynames(0), _M_monthnames(0) { }\n@@ -1267,8 +1269,6 @@ namespace std\n \t       ios_base::iostate& __err, tm* __t) const\n       { return do_get_year(__s,__end,__f,__err,__t); }\n \n-      static locale::id id;\n-\n     protected:\n       virtual \n       ~time_get() \n@@ -1330,6 +1330,8 @@ namespace std\n       typedef _CharT     char_type;\n       typedef _OutIter   iter_type;\n \n+      static locale::id id;\n+\n       explicit \n       time_put(size_t __refs = 0) : locale::facet (__refs) { }\n \n@@ -1345,8 +1347,6 @@ namespace std\n \t  const tm* __tmb, char __format, char __modifier = 0) const\n       { return do_put(__s, __f, __fill, __tmb, __format, __modifier); }\n \n-      static locale::id id;\n-\n     protected:\n       virtual \n       ~time_put() { }\n@@ -1358,7 +1358,7 @@ namespace std\n     };\n \n   template<typename _CharT, typename _OutIter>\n-    class time_put_byname : time_put<_CharT, _OutIter>\n+    class time_put_byname : public time_put<_CharT, _OutIter>\n     {\n     public:\n       typedef _CharT     char_type;\n@@ -1367,6 +1367,7 @@ namespace std\n       explicit \n       time_put_byname(const char*, size_t __refs = 0) \n       : time_put<_CharT, _OutIter> (__refs) { }\n+\n     protected:\n       virtual \n       ~time_put_byname() { }\n@@ -1381,6 +1382,8 @@ namespace std\n       typedef _InIter       iter_type;\n       typedef basic_string<_CharT> string_type;\n \n+      static locale::id id;\n+\n       explicit \n       money_get(size_t __refs = 0) : locale::facet(__refs) { }\n \n@@ -1394,8 +1397,6 @@ namespace std\n \t   ios_base::iostate& __err, string_type& __digits) const\n       { return do_get(__s, __end, __intl, __f, __err, __digits); }\n \n-      static locale::id id;\n-\n     protected:\n       virtual \n       ~money_get() { }\n@@ -1421,6 +1422,8 @@ namespace std\n       typedef _OutIter            iter_type;\n       typedef basic_string<_CharT> string_type;\n \n+      static locale::id id;\n+\n       explicit \n       money_put(size_t __refs = 0) : locale::facet(__refs) { }\n \n@@ -1434,8 +1437,6 @@ namespace std\n \t  char_type __fill, const string_type& __digits) const\n       { return do_put(__s, __intl, __f, __fill, __digits); }\n \n-      static locale::id id;\n-\n     protected:\n       virtual \n       ~money_put() { }\n@@ -1535,6 +1536,7 @@ namespace std\n \n       explicit \n       moneypunct(size_t __refs = 0) : _Moneypunct<_CharT> (__refs) { }\n+\n     protected:\n       virtual \n       ~moneypunct() { }"}, {"sha": "252f95dda740f371251117b4bf224654253f6e29", "filename": "libstdc++-v3/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -443,7 +443,7 @@ namespace std\n     facet(size_t __refs = 0) throw();\n \n     virtual \n-    ~facet() {};\n+    ~facet() { };\n \n   private:\n     size_t _M_references;"}, {"sha": "0a2348f5825ae4e32183f07b5164bed57eec8a13", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -95,15 +95,16 @@ namespace std {\n #endif\n   \n   // time_get and time_put\n-  //template class time_get<char, obuf_iterator>;\n   template class time_put<char, obuf_iterator>;\n+  template class time_put_byname<char, obuf_iterator>;\n   template class time_get<char, ibuf_iterator>;\n-  template class time_put<char, ibuf_iterator>;\n+  template class time_get_byname<char, ibuf_iterator>;\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n-  //template class time_get<wchar_t, wobuf_iterator>;\n   template class time_put<wchar_t, wobuf_iterator>;\n+  template class time_put_byname<wchar_t, wobuf_iterator>;\n   template class time_get<wchar_t, wibuf_iterator>;\n-  template class time_put<wchar_t, wibuf_iterator>;\n+  template class time_get_byname<wchar_t, wibuf_iterator>;\n #endif\n \n   // messages"}, {"sha": "de57040f9acc5f2262e4e029486e1053bdd0d541", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -574,8 +574,7 @@ namespace std {\n \t  (_M_impl = __other._M_impl)->_M_add_reference();\n \t// Might throw:\n \telse\n-\t  _M_impl = new _Impl(*__other._M_impl, __name,\n-\t\t\t      _S_normalize_category(__cat), 1);\n+\t  _M_impl = new _Impl(*__other._M_impl, __name, __cat, 1);\n       }\n     else\n       throw runtime_error(\"attempt to create locale from NULL named locale\");\n@@ -651,29 +650,18 @@ namespace std {\n \t  _S_classic = new _Impl(26, 2, true, \"C\");\n \t  _S_global = _S_classic; \n \n-\t  // collate category\n \t  _S_classic->_M_facet_init(new std::collate<char>);\n-\t  \n-\t  // ctype category\n \t  _S_classic->_M_facet_init(new std::ctype<char>);\n \t  _S_classic->_M_facet_init(new codecvt<char, char, mbstate_t>);\n-\n-\t  // monetary category\n \t  _S_classic->_M_facet_init(new moneypunct<char, false>);\n \t  _S_classic->_M_facet_init(new moneypunct<char,true >);\n \t  _S_classic->_M_facet_init(new money_get<char>);\n \t  _S_classic->_M_facet_init(new money_put<char>);\n-\t  \n-\t  // numeric category\n \t  _S_classic->_M_facet_init(new numpunct<char>);\n \t  _S_classic->_M_facet_init(new num_get<char>);\n \t  _S_classic->_M_facet_init(new num_put<char>);\n-\t  \n-\t  // time category\n \t  _S_classic->_M_facet_init(new time_get<char>);\n \t  _S_classic->_M_facet_init(new time_put<char>);\n-\t  \n-\t  // messages category\n \t  _S_classic->_M_facet_init(new std::messages<char>);\n \n #ifdef  _GLIBCPP_USE_WCHAR_T"}, {"sha": "1b231c02bcda30bd0b720a074f031ac3590a3522", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 64, "deletions": 111, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -89,31 +89,27 @@ namespace std {\n   locale::_Impl::\n   _Impl(const _Impl& __other, const string& __name, category __cat, \n \tsize_t __refs)\n-    : _M_references(__refs - 1)\n-    //  , _M_facets(other._M_facets)\n-    //  , _M_category_names(other._M_category_names)\n-    , _M_has_name(__name != \"*\"), _M_name(__name)\n+    : _M_references(__refs - 1), _M_has_name(__other._M_name != \"*\")\n   {\n-#if 1\n     typedef vector<facet*, allocator<facet*> > __vec_facet;\n     typedef vector<string, allocator<string> > __vec_string;\n+\n+    __cat = _S_normalize_category(__cat);  // might throw\n     try {\n       _M_facets = new __vec_facet(*(__other._M_facets));\n     }\n-    catch (...) {\n+    catch(...) {\n       delete _M_facets;\n       throw;\n     }\n     try {\n        _M_category_names = new __vec_string(*(__other._M_category_names));\n     }\n-    catch (...) {\n+    catch(...) {\n       delete _M_category_names;\n       throw;\n     }\n-#endif\n-    // XXX Nathan what are you doing here? Is this supposed to be const?\n-    // static void(_Impl::* const ctors[]) (const char*) = \n+\n     static void(_Impl::* ctors[]) (const char*) = \n     {\n       //  NB: Order must match the decl order in class locale.\n@@ -126,33 +122,35 @@ namespace std {\n       0\n     };\n     \n-    _S_initialize();\n-    std::vector<facet*>::iterator __it = _M_facets->begin();\n+    __vec_facet::iterator __it = _M_facets->begin();\n     for (; __it != _M_facets->end(); ++__it)\n       (*__it)->_M_add_reference();\n \n-    try {\n-      category __ccategory = _S_normalize_category(__cat);  // might throw\n-      _M_normalize_category_names(__name, __ccategory);\n-\t\n-      unsigned mask = (locale::all & -(unsigned)locale::all);\n-      for (unsigned ix = 0; (-mask & __cat) != 0; ++ix, (mask <<= 1))\n-\t{\n-\t  if (!(mask & __cat))\n-\t    continue;\n-\t  \n-\t  if (mask & __ccategory)\n-\t    _M_replace_category(_S_classic, _S_facet_categories[ix]);\n-\t  else\n-\t    (this->*ctors[ix]) (__name.c_str());\n-\t}\n-    }\n-    catch (...) {\n-      __it = _M_facets->begin();\n-      for (; __it != _M_facets->end(); ++__it)\n-\t(*__it)->_M_remove_reference();\n-      throw;\n-    }\n+    try \n+      {\n+\tunsigned mask = (locale::all & -(unsigned)locale::all);\n+\tfor (unsigned ix = 0; (-mask & __cat) != 0; ++ix, (mask <<= 1))\n+\t  {\n+\t    if (!(mask & __cat))\n+\t      continue;\n+\t    \n+\t    if (mask & __cat)\n+\t      _M_replace_category(_S_classic, _S_facet_categories[ix]);\n+\t    else\n+\t      (this->*ctors[ix])(__name.c_str());\n+\t  }\n+      }\n+    catch(...) \n+      {\n+\t__it = _M_facets->begin();\n+\tfor (; __it != _M_facets->end(); ++__it)\n+\t  (*__it)->_M_remove_reference();\n+\tthrow;\n+      }\n+\n+    // XXX May need to be adjusted\n+    if (__cat == all)\n+      _M_name = __name;\n   }\n   \n   void\n@@ -214,107 +212,62 @@ namespace std {\n     __fpr = __fp;\n   }\n  \n-  locale::category\n-  locale::_Impl::_M_normalize_category_names(const string&, \n-\t\t\t\t\t     locale::category __cat)\n-  {\n-    // The problem to be solved here is that locale names\n-    // generally have one of two forms: they might have\n-    // only one component, such as \"en_US\"; or they might\n-    // have six, such as \"en_US fr_FR en_US C C C\", where\n-    // each component names a category.  Each vendor has\n-    // a different order of categories.  Each vendor uses\n-    // a different format:\n-    //    AIX uses \"C C C C C C\"\n-    //    Sun uses \"/C/C/C/C/C/C\"\n-    //    HP uses  \"/0:C;1:C;2:C;3:C;4:C;5:C;6:C;/\"\n-    //    (where the 0th element is for LC_ALL.)\n-    // Most systems (except AIX) permit the long form only for\n-    // setlocale(LC_ALL,...), and require the short form for\n-    // other calls.  All this matters because locale names are\n-    // supposed to be compatible between locale(\"\") and\n-    // setlocale(..., \"\") constructors.\n-    \n-    return __cat;\n-#if 0 /* XXX not done */\n-    unsigned mask = (locale::all & -(unsigned)locale::all);\n-    for (unsigned ix = 0; (-mask & __cat) != 0; ++ix, (mask <<= 1))\n-      {\n-\t\n-      }\n-#endif\n-  }\n-\n   void \n-  locale::_Impl::_M_construct_collate(const char* /*__name*/)\n+  locale::_Impl::_M_construct_collate(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::collate_byname<char>(__name));\n-    _M_facet_init(new std::collate_byname<wchar_t>(__name));\n-#endif\n+    _M_facet_init(new collate_byname<char>(__name, 0));\n+    _M_facet_init(new collate_byname<wchar_t>(__name, 0));\n   }\n \n   void \n-  locale::_Impl::_M_construct_ctype(const char* /*__name*/)\n+  locale::_Impl::_M_construct_ctype(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::ctype_byname<char>(__name));\n-    _M_facet_init(new std::ctype_byname<wchar_t>(__name));\n-    _M_facet_init(new std::codecvt_byname<char, char, mbstate_t>(__name));\n-    _M_facet_init(new std::codecvt_byname<wchar_t, char, mbstate_t>(__name));\n-#endif\n+    _M_facet_init(new ctype_byname<char>(__name, 0));\n+    _M_facet_init(new ctype_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new codecvt_byname<char, char, mbstate_t>(__name));\n+    _M_facet_init(new codecvt_byname<wchar_t, char, mbstate_t>(__name));\n   }\n     \n   void \n-  locale::_Impl::_M_construct_monetary(const char* /*__name*/)\n+  locale::_Impl::_M_construct_monetary(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::moneypunct_byname<char, false>(__name));\n-    _M_facet_init(new std::moneypunct_byname<wchar_t, false>(__name));\n-    _M_facet_init(new std::moneypunct_byname<char, true >(__name));\n-    _M_facet_init(new std::moneypunct_byname<wchar_t, true >(__name));\n+    _M_facet_init(new moneypunct_byname<char, false>(__name, 0));\n+    _M_facet_init(new moneypunct_byname<wchar_t, false>(__name, 0));\n+    _M_facet_init(new moneypunct_byname<char, true >(__name, 0));\n+    _M_facet_init(new moneypunct_byname<wchar_t, true >(__name, 0));\n \n-    locale::_M_initialize();\n-    _M_replace_facet(locale::_S_classic, &std::money_get<char>(__name)::id);\n-    _M_replace_facet(locale::_S_classic, &std::money_get<wchar_t>(__name)::id);\n-    _M_replace_facet(locale::_S_classic, &std::money_put<char>(__name)::id);\n-    _M_replace_facet(locale::_S_classic, &std::money_put<wchar_t>(__name)::id);\n-#endif\n+    _M_replace_facet(locale::_S_classic, &money_get<char>::id);\n+    _M_replace_facet(locale::_S_classic, &money_get<wchar_t>::id);\n+    _M_replace_facet(locale::_S_classic, &money_put<char>::id);\n+    _M_replace_facet(locale::_S_classic, &money_put<wchar_t>::id);\n   }\n     \n   void \n-  locale::_Impl::_M_construct_numeric(const char* /*__name*/)\n+  locale::_Impl::_M_construct_numeric(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::numpunct_byname<char>(__name));\n-    _M_facet_init(new std::numpunct_byname<wchar_t>(__name));\n+    _M_facet_init(new numpunct_byname<char>(__name, 0));\n+    _M_facet_init(new numpunct_byname<wchar_t>(__name, 0));\n \n-    locale::_M_initialize();\n-    _M_replace_facet(locale::_S_classic, &std::num_get<char>::id);\n-    _M_replace_facet(locale::_S_classic, &std::num_get<wchar_t>::id);\n-    _M_replace_facet(locale::_S_classic, &std::num_put<char>::id);\n-    _M_replace_facet(locale::_S_classic, &std::num_put<wchar_t>::id);\n-#endif\n+    _M_replace_facet(locale::_S_classic, &num_get<char>::id);\n+    _M_replace_facet(locale::_S_classic, &num_get<wchar_t>::id);\n+    _M_replace_facet(locale::_S_classic, &num_put<char>::id);\n+    _M_replace_facet(locale::_S_classic, &num_put<wchar_t>::id);\n   }\n     \n   void \n-  locale::_Impl::_M_construct_time(const char* /*__name*/)\n+  locale::_Impl::_M_construct_time(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::time_get_byname<char>(__name));\n-    _M_facet_init(new std::time_get_byname<wchar_t>(__name));\n-    _M_facet_init(new std::time_put_byname<char>(__name));\n-    _M_facet_init(new std::time_put_byname<wchar_t>(__name));\n-#endif\n+    _M_facet_init(new time_get_byname<char>(__name, 0));\n+    _M_facet_init(new time_get_byname<wchar_t>(__name, 0));\n+    _M_facet_init(new time_put_byname<char>(__name, 0));\n+    _M_facet_init(new time_put_byname<wchar_t>(__name, 0));\n   }\n     \n   void \n-  locale::_Impl::_M_construct_messages(const char* /*__name*/)\n+  locale::_Impl::_M_construct_messages(const char* __name)\n   {\n-#if 0\n-    _M_facet_init(new std::messages_byname<char>(__name));\n-    _M_facet_init(new std::messages_byname<wchar_t>(__name));\n-#endif\n+    _M_facet_init(new messages_byname<char>(__name, 0));\n+    _M_facet_init(new messages_byname<wchar_t>(__name, 0));\n   }\n }\n "}, {"sha": "983a28f5aa3210b3f4be136375863f6fa57cb1fc", "filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctor_copy_dtor.cc?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -24,13 +24,23 @@\n #include <stdexcept>\n #include <debug_assert.h>\n \n-typedef std::codecvt<char, char, mbstate_t> ccodecvt;\n-class gnu_codecvt: public ccodecvt { }; \n+typedef std::codecvt<char, char, mbstate_t> \t\tc_codecvt;\n+typedef std::codecvt_byname<char, char, mbstate_t> \tc_codecvt_byname;\n+typedef std::codecvt<wchar_t, char, mbstate_t>\t\tw_codecvt;\n+typedef std::codecvt_byname<wchar_t, char, mbstate_t>\tw_codecvt_byname;\n+\n+class gnu_codecvt: public c_codecvt { }; \n \n void test01()\n {\n   using namespace std;\n \n+  typedef unsigned short\t\t\tunicode_t;\n+  typedef unicode_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef __enc_traits\t\t\t\tenc_type;\n+  typedef codecvt<int_type, ext_type, enc_type>\tunicode_codecvt;\n+\n   bool test = true;\n   string str1, str2;\n \n@@ -43,6 +53,55 @@ void test01()\n   locale loc02(locale::classic(), new gnu_codecvt);\n   VERIFY (loc01 != loc02);\n   VERIFY (loc02.name() == \"*\");\n+  try\n+    {\n+      VERIFY (has_facet<gnu_codecvt>(loc02));\n+      VERIFY (has_facet<c_codecvt>(loc02));\n+      VERIFY (has_facet<w_codecvt>(loc02));\n+    }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    {  VERIFY (has_facet<c_codecvt_byname>(loc02)); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    {  VERIFY (has_facet<w_codecvt_byname>(loc02)); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  // unicode_codecvt\n+  locale loc13(locale::classic(), new unicode_codecvt);  \n+  VERIFY (loc01 != loc13);\n+  VERIFY (loc13.name() == \"*\");\n+  try \n+    {\n+      VERIFY (has_facet<c_codecvt>(loc13));\n+      VERIFY (has_facet<w_codecvt>(loc13));\n+      VERIFY (has_facet<unicode_codecvt>(loc13));\n+    }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    {  VERIFY (has_facet<c_codecvt_byname>(loc13)); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    {  VERIFY (has_facet<w_codecvt_byname>(loc13)); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+  catch(...)\n+    { VERIFY( false ); }\n \n   // 2\n   // locale() throw()\n@@ -74,7 +133,8 @@ void test01()\n   // 4\n   // locale(const locale& other, const char* std_name, category)\n   locale loc09(loc06, \"C\", locale::ctype);\n-  VERIFY (loc09.name() == \"fr_FR\");\n+  VERIFY (loc09.name() != \"fr_FR\");\n+  VERIFY (loc09.name() != \"C\");\n   VERIFY (loc09 != loc01);  \n   VERIFY (loc09 != loc06);  \n   // XXX somehow check that the ctype, codecvt facets have \"C\" locale bits...\n@@ -98,7 +158,6 @@ void test01()\n     { VERIFY (false); }\n   \n \n-\n }\n \n int main ()"}, {"sha": "74661048222b686193428e723c1c5b877231a077", "filename": "libstdc++-v3/testsuite/22_locale/global_templates.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc603eeeb0d63506821723c859a4186e868d7c4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc?ref=8bc603eeeb0d63506821723c859a4186e868d7c4", "patch": "@@ -57,7 +57,7 @@ void test01()\n     { const ccodecvt& cvt03 = use_facet<gnu_codecvt>(cloc); }\n   catch(bad_cast& obj)\n     { VERIFY( true ); }\n-    catch(...)\n+  catch(...)\n     { VERIFY( false ); }\n }\n "}]}