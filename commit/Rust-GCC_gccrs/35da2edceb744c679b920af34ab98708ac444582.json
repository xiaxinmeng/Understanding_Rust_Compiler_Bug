{"sha": "35da2edceb744c679b920af34ab98708ac444582", "node_id": "C_kwDOANBUbNoAKDM1ZGEyZWRjZWI3NDRjNjc5YjkyMGFmMzRhYjk4NzA4YWM0NDQ1ODI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-11T12:55:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: get rid of virtual dispatch for substitution proxys\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty.cc (BaseType::has_subsititions_defined): new implementation\n\t(BaseType::needs_generic_substitutions): likewise\n\t(ProjectionType::needs_generic_substitutions): remove\n\t(ProjectionType::has_subsititions_defined): remove\n\t* typecheck/rust-tyty.h: update header\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "5027387b9a5bcf2fda9acdda83d4106e3dc86cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5027387b9a5bcf2fda9acdda83d4106e3dc86cee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35da2edceb744c679b920af34ab98708ac444582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35da2edceb744c679b920af34ab98708ac444582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35da2edceb744c679b920af34ab98708ac444582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35da2edceb744c679b920af34ab98708ac444582/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c741adc217fe270239ce2543e119f5f96d241d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c741adc217fe270239ce2543e119f5f96d241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c741adc217fe270239ce2543e119f5f96d241d"}], "stats": {"total": 188, "additions": 126, "deletions": 62}, "files": [{"sha": "2fe6803d02772dc49d47b03195c2aa0722b34ad7", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 123, "deletions": 24, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35da2edceb744c679b920af34ab98708ac444582/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35da2edceb744c679b920af34ab98708ac444582/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=35da2edceb744c679b920af34ab98708ac444582", "patch": "@@ -257,18 +257,6 @@ BaseType::append_reference (HirId id)\n   combined.insert (id);\n }\n \n-bool\n-BaseType::has_subsititions_defined () const\n-{\n-  return false;\n-}\n-\n-bool\n-BaseType::needs_generic_substitutions () const\n-{\n-  return false;\n-}\n-\n const RustIdent &\n BaseType::get_ident () const\n {\n@@ -821,6 +809,128 @@ BaseType::is_concrete () const\n   return false;\n }\n \n+bool\n+BaseType::has_subsititions_defined () const\n+{\n+  const TyTy::BaseType *x = destructure ();\n+  switch (x->get_kind ())\n+    {\n+    case INFER:\n+    case BOOL:\n+    case CHAR:\n+    case INT:\n+    case UINT:\n+    case FLOAT:\n+    case USIZE:\n+    case ISIZE:\n+    case NEVER:\n+    case STR:\n+    case DYNAMIC:\n+    case ERROR:\n+    case FNPTR:\n+    case ARRAY:\n+    case SLICE:\n+    case POINTER:\n+    case REF:\n+    case TUPLE:\n+    case PARAM:\n+    case PLACEHOLDER:\n+      return false;\n+\n+      case PROJECTION: {\n+\tconst ProjectionType &p = *static_cast<const ProjectionType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (p);\n+\treturn ref.has_substitutions ();\n+      }\n+      break;\n+\n+      case FNDEF: {\n+\tconst FnType &fn = *static_cast<const FnType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (fn);\n+\treturn ref.has_substitutions ();\n+      }\n+      break;\n+\n+      case ADT: {\n+\tconst ADTType &adt = *static_cast<const ADTType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (adt);\n+\treturn ref.has_substitutions ();\n+      }\n+      break;\n+\n+      case CLOSURE: {\n+\tconst ClosureType &closure = *static_cast<const ClosureType *> (x);\n+\tconst SubstitutionRef &ref\n+\t  = static_cast<const SubstitutionRef &> (closure);\n+\treturn ref.has_substitutions ();\n+      }\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n+bool\n+BaseType::needs_generic_substitutions () const\n+{\n+  const TyTy::BaseType *x = destructure ();\n+  switch (x->get_kind ())\n+    {\n+    case INFER:\n+    case BOOL:\n+    case CHAR:\n+    case INT:\n+    case UINT:\n+    case FLOAT:\n+    case USIZE:\n+    case ISIZE:\n+    case NEVER:\n+    case STR:\n+    case DYNAMIC:\n+    case ERROR:\n+    case FNPTR:\n+    case ARRAY:\n+    case SLICE:\n+    case POINTER:\n+    case REF:\n+    case TUPLE:\n+    case PARAM:\n+    case PLACEHOLDER:\n+      return false;\n+\n+      case PROJECTION: {\n+\tconst ProjectionType &p = *static_cast<const ProjectionType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (p);\n+\treturn ref.needs_substitution ();\n+      }\n+      break;\n+\n+      case FNDEF: {\n+\tconst FnType &fn = *static_cast<const FnType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (fn);\n+\treturn ref.needs_substitution ();\n+      }\n+      break;\n+\n+      case ADT: {\n+\tconst ADTType &adt = *static_cast<const ADTType *> (x);\n+\tconst SubstitutionRef &ref = static_cast<const SubstitutionRef &> (adt);\n+\treturn ref.needs_substitution ();\n+      }\n+      break;\n+\n+      case CLOSURE: {\n+\tconst ClosureType &closure = *static_cast<const ClosureType *> (x);\n+\tconst SubstitutionRef &ref\n+\t  = static_cast<const SubstitutionRef &> (closure);\n+\treturn ref.needs_substitution ();\n+      }\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n // InferType\n \n InferType::InferType (HirId ref, InferTypeKind infer_kind, Location locus,\n@@ -3352,23 +3462,12 @@ ProjectionType::get_name () const\n   return as_string ();\n }\n \n-bool\n-ProjectionType::needs_generic_substitutions () const\n-{\n-  return needs_substitution ();\n-}\n-\n-bool\n-ProjectionType::has_subsititions_defined () const\n-{\n-  return has_substitutions ();\n-}\n-\n const BaseType *\n ProjectionType::get () const\n {\n   return base;\n }\n+\n BaseType *\n ProjectionType::get ()\n {"}, {"sha": "e4c714f03f3b622c8d0053c541d9b6acc0bc28f1", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35da2edceb744c679b920af34ab98708ac444582/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35da2edceb744c679b920af34ab98708ac444582/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=35da2edceb744c679b920af34ab98708ac444582", "patch": "@@ -154,14 +154,13 @@ class BaseType : public TypeBoundsMappings\n   const RustIdent &get_ident () const;\n   Location get_locus () const;\n \n+  bool has_subsititions_defined () const;\n+  bool needs_generic_substitutions () const;\n+\n   /* Returns a pointer to a clone of this. The caller is responsible for\n    * releasing the memory of the returned ty. */\n   virtual BaseType *clone () const = 0;\n \n-  virtual bool has_subsititions_defined () const;\n-\n-  virtual bool needs_generic_substitutions () const;\n-\n protected:\n   BaseType (HirId ref, HirId ty_ref, TypeKind kind, RustIdent ident,\n \t    std::set<HirId> refs = std::set<HirId> ());\n@@ -562,16 +561,6 @@ class ADTType : public BaseType, public SubstitutionRef\n \n   BaseType *clone () const final override;\n \n-  bool needs_generic_substitutions () const override final\n-  {\n-    return needs_substitution ();\n-  }\n-\n-  bool has_subsititions_defined () const override final\n-  {\n-    return has_substitutions ();\n-  }\n-\n   size_t number_of_variants () const { return variants.size (); }\n \n   std::vector<VariantDef *> &get_variants () { return variants; }\n@@ -718,16 +707,6 @@ class FnType : public BaseType, public SubstitutionRef\n \n   BaseType *clone () const final override;\n \n-  bool needs_generic_substitutions () const override final\n-  {\n-    return needs_substitution ();\n-  }\n-\n-  bool has_subsititions_defined () const override final\n-  {\n-    return has_substitutions ();\n-  }\n-\n   FnType *\n   handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n@@ -839,16 +818,6 @@ class ClosureType : public BaseType, public SubstitutionRef\n \n   BaseType *clone () const final override;\n \n-  bool needs_generic_substitutions () const override final\n-  {\n-    return needs_substitution ();\n-  }\n-\n-  bool has_subsititions_defined () const override final\n-  {\n-    return has_substitutions ();\n-  }\n-\n   ClosureType *\n   handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n@@ -1312,10 +1281,6 @@ class ProjectionType : public BaseType, public SubstitutionRef\n \n   std::string get_name () const override final;\n \n-  bool needs_generic_substitutions () const override final;\n-\n-  bool has_subsititions_defined () const override final;\n-\n   const BaseType *get () const;\n   BaseType *get ();\n "}]}