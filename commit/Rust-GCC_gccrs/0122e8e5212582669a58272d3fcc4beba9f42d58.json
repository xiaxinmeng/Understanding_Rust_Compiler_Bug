{"sha": "0122e8e5212582669a58272d3fcc4beba9f42d58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyMmU4ZTUyMTI1ODI2NjlhNTgyNzJkM2ZjYzRiZWJhOWY0MmQ1OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-27T11:57:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-27T11:57:34Z"}, "message": "Move fmin and fmax folds to match.pd\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_fmin_fmax): Delete.\n\t(fold_builtin_2): Handle constant fmin and fmax arguments here.\n\t* match.pd: Add rules previously handled by fold_builtin_fmin_fmax.\n\nFrom-SVN: r229432", "tree": {"sha": "745740d734f1d7a2350948b3d5b6f428d3620a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745740d734f1d7a2350948b3d5b6f428d3620a3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0122e8e5212582669a58272d3fcc4beba9f42d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0122e8e5212582669a58272d3fcc4beba9f42d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0122e8e5212582669a58272d3fcc4beba9f42d58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0122e8e5212582669a58272d3fcc4beba9f42d58/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "783879e617bf3b4d0d94ccabb9a6f40b43c985a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783879e617bf3b4d0d94ccabb9a6f40b43c985a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783879e617bf3b4d0d94ccabb9a6f40b43c985a2"}], "stats": {"total": 86, "additions": 36, "deletions": 50}, "files": [{"sha": "b4e1018a3768b5a7776e07be80afab85d5c60305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0122e8e5212582669a58272d3fcc4beba9f42d58", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_fmin_fmax): Delete.\n+\t(fold_builtin_2): Handle constant fmin and fmax arguments here.\n+\t* match.pd: Add rules previously handled by fold_builtin_fmin_fmax.\n+\n 2015-10-27  Evandro Menezes  <e.menezes@samsung.com>\n \n \t* config/aarch64/aarch64-protos.h (cpu_addrcost_table): Split member"}, {"sha": "86eac5c66fd2842e05b282c629000480edd64334", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0122e8e5212582669a58272d3fcc4beba9f42d58", "patch": "@@ -7891,51 +7891,6 @@ fold_builtin_fma (location_t loc, tree arg0, tree arg1, tree arg2, tree type)\n   return NULL_TREE;\n }\n \n-/* Fold a call to builtin fmin or fmax.  */\n-\n-static tree\n-fold_builtin_fmin_fmax (location_t loc, tree arg0, tree arg1,\n-\t\t\ttree type, bool max)\n-{\n-  if (validate_arg (arg0, REAL_TYPE) && validate_arg (arg1, REAL_TYPE))\n-    {\n-      /* Calculate the result when the argument is a constant.  */\n-      tree res = do_mpfr_arg2 (arg0, arg1, type, (max ? mpfr_max : mpfr_min));\n-\n-      if (res)\n-\treturn res;\n-\n-      /* If either argument is NaN, return the other one.  Avoid the\n-\t transformation if we get (and honor) a signalling NaN.  Using\n-\t omit_one_operand() ensures we create a non-lvalue.  */\n-      if (TREE_CODE (arg0) == REAL_CST\n-\t  && real_isnan (&TREE_REAL_CST (arg0))\n-\t  && (! HONOR_SNANS (arg0)\n-\t      || ! TREE_REAL_CST (arg0).signalling))\n-\treturn omit_one_operand_loc (loc, type, arg1, arg0);\n-      if (TREE_CODE (arg1) == REAL_CST\n-\t  && real_isnan (&TREE_REAL_CST (arg1))\n-\t  && (! HONOR_SNANS (arg1)\n-\t      || ! TREE_REAL_CST (arg1).signalling))\n-\treturn omit_one_operand_loc (loc, type, arg0, arg1);\n-\n-      /* Transform fmin/fmax(x,x) -> x.  */\n-      if (operand_equal_p (arg0, arg1, OEP_PURE_SAME))\n-\treturn omit_one_operand_loc (loc, type, arg0, arg1);\n-\n-      /* Convert fmin/fmax to MIN_EXPR/MAX_EXPR.  C99 requires these\n-\t functions to return the numeric arg if the other one is NaN.\n-\t These tree codes don't honor that, so only transform if\n-\t -ffinite-math-only is set.  C99 doesn't require -0.0 to be\n-\t handled, so we don't have to worry about it either.  */\n-      if (flag_finite_math_only)\n-\treturn fold_build2_loc (loc, (max ? MAX_EXPR : MIN_EXPR), type,\n-\t\t\t    fold_convert_loc (loc, type, arg0),\n-\t\t\t    fold_convert_loc (loc, type, arg1));\n-    }\n-  return NULL_TREE;\n-}\n-\n /* Fold a call to builtin carg(a+bi) -> atan2(b,a).  */\n \n static tree\n@@ -9241,10 +9196,14 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1)\n       break;\n \n     CASE_FLT_FN (BUILT_IN_FMIN):\n-      return fold_builtin_fmin_fmax (loc, arg0, arg1, type, /*max=*/false);\n+      if (validate_arg (arg0, REAL_TYPE) && validate_arg (arg1, REAL_TYPE))\n+\treturn do_mpfr_arg2 (arg0, arg1, type, mpfr_min);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_FMAX):\n-      return fold_builtin_fmin_fmax (loc, arg0, arg1, type, /*max=*/true);\n+      if (validate_arg (arg0, REAL_TYPE) && validate_arg (arg1, REAL_TYPE))\n+\treturn do_mpfr_arg2 (arg0, arg1, type, mpfr_max);\n+      break;\n \n     case BUILT_IN_ISGREATER:\n       return fold_builtin_unordered_cmp (loc, fndecl,"}, {"sha": "73090066d3a67be371009c78ab8cb1543be32855", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0122e8e5212582669a58272d3fcc4beba9f42d58/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=0122e8e5212582669a58272d3fcc4beba9f42d58", "patch": "@@ -103,6 +103,8 @@ DEFINE_MATH_FN (CABS)\n DEFINE_MATH_FN (TRUNC)\n DEFINE_MATH_FN (NEARBYINT)\n DEFINE_MATH_FN (SIGNBIT)\n+DEFINE_MATH_FN (FMIN)\n+DEFINE_MATH_FN (FMAX)\n \n DEFINE_INT_AND_FLOAT_ROUND_FN (FLOOR)\n DEFINE_INT_AND_FLOAT_ROUND_FN (CEIL)\n@@ -1170,9 +1172,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (minus (convert @1) (convert @2)))))))\n \n \n-/* Simplifications of MIN_EXPR and MAX_EXPR.  */\n+/* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n-(for minmax (min max)\n+(for minmax (min max FMIN FMAX)\n  (simplify\n   (minmax @0 @0)\n   @0))\n@@ -1196,7 +1198,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && TYPE_MAX_VALUE (type)\n       && operand_equal_p (@1, TYPE_MAX_VALUE (type), OEP_ONLY_CONST))\n   @1))\n-\n+(for minmax (FMIN FMAX)\n+ /* If either argument is NaN, return the other one.  Avoid the\n+    transformation if we get (and honor) a signalling NaN.  */\n+ (simplify\n+  (minmax:c @0 REAL_CST@1)\n+  (if (real_isnan (TREE_REAL_CST_PTR (@1))\n+       && (!HONOR_SNANS (@1) || !TREE_REAL_CST (@1).signalling))\n+   @0)))\n+/* Convert fmin/fmax to MIN_EXPR/MAX_EXPR.  C99 requires these\n+   functions to return the numeric arg if the other one is NaN.\n+   MIN and MAX don't honor that, so only transform if -ffinite-math-only\n+   is set.  C99 doesn't require -0.0 to be handled, so we don't have to\n+   worry about it either.  */\n+(if (flag_finite_math_only)\n+ (simplify\n+  (FMIN @0 @1)\n+  (min @0 @1))\n+ (simplify\n+  (FMAX @0 @1)\n+  (max @0 @1)))\n \n /* Simplifications of shift and rotates.  */\n "}]}