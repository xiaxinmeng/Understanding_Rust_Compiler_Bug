{"sha": "4035f24587ce1716adcdafadc5d4a1f7528ddf58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzNWYyNDU4N2NlMTcxNmFkY2RhZmFkYzVkNGExZjc1MjhkZGY1OA==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@il.ibm.com", "date": "2006-02-16T09:59:00Z"}, "committer": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2006-02-16T09:59:00Z"}, "message": "re PR testsuite/25918 (gcc.dg/vect/vect-reduc-dot-s16.c scan-tree-dump-times vectorized 1 loops 1 and gcc.dg/vect/vect-reduc-pattern-2.c scan-tree-dump-times vectorized 2 loops 1 fail)\n\ntestsuite/\n2006-02-16  Victor Kaplansky  <victork@il.ibm.com>\n\n\tPR tree-opt/25918\n\t* lib/target-supports.exp\n\t(check_effective_target_vect_short_mult): New.\n\t(check_effective_target_vect_char_mult): New.\n\t(check_effective_target_vect_widen_sum_qi_to_si): New.\n\t(check_effective_target_vect_widen_sum_qi_to_hi): New.\n\t(check_effective_target_vect_widen_sum_hi_to_si): New.\n\t* gcc.dg/vect/vect-reduc-dot-s16.c: Remove, split into\n\tvect-reduc-dot-s16a.c and vect-reduc-dot-s16b.c\n\t* vect-reduc-dot-s16a.c: New, split from vect-reduc-dot-s16.c.\n\t* vect-reduc-dot-s16b.c: New, split from vect-reduc-dot-s16.c.\n\t* gcc.dg/vect/vect-reduc-pattern-2.c: Remove, split into\n\tvect-reduc-pattern-2a.c, vect-reduc-pattern-2b.c and\n\tvect-reduc-pattern-2c.c\n\t* gcc.dg/vect/vect-reduc-pattern-1.c: Remove, split into\n\tvect-reduc-pattern-1a.c, vect-reduc-pattern-1b.c and\n\tvect-reduc-pattern-1c.c\n\nFrom-SVN: r111135", "tree": {"sha": "44a3f54f258481f114ae568861977eccc840c348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44a3f54f258481f114ae568861977eccc840c348"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4035f24587ce1716adcdafadc5d4a1f7528ddf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4035f24587ce1716adcdafadc5d4a1f7528ddf58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4035f24587ce1716adcdafadc5d4a1f7528ddf58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4035f24587ce1716adcdafadc5d4a1f7528ddf58/comments", "author": null, "committer": null, "parents": [{"sha": "ca5b1d2cc72c58ff2c06c263c57a672f384e16e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8"}], "stats": {"total": 708, "additions": 486, "deletions": 222}, "files": [{"sha": "2ef471615b224fa1bf8c0a1a883c4a8c1a6209e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -1,3 +1,23 @@\n+2006-02-16  Victor Kaplansky  <victork@il.ibm.com>\n+\n+\tPR tree-opt/25918\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_short_mult): New.\n+\t(check_effective_target_vect_char_mult): New.\n+\t(check_effective_target_vect_widen_sum_qi_to_si): New.\n+\t(check_effective_target_vect_widen_sum_qi_to_hi): New.\n+\t(check_effective_target_vect_widen_sum_hi_to_si): New.\n+\t* gcc.dg/vect/vect-reduc-dot-s16.c: Remove, split into\n+\tvect-reduc-dot-s16a.c and vect-reduc-dot-s16b.c\n+\t* vect-reduc-dot-s16a.c: New, split from vect-reduc-dot-s16.c.\n+\t* vect-reduc-dot-s16b.c: New, split from vect-reduc-dot-s16.c.\n+\t* gcc.dg/vect/vect-reduc-pattern-2.c: Remove, split into\n+\tvect-reduc-pattern-2a.c, vect-reduc-pattern-2b.c and\n+\tvect-reduc-pattern-2c.c\n+\t* gcc.dg/vect/vect-reduc-pattern-1.c: Remove, split into\n+\tvect-reduc-pattern-1a.c, vect-reduc-pattern-1b.c and\n+\tvect-reduc-pattern-1c.c\n+\n 2005-02-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24557"}, {"sha": "d92511fcdfc4bdfa03cb26ea504f88d4bde69902", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s16a.c", "status": "renamed", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16a.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -4,61 +4,45 @@\n #include \"tree-vect.h\"\n \n #define N 64\n-\n-#define DOT1 43680\n-#define DOT2 43680\n+#define DOT 43680\n \n signed short X[N] __attribute__ ((__aligned__(16)));\n signed short Y[N] __attribute__ ((__aligned__(16)));\n \n-/* short->short->int dot product. \n-   Not detected as a dot-product pattern.\n-   Currently fails to be vectorized due to presence of type conversions. */\n-int\n-foo1(int len) {\n-  int i;\n-  int result = 0;\n-  short prod;\n-\n-  for (i=0; i<len; i++) {\n-    prod = X[i] * Y[i];\n-    result += prod;\n-  }\n-  return result;\n-}\n-\n /* short->int->int dot product.\n    Detected as a dot-product pattern.\n-   Vectorized on targets that support dot-product for signed shorts.  */ \n+   Vectorized on targets that support dot-product for signed shorts.  */\n+\n int\n-foo2(int len) {\n+foo (int len)\n+{\n   int i;\n   int result = 0;\n \n-  for (i=0; i<len; i++) {\n-    result += (X[i] * Y[i]);\n-  }\n+  for (i = 0; i < len; i++)\n+    {\n+      result += (X[i] * Y[i]);\n+    }\n   return result;\n }\n \n \n-int main (void)\n+int\n+main (void)\n {\n-  int i, dot1, dot2;\n+  int i;\n+  int dot;\n \n   check_vect ();\n \n-  for (i=0; i<N; i++) {\n-    X[i] = i;\n-    Y[i] = 64-i;\n-  }\n-\n-  dot1 = foo1 (N);\n-  if (dot1 != DOT1)\n-    abort ();\n+  for (i = 0; i < N; i++)\n+    {\n+      X[i] = i;\n+      Y[i] = N - i;\n+    }\n \n-  dot2 = foo2 (N);\n-  if (dot2 != DOT2)\n+  dot = foo (N);\n+  if (dot != DOT)\n     abort ();\n \n   return 0;", "previous_filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s16.c"}, {"sha": "feb7df031498c10de6d7ce4b58f3a21abee33d87", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s16b.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 64\n+\n+#define DOT 43680\n+\n+signed short X[N] __attribute__ ((__aligned__(16)));\n+signed short Y[N] __attribute__ ((__aligned__(16)));\n+\n+/* short->short->int dot product.  Should be vectorized on architectures\n+   supporting vectorized multiplication of two short args with short result,\n+   e.g \"mulv4hi3\" and widenning sum */\n+int\n+foo (int len)\n+{\n+  int i;\n+  int result = 0;\n+  short prod;\n+\n+  for (i = 0; i < len; i++)\n+    {\n+      prod = X[i] * Y[i];\n+      result += prod;\n+    }\n+  return result;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, dot;\n+\n+  check_vect ();\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      X[i] = i;\n+      Y[i] = 64 - i;\n+    }\n+\n+  dot = foo (N);\n+  if (dot != DOT)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_short_mult && vect_widen_sum_hi_to_si } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_short_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_hi_to_si } } } } */\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "61f1da19d6e9524f1f2e6b8aa27a381278c94eba", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1.c?ref=ca5b1d2cc72c58ff2c06c263c57a672f384e16e8", "patch": "@@ -1,60 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 16\n-#define SH_SUM 210\n-#define CH_SUM 120\n-\n-int main1 ()\n-{\n-  int i;\n-  unsigned short udata_sh[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28};\n-  unsigned char udata_ch[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  unsigned int intsum = 0;\n-  unsigned short shortsum = 0;\n-\n-  /* widenning sum: sum shorts into int.  */\n-  for (i = 0; i < N; i++){\n-    intsum += udata_sh[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != SH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into int.  */\n-  intsum = 0;\n-  for (i = 0; i < N; i++){\n-    intsum += udata_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != CH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into short.  \n-     pattern detected, but not vectorized yet. */\n-  for (i = 0; i < N; i++){\n-    shortsum += udata_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (shortsum != CH_SUM)\n-    abort ();\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  return main1 ();\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 3 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_widen_sum } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ca578a48306653ef2dd43c70f7999f5be590a4d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1a.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1a.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+unsigned short udata_sh[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  unsigned int intsum = 0;\n+\n+  /* widenning sum: sum shorts into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += udata_sh[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_hi_to_si } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_hi_to_si } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "443ec931916e9c84742e7d38f63cda5faa9518c4", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+unsigned char udata_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  unsigned int intsum = 0;\n+\n+  /* widenning sum: sum chars into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += udata_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_si } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_si } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "39eb48e720b1ff96f580843b3e15e9ec0a9484a3", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+unsigned char udata_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  unsigned short shortsum = 0;\n+\n+  /* widenning sum: sum chars into short.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      shortsum += udata_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (shortsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5423c4376d9fb951ebef7206e34430827d76ac09", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2.c", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2.c?ref=ca5b1d2cc72c58ff2c06c263c57a672f384e16e8", "patch": "@@ -1,67 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 16\n-#define SH_SUM 210\n-#define CH_SUM 120\n-\n-int main1 ()\n-{\n-  int i;\n-  signed short data_sh[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28};\n-  signed char data_ch[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  signed int intsum = 0;\n-  signed short shortsum = 0;\n-\n-  /* widenning sum: sum shorts into int.  */\n-  for (i = 0; i < N; i++){\n-    intsum += data_sh[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != SH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into int.  */\n-  intsum = 0;\n-  for (i = 0; i < N; i++){\n-    intsum += data_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != CH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into short.\n-     The widening-summation pattern is currently not detected because of this\n-     patch:\n-\n-     2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n-                                                                                \n-        PR tree-optimization/25125\n-   */\n-  for (i = 0; i < N; i++){\n-    shortsum += data_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (shortsum != CH_SUM)\n-    abort ();\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  return main1 ();\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 3 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 2 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_widen_sum } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a5030c6592092944282340f9b1693f5c6a7c8f40", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2a.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2a.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+signed short data_sh[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  signed int intsum = 0;\n+\n+  /* widenning sum: sum shorts into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += data_sh[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_hi_to_si } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_hi_to_si } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5ca5185628a7cff472e07657282c07ee42d5b93b", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+signed char data_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  signed int intsum = 0;\n+\n+  /* widenning sum: sum chars into int.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      intsum += data_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (intsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_si } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_si } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "7444ac737e521fdefb8456d836d035b4bff986c3", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2c.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2c.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+signed char data_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  signed short shortsum = 0;\n+\n+  /* widenning sum: sum chars into short.\n+     The widening-summation pattern is currently not detected because of this\n+     patch:\n+\n+     2005-12-26  Kazu Hirata  <kazu@codesourcery.com>\n+                                                                                \n+        PR tree-optimization/25125\n+   */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      shortsum += data_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (shortsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "6c844eac38ebd1ef1af3b8552b9ecb9a603eddf2", "filename": "gcc/testsuite/gcc.dg/vect/wrapv-vect-reduc-pattern-2.c", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5b1d2cc72c58ff2c06c263c57a672f384e16e8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2.c?ref=ca5b1d2cc72c58ff2c06c263c57a672f384e16e8", "patch": "@@ -1,59 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 16\n-#define SH_SUM 210\n-#define CH_SUM 120\n-\n-int main1 ()\n-{\n-  int i;\n-  signed short data_sh[N] = {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28};\n-  signed char data_ch[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  signed int intsum = 0;\n-  signed short shortsum = 0;\n-\n-  /* widenning sum: sum shorts into int.  */\n-  for (i = 0; i < N; i++){\n-    intsum += data_sh[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != SH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into int.  */\n-  intsum = 0;\n-  for (i = 0; i < N; i++){\n-    intsum += data_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (intsum != CH_SUM)\n-    abort ();\n-\n-  /* widenning sum: sum chars into short.  */\n-  for (i = 0; i < N; i++){\n-    shortsum += data_ch[i];\n-  }\n-\n-  /* check results:  */\n-  if (shortsum != CH_SUM)\n-    abort ();\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  return main1 ();\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 3 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target vect_widen_sum } } } */\n-/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "9296098d73f84af33592d9b73e5498a4f17ee240", "filename": "gcc/testsuite/gcc.dg/vect/wrapv-vect-reduc-pattern-2c.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fwrapv-vect-reduc-pattern-2c.c?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+signed char data_ch[N] =\n+  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n+#define SUM 210\n+\n+int\n+foo ()\n+{\n+  int i;\n+  signed short shortsum = 0;\n+\n+  /* widenning sum: sum chars into short.  */\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      shortsum += data_ch[i];\n+    }\n+\n+  /* check results:  */\n+  if (shortsum != SUM)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_sum_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_widen_sum_qi_to_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_qi_to_hi } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "49264b6eef610978018f8cf5c9ee9f926cdc38be", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035f24587ce1716adcdafadc5d4a1f7528ddf58/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4035f24587ce1716adcdafadc5d4a1f7528ddf58", "patch": "@@ -1434,6 +1434,67 @@ proc check_effective_target_vect_no_bitwise { } {\n     return $et_vect_no_bitwise_saved\n }\n \n+# Return 1 if the target plus current options supports a vector\n+# widening summation of *short* args into *int* result, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+                                                                                                \n+proc check_effective_target_vect_widen_sum_hi_to_si { } {\n+    global et_vect_widen_sum_hi_to_si\n+                                                                                                \n+    if [info exists et_vect_widen_sum_hi_to_si_saved] {\n+        verbose \"check_effective_target_vect_widen_sum_hi_to_si: using cached result\" 2\n+    } else {\n+        set et_vect_widen_sum_hi_to_si_saved 0\n+        if { [istarget powerpc*-*-*]\n+\t     || [istarget ia64-*-*] } {\n+            set et_vect_widen_sum_hi_to_si_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_vect_widen_sum_hi_to_si: returning $et_vect_widen_sum_hi_to_si_saved\" 2\n+    return $et_vect_widen_sum_hi_to_si_saved\n+}\n+\n+# Return 1 if the target plus current options supports a vector\n+# widening summation of *char* args into *short* result, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+                                                                                                \n+proc check_effective_target_vect_widen_sum_qi_to_hi { } {\n+    global et_vect_widen_sum_qi_to_hi\n+                                                                                                \n+    if [info exists et_vect_widen_sum_qi_to_hi_saved] {\n+        verbose \"check_effective_target_vect_widen_sum_qi_to_hi: using cached result\" 2\n+    } else {\n+        set et_vect_widen_sum_qi_to_hi_saved 0\n+        if { [istarget ia64-*-*] } {\n+            set et_vect_widen_sum_qi_to_hi_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_vect_widen_sum_qi_to_hi: returning $et_vect_widen_sum_qi_to_hi_saved\" 2\n+    return $et_vect_widen_sum_qi_to_hi_saved\n+}\n+\n+# Return 1 if the target plus current options supports a vector\n+# widening summation of *char* args into *int* result, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+                                                                                                \n+proc check_effective_target_vect_widen_sum_qi_to_si { } {\n+    global et_vect_widen_sum_qi_to_si\n+                                                                                                \n+    if [info exists et_vect_widen_sum_qi_to_si_saved] {\n+        verbose \"check_effective_target_vect_widen_sum_qi_to_si: using cached result\" 2\n+    } else {\n+        set et_vect_widen_sum_qi_to_si_saved 0\n+        if { [istarget powerpc*-*-*] } {\n+            set et_vect_widen_sum_qi_to_si_saved 1\n+        }\n+    }\n+    verbose \"check_effective_target_vect_widen_sum_qi_to_si: returning $et_vect_widen_sum_qi_to_si_saved\" 2\n+    return $et_vect_widen_sum_qi_to_si_saved\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # widening summation, 0 otherwise.\n #\n@@ -1583,6 +1644,46 @@ proc check_effective_target_vect_condition { } {\n     return $et_vect_cond_saved\n }\n \n+# Return 1 if the target supports vector char multiplication, 0 otherwise.\n+\n+proc check_effective_target_vect_char_mult { } {\n+    global et_vect_char_mult_saved\n+\n+    if [info exists et_vect_char_mult_saved] {\n+\tverbose \"check_effective_target_vect_char_mult: using cached result\" 2\n+    } else {\n+\tset et_vect_char_mult_saved 0\n+\tif { [istarget ia64-*-*]\n+\t     || [istarget i?86-*-*]\n+\t     || [istarget x86_64-*-*] } {\n+\t   set et_vect_char_mult_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_char_mult: returning $et_vect_char_mult_saved\" 2\n+    return $et_vect_char_mult_saved\n+}\n+\n+# Return 1 if the target supports vector short multiplication, 0 otherwise.\n+\n+proc check_effective_target_vect_short_mult { } {\n+    global et_vect_short_mult_saved\n+\n+    if [info exists et_vect_short_mult_saved] {\n+\tverbose \"check_effective_target_vect_short_mult: using cached result\" 2\n+    } else {\n+\tset et_vect_short_mult_saved 0\n+\tif { [istarget ia64-*-*]\n+\t     || [istarget i?86-*-*]\n+\t     || [istarget x86_64-*-*] } {\n+\t   set et_vect_short_mult_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_short_mult: returning $et_vect_short_mult_saved\" 2\n+    return $et_vect_short_mult_saved\n+}\n+\n # Return 1 if the target supports vector int multiplication, 0 otherwise.\n \n proc check_effective_target_vect_int_mult { } {"}]}