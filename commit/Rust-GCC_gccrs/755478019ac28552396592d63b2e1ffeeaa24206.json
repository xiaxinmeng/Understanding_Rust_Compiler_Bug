{"sha": "755478019ac28552396592d63b2e1ffeeaa24206", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1NDc4MDE5YWMyODU1MjM5NjU5MmQ2M2IyZTFmZmVlYWEyNDIwNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-09-01T17:18:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-09-01T17:18:03Z"}, "message": "c-common.c (const_strip_array_types): Delete.\n\n\t* c-common.c (const_strip_array_types): Delete.\n\t* c-common.h (const_strip_array_types): Likewise.\n\t* emit-rtl.c (const_next_insn, const_previous_insn,\n\tconst_next_nonnote_insn, const_prev_nonnote_insn,\n\tconst_next_real_insn, const_prev_real_insn,\n\tconst_next_active_insn, const_prev_active_insn, const_next_label,\n\tconst_prev_label): Delete.\n\t* gimple-low.c (block_may_fallthru): Use expr_last.\n\t* jump.c (reversed_comparison_code_parts): Use prev_nonnote_insn.\n\t* rtl.h (const_previous_insn, const_next_insn,\n\tconst_prev_nonnote_insn, const_next_nonnote_insn,\n\tconst_prev_real_insn, const_next_real_insn,\n\tconst_prev_active_insn, const_next_active_insn, const_prev_label,\n\tconst_next_label): Delete.\n\t* rtlanal.c (keep_with_call_p): Use next_nonnote_insn.\n\t* system.h (CONST_CAST): Update comment.\n\t* tree-cfg.c (tree_can_merge_blocks_p): Use last_stmt.\n\t(const_first_stmt, const_last_stmt): Delete.\n\t(tree_block_ends_with_condjump_p): Use last_stmt.\n\t* tree-flow.h (const_first_stmt, const_last_stmt): Delete.\n\t* tree-iterator.c (const_expr_first, const_expr_last,\n\tconst_expr_only): Delete.\n\t* tree.c (const_lookup_attribute): Likewise.\n\t(attribute_list_contained): Use lookup_attribute.\n\t* tree.h (const_lookup_attribute, const_expr_first,\n\tconst_expr_last, const_expr_only): Delete.\n\t\ncp:\n\t* tree.c (pod_type_p, zero_init_p): Use strip_array_types.\n\t* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):\n\tLikewise.\n\nFrom-SVN: r128014", "tree": {"sha": "219b94e14e50ec61d3797a74d100f7b56eb8d994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/219b94e14e50ec61d3797a74d100f7b56eb8d994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/755478019ac28552396592d63b2e1ffeeaa24206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755478019ac28552396592d63b2e1ffeeaa24206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/755478019ac28552396592d63b2e1ffeeaa24206", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/755478019ac28552396592d63b2e1ffeeaa24206/comments", "author": null, "committer": null, "parents": [{"sha": "b65e51a81fd877211cacb75bc07b56dcb45444b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65e51a81fd877211cacb75bc07b56dcb45444b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65e51a81fd877211cacb75bc07b56dcb45444b4"}], "stats": {"total": 507, "additions": 204, "deletions": 303}, "files": [{"sha": "4b0271c1c12575e3b8edd5e8326d6b71de0ab1f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -1,3 +1,32 @@\n+2007-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (const_strip_array_types): Delete.\n+\t* c-common.h (const_strip_array_types): Likewise.\n+\t* emit-rtl.c (const_next_insn, const_previous_insn,\n+\tconst_next_nonnote_insn, const_prev_nonnote_insn,\n+\tconst_next_real_insn, const_prev_real_insn,\n+\tconst_next_active_insn, const_prev_active_insn, const_next_label,\n+\tconst_prev_label): Delete.\n+\t* gimple-low.c (block_may_fallthru): Use expr_last.\n+\t* jump.c (reversed_comparison_code_parts): Use prev_nonnote_insn.\n+\t* rtl.h (const_previous_insn, const_next_insn,\n+\tconst_prev_nonnote_insn, const_next_nonnote_insn,\n+\tconst_prev_real_insn, const_next_real_insn,\n+\tconst_prev_active_insn, const_next_active_insn, const_prev_label,\n+\tconst_next_label): Delete.\n+\t* rtlanal.c (keep_with_call_p): Use next_nonnote_insn.\n+\t* system.h (CONST_CAST): Update comment.\n+\t* tree-cfg.c (tree_can_merge_blocks_p): Use last_stmt.\n+\t(const_first_stmt, const_last_stmt): Delete.\n+\t(tree_block_ends_with_condjump_p): Use last_stmt.\n+\t* tree-flow.h (const_first_stmt, const_last_stmt): Delete.\n+\t* tree-iterator.c (const_expr_first, const_expr_last,\n+\tconst_expr_only): Delete.\n+\t* tree.c (const_lookup_attribute): Likewise.\n+\t(attribute_list_contained): Use lookup_attribute.\n+\t* tree.h (const_lookup_attribute, const_expr_first,\n+\tconst_expr_last, const_expr_only): Delete.\n+\n 2007-09-01  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (create_name_tags): Use TYPE_VOLATILE"}, {"sha": "147f5c17763723294bfa39c63a4e630ddee8c850", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -4164,15 +4164,6 @@ strip_array_types (tree type)\n   return type;\n }\n \n-const_tree\n-const_strip_array_types (const_tree type)\n-{\n-  while (TREE_CODE (type) == ARRAY_TYPE)\n-    type = TREE_TYPE (type);\n-\n-  return type;\n-}\n-\n /* Recursively remove any '*' or '&' operator from TYPE.  */\n tree\n strip_pointer_operator (tree t)"}, {"sha": "428cb21f5a69daced6a5c8bfcd012a40af7ebffd", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -734,7 +734,6 @@ extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);\n extern int self_promoting_args_p (const_tree);\n extern tree strip_array_types (tree);\n-extern const_tree const_strip_array_types (const_tree);\n extern tree strip_pointer_operator (tree);\n extern tree strip_pointer_or_array_types (tree);\n extern HOST_WIDE_INT c_common_to_target_charset (HOST_WIDE_INT);"}, {"sha": "7b1b70fa5e992d827c324f4419f83f548f8303c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -1,3 +1,9 @@\n+2007-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree.c (pod_type_p, zero_init_p): Use strip_array_types.\n+\t* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):\n+\tLikewise.\n+\n 2007-08-31 Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/32597"}, {"sha": "3424f7a2bd2f04274f6d2567174f432d181d116f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -2052,7 +2052,9 @@ is_dummy_object (const_tree ob)\n int\n pod_type_p (const_tree t)\n {\n-  t = const_strip_array_types (t);\n+  /* This CONST_CAST is okay because strip_array_types returns it's\n+     argument unmodified and we assign it to a const_tree.  */\n+  t = strip_array_types ((tree)CONST_CAST(t));\n \n   if (t == error_mark_node)\n     return 1;\n@@ -2089,7 +2091,9 @@ class_tmpl_impl_spec_p (const_tree t)\n int\n zero_init_p (const_tree t)\n {\n-  t = const_strip_array_types (t);\n+  /* This CONST_CAST is okay because strip_array_types returns it's\n+     argument unmodified and we assign it to a const_tree.  */\n+  t = strip_array_types ((tree)CONST_CAST(t));\n \n   if (t == error_mark_node)\n     return 1;"}, {"sha": "b57fbe5455fb39ea3154e43486b0deaa952fdc94", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -6943,7 +6943,9 @@ comp_ptr_ttypes_const (tree to, tree from)\n int\n cp_type_quals (const_tree type)\n {\n-  type = const_strip_array_types (type);\n+  /* This CONST_CAST is okay because strip_array_types returns it's\n+     argument unmodified and we assign it to a const_tree.  */\n+  type = strip_array_types ((tree)CONST_CAST(type));\n   if (type == error_mark_node)\n     return TYPE_UNQUALIFIED;\n   return TYPE_QUALS (type);\n@@ -6955,7 +6957,9 @@ cp_type_quals (const_tree type)\n bool\n cp_type_readonly (const_tree type)\n {\n-  type = const_strip_array_types (type);\n+  /* This CONST_CAST is okay because strip_array_types returns it's\n+     argument unmodified and we assign it to a const_tree.  */\n+  type = strip_array_types ((tree)CONST_CAST(type));\n   return TYPE_READONLY (type);\n }\n \n@@ -6964,7 +6968,9 @@ cp_type_readonly (const_tree type)\n bool\n cp_has_mutable_p (const_tree type)\n {\n-  type = const_strip_array_types (type);\n+  /* This CONST_CAST is okay because strip_array_types returns it's\n+     argument unmodified and we assign it to a const_tree.  */\n+  type = strip_array_types ((tree)CONST_CAST(type));\n \n   return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n }"}, {"sha": "cf6b2f3ccd7be8576f1029c101842ee9a1aa49c3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 72, "deletions": 182, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -2865,169 +2865,103 @@ get_max_uid (void)\n /* Return the next insn.  If it is a SEQUENCE, return the first insn\n    of the sequence.  */\n \n-#define NEXT_INSN_BODY do { \\\n-  if (insn) \\\n-    { \\\n-      insn = NEXT_INSN (insn); \\\n-      if (insn && NONJUMP_INSN_P (insn) \\\n-\t  && GET_CODE (PATTERN (insn)) == SEQUENCE) \\\n-\tinsn = XVECEXP (PATTERN (insn), 0, 0); \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n next_insn (rtx insn)\n {\n-  NEXT_INSN_BODY;\n-}\n+  if (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn && NONJUMP_INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) == SEQUENCE)\n+\tinsn = XVECEXP (PATTERN (insn), 0, 0);\n+    }\n \n-const_rtx\n-const_next_insn (const_rtx insn)\n-{\n-  NEXT_INSN_BODY;\n+  return insn;\n }\n \n-#undef NEXT_INSN_BODY\n-\n /* Return the previous insn.  If it is a SEQUENCE, return the last insn\n    of the sequence.  */\n \n-#define PREVIOUS_INSN_BODY do { \\\n-  if (insn) \\\n-    { \\\n-      insn = PREV_INSN (insn); \\\n-      if (insn && NONJUMP_INSN_P (insn) \\\n-\t  && GET_CODE (PATTERN (insn)) == SEQUENCE) \\\n-\tinsn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1); \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n previous_insn (rtx insn)\n {\n-  PREVIOUS_INSN_BODY;\n-}\n+  if (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn && NONJUMP_INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) == SEQUENCE)\n+\tinsn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);\n+    }\n \n-const_rtx\n-const_previous_insn (const_rtx insn)\n-{\n-  PREVIOUS_INSN_BODY;\n+  return insn;\n }\n \n-#undef PREVIOUS_INSN_BODY\n-\n /* Return the next insn after INSN that is not a NOTE.  This routine does not\n    look inside SEQUENCEs.  */\n \n-#define NEXT_NONNOTE_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = NEXT_INSN (insn); \\\n-      if (insn == 0 || !NOTE_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n next_nonnote_insn (rtx insn)\n {\n-  NEXT_NONNOTE_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || !NOTE_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_next_nonnote_insn (const_rtx insn)\n-{\n-  NEXT_NONNOTE_INSN_BODY;\n+  return insn;\n }\n \n-#undef NEXT_NONNOTE_INSN_BODY\n-\n /* Return the previous insn before INSN that is not a NOTE.  This routine does\n    not look inside SEQUENCEs.  */\n \n-#define PREV_NONNOTE_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = PREV_INSN (insn); \\\n-      if (insn == 0 || !NOTE_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n prev_nonnote_insn (rtx insn)\n {\n-  PREV_NONNOTE_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn == 0 || !NOTE_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_prev_nonnote_insn (const_rtx insn)\n-{\n-  PREV_NONNOTE_INSN_BODY;\n+  return insn;\n }\n \n-#undef PREV_NONNOTE_INSN_BODY\n-\n /* Return the next INSN, CALL_INSN or JUMP_INSN after INSN;\n    or 0, if there is none.  This routine does not look inside\n    SEQUENCEs.  */\n \n-#define NEXT_REAL_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = NEXT_INSN (insn); \\\n-      if (insn == 0 || INSN_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n next_real_insn (rtx insn)\n {\n-  NEXT_REAL_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || INSN_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_next_real_insn (const_rtx insn)\n-{\n-  NEXT_REAL_INSN_BODY;\n+  return insn;\n }\n \n-#undef NEXT_REAL_INSN_BODY\n-\n /* Return the last INSN, CALL_INSN or JUMP_INSN before INSN;\n    or 0, if there is none.  This routine does not look inside\n    SEQUENCEs.  */\n \n-#define PREV_REAL_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = PREV_INSN (insn); \\\n-      if (insn == 0 || INSN_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n prev_real_insn (rtx insn)\n {\n-  PREV_REAL_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn == 0 || INSN_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_prev_real_insn (const_rtx insn)\n-{\n-  PREV_REAL_INSN_BODY;\n+  return insn;\n }\n \n-#undef PREV_REAL_INSN_BODY\n-\n /* Return the last CALL_INSN in the current list, or 0 if there is none.\n    This routine does not look inside SEQUENCEs.  */\n \n@@ -3058,110 +2992,66 @@ active_insn_p (const_rtx insn)\n \t\t      && GET_CODE (PATTERN (insn)) != CLOBBER))));\n }\n \n-#define NEXT_ACTIVE_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = NEXT_INSN (insn); \\\n-      if (insn == 0 || active_insn_p (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn;\\\n-} while (0)\n-\n rtx\n next_active_insn (rtx insn)\n {\n-  NEXT_ACTIVE_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || active_insn_p (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_next_active_insn (const_rtx insn)\n-{\n-  NEXT_ACTIVE_INSN_BODY;\n+  return insn;\n }\n \n-#undef NEXT_ACTIVE_INSN_BODY\n-\n /* Find the last insn before INSN that really does something.  This routine\n    does not look inside SEQUENCEs.  Until reload has completed, this is the\n    same as prev_real_insn.  */\n \n-#define PREV_ACTIVE_INSN_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = PREV_INSN (insn);\\\n-      if (insn == 0 || active_insn_p (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n prev_active_insn (rtx insn)\n {\n-  PREV_ACTIVE_INSN_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn == 0 || active_insn_p (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_prev_active_insn (const_rtx insn)\n-{\n-  PREV_ACTIVE_INSN_BODY;\n+  return insn;\n }\n \n-#undef PREV_ACTIVE_INSN_BODY\n-\n /* Return the next CODE_LABEL after the insn INSN, or 0 if there is none.  */\n \n-#define NEXT_LABEL_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = NEXT_INSN (insn); \\\n-      if (insn == 0 || LABEL_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n next_label (rtx insn)\n {\n-  NEXT_LABEL_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || LABEL_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_next_label (const_rtx insn)\n-{\n-  NEXT_LABEL_BODY;\n+  return insn;\n }\n \n-#undef NEXT_LABEL_BODY\n-\n /* Return the last CODE_LABEL before the insn INSN, or 0 if there is none.  */\n \n-#define PREV_LABEL_BODY do { \\\n-  while (insn) \\\n-    { \\\n-      insn = PREV_INSN (insn); \\\n-      if (insn == 0 || LABEL_P (insn)) \\\n-\tbreak; \\\n-    } \\\n-  return insn; \\\n-} while (0)\n-\n rtx\n prev_label (rtx insn)\n {\n-  PREV_LABEL_BODY;\n-}\n+  while (insn)\n+    {\n+      insn = PREV_INSN (insn);\n+      if (insn == 0 || LABEL_P (insn))\n+\tbreak;\n+    }\n \n-const_rtx\n-const_prev_label (const_rtx insn)\n-{\n-  PREV_LABEL_BODY;\n+  return insn;\n }\n \n-#undef PREV_LABEL_BODY\n-\n /* Return the last label to mark the same position as LABEL.  Return null\n    if LABEL itself is null.  */\n "}, {"sha": "74f9ffb9f72c93224f8acc79385506e461fe1266", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -396,7 +396,9 @@ try_catch_may_fallthru (const_tree stmt)\n bool\n block_may_fallthru (const_tree block)\n {\n-  const_tree stmt = const_expr_last (block);\n+  /* This CONST_CAST is okay because expr_last returns it's argument\n+     unmodified and we assign it to a const_tree.  */\n+  const_tree stmt = expr_last ((tree)CONST_CAST(block));\n \n   switch (stmt ? TREE_CODE (stmt) : ERROR_MARK)\n     {"}, {"sha": "7a040d11aa563def7f4304df4898699b0e9d62da", "filename": "gcc/jump.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -299,9 +299,12 @@ reversed_comparison_code_parts (enum rtx_code code, const_rtx arg0,\n       if (! insn)\n \treturn UNKNOWN;\n \n-      for (prev = const_prev_nonnote_insn (insn);\n+      /* These CONST_CAST's are okay because prev_nonnote_insn just\n+\t returns it's argument and we assign it to a const_rtx\n+\t variable.  */\n+      for (prev = prev_nonnote_insn ((rtx)(CONST_CAST(insn)));\n \t   prev != 0 && !LABEL_P (prev);\n-\t   prev = const_prev_nonnote_insn (prev))\n+\t   prev = prev_nonnote_insn ((rtx)(CONST_CAST(prev))))\n \t{\n \t  const_rtx set = set_of (arg0, prev);\n \t  if (set && GET_CODE (set) == SET"}, {"sha": "0a114c3dbbdca9ce9300b1c6ae7b8b3426f5265a", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -1593,26 +1593,16 @@ extern rtx make_jump_insn_raw (rtx);\n extern void add_function_usage_to (rtx, rtx);\n extern rtx last_call_insn (void);\n extern rtx previous_insn (rtx);\n-extern const_rtx const_previous_insn (const_rtx);\n extern rtx next_insn (rtx);\n-extern const_rtx const_next_insn (const_rtx);\n extern rtx prev_nonnote_insn (rtx);\n-extern const_rtx const_prev_nonnote_insn (const_rtx);\n extern rtx next_nonnote_insn (rtx);\n-extern const_rtx const_next_nonnote_insn (const_rtx);\n extern rtx prev_real_insn (rtx);\n-extern const_rtx const_prev_real_insn (const_rtx);\n extern rtx next_real_insn (rtx);\n-extern const_rtx const_next_real_insn (const_rtx);\n extern rtx prev_active_insn (rtx);\n-extern const_rtx const_prev_active_insn (const_rtx);\n extern rtx next_active_insn (rtx);\n-extern const_rtx const_next_active_insn (const_rtx);\n extern int active_insn_p (const_rtx);\n extern rtx prev_label (rtx);\n-extern const_rtx const_prev_label (const_rtx);\n extern rtx next_label (rtx);\n-extern const_rtx const_next_label (const_rtx);\n extern rtx skip_consecutive_labels (rtx);\n extern rtx next_cc0_user (rtx);\n extern rtx prev_cc0_setter (rtx);"}, {"sha": "1d90a1207fba3bb3e0581b27fe029d334b033e76", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -3392,7 +3392,10 @@ keep_with_call_p (const_rtx insn)\n \t if we can break or not.  */\n       if (SET_DEST (set) == stack_pointer_rtx)\n \t{\n-\t  const_rtx i2 = const_next_nonnote_insn (insn);\n+\t  /* This CONST_CAST is okay because next_nonnote_insn just\n+\t     returns it's argument and we assign it to a const_rtx\n+\t     variable.  */\n+\t  const_rtx i2 = next_nonnote_insn ((rtx)CONST_CAST(insn));\n \t  if (i2 && keep_with_call_p (i2))\n \t    return true;\n \t}"}, {"sha": "84ddf4953abdd18edb79ef7cbeeee40b390eaa67", "filename": "gcc/system.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -772,8 +772,15 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n    the C standard definitions or prototypes force you to.  E.g. if you\n    need to free a const object, or if you pass a const string to\n    execv, et al.  Another valid use would be in an allocation function\n-   that creates const objects that need to be initialized.  Most other\n-   cases should be viewed with extreme caution.  */\n+   that creates const objects that need to be initialized.  In some\n+   cases we have non-const functions that return the argument\n+   (e.g. next_nonnote_insn).  Rather than create const shadow\n+   functions, we can cast away const-ness in calling these interfaces\n+   if we're careful to verify that the called function does indeed not\n+   modify its argument and the return value is only used in a const\n+   context.  (This can be somewhat dangerous as these assumptions can\n+   change after the fact).  Beyond these uses, most other cases of\n+   using this macro should be viewed with extreme caution.  */\n \n #if defined(__GNUC__) && GCC_VERSION != 4000\n /* GCC 4.0.x has a bug where it may ICE on this expression.  */"}, {"sha": "947b8deaa5ffaf5fe114111ae53912e872d7b869", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -1158,7 +1158,9 @@ tree_can_merge_blocks_p (const_basic_block a, const_basic_block b)\n \n   /* If A ends by a statement causing exceptions or something similar, we\n      cannot merge the blocks.  */\n-  stmt = const_last_stmt (a);\n+  /* This CONST_CAST is okay because last_stmt doesn't modify its\n+     argument and the return value is assign to a const_tree.  */\n+  stmt = last_stmt ((basic_block)CONST_CAST(a));\n   if (stmt && stmt_ends_bb_p (stmt))\n     return false;\n \n@@ -2592,13 +2594,6 @@ first_stmt (basic_block bb)\n   return !bsi_end_p (i) ? bsi_stmt (i) : NULL_TREE;\n }\n \n-const_tree\n-const_first_stmt (const_basic_block bb)\n-{\n-  const_block_stmt_iterator i = cbsi_start (bb);\n-  return !cbsi_end_p (i) ? cbsi_stmt (i) : NULL_TREE;\n-}\n-\n /* Return the last statement in basic block BB.  */\n \n tree\n@@ -2608,13 +2603,6 @@ last_stmt (basic_block bb)\n   return !bsi_end_p (b) ? bsi_stmt (b) : NULL_TREE;\n }\n \n-const_tree\n-const_last_stmt (const_basic_block bb)\n-{\n-  const_block_stmt_iterator b = cbsi_last (bb);\n-  return !cbsi_end_p (b) ? cbsi_stmt (b) : NULL_TREE;\n-}\n-\n /* Return the last statement of an otherwise empty block.  Return NULL\n    if the block is totally empty, or if it contains more than one\n    statement.  */\n@@ -5932,7 +5920,9 @@ tree_block_ends_with_call_p (const_basic_block bb)\n static bool\n tree_block_ends_with_condjump_p (const_basic_block bb)\n {\n-  const_tree stmt = const_last_stmt (bb);\n+  /* This CONST_CAST is okay because last_stmt doesn't modify its\n+     argument and the return value is not modified.  */\n+  const_tree stmt = last_stmt ((basic_block)CONST_CAST(bb));\n   return (stmt && TREE_CODE (stmt) == COND_EXPR);\n }\n "}, {"sha": "e2eb882231744709899cbf008465764d14acc0b2", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -740,9 +740,7 @@ extern void print_loop_ir (FILE *);\n extern void cleanup_dead_labels (void);\n extern void group_case_labels (void);\n extern tree first_stmt (basic_block);\n-extern const_tree const_first_stmt (const_basic_block);\n extern tree last_stmt (basic_block);\n-extern const_tree const_last_stmt (const_basic_block);\n extern tree last_and_only_stmt (basic_block);\n extern edge find_taken_edge (basic_block, tree);\n extern basic_block label_to_block_fn (struct function *, tree);"}, {"sha": "a49744cf6c0108a288a4416561c78d441c898eb6", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 39, "deletions": 47, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -299,29 +299,22 @@ tsi_split_statement_list_before (tree_stmt_iterator *i)\n /* Return the first expression in a sequence of COMPOUND_EXPRs,\n    or in a STATEMENT_LIST.  */\n \n-#define EXPR_FIRST_BODY do { \\\n-  if (expr == NULL_TREE) \\\n-    return expr; \\\n-  if (TREE_CODE (expr) == STATEMENT_LIST) \\\n-    { \\\n-      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (expr); \\\n-      return n ? n->stmt : NULL_TREE; \\\n-    } \\\n-  while (TREE_CODE (expr) == COMPOUND_EXPR) \\\n-    expr = TREE_OPERAND (expr, 0); \\\n-  return expr; \\\n-} while (0)\n-\n tree\n expr_first (tree expr)\n {\n-  EXPR_FIRST_BODY;\n-}\n+  if (expr == NULL_TREE)\n+    return expr;\n \n-const_tree\n-const_expr_first (const_tree expr)\n-{\n-  EXPR_FIRST_BODY;\n+  if (TREE_CODE (expr) == STATEMENT_LIST)\n+    {\n+      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (expr);\n+      return n ? n->stmt : NULL_TREE;\n+    }\n+\n+  while (TREE_CODE (expr) == COMPOUND_EXPR)\n+    expr = TREE_OPERAND (expr, 0);\n+\n+  return expr;\n }\n \n /* Return the last expression in a sequence of COMPOUND_EXPRs,\n@@ -343,45 +336,44 @@ const_expr_first (const_tree expr)\n tree\n expr_last (tree expr)\n {\n-  EXPR_LAST_BODY;\n-}\n+  if (expr == NULL_TREE)\n+    return expr;\n \n-const_tree\n-const_expr_last (const_tree expr)\n-{\n-  EXPR_LAST_BODY;\n+  if (TREE_CODE (expr) == STATEMENT_LIST)\n+    {\n+      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr);\n+      return n ? n->stmt : NULL_TREE;\n+    }\n+\n+  while (TREE_CODE (expr) == COMPOUND_EXPR)\n+    expr = TREE_OPERAND (expr, 1);\n+\n+  return expr;\n }\n \n /* If EXPR is a single statement return it.  If EXPR is a\n    STATEMENT_LIST containing exactly one statement S, return S.\n    Otherwise, return NULL.  */\n \n-#define EXPR_ONLY_BODY do { \\\n-  if (expr == NULL_TREE) \\\n-    return NULL_TREE; \\\n-  if (TREE_CODE (expr) == STATEMENT_LIST) \\\n-    { \\\n-      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr); \\\n-      if (n && STATEMENT_LIST_HEAD (expr) == n) \\\n-\treturn n->stmt; \\\n-      else \\\n-\treturn NULL_TREE; \\\n-    } \\\n-  if (TREE_CODE (expr) == COMPOUND_EXPR) \\\n-    return NULL_TREE; \\\n-  return expr; \\\n-} while (0)\n-\n tree \n expr_only (tree expr)\n {\n-  EXPR_ONLY_BODY;\n-}\n+  if (expr == NULL_TREE)\n+    return NULL_TREE;\n \n-const_tree \n-const_expr_only (const_tree expr)\n-{\n-  EXPR_ONLY_BODY;\n+  if (TREE_CODE (expr) == STATEMENT_LIST)\n+    {\n+      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr);\n+      if (n && STATEMENT_LIST_HEAD (expr) == n)\n+\treturn n->stmt;\n+      else\n+\treturn NULL_TREE;\n+    }\n+\n+  if (TREE_CODE (expr) == COMPOUND_EXPR)\n+    return NULL_TREE;\n+\n+  return expr;\n }\n \n #include \"gt-tree-iterator.h\""}, {"sha": "d04c1f0222b9b785a439b85b4adc3ac07680c155", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -3809,28 +3809,19 @@ is_attribute_p (const char *attr, const_tree ident)\n    returns the first occurrence; the TREE_CHAIN of the return value should\n    be passed back in if further occurrences are wanted.  */\n \n-#define LOOKUP_ATTRIBUTE_BODY(TYPE) do { \\\n-  TYPE l; \\\n-  size_t attr_len = strlen (attr_name); \\\n-  for (l = list; l; l = TREE_CHAIN (l)) \\\n-    { \\\n-      gcc_assert (TREE_CODE (TREE_PURPOSE (l)) == IDENTIFIER_NODE); \\\n-      if (is_attribute_with_length_p (attr_name, attr_len, TREE_PURPOSE (l))) \\\n-\treturn l; \\\n-    } \\\n-  return NULL_TREE; \\\n-} while (0)\n-\n tree\n lookup_attribute (const char *attr_name, tree list)\n {\n-  LOOKUP_ATTRIBUTE_BODY(tree);\n-}\n+  tree l;\n+  size_t attr_len = strlen (attr_name);\n \n-const_tree\n-const_lookup_attribute (const char *attr_name, const_tree list)\n-{\n-  LOOKUP_ATTRIBUTE_BODY(const_tree);\n+  for (l = list; l; l = TREE_CHAIN (l))\n+    {\n+      gcc_assert (TREE_CODE (TREE_PURPOSE (l)) == IDENTIFIER_NODE);\n+      if (is_attribute_with_length_p (attr_name, attr_len, TREE_PURPOSE (l)))\n+\treturn l;\n+    }\n+  return NULL_TREE;\n }\n \n /* Remove any instances of attribute ATTR_NAME in LIST and return the\n@@ -4800,10 +4791,14 @@ attribute_list_contained (const_tree l1, const_tree l2)\n   for (; t2 != 0; t2 = TREE_CHAIN (t2))\n     {\n       const_tree attr;\n-      for (attr = const_lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)), l1);\n+      /* This CONST_CAST is okay because lookup_attribute does not\n+\t modify its argument and the return value is assigned to a\n+\t const_tree.  */\n+      for (attr = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n+\t\t\t\t    (tree)CONST_CAST(l1));\n \t   attr != NULL_TREE;\n-\t   attr = const_lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n-\t\t\t\t\t  TREE_CHAIN (attr)))\n+\t   attr = lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n+\t\t\t\t    TREE_CHAIN (attr)))\n \t{\n \t  if (TREE_VALUE (t2) != NULL\n \t      && TREE_CODE (TREE_VALUE (t2)) == TREE_LIST"}, {"sha": "23916cfebb87aa2efcc4c31dd6b3d29aaa697750", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/755478019ac28552396592d63b2e1ffeeaa24206/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=755478019ac28552396592d63b2e1ffeeaa24206", "patch": "@@ -4156,7 +4156,6 @@ extern int is_attribute_p (const char *, const_tree);\n    of the attribute or NULL_TREE if not found.  */\n \n extern tree lookup_attribute (const char *, tree);\n-extern const_tree const_lookup_attribute (const char *, const_tree);\n \n /* Remove any instances of attribute ATTR_NAME in LIST and return the\n    modified list.  */\n@@ -4303,11 +4302,8 @@ extern tree non_lvalue (tree);\n extern tree convert (tree, tree);\n extern unsigned int expr_align (const_tree);\n extern tree expr_first (tree);\n-extern const_tree const_expr_first (const_tree);\n extern tree expr_last (tree);\n-extern const_tree const_expr_last (const_tree);\n extern tree expr_only (tree);\n-extern const_tree const_expr_only (const_tree);\n extern tree size_in_bytes (const_tree);\n extern HOST_WIDE_INT int_size_in_bytes (const_tree);\n extern HOST_WIDE_INT max_int_size_in_bytes (const_tree);"}]}