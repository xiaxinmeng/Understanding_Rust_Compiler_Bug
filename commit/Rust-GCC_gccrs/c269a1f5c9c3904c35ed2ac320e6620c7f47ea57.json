{"sha": "c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2OWExZjVjOWMzOTA0YzM1ZWQyYWMzMjBlNjYyMGM3ZjQ3ZWE1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T11:24:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T11:24:48Z"}, "message": "[multiple changes]\n\n2011-11-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch9.adb (Analyze_Entry_Declaration): Check for entry\n\tfamily bounds out of range.\n\n2011-11-23  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-cohama.adb, a-cihama.adb, a-cbhama.adb (Iterator): Declare\n\ttype as limited, and remove node component.\n\t(First, Next): Forward call to corresponding cursor-based operation.\n\t(Iterate): Representation of iterator no longer has node component.\n\n2011-11-23  Yannick Moy  <moy@adacore.com>\n\n\t* exp_util.adb: Revert previous change to remove side-effects in Alfa\n\tmode, which is not the correct thing to do for renamings.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-osinte-hpux.ads, s-taprop-vxworks.adb, s-taprop-tru64.adb,\n\ts-osinte-vxworks.ads, s-osinte-aix.ads, s-osinte-lynxos.ads,\n\ts-osinte-solaris-posix.ads, s-taprop-solaris.adb, a-exetim-posix.adb,\n\ts-osinte-irix.ads, s-osinte-solaris.ads, s-oscons-tmplt.c,\n\ts-taprop-irix.adb, s-osinte-hpux-dce.ads, Makefile.rtl,\n\ts-osinte-tru64.ads, s-osinte-darwin.ads, s-taprop.ads,\n\ts-osinte-freebsd.ads, s-osinte-lynxos-3.ads, s-taprop-hpux-dce.adb,\n\ts-taprop-posix.adb: Remove hard-coded clock ids;\n\tinstead, generate them in System.OS_Constants.\n\t(System.OS_Constants.CLOCK_RT_Ada): New constant denoting the\n\tid of the clock providing Ada.Real_Time.Monotonic_Clock.\n\t* thread.c: New file.\n\t(__gnat_pthread_condattr_setup): New function. For platforms where\n\tCLOCK_RT_Ada is not CLOCK_REALTIME, set appropriate condition\n\tvariable attribute.\n\n2011-11-23  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb: Restore the use of Expander_Active instead of\n\tFull_Expander_Active, so that the evaluation is forced in Alfa\n\tmode too. Otherwise, we end up with an unexpected insertion in a\n\tplace where it is not supposed to happen, on default parameters\n\tof a call.\n\n2011-11-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* prj-pp.adb, prj-pp.ads: Minor new addition: wrapper procedure \"wpr\"\n\tfor Pretty_Print, for use from within gdb.\n\nFrom-SVN: r181660", "tree": {"sha": "3801b3b0ce11d58d1c4a23076336e38db3baa05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3801b3b0ce11d58d1c4a23076336e38db3baa05d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/comments", "author": null, "committer": null, "parents": [{"sha": "f947ee3467dee8ca1b681c459804b02657113e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f947ee3467dee8ca1b681c459804b02657113e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f947ee3467dee8ca1b681c459804b02657113e9d"}], "stats": {"total": 515, "additions": 336, "deletions": 179}, "files": [{"sha": "ecf8e6a2c41fad03f21021ef6c19ecc18821cfd4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -1,3 +1,51 @@\n+2011-11-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Entry_Declaration): Check for entry\n+\tfamily bounds out of range.\n+\n+2011-11-23  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cohama.adb, a-cihama.adb, a-cbhama.adb (Iterator): Declare\n+\ttype as limited, and remove node component.\n+\t(First, Next): Forward call to corresponding cursor-based operation.\n+\t(Iterate): Representation of iterator no longer has node component.\n+\n+2011-11-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_util.adb: Revert previous change to remove side-effects in Alfa\n+\tmode, which is not the correct thing to do for renamings.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-osinte-hpux.ads, s-taprop-vxworks.adb, s-taprop-tru64.adb,\n+\ts-osinte-vxworks.ads, s-osinte-aix.ads, s-osinte-lynxos.ads,\n+\ts-osinte-solaris-posix.ads, s-taprop-solaris.adb, a-exetim-posix.adb,\n+\ts-osinte-irix.ads, s-osinte-solaris.ads, s-oscons-tmplt.c,\n+\ts-taprop-irix.adb, s-osinte-hpux-dce.ads, Makefile.rtl,\n+\ts-osinte-tru64.ads, s-osinte-darwin.ads, s-taprop.ads,\n+\ts-osinte-freebsd.ads, s-osinte-lynxos-3.ads, s-taprop-hpux-dce.adb,\n+\ts-taprop-posix.adb: Remove hard-coded clock ids;\n+\tinstead, generate them in System.OS_Constants.\n+\t(System.OS_Constants.CLOCK_RT_Ada): New constant denoting the\n+\tid of the clock providing Ada.Real_Time.Monotonic_Clock.\n+\t* thread.c: New file.\n+\t(__gnat_pthread_condattr_setup): New function. For platforms where\n+\tCLOCK_RT_Ada is not CLOCK_REALTIME, set appropriate condition\n+\tvariable attribute.\n+\n+2011-11-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb: Restore the use of Expander_Active instead of\n+\tFull_Expander_Active, so that the evaluation is forced in Alfa\n+\tmode too. Otherwise, we end up with an unexpected insertion in a\n+\tplace where it is not supposed to happen, on default parameters\n+\tof a call.\n+\n+2011-11-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* prj-pp.adb, prj-pp.ads: Minor new addition: wrapper procedure \"wpr\"\n+\tfor Pretty_Print, for use from within gdb.\n+\n 2011-11-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch5.adb (Expand_Iterator_Loop): Wrap the expanded loop"}, {"sha": "5c3e307f713662e31da9937809a9e5fbedf973e0", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -75,7 +75,9 @@ GNATRTL_TASKING_OBJS= \\\n   s-tpoben$(objext) \\\n   s-tpobop$(objext) \\\n   s-tposen$(objext) \\\n-  s-tratas$(objext) $(EXTRA_GNATRTL_TASKING_OBJS)\n+  s-tratas$(objext) \\\n+  thread$(objext) \\\n+  $(EXTRA_GNATRTL_TASKING_OBJS)\n \n # Objects needed for non-tasking.\n GNATRTL_NONTASKING_OBJS= \\"}, {"sha": "a87db6addfb98edd393fdbdbf8bfc4c393684ba7", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -41,7 +41,6 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n    type Iterator is new\n      Map_Iterator_Interfaces.Forward_Iterator with record\n         Container : Map_Access;\n-        Node      : Count_Type;\n      end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n@@ -424,14 +423,8 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n-      M : constant Map_Access := Object.Container;\n-      N : constant Count_Type := HT_Ops.First (M.all);\n    begin\n-      if N = 0 then\n-         return No_Element;\n-      else\n-         return Cursor'(Object.Container.all'Unchecked_Access, N);\n-      end if;\n+      return Object.Container.First;\n    end First;\n \n    -----------------\n@@ -675,12 +668,10 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n    end Iterate;\n \n    function Iterate\n-     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Node : constant Count_Type := HT_Ops.First (Container);\n-      It   : constant Iterator   := (Container'Unrestricted_Access, Node);\n    begin\n-      return It;\n+      return Iterator'(Container => Container'Unrestricted_Access);\n    end Iterate;\n \n    ---------\n@@ -770,11 +761,16 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       Position : Cursor) return Cursor\n    is\n    begin\n-      if Position.Node = 0 then\n+      if Position.Container = null then\n          return No_Element;\n-      else\n-         return (Object.Container, Next (Position).Node);\n       end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong map\";\n+      end if;\n+\n+      return Next (Position);\n    end Next;\n \n    -------------------"}, {"sha": "84bbdfdf327cd23f98e1a3a194f354116839a80e", "filename": "gcc/ada/a-cihama.adb", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -45,10 +45,9 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    procedure Free_Element is\n       new Ada.Unchecked_Deallocation (Element_Type, Element_Access);\n \n-   type Iterator is new\n+   type Iterator is limited new\n      Map_Iterator_Interfaces.Forward_Iterator with record\n         Container : Map_Access;\n-        Node      : Node_Access;\n      end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n@@ -476,14 +475,8 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n-      M : constant Map_Access  := Object.Container;\n-      N : constant Node_Access := HT_Ops.First (M.HT);\n    begin\n-      if N = null then\n-         return No_Element;\n-      else\n-         return Cursor'(Object.Container.all'Unchecked_Access, N);\n-      end if;\n+      return Object.Container.First;\n    end First;\n \n    ----------\n@@ -715,13 +708,11 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n       B := B - 1;\n    end Iterate;\n \n-   function Iterate (Container : Map)\n-      return Map_Iterator_Interfaces.Forward_Iterator'class\n+   function Iterate\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Node : constant Node_Access := HT_Ops.First (Container.HT);\n-      It   : constant Iterator := (Container'Unrestricted_Access, Node);\n    begin\n-      return It;\n+      return Iterator'(Container => Container'Unrestricted_Access);\n    end Iterate;\n \n    ---------\n@@ -809,11 +800,16 @@ package body Ada.Containers.Indefinite_Hashed_Maps is\n \n    function Next (Object : Iterator; Position : Cursor) return Cursor is\n    begin\n-      if Position.Node = null then\n+      if Position.Container = null then\n          return No_Element;\n-      else\n-         return (Object.Container, Next (Position).Node);\n       end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong map\";\n+      end if;\n+\n+      return Next (Position);\n    end Next;\n \n    -------------------"}, {"sha": "634ccc0f862a1bc895c040c58f539838d569f6df", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -39,10 +39,9 @@ with System; use type System.Address;\n \n package body Ada.Containers.Hashed_Maps is\n \n-   type Iterator is new\n+   type Iterator is limited new\n      Map_Iterator_Interfaces.Forward_Iterator with record\n         Container : Map_Access;\n-        Node      : Node_Access;\n      end record;\n \n    overriding function First (Object : Iterator) return Cursor;\n@@ -440,14 +439,8 @@ package body Ada.Containers.Hashed_Maps is\n    end First;\n \n    function First (Object : Iterator) return Cursor is\n-      M : constant Map_Access  := Object.Container;\n-      N : constant Node_Access := HT_Ops.First (M.HT);\n    begin\n-      if N = null then\n-         return No_Element;\n-      end if;\n-\n-      return Cursor'(Object.Container.all'Unchecked_Access, N);\n+      return Object.Container.First;\n    end First;\n \n    ----------\n@@ -667,12 +660,10 @@ package body Ada.Containers.Hashed_Maps is\n    end Iterate;\n \n    function Iterate\n-     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'class\n+     (Container : Map) return Map_Iterator_Interfaces.Forward_Iterator'Class\n    is\n-      Node : constant Node_Access := HT_Ops.First (Container.HT);\n-      It   : constant Iterator := (Container'Unrestricted_Access, Node);\n    begin\n-      return It;\n+      return Iterator'(Container => Container'Unrestricted_Access);\n    end Iterate;\n \n    ---------\n@@ -752,11 +743,16 @@ package body Ada.Containers.Hashed_Maps is\n       Position : Cursor) return Cursor\n    is\n    begin\n-      if Position.Node = null then\n+      if Position.Container = null then\n          return No_Element;\n-      else\n-         return (Object.Container, Next (Position).Node);\n       end if;\n+\n+      if Position.Container /= Object.Container then\n+         raise Program_Error with\n+           \"Position cursor of Next designates wrong map\";\n+      end if;\n+\n+      return Next (Position);\n    end Next;\n \n    -------------------"}, {"sha": "094f2aab51f4382d87f7274358f2e724ff616dca", "filename": "gcc/ada/a-exetim-posix.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-exetim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fa-exetim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exetim-posix.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -34,6 +34,7 @@\n with Ada.Task_Identification;  use Ada.Task_Identification;\n with Ada.Unchecked_Conversion;\n \n+with System.OS_Constants; use System.OS_Constants;\n with System.OS_Interface; use System.OS_Interface;\n \n with Interfaces.C; use Interfaces.C;\n@@ -112,9 +113,6 @@ package body Ada.Execution_Time is\n       pragma Import (C, clock_gettime, \"clock_gettime\");\n       --  Function from the POSIX.1b Realtime Extensions library\n \n-      CLOCK_THREAD_CPUTIME_ID : constant := 3;\n-      --  Identifier for the clock returning per-task CPU time\n-\n    begin\n       if T = Ada.Task_Identification.Null_Task_Id then\n          raise Program_Error;"}, {"sha": "c67d0117897f1b2533b5b6067183c2e2753620e8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -6420,19 +6420,9 @@ package body Exp_Util is\n    --  Start of processing for Remove_Side_Effects\n \n    begin\n-      --  We only need to do removal of side effects if we are generating\n-      --  actual code. That's because the whole issue of side effects is purely\n-      --  a run-time issue, and the removal is required only to get proper\n-      --  behavior at run-time.\n-\n-      --  In the Alfa case, we don't need to remove side effects because formal\n-      --  verification is performed only on expressions that are provably\n-      --  side-effect free. If we tried to remove side effects in the Alfa\n-      --  case, we would get into a mess since in the case of limited types in\n-      --  particular, removal of side effects involves the use of access types\n-      --  or references which are not permitted in Alfa mode.\n-\n-      if not Full_Expander_Active then\n+      --  Handle cases in which there is nothing to do\n+\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -6633,6 +6623,15 @@ package body Exp_Util is\n       --  Otherwise we generate a reference to the value\n \n       else\n+         --  An expression which is in Alfa mode is considered side effect free\n+         --  if the resulting value is captured by a variable or a constant.\n+\n+         if Alfa_Mode\n+           and then Nkind (Parent (Exp)) = N_Object_Declaration\n+         then\n+            return;\n+         end if;\n+\n          --  Special processing for function calls that return a limited type.\n          --  We need to build a declaration that will enable build-in-place\n          --  expansion of the call. This is not done if the context is already\n@@ -6667,25 +6666,39 @@ package body Exp_Util is\n          Def_Id := Make_Temporary (Loc, 'R', Exp);\n          Set_Etype (Def_Id, Exp_Type);\n \n-         Res :=\n-           Make_Explicit_Dereference (Loc,\n-             Prefix => New_Reference_To (Def_Id, Loc));\n+         --  The regular expansion of functions with side effects involves the\n+         --  generation of an access type to capture the return value found on\n+         --  the secondary stack. Since Alfa (and why) cannot process access\n+         --  types, use a different approach which ignores the secondary stack\n+         --  and \"copies\" the returned object.\n \n-         --  Generate:\n-         --    type Ann is access all <Exp_Type>;\n+         if Alfa_Mode then\n+            Res := New_Reference_To (Def_Id, Loc);\n+            Ref_Type := Exp_Type;\n+\n+         --  Regular expansion utilizing an access type and 'reference\n \n-         Ref_Type := Make_Temporary (Loc, 'A');\n+         else\n+            Res :=\n+              Make_Explicit_Dereference (Loc,\n+                Prefix => New_Reference_To (Def_Id, Loc));\n \n-         Ptr_Typ_Decl :=\n-           Make_Full_Type_Declaration (Loc,\n-             Defining_Identifier => Ref_Type,\n-             Type_Definition     =>\n-               Make_Access_To_Object_Definition (Loc,\n-                 All_Present        => True,\n-                 Subtype_Indication =>\n-                   New_Reference_To (Exp_Type, Loc)));\n+            --  Generate:\n+            --    type Ann is access all <Exp_Type>;\n \n-         Insert_Action (Exp, Ptr_Typ_Decl);\n+            Ref_Type := Make_Temporary (Loc, 'A');\n+\n+            Ptr_Typ_Decl :=\n+              Make_Full_Type_Declaration (Loc,\n+                Defining_Identifier => Ref_Type,\n+                Type_Definition     =>\n+                  Make_Access_To_Object_Definition (Loc,\n+                    All_Present        => True,\n+                    Subtype_Indication =>\n+                      New_Reference_To (Exp_Type, Loc)));\n+\n+            Insert_Action (Exp, Ptr_Typ_Decl);\n+         end if;\n \n          E := Exp;\n          if Nkind (E) = N_Explicit_Dereference then"}, {"sha": "6e9e61bc2a6a34e33cd54013b3059e75423e3559", "filename": "gcc/ada/prj-pp.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fprj-pp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fprj-pp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-pp.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -968,4 +968,15 @@ package body Prj.PP is\n       Output.Write_Eol;\n    end Output_Statistics;\n \n+   ---------\n+   -- wpr --\n+   ---------\n+\n+   procedure wpr\n+     (Project : Prj.Tree.Project_Node_Id;\n+      In_Tree : Prj.Tree.Project_Node_Tree_Ref) is\n+   begin\n+      Pretty_Print (Project, In_Tree, Backward_Compatibility => False);\n+   end wpr;\n+\n end Prj.PP;"}, {"sha": "771b4c3f2d4a3352361765b523579b6ebdf63f6c", "filename": "gcc/ada/prj-pp.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fprj-pp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fprj-pp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-pp.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,4 +91,9 @@ private\n    --  display what Project_Node_Kinds have not been exercised by the call(s)\n    --  to Pretty_Print. It is used only for testing purposes.\n \n+   procedure wpr\n+     (Project : Prj.Tree.Project_Node_Id;\n+      In_Tree : Prj.Tree.Project_Node_Tree_Ref);\n+   --  Wrapper for use from gdb: call Pretty_Print with default parameters\n+\n end Prj.PP;"}, {"sha": "d8a6477c441d7fb30f6e796eef3e94d724c9ed61", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -97,6 +97,7 @@ pragma Style_Checks (\"M32766\");\n #include <string.h>\n #include <limits.h>\n #include <fcntl.h>\n+#include <time.h>\n \n #if defined (__alpha__) && defined (__osf__)\n /** Tru64 is unable to do vector IO operations with default value of IOV_MAX,\n@@ -1207,6 +1208,55 @@ CND(IP_DROP_MEMBERSHIP, \"Leave a multicast group\")\n #endif\n CND(IP_PKTINFO, \"Get datagram info\")\n \n+#endif /* HAVE_SOCKETS */\n+\n+/*\n+\n+   ------------\n+   -- Clocks --\n+   ------------\n+\n+*/\n+\n+#ifdef CLOCK_REALTIME\n+CND(CLOCK_REALTIME, \"System realtime clock\")\n+#endif\n+\n+#ifdef CLOCK_MONOTONIC\n+CND(CLOCK_MONOTONIC, \"System monotonic clock\")\n+#endif\n+\n+#ifdef CLOCK_FASTEST\n+CND(CLOCK_FASTEST, \"Fastest clock\")\n+#endif\n+\n+#if defined (__sgi)\n+CND(CLOCK_SGI_FAST,  \"SGI fast clock\")\n+CND(CLOCK_SGI_CYCLE, \"SGI CPU clock\")\n+#endif\n+\n+#if defined(__APPLE__)\n+/* There's no clock_gettime or clock_id's on Darwin */\n+# define CLOCK_RT_Ada \"-1\"\n+\n+#elif defined(FreeBSD) || defined(_AIX)\n+/* On these platforms use system provided monotonic clock */\n+# define CLOCK_RT_Ada \"CLOCK_MONOTONIC\"\n+\n+#elif defined(CLOCK_REALTIME)\n+/* By default use CLOCK_REALTIME */\n+# define CLOCK_RT_Ada \"CLOCK_REALTIME\"\n+#endif\n+\n+#ifdef CLOCK_RT_Ada\n+CNS(CLOCK_RT_Ada, \"Ada realtime clock\")\n+#endif\n+\n+#ifndef CLOCK_THREAD_CPUTIME_ID\n+# define CLOCK_THREAD_CPUTIME_ID -1\n+#endif\n+CND(CLOCK_THREAD_CPUTIME_ID, \"Thread CPU clock\")\n+\n /*\n \n    ----------------------"}, {"sha": "c89e7296e14a5b7a736939dcbb3987754f5ca2c3", "filename": "gcc/ada/s-osinte-aix.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -197,10 +197,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -547,10 +544,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 9;\n-   CLOCK_MONOTONIC : constant clockid_t := 10;\n-\n    type pthread_attr_t is new System.Address;\n    pragma Convention (C, pthread_attr_t);\n    --  typedef struct __pt_attr        *pthread_attr_t;"}, {"sha": "ff0480379bc3ba834b4bc58da4b8d188927de4e1", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -183,10 +183,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -524,10 +521,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 0;\n-   CLOCK_MONOTONIC : constant clockid_t := CLOCK_REALTIME;\n-\n    --\n    --  Darwin specific signal implementation\n    --"}, {"sha": "b581dae2e20b316c59eb524fd3979f588ed3578a", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -200,10 +200,7 @@ package System.OS_Interface is\n    function nanosleep (rqtp, rmtp : access timespec)  return int;\n    pragma Import (C, nanosleep, \"nanosleep\");\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -643,13 +640,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 0;\n-   CLOCK_MONOTONIC : constant clockid_t := 0;\n-   --  On FreeBSD, pthread_cond_timedwait assumes a CLOCK_REALTIME time by\n-   --  default (unless pthread_condattr_setclock is used to set an alternate\n-   --  clock).\n-\n    type pthread_t           is new System.Address;\n    type pthread_attr_t      is new System.Address;\n    type pthread_mutex_t     is new System.Address;"}, {"sha": "55729f877ab655c292304720cedbeedb0c08eadd", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -180,10 +180,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -529,10 +526,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 1;\n-   CLOCK_MONOTONIC : constant clockid_t := CLOCK_REALTIME;\n-\n    type pthread_attr_t is new int;\n    type pthread_condattr_t is new int;\n    type pthread_mutexattr_t is new int;"}, {"sha": "365a3de2dcab9876f4ca24159aa722e170953a05", "filename": "gcc/ada/s-osinte-irix.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -172,11 +172,7 @@ package System.OS_Interface is\n    type timespec is private;\n    type timespec_ptr is access all timespec;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_SGI_FAST  : constant clockid_t;\n-   CLOCK_SGI_CYCLE : constant clockid_t;\n+   type clockid_t is new int;\n \n    SGI_CYCLECNTR_SIZE : constant := 165;\n \n@@ -486,11 +482,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 1;\n-   CLOCK_SGI_CYCLE : constant clockid_t := 2;\n-   CLOCK_SGI_FAST  : constant clockid_t := 3;\n-\n    type array_type_9 is array (Integer range 0 .. 4) of long;\n    type pthread_attr_t is record\n       X_X_D : array_type_9;"}, {"sha": "e8288d9f6dd1e77cb62de8e986b93d4e1d4fd822", "filename": "gcc/ada/s-osinte-lynxos-3.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-lynxos-3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos-3.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -177,9 +177,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -516,9 +514,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new unsigned_char;\n-   CLOCK_REALTIME : constant clockid_t := 0;\n-\n    type st_t is record\n       stksize      : int;\n       prio         : int;"}, {"sha": "7bcbab6072eda97a9647d5861071edf603677876", "filename": "gcc/ada/s-osinte-lynxos.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-lynxos.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -197,10 +197,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -517,10 +514,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new unsigned_char;\n-   CLOCK_REALTIME  : constant clockid_t := 1;\n-   CLOCK_MONOTONIC : constant clockid_t := CLOCK_REALTIME;\n-\n    type st_attr_t is record\n       stksize      : int;\n       prio         : int;"}, {"sha": "eb17bd4e25fe543890b04c79f0db52265df9c8c2", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -187,10 +187,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME  : constant clockid_t;\n-   CLOCK_MONOTONIC : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -520,10 +517,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME  : constant clockid_t := 3;\n-   CLOCK_MONOTONIC : constant clockid_t := CLOCK_REALTIME;\n-\n    type pthread_attr_t is record\n       pthread_attrp : System.Address;\n    end record;"}, {"sha": "b4baa6d499882502cc0d97800c24da27068c13c8", "filename": "gcc/ada/s-osinte-solaris.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -243,9 +243,7 @@ package System.OS_Interface is\n \n    type timespec is private;\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t; tp : access timespec) return int;\n@@ -531,9 +529,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME : constant clockid_t := 0;\n-\n    type array_type_9 is array (0 .. 3) of unsigned_char;\n    type record_type_3 is record\n       flag  : array_type_9;"}, {"sha": "0fcd4221e80064f8a92536d4076e8b3863d5416e", "filename": "gcc/ada/s-osinte-tru64.ads", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-tru64.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---          Copyright (C) 1995-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -191,9 +191,7 @@ package System.OS_Interface is\n    function nanosleep (rqtp, rmtp : access timespec)  return int;\n    pragma Import (C, nanosleep);\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME : constant clockid_t;\n+   type clockid_t is new int;\n \n    function clock_gettime\n      (clock_id : clockid_t;\n@@ -506,9 +504,6 @@ private\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME : constant clockid_t := 1;\n-\n    type unsigned_long_array is array (Natural range <>) of unsigned_long;\n \n    type pthread_t is new System.Address;"}, {"sha": "1997674046319a3194c62be65036713dd8d7643d", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -243,9 +243,7 @@ package System.OS_Interface is\n    end record;\n    pragma Convention (C, timespec);\n \n-   type clockid_t is private;\n-\n-   CLOCK_REALTIME : constant clockid_t;   --  System wide realtime clock\n+   type clockid_t is new int;\n \n    function To_Duration (TS : timespec) return Duration;\n    pragma Inline (To_Duration);\n@@ -511,8 +509,5 @@ private\n \n    ERROR_PID : constant pid_t := -1;\n \n-   type clockid_t is new int;\n-   CLOCK_REALTIME : constant clockid_t := 0;\n-\n    type sigset_t is new System.VxWorks.Ext.sigset_t;\n end System.OS_Interface;"}, {"sha": "cae17c1e549e5e94b34a9d30d8c4eee531cc9b85", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -555,7 +555,7 @@ package body System.Task_Primitives.Operations is\n       TS     : aliased timespec;\n       Result : Interfaces.C.int;\n    begin\n-      Result := Clock_Gettime (CLOCK_REALTIME, TS'Unchecked_Access);\n+      Result := Clock_Gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;"}, {"sha": "dc9f9a88fae7e9194e4662d1d433b1482ff53893", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -89,8 +89,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   Real_Time_Clock_Id : constant clockid_t := CLOCK_REALTIME;\n-\n    Unblocked_Signal_Mask : aliased sigset_t;\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n@@ -572,7 +570,7 @@ package body System.Task_Primitives.Operations is\n       TS     : aliased timespec;\n       Result : Interfaces.C.int;\n    begin\n-      Result := clock_gettime (Real_Time_Clock_Id, TS'Unchecked_Access);\n+      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;\n@@ -583,7 +581,7 @@ package body System.Task_Primitives.Operations is\n \n    function RT_Resolution return Duration is\n    begin\n-      --  The clock_getres (Real_Time_Clock_Id) function appears to return\n+      --  The clock_getres (OSC.CLOCK_RT_Ada) function appears to return\n       --  the interrupt resolution of the realtime clock and not the actual\n       --  resolution of reading the clock. Even though this last value is\n       --  only guaranteed to be 100 Hz, at least the Origin 200 appears to"}, {"sha": "401438111cf7f376436317cbfd9b66a0ef73d05f", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -171,6 +171,11 @@ package body System.Task_Primitives.Operations is\n    function To_Address is\n      new Ada.Unchecked_Conversion (Task_Id, System.Address);\n \n+   function GNAT_pthread_condattr_setup\n+     (attr : access pthread_condattr_t) return int;\n+   pragma Import (C,\n+     GNAT_pthread_condattr_setup, \"__gnat_pthread_condattr_setup\");\n+\n    -------------------\n    -- Abort_Handler --\n    -------------------\n@@ -666,7 +671,7 @@ package body System.Task_Primitives.Operations is\n       Result : Interfaces.C.int;\n    begin\n       Result := clock_gettime\n-        (clock_id => CLOCK_MONOTONIC, tp => TS'Unchecked_Access);\n+        (clock_id => OSC.CLOCK_RT_Ada, tp => TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;\n@@ -869,6 +874,9 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = 0 then\n+         Result := GNAT_pthread_condattr_setup (Cond_Attr'Access);\n+         pragma Assert (Result = 0);\n+\n          Result :=\n            pthread_cond_init\n              (Self_ID.Common.LL.CV'Access, Cond_Attr'Access);\n@@ -1099,6 +1107,10 @@ package body System.Task_Primitives.Operations is\n          --  underlying OS entities fails.\n \n          raise Storage_Error;\n+\n+      else\n+         Result := GNAT_pthread_condattr_setup (Cond_Attr'Access);\n+         pragma Assert (Result = 0);\n       end if;\n \n       Result := pthread_cond_init (S.CV'Access, Cond_Attr'Access);"}, {"sha": "ef0e391d3b496e76dd2779d42d5dd057aab7a08c", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -773,7 +773,7 @@ package body System.Task_Primitives.Operations is\n       TS     : aliased timespec;\n       Result : Interfaces.C.int;\n    begin\n-      Result := clock_gettime (CLOCK_REALTIME, TS'Unchecked_Access);\n+      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;"}, {"sha": "e4ef46699f26148b9f032b3326cc193f7cc50b0c", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -589,7 +589,7 @@ package body System.Task_Primitives.Operations is\n       TS     : aliased timespec;\n       Result : Interfaces.C.int;\n    begin\n-      Result := clock_gettime (CLOCK_REALTIME, TS'Unchecked_Access);\n+      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;"}, {"sha": "3c3e22b5604fd196ac1969e2ba09ad42c51c5e89", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -718,7 +718,7 @@ package body System.Task_Primitives.Operations is\n       TS     : aliased timespec;\n       Result : int;\n    begin\n-      Result := clock_gettime (CLOCK_REALTIME, TS'Unchecked_Access);\n+      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n       pragma Assert (Result = 0);\n       return To_Duration (TS);\n    end Monotonic_Clock;"}, {"sha": "66b0b5dffeec5404e12f67af59c07a3632fcc947", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -34,12 +34,14 @@\n \n with System.Parameters;\n with System.Tasking;\n+with System.OS_Constants;\n with System.OS_Interface;\n \n package System.Task_Primitives.Operations is\n    pragma Preelaborate;\n \n    package ST renames System.Tasking;\n+   package OSC renames System.OS_Constants;\n    package OSI renames System.OS_Interface;\n \n    procedure Initialize (Environment_Task : ST.Task_Id);"}, {"sha": "92e1b9da994f6625e137780c1d441a32a1208bde", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -11786,7 +11786,7 @@ package body Sem_Ch3 is\n          --  needed, since checks may cause duplication of the expressions\n          --  which must not be reevaluated.\n \n-         if Full_Expander_Active then\n+         if Expander_Active then\n             Force_Evaluation (Low_Bound (R));\n             Force_Evaluation (High_Bound (R));\n          end if;\n@@ -18326,7 +18326,7 @@ package body Sem_Ch3 is\n             --  if needed, before applying checks, since checks may cause\n             --  duplication of the expression without forcing evaluation.\n \n-            if Full_Expander_Active then\n+            if Expander_Active then\n                Force_Evaluation (Lo);\n                Force_Evaluation (Hi);\n             end if;\n@@ -18436,7 +18436,7 @@ package body Sem_Ch3 is\n \n       --  Case of other than an explicit N_Range node\n \n-      elsif Full_Expander_Active then\n+      elsif Expander_Active then\n          Get_Index_Bounds (R, Lo, Hi);\n          Force_Evaluation (Lo);\n          Force_Evaluation (Hi);"}, {"sha": "057f0b767beb35aea1143754bc5bba545cdcea8b", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -905,6 +905,60 @@ package body Sem_Ch9 is\n          Bad_Predicated_Subtype_Use\n            (\"subtype& has predicate, not allowed in entry family\",\n             D_Sdef, Etype (D_Sdef));\n+\n+         --  Check entry family static bounds outside allowed limits\n+\n+         --  Note: originally this check was not performed here, but in that\n+         --  case the check happens deep in the expander, and the message is\n+         --  posted at the wrong location, and omitted in -gnatc mode.\n+\n+         declare\n+            PEI : constant Entity_Id := RTE (RE_Protected_Entry_Index);\n+            LB  : constant Uint      := Expr_Value (Type_Low_Bound (PEI));\n+            UB  : constant Uint      := Expr_Value (Type_High_Bound (PEI));\n+\n+            LBR : Node_Id;\n+            UBR : Node_Id;\n+\n+         begin\n+            if Nkind (D_Sdef) = N_Range then\n+               LBR := Low_Bound (D_Sdef);\n+            elsif Is_Entity_Name (D_Sdef)\n+              and then Is_Type (Entity (D_Sdef))\n+            then\n+               LBR := Type_Low_Bound (Entity (D_Sdef));\n+            else\n+               goto Skip_LB;\n+            end if;\n+\n+            if Is_Static_Expression (LBR)\n+              and then Expr_Value (LBR) < LB\n+            then\n+               Error_Msg_Uint_1 := LB;\n+               Error_Msg_N (\"entry family low bound must be '>'= ^!\", D_Sdef);\n+            end if;\n+\n+            <<Skip_LB>>\n+            if Nkind (D_Sdef) = N_Range then\n+               UBR := High_Bound (D_Sdef);\n+            elsif Is_Entity_Name (D_Sdef)\n+              and then Is_Type (Entity (D_Sdef))\n+            then\n+               UBR := Type_High_Bound (Entity (D_Sdef));\n+            else\n+               goto Skip_UB;\n+            end if;\n+\n+            if Is_Static_Expression (UBR)\n+              and then Expr_Value (UBR) > UB\n+            then\n+               Error_Msg_Uint_1 := UB;\n+               Error_Msg_N (\"entry family high bound must be '<'= ^!\", D_Sdef);\n+            end if;\n+\n+            <<Skip_UB>>\n+            null;\n+         end;\n       end if;\n \n       --  Decorate Def_Id"}, {"sha": "da67f7b1cd20198a281ba0b20ac0d1559e1f1f64", "filename": "gcc/ada/thread.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fthread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c269a1f5c9c3904c35ed2ac320e6620c7f47ea57/gcc%2Fada%2Fthread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fthread.c?ref=c269a1f5c9c3904c35ed2ac320e6620c7f47ea57", "patch": "@@ -0,0 +1,50 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                               T H R E A D                                *\n+ *                                                                          *\n+ *                          C Implementation File                           *\n+ *                                                                          *\n+ *             Copyright (C) 2011, Free Software Foundation, Inc.           *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n+ *                                                                          *\n+ * As a special exception under Section 7 of GPL version 3, you are granted *\n+ * additional permissions described in the GCC Runtime Library Exception,   *\n+ * version 3.1, as published by the Free Software Foundation.               *\n+ *                                                                          *\n+ * You should have received a copy of the GNU General Public License and    *\n+ * a copy of the GCC Runtime Library Exception along with this program;     *\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    *\n+ * <http://www.gnu.org/licenses/>.                                          *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/*  This file provides utility functions to access the threads API          */\n+\n+#include <pthread.h>\n+#include <time.h>\n+#include \"s-oscons.h\"\n+\n+int\n+__gnat_pthread_condattr_setup(pthread_condattr_t *attr) {\n+/*\n+ * If using a clock other than CLOCK_REALTIME for the Ada Monotonic_Clock,\n+ * the corresponding clock id must be set for condition variables.\n+ * There are no clock_id's on Darwin.\n+ */\n+#if defined(__APPLE__) || ((CLOCK_RT_Ada) == (CLOCK_REALTIME))\n+  return 0;\n+#else\n+  return pthread_condattr_setclock (attr, CLOCK_RT_Ada);\n+#endif\n+}"}]}