{"sha": "f6ff6738fa25fb012ed208e01de5a84d8668d538", "node_id": "C_kwDOANBUbNoAKGY2ZmY2NzM4ZmEyNWZiMDEyZWQyMDhlMDFkZTVhODRkODY2OGQ1Mzg", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T21:11:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T21:13:17Z"}, "message": "gccgo: link static libgo against -lrt on GNU/Linux\n\nThe upcoming Go 1.18 release requires linking against -lrt on GNU/Linux\n(only) in order to call timer_create and friends.\n\nAlso change gotools to link the runtime test against -lrt.\n\n\t* gospec.cc (RTLIB, RT_LIBRARY): Define.\n\t(lang_specific_driver): Add -lrt if linking statically on\n\tGNU/Linux.\n\n\t* configure.ac (RT_LIBS): Define.\n\t* Makefile.am (check-runtime): Set GOLIBS to $(RT_LIBS).\n\t* configure, Makefile.in: Regenerate.", "tree": {"sha": "8b39147f24010e5fa562b9c9d0471b4bcb3390b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b39147f24010e5fa562b9c9d0471b4bcb3390b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ff6738fa25fb012ed208e01de5a84d8668d538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ff6738fa25fb012ed208e01de5a84d8668d538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ff6738fa25fb012ed208e01de5a84d8668d538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ff6738fa25fb012ed208e01de5a84d8668d538/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf3c339815cdfa636b25a512f91b63d7c313fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf3c339815cdfa636b25a512f91b63d7c313fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf3c339815cdfa636b25a512f91b63d7c313fd6"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "ba7ba4ea09d8e6d12e1ea2407d4463a053822c3f", "filename": "gcc/go/gospec.cc", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ff6738fa25fb012ed208e01de5a84d8668d538/gcc%2Fgo%2Fgospec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ff6738fa25fb012ed208e01de5a84d8668d538/gcc%2Fgo%2Fgospec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgospec.cc?ref=f6ff6738fa25fb012ed208e01de5a84d8668d538", "patch": "@@ -29,10 +29,12 @@ along with GCC; see the file COPYING3.  If not see\n #define MATHLIB\t\t(1<<2)\n /* This bit is set if they did `-lpthread'.  */\n #define THREADLIB\t(1<<3)\n+/* This bit is set if they did `-lrt'.  */\n+#define RTLIB\t\t(1<<4)\n /* This bit is set if they did `-lc'.  */\n-#define WITHLIBC\t(1<<4)\n+#define WITHLIBC\t(1<<5)\n /* Skip this option.  */\n-#define SKIPOPT\t\t(1<<5)\n+#define SKIPOPT\t\t(1<<6)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"m\"\n@@ -44,6 +46,8 @@ along with GCC; see the file COPYING3.  If not see\n #define THREAD_LIBRARY \"pthread\"\n #define THREAD_LIBRARY_PROFILE THREAD_LIBRARY\n \n+#define RT_LIBRARY \"rt\"\n+\n #define LIBGO \"go\"\n #define LIBGO_PROFILE LIBGO\n #define LIBGOBEGIN \"gobegin\"\n@@ -74,6 +78,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* \"-lpthread\" if it appears on the command line.  */\n   const struct cl_decoded_option *saw_thread = 0;\n \n+  /* \"-lrt\" if it appears on the command line.  */\n+  const struct cl_decoded_option *saw_rt = 0;\n+\n   /* \"-lc\" if it appears on the command line.  */\n   const struct cl_decoded_option *saw_libc = 0;\n \n@@ -84,6 +91,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether we need the thread library.  */\n   int need_thread = 0;\n \n+  /* Whether we need the rt library.  */\n+  int need_rt = 0;\n+\n   /* By default, we throw on the math library if we have one.  */\n   int need_math = (MATH_LIBRARY[0] != '\\0');\n \n@@ -156,6 +166,8 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t    }\n \t  else if (strcmp (arg, THREAD_LIBRARY) == 0)\n \t    args[i] |= THREADLIB;\n+\t  else if (strcmp (arg, RT_LIBRARY) == 0)\n+\t    args[i] |= RTLIB;\n \t  else if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n \t  else\n@@ -260,7 +272,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Make sure to have room for the trailing NULL argument.  */\n-  num_args = argc + need_math + shared_libgcc + (library > 0) * 5 + 10;\n+  num_args = argc + need_math + shared_libgcc + (library > 0) * 6 + 10;\n   new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n@@ -314,6 +326,12 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  saw_thread = &decoded_options[i];\n \t}\n \n+      if (!saw_rt && (args[i] & RTLIB) && library > 0)\n+\t{\n+\t  --j;\n+\t  saw_rt = &decoded_options[i];\n+\t}\n+\n       if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n \t{\n \t  --j;\n@@ -395,9 +413,23 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n       /* When linking libgo statically we also need to link with the\n-\t pthread library.  */\n+\t pthread and (on GNU/Linux) the rt library.  */\n       if (library > 1 || static_link)\n-\tneed_thread = 1;\n+\t{\n+\t  need_thread = 1;\n+\t  if (strstr (DEFAULT_TARGET_MACHINE, \"linux\") != NULL)\n+\t    need_rt = 1;\n+\t}\n+    }\n+\n+  if (saw_rt)\n+    new_decoded_options[j++] = *saw_rt;\n+  else if (library > 0 && need_rt)\n+    {\n+      generate_option (OPT_l, RT_LIBRARY, 1, CL_DRIVER,\n+\t\t       &new_decoded_options[j]);\n+      added_libraries++;\n+      j++;\n     }\n \n   if (saw_thread)"}, {"sha": "9e81024ea78d3b07a074fa94df1cba2b3e792d12", "filename": "gotools/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=f6ff6738fa25fb012ed208e01de5a84d8668d538", "patch": "@@ -246,12 +246,14 @@ check-runtime: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n \tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n-\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n+\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} GOLIBS='$(RT_LIBS)' $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n \t$(CHECK_ENV) \\\n \tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n \texport GC; \\\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n+\tGOLIBS=\"$(RT_LIBS)\"; \\\n+\texport GOLIBS; \\\n \tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n \t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n \tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2"}, {"sha": "8a19f6f3a7a40545aaf49dc094e7cd1a33e93e5c", "filename": "gotools/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=f6ff6738fa25fb012ed208e01de5a84d8668d538", "patch": "@@ -269,6 +269,7 @@ PACKAGE_TARNAME = @PACKAGE_TARNAME@\n PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n+RT_LIBS = @RT_LIBS@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n STRIP = @STRIP@\n@@ -917,12 +918,14 @@ mostlyclean-local:\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n @NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n-@NATIVE_TRUE@\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n+@NATIVE_TRUE@\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} GOLIBS='$(RT_LIBS)' $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n @NATIVE_TRUE@\t$(CHECK_ENV) \\\n @NATIVE_TRUE@\tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n @NATIVE_TRUE@\texport GC; \\\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n+@NATIVE_TRUE@\tGOLIBS=\"$(RT_LIBS)\"; \\\n+@NATIVE_TRUE@\texport GOLIBS; \\\n @NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go $(libgodir)/goroot.go\" --tag=libffi`; \\\n @NATIVE_TRUE@\t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n @NATIVE_TRUE@\tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2"}, {"sha": "5b667227de2d3098af6a0be03ecb7454a4c6a6cd", "filename": "gotools/configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2Fconfigure?ref=f6ff6738fa25fb012ed208e01de5a84d8668d538", "patch": "@@ -586,6 +586,7 @@ ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n+RT_LIBS\n NET_LIBS\n NATIVE_FALSE\n NATIVE_TRUE\n@@ -4211,6 +4212,12 @@ if test \"$ac_res\" != no; then :\n fi\n \n \n+RT_LIBS=\n+case ${target} in\n+  *-*-linux*) RT_LIBS=-lrt ;;\n+esac\n+\n+\n ac_config_files=\"$ac_config_files Makefile\"\n \n "}, {"sha": "bf2395f7cf6ae29a91388f93325261f84fa7872f", "filename": "gotools/configure.ac", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ff6738fa25fb012ed208e01de5a84d8668d538/gotools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2Fconfigure.ac?ref=f6ff6738fa25fb012ed208e01de5a84d8668d538", "patch": "@@ -85,6 +85,15 @@ dnl Test if -lrt is required for sched_yield and/or nanosleep.\n AC_SEARCH_LIBS([sched_yield], [rt])\n AC_SEARCH_LIBS([nanosleep], [rt])\n \n+dnl On GNU/Linux we need to link the runtime package against -lrt.\n+dnl This is a target test, unlike sched_yield/nanosleep above\n+dnl which is a host test.\n+RT_LIBS=\n+case ${target} in\n+  *-*-linux*) RT_LIBS=-lrt ;;\n+esac\n+AC_SUBST(RT_LIBS)\n+\n AC_CONFIG_FILES(Makefile)\n \n AC_OUTPUT"}]}