{"sha": "0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFlNDY5ZThjMGNjYjkzYTI2YmIxZTYwZGI2NDE4ZDZiY2NlZDE1ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-07-13T09:17:34Z"}, "message": "ifcvt: Improve tests for predicated operations\n\n-msve-vector-bits=128 causes the AArch64 port to list 128-bit Advanced\nSIMD as the first-choice mode for vectorisation, with SVE being used for\nthings that Advanced SIMD can't handle as easily.  However, ifcvt would\nnot then try to use SVE's predicated FP arithmetic, leading to tests\nlike TSVC ControlFlow-flt failing to vectorise.\n\nThe mask load/store code did try other vector modes, but could also be\nimproved to make sure that SVEness sticks when computing derived modes.\n\n(Unlike mode_for_vector, related_vector_mode always returns a vector\nmode, so there's no need to check VECTOR_MODE_P as well.)\n\ngcc/\n\t* internal-fn.c (vectorized_internal_fn_supported_p): Handle\n\tvector types first.  For scalar types, consider both the preferred\n\tvector mode and the alternative vector modes.\n\t* optabs-query.c (can_vec_mask_load_store_p): Use the same\n\tstructure as above, in particular using related_vector_mode\n\tfor modes provided by autovectorize_vector_modes.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_arith_6.c: New test.", "tree": {"sha": "ed6284907698990f773d1bc984bbed5e8f277677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6284907698990f773d1bc984bbed5e8f277677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "cd5e63f9acd87ff508320cb31e9f5e0cbe8e6d34", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "patch": "@@ -4109,16 +4109,32 @@ expand_internal_call (gcall *stmt)\n bool\n vectorized_internal_fn_supported_p (internal_fn ifn, tree type)\n {\n+  if (VECTOR_MODE_P (TYPE_MODE (type)))\n+    return direct_internal_fn_supported_p (ifn, type, OPTIMIZE_FOR_SPEED);\n+\n   scalar_mode smode;\n-  if (!VECTOR_TYPE_P (type) && is_a <scalar_mode> (TYPE_MODE (type), &smode))\n+  if (!is_a <scalar_mode> (TYPE_MODE (type), &smode))\n+    return false;\n+\n+  machine_mode vmode = targetm.vectorize.preferred_simd_mode (smode);\n+  if (VECTOR_MODE_P (vmode))\n     {\n-      machine_mode vmode = targetm.vectorize.preferred_simd_mode (smode);\n-      if (VECTOR_MODE_P (vmode))\n-\ttype = build_vector_type_for_mode (type, vmode);\n+      tree vectype = build_vector_type_for_mode (type, vmode);\n+      if (direct_internal_fn_supported_p (ifn, vectype, OPTIMIZE_FOR_SPEED))\n+\treturn true;\n     }\n \n-  return (VECTOR_MODE_P (TYPE_MODE (type))\n-\t  && direct_internal_fn_supported_p (ifn, type, OPTIMIZE_FOR_SPEED));\n+  auto_vector_modes vector_modes;\n+  targetm.vectorize.autovectorize_vector_modes (&vector_modes, true);\n+  for (machine_mode base_mode : vector_modes)\n+    if (related_vector_mode (base_mode, smode).exists (&vmode))\n+      {\n+\ttree vectype = build_vector_type_for_mode (type, vmode);\n+\tif (direct_internal_fn_supported_p (ifn, vectype, OPTIMIZE_FOR_SPEED))\n+\t  return true;\n+      }\n+\n+  return false;\n }\n \n void"}, {"sha": "05ee5f517da685f938dbce299f3c171fe8714a3f", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "patch": "@@ -582,27 +582,18 @@ can_vec_mask_load_store_p (machine_mode mode,\n     return false;\n \n   vmode = targetm.vectorize.preferred_simd_mode (smode);\n-  if (!VECTOR_MODE_P (vmode))\n-    return false;\n-\n-  if (targetm.vectorize.get_mask_mode (vmode).exists (&mask_mode)\n+  if (VECTOR_MODE_P (vmode)\n+      && targetm.vectorize.get_mask_mode (vmode).exists (&mask_mode)\n       && convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n     return true;\n \n   auto_vector_modes vector_modes;\n   targetm.vectorize.autovectorize_vector_modes (&vector_modes, true);\n-  for (unsigned int i = 0; i < vector_modes.length (); ++i)\n-    {\n-      poly_uint64 cur = GET_MODE_SIZE (vector_modes[i]);\n-      poly_uint64 nunits;\n-      if (!multiple_p (cur, GET_MODE_SIZE (smode), &nunits))\n-\tcontinue;\n-      if (mode_for_vector (smode, nunits).exists (&vmode)\n-\t  && VECTOR_MODE_P (vmode)\n-\t  && targetm.vectorize.get_mask_mode (vmode).exists (&mask_mode)\n-\t  && convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n-\treturn true;\n-    }\n+  for (machine_mode base_mode : vector_modes)\n+    if (related_vector_mode (base_mode, smode).exists (&vmode)\n+\t&& targetm.vectorize.get_mask_mode (vmode).exists (&mask_mode)\n+\t&& convert_optab_handler (op, vmode, mask_mode) != CODE_FOR_nothing)\n+      return true;\n   return false;\n }\n "}, {"sha": "4085ab1244450a6f7a856a13f9fde07b7d216f8c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_arith_6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae469e8c0ccb93a26bb1e60db6418d6bcced15e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_6.c?ref=0ae469e8c0ccb93a26bb1e60db6418d6bcced15e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"-O3 -msve-vector-bits=128\" } */\n+\n+void\n+f (float *x)\n+{\n+  for (int i = 0; i < 100; ++i)\n+    if (x[i] > 1.0f)\n+      x[i] -= 1.0f;\n+}\n+\n+/* { dg-final { scan-assembler {\\tld1w\\tz} } } */\n+/* { dg-final { scan-assembler {\\tfcmgt\\tp} } } */\n+/* { dg-final { scan-assembler {\\tfsub\\tz} } } */\n+/* { dg-final { scan-assembler {\\tst1w\\tz} } } */"}]}