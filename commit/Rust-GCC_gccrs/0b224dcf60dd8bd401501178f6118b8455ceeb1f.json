{"sha": "0b224dcf60dd8bd401501178f6118b8455ceeb1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyMjRkY2Y2MGRkOGJkNDAxNTAxMTc4ZjYxMThiODQ1NWNlZWIxZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-18T13:47:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-18T13:47:42Z"}, "message": "Expand libstdc++ docs on testing\n\n\t* doc/xml/manual/test.xml (test.run.permutations): Expand section.\n\t(test.new_tests): Rewrite section.\n\t(tests.dg.directives): New section.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r239574", "tree": {"sha": "4ec075e628f365fe23628a571d92cf03f7322e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ec075e628f365fe23628a571d92cf03f7322e63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b224dcf60dd8bd401501178f6118b8455ceeb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b224dcf60dd8bd401501178f6118b8455ceeb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b224dcf60dd8bd401501178f6118b8455ceeb1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b224dcf60dd8bd401501178f6118b8455ceeb1f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b56d48ef86bea5622de8074c6fabee7c3c0646ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56d48ef86bea5622de8074c6fabee7c3c0646ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56d48ef86bea5622de8074c6fabee7c3c0646ef"}], "stats": {"total": 1215, "additions": 804, "deletions": 411}, "files": [{"sha": "b6a0965af4a5a1b9fb31189c76416bbdf76455fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -1,5 +1,10 @@\n 2016-08-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/test.xml (test.run.permutations): Expand section.\n+\t(test.new_tests): Rewrite section.\n+\t(tests.dg.directives): New section.\n+\t* doc/html/*: Regenerate.\n+\n \t* doc/xml/manual/test.xml: Improve documentation of test targets.\n \tDocument new-abi-baseline, check-debug, and check-parallel targets.\n "}, {"sha": "2eba0b7b3084380daa3ab7e1f048f9f7e3054f05", "filename": "libstdc++-v3/doc/html/faq.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -281,7 +281,7 @@\n     performance testing. Please consult the \n     <a class=\"link\" href=\"http://gcc.gnu.org/install/test.html\" target=\"_top\">testing\n     documentation</a> for GCC and\n-    <a class=\"link\" href=\"manual/test.html\" title=\"Test\">Test</a> in the libstdc++\n+    <a class=\"link\" href=\"manual/test.html\" title=\"Testing\">Testing</a> in the libstdc++\n     manual for more details.\n     </p><p>\n     If you find bugs in the testsuite programs themselves, or if you"}, {"sha": "a847921d8ab4598ed08767fb2a961a388947f3b9", "filename": "libstdc++-v3/doc/html/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Findex.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -135,7 +135,7 @@\n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_contributing.html#contrib.list\">Contributor Checklist</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_contributing.html#list.reading\">Reading</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_contributing.html#list.copyright\">Assignment</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_contributing.html#list.getting\">Getting Sources</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_contributing.html#list.patches\">Submitting Patches</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/source_organization.html\">Directory Layout and Source Conventions</a></span></dt><dt><span class=\"section\"><a href=\"manual/source_code_style.html\">Coding Style</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/source_code_style.html#coding_style.bad_identifiers\">Bad Identifiers</a></span></dt><dt><span class=\"section\"><a href=\"manual/source_code_style.html#coding_style.example\">By Example</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/source_design_notes.html\">Design Notes</a></span></dt></dl></dd><dt><span class=\"appendix\"><a href=\"manual/appendix_porting.html\">B. \n   Porting and Maintenance\n   \n-</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"manual/internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html\">Test</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.organization\">Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.new_tests\">Writing a new test case</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.harness.dejagnu\">Dejagnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.exception.safety\">\n+</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.configure.version\">Shared Library Versioning</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"manual/documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"manual/internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"manual/internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html\">Testing</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.organization\">Test Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.new_tests\">Writing a new test case</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#tests.dg.examples\">Examples of Test Directives</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#tests.dg.directives\">Directives Specific to Libstdc++ Tests</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.harness.dejagnu\">DejaGnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"manual/test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.exception.safety\">\n   Qualifying Exception Safety Guarantees\n   \n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"manual/test.html#test.exception.safety.overview\">Overview</a></span></dt><dt><span class=\"section\"><a href=\"manual/test.html#test.exception.safety.status\">"}, {"sha": "c92a04eae8e9997d72bc579b92f6c2428025f932", "filename": "libstdc++-v3/doc/html/manual/abi.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>ABI Policy and Guidelines</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"C++, ABI, version, dynamic, shared, compatibility\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"test.html\" title=\"Test\" /><link rel=\"next\" href=\"api.html\" title=\"API Evolution and Deprecation History\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">ABI Policy and Guidelines</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"test.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>ABI Policy and Guidelines</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"C++, ABI, version, dynamic, shared, compatibility\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"test.html\" title=\"Testing\" /><link rel=\"next\" href=\"api.html\" title=\"API Evolution and Deprecation History\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">ABI Policy and Guidelines</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"test.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n   Porting and Maintenance\n   \n </th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr></table><hr /></div><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.abi\"></a>ABI Policy and Guidelines</h2></div></div></div><p>\n@@ -532,4 +532,4 @@\n \t</a>\n       </em>. </span><span class=\"subtitle\">\n       SYRCoSE 2009\n-    . </span><span class=\"author\"><span class=\"firstname\">Pavel</span> <span class=\"surname\">Shved</span>. </span><span class=\"author\"><span class=\"firstname\">Denis</span> <span class=\"surname\">Silakov</span>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"test.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Test\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0API Evolution and Deprecation History</td></tr></table></div></body></html>\n\\ No newline at end of file\n+    . </span><span class=\"author\"><span class=\"firstname\">Pavel</span> <span class=\"surname\">Shved</span>. </span><span class=\"author\"><span class=\"firstname\">Denis</span> <span class=\"surname\">Silakov</span>. </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"test.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Testing\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0API Evolution and Deprecation History</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "175c879798b68394411cebd7cd358bbcce6eb8b8", "filename": "libstdc++-v3/doc/html/manual/appendix.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -9,7 +9,7 @@\n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_contributing.html#contrib.list\">Contributor Checklist</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.reading\">Reading</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.copyright\">Assignment</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.getting\">Getting Sources</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.patches\">Submitting Patches</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"source_organization.html\">Directory Layout and Source Conventions</a></span></dt><dt><span class=\"section\"><a href=\"source_code_style.html\">Coding Style</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"source_code_style.html#coding_style.bad_identifiers\">Bad Identifiers</a></span></dt><dt><span class=\"section\"><a href=\"source_code_style.html#coding_style.example\">By Example</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"source_design_notes.html\">Design Notes</a></span></dt></dl></dd><dt><span class=\"appendix\"><a href=\"appendix_porting.html\">B. \n   Porting and Maintenance\n   \n-</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Test</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">Dejagnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n+</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.version\">Shared Library Versioning</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Testing</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Test Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#tests.dg.examples\">Examples of Test Directives</a></span></dt><dt><span class=\"section\"><a href=\"test.html#tests.dg.directives\">Directives Specific to Libstdc++ Tests</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">DejaGnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n   Qualifying Exception Safety Guarantees\n   \n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.overview\">Overview</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.status\">"}, {"sha": "7ba713c9e9abab3135819a23387c1335c64ee915", "filename": "libstdc++-v3/doc/html/manual/appendix_porting.html", "status": "modified", "additions": 150, "deletions": 53, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -7,7 +7,7 @@\n </th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"documentation_hacking.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"appendix.porting\"></a>\n   Porting and Maintenance\n   <a id=\"id-1.3.6.3.1.1.1\" class=\"indexterm\"></a>\n-</h1></div></div></div><div class=\"toc\"><p><strong>Table of Contents</strong></p><dl class=\"toc\"><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Test</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">Dejagnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n+</h1></div></div></div><div class=\"toc\"><p><strong>Table of Contents</strong></p><dl class=\"toc\"><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.version\">Shared Library Versioning</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Testing</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Test Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#tests.dg.examples\">Examples of Test Directives</a></span></dt><dt><span class=\"section\"><a href=\"test.html#tests.dg.directives\">Directives Specific to Libstdc++ Tests</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">DejaGnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n   Qualifying Exception Safety Guarantees\n   \n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.overview\">Overview</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.status\">\n@@ -63,20 +63,20 @@\n <code class=\"filename\">Makefile.am</code>.\n </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"build_hacking.overview.map\"></a>What Comes from Where</h4></div></div></div><div class=\"figure\"><a id=\"fig.build_hacking.deps\"></a><p class=\"title\"><strong>Figure\u00a0B.1.\u00a0Configure and Build File Dependencies</strong></p><div class=\"figure-contents\"><div class=\"mediaobject\" align=\"center\"><img src=\"../images/confdeps.png\" align=\"middle\" alt=\"Dependency Graph for Configure and Build Files\" /></div></div></div><br class=\"figure-break\" /><p>\n     Regenerate all generated files by using the command \n-    <code class=\"code\">autoreconf</code> at the top level of the libstdc++ source\n+    <span class=\"command\"><strong>autoreconf</strong></span> at the top level of the libstdc++ source\n     directory.\n   </p></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.configure\"></a>Configure</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"build_hacking.configure.scripts\"></a>Storing Information in non-AC files (like configure.host)</h4></div></div></div><p>\n-    Until that glorious day when we can use AC_TRY_LINK with a\n-    cross-compiler, we have to hardcode the results of what the tests\n+    Until that glorious day when we can use <code class=\"literal\">AC_TRY_LINK</code>\n+    with a cross-compiler, we have to hardcode the results of what the tests\n     would have shown if they could be run.  So we have an inflexible\n-    mess like crossconfig.m4.\n+    mess like <code class=\"filename\">crossconfig.m4</code>.\n   </p><p>\n     Wouldn't it be nice if we could store that information in files\n     like configure.host, which can be modified without needing to\n     regenerate anything, and can even be tweaked without really\n     knowing how the configury all works?  Perhaps break the pieces of\n-    crossconfig.m4 out and place them in their appropriate\n-    config/{cpu,os} directory.\n+    <code class=\"filename\">crossconfig.m4</code> out and place them in their appropriate\n+    <code class=\"filename\">config/{cpu,os}</code> directory.\n   </p><p>\n     Alas, writing macros like\n     \"<code class=\"code\">AC_DEFINE(HAVE_A_NICE_DAY)</code>\" can only be done inside\n@@ -89,32 +89,37 @@\n     discourage that.\n </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"build_hacking.configure.conventions\"></a>Coding and Commenting Conventions</h4></div></div></div><p>\n     Most comments should use {octothorpes, shibboleths, hash marks,\n-    pound signs, whatever} rather than \"dnl\".  Nearly all comments in\n-    configure.ac should.  Comments inside macros written in ancillary\n-    .m4 files should.  About the only comments which should\n-    <span class=\"emphasis\"><em>not</em></span> use #, but use dnl instead, are comments\n-    <span class=\"emphasis\"><em>outside</em></span> our own macros in the ancillary\n-    files.  The difference is that # comments show up in\n-    <code class=\"code\">configure</code> (which is most helpful for debugging),\n-    while dnl'd lines just vanish.  Since the macros in ancillary\n-    files generate code which appears in odd places, their \"outside\"\n-    comments tend to not be useful while reading\n-    <code class=\"code\">configure</code>.\n+    pound signs, whatever} rather than \"<code class=\"literal\">dnl</code>\".\n+    Nearly all comments in <code class=\"filename\">configure.ac</code> should.\n+    Comments inside macros written in ancillary\n+    <code class=\"filename\">.m4</code> files should.\n+    About the only comments which should <span class=\"emphasis\"><em>not</em></span>\n+    use <code class=\"literal\">#</code>, but use <code class=\"literal\">dnl</code> instead,\n+    are comments <span class=\"emphasis\"><em>outside</em></span> our own macros in the ancillary\n+    files.  The difference is that <code class=\"literal\">#</code> comments show up in\n+    <code class=\"filename\">configure</code> (which is most helpful for debugging),\n+    while <code class=\"literal\">dnl</code>'d lines just vanish.  Since the macros\n+    in ancillary files generate code which appears in odd places,\n+    their \"outside\" comments tend to not be useful while reading\n+    <code class=\"filename\">configure</code>.\n   </p><p>\n     Do not use any <code class=\"code\">$target*</code> variables, such as\n-    <code class=\"code\">$target_alias</code>.  The single exception is in\n-    configure.ac, for automake+dejagnu's sake.\n+    <code class=\"varname\">$target_alias</code>.  The single exception is in\n+    <code class=\"filename\">configure.ac</code>, for automake+dejagnu's sake.\n   </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"build_hacking.configure.acinclude\"></a>The acinclude.m4 layout</h4></div></div></div><p>\n-    The nice thing about acinclude.m4/aclocal.m4 is that macros aren't\n+    The nice thing about\n+    <code class=\"filename\">acinclude.m4</code>/<code class=\"filename\">aclocal.m4</code>\n+    is that macros aren't\n     actually performed/called/expanded/whatever here, just loaded.  So\n     we can arrange the contents however we like.  As of this writing,\n-    acinclude.m4 is arranged as follows:\n+    <code class=\"filename\">acinclude.m4</code> is arranged as follows:\n   </p><pre class=\"programlisting\">\n     GLIBCXX_CHECK_HOST\n     GLIBCXX_TOPREL_CONFIGURE\n     GLIBCXX_CONFIGURE\n   </pre><p>\n-    All the major variable \"discovery\" is done here.  CXX, multilibs,\n+    All the major variable \"discovery\" is done here.\n+    <code class=\"varname\">CXX</code>, multilibs,\n     etc.\n   </p><pre class=\"programlisting\">\n     fragments included from elsewhere\n@@ -179,7 +184,8 @@\n     helper, <code class=\"literal\">GLIBCXX_ENABLE</code>.  (You don't have to use\n     it, but it's easy.)  The helper does two things for us:\n   </p><div class=\"orderedlist\"><ol class=\"orderedlist\" type=\"1\"><li class=\"listitem\"><p>\n-     Builds the call to the <code class=\"literal\">AC_ARG_ENABLE</code> macro, with --help text\n+     Builds the call to the <code class=\"literal\">AC_ARG_ENABLE</code> macro, with\n+     <code class=\"option\">--help</code> text\n      properly quoted and aligned.  (Death to changequote!)\n    </p></li><li class=\"listitem\"><p>\n      Checks the result against a list of allowed possibilities, and\n@@ -204,54 +210,62 @@\n     GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, permit a|b|c)\n     GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, SHELL-CODE-HANDLER)\n </pre><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>\n-     FEATURE is the string that follows --enable.  The results of the\n-     test (such as it is) will be in the variable $enable_FEATURE,\n-     where FEATURE has been squashed.  Example:\n-     <code class=\"code\">[extra-foo]</code>, controlled by the --enable-extra-foo\n-     option and stored in $enable_extra_foo.\n+     <code class=\"literal\">FEATURE</code> is the string that follows\n+     <code class=\"option\">--enable</code>.  The results of the\n+     test (such as it is) will be in the variable\n+     <code class=\"varname\">$enable_FEATURE</code>,\n+     where <code class=\"literal\">FEATURE</code> has been squashed.  Example:\n+     <code class=\"code\">[extra-foo]</code>, controlled by the\n+     <code class=\"option\">--enable-extra-foo</code>\n+     option and stored in <code class=\"varname\">$enable_extra_foo</code>.\n    </p></li><li class=\"listitem\"><p>\n-     DEFAULT is the value to store in $enable_FEATURE if the user does\n-     not pass --enable/--disable.  It should be one of the permitted\n-     values passed later.  Examples: <code class=\"code\">[yes]</code>, or\n-     <code class=\"code\">[bar]</code>, or <code class=\"code\">[$1]</code> (which passes the\n-     argument given to the <code class=\"literal\">GLIBCXX_ENABLE_FOO</code> macro\n-     as the default).\n+     <code class=\"literal\">DEFAULT</code> is the value to store in\n+     <code class=\"varname\">$enable_FEATURE</code> if the user does\n+     not pass <code class=\"option\">--enable</code>/<code class=\"option\">--disable</code>.\n+     It should be one of the permitted values passed later.\n+     Examples: <code class=\"code\">[yes]</code>, or <code class=\"code\">[bar]</code>, or\n+     <code class=\"code\">[$1]</code> (which passes the argument given to the\n+     <code class=\"literal\">GLIBCXX_ENABLE_FOO</code> macro as the default).\n    </p><p>\n      For cases where we need to probe for particular models of things,\n      it is useful to have an undocumented \"auto\" value here (see\n      <code class=\"literal\">GLIBCXX_ENABLE_CLOCALE</code> for an example).\n    </p></li><li class=\"listitem\"><p>\n-     HELP-ARG is any text to append to the option string itself in the\n-     --help output.  Examples: <code class=\"code\">[]</code> (i.e., an empty string,\n-     which appends nothing), <code class=\"code\">[=BAR]</code>, which produces\n-     <code class=\"code\">--enable-extra-foo=BAR</code>, and\n-     <code class=\"code\">[@&lt;:@=BAR@:&gt;@]</code>, which produces\n+     <code class=\"literal\">HELP-ARG</code> is any text to append to the option string\n+     itself in the <code class=\"option\">--help</code> output.  Examples:\n+     <code class=\"code\">[]</code> (i.e., an empty string, which appends nothing),\n+     <code class=\"code\">[=BAR]</code>, which produces <code class=\"code\">--enable-extra-foo=BAR</code>,\n+     and <code class=\"code\">[@&lt;:@=BAR@:&gt;@]</code>, which produces\n      <code class=\"code\">--enable-extra-foo[=BAR]</code>.  See the difference?  See\n      what it implies to the user?\n    </p><p>\n      If you're wondering what that line noise in the last example was,\n      that's how you embed autoconf special characters in output text.\n      They're called <a class=\"link\" href=\"http://www.gnu.org/software/autoconf/manual/autoconf.html#Quadrigraphs\" target=\"_top\"><span class=\"emphasis\"><em>quadrigraphs</em></span></a>\n      and you should use them whenever necessary.\n- </p></li><li class=\"listitem\"><p>HELP-STRING is what you think it is.  Do not include the\n+ </p></li><li class=\"listitem\"><p><code class=\"literal\">HELP-STRING</code> is what you think it is.  Do not include the\n    \"default\" text like we used to do; it will be done for you by\n-   GLIBCXX_ENABLE.  By convention, these are not full English\n-   sentences.  Example: [turn on extra foo]\n+   <code class=\"literal\">GLIBCXX_ENABLE</code>.  By convention, these are not full English\n+   sentences.  Example: <code class=\"literal\">[turn on extra foo]</code>\n    </p></li></ul></div><p>\n   With no other arguments, only the standard autoconf patterns are\n-  allowed: \"<code class=\"code\">--{enable,disable}-foo[={yes,no}]</code>\" The\n-  $enable_FEATURE variable is guaranteed to equal either \"yes\" or \"no\"\n+  allowed: \"<code class=\"option\">--{enable,disable}-foo[={yes,no}]</code>\" The\n+  <code class=\"varname\">$enable_FEATURE</code> variable is guaranteed to equal\n+  either \"<code class=\"literal\">yes</code>\" or \"<code class=\"literal\">no</code>\"\n   after the macro.  If the user tries to pass something else, an\n   explanatory error message will be given, and configure will halt.\n </p><p>\n   The second signature takes a fifth argument, \"<code class=\"code\">[permit\n   a | b | c | ...]</code>\"\n   This allows <span class=\"emphasis\"><em>a</em></span> or <span class=\"emphasis\"><em>b</em></span> or\n-  ... after the equals sign in the option, and $enable_FEATURE is\n+  ... after the equals sign in the option, and\n+  <code class=\"varname\">$enable_FEATURE</code> is\n   guaranteed to equal one of them after the macro.  Note that if you\n-  want to allow plain --enable/--disable with no \"=whatever\", you must\n-  include \"yes\" and \"no\" in the list of permitted values.  Also note\n-  that whatever you passed as DEFAULT must be in the list.  If the\n+  want to allow plain <code class=\"option\">--enable</code>/<code class=\"option\">--disable</code>\n+  with no \"<code class=\"literal\">=whatever</code>\", you must\n+  include \"<code class=\"literal\">yes</code>\" and \"<code class=\"literal\">no</code>\" in the\n+  list of permitted values.  Also note that whatever you passed as\n+  <code class=\"literal\">DEFAULT</code> must be in the list.  If the\n   user tries to pass something not on the list, a semi-explanatory\n   error message will be given, and configure will halt.  Example:\n   <code class=\"code\">[permit generic|gnu|ieee_1003.1-2001|yes|no|auto]</code>\n@@ -260,8 +274,91 @@\n   code to execute if the user actually passes the enable/disable\n   option.  (If the user does not, the default is used.  Duh.)  No\n   argument checking at all is done in this signature.  See\n-  GLIBCXX_ENABLE_CXX_FLAGS for an example of handling, and an error\n-  message.\n+  <code class=\"literal\">GLIBCXX_ENABLE_CXX_FLAGS</code> for an example of handling,\n+  and an error message.\n+</p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"build_hacking.configure.version\"></a>Shared Library Versioning</h4></div></div></div><p>\n+The <code class=\"filename\">libstdc++.so</code> shared library must\n+be carefully managed to maintain binary compatible with older versions\n+of the library. This ensures a new version of the library is still usable by\n+programs that were linked against an older version.\n+</p><p>\n+Dependent on the target supporting it, the library uses <a class=\"link\" href=\"https://www.akkadia.org/drepper/symbol-versioning\" target=\"_top\">ELF\n+symbol versioning</a> for all exported symbols. The symbol versions\n+are defined by a <a class=\"link\" href=\"https://sourceware.org/binutils/docs/ld/VERSION.html\" target=\"_top\">linker\n+script</a> that assigns a version to every symbol.\n+The set of symbols in each version is fixed when a GCC\n+release is made, and must not change after that.\n+</p><p> When new symbols are added to the library they must be added\n+to a new symbol version, which must be created the first time new symbols\n+are added after a release. Adding a new symbol version involves the\n+following steps:\n+</p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>\n+Edit <code class=\"filename\">acinclude.m4</code> to update the \"revision\" value of\n+<code class=\"varname\">libtool_VERSION</code>, e.g. from <code class=\"literal\">6:22:0</code>\n+to <code class=\"literal\">6:23:0</code>, which will cause the shared library to be\n+built as <code class=\"filename\">libstdc++.so.6.0.23</code>.\n+</p></li><li class=\"listitem\"><p>\n+Regenerate the <code class=\"filename\">configure</code> script by running the\n+<span class=\"command\"><strong>autoreconf</strong></span> tool from the correct version of the Autoconf\n+package (as dictated by the <a class=\"link\" href=\"https://gcc.gnu.org/install/prerequisites.html\" target=\"_top\">GCC\n+prerequisites</a>).\n+</p></li><li class=\"listitem\"><p>\n+Edit the file <code class=\"filename\">config/abi/pre/gnu.ver</code> to\n+add a new version node after the last new node. The node name should be\n+<code class=\"literal\">GLIBCXX_3.4.X</code> where <code class=\"literal\">X</code> is the new\n+revision set in <code class=\"filename\">acinclude.m4</code>, and the node should\n+depend on the previous version e.g.\n+</p><pre class=\"programlisting\">\n+    GLIBCXX_3.4.23 {\n+\n+    } GLIBCXX_3.4.22;\n+</pre><p>\n+For symbols in the ABI runtime, libsupc++, the symbol version naming uses\n+<code class=\"literal\">CXXABI_1.3.Y</code> where <code class=\"literal\">Y</code> increases\n+monotonically with each new version. Again, the new node must depend on the\n+previous version node e.g.\n+</p><pre class=\"programlisting\">\n+    CXXABI_1.3.11 {\n+\n+    } CXXABI_1.3.10;\n+</pre><p>\n+</p></li><li class=\"listitem\"><p>\n+In order for the <a class=\"link\" href=\"test.html#test.run.variations\" title=\"Variations\">check-abi</a> test\n+target to pass the testsuite must be updated to know about the new symbol\n+version(s). Edit the file <code class=\"filename\">testsuite/util/testsuite_abi.cc</code>\n+file to add the new versions to the <code class=\"varname\">known_versions</code> list,\n+and update the checks for the latest versions that set the\n+<code class=\"varname\">latestp</code> variable).\n+</p></li></ul></div><p>\n+Once the new symbol version has been added you can add the names of your new\n+symbols in the new version node:\n+</p><pre class=\"programlisting\">\n+    GLIBCXX_3.4.23 {\n+\n+      # basic_string&lt;C, T, A&gt;::_Alloc_hider::_Alloc_hider(C*, A&amp;&amp;)\n+      _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE12_Alloc_hiderC[12]EP[cw]OS3_;\n+\n+    } GLIBCXX_3.4.22;\n+</pre><p>\n+You can either use mangled names, or demangled names inside an\n+<code class=\"literal\">extern \"C++\"</code> block. You might find that the new symbol\n+matches an existing pattern in an old symbol version (causing the\n+<code class=\"literal\">check-abi</code> test target to fail). If that happens then the\n+existing pattern must be adjusted to be more specific so that it doesn't\n+match the new symbol.\n+</p><p>\n+For an example of these steps, including adjusting old patterns to be less\n+greedy, see <a class=\"link\" href=\"https://gcc.gnu.org/ml/gcc-patches/2016-07/msg01926.html\" target=\"_top\">https://gcc.gnu.org/ml/gcc-patches/2016-07/msg01926.html</a>\n+and the attached patch.\n+</p><p>\n+If it wasn't done for the last release, you might also need to regenerate\n+the <code class=\"filename\">baseline_symbols.txt</code> file that defines the set\n+of expected symbols for old symbol versions. A new baseline file can be\n+generated by running <strong class=\"userinput\"><code>make new-abi-baseline</code></strong> in the\n+<code class=\"filename\"><em class=\"replaceable\"><code>libbuildir</code></em>/testsuite</code>\n+directory. Be sure to generate the baseline from a clean build using\n+unmodified sources, or you will incorporate your local changes into the\n+baseline file.\n </p></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.make\"></a>Make</h3></div></div></div><p>\n     The build process has to make all of object files needed for\n     static or shared libraries, but first it has to generate some\n@@ -287,13 +384,13 @@\n    </p><p>\n      Generates a libtool convenience library,\n      <code class=\"filename\">libc++98convenience</code> with language-support\n-     routines. Uses the <code class=\"literal\">-std=gnu++98</code> dialect.\n+     routines. Uses the <code class=\"option\">-std=gnu++98</code> dialect.\n    </p></li><li class=\"listitem\"><p>\n      make src/c++11\n    </p><p>\n      Generates a libtool convenience library,\n      <code class=\"filename\">libc++11convenience</code> with language-support\n-     routines. Uses the <code class=\"literal\">-std=gnu++11</code> dialect.\n+     routines. Uses the <code class=\"option\">-std=gnu++11</code> dialect.\n    </p></li><li class=\"listitem\"><p>\n      make src\n    </p><p>"}, {"sha": "8ce0b4b54b8beeaa5a76a609e4fe82fd265bda06", "filename": "libstdc++-v3/doc/html/manual/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Findex.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -116,7 +116,7 @@\n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_contributing.html#contrib.list\">Contributor Checklist</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.reading\">Reading</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.copyright\">Assignment</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.getting\">Getting Sources</a></span></dt><dt><span class=\"section\"><a href=\"appendix_contributing.html#list.patches\">Submitting Patches</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"source_organization.html\">Directory Layout and Source Conventions</a></span></dt><dt><span class=\"section\"><a href=\"source_code_style.html\">Coding Style</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"source_code_style.html#coding_style.bad_identifiers\">Bad Identifiers</a></span></dt><dt><span class=\"section\"><a href=\"source_code_style.html#coding_style.example\">By Example</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"source_design_notes.html\">Design Notes</a></span></dt></dl></dd><dt><span class=\"appendix\"><a href=\"appendix_porting.html\">B. \n   Porting and Maintenance\n   \n-</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Test</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">Dejagnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n+</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview\">Overview</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.basic\">General Process</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.overview.map\">What Comes from Where</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure\">Configure</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.configure.version\">Shared Library Versioning</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"appendix_porting.html#build_hacking.make\">Make</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html\">Writing and Generating Documentation</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.intro\">Introduction</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.generation\">Generating Documentation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.doxygen\">Doxygen</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.rules\">Generating the Doxygen Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#doxygen.markup\">Markup</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"documentation_hacking.html#doc.docbook\">Docbook</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.prereq\">Prerequisites</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.rules\">Generating the DocBook Files</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.debug\">Debugging Generation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.validation\">Editing and Validation</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.examples\">File Organization and Basics</a></span></dt><dt><span class=\"section\"><a href=\"documentation_hacking.html#docbook.markup\">Markup By Example</a></span></dt></dl></dd></dl></dd><dt><span class=\"section\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"section\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html\">Testing</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization\">Test Organization</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.organization.layout\">Directory Layout</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.organization.naming\">Naming Conventions</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.run.basic\">Basic</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.variations\">Variations</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.run.permutations\">Permutations</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.new_tests\">Writing a new test case</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#tests.dg.examples\">Examples of Test Directives</a></span></dt><dt><span class=\"section\"><a href=\"test.html#tests.dg.directives\">Directives Specific to Libstdc++ Tests</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.harness\">Test Harness and Utilities</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.harness.dejagnu\">DejaGnu Harness Details</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.harness.utils\">Utilities</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"test.html#test.special\">Special Topics</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety\">\n   Qualifying Exception Safety Guarantees\n   \n </a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.overview\">Overview</a></span></dt><dt><span class=\"section\"><a href=\"test.html#test.exception.safety.status\">"}, {"sha": "c28e668f8ba8dc834045ae2c2e4e97fb79ac4e12", "filename": "libstdc++-v3/doc/html/manual/internals.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -1,5 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Porting to New Hardware or Operating Systems</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"ISO C++, internals\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"documentation_hacking.html\" title=\"Writing and Generating Documentation\" /><link rel=\"next\" href=\"test.html\" title=\"Test\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Porting to New Hardware or Operating Systems</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"documentation_hacking.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Porting to New Hardware or Operating Systems</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"ISO C++, internals\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"documentation_hacking.html\" title=\"Writing and Generating Documentation\" /><link rel=\"next\" href=\"test.html\" title=\"Testing\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Porting to New Hardware or Operating Systems</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"documentation_hacking.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n   Porting and Maintenance\n   \n </th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"test.html\">Next</a></td></tr></table><hr /></div><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.internals\"></a>Porting to New Hardware or Operating Systems</h2></div></div></div><p>\n@@ -371,4 +371,4 @@\n <code class=\"code\">ltcf-c.sh</code> in the top-level directory.  Find the switch statement\n that sets <code class=\"code\">archive_cmds</code>.  Here, adjust the setting for your\n operating system.\n-   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"documentation_hacking.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"test.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Writing and Generating Documentation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Test</td></tr></table></div></body></html>\n\\ No newline at end of file\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"documentation_hacking.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"test.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Writing and Generating Documentation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Testing</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "9e5b64fa151f10e467882cc84e38ed97856bf53f", "filename": "libstdc++-v3/doc/html/manual/test.html", "status": "modified", "additions": 375, "deletions": 254, "changes": 629, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -1,62 +1,62 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Test</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"ISO C++, test, testsuite, performance, conformance, ABI, exception safety\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"internals.html\" title=\"Porting to New Hardware or Operating Systems\" /><link rel=\"next\" href=\"abi.html\" title=\"ABI Policy and Guidelines\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Test</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"internals.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Testing</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"ISO C++, test, testsuite, performance, conformance, ABI, exception safety\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0 Porting and Maintenance\" /><link rel=\"prev\" href=\"internals.html\" title=\"Porting to New Hardware or Operating Systems\" /><link rel=\"next\" href=\"abi.html\" title=\"ABI Policy and Guidelines\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Testing</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"internals.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0\n   Porting and Maintenance\n   \n-</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"abi.html\">Next</a></td></tr></table><hr /></div><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.setup.test\"></a>Test</h2></div></div></div><p>\n+</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"abi.html\">Next</a></td></tr></table><hr /></div><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.setup.test\"></a>Testing</h2></div></div></div><p>\n The libstdc++ testsuite includes testing for standard conformance,\n regressions, ABI, and performance.\n-</p><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.organization\"></a>Organization</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.organization.layout\"></a>Directory Layout</h4></div></div></div><p>\n-  The directory <span class=\"emphasis\"><em>libsrcdir/testsuite</em></span> contains the\n-  individual test cases organized in sub-directories corresponding to\n-  clauses of the C++ standard (detailed below), the dejagnu test\n-  harness support files, and sources to various testsuite utilities\n-  that are packaged in a separate testing library.\n+</p><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.organization\"></a>Test Organization</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.organization.layout\"></a>Directory Layout</h4></div></div></div><p>\n+  The directory\n+  <code class=\"filename\"><em class=\"replaceable\"><code>gccsrcdir</code></em>/libstdc++-v3/testsuite</code>\n+  contains the individual test cases organized in sub-directories\n+  corresponding to clauses of the C++ standard (detailed below),\n+  the DejaGnu test harness support files, and sources to various\n+  testsuite utilities that are packaged in a separate testing library.\n </p><p>\n   All test cases for functionality required by the runtime components\n   of the C++ standard (ISO 14882) are files within the following\n-  directories.\n-</p><pre class=\"programlisting\">\n-17_intro\n-18_support\n-19_diagnostics\n-20_util\n-21_strings\n-22_locale\n-23_containers\n-25_algorithms\n-26_numerics\n-27_io\n-28_regex\n-29_atomics\n-30_threads\n-   </pre><p>\n-      In addition, the following directories include test files:\n+  directories:\n+\n    </p><pre class=\"programlisting\">\n-tr1\t\t  Tests for components as described by the Technical Report on Standard Library Extensions (TR1).\n-backward\t  Tests for backwards compatibility and deprecated features.\n-demangle\t  Tests for __cxa_demangle, the IA 64 C++ ABI demangler\n-ext\t\t  Tests for extensions.\n-performance\t  Tests for performance analysis, and performance regressions.\n+    17_intro\n+    18_support\n+    19_diagnostics\n+    20_util\n+    21_strings\n+    22_locale\n+    23_containers\n+    24_iterators\n+    25_algorithms\n+    26_numerics\n+    27_io\n+    28_regex\n+    29_atomics\n+    30_threads\n    </pre><p>\n+</p><p>\n+      In addition, the following directories include test files:\n+\n+</p><div class=\"variablelist\"><dl class=\"variablelist compact\"><dt><span class=\"term\"><code class=\"filename\">tr1</code></span></dt><dd>Tests for components as described by the Technical Report\n+    on Standard Library Extensions (TR1).\n+  </dd><dt><span class=\"term\"><code class=\"filename\">backward</code></span></dt><dd>Tests for backwards compatibility and deprecated features.\n+  </dd><dt><span class=\"term\"><code class=\"filename\">demangle</code></span></dt><dd>Tests for <code class=\"function\">__cxa_demangle</code>, the IA-64 C++ ABI\n+    demangler.\n+  </dd><dt><span class=\"term\"><code class=\"filename\">ext</code></span></dt><dd>Tests for extensions.</dd><dt><span class=\"term\"><code class=\"filename\">performance</code></span></dt><dd>Tests for performance analysis, and performance regressions.\n+  </dd></dl></div><p>\n+   </p><p>\n       Some directories don't have test files, but instead contain\n       auxiliary information:\n-   </p><pre class=\"programlisting\">\n-config\t\t  Files for the dejagnu test harness.\n-lib\t\t  Files for the dejagnu test harness.\n-libstdc++*     \t  Files for the dejagnu test harness.\n-data\t\t  Sample text files for testing input and output.\n-util\t\t  Files for libtestc++, utilities and testing routines.\n-   </pre><p>\n+\n+</p><div class=\"variablelist\"><dl class=\"variablelist compact\"><dt><span class=\"term\"><code class=\"filename\">config</code></span></dt><dd>Files for the DejaGnu test harness.</dd><dt><span class=\"term\"><code class=\"filename\">lib</code></span></dt><dd>Files for the DejaGnu test harness.</dd><dt><span class=\"term\"><code class=\"filename\">libstdc++*</code></span></dt><dd>Files for the DejaGnu test harness.</dd><dt><span class=\"term\"><code class=\"filename\">data</code></span></dt><dd>Sample text files for testing input and output.</dd><dt><span class=\"term\"><code class=\"filename\">util</code></span></dt><dd>Files for libtestc++, utilities and testing routines.</dd></dl></div><p>\n+   </p><p>\n       Within a directory that includes test files, there may be\n       additional subdirectories, or files.  Originally, test cases\n       were appended to one file that represented a particular section\n       of the chapter under test, and was named accordingly. For\n       instance, to test items related to <code class=\"code\"> 21.3.6.1 -\n-      basic_string::find [lib.string::find]</code> in the standard,\n-      the following was used:\n-   </p><pre class=\"programlisting\">\n-21_strings/find.cc\n-   </pre><p>\n+      <code class=\"function\">basic_string::find</code> [lib.string::find]</code>\n+      in the standard, the following was used:\n+</p><pre class=\"programlisting\">    21_strings/find.cc </pre><p>\n       However, that practice soon became a liability as the test cases\n       became huge and unwieldy, and testing new or extended\n       functionality (like wide characters or named locales) became\n@@ -66,83 +66,77 @@\n       above issues and gives finer grained results and more manageable\n       error debugging. As an example, the test case quoted above\n       becomes:\n-   </p><pre class=\"programlisting\">\n-21_strings/basic_string/find/char/1.cc\n-21_strings/basic_string/find/char/2.cc\n-21_strings/basic_string/find/char/3.cc\n-21_strings/basic_string/find/wchar_t/1.cc\n-21_strings/basic_string/find/wchar_t/2.cc\n-21_strings/basic_string/find/wchar_t/3.cc\n-   </pre><p>\n-      All new tests should be written with the policy of one test\n-      case, one file in mind.\n+</p><pre class=\"programlisting\">    21_strings/basic_string/find/char/1.cc\n+    21_strings/basic_string/find/char/2.cc\n+    21_strings/basic_string/find/char/3.cc\n+    21_strings/basic_string/find/wchar_t/1.cc\n+    21_strings/basic_string/find/wchar_t/2.cc\n+    21_strings/basic_string/find/wchar_t/3.cc</pre><p>\n+   </p><p>\n+      All new tests should be written with the policy of \"one test\n+      case, one file\" in mind.\n    </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.organization.naming\"></a>Naming Conventions</h4></div></div></div><p>\n       In addition, there are some special names and suffixes that are\n       used within the testsuite to designate particular kinds of\n       tests.\n-   </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>_xin.cc</em></span>\n-  </p><p>\n+   </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"filename\">_xin.cc</code></span></dt><dd>\n       This test case expects some kind of interactive input in order\n       to finish or pass. At the moment, the interactive tests are not\n       run by default. Instead, they are run by hand, like:\n-   </p><pre class=\"programlisting\">\n+      <pre class=\"programlisting\">\n g++ 27_io/objects/char/3_xin.cc\n-cat 27_io/objects/char/3_xin.in | a.out\n-     </pre></li><li class=\"listitem\"><p>\n-     <span class=\"emphasis\"><em>.in</em></span>\n-   </p><p>\n+cat 27_io/objects/char/3_xin.in | a.out</pre></dd><dt><span class=\"term\"><code class=\"filename\">.in</code></span></dt><dd>\n       This file contains the expected input for the corresponding <span class=\"emphasis\"><em>\n       _xin.cc</em></span> test case.\n-   </p></li><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>_neg.cc</em></span>\n-  </p><p>\n+  </dd><dt><span class=\"term\"><code class=\"filename\">_neg.cc</code></span></dt><dd>\n       This test case is expected to fail: it's a negative test. At the\n       moment, these are almost always compile time errors.\n-   </p></li><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>char</em></span>\n-  </p><p>\n+  </dd><dt><span class=\"term\"><code class=\"filename\">char</code></span></dt><dd>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing the <code class=\"code\">char</code> instantiation of a\n       template.\n-   </p></li><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>wchar_t</em></span>\n-  </p><p>\n+  </dd><dt><span class=\"term\"><code class=\"filename\">wchar_t</code></span></dt><dd>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing the <code class=\"code\">wchar_t</code> instantiation of\n       a template. Some hosts do not support <code class=\"code\">wchar_t</code>\n       functionality, so for these targets, all of these tests will not\n       be run.\n-   </p></li><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>thread</em></span>\n-  </p><p>\n+  </dd><dt><span class=\"term\"><code class=\"filename\">thread</code></span></dt><dd>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing situations where multiple threads are\n       being used.\n-   </p></li><li class=\"listitem\"><p>\n-   <span class=\"emphasis\"><em>performance</em></span>\n-  </p><p>\n+  </dd><dt><span class=\"term\"><code class=\"filename\">performance</code></span></dt><dd>\n       This can either be an enclosing directory name or part of a\n       specific file name. This indicates a test that is used to\n       analyze runtime performance, for performance regression testing,\n       or for other optimization related analysis. At the moment, these\n       test cases are not run by default.\n-   </p></li></ul></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.run\"></a>Running the Testsuite</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.run.basic\"></a>Basic</h4></div></div></div><p>\n+  </dd></dl></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.run\"></a>Running the Testsuite</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.run.basic\"></a>Basic</h4></div></div></div><p>\n       You can check the status of the build without installing it\n-      using the dejagnu harness, much like the rest of the gcc\n-      tools.</p><pre class=\"programlisting\"> make check</pre><p>in the <span class=\"emphasis\"><em>libbuilddir</em></span> directory.</p><p>or</p><pre class=\"programlisting\"> make check-target-libstdc++-v3</pre><p>in the <span class=\"emphasis\"><em>gccbuilddir</em></span> directory.\n-     </p><p>\n+      using the DejaGnu harness, much like the rest of the gcc\n+      tools, i.e.\n+   <strong class=\"userinput\"><code>make check</code></strong>\n+      in the\n+      <code class=\"filename\"><em class=\"replaceable\"><code>libbuilddir</code></em></code>\n+      directory, or\n+   <strong class=\"userinput\"><code>make check-target-libstdc++-v3</code></strong>\n+       in the\n+      <code class=\"filename\"><em class=\"replaceable\"><code>gccbuilddir</code></em></code>\n+       directory.\n+    </p><p>\n        These commands are functionally equivalent and will create a\n-       'testsuite' directory underneath\n-       <span class=\"emphasis\"><em>libbuilddir</em></span> containing the results of the\n-       tests. Two results files will be generated: <span class=\"emphasis\"><em>\n-       libstdc++.sum</em></span>, which is a PASS/FAIL summary for each\n-       test, and <span class=\"emphasis\"><em>libstdc++.log</em></span> which is a log of\n-       the exact command line passed to the compiler, the compiler\n-       output, and the executable output (if any).\n+       '<code class=\"filename\">testsuite</code>' directory underneath\n+       <code class=\"filename\"><em class=\"replaceable\"><code>libbuilddir</code></em></code>\n+       containing the results of the\n+       tests. Two results files will be generated:\n+       <code class=\"filename\">libstdc++.sum</code>, which is a PASS/FAIL summary\n+       for each test, and\n+       <code class=\"filename\">libstdc++.log</code> which is a log of\n+       the exact command-line passed to the compiler, the compiler\n+       output, and the executable output (if any) for each test.\n      </p><p>\n        Archives of test results for various versions and platforms are\n        available on the GCC website in the <a class=\"link\" href=\"http://gcc.gnu.org/gcc-4.3/buildstat.html\" target=\"_top\">build\n@@ -157,60 +151,74 @@\n       installed tools, etc. In addition, there is a special rule for\n       checking the exported symbols of the shared library.\n     </p><p>\n-      To debug the dejagnu test harness during runs, try invoking with a\n-      specific argument to the variable RUNTESTFLAGS, as below.\n-    </p><pre class=\"programlisting\">\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n+      To debug the DejaGnu test harness during runs, try invoking with a\n+      specific argument to the variable <code class=\"varname\">RUNTESTFLAGS</code>,\n+      like so:\n+</p><pre class=\"programlisting\">\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n </pre><p>\n       or\n-    </p><pre class=\"programlisting\">\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n+</p><pre class=\"programlisting\">\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n </pre><p>\n+    </p><p>\n       To run a subset of the library tests, you can either generate the\n-      <span class=\"emphasis\"><em>testsuite_files</em></span> file (described below) by running\n-      <span class=\"command\"><strong>make testsuite_files</strong></span> in the\n-      <span class=\"emphasis\"><em>libbuilddir/testsuite</em></span> directory, then edit the\n+      <code class=\"filename\">testsuite_files</code> file (described below) by running\n+      <strong class=\"userinput\"><code>make testsuite_files</code></strong> in the\n+      <code class=\"filename\"><em class=\"replaceable\"><code>libbuilddir</code></em>/testsuite</code>\n+      directory, then edit the\n       file to remove the tests you don't want and then run the testsuite as\n       normal, or you can specify a testsuite and a subset of tests in the\n-      RUNTESTFLAGS variable.\n+      <code class=\"varname\">RUNTESTFLAGS</code> variable.\n     </p><p>\n       For example, to run only the tests for containers you could use:\n-    </p><pre class=\"programlisting\">\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"conformance.exp=23_containers/*\"\n+\n+</p><pre class=\"programlisting\">\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"conformance.exp=23_containers/*\"\n </pre><p>\n-      When combining this with other options in RUNTESTFLAGS the\n-      <span class=\"emphasis\"><em>testsuite.exp=testfiles</em></span> options must come first.\n     </p><p>\n-      There are two ways to run on a simulator: set up DEJAGNU to point to a\n-      specially crafted site.exp, or pass down --target_board flags.\n+      When combining this with other options in <code class=\"varname\">RUNTESTFLAGS</code>\n+      the <code class=\"option\">testsuite.exp=testfiles</code> options must come first.\n+    </p><p>\n+      There are two ways to run on a simulator: set up <code class=\"envar\">DEJAGNU</code>\n+      to point to a specially crafted <code class=\"filename\">site.exp</code>,\n+      or pass down <code class=\"option\">--target_board</code> flags.\n     </p><p>\n     Example flags to pass down for various embedded builds are as follows:\n-    </p><pre class=\"programlisting\">\n-      --target=powerpc-eabism (libgloss/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n \n---target=calmrisc32 (libgloss/sid)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n+</p><pre class=\"programlisting\">\n+  --target=powerpc-eabisim <span class=\"emphasis\"><em>(libgloss/sim)</em></span>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n+\n+  --target=calmrisc32 <span class=\"emphasis\"><em>(libgloss/sid)</em></span>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n \n---target=xscale-elf (newlib/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n+  --target=xscale-elf <span class=\"emphasis\"><em>(newlib/sim)</em></span>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n </pre><p>\n+    </p><p>\n       Also, here is an example of how to run the libstdc++ testsuite\n       for a multilibed build directory with different ABI settings:\n-    </p><pre class=\"programlisting\">\n-make check-target-libstdc++-v3 RUNTESTFLAGS='--target_board \\\"unix{-mabi=32,,-mabi=64}\\\"'\n+\n+ </p><pre class=\"programlisting\">\n+    make check-target-libstdc++-v3 RUNTESTFLAGS='--target_board \\\"unix{-mabi=32,,-mabi=64}\\\"'\n </pre><p>\n+    </p><p>\n       You can run the tests with a compiler and library that have\n       already been installed.  Make sure that the compiler (e.g.,\n-      <code class=\"code\">g++</code>) is in your <code class=\"code\">PATH</code>.  If you are\n+      <span class=\"command\"><strong>g++</strong></span>) is in your <code class=\"envar\">PATH</code>.  If you are\n       using shared libraries, then you must also ensure that the\n       directory containing the shared version of libstdc++ is in your\n-      <code class=\"code\">LD_LIBRARY_PATH</code>, or equivalent.  If your GCC source\n-      tree is at <code class=\"code\">/path/to/gcc</code>, then you can run the tests\n-      as follows:\n-    </p><pre class=\"programlisting\">\n-runtest --tool libstdc++ --srcdir=/path/to/gcc/libstdc++-v3/testsuite\n+      <code class=\"envar\">LD_LIBRARY_PATH</code>, or\n+      <a class=\"link\" href=\"using_dynamic_or_shared.html#manual.intro.using.linkage.dynamic\" title=\"Finding Dynamic or Shared Libraries\">equivalent</a>.\n+      If your GCC source tree is at\n+      <code class=\"filename\">/path/to/gcc</code>,\n+      then you can run the tests as follows:\n+\n+</p><pre class=\"programlisting\">\n+    runtest --tool libstdc++ --srcdir=/path/to/gcc/libstdc++-v3/testsuite\n </pre><p>\n+    </p><p>\n       The testsuite will create a number of files in the directory in\n       which you run this command,.  Some of those files might use the\n       same name as files created by other testsuites (like the ones\n@@ -219,211 +227,324 @@\n     </p><p>\n       In addition, there are some testing options that are mostly of\n       interest to library maintainers and system integrators. As such,\n-      these tests may not work on all cpu and host combinations, and\n+      these tests may not work on all CPU and host combinations, and\n       may need to be executed in the\n-      <span class=\"emphasis\"><em>libbuilddir/testsuite</em></span> directory.  These\n+      <code class=\"filename\"><em class=\"replaceable\"><code>libbuilddir</code></em>/testsuite</code>\n+      directory.  These\n       options include, but are not necessarily limited to, the\n       following:\n-   </p><pre class=\"programlisting\">\n+    </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><strong class=\"userinput\"><code>\n    make testsuite_files\n-   </pre><p>\n+   </code></strong></span></dt><dd><p>\n     Five files are generated that determine what test files\n     are run. These files are:\n-  </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>\n-\t <span class=\"emphasis\"><em>testsuite_files</em></span>\n-       </p><p>\n+\n+    </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"> <code class=\"filename\">testsuite_files</code> </span></dt><dd>\n \t This is a list of all the test cases that will be run. Each\n \t test case is on a separate line, given with an absolute path\n-\t from the <span class=\"emphasis\"><em>libsrcdir/testsuite</em></span> directory.\n-       </p></li><li class=\"listitem\"><p>\n-\t <span class=\"emphasis\"><em>testsuite_files_interactive</em></span>\n-       </p><p>\n+\t from the\n+         <code class=\"filename\"><em class=\"replaceable\"><code>libsrcdir</code></em>/testsuite</code>\n+         directory.\n+      </dd><dt><span class=\"term\"> <code class=\"filename\">testsuite_files_interactive</code> </span></dt><dd>\n \t This is a list of all the interactive test cases, using the\n \t same format as the file list above. These tests are not run\n \t by default.\n-     </p></li><li class=\"listitem\"><p>\n-\t <span class=\"emphasis\"><em>testsuite_files_performance</em></span>\n-       </p><p>\n+      </dd><dt><span class=\"term\"> <code class=\"filename\">testsuite_files_performance</code> </span></dt><dd>\n \t This is a list of all the performance test cases, using the\n \t same format as the file list above. These tests are not run\n \t by default.\n-     </p></li><li class=\"listitem\"><p>\n-\t <span class=\"emphasis\"><em>testsuite_thread</em></span>\n-       </p><p>\n+      </dd><dt><span class=\"term\"> <code class=\"filename\">testsuite_thread</code> </span></dt><dd>\n \t This file indicates that the host system can run tests which\n \t involved multiple threads.\n-       </p></li><li class=\"listitem\"><p>\n-\t <span class=\"emphasis\"><em>testsuite_wchar_t</em></span>\n-       </p><p>\n-\t This file indicates that the host system can run the wchar_t\n-\t tests, and corresponds to the macro definition <code class=\"code\">\n-\t _GLIBCXX_USE_WCHAR_T</code> in the file c++config.h.\n-       </p></li></ul></div><pre class=\"programlisting\">\n+      </dd><dt><span class=\"term\"> <code class=\"filename\">testsuite_wchar_t</code> </span></dt><dd>\n+\t This file indicates that the host system can run the\n+         <code class=\"code\">wchar_t</code> tests, and corresponds to the macro\n+         definition <code class=\"literal\">_GLIBCXX_USE_WCHAR_T</code> in the\n+         file <code class=\"filename\">c++config.h</code>.\n+      </dd></dl></div><p>\n+  </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n    make check-abi\n-   </pre><p>\n+   </code></strong></span></dt><dd><p>\n      The library ABI can be tested. This involves testing the shared\n-     library against an ABI-defining previous version of symbol\n-     exports.\n-   </p><pre class=\"programlisting\">\n+     library against a baseline list of symbol exports that defines the\n+     previous version of the ABI. The tests require that no exported\n+     symbols are removed, no new symbols are added to the old symbol\n+     versions, and any new symbols have the latest symbol version.\n+     See <a class=\"link\" href=\"abi.html#abi.versioning\" title=\"Versioning\">Versioning</a> for more details\n+     of the ABI version history.\n+   </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n+   make new-abi-baseline\n+   </code></strong></span></dt><dd><p>\n+     Generate a new baseline set of symbols exported from the library\n+     (written to a file under\n+     <code class=\"filename\"><em class=\"replaceable\"><code>libsrcdir</code></em>/config/abi/post/<em class=\"replaceable\"><code>target</code></em>/</code>).\n+     A different baseline symbols file is needed for each architecture and\n+     is used by the <code class=\"literal\">check-abi</code> target described above.\n+     The files are usually re-generated by target maintainers for releases.\n+   </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n    make check-compile\n-  </pre><p>\n+  </code></strong></span></dt><dd><p>\n      This rule compiles, but does not link or execute, the\n-     <span class=\"emphasis\"><em>testsuite_files</em></span> test cases and displays the\n+     <code class=\"filename\">testsuite_files</code> test cases and displays the\n      output on stdout.\n-   </p><pre class=\"programlisting\">\n+   </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n    make check-performance\n-   </pre><p>\n+   </code></strong></span></dt><dd><p>\n      This rule runs through the\n-     <span class=\"emphasis\"><em>testsuite_files_performance</em></span> test cases and\n+     <code class=\"filename\">testsuite_files_performance</code> test cases and\n      collects information for performance analysis and can be used to\n      spot performance regressions. Various timing information is\n      collected, as well as number of hard page faults, and memory\n      used. This is not run by default, and the implementation is in\n      flux.\n-   </p><p>\n+   </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n+   make check-debug\n+   </code></strong></span></dt><dd><p>\n+     This rule runs through the test suite under the\n+     <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a017.\u00a0Debug Mode\">debug mode</a>.\n+   </p></dd><dt><span class=\"term\"><strong class=\"userinput\"><code>\n+   make check-parallel\n+   </code></strong></span></dt><dd><p>\n+     This rule runs through the test suite under the\n+     <a class=\"link\" href=\"parallel_mode.html\" title=\"Chapter\u00a018.\u00a0Parallel Mode\">parallel mode</a>.\n+   </p></dd></dl></div><p>\n       We are interested in any strange failures of the testsuite;\n       please email the main libstdc++ mailing list if you see\n       something odd or have questions.\n    </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.run.permutations\"></a>Permutations</h4></div></div></div><p>\n-      To run the libstdc++ test suite under the <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a017.\u00a0Debug Mode\">debug mode</a>, edit\n-      <code class=\"filename\">libstdc++-v3/scripts/testsuite_flags</code> to add the\n-      compile-time flag <code class=\"constant\">-D_GLIBCXX_DEBUG</code> to the\n-      result printed by the <code class=\"literal\">--build-cxx</code>\n+      The tests will be compiled with a set of default compiler flags defined\n+      by the\n+      <code class=\"filename\"><em class=\"replaceable\"><code>libbuildir</code></em>/scripts/testsuite_flags</code>\n+      file, as well as options specified in individual tests. You can run\n+      the tests with different options by adding them to the output of\n+      the <code class=\"option\">--cxxflags</code> option of that script, or by setting\n+      the <code class=\"varname\">CXXFLAGS</code> variable when running\n+      <span class=\"command\"><strong>make</strong></span>, or via options for the DejaGnu test framework\n+      (described below). The latter approach uses the\n+      <code class=\"option\">--target_board</code> option that was shown earlier.\n+      For example, to run the tests with <code class=\"option\">-O1 -D_GLIBCXX_ASSERT</code>\n+      you could use:\n+</p><pre class=\"programlisting\">    make RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</pre><p>\n+    </p><p>\n+      The <code class=\"option\">--target_board</code> option can also be used to run the\n+      tests multiple times in different variations. For example, to run the\n+      entire testsuite three times using <code class=\"option\">-O3</code> but with\n+      different <code class=\"option\">-std</code> options:\n+</p><pre class=\"programlisting\">    make 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</pre><p>\n+      N.B. that set of variations could also be written as\n+      <code class=\"literal\">unix/-O3\\\"{-std=gnu++98,-std=gnu++11,}\\\"</code> so that\n+      the third variation would use the default for <code class=\"option\">-std</code>\n+      (which is <code class=\"option\">-std=gnu++14</code> as of GCC 6).\n+    </p><p>\n+      To run the libstdc++ test suite under the\n+      <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a017.\u00a0Debug Mode\">debug mode</a>, use\n+      <strong class=\"userinput\"><code>make check-debug</code></strong>. Alternatively, edit\n+      <code class=\"filename\"><em class=\"replaceable\"><code>libbuildir</code></em>/scripts/testsuite_flags</code>\n+      to add the compile-time flag <code class=\"option\">-D_GLIBCXX_DEBUG</code> to the\n+      result printed by the <code class=\"option\">--cxxflags</code>\n       option. Additionally, add the\n-      <code class=\"constant\">-D_GLIBCXX_DEBUG_PEDANTIC</code> flag to turn on\n+      <code class=\"option\">-D_GLIBCXX_DEBUG_PEDANTIC</code> flag to turn on\n       pedantic checking. The libstdc++ test suite should produce\n-      precisely the same results under debug mode that it does under\n-      release mode: any deviation indicates an error in either the\n-      library or the test suite.\n+      the same results under debug mode that it does under release mode:\n+      any deviation indicates an error in either the library or the test suite.\n+      Note, however, that the number of tests that PASS may change, because\n+      some test cases are skipped in normal mode, and some are skipped in\n+      debug mode, as determined by the\n+      <code class=\"literal\">dg-require-<em class=\"replaceable\"><code>support</code></em></code>\n+      directives described below.\n     </p><p>\n       The <a class=\"link\" href=\"parallel_mode.html\" title=\"Chapter\u00a018.\u00a0Parallel Mode\">parallel\n-      mode</a> can be tested in much the same manner, substituting\n-      <code class=\"constant\">-D_GLIBCXX_PARALLEL</code> for\n-      <code class=\"constant\">-D_GLIBCXX_DEBUG</code> in the previous paragraph.\n+      mode</a> can be tested using\n+      <strong class=\"userinput\"><code>make check-parallel</code></strong>, or in much the same manner\n+      as the debug mode, substituting\n+      <code class=\"option\">-D_GLIBCXX_PARALLEL</code> for\n+      <code class=\"option\">-D_GLIBCXX_DEBUG</code> in the previous paragraph.\n     </p><p>\n-      Or, just run the testsuites with <code class=\"constant\">CXXFLAGS</code>\n-      set to <code class=\"constant\">-D_GLIBCXX_DEBUG</code> or\n-      <code class=\"constant\">-D_GLIBCXX_PARALLEL</code>.\n+      Or, just run the testsuite\n+      <code class=\"option\">-D_GLIBCXX_DEBUG</code> or <code class=\"option\">-D_GLIBCXX_PARALLEL</code>\n+      in <code class=\"varname\">CXXFLAGS</code> or <code class=\"varname\">RUNTESTFLAGS</code>.\n     </p></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.new_tests\"></a>Writing a new test case</h3></div></div></div><p>\n     The first step in making a new test case is to choose the correct\n     directory and file name, given the organization as previously\n     described.\n    </p><p>\n     All files are copyright the FSF, and GPL'd: this is very\n     important.  The first copyright year should correspond to the date\n-    the file was checked in to SVN.\n+    the file was checked in to version control. If a test is copied from\n+    an existing file it should retain the copyright years from the\n+    original file.\n    </p><p>\n-     As per the dejagnu instructions, always return 0 from main to\n-     indicate success.\n+     The DejaGnu instructions say to always return <code class=\"literal\">0</code>\n+     from <code class=\"function\">main</code> to indicate success. Strictly speaking\n+     this is redundant in C++, since returning from <code class=\"function\">main</code>\n+     is defined to return <code class=\"literal\">0</code>. Most tests still have an\n+     explicit return.\n    </p><p>\n    A bunch of utility functions and classes have already been\n    abstracted out into the testsuite utility library, <code class=\"code\">\n    libtestc++</code>. To use this functionality, just include the\n    appropriate header file: the library or specific object files will\n    automatically be linked in as part of the testsuite run.\n    </p><p>\n-   For a test that needs to take advantage of the dejagnu test\n-   harness, what follows below is a list of special keyword that\n-   harness uses. Basically, a test case contains dg-keywords (see\n-   dg.exp) indicating what to do and what kinds of behavior are to be\n-   expected.  New test cases should be written with the new style\n-   DejaGnu framework in mind.\n+    Tests that need to perform runtime checks should use the\n+    <code class=\"literal\">VERIFY</code> macro, defined in the\n+    <code class=\"filename\">&lt;testsuite_hooks.h&gt;</code> header.\n+    This usually expands to the standard <code class=\"literal\">assert</code> macro, but\n+    allows targets to define it to something different. In order to support\n+    the alternative expansions of <code class=\"literal\">VERIFY</code>, before any\n+    use of the macro there must be a variable called <code class=\"varname\">test</code>\n+    in scope, which is usually defined like so (the attribute avoids\n+    warnings about an unused variable):\n+    </p><pre class=\"programlisting\">\n+    bool test __attribute__((unused)) = true;\n+    </pre><p>\n    </p><p>\n-    To ease transition, here is the list of dg-keyword documentation\n-    lifted from dg.exp.\n-   </p><pre class=\"programlisting\">\n-# The currently supported options are:\n-#\n-# dg-prms-id N\n-#\tset prms_id to N\n-#\n-# dg-options \"options ...\" [{ target selector }]\n-#\tspecify special options to pass to the tool (eg: compiler)\n-#\n-# dg-do do-what-keyword [{ target/xfail selector }]\n-#\t`do-what-keyword' is tool specific and is passed unchanged to\n-#\t${tool}-dg-test.  An example is gcc where `keyword' can be any of:\n-#\tpreprocess|compile|assemble|link|run\n-#\tand will do one of: produce a .i, produce a .s, produce a .o,\n-#\tproduce an a.out, or produce an a.out and run it (the default is\n-#\tcompile).\n-#\n-# dg-error regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate an error message &lt;regexp&gt; is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\tLinenum=0 for general tool messages (eg: -V arg missing).\n-#\t\".\" means the current line.\n-#\n-# dg-warning regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a warning message &lt;regexp&gt; is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\n-# dg-bogus regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a bogus error message &lt;regexp&gt; use to occur here\n-#\t(the test fails if it does occur)\n-#\n-# dg-build regexp comment [{ target/xfail selector }]\n-#\tindicate the build use to fail for some reason\n-#\t(errors covered here include bad assembler generated, tool crashes,\n-#\tand link failures)\n-#\t(the test fails if it does occur)\n-#\n-# dg-excess-errors comment [{ target/xfail selector }]\n-#\tindicate excess errors are expected (any line)\n-#\t(this should only be used sparingly and temporarily)\n-#\n-# dg-output regexp [{ target selector }]\n-#\tindicate the expected output of the program is &lt;regexp&gt;\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\n-# dg-final { tcl code }\n-#\tadd some tcl code to be run at the end\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\t(unbalanced braces must be \\-escaped)\n-#\n-# \"{ target selector }\" is a list of expressions that determine whether the\n-# test succeeds or fails for a particular target, or in some cases whether the\n-# option applies for a particular target.  If the case of `dg-do' it specifies\n-# whether the test case is even attempted on the specified target.\n-#\n-# The target selector is always optional.  The format is one of:\n-#\n-# { xfail *-*-* ... } - the test is expected to fail for the given targets\n-# { target *-*-* ... } - the option only applies to the given targets\n-#\n-# At least one target must be specified, use *-*-* for \"all targets\".\n-# At present it is not possible to specify both `xfail' and `target'.\n-# \"native\" may be used in place of \"*-*-*\".\n+    The testsuite uses the DejaGnu framework to compile and run the tests.\n+    Test cases are normal C++ files which contain special directives in\n+    comments.  These directives look like <code class=\"literal\">{ dg-* ... }</code>\n+    and tell DejaGnu what to do and what kinds of behavior are to be expected\n+    for a test.  The core DejaGnu directives are documented in the\n+    <code class=\"filename\">dg.exp</code> file installed by DejaGnu.\n+    The GCC testsuites support additional directives\n+    as described in the GCC internals documentation, see <a class=\"link\" href=\"https://gcc.gnu.org/onlinedocs/gccint/Directives.html\" target=\"_top\">Syntax\n+    and Descriptions of test directives</a>. GCC also defines many <a class=\"link\" href=\"https://gcc.gnu.org/onlinedocs/gccint/Effective-Target-Keywords.html\" target=\"_top\">\n+    Keywords describing target attributes</a> (a.k.a effective targets)\n+    which can be used where a target <em class=\"replaceable\"><code>selector</code></em> can\n+    appear.\n+  </p><p>\n+  Some directives commonly used in the libstdc++ testsuite are:\n \n-Example 1: Testing compilation only\n+</p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"literal\">{ dg-do <em class=\"replaceable\"><code>do-what-keyword</code></em> [{ target/xfail <em class=\"replaceable\"><code>selector</code></em> }] }</code></span></dt><dd>Where <em class=\"replaceable\"><code>do-what-keyword</code></em> is usually\n+    one of <code class=\"literal\">run</code> (which is the default),\n+    <code class=\"literal\">compile</code>, or <code class=\"literal\">link</code>,\n+    and typical selectors are targets such as <code class=\"literal\">*-*-gnu*</code>\n+    or an effective target such as <code class=\"literal\">c++11</code>.\n+  </dd><dt><span class=\"term\"><code class=\"literal\">{ dg-require-<em class=\"replaceable\"><code>support</code></em> args }</code></span></dt><dd>Skip the test if the target does not provide the required support.\n+    See below for values of <em class=\"replaceable\"><code>support</code></em>.\n+  </dd><dt><span class=\"term\"><code class=\"literal\">{ dg-options <em class=\"replaceable\"><code>options</code></em> [{ target <em class=\"replaceable\"><code>selector</code></em> }] }</code></span></dt><dd></dd><dt><span class=\"term\"><code class=\"literal\">{ dg-error <em class=\"replaceable\"><code>regexp</code></em> [ <em class=\"replaceable\"><code>comment</code></em> [{ target/xfail <em class=\"replaceable\"><code>selector</code></em> } [<em class=\"replaceable\"><code>line</code></em>] ]] }</code></span></dt><dd></dd><dt><span class=\"term\"><code class=\"literal\">{ dg-excess-errors <em class=\"replaceable\"><code>comment</code></em> [{ target/xfail <em class=\"replaceable\"><code>selector</code></em> }] }</code></span></dt><dd></dd></dl></div><p>\n+  For full details of these and other directives see the main GCC DejaGnu\n+  documentation in the internals manual.\n+  </p><p>\n+    Test cases that use features of a particular C++ standard should specify\n+    the minimum required standard as an effective target:\n+</p><pre class=\"programlisting\">    // { dg-do run { target c++11 } }</pre><p>\n+    or\n+</p><pre class=\"programlisting\">    // { dg-require-effective-target c++11 }</pre><p>\n+    Specifying the minimum required standard for a test allows it to be run\n+    using later standards, so that we can verify that C++11 components still\n+    work correctly when compiled as C++14 or later. Specifying a minimum also\n+    means the test will be skipped if the test is compiled using\n+    an older standard, e.g. using\n+    <code class=\"option\">RUNTESTFLAGS=--target_board=unix/-std=gnu++98</code>.\n+  </p><p>\n+    It is possible to indicate that a test should <span class=\"emphasis\"><em>only</em></span>\n+    be run for a specific standard (and not later standards) using an\n+    effective target like <code class=\"literal\">c++11_only</code>. However, this means\n+    the test will be skipped by default (because the default mode is\n+    <code class=\"literal\">gnu++14</code>), and so will only run when\n+    <code class=\"option\">-std=gnu++11</code> or <code class=\"option\">-std=c++11</code> is used\n+    explicitly. For tests that require a specific standard it is better to\n+    use a <code class=\"literal\">dg-options</code> directive:\n+</p><pre class=\"programlisting\">    // { dg-options \"-std=gnu++11\" }</pre><p>\n+    This means the test will not get skipped by default, and will always use\n+    the specific standard dialect that the test requires. This isn't needed\n+    often, and most tests should use an effective target to specify a\n+    minimum standard instead, to allow them to be tested for all\n+    possible variations.\n+  </p><p>\n+    Similarly, tests which depend on a newer standard than the default\n+    should use <code class=\"literal\">dg-options</code> instead of an effective target,\n+    so that they are not skipped by default.\n+    For example, tests for C++17 features should use\n+</p><pre class=\"programlisting\">    // { dg-options \"-std=gnu++17\" }</pre><p>\n+    and not\n+</p><pre class=\"programlisting\">    // { dg-do run \"c++1z\" }</pre><p>\n+  </p><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"tests.dg.examples\"></a>Examples of Test Directives</h4></div></div></div><p>\n+Example 1: Testing compilation only:\n+</p><pre class=\"programlisting\">\n // { dg-do compile }\n+</pre><p>\n \n-Example 2: Testing for expected warnings on line 36, which all targets fail\n+Example 2: Testing for expected warnings on line 36, which all targets fail:\n+</p><pre class=\"programlisting\">\n // { dg-warning \"string literals\" \"\" { xfail *-*-* } 36 }\n+</pre><p>\n \n-Example 3: Testing for expected warnings on line 36\n+Example 3: Testing for expected warnings on line 36:\n+</p><pre class=\"programlisting\">\n // { dg-warning \"string literals\" \"\" { target *-*-* } 36 }\n+</pre><p>\n \n-Example 4: Testing for compilation errors on line 41\n+Example 4: Testing for compilation errors on line 41:\n+</p><pre class=\"programlisting\">\n // { dg-do compile }\n // { dg-error \"no match for\" \"\" { target *-*-* } 41 }\n+</pre><p>\n \n Example 5: Testing with special command line settings, or without the\n-use of pre-compiled headers, in particular the stdc++.h.gch file. Any\n-options here will override the DEFAULT_CXXFLAGS and PCH_CXXFLAGS set\n-up in the normal.exp file.\n+use of pre-compiled headers, in particular the\n+<code class=\"filename\">stdc++.h.gch</code> file. Any\n+options here will override the <code class=\"varname\">DEFAULT_CXXFLAGS</code> and\n+<code class=\"varname\">PCH_CXXFLAGS</code> set up in the <code class=\"filename\">normal.exp</code>\n+file:\n+</p><pre class=\"programlisting\">\n // { dg-options \"-O0\" { target *-*-* } }\n </pre><p>\n-    More examples can be found in the libstdc++-v3/testsuite/*/*.cc files.\n-   </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.harness\"></a>Test Harness and Utilities</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.harness.dejagnu\"></a>Dejagnu Harness Details</h4></div></div></div><p>\n+\n+Example 6: Compiling and linking a test only for C++14 and later, and only\n+if Debug Mode is active:\n+</p><pre class=\"programlisting\">\n+// { dg-do link { target c++14 } }\n+// { dg-require-debug-mode \"\" }\n+</pre><p>\n+\n+Example 7: Running a test only on x86 targets, and only for C++11 and later,\n+with specific options, and additional options for 32-bit x86:\n+</p><pre class=\"programlisting\">\n+// { dg-options \"-fstrict-enums\" }\n+// { dg-additional-options \"-march=i486\" { target ia32 } }\n+// { dg-do run { target { ia32 || x86_64-*-* } } }\n+// { dg-require-effective-target \"c++11\" }\n+</pre><p>\n+   </p><p>\n+    More examples can be found in the\n+    <code class=\"filename\">libstdc++-v3/testsuite/*/*.cc</code> files.\n+   </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"tests.dg.directives\"></a>Directives Specific to Libstdc++ Tests</h4></div></div></div><p>\n+    In addition to the usual <a class=\"link\" href=\"https://gcc.gnu.org/onlinedocs/gccint/Require-support.html\" target=\"_top\">Variants\n+    of <code class=\"literal\">dg-require-<em class=\"replaceable\"><code>support</code></em></code></a>\n+    several more directives are available for use in libstdc++ tests,\n+    including the following:\n+   </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><code class=\"literal\">dg-require-namedlocale</code> <em class=\"replaceable\"><code>name</code></em></span></dt><dd><p>The named locale must be available.\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-debug-mode \"\"</code></span></dt><dd><p>Skip the test if the Debug Mode is not active\n+\t(as determined by the <code class=\"literal\">_GLIBCXX_DEBUG</code> macro).\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-parallel-mode \"\"</code></span></dt><dd><p>Skip the test if the Parallel Mode is not active\n+\t(as determined by the <code class=\"literal\">_GLIBCXX_PARALLEL</code> macro).\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-profile-mode \"\"</code></span></dt><dd><p>Skip the test if the Profile Mode is not active\n+\t(as determined by the <code class=\"literal\">_GLIBCXX_PROFILE</code> macro).\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-normal-mode \"\"</code></span></dt><dd><p>Skip the test if any of Debug, Parallel or Profile\n+\tMode is active.\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-atomic-builtins \"\"</code></span></dt><dd><p>Skip the test if atomic operations on <span class=\"type\">bool</span>\n+      and <span class=\"type\">int</span> are not lock-free.\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-gthreads \"\"</code></span></dt><dd><p>Skip the test if the C++11 thread library is not\n+      supported, as determined by the <code class=\"literal\">_GLIBCXX_HAS_GTHREADS</code>\n+      macro.\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-gthreads-timed \"\"</code></span></dt><dd><p>Skip the test if C++11 timed mutexes are not supported,\n+      as determined by the <code class=\"literal\">_GLIBCXX_HAS_GTHREADS</code> and\n+      <code class=\"literal\">_GTHREAD_USE_MUTEX_TIMEDLOCK</code> macros.\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-string-conversions \"\"</code></span></dt><dd><p>Skip the test if the C++11 <code class=\"function\">to_string</code>\n+      and <code class=\"function\">stoi</code>, <code class=\"function\">stod</code> etc. functions\n+      are not fully supported (including wide character versions).\n+      </p></dd><dt><span class=\"term\"><code class=\"literal\">dg-require-filesystem-ts \"\"</code></span></dt><dd><p>Skip the test if the Filesystem TS is not supported.\n+      </p></dd></dl></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"test.harness\"></a>Test Harness and Utilities</h3></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"test.harness.dejagnu\"></a>DejaGnu Harness Details</h4></div></div></div><p>\n     Underlying details of testing for conformance and regressions are\n-    abstracted via the GNU Dejagnu package. This is similar to the\n+    abstracted via the GNU DejaGnu package. This is similar to the\n     rest of GCC.\n   </p><p>This is information for those looking at making changes to the testsuite\n-structure, and/or needing to trace dejagnu's actions with --verbose.  This\n-will not be useful to people who are \"merely\" adding new tests to the existing\n-structure.\n-</p><p>The first key point when working with dejagnu is the idea of a \"tool\".\n+structure, and/or needing to trace DejaGnu's actions with\n+<code class=\"option\">--verbose</code>.\n+This will not be useful to people who are \"merely\" adding new tests\n+to the existing structure.\n+</p><p>The first key point when working with DejaGnu is the idea of a \"tool\".\n Files, directories, and functions are all implicitly used when they are\n named after the tool in use.  Here, the tool will always be \"libstdc++\".\n </p><p>The <code class=\"code\">lib</code> subdir contains support routines.  The\n@@ -433,7 +554,7 @@\n </p><p>Some routines in <code class=\"code\">lib/libstdc++.exp</code> are callbacks, some are\n our own.  Callbacks must be prefixed with the name of the tool.  To easily\n distinguish the others, by convention our own routines are named \"v3-*\".\n-</p><p>The next key point when working with dejagnu is \"test files\".  Any\n+</p><p>The next key point when working with DejaGnu is \"test files\".  Any\n directory whose name starts with the tool name will be searched for test files.\n (We have only one.)  In those directories, any <code class=\"code\">.exp</code> file is\n considered a test file, and will be run in turn.  Our main test file is called"}, {"sha": "39a67a1f6e2a6da917f272c4c8125a1cd12fc9f6", "filename": "libstdc++-v3/doc/xml/manual/test.xml", "status": "modified", "additions": 266, "deletions": 96, "changes": 362, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b224dcf60dd8bd401501178f6118b8455ceeb1f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml?ref=0b224dcf60dd8bd401501178f6118b8455ceeb1f", "patch": "@@ -554,29 +554,65 @@ cat 27_io/objects/char/3_xin.in | a.out</programlisting>\n   <section xml:id=\"test.run.permutations\"><info><title>Permutations</title></info>\n     \n     <para>\n-      To run the libstdc++ test suite under the <link linkend=\"manual.ext.debug_mode\">debug mode</link>, edit\n-      <filename>libstdc++-v3/scripts/testsuite_flags</filename> to add the\n-      compile-time flag <constant>-D_GLIBCXX_DEBUG</constant> to the\n-      result printed by the <literal>--build-cxx</literal>\n+      The tests will be compiled with a set of default compiler flags defined\n+      by the\n+      <filename><replaceable>libbuildir</replaceable>/scripts/testsuite_flags</filename>\n+      file, as well as options specified in individual tests. You can run\n+      the tests with different options by adding them to the output of\n+      the <option>--cxxflags</option> option of that script, or by setting\n+      the <varname>CXXFLAGS</varname> variable when running\n+      <command>make</command>, or via options for the DejaGnu test framework\n+      (described below). The latter approach uses the\n+      <option>--target_board</option> option that was shown earlier.\n+      For example, to run the tests with <option>-O1 -D_GLIBCXX_ASSERT</option>\n+      you could use:\n+<programlisting>    make RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</programlisting>\n+    </para>\n+\n+    <para>\n+      The <option>--target_board</option> option can also be used to run the\n+      tests multiple times in different variations. For example, to run the\n+      entire testsuite three times using <option>-O3</option> but with\n+      different <option>-std</option> options:\n+<programlisting>    make 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</programlisting>\n+      N.B. that set of variations could also be written as\n+      <literal>unix/-O3\\\"{-std=gnu++98,-std=gnu++11,}\\\"</literal> so that\n+      the third variation would use the default for <option>-std</option>\n+      (which is <option>-std=gnu++14</option> as of GCC 6).\n+    </para>\n+\n+    <para>\n+      To run the libstdc++ test suite under the\n+      <link linkend=\"manual.ext.debug_mode\">debug mode</link>, use\n+      <userinput>make check-debug</userinput>. Alternatively, edit\n+      <filename><replaceable>libbuildir</replaceable>/scripts/testsuite_flags</filename>\n+      to add the compile-time flag <option>-D_GLIBCXX_DEBUG</option> to the\n+      result printed by the <option>--cxxflags</option>\n       option. Additionally, add the\n-      <constant>-D_GLIBCXX_DEBUG_PEDANTIC</constant> flag to turn on\n+      <option>-D_GLIBCXX_DEBUG_PEDANTIC</option> flag to turn on\n       pedantic checking. The libstdc++ test suite should produce\n-      precisely the same results under debug mode that it does under\n-      release mode: any deviation indicates an error in either the\n-      library or the test suite.\n+      the same results under debug mode that it does under release mode:\n+      any deviation indicates an error in either the library or the test suite.\n+      Note, however, that the number of tests that PASS may change, because\n+      some test cases are skipped in normal mode, and some are skipped in\n+      debug mode, as determined by the\n+      <literal>dg-require-<replaceable>support</replaceable></literal>\n+      directives described below.\n     </para>\n \n     <para>\n       The <link linkend=\"manual.ext.parallel_mode\">parallel\n-      mode</link> can be tested in much the same manner, substituting\n-      <constant>-D_GLIBCXX_PARALLEL</constant> for\n-      <constant>-D_GLIBCXX_DEBUG</constant> in the previous paragraph.\n+      mode</link> can be tested using\n+      <userinput>make check-parallel</userinput>, or in much the same manner\n+      as the debug mode, substituting\n+      <option>-D_GLIBCXX_PARALLEL</option> for\n+      <option>-D_GLIBCXX_DEBUG</option> in the previous paragraph.\n     </para>\n \n     <para>\n-      Or, just run the testsuites with <constant>CXXFLAGS</constant>\n-      set to <constant>-D_GLIBCXX_DEBUG</constant> or\n-      <constant>-D_GLIBCXX_PARALLEL</constant>.\n+      Or, just run the testsuite\n+      <option>-D_GLIBCXX_DEBUG</option> or <option>-D_GLIBCXX_PARALLEL</option>\n+      in <varname>CXXFLAGS</varname> or <varname>RUNTESTFLAGS</varname>.\n     </para>\n   </section>\n </section>\n@@ -593,12 +629,17 @@ cat 27_io/objects/char/3_xin.in | a.out</programlisting>\n    <para>\n     All files are copyright the FSF, and GPL'd: this is very\n     important.  The first copyright year should correspond to the date\n-    the file was checked in to SVN.\n+    the file was checked in to version control. If a test is copied from\n+    an existing file it should retain the copyright years from the\n+    original file.\n    </para>\n \n    <para>\n-     As per the dejagnu instructions, always return 0 from main to\n-     indicate success.\n+     The DejaGnu instructions say to always return <literal>0</literal>\n+     from <function>main</function> to indicate success. Strictly speaking\n+     this is redundant in C++, since returning from <function>main</function>\n+     is defined to return <literal>0</literal>. Most tests still have an\n+     explicit return.\n    </para>\n \n    <para>\n@@ -610,109 +651,238 @@ cat 27_io/objects/char/3_xin.in | a.out</programlisting>\n    </para>\n \n    <para>\n-   For a test that needs to take advantage of the dejagnu test\n-   harness, what follows below is a list of special keyword that\n-   harness uses. Basically, a test case contains dg-keywords (see\n-   dg.exp) indicating what to do and what kinds of behavior are to be\n-   expected.  New test cases should be written with the new style\n-   DejaGnu framework in mind.\n+    Tests that need to perform runtime checks should use the\n+    <literal>VERIFY</literal> macro, defined in the\n+    <filename class=\"headerfile\">&lt;testsuite_hooks.h&gt;</filename> header.\n+    This usually expands to the standard <literal>assert</literal> macro, but\n+    allows targets to define it to something different. In order to support\n+    the alternative expansions of <literal>VERIFY</literal>, before any\n+    use of the macro there must be a variable called <varname>test</varname>\n+    in scope, which is usually defined like so (the attribute avoids\n+    warnings about an unused variable):\n+    <programlisting>\n+    bool test __attribute__((unused)) = true;\n+    </programlisting>\n    </para>\n \n    <para>\n-    To ease transition, here is the list of dg-keyword documentation\n-    lifted from dg.exp.\n-   </para>\n+    The testsuite uses the DejaGnu framework to compile and run the tests.\n+    Test cases are normal C++ files which contain special directives in\n+    comments.  These directives look like <literal>{ dg-* ... }</literal>\n+    and tell DejaGnu what to do and what kinds of behavior are to be expected\n+    for a test.  The core DejaGnu directives are documented in the\n+    <filename>dg.exp</filename> file installed by DejaGnu.\n+    The GCC testsuites support additional directives\n+    as described in the GCC internals documentation, see <link\n+    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+    xlink:href=\"https://gcc.gnu.org/onlinedocs/gccint/Directives.html\">Syntax\n+    and Descriptions of test directives</link>. GCC also defines many <link\n+    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+    xlink:href=\"https://gcc.gnu.org/onlinedocs/gccint/Effective-Target-Keywords.html\">\n+    Keywords describing target attributes</link> (a.k.a effective targets)\n+    which can be used where a target <replaceable>selector</replaceable> can\n+    appear.\n+  </para>\n+\n+  <para>\n+  Some directives commonly used in the libstdc++ testsuite are:\n+\n+<variablelist>\n+<varlistentry>\n+  <term><literal>{ dg-do <replaceable>do-what-keyword</replaceable> [{ target/xfail <replaceable>selector</replaceable> }] }</literal></term>\n+  <listitem>Where <replaceable>do-what-keyword</replaceable> is usually\n+    one of <literal>run</literal> (which is the default),\n+    <literal>compile</literal>, or <literal>link</literal>,\n+    and typical selectors are targets such as <literal>*-*-gnu*</literal>\n+    or an effective target such as <literal>c++11</literal>.\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><literal>{ dg-require-<replaceable>support</replaceable> args }</literal></term>\n+  <listitem>Skip the test if the target does not provide the required support.\n+    See below for values of <replaceable>support</replaceable>.\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><literal>{ dg-options <replaceable>options</replaceable> [{ target <replaceable>selector</replaceable> }] }</literal></term>\n+</varlistentry>\n+<varlistentry>\n+  <term><literal>{ dg-error <replaceable>regexp</replaceable> [ <replaceable>comment</replaceable> [{ target/xfail <replaceable>selector</replaceable> } [<replaceable>line</replaceable>] ]] }</literal></term>\n+</varlistentry>\n+<varlistentry>\n+  <term><literal>{ dg-excess-errors <replaceable>comment</replaceable> [{ target/xfail <replaceable>selector</replaceable> }] }</literal></term>\n+</varlistentry>\n+</variablelist>\n+  For full details of these and other directives see the main GCC DejaGnu\n+  documentation in the internals manual.\n+  </para>\n+\n+  <para>\n+    Test cases that use features of a particular C++ standard should specify\n+    the minimum required standard as an effective target:\n+<programlisting>    // { dg-do run { target c++11 } }</programlisting>\n+    or\n+<programlisting>    // { dg-require-effective-target c++11 }</programlisting>\n+    Specifying the minimum required standard for a test allows it to be run\n+    using later standards, so that we can verify that C++11 components still\n+    work correctly when compiled as C++14 or later. Specifying a minimum also\n+    means the test will be skipped if the test is compiled using\n+    an older standard, e.g. using\n+    <option>RUNTESTFLAGS=--target_board=unix/-std=gnu++98</option>.\n+  </para>\n+\n+  <para>\n+    It is possible to indicate that a test should <emphasis>only</emphasis>\n+    be run for a specific standard (and not later standards) using an\n+    effective target like <literal>c++11_only</literal>. However, this means\n+    the test will be skipped by default (because the default mode is\n+    <literal>gnu++14</literal>), and so will only run when\n+    <option>-std=gnu++11</option> or <option>-std=c++11</option> is used\n+    explicitly. For tests that require a specific standard it is better to\n+    use a <literal>dg-options</literal> directive:\n+<programlisting>    // { dg-options \"-std=gnu++11\" }</programlisting>\n+    This means the test will not get skipped by default, and will always use\n+    the specific standard dialect that the test requires. This isn't needed\n+    often, and most tests should use an effective target to specify a\n+    minimum standard instead, to allow them to be tested for all\n+    possible variations.\n+  </para>\n+\n+  <para>\n+    Similarly, tests which depend on a newer standard than the default\n+    should use <literal>dg-options</literal> instead of an effective target,\n+    so that they are not skipped by default.\n+    For example, tests for C++17 features should use\n+<programlisting>    // { dg-options \"-std=gnu++17\" }</programlisting>\n+    and not\n+<programlisting>    // { dg-do run \"c++1z\" }</programlisting>\n+  </para>\n \n+<section xml:id=\"tests.dg.examples\"><info><title>Examples of Test Directives</title></info>\n+\n+   <para>\n+Example 1: Testing compilation only:\n <programlisting>\n-# The currently supported options are:\n-#\n-# dg-prms-id N\n-#\tset prms_id to N\n-#\n-# dg-options \"options ...\" [{ target selector }]\n-#\tspecify special options to pass to the tool (eg: compiler)\n-#\n-# dg-do do-what-keyword [{ target/xfail selector }]\n-#\t`do-what-keyword' is tool specific and is passed unchanged to\n-#\t${tool}-dg-test.  An example is gcc where `keyword' can be any of:\n-#\tpreprocess|compile|assemble|link|run\n-#\tand will do one of: produce a .i, produce a .s, produce a .o,\n-#\tproduce an a.out, or produce an a.out and run it (the default is\n-#\tcompile).\n-#\n-# dg-error regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate an error message &lt;regexp&gt; is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\tLinenum=0 for general tool messages (eg: -V arg missing).\n-#\t\".\" means the current line.\n-#\n-# dg-warning regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a warning message &lt;regexp&gt; is expected on this line\n-#\t(the test fails if it doesn't occur)\n-#\n-# dg-bogus regexp comment [{ target/xfail selector } [{.|0|linenum}]]\n-#\tindicate a bogus error message &lt;regexp&gt; use to occur here\n-#\t(the test fails if it does occur)\n-#\n-# dg-build regexp comment [{ target/xfail selector }]\n-#\tindicate the build use to fail for some reason\n-#\t(errors covered here include bad assembler generated, tool crashes,\n-#\tand link failures)\n-#\t(the test fails if it does occur)\n-#\n-# dg-excess-errors comment [{ target/xfail selector }]\n-#\tindicate excess errors are expected (any line)\n-#\t(this should only be used sparingly and temporarily)\n-#\n-# dg-output regexp [{ target selector }]\n-#\tindicate the expected output of the program is &lt;regexp&gt;\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\n-# dg-final { tcl code }\n-#\tadd some tcl code to be run at the end\n-#\t(there may be multiple occurrences of this, they are concatenated)\n-#\t(unbalanced braces must be \\-escaped)\n-#\n-# \"{ target selector }\" is a list of expressions that determine whether the\n-# test succeeds or fails for a particular target, or in some cases whether the\n-# option applies for a particular target.  If the case of `dg-do' it specifies\n-# whether the test case is even attempted on the specified target.\n-#\n-# The target selector is always optional.  The format is one of:\n-#\n-# { xfail *-*-* ... } - the test is expected to fail for the given targets\n-# { target *-*-* ... } - the option only applies to the given targets\n-#\n-# At least one target must be specified, use *-*-* for \"all targets\".\n-# At present it is not possible to specify both `xfail' and `target'.\n-# \"native\" may be used in place of \"*-*-*\".\n-\n-Example 1: Testing compilation only\n // { dg-do compile }\n+</programlisting>\n \n-Example 2: Testing for expected warnings on line 36, which all targets fail\n+Example 2: Testing for expected warnings on line 36, which all targets fail:\n+<programlisting>\n // { dg-warning \"string literals\" \"\" { xfail *-*-* } 36 }\n+</programlisting>\n \n-Example 3: Testing for expected warnings on line 36\n+Example 3: Testing for expected warnings on line 36:\n+<programlisting>\n // { dg-warning \"string literals\" \"\" { target *-*-* } 36 }\n+</programlisting>\n \n-Example 4: Testing for compilation errors on line 41\n+Example 4: Testing for compilation errors on line 41:\n+<programlisting>\n // { dg-do compile }\n // { dg-error \"no match for\" \"\" { target *-*-* } 41 }\n+</programlisting>\n \n Example 5: Testing with special command line settings, or without the\n-use of pre-compiled headers, in particular the stdc++.h.gch file. Any\n-options here will override the DEFAULT_CXXFLAGS and PCH_CXXFLAGS set\n-up in the normal.exp file.\n+use of pre-compiled headers, in particular the\n+<filename class=\"headerfile\">stdc++.h.gch</filename> file. Any\n+options here will override the <varname>DEFAULT_CXXFLAGS</varname> and\n+<varname>PCH_CXXFLAGS</varname> set up in the <filename>normal.exp</filename>\n+file:\n+<programlisting>\n // { dg-options \"-O0\" { target *-*-* } }\n </programlisting>\n \n+Example 6: Compiling and linking a test only for C++14 and later, and only\n+if Debug Mode is active:\n+<programlisting>\n+// { dg-do link { target c++14 } }\n+// { dg-require-debug-mode \"\" }\n+</programlisting>\n+\n+Example 7: Running a test only on x86 targets, and only for C++11 and later,\n+with specific options, and additional options for 32-bit x86:\n+<programlisting>\n+// { dg-options \"-fstrict-enums\" }\n+// { dg-additional-options \"-march=i486\" { target ia32 } }\n+// { dg-do run { target { ia32 || x86_64-*-* } } }\n+// { dg-require-effective-target \"c++11\" }\n+</programlisting>\n+   </para>\n+\n    <para>\n     More examples can be found in the\n     <filename>libstdc++-v3/testsuite/*/*.cc</filename> files.\n    </para>\n </section>\n \n+<section xml:id=\"tests.dg.directives\"><info><title>Directives Specific to Libstdc++ Tests</title></info>\n+\n+  <para>\n+    In addition to the usual <link\n+    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+    xlink:href=\"https://gcc.gnu.org/onlinedocs/gccint/Require-support.html\">Variants\n+    of <literal>dg-require-<replaceable>support</replaceable></literal></link>\n+    several more directives are available for use in libstdc++ tests,\n+    including the following:\n+   </para>\n+\n+  <variablelist>\n+    <varlistentry><term><literal>dg-require-namedlocale</literal> <replaceable>name</replaceable></term>\n+      <listitem><para>The named locale must be available.\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-debug-mode \"\"</literal></term>\n+      <listitem><para>Skip the test if the Debug Mode is not active\n+\t(as determined by the <literal>_GLIBCXX_DEBUG</literal> macro).\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-parallel-mode \"\"</literal></term>\n+      <listitem><para>Skip the test if the Parallel Mode is not active\n+\t(as determined by the <literal>_GLIBCXX_PARALLEL</literal> macro).\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-profile-mode \"\"</literal></term>\n+      <listitem><para>Skip the test if the Profile Mode is not active\n+\t(as determined by the <literal>_GLIBCXX_PROFILE</literal> macro).\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-normal-mode \"\"</literal></term>\n+      <listitem><para>Skip the test if any of Debug, Parallel or Profile\n+\tMode is active.\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-atomic-builtins \"\"</literal></term>\n+      <listitem><para>Skip the test if atomic operations on <type>bool</type>\n+      and <type>int</type> are not lock-free.\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-gthreads \"\"</literal></term>\n+      <listitem><para>Skip the test if the C++11 thread library is not\n+      supported, as determined by the <literal>_GLIBCXX_HAS_GTHREADS</literal>\n+      macro.\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-gthreads-timed \"\"</literal></term>\n+      <listitem><para>Skip the test if C++11 timed mutexes are not supported,\n+      as determined by the <literal>_GLIBCXX_HAS_GTHREADS</literal> and\n+      <literal>_GTHREAD_USE_MUTEX_TIMEDLOCK</literal> macros.\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-string-conversions \"\"</literal></term>\n+      <listitem><para>Skip the test if the C++11 <function>to_string</function>\n+      and <function>stoi</function>, <function>stod</function> etc. functions\n+      are not fully supported (including wide character versions).\n+      </para></listitem>\n+    </varlistentry>\n+    <varlistentry><term><literal>dg-require-filesystem-ts \"\"</literal></term>\n+      <listitem><para>Skip the test if the Filesystem TS is not supported.\n+      </para></listitem>\n+    </varlistentry>\n+  </variablelist>\n+</section>\n+\n+</section>\n+\n \n <section xml:id=\"test.harness\" xreflabel=\"Test Harness and Utilities\"><info><title>Test Harness and Utilities</title></info>\n "}]}