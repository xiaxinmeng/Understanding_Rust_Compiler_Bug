{"sha": "2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNkOTgwNGU4MGNmM2Q1ZmI5ZGI1YTZhOTIzYjNjYWE4NWIyM2I2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-03-24T18:26:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-24T18:26:48Z"}, "message": "sse.md (mov<mode>): Merge with movv2sf expander using MMXMODE mode iterator.\n\n\t* config/i386/sse.md (mov<mode>): Merge with movv2sf expander\n\tusing MMXMODE mode iterator.\n\t(*move<mode>_internal): Merge with *movv2sf_internal and\n\t*movv2sf_internal_rex64 using MMXMODE mode iterator.\n\nFrom-SVN: r197021", "tree": {"sha": "acd929ef5e612bb09576d499b4f551e541e9e37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd929ef5e612bb09576d499b4f551e541e9e37c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a73421c460287b7a1b9f0c35d9fe7eacd0e51832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73421c460287b7a1b9f0c35d9fe7eacd0e51832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73421c460287b7a1b9f0c35d9fe7eacd0e51832"}], "stats": {"total": 148, "additions": 21, "deletions": 127}, "files": [{"sha": "b5025ac059a43264de2b309b6b48bbf1adeb46b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "patch": "@@ -1,3 +1,10 @@\n+2013-03-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (mov<mode>): Merge with movv2sf expander\n+\tusing MMXMODE mode iterator.\n+\t(*move<mode>_internal): Merge with *movv2sf_internal and\n+\t*movv2sf_internal_rex64 using MMXMODE mode iterator.\n+\n 2013-03-23  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gcse.c (oprs_unchanged_p): Respect flag_gcse_lm."}, {"sha": "5a72fafc95a1a8e460bec4299c3d703861106834", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 14, "deletions": 127, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=2cd9804e80cf3d5fb9db5a6a923b3caa85b23b68", "patch": "@@ -68,18 +68,18 @@\n ;; This is essential for maintaining stable calling conventions.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\")\n-\t(match_operand:MMXMODEI8 1 \"nonimmediate_operand\"))]\n+  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\")\n+\t(match_operand:MMXMODE 1 \"nonimmediate_operand\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n   DONE;\n })\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n+  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\"\n \t \"=r ,o ,r,r ,m ,!?y,!y,!?y,m  ,x,x,x,m,*x,*x,*x,m ,r ,Yi,!Ym,*Yi\")\n-\t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n+\t(match_operand:MMXMODE 1 \"vector_move_operand\"\n \t \"rCo,rC,C,rm,rC,C  ,!y,m  ,!?y,C,x,m,x,C ,*x,m ,*x,Yi,r ,*Yi,!Ym\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -129,8 +129,9 @@\n \t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \n \tcase MODE_V2SF:\n-\t  gcc_assert (!TARGET_AVX);\n-\t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\t  if (TARGET_AVX && REG_P (operands[0]))\n+\t    return \"vmovlps\\t{%1, %0, %0|%0, %0, %1}\";\n+\t  return \"%vmovlps\\t{%1, %0|%0, %1}\";\n \tcase MODE_V4SF:\n \t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \n@@ -181,7 +182,9 @@\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"SI\")\n \t    (eq_attr \"alternative\" \"9,10,13,14\")\n-\t      (cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t      (cond [(match_test \"<MODE>mode == V2SFmode\")\n+\t\t       (const_string \"V4SF\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n \t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t       (const_string \"V4SF\")\n \t\t     (match_test \"TARGET_AVX\")\n@@ -192,134 +195,18 @@\n \t\t    (const_string \"TI\"))\n \n \t    (and (eq_attr \"alternative\" \"11,12,15,16\")\n-\t\t (not (match_test \"TARGET_SSE2\")))\n+\t    \t (ior (match_test \"<MODE>mode == V2SFmode\")\n+\t\t      (not (match_test \"TARGET_SSE2\"))))\n \t      (const_string \"V2SF\")\n \t   ]\n \t   (const_string \"DI\")))])\n \n-(define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\")\n-\t(match_operand:V2SF 1 \"nonimmediate_operand\"))]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_vector_move (V2SFmode, operands);\n-  DONE;\n-})\n-\n-;; movd instead of movq is required to handle broken assemblers.\n-(define_insn \"*movv2sf_internal_rex64\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=rm,r,!?y,!y,!?y,m  ,!y,*x,x,x,x,m,r ,Yi\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"Cr ,m,C  ,!y,m  ,!?y,*x,!y,C,x,m,x,Yi,r\"))]\n-  \"TARGET_64BIT && TARGET_MMX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    mov{q}\\t{%1, %0|%0, %1}\n-    mov{q}\\t{%1, %0|%0, %1}\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    %vxorps\\t%0, %d0\n-    %vmovaps\\t{%1, %0|%0, %1}\n-    %vmovlps\\t{%1, %d0|%d0, %1}\n-    %vmovlps\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\n-    %vmovd\\t{%1, %0|%0, %1}\"\n-  [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0,1\")\n-\t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"2\")\n-\t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"3,4,5\")\n-\t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"6,7\")\n-\t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"9\")\n-\t      (const_string \"sselog1\")\n-\t   ]\n-\t   (const_string \"ssemov\")))\n-   (set (attr \"unit\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7\")\n-       (const_string \"mmx\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_rep\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"length_vex\")\n-     (if_then_else\n-       (and (eq_attr \"alternative\" \"12,13\")\n-\t    (match_test \"TARGET_AVX\"))\n-       (const_string \"4\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12,13\")\n-       (const_string \"maybe_vex\")\n-       (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n-\n-(define_insn \"*movv2sf_internal\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t \"=!?y,!y,!?y,m  ,!y,*x,*x,*x,*x,m ,r  ,m\")\n-        (match_operand:V2SF 1 \"vector_move_operand\"\n-\t \"C   ,!y,m  ,!?y,*x,!y,C ,*x,m ,*x,irm,r\"))]\n-  \"!TARGET_64BIT && TARGET_MMX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-    pxor\\t%0, %0\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movq\\t{%1, %0|%0, %1}\n-    movdq2q\\t{%1, %0|%0, %1}\n-    movq2dq\\t{%1, %0|%0, %1}\n-    %vxorps\\t%0, %d0\n-    %vmovaps\\t{%1, %0|%0, %1}\n-    %vmovlps\\t{%1, %d0|%d0, %1}\n-    %vmovlps\\t{%1, %0|%0, %1}\n-    #\n-    #\"\n-  [(set (attr \"isa\")\n-     (if_then_else (eq_attr \"alternative\" \"4,5\")\n-       (const_string \"sse2\")\n-       (const_string \"*\")))\n-   (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0\")\n-\t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"1,2,3\")\n-\t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"4,5\")\n-\t      (const_string \"ssecvt\")\n-\t    (eq_attr \"alternative\" \"6\")\n-\t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"10,11\")\n-\t      (const_string \"multi\")\n-\t   ]\n-\t   (const_string \"ssemov\")))\n-   (set (attr \"unit\")\n-     (if_then_else (eq_attr \"alternative\" \"4,5\")\n-       (const_string \"mmx\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix_rep\")\n-     (if_then_else (eq_attr \"alternative\" \"4,5\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"6,7,8,9\")\n-       (const_string \"maybe_vex\")\n-       (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n-\n-;; %%% This multiword shite has got to go.\n (define_split\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\")\n         (match_operand:MMXMODE 1 \"general_operand\"))]\n   \"!TARGET_64BIT && reload_completed\n-   && !(MMX_REG_P (operands[0]) || SSE_REG_P (operands[0])\n-\t|| MMX_REG_P (operands[1]) || SSE_REG_P (operands[1]))\"\n+   && !(MMX_REG_P (operands[0]) || SSE_REG_P (operands[0]))\n+   && !(MMX_REG_P (operands[1]) || SSE_REG_P (operands[1]))\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n "}]}