{"sha": "9cb00eb15a97e52eff396db89cefac6a9297604f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiMDBlYjE1YTk3ZTUyZWZmMzk2ZGI4OWNlZmFjNmE5Mjk3NjA0Zg==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2015-09-28T05:26:34Z"}, "committer": {"name": "Daniel Hellstrom", "email": "danielh@gcc.gnu.org", "date": "2015-09-28T05:26:34Z"}, "message": "Do not use floating point registers when compiling with -msoft-float for SPARC\n\n2015-09-28  Daniel Cederman  <cederman@gaisler.com>\n\nDo not use floating point registers when compiling with -msoft-float for SPARC\n\n__builtin_apply* and __builtin_return accesses the floating point registers on\nSPARC even when compiling with -msoft-float.\n\ngcc/\n\t* config/sparc/sparc.c (sparc_function_value_regno_p): Do not return\n\ttrue on %f0 for a target without FPU.\n\t* config/sparc/sparc.md (untyped_call): Do not save %f0 for a target\n\twithout FPU.\n\t(untyped_return): Do not load %f0 for a target without FPU.\n\nFrom-SVN: r228183", "tree": {"sha": "e019dafb4bb506b32cd7ed7d3a9f7b94e73e6798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e019dafb4bb506b32cd7ed7d3a9f7b94e73e6798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cb00eb15a97e52eff396db89cefac6a9297604f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb00eb15a97e52eff396db89cefac6a9297604f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb00eb15a97e52eff396db89cefac6a9297604f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb00eb15a97e52eff396db89cefac6a9297604f/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65629a24068d45300b73bc54faf3f02269e428ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65629a24068d45300b73bc54faf3f02269e428ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65629a24068d45300b73bc54faf3f02269e428ff"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "6eb3032aeef125a6ef57e5f29169812c372ce1b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cb00eb15a97e52eff396db89cefac6a9297604f", "patch": "@@ -1,3 +1,11 @@\n+2015-09-28  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.c (sparc_function_value_regno_p): Do not return\n+\ttrue on %f0 for a target without FPU.\n+\t* config/sparc/sparc.md (untyped_call): Do not save %f0 for a target\n+\twithout FPU.\n+\t(untyped_return): Do not load %f0 for a target without FPU.\n+\n 2015-09-28  Andrew Pinski  <apinski@cavium.com>    \n \n \t* config/aarch64/aarch64.md (prefetch):"}, {"sha": "43f0170ecc15fa81dacd27932cff3d3b2c580252", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9cb00eb15a97e52eff396db89cefac6a9297604f", "patch": "@@ -7395,7 +7395,7 @@ sparc_libcall_value (machine_mode mode,\n static bool\n sparc_function_value_regno_p (const unsigned int regno)\n {\n-  return (regno == 8 || regno == 32);\n+  return (regno == 8 || (TARGET_FPU && regno == 32));\n }\n \n /* Do what is necessary for `va_start'.  We look at the current function"}, {"sha": "e01db515f814cfcb9a614870434e3f3ec86466b8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb00eb15a97e52eff396db89cefac6a9297604f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=9cb00eb15a97e52eff396db89cefac6a9297604f", "patch": "@@ -6398,7 +6398,6 @@\n   \"\"\n {\n   rtx valreg1 = gen_rtx_REG (DImode, 8);\n-  rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n   rtx result = operands[1];\n \n   /* Pass constm1 to indicate that it may expect a structure value, but\n@@ -6407,8 +6406,12 @@\n \n   /* Save the function value registers.  */\n   emit_move_insn (adjust_address (result, DImode, 0), valreg1);\n-  emit_move_insn (adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8),\n-\t\t\t\t  valreg2);\n+  if (TARGET_FPU)\n+    {\n+      rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n+      emit_move_insn (adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8),\n+                      valreg2);\n+    }\n \n   /* The optimizer does not know that the call sets the function value\n      registers we stored in the result block.  We avoid problems by\n@@ -6620,7 +6623,6 @@\n   \"\"\n {\n   rtx valreg1 = gen_rtx_REG (DImode, 24);\n-  rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n   rtx result = operands[0];\n \n   if (! TARGET_ARCH64)\n@@ -6637,14 +6639,18 @@\n       emit_insn (gen_update_return (rtnreg, value));\n     }\n \n-  /* Reload the function value registers.  */\n+  /* Reload the function value registers.\n+     Put USE insns before the return.  */\n   emit_move_insn (valreg1, adjust_address (result, DImode, 0));\n-  emit_move_insn (valreg2,\n-\t\t  adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8));\n-\n-  /* Put USE insns before the return.  */\n   emit_use (valreg1);\n-  emit_use (valreg2);\n+\n+  if (TARGET_FPU)\n+    {\n+      rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n+      emit_move_insn (valreg2,\n+\t\t      adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8));\n+      emit_use (valreg2);\n+    }\n \n   /* Construct the return.  */\n   expand_naked_return ();"}]}