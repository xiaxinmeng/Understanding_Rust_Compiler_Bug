{"sha": "df8ceba6a23ea326444348b922ef0550f9239107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4Y2ViYTZhMjNlYTMyNjQ0NDM0OGI5MjJlZjA1NTBmOTIzOTEwNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2017-12-08T04:23:00Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2017-12-08T04:23:00Z"}, "message": "nios2.c (nios2_symbolic_constant_allowed): Rename to...\n\n2017-12-07  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2.c (nios2_symbolic_constant_allowed):\n\tRename to...\n\t(nios2_large_constant_allowed): ...this.  Adjust uses.\n\t(nios2_plus_symbolic_constant_p): Rename to...\n\t(nios2_plus_large_constant_p): ...this.  Adjust uses.\n\t(nios2_legitimate_address_p): Correct CONST_INT handling.\n\t(nios2_symbolic_memory_operand_p): Rename to...\n\t(nios2_large_constant_memory_operand_p): ...this.  Adjust uses.\n\t(nios2_large_constant_p): Check for large constant integers too.\n\t(nios2_split_large_constant): Handle constant integers.\n\t(nios2_split_symbolic_memory_operand): Rename to...\n\t(nios2_split_large_constant_memory_operand): ...this.  Adjust uses.\n\t(nios2_legitimize_constant_address): Handle constant integers.\n\t(r0rel_constant_p): Handle small constant integers.\n\t(nios2_print_operand_address): Handle r0-relative integer addresses.\n\t* config/nios2/nios2-protos.h: Adjust for renamed functions.\n\t* config/nios2/nios2.md: Adjust for renamed functions.\n\nFrom-SVN: r255492", "tree": {"sha": "91b675f96614fe5d29161e867aff8b5ea29f635d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91b675f96614fe5d29161e867aff8b5ea29f635d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8ceba6a23ea326444348b922ef0550f9239107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8ceba6a23ea326444348b922ef0550f9239107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8ceba6a23ea326444348b922ef0550f9239107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8ceba6a23ea326444348b922ef0550f9239107/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cb0725cdbef47a7486629b7933f51a29a591781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb0725cdbef47a7486629b7933f51a29a591781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb0725cdbef47a7486629b7933f51a29a591781"}], "stats": {"total": 185, "additions": 128, "deletions": 57}, "files": [{"sha": "39a6f94c4adbad4e7cb01feba7b1a1284389e860", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df8ceba6a23ea326444348b922ef0550f9239107", "patch": "@@ -1,3 +1,23 @@\n+2017-12-07  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2.c (nios2_symbolic_constant_allowed):\n+\tRename to...\n+\t(nios2_large_constant_allowed): ...this.  Adjust uses.\n+\t(nios2_plus_symbolic_constant_p): Rename to...\n+\t(nios2_plus_large_constant_p): ...this.  Adjust uses.\n+\t(nios2_legitimate_address_p): Correct CONST_INT handling.\n+\t(nios2_symbolic_memory_operand_p): Rename to...\n+\t(nios2_large_constant_memory_operand_p): ...this.  Adjust uses.\n+\t(nios2_large_constant_p): Check for large constant integers too.\n+\t(nios2_split_large_constant): Handle constant integers.\n+\t(nios2_split_symbolic_memory_operand): Rename to...\n+\t(nios2_split_large_constant_memory_operand): ...this.  Adjust uses.\n+\t(nios2_legitimize_constant_address): Handle constant integers.\n+\t(r0rel_constant_p): Handle small constant integers.\n+\t(nios2_print_operand_address): Handle r0-relative integer addresses.\n+\t* config/nios2/nios2-protos.h: Adjust for renamed functions.\n+\t* config/nios2/nios2.md: Adjust for renamed functions.\n+\n 2017-12-07  Andrew Waterman  <andrew@sifive.com>\n \n \t* config/riscv/riscv.c (TARGET_ASM_SELECT_SECTION): New define."}, {"sha": "578750c53d5dac28292feb84f677a95cefac127d", "filename": "gcc/config/nios2/nios2-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-protos.h?ref=df8ceba6a23ea326444348b922ef0550f9239107", "patch": "@@ -31,10 +31,10 @@ extern void nios2_function_profiler (FILE *, int);\n \n #ifdef RTX_CODE\n extern bool nios2_large_constant_p (rtx);\n-extern bool nios2_symbolic_memory_operand_p (rtx);\n+extern bool nios2_large_constant_memory_operand_p (rtx);\n \n extern rtx nios2_split_large_constant (rtx, rtx);\n-extern rtx nios2_split_symbolic_memory_operand (rtx);\n+extern rtx nios2_split_large_constant_memory_operand (rtx);\n extern bool nios2_emit_move_sequence (rtx *, machine_mode);\n extern void nios2_emit_expensive_div (rtx *, machine_mode);\n extern void nios2_adjust_call_address (rtx *, rtx);"}, {"sha": "e0df9c5b8b442a7cd38b3ba12d914f124c863779", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 79, "deletions": 30, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=df8ceba6a23ea326444348b922ef0550f9239107", "patch": "@@ -2009,12 +2009,13 @@ nios2_validate_compare (machine_mode mode, rtx *cmp, rtx *op1, rtx *op2)\n \n /* Addressing modes and constants.  */\n \n-/* Symbolic constants are split into high/lo_sum pairs during the \n-   split1 pass.  After that, they are not considered legitimate addresses.\n+/* Symbol references and other 32-bit constants are split into\n+   high/lo_sum pairs during the split1 pass.  After that, they are not\n+   considered legitimate addresses.\n    This function returns true if in a pre-split context where these\n    constants are allowed.  */\n static bool\n-nios2_symbolic_constant_allowed (void)\n+nios2_large_constant_allowed (void)\n {\n   /* The reload_completed check is for the benefit of\n      nios2_asm_output_mi_thunk and perhaps other places that try to\n@@ -2046,13 +2047,13 @@ nios2_symbolic_constant_p (rtx x)\n }\n \n /* Return true if X is an expression of the form \n-   (PLUS reg symbolic_constant).  */\n+   (PLUS reg large_constant).  */\n static bool\n-nios2_plus_symbolic_constant_p (rtx x)\n+nios2_plus_large_constant_p (rtx x)\n {\n   return (GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n-\t  && nios2_symbolic_constant_p (XEXP (x, 1)));\n+\t  && nios2_large_constant_p (XEXP (x, 1)));\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P.  */\n@@ -2122,7 +2123,7 @@ nios2_valid_addr_expr_p (rtx base, rtx offset, bool strict_p)\n \t  && nios2_regno_ok_for_base_p (REGNO (base), strict_p)\n \t  && (offset == NULL_RTX\n \t      || nios2_valid_addr_offset_p (offset)\n-\t      || (nios2_symbolic_constant_allowed () \n+\t      || (nios2_large_constant_allowed () \n \t\t  && nios2_symbolic_constant_p (offset))\n \t      || nios2_unspec_reloc_p (offset)));\n }\n@@ -2146,12 +2147,16 @@ nios2_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n \n       /* Else, fall through.  */\n     case LABEL_REF:\n-      if (nios2_symbolic_constant_allowed () \n+      if (nios2_large_constant_allowed () \n \t  && nios2_symbolic_constant_p (operand))\n \treturn true;\n+      return false;\n \n-      /* Else, fall through.  */\n     case CONST_INT:\n+      if (r0rel_constant_p (operand))\n+\treturn true;\n+      return nios2_large_constant_allowed ();\n+\n     case CONST_DOUBLE:\n       return false;\n \n@@ -2213,9 +2218,9 @@ nios2_address_cost (rtx address,\n \t\t    addr_space_t as ATTRIBUTE_UNUSED, \n \t\t    bool speed ATTRIBUTE_UNUSED)\n {\n-  if (nios2_plus_symbolic_constant_p (address))\n+  if (nios2_plus_large_constant_p (address))\n     return COSTS_N_INSNS (1);\n-  if (nios2_symbolic_constant_p (address))\n+  if (nios2_large_constant_p (address))\n     {\n       if (GET_CODE (address) == CONST)\n \treturn COSTS_N_INSNS (1);\n@@ -2225,19 +2230,19 @@ nios2_address_cost (rtx address,\n   return COSTS_N_INSNS (0);\n }\n \n-/* Return true if X is a MEM whose address expression involves a symbolic\n+/* Return true if X is a MEM whose address expression involves a large (32-bit)\n    constant.  */\n bool\n-nios2_symbolic_memory_operand_p (rtx x)\n+nios2_large_constant_memory_operand_p (rtx x)\n {\n   rtx addr;\n \n   if (GET_CODE (x) != MEM)\n     return false;\n   addr = XEXP (x, 0);\n \n-  return (nios2_symbolic_constant_p (addr)\n-\t  || nios2_plus_symbolic_constant_p (addr));\n+  return (nios2_large_constant_p (addr)\n+\t  || nios2_plus_large_constant_p (addr));\n }\n \n \n@@ -2247,15 +2252,36 @@ bool\n nios2_large_constant_p (rtx x)\n {\n   return (nios2_symbolic_constant_p (x)\n-\t  || nios2_large_unspec_reloc_p (x));\n+\t  || nios2_large_unspec_reloc_p (x)\n+\t  || (CONST_INT_P (x) && !SMALL_INT (INTVAL (x))));\n }\n \n /* Given an RTX X that satisfies nios2_large_constant_p, split it into\n    high and lo_sum parts using TEMP as a scratch register.  Emit the high \n-   instruction and return the lo_sum expression.  */\n+   instruction and return the lo_sum expression.  \n+   Also handle special cases involving constant integers.  */\n rtx\n nios2_split_large_constant (rtx x, rtx temp)\n {\n+  if (CONST_INT_P (x))\n+    {\n+      HOST_WIDE_INT val = INTVAL (x);\n+      if (SMALL_INT (val))\n+\treturn x;\n+      else if (SMALL_INT_UNSIGNED (val) || UPPER16_INT (val))\n+\t{\n+\t  emit_move_insn (temp, x);\n+\t  return temp;\n+\t}\n+      else\n+\t{\n+\t  HOST_WIDE_INT high = (val + 0x8000) & ~0xffff;\n+\t  HOST_WIDE_INT low = val - high;\n+\t  emit_move_insn (temp, gen_int_mode (high, Pmode));\n+\t  return gen_rtx_PLUS (Pmode, temp, gen_int_mode (low, Pmode));\n+\t}\n+    }\n+  \n   emit_insn (gen_rtx_SET (temp, gen_rtx_HIGH (Pmode, copy_rtx (x))));\n   return gen_rtx_LO_SUM (Pmode, temp, copy_rtx (x));\n }\n@@ -2278,16 +2304,17 @@ nios2_split_plus_large_constant (rtx op0, rtx op1)\n   return gen_rtx_LO_SUM (Pmode, temp, copy_rtx (op1));\n }\n \n-/* Given a MEM OP with an address that includes a splittable symbol,\n-   emit some instructions to do the split and return a new MEM.  */\n+/* Given a MEM OP with an address that includes a splittable symbol or\n+   other large constant, emit some instructions to do the split and \n+   return a new MEM.  */\n rtx\n-nios2_split_symbolic_memory_operand (rtx op)\n+nios2_split_large_constant_memory_operand (rtx op)\n {\n   rtx addr = XEXP (op, 0);\n \n-  if (nios2_symbolic_constant_p (addr))\n+  if (nios2_large_constant_p (addr))\n     addr = nios2_split_large_constant (addr, gen_reg_rtx (Pmode));\n-  else if (nios2_plus_symbolic_constant_p (addr))\n+  else if (nios2_plus_large_constant_p (addr))\n     addr = nios2_split_plus_large_constant (XEXP (addr, 0), XEXP (addr, 1));\n   else\n     gcc_unreachable ();\n@@ -2533,9 +2560,19 @@ nios2_legitimize_constant_address (rtx addr)\n     base = nios2_legitimize_tls_address (base);\n   else if (flag_pic)\n     base = nios2_load_pic_address (base, UNSPEC_PIC_SYM, NULL_RTX);\n-  else if (!nios2_symbolic_constant_allowed () \n+  else if (!nios2_large_constant_allowed () \n \t   && nios2_symbolic_constant_p (addr))\n     return nios2_split_large_constant (addr, gen_reg_rtx (Pmode));\n+  else if (CONST_INT_P (addr))\n+    {\n+      HOST_WIDE_INT val = INTVAL (addr);\n+      if (SMALL_INT (val))\n+\t/* Use r0-relative addressing.  */\n+\treturn addr;\n+      else if (!nios2_large_constant_allowed ())\n+\t/* Split into high/lo pair.  */\n+\treturn nios2_split_large_constant (addr, gen_reg_rtx (Pmode));\n+    }\n   else\n     return addr;\n \n@@ -2579,7 +2616,7 @@ nios2_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   /* We may need to split symbolic constants now.  */\n   else if (nios2_symbolic_constant_p (op1))\n     {\n-      if (nios2_symbolic_constant_allowed ())\n+      if (nios2_large_constant_allowed ())\n \treturn gen_rtx_PLUS (Pmode, force_reg (Pmode, op0), copy_rtx (op1));\n       else\n \treturn nios2_split_plus_large_constant (op0, op1);\n@@ -2689,7 +2726,7 @@ nios2_emit_move_sequence (rtx *operands, machine_mode mode)\n \t   representing a 32-bit offset.  We split the former \n \t   only conditionally and the latter always.  */\n \t{\n-\t  if (!nios2_symbolic_constant_allowed () \n+\t  if (!nios2_large_constant_allowed () \n \t      || nios2_large_unspec_reloc_p (from))\n \t    {\n \t      rtx lo = nios2_split_large_constant (from, to);\n@@ -3042,6 +3079,9 @@ r0rel_constant_p (rtx op)\n   else if (GET_CODE (op) == CONST\n            && GET_CODE (XEXP (op, 0)) == PLUS)\n     return r0rel_constant_p (XEXP (XEXP (op, 0), 0));\n+  else if (GET_CODE (op) == CONST_INT\n+\t   && SMALL_INT (INTVAL (op)))\n+    return true;\n \n   return false;\n }\n@@ -3112,11 +3152,20 @@ nios2_print_operand_address (FILE *file, machine_mode mode, rtx op)\n         }\n       else if (r0rel_constant_p (op))\n         {\n-          fprintf (file, \"%%lo(\");\n-          output_addr_const (file, op);\n-          fprintf (file, \")(r0)\");\n-          return;\n-        }\n+\t  if (CONST_INT_P (op))\n+\t    {\n+\t      output_addr_const (file, op);\n+\t      fprintf (file, \"(r0)\");\n+\t      return;\n+\t    }\n+\t  else\n+\t    {\n+\t      fprintf (file, \"%%lo(\");\n+\t      output_addr_const (file, op);\n+\t      fprintf (file, \")(r0)\");\n+\t      return;\n+\t    }\n+\t}\n       break;\n \n     case PLUS:"}, {"sha": "1d16be489928df735d0d5aa0c88530e260f7a410", "filename": "gcc/config/nios2/nios2.md", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8ceba6a23ea326444348b922ef0550f9239107/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=df8ceba6a23ea326444348b922ef0550f9239107", "patch": "@@ -224,14 +224,14 @@\n \tgcc_unreachable ();\n       }\n   }\n-  \"(nios2_symbolic_memory_operand_p (operands[0]) \n-   || nios2_symbolic_memory_operand_p (operands[1]))\"\n+  \"(nios2_large_constant_memory_operand_p (operands[0]) \n+   || nios2_large_constant_memory_operand_p (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n   {\n-    if (nios2_symbolic_memory_operand_p (operands[0]))\n-      operands[0] = nios2_split_symbolic_memory_operand (operands[0]);\n+    if (nios2_large_constant_memory_operand_p (operands[0]))\n+      operands[0] = nios2_split_large_constant_memory_operand (operands[0]);\n     else\n-      operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+      operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\" \"st,ld,mov\")])\n \n@@ -253,14 +253,14 @@\n \tgcc_unreachable ();\n       }\n   }\n-  \"(nios2_symbolic_memory_operand_p (operands[0]) \n-   || nios2_symbolic_memory_operand_p (operands[1]))\"\n+  \"(nios2_large_constant_memory_operand_p (operands[0]) \n+   || nios2_large_constant_memory_operand_p (operands[1]))\"\n   [(set (match_dup 0) (match_dup 1))]\n   {\n-    if (nios2_symbolic_memory_operand_p (operands[0]))\n-      operands[0] = nios2_split_symbolic_memory_operand (operands[0]);\n+    if (nios2_large_constant_memory_operand_p (operands[0]))\n+      operands[0] = nios2_split_large_constant_memory_operand (operands[0]);\n     else\n-      operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+      operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\" \"st,ld,mov\")])\n \n@@ -296,15 +296,17 @@\n \tgcc_unreachable ();\n       }\n   }\n-  \"(nios2_symbolic_memory_operand_p (operands[0]) \n-    || nios2_symbolic_memory_operand_p (operands[1])\n-    || nios2_large_constant_p (operands[1]))\"\n+  \"(nios2_large_constant_memory_operand_p (operands[0]) \n+    || nios2_large_constant_memory_operand_p (operands[1])\n+    || (nios2_large_constant_p (operands[1]) \n+        && !SMALL_INT_UNSIGNED (INTVAL (operands[1]))\n+\t&& !UPPER16_INT (INTVAL (operands[1]))))\"\n   [(set (match_dup 0) (match_dup 1))]\n   {\n-    if (nios2_symbolic_memory_operand_p (operands[0]))\n-      operands[0] = nios2_split_symbolic_memory_operand (operands[0]);\n-    else if (nios2_symbolic_memory_operand_p (operands[1]))\n-      operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+    if (nios2_large_constant_memory_operand_p (operands[0]))\n+      operands[0] = nios2_split_large_constant_memory_operand (operands[0]);\n+    else if (nios2_large_constant_memory_operand_p (operands[1]))\n+      operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n     else\n       operands[1] = nios2_split_large_constant (operands[1], operands[0]);\n   }\n@@ -364,10 +366,10 @@\n   \"@\n     andi%.\\\\t%0, %1, 0xffff\n     ldhu%o1%.\\\\t%0, %1\"\n-  \"nios2_symbolic_memory_operand_p (operands[1])\"\n+  \"nios2_large_constant_memory_operand_p (operands[1])\"\n   [(set (match_dup 0) (zero_extend:SI (match_dup 1)))]\n   {\n-    operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+    operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\"     \"and,ld\")])\n \n@@ -378,10 +380,10 @@\n   \"@\n     andi%.\\\\t%0, %1, 0xff\n     ldbu%o1%.\\\\t%0, %1\"\n-  \"nios2_symbolic_memory_operand_p (operands[1])\"\n+  \"nios2_large_constant_memory_operand_p (operands[1])\"\n   [(set (match_dup 0) (zero_extend:QX (match_dup 1)))]\n   {\n-    operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+    operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\"     \"and,ld\")])\n \n@@ -394,10 +396,10 @@\n   \"@\n    #\n    ldh%o1%.\\\\t%0, %1\"\n-  \"nios2_symbolic_memory_operand_p (operands[1])\"\n+  \"nios2_large_constant_memory_operand_p (operands[1])\"\n   [(set (match_dup 0) (sign_extend:SI (match_dup 1)))]\n   {\n-    operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+    operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\" \"alu,ld\")])\n \n@@ -408,10 +410,10 @@\n   \"@\n    #\n    ldb%o1%.\\\\t%0, %1\"\n-  \"nios2_symbolic_memory_operand_p (operands[1])\"\n+  \"nios2_large_constant_memory_operand_p (operands[1])\"\n   [(set (match_dup 0) (sign_extend:QX (match_dup 1)))]\n   {\n-    operands[1] = nios2_split_symbolic_memory_operand (operands[1]);\n+    operands[1] = nios2_split_large_constant_memory_operand (operands[1]);\n   }\n   [(set_attr \"type\" \"alu,ld\")])\n "}]}