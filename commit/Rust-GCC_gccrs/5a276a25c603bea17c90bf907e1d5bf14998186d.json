{"sha": "5a276a25c603bea17c90bf907e1d5bf14998186d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyNzZhMjVjNjAzYmVhMTdjOTBiZjkwN2UxZDViZjE0OTk4MTg2ZA==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-05-22T10:32:18Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-22T10:32:18Z"}, "message": "Break up main() into separate .o's so making and linking against shared...\n\nTue May 19 12:50:27 1998  Craig Burley  <burley@gnu.org>\n\tBreak up main() into separate .o's so making and\n\tlinking against shared libraries with non-Fortran\n\tmain() routines is easier:\n\t* Makefile.in (MISC): Add setarg.o and setsig.o.\n\t* libF77/Makefile.in (MISC): Ditto.\n\t* libF77/setarg.c: New file, contains f_setarg().\n\t* libF77/setsig.c: New file, contains f_setsig().\n\t* libF77/getarg_.c: Rename xarg* to f__xarg*.\n\t* libF77/iargc_.c: Ditto\n\nFrom-SVN: r19956", "tree": {"sha": "8df364a299ab2b75b299926afe0332fabc7755e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8df364a299ab2b75b299926afe0332fabc7755e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a276a25c603bea17c90bf907e1d5bf14998186d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a276a25c603bea17c90bf907e1d5bf14998186d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a276a25c603bea17c90bf907e1d5bf14998186d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a276a25c603bea17c90bf907e1d5bf14998186d/comments", "author": null, "committer": null, "parents": [{"sha": "aa43c90be934eae9e0065a79b7819c9ce0ea519a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa43c90be934eae9e0065a79b7819c9ce0ea519a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa43c90be934eae9e0065a79b7819c9ce0ea519a"}], "stats": {"total": 243, "additions": 156, "deletions": 87}, "files": [{"sha": "e6e930b17892f2aa02ab94c513309cde5871e466", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -1,3 +1,15 @@\n+Tue May 19 12:50:27 1998  Craig Burley  <burley@gnu.org>\n+\n+\tBreak up main() into separate .o's so making and\n+\tlinking against shared libraries with non-Fortran\n+\tmain() routines is easier:\n+\t* Makefile.in (MISC): Add setarg.o and setsig.o.\n+\t* libF77/Makefile.in (MISC): Ditto.\n+\t* libF77/setarg.c: New file, contains f_setarg().\n+\t* libF77/setsig.c: New file, contains f_setsig().\n+\t* libF77/getarg_.c: Rename xarg* to f__xarg*.\n+\t* libF77/iargc_.c: Ditto\n+\n Sat May  2 16:44:46 1998  Craig Burley  <burley@gnu.org>\n \n \t* libF77/signal_.c, libI77/dfe.c, libI77/due.c,"}, {"sha": "5469cc50cd280f9135c90cbcf8492715712f84b6", "filename": "libf2c/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FMakefile.in?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -83,7 +83,8 @@ MISC =\tlibF77/F77_aloc.o libF77/VersionF.o libF77/main.o libF77/s_rnge.o \\\n \tlibF77/abort_.o libF77/getarg_.o libF77/iargc_.o libF77/getenv_.o \\\n \tlibF77/signal_.o libF77/s_stop.o libF77/s_paus.o libF77/system_.o \\\n \tlibF77/cabs.o libF77/derf_.o libF77/derfc_.o libF77/erf_.o \\\n-\tlibF77/erfc_.o libF77/sig_die.o libF77/exit_.o\n+\tlibF77/erfc_.o libF77/sig_die.o libF77/exit_.o \\\n+\tlibF77/setarg.o libF77/setsig.o\n POW =\tlibF77/pow_ci.o libF77/pow_dd.o libF77/pow_di.o libF77/pow_hh.o \\\n \tlibF77/pow_ii.o  libF77/pow_ri.o libF77/pow_zi.o libF77/pow_zz.o \\\n \tlibF77/pow_qq.o\n@@ -236,5 +237,4 @@ maintainer-clean: distclean\n \n rebuilt: ${srcdir}/configure ${srcdir}/libU77/configure\n \n-.PHONY: libf77 libi77 libu77 rebuilt mostlyclean clean distclean \\\n-  maintainer-clean all\n+.PHONY: rebuilt mostlyclean clean distclean maintainer-clean all"}, {"sha": "d8d97a800fba0f2546d271d805abeceddb52ee3f", "filename": "libf2c/libF77/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2FMakefile.in?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -34,7 +34,7 @@ VPATH = @srcdir@\n \n MISC =\tF77_aloc.o VersionF.o main.o s_rnge.o abort_.o getarg_.o iargc_.o\\\n \tgetenv_.o signal_.o s_stop.o s_paus.o system_.o cabs.o\\\n-\tderf_.o derfc_.o erf_.o erfc_.o sig_die.o exit_.o\n+\tderf_.o derfc_.o erf_.o erfc_.o sig_die.o exit_.o setarg.o setsig.o\n POW =\tpow_ci.o pow_dd.o pow_di.o pow_hh.o pow_ii.o  pow_ri.o pow_zi.o pow_zz.o \\\n \tpow_qq.o\n CX =\tc_abs.o c_cos.o c_div.o c_exp.o c_log.o c_sin.o c_sqrt.o"}, {"sha": "5cf3ffb8599928b14b538e6f5487d9d62b62bf5c", "filename": "libf2c/libF77/getarg_.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fgetarg_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fgetarg_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fgetarg_.c?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -12,13 +12,13 @@ VOID G77_getarg_0 (n, s, ls) ftnint *n; register char *s; ftnlen ls;\n void G77_getarg_0 (ftnint *n, register char *s, ftnlen ls)\n #endif\n {\n-extern int xargc;\n-extern char **xargv;\n+extern int f__xargc;\n+extern char **f__xargv;\n register char *t;\n register int i;\n \n-if(*n>=0 && *n<xargc)\n-\tt = xargv[*n];\n+if(*n>=0 && *n<f__xargc)\n+\tt = f__xargv[*n];\n else\n \tt = \"\";\n for(i = 0; i<ls && *t!='\\0' ; ++i)"}, {"sha": "1e04c7744b3bfbf4f3ea32f3155364d47a161095", "filename": "libf2c/libF77/iargc_.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fiargc_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fiargc_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fiargc_.c?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -6,6 +6,6 @@ ftnint G77_iargc_0 ()\n ftnint G77_iargc_0 (void)\n #endif\n {\n-extern int xargc;\n-return ( xargc - 1 );\n+extern int f__xargc;\n+return ( f__xargc - 1 );\n }"}, {"sha": "17bf449e40242655541a5559b0db9406f6a95d07", "filename": "libf2c/libF77/main.c", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fmain.c?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -3,12 +3,6 @@\n #include <stdio.h>\n #include \"signal1.h\"\n \n-#ifndef SIGIOT\n-#ifdef SIGABRT\n-#define SIGIOT SIGABRT\n-#endif\n-#endif\n-\n #ifndef KR_headers\n #undef VOID\n #include <stdlib.h>\n@@ -41,61 +35,13 @@ extern VOID f_exit();\n #endif\n \n #ifdef KR_headers\n-extern VOID f_init(), sig_die();\n+extern VOID f_init();\n extern int MAIN__();\n-#define Int /* int */\n #else\n-extern void f_init(void), sig_die(char*, int);\n+extern void f_init(void);\n extern int MAIN__(void);\n-#define Int int\n #endif\n \n-static VOID sigfdie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"Floating Exception\", 1);\n-}\n-\n-\n-static VOID sigidie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"IOT Trap\", 1);\n-}\n-\n-#ifdef SIGQUIT\n-static VOID sigqdie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"Quit signal\", 1);\n-}\n-#endif\n-\n-\n-static VOID sigindie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"Interrupt\", 0);\n-}\n-\n-static VOID sigtdie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"Killed\", 0);\n-}\n-\n-#ifdef SIGTRAP\n-static VOID sigtrdie(Sigarg)\n-{\n-Use_Sigarg;\n-sig_die(\"Trace trap\", 1);\n-}\n-#endif\n-\n-\n-int xargc;\n-char **xargv;\n-\n #ifdef __cplusplus\n \t}\n #endif\n@@ -106,27 +52,8 @@ main(argc, argv) int argc; char **argv;\n main(int argc, char **argv)\n #endif\n {\n-xargc = argc;\n-xargv = argv;\n-signal1(SIGFPE, sigfdie);\t/* ignore underflow, enable overflow */\n-#ifdef SIGIOT\n-signal1(SIGIOT, sigidie);\n-#endif\n-#ifdef SIGTRAP\n-signal1(SIGTRAP, sigtrdie);\n-#endif\n-#ifdef SIGQUIT\n-if(signal1(SIGQUIT,sigqdie) == SIG_IGN)\n-\tsignal1(SIGQUIT, SIG_IGN);\n-#endif\n-if(signal1(SIGINT, sigindie) == SIG_IGN)\n-\tsignal1(SIGINT, SIG_IGN);\n-signal1(SIGTERM,sigtdie);\n-\n-#ifdef pdp11\n-\tldfps(01200); /* detect overflow as an exception */\n-#endif\n-\n+f_setarg(argc, argv);\n+f_setsig();\n f_init();\n #ifndef NO_ONEXIT\n ONEXIT(f_exit);"}, {"sha": "929860aeef3aa70c008af0efc3c853848bf8dcac", "filename": "libf2c/libF77/setarg.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fsetarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fsetarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsetarg.c?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -0,0 +1,29 @@\n+/* Set up the global argc/argv info for use by getarg_, iargc_, and\n+   g77's inlined intrinsic equivalents.  */\n+\n+#ifndef KR_headers\n+#undef VOID\n+#include <stdlib.h>\n+#endif\n+\n+#ifndef VOID\n+#define VOID void\n+#endif\n+\n+int f__xargc;\n+char **f__xargv;\n+\n+#ifdef __cplusplus\n+\t}\n+#endif\n+\n+ void\n+#ifdef KR_headers\n+f_setarg(argc, argv) int argc; char **argv;\n+#else\n+f_setarg(int argc, char **argv)\n+#endif\n+{\n+f__xargc = argc;\n+f__xargv = argv;\n+}"}, {"sha": "8fde2fa27e81874b2e4c68935ba5d5a30e7d4518", "filename": "libf2c/libF77/setsig.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fsetsig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a276a25c603bea17c90bf907e1d5bf14998186d/libf2c%2FlibF77%2Fsetsig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibF77%2Fsetsig.c?ref=5a276a25c603bea17c90bf907e1d5bf14998186d", "patch": "@@ -0,0 +1,101 @@\n+/* Set up the signal behavior.  */\n+\n+#include <stdio.h>\n+#include \"signal1.h\"\n+\n+#ifndef SIGIOT\n+#ifdef SIGABRT\n+#define SIGIOT SIGABRT\n+#endif\n+#endif\n+\n+#ifndef KR_headers\n+#undef VOID\n+#include <stdlib.h>\n+#endif\n+\n+#ifndef VOID\n+#define VOID void\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#ifdef KR_headers\n+extern VOID sig_die();\n+#define Int /* int */\n+#else\n+extern void sig_die(char*, int);\n+#define Int int\n+#endif\n+\n+static VOID sigfdie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"Floating Exception\", 1);\n+}\n+\n+\n+static VOID sigidie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"IOT Trap\", 1);\n+}\n+\n+#ifdef SIGQUIT\n+static VOID sigqdie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"Quit signal\", 1);\n+}\n+#endif\n+\n+\n+static VOID sigindie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"Interrupt\", 0);\n+}\n+\n+static VOID sigtdie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"Killed\", 0);\n+}\n+\n+#ifdef SIGTRAP\n+static VOID sigtrdie(Sigarg)\n+{\n+Use_Sigarg;\n+sig_die(\"Trace trap\", 1);\n+}\n+#endif\n+\n+\n+#ifdef __cplusplus\n+\t}\n+#endif\n+\n+ void\n+f_setsig()\n+{\n+signal1(SIGFPE, sigfdie);\t/* ignore underflow, enable overflow */\n+#ifdef SIGIOT\n+signal1(SIGIOT, sigidie);\n+#endif\n+#ifdef SIGTRAP\n+signal1(SIGTRAP, sigtrdie);\n+#endif\n+#ifdef SIGQUIT\n+if(signal1(SIGQUIT,sigqdie) == SIG_IGN)\n+\tsignal1(SIGQUIT, SIG_IGN);\n+#endif\n+if(signal1(SIGINT, sigindie) == SIG_IGN)\n+\tsignal1(SIGINT, SIG_IGN);\n+signal1(SIGTERM,sigtdie);\n+\n+#ifdef pdp11\n+\tldfps(01200); /* detect overflow as an exception */\n+#endif\n+}"}]}