{"sha": "a7939b1d587dc233a5d7d52a01437c7116ee39cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5MzliMWQ1ODdkYzIzM2E1ZDdkNTJhMDE0MzdjNzExNmVlMzljZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-09-05T08:30:39Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-09-05T08:30:39Z"}, "message": "invoke.texi (i386 Options): -mwide-multiply is not available anymore, remove the documentation.\n\n\t* doc/invoke.texi (i386 Options): -mwide-multiply is not\n\tavailable anymore, remove the documentation.\n\t(i386 Options): Fix typo, cleanup index entries.\n\n\t* prefix.c (concat): Remove, we can use the version from liberty.\n\nFrom-SVN: r45400", "tree": {"sha": "c446a5fa05a9058d5c1d17eb778e9577703f35ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c446a5fa05a9058d5c1d17eb778e9577703f35ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7939b1d587dc233a5d7d52a01437c7116ee39cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7939b1d587dc233a5d7d52a01437c7116ee39cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7939b1d587dc233a5d7d52a01437c7116ee39cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7939b1d587dc233a5d7d52a01437c7116ee39cd/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23296a363b18258e39639175b8b18e590c88003a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23296a363b18258e39639175b8b18e590c88003a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23296a363b18258e39639175b8b18e590c88003a"}], "stats": {"total": 86, "additions": 14, "deletions": 72}, "files": [{"sha": "a87f0efcd8e77be02aa50f226177c9e8684fd252", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7939b1d587dc233a5d7d52a01437c7116ee39cd", "patch": "@@ -1,3 +1,11 @@\n+2001-09-05  Andreas Jaeger  <aj@suse.de>\n+\n+\t* doc/invoke.texi (i386 Options): -mwide-multiply is not\n+\tavailable anymore, remove the documentation.\n+\t(i386 Options): Fix typo, cleanup index entries.\n+\n+\t* prefix.c (concat): Remove, we can use the version from liberty.\n+\n 2001-09-05  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_expand_mov, alpha_expand_mov_nobwx):\n@@ -72,7 +80,7 @@ Tue Sep  4 11:16:35 2001  Jeffrey A Law  (law@cygnus.com)\n \t* config/sparc/sparc.c (whole file): Kill TYPE_ADDRESS\n \treferences.  Replace TYPE_{UNARY,BINARY,MOVE} references with\n \tTYPE_IALU.\n-\t\n+\n \tSimplify length insn attribute and make more judicious use\n \tof insn attribute defaulting.\n \t* config/sparc/sparc.md (all insns with length > one): Mark as\n@@ -85,7 +93,7 @@ Tue Sep  4 11:16:35 2001  Jeffrey A Law  (law@cygnus.com)\n \t(addx): Set insn type to misc.\n \t(mulsidi3_sp64, const_mulsidi3_sp64, umulsidi3_sp64,\n \tconst_umulsidi3_sp64): Set insn type to imul.\n-\t\n+\n \tTrack SFmode vs DFmode insns according to UltraSPARC\n \tscheduling rules.\n \t* config/sparc/sparc.md (\"fptype\"): New attribute, default"}, {"sha": "7991e8b42d60101c41e0f51af77f3748de8bb4cc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a7939b1d587dc233a5d7d52a01437c7116ee39cd", "patch": "@@ -7494,8 +7494,6 @@ produce code that runs somewhat faster on a @samp{Pentium} at the\n expense of more memory.\n \n @item -m128bit-long-double\n-@itemx -m128bit-long-double\n-@opindex m128bit-long-double\n @opindex m128bit-long-double\n Control the size of @code{long double} type. i386 application binary interface\n specify the size to be 12 bytes, while modern architectures (Pentium and newer)\n@@ -7508,8 +7506,6 @@ well as function calling convention for function taking @code{long double}\n will be modified.\n \n @item -m96bit-long-double\n-@itemx -m96bit-long-double\n-@opindex m96bit-long-double\n @opindex m96bit-long-double\n Set the size of @code{long double} to 96 bits as required by the i386\n application binary interface.  This is the default.\n@@ -7522,14 +7518,6 @@ Control whether GCC places uninitialized local variables into the\n @code{bss} or @code{data} segments.  @option{-msvr3-shlib} places them\n into @code{bss}.  These options are meaningful only on System V Release 3.\n \n-@item -mno-wide-multiply\n-@itemx -mwide-multiply\n-@opindex mno-wide-multiply\n-@opindex mwide-multiply\n-Control whether GCC uses the @code{mul} and @code{imul} that produce\n-64-bit results in @code{eax:edx} from 32-bit operands to do @code{long\n-long} multiplies and 32-bit division by constants.\n-\n @item -mrtd\n @opindex mrtd\n Use a different function-calling convention, in which functions that\n@@ -7596,7 +7584,9 @@ may want to reduce the preferred alignment to\n @option{-mpreferred-stack-boundary=2}.\n \n @item -mpush-args\n+@itemx -mno-push-args\n @opindex mpush-args\n+@opindex mno-push-args\n Use PUSH operations to store outgoing parameters.  This method is shorter\n and usually equally fast as method using SUB/MOV operations and is enabled\n by default.  In some cases disabling it may improve performance because of\n@@ -7605,7 +7595,7 @@ improved scheduling and reduced dependencies.\n @item -maccumulate-outgoing-args\n @opindex maccumulate-outgoing-args\n If enabled, the maximum amount of space required for outgoing arguments will be\n-computed in the function prologue.  This in faster on most modern CPUs\n+computed in the function prologue.  This is faster on most modern CPUs\n because of reduced dependencies, improved scheduling and reduced stack usage\n when preferred stack boundary is not equal to 2.  The drawback is a notable\n increase in code size.  This switch implies @option{-mno-push-args}."}, {"sha": "ddf50985c84934e2d649c877b932d54bee8aadee", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7939b1d587dc233a5d7d52a01437c7116ee39cd/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=a7939b1d587dc233a5d7d52a01437c7116ee39cd", "patch": "@@ -1,5 +1,5 @@\n /* Utility to update paths from internal to external forms.\n-   Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -108,62 +108,6 @@ get_key_value (key)\n   return prefix;\n }\n \n-/* Concatenate a sequence of strings, returning the result.\n-\n-   This function is based on the one in libiberty.  */\n-\n-char *\n-concat VPARAMS ((const char *first, ...))\n-{\n-  register int length;\n-  register char *newstr;\n-  register char *end;\n-  register const char *arg;\n-  va_list args;\n-#ifndef ANSI_PROTOTYPES\n-  const char *first;\n-#endif\n-\n-  /* First compute the size of the result and get sufficient memory.  */\n-\n-  VA_START (args, first);\n-#ifndef ANSI_PROTOTYPES\n-  first = va_arg (args, const char *);\n-#endif\n-\n-  arg = first;\n-  length = 0;\n-\n-  while (arg != 0)\n-    {\n-      length += strlen (arg);\n-      arg = va_arg (args, const char *);\n-    }\n-\n-  newstr = (char *) xmalloc (length + 1);\n-  va_end (args);\n-\n-  /* Now copy the individual pieces to the result string.  */\n-\n-  VA_START (args, first);\n-#ifndef ANSI_PROTOTYPES\n-  first = va_arg (args, char *);\n-#endif\n-\n-  end = newstr;\n-  arg = first;\n-  while (arg != 0)\n-    {\n-      while (*arg)\n-\t*end++ = *arg++;\n-      arg = va_arg (args, const char *);\n-    }\n-  *end = '\\000';\n-  va_end (args);\n-\n-  return (newstr);\n-}\n-\n /* Return a copy of a string that has been placed in the heap.  */\n \n static char *"}]}