{"sha": "000030b80b9a0117446d4611c6e8048cd400e964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMDMwYjgwYjlhMDExNzQ0NmQ0NjExYzZlODA0OGNkNDAwZTk2NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-12-11T09:06:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-12-11T09:06:10Z"}, "message": "* ChangeLog: Fix whitespace.\n\nFrom-SVN: r194386", "tree": {"sha": "11a8159d2e67c1300e0b01eb36bd648f90392562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11a8159d2e67c1300e0b01eb36bd648f90392562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000030b80b9a0117446d4611c6e8048cd400e964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000030b80b9a0117446d4611c6e8048cd400e964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000030b80b9a0117446d4611c6e8048cd400e964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000030b80b9a0117446d4611c6e8048cd400e964/comments", "author": null, "committer": null, "parents": [{"sha": "2771c2f9bf60452ae4bf18f8d84b2c5cb7b2b76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2771c2f9bf60452ae4bf18f8d84b2c5cb7b2b76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2771c2f9bf60452ae4bf18f8d84b2c5cb7b2b76e"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "1862af75760a20f897ea8955b87dd3496e91072a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000030b80b9a0117446d4611c6e8048cd400e964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000030b80b9a0117446d4611c6e8048cd400e964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=000030b80b9a0117446d4611c6e8048cd400e964", "patch": "@@ -15,7 +15,7 @@\n 2012-12-10  Steve Ellcey  <sellcey@mips.com>\n \n \tPR target/54061\n-\trtl.h (IGNORED_DWARF_REGNUM): New.\n+\t* rtl.h (IGNORED_DWARF_REGNUM): New.\n \t* dwarf2out.c (reg_loc_descriptor): Check for IGNORED_DWARF_REGNUM.\n \t(mem_loc_descriptor): Ditto.\n \t* config/mips/mips.h (ALL_COP_REG_FIRST): New.\n@@ -83,10 +83,10 @@\n \t(ops): Define Vrintn, Vrinta, Vrintp, Vrintm, Vrintz features.\n \t* config/arm/neon-docgen.ml (intrinsic_groups): Define Vrintn,\n \tVrinta, Vrintp, Vrintm, Vrintz, Vrintx.\n-\t* config/arm/neon-testgen.ml (effective_target): Define check for \n+\t* config/arm/neon-testgen.ml (effective_target): Define check for\n \tRequires_arch 8.\n-\t* config/arm/neon-gen.ml \n-\t(print_feature_test_start): Handle Requires_arch.\n+\t* config/arm/neon-gen.ml (print_feature_test_start): Handle\n+\tRequires_arch.\n \t(print_feature_test_end): Likewise.\n \tAdd 2012 to Copyright notice.\n \t* doc/arm-neon-intrinsics.texi: Regenerate.\n@@ -139,15 +139,15 @@\n \n 2012-12-07  Vladimir Makarov  <vmakarov@redhat.com>\n \n-\ttestsuite/gcc.target/i386/pr55141.c\n+\tPR rtl-optimization/55141\n \t* lra-constraints.c (lra_constraints): Use biggest mode for\n \tdf_set_regs_ever_live.\n \n 2012-12-07  Jan Hubicka  <jh@suse.cz>\n \n- \t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add UPPER_BOUND\n- \tparameter.\n- \t(try_unroll_loop_completely) Update.\n+\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Add UPPER_BOUND\n+\tparameter.\n+\t(try_unroll_loop_completely) Update.\n \n 2012-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -164,8 +164,8 @@\n 2012-12-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/55078\n-\t* ipa-inline-transform.c (inline_call): Turn #if 0 to #ifdef\n-\tENABLE_CHECKING.\n+\t* ipa-inline-transform.c (inline_call): Turn #if 0 to\n+\t#ifdef ENABLE_CHECKING.\n \t* ipa-prop.c (try_make_edge_direct_simple_call): Use\n \tipa_value_from_jfunc.\n \t(try_make_edge_direct_virtual_call): Likewise.\n@@ -212,7 +212,7 @@\n 2012-12-06  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \tPR 55599/sanitizer\n-        * config/darwin.h (LINK_COMMAND_SPEC_A): Remove static libasan support.\n+\t* config/darwin.h (LINK_COMMAND_SPEC_A): Remove static libasan support.\n \n 2012-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -432,7 +432,7 @@\n 2012-12-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_select_ccmode): Enable using CC of\n-          x + imm for higher immediates on z9-109 upwards.\n+\tx + imm for higher immediates on z9-109 upwards.\n \n 2012-12-04  Richard Earnshaw  <rearnsha@arm.com>\n \n@@ -641,8 +641,8 @@\n \n 2010-12-01  Xinliang David Li  <davidxl@google.com>\n \n-        * config/i386/i386.c: Allow sign extend instructions (cltd etc)\n-        on modern CPUs.\n+\t* config/i386/i386.c: Allow sign extend instructions (cltd etc)\n+\ton modern CPUs.\n \n 2012-12-02  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -710,44 +710,44 @@\n \tadded check for required alignment.  Update the user.\n \n 2012-11-30  Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>\n-            Greta Yorsh  <Greta.Yorsh@arm.com>\n-\n-        * config/arm/arm.md (type): Subdivide \"alu\" into \"alu_reg\"\n-        and \"simple_alu_imm\".\n-        (core_cycles): Use new names.\n-        (arm_addsi3): Set type of patterns to use to alu_reg and simple_alu_imm.\n-        (addsi3_compare0, addsi3_compare0_scratch): Likewise.\n-        (addsi3_compare_op1, addsi3_compare_op2, compare_addsi2_op0): Likewise.\n-        (compare_addsi2_op1, arm_subsi3_insn, subsi3_compare0): Likewise.\n-        (subsi3_compare, arm_decscc,arm_andsi3_insn): Likewise.\n-        (thumb1_andsi3_insn, andsi3_compare0_scratch): Likewise.\n-        (zeroextractsi_compare0_scratch,iorsi3_insn,iorsi3_compare0): Likewise.\n-        (iorsi3_compare0_scratch, arm_xorsi3, thumb1_xorsi3_insn): Likewise.\n-        (xorsi3_compare0, xorsi3_compare0_scratch): Likewise.\n-        (thumb1_zero_extendhisi2,arm_zero_extendhisi2_v6): Likewise.\n-        (thumb1_zero_extendqisi2_v, arm_zero_extendqisi2_v6): Likewise.\n+\t    Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* config/arm/arm.md (type): Subdivide \"alu\" into \"alu_reg\"\n+\tand \"simple_alu_imm\".\n+\t(core_cycles): Use new names.\n+\t(arm_addsi3): Set type of patterns to use to alu_reg and simple_alu_imm.\n+\t(addsi3_compare0, addsi3_compare0_scratch): Likewise.\n+\t(addsi3_compare_op1, addsi3_compare_op2, compare_addsi2_op0): Likewise.\n+\t(compare_addsi2_op1, arm_subsi3_insn, subsi3_compare0): Likewise.\n+\t(subsi3_compare, arm_decscc,arm_andsi3_insn): Likewise.\n+\t(thumb1_andsi3_insn, andsi3_compare0_scratch): Likewise.\n+\t(zeroextractsi_compare0_scratch,iorsi3_insn,iorsi3_compare0): Likewise.\n+\t(iorsi3_compare0_scratch, arm_xorsi3, thumb1_xorsi3_insn): Likewise.\n+\t(xorsi3_compare0, xorsi3_compare0_scratch): Likewise.\n+\t(thumb1_zero_extendhisi2,arm_zero_extendhisi2_v6): Likewise.\n+\t(thumb1_zero_extendqisi2_v, arm_zero_extendqisi2_v6): Likewise.\n \t(thumb1_extendhisi2, arm_extendqisi_v6): Likewise.\n \t(thumb1_extendqisi2, arm_movsi_insn): Likewise.\n-        (movsi_compare0, movhi_insn_arch4, movhi_bytes): Likewise.\n-        (arm_movqi_insn, thumb1_movqi_insn, arm_cmpsi_insn): Likewise.\n-        (movsicc_insn, if_plus_move, if_move_plus): Likewise.\n-        * config/arm/neon.md (neon_mov<mode>/VDX): Likewise.\n-        (neon_mov<mode>/VQXMOV): Likewise.\n-        * config/arm/arm1020e.md (1020alu_op): Likewise.\n-        * config/arm/fmp626.md (mp626_alu_op): Likewise.\n-        * config/arm/fa726te.md (726te_alu_op): Likewise.\n-        * config/arm/fa626te.md (626te_alu_op): Likewise.\n-        * config/arm/fa606te.md (606te_alu_op): Likewise.\n-        * config/arm/fa526.md (526_alu_op): Likewise.\n-        * config/arm/cortex-r4.md (cortex_r4_alu, cortex_r4_mov): Likewise.\n-        * config/arm/cortex-m4.md (cortex_m4_alu): Likewise.\n-        * config/arm/cortex-a9.md (cprtex_a9_dp): Likewise.\n-        * config/arm/cortex-a8.md (cortex_a8_alu, cortex_a8_mov): Likewise.\n-        * config/arm/cortex-a5.md (cortex_a5_alu): Likewise.\n-        * config/arm/cortex-a15.md (cortex_a15_alu): Likewise.\n-        * config/arm/arm926ejs.md (9_alu_op): Likewise.\n-        * config/arm/arm1136jfs.md (11_alu_op): Likewise.\n-        * config/arm/arm1026ejs.md (alu_op): Likewise.\n+\t(movsi_compare0, movhi_insn_arch4, movhi_bytes): Likewise.\n+\t(arm_movqi_insn, thumb1_movqi_insn, arm_cmpsi_insn): Likewise.\n+\t(movsicc_insn, if_plus_move, if_move_plus): Likewise.\n+\t* config/arm/neon.md (neon_mov<mode>/VDX): Likewise.\n+\t(neon_mov<mode>/VQXMOV): Likewise.\n+\t* config/arm/arm1020e.md (1020alu_op): Likewise.\n+\t* config/arm/fmp626.md (mp626_alu_op): Likewise.\n+\t* config/arm/fa726te.md (726te_alu_op): Likewise.\n+\t* config/arm/fa626te.md (626te_alu_op): Likewise.\n+\t* config/arm/fa606te.md (606te_alu_op): Likewise.\n+\t* config/arm/fa526.md (526_alu_op): Likewise.\n+\t* config/arm/cortex-r4.md (cortex_r4_alu, cortex_r4_mov): Likewise.\n+\t* config/arm/cortex-m4.md (cortex_m4_alu): Likewise.\n+\t* config/arm/cortex-a9.md (cprtex_a9_dp): Likewise.\n+\t* config/arm/cortex-a8.md (cortex_a8_alu, cortex_a8_mov): Likewise.\n+\t* config/arm/cortex-a5.md (cortex_a5_alu): Likewise.\n+\t* config/arm/cortex-a15.md (cortex_a15_alu): Likewise.\n+\t* config/arm/arm926ejs.md (9_alu_op): Likewise.\n+\t* config/arm/arm1136jfs.md (11_alu_op): Likewise.\n+\t* config/arm/arm1026ejs.md (alu_op): Likewise.\n \n 2012-11-30  Richard Biener  <rguenther@suse.de>\n \n@@ -996,7 +996,7 @@\n \t* config/epiphany/epiphgany.md (attribute type): Add v2fp.\n \t(attribute fp_mode): Test for v2fp.\n \t(<float_operation:insn_opname>v2sf3_i): Change type to v2fp.\n-\t* config/epiphany/epiphgany-sched.md (fp_arith_nearest,\n+\t* config/epiphany/epiphany-sched.md (fp_arith_nearest,\n \tfp_arith_trunc): Combine to ..\n \t(fp_arith): .. this.\n \t(v2fp_arith): New insn reservation."}]}