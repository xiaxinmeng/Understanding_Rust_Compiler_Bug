{"sha": "747412b8fe223d4ab3e0ed55faac7a786b7a098b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3NDEyYjhmZTIyM2Q0YWIzZTBlZDU1ZmFhYzdhNzg2YjdhMDk4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:49:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:49:26Z"}, "message": "[multiple changes]\n\n2013-10-14  Vincent Celier  <celier@adacore.com>\n\n\t* projects.texi: Add documentation for new attributes of package\n\tClean: Artifacts_In_Object_Dir and Artifacts_In_Exec_Dir.\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c, adaint.h (__gnat_get_executable_load_address):\n\tNew function.\n\t* a-exexda.adb (Append_Info_Basic_Exception_Traceback): Add\n\texecutable load address (Basic_Exception_Tback_Maxlength): Adjust.\n\nFrom-SVN: r203530", "tree": {"sha": "66de19920b726e825ced45159306ee7898b3518f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66de19920b726e825ced45159306ee7898b3518f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747412b8fe223d4ab3e0ed55faac7a786b7a098b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747412b8fe223d4ab3e0ed55faac7a786b7a098b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747412b8fe223d4ab3e0ed55faac7a786b7a098b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747412b8fe223d4ab3e0ed55faac7a786b7a098b/comments", "author": null, "committer": null, "parents": [{"sha": "3599a97bc3f0b10b87d450a7228cb86edffacabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3599a97bc3f0b10b87d450a7228cb86edffacabf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3599a97bc3f0b10b87d450a7228cb86edffacabf"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "99ad22f5ba674318353bf3e6d64ed466dffc7e8c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=747412b8fe223d4ab3e0ed55faac7a786b7a098b", "patch": "@@ -1,3 +1,15 @@\n+2013-10-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* projects.texi: Add documentation for new attributes of package\n+\tClean: Artifacts_In_Object_Dir and Artifacts_In_Exec_Dir.\n+\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c, adaint.h (__gnat_get_executable_load_address):\n+\tNew function.\n+\t* a-exexda.adb (Append_Info_Basic_Exception_Traceback): Add\n+\texecutable load address (Basic_Exception_Tback_Maxlength): Adjust.\n+\n 2013-10-14  Vincent Celier  <celier@adacore.com>\n \n \t* prj-attr.adb: New attributes in package Clean:"}, {"sha": "815afac8dbffe18b95d68813c325a9ce292b97f0", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=747412b8fe223d4ab3e0ed55faac7a786b7a098b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -206,6 +206,11 @@ package body Exception_Data is\n    pragma Export\n      (Ada, Exception_Message_Length, \"__gnat_exception_msg_len\");\n \n+   function Get_Executable_Load_Address return System.Address;\n+   pragma Import (C, Get_Executable_Load_Address,\n+                  \"__gnat_get_executable_load_address\");\n+   --  Get the load address of the executable, or Null_Address if not known\n+\n    -------------------------\n    -- Append_Info_Address --\n    -------------------------\n@@ -377,17 +382,29 @@ package body Exception_Data is\n    --  As for Basic_Exception_Information:\n \n    BETB_Header : constant String := \"Call stack traceback locations:\";\n+   LDAD_Header : constant String := \"Load address: \";\n \n    procedure Append_Info_Basic_Exception_Traceback\n      (X    : Exception_Occurrence;\n       Info : in out String;\n       Ptr  : in out Natural)\n    is\n+      Load_Address : Address;\n    begin\n       if X.Num_Tracebacks = 0 then\n          return;\n       end if;\n \n+      --  The executable load address line\n+\n+      Load_Address := Get_Executable_Load_Address;\n+      if Load_Address /= Null_Address then\n+         Append_Info_String (LDAD_Header, Info, Ptr);\n+         Append_Info_Address (Load_Address, Info, Ptr);\n+         Append_Info_NL (Info, Ptr);\n+      end if;\n+\n+      --  The traceback lines\n       Append_Info_String (BETB_Header, Info, Ptr);\n       Append_Info_NL (Info, Ptr);\n \n@@ -407,11 +424,12 @@ package body Exception_Data is\n    function Basic_Exception_Tback_Maxlength\n      (X : Exception_Occurrence) return Natural\n    is\n-      Space_Per_Traceback : constant := 2 + 16 + 1;\n+      Space_Per_Address : constant := 2 + 16 + 1;\n       --  Space for \"0x\" + HHHHHHHHHHHHHHHH + \" \"\n    begin\n-      return BETB_Header'Length + 1 +\n-               X.Num_Tracebacks * Space_Per_Traceback + 1;\n+      return LDAD_Header'Length + Space_Per_Address +\n+               BETB_Header'Length + 1 +\n+               X.Num_Tracebacks * Space_Per_Address + 1;\n    end Basic_Exception_Tback_Maxlength;\n \n    ---------------------------------------"}, {"sha": "5b261af22a7aebea2e55eb0bb8a7e31a348ea6e3", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=747412b8fe223d4ab3e0ed55faac7a786b7a098b", "patch": "@@ -3830,8 +3830,8 @@ void GetTimeAsFileTime(LPFILETIME pTime)\n extern void __main (void);\n \n void __main (void) {}\n-#endif\n-#endif\n+#endif /* RTSS */\n+#endif /* RTX */\n \n #if defined (__ANDROID__)\n \n@@ -3889,7 +3889,7 @@ void __gnat_cpu_set (int cpu, size_t count, cpu_set_t *set)\n   CPU_SET_S (cpu - 1, count, set);\n }\n \n-#else\n+#else /* !CPU_ALLOC */\n \n /* Static cpu sets */\n \n@@ -3919,8 +3919,59 @@ void __gnat_cpu_set (int cpu, size_t count ATTRIBUTE_UNUSED, cpu_set_t *set)\n      CPU by a 0, so we need to adjust. */\n   CPU_SET (cpu - 1, set);\n }\n+#endif /* !CPU_ALLOC */\n+#endif /* linux */\n+\n+/* Return the load address of the executable, or 0 if not known.  In the\n+   specific case of error, (void *)-1 can be returned. Beware: this unit may\n+   be in a shared library.  As low-level units are needed, we allow #include\n+   here.  */\n+\n+#if defined (__APPLE__)\n+#include <mach-o/dyld.h>\n+#elif defined (__linux__)\n+#include <link.h>\n+#elif defined (__AIX__)\n+#include <sys/ldr.h>\n #endif\n+\n+const void *\n+__gnat_get_executable_load_address (void)\n+{\n+#if defined (__APPLE__)\n+  return _dyld_get_image_header (0);\n+\n+#elif defined (__linux__)\n+  struct link_map *map = _r_debug.r_map;\n+\n+  return (const void *)map->l_addr;\n+\n+#elif defined (__AIX__)\n+  /* Unfortunately, AIX wants to return the info for all loaded objects,\n+     so we need to increase the buffer if too small.  */\n+  size_t blen = 4096;\n+  int status;\n+\n+  while (1)\n+    {\n+      char buf[blen];\n+\n+      status = loadquery (L_GETINFO, buf, blen);\n+      if (status == 0)\n+        {\n+          struct ldinfo *info = (struct ld_info *)buf;\n+          return info->ldinfo_textorg;\n+        }\n+      blen = blen * 2;\n+\n+      /* Avoid stack overflow.  */\n+      if (blen > 40 * 1024)\n+        return (const void *)-1;\n+    }\n+#else\n+  return NULL;\n #endif\n+}\n \n #ifdef __cplusplus\n }"}, {"sha": "554d848f736d23519f3db855e5e1aa7f76ce9db7", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=747412b8fe223d4ab3e0ed55faac7a786b7a098b", "patch": "@@ -287,6 +287,8 @@ extern int    get_gcc_version                      (void);\n extern int    __gnat_binder_supports_auto_init     (void);\n extern int    __gnat_sals_init_using_constructors  (void);\n \n+extern const void * __gnat_get_executable_load_address  (void);\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "c027904f1533d5796d2a65da3a33beae31e7f322", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747412b8fe223d4ab3e0ed55faac7a786b7a098b/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=747412b8fe223d4ab3e0ed55faac7a786b7a098b", "patch": "@@ -4292,6 +4292,16 @@ Index is a language names. Value is the list of extensions for file names\n derived from source file names that need to be cleaned in the object\n directory of the project.\n \n+@item @b{Artifacts_In_Object_Dir}: single\n+\n+Value is a list of file names expressed as regular expressions that are to be\n+deleted by gprclean in the object directory of the project.\n+\n+@item @b{Artifacts_In_Exec_Dir}: single\n+\n+Value is list of file names expressed as regular expressions that are to be\n+deleted by gprclean in the exec directory of the main project.\n+\n @end itemize\n \n @node Package Compiler Attributes"}]}