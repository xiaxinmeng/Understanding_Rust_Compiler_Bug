{"sha": "0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3NmU5MzA4ZDhhOTZiMGNlZmE1ZDU5ZjJjOGFhMzYwZTNjYmY2Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-18T01:52:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-18T01:52:08Z"}, "message": "scripts: New.\n\n\n2003-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* scripts: New.\n\t* config/abi/extract_symvers: Move to...\n\t* scripts/extract_symvers: ...here.\n\t* mkcheck.in: Move to..\n\t* scripts/check_survey.in: ...here.\n\t* testsuite_flags.in: Move to..\n\t* scripts/testsuite_flags.in: ...here.\n\t* configure.in: Change check and testsuite_flags locations.\n\t* configure: Regenerate.\n\t* testsuite/Makefile.am (current_symbols.txt): Change location.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Modify\n\tlocation of testsuite_flags.\n\t* Makefile.am (check-script): Move..\n\t(check-script-install): Move...\n\t* testsuite/Makefile.am: ... here.\n\t* testsuite/Makefile.in: Regenerate.\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r68132", "tree": {"sha": "f6923f737c6fdecf4b68a349d75dd98053d0038c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6923f737c6fdecf4b68a349d75dd98053d0038c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/comments", "author": null, "committer": null, "parents": [{"sha": "b0c231bb70dc05847c7ea375ae4ffd78219e19aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c231bb70dc05847c7ea375ae4ffd78219e19aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c231bb70dc05847c7ea375ae4ffd78219e19aa"}], "stats": {"total": 199, "additions": 118, "deletions": 81}, "files": [{"sha": "0fbe71a711cfe800da420e387e7a91cd1c1208f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -1,3 +1,24 @@\n+2003-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* scripts: New.\n+\t* config/abi/extract_symvers: Move to...\n+\t* scripts/extract_symvers: ...here.\n+\t* mkcheck.in: Move to..\n+\t* scripts/check_survey.in: ...here.\n+\t* testsuite_flags.in: Move to..\n+\t* scripts/testsuite_flags.in: ...here.\n+\t* configure.in: Change check and testsuite_flags locations.\n+\t* configure: Regenerate.\n+\t* testsuite/Makefile.am (current_symbols.txt): Change location.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Modify\n+\tlocation of testsuite_flags.\n+\t* Makefile.am (check-script): Move..\n+\t(check-script-install): Move...\n+\t* testsuite/Makefile.am: ... here.\t\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* Makefile.in: Regenerate.\t\n+\t\n 2003-06-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/abi/i486-linux-gnu/baseline_symbols.txt: Update to 3.3.0."}, {"sha": "2467ce3d7b88b0238aba8832e1c1b37f085e3a86", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -31,21 +31,6 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n PWD = $${PWDCMD-pwd}\n \n-# These two special 'check-script' rules use the bash script 'mkcheck'\n-# to do testing. This script is not as portable as the dejagnu test\n-# harness, and is thus off by default. It does produce interesting\n-# output however, including various performance analysis items like\n-# compile time, execution time, and binary size.\n-check-script: $(top_builddir)/mkcheck\n-\t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  cd testsuite; \\\n-\t  @glibcpp_builddir@/mkcheck 0)\n-\n-check-script-install: $(top_builddir)/mkcheck\n-\t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  cd testsuite; \\\n-\t  @glibcpp_builddir@/mkcheck 1)\n-\n # These rules are messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD}`; \\"}, {"sha": "956585bc26f69bd7575de9de4c26bb6d5fe49937", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -210,10 +210,9 @@ AM_MAKEFLAGS = \\\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES =  mkcheck testsuite_flags\n+CONFIG_CLEAN_FILES = \n DIST_COMMON =  README ./stamp-h.in ChangeLog Makefile.am Makefile.in \\\n-acconfig.h acinclude.m4 aclocal.m4 config.h.in configure configure.in \\\n-mkcheck.in testsuite_flags.in\n+acconfig.h acinclude.m4 aclocal.m4 config.h.in configure configure.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -264,10 +263,6 @@ distclean-hdr:\n \t-rm -f config.h\n \n maintainer-clean-hdr:\n-mkcheck: $(top_builddir)/config.status mkcheck.in\n-\tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n-testsuite_flags: $(top_builddir)/config.status testsuite_flags.in\n-\tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n # This directory's subdirectories are mostly independent; you can cd\n # into them and run `make' without going through this Makefile.\n@@ -479,21 +474,6 @@ distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n \n-# These two special 'check-script' rules use the bash script 'mkcheck'\n-# to do testing. This script is not as portable as the dejagnu test\n-# harness, and is thus off by default. It does produce interesting\n-# output however, including various performance analysis items like\n-# compile time, execution time, and binary size.\n-check-script: $(top_builddir)/mkcheck\n-\t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  cd testsuite; \\\n-\t  @glibcpp_builddir@/mkcheck 0)\n-\n-check-script-install: $(top_builddir)/mkcheck\n-\t-(chmod + $(top_builddir)/mkcheck; \\\n-\t  cd testsuite; \\\n-\t  @glibcpp_builddir@/mkcheck 1)\n-\n # These rules are messy, but are hella worth it.\n doxygen:\n \t-(srcdir=`cd ${top_srcdir}; ${PWD}`; \\"}, {"sha": "2323757ce138814d91c1bb3df7ab962a0ecf7eaf", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -23968,7 +23968,7 @@ ac_given_INSTALL=\"$INSTALL\"\n trap 'rm -fr `echo \"Makefile \\\n include/Makefile src/Makefile \\\n libmath/Makefile libsupc++/Makefile \\\n-po/Makefile testsuite/Makefile mkcheck testsuite_flags config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n+po/Makefile testsuite/Makefile scripts/check scripts/testsuite_flags config.h\" | sed \"s/:[^ ]*//g\"` conftest*; exit 1' 1 2 15\n EOF\n cat >> $CONFIG_STATUS <<EOF\n \n@@ -24162,7 +24162,7 @@ cat >> $CONFIG_STATUS <<EOF\n CONFIG_FILES=\\${CONFIG_FILES-\"Makefile \\\n include/Makefile src/Makefile \\\n libmath/Makefile libsupc++/Makefile \\\n-po/Makefile testsuite/Makefile mkcheck testsuite_flags\"}\n+po/Makefile testsuite/Makefile scripts/check scripts/testsuite_flags\"}\n EOF\n cat >> $CONFIG_STATUS <<\\EOF\n for ac_file in .. $CONFIG_FILES; do if test \"x$ac_file\" != x..; then\n@@ -24369,8 +24369,8 @@ test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n      esac\n    fi\n  fi\n- chmod +x mkcheck\n- chmod +x testsuite_flags\n+ chmod +x scripts/check\n+ chmod +x scripts/testsuite_flags\n exit 0\n EOF\n chmod +x $CONFIG_STATUS"}, {"sha": "62a972f999d585ba95d4e94b6b7e619578775e1c", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -485,7 +485,7 @@ AC_SUBST(LIBSUPCXX_PICFLAGS)\n AC_OUTPUT(Makefile \\\n include/Makefile src/Makefile \\\n libmath/Makefile libsupc++/Makefile \\\n-po/Makefile testsuite/Makefile mkcheck testsuite_flags,\n+po/Makefile testsuite/Makefile scripts/check scripts/testsuite_flags,\n [test -z \"$CONFIG_HEADERS\" || echo timestamp > stamp-h\n  if test -n \"$CONFIG_FILES\"; then\n    if test -n \"${with_build_subdir}\" || test -n \"${with_target_subdir}\"; then\n@@ -508,8 +508,8 @@ po/Makefile testsuite/Makefile mkcheck testsuite_flags,\n      esac\n    fi\n  fi\n- chmod +x mkcheck\n- chmod +x testsuite_flags],\n+ chmod +x scripts/check\n+ chmod +x scripts/testsuite_flags],\n srcdir=${srcdir}\n host=${host}\n target=${target}\n@@ -527,7 +527,7 @@ dnl  In autoconf 2.5x, AC_OUTPUT is replaced by three AC_ macros:\n dnl  AC_CONFIG_FILES(Makefile \\\n dnl      include/Makefile src/Makefile \\\n dnl      libmath/Makefile libsupc++/Makefile \\\n-dnl      po/Makefile testsuite/Makefile mkcheck testsuite_flags)\n+dnl     po/Makefile testsuite/Makefile scripts/mkcheck scripts/testsuite_flags)\n dnl  AC_CONFIG_COMMANDS([default],\n dnl  [if test -n \"$CONFIG_FILES\"; then\n dnl    # Ony modify Makefiles that are just being created.\n@@ -547,8 +547,8 @@ dnl        grep '^MULTISUBDIR =' Makefile >> libsupc++/Makefile\n dnl        ;;\n dnl    esac\n dnl  fi\n-dnl  chmod +x mkcheck\n-dnl  chmod +x testsuite_flags\n+dnl  chmod +x scripts/mkcheck\n+dnl  chmod +x scripts/testsuite_flags\n dnl  ],\n dnl  srcdir=${srcdir}\n dnl  host=${host}"}, {"sha": "3baad37229ffee53cc57c38885f9527318c7d183", "filename": "libstdc++-v3/scripts/check_survey.in", "status": "renamed", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_survey.in?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -8,7 +8,7 @@\n # has been enabled.\n \n # Invocation \n-# mkcheck [01] \n+# check_survey [01] \n \n # 1: variables\n #\n@@ -17,14 +17,14 @@\n # (1) testing the installed binary and headers, or\n WHICH=$1\n if [ \"$WHICH\"x = 0x ]; then\n-  echo \"running mkcheck\"\n+  echo \"running check_survey\"\n   echo \"$0: testing the build directory\"\n elif [ \"$WHICH\"x = 1x ]; then\n-  echo \"running mkcheck\"\n+  echo \"running check_survey\"\n   echo \"$0: testing the install directory\"\n else\n-  echo 'Usage: mkcheck 0    /* test the build directory    */'\n-  echo '       mkcheck 1    /* test the install directory  */'\n+  echo 'Usage: check_survey 0    /* test the build directory    */'\n+  echo '       check_survey 1    /* test the install directory  */'\n   exit 1;\n fi\n \n@@ -34,32 +34,30 @@ shift\n \n # This has been true all along.  Found out about it the hard way...\n case $BASH_VERSION in\n-    1*)  echo 'You need bash 2.x to run mkcheck.  Exiting.'; exit 1 ;;\n+    1*)  echo 'You need bash 2.x to run check_survey.  Exiting.'; exit 1 ;;\n     *)   ;;   # ??\n esac\n \n BUILD_DIR=@glibcpp_builddir@\n SRC_DIR=@glibcpp_srcdir@\n PREFIX_DIR=@glibcpp_prefixdir@\n if [ \"$WHICH\"x = 0x ]; then\n-  CXX=`$BUILD_DIR/testsuite_flags --build-cxx`\n-  INCLUDES=`$BUILD_DIR/testsuite_flags --build-includes`\n+  CXX=`$BUILD_DIR/scripts/testsuite_flags --build-cxx`\n+  INCLUDES=`$BUILD_DIR/scripts/testsuite_flags --build-includes`\n else\n-  CXX=`$BUILD_DIR/testsuite_flags --install-cxx`\n-  INCLUDES=`$BUILD_DIR/testsuite_flags --install-includes`\n+  CXX=`$BUILD_DIR/scripts/testsuite_flags --install-cxx`\n+  INCLUDES=`$BUILD_DIR/scripts/testsuite_flags --install-includes`\n fi\n-CXXFLAGS=`$BUILD_DIR/testsuite_flags --cxxflags`\n+CXXFLAGS=`$BUILD_DIR/scripts/testsuite_flags --cxxflags`\n LIBTOOL=\"$BUILD_DIR/libtool\"\n LTEXE=\"$LIBTOOL --mode=execute\"\n-#LTCXX=\"$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $INCLUDES\"\n LTCXX=\"$CXX $CXXFLAGS $INCLUDES\"\n \n # specific libtool flag(s) to use shared libraries, if any\n SH_FLAG=\"-Wl,--rpath -Wl,$BUILD_DIR/../../gcc -Wl,--rpath -Wl,$BUILD_DIR/src/.libs\"\n \n # specific libtool flag(s) to use static libraries, if any\n ST_FLAG=\"-static\"\n-#ST_FLAG=\"-all-static\"\n \n # Set up the testing directory, which should be in a directory called\n # \"testsuite\" in the root level of the build directory.\n@@ -70,14 +68,10 @@ if [ ! -d ${TEST_DIR}/.libs ]; then\n fi\n \n # the name of the file that will collect and hold all this useful data:\n-RESULTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-mkcheck.txt\"\n+RESULTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey.txt\"\n \n # the name of the log file that will append compiler diagnostics:\n-LOG_FILE=\"$TEST_DIR/$(date +%Y%m%d)-mkchecklog.txt\"\n-\n-# the names of the specific test files to be run\n-TESTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-mkcheckfiles.txt\"\n-\n+LOG_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey_log.txt\"\n \n #\n # 2: clean, make files, append general test info\n@@ -97,6 +91,9 @@ if [ -f $LOG_FILE ]; then\n     rm $LOG_FILE\n fi\n \n+# the names of the specific test files to be run\n+TESTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-check_survey_files.txt\"\n+\n # Make a list of the files we're going to run, or use an old one if it exists.\n if [ ! -f \"$TESTS_FILE\" ]; then\n   if [ -f \"$TEST_DIR/testsuite_files\" ]; then", "previous_filename": "libstdc++-v3/mkcheck.in"}, {"sha": "e7b6645900b1aec6c8fd1bef1b4bdc9a7e286e44", "filename": "libstdc++-v3/scripts/extract_symvers", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Fextract_symvers", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Fextract_symvers", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fextract_symvers?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "previous_filename": "libstdc++-v3/config/abi/extract_symvers"}, {"sha": "4858c2e6606acbe04bf5f7822307a024e6b5dd82", "filename": "libstdc++-v3/scripts/testsuite_flags.in", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Ftestsuite_flags.in?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "previous_filename": "libstdc++-v3/testsuite_flags.in"}, {"sha": "fe23b81ee4d18ff618a77df80ee99d74b3094d44", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -37,14 +37,19 @@ AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n \n ## CXX is actually a \"C\" compiler. These are real C++ programs.\n-## Do the same thing as `testsuite_flags --build-cxx`\n-CXX_build = @glibcpp_CXX@ \n-CXX=`echo \"$(CXX_build)\" | sed 's,gcc/xgcc ,gcc/g++ ,'`\n+glibcpp_srcdir=@glibcpp_srcdir@\n+glibcpp_builddir=@glibcpp_builddir@\n+testsuite_flags_script=${glibcpp_builddir}/scripts/testsuite_flags\n+CXX=`${testsuite_flags_script} --build-cxx`\n+\n CXXLINK = \\\n \tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs\\\n \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES = \\\n \t-nostdinc++ \\\n \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n@@ -79,7 +84,7 @@ check-am:\n check-local: check-abi\n \n baseline_file = @baseline_file@\n-extract_symvers = @glibcpp_srcdir@/config/abi/extract_symvers\n+extract_symvers = @glibcpp_srcdir@/scripts/extract_symvers\n \n current_symbols.txt: ${extract_symvers} ../src/.libs/libstdc++.so\n \t  -@(${extract_symvers} ../src/.libs/libstdc++.so current_symbols.txt)\n@@ -116,6 +121,31 @@ check-abi-verbose:\n endif\n \n \n+# These two special 'check-script' rules use the bash script 'check'\n+# to do testing. This script is not as portable as the dejagnu test\n+# harness, and is thus off by default. It does produce interesting\n+# output however, including various performance analysis items like\n+# compile time, execution time, and binary size.\n+check_survey = ${glibcpp_builddir}/scripts/check_survey\n+check-script: ${check_survey}\n+\t-@(chmod + ${check_survey}; \\\n+\t  ${check_survey} 0)\n+\n+check-script-install: ${check_survey}\n+\t-@(chmod + ${check_survey}; \\\n+\t  ${check_survey} 0)\n+\n+\n+# Runs the testsuite/performance tests.  \n+# Some of these tests create large (~75MB) files, allocate huge\n+# ammounts of memory, or otherwise tie up machine resources. Thus,\n+# running this is off by default.\n+check_performance=${glibcpp_srcdir}/scripts/check_performance\n+check-performance: ${check_performance}\n+\t-@(chmod + ${check_performance}; \\\n+\t  ${check_performance} ${glibcpp_srcdir} ${glibcpp_builddir})\n+\n+\n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check \n+\t     testsuite_* site.exp abi_check baseline_symbols"}, {"sha": "3df92864cadfd394bc3079e43e45a65d21123897", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -93,11 +93,9 @@ EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n-GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n GLIBCPP_IS_CROSS_COMPILING = @GLIBCPP_IS_CROSS_COMPILING@\n LIBMATHOBJS = @LIBMATHOBJS@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n-LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n@@ -115,7 +113,6 @@ SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n SYMVER_MAP = @SYMVER_MAP@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_NLS = @USE_NLS@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n@@ -128,10 +125,8 @@ glibcpp_MOFILES = @glibcpp_MOFILES@\n glibcpp_PCHFLAGS = @glibcpp_PCHFLAGS@\n glibcpp_POFILES = @glibcpp_POFILES@\n glibcpp_basedir = @glibcpp_basedir@\n-glibcpp_builddir = @glibcpp_builddir@\n glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n@@ -157,14 +152,20 @@ RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n \n-CXX_build = @glibcpp_CXX@ \n-CXX = `echo \"$(CXX_build)\" | sed 's,gcc/xgcc ,gcc/g++ ,'`\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_builddir = @glibcpp_builddir@\n+testsuite_flags_script = ${glibcpp_builddir}/scripts/testsuite_flags\n+CXX = `${testsuite_flags_script} --build-cxx`\n+\n CXXLINK = \\\n \tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs\\\n \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n \n+GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n INCLUDES = \\\n \t-nostdinc++ \\\n \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n@@ -177,11 +178,24 @@ libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n abi_check_SOURCES = abi_check.cc\n \n baseline_file = @baseline_file@\n-extract_symvers = @glibcpp_srcdir@/config/abi/extract_symvers\n+extract_symvers = @glibcpp_srcdir@/scripts/extract_symvers\n+\n+# These two special 'check-script' rules use the bash script 'check'\n+# to do testing. This script is not as portable as the dejagnu test\n+# harness, and is thus off by default. It does produce interesting\n+# output however, including various performance analysis items like\n+# compile time, execution time, and binary size.\n+check_survey = ${glibcpp_builddir}/scripts/check_survey\n+\n+# Runs the testsuite/performance tests.  \n+# Some of these tests create large (~75MB) files, allocate huge\n+# ammounts of memory, or otherwise tie up machine resources. Thus,\n+# running this is off by default.\n+check_performance = ${glibcpp_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check \n+\t     testsuite_* site.exp abi_check baseline_symbols\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n@@ -510,6 +524,16 @@ new-abi-baseline:\n @GLIBCPP_TEST_ABI_TRUE@\t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file})\n @GLIBCPP_TEST_ABI_FALSE@check-abi:\n @GLIBCPP_TEST_ABI_FALSE@check-abi-verbose:\n+check-script: ${check_survey}\n+\t-@(chmod + ${check_survey}; \\\n+\t  ${check_survey} 0)\n+\n+check-script-install: ${check_survey}\n+\t-@(chmod + ${check_survey}; \\\n+\t  ${check_survey} 0)\n+check-performance: ${check_performance}\n+\t-@(chmod + ${check_performance}; \\\n+\t  ${check_performance} ${glibcpp_srcdir} ${glibcpp_builddir})\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "e9722ac660eb618b4aa2ffd7beec51e47633354a", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=0676e9308d8a96b0cefa5d59f2c8aa360e3cbf67", "patch": "@@ -110,7 +110,7 @@ proc libstdc++-v3-init { args } {\n       set includes \"-I./\"\n     } else {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n-        set flags_file \"${blddir}/testsuite_flags\"\n+        set flags_file \"${blddir}/scripts/testsuite_flags\"\n         if { [file exists $flags_file] } {\n             set cxx [exec sh $flags_file --build-cxx]\n             set cxxflags [exec sh $flags_file --cxxflags]"}]}