{"sha": "bf291a4330d62bbe5b5ab6029d55216362d0dce9", "node_id": "C_kwDOANBUbNoAKGJmMjkxYTQzMzBkNjJiYmU1YjVhYjYwMjlkNTUyMTYzNjJkMGRjZTk", "commit": {"author": {"name": "chenglulu", "email": "chenglulu@loongson.cn", "date": "2021-11-27T07:05:47Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-03-29T09:43:35Z"}, "message": "LoongArch Port: libgcc\n\n2022-03-29  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Lulu Cheng  <chenglulu@loongson.cn>\n\nlibgcc/ChangeLog:\n\n\t* config/loongarch/crtfastmath.c: New file.\n\t* config/loongarch/linux-unwind.h: Like wise.\n\t* config/loongarch/sfp-machine.h: Like wise.\n\t* config/loongarch/t-crtstuff: Like wise.\n\t* config/loongarch/t-loongarch: Like wise.\n\t* config/loongarch/t-loongarch64: Like wise.\n\t* config/loongarch/t-softfp-tf: Like wise.\n\t* config.host: Add LoongArch tuples.\n\t* configure.ac: Add LoongArch support.", "tree": {"sha": "6b380b3f047886a07c466e1b7a4ac312e6655275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b380b3f047886a07c466e1b7a4ac312e6655275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf291a4330d62bbe5b5ab6029d55216362d0dce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf291a4330d62bbe5b5ab6029d55216362d0dce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf291a4330d62bbe5b5ab6029d55216362d0dce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf291a4330d62bbe5b5ab6029d55216362d0dce9/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e60c24caa1ca27e9360ecea605db219a5c951c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e60c24caa1ca27e9360ecea605db219a5c951c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e60c24caa1ca27e9360ecea605db219a5c951c1"}], "stats": {"total": 330, "additions": 328, "deletions": 2}, "files": [{"sha": "8c56fcae5d2fdfcc8d1f9b2614f0c41ad44f258f", "filename": "libgcc/config.host", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -138,6 +138,22 @@ hppa*-*-*)\n lm32*-*-*)\n \tcpu_type=lm32\n \t;;\n+loongarch*-*-*)\n+\tcpu_type=loongarch\n+\ttmake_file=\"loongarch/t-loongarch\"\n+\tif test \"${libgcc_cv_loongarch_hard_float}\" = yes; then\n+\t\ttmake_file=\"${tmake_file} t-hardfp-sfdf t-hardfp\"\n+\telse\n+\t\ttmake_file=\"${tmake_file} t-softfp-sfdf\"\n+\tfi\n+\tif test \"${ac_cv_sizeof_long_double}\" = 16; then\n+\t\ttmake_file=\"${tmake_file} loongarch/t-softfp-tf\"\n+\tfi\n+\tif test \"${host_address}\" = 64; then\n+\t\ttmake_file=\"${tmake_file} loongarch/t-loongarch64\"\n+\tfi\n+\ttmake_file=\"${tmake_file} t-softfp\"\n+\t;;\n m32r*-*-*)\n         cpu_type=m32r\n         ;;\n@@ -925,7 +941,17 @@ lm32-*-rtems*)\n lm32-*-uclinux*)\n         extra_parts=\"$extra_parts crtbegin.o crtendS.o crtbeginT.o\"\n         tmake_file=\"lm32/t-lm32 lm32/t-uclinux t-libgcc-pic t-softfp-sfdf t-softfp\"\n-\t;;\t\n+\t;;\n+loongarch*-*-linux*)\n+\textra_parts=\"$extra_parts crtfastmath.o\"\n+\ttmake_file=\"${tmake_file} t-crtfm loongarch/t-crtstuff\"\n+\tcase ${host} in\n+\t  *)\n+\t    tmake_file=\"${tmake_file} t-slibgcc-libgcc\"\n+\t    ;;\n+\tesac\n+\tmd_unwind_header=loongarch/linux-unwind.h\n+\t;;\n m32r-*-elf*)\n \ttmake_file=\"$tmake_file m32r/t-m32r t-fdpbit\"\n \textra_parts=\"$extra_parts crtinit.o crtfini.o\""}, {"sha": "52b0d6da08755bbc41296a91773900c8ae6038c9", "filename": "libgcc/config/loongarch/crtfastmath.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Fcrtfastmath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Fcrtfastmath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Fcrtfastmath.c?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,52 @@\n+/* Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+   Based on MIPS target for GNU compiler.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License\n+and a copy of the GCC Runtime Library Exception along with this\n+program; see the files COPYING3 and COPYING.RUNTIME respectively.\n+If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __loongarch_hard_float\n+\n+/* Rounding control.  */\n+#define _FPU_RC_NEAREST 0x000     /* RECOMMENDED.  */\n+#define _FPU_RC_ZERO    0x100\n+#define _FPU_RC_UP      0x200\n+#define _FPU_RC_DOWN    0x300\n+\n+/* Enable interrupts for IEEE exceptions.  */\n+#define _FPU_IEEE     0x0000001F\n+\n+/* Macros for accessing the hardware control word.  */\n+#define _FPU_GETCW(cw) __asm__ volatile (\"movfcsr2gr %0,$r0\" : \"=r\" (cw))\n+#define _FPU_SETCW(cw) __asm__ volatile (\"movgr2fcsr $r0,%0\" : : \"r\" (cw))\n+\n+static void __attribute__((constructor))\n+set_fast_math (void)\n+{\n+  unsigned int fcr;\n+\n+  /* Flush to zero, round to nearest, IEEE exceptions disabled.  */\n+  fcr = _FPU_RC_NEAREST;\n+\n+  _FPU_SETCW (fcr);\n+}\n+\n+#endif /* __loongarch_hard_float  */"}, {"sha": "89c168c827294ef640cb872b6b57fb6de2b60470", "filename": "libgcc/config/loongarch/linux-unwind.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Flinux-unwind.h?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,80 @@\n+/* DWARF2 EH unwinding support for LoongArch Linux.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef inhibit_libc\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#include <signal.h>\n+#include <sys/syscall.h>\n+#include <sys/ucontext.h>\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR loongarch_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+loongarch_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t\t_Unwind_FrameState *fs)\n+{\n+  u_int32_t *pc = (u_int32_t *) context->ra;\n+  struct sigcontext *sc;\n+  _Unwind_Ptr new_cfa;\n+  int i;\n+\n+  /* 03822c0b li.d a7, 0x8b (sigreturn)  */\n+  /* 002b0000 syscall 0  */\n+  if (pc[1] != 0x002b0000)\n+    return _URC_END_OF_STACK;\n+  if (pc[0] == 0x03822c0b)\n+    {\n+      struct rt_sigframe\n+      {\n+\tsiginfo_t info;\n+\tucontext_t uc;\n+      } *rt_ = context->cfa;\n+      sc = (struct sigcontext *) (void *) &rt_->uc.uc_mcontext;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = (_Unwind_Ptr) sc;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n+  fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i].loc.offset = (_Unwind_Ptr) & (sc->sc_regs[i]) - new_cfa;\n+    }\n+\n+  fs->signal_frame = 1;\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+    = REG_SAVED_VAL_OFFSET;\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n+    = (_Unwind_Ptr) (sc->sc_pc) - new_cfa;\n+  fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n+\n+  return _URC_NO_REASON;\n+}\n+#endif"}, {"sha": "c81be71815e9fbec5433365cfee6fa875a463a73", "filename": "libgcc/config/loongarch/sfp-machine.h", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Fsfp-machine.h?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,152 @@\n+/* softfp machine description for LoongArch.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __loongarch64\n+#define _FP_W_TYPE_SIZE 64\n+#define _FP_W_TYPE unsigned long long\n+#define _FP_WS_TYPE signed long long\n+#define _FP_I_TYPE long long\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+#define TI_BITS (__CHAR_BIT__ * (int) sizeof (TItype))\n+\n+#define _FP_MUL_MEAT_S(R, X, Y) \\\n+  _FP_MUL_MEAT_1_wide (_FP_WFRACBITS_S, R, X, Y, umul_ppmm)\n+#define _FP_MUL_MEAT_D(R, X, Y) \\\n+  _FP_MUL_MEAT_1_wide (_FP_WFRACBITS_D, R, X, Y, umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R, X, Y) \\\n+  _FP_MUL_MEAT_2_wide (_FP_WFRACBITS_Q, R, X, Y, umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R, X, Y) _FP_DIV_MEAT_1_udiv_norm (S, R, X, Y)\n+#define _FP_DIV_MEAT_D(R, X, Y) _FP_DIV_MEAT_1_udiv_norm (D, R, X, Y)\n+#define _FP_DIV_MEAT_Q(R, X, Y) _FP_DIV_MEAT_2_udiv (Q, R, X, Y)\n+\n+#define _FP_NANFRAC_S ((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D ((_FP_QNANBIT_D << 1) - 1)\n+#define _FP_NANFRAC_Q ((_FP_QNANBIT_Q << 1) - 1), -1\n+#else\n+#define _FP_W_TYPE_SIZE 32\n+#define _FP_W_TYPE unsigned int\n+#define _FP_WS_TYPE signed int\n+#define _FP_I_TYPE int\n+\n+#define _FP_MUL_MEAT_S(R, X, Y) \\\n+  _FP_MUL_MEAT_1_wide (_FP_WFRACBITS_S, R, X, Y, umul_ppmm)\n+#define _FP_MUL_MEAT_D(R, X, Y) \\\n+  _FP_MUL_MEAT_2_wide (_FP_WFRACBITS_D, R, X, Y, umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R, X, Y) \\\n+  _FP_MUL_MEAT_4_wide (_FP_WFRACBITS_Q, R, X, Y, umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R, X, Y) _FP_DIV_MEAT_1_udiv_norm (S, R, X, Y)\n+#define _FP_DIV_MEAT_D(R, X, Y) _FP_DIV_MEAT_2_udiv (D, R, X, Y)\n+#define _FP_DIV_MEAT_Q(R, X, Y) _FP_DIV_MEAT_4_udiv (Q, R, X, Y)\n+\n+#define _FP_NANFRAC_S ((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D ((_FP_QNANBIT_D << 1) - 1), -1\n+#define _FP_NANFRAC_Q ((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#endif\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match __libgcc_cmp_return__ in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define _FP_NANSIGN_S 0\n+#define _FP_NANSIGN_D 0\n+#define _FP_NANSIGN_Q 0\n+\n+#define _FP_KEEPNANFRACP 1\n+#define _FP_QNANNEGATEDP 0\n+\n+/* NaN payloads should be preserved for NAN2008.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP) \\\n+  do \\\n+    { \\\n+      R##_s = X##_s; \\\n+      _FP_FRAC_COPY_##wc (R, X); \\\n+      R##_c = FP_CLS_NAN; \\\n+    } \\\n+  while (0)\n+\n+#ifdef __loongarch_hard_float\n+#define FP_EX_INVALID 0x100000\n+#define FP_EX_DIVZERO 0x080000\n+#define FP_EX_OVERFLOW 0x040000\n+#define FP_EX_UNDERFLOW 0x020000\n+#define FP_EX_INEXACT 0x010000\n+#define FP_EX_ALL \\\n+  (FP_EX_INVALID | FP_EX_DIVZERO | FP_EX_OVERFLOW | FP_EX_UNDERFLOW \\\n+   | FP_EX_INEXACT)\n+\n+#define FP_EX_ENABLE_SHIFT 16\n+#define FP_EX_CAUSE_SHIFT 8\n+\n+#define FP_RND_NEAREST 0x000\n+#define FP_RND_ZERO 0x100\n+#define FP_RND_PINF 0x200\n+#define FP_RND_MINF 0x300\n+#define FP_RND_MASK 0x300\n+\n+#define _FP_DECL_EX \\\n+  unsigned long int _fcsr __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE \\\n+  do \\\n+    { \\\n+      _fcsr = __builtin_loongarch_movfcsr2gr (0); \\\n+    } \\\n+  while (0)\n+\n+#define FP_ROUNDMODE (_fcsr & FP_RND_MASK)\n+\n+#define FP_TRAPPING_EXCEPTIONS ((_fcsr << FP_EX_ENABLE_SHIFT) & FP_EX_ALL)\n+\n+#define FP_HANDLE_EXCEPTIONS \\\n+  do \\\n+    { \\\n+      _fcsr &= ~(FP_EX_ALL << FP_EX_CAUSE_SHIFT); \\\n+      _fcsr |= _fex | (_fex << FP_EX_CAUSE_SHIFT); \\\n+      __builtin_loongarch_movgr2fcsr (0, _fcsr); \\\n+    } \\\n+  while (0)\n+\n+#else\n+#define FP_EX_INVALID (1 << 4)\n+#define FP_EX_DIVZERO (1 << 3)\n+#define FP_EX_OVERFLOW (1 << 2)\n+#define FP_EX_UNDERFLOW (1 << 1)\n+#define FP_EX_INEXACT (1 << 0)\n+#endif\n+\n+#define _FP_TININESS_AFTER_ROUNDING 1\n+\n+#define __LITTLE_ENDIAN 1234\n+\n+#define __BYTE_ORDER __LITTLE_ENDIAN\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+#define strong_alias(name, aliasname) _strong_alias (name, aliasname)\n+#define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "b8c36eb66b78ea6e46e799ea585e0232be5d7190", "filename": "libgcc/config/loongarch/t-crtstuff", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-crtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-crtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Ft-crtstuff?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,5 @@\n+# -fasynchronous-unwind-tables is on by default for LoongArch.\n+# We turn it off for crt*.o because it would make __EH_FRAME_BEGIN__ point\n+# to .eh_frame data from crtbeginT.o instead of the user-defined object\n+# during static linking.\n+CRTSTUFF_T_CFLAGS += -fno-omit-frame-pointer -fno-asynchronous-unwind-tables"}, {"sha": "2a7dbf6ca83a214d241b3ce969604faf1ea6da6e", "filename": "libgcc/config/loongarch/t-loongarch", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-loongarch", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-loongarch", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Ft-loongarch?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,7 @@\n+LIB2_SIDITI_CONV_FUNCS = yes\n+\n+softfp_float_modes :=\n+softfp_int_modes := si di\n+softfp_extensions :=\n+softfp_truncations :=\n+softfp_exclude_libgcc2 := n"}, {"sha": "a1e3513e2884ffa856cc2d41670f150a27e87553", "filename": "libgcc/config/loongarch/t-loongarch64", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-loongarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-loongarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Ft-loongarch64?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1 @@\n+softfp_int_modes += ti"}, {"sha": "306677b12554597d9bb96c6aaa0b3391762cdf38", "filename": "libgcc/config/loongarch/t-softfp-tf", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-softfp-tf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfig%2Floongarch%2Ft-softfp-tf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Floongarch%2Ft-softfp-tf?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -0,0 +1,3 @@\n+softfp_float_modes += tf\n+softfp_extensions += sftf dftf\n+softfp_truncations += tfsf tfdf"}, {"sha": "2fc9d5d7c93e91842d96e5195d29c53c6a015c49", "filename": "libgcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf291a4330d62bbe5b5ab6029d55216362d0dce9/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=bf291a4330d62bbe5b5ab6029d55216362d0dce9", "patch": "@@ -324,7 +324,7 @@ AC_CACHE_CHECK([whether assembler supports CFI directives], [libgcc_cv_cfi],\n # word size rather than the address size.\n cat > conftest.c <<EOF\n #if defined(__x86_64__) || (!defined(__i386__) && defined(__LP64__)) \\\n-    || defined(__mips64)\n+    || defined(__mips64) || defined(__loongarch64)\n host_address=64\n #else\n host_address=32"}]}