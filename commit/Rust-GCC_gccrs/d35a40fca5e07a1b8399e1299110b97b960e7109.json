{"sha": "d35a40fca5e07a1b8399e1299110b97b960e7109", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM1YTQwZmNhNWUwN2ExYjgzOTllMTI5OTExMGI5N2I5NjBlNzEwOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-11-11T17:59:54Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-11-11T17:59:54Z"}, "message": "re PR c/24644 (gcc-4.1 compiled ppc64 kernels do not boot)\n\n        PR 24644\n        * common.opt (Wvolatile-register-var): New.\n        * varasm.c (make_decl_rtl): Only emit warning when option\n        specified.  Clarify warning message.\n        * doc/invoke.texi (Wvolatile-register-var): Document new option.\n\n        * doc/md.texi (copysign): Document standard named pattern.\n\nFrom-SVN: r106791", "tree": {"sha": "579ca01ef316f3815821b5b5fc7a82d62fcb1aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579ca01ef316f3815821b5b5fc7a82d62fcb1aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d35a40fca5e07a1b8399e1299110b97b960e7109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35a40fca5e07a1b8399e1299110b97b960e7109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35a40fca5e07a1b8399e1299110b97b960e7109", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35a40fca5e07a1b8399e1299110b97b960e7109/comments", "author": null, "committer": null, "parents": [{"sha": "51a641fdb2ae830bce646ad72ab9919a269fb9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a641fdb2ae830bce646ad72ab9919a269fb9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a641fdb2ae830bce646ad72ab9919a269fb9d3"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "2d125ef96d853b015fb44388b6f6dbfd8b02a5f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d35a40fca5e07a1b8399e1299110b97b960e7109", "patch": "@@ -1,3 +1,13 @@\n+2005-11-11  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR 24644\n+\t* common.opt (Wvolatile-register-var): New.\n+\t* varasm.c (make_decl_rtl): Only emit warning when option\n+\tspecified.  Clarify warning message.\n+\t* doc/invoke.texi (Wvolatile-register-var): Document new option.\n+\n+\t* doc/md.texi (copysign): Document standard named pattern.\n+\n 2005-11-11  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/bfin.c (bfin_expand_strmov): Correctly move the trailing"}, {"sha": "6ac77fdddee29ee15a31ffac909ee27f3d01124d", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d35a40fca5e07a1b8399e1299110b97b960e7109", "patch": "@@ -173,6 +173,10 @@ Wunused-variable\n Common Var(warn_unused_variable)\n Warn when a variable is unused\n \n+Wvolatile-register-var\n+Common Var(warn_register_var)\n+Warn when a register variable is declared volatile\n+\n aux-info\n Common Separate\n -aux-info <file>\tEmit declaration information into <file>"}, {"sha": "bbc747863030a76f11a9272cdeec572e5a01191d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d35a40fca5e07a1b8399e1299110b97b960e7109", "patch": "@@ -245,7 +245,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n -Wunused-value  -Wunused-variable  -Wvariadic-macros @gol\n--Wwrite-strings}\n+-Wvolatile-register-var  -Wwrite-strings}\n \n @item C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n@@ -3370,6 +3370,13 @@ Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU\n alternate syntax when in pedantic ISO C99 mode.  This is default.\n To inhibit the warning messages, use @option{-Wno-variadic-macros}.\n \n+@item -Wvolatile-register-var\n+@opindex Wvolatile-register-var\n+@opindex Wno-volatile-register-var\n+Warn if a register variable is declared volatile.  The volatile\n+modifier does not inhibit all optimizations that may eliminate reads\n+and/or writes to register variables.\n+\n @item -Wdisabled-optimization\n @opindex Wdisabled-optimization\n Warn if a requested optimization pass is disabled.  This warning does"}, {"sha": "087f4441cc83ddbf69b069d8c0f87271305ccf3a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=d35a40fca5e07a1b8399e1299110b97b960e7109", "patch": "@@ -3306,6 +3306,16 @@ corresponds to the C data type @code{double} and the @code{rintf}\n built-in function uses the mode which corresponds to the C data\n type @code{float}.\n \n+@cindex @code{copysign@var{m}3} instruction pattern\n+@item @samp{copysign@var{m}3}\n+Store a value with the magnitude of operand 1 and the sign of operand\n+2 into operand 0.\n+\n+The @code{copysign} built-in function of C always uses the mode which\n+corresponds to the C data type @code{double} and the @code{copysignf}\n+built-in function uses the mode which corresponds to the C data\n+type @code{float}.\n+\n @cindex @code{ffs@var{m}2} instruction pattern\n @item @samp{ffs@var{m}2}\n Store into operand 0 one plus the index of the least significant 1-bit"}, {"sha": "ad4d060a29faf1ab3e9a44c1fd524a35472b463d", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35a40fca5e07a1b8399e1299110b97b960e7109/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d35a40fca5e07a1b8399e1299110b97b960e7109", "patch": "@@ -955,8 +955,9 @@ make_decl_rtl (tree decl)\n \t      error (\"global register variable has initial value\");\n \t    }\n \t  if (TREE_THIS_VOLATILE (decl))\n-\t    warning (0, \"volatile register variables don%'t \"\n-\t\t     \"work as you might wish\");\n+\t    warning (OPT_Wvolatile_register_var,\n+\t\t     \"optimization may eliminate reads and/or \"\n+\t\t     \"writes to register variables\");\n \n \t  /* If the user specified one of the eliminables registers here,\n \t     e.g., FRAME_POINTER_REGNUM, we don't want to get this variable"}]}