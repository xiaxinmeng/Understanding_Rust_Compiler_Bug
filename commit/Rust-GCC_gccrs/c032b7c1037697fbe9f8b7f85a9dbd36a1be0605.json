{"sha": "c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "node_id": "C_kwDOANBUbNoAKGMwMzJiN2MxMDM3Njk3ZmJlOWY4YjdmODVhOWRiZDM2YTFiZTA2MDU", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-03T10:04:20Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-11T07:38:21Z"}, "message": "converter: Return a vector to const pointers\n\nWe do not need mutability on the output vector. Also add an accumulator\nfor punct tokens.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-token-converter.cc (from_tokenstream): Add vector\n\tfor joined punct accumulation.\n\t(from_ident): Accept const pointer vector.\n\t(from_literal): Likewise.\n\t(from_punct): Likewise.\n\t(from_group): Likewise.\n\t(from_tokentree): Likewise.\n\t(convert): Likewise.\n\t* util/rust-token-converter.h (convert): Likewise.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "543b0f4593599371254e7a108b4e8275dd1c8460", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543b0f4593599371254e7a108b4e8275dd1c8460"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24227d377fea090cf019a40f14308b52bc5af82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24227d377fea090cf019a40f14308b52bc5af82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24227d377fea090cf019a40f14308b52bc5af82"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "468769364bb880f8977eab95b4380e0121abf356", "filename": "gcc/rust/util/rust-token-converter.cc", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605/gcc%2Frust%2Futil%2Frust-token-converter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605/gcc%2Frust%2Futil%2Frust-token-converter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.cc?ref=c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "patch": "@@ -299,18 +299,23 @@ convert (std::vector<TokenPtr> tokens)\n \n static void\n from_tokenstream (const ProcMacro::TokenStream &ts,\n-\t\t  std::vector<TokenPtr> &result);\n+\t\t  std::vector<const_TokenPtr> &result);\n \n static void\n-from_ident (ProcMacro::Ident ident, std::vector<TokenPtr> &result)\n+from_ident (ProcMacro::Ident ident, std::vector<const_TokenPtr> &result)\n {}\n \n static void\n-from_literal (ProcMacro::Literal literal, std::vector<TokenPtr> &result)\n+from_literal (ProcMacro::Literal literal, std::vector<const_TokenPtr> &result)\n {}\n \n+/**\n+ *\n+ * @param acc Reference to an accumulator for joined Punct.\n+ */\n static void\n-from_punct (ProcMacro::Punct punct, std::vector<TokenPtr> &result)\n+from_punct (const ProcMacro::Punct &punct, std::vector<std::uint32_t> &acc,\n+\t    std::vector<const_TokenPtr> &result)\n {}\n \n /**\n@@ -321,7 +326,7 @@ from_punct (ProcMacro::Punct punct, std::vector<TokenPtr> &result)\n  * @param result Reference to the vector tokens should be appended to.\n  */\n static void\n-from_group (const ProcMacro::Group &g, std::vector<TokenPtr> &result)\n+from_group (const ProcMacro::Group &g, std::vector<const_TokenPtr> &result)\n {\n   switch (g.delimiter)\n     {\n@@ -352,10 +357,13 @@ from_group (const ProcMacro::Group &g, std::vector<TokenPtr> &result)\n  * Dispatch TokenTree's conversion to its inner type depending on its tag.\n  *\n  * @param tt Reference to the TokenTree.\n+ * @param punct_accumulator Reference to an accumulator for joined Punct.\n  * @param result Reference to the vector tokens should be appended to.\n  */\n static void\n-from_tokentree (const ProcMacro::TokenTree &tt, std::vector<TokenPtr> &result)\n+from_tokentree (const ProcMacro::TokenTree &tt,\n+\t\tstd::vector<std::uint32_t> &punct_accumulator,\n+\t\tstd::vector<const_TokenPtr> &result)\n {\n   switch (tt.tag)\n     {\n@@ -366,7 +374,7 @@ from_tokentree (const ProcMacro::TokenTree &tt, std::vector<TokenPtr> &result)\n       from_ident (tt.payload.ident, result);\n       break;\n     case ProcMacro::PUNCT:\n-      from_punct (tt.payload.punct, result);\n+      from_punct (tt.payload.punct, punct_accumulator, result);\n       break;\n     case ProcMacro::LITERAL:\n       from_literal (tt.payload.literal, result);\n@@ -384,18 +392,19 @@ from_tokentree (const ProcMacro::TokenTree &tt, std::vector<TokenPtr> &result)\n  */\n static void\n from_tokenstream (const ProcMacro::TokenStream &ts,\n-\t\t  std::vector<TokenPtr> &result)\n+\t\t  std::vector<const_TokenPtr> &result)\n {\n+  std::vector<std::uint32_t> punct_accumulator;\n   for (std::uint64_t i = 0; i < ts.size; i++)\n     {\n-      from_tokentree (ts.data[i], result);\n+      from_tokentree (ts.data[i], punct_accumulator, result);\n     }\n }\n \n-std::vector<TokenPtr>\n+std::vector<const_TokenPtr>\n convert (ProcMacro::TokenStream ts)\n {\n-  std::vector<TokenPtr> result;\n+  std::vector<const_TokenPtr> result;\n   from_tokenstream (ts, result);\n   return result;\n }"}, {"sha": "cb8b3dbfa0921afa87dc7c821aa21df85915c693", "filename": "gcc/rust/util/rust-token-converter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605/gcc%2Frust%2Futil%2Frust-token-converter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c032b7c1037697fbe9f8b7f85a9dbd36a1be0605/gcc%2Frust%2Futil%2Frust-token-converter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.h?ref=c032b7c1037697fbe9f8b7f85a9dbd36a1be0605", "patch": "@@ -26,7 +26,7 @@ namespace Rust {\n ProcMacro::TokenStream\n convert (std::vector<TokenPtr> tokens);\n \n-std::vector<TokenPtr>\n+std::vector<const_TokenPtr>\n convert (ProcMacro::TokenStream ts);\n \n } // namespace Rust"}]}