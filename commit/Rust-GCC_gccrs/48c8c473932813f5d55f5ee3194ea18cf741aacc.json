{"sha": "48c8c473932813f5d55f5ee3194ea18cf741aacc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjOGM0NzM5MzI4MTNmNWQ1NWY1ZWUzMTk0ZWExOGNmNzQxYWFjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:30:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:30:55Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Set_Convention_From_Pragma): Cleanup code for\n\tconvention Stdcall, which has a number of exceptions. Convention\n\tis legal on a component declaration whose type is an anonymous\n\taccess to subprogram.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb: sem_ch4.adb Various reformattings.\n\t(Try_One_Prefix_Interpretation): Use the base type when dealing\n\twith a subtype created for purposes of constraining a private\n\ttype with discriminants.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Private_Extension): new attribute.\n\t* warnsw.ads, warnsw.adb (All_Warnings): Set warning on late\n\tdispatching primitives (Restore_Warnings): Restore warning on\n\tlate dispatching primitives (Save_Warnings): Save warning on late\n\tdispatching primitives (Do_Warning_Switch): Use -gnatw.j/-gnatw.J\n\tto enable/disable this warning.\n\t(WA_Warnings): Set warning on late dispatching primitives.\n\t* sem_ch3.adb (Analyze_Private_Extension_Declaration): Remember\n\tthat its parent type has a private extension.\n\t* sem_disp.adb (Warn_On_Late_Primitive_After_Private_Extension):\n\tNew subprogram.\n\t* usage.adb: Document -gnatw.j and -gnatw.J.\n\nFrom-SVN: r247176", "tree": {"sha": "9b2b335734036bcb21d47fd4633dcad2f7b9ae33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b2b335734036bcb21d47fd4633dcad2f7b9ae33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c8c473932813f5d55f5ee3194ea18cf741aacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c8c473932813f5d55f5ee3194ea18cf741aacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c8c473932813f5d55f5ee3194ea18cf741aacc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c8c473932813f5d55f5ee3194ea18cf741aacc/comments", "author": null, "committer": null, "parents": [{"sha": "94295b259310bb5a7a156f799cfc84e0eebbccdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94295b259310bb5a7a156f799cfc84e0eebbccdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94295b259310bb5a7a156f799cfc84e0eebbccdc"}], "stats": {"total": 393, "additions": 269, "deletions": 124}, "files": [{"sha": "3d5423ca86638b59bfab570289f0436abc5e507d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -1,3 +1,32 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Set_Convention_From_Pragma): Cleanup code for\n+\tconvention Stdcall, which has a number of exceptions. Convention\n+\tis legal on a component declaration whose type is an anonymous\n+\taccess to subprogram.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch4.adb: sem_ch4.adb Various reformattings.\n+\t(Try_One_Prefix_Interpretation): Use the base type when dealing\n+\twith a subtype created for purposes of constraining a private\n+\ttype with discriminants.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Private_Extension): new attribute.\n+\t* warnsw.ads, warnsw.adb (All_Warnings): Set warning on late\n+\tdispatching primitives (Restore_Warnings): Restore warning on\n+\tlate dispatching primitives (Save_Warnings): Save warning on late\n+\tdispatching primitives (Do_Warning_Switch): Use -gnatw.j/-gnatw.J\n+\tto enable/disable this warning.\n+\t(WA_Warnings): Set warning on late dispatching primitives.\n+\t* sem_ch3.adb (Analyze_Private_Extension_Declaration): Remember\n+\tthat its parent type has a private extension.\n+\t* sem_disp.adb (Warn_On_Late_Primitive_After_Private_Extension):\n+\tNew subprogram.\n+\t* usage.adb: Document -gnatw.j and -gnatw.J.\n+\n 2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb, checks.adb, sem_prag.adb, eval_fat.adb: Minor"}, {"sha": "118e09fde5cd7c6bf9a585e361849f52b164e27c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -619,7 +619,7 @@ package body Einfo is\n    --    Is_Underlying_Full_View         Flag298\n    --    Body_Needed_For_Inlining        Flag299\n \n-   --    (unused)                        Flag300\n+   --    Has_Private_Extension           Flag300\n    --    (unused)                        Flag301\n    --    (unused)                        Flag302\n    --    (unused)                        Flag303\n@@ -1818,6 +1818,12 @@ package body Einfo is\n       return Flag155 (Id);\n    end Has_Private_Declaration;\n \n+   function Has_Private_Extension (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Tagged_Type (Id));\n+      return Flag300 (Id);\n+   end Has_Private_Extension;\n+\n    function Has_Protected (Id : E) return B is\n    begin\n       return Flag271 (Base_Type (Id));\n@@ -4891,6 +4897,12 @@ package body Einfo is\n       Set_Flag155 (Id, V);\n    end Set_Has_Private_Declaration;\n \n+   procedure Set_Has_Private_Extension (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Tagged_Type (Id));\n+      Set_Flag300 (Id, V);\n+   end Set_Has_Private_Extension;\n+\n    procedure Set_Has_Protected (Id : E; V : B := True) is\n    begin\n       Set_Flag271 (Id, V);\n@@ -9363,6 +9375,7 @@ package body Einfo is\n       W (\"Has_Primitive_Operations\",        Flag120 (Id));\n       W (\"Has_Private_Ancestor\",            Flag151 (Id));\n       W (\"Has_Private_Declaration\",         Flag155 (Id));\n+      W (\"Has_Private_Extension\",           Flag300 (Id));\n       W (\"Has_Protected\",                   Flag271 (Id));\n       W (\"Has_Qualified_Name\",              Flag161 (Id));\n       W (\"Has_RACW\",                        Flag214 (Id));"}, {"sha": "dc63408bd49c494071064ed3ae53a7147dc4ab3c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -1972,6 +1972,11 @@ package Einfo is\n --       indicate if a full type declaration is a completion. Used for semantic\n --       checks in E.4(18) and elsewhere.\n \n+--    Has_Private_Extension (Flag300)\n+--       Defined in tagged types. Set to indicate that the tagged type has some\n+--       private extension. Used to report a warning on public primitives added\n+--       after defining its private extensions.\n+\n --    Has_Protected (Flag271) [base type only]\n --       Defined in all type entities. Set on protected types themselves, and\n --       also (recursively) on any composite type which has a component for\n@@ -6455,6 +6460,7 @@ package Einfo is\n    --    Has_Dispatch_Table                  (Flag220)  (base tagged type only)\n    --    Has_Pragma_Pack                     (Flag121)  (impl base type only)\n    --    Has_Private_Ancestor                (Flag151)\n+   --    Has_Private_Extension               (Flag300)\n    --    Has_Record_Rep_Clause               (Flag65)   (base type only)\n    --    Has_Static_Discriminants            (Flag211)  (subtype only)\n    --    Is_Class_Wide_Equivalent_Type       (Flag35)\n@@ -6485,6 +6491,7 @@ package Einfo is\n    --    Interfaces                          (Elist25)\n    --    Has_Completion                      (Flag26)\n    --    Has_Private_Ancestor                (Flag151)\n+   --    Has_Private_Extension               (Flag300)\n    --    Has_Record_Rep_Clause               (Flag65)   (base type only)\n    --    Is_Concurrent_Record_Type           (Flag20)\n    --    Is_Constrained                      (Flag12)\n@@ -7067,6 +7074,7 @@ package Einfo is\n    function Has_Primitive_Operations            (Id : E) return B;\n    function Has_Private_Ancestor                (Id : E) return B;\n    function Has_Private_Declaration             (Id : E) return B;\n+   function Has_Private_Extension               (Id : E) return B;\n    function Has_Protected                       (Id : E) return B;\n    function Has_Qualified_Name                  (Id : E) return B;\n    function Has_RACW                            (Id : E) return B;\n@@ -7751,6 +7759,7 @@ package Einfo is\n    procedure Set_Has_Primitive_Operations        (Id : E; V : B := True);\n    procedure Set_Has_Private_Ancestor            (Id : E; V : B := True);\n    procedure Set_Has_Private_Declaration         (Id : E; V : B := True);\n+   procedure Set_Has_Private_Extension           (Id : E; V : B := True);\n    procedure Set_Has_Protected                   (Id : E; V : B := True);\n    procedure Set_Has_Qualified_Name              (Id : E; V : B := True);\n    procedure Set_Has_RACW                        (Id : E; V : B := True);\n@@ -8549,6 +8558,7 @@ package Einfo is\n    pragma Inline (Has_Primitive_Operations);\n    pragma Inline (Has_Private_Ancestor);\n    pragma Inline (Has_Private_Declaration);\n+   pragma Inline (Has_Private_Extension);\n    pragma Inline (Has_Protected);\n    pragma Inline (Has_Qualified_Name);\n    pragma Inline (Has_RACW);\n@@ -9070,6 +9080,7 @@ package Einfo is\n    pragma Inline (Set_Has_Primitive_Operations);\n    pragma Inline (Set_Has_Private_Ancestor);\n    pragma Inline (Set_Has_Private_Declaration);\n+   pragma Inline (Set_Has_Private_Extension);\n    pragma Inline (Set_Has_Protected);\n    pragma Inline (Set_Has_Qualified_Name);\n    pragma Inline (Set_Has_RACW);"}, {"sha": "a40f64ec0f3025bc7a30b5b426edcff1d5935642", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -4897,6 +4897,12 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n+      --  Remember that its parent type has a private extension. Used to warn\n+      --  on public primitives of the parent type defined after its private\n+      --  extensions (see Check_Dispatching_Operation).\n+\n+      Set_Has_Private_Extension (Parent_Type);\n+\n    <<Leave>>\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, T);"}, {"sha": "7787d11afd09f5b8be7256fb354da885831ba975", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 112, "deletions": 114, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -8297,7 +8297,7 @@ package body Sem_Ch4 is\n       Loc            : constant Source_Ptr := Sloc (N);\n       Obj            : constant Node_Id    := Prefix (N);\n \n-      Subprog : constant Node_Id    :=\n+      Subprog : constant Node_Id :=\n                   Make_Identifier (Sloc (Selector_Name (N)),\n                     Chars => Chars (Selector_Name (N)));\n       --  Identifier on which possible interpretations will be collected\n@@ -8308,17 +8308,10 @@ package body Sem_Ch4 is\n \n       Actual          : Node_Id;\n       Candidate       : Entity_Id := Empty;\n-      New_Call_Node   : Node_Id := Empty;\n+      New_Call_Node   : Node_Id   := Empty;\n       Node_To_Replace : Node_Id;\n       Obj_Type        : Entity_Id := Etype (Obj);\n-      Success         : Boolean := False;\n-\n-      function Valid_Candidate\n-        (Success : Boolean;\n-         Call    : Node_Id;\n-         Subp    : Entity_Id) return Entity_Id;\n-      --  If the subprogram is a valid interpretation, record it, and add\n-      --  to the list of interpretations of Subprog. Otherwise return Empty.\n+      Success         : Boolean   := False;\n \n       procedure Complete_Object_Operation\n         (Call_Node       : Node_Id;\n@@ -8328,8 +8321,8 @@ package body Sem_Ch4 is\n       --  in the call, and complete the analysis of the call.\n \n       procedure Report_Ambiguity (Op : Entity_Id);\n-      --  If a prefixed procedure call is ambiguous, indicate whether the\n-      --  call includes an implicit dereference or an implicit 'Access.\n+      --  If a prefixed procedure call is ambiguous, indicate whether the call\n+      --  includes an implicit dereference or an implicit 'Access.\n \n       procedure Transform_Object_Operation\n         (Call_Node       : out Node_Id;\n@@ -8342,106 +8335,27 @@ package body Sem_Ch4 is\n       function Try_Class_Wide_Operation\n         (Call_Node       : Node_Id;\n          Node_To_Replace : Node_Id) return Boolean;\n-      --  Traverse all ancestor types looking for a class-wide subprogram\n-      --  for which the current operation is a valid non-dispatching call.\n+      --  Traverse all ancestor types looking for a class-wide subprogram for\n+      --  which the current operation is a valid non-dispatching call.\n \n       procedure Try_One_Prefix_Interpretation (T : Entity_Id);\n       --  If prefix is overloaded, its interpretation may include different\n-      --  tagged types, and we must examine the primitive operations and\n-      --  the class-wide operations of each in order to find candidate\n+      --  tagged types, and we must examine the primitive operations and the\n+      --  class-wide operations of each in order to find candidate\n       --  interpretations for the call as a whole.\n \n       function Try_Primitive_Operation\n         (Call_Node       : Node_Id;\n          Node_To_Replace : Node_Id) return Boolean;\n       --  Traverse the list of primitive subprograms looking for a dispatching\n-      --  operation for which the current node is a valid call .\n-\n-      ---------------------\n-      -- Valid_Candidate --\n-      ---------------------\n+      --  operation for which the current node is a valid call.\n \n       function Valid_Candidate\n         (Success : Boolean;\n          Call    : Node_Id;\n-         Subp    : Entity_Id) return Entity_Id\n-      is\n-         Arr_Type  : Entity_Id;\n-         Comp_Type : Entity_Id;\n-\n-      begin\n-         --  If the subprogram is a valid interpretation, record it in global\n-         --  variable Subprog, to collect all possible overloadings.\n-\n-         if Success then\n-            if Subp /= Entity (Subprog) then\n-               Add_One_Interp (Subprog, Subp, Etype (Subp));\n-            end if;\n-         end if;\n-\n-         --  If the call may be an indexed call, retrieve component type of\n-         --  resulting expression, and add possible interpretation.\n-\n-         Arr_Type  := Empty;\n-         Comp_Type := Empty;\n-\n-         if Nkind (Call) = N_Function_Call\n-           and then Nkind (Parent (N)) = N_Indexed_Component\n-           and then Needs_One_Actual (Subp)\n-         then\n-            if Is_Array_Type (Etype (Subp)) then\n-               Arr_Type := Etype (Subp);\n-\n-            elsif Is_Access_Type (Etype (Subp))\n-              and then Is_Array_Type (Designated_Type (Etype (Subp)))\n-            then\n-               Arr_Type := Designated_Type (Etype (Subp));\n-            end if;\n-         end if;\n-\n-         if Present (Arr_Type) then\n-\n-            --  Verify that the actuals (excluding the object) match the types\n-            --  of the indexes.\n-\n-            declare\n-               Actual : Node_Id;\n-               Index  : Node_Id;\n-\n-            begin\n-               Actual := Next (First_Actual (Call));\n-               Index  := First_Index (Arr_Type);\n-               while Present (Actual) and then Present (Index) loop\n-                  if not Has_Compatible_Type (Actual, Etype (Index)) then\n-                     Arr_Type := Empty;\n-                     exit;\n-                  end if;\n-\n-                  Next_Actual (Actual);\n-                  Next_Index  (Index);\n-               end loop;\n-\n-               if No (Actual)\n-                  and then No (Index)\n-                  and then Present (Arr_Type)\n-               then\n-                  Comp_Type := Component_Type (Arr_Type);\n-               end if;\n-            end;\n-\n-            if Present (Comp_Type)\n-              and then Etype (Subprog) /= Comp_Type\n-            then\n-               Add_One_Interp (Subprog, Subp, Comp_Type);\n-            end if;\n-         end if;\n-\n-         if Etype (Call) /= Any_Type then\n-            return Subp;\n-         else\n-            return Empty;\n-         end if;\n-      end Valid_Candidate;\n+         Subp    : Entity_Id) return Entity_Id;\n+      --  If the subprogram is a valid interpretation, record it, and add to\n+      --  the list of interpretations of Subprog. Otherwise return Empty.\n \n       -------------------------------\n       -- Complete_Object_Operation --\n@@ -8689,7 +8603,7 @@ package body Sem_Ch4 is\n             if Nkind (Parent_Node) = N_Procedure_Call_Statement then\n                Call_Node :=\n                  Make_Procedure_Call_Statement (Loc,\n-                   Name => New_Copy (Subprog),\n+                   Name                   => New_Copy (Subprog),\n                    Parameter_Associations => Actuals);\n \n             else\n@@ -8959,20 +8873,20 @@ package body Sem_Ch4 is\n       -----------------------------------\n \n       procedure Try_One_Prefix_Interpretation (T : Entity_Id) is\n-\n+         Prev_Obj_Type : constant Entity_Id := Obj_Type;\n          --  If the interpretation does not have a valid candidate type,\n          --  preserve current value of Obj_Type for subsequent errors.\n \n-         Prev_Obj_Type : constant Entity_Id := Obj_Type;\n-\n       begin\n          Obj_Type := T;\n \n          if Is_Access_Type (Obj_Type) then\n             Obj_Type := Designated_Type (Obj_Type);\n          end if;\n \n-         if Ekind (Obj_Type) = E_Private_Subtype then\n+         if Ekind_In (Obj_Type, E_Private_Subtype,\n+                                E_Record_Subtype_With_Private)\n+         then\n             Obj_Type := Base_Type (Obj_Type);\n          end if;\n \n@@ -8992,14 +8906,12 @@ package body Sem_Ch4 is\n          end if;\n \n          --  If the object is not tagged, or the type is still an incomplete\n-         --  type, this is not a prefixed call.\n+         --  type, this is not a prefixed call. Restore the previous type as\n+         --  the current one is not a legal candidate.\n \n          if not Is_Tagged_Type (Obj_Type)\n            or else Is_Incomplete_Type (Obj_Type)\n          then\n-\n-            --  Restore previous type if current one is not legal candidate\n-\n             Obj_Type := Prev_Obj_Type;\n             return;\n          end if;\n@@ -9022,7 +8934,7 @@ package body Sem_Ch4 is\n             --  primitive. This check must be done even if a candidate\n             --  was found in order to report ambiguous calls.\n \n-            if not (Prim_Result) then\n+            if not Prim_Result then\n                CW_Result :=\n                  Try_Class_Wide_Operation\n                    (Call_Node       => New_Call_Node,\n@@ -9360,19 +9272,19 @@ package body Sem_Ch4 is\n          if Is_Concurrent_Type (Obj_Type) then\n             if Present (Corresponding_Record_Type (Obj_Type)) then\n                Corr_Type := Base_Type (Corresponding_Record_Type (Obj_Type));\n-               Elmt := First_Elmt (Primitive_Operations (Corr_Type));\n+               Elmt      := First_Elmt (Primitive_Operations (Corr_Type));\n             else\n                Corr_Type := Obj_Type;\n-               Elmt := First_Elmt (Collect_Generic_Type_Ops (Obj_Type));\n+               Elmt      := First_Elmt (Collect_Generic_Type_Ops (Obj_Type));\n             end if;\n \n          elsif not Is_Generic_Type (Obj_Type) then\n             Corr_Type := Obj_Type;\n-            Elmt := First_Elmt (Extended_Primitive_Ops (Obj_Type));\n+            Elmt      := First_Elmt (Extended_Primitive_Ops (Obj_Type));\n \n          else\n             Corr_Type := Obj_Type;\n-            Elmt := First_Elmt (Collect_Generic_Type_Ops (Obj_Type));\n+            Elmt      := First_Elmt (Collect_Generic_Type_Ops (Obj_Type));\n          end if;\n \n          while Present (Elmt) loop\n@@ -9383,7 +9295,7 @@ package body Sem_Ch4 is\n               and then Valid_First_Argument_Of (Prim_Op)\n               and then\n                 (Nkind (Call_Node) = N_Function_Call)\n-                    =\n+                   =\n                 (Ekind (Prim_Op) = E_Function)\n             then\n                --  Ada 2005 (AI-251): If this primitive operation corresponds\n@@ -9464,6 +9376,92 @@ package body Sem_Ch4 is\n          return Present (Matching_Op);\n       end Try_Primitive_Operation;\n \n+      ---------------------\n+      -- Valid_Candidate --\n+      ---------------------\n+\n+      function Valid_Candidate\n+        (Success : Boolean;\n+         Call    : Node_Id;\n+         Subp    : Entity_Id) return Entity_Id\n+      is\n+         Arr_Type  : Entity_Id;\n+         Comp_Type : Entity_Id;\n+\n+      begin\n+         --  If the subprogram is a valid interpretation, record it in global\n+         --  variable Subprog, to collect all possible overloadings.\n+\n+         if Success then\n+            if Subp /= Entity (Subprog) then\n+               Add_One_Interp (Subprog, Subp, Etype (Subp));\n+            end if;\n+         end if;\n+\n+         --  If the call may be an indexed call, retrieve component type of\n+         --  resulting expression, and add possible interpretation.\n+\n+         Arr_Type  := Empty;\n+         Comp_Type := Empty;\n+\n+         if Nkind (Call) = N_Function_Call\n+           and then Nkind (Parent (N)) = N_Indexed_Component\n+           and then Needs_One_Actual (Subp)\n+         then\n+            if Is_Array_Type (Etype (Subp)) then\n+               Arr_Type := Etype (Subp);\n+\n+            elsif Is_Access_Type (Etype (Subp))\n+              and then Is_Array_Type (Designated_Type (Etype (Subp)))\n+            then\n+               Arr_Type := Designated_Type (Etype (Subp));\n+            end if;\n+         end if;\n+\n+         if Present (Arr_Type) then\n+\n+            --  Verify that the actuals (excluding the object) match the types\n+            --  of the indexes.\n+\n+            declare\n+               Actual : Node_Id;\n+               Index  : Node_Id;\n+\n+            begin\n+               Actual := Next (First_Actual (Call));\n+               Index  := First_Index (Arr_Type);\n+               while Present (Actual) and then Present (Index) loop\n+                  if not Has_Compatible_Type (Actual, Etype (Index)) then\n+                     Arr_Type := Empty;\n+                     exit;\n+                  end if;\n+\n+                  Next_Actual (Actual);\n+                  Next_Index  (Index);\n+               end loop;\n+\n+               if No (Actual)\n+                  and then No (Index)\n+                  and then Present (Arr_Type)\n+               then\n+                  Comp_Type := Component_Type (Arr_Type);\n+               end if;\n+            end;\n+\n+            if Present (Comp_Type)\n+              and then Etype (Subprog) /= Comp_Type\n+            then\n+               Add_One_Interp (Subprog, Subp, Comp_Type);\n+            end if;\n+         end if;\n+\n+         if Etype (Call) /= Any_Type then\n+            return Subp;\n+         else\n+            return Empty;\n+         end if;\n+      end Valid_Candidate;\n+\n    --  Start of processing for Try_Object_Operation\n \n    begin"}, {"sha": "7e6907a2953bf1a3a9fe3ec7e23757a8f5a9d7d0", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -52,6 +52,7 @@ with Snames;   use Snames;\n with Sinfo;    use Sinfo;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n+with Warnsw;   use Warnsw;\n \n package body Sem_Disp is\n \n@@ -932,6 +933,57 @@ package body Sem_Disp is\n    ---------------------------------\n \n    procedure Check_Dispatching_Operation (Subp, Old_Subp : Entity_Id) is\n+      procedure Warn_On_Late_Primitive_After_Private_Extension\n+        (Typ  : Entity_Id;\n+         Prim : Entity_Id);\n+      --  Prim is a dispatching primitive of the tagged type Typ. Warn on Prim\n+      --  if it is a public primitive defined after some private extension of\n+      --  the tagged type.\n+\n+      ----------------------------------------------------\n+      -- Warn_On_Late_Primitive_After_Private_Extension --\n+      ----------------------------------------------------\n+\n+      procedure Warn_On_Late_Primitive_After_Private_Extension\n+        (Typ  : Entity_Id;\n+         Prim : Entity_Id)\n+      is\n+         E : Entity_Id;\n+\n+      begin\n+         if Warn_On_Late_Primitives\n+           and then Comes_From_Source (Prim)\n+           and then Has_Private_Extension (Typ)\n+           and then Is_Package_Or_Generic_Package (Current_Scope)\n+           and then not In_Private_Part (Current_Scope)\n+         then\n+            E := Next_Entity (Typ);\n+\n+            while E /= Prim loop\n+               if Ekind (E) = E_Record_Type_With_Private\n+                 and then Etype (E) = Typ\n+               then\n+                  Error_Msg_Name_1 := Chars (Typ);\n+                  Error_Msg_Name_2 := Chars (E);\n+                  Error_Msg_Sloc := Sloc (E);\n+                  Error_Msg_N\n+                    (\"?j?primitive of type % defined after private \" &\n+                     \"extension % #?\", Prim);\n+                  Error_Msg_Name_1 := Chars (Prim);\n+                  Error_Msg_Name_2 := Chars (E);\n+                  Error_Msg_N\n+                    (\"\\spec of % should appear before declaration of type %!\",\n+                     Prim);\n+                  exit;\n+               end if;\n+\n+               Next_Entity (E);\n+            end loop;\n+         end if;\n+      end Warn_On_Late_Primitive_After_Private_Extension;\n+\n+      --  Local variables\n+\n       Body_Is_Last_Primitive : Boolean   := False;\n       Has_Dispatching_Parent : Boolean   := False;\n       Ovr_Subp               : Entity_Id := Empty;\n@@ -1591,6 +1643,13 @@ package body Sem_Disp is\n             end if;\n          end;\n       end if;\n+\n+      --  For similarity with record extensions, in Ada 9X the language should\n+      --  have disallowed adding visible operations to a tagged type after\n+      --  deriving a private extension from it. Report a warning if this\n+      --  primitive is defined after a private extension of Tagged_Type.\n+\n+      Warn_On_Late_Primitive_After_Private_Extension (Tagged_Type, Subp);\n    end Check_Dispatching_Operation;\n \n    ------------------------------------------"}, {"sha": "70e20ab875d8a5d3bee57a1c32ed867713bc09f3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -7401,24 +7401,32 @@ package body Sem_Prag is\n                     (\"dispatching subprogram# cannot use Stdcall convention!\",\n                      Arg1);\n \n-               --  Subprograms are not allowed\n+               --  Several allowed cases\n \n-               elsif not Is_Subprogram_Or_Generic_Subprogram (E)\n+               elsif Is_Subprogram_Or_Generic_Subprogram (E)\n \n                  --  A variable is OK\n \n-                 and then Ekind (E) /= E_Variable\n+                 or else Ekind (E) = E_Variable\n+\n+                 --  A component as well.  The entity does not have its\n+                 --  Ekind set until the enclosing record declaration is\n+                 --  fully analyzed.\n+\n+                 or else Nkind (Parent (E)) = N_Component_Declaration\n \n                  --  An access to subprogram is also allowed\n \n-                 and then not\n-                   (Is_Access_Type (E)\n-                     and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n+                 or else (Is_Access_Type (E)\n+                   and then Ekind (Designated_Type (E)) = E_Subprogram_Type)\n \n                  --  Allow internal call to set convention of subprogram type\n \n-                 and then not (Ekind (E) = E_Subprogram_Type)\n+                 or else (Ekind (E) = E_Subprogram_Type)\n                then\n+                  null;\n+\n+               else\n                   Error_Pragma_Arg\n                     (\"second argument of pragma% must be subprogram (type)\",\n                      Arg2);"}, {"sha": "b0f7de19250ef0b3ad0cf62422b1aaf28893ce96", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -507,6 +507,10 @@ begin\n                                                   \"(annex J) feature\");\n    Write_Line (\"        J*   turn off warnings for obsolescent \" &\n                                                   \"(annex J) feature\");\n+   Write_Line (\"        .j+  turn on warnings for late dispatching \" &\n+                                                  \"primitives\");\n+   Write_Line (\"        .J*  turn off warnings for late dispatching \" &\n+                                                  \"primitives\");\n    Write_Line (\"        k+   turn on warnings on constant variable\");\n    Write_Line (\"        K*   turn off warnings on constant variable\");\n    Write_Line (\"        .k   turn on warnings for standard redefinition\");"}, {"sha": "1c0995c70577e8f66c558e55c4a4b34663fc2d3d", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,6 +66,7 @@ package body Warnsw is\n       Warn_On_Dereference                 := Setting;\n       Warn_On_Export_Import               := Setting;\n       Warn_On_Hiding                      := Setting;\n+      Warn_On_Late_Primitives             := Setting;\n       Warn_On_Modified_Unread             := Setting;\n       Warn_On_No_Value_Assigned           := Setting;\n       Warn_On_Non_Local_Exception         := Setting;\n@@ -147,6 +148,8 @@ package body Warnsw is\n         W.Warn_On_Export_Import;\n       Warn_On_Hiding                      :=\n         W.Warn_On_Hiding;\n+      Warn_On_Late_Primitives             :=\n+        W.Warn_On_Late_Primitives;\n       Warn_On_Modified_Unread             :=\n         W.Warn_On_Modified_Unread;\n       Warn_On_No_Value_Assigned           :=\n@@ -249,6 +252,8 @@ package body Warnsw is\n         Warn_On_Export_Import;\n       W.Warn_On_Hiding                      :=\n         Warn_On_Hiding;\n+      W.Warn_On_Late_Primitives             :=\n+        Warn_On_Late_Primitives;\n       W.Warn_On_Modified_Unread             :=\n         Warn_On_Modified_Unread;\n       W.Warn_On_No_Value_Assigned           :=\n@@ -347,6 +352,12 @@ package body Warnsw is\n          when 'I' =>\n             Warn_On_Overlap                     := False;\n \n+         when 'j' =>\n+            Warn_On_Late_Primitives             := True;\n+\n+         when 'J' =>\n+            Warn_On_Late_Primitives             := False;\n+\n          when 'k' =>\n             Warn_On_Standard_Redefinition       := True;\n \n@@ -667,6 +678,7 @@ package body Warnsw is\n       Warn_On_Biased_Representation       := True; -- -gnatw.b\n       Warn_On_Constant                    := True; -- -gnatwk\n       Warn_On_Export_Import               := True; -- -gnatwx\n+      Warn_On_Late_Primitives             := True; -- -gnatw.j\n       Warn_On_Modified_Unread             := True; -- -gnatwm\n       Warn_On_No_Value_Assigned           := True; -- -gnatwv\n       Warn_On_Non_Local_Exception         := True; -- -gnatw.x"}, {"sha": "9b6313ac4ca1c56be8446513691c3719f7931268", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c8c473932813f5d55f5ee3194ea18cf741aacc/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=48c8c473932813f5d55f5ee3194ea18cf741aacc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,10 @@ package Warnsw is\n    --  here as time goes by. And in fact a really nice idea would be to put\n    --  them all in a Warn_Record so that they would be easy to save/restore.\n \n+   Warn_On_Late_Primitives : Boolean := False;\n+   --  Warn when tagged type public primitives are defined after its private\n+   --  extensions.\n+\n    Warn_On_Record_Holes : Boolean := False;\n    --  Warn when explicit record component clauses leave uncovered holes (gaps)\n    --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n@@ -91,6 +95,7 @@ package Warnsw is\n       Warn_On_Dereference                 : Boolean;\n       Warn_On_Export_Import               : Boolean;\n       Warn_On_Hiding                      : Boolean;\n+      Warn_On_Late_Primitives             : Boolean;\n       Warn_On_Modified_Unread             : Boolean;\n       Warn_On_No_Value_Assigned           : Boolean;\n       Warn_On_Non_Local_Exception         : Boolean;"}]}