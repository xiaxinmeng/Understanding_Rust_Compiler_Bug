{"sha": "3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NWFhYTNkODg0ZWYyY2IxZGZlZDU3YmIzYzJhMzkyZWNlODlkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-12-21T19:38:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-12-21T19:38:50Z"}, "message": "PR c++/42329 - deducing base template for template template arg\n\n\t* pt.c (unify_bound_ttp_args): Split out from unify.\n\t(try_class_unification): Handle BOUND_TEMPLATE_TEMPLATE_PARM.\n\t(unify): Check for type/non-type mismatch early.\n\t[BOUND_TEMPLATE_TEMPLATE_PARM]: Try get_template_base.\n\nFrom-SVN: r243870", "tree": {"sha": "5bb7df18e3bd88d163ae4b054766c14df9428cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb7df18e3bd88d163ae4b054766c14df9428cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57a6add274e98def9fe937eea126c56a71e65c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a6add274e98def9fe937eea126c56a71e65c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a6add274e98def9fe937eea126c56a71e65c28"}], "stats": {"total": 217, "additions": 124, "deletions": 93}, "files": [{"sha": "ffda8e161004f94a8666c3432c289cbdb08852ac", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -1,5 +1,11 @@\n 2016-12-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/42329\n+\t* pt.c (unify_bound_ttp_args): Split out from unify.\n+\t(try_class_unification): Handle BOUND_TEMPLATE_TEMPLATE_PARM.\n+\t(unify): Check for type/non-type mismatch early.\n+\t[BOUND_TEMPLATE_TEMPLATE_PARM]: Try get_template_base.\n+\n \t* pt.c (coerce_template_parms): Consider variadic_args_p before\n \tcomplaining about too many template arguments.\n "}, {"sha": "6abb639e0812b4f88d39af0793256ad191eed253", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 79, "deletions": 92, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -6863,6 +6863,27 @@ coerce_template_template_parm (tree parm,\n   return 1;\n }\n \n+/* Subroutine of unify for the case when PARM is a\n+   BOUND_TEMPLATE_TEMPLATE_PARM.  */\n+\n+static int\n+unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree arg,\n+\t\t      bool explain_p)\n+{\n+  tree parmvec = TYPE_TI_ARGS (parm);\n+  tree argvec = INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (arg));\n+\n+  /* The template template parm might be variadic and the argument\n+     not, so flatten both argument lists.  */\n+  parmvec = expand_template_argument_pack (parmvec);\n+  argvec = expand_template_argument_pack (argvec);\n+\n+  if (unify (tparms, targs, parmvec, argvec,\n+\t     UNIFY_ALLOW_NONE, explain_p))\n+    return 1;\n+\n+  return 0;\n+}\n \n /* Return 1 if PARM_PARMS and ARG_PARMS matches using rule for\n    template template parameters.  Both PARM_PARMS and ARG_PARMS are\n@@ -19391,9 +19412,12 @@ try_class_unification (tree tparms, tree targs, tree parm, tree arg,\n {\n   tree copy_of_targs;\n \n-  if (!CLASSTYPE_TEMPLATE_INFO (arg)\n-      || (most_general_template (CLASSTYPE_TI_TEMPLATE (arg))\n-\t  != most_general_template (CLASSTYPE_TI_TEMPLATE (parm))))\n+  if (!CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P (arg))\n+    return NULL_TREE;\n+  else if (TREE_CODE (parm) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+    /* Matches anything.  */;\n+  else if (most_general_template (CLASSTYPE_TI_TEMPLATE (arg))\n+\t   != most_general_template (CLASSTYPE_TI_TEMPLATE (parm)))\n     return NULL_TREE;\n \n   /* We need to make a new template argument vector for the call to\n@@ -19428,6 +19452,13 @@ try_class_unification (tree tparms, tree targs, tree parm, tree arg,\n      would reject the possibility I=1.  */\n   copy_of_targs = make_tree_vec (TREE_VEC_LENGTH (targs));\n \n+  if (TREE_CODE (parm) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+    {\n+      if (unify_bound_ttp_args (tparms, copy_of_targs, parm, arg, explain_p))\n+\treturn NULL_TREE;\n+      return arg;\n+    }\n+\n   /* If unification failed, we're done.  */\n   if (unify (tparms, copy_of_targs, CLASSTYPE_TI_ARGS (parm),\n \t     CLASSTYPE_TI_ARGS (arg), UNIFY_ALLOW_NONE, explain_p))\n@@ -19832,6 +19863,25 @@ unify_array_domain (tree tparms, tree targs,\n \t\tUNIFY_ALLOW_INTEGER, explain_p);\n }\n \n+/* Returns whether T, a P or A in unify, is a type, template or expression.  */\n+\n+enum pa_kind_t { pa_type, pa_tmpl, pa_expr };\n+\n+static pa_kind_t\n+pa_kind (tree t)\n+{\n+  if (PACK_EXPANSION_P (t))\n+    t = PACK_EXPANSION_PATTERN (t);\n+  if (TREE_CODE (t) == TEMPLATE_TEMPLATE_PARM\n+      || TREE_CODE (t) == UNBOUND_CLASS_TEMPLATE\n+      || DECL_TYPE_TEMPLATE_P (t))\n+    return pa_tmpl;\n+  else if (TYPE_P (t))\n+    return pa_type;\n+  else\n+    return pa_expr;\n+}\n+\n /* Deduce the value of template parameters.  TPARMS is the (innermost)\n    set of template parameters to a template.  TARGS is the bindings\n    for those template parameters, as determined thus far; TARGS may\n@@ -19985,6 +20035,11 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       return unify_success (explain_p);\n     }\n \n+  /* If parm and arg aren't the same kind of thing (template, type, or\n+     expression), fail early.  */\n+  if (pa_kind (parm) != pa_kind (arg))\n+    return unify_invalid (explain_p);\n+\n   /* Immediately reject some pairs that won't unify because of\n      cv-qualification mismatches.  */\n   if (TREE_CODE (arg) == TREE_CODE (parm)\n@@ -20053,100 +20108,32 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \n       if (TREE_CODE (parm) == BOUND_TEMPLATE_TEMPLATE_PARM)\n \t{\n+\t  if (strict_in & UNIFY_ALLOW_DERIVED)\n+\t    {\n+\t      /* First try to match ARG directly.  */\n+\t      tree t = try_class_unification (tparms, targs, parm, arg,\n+\t\t\t\t\t      explain_p);\n+\t      if (!t)\n+\t\t{\n+\t\t  /* Otherwise, look for a suitable base of ARG, as below.  */\n+\t\t  enum template_base_result r;\n+\t\t  r = get_template_base (tparms, targs, parm, arg,\n+\t\t\t\t\t explain_p, &t);\n+\t\t  if (!t)\n+\t\t    return unify_no_common_base (explain_p, r, parm, arg);\n+\t\t  arg = t;\n+\t\t}\n+\t    }\n \t  /* ARG must be constructed from a template class or a template\n \t     template parameter.  */\n-\t  if (TREE_CODE (arg) != BOUND_TEMPLATE_TEMPLATE_PARM\n-\t      && !CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P (arg))\n+\t  else if (TREE_CODE (arg) != BOUND_TEMPLATE_TEMPLATE_PARM\n+\t\t   && !CLASSTYPE_SPECIALIZATION_OF_PRIMARY_TEMPLATE_P (arg))\n \t    return unify_template_deduction_failure (explain_p, parm, arg);\n-\t  {\n-\t    tree parmvec = TYPE_TI_ARGS (parm);\n-\t    tree argvec = INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (arg));\n-\t    tree full_argvec = add_to_template_args (targs, argvec);\n-\t    tree parm_parms \n-              = DECL_INNERMOST_TEMPLATE_PARMS\n-\t          (TEMPLATE_TEMPLATE_PARM_TEMPLATE_DECL (parm));\n-\t    int i, len;\n-            int parm_variadic_p = 0;\n-\n-\t    /* The resolution to DR150 makes clear that default\n-\t       arguments for an N-argument may not be used to bind T\n-\t       to a template template parameter with fewer than N\n-\t       parameters.  It is not safe to permit the binding of\n-\t       default arguments as an extension, as that may change\n-\t       the meaning of a conforming program.  Consider:\n-\n-\t\t  struct Dense { static const unsigned int dim = 1; };\n-\n-\t\t  template <template <typename> class View,\n-\t\t\t    typename Block>\n-\t\t  void operator+(float, View<Block> const&);\n-\n-\t\t  template <typename Block,\n-\t\t\t    unsigned int Dim = Block::dim>\n-\t\t  struct Lvalue_proxy { operator float() const; };\n-\n-\t\t  void\n-\t\t  test_1d (void) {\n-\t\t    Lvalue_proxy<Dense> p;\n-\t\t    float b;\n-\t\t    b + p;\n-\t\t  }\n \n-\t      Here, if Lvalue_proxy is permitted to bind to View, then\n-\t      the global operator+ will be used; if they are not, the\n-\t      Lvalue_proxy will be converted to float.  */\n-\t    if (coerce_template_parms (parm_parms,\n-                                       full_argvec,\n-\t\t\t\t       TYPE_TI_TEMPLATE (parm),\n-\t\t\t\t       complain,\n-\t\t\t\t       /*require_all_args=*/true,\n-\t\t\t\t       /*use_default_args=*/false)\n-\t\t== error_mark_node)\n-\t      return 1;\n-\n-\t    /* Deduce arguments T, i from TT<T> or TT<i>.\n-\t       We check each element of PARMVEC and ARGVEC individually\n-\t       rather than the whole TREE_VEC since they can have\n-\t       different number of elements.  */\n-\n-            parmvec = expand_template_argument_pack (parmvec);\n-            argvec = expand_template_argument_pack (argvec);\n-\n-            len = TREE_VEC_LENGTH (parmvec);\n-\n-            /* Check if the parameters end in a pack, making them\n-               variadic.  */\n-            if (len > 0\n-                && PACK_EXPANSION_P (TREE_VEC_ELT (parmvec, len - 1)))\n-              parm_variadic_p = 1;\n-            \n-             for (i = 0; i < len - parm_variadic_p; ++i)\n-\t       /* If the template argument list of P contains a pack\n-\t\t  expansion that is not the last template argument, the\n-\t\t  entire template argument list is a non-deduced\n-\t\t  context.  */\n-\t       if (PACK_EXPANSION_P (TREE_VEC_ELT (parmvec, i)))\n-\t\t return unify_success (explain_p);\n-\n-            if (TREE_VEC_LENGTH (argvec) < len - parm_variadic_p)\n-              return unify_too_few_arguments (explain_p,\n-\t\t\t\t\t      TREE_VEC_LENGTH (argvec), len);\n-\n-             for (i = 0; i < len - parm_variadic_p; ++i)\n-\t      {\n-\t\tRECUR_AND_CHECK_FAILURE (tparms, targs,\n-\t\t\t\t\t TREE_VEC_ELT (parmvec, i),\n-\t\t\t\t\t TREE_VEC_ELT (argvec, i),\n-\t\t\t\t\t UNIFY_ALLOW_NONE, explain_p);\n-\t      }\n+\t  /* Deduce arguments T, i from TT<T> or TT<i>.  */\n+\t  if (unify_bound_ttp_args (tparms, targs, parm, arg, explain_p))\n+\t    return 1;\n \n-\t    if (parm_variadic_p\n-\t\t&& unify_pack_expansion (tparms, targs,\n-\t\t\t\t\t parmvec, argvec,\n-\t\t\t\t\t DEDUCE_EXACT,\n-\t\t\t\t\t /*subr=*/true, explain_p))\n-\t      return 1;\n-\t  }\n \t  arg = TYPE_TI_TEMPLATE (arg);\n \n \t  /* Fall through to deduce template name.  */"}, {"sha": "b70b7d4d68bf2f63d2383ab728af9d153bf63641", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -22,7 +22,7 @@ template<class T> using Vec = Vector<T, Alloc<T> >;\n \n template<class T> void g(Vector<T, Alloc<T> >);\n \n-template<template<class T> class TT> void h(TT<int>); // { dg-message \"provided for\" }\n+template<template<class T> class TT> void h(TT<int>); // { dg-message \"\" }\n \n void\n bar()"}, {"sha": "cf70a7a25fba3136dfacb7d339d18ce43378c37c", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ttp6.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ttp6.C?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> struct A { using type = T; };\n+template <template <class...> class C, class... Ts>\n+struct A<C<Ts...>> { };\n+\n+template <class T2, template <class> class TT> struct B { };\n+template <class T3> struct C { };\n+\n+A<B<int,C>>::type a;"}, {"sha": "4238eef9238465e30da354aeba13c081ec870882", "filename": "gcc/testsuite/g++.dg/template/ttp-derived1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived1.C?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/60177\n+\n+template<class> struct Base { };\n+\n+struct Derived : Base<void> { };\n+\n+template<template<typename> class TT, typename T>\n+void func (TT<T>) { }\n+\n+int main () {\n+  func (Derived ());\n+}"}, {"sha": "b2fe36faaff7dab8bf5fbd860433119a8d2a6a44", "filename": "gcc/testsuite/g++.dg/template/ttp-derived2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp-derived2.C?ref=3c75aaa3d884ef2cb1dfed57bb3c2a392ece89d5", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/42329\n+\n+template <typename T1, typename T2>\n+class B {};\n+\n+template <typename T>\n+class D : public B<T, T> {};\n+\n+template <template <typename, typename> class U, typename T1, typename T2>\n+void g(U<T1, T2>*) {}\n+\n+int main()\n+{\n+  D<long> dl;\n+  g(&dl); // error: no matching function for call to \u2018g(D<long int>*)\u2019\n+}"}]}