{"sha": "713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "node_id": "C_kwDOANBUbNoAKDcxM2ZhNWRiOGNlYjRiYTg3ODNhMGQ2OTBjZWI0YzA3ZjJmZjAzZDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T07:46:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-17T07:46:28Z"}, "message": "openmp: Fix up handling of doacross loops with noreturn body in loops [PR108685]\n\nThe following patch fixes an ICE with doacross loops which have a single entry\nno exit body, at least one of the ordered > collapse loops isn't guaranteed to\nhave at least one iteration and the whole doacross loop is inside some other loop.\nThe OpenMP constructs aren't represented by struct loop until the omp expansions,\nso for a normal doacross loop which doesn't have a noreturn body the entry_bb\nwith the GOMP_FOR statement and the first bb of the body typically have the\nsame loop_father, and if the doacross loop isn't inside of some other loop\nand the body is noreturn as well, both are part of loop 0.  The problematic\ncase is when the entry_bb is inside of some deeper loop, but the body, because\nit falls through into EXIT, has loop 0 as loop_father.  l0_bb is created by\nsplitting the entry_bb fallthru edge into l1_bb, and because the two basic blocks\nhave different loop_father, a common loop is found for those (which is loop 0).\nNow, if the doacross loop has collapse == ordered or all the ordered > collapse\nloops are guaranteed to iterate at least once, all is still fine, because all\nenter the l1_bb (body), which doesn't return and so doesn't loop further either.\nBut, if one of those loops could loop 0 times, the user written body wouldn't be\nreached at all, so unlike the expectations the whole construct actually wouldn't\nbe noreturn if entry_bb is encountered and decides to handle at least one\niteration.\n\nIn this case, we need to fix up, move the l0_bb into the same loop as entry_bb\n(initially) and for the extra added loops put them as children of that same\nloop, rather than of loop 0.\n\n2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/108685\n\t* omp-expand.cc (expand_omp_for_ordered_loops): Add L0_BB argument,\n\tuse its loop_father rather than BODY_BB's loop_father.\n\t(expand_omp_for_generic): Adjust expand_omp_for_ordered_loops caller.\n\tIf broken_loop with ordered > collapse and at least one of those\n\textra loops aren't guaranteed to have at least one iteration, change\n\tl0_bb's loop_father to entry_bb's loop_father.  Set cont_bb's\n\tloop_father to l0_bb's loop_father rather than l1_bb's.\n\n\t* c-c++-common/gomp/doacross-8.c: New test.", "tree": {"sha": "a7828f78bc1cba39758128f5ea9fc92b356c655c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7828f78bc1cba39758128f5ea9fc92b356c655c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6195c7e7adc7465214a0dc347c592822713c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6195c7e7adc7465214a0dc347c592822713c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6195c7e7adc7465214a0dc347c592822713c3f"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "1ccee29c52a25ae8c39565724d637d1a58838f35", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "patch": "@@ -3674,7 +3674,7 @@ expand_omp_ordered_source_sink (struct omp_region *region,\n static basic_block\n expand_omp_for_ordered_loops (struct omp_for_data *fd, tree *counts,\n \t\t\t      basic_block cont_bb, basic_block body_bb,\n-\t\t\t      bool ordered_lastprivate)\n+\t\t\t      basic_block l0_bb, bool ordered_lastprivate)\n {\n   if (fd->ordered == fd->collapse)\n     return cont_bb;\n@@ -3783,7 +3783,7 @@ expand_omp_for_ordered_loops (struct omp_for_data *fd, tree *counts,\n \t  class loop *loop = alloc_loop ();\n \t  loop->header = new_header;\n \t  loop->latch = e2->src;\n-\t  add_loop (loop, body_bb->loop_father);\n+\t  add_loop (loop, l0_bb->loop_father);\n \t}\n     }\n \n@@ -4481,9 +4481,15 @@ expand_omp_for_generic (struct omp_region *region,\n \t    }\n \t  if (i < fd->ordered)\n \t    {\n+\t      if (entry_bb->loop_father != l0_bb->loop_father)\n+\t\t{\n+\t\t  remove_bb_from_loops (l0_bb);\n+\t\t  add_bb_to_loop (l0_bb, entry_bb->loop_father);\n+\t\t  gcc_assert (single_succ (l0_bb) == l1_bb);\n+\t\t}\n \t      cont_bb\n \t\t= create_empty_bb (EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb);\n-\t      add_bb_to_loop (cont_bb, l1_bb->loop_father);\n+\t      add_bb_to_loop (cont_bb, l0_bb->loop_father);\n \t      gimple_stmt_iterator gsi = gsi_after_labels (cont_bb);\n \t      gimple *g = gimple_build_omp_continue (fd->loop.v, fd->loop.v);\n \t      gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n@@ -4495,7 +4501,7 @@ expand_omp_for_generic (struct omp_region *region,\n \t}\n       expand_omp_ordered_source_sink (region, fd, counts, cont_bb);\n       cont_bb = expand_omp_for_ordered_loops (fd, counts, cont_bb, l1_bb,\n-\t\t\t\t\t      ordered_lastprivate);\n+\t\t\t\t\t      l0_bb, ordered_lastprivate);\n       if (counts[fd->collapse - 1])\n \t{\n \t  gcc_assert (fd->collapse == 1);"}, {"sha": "6de06341af785abf6b084db8ed463e3c2b30497a", "filename": "gcc/testsuite/c-c++-common/gomp/doacross-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-8.c?ref=713fa5db8ceb4ba8783a0d690ceb4c07f2ff03d0", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/108685 */\n+/* { dg-do compile } */\n+\n+void\n+foo (int a)\n+{\n+  for (int m = 0; m < 10; m++)\n+    #pragma omp for collapse(2) ordered(4)\n+    for (int i = 0; i < 2; i++)\n+      for (int j = 0; j < a; j++)\n+\tfor (int k = 0; k < 2; k++)\n+\t  for (int l = 0; l < a; l++)\n+\t    {\n+\t      #pragma omp ordered depend (source)\n+\t      __builtin_abort ();\n+\t    }\n+}"}]}