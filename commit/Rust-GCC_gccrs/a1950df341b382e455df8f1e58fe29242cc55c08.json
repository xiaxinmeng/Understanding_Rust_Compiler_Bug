{"sha": "a1950df341b382e455df8f1e58fe29242cc55c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5NTBkZjM0MWIzODJlNDU1ZGY4ZjFlNThmZTI5MjQyY2M1NWMwOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-09-09T15:20:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-09-09T15:20:07Z"}, "message": "INSN_LOCATION takes an rtx_insn\n\ngcc/ChangeLog:\n2014-09-09  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (INSN_LOCATION): Strengthen param from const_rtx to\n\tconst rtx_insn *, and from rtx to rtx_insn * for the other\n\toverloaded variant.\n\t(RTL_LOCATION): Add a checked cast to rtx_insn * when invoking\n\tINSN_LOCATION, since we know INSN_P holds.\n\t(insn_line): Strengthen param from const_rtx to const rtx_insn *.\n\t(insn_file): Likewise.\n\t(insn_scope): Likewise.\n\t(insn_location): Likewise.\n\n\t* config/mips/mips.c (mips16_gp_pseudo_reg): Strengthen local\n\t\"insn\" from rtx to rtx_insn *, introducing a new local rtx \"set\"\n\tfor the result of gen_load_const_gp.\n\t* config/rs6000/rs6000-protos.h (output_call): Strengthen first\n\tparam from rtx to rtx_insn *.\n\t* config/rs6000/rs6000.c (output_call): Likewise.\n\t* dwarf2out.c (dwarf2out_var_location): Likewise for local \"prev\",\n\tintroducing a checked cast to rtx_sequence * and use of the insn\n\tmethod.\n\t* emit-rtl.c (emit_copy_of_insn_after): Strengthen both params\n\tfrom rtx to rtx_insn *.\n\t(insn_scope): Strengthen param from const_rtx to const rtx_insn *.\n\t(insn_line): Likewise.\n\t(insn_file): Likewise.\n\t(insn_location): Likewise.\n\t* emit-rtl.h (emit_copy_of_insn_after): Strengthen both params\n\tfrom rtx to rtx_insn *.\n\t* print-rtl.c (print_rtx): Introduce local \"in_insn\" via a checked\n\tcast, using it for calls to INSN_HAS_LOCATION and insn_location.\n\t* recog.c (peep2_attempt): Introduce local rtx_insn * \"peepinsn\"\n\tvia a checked cast.\n\t* reorg.c (relax_delay_slots): Strengthen locals named \"after\"\n\tfrom rtx to rtx_insn *; use methods of \"pat\" for type-safety.\n\nFrom-SVN: r215084", "tree": {"sha": "399a1b396970c0a0432d272941b58678b1185cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/399a1b396970c0a0432d272941b58678b1185cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1950df341b382e455df8f1e58fe29242cc55c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1950df341b382e455df8f1e58fe29242cc55c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1950df341b382e455df8f1e58fe29242cc55c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1950df341b382e455df8f1e58fe29242cc55c08/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6e1e8b8d1663dd2b25bc9e27ca099568848c641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e1e8b8d1663dd2b25bc9e27ca099568848c641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e1e8b8d1663dd2b25bc9e27ca099568848c641"}], "stats": {"total": 98, "additions": 69, "deletions": 29}, "files": [{"sha": "79c9df7abdb4e523a2598bfa7de3081834ba5a3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -1,3 +1,39 @@\n+2014-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (INSN_LOCATION): Strengthen param from const_rtx to\n+\tconst rtx_insn *, and from rtx to rtx_insn * for the other\n+\toverloaded variant.\n+\t(RTL_LOCATION): Add a checked cast to rtx_insn * when invoking\n+\tINSN_LOCATION, since we know INSN_P holds.\n+\t(insn_line): Strengthen param from const_rtx to const rtx_insn *.\n+\t(insn_file): Likewise.\n+\t(insn_scope): Likewise.\n+\t(insn_location): Likewise.\n+\n+\t* config/mips/mips.c (mips16_gp_pseudo_reg): Strengthen local\n+\t\"insn\" from rtx to rtx_insn *, introducing a new local rtx \"set\"\n+\tfor the result of gen_load_const_gp.\n+\t* config/rs6000/rs6000-protos.h (output_call): Strengthen first\n+\tparam from rtx to rtx_insn *.\n+\t* config/rs6000/rs6000.c (output_call): Likewise.\n+\t* dwarf2out.c (dwarf2out_var_location): Likewise for local \"prev\",\n+\tintroducing a checked cast to rtx_sequence * and use of the insn\n+\tmethod.\n+\t* emit-rtl.c (emit_copy_of_insn_after): Strengthen both params\n+\tfrom rtx to rtx_insn *.\n+\t(insn_scope): Strengthen param from const_rtx to const rtx_insn *.\n+\t(insn_line): Likewise.\n+\t(insn_file): Likewise.\n+\t(insn_location): Likewise.\n+\t* emit-rtl.h (emit_copy_of_insn_after): Strengthen both params\n+\tfrom rtx to rtx_insn *.\n+\t* print-rtl.c (print_rtx): Introduce local \"in_insn\" via a checked\n+\tcast, using it for calls to INSN_HAS_LOCATION and insn_location.\n+\t* recog.c (peep2_attempt): Introduce local rtx_insn * \"peepinsn\"\n+\tvia a checked cast.\n+\t* reorg.c (relax_delay_slots): Strengthen locals named \"after\"\n+\tfrom rtx to rtx_insn *; use methods of \"pat\" for type-safety.\n+\n 2014-09-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* combine.c (try_combine): Eliminate checked cast on result of"}, {"sha": "c8d48c45f18eecd421abfc744bfb189ab8dd7840", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -2932,7 +2932,6 @@ mips16_gp_pseudo_reg (void)\n {\n   if (cfun->machine->mips16_gp_pseudo_rtx == NULL_RTX)\n     {\n-      rtx insn;\n       rtx_insn *scan;\n \n       cfun->machine->mips16_gp_pseudo_rtx = gen_reg_rtx (Pmode);\n@@ -2943,8 +2942,8 @@ mips16_gp_pseudo_reg (void)\n       while (NEXT_INSN (scan) && !INSN_P (NEXT_INSN (scan)))\n \tscan = NEXT_INSN (scan);\n \n-      insn = gen_load_const_gp (cfun->machine->mips16_gp_pseudo_rtx);\n-      insn = emit_insn_after (insn, scan);\n+      rtx set = gen_load_const_gp (cfun->machine->mips16_gp_pseudo_rtx);\n+      rtx_insn *insn = emit_insn_after (set, scan);\n       INSN_LOCATION (insn) = 0;\n \n       pop_topmost_sequence ();"}, {"sha": "cf58f46632a3e7c974407fc8149cd08639d1dc16", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -211,7 +211,7 @@ extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n \t\t\t\t\t\tHOST_WIDE_INT);\n \n #if TARGET_MACHO\n-char *output_call (rtx, rtx *, int, int);\n+char *output_call (rtx_insn *, rtx *, int, int);\n #endif\n \n #ifdef NO_DOLLAR_IN_LABEL"}, {"sha": "3ed8107dcec94da523782b447333a2572af14543", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -28929,7 +28929,7 @@ get_prev_label (tree function_name)\n    CALL_DEST is the routine we are calling.  */\n \n char *\n-output_call (rtx insn, rtx *operands, int dest_operand_number,\n+output_call (rtx_insn *insn, rtx *operands, int dest_operand_number,\n \t     int cookie_operand_number)\n {\n   static char buf[256];"}, {"sha": "0d5896cc5630ab3ca853549ceb9fb4bdd3fca752", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -21435,7 +21435,8 @@ dwarf2out_var_location (rtx_insn *loc_note)\n     {\n       struct call_arg_loc_node *ca_loc\n \t= ggc_cleared_alloc<call_arg_loc_node> ();\n-      rtx prev = prev_real_insn (loc_note), x;\n+      rtx_insn *prev = prev_real_insn (loc_note);\n+      rtx x;\n       ca_loc->call_arg_loc_note = loc_note;\n       ca_loc->next = NULL;\n       ca_loc->label = last_label;\n@@ -21445,7 +21446,7 @@ dwarf2out_var_location (rtx_insn *loc_note)\n \t\t\t  && GET_CODE (PATTERN (prev)) == SEQUENCE\n \t\t\t  && CALL_P (XVECEXP (PATTERN (prev), 0, 0)))));\n       if (!CALL_P (prev))\n-\tprev = XVECEXP (PATTERN (prev), 0, 0);\n+\tprev = as_a <rtx_sequence *> (PATTERN (prev))->insn (0);\n       ca_loc->tail_call_p = SIBLING_CALL_P (prev);\n       x = get_call_rtx_from (PATTERN (prev));\n       if (x)"}, {"sha": "34bf2717be23a0cac3cc85171f6513fee69f50d1", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -6144,7 +6144,7 @@ init_emit_once (void)\n    Care updating of libcall regions if present.  */\n \n rtx_insn *\n-emit_copy_of_insn_after (rtx insn, rtx after)\n+emit_copy_of_insn_after (rtx_insn *insn, rtx_insn *after)\n {\n   rtx_insn *new_rtx;\n   rtx link;\n@@ -6258,28 +6258,28 @@ curr_insn_location (void)\n \n /* Return lexical scope block insn belongs to.  */\n tree\n-insn_scope (const_rtx insn)\n+insn_scope (const rtx_insn *insn)\n {\n   return LOCATION_BLOCK (INSN_LOCATION (insn));\n }\n \n /* Return line number of the statement that produced this insn.  */\n int\n-insn_line (const_rtx insn)\n+insn_line (const rtx_insn *insn)\n {\n   return LOCATION_LINE (INSN_LOCATION (insn));\n }\n \n /* Return source file of the statement that produced this insn.  */\n const char *\n-insn_file (const_rtx insn)\n+insn_file (const rtx_insn *insn)\n {\n   return LOCATION_FILE (INSN_LOCATION (insn));\n }\n \n /* Return expanded location of the statement that produced this insn.  */\n expanded_location\n-insn_location (const_rtx insn)\n+insn_location (const rtx_insn *insn)\n {\n   return expand_location (INSN_LOCATION (insn));\n }"}, {"sha": "7cba8662d5869210a5f01db726a722be547aa340", "filename": "gcc/emit-rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Femit-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Femit-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.h?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -66,7 +66,7 @@ extern rtx copy_insn_1 (rtx);\n extern rtx copy_insn (rtx);\n extern rtx_insn *copy_delay_slot_insn (rtx_insn *);\n extern rtx gen_int_mode (HOST_WIDE_INT, enum machine_mode);\n-extern rtx_insn *emit_copy_of_insn_after (rtx, rtx);\n+extern rtx_insn *emit_copy_of_insn_after (rtx_insn *, rtx_insn *);\n extern void set_reg_attrs_from_value (rtx, rtx);\n extern void set_reg_attrs_for_parm (rtx, rtx);\n extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);"}, {"sha": "80ec96e9c0d9e6d8f59dc252f6abd6f8934afec1", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -392,12 +392,14 @@ print_rtx (const_rtx in_rtx)\n \tif (i == 4 && INSN_P (in_rtx))\n \t  {\n #ifndef GENERATOR_FILE\n+\t    const rtx_insn *in_insn = as_a <const rtx_insn *> (in_rtx);\n+\n \t    /*  Pretty-print insn locations.  Ignore scoping as it is mostly\n \t\tredundant with line number information and do not print anything\n \t\twhen there is no location information available.  */\n-\t    if (INSN_HAS_LOCATION (as_a <const rtx_insn *> (in_rtx)))\n+\t    if (INSN_HAS_LOCATION (in_insn))\n \t      {\n-\t\texpanded_location xloc = insn_location (in_rtx);\n+\t\texpanded_location xloc = insn_location (in_insn);\n \t\tfprintf (outfile, \" %s:%i\", xloc.file, xloc.line);\n \t      }\n #endif"}, {"sha": "6ccd84e513c3e5dcd3e60c1b09d0de7a8f1db4d9", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -3323,9 +3323,10 @@ peep2_attempt (basic_block bb, rtx uncast_insn, int match_len, rtx_insn *attempt\n   eh_note = find_reg_note (peep2_insn_data[i].insn, REG_EH_REGION, NULL_RTX);\n \n   /* Replace the old sequence with the new.  */\n+  rtx_insn *peepinsn = as_a <rtx_insn *> (peep2_insn_data[i].insn);\n   last = emit_insn_after_setloc (attempt,\n \t\t\t\t peep2_insn_data[i].insn,\n-\t\t\t\t INSN_LOCATION (peep2_insn_data[i].insn));\n+\t\t\t\t INSN_LOCATION (peepinsn));\n   before_try = PREV_INSN (insn);\n   delete_insn_chain (insn, peep2_insn_data[i].insn, false);\n "}, {"sha": "18820f01ba71f2c43d18929893616362787992ac", "filename": "gcc/reorg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -3297,7 +3297,7 @@ relax_delay_slots (rtx_insn *first)\n \t  && JUMP_P (next)\n \t  && PATTERN (next) == PATTERN (delay_insn))\n \t{\n-\t  rtx after;\n+\t  rtx_insn *after;\n \t  int i;\n \n \t  /* Delete the RETURN and just execute the delay list insns.\n@@ -3321,8 +3321,8 @@ relax_delay_slots (rtx_insn *first)\n \t  gcc_assert (GET_CODE (pat) == SEQUENCE);\n \t  add_insn_after (delay_insn, trial, NULL);\n \t  after = delay_insn;\n-\t  for (i = 1; i < XVECLEN (pat, 0); i++)\n-\t    after = emit_copy_of_insn_after (XVECEXP (pat, 0, i), after);\n+\t  for (i = 1; i < pat->len (); i++)\n+\t    after = emit_copy_of_insn_after (pat->insn (i), after);\n \t  delete_scheduled_jump (delay_insn);\n \t  continue;\n \t}\n@@ -3424,7 +3424,7 @@ relax_delay_slots (rtx_insn *first)\n #endif\n \t  )\n \t{\n-\t  rtx after;\n+\t  rtx_insn *after;\n \t  int i;\n \n \t  /* All this insn does is execute its delay list and jump to the\n@@ -3450,8 +3450,8 @@ relax_delay_slots (rtx_insn *first)\n \t  gcc_assert (GET_CODE (pat) == SEQUENCE);\n \t  add_insn_after (delay_insn, trial, NULL);\n \t  after = delay_insn;\n-\t  for (i = 1; i < XVECLEN (pat, 0); i++)\n-\t    after = emit_copy_of_insn_after (XVECEXP (pat, 0, i), after);\n+\t  for (i = 1; i < pat->len (); i++)\n+\t    after = emit_copy_of_insn_after (pat->insn (i), after);\n \t  delete_scheduled_jump (delay_insn);\n \t  continue;\n \t}"}, {"sha": "0f36c48bc15d7e7c18b1a612a5628ea03194087f", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1950df341b382e455df8f1e58fe29242cc55c08/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a1950df341b382e455df8f1e58fe29242cc55c08", "patch": "@@ -1369,12 +1369,12 @@ inline rtx& PATTERN (rtx insn)\n   return XEXP (insn, 3);\n }\n \n-inline unsigned int INSN_LOCATION (const_rtx insn)\n+inline unsigned int INSN_LOCATION (const rtx_insn *insn)\n {\n   return XUINT (insn, 4);\n }\n \n-inline unsigned int& INSN_LOCATION (rtx insn)\n+inline unsigned int& INSN_LOCATION (rtx_insn *insn)\n {\n   return XUINT (insn, 4);\n }\n@@ -1386,7 +1386,8 @@ inline bool INSN_HAS_LOCATION (const rtx_insn *insn)\n \n /* LOCATION of an RTX if relevant.  */\n #define RTL_LOCATION(X) (INSN_P (X) ? \\\n-\t\t\t INSN_LOCATION (X) : UNKNOWN_LOCATION)\n+\t\t\t INSN_LOCATION (as_a <rtx_insn *> (X)) \\\n+\t\t\t : UNKNOWN_LOCATION)\n \n /* Code number of instruction, from when it was recognized.\n    -1 means this instruction has not been recognized yet.  */\n@@ -2644,10 +2645,10 @@ extern rtx_insn *next_cc0_user (rtx);\n extern rtx_insn *prev_cc0_setter (rtx);\n \n /* In emit-rtl.c  */\n-extern int insn_line (const_rtx);\n-extern const char * insn_file (const_rtx);\n-extern tree insn_scope (const_rtx);\n-extern expanded_location insn_location (const_rtx);\n+extern int insn_line (const rtx_insn *);\n+extern const char * insn_file (const rtx_insn *);\n+extern tree insn_scope (const rtx_insn *);\n+extern expanded_location insn_location (const rtx_insn *);\n extern location_t prologue_location, epilogue_location;\n \n /* In jump.c */"}]}