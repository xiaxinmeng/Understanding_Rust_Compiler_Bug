{"sha": "3f519b3517efb1178aeec4be56d31c065f8d953f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1MTliMzUxN2VmYjExNzhhZWVjNGJlNTZkMzFjMDY1ZjhkOTUzZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-05T13:53:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-05T13:53:54Z"}, "message": "tree-pass.h (TODO_remove_unused_locals): Define.\n\n2006-01-05  Richard Guenther  <rguenther@suse.de>\n\t    Diego Novillo  <dnovillo@redhat.com>\n\n\t* tree-pass.h (TODO_remove_unused_locals): Define.\n\t* gimple-low.c (expand_var_p, remove_useless_vars,\n\tpass_remove_useless_vars): Remove.  Update all users.\n\t* tree-ssa-live.c (mark_all_vars_used_1): Handle SSA names.\n\t(remove_unused_locals): New function.\n\t* tree-flow.h (remove_unused_locals): Declare.\n\t* passes.c (execute_todo): Call remove_unused_locals if\n\tTODO_remove_unused_locals is set.\n\t* tree-into-ssa.c (pass_build_ssa): Add TODO_remove_unused_locals.\n\t* tree-ssa-dce.c (pass_dce): Likewise.\n\t* tree-outof-ssa.c (pass_del_ssa): Likewise.\n\n\t* gcc.dg/tree-ssa/loop-11.c: Deal with removed vars pass.\n\t* gcc.dg/tree-ssa/loop-8.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23294.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21985.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-14.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-2.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-3.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-4.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21171.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-5.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-10.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-6.c: Likewise.\n\t* treelang/compile/extravar.tree: Likewise.\n\t* g++.dg/tree-ssa/ssa-cast-1.C: Likewise.\n\t* g++.dg/tree-ssa/pointer-reference-alias.C: Likewise.\n\t* g++.dg/tree-ssa/ssa-sra-1.C: Likewise.\n\t* g++.dg/tree-ssa/ssa-sra-2.C: Likewise.\n\t* gcc.dg/tree-ssa/20031106-6.c: Disable SRA.\n\nCo-Authored-By: Diego Novillo <dnovillo@redhat.com>\n\nFrom-SVN: r109379", "tree": {"sha": "6cf1f63c9110bc738fd2520546f623d74c55ebb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf1f63c9110bc738fd2520546f623d74c55ebb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f519b3517efb1178aeec4be56d31c065f8d953f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f519b3517efb1178aeec4be56d31c065f8d953f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f519b3517efb1178aeec4be56d31c065f8d953f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f519b3517efb1178aeec4be56d31c065f8d953f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db55bccb017fdb4e23c9e1bd58ac72050974f27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db55bccb017fdb4e23c9e1bd58ac72050974f27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db55bccb017fdb4e23c9e1bd58ac72050974f27f"}], "stats": {"total": 364, "additions": 204, "deletions": 160}, "files": [{"sha": "bae3c84f155f1e6b20c6b793bd130198e1991551", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,3 +1,18 @@\n+2006-01-05  Richard Guenther  <rguenther@suse.de>\n+\t    Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-pass.h (TODO_remove_unused_locals): Define.\n+\t* gimple-low.c (expand_var_p, remove_useless_vars,\n+\tpass_remove_useless_vars): Remove.  Update all users.\n+\t* tree-ssa-live.c (mark_all_vars_used_1): Handle SSA names.\n+\t(remove_unused_locals): New function.\n+\t* tree-flow.h (remove_unused_locals): Declare.\n+\t* passes.c (execute_todo): Call remove_unused_locals if\n+\tTODO_remove_unused_locals is set.\n+\t* tree-into-ssa.c (pass_build_ssa): Add TODO_remove_unused_locals.\n+\t* tree-ssa-dce.c (pass_dce): Likewise.\n+\t* tree-outof-ssa.c (pass_del_ssa): Likewise.\n+\n 2006-01-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (struct fieldoff): Decompose field to"}, {"sha": "de0f6f24ead78f4eebe11a8ac2052c91bd829d33", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -55,7 +55,6 @@ static void lower_stmt (tree_stmt_iterator *, struct lower_data *);\n static void lower_bind_expr (tree_stmt_iterator *, struct lower_data *);\n static void lower_cond_expr (tree_stmt_iterator *, struct lower_data *);\n static void lower_return_expr (tree_stmt_iterator *, struct lower_data *);\n-static bool expand_var_p (tree);\n \n /* Lowers the body of current_function_decl.  */\n \n@@ -533,82 +532,6 @@ record_vars (tree vars)\n     }\n }\n \n-/* Check whether to expand a variable VAR.  */\n-\n-static bool\n-expand_var_p (tree var)\n-{\n-  struct var_ann_d *ann;\n-\n-  if (TREE_CODE (var) != VAR_DECL)\n-    return true;\n-\n-  /* Leave statics and externals alone.  */\n-  if (TREE_STATIC (var) || DECL_EXTERNAL (var))\n-    return true;\n-\n-  /* Remove all unused local variables.  */\n-  ann = var_ann (var);\n-  if (!ann || !ann->used)\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Throw away variables that are unused.  */\n-\n-static void\n-remove_useless_vars (void)\n-{\n-  tree var, *cell;\n-  FILE *df = NULL;\n-\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      df = dump_file;\n-      fputs (\"Discarding as unused:\\n\", df);\n-    }\n-\n-  for (cell = &cfun->unexpanded_var_list; *cell; )\n-    {\n-      var = TREE_VALUE (*cell);\n-\n-      if (!expand_var_p (var))\n-\t{\n-\t  if (df)\n-\t    {\n-\t      fputs (\"  \", df);\n-\t      print_generic_expr (df, var, dump_flags);\n-\t      fputc ('\\n', df);\n-\t    }\n-\n-\t  *cell = TREE_CHAIN (*cell);\n-\t  continue;\n-\t}\n-\n-      cell = &TREE_CHAIN (*cell);\n-    }\n-\n-  if (df)\n-    fputc ('\\n', df);\n-}\n-\n-struct tree_opt_pass pass_remove_useless_vars = \n-{\n-  \"vars\",\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  remove_useless_vars,\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  0,\t\t\t\t\t/* tv_id */\n-  0,\t\t\t\t\t/* properties_required */\n-  0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n-};\n \n /* Mark BLOCK used if it has a used variable in it, then recurse over its\n    subblocks.  */"}, {"sha": "903a9fb2e9d4562ad27a65b4a8db5effd3d063a8", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -586,7 +586,6 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_uncprop);\n   NEXT_PASS (pass_del_ssa);\n   NEXT_PASS (pass_nrv);\n-  NEXT_PASS (pass_remove_useless_vars);\n   NEXT_PASS (pass_mark_used_blocks);\n   NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n   *p = NULL;\n@@ -702,7 +701,6 @@ init_optimization_passes (void)\n }\n \n static unsigned int last_verified;\n-\n static void\n execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n {\n@@ -738,6 +736,9 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n       update_ssa (update_flags);\n     }\n \n+  if (flags & TODO_remove_unused_locals)\n+    remove_unused_locals ();\n+\n   if ((flags & TODO_dump_func)\n       && dump_file && current_function_decl)\n     {"}, {"sha": "c3c35f14458273579ded94385ed851e2fa2e8059", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,3 +1,26 @@\n+2006-01-05  Richard Guenther  <rguenther@suse.de>\n+\t    Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/loop-11.c: Deal with removed vars pass.\n+\t* gcc.dg/tree-ssa/loop-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23294.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21985.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-14.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21171.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-10.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-6.c: Likewise.\n+\t* treelang/compile/extravar.tree: Likewise.\n+\t* g++.dg/tree-ssa/ssa-cast-1.C: Likewise.\n+\t* g++.dg/tree-ssa/pointer-reference-alias.C: Likewise.\n+\t* g++.dg/tree-ssa/ssa-sra-1.C: Likewise.\n+\t* g++.dg/tree-ssa/ssa-sra-2.C: Likewise.\n+\t* gcc.dg/tree-ssa/20031106-6.c: Disable SRA.\n+\n 2006-01-05  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* g++.dg/abi/thunk3.C, g++.dg/abi/thunk4.C: Revert unnecessary fix"}, {"sha": "777656d599d74b99a7ad7c4827e26ecbb6bbe121", "filename": "gcc/testsuite/g++.dg/tree-ssa/pointer-reference-alias.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpointer-reference-alias.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpointer-reference-alias.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpointer-reference-alias.C?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int f(int *a)\n {\n@@ -9,5 +9,5 @@ int f(int *a)\n }\n \n /* There should be only one dereferencing of a. */\n-/* { dg-final { scan-tree-dump-times \"\\\\*a\" 1 \"vars\" } } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\*a\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "4e953220f7c5d7fda442f9b3063fa54df58a211f", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-cast-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-cast-1.C?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int &f(int *a)\n {\n@@ -8,5 +8,5 @@ int &f(int *a)\n \n /* There should be no cast as pointer and references are\n    considered the same type. */\n-/* { dg-final { scan-tree-dump-times \"\\\\(int &\\\\)\" 0 \"vars\"} } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(int &\\\\)\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "b2d5f4b057052a1f8b9aefba04f40ceaf9979dea", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-sra-1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-1.C?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars-details\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n void link_error();\n \n@@ -57,5 +57,5 @@ void temp()\n \n /* We should have removed the casts from pointers to references and caused SRA to happen.  */\n \n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"vars\"} } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d73787018e7fbb472e95dd33d8f1bc48524f833d", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-sra-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-sra-2.C?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars-details\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n void link_error();\n \n@@ -48,5 +48,5 @@ void test()\n }\n \n /* We should have removed the casts from pointers to references and caused SRA to happen.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"vars\"} } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "51fcd9788f2e90da027d76d7ca096e47c15d8b33", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031106-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031106-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031106-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031106-6.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fno-tree-sra -fdump-tree-optimized\" } */\n \n extern void link_error (void);\n "}, {"sha": "3ae4819256ab2ac91a3f599bd525c08821b9d8b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,15 +1,15 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized\" } */\n \n /* On 31-bit S/390 the function address will be stored (once) in the literal pool,\n    so scan-assembler-times \"foo\" will return 1 even if the loop is fully unrolled.\n    -msmall-exec avoids this by enabling a call instruction with immediate operand.  */\n-/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-vars -msmall-exec\" { target s390-*-* } } */\n+/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -msmall-exec\" { target s390-*-* } } */\n \n /* On Darwin, we call extern functions via a stub in PIC mode which is default and\n    the stub is named after the function.  To avoid this we use -static to go out\n    of PIC mode.  */\n-/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-vars -static\" { target *-*-darwin* } } */\n+/* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -static\" { target *-*-darwin* } } */\n \n void xxx(void)\n {\n@@ -25,8 +25,8 @@ void xxx(void)\n /* { dg-final { cleanup-tree-dump \"ivcanon\" } } */\n /* { dg-final { scan-tree-dump-times \"Unrolled loop 1 completely\" 1 \"cunroll\"} } */\n /* { dg-final { cleanup-tree-dump \"cunroll\" } } */\n-/* { dg-final { scan-tree-dump-times \"foo\" 5 \"vars\"} } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"foo\" 5 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n /* Because hppa and ia64 targets include an external declaration for foo as\n    well as the calls we need to look for something more specific then just"}, {"sha": "4b67c82312aa9469c9894eec70a3dc8219b32684", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-10.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int bar (void);\n \n@@ -26,7 +26,7 @@ void foo (void)\n     ;\n }\n \n-/* { dg-final { scan-tree-dump-times \"if \" 3 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"bar \" 2 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"bar \" 2 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d6c656f31f077ec2b2758d85fcf66714f9e3cd29", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-11.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-11.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -2,7 +2,7 @@\n    see PR 22442.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n void bar (unsigned);\n \n@@ -18,11 +18,11 @@ void foo (void)\n \n /* Final value of a gets replaced.  */\n \n-/* { dg-final { scan-tree-dump-times \"\\\\(16\\\\)\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(16\\\\)\" 1 \"optimized\" } } */\n \n /* And the empty loop is removed.  */\n \n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n "}, {"sha": "987c7dea805dde1ab716e894fffab013350b895e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-14.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-14.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,6 +1,6 @@\n /* A test for final value replacement.  */\n \n-/* { dg-options \"-O2 -fdump-tree-vars\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n int foo(void);\n \n@@ -15,5 +15,5 @@ int bla(void)\n   return j;\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\+ 100\" 1 \"vars\" } } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\+ 100\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "afb0d16c32c1fa6a1a5371d9dcccf8e2b9f708f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,7 +1,7 @@\n /* A test for strength reduction and induction variable elimination.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n /* Size of this structure should be sufficiently weird so that no memory\n    addressing mode applies.  */\n@@ -24,20 +24,20 @@ void xxx(void)\n /* Access to arr_base[iter].y should be strength reduced, i.e., there should\n    be no multiplication.  */\n \n-/* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n \n /* 17 * iter should be strength reduced.  */\n \n-/* { dg-final { scan-tree-dump-times \" \\\\* 17\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \" \\\\+ 17\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\* 17\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 17\" 1 \"optimized\" } } */\n \n /* The induction variable comparison with 99 should be eliminated\n    and replaced by comparison of one of the newly created ivs.  */\n \n-/* { dg-final { scan-tree-dump-times \"iter\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"99\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"100\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"iter\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"99\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"100\" 0 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5e374a4b4726e3dcf48da2d811e6782e66f63c72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-3.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -3,7 +3,7 @@\n    assume something about memory addressing modes.  */\n \n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int arr_base[100];\n \n@@ -20,11 +20,11 @@ void xxx(void)\n /* Access to arr_base[iter].y should not be strength reduced, since\n    we have a memory mode including multiplication by 4.  */\n \n-/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"step:\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"step:\" 1 \"optimized\" } } */\n \n /* And original induction variable should be preserved.  */\n \n-/* { dg-final { scan-tree-dump-times \"int iter\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"int iter\" 1 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "89d956136bb287c23ddad2b39afb7f24dca26fa1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-4.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,7 +1,7 @@\n /* A test for strength reduction and induction variable elimination.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n /* Size of this structure should be sufficiently weird so that no memory\n    addressing mode applies.  */\n@@ -34,12 +34,12 @@ void xxx(void)\n \n    In any case, we should not have any multiplication.  */\n \n-/* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\* \\[^\\\\n\\\\r\\]*=\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[^\\\\n\\\\r\\]*= \\\\* \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } } */\n \n /* And the original induction variable should be eliminated.  */\n \n-/* { dg-final { scan-tree-dump-times \"iter\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"iter\" 0 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f0ba475c7984b93760db5a8b8950565e901d8998", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-5.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-5.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,7 +1,7 @@\n /* A test for induction variable merging.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n void foo(long);\n \n@@ -18,11 +18,11 @@ void xxx(void)\n \n /* Only iter variable should remain.  */\n \n-/* { dg-final { scan-tree-dump-times \"int iter\" 1 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"jter\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"int iter\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"jter\" 0 \"optimized\" } } */\n \n /* And the use of jter should be replaced by iter + 2 */\n \n-/* { dg-final { scan-tree-dump-times \" \\\\+ 2\" 1 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 2\" 1 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "992f671e4e0dd575a04c57c4c85f7f64a40b7b4a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-6.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -funswitch-loops -fdump-tree-unswitch-details -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -funswitch-loops -fdump-tree-unswitch-details -fdump-tree-optimized\" } */\n \n int ch;\n int a[100];\n@@ -24,5 +24,5 @@ void xxx(void)\n \n /* In effect there should be exactly three conditional jumps in the final program.  */\n \n-/* { dg-final { scan-tree-dump-times \"else\" 3 \"vars\" } } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"else\" 3 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "de439c7199f926594dd23dab358f801668b79bc1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-8.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,7 +1,7 @@\n /* A test for strength reduction of ivs with nonconstant step.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n int bar (void);\n \n@@ -19,7 +19,7 @@ void xxx (void)\n    the step, we need to calculate step * sizeof (int), thus we need to be\n    a bit careful about which multiplications we disallow.  */\n \n-/* { dg-final { scan-tree-dump-times \"step \\\\* \\[^0-9\\]\" 0 \"vars\" } } */\n-/* { dg-final { scan-tree-dump-times \"\\[^0-9\\] \\\\* step\" 0 \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"step \\\\* \\[^0-9\\]\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[^0-9\\] \\\\* step\" 0 \"optimized\" } } */\n \n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "9f7278378b6ffdaaec3b8f330803814c7a6e5fda", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21171.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21171.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21171.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21171.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,6 +1,6 @@\n /* PR 21171.  Ivopts should not rewrite references to volatile memory.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n typedef\tunsigned int u_int32_t;\n typedef\tunsigned char u_int8_t;\n@@ -25,5 +25,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"SVR\" 1 \"vars\"} } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"SVR\" 1 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "19ad0f1132b476ccae092d589302155d1e7f732f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21985.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21985.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21985.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21985.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-vars\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n \n struct\n {\n@@ -30,5 +30,5 @@ main (void)\n \n /* Two of the calls to foo should be folded to just foo(constant).  */\n \n-/* { dg-final { scan-tree-dump-times \"foo \\\\(\\[0-9\\]*\\\\)\" 2 \"vars\" } } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"foo \\\\(\\[0-9\\]*\\\\)\" 2 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "35ab5786a905adcb5cae02ea125cc0d1352f1aad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23294.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23294.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-vars\" } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n \n int f1(int a)\n {\n@@ -31,8 +31,8 @@ int f6(int a, int b)\n   return 6*a - 2*b;\n }\n \n-/* { dg-final { scan-tree-dump-times \"a \\\\\\* 5\" 3 \"vars\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(b \\\\\\* 3 \\\\\\+ a\\\\\\) \\\\\\* 2\" \"vars\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(a - b \\\\\\* 3\\\\\\) \\\\\\* 2\" \"vars\" } } */\n-/* { dg-final { scan-tree-dump \"\\\\\\(a \\\\\\* 3 - b\\\\\\) \\\\\\* 2\" \"vars\" } } */\n-/* { dg-final { cleanup-tree-dump \"vars\" } } */\n+/* { dg-final { scan-tree-dump-times \"a \\\\\\* 5\" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\\\(b \\\\\\* 3 \\\\\\+ a\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\\\(a - b \\\\\\* 3\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\\\(a \\\\\\* 3 - b\\\\\\) \\\\\\* 2\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "2154de6b20560d2aabaf98a6fffbd1053adce986", "filename": "gcc/testsuite/treelang/compile/extravar.tree", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fextravar.tree?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-fdump-tree-vars -O1 -Wunused-variable\" }\n+// { dg-options \"-fdump-tree-optimized -O1 -Wunused-variable\" }\n external_definition int bar (int aaa, int ddd);\n \n static int foo = -3;  // { dg-warning \"defined but not used\" }\n@@ -10,5 +10,5 @@ bar\n \n \treturn aaa + ddd + +3;\n }\n-// { dg-final { scan-tree-dump-not \"ccc\" \"vars\" } }\n-// { dg-final { cleanup-tree-dump \"vars\" } }\n+// { dg-final { scan-tree-dump-not \"ccc\" \"optimized\" } }\n+// { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "60d7f2ac09a9a68c1ec24ee148d0470e869baf65", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -815,6 +815,9 @@ tree force_gimple_operand_bsi (block_stmt_iterator *, tree, bool, tree);\n /* In tree-ssa-structalias.c */\n bool find_what_p_points_to (tree);\n \n+/* In tree-ssa-live.c */\n+extern void remove_unused_locals (void);\n+\n /* In tree-ssa-address.c  */\n \n /* Affine combination of trees.  We keep track of at most MAX_AFF_ELTS elements"}, {"sha": "09a73b2b53c86e828aa9d00a9f796c93adfb6a3e", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -1791,7 +1791,9 @@ struct tree_opt_pass pass_build_ssa =\n   PROP_ssa,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n+  TODO_dump_func\n+    | TODO_verify_ssa\n+    | TODO_remove_unused_locals,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n "}, {"sha": "c3bf1d0a54c3a68b221c3841bf38c0dcf7938385", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -2556,6 +2556,8 @@ struct tree_opt_pass pass_del_ssa =\n   PROP_ssa,\t\t\t\t/* properties_destroyed */\n   TODO_verify_ssa | TODO_verify_flow\n     | TODO_verify_stmts,\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect,\t/* todo_flags_finish */\n+  TODO_dump_func\n+  | TODO_ggc_collect\n+  | TODO_remove_unused_locals,\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };"}, {"sha": "92dad1d8bfdfae517552a3cd270e75fdd8ab66c8", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -200,6 +200,11 @@ struct dump_file_info\n    renaming are processed.  */\n #define TODO_update_ssa_only_virtuals\t(1 << 10)\n \n+/* Some passes leave unused local variables that can be removed from\n+   cfun->unexpanded_var_list.  This reduces the size of dump files and\n+   the memory footprint for VAR_DECLs.  */\n+#define TODO_remove_unused_locals\t(1 << 11)\n+\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\\n      | TODO_update_ssa_no_phi\t\t\\\n@@ -267,7 +272,6 @@ extern struct tree_opt_pass pass_forwprop;\n extern struct tree_opt_pass pass_redundant_phi;\n extern struct tree_opt_pass pass_dse;\n extern struct tree_opt_pass pass_nrv;\n-extern struct tree_opt_pass pass_remove_useless_vars;\n extern struct tree_opt_pass pass_mark_used_blocks;\n extern struct tree_opt_pass pass_rename_ssa_copies;\n extern struct tree_opt_pass pass_expand;"}, {"sha": "b5e82c236f82ab9038eb308c55ab091d788663b8", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -979,7 +979,8 @@ struct tree_opt_pass pass_dce =\n     | TODO_update_ssa\n     | TODO_cleanup_cfg\n     | TODO_ggc_collect\n-    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+    | TODO_verify_ssa\n+    | TODO_remove_unused_locals,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n "}, {"sha": "e011a5d250c786e8419cf7375561c6c913913053", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f519b3517efb1178aeec4be56d31c065f8d953f/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=3f519b3517efb1178aeec4be56d31c065f8d953f", "patch": "@@ -296,6 +296,9 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees,\n {\n   tree t = *tp;\n \n+  if (TREE_CODE (t) == SSA_NAME)\n+    t = SSA_NAME_VAR (t);\n+\n   /* Ignore TREE_ORIGINAL for TARGET_MEM_REFS, as well as other\n      fields that do not contain vars.  */\n   if (TREE_CODE (t) == TARGET_MEM_REF)\n@@ -327,6 +330,72 @@ mark_all_vars_used (tree *expr_p)\n   walk_tree (expr_p, mark_all_vars_used_1, NULL, NULL);\n }\n \n+\n+/* Remove local variables that are not referenced in the IL.  */\n+\n+void\n+remove_unused_locals (void)\n+{\n+  basic_block bb;\n+  tree t, *cell;\n+\n+  /* Assume all locals are unused.  */\n+  for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+    {\n+      tree var = TREE_VALUE (t);\n+      if (TREE_CODE (var) != FUNCTION_DECL\n+\t  && var_ann (var))\n+\tvar_ann (var)->used = false;\n+    }\n+\n+  /* Walk the CFG marking all referenced symbols.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      block_stmt_iterator bsi;\n+      tree phi, def;\n+\n+      /* Walk the statements.  */\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\tmark_all_vars_used (bsi_stmt_ptr (bsi));\n+\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+        {\n+          use_operand_p arg_p;\n+          ssa_op_iter i;\n+\n+\t  /* No point processing globals.  */\n+\t  if (is_global_var (SSA_NAME_VAR (PHI_RESULT (phi))))\n+\t    continue;\n+\n+          def = PHI_RESULT (phi);\n+          mark_all_vars_used (&def);\n+\n+          FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_ALL_USES)\n+            {\n+\t      tree arg = USE_FROM_PTR (arg_p);\n+\t      mark_all_vars_used (&arg);\n+            }\n+        }\n+    }\n+\n+  /* Remove unmarked vars and clear used flag.  */\n+  for (cell = &cfun->unexpanded_var_list; *cell; )\n+    {\n+      tree var = TREE_VALUE (*cell);\n+      var_ann_t ann;\n+\n+      if (TREE_CODE (var) != FUNCTION_DECL\n+\t  && (!(ann = var_ann (var))\n+\t      || !ann->used))\n+\t{\n+\t  *cell = TREE_CHAIN (*cell);\n+\t  continue;\n+\t}\n+\n+      cell = &TREE_CHAIN (*cell);\n+    }\n+}\n+\n /* This function looks through the program and uses FLAGS to determine what \n    SSA versioned variables are given entries in a new partition table.  This\n    new partition map is returned.  */\n@@ -362,6 +431,7 @@ create_ssa_var_map (int flags)\n   FOR_EACH_BB (bb)\n     {\n       tree phi, arg;\n+\n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  int i;"}]}