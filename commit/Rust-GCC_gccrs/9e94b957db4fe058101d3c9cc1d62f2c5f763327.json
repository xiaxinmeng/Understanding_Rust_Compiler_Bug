{"sha": "9e94b957db4fe058101d3c9cc1d62f2c5f763327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU5NGI5NTdkYjRmZTA1ODEwMWQzYzljYzFkNjJmMmM1Zjc2MzMyNw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T18:16:31Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T18:16:31Z"}, "message": "sh-protos.h (print_operand): Delete.\n\n\t* config/sh/sh-protos.h (print_operand): Delete.\n\t(print_operand_address): Delete.\n\t* config/sh/sh.h (PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t* config/sh/sh.c (sh_print_operand_address): Make static.\n\t(sh_print_operand): Make static.  Call sh_print_operand_address\n\tand sh_print_operand.\n\t(sh_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n\nFrom-SVN: r160942", "tree": {"sha": "81b5f100d9b5481361078440f02bf03be3b35247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b5f100d9b5481361078440f02bf03be3b35247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e94b957db4fe058101d3c9cc1d62f2c5f763327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e94b957db4fe058101d3c9cc1d62f2c5f763327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e94b957db4fe058101d3c9cc1d62f2c5f763327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e94b957db4fe058101d3c9cc1d62f2c5f763327/comments", "author": null, "committer": null, "parents": [{"sha": "349f851e4cae5f519095258bb457a51083e4efa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349f851e4cae5f519095258bb457a51083e4efa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349f851e4cae5f519095258bb457a51083e4efa1"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "4bc87256aca475057936b0e41413701ee41d35c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e94b957db4fe058101d3c9cc1d62f2c5f763327", "patch": "@@ -1,3 +1,17 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/sh/sh-protos.h (print_operand): Delete.\n+\t(print_operand_address): Delete.\n+\t* config/sh/sh.h (PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/sh/sh.c (sh_print_operand_address): Make static.\n+\t(sh_print_operand): Make static.  Call sh_print_operand_address\n+\tand sh_print_operand.\n+\t(sh_print_operand_punct_valid_p): New function.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n+\n 2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/mcore/mcore-protos.h (mcore_print_operand): Delete."}, {"sha": "782a88ea5511f4bc8993c02a39a0baab789a6a0b", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=9e94b957db4fe058101d3c9cc1d62f2c5f763327", "patch": "@@ -64,8 +64,6 @@ extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern int nonpic_symbol_mentioned_p (rtx);\n extern void emit_sf_insn (rtx);\n extern void emit_df_insn (rtx);\n-extern void print_operand_address (FILE *, rtx);\n-extern void print_operand (FILE *, rtx, int);\n extern void output_pic_addr_const (FILE *, rtx);\n extern int expand_block_move (rtx *);\n extern int prepare_move_operands (rtx[], enum machine_mode mode);"}, {"sha": "9a0f88cbcb93aa5690aa7863229b5769fc7a745e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9e94b957db4fe058101d3c9cc1d62f2c5f763327", "patch": "@@ -198,6 +198,9 @@ static tree sh2a_handle_function_vector_handler_attribute (tree *, tree,\n static tree sh_handle_sp_switch_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_trap_exit_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_renesas_attribute (tree *, tree, tree, int, bool *);\n+static void sh_print_operand (FILE *, rtx, int);\n+static void sh_print_operand_address (FILE *, rtx);\n+static bool sh_print_operand_punct_valid_p (unsigned char code);\n static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void sh_insert_attributes (tree, tree *);\n static const char *sh_check_pch_target_flags (int);\n@@ -326,6 +329,13 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_ASM_ALIGNED_DI_OP\n #define TARGET_ASM_ALIGNED_DI_OP \"\\t.quad\\t\"\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND sh_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS sh_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P sh_print_operand_punct_valid_p\n+\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE sh_output_function_epilogue\n \n@@ -966,8 +976,8 @@ sh_override_options (void)\n \f\n /* Print the operand address in x to the stream.  */\n \n-void\n-print_operand_address (FILE *stream, rtx x)\n+static void\n+sh_print_operand_address (FILE *stream, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -1045,8 +1055,8 @@ print_operand_address (FILE *stream, rtx x)\n    'u'  prints the lowest 16 bits of CONST_INT, as an unsigned value.\n    'o'  output an operator.  */\n \n-void\n-print_operand (FILE *stream, rtx x, int code)\n+static void\n+sh_print_operand (FILE *stream, rtx x, int code)\n {\n   int regno;\n   enum machine_mode mode;\n@@ -1120,7 +1130,7 @@ print_operand (FILE *stream, rtx x, int code)\n       else if (MEM_P (x))\n \t{\n \t  x = adjust_address (x, SImode, 4 * LSW);\n-\t  print_operand_address (stream, XEXP (x, 0));\n+\t  sh_print_operand_address (stream, XEXP (x, 0));\n \t}\n       else\n \t{\n@@ -1132,7 +1142,7 @@ print_operand (FILE *stream, rtx x, int code)\n \t  if (GET_MODE_SIZE (mode) >= 8)\n \t    sub = simplify_subreg (SImode, x, mode, 4 * LSW);\n \t  if (sub)\n-\t    print_operand (stream, sub, 0);\n+\t    sh_print_operand (stream, sub, 0);\n \t  else\n \t    output_operand_lossage (\"invalid operand to %%R\");\n \t}\n@@ -1147,7 +1157,7 @@ print_operand (FILE *stream, rtx x, int code)\n       else if (MEM_P (x))\n \t{\n \t  x = adjust_address (x, SImode, 4 * MSW);\n-\t  print_operand_address (stream, XEXP (x, 0));\n+\t  sh_print_operand_address (stream, XEXP (x, 0));\n \t}\n       else\n \t{\n@@ -1159,7 +1169,7 @@ print_operand (FILE *stream, rtx x, int code)\n \t  if (GET_MODE_SIZE (mode) >= 8)\n \t    sub = simplify_subreg (SImode, x, mode, 4 * MSW);\n \t  if (sub)\n-\t    print_operand (stream, sub, 0);\n+\t    sh_print_operand (stream, sub, 0);\n \t  else\n \t    output_operand_lossage (\"invalid operand to %%S\");\n \t}\n@@ -1175,7 +1185,7 @@ print_operand (FILE *stream, rtx x, int code)\n \t  if (GET_CODE (XEXP (x, 0)) != PRE_DEC\n \t      && GET_CODE (XEXP (x, 0)) != POST_INC)\n \t    x = adjust_address (x, SImode, 4);\n-\t  print_operand_address (stream, XEXP (x, 0));\n+\t  sh_print_operand_address (stream, XEXP (x, 0));\n \t  break;\n \tdefault:\n \t  break;\n@@ -1189,7 +1199,7 @@ print_operand (FILE *stream, rtx x, int code)\n \t{\n \tcase REG:\n \tcase SUBREG:\n-\t  print_operand (stream, x, 0);\n+\t  sh_print_operand (stream, x, 0);\n \t  break;\n \tdefault:\n \t  break;\n@@ -1248,14 +1258,14 @@ print_operand (FILE *stream, rtx x, int code)\n \t{\n \tcase REG:\n \tcase SUBREG:\n-\t  print_operand (stream, x, 0);\n+\t  sh_print_operand (stream, x, 0);\n \t  fputs (\", 0\", stream);\n \t  break;\n \n \tcase PLUS:\n-\t  print_operand (stream, XEXP (x, 0), 0);\n+\t  sh_print_operand (stream, XEXP (x, 0), 0);\n \t  fputs (\", \", stream);\n-\t  print_operand (stream, XEXP (x, 1), 0);\n+\t  sh_print_operand (stream, XEXP (x, 1), 0);\n \t  break;\n \n \tdefault:\n@@ -1398,6 +1408,13 @@ print_operand (FILE *stream, rtx x, int code)\n       break;\n     }\n }\n+\n+static bool\n+sh_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '.' || code == '#' || code == '@' || code == ','\n+          || code == '$' || code == '\\'' || code == '>');\n+}\n \f\n \n /* Encode symbol attributes of a SYMBOL_REF into its"}, {"sha": "9482387ea56f7778b6ca72ca7bfc14c8325ff7e9", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e94b957db4fe058101d3c9cc1d62f2c5f763327/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9e94b957db4fe058101d3c9cc1d62f2c5f763327", "patch": "@@ -2441,20 +2441,6 @@ struct sh_args {\n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS) \\\n   final_prescan_insn ((INSN), (OPVEC), (NOPERANDS))\n \n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n-\n-#define PRINT_OPERAND(STREAM, X, CODE)  print_operand ((STREAM), (X), (CODE))\n-\n-/* Print a memory address as an operand to reference that memory location.  */\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM,X)  print_operand_address ((STREAM), (X))\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n-  ((CHAR) == '.' || (CHAR) == '#' || (CHAR) == '@' || (CHAR) == ','\t\\\n-   || (CHAR) == '$' || (CHAR) == '\\'' || (CHAR) == '>')\n-\n /* Recognize machine-specific patterns that may appear within\n    constants.  Used for PIC-specific UNSPECs.  */\n #define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\"}]}