{"sha": "bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhZTBkYWFhYTFhMWQwYTE3Y2RmNDI2MmQ0N2IyNjUzOGNjOWFjMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-23T18:16:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-10-23T18:16:59Z"}, "message": "Don't use shifts for extendsidi2\n\nFrom-SVN: r13008", "tree": {"sha": "0e96ec5ba6106ee270356661df26d52921a39230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e96ec5ba6106ee270356661df26d52921a39230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1/comments", "author": null, "committer": null, "parents": [{"sha": "7cabe29ab965599dc81332031b95dbaeab285b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cabe29ab965599dc81332031b95dbaeab285b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cabe29ab965599dc81332031b95dbaeab285b73"}], "stats": {"total": 34, "additions": 9, "deletions": 25}, "files": [{"sha": "4c8cec7e9ef09d671052608f92bb308372bf470d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bbae0daaaa1a1d0a17cdf4262d47b26538cc9ac1", "patch": "@@ -2508,35 +2508,19 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; Extension insns.\n ;; Those for integer source operand are ordered widest source type first.\n \n-(define_expand \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"\n-{\n-  if (optimize && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_not_mem (operands[1]);\n-\n-  if (GET_CODE (operands[1]) != MEM)\n-    {\n-      rtx op1   = gen_lowpart (DImode, operands[1]);\n-      rtx temp  = gen_reg_rtx (DImode);\n-      rtx shift = gen_rtx (CONST_INT, VOIDmode, 32);\n+;; In 64 bit mode, 32 bit values in general registers are always\n+;; correctly sign extended.  That means that if the target is a\n+;; general register, we can sign extend from SImode to DImode just by\n+;; doing a move.\n \n-      emit_insn (gen_ashldi3 (temp, op1, shift));\n-      emit_insn (gen_ashrdi3 (operands[0], temp, shift));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"extendsidi2_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(sign_extend:DI (match_operand:SI 1 \"memory_operand\" \"R,m\")))]\n+(define_insn \"extendsidi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n+\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,R,m\")))]\n   \"TARGET_64BIT\"\n   \"* return mips_move_1word (operands, insn, FALSE);\"\n-  [(set_attr \"type\"\t\"load\")\n+  [(set_attr \"type\"\t\"move,load,load\")\n    (set_attr \"mode\"\t\"DI\")\n-   (set_attr \"length\"\t\"1,2\")])\n+   (set_attr \"length\"\t\"1,1,2\")])\n \n ;; These patterns originally accepted general_operands, however, slightly\n ;; better code is generated by only accepting register_operands, and then"}]}