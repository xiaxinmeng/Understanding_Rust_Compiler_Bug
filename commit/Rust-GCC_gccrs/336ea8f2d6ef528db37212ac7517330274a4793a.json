{"sha": "336ea8f2d6ef528db37212ac7517330274a4793a", "node_id": "C_kwDOANBUbNoAKDMzNmVhOGYyZDZlZjUyOGRiMzcyMTJhYzc1MTczMzAyNzRhNDc5M2E", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2022-01-20T08:15:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:23Z"}, "message": "[Ada] Proof of System.Val_Int at gold level\n\ngcc/ada/\n\n\t* libgnat/s-valint.ads: Add SPARK_Mode and pragma to ignore\n\tassertions in instance and add additional ghost parameters to\n\tthe instance of Value_I.\n\t* libgnat/s-vallli.ads: Idem.\n\t* libgnat/s-valllli.ads: Idem.\n\t* libgnat/s-valuei.ads, libgnat/s-valuei.adb: New generic\n\tparameters for ghost functions from System.Valueu. Add\n\tfunctional contracts.", "tree": {"sha": "656606babf94e468a1c8070ced70ea2ccb1c1960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/656606babf94e468a1c8070ced70ea2ccb1c1960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336ea8f2d6ef528db37212ac7517330274a4793a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ea8f2d6ef528db37212ac7517330274a4793a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336ea8f2d6ef528db37212ac7517330274a4793a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ea8f2d6ef528db37212ac7517330274a4793a/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8053225de072fed9c4822e589c853a6f5e47c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8053225de072fed9c4822e589c853a6f5e47c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8053225de072fed9c4822e589c853a6f5e47c4"}], "stats": {"total": 311, "additions": 289, "deletions": 22}, "files": [{"sha": "c0d47aa1ce7f31fda237218f543adea632f3cf94", "filename": "gcc/ada/libgnat/s-valint.ads", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valint.ads?ref=336ea8f2d6ef528db37212ac7517330274a4793a", "patch": "@@ -32,16 +32,39 @@\n --  This package contains routines for scanning signed Integer values for use\n --  in Text_IO.Integer_IO, and the Value attribute.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre                => Ignore,\n+                         Post               => Ignore,\n+                         Contract_Cases     => Ignore,\n+                         Ghost              => Ignore,\n+                         Subprogram_Variant => Ignore);\n+\n with System.Unsigned_Types;\n with System.Val_Uns;\n with System.Value_I;\n \n-package System.Val_Int is\n+package System.Val_Int with SPARK_Mode is\n    pragma Preelaborate;\n \n    subtype Unsigned is Unsigned_Types.Unsigned;\n \n-   package Impl is new Value_I (Integer, Unsigned, Val_Uns.Scan_Raw_Unsigned);\n+   package Impl is new Value_I\n+     (Int                          => Integer,\n+      Uns                          => Unsigned,\n+      Scan_Raw_Unsigned            => Val_Uns.Scan_Raw_Unsigned,\n+      Is_Raw_Unsigned_Format_Ghost =>\n+         Val_Uns.Impl.Is_Raw_Unsigned_Format_Ghost,\n+      Raw_Unsigned_Overflows_Ghost =>\n+         Val_Uns.Impl.Raw_Unsigned_Overflows_Ghost,\n+      Scan_Raw_Unsigned_Ghost      =>\n+         Val_Uns.Impl.Scan_Raw_Unsigned_Ghost,\n+      Raw_Unsigned_Last_Ghost      =>\n+         Val_Uns.Impl.Raw_Unsigned_Last_Ghost);\n \n    procedure Scan_Integer\n      (Str : String;"}, {"sha": "dfb1729e41ca9c9a3491998959fc7df22631a578", "filename": "gcc/ada/libgnat/s-vallli.ads", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-vallli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-vallli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vallli.ads?ref=336ea8f2d6ef528db37212ac7517330274a4793a", "patch": "@@ -32,19 +32,40 @@\n --  This package contains routines for scanning signed Long_Long_Integer\n --  values for use in Text_IO.Integer_IO, and the Value attribute.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre                => Ignore,\n+                         Post               => Ignore,\n+                         Contract_Cases     => Ignore,\n+                         Ghost              => Ignore,\n+                         Subprogram_Variant => Ignore);\n+\n with System.Unsigned_Types;\n with System.Val_LLU;\n with System.Value_I;\n \n-package System.Val_LLI is\n+package System.Val_LLI with SPARK_Mode is\n    pragma Preelaborate;\n \n    subtype Long_Long_Unsigned is Unsigned_Types.Long_Long_Unsigned;\n \n-   package Impl is new\n-     Value_I (Long_Long_Integer,\n-              Long_Long_Unsigned,\n-              Val_LLU.Scan_Raw_Long_Long_Unsigned);\n+   package Impl is new Value_I\n+     (Int                          => Long_Long_Integer,\n+      Uns                          => Long_Long_Unsigned,\n+      Scan_Raw_Unsigned            =>\n+         Val_LLU.Scan_Raw_Long_Long_Unsigned,\n+      Is_Raw_Unsigned_Format_Ghost =>\n+         Val_LLU.Impl.Is_Raw_Unsigned_Format_Ghost,\n+      Raw_Unsigned_Overflows_Ghost =>\n+         Val_LLU.Impl.Raw_Unsigned_Overflows_Ghost,\n+      Scan_Raw_Unsigned_Ghost      =>\n+         Val_LLU.Impl.Scan_Raw_Unsigned_Ghost,\n+      Raw_Unsigned_Last_Ghost      =>\n+         Val_LLU.Impl.Raw_Unsigned_Last_Ghost);\n \n    procedure Scan_Long_Long_Integer\n      (Str  : String;"}, {"sha": "84bca5878eda1b92564f24d741ee8891ca6f6276", "filename": "gcc/ada/libgnat/s-valllli.ads", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valllli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valllli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valllli.ads?ref=336ea8f2d6ef528db37212ac7517330274a4793a", "patch": "@@ -32,19 +32,40 @@\n --  This package contains routines for scanning signed Long_Long_Long_Integer\n --  values for use in Text_IO.Integer_IO, and the Value attribute.\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre                => Ignore,\n+                         Post               => Ignore,\n+                         Contract_Cases     => Ignore,\n+                         Ghost              => Ignore,\n+                         Subprogram_Variant => Ignore);\n+\n with System.Unsigned_Types;\n with System.Val_LLLU;\n with System.Value_I;\n \n-package System.Val_LLLI is\n+package System.Val_LLLI with SPARK_Mode is\n    pragma Preelaborate;\n \n    subtype Long_Long_Long_Unsigned is Unsigned_Types.Long_Long_Long_Unsigned;\n \n-   package Impl is new\n-     Value_I (Long_Long_Long_Integer,\n-              Long_Long_Long_Unsigned,\n-              Val_LLLU.Scan_Raw_Long_Long_Long_Unsigned);\n+   package Impl is new Value_I\n+     (Int                          => Long_Long_Long_Integer,\n+      Uns                          => Long_Long_Long_Unsigned,\n+      Scan_Raw_Unsigned            =>\n+         Val_LLLU.Scan_Raw_Long_Long_Long_Unsigned,\n+      Is_Raw_Unsigned_Format_Ghost =>\n+         Val_LLLU.Impl.Is_Raw_Unsigned_Format_Ghost,\n+      Raw_Unsigned_Overflows_Ghost =>\n+         Val_LLLU.Impl.Raw_Unsigned_Overflows_Ghost,\n+      Scan_Raw_Unsigned_Ghost      =>\n+         Val_LLLU.Impl.Scan_Raw_Unsigned_Ghost,\n+      Raw_Unsigned_Last_Ghost      =>\n+         Val_LLLU.Impl.Raw_Unsigned_Last_Ghost);\n \n    procedure Scan_Long_Long_Long_Integer\n      (Str  : String;"}, {"sha": "faf57915c7811e3c06d206b450cf8490e983518d", "filename": "gcc/ada/libgnat/s-valuei.adb", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valuei.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valuei.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuei.adb?ref=336ea8f2d6ef528db37212ac7517330274a4793a", "patch": "@@ -29,10 +29,18 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.Val_Util; use System.Val_Util;\n-\n package body System.Value_I is\n \n+   --  Ghost code, loop invariants and assertions in this unit are meant for\n+   --  analysis only, not for run-time checking, as it would be too costly\n+   --  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+   pragma Assertion_Policy (Ghost              => Ignore,\n+                            Loop_Invariant     => Ignore,\n+                            Assert             => Ignore,\n+                            Assert_And_Cut     => Ignore,\n+                            Subprogram_Variant => Ignore);\n+\n    ------------------\n    -- Scan_Integer --\n    ------------------\n@@ -46,26 +54,35 @@ package body System.Value_I is\n       Uval : Uns;\n       --  Unsigned result\n \n-      Minus : Boolean := False;\n+      Minus : Boolean;\n       --  Set to True if minus sign is present, otherwise to False\n \n-      Start : Positive;\n+      Unused_Start : Positive;\n       --  Saves location of first non-blank (not used in this case)\n \n+      Non_Blank : constant Positive :=\n+        First_Non_Space_Ghost (Str, Ptr.all, Max)\n+      with Ghost;\n+      Fst_Num   : constant Positive :=\n+        (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n+         else Non_Blank)\n+      with Ghost;\n+\n    begin\n-      Scan_Sign (Str, Ptr, Max, Minus, Start);\n+      Scan_Sign (Str, Ptr, Max, Minus, Unused_Start);\n \n       if Str (Ptr.all) not in '0' .. '9' then\n-         Ptr.all := Start;\n+         Ptr.all := Unused_Start;\n          Bad_Value (Str);\n       end if;\n \n       Scan_Raw_Unsigned (Str, Ptr, Max, Uval);\n+      pragma Assert (Uval = Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max));\n \n       --  Deal with overflow cases, and also with largest negative number\n \n       if Uval > Uns (Int'Last) then\n-         if Minus and then Uval = Uns (-(Int'First)) then\n+         if Minus and then Uval = Uns (Int'Last) + 1 then\n             Res := Int'First;\n          else\n             Bad_Value (Str);\n@@ -106,9 +123,31 @@ package body System.Value_I is\n          declare\n             V : Int;\n             P : aliased Integer := Str'First;\n+\n+            Non_Blank : constant Positive := First_Non_Space_Ghost\n+              (Str, Str'First, Str'Last)\n+            with Ghost;\n+            Fst_Num   : constant Positive :=\n+              (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n+               else Non_Blank)\n+              with Ghost;\n          begin\n-            Scan_Integer (Str, P'Access, Str'Last, V);\n+            pragma Assert\n+              (Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Str'Last)));\n+\n+            declare\n+               P_Acc : constant not null access Integer := P'Access;\n+            begin\n+               Scan_Integer (Str, P_Acc, Str'Last, V);\n+            end;\n+\n+            pragma Assert\n+              (P = Raw_Unsigned_Last_Ghost (Str, Fst_Num, Str'Last));\n+\n             Scan_Trailing_Blanks (Str, P);\n+\n+            pragma Assert\n+              (Is_Value_Integer_Ghost (Slide_If_Necessary (Str), V));\n             return V;\n          end;\n       end if;"}, {"sha": "d6a78fda5401e483e745294904e80828b224e2cb", "filename": "gcc/ada/libgnat/s-valuei.ads", "status": "modified", "additions": 165, "deletions": 2, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea8f2d6ef528db37212ac7517330274a4793a/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuei.ads?ref=336ea8f2d6ef528db37212ac7517330274a4793a", "patch": "@@ -32,6 +32,16 @@\n --  This package contains routines for scanning signed integer values for use\n --  in Text_IO.Integer_IO, and the Value attribute.\n \n+pragma Assertion_Policy (Pre                => Ignore,\n+                         Post               => Ignore,\n+                         Contract_Cases     => Ignore,\n+                         Ghost              => Ignore,\n+                         Subprogram_Variant => Ignore);\n+pragma Warnings (Off, \"postcondition does not mention function result\");\n+--  True postconditions are used to avoid inlining for GNATprove\n+\n+with System.Val_Util; use System.Val_Util;\n+\n generic\n \n    type Int is range <>;\n@@ -44,14 +54,86 @@ generic\n            Max : Integer;\n            Res : out Uns);\n \n+   --  Additional parameters for ghost subprograms used inside contracts\n+\n+   with function Is_Raw_Unsigned_Format_Ghost (Str : String) return Boolean;\n+   with function Raw_Unsigned_Overflows_Ghost\n+          (Str      : String;\n+           From, To : Integer)\n+           return Boolean;\n+   with function Scan_Raw_Unsigned_Ghost\n+          (Str      : String;\n+           From, To : Integer)\n+           return Uns;\n+   with function Raw_Unsigned_Last_Ghost\n+          (Str      : String;\n+           From, To : Integer)\n+           return Positive;\n+\n package System.Value_I is\n    pragma Preelaborate;\n \n+   function Uns_Is_Valid_Int (Minus : Boolean; Uval : Uns) return Boolean is\n+     (if Minus then Uval <= Uns (Int'Last) + 1\n+      else Uval <= Uns (Int'Last))\n+   with Ghost,\n+     Post => True;\n+   --  Return True if Uval (or -Uval when Minus is True) is a valid number of\n+   --  type Int.\n+\n+   function Is_Int_Of_Uns\n+     (Minus : Boolean;\n+      Uval  : Uns;\n+      Val   : Int)\n+      return Boolean\n+   is\n+     (if Minus and then Uval = Uns (Int'Last) + 1 then Val = Int'First\n+      elsif Minus then Val = -(Int (Uval))\n+      else Val = Int (Uval))\n+   with Ghost,\n+     Pre  => Uns_Is_Valid_Int (Minus, Uval),\n+     Post => True;\n+   --  Return True if Uval (or -Uval when Minus is True) is equal to Val\n+\n    procedure Scan_Integer\n      (Str : String;\n       Ptr : not null access Integer;\n       Max : Integer;\n-      Res : out Int);\n+      Res : out Int)\n+   with\n+     Pre  =>\n+       Str'Last /= Positive'Last\n+       --  Ptr.all .. Max is either an empty range, or a valid range in Str\n+       and then (Ptr.all > Max\n+                 or else (Ptr.all >= Str'First and then Max <= Str'Last))\n+       and then not Only_Space_Ghost (Str, Ptr.all, Max)\n+       and then\n+         (declare\n+            Non_Blank : constant Positive := First_Non_Space_Ghost\n+              (Str, Ptr.all, Max);\n+            Fst_Num   : constant Positive :=\n+              (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n+               else Non_Blank);\n+          begin\n+            Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Max))\n+            and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Max)\n+            and then Uns_Is_Valid_Int\n+              (Minus => Str (Non_Blank) = '-',\n+               Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max))),\n+    Post =>\n+      (declare\n+         Non_Blank : constant Positive := First_Non_Space_Ghost\n+           (Str, Ptr.all'Old, Max);\n+         Fst_Num   : constant Positive :=\n+           (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1\n+            else Non_Blank);\n+         Uval      : constant Uns :=\n+            Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Max);\n+       begin\n+           Is_Int_Of_Uns (Minus => Str (Non_Blank) = '-',\n+                          Uval  => Uval,\n+                          Val   => Res)\n+             and then Ptr.all = Raw_Unsigned_Last_Ghost (Str, Fst_Num, Max));\n    --  This procedure scans the string starting at Str (Ptr.all) for a valid\n    --  integer according to the syntax described in (RM 3.5(43)). The substring\n    --  scanned extends no further than Str (Max). There are three cases for the\n@@ -77,10 +159,91 @@ package System.Value_I is\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case.\n \n-   function Value_Integer (Str : String) return Int;\n+   function Slide_To_1 (Str : String) return String\n+   with Ghost,\n+       Post =>\n+         Only_Space_Ghost (Str, Str'First, Str'Last) =\n+         (for all J in Str'First .. Str'Last =>\n+            Slide_To_1'Result (J - Str'First + 1) = ' ');\n+   --  Slides Str so that it starts at 1\n+\n+   function Slide_If_Necessary (Str : String) return String is\n+     (if Str'Last = Positive'Last then Slide_To_1 (Str) else Str)\n+   with Ghost,\n+       Post =>\n+         Only_Space_Ghost (Str, Str'First, Str'Last) =\n+         Only_Space_Ghost (Slide_If_Necessary'Result,\n+                           Slide_If_Necessary'Result'First,\n+                           Slide_If_Necessary'Result'Last);\n+   --  If Str'Last = Positive'Last then slides Str so that it starts at 1\n+\n+   function Is_Integer_Ghost (Str : String) return Boolean is\n+     (declare\n+        Non_Blank : constant Positive := First_Non_Space_Ghost\n+          (Str, Str'First, Str'Last);\n+        Fst_Num   : constant Positive :=\n+          (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1 else Non_Blank);\n+      begin\n+        Is_Raw_Unsigned_Format_Ghost (Str (Fst_Num .. Str'Last))\n+        and then not Raw_Unsigned_Overflows_Ghost (Str, Fst_Num, Str'Last)\n+        and then\n+          Uns_Is_Valid_Int\n+            (Minus => Str (Non_Blank) = '-',\n+             Uval  => Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Str'Last))\n+        and then Only_Space_Ghost\n+           (Str, Raw_Unsigned_Last_Ghost (Str, Fst_Num, Str'Last), Str'Last))\n+   with Ghost,\n+       Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+         and then Str'Last /= Positive'Last,\n+       Post => True;\n+   --  Ghost function that determines if Str has the correct format for a\n+   --  signed number, consisting in some blank characters, an optional\n+   --  sign, a raw unsigned number which does not overflow and then some\n+   --  more blank characters.\n+\n+   function Is_Value_Integer_Ghost (Str : String; Val : Int) return Boolean is\n+     (declare\n+        Non_Blank : constant Positive := First_Non_Space_Ghost\n+          (Str, Str'First, Str'Last);\n+        Fst_Num   : constant Positive :=\n+          (if Str (Non_Blank) in '+' | '-' then Non_Blank + 1 else Non_Blank);\n+        Uval      : constant Uns :=\n+          Scan_Raw_Unsigned_Ghost (Str, Fst_Num, Str'Last);\n+      begin\n+        Is_Int_Of_Uns (Minus => Str (Non_Blank) = '-',\n+                       Uval  => Uval,\n+                       Val   => Val))\n+   with Ghost,\n+       Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+         and then Str'Last /= Positive'Last\n+         and then Is_Integer_Ghost (Str),\n+       Post => True;\n+   --  Ghost function that returns True if Val is the value corresponding to\n+   --  the signed number represented by Str.\n+\n+   function Value_Integer (Str : String) return Int\n+   with Pre => not Only_Space_Ghost (Str, Str'First, Str'Last)\n+     and then Str'Length /= Positive'Last\n+     and then Is_Integer_Ghost (Slide_If_Necessary (Str)),\n+     Post =>\n+         Is_Value_Integer_Ghost\n+           (Slide_If_Necessary (Str), Value_Integer'Result),\n+     Subprogram_Variant => (Decreases => Str'First);\n    --  Used in computing X'Value (Str) where X is a signed integer type whose\n    --  base range does not exceed the base range of Integer. Str is the string\n    --  argument of the attribute. Constraint_Error is raised if the string is\n    --  malformed, or if the value is out of range.\n \n+private\n+\n+   ----------------\n+   -- Slide_To_1 --\n+   ----------------\n+\n+   function Slide_To_1 (Str : String) return String is\n+      (declare\n+         Res : constant String (1 .. Str'Length) := Str;\n+       begin\n+         Res);\n+\n end System.Value_I;"}]}