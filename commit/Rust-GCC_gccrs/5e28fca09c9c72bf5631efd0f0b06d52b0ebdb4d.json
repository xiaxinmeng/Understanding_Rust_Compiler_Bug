{"sha": "5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyOGZjYTA5YzljNzJiZjU2MzFlZmQwZjBiMDZkNTJiMGViZGI0ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-25T19:33:07Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-13T10:40:54Z"}, "message": "C-Family, Objective-C : Implement Objective-C nullability Part 1[PR90707].\n\nThis part of the implementation covers property nullability attributes\nand includes the changes to common code. Follow-on changes will be needed\nto cover Objective-C method definitions, but those are expected to be\nlocal to the Objective-C front end.\n\nThe basis of the implementation is to translate the Objective-C-specific\nkeywords into an attribute (objc_nullability) which has the required\nstates to carry the attribute markup.\n\nWe introduce the keywords, and these are parsed and validated in the same\nmanner as other property attributes.  The resulting value is attached to\nthe property as an objc_nullability attribute.\n\ngcc/c-family/ChangeLog:\n\n\tPR objc/90707\n\t* c-common.c (c_common_reswords): null_unspecified, nullable,\n\tnonnull, null_resettable: New keywords.\n\t* c-common.h (enum rid): RID_NULL_UNSPECIFIED, RID_NULLABLE,\n\tRID_NONNULL, RID_NULL_RESETTABLE: New.\n\t(OBJC_IS_PATTR_KEYWORD): Include nullability keywords in the\n\tranges accepted for property attributes.\n\t* c-attribs.c (handle_objc_nullability_attribute): New.\n\t* c-objc.h (enum objc_property_attribute_group): Add\n\tOBJC_PROPATTR_GROUP_NULLABLE.\n\t(enum objc_property_attribute_kind):Add\n\tOBJC_PROPERTY_ATTR_NULL_UNSPECIFIED, OBJC_PROPERTY_ATTR_NULLABLE,\n\tOBJC_PROPERTY_ATTR_NONNULL, OBJC_PROPERTY_ATTR_NULL_RESETTABLE.\n\ngcc/objc/ChangeLog:\n\n\tPR objc/90707\n\t* objc-act.c (objc_prop_attr_kind_for_rid): Handle nullability.\n\t(objc_add_property_declaration): Handle nullability attributes.\n\tCheck that these are applicable to the property type.\n\t* objc-act.h (enum objc_property_nullability): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR objc/90707\n\t* obj-c++.dg/property/at-property-4.mm: Add basic nullability\n\ttests.\n\t* objc.dg/property/at-property-4.m: Likewise.\n\t* obj-c++.dg/attributes/nullability-00.mm: New test.\n\t* obj-c++.dg/property/nullability-00.mm: New test.\n\t* objc.dg/attributes/nullability-00.m: New test.\n\t* objc.dg/property/nullability-00.m: New test.\n\ngcc/ChangeLog:\n\n\tPR objc/90707\n\t* doc/extend.texi: Document the objc_nullability attribute.", "tree": {"sha": "668279298b8873e58c7ba3f20beb014d30666351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/668279298b8873e58c7ba3f20beb014d30666351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f191b152cb1df0e108a91880cb415e413bad56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f191b152cb1df0e108a91880cb415e413bad56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f191b152cb1df0e108a91880cb415e413bad56"}], "stats": {"total": 275, "additions": 272, "deletions": 3}, "files": [{"sha": "abdc32eb7d41bc1c2dff67fdfe337a47cdd9065e", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -159,6 +159,7 @@ static tree handle_patchable_function_entry_attribute (tree *, tree, tree,\n static tree handle_copy_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nsobject_attribute (tree *, tree, tree, int, bool *);\n static tree handle_objc_root_class_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_objc_nullability_attribute (tree *, tree, tree, int, bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -516,6 +517,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_nsobject_attribute, NULL },\n   { \"objc_root_class\",\t      0, 0, true, false, false, false,\n \t\t\t      handle_objc_root_class_attribute, NULL },\n+  { \"objc_nullability\",\t      1, 1, true, false, false, false,\n+\t\t\t      handle_objc_nullability_attribute, NULL },\n   { NULL,                     0, 0, false, false, false, false, NULL, NULL }\n };\n \n@@ -5182,6 +5185,52 @@ handle_objc_root_class_attribute (tree */*node*/, tree name, tree /*args*/,\n   return NULL_TREE;\n }\n \n+/* Handle an \"objc_nullability\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_objc_nullability_attribute (tree *node, tree name, tree args,\n+\t\t\t\t   int /*flags*/,\n+\t\t\t\t   bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+\n+  tree type = TREE_TYPE (*node);\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    type = TREE_TYPE (type);\n+\n+  if (type && !POINTER_TYPE_P (type))\n+    {\n+      error (\"%qE cannot be applied to non-pointer type %qT\", name, type);\n+      return NULL_TREE;\n+    }\n+\n+  /* We accept objc_nullability() with a single argument.\n+     string: \"unspecified\", \"nullable\", \"nonnull\" or \"resettable\"\n+     integer: 0 and 3 where the values have the same meaning as\n+     the strings.  */\n+  tree val = TREE_VALUE (args);\n+  if (TREE_CODE (val) == INTEGER_CST)\n+    {\n+      val = default_conversion (val);\n+      if (!tree_fits_uhwi_p (val) || tree_to_uhwi (val) > 3)\n+\terror (\"%qE attribute argument %qE is not an integer constant\"\n+\t       \" between 0 and 3\", name, val);\n+      else\n+\t*no_add_attrs = false; /* OK */\n+    }\n+  else if (TREE_CODE (val) == STRING_CST\n+\t   && (strcmp (TREE_STRING_POINTER (val), \"nullable\") == 0\n+\t      || strcmp (TREE_STRING_POINTER (val), \"nonnull\") == 0\n+\t      || strcmp (TREE_STRING_POINTER (val), \"unspecified\") == 0\n+\t      || strcmp (TREE_STRING_POINTER (val), \"resettable\") == 0))\n+    *no_add_attrs = false; /* OK */\n+  else if (val != error_mark_node)\n+    error (\"%qE attribute argument %qE is not recognised\", name, val);\n+\n+  return NULL_TREE;\n+}\n+\n /* Attempt to partially validate a single attribute ATTR as if\n    it were to be applied to an entity OPER.  */\n "}, {"sha": "ab7f64272740b02ae7b1111921bbdb0181b614c5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -580,6 +580,12 @@ const struct c_common_resword c_common_reswords[] =\n   { \"readwrite\",\tRID_READWRITE,\t\tD_OBJC },\n   { \"retain\",\t\tRID_RETAIN,\t\tD_OBJC },\n   { \"setter\",\t\tRID_SETTER,\t\tD_OBJC },\n+  /* These are Objective C implementation of nullability, accepted only in\n+     specific contexts.  */\n+  { \"null_unspecified\", RID_NULL_UNSPECIFIED,\tD_OBJC },\n+  { \"nullable\",\t\tRID_NULLABLE,\t\tD_OBJC },\n+  { \"nonnull\",\t\tRID_NONNULL,\t\tD_OBJC },\n+  { \"null_resettable\",\tRID_NULL_RESETTABLE,\tD_OBJC },\n };\n \n const unsigned int num_c_common_reswords ="}, {"sha": "3c508979b144e5767a8132a1c1e02c3c58136407", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -87,6 +87,11 @@ enum rid\n   RID_ASSIGN, RID_RETAIN, RID_COPY,\n   RID_PROPATOMIC, RID_NONATOMIC,\n \n+  /* ObjC nullability support keywords that also can appear in the\n+     property attribute context.  These values should remain contiguous\n+     with the other property attributes.  */\n+  RID_NULL_UNSPECIFIED, RID_NULLABLE, RID_NONNULL, RID_NULL_RESETTABLE,\n+\n   /* C (reserved and imaginary types not implemented, so any use is a\n      syntax error) */\n   RID_IMAGINARY,\n@@ -264,7 +269,7 @@ enum rid\n   RID_FIRST_PQ = RID_IN,\n   RID_LAST_PQ = RID_ONEWAY,\n   RID_FIRST_PATTR = RID_GETTER,\n-  RID_LAST_PATTR = RID_NONATOMIC\n+  RID_LAST_PATTR = RID_NULL_RESETTABLE\n };\n \n #define OBJC_IS_AT_KEYWORD(rid) \\"}, {"sha": "4b502609eaa953286903115c7348254ebc61a798", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -44,6 +44,7 @@ enum objc_property_attribute_group\n   OBJC_PROPATTR_GROUP_READWRITE,\n   OBJC_PROPATTR_GROUP_ASSIGN,\n   OBJC_PROPATTR_GROUP_ATOMIC,\n+  OBJC_PROPATTR_GROUP_NULLABLE,\n   OBJC_PROPATTR_GROUP_CLASS,\n   OBJC_PROPATTR_GROUP_MAX\n };\n@@ -60,6 +61,10 @@ enum objc_property_attribute_kind\n   OBJC_PROPERTY_ATTR_COPY =\t\t( 7 << 8)|OBJC_PROPATTR_GROUP_ASSIGN,\n   OBJC_PROPERTY_ATTR_ATOMIC =\t\t( 8 << 8)|OBJC_PROPATTR_GROUP_ATOMIC,\n   OBJC_PROPERTY_ATTR_NONATOMIC =\t( 9 << 8)|OBJC_PROPATTR_GROUP_ATOMIC,\n+  OBJC_PROPERTY_ATTR_NULL_UNSPECIFIED = (12 << 8)|OBJC_PROPATTR_GROUP_NULLABLE,\n+  OBJC_PROPERTY_ATTR_NULLABLE =\t\t(13 << 8)|OBJC_PROPATTR_GROUP_NULLABLE,\n+  OBJC_PROPERTY_ATTR_NONNULL =\t\t(14 << 8)|OBJC_PROPATTR_GROUP_NULLABLE,\n+  OBJC_PROPERTY_ATTR_NULL_RESETTABLE =\t(15 << 8)|OBJC_PROPATTR_GROUP_NULLABLE,\n   OBJC_PROPERTY_ATTR_CLASS =\t\t(16 << 8)|OBJC_PROPATTR_GROUP_CLASS,\n   OBJC_PROPERTY_ATTR_MAX =\t\t(255 << 8|OBJC_PROPATTR_GROUP_MAX)\n };"}, {"sha": "4e5197fc038fa0762fd5028f29864e8af6a5de46", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -7429,6 +7429,33 @@ data in this way can reduce program startup times.  This attribute is\n specific to ELF targets and relies on the linker to place such data in\n the right location\n \n+@item objc_nullability (@var{nullability kind}) @r{(Objective-C and Objective\n+-C++ only)}\n+@cindex @code{objc_nullability} variable attribute\n+This attribute applies to pointer variables only.  It allows marking the\n+pointer with one of four possible values describing the conditions under\n+which the pointer might have a @code{nil} value. In most cases, the\n+attribute is intended to be an internal representation for property and\n+method nullability (specified by language keywords); it is not recommended\n+to use it directly.\n+\n+When @var{nullability kind} is @code{\"unspecified\"} or @code{0}, nothing is\n+known about the conditions in which the pointer might be @code{nil}. Making\n+this state specific serves to avoid false positives in diagnostics.\n+\n+When @var{nullability kind} is @code{\"nonnull\"} or @code{1}, the pointer has\n+no meaning if it is @code{nil} and thus the compiler is free to emit\n+diagnostics if it can be determined that the value will be @code{nil}.\n+\n+When @var{nullability kind} is @code{\"nullable\"} or @code{2}, the pointer might\n+be @code{nil} and carry meaning as such.\n+\n+When @var{nullability kind} is @code{\"resettable\"} or @code{3} (used only in\n+the context of property attribute lists) this describes the case in which a\n+property setter may take the value @code{nil} (which perhaps causes the\n+property to be reset in some manner to a default) but for which the property\n+getter will never validly return @code{nil}.\n+\n @end table\n \n @node ARC Variable Attributes"}, {"sha": "2700bbee639562ecc4d65378ddda81d13f72c788", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -825,6 +825,11 @@ objc_prop_attr_kind_for_rid (enum rid prop_rid)\n       case RID_PROPATOMIC:\treturn OBJC_PROPERTY_ATTR_ATOMIC;\n       case RID_NONATOMIC:\treturn OBJC_PROPERTY_ATTR_NONATOMIC;\n \n+      case RID_NULL_UNSPECIFIED:return OBJC_PROPERTY_ATTR_NULL_UNSPECIFIED;\n+      case RID_NULLABLE:\treturn OBJC_PROPERTY_ATTR_NULLABLE;\n+      case RID_NONNULL:\t\treturn OBJC_PROPERTY_ATTR_NONNULL;\n+      case RID_NULL_RESETTABLE:\treturn OBJC_PROPERTY_ATTR_NULL_RESETTABLE;\n+\n       case RID_CLASS:\t\treturn OBJC_PROPERTY_ATTR_CLASS;\n     }\n }\n@@ -995,6 +1000,27 @@ objc_add_property_declaration (location_t location, tree decl,\n     property_nonatomic = attrs[OBJC_PROPATTR_GROUP_CLASS]->prop_kind\n \t\t\t == OBJC_PROPERTY_ATTR_CLASS;\n \n+  /* Nullability specifications for the property.  */\n+  enum objc_property_nullability property_nullability\n+    =  OBJC_PROPERTY_NULL_UNSET;\n+  if (attrs[OBJC_PROPATTR_GROUP_NULLABLE])\n+    {\n+      if (attrs[OBJC_PROPATTR_GROUP_NULLABLE]->prop_kind\n+\t  == OBJC_PROPERTY_ATTR_NULL_UNSPECIFIED)\n+\tproperty_nullability = OBJC_PROPERTY_NULL_UNSPECIFIED;\n+      else if (attrs[OBJC_PROPATTR_GROUP_NULLABLE]->prop_kind\n+\t  == OBJC_PROPERTY_ATTR_NULLABLE)\n+\tproperty_nullability = OBJC_PROPERTY_NULLABLE;\n+      else if (attrs[OBJC_PROPATTR_GROUP_NULLABLE]->prop_kind\n+\t  == OBJC_PROPERTY_ATTR_NONNULL)\n+\tproperty_nullability = OBJC_PROPERTY_NONNULL;\n+      else if (attrs[OBJC_PROPATTR_GROUP_NULLABLE]->prop_kind\n+\t  == OBJC_PROPERTY_ATTR_NULL_RESETTABLE)\n+\tproperty_nullability = OBJC_PROPERTY_NULL_RESETTABLE;\n+      else\n+\tgcc_unreachable ();\n+    }\n+\n   /* TODO: Check that the property type is an Objective-C object or a\n      \"POD\".  */\n \n@@ -1272,7 +1298,8 @@ objc_add_property_declaration (location_t location, tree decl,\n   tree property_decl = make_node (PROPERTY_DECL);\n \n   /* Copy the basic information from the original decl.  */\n-  TREE_TYPE (property_decl) = TREE_TYPE (decl);\n+  tree p_type = TREE_TYPE (decl);\n+  TREE_TYPE (property_decl) = p_type;\n   DECL_SOURCE_LOCATION (property_decl) = DECL_SOURCE_LOCATION (decl);\n   TREE_DEPRECATED (property_decl) = TREE_DEPRECATED (decl);\n \n@@ -1287,6 +1314,28 @@ objc_add_property_declaration (location_t location, tree decl,\n   PROPERTY_IVAR_NAME (property_decl) = NULL_TREE;\n   PROPERTY_DYNAMIC (property_decl) = 0;\n \n+  /* FIXME: We seem to drop any existing DECL_ATTRIBUTES on the floor.  */\n+  if (property_nullability != OBJC_PROPERTY_NULL_UNSET)\n+    {\n+      if (p_type && !POINTER_TYPE_P (p_type))\n+\terror_at (decl_loc, \"nullability specifier %qE cannot be applied to\"\n+\t\t  \" non-pointer type %qT\",\n+\t\t  attrs[OBJC_PROPATTR_GROUP_NULLABLE]->name, p_type);\n+      else if (p_type && POINTER_TYPE_P (p_type) && TREE_TYPE (p_type)\n+\t       && POINTER_TYPE_P (TREE_TYPE (p_type)))\n+\terror_at (decl_loc, \"nullability specifier %qE cannot be applied to\"\n+\t\t  \" multi-level pointer type %qT\",\n+\t\t  attrs[OBJC_PROPATTR_GROUP_NULLABLE]->name, p_type);\n+      else\n+\t{\n+\t  tree attr_name = get_identifier (\"objc_nullability\");\n+\t  tree attr_value = build_int_cst (unsigned_type_node,\n+\t\t\t\t       (unsigned)property_nullability);\n+\t  tree nulla = build_tree_list (attr_name, attr_value);\n+\t  DECL_ATTRIBUTES (property_decl) = nulla;\n+\t}\n+    }\n+\n   /* Remember the fact that the property was found in the @optional\n      section in a @protocol, or not.  */\n   if (objc_method_optional_flag)"}, {"sha": "2fe409db4fc95a900dc3f6ad1486c4c642be99ff", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -141,6 +141,16 @@ enum objc_property_assign_semantics {\n #define PROPERTY_CLASS(DECL) \\\n    DECL_LANG_FLAG_6 (PROPERTY_DECL_CHECK (DECL))\n \n+/* PROPERTY_NULLABILITY attributes added to the decl attributes.\n+   effectively, __attribute__((objc_nullability(kind))),   */\n+enum objc_property_nullability {\n+  OBJC_PROPERTY_NULL_UNSPECIFIED = 0,\n+  OBJC_PROPERTY_NULLABLE,\n+  OBJC_PROPERTY_NONNULL,\n+  OBJC_PROPERTY_NULL_RESETTABLE,\n+  OBJC_PROPERTY_NULL_UNSET\n+};\n+\n /* PROPERTY_REF.  A PROPERTY_REF represents an 'object.property'\n    expression.  It is normally used for property access, but when\n    the Objective-C 2.0 \"dot-syntax\" (object.component) is used"}, {"sha": "957fca4e3ba1dfefcab5d0fa3f7ea1656567a781", "filename": "gcc/testsuite/obj-c++.dg/attributes/nullability-00.mm", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fnullability-00.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fnullability-00.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fnullability-00.mm?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-objc-root-class -fsyntax-only\" } */\n+\n+__attribute__((objc_nullability(0))) id a;\n+__attribute__((objc_nullability(4))) id e_1; /* { dg-error {'objc_nullability' attribute argument '4' is not an integer constant between 0 and 3} } */\n+__attribute__((objc_nullability(-22))) id e_2; /* { dg-error {'objc_nullability' attribute argument '-22' is not an integer constant between 0 and 3} } */\n+__attribute__((objc_nullability(\"unspecified\"))) id b;\n+__attribute__((objc_nullability(\"nullable\"))) id c;\n+__attribute__((objc_nullability(\"nonnull\"))) id d;\n+__attribute__((objc_nullability(\"resettable\"))) id e;\n+__attribute__((objc_nullability(\"nonsense\"))) id e_3; /* { dg-error {'objc_nullability' attribute argument '\"nonsense\"' is not recognised} } */\n+__attribute__((objc_nullability(noGoingToWork))) id e_4; /* { dg-error {'noGoingToWork' was not declared in this scope} } */\n+\n+@interface MyRoot\n+{\n+  __attribute__((objc_nullability(0))) id iv_a;\n+  __attribute__((objc_nullability(3))) struct { int bad_a; } s;/* { dg-error {'objc_nullability' cannot be applied to non-pointer type '<unnamed struct>'} } */\n+  __attribute__((objc_nullability(\"resettable\"))) int iv_b;/* { dg-error {'objc_nullability' cannot be applied to non-pointer type 'int'} } */\n+}\n+@end"}, {"sha": "f58935401b97f637e43658b59c937c6909e8e032", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-4.mm", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -26,12 +26,17 @@ - (void) mySetter2: (int)property;\n \n @property (class) int property_cl_1;\n \n+@property (null_unspecified) int *property_null_1;\n+@property (nullable) int *property_null_2;\n+@property (nonnull) int *property_null_3;\n+@property (null_resettable) int *property_null_4;\n+\n @property (release)   int property_err_1;      /* { dg-error \"unknown property attribute\" } */\n \n @property (getter=myGetter)  int property_g0;\n @property (setter=mySetter:) int property_s0;\n \n-/* Now test various problems.  */\n+/* Now test various basic problems.  */\n \n @property (readonly, readwrite) int a;    /* { dg-error \".readwrite. attribute conflicts with .readonly. attribute\" } */\n @property (readonly, setter=mySetterB:) int b; /* { dg-error \".readonly. attribute conflicts with .setter. attribute\" } */\n@@ -42,6 +47,19 @@ - (void) mySetter2: (int)property;\n \n @property (atomic, nonatomic) int property_j; /* { dg-error {'nonatomic' attribute conflicts with 'atomic' attribute} } */\n \n+@property (null_unspecified) int property_bad_t_1; /* { dg-error {nullability specifier 'null_unspecified' cannot be applied to non-pointer type 'int'} } */\n+@property (nullable) int property_bad_t_2;/* { dg-error {nullability specifier 'nullable' cannot be applied to non-pointer type 'int'} } */\n+@property (nonnull) int property_bad_t_3;/* { dg-error {nullability specifier 'nonnull' cannot be applied to non-pointer type 'int'} } */\n+@property (null_resettable) int property_bad_t_4;/* { dg-error {nullability specifier 'null_resettable' cannot be applied to non-pointer type 'int'} } */\n+@property (nullable) int **property_bad_t_5;/* { dg-error {nullability specifier 'nullable' cannot be applied to multi-level pointer type 'int\\*\\*'} } */\n+\n+@property (null_unspecified, nullable) int *property_ne_1; /* { dg-error {'nullable' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (null_unspecified, nonnull) int *property_ne_2; /* { dg-error {'nonnull' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (null_unspecified, null_resettable) int *property_ne_3; /* { dg-error {'null_resettable' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (nullable,nonnull) int *property_ne_4; /* { dg-error {'nonnull' attribute conflicts with 'nullable' attribute} } */\n+@property (nullable,null_resettable) int *property_ne_5; /* { dg-error {'null_resettable' attribute conflicts with 'nullable' attribute} } */\n+@property (nonnull, null_resettable) int *property_ne_6; /* { dg-error {'null_resettable' attribute conflicts with 'nonnull' attribute} } */\n+\n @property (setter=mySetter:,setter=mySetter2:)  int f; /* { dg-warning {multiple property 'setter' methods specified, the latest one will be used} } */\n @property (getter=myGetter, getter=myGetter2 )  int g; /* { dg-warning {multiple property 'getter' methods specified, the latest one will be used} } */\n "}, {"sha": "9b0c8084cf3b676f60a695475c49f03d03774482", "filename": "gcc/testsuite/obj-c++.dg/property/nullability-00.mm", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fnullability-00.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fnullability-00.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fnullability-00.mm?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fsyntax-only\" } */\n+\n+@interface MyRoot\n+{\n+  Class isa __attribute__((deprecated));\n+  id p;\n+  int x;\n+  int *i;\n+}\n+\n+@property(null_unspecified, assign) MyRoot *p1;\n+@property(nonnull, assign) MyRoot *p2;\n+@property(nullable, assign) MyRoot *p3;\n+@property(null_resettable, assign) MyRoot *p4;\n+@property(null_exciting, assign) MyRoot *e_5; /* { dg-error {unknown property attribute 'null_exciting'} } */\n+\n+@property(nonnull, retain, nullable) MyRoot *e_6; /* { dg-error {'nullable' attribute conflicts with 'nonnull' attribute} } */\n+@property(nonnull, nonnull) int *i; /* { dg-warning {duplicate 'nonnull' attribute} } */\n+\n+@end"}, {"sha": "81c0145f17b2dccb91cb604adc53556d288ebb03", "filename": "gcc/testsuite/objc.dg/attributes/nullability-00.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fnullability-00.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fnullability-00.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fnullability-00.m?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Wno-objc-root-class -fsyntax-only\" } */\n+\n+__attribute__((objc_nullability(0))) id a;\n+__attribute__((objc_nullability(4))) id e_1; /* { dg-error {'objc_nullability' attribute argument '4' is not an integer constant between 0 and 3} } */\n+__attribute__((objc_nullability(-22))) id e_2; /* { dg-error {'objc_nullability' attribute argument '-22' is not an integer constant between 0 and 3} } */\n+__attribute__((objc_nullability(\"unspecified\"))) id b;\n+__attribute__((objc_nullability(\"nullable\"))) id c;\n+__attribute__((objc_nullability(\"nonnull\"))) id d;\n+__attribute__((objc_nullability(\"resettable\"))) id e;\n+__attribute__((objc_nullability(\"nonsense\"))) id e_3; /* { dg-error {'objc_nullability' attribute argument '\"nonsense\"' is not recognised} } */\n+__attribute__((objc_nullability(noGoingToWork))) id e_4; /* { dg-error {'noGoingToWork' undeclared here} } */\n+\n+@interface MyRoot\n+{\n+  __attribute__((objc_nullability(0))) id iv_a;\n+  __attribute__((objc_nullability(3))) struct { int bad_a; } s;/* { dg-error {'objc_nullability' cannot be applied to non-pointer type 'struct <anonymous>'} } */\n+  __attribute__((objc_nullability(\"resettable\"))) int iv_b;/* { dg-error {'objc_nullability' cannot be applied to non-pointer type 'int'} } */\n+}\n+@end"}, {"sha": "04da34eaa0be750d8c7df5431e501dae705929d8", "filename": "gcc/testsuite/objc.dg/property/at-property-4.m", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -26,6 +26,11 @@ - (void) mySetter2: (int)property;\n \n @property (class) int property_cl_1;\n \n+@property (null_unspecified) int *property_null_1;\n+@property (nullable) int *property_null_2;\n+@property (nonnull) int *property_null_3;\n+@property (null_resettable) int *property_null_4;\n+\n @property (release)   int property_err_1;      /* { dg-error \"unknown property attribute\" } */\n \n @property (getter=myGetter)  int property_h;\n@@ -42,6 +47,19 @@ - (void) mySetter2: (int)property;\n \n @property (atomic, nonatomic) int property_j; /* { dg-error {'nonatomic' attribute conflicts with 'atomic' attribute} } */\n \n+@property (null_unspecified) int property_bad_t_1; /* { dg-error {nullability specifier 'null_unspecified' cannot be applied to non-pointer type 'int'} } */\n+@property (nullable) int property_bad_t_2;/* { dg-error {nullability specifier 'nullable' cannot be applied to non-pointer type 'int'} } */\n+@property (nonnull) int property_bad_t_3;/* { dg-error {nullability specifier 'nonnull' cannot be applied to non-pointer type 'int'} } */\n+@property (null_resettable) int property_bad_t_4;/* { dg-error {nullability specifier 'null_resettable' cannot be applied to non-pointer type 'int'} } */\n+@property (nullable) int **property_bad_t_5;/* { dg-error {nullability specifier 'nullable' cannot be applied to multi-level pointer type 'int \\*\\*'} } */\n+\n+@property (null_unspecified, nullable) int *property_ne_1; /* { dg-error {'nullable' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (null_unspecified, nonnull) int *property_ne_2; /* { dg-error {'nonnull' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (null_unspecified, null_resettable) int *property_ne_3; /* { dg-error {'null_resettable' attribute conflicts with 'null_unspecified' attribute} } */\n+@property (nullable,nonnull) int *property_ne_4; /* { dg-error {'nonnull' attribute conflicts with 'nullable' attribute} } */\n+@property (nullable,null_resettable) int *property_ne_5; /* { dg-error {'null_resettable' attribute conflicts with 'nullable' attribute} } */\n+@property (nonnull, null_resettable) int *property_ne_6; /* { dg-error {'null_resettable' attribute conflicts with 'nonnull' attribute} } */\n+\n @property (setter=mySetter:,setter=mySetter2:)  int f; /* { dg-warning {multiple property 'setter' methods specified, the latest one will be used} } */\n @property (getter=myGetter, getter=myGetter2 )  int g; /* { dg-warning {multiple property 'getter' methods specified, the latest one will be used} } */\n "}, {"sha": "9b0c8084cf3b676f60a695475c49f03d03774482", "filename": "gcc/testsuite/objc.dg/property/nullability-00.m", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fnullability-00.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fnullability-00.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fnullability-00.m?ref=5e28fca09c9c72bf5631efd0f0b06d52b0ebdb4d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-fsyntax-only\" } */\n+\n+@interface MyRoot\n+{\n+  Class isa __attribute__((deprecated));\n+  id p;\n+  int x;\n+  int *i;\n+}\n+\n+@property(null_unspecified, assign) MyRoot *p1;\n+@property(nonnull, assign) MyRoot *p2;\n+@property(nullable, assign) MyRoot *p3;\n+@property(null_resettable, assign) MyRoot *p4;\n+@property(null_exciting, assign) MyRoot *e_5; /* { dg-error {unknown property attribute 'null_exciting'} } */\n+\n+@property(nonnull, retain, nullable) MyRoot *e_6; /* { dg-error {'nullable' attribute conflicts with 'nonnull' attribute} } */\n+@property(nonnull, nonnull) int *i; /* { dg-warning {duplicate 'nonnull' attribute} } */\n+\n+@end"}]}