{"sha": "5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2YjFiZDJkMzY1OWY5YmI4ZTFkZmUxMzNjNGIyZDEyZWYwMzU5NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T19:56:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T19:56:23Z"}, "message": "(gen_reload): Handle SUBREG in PLUS specially too.\n\n(gen_reload): Handle SUBREG in PLUS specially too.  Change calls to\nemit_move_insn to recursive calls.\n\nFrom-SVN: r12856", "tree": {"sha": "b2f4d304619276e2a5b6cb379fd261387456459a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f4d304619276e2a5b6cb379fd261387456459a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595/comments", "author": null, "committer": null, "parents": [{"sha": "0404429725688df26a9f68ee08e3f303efca5628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0404429725688df26a9f68ee08e3f303efca5628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0404429725688df26a9f68ee08e3f303efca5628"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "35c1efd3638530f7b72d566312614c7d36257afd", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=5c6b1bd2d3659f9bb8e1dfe133c4b2d12ef03595", "patch": "@@ -6818,8 +6818,10 @@ gen_reload (out, in, opnum, type)\n \n   if (GET_CODE (in) == PLUS\n       && (GET_CODE (XEXP (in, 0)) == REG\n+\t  || GET_CODE (XEXP (in, 0)) == SUBREG\n \t  || GET_CODE (XEXP (in, 0)) == MEM)\n       && (GET_CODE (XEXP (in, 1)) == REG\n+\t  || GET_CODE (XEXP (in, 1)) == SUBREG\n \t  || CONSTANT_P (XEXP (in, 1))\n \t  || GET_CODE (XEXP (in, 1)) == MEM))\n     {\n@@ -6880,12 +6882,12 @@ gen_reload (out, in, opnum, type)\n \t DEFINE_PEEPHOLE should be specified that recognizes the sequence\n \t we emit below.  */\n \n-      if (CONSTANT_P (op1) || GET_CODE (op1) == MEM\n+      if (CONSTANT_P (op1) || GET_CODE (op1) == MEM || GET_CODE (op1) == SUBREG\n \t  || (GET_CODE (op1) == REG\n \t      && REGNO (op1) >= FIRST_PSEUDO_REGISTER))\n \ttem = op0, op0 = op1, op1 = tem;\n \n-      emit_insn (gen_move_insn (out, op0));\n+      gen_reload (out, op0, opnum, type);\n \n       /* If OP0 and OP1 are the same, we can use OUT for OP1.\n \t This fixes a problem on the 32K where the stack pointer cannot\n@@ -6913,7 +6915,7 @@ gen_reload (out, in, opnum, type)\n \n       delete_insns_since (last);\n \n-      emit_insn (gen_move_insn (out, op1));\n+      gen_reload (out, op1, opnum, type);\n       emit_insn (gen_add2_insn (out, op0));\n     }\n \n@@ -6934,8 +6936,8 @@ gen_reload (out, in, opnum, type)\n       if (GET_MODE (loc) != GET_MODE (in))\n \tin = gen_rtx (REG, GET_MODE (loc), REGNO (in));\n \n-      emit_insn (gen_move_insn (loc, in));\n-      emit_insn (gen_move_insn (out, loc));\n+      gen_reload (loc, in, opnum, type);\n+      gen_reload (out, loc, opnum, type);\n     }\n #endif\n "}]}