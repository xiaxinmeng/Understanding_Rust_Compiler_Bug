{"sha": "a7302b77e3915c55ac043401696c84fcdbb96336", "node_id": "C_kwDOANBUbNoAKGE3MzAyYjc3ZTM5MTVjNTVhYzA0MzQwMTY5NmM4NGZjZGJiOTYzMzY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-31T10:17:04Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add call to outer attributes stubs\n\nAdd call to outer attribute expansion stub on required types.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::expand_struct_fields):\n\tAdd call to expand structu fields.\n\t(ExpandVisitor::expand_function_params): Add call to expand\n\tfunction parameters.\n\t(ExpandVisitor::expand_closure_params): Add call to expand\n\tclosure parameters.\n\t(ExpandVisitor::visit): Add calls for item outer attribute\n\texpansions.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "f5e75a2f323f5b64bbe06c6ac48e531591f21b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5e75a2f323f5b64bbe06c6ac48e531591f21b3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7302b77e3915c55ac043401696c84fcdbb96336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7302b77e3915c55ac043401696c84fcdbb96336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7302b77e3915c55ac043401696c84fcdbb96336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7302b77e3915c55ac043401696c84fcdbb96336/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d6828d7428dff868c3788dfbcbaa8189d2fa50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6828d7428dff868c3788dfbcbaa8189d2fa50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d6828d7428dff868c3788dfbcbaa8189d2fa50"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "c25c017e40c6f0cc93a105436701ef6ab8177133", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7302b77e3915c55ac043401696c84fcdbb96336/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7302b77e3915c55ac043401696c84fcdbb96336/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=a7302b77e3915c55ac043401696c84fcdbb96336", "patch": "@@ -85,7 +85,10 @@ void\n ExpandVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n {\n   for (auto &field : fields)\n-    maybe_expand_type (field.get_field_type ());\n+    {\n+      visit_outer_attrs (field);\n+      maybe_expand_type (field.get_field_type ());\n+    }\n }\n \n void\n@@ -100,7 +103,10 @@ void\n ExpandVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n {\n   for (auto &param : params)\n-    maybe_expand_type (param.get_type ());\n+    {\n+      visit_outer_attrs (param);\n+      maybe_expand_type (param.get_type ());\n+    }\n }\n \n void\n@@ -147,8 +153,11 @@ void\n ExpandVisitor::expand_closure_params (std::vector<AST::ClosureParam> &params)\n {\n   for (auto &param : params)\n-    if (param.has_type_given ())\n-      maybe_expand_type (param.get_type ());\n+    {\n+      visit_outer_attrs (param);\n+      if (param.has_type_given ())\n+\tmaybe_expand_type (param.get_type ());\n+    }\n }\n \n void\n@@ -501,6 +510,7 @@ ExpandVisitor::visit (AST::ClosureExprInner &expr)\n void\n ExpandVisitor::visit (AST::BlockExpr &expr)\n {\n+  visit_outer_attrs (expr);\n   std::function<std::unique_ptr<AST::Stmt> (AST::SingleASTNode)> extractor\n     = [] (AST::SingleASTNode node) { return node.take_stmt (); };\n \n@@ -694,6 +704,7 @@ ExpandVisitor::visit (AST::MatchExpr &expr)\n   for (auto &match_case : expr.get_match_cases ())\n     {\n       auto &arm = match_case.get_arm ();\n+      visit_outer_attrs (arm);\n \n       for (auto &pattern : arm.get_patterns ())\n \tvisit (pattern);\n@@ -743,6 +754,7 @@ ExpandVisitor::visit (AST::TypeBoundWhereClauseItem &item)\n void\n ExpandVisitor::visit (AST::Method &method)\n {\n+  visit_outer_attrs (method);\n   for (auto &param : method.get_generic_params ())\n     visit (param);\n \n@@ -761,6 +773,7 @@ ExpandVisitor::visit (AST::Method &method)\n void\n ExpandVisitor::visit (AST::Module &module)\n {\n+  visit_outer_attrs (module);\n   if (module.get_kind () == AST::Module::ModuleKind::LOADED)\n     {\n       visit_inner_attrs (module);\n@@ -771,7 +784,9 @@ ExpandVisitor::visit (AST::Module &module)\n \n void\n ExpandVisitor::visit (AST::ExternCrate &crate)\n-{}\n+{\n+  visit_outer_attrs (crate);\n+}\n \n void\n ExpandVisitor::visit (AST::UseTreeGlob &)\n@@ -787,11 +802,14 @@ ExpandVisitor::visit (AST::UseTreeRebind &)\n \n void\n ExpandVisitor::visit (AST::UseDeclaration &use_decl)\n-{}\n+{\n+  visit_outer_attrs (use_decl);\n+}\n \n void\n ExpandVisitor::visit (AST::Function &function)\n {\n+  visit_outer_attrs (function);\n   visit_inner_using_attrs (function,\n \t\t\t   function.get_definition ()->get_inner_attrs ());\n   for (auto &param : function.get_generic_params ())\n@@ -811,13 +829,15 @@ ExpandVisitor::visit (AST::Function &function)\n void\n ExpandVisitor::visit (AST::TypeAlias &type_alias)\n {\n+  visit_outer_attrs (type_alias);\n   visit (type_alias.get_type_aliased ());\n }\n \n void\n ExpandVisitor::visit (AST::StructStruct &struct_item)\n {\n   visit_attrs_with_derive (struct_item);\n+  visit_outer_attrs (struct_item);\n   for (auto &generic : struct_item.get_generic_params ())\n     visit (generic);\n \n@@ -830,6 +850,7 @@ ExpandVisitor::visit (AST::StructStruct &struct_item)\n void\n ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n {\n+  visit_outer_attrs (tuple_struct);\n   visit_attrs_with_derive (tuple_struct);\n   for (auto &generic : tuple_struct.get_generic_params ())\n     visit (generic);\n@@ -842,7 +863,9 @@ ExpandVisitor::visit (AST::TupleStruct &tuple_struct)\n \n void\n ExpandVisitor::visit (AST::EnumItem &item)\n-{}\n+{\n+  visit_outer_attrs (item);\n+}\n \n void\n ExpandVisitor::visit (AST::EnumItemTuple &item)\n@@ -866,6 +889,7 @@ void\n ExpandVisitor::visit (AST::Enum &enum_item)\n {\n   visit_attrs_with_derive (enum_item);\n+  visit_outer_attrs (enum_item);\n   for (auto &generic : enum_item.get_generic_params ())\n     visit (generic);\n \n@@ -877,6 +901,7 @@ void\n ExpandVisitor::visit (AST::Union &union_item)\n {\n   visit_attrs_with_derive (union_item);\n+  visit_outer_attrs (union_item);\n   for (auto &generic : union_item.get_generic_params ())\n     visit (generic);\n \n@@ -886,6 +911,7 @@ ExpandVisitor::visit (AST::Union &union_item)\n void\n ExpandVisitor::visit (AST::ConstantItem &const_item)\n {\n+  visit_outer_attrs (const_item);\n   maybe_expand_type (const_item.get_type ());\n \n   visit (const_item.get_expr ());\n@@ -894,6 +920,7 @@ ExpandVisitor::visit (AST::ConstantItem &const_item)\n void\n ExpandVisitor::visit (AST::StaticItem &static_item)\n {\n+  visit_outer_attrs (static_item);\n   maybe_expand_type (static_item.get_type ());\n \n   visit (static_item.get_expr ());\n@@ -936,6 +963,7 @@ ExpandVisitor::visit (AST::TraitItemType &item)\n void\n ExpandVisitor::visit (AST::Trait &trait)\n {\n+  visit_outer_attrs (trait);\n   for (auto &generic : trait.get_generic_params ())\n     visit (generic);\n \n@@ -959,6 +987,7 @@ ExpandVisitor::visit (AST::Trait &trait)\n void\n ExpandVisitor::visit (AST::InherentImpl &impl)\n {\n+  visit_outer_attrs (impl);\n   visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &generic : impl.get_generic_params ())\n@@ -984,6 +1013,7 @@ ExpandVisitor::visit (AST::InherentImpl &impl)\n void\n ExpandVisitor::visit (AST::TraitImpl &impl)\n {\n+  visit_outer_attrs (impl);\n   visit_inner_attrs (impl);\n   // just expand sub-stuff - can't actually strip generic params themselves\n   for (auto &param : impl.get_generic_params ())\n@@ -1042,6 +1072,7 @@ ExpandVisitor::visit (AST::ExternalFunctionItem &item)\n void\n ExpandVisitor::visit (AST::ExternBlock &block)\n {\n+  visit_outer_attrs (block);\n   visit_inner_attrs (block);\n   std::function<std::unique_ptr<AST::ExternalItem> (AST::SingleASTNode)>\n     extractor\n@@ -1066,7 +1097,9 @@ ExpandVisitor::visit (AST::MacroMatcher &)\n \n void\n ExpandVisitor::visit (AST::MacroRulesDefinition &rules_def)\n-{}\n+{\n+  visit_outer_attrs (rules_def);\n+}\n \n void\n ExpandVisitor::visit (AST::MetaItemPath &)\n@@ -1343,7 +1376,10 @@ void\n ExpandVisitor::visit (AST::BareFunctionType &type)\n {\n   for (auto &param : type.get_function_params ())\n-    maybe_expand_type (param.get_type ());\n+    {\n+      visit_outer_attrs (param);\n+      maybe_expand_type (param.get_type ());\n+    }\n \n   if (type.has_return_type ())\n     visit (type.get_return_type ());"}]}