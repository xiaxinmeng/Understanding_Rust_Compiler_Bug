{"sha": "846b1a180747f8c4c3ba790607d9f457de0d3570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2YjFhMTgwNzQ3ZjhjNGMzYmE3OTA2MDdkOWY0NTdkZTBkMzU3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-04T07:44:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-04T07:44:13Z"}, "message": "re PR tree-optimization/79338 (Memory leak in tree-parloops.c)\n\n\tPR tree-optimization/79338\n\t* tree-parloops.c (gather_scalar_reductions): Don't call\n\tvect_analyze_loop_form for loop->inner before destroying loop's\n\tloop_vinfo.\n\nFrom-SVN: r245183", "tree": {"sha": "b09fe6547e7f01f10af52aafe87e24fbfd086d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09fe6547e7f01f10af52aafe87e24fbfd086d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/846b1a180747f8c4c3ba790607d9f457de0d3570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b1a180747f8c4c3ba790607d9f457de0d3570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846b1a180747f8c4c3ba790607d9f457de0d3570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b1a180747f8c4c3ba790607d9f457de0d3570/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2a86d6a7c2f2e38c16e450b961dfaa4ec449060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a86d6a7c2f2e38c16e450b961dfaa4ec449060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a86d6a7c2f2e38c16e450b961dfaa4ec449060"}], "stats": {"total": 83, "additions": 51, "deletions": 32}, "files": [{"sha": "3be3f74599414800a9c75472e73895134023b7e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846b1a180747f8c4c3ba790607d9f457de0d3570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846b1a180747f8c4c3ba790607d9f457de0d3570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=846b1a180747f8c4c3ba790607d9f457de0d3570", "patch": "@@ -1,3 +1,10 @@\n+2017-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79338\n+\t* tree-parloops.c (gather_scalar_reductions): Don't call\n+\tvect_analyze_loop_form for loop->inner before destroying loop's\n+\tloop_vinfo.\n+\n 2017-02-03  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/79327"}, {"sha": "83aa8308deff28601b6a1fd77b26e7325d765acc", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/846b1a180747f8c4c3ba790607d9f457de0d3570/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/846b1a180747f8c4c3ba790607d9f457de0d3570/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=846b1a180747f8c4c3ba790607d9f457de0d3570", "patch": "@@ -2513,8 +2513,8 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n {\n   gphi_iterator gsi;\n   loop_vec_info simple_loop_info;\n-  loop_vec_info simple_inner_loop_info = NULL;\n-  bool allow_double_reduc = true;\n+  auto_vec<gphi *, 4> double_reduc_phis;\n+  auto_vec<gimple *, 4> double_reduc_stmts;\n \n   if (!stmt_vec_info_vec.exists ())\n     init_stmt_vec_info_vec ();\n@@ -2544,43 +2544,55 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n \n       if (double_reduc)\n \t{\n-\t  if (!allow_double_reduc\n-\t      || loop->inner->inner != NULL)\n+\t  if (loop->inner->inner != NULL)\n \t    continue;\n \n-\t  if (!simple_inner_loop_info)\n-\t    {\n-\t      simple_inner_loop_info = vect_analyze_loop_form (loop->inner);\n-\t      if (!simple_inner_loop_info)\n-\t\t{\n-\t\t  allow_double_reduc = false;\n-\t\t  continue;\n-\t\t}\n-\t    }\n-\n-\t  use_operand_p use_p;\n-\t  gimple *inner_stmt;\n-\t  bool single_use_p = single_imm_use (res, &use_p, &inner_stmt);\n-\t  gcc_assert (single_use_p);\n-\t  if (gimple_code (inner_stmt) != GIMPLE_PHI)\n-\t    continue;\n-\t  gphi *inner_phi = as_a <gphi *> (inner_stmt);\n-\t  if (simple_iv (loop->inner, loop->inner, PHI_RESULT (inner_phi),\n-\t\t\t &iv, true))\n-\t    continue;\n-\n-\t  gimple *inner_reduc_stmt\n-\t    = vect_force_simple_reduction (simple_inner_loop_info, inner_phi,\n-\t\t\t\t\t   true, &double_reduc, true);\n-\t  gcc_assert (!double_reduc);\n-\t  if (inner_reduc_stmt == NULL)\n-\t    continue;\n+\t  double_reduc_phis.safe_push (phi);\n+\t  double_reduc_stmts.safe_push (reduc_stmt);\n+\t  continue;\n \t}\n \n       build_new_reduction (reduction_list, reduc_stmt, phi);\n     }\n   destroy_loop_vec_info (simple_loop_info, true);\n-  destroy_loop_vec_info (simple_inner_loop_info, true);\n+\n+  if (!double_reduc_phis.is_empty ())\n+    {\n+      simple_loop_info = vect_analyze_loop_form (loop->inner);\n+      if (simple_loop_info)\n+\t{\n+\t  gphi *phi;\n+\t  unsigned int i;\n+\n+\t  FOR_EACH_VEC_ELT (double_reduc_phis, i, phi)\n+\t    {\n+\t      affine_iv iv;\n+\t      tree res = PHI_RESULT (phi);\n+\t      bool double_reduc;\n+\n+\t      use_operand_p use_p;\n+\t      gimple *inner_stmt;\n+\t      bool single_use_p = single_imm_use (res, &use_p, &inner_stmt);\n+\t      gcc_assert (single_use_p);\n+\t      if (gimple_code (inner_stmt) != GIMPLE_PHI)\n+\t\tcontinue;\n+\t      gphi *inner_phi = as_a <gphi *> (inner_stmt);\n+\t      if (simple_iv (loop->inner, loop->inner, PHI_RESULT (inner_phi),\n+\t\t\t     &iv, true))\n+\t\tcontinue;\n+\n+\t      gimple *inner_reduc_stmt\n+\t\t= vect_force_simple_reduction (simple_loop_info, inner_phi,\n+\t\t\t\t\t       true, &double_reduc, true);\n+\t      gcc_assert (!double_reduc);\n+\t      if (inner_reduc_stmt == NULL)\n+\t\tcontinue;\n+\n+\t      build_new_reduction (reduction_list, double_reduc_stmts[i], phi);\n+\t    }\n+\t  destroy_loop_vec_info (simple_loop_info, true);\n+\t}\n+    }\n \n  gather_done:\n   /* Release the claim on gimple_uid.  */"}]}