{"sha": "4169c321d07546a66be69a0d4c448862c971d640", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2OWMzMjFkMDc1NDZhNjZiZTY5YTBkNGM0NDg4NjJjOTcxZDY0MA==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-08-09T22:14:07Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-08-09T22:14:07Z"}, "message": "cppinit.c (cpp_read_main_file): Split out source-independent initialization to separate function ...\n\n\n        * cppinit.c (cpp_read_main_file):  Split out source-independent\n        initialization to separate function ...\n        (cpp_post_options):  New function.\n        * cppfiles.c (cpp_stack_file):  Rename public name to ...\n        (_cpp_stack_file):  New internal function name.\n        * cpplib.h:  Update accordingly.\n        * cppinit.c:  (cpp_create_reader):  Initialize cpp_readers line here.\n        (cpp_read_main_file):  Don't initialize line here.\n        * c-opts.c (c_common_post_options):  Call cpp_post_options.\n        (c_common_parse_file):  Call cpp_read_main_file, not cpp_stack_file.\n        * fix-header.c (read_scan_file):  Call cpp_post_options.\n\nFrom-SVN: r70279", "tree": {"sha": "128dea28dd9ac999f2887671bb6668d7a150269c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128dea28dd9ac999f2887671bb6668d7a150269c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4169c321d07546a66be69a0d4c448862c971d640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169c321d07546a66be69a0d4c448862c971d640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4169c321d07546a66be69a0d4c448862c971d640", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169c321d07546a66be69a0d4c448862c971d640/comments", "author": null, "committer": null, "parents": [{"sha": "3d93cdfa884d3308eabaafa46e7bfda27c2234b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d93cdfa884d3308eabaafa46e7bfda27c2234b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d93cdfa884d3308eabaafa46e7bfda27c2234b8"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "dda02bbb06bde7d43f3404228a6753772c966b96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -1,3 +1,17 @@\n+2003-08-09  Per Bothner  <pbothner@apple.com>\n+\n+        * cppinit.c (cpp_read_main_file):  Split out source-independent\n+        initialization to separate function ...\n+        (cpp_post_options):  New function.\n+        * cppfiles.c (cpp_stack_file):  Rename public name to ...\n+        (_cpp_stack_file):  New internal function name.\n+        * cpplib.h:  Update accordingly.\n+        * cppinit.c:  (cpp_create_reader):  Initialize cpp_readers line here.\n+        (cpp_read_main_file):  Don't initialize line here.\n+        * c-opts.c (c_common_post_options):  Call cpp_post_options.\n+        (c_common_parse_file):  Call cpp_read_main_file, not cpp_stack_file.\n+        * fix-header.c (read_scan_file):  Call cpp_post_options.\n+\t\n 2003-08-09  Per Bothner  <per@bothner.com>\n \n \t* c-decl.c (SCOPE_LIST_APPEND):  Remove bogus line continuation."}, {"sha": "462ca240b79ce4669bc7a9a0f09cb2b91b251200", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -1126,6 +1126,7 @@ c_common_post_options (const char **pfilename)\n     }\n \n   cpp_get_callbacks (parse_in)->file_change = cb_file_change;\n+  cpp_post_options (parse_in);\n \n   /* NOTE: we use in_fname here, not the one supplied.  */\n   *pfilename = cpp_read_main_file (parse_in, in_fnames[0]);\n@@ -1196,7 +1197,7 @@ c_common_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \n \t  /* Reset cpplib's macros and start a new file.  */\n \t  cpp_undef_all (parse_in);\n-\t  cpp_stack_file (parse_in, in_fnames[file_index]);\n+\t  cpp_read_main_file (parse_in, in_fnames[file_index]);\n \t}\n \n       finish_options(in_fnames[file_index]);"}, {"sha": "22e95248cc28e2d9921b3c79e6b13d698a206dcd", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -696,7 +696,7 @@ dir_name_of_file (_cpp_file *file)\n /* Push an input buffer with the contents of FNAME, the empty string\n    for standard input.  Return true if a buffer was stacked.  */\n bool\n-cpp_stack_file (cpp_reader *pfile, const char *fname)\n+_cpp_stack_file (cpp_reader *pfile, const char *fname)\n {\n   struct cpp_dir *dir = &pfile->no_search_path;\n "}, {"sha": "07abea8642071a4aefb989f930b59d8949c11faa", "filename": "gcc/cppinit.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -170,6 +170,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table)\n   /* Initialize the line map.  Start at logical line 1, so we can use\n      a line number of zero for special states.  */\n   linemap_init (&pfile->line_maps);\n+  pfile->line = 1;\n \n   /* Initialize lexer state.  */\n   pfile->state.save_comments = ! CPP_OPTION (pfile, discard_comments);\n@@ -434,11 +435,9 @@ cpp_add_dependency_target (cpp_reader *pfile, const char *target, int quote)\n }\n \n /* This is called after options have been parsed, and partially\n-   processed.  Setup for processing input from the file named FNAME,\n-   or stdin if it is the empty string.  Return the original filename\n-   on success (e.g. foo.i->foo.c), or NULL on failure.  */\n-const char *\n-cpp_read_main_file (cpp_reader *pfile, const char *fname)\n+   processed. */\n+void\n+cpp_post_options (cpp_reader *pfile)\n {\n   sanity_checks (pfile);\n \n@@ -447,7 +446,14 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n   /* Mark named operators before handling command line macros.  */\n   if (CPP_OPTION (pfile, cplusplus) && CPP_OPTION (pfile, operator_names))\n     mark_named_operators (pfile);\n+}\n \n+/* Setup for processing input from the file named FNAME,\n+   or stdin if it is the empty string.  Return the original filename\n+   on success (e.g. foo.i->foo.c), or NULL on failure.  */\n+const char *\n+cpp_read_main_file (cpp_reader *pfile, const char *fname)\n+{\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n       if (!pfile->deps)\n@@ -457,8 +463,7 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n       deps_add_default_target (pfile->deps, fname);\n     }\n \n-  pfile->line = 1;\n-  if (!cpp_stack_file (pfile, fname))\n+  if (! _cpp_stack_file (pfile, fname))\n     return NULL;\n \n   /* Set this here so the client can change the option if it wishes,"}, {"sha": "b6f58a95cc66f957e0dad8d466eafe5f91b997ef", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -533,13 +533,13 @@ extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);\n    too.  If there was an error opening the file, it returns NULL.  */\n extern const char *cpp_read_main_file (cpp_reader *, const char *);\n \n-/* Stacks a new file.  It will return false if there was an error\n-   opening the file.  */\n-extern bool cpp_stack_file (cpp_reader *, const char *);\n-\n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);\n \n+/* This is called after options have been parsed, and partially\n+   processed. */\n+extern void cpp_post_options (cpp_reader *);\n+\n /* Set up translation to the target character set.  */\n extern void cpp_init_iconv (cpp_reader *);\n "}, {"sha": "0f5f8c0d423b2844ef69712e2ef72013d30a2208", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169c321d07546a66be69a0d4c448862c971d640/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=4169c321d07546a66be69a0d4c448862c971d640", "patch": "@@ -602,6 +602,7 @@ read_scan_file (char *in_fname, int argc, char **argv)\n   options = cpp_get_options (scan_in);\n   options->inhibit_warnings = 1;\n   options->inhibit_errors = 1;\n+  cpp_post_options (scan_in);\n \n   if (! cpp_read_main_file (scan_in, in_fname))\n     exit (FATAL_EXIT_CODE);"}]}