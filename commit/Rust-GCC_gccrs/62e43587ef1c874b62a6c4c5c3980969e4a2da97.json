{"sha": "62e43587ef1c874b62a6c4c5c3980969e4a2da97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlNDM1ODdlZjFjODc0YjYyYTZjNGM1YzM5ODA5NjllNGEyZGE5Nw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-06T19:45:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-06T19:45:54Z"}, "message": "Improve warning suppression for inlined functions.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_builtin):\n\tRemove %K and use error_at.\n\t(aarch64_expand_fcmla_builtin): Same.\n\t(aarch64_expand_builtin_tme): Same.\n\t(aarch64_expand_builtin_memtag): Same.\n\t* config/arm/arm-builtins.c (arm_expand_acle_builtin): Same.\n\t(arm_expand_builtin): Same.\n\t* config/arm/arm.c (bounds_check): Same.", "tree": {"sha": "e86a9c24148ff632397d0a303c54e5ae81ccebd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86a9c24148ff632397d0a303c54e5ae81ccebd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e43587ef1c874b62a6c4c5c3980969e4a2da97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e43587ef1c874b62a6c4c5c3980969e4a2da97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e43587ef1c874b62a6c4c5c3980969e4a2da97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e43587ef1c874b62a6c4c5c3980969e4a2da97/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3bab5d5adb3e28ddb16c97b0831efdea23cf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d3bab5d5adb3e28ddb16c97b0831efdea23cf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d3bab5d5adb3e28ddb16c97b0831efdea23cf7d"}], "stats": {"total": 60, "additions": 37, "deletions": 23}, "files": [{"sha": "9ed4b72d005799b8984a858f96d4763e7fa5aa39", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=62e43587ef1c874b62a6c4c5c3980969e4a2da97", "patch": "@@ -1598,8 +1598,9 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t      if (!(*insn_data[icode].operand[opc].predicate)\n \t\t  (op[opc], mode))\n \t      {\n-\t\terror (\"%Kargument %d must be a constant immediate\",\n-\t\t       exp, opc + 1 - have_retval);\n+\t\terror_at (EXPR_LOCATION (exp),\n+\t\t\t  \"argument %d must be a constant immediate\",\n+\t\t\t  opc + 1 - have_retval);\n \t\treturn const0_rtx;\n \t      }\n \t      break;\n@@ -1669,10 +1670,13 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n \t\t\t\t       / UINTVAL (elementsize),\n \t\t\t\t      exp);\n           else\n-\t    error (\"%Klane index must be a constant immediate\", exp);\n+\t    error_at (EXPR_LOCATION (exp),\n+\t\t      \"lane index must be a constant immediate\");\n \t}\n       else\n-\terror (\"%Ktotal size and element size must be a non-zero constant immediate\", exp);\n+\terror_at (EXPR_LOCATION (exp),\n+\t\t  \"total size and element size must be a non-zero \"\n+\t\t  \"constant immediate\");\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }\n@@ -1828,7 +1832,8 @@ aarch64_expand_fcmla_builtin (tree exp, rtx target, int fcode)\n   /* Validate that the lane index is a constant.  */\n   if (!CONST_INT_P (lane_idx))\n     {\n-      error (\"%Kargument %d must be a constant immediate\", exp, 4);\n+      error_at (EXPR_LOCATION (exp),\n+\t\t\"argument %d must be a constant immediate\", 4);\n       return const0_rtx;\n     }\n \n@@ -1917,7 +1922,8 @@ aarch64_expand_builtin_tme (int fcode, tree exp, rtx target)\n \t  emit_insn (GEN_FCN (CODE_FOR_tcancel) (op0));\n \telse\n \t  {\n-\t    error (\"%Kargument must be a 16-bit constant immediate\", exp);\n+\t    error_at (EXPR_LOCATION (exp),\n+\t\t      \"argument must be a 16-bit constant immediate\");\n \t    return const0_rtx;\n \t  }\n       }\n@@ -2006,8 +2012,9 @@ aarch64_expand_builtin_memtag (int fcode, tree exp, rtx target)\n \t\t  pat = GEN_FCN (icode) (target, op0, const0_rtx, op1);\n \t\t  break;\n \t\t}\n-\t      error (\"%Kargument %d must be a constant immediate \"\n-\t\t     \"in range [0,15]\", exp, 2);\n+\t      error_at (EXPR_LOCATION (exp),\n+\t\t\t\"argument %d must be a constant immediate \"\n+\t\t\t\"in range [0,15]\", 2);\n \t      return const0_rtx;\n \t    }\n \t  else"}, {"sha": "3a9ff8f26b8e222c52cb70f7509b714c3e475758", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=62e43587ef1c874b62a6c4c5c3980969e4a2da97", "patch": "@@ -3092,26 +3092,30 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n \t\t\t  unsigned int cp_bit = (CONST_INT_P (op[argc])\n \t\t\t\t\t\t ? UINTVAL (op[argc]) : -1);\n \t\t\t  if (IN_RANGE (cp_bit, 0, ARM_CDE_CONST_COPROC))\n-\t\t\t    error (\"%Kcoprocessor %d is not enabled \"\n-\t\t\t\t   \"with +cdecp%d\", exp, cp_bit, cp_bit);\n+\t\t\t    error_at (EXPR_LOCATION (exp),\n+\t\t\t\t      \"coprocessor %d is not enabled \"\n+\t\t\t\t      \"with +cdecp%d\", cp_bit, cp_bit);\n \t\t\t  else\n-\t\t\t    error (\"%Kcoproc must be a constant immediate in \"\n-\t\t\t\t   \"range [0-%d] enabled with +cdecp<N>\", exp,\n-\t\t\t\t   ARM_CDE_CONST_COPROC);\n+\t\t\t    error_at (EXPR_LOCATION (exp),\n+\t\t\t\t      \"coproc must be a constant immediate in \"\n+\t\t\t\t      \"range [0-%d] enabled with +cdecp<N>\",\n+\t\t\t\t      ARM_CDE_CONST_COPROC);\n \t\t\t}\n \t\t      else\n \t\t\t/* Here we mention the builtin name to follow the same\n \t\t\t   format that the C/C++ frontends use for referencing\n \t\t\t   a given argument index.  */\n-\t\t\terror (\"%Kargument %d to %qE must be a constant immediate \"\n-\t\t\t       \"in range [0-%d]\", exp, argc + 1,\n+\t\t\terror_at (EXPR_LOCATION (exp),\n+\t\t\t\t  \"argument %d to %qE must be a constant \"\n+\t\t\t\t  \"immediate in range [0-%d]\", argc + 1,\n \t\t\t       arm_builtin_decls[fcode],\n \t\t\t       cde_builtin_data[fcode -\n \t\t\t       ARM_BUILTIN_CDE_PATTERN_START].imm_max);\n \t\t    }\n \t\t  else\n-\t\t    error (\"%Kargument %d must be a constant immediate\",\n-\t\t\t   exp, argc + 1);\n+\t\t    error_at (EXPR_LOCATION (exp),\n+\t\t\t      \"argument %d must be a constant immediate\",\n+\t\t\t      argc + 1);\n \t\t  /* We have failed to expand the pattern, and are safely\n \t\t     in to invalid code.  But the mid-end will still try to\n \t\t     build an assignment for this node while it expands,\n@@ -3328,11 +3332,13 @@ arm_expand_acle_builtin (int fcode, tree exp, rtx target)\n       if (CONST_INT_P (sat_imm))\n \t{\n \t  if (!IN_RANGE (sat_imm, min_sat, max_sat))\n-\t    error (\"%Ksaturation bit range must be in the range [%wd, %wd]\",\n-\t\t   exp, UINTVAL (min_sat), UINTVAL (max_sat));\n+\t    error_at (EXPR_LOCATION (exp),\n+\t\t      \"saturation bit range must be in the range [%wd, %wd]\",\n+\t\t      UINTVAL (min_sat), UINTVAL (max_sat));\n \t}\n       else\n-\terror (\"%Ksaturation bit range must be a constant immediate\", exp);\n+\terror_at (EXPR_LOCATION (exp),\n+\t\t  \"saturation bit range must be a constant immediate\");\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }\n@@ -3455,7 +3461,8 @@ arm_expand_builtin (tree exp,\n       if (CONST_INT_P (lane_idx))\n \tneon_lane_bounds (lane_idx, 0, TREE_INT_CST_LOW (nlanes), exp);\n       else\n-\terror (\"%Klane index must be a constant immediate\", exp);\n+\terror_at (EXPR_LOCATION (exp),\n+\t\t  \"lane index must be a constant immediate\");\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }"}, {"sha": "de37c903450949d2e0faed59498a512c9f187389", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e43587ef1c874b62a6c4c5c3980969e4a2da97/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=62e43587ef1c874b62a6c4c5c3980969e4a2da97", "patch": "@@ -13244,8 +13244,8 @@ bounds_check (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high,\n   if (lane < low || lane >= high)\n     {\n       if (exp)\n-\terror (\"%K%s %wd out of range %wd - %wd\",\n-\t       exp, desc, lane, low, high - 1);\n+\terror_at (EXPR_LOCATION (exp),\n+\t\t  \"%s %wd out of range %wd - %wd\", desc, lane, low, high - 1);\n       else\n \terror (\"%s %wd out of range %wd - %wd\", desc, lane, low, high - 1);\n     }"}]}