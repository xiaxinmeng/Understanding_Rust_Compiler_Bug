{"sha": "a5aac267e64c578d55e6e269fa9e331f0d01da98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhYWMyNjdlNjRjNTc4ZDU1ZTZlMjY5ZmE5ZTMzMWYwZDAxZGE5OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-11T09:47:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-03-11T09:56:10Z"}, "message": "Fix internal error on locally-defined subpools\n\nIf the type is derived in the current compilation unit, and Allocate\nis not overridden on derivation (as is typically the case with\nRoot_Storage_Pool_With_Subpools), the entity for Allocate of the\nderived type is an alias for System.Storage_Pools.Subpools.Allocate.\n\nThe main assertion in gnat_to_gnu_entity fails in this case, since\nthis is not a definition and Is_Public is false (since the entity\nis nested in the same compilation unit).\n\n2020-03-11  Richard Wai  <richard@annexi-strayline.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Also test Is_Public on\n\tthe Alias of the entitiy, if is present, in the main assertion.", "tree": {"sha": "cfa7841585ac1b78580e5dc396b43b4b81f6419c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfa7841585ac1b78580e5dc396b43b4b81f6419c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5aac267e64c578d55e6e269fa9e331f0d01da98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5aac267e64c578d55e6e269fa9e331f0d01da98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5aac267e64c578d55e6e269fa9e331f0d01da98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5aac267e64c578d55e6e269fa9e331f0d01da98/comments", "author": null, "committer": null, "parents": [{"sha": "42bc589e87a326282be2156ddeb18588677c645d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bc589e87a326282be2156ddeb18588677c645d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42bc589e87a326282be2156ddeb18588677c645d"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "9df3840a41184f9dff76c3f5f8acd05e60aa7432", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a5aac267e64c578d55e6e269fa9e331f0d01da98", "patch": "@@ -1,3 +1,8 @@\n+2020-03-11  Richard Wai  <richard@annexi-strayline.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Also test Is_Public on\n+\tthe Alias of the entitiy, if is present, in the main assertion.\n+\n 2020-02-06  Alexandre Oliva <oliva@adacore.com>\n \n \t* raise-gcc.c (personality_body) [__ARM_EABI_UNWINDER__]:"}, {"sha": "80dfc55b601c554ebf15ded5d7a5049153dfbe98", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a5aac267e64c578d55e6e269fa9e331f0d01da98", "patch": "@@ -446,14 +446,21 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n   /* If we get here, it means we have not yet done anything with this entity.\n      If we are not defining it, it must be a type or an entity that is defined\n-     elsewhere or externally, otherwise we should have defined it already.  */\n+     elsewhere or externally, otherwise we should have defined it already.\n+\n+     One exception is for an entity, typically an inherited operation, which is\n+     a local alias for the parent's operation.  It is neither defined, since it\n+     is an inherited operation, nor public, since it is declared in the current\n+     compilation unit, so we test Is_Public on the Alias entity instead.  */\n   gcc_assert (definition\n \t      || is_type\n \t      || kind == E_Discriminant\n \t      || kind == E_Component\n \t      || kind == E_Label\n \t      || (kind == E_Constant && Present (Full_View (gnat_entity)))\n \t      || Is_Public (gnat_entity)\n+\t      || (Present (Alias (gnat_entity))\n+\t\t  && Is_Public (Alias (gnat_entity)))\n \t      || type_annotate_only);\n \n   /* Get the name of the entity and set up the line number and filename of"}, {"sha": "f43da846ec19b33c409b756e67aa3c3f15497d65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5aac267e64c578d55e6e269fa9e331f0d01da98", "patch": "@@ -1,3 +1,7 @@\n+2020-03-11  Richard Wai  <richard@annexi-strayline.com>\n+\n+\t* gnat.dg/subpools1.adb: New test.\n+\n 2020-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94121"}, {"sha": "b38a4ca232ea89277e05539a82b0547947b9f7e4", "filename": "gcc/testsuite/gnat.dg/subpools1.adb", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Ftestsuite%2Fgnat.dg%2Fsubpools1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5aac267e64c578d55e6e269fa9e331f0d01da98/gcc%2Ftestsuite%2Fgnat.dg%2Fsubpools1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsubpools1.adb?ref=a5aac267e64c578d55e6e269fa9e331f0d01da98", "patch": "@@ -0,0 +1,82 @@\n+-- { dg-do compile }\n+\n+with System.Storage_Elements;\n+with System.Storage_Pools.Subpools;\n+\n+procedure Subpools1 is\n+\n+   use System.Storage_Pools.Subpools;\n+\n+   package Local_Pools is\n+\n+      use System.Storage_Elements;\n+\n+      type Local_Pool is new Root_Storage_Pool_With_Subpools with null record;\n+\n+      overriding\n+      function Create_Subpool (Pool: in out Local_Pool)\n+                               return not null Subpool_Handle;\n+\n+      overriding\n+      procedure Allocate_From_Subpool\n+        (Pool                    : in out Local_Pool;\n+         Storage_Address         :    out System.Address;\n+         Size_In_Storage_Elements: in     Storage_Count;\n+         Alignment               : in     Storage_Count;\n+         Subpool                 : in     not null Subpool_Handle);\n+\n+      overriding\n+      procedure Deallocate_Subpool\n+        (Pool   : in out Local_Pool;\n+         Subpool: in out Subpool_Handle) is null;\n+\n+   end Local_Pools;\n+\n+   package body Local_Pools is\n+\n+      type Local_Subpool is new Root_Subpool with null record;\n+\n+      Dummy_Subpool: aliased Local_Subpool;\n+\n+      overriding\n+      function Create_Subpool (Pool: in out Local_Pool)\n+                               return not null Subpool_Handle \n+      is \n+      begin \n+         return Result: not null Subpool_Handle \n+           := Dummy_Subpool'Unchecked_Access\n+         do\n+            Set_Pool_Of_Subpool (Result, Pool);\n+         end return;\n+      end;\n+\n+      overriding\n+      procedure Allocate_From_Subpool\n+        (Pool                    : in out Local_Pool;\n+         Storage_Address         :    out System.Address;\n+         Size_In_Storage_Elements: in     Storage_Count;\n+         Alignment               : in     Storage_Count;\n+         Subpool                 : in     not null Subpool_Handle)\n+      is\n+         type Storage_Array_Access is access Storage_Array;\n+\n+         New_Alloc: Storage_Array_Access\n+           := new Storage_Array (1 .. Size_In_Storage_Elements + Alignment);\n+      begin\n+         for SE of New_Alloc.all loop\n+            Storage_Address := SE'Address;\n+            exit when Storage_Address mod Alignment = 0;\n+         end loop;\n+      end;\n+\n+   end Local_Pools;\n+\n+   A_Pool: Local_Pools.Local_Pool;\n+\n+   type Integer_Access is access Integer with Storage_Pool => A_Pool;\n+\n+   X: Integer_Access := new Integer; \n+\n+begin\n+   null;\n+end;"}]}