{"sha": "6462bb432fe58e6dba719b88df693f768a05e5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MmJiNDMyZmU1OGU2ZGJhNzE5Yjg4ZGY2OTNmNzY4YTA1ZTVhNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-09-02T02:54:55Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-09-02T02:54:55Z"}, "message": "rtl.h (ASM_OPERANDS_INPUT_CONSTRAINT_EXP): New macro.\n\n* rtl.h (ASM_OPERANDS_INPUT_CONSTRAINT_EXP): New macro.\n* gcse.c (hash_string_1): New function.\n(hash_expr_1) <ASM_OPERANDS>: Disregard filename and line number.\n(expr_equiv_p) <ASM_OPERANDS>: Likewise.\n* cse.c (rtx_cost): Don't increase the cost of ASM_OPERANDS.\n(canon_hash_string): New function.\n(canon_hash) <ASM_OPERANDS>: Disregard filename and line number.\n(exp_equiv_p) <ASM_OPERANDS>: Likewise.\n(fold_rtx): Use ASM_OPERANDS accessor macros.\n* emit-rtl.c (copy_insn_1): Likewise.\n* integrate.c (copy_rtx_and_substitute): Likewise.\n* stmt.c (expand_asm_operands): Likewise.  Give an\nASM_OPERANDS rtx the mode of the output reg being set from it.\n\nFrom-SVN: r36110", "tree": {"sha": "69d434a432d126114d1f18512af30880687b1df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d434a432d126114d1f18512af30880687b1df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6462bb432fe58e6dba719b88df693f768a05e5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6462bb432fe58e6dba719b88df693f768a05e5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6462bb432fe58e6dba719b88df693f768a05e5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6462bb432fe58e6dba719b88df693f768a05e5a6/comments", "author": null, "committer": null, "parents": [{"sha": "298ec8f42f65f88ac5bf4df5f8592adc0edfbdfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298ec8f42f65f88ac5bf4df5f8592adc0edfbdfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298ec8f42f65f88ac5bf4df5f8592adc0edfbdfc"}], "stats": {"total": 246, "additions": 195, "deletions": 51}, "files": [{"sha": "16fce73aed3ab78cbb105991947896c59e11481f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -1,3 +1,19 @@\n+2000-09-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* rtl.h (ASM_OPERANDS_INPUT_CONSTRAINT_EXP): New macro.\n+\t* gcse.c (hash_string_1): New function.\n+\t(hash_expr_1) <ASM_OPERANDS>: Disregard filename and line number.\n+\t(expr_equiv_p) <ASM_OPERANDS>: Likewise.\n+\t* cse.c (rtx_cost): Don't increase the cost of ASM_OPERANDS.\n+\t(canon_hash_string): New function.\n+\t(canon_hash) <ASM_OPERANDS>: Disregard filename and line number.\n+\t(exp_equiv_p) <ASM_OPERANDS>: Likewise.\n+\t(fold_rtx): Use ASM_OPERANDS accessor macros.\n+\t* emit-rtl.c (copy_insn_1): Likewise.\n+\t* integrate.c (copy_rtx_and_substitute): Likewise.\n+\t* stmt.c (expand_asm_operands): Likewise.  Give an\n+\tASM_OPERANDS rtx the mode of the output reg being set from it.\n+\n 2000-09-01  Fred Fish  <fnf@be.com>\n \n \t* fix-header.c (write_rbrac): Add putc and getc to list of"}, {"sha": "2862ac2ddeec8f4e23fd0fd97c91f1deb4d41557", "filename": "gcc/cse.c", "status": "modified", "additions": 74, "deletions": 17, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -787,12 +787,6 @@ rtx_cost (x, outer_code)\n       /* Used in loop.c and combine.c as a marker.  */\n       total = 0;\n       break;\n-    case ASM_OPERANDS:\n-      /* We don't want these to be used in substitutions because\n-\t we have no way of validating the resulting insn.  So assign\n-\t anything containing an ASM_OPERANDS a very high cost.  */\n-      total = 1000;\n-      break;\n     default:\n       total = 2;\n     }\n@@ -2141,6 +2135,21 @@ use_related_value (x, elt)\n   return plus_constant (q->exp, offset);\n }\n \f\n+/* Hash a string.  Just add its bytes up.  */\n+static inline unsigned\n+canon_hash_string (ps)\n+     const char *ps;\n+{\n+  unsigned hash = 0;\n+  const unsigned char *p = (const unsigned char *)ps;\n+  \n+  if (p)\n+    while (*p)\n+      hash += *p++;\n+\n+  return hash;\n+}\n+\n /* Hash an rtx.  We are careful to make sure the value is never negative.\n    Equivalent registers hash identically.\n    MODE is used in hashing for CONST_INTs only;\n@@ -2286,6 +2295,32 @@ canon_hash (x, mode)\n \t  do_not_record = 1;\n \t  return 0;\n \t}\n+      else\n+\t{\n+\t  /* We don't want to take the filename and line into account.  */\n+\t  hash += (unsigned) code + (unsigned) GET_MODE (x)\n+\t    + canon_hash_string (ASM_OPERANDS_TEMPLATE (x))\n+\t    + canon_hash_string (ASM_OPERANDS_OUTPUT_CONSTRAINT (x))\n+\t    + (unsigned) ASM_OPERANDS_OUTPUT_IDX (x);\n+\n+\t  if (ASM_OPERANDS_INPUT_LENGTH (x))\n+\t    {\n+\t      for (i = 1; i < ASM_OPERANDS_INPUT_LENGTH (x); i++)\n+\t\t{\n+\t\t  hash += (canon_hash (ASM_OPERANDS_INPUT (x, i),\n+\t\t\t\t       GET_MODE (ASM_OPERANDS_INPUT (x, i)))\n+\t\t\t   + canon_hash_string (ASM_OPERANDS_INPUT_CONSTRAINT\n+\t\t\t\t\t\t(x, i)));\n+\t\t}\n+\n+\t      hash += canon_hash_string (ASM_OPERANDS_INPUT_CONSTRAINT (x, 0));\n+\t      x = ASM_OPERANDS_INPUT (x, 0);\n+\t      mode = GET_MODE (x);\n+\t      goto repeat;\n+\t    }\n+\n+\t  return hash;\n+\t}\n       break;\n \n     default:\n@@ -2315,14 +2350,7 @@ canon_hash (x, mode)\n \tfor (j = 0; j < XVECLEN (x, i); j++)\n \t  hash += canon_hash (XVECEXP (x, i, j), 0);\n       else if (fmt[i] == 's')\n-\t{\n-\t  register const unsigned char *p =\n-\t    (const unsigned char *) XSTR (x, i);\n-\n-\t  if (p)\n-\t    while (*p)\n-\t      hash += *p++;\n-\t}\n+\thash += canon_hash_string (XSTR (x, i));\n       else if (fmt[i] == 'i')\n \t{\n \t  register unsigned tem = XINT (x, i);\n@@ -2476,6 +2504,35 @@ exp_equiv_p (x, y, validate, equal_values)\n \t\t  && exp_equiv_p (XEXP (x, 1), XEXP (y, 0),\n \t\t\t\t  validate, equal_values)));\n \n+    case ASM_OPERANDS:\n+      /* We don't use the generic code below because we want to\n+\t disregard filename and line numbers.  */\n+\n+      /* A volatile asm isn't equivalent to any other.  */\n+      if (MEM_VOLATILE_P (x) || MEM_VOLATILE_P (y))\n+\treturn 0;\n+\n+      if (GET_MODE (x) != GET_MODE (y)\n+\t  || strcmp (ASM_OPERANDS_TEMPLATE (x), ASM_OPERANDS_TEMPLATE (y))\n+\t  || strcmp (ASM_OPERANDS_OUTPUT_CONSTRAINT (x),\n+\t\t     ASM_OPERANDS_OUTPUT_CONSTRAINT (y))\n+\t  || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)\n+\t  || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))\n+\treturn 0;\n+\n+      if (ASM_OPERANDS_INPUT_LENGTH (x))\n+\t{\n+\t  for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n+\t    if (! exp_equiv_p (ASM_OPERANDS_INPUT (x, i),\n+\t\t\t       ASM_OPERANDS_INPUT (y, i),\n+\t\t\t       validate, equal_values)\n+\t\t|| strcmp (ASM_OPERANDS_INPUT_CONSTRAINT (x, i),\n+\t\t\t   ASM_OPERANDS_INPUT_CONSTRAINT (y, i)))\n+\t      return 0;\n+\t}\n+\n+      return 1;\n+\n     default:\n       break;\n     }\n@@ -3500,9 +3557,9 @@ fold_rtx (x, insn)\n       }\n \n     case ASM_OPERANDS:\n-      for (i = XVECLEN (x, 3) - 1; i >= 0; i--)\n-\tvalidate_change (insn, &XVECEXP (x, 3, i),\n-\t\t\t fold_rtx (XVECEXP (x, 3, i), insn), 0);\n+      for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n+\tvalidate_change (insn, &ASM_OPERANDS_INPUT (x, i),\n+\t\t\t fold_rtx (ASM_OPERANDS_INPUT (x, i), insn), 0);\n       break;\n \n     default:"}, {"sha": "9eb9639e7d55f18f447e70036ff12d0b54200477", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -3913,10 +3913,10 @@ copy_insn_1 (orig)\n     }\n   else if (code == ASM_OPERANDS)\n     {\n-      orig_asm_operands_vector = XVEC (orig, 3);\n-      copy_asm_operands_vector = XVEC (copy, 3);\n-      orig_asm_constraints_vector = XVEC (orig, 4);\n-      copy_asm_constraints_vector = XVEC (copy, 4);\n+      orig_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (orig);\n+      copy_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (copy);\n+      orig_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (orig);\n+      copy_asm_constraints_vector = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy);\n     }\n \n   return copy;"}, {"sha": "c925a5a5d127c0f1a92f3acc29fc4c9c6d5cf17b", "filename": "gcc/gcse.c", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -1333,6 +1333,20 @@ hash_expr (x, mode, do_not_record_p, hash_table_size)\n   hash = hash_expr_1 (x, mode, do_not_record_p);\n   return hash % hash_table_size;\n }\n+/* Hash a string.  Just add its bytes up.  */\n+static inline unsigned\n+hash_string_1 (ps)\n+     const char *ps;\n+{\n+  unsigned hash = 0;\n+  const unsigned char *p = (const unsigned char *)ps;\n+  \n+  if (p)\n+    while (*p)\n+      hash += *p++;\n+\n+  return hash;\n+}\n \n /* Subroutine of hash_expr to do the actual work.  */\n \n@@ -1433,6 +1447,32 @@ hash_expr_1 (x, mode, do_not_record_p)\n \t  *do_not_record_p = 1;\n \t  return 0;\n \t}\n+      else\n+\t{\n+\t  /* We don't want to take the filename and line into account.  */\n+\t  hash += (unsigned) code + (unsigned) GET_MODE (x)\n+\t    + hash_string_1 (ASM_OPERANDS_TEMPLATE (x))\n+\t    + hash_string_1 (ASM_OPERANDS_OUTPUT_CONSTRAINT (x))\n+\t    + (unsigned) ASM_OPERANDS_OUTPUT_IDX (x);\n+\n+\t  if (ASM_OPERANDS_INPUT_LENGTH (x))\n+\t    {\n+\t      for (i = 1; i < ASM_OPERANDS_INPUT_LENGTH (x); i++)\n+\t\t{\n+\t\t  hash += (hash_expr_1 (ASM_OPERANDS_INPUT (x, i),\n+\t\t\t\t\tGET_MODE (ASM_OPERANDS_INPUT (x, i)),\n+\t\t\t\t\tdo_not_record_p)\n+\t\t\t   + hash_string_1 (ASM_OPERANDS_INPUT_CONSTRAINT\n+\t\t\t\t\t    (x, i)));\n+\t\t}\n+\n+\t      hash += hash_string_1 (ASM_OPERANDS_INPUT_CONSTRAINT (x, 0));\n+\t      x = ASM_OPERANDS_INPUT (x, 0);\n+\t      mode = GET_MODE (x);\n+\t      goto repeat;\n+\t    }\n+\t  return hash;\n+\t}\n \n     default:\n       break;\n@@ -1466,14 +1506,7 @@ hash_expr_1 (x, mode, do_not_record_p)\n \t  }\n \n       else if (fmt[i] == 's')\n-\t{\n-\t  register const unsigned char *p =\n-\t    (const unsigned char *) XSTR (x, i);\n-\n-\t  if (p)\n-\t    while (*p)\n-\t      hash += *p++;\n-\t}\n+\thash += hash_string_1 (XSTR (x, i));\n       else if (fmt[i] == 'i')\n \thash += (unsigned int) XINT (x, i);\n       else\n@@ -1565,6 +1598,34 @@ expr_equiv_p (x, y)\n \t      || (expr_equiv_p (XEXP (x, 0), XEXP (y, 1))\n \t\t  && expr_equiv_p (XEXP (x, 1), XEXP (y, 0))));\n \n+    case ASM_OPERANDS:\n+      /* We don't use the generic code below because we want to\n+\t disregard filename and line numbers.  */\n+\n+      /* A volatile asm isn't equivalent to any other.  */\n+      if (MEM_VOLATILE_P (x) || MEM_VOLATILE_P (y))\n+\treturn 0;\n+\n+      if (GET_MODE (x) != GET_MODE (y)\n+\t  || strcmp (ASM_OPERANDS_TEMPLATE (x), ASM_OPERANDS_TEMPLATE (y))\n+\t  || strcmp (ASM_OPERANDS_OUTPUT_CONSTRAINT (x),\n+\t\t     ASM_OPERANDS_OUTPUT_CONSTRAINT (y))\n+\t  || ASM_OPERANDS_OUTPUT_IDX (x) != ASM_OPERANDS_OUTPUT_IDX (y)\n+\t  || ASM_OPERANDS_INPUT_LENGTH (x) != ASM_OPERANDS_INPUT_LENGTH (y))\n+\treturn 0;\n+\n+      if (ASM_OPERANDS_INPUT_LENGTH (x))\n+\t{\n+\t  for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n+\t    if (! expr_equiv_p (ASM_OPERANDS_INPUT (x, i),\n+\t\t\t\tASM_OPERANDS_INPUT (y, i))\n+\t\t|| strcmp (ASM_OPERANDS_INPUT_CONSTRAINT (x, i),\n+\t\t\t   ASM_OPERANDS_INPUT_CONSTRAINT (y, i)))\n+\t      return 0;\n+\t}\n+\n+      return 1;\n+\n     default:\n       break;\n     }"}, {"sha": "e267f5e88653669d6fbe9b98cd397a0a9cc83107", "filename": "gcc/integrate.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -2040,20 +2040,23 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n       break;\n \n     case ASM_OPERANDS:\n-      /* If a single asm insn contains multiple output operands\n-\t then it contains multiple ASM_OPERANDS rtx's that share operand 3.\n-\t We must make sure that the copied insn continues to share it.  */\n-      if (map->orig_asm_operands_vector == XVEC (orig, 3))\n+      /* If a single asm insn contains multiple output operands then\n+\t it contains multiple ASM_OPERANDS rtx's that share the input\n+\t and constraint vecs.  We must make sure that the copied insn\n+\t continues to share it.  */\n+      if (map->orig_asm_operands_vector == ASM_OPERANDS_INPUT_VEC (orig))\n \t{\n \t  copy = rtx_alloc (ASM_OPERANDS);\n \t  copy->volatil = orig->volatil;\n-\t  XSTR (copy, 0) = XSTR (orig, 0);\n-\t  XSTR (copy, 1) = XSTR (orig, 1);\n-\t  XINT (copy, 2) = XINT (orig, 2);\n-\t  XVEC (copy, 3) = map->copy_asm_operands_vector;\n-\t  XVEC (copy, 4) = map->copy_asm_constraints_vector;\n-\t  XSTR (copy, 5) = XSTR (orig, 5);\n-\t  XINT (copy, 6) = XINT (orig, 6);\n+\t  ASM_OPERANDS_TEMPLATE (copy) = ASM_OPERANDS_TEMPLATE (orig);\n+\t  ASM_OPERANDS_OUTPUT_CONSTRAINT (copy)\n+\t    = ASM_OPERANDS_OUTPUT_CONSTRAINT (orig);\n+\t  ASM_OPERANDS_OUTPUT_IDX (copy) = ASM_OPERANDS_OUTPUT_IDX (orig);\n+\t  ASM_OPERANDS_INPUT_VEC (copy) = map->copy_asm_operands_vector;\n+\t  ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy)\n+\t    = map->copy_asm_constraints_vector;\n+\t  ASM_OPERANDS_SOURCE_FILE (copy) = ASM_OPERANDS_SOURCE_FILE (orig);\n+\t  ASM_OPERANDS_SOURCE_LINE (copy) = ASM_OPERANDS_SOURCE_LINE (orig);\n \t  return copy;\n \t}\n       break;\n@@ -2212,9 +2215,10 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n \n   if (code == ASM_OPERANDS && map->orig_asm_operands_vector == 0)\n     {\n-      map->orig_asm_operands_vector = XVEC (orig, 3);\n-      map->copy_asm_operands_vector = XVEC (copy, 3);\n-      map->copy_asm_constraints_vector = XVEC (copy, 4);\n+      map->orig_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (orig);\n+      map->copy_asm_operands_vector = ASM_OPERANDS_INPUT_VEC (copy);\n+      map->copy_asm_constraints_vector\n+\t= ASM_OPERANDS_INPUT_CONSTRAINT_VEC (copy);\n     }\n \n   return copy;"}, {"sha": "a2f9087f066dc65066ed584039b9cbd49ac27ec4", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -800,6 +800,8 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n #define ASM_OPERANDS_INPUT_CONSTRAINT_VEC(RTX) XCVEC ((RTX), 4, ASM_OPERANDS)\n #define ASM_OPERANDS_INPUT(RTX, N) XCVECEXP ((RTX), 3, (N), ASM_OPERANDS)\n #define ASM_OPERANDS_INPUT_LENGTH(RTX) XCVECLEN ((RTX), 3, ASM_OPERANDS)\n+#define ASM_OPERANDS_INPUT_CONSTRAINT_EXP(RTX, N) \\\n+\t\t\tXCVECEXP ((RTX), 4, (N), ASM_OPERANDS)\n #define ASM_OPERANDS_INPUT_CONSTRAINT(RTX, N) \\\n \t\t\tXSTR (XCVECEXP ((RTX), 4, (N), ASM_OPERANDS), 0)\n #define ASM_OPERANDS_INPUT_MODE(RTX, N)  \\"}, {"sha": "46b2317149faed7de083bd99c53bc4527c579425", "filename": "gcc/stmt.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462bb432fe58e6dba719b88df693f768a05e5a6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6462bb432fe58e6dba719b88df693f768a05e5a6", "patch": "@@ -1595,7 +1595,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   argvec = rtvec_alloc (ninputs);\n   constraints = rtvec_alloc (ninputs);\n \n-  body = gen_rtx_ASM_OPERANDS (VOIDmode, TREE_STRING_POINTER (string),\n+  body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode\n+\t\t\t\t: GET_MODE (output_rtx[0])),\n+\t\t\t       TREE_STRING_POINTER (string), \n \t\t\t       empty_string, 0, argvec, constraints,\n \t\t\t       filename, line);\n \n@@ -1771,9 +1773,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    warning (\"asm operand %d probably doesn't match constraints\", i);\n \t}\n       generating_concat_p = old_generating_concat_p;\n-      XVECEXP (body, 3, i) = op;\n+      ASM_OPERANDS_INPUT (body, i) = op;\n \n-      XVECEXP (body, 4, i)      /* constraints */\n+      ASM_OPERANDS_INPUT_CONSTRAINT_EXP (body, i)\n \t= gen_rtx_ASM_INPUT (TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n \t\t\t     orig_constraint);\n       i++;\n@@ -1785,7 +1787,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   generating_concat_p = 0;\n \n   for (i = 0; i < ninputs - ninout; i++)\n-    XVECEXP (body, 3, i) = protect_from_queue (XVECEXP (body, 3, i), 0);\n+    ASM_OPERANDS_INPUT (body, i)\n+      = protect_from_queue (ASM_OPERANDS_INPUT (body, i), 0);\n \n   for (i = 0; i < noutputs; i++)\n     output_rtx[i] = protect_from_queue (output_rtx[i], 1);\n@@ -1795,9 +1798,9 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n     {\n       int j = inout_opnum[i];\n \n-      XVECEXP (body, 3, ninputs - ninout + i)      /* argvec */\n+      ASM_OPERANDS_INPUT (body, ninputs - ninout + i)\n \t= output_rtx[j];\n-      XVECEXP (body, 4, ninputs - ninout + i)      /* constraints */\n+      ASM_OPERANDS_INPUT_CONSTRAINT_EXP (body, ninputs - ninout + i)\n \t= gen_rtx_ASM_INPUT (inout_mode[i], digit_strings[j]);\n     }\n \n@@ -1810,7 +1813,8 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n   if (noutputs == 1 && nclobbers == 0)\n     {\n-      XSTR (body, 1) = TREE_STRING_POINTER (TREE_PURPOSE (outputs));\n+      ASM_OPERANDS_OUTPUT_CONSTRAINT (body)\n+\t= TREE_STRING_POINTER (TREE_PURPOSE (outputs));\n       insn = emit_insn (gen_rtx_SET (VOIDmode, output_rtx[0], body));\n     }\n \n@@ -1837,7 +1841,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    = gen_rtx_SET (VOIDmode,\n \t\t\t   output_rtx[i],\n \t\t\t   gen_rtx_ASM_OPERANDS\n-\t\t\t   (VOIDmode,\n+\t\t\t   (GET_MODE (output_rtx[i]),\n \t\t\t    TREE_STRING_POINTER (string),\n \t\t\t    TREE_STRING_POINTER (TREE_PURPOSE (tail)),\n \t\t\t    i, argvec, constraints,"}]}