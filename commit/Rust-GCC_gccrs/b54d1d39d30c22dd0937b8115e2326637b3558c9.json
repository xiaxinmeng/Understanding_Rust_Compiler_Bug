{"sha": "b54d1d39d30c22dd0937b8115e2326637b3558c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ZDFkMzlkMzBjMjJkZDA5MzdiODExNWUyMzI2NjM3YjM1NThjOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:45:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:45:37Z"}, "message": "[multiple changes]\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* a-cobove.adb (Set_Length): Restore previous logic, but with \"Checks\n\tand then\" on the check.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch3.adb (P_Known_Discriminant_Part_Opt): Handle properly\n\ta misplaced \"constant\" keyword in a discriminant specification.\n\n2015-10-20  Steve Baird  <baird@adacore.com>\n\n\t* einfo.ads (Is_Param_Block_Component_Type): New function decl\n\tfor querying the flag.\n\t(Set_Is_Param_Block_Component_Type): New procedure decl for setting\n\tthe flag.\n\t* einfo.adb (Is_Param_Block_Component_Type): New function body.\n\t(Set_Is_Param_Block_Component_Type): New procedure body.\n\t(Write_Entity_Flags): Display the new flag.\n\t* exp_ch9.adb (Build_Parameter_Block): Set flag on parameter\n\tblock component types.\n\t(Expand_N_Entry_Declaration): Set flag on parameter block component\n\ttypes.\n\n2015-10-20  Steve Baird  <baird@adacore.com>\n\n\t* sem_elab.adb: Do not pass an N_Attribute_Reference node to\n\tSinfo.Set_No_Elaboration_Check.\n\t* sem_elab.adb (Check_Elab_Call) Do not pass a non-call\n\tnode (specifically, an N_Attribute_Reference node) to\n\tSinfo.Set_No_Elaboration_Check.\n\n2015-10-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c: File names are case sensitive on aarch64-ios.\n\nFrom-SVN: r229051", "tree": {"sha": "bedcacb1215b216aea495929bdf26289a76958ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bedcacb1215b216aea495929bdf26289a76958ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54d1d39d30c22dd0937b8115e2326637b3558c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54d1d39d30c22dd0937b8115e2326637b3558c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54d1d39d30c22dd0937b8115e2326637b3558c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54d1d39d30c22dd0937b8115e2326637b3558c9/comments", "author": null, "committer": null, "parents": [{"sha": "1f8f3e6e07accbcb641a73bc7545677d172503bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8f3e6e07accbcb641a73bc7545677d172503bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8f3e6e07accbcb641a73bc7545677d172503bd"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "fd2f4f600df36676b6750f40058072f765db3052", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -1,3 +1,39 @@\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cobove.adb (Set_Length): Restore previous logic, but with \"Checks\n+\tand then\" on the check.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch3.adb (P_Known_Discriminant_Part_Opt): Handle properly\n+\ta misplaced \"constant\" keyword in a discriminant specification.\n+\n+2015-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* einfo.ads (Is_Param_Block_Component_Type): New function decl\n+\tfor querying the flag.\n+\t(Set_Is_Param_Block_Component_Type): New procedure decl for setting\n+\tthe flag.\n+\t* einfo.adb (Is_Param_Block_Component_Type): New function body.\n+\t(Set_Is_Param_Block_Component_Type): New procedure body.\n+\t(Write_Entity_Flags): Display the new flag.\n+\t* exp_ch9.adb (Build_Parameter_Block): Set flag on parameter\n+\tblock component types.\n+\t(Expand_N_Entry_Declaration): Set flag on parameter block component\n+\ttypes.\n+\n+2015-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_elab.adb: Do not pass an N_Attribute_Reference node to\n+\tSinfo.Set_No_Elaboration_Check.\n+\t* sem_elab.adb (Check_Elab_Call) Do not pass a non-call\n+\tnode (specifically, an N_Attribute_Reference node) to\n+\tSinfo.Set_No_Elaboration_Check.\n+\n+2015-10-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c: File names are case sensitive on aarch64-ios.\n+\n 2015-10-20  Bob Duff  <duff@adacore.com>\n \n \t* a-cbdlli.ads, a-cbhase.ads, a-cbmutr.ads, a-cborse.ads,"}, {"sha": "4fa7ce8828d4997e1e3c57164587656e87c8952b", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -2411,13 +2411,11 @@ package body Ada.Containers.Bounded_Vectors is\n \n       if Count >= 0 then\n          Container.Delete_Last (Count);\n-      end if;\n-\n-      if Checks and then Container.Last >= Index_Type'Last then\n+      elsif Checks and then Container.Last >= Index_Type'Last then\n          raise Constraint_Error with \"vector is already at its maximum length\";\n+      else\n+         Container.Insert_Space (Container.Last + 1, -Count);\n       end if;\n-\n-      Container.Insert_Space (Container.Last + 1, -Count);\n    end Set_Length;\n \n    ----------"}, {"sha": "6849cd1c16c28ceedb57307ff96a99472c681f41", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -552,7 +552,8 @@ __gnat_get_file_names_case_sensitive (void)\n \t{\n \t  /* By default, we suppose filesystems aren't case sensitive on\n \t     Windows and Darwin (but they are on arm-darwin).  */\n-#if defined (WINNT) || (defined (__APPLE__) && !defined (__arm__))\n+#if defined (WINNT) \\\n+  || (defined (__APPLE__) && !(defined (__arm__) || defined (__arm64__)))\n \t  file_names_case_sensitive_cache = 0;\n #else\n \t  file_names_case_sensitive_cache = 1;"}, {"sha": "c6a999893a8fcc1aadeae811b6f1c6340c36603a", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -516,6 +516,7 @@ package body Einfo is\n    --    Has_Pragma_Unreferenced_Objects Flag212\n    --    Requires_Overriding             Flag213\n    --    Has_RACW                        Flag214\n+   --    Is_Param_Block_Component_Type   Flag215\n    --    Universal_Aliasing              Flag216\n    --    Suppress_Value_Tracking_On_Call Flag217\n    --    Is_Primitive                    Flag218\n@@ -2317,6 +2318,12 @@ package body Einfo is\n       return Flag138 (Id);\n    end Is_Packed_Array_Impl_Type;\n \n+   function Is_Param_Block_Component_Type (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Access_Type (Id));\n+      return Flag215 (Base_Type (Id));\n+   end Is_Param_Block_Component_Type;\n+\n    function Is_Potentially_Use_Visible (Id : E) return B is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -5281,6 +5288,12 @@ package body Einfo is\n       Set_Flag138 (Id, V);\n    end Set_Is_Packed_Array_Impl_Type;\n \n+   procedure Set_Is_Param_Block_Component_Type (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Void, E_General_Access_Type));\n+      Set_Flag215 (Id, V);\n+   end Set_Is_Param_Block_Component_Type;\n+\n    procedure Set_Is_Potentially_Use_Visible (Id : E; V : B := True) is\n    begin\n       pragma Assert (Nkind (Id) in N_Entity);\n@@ -8851,6 +8864,7 @@ package body Einfo is\n       W (\"Is_Package_Body_Entity\",          Flag160 (Id));\n       W (\"Is_Packed\",                       Flag51  (Id));\n       W (\"Is_Packed_Array_Impl_Type\",       Flag138 (Id));\n+      W (\"Is_Param_Block_Component_Type\",   Flag215 (Id));\n       W (\"Is_Potentially_Use_Visible\",      Flag9   (Id));\n       W (\"Is_Predicate_Function\",           Flag255 (Id));\n       W (\"Is_Predicate_Function_M\",         Flag256 (Id));"}, {"sha": "f536615d733f5095aca66a5c87696e62ea6624cb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -2270,8 +2270,7 @@ package Einfo is\n --       parent, we do not consider them to be separate units for this flag).\n \n --    Is_Completely_Hidden (Flag103)\n---       Defined in all entities. This flag can be set only for E_Discriminant\n---       entities. This flag can be set only for girder discriminants of\n+--       Defined on discriminants. Only set on girder discriminants of\n --       untagged types. When set, the entity is a girder discriminant of a\n --       derived untagged type which is not directly visible in the derived\n --       type because the derived type or one of its ancestors have renamed the\n@@ -2848,6 +2847,11 @@ package Einfo is\n --       set in an entity, then the Original_Array_Type field of this entity\n --       points to the array type for which this is the Packed_Array_Impl_Type.\n \n+--    Is_Param_Block_Component_Type (Flag215) [base type only]\n+--       Defined in access types. Set to indicate that a type is the type of a\n+--       component of the parameter block record type generated by the compiler\n+--       for an entry or a select statement. Read by CodePeer.\n+\n --    Is_Potentially_Use_Visible (Flag9)\n --       Defined in all entities. Set if entity is potentially use visible,\n --       i.e. it is defined in a package that appears in a currently active\n@@ -5300,7 +5304,6 @@ package Einfo is\n    --    Is_Checked_Ghost_Entity             (Flag277)\n    --    Is_Child_Unit                       (Flag73)\n    --    Is_Compilation_Unit                 (Flag149)\n-   --    Is_Completely_Hidden                (Flag103)\n    --    Is_Descendent_Of_Address            (Flag223)\n    --    Is_Discrim_SO_Function              (Flag176)\n    --    Is_Discriminant_Check_Function      (Flag264)\n@@ -5526,6 +5529,7 @@ package Einfo is\n    --    Is_Pure_Unit_Access_Type            (Flag189)\n    --    No_Pool_Assigned                    (Flag131)  (base type only)\n    --    No_Strict_Aliasing                  (Flag136)  (base type only)\n+   --    Is_Param_Block_Component_Type       (Flag215)  (base type only)\n    --    (plus type attributes)\n \n    --  E_Access_Attribute_Type\n@@ -5706,6 +5710,7 @@ package Einfo is\n    --    Discriminant_Default_Value          (Node20)\n    --    Original_Record_Component           (Node22)\n    --    CR_Discriminant                     (Node23)\n+   --    Is_Completely_Hidden                (Flag103)\n    --    Is_Return_Object                    (Flag209)\n    --    Next_Component_Or_Discriminant      (synth)\n    --    Next_Discriminant                   (synth)\n@@ -6927,6 +6932,7 @@ package Einfo is\n    function Is_Packed                           (Id : E) return B;\n    function Is_Packed_Array_Impl_Type           (Id : E) return B;\n    function Is_Potentially_Use_Visible          (Id : E) return B;\n+   function Is_Param_Block_Component_Type       (Id : E) return B;\n    function Is_Predicate_Function               (Id : E) return B;\n    function Is_Predicate_Function_M             (Id : E) return B;\n    function Is_Preelaborated                    (Id : E) return B;\n@@ -7587,6 +7593,7 @@ package Einfo is\n    procedure Set_Is_Package_Body_Entity          (Id : E; V : B := True);\n    procedure Set_Is_Packed                       (Id : E; V : B := True);\n    procedure Set_Is_Packed_Array_Impl_Type       (Id : E; V : B := True);\n+   procedure Set_Is_Param_Block_Component_Type   (Id : E; V : B := True);\n    procedure Set_Is_Potentially_Use_Visible      (Id : E; V : B := True);\n    procedure Set_Is_Predicate_Function           (Id : E; V : B := True);\n    procedure Set_Is_Predicate_Function_M         (Id : E; V : B := True);\n@@ -8393,6 +8400,7 @@ package Einfo is\n    pragma Inline (Is_Package_Body_Entity);\n    pragma Inline (Is_Packed);\n    pragma Inline (Is_Packed_Array_Impl_Type);\n+   pragma Inline (Is_Param_Block_Component_Type);\n    pragma Inline (Is_Potentially_Use_Visible);\n    pragma Inline (Is_Predicate_Function);\n    pragma Inline (Is_Predicate_Function_M);\n@@ -8861,6 +8869,7 @@ package Einfo is\n    pragma Inline (Set_Is_Package_Body_Entity);\n    pragma Inline (Set_Is_Packed);\n    pragma Inline (Set_Is_Packed_Array_Impl_Type);\n+   pragma Inline (Set_Is_Param_Block_Component_Type);\n    pragma Inline (Set_Is_Potentially_Use_Visible);\n    pragma Inline (Set_Is_Predicate_Function);\n    pragma Inline (Set_Is_Predicate_Function_M);"}, {"sha": "0cb374326303e89febfea36c09cc150e7e782e4b", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -1809,6 +1809,7 @@ package body Exp_Ch9 is\n             --    type Ann is access all <actual-type>\n \n             Comp_Nam := Make_Temporary (Loc, 'A');\n+            Set_Is_Param_Block_Component_Type (Comp_Nam);\n \n             Append_To (Decls,\n               Make_Full_Type_Declaration (Loc,\n@@ -8326,6 +8327,7 @@ package body Exp_Ch9 is\n             --  Declare new access type and then append\n \n             Ctype := Make_Temporary (Loc, 'A');\n+            Set_Is_Param_Block_Component_Type (Ctype);\n \n             Decl :=\n               Make_Full_Type_Declaration (Loc,"}, {"sha": "308808bd4dd6608acc6a32f6bbdde8eba03e9471", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -3030,8 +3030,23 @@ package body Ch3 is\n                   Set_Discriminant_Type\n                     (Specification_Node,\n                      P_Access_Definition (Not_Null_Present));\n-               else\n \n+               --  Catch ouf-of-order keywords\n+\n+               elsif Token = Tok_Constant then\n+                  Scan;\n+\n+                  if Token = Tok_Access then\n+                     Error_Msg_SC (\"CONSTANT must appear after ACCESS\");\n+                     Set_Discriminant_Type\n+                       (Specification_Node,\n+                        P_Access_Definition (Not_Null_Present));\n+\n+                  else\n+                     Error_Msg_SC (\"misplaced CONSTANT\");\n+                  end if;\n+\n+               else\n                   Set_Discriminant_Type\n                     (Specification_Node, P_Subtype_Mark);\n                   No_Constraint;"}, {"sha": "1f60e2d16098aec596e4a0377666d49544c3ee85", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54d1d39d30c22dd0937b8115e2326637b3558c9/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=b54d1d39d30c22dd0937b8115e2326637b3558c9", "patch": "@@ -1506,7 +1506,9 @@ package body Sem_Elab is\n                           or else Elaboration_Checks_Suppressed (Ent)\n                           or else Elaboration_Checks_Suppressed (Scope (Ent))\n                         then\n-                           Set_No_Elaboration_Check (N);\n+                           if Nkind (N) in N_Subprogram_Call then\n+                              Set_No_Elaboration_Check (N);\n+                           end if;\n                         end if;\n \n                         return;"}]}