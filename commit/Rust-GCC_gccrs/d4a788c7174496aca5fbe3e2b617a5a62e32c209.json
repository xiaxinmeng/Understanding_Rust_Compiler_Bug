{"sha": "d4a788c7174496aca5fbe3e2b617a5a62e32c209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhNzg4YzcxNzQ0OTZhY2E1ZmJlM2UyYjYxN2E1YTYyZTMyYzIwOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-18T15:23:57Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-11-18T15:23:57Z"}, "message": "libstdc++: Fix ranges::join_view::_Iterator::operator-> [LWG 3500]\n\nThis applies the proposed resolution of LWG 3500, which corrects the\nreturn type and constraints of this member function to use the right\niterator type.  Additionally, a nearby local variable is uglified.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (join_view::_Iterator::_M_satisfy): Uglify\n\tlocal variable inner.\n\t(join_view::_Iterator::operator->): Use _Inner_iter instead of\n\t_Outer_iter in the function signature as per LWG 3500.\n\t* testsuite/std/ranges/adaptors/join.cc (test08): Test it.", "tree": {"sha": "988ff5e550a14c05a8ec1f20e84f82bf6dae5bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988ff5e550a14c05a8ec1f20e84f82bf6dae5bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a788c7174496aca5fbe3e2b617a5a62e32c209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a788c7174496aca5fbe3e2b617a5a62e32c209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a788c7174496aca5fbe3e2b617a5a62e32c209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a788c7174496aca5fbe3e2b617a5a62e32c209/comments", "author": null, "committer": null, "parents": [{"sha": "2f2709e691148160e4f88090eaf48d3e4915b0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2709e691148160e4f88090eaf48d3e4915b0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2709e691148160e4f88090eaf48d3e4915b0e4"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "d38b1998de9ba7f1c96bae25dc5975a560351e52", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a788c7174496aca5fbe3e2b617a5a62e32c209/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a788c7174496aca5fbe3e2b617a5a62e32c209/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=d4a788c7174496aca5fbe3e2b617a5a62e32c209", "patch": "@@ -2128,9 +2128,9 @@ namespace views\n \n \t    for (; _M_outer != ranges::end(_M_parent->_M_base); ++_M_outer)\n \t      {\n-\t\tauto& inner = __update_inner(*_M_outer);\n-\t\t_M_inner = ranges::begin(inner);\n-\t\tif (_M_inner != ranges::end(inner))\n+\t\tauto& __inner = __update_inner(*_M_outer);\n+\t\t_M_inner = ranges::begin(__inner);\n+\t\tif (_M_inner != ranges::end(__inner))\n \t\t  return;\n \t      }\n \n@@ -2211,10 +2211,12 @@ namespace views\n \t  operator*() const\n \t  { return *_M_inner; }\n \n-\t  constexpr _Outer_iter\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 3500. join_view::iterator::operator->() is bogus\n+\t  constexpr _Inner_iter\n \t  operator->() const\n-\t    requires __detail::__has_arrow<_Outer_iter>\n-\t      && copyable<_Outer_iter>\n+\t    requires __detail::__has_arrow<_Inner_iter>\n+\t      && copyable<_Inner_iter>\n \t  { return _M_inner; }\n \n \t  constexpr _Iterator&"}, {"sha": "8bbea9a6b25f04b830a67a9f76c5e9a0a2745a30", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a788c7174496aca5fbe3e2b617a5a62e32c209/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a788c7174496aca5fbe3e2b617a5a62e32c209/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=d4a788c7174496aca5fbe3e2b617a5a62e32c209", "patch": "@@ -138,6 +138,17 @@ test07()\n   static_assert( std::same_as<std::ranges::range_value_t<V>, int> );\n }\n \n+void\n+test08()\n+{\n+  // LWG 3500. join_view::iterator::operator->() is bogus\n+  struct X { int a; };\n+  ranges::single_view<ranges::single_view<X>> s{std::in_place, std::in_place, 5};\n+  auto v = s | views::join;\n+  auto i = v.begin();\n+  VERIFY( i->a == 5 );\n+}\n+\n int\n main()\n {\n@@ -148,4 +159,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  test08();\n }"}]}