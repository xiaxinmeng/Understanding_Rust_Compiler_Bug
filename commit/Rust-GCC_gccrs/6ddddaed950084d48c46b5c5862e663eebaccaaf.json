{"sha": "6ddddaed950084d48c46b5c5862e663eebaccaaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkZGRhZWQ5NTAwODRkNDhjNDZiNWM1ODYyZTY2M2VlYmFjY2FhZg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-09-30T19:16:14Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-09-30T19:16:14Z"}, "message": "build: more correct build rules for build/gen% programs.\n\ngcc/:\n\tPR bootstrap/45796\n\t* Makefile.in (build/gen%$(build_exeext)): Move rule after all\n\tspecial-casing for generators and turn into ...\n\t((genprog:%=build/gen%$(build_exeext))): ... this static pattern\n\trule, for better error messages in case of toplevel dependency\n\terrors.\n\t(genprog): Add hooks, rename to ...\n\t(genprogerr): ... this, and let genprog also contain check,\n\tchecksum, condmd.\n\t((genprog:%=build/gen%$(build_exeext))): Rename to ...\n\t((genprogerr:%=build/gen%$(build_exeext))): ... this.\n\t(build/genhooks$(build_exeext)): Remove now-unneeded dependency.\n\nFrom-SVN: r164759", "tree": {"sha": "c26af50bf648a965de4056c7e68cd611b1faeaa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26af50bf648a965de4056c7e68cd611b1faeaa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ddddaed950084d48c46b5c5862e663eebaccaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddddaed950084d48c46b5c5862e663eebaccaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddddaed950084d48c46b5c5862e663eebaccaaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddddaed950084d48c46b5c5862e663eebaccaaf/comments", "author": null, "committer": null, "parents": [{"sha": "abcc9b2a3ad392f3abf3e80fa0e51a47e8629917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcc9b2a3ad392f3abf3e80fa0e51a47e8629917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcc9b2a3ad392f3abf3e80fa0e51a47e8629917"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "b081a2c0674ec674264cdc1161816b33e592ec7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddddaed950084d48c46b5c5862e663eebaccaaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddddaed950084d48c46b5c5862e663eebaccaaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ddddaed950084d48c46b5c5862e663eebaccaaf", "patch": "@@ -1,3 +1,18 @@\n+2010-09-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\tPR bootstrap/45796\n+\t* Makefile.in (build/gen%$(build_exeext)): Move rule after all\n+\tspecial-casing for generators and turn into ...\n+\t((genprog:%=build/gen%$(build_exeext))): ... this static pattern\n+\trule, for better error messages in case of toplevel dependency\n+\terrors.\n+\t(genprog): Add hooks, rename to ...\n+\t(genprogerr): ... this, and let genprog also contain check,\n+\tchecksum, condmd.\n+\t((genprog:%=build/gen%$(build_exeext))): Rename to ...\n+\t((genprogerr:%=build/gen%$(build_exeext))): ... this.\n+\t(build/genhooks$(build_exeext)): Remove now-unneeded dependency.\n+\n 2010-09-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n             Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n "}, {"sha": "924fb86539fe184e0b41a4cb8415726c6e4f8376", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ddddaed950084d48c46b5c5862e663eebaccaaf/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ddddaed950084d48c46b5c5862e663eebaccaaf/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6ddddaed950084d48c46b5c5862e663eebaccaaf", "patch": "@@ -3903,11 +3903,6 @@ build/genhooks.o : genhooks.c target.def $(BCONFIG_H) $(SYSTEM_H) errors.h\n # since they need to run on this machine\n # even if GCC is being compiled to run on some other machine.\n \n-# As a general rule...\n-build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)\n-\t$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n-\t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n-\n # All these programs use the RTL reader ($(BUILD_RTL)).\n genprogrtl = attr attrtab automata codes conditions config emit \\\n \t     extract flags opinit output peep preds recog\n@@ -3917,16 +3912,23 @@ $(genprogrtl:%=build/gen%$(build_exeext)): $(BUILD_RTL)\n genprogmd = $(genprogrtl) mddeps constants enums\n $(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_MD)\n \n-# All generator programs need to report errors\n-genprog = $(genprogmd) genrtl modes gtype\n-$(genprog:%=build/gen%$(build_exeext)): $(BUILD_ERRORS)\n+# All these programs need to report errors.\n+genprogerr = $(genprogmd) genrtl modes gtype hooks\n+$(genprogerr:%=build/gen%$(build_exeext)): $(BUILD_ERRORS)\n+\n+# Remaining build programs.\n+genprog = $(genprogerr) check checksum condmd\n \n # These programs need libs over and above what they get from the above list.\n build/genautomata$(build_exeext) : BUILD_LIBS += -lm\n \n # These programs are not linked with the MD reader.\n build/gengtype$(build_exeext) : build/gengtype-lex.o build/gengtype-parse.o\n-build/genhooks$(build_exeext) : $(BUILD_ERRORS)\n+\n+# Rule for the generator programs:\n+$(genprog:%=build/gen%$(build_exeext)): build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)\n+\t$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n+\t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n \n # Generated source files for gengtype.\n gengtype-lex.c : gengtype-lex.l"}]}