{"sha": "aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkZTc3MmQ4YTJlZWRhNGVhMjJmMGNhNjQ4ZWJkZjQ0ZDhkOGMxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-27T21:00:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-27T21:00:35Z"}, "message": "re PR target/80102 (ICE in maybe_record_trace_start, at dwarf2cfi.c:2330)\n\n\tPR target/80102\n\t* reg-notes.def (REG_CFA_NOTE): Define.  Use it for CFA related\n\tnotes.\n\t* cfgcleanup.c (reg_note_cfa_p): New array.\n\t(insns_have_identical_cfa_notes): New function.\n\t(old_insns_match_p): Don't cross-jump in between /f\n\tand non-/f instructions.  If both i1 and i2 are frame related,\n\tverify all CFA notes, their order and content.\n\n\t* g++.dg/opt/pr80102.C: New test.\n\nFrom-SVN: r246511", "tree": {"sha": "580908125ff2f800b4a09a1179d95a53ebb8aa20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/580908125ff2f800b4a09a1179d95a53ebb8aa20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e298b56acbe3e2534767462937d5674978979683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e298b56acbe3e2534767462937d5674978979683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e298b56acbe3e2534767462937d5674978979683"}], "stats": {"total": 114, "additions": 101, "deletions": 13}, "files": [{"sha": "a2729173bf35f8162ab7cb5bab72f102f3079d95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "patch": "@@ -1,3 +1,14 @@\n+2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80102\n+\t* reg-notes.def (REG_CFA_NOTE): Define.  Use it for CFA related\n+\tnotes.\n+\t* cfgcleanup.c (reg_note_cfa_p): New array.\n+\t(insns_have_identical_cfa_notes): New function.\n+\t(old_insns_match_p): Don't cross-jump in between /f\n+\tand non-/f instructions.  If both i1 and i2 are frame related,\n+\tverify all CFA notes, their order and content.\n+\n 2017-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78543"}, {"sha": "d55b0ceb832edc87467d3db0dd8ab2ffda1282f6", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "patch": "@@ -1111,6 +1111,48 @@ merge_dir (enum replace_direction a, enum replace_direction b)\n   return dir_none;\n }\n \n+/* Array of flags indexed by reg note kind, true if the given\n+   reg note is CFA related.  */\n+static const bool reg_note_cfa_p[] = {\n+#undef REG_CFA_NOTE\n+#define DEF_REG_NOTE(NAME) false,\n+#define REG_CFA_NOTE(NAME) true,\n+#include \"reg-notes.def\"\n+#undef REG_CFA_NOTE\n+#undef DEF_REG_NOTE\n+  false\n+};\n+\n+/* Return true if I1 and I2 have identical CFA notes (the same order\n+   and equivalent content).  */\n+\n+static bool\n+insns_have_identical_cfa_notes (rtx_insn *i1, rtx_insn *i2)\n+{\n+  rtx n1, n2;\n+  for (n1 = REG_NOTES (i1), n2 = REG_NOTES (i2); ;\n+       n1 = XEXP (n1, 1), n2 = XEXP (n2, 1))\n+    {\n+      /* Skip over reg notes not related to CFI information.  */\n+      while (n1 && !reg_note_cfa_p[REG_NOTE_KIND (n1)])\n+\tn1 = XEXP (n1, 1);\n+      while (n2 && !reg_note_cfa_p[REG_NOTE_KIND (n2)])\n+\tn2 = XEXP (n2, 1);\n+      if (n1 == NULL_RTX && n2 == NULL_RTX)\n+\treturn true;\n+      if (n1 == NULL_RTX || n2 == NULL_RTX)\n+\treturn false;\n+      if (XEXP (n1, 0) == XEXP (n2, 0))\n+\t;\n+      else if (XEXP (n1, 0) == NULL_RTX || XEXP (n2, 0) == NULL_RTX)\n+\treturn false;\n+      else if (!(reload_completed\n+\t\t ? rtx_renumbered_equal_p (XEXP (n1, 0), XEXP (n2, 0))\n+\t\t : rtx_equal_p (XEXP (n1, 0), XEXP (n2, 0))))\n+\treturn false;\n+    }\n+}\n+\n /* Examine I1 and I2 and return:\n    - dir_forward if I1 can be replaced by I2, or\n    - dir_backward if I2 can be replaced by I1, or\n@@ -1149,6 +1191,11 @@ old_insns_match_p (int mode ATTRIBUTE_UNUSED, rtx_insn *i1, rtx_insn *i2)\n   else if (p1 || p2)\n     return dir_none;\n \n+  /* Do not allow cross-jumping between frame related insns and other\n+     insns.  */\n+  if (RTX_FRAME_RELATED_P (i1) != RTX_FRAME_RELATED_P (i2))\n+    return dir_none;\n+\n   p1 = PATTERN (i1);\n   p2 = PATTERN (i2);\n \n@@ -1207,6 +1254,11 @@ old_insns_match_p (int mode ATTRIBUTE_UNUSED, rtx_insn *i1, rtx_insn *i2)\n \t}\n     }\n \n+  /* If both i1 and i2 are frame related, verify all the CFA notes\n+     in the same order and with the same content.  */\n+  if (RTX_FRAME_RELATED_P (i1) && !insns_have_identical_cfa_notes (i1, i2))\n+    return dir_none;\n+\n #ifdef STACK_REGS\n   /* If cross_jump_death_matters is not 0, the insn's mode\n      indicates whether or not the insn contains any stack-like"}, {"sha": "8734d26e5b47bf243609d7e8731c7632a145e856", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "patch": "@@ -20,10 +20,16 @@ along with GCC; see the file COPYING3.  If not see\n /* This file defines all the codes that may appear on individual\n    EXPR_LIST, INSN_LIST and INT_LIST rtxes in the REG_NOTES chain of an insn.\n    The codes are stored in the mode field of the rtx.  Source files\n-   define DEF_REG_NOTE appropriately before including this file.  */\n+   define DEF_REG_NOTE appropriately before including this file.\n+\n+   CFA related notes meant for RTX_FRAME_RELATED_P instructions\n+   should be declared with REG_CFA_NOTE macro instead of REG_NOTE.  */\n \n /* Shorthand.  */\n #define REG_NOTE(NAME) DEF_REG_NOTE (REG_##NAME)\n+#ifndef REG_CFA_NOTE\n+# define REG_CFA_NOTE(NAME) REG_NOTE (NAME)\n+#endif\n \n /* REG_DEP_TRUE is used in scheduler dependencies lists to represent a\n    read-after-write dependency (i.e. a true data dependency).  This is\n@@ -112,7 +118,7 @@ REG_NOTE (BR_PRED)\n /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n    for DWARF to interpret what they imply.  The attached rtx is used\n    instead of intuition.  */\n-REG_NOTE (FRAME_RELATED_EXPR)\n+REG_CFA_NOTE (FRAME_RELATED_EXPR)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n    for FRAME_RELATED_EXPR intuition.  The insn's first pattern must be\n@@ -122,65 +128,65 @@ REG_NOTE (FRAME_RELATED_EXPR)\n    with a base register and a constant offset.  In the most complicated\n    cases, this will result in a DW_CFA_def_cfa_expression with the rtx\n    expression rendered in a dwarf location expression.  */\n-REG_NOTE (CFA_DEF_CFA)\n+REG_CFA_NOTE (CFA_DEF_CFA)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n    for FRAME_RELATED_EXPR intuition.  This note adjusts the expression\n    from which the CFA is computed.  The attached rtx defines a new CFA\n    expression, relative to the old CFA expression.  This rtx must be of\n    the form (SET new-cfa-reg (PLUS old-cfa-reg const_int)).  If the note\n    rtx is NULL, we use the first SET of the insn.  */\n-REG_NOTE (CFA_ADJUST_CFA)\n+REG_CFA_NOTE (CFA_ADJUST_CFA)\n \n /* Similar to FRAME_RELATED_EXPR, with the additional information that\n    this is a save to memory, i.e. will result in DW_CFA_offset or the\n    like.  The pattern or the insn should be a simple store relative to\n    the CFA.  */\n-REG_NOTE (CFA_OFFSET)\n+REG_CFA_NOTE (CFA_OFFSET)\n \n /* Similar to FRAME_RELATED_EXPR, with the additional information that this\n    is a save to a register, i.e. will result in DW_CFA_register.  The insn\n    or the pattern should be simple reg-reg move.  */\n-REG_NOTE (CFA_REGISTER)\n+REG_CFA_NOTE (CFA_REGISTER)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n    for FRAME_RELATED_EXPR intuition.  This is a save to memory, i.e. will\n    result in a DW_CFA_expression.  The pattern or the insn should be a\n    store of a register to an arbitrary (non-validated) memory address.  */\n-REG_NOTE (CFA_EXPRESSION)\n+REG_CFA_NOTE (CFA_EXPRESSION)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, but are too complex\n    for FRAME_RELATED_EXPR intuition.  The DWARF expression computes the value of\n    the given register.  */\n-REG_NOTE (CFA_VAL_EXPRESSION)\n+REG_CFA_NOTE (CFA_VAL_EXPRESSION)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, with the information\n    that this is a restore operation, i.e. will result in DW_CFA_restore\n    or the like.  Either the attached rtx, or the destination of the insn's\n    first pattern is the register to be restored.  */\n-REG_NOTE (CFA_RESTORE)\n+REG_CFA_NOTE (CFA_RESTORE)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, marks insn that sets\n    vDRAP from DRAP.  If vDRAP is a register, vdrap_reg is initalized\n    to the argument, if it is a MEM, it is ignored.  */\n-REG_NOTE (CFA_SET_VDRAP)\n+REG_CFA_NOTE (CFA_SET_VDRAP)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, indicating a window\n    save operation, i.e. will result in a DW_CFA_GNU_window_save.\n    The argument is ignored.  */\n-REG_NOTE (CFA_WINDOW_SAVE)\n+REG_CFA_NOTE (CFA_WINDOW_SAVE)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, marks the insn as\n    requiring that all queued information should be flushed *before* insn,\n    regardless of what is visible in the rtl.  The argument is ignored.\n    This is normally used for a call instruction which is not exposed to\n    the rest of the compiler as a CALL_INSN.  */\n-REG_NOTE (CFA_FLUSH_QUEUE)\n+REG_CFA_NOTE (CFA_FLUSH_QUEUE)\n \n /* Attached to insns that are RTX_FRAME_RELATED_P, toggling the mangling status\n    of return address.  Currently it's only used by AArch64.  The argument is\n    ignored.  */\n-REG_NOTE (CFA_TOGGLE_RA_MANGLE)\n+REG_CFA_NOTE (CFA_TOGGLE_RA_MANGLE)\n \n /* Indicates what exception region an INSN belongs in.  This is used\n    to indicate what region to which a call may throw.  REGION 0"}, {"sha": "8146499de3f4999d144905cf9e3486280f0abdf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "patch": "@@ -1,3 +1,8 @@\n+2017-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80102\n+\t* g++.dg/opt/pr80102.C: New test.\n+\n 2017-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/78543"}, {"sha": "8b0da230a3054871f085508ca3dffd261d4a9780", "filename": "gcc/testsuite/g++.dg/opt/pr80102.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80102.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80102.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80102.C?ref=aade772d8a2eeda4ea22f0ca648ebdf44d8d8c15", "patch": "@@ -0,0 +1,14 @@\n+// PR target/80102\n+// { dg-do compile }\n+// { dg-options \"-fnon-call-exceptions -Os\" }\n+// { dg-additional-options \"-mminimal-toc\" { target { powerpc*-*-* && lp64 } } }\n+\n+struct B { float a; B (float c) { for (int g; g < c;) ++a; } };\n+struct D { D (B); };\n+\n+int\n+main ()\n+{\n+  B (1.0);\n+  D e (0.0), f (1.0);\n+}"}]}