{"sha": "b5cf27d7ec42156b78369cc0bdaabc34d1885191", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjZjI3ZDdlYzQyMTU2Yjc4MzY5Y2MwYmRhYWJjMzRkMTg4NTE5MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-03-21T15:52:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-03-21T15:52:23Z"}, "message": "re PR target/31245 (SSE2 generation bug with 4.1.2 and -O3)\n\n        PR target/31245\n        * config/i386/emmintrin.h (__m128i, __m128d): Mark may_alias.\n        * config/i386/mmintrin.h (__m64): Likewise.\n        * config/i386/xmmintrin.h (__m128): Likewise.\n\nFrom-SVN: r123112", "tree": {"sha": "3fd4694ce5ed120d2892be28b11fb013bb783908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd4694ce5ed120d2892be28b11fb013bb783908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5cf27d7ec42156b78369cc0bdaabc34d1885191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cf27d7ec42156b78369cc0bdaabc34d1885191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cf27d7ec42156b78369cc0bdaabc34d1885191", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cf27d7ec42156b78369cc0bdaabc34d1885191/comments", "author": null, "committer": null, "parents": [{"sha": "cb717c409821f271ef6119e784b52ee48bf29fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb717c409821f271ef6119e784b52ee48bf29fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb717c409821f271ef6119e784b52ee48bf29fa0"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "a53840e9793f962750395d3164c9aa6cff39f1af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5cf27d7ec42156b78369cc0bdaabc34d1885191", "patch": "@@ -1,3 +1,10 @@\n+2007-03-21  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/31245\n+\t* config/i386/emmintrin.h (__m128i, __m128d): Mark may_alias.\n+\t* config/i386/mmintrin.h (__m64): Likewise.\n+\t* config/i386/xmmintrin.h (__m128): Likewise.\n+\n 2007-03-21  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/vxworks.h (VXWORKS_ADDITIONAL_CPP_SPEC): Remove -D options."}, {"sha": "002e16c9b95e128f1a7018171e8f917b2b1ac061", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=b5cf27d7ec42156b78369cc0bdaabc34d1885191", "patch": "@@ -44,8 +44,10 @@ typedef int __v4si __attribute__ ((__vector_size__ (16)));\n typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n \n-typedef __v2di __m128i;\n-typedef __v2df __m128d;\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n \n /* Create a selector for use with the SHUFPD instruction.  */\n #define _MM_SHUFFLE2(fp1,fp0) \\"}, {"sha": "052198d71d93f5a13eb7906e3a2c15c865747d84", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=b5cf27d7ec42156b78369cc0bdaabc34d1885191", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005, 2006\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -34,8 +34,9 @@\n #ifndef __MMX__\n # error \"MMX instruction set not enabled\"\n #else\n-/* The data type intended for user use.  */\n-typedef int __m64 __attribute__ ((__vector_size__ (8)));\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n \n /* Internal data types for implementing the intrinsics.  */\n typedef int __v2si __attribute__ ((__vector_size__ (8)));"}, {"sha": "57ef330b128fd85a747a297dafa6ee73d62f1710", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cf27d7ec42156b78369cc0bdaabc34d1885191/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=b5cf27d7ec42156b78369cc0bdaabc34d1885191", "patch": "@@ -41,8 +41,9 @@\n /* Get _mm_malloc () and _mm_free ().  */\n #include <mm_malloc.h>\n \n-/* The data type intended for user use.  */\n-typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n \n /* Internal data types for implementing the intrinsics.  */\n typedef float __v4sf __attribute__ ((__vector_size__ (16)));"}]}