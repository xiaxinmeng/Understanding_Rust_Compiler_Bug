{"sha": "a92fa6087356629b7810c7e8368645b394aba980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyZmE2MDg3MzU2NjI5Yjc4MTBjN2U4MzY4NjQ1YjM5NGFiYTk4MA==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-05-12T16:35:21Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-12T16:35:21Z"}, "message": "buglet & relaxed rules\n\nFrom-SVN: r33877", "tree": {"sha": "8d1215879e43bc3003b79187212ae7ffe2f709b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1215879e43bc3003b79187212ae7ffe2f709b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a92fa6087356629b7810c7e8368645b394aba980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92fa6087356629b7810c7e8368645b394aba980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92fa6087356629b7810c7e8368645b394aba980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92fa6087356629b7810c7e8368645b394aba980/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be1bb652637d5d8785993a4cd197d989dc4b5260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1bb652637d5d8785993a4cd197d989dc4b5260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1bb652637d5d8785993a4cd197d989dc4b5260"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "bf19c4496722f8a87790ce1c099812e1a80c3079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92fa6087356629b7810c7e8368645b394aba980/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92fa6087356629b7810c7e8368645b394aba980/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a92fa6087356629b7810c7e8368645b394aba980", "patch": "@@ -41,6 +41,10 @@\n \t(LABEL_NUSES, LABEL_REFS): Likewise.\n \t* unroll.c (copy_loop_body): Don't copy NOTE_INSN_DELETED_LABEL.\n \n+2000-05-12  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/fixfixes.c(format_write): buglet & relaxed rules\n+\n 2000-05-12  Zack Weinberg <zack@wolery.cumb.org>\n \n         * fixinc/fixfixes.c (IO_use_fix, IO_defn_fix, CTRL_use_fix,"}, {"sha": "90b8fd814abe766fab7f06ddc7ae63825450d345", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92fa6087356629b7810c7e8368645b394aba980/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92fa6087356629b7810c7e8368645b394aba980/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=a92fa6087356629b7810c7e8368645b394aba980", "patch": "@@ -127,32 +127,54 @@ format_write (format, text, av)\n      tCC* text;\n      regmatch_t av[];\n {\n-    tCC *p, *str;\n     int c;\n-    size_t len;\n-\n-    for (p = 0; *p; p++) {\n-       c = *p;\n-       if (c != '%') {\n-           putchar(c);\n-           continue;\n-       }\n-\n-       c = *++p;\n-       if (c == '%') {\n-           putchar(c);\n-           continue;\n-       } else if (c < '0' || c > '9') {\n-           abort();\n-       }\n-\n-       c -= '0';\n-       str = text + av[c].rm_so;\n-       len = av[c].rm_eo - av[c].rm_so;\n-       fwrite(str, len, 1, stdout);\n+\n+    while ((c = (unsigned)*(format++)) != NUL) {\n+\n+        if (c != '%') {\n+            putchar(c);\n+            continue;\n+        }\n+\n+        c = (unsigned)*(format++);\n+\n+        /*\n+         *  IF the character following a '%' is not a digit,\n+         *  THEN we will always emit a '%' and we may or may\n+         *  not emit the following character.  We will end on\n+         *  a NUL and we will emit only one of a pair of '%'.\n+         */\n+        if (! isdigit( c )) {\n+            putchar( '%' );\n+            switch (c) {\n+            case NUL:\n+                return;\n+            case '%':\n+                break;\n+            default:\n+                putchar(c);\n+            }\n+        }\n+\n+        /*\n+         *  Emit the matched subexpression numbered 'c'.\n+         *  IF, of course, there was such a match...\n+         */\n+        else {\n+            regmatch_t*  pRM = av + (c - (unsigned)'0');\n+            size_t len;\n+\n+            if (pRM->rm_so < 0)\n+                continue;\n+\n+            len = pRM->rm_eo - pRM->rm_so;\n+            if (len > 0)\n+                fwrite(text + pRM->rm_so, len, 1, stdout);\n+        }\n     }\n }\n \n+\n FIX_PROC_HEAD( format_fix )\n {\n     tSCC  zBad[] = \"fixincl error:  `%s' needs %s c_fix_arg\\n\";"}]}