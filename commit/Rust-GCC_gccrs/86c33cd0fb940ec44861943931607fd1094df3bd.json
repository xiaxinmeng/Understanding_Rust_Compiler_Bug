{"sha": "86c33cd0fb940ec44861943931607fd1094df3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjMzNjZDBmYjk0MGVjNDQ4NjE5NDM5MzE2MDdmZDEwOTRkZjNiZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-08-25T13:39:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-08-25T13:39:02Z"}, "message": "tm.texi: Fix a typo.\n\n\t* doc/tm.texi: Fix a typo.\n\t* predict.c: Fix comment typos.\n\nFrom-SVN: r116399", "tree": {"sha": "946fc069d7c4945cd9418f4d8679df1cf39880fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946fc069d7c4945cd9418f4d8679df1cf39880fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c33cd0fb940ec44861943931607fd1094df3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c33cd0fb940ec44861943931607fd1094df3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c33cd0fb940ec44861943931607fd1094df3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c33cd0fb940ec44861943931607fd1094df3bd/comments", "author": null, "committer": null, "parents": [{"sha": "17daa4c8baa0a7c6e15ce6be3504969b6831a6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17daa4c8baa0a7c6e15ce6be3504969b6831a6b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17daa4c8baa0a7c6e15ce6be3504969b6831a6b2"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "e5f5ff7f77ae7978068855d1b94ff25ef51d68f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86c33cd0fb940ec44861943931607fd1094df3bd", "patch": "@@ -1,3 +1,8 @@\n+2006-08-25  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* doc/tm.texi: Fix a typo.\n+\t* predict.c: Fix comment typos.\n+\n 2006-08-25  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300.h (TARGET_CPU_CPP_BUILTINS): Add"}, {"sha": "32f00052df1465a4a238c7d7c0ef98b0c38ded1b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=86c33cd0fb940ec44861943931607fd1094df3bd", "patch": "@@ -4401,7 +4401,7 @@ compiler knows this regardless of @code{EXIT_IGNORE_STACK}.\n @defmac EPILOGUE_USES (@var{regno})\n Define this macro as a C expression that is nonzero for registers that are\n used by the epilogue or the @samp{return} pattern.  The stack and frame\n-pointer registers are already be assumed to be used as needed.\n+pointer registers are already assumed to be used as needed.\n @end defmac\n \n @defmac EH_USES (@var{regno})"}, {"sha": "90307635dd87859a59daa40b204e35979dcf763a", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c33cd0fb940ec44861943931607fd1094df3bd/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=86c33cd0fb940ec44861943931607fd1094df3bd", "patch": "@@ -182,7 +182,7 @@ tree_predicted_by_p (basic_block bb, enum br_predictor predictor)\n   \n    The profile guessing code is good at predicting branch outcome (ie.\n    taken/not taken), that is predicted right slightly over 75% of time.\n-   It is however notorously poor on predicting the probability itself.\n+   It is however notoriously poor on predicting the probability itself.\n    In general the profile appear a lot flatter (with probabilities closer\n    to 50%) than the reality so it is bad idea to use it to drive optimization\n    such as those disabling dynamic branch prediction for well predictable\n@@ -192,7 +192,7 @@ tree_predicted_by_p (basic_block bb, enum br_predictor predictor)\n    predicted by number of iterations heuristics are predicted well.  This macro\n    should be able to distinguish those, but at the moment it simply check for\n    noreturn heuristic that is only one giving probability over 99% or bellow\n-   1%.  In future we might want to propagate reliablity information across the\n+   1%.  In future we might want to propagate reliability information across the\n    CFG if we find this information useful on multiple places.   */\n static bool\n probability_reliable_p (int prob)"}]}