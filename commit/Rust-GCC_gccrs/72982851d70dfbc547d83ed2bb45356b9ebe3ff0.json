{"sha": "72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5ODI4NTFkNzBkZmJjNTQ3ZDgzZWQyYmI0NTM1NmI5ZWJlM2ZmMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-24T03:04:58Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-03-25T12:30:07Z"}, "message": "x86: Skip ISA check for always_inline in system headers\n\nFor always_inline in system headers, we don't know if caller's ISAs are\ncompatible with callee's ISAs until much later.  Skip ISA check for\nalways_inline in system headers if caller has target attribute.\n\ngcc/\n\n\tPR target/98209\n\tPR target/99744\n\t* config/i386/i386.c (ix86_can_inline_p): Don't check ISA for\n\talways_inline in system headers.\n\ngcc/testsuite/\n\n\tPR target/98209\n\tPR target/99744\n\t* gcc.target/i386/pr98209.c: New test.\n\t* gcc.target/i386/pr99744-1.c: Likewise.\n\t* gcc.target/i386/pr99744-2.c: Likewise.", "tree": {"sha": "f448fce0f556542cabdfce604a36fb3c17678ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f448fce0f556542cabdfce604a36fb3c17678ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99111fd8e12deffdd9a965ce17e8a760d531ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d99111fd8e12deffdd9a965ce17e8a760d531ec3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d99111fd8e12deffdd9a965ce17e8a760d531ec3"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "1b4567e34bad19835dd5241f672785f42baf45da", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "patch": "@@ -578,21 +578,29 @@ ix86_can_inline_p (tree caller, tree callee)\n        && lookup_attribute (\"always_inline\",\n \t\t\t    DECL_ATTRIBUTES (callee)));\n \n+  /* NB: Skip ISA check for always_inline in system headers if caller\n+     has target attribute.  */\n+  bool skip_isa_check = (always_inline\n+\t\t\t && caller_tree != target_option_default_node\n+\t\t\t && DECL_IN_SYSTEM_HEADER (callee));\n+\n   cgraph_node *callee_node = cgraph_node::get (callee);\n   /* Callee's isa options should be a subset of the caller's, i.e. a SSE4\n      function can inline a SSE2 function but a SSE2 function can't inline\n      a SSE4 function.  */\n-  if (((caller_opts->x_ix86_isa_flags & callee_opts->x_ix86_isa_flags)\n-       != callee_opts->x_ix86_isa_flags)\n-      || ((caller_opts->x_ix86_isa_flags2 & callee_opts->x_ix86_isa_flags2)\n-\t  != callee_opts->x_ix86_isa_flags2))\n+  if (!skip_isa_check\n+      && (((caller_opts->x_ix86_isa_flags & callee_opts->x_ix86_isa_flags)\n+\t   != callee_opts->x_ix86_isa_flags)\n+\t  || ((caller_opts->x_ix86_isa_flags2 & callee_opts->x_ix86_isa_flags2)\n+\t      != callee_opts->x_ix86_isa_flags2)))\n     ret = false;\n \n   /* See if we have the same non-isa options.  */\n-  else if ((!always_inline\n-\t    && caller_opts->x_target_flags != callee_opts->x_target_flags)\n-\t   || (caller_opts->x_target_flags & ~always_inline_safe_mask)\n-\t       != (callee_opts->x_target_flags & ~always_inline_safe_mask))\n+  else if (!skip_isa_check\n+\t   && ((!always_inline\n+\t\t&& caller_opts->x_target_flags != callee_opts->x_target_flags)\n+\t       || ((caller_opts->x_target_flags & ~always_inline_safe_mask)\n+\t\t   != (callee_opts->x_target_flags & ~always_inline_safe_mask))))\n     ret = false;\n \n   /* See if arch, tune, etc. are the same.  */"}, {"sha": "4566d4c7fc36513c6e955a37743aeb35395c2a51", "filename": "gcc/testsuite/gcc.target/i386/pr98209.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98209.c?ref=72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run { target *-*-linux* } } */\n+/* { dg-options \"-O2 -D_FORTIFY_SOURCE=2\" } */\n+\n+#include <stdio.h>\n+\n+extern int main(int argc, char** argv)\n+  __attribute__ ((__target__ (\"no-sse,no-mmx\")));\n+\n+int main(int argc, char** argv)\n+{\n+  printf (\"hello!\\n\");\n+  return 0;\n+}"}, {"sha": "92535923a56bb850f1b3dd69af8dda36bf206891", "filename": "gcc/testsuite/gcc.target/i386/pr99744-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-1.c?ref=72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+#include <x86intrin.h>\n+\n+extern unsigned long long int curr_deadline;\n+extern void bar (void);\n+\n+__attribute__ ((target(\"general-regs-only\")))\n+void\n+foo (void)\n+{\n+  if (__rdtsc () < curr_deadline)\n+    return; \n+  bar ();\n+}"}, {"sha": "4bb2a6bb6dc06922ba43d7c31ab29cb7c77e2c51", "filename": "gcc/testsuite/gcc.target/i386/pr99744-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72982851d70dfbc547d83ed2bb45356b9ebe3ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-2.c?ref=72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <x86intrin.h>\n+\n+extern __m128i x, y;\n+\n+__attribute__ ((target(\"general-regs-only\")))\n+void\n+foo (void)\n+{\n+  x = _mm_move_epi64 (y); /* { dg-error \"SSE register return with SSE disabled\" } */\n+}"}]}