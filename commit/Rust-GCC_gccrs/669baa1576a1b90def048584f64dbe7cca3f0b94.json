{"sha": "669baa1576a1b90def048584f64dbe7cca3f0b94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5YmFhMTU3NmExYjkwZGVmMDQ4NTg0ZjY0ZGJlN2NjYTNmMGI5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-28T00:53:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-28T00:53:49Z"}, "message": "re PR c++/47049 ([C++0x] ICE in write_unnamed_type_name with lambda use)\n\n\tPR c++/47049\n\t* semantics.c (maybe_add_lambda_conv_op): Fix COMDAT sharing.\n\t* decl.c (start_preparsed_function): Don't call comdat_linkage for\n\ta template.\n\nFrom-SVN: r174375", "tree": {"sha": "dfdaed167f5429070153b761d7375549c8bb6683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfdaed167f5429070153b761d7375549c8bb6683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669baa1576a1b90def048584f64dbe7cca3f0b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669baa1576a1b90def048584f64dbe7cca3f0b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669baa1576a1b90def048584f64dbe7cca3f0b94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669baa1576a1b90def048584f64dbe7cca3f0b94/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faa00511123f0b50467f6526d14f97f56716db94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa00511123f0b50467f6526d14f97f56716db94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa00511123f0b50467f6526d14f97f56716db94"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "3419d518ffbe7c731362990f3de88d807ab7b98b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=669baa1576a1b90def048584f64dbe7cca3f0b94", "patch": "@@ -1,5 +1,10 @@\n 2011-05-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47049\n+\t* semantics.c (maybe_add_lambda_conv_op): Fix COMDAT sharing.\n+\t* decl.c (start_preparsed_function): Don't call comdat_linkage for\n+\ta template.\n+\n \tPR c++/47132\n \t* mangle.c (write_expression): Handle MODOP_EXPR.\n "}, {"sha": "8fe32592c5fb78134e375aca823101b60d386d44", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=669baa1576a1b90def048584f64dbe7cca3f0b94", "patch": "@@ -12672,6 +12672,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \tDECL_EXTERNAL (decl1) = 0;\n \n       if (ctx != NULL_TREE && DECL_DECLARED_INLINE_P (ctx)\n+\t  && !processing_template_decl\n \t  && TREE_PUBLIC (ctx))\n \t/* This is a function in a local class in an extern inline\n \t   function.  */"}, {"sha": "854bac7d6e95e343a4a012b5c01157d9e181c795", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=669baa1576a1b90def048584f64dbe7cca3f0b94", "patch": "@@ -8578,7 +8578,7 @@ maybe_add_lambda_conv_op (tree type)\n     {\n       /* Put the thunk in the same comdat group as the call op.  */\n       struct cgraph_node *callop_node, *thunk_node;\n-      DECL_COMDAT_GROUP (statfn) = DECL_COMDAT_GROUP (callop);\n+      DECL_COMDAT_GROUP (statfn) = cxx_comdat_group (callop);\n       callop_node = cgraph_get_create_node (callop);\n       thunk_node = cgraph_get_create_node (statfn);\n       gcc_assert (callop_node->same_comdat_group == NULL);"}, {"sha": "36edc225434e0d25995e11f88f5e48351df02091", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=669baa1576a1b90def048584f64dbe7cca3f0b94", "patch": "@@ -1,3 +1,7 @@\n+2011-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-template2.C: New.\n+\n 2011-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "12ffde724e8e497851c2ee8447561c66363a38e8", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669baa1576a1b90def048584f64dbe7cca3f0b94/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template2.C?ref=669baa1576a1b90def048584f64dbe7cca3f0b94", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/47049\n+// { dg-options -std=c++0x }\n+\n+enum { E = 0, F = 1 };\n+template <int N, int M = ((N == 1) ? F : E)> class S {};\n+template <int N>\n+struct T\n+{\n+  static void\n+  foo (S<N> *p)\n+  {\n+    S<N> u;\n+    [&u] ()->bool {} ();\n+  }\n+};\n+\n+int main()\n+{\n+  T<0>().foo(0);\n+}"}]}