{"sha": "8486e9f268b88356d37036b3e30b19ce51d32fdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4NmU5ZjI2OGI4ODM1NmQzNzAzNmIzZTMwYjE5Y2U1MWQzMmZkYg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-23T17:10:15Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-14T04:34:57Z"}, "message": "AVX512FP16: Add fpclass/getexp/getmant instructions.\n\nAdd vfpclassph/vfpclasssh/vgetexpph/vgetexpsh/vgetmantph/vgetmantsh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_fpclass_sh_mask):\n\tNew intrinsic.\n\t(_mm_mask_fpclass_sh_mask): Likewise.\n\t(_mm512_mask_fpclass_ph_mask): Likewise.\n\t(_mm512_fpclass_ph_mask): Likewise.\n\t(_mm_getexp_sh): Likewise.\n\t(_mm_mask_getexp_sh): Likewise.\n\t(_mm_maskz_getexp_sh): Likewise.\n\t(_mm512_getexp_ph): Likewise.\n\t(_mm512_mask_getexp_ph): Likewise.\n\t(_mm512_maskz_getexp_ph): Likewise.\n\t(_mm_getexp_round_sh): Likewise.\n\t(_mm_mask_getexp_round_sh): Likewise.\n\t(_mm_maskz_getexp_round_sh): Likewise.\n\t(_mm512_getexp_round_ph): Likewise.\n\t(_mm512_mask_getexp_round_ph): Likewise.\n\t(_mm512_maskz_getexp_round_ph): Likewise.\n\t(_mm_getmant_sh): Likewise.\n\t(_mm_mask_getmant_sh): Likewise.\n\t(_mm_maskz_getmant_sh): Likewise.\n\t(_mm512_getmant_ph): Likewise.\n\t(_mm512_mask_getmant_ph): Likewise.\n\t(_mm512_maskz_getmant_ph): Likewise.\n\t(_mm_getmant_round_sh): Likewise.\n\t(_mm_mask_getmant_round_sh): Likewise.\n\t(_mm_maskz_getmant_round_sh): Likewise.\n\t(_mm512_getmant_round_ph): Likewise.\n\t(_mm512_mask_getmant_round_ph): Likewise.\n\t(_mm512_maskz_getmant_round_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_mask_fpclass_ph_mask):\n\tNew intrinsic.\n\t(_mm_fpclass_ph_mask): Likewise.\n\t(_mm256_mask_fpclass_ph_mask): Likewise.\n\t(_mm256_fpclass_ph_mask): Likewise.\n\t(_mm256_getexp_ph): Likewise.\n\t(_mm256_mask_getexp_ph): Likewise.\n\t(_mm256_maskz_getexp_ph): Likewise.\n\t(_mm_getexp_ph): Likewise.\n\t(_mm_mask_getexp_ph): Likewise.\n\t(_mm_maskz_getexp_ph): Likewise.\n\t(_mm256_getmant_ph): Likewise.\n\t(_mm256_mask_getmant_ph): Likewise.\n\t(_mm256_maskz_getmant_ph): Likewise.\n\t(_mm_getmant_ph): Likewise.\n\t(_mm_mask_getmant_ph): Likewise.\n\t(_mm_maskz_getmant_ph): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t(ix86_expand_round_builtin): Ditto.\n\t* config/i386/sse.md (vecmemsuffix): Add HF vector modes.\n\t(<avx512>_getexp<mode><mask_name><round_saeonly_name>): Adjust\n\tto support HF vector modes.\n\t(avx512f_sgetexp<mode><mask_scalar_name><round_saeonly_scalar_name):\n\tDitto.\n\t(avx512dq_fpclass<mode><mask_scalar_merge_name>): Ditto.\n\t(avx512dq_vmfpclass<mode><mask_scalar_merge_name>): Ditto.\n\t(<avx512>_getmant<mode><mask_name><round_saeonly_name>): Ditto.\n\t(avx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>):\n\tDitto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "14cd3188f69b1912015b0980acaff85d11cb2bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14cd3188f69b1912015b0980acaff85d11cb2bde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8486e9f268b88356d37036b3e30b19ce51d32fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8486e9f268b88356d37036b3e30b19ce51d32fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8486e9f268b88356d37036b3e30b19ce51d32fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8486e9f268b88356d37036b3e30b19ce51d32fdb/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e944df4e3b943f084e138042e060a04bb4b24c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e944df4e3b943f084e138042e060a04bb4b24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e944df4e3b943f084e138042e060a04bb4b24c"}], "stats": {"total": 829, "additions": 809, "deletions": 20}, "files": [{"sha": "2fbfc140c4477902e4f5cfd799587dfa67f9476a", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 471, "deletions": 0, "changes": 471, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -1982,6 +1982,477 @@ _mm_maskz_roundscale_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vfpclasssh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fpclass_sh_mask (__m128h __A, const int __imm)\n+{\n+  return (__mmask8) __builtin_ia32_fpclasssh_mask ((__v8hf) __A, __imm,\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fpclass_sh_mask (__mmask8 __U, __m128h __A, const int __imm)\n+{\n+  return (__mmask8) __builtin_ia32_fpclasssh_mask ((__v8hf) __A, __imm, __U);\n+}\n+\n+#else\n+#define _mm_fpclass_sh_mask(X, C)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_fpclasssh_mask ((__v8hf) (__m128h) (X),\t\\\n+\t\t\t\t\t     (int) (C), (__mmask8) (-1))) \\\n+\n+#define _mm_mask_fpclass_sh_mask(U, X, C)\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_fpclasssh_mask ((__v8hf) (__m128h) (X),\t\\\n+\t\t\t\t\t     (int) (C), (__mmask8) (U)))\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vfpclassph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_fpclass_ph_mask (__mmask32 __U, __m512h __A,\n+\t\t\t     const int __imm)\n+{\n+  return (__mmask32) __builtin_ia32_fpclassph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t       __imm, __U);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_fpclass_ph_mask (__m512h __A, const int __imm)\n+{\n+  return (__mmask32) __builtin_ia32_fpclassph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t       __imm,\n+\t\t\t\t\t\t       (__mmask32) -1);\n+}\n+\n+#else\n+#define _mm512_mask_fpclass_ph_mask(u, x, c)\t\t\t\t\\\n+  ((__mmask32) __builtin_ia32_fpclassph512_mask ((__v32hf) (__m512h) (x),\\\n+\t\t\t\t\t\t (int) (c),(__mmask8)(u)))\n+\n+#define _mm512_fpclass_ph_mask(x, c)                                    \\\n+  ((__mmask32) __builtin_ia32_fpclassph512_mask ((__v32hf) (__m512h) (x),\\\n+\t\t\t\t\t\t (int) (c),(__mmask8)-1))\n+#endif /* __OPIMTIZE__ */\n+\n+/* Intrinsics vgetexpph, vgetexpsh.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_sh (__m128h __A, __m128h __B)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getexpsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t(__v8hf) _mm_setzero_ph (),\n+\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getexpsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t(__v8hf) __W, (__mmask8) __U,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_sh (__mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getexpsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t(__v8hf) _mm_setzero_ph (),\n+\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_getexp_ph (__m512h __A)\n+{\n+  return (__m512h)\n+    __builtin_ia32_getexpph512_mask ((__v32hf) __A,\n+\t\t\t\t     (__v32hf) _mm512_setzero_ph (),\n+\t\t\t\t     (__mmask32) -1, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_getexp_ph (__m512h __W, __mmask32 __U, __m512h __A)\n+{\n+  return (__m512h)\n+    __builtin_ia32_getexpph512_mask ((__v32hf) __A, (__v32hf) __W,\n+\t\t\t\t     (__mmask32) __U, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_getexp_ph (__mmask32 __U, __m512h __A)\n+{\n+  return (__m512h)\n+    __builtin_ia32_getexpph512_mask ((__v32hf) __A,\n+\t\t\t\t     (__v32hf) _mm512_setzero_ph (),\n+\t\t\t\t     (__mmask32) __U, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_round_sh (__m128h __A, __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getexpsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       _mm_setzero_ph (),\n+\t\t\t\t\t\t       (__mmask8) -1,\n+\t\t\t\t\t\t       __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_round_sh (__m128h __W, __mmask8 __U, __m128h __A,\n+\t\t\t  __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getexpsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       (__v8hf) __W,\n+\t\t\t\t\t\t       (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_round_sh (__mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t   const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getexpsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t       (__v8hf) __B,\n+\t\t\t\t\t\t       (__v8hf)\n+\t\t\t\t\t\t       _mm_setzero_ph (),\n+\t\t\t\t\t\t       (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_getexp_round_ph (__m512h __A, const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getexpph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t   (__v32hf)\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask32) -1, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_getexp_round_ph (__m512h __W, __mmask32 __U, __m512h __A,\n+\t\t\t     const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getexpph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t   (__v32hf) __W,\n+\t\t\t\t\t\t   (__mmask32) __U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_getexp_round_ph (__mmask32 __U, __m512h __A, const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getexpph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t   (__v32hf)\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask32) __U, __R);\n+}\n+\n+#else\n+#define _mm_getexp_round_sh(A, B, R)\t\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_getexpsh_mask_round((__v8hf)(__m128h)(A),\t\t\\\n+\t\t\t\t\t       (__v8hf)(__m128h)(B),\t\t\\\n+\t\t\t\t\t       (__v8hf)_mm_setzero_ph(),\t\\\n+\t\t\t\t\t       (__mmask8)-1, R))\n+\n+#define _mm_mask_getexp_round_sh(W, U, A, B, C)\t\t\t\t\t\\\n+  (__m128h)__builtin_ia32_getexpsh_mask_round(A, B, W, U, C)\n+\n+#define _mm_maskz_getexp_round_sh(U, A, B, C)\t\t\t\t\t\\\n+  (__m128h)__builtin_ia32_getexpsh_mask_round(A, B,\t\t\t\t\\\n+\t\t\t\t\t      (__v8hf)_mm_setzero_ph(),\t\t\\\n+\t\t\t\t\t      U, C)\n+\n+#define _mm512_getexp_round_ph(A, R)\t\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getexpph512_mask((__v32hf)(__m512h)(A),\t\t\\\n+  (__v32hf)_mm512_setzero_ph(), (__mmask32)-1, R))\n+\n+#define _mm512_mask_getexp_round_ph(W, U, A, R)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getexpph512_mask((__v32hf)(__m512h)(A),\t\t\\\n+  (__v32hf)(__m512h)(W), (__mmask32)(U), R))\n+\n+#define _mm512_maskz_getexp_round_ph(U, A, R)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getexpph512_mask((__v32hf)(__m512h)(A),\t\t\\\n+  (__v32hf)_mm512_setzero_ph(), (__mmask32)(U), R))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vgetmantph, vgetmantsh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_sh (__m128h __A, __m128h __B,\n+\t\t_MM_MANTISSA_NORM_ENUM __C,\n+\t\t_MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getmantsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t (__D << 2) | __C, _mm_setzero_ph (),\n+\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_sh (__m128h __W, __mmask8 __U, __m128h __A,\n+\t\t     __m128h __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t     _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getmantsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t (__D << 2) | __C, (__v8hf) __W,\n+\t\t\t\t\t __U, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_sh (__mmask8 __U, __m128h __A, __m128h __B,\n+\t\t      _MM_MANTISSA_NORM_ENUM __C,\n+\t\t      _MM_MANTISSA_SIGN_ENUM __D)\n+{\n+  return (__m128h)\n+    __builtin_ia32_getmantsh_mask_round ((__v8hf) __A, (__v8hf) __B,\n+\t\t\t\t\t (__D << 2) | __C,\n+\t\t\t\t\t (__v8hf) _mm_setzero_ph(),\n+\t\t\t\t\t __U, _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_getmant_ph (__m512h __A, _MM_MANTISSA_NORM_ENUM __B,\n+\t\t   _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     _mm512_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask32) -1,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_getmant_ph (__m512h __W, __mmask32 __U, __m512h __A,\n+\t\t\t_MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t_MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v32hf) __W, __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_getmant_ph (__mmask32 __U, __m512h __A,\n+\t\t\t _MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v32hf)\n+\t\t\t\t\t\t     _mm512_setzero_ph (),\n+\t\t\t\t\t\t     __U,\n+\t\t\t\t\t\t     _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_round_sh (__m128h __A, __m128h __B,\n+\t\t      _MM_MANTISSA_NORM_ENUM __C,\n+\t\t      _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getmantsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__D << 2) | __C,\n+\t\t\t\t\t\t\t_mm_setzero_ph (),\n+\t\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t\t__R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_round_sh (__m128h __W, __mmask8 __U, __m128h __A,\n+\t\t\t   __m128h __B, _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t   _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getmantsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__D << 2) | __C,\n+\t\t\t\t\t\t\t(__v8hf) __W,\n+\t\t\t\t\t\t\t__U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_round_sh (__mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t    _MM_MANTISSA_NORM_ENUM __C,\n+\t\t\t    _MM_MANTISSA_SIGN_ENUM __D, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_getmantsh_mask_round ((__v8hf) __A,\n+\t\t\t\t\t\t\t(__v8hf) __B,\n+\t\t\t\t\t\t\t(__D << 2) | __C,\n+\t\t\t\t\t\t\t(__v8hf)\n+\t\t\t\t\t\t\t_mm_setzero_ph(),\n+\t\t\t\t\t\t\t__U, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_getmant_round_ph (__m512h __A, _MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t _MM_MANTISSA_SIGN_ENUM __C, const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     _mm512_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask32) -1, __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_getmant_round_ph (__m512h __W, __mmask32 __U, __m512h __A,\n+\t\t\t      _MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t      _MM_MANTISSA_SIGN_ENUM __C, const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v32hf) __W, __U,\n+\t\t\t\t\t\t     __R);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_getmant_round_ph (__mmask32 __U, __m512h __A,\n+\t\t\t       _MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t       _MM_MANTISSA_SIGN_ENUM __C, const int __R)\n+{\n+  return (__m512h) __builtin_ia32_getmantph512_mask ((__v32hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v32hf)\n+\t\t\t\t\t\t     _mm512_setzero_ph (),\n+\t\t\t\t\t\t     __U, __R);\n+}\n+\n+#else\n+#define _mm512_getmant_ph(X, B, C)\t\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)\t\\\n+\t\t\t\t\t      _mm512_setzero_ph(),\t\\\n+\t\t\t\t\t      (__mmask32)-1,\t\t\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_mask_getmant_ph(W, U, X, B, C)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)(W),\t\\\n+\t\t\t\t\t      (__mmask32)(U),\t\t\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+\n+#define _mm512_maskz_getmant_ph(U, X, B, C)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)\t\\\n+\t\t\t\t\t      _mm512_setzero_ph(),\t\\\n+\t\t\t\t\t      (__mmask32)(U),\t\t\\\n+\t\t\t\t\t      _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_getmant_sh(X, Y, C, D)\t\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)\t\\\n+\t\t\t\t\t\t _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t (__mmask8)-1,\t\t\\\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_getmant_sh(W, U, X, Y, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(W),\t\\\n+\t\t\t\t\t\t (__mmask8)(U),\t\t\\\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_maskz_getmant_sh(U, X, Y, C, D)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)\t\\\n+\t\t\t\t\t\t _mm_setzero_ph(),\t\\\n+\t\t\t\t\t\t (__mmask8)(U),\t\t\\\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_getmant_round_ph(X, B, C, R)\t\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)\t\\\n+\t\t\t\t\t      _mm512_setzero_ph(),\t\\\n+\t\t\t\t\t      (__mmask32)-1,\t\t\\\n+\t\t\t\t\t      (R)))\n+\n+#define _mm512_mask_getmant_round_ph(W, U, X, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)(W),\t\\\n+\t\t\t\t\t      (__mmask32)(U),\t\t\\\n+\t\t\t\t\t      (R)))\n+\n+\n+#define _mm512_maskz_getmant_round_ph(U, X, B, C, R)\t\t\t\\\n+  ((__m512h)__builtin_ia32_getmantph512_mask ((__v32hf)(__m512h)(X),\t\\\n+\t\t\t\t\t      (int)(((C)<<2) | (B)),\t\\\n+\t\t\t\t\t      (__v32hf)(__m512h)\t\\\n+\t\t\t\t\t      _mm512_setzero_ph(),\t\\\n+\t\t\t\t\t      (__mmask32)(U),\t\t\\\n+\t\t\t\t\t      (R)))\n+\n+#define _mm_getmant_round_sh(X, Y, C, D, R)\t\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)\t\\\n+\t\t\t\t\t\t _mm_setzero_ph (),\t\\\n+\t\t\t\t\t\t (__mmask8)-1,\t\t\\\n+\t\t\t\t\t\t (R)))\n+\n+#define _mm_mask_getmant_round_sh(W, U, X, Y, C, D, R)\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(W),\t\\\n+\t\t\t\t\t\t (__mmask8)(U),\t\t\\\n+\t\t\t\t\t\t (R)))\n+\n+#define _mm_maskz_getmant_round_sh(U, X, Y, C, D, R)\t\t\t\\\n+  ((__m128h)__builtin_ia32_getmantsh_mask_round ((__v8hf)(__m128h)(X),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)(Y),\t\\\n+\t\t\t\t\t\t (int)(((D)<<2) | (C)),\t\\\n+\t\t\t\t\t\t (__v8hf)(__m128h)\t\\\n+\t\t\t\t\t\t _mm_setzero_ph(),\t\\\n+\t\t\t\t\t\t (__mmask8)(U),\t\t\\\n+\t\t\t\t\t\t (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "206d60407fc5fa8a98972efdc25b9794c1aa19b6", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -701,6 +701,235 @@ _mm256_maskz_roundscale_ph (__mmask16 __A, __m256h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vfpclassph.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fpclass_ph_mask (__mmask8 __U, __m128h __A, const int __imm)\n+{\n+  return (__mmask8) __builtin_ia32_fpclassph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t      __imm, __U);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fpclass_ph_mask (__m128h __A, const int __imm)\n+{\n+  return (__mmask8) __builtin_ia32_fpclassph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__mmask8) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_fpclass_ph_mask (__mmask16 __U, __m256h __A, const int __imm)\n+{\n+  return (__mmask16) __builtin_ia32_fpclassph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t      __imm, __U);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fpclass_ph_mask (__m256h __A, const int __imm)\n+{\n+  return (__mmask16) __builtin_ia32_fpclassph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t      __imm,\n+\t\t\t\t\t\t      (__mmask16) -1);\n+}\n+\n+#else\n+#define _mm_fpclass_ph_mask(X, C)                                       \\\n+  ((__mmask8) __builtin_ia32_fpclassph128_mask ((__v8hf) (__m128h) (X),  \\\n+\t\t\t\t\t\t(int) (C),(__mmask8)-1))\n+\n+#define _mm_mask_fpclass_ph_mask(u, X, C)                               \\\n+  ((__mmask8) __builtin_ia32_fpclassph128_mask ((__v8hf) (__m128h) (X),  \\\n+\t\t\t\t\t\t(int) (C),(__mmask8)(u)))\n+\n+#define _mm256_fpclass_ph_mask(X, C)                                    \\\n+  ((__mmask16) __builtin_ia32_fpclassph256_mask ((__v16hf) (__m256h) (X),  \\\n+\t\t\t\t\t\t(int) (C),(__mmask16)-1))\n+\n+#define _mm256_mask_fpclass_ph_mask(u, X, C)\t\t\t\t\\\n+  ((__mmask16) __builtin_ia32_fpclassph256_mask ((__v16hf) (__m256h) (X),  \\\n+\t\t\t\t\t\t(int) (C),(__mmask16)(u)))\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vgetexpph, vgetexpsh.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_getexp_ph (__m256h __A)\n+{\n+  return (__m256h) __builtin_ia32_getexpph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t   (__v16hf)\n+\t\t\t\t\t\t   _mm256_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_getexp_ph (__m256h __W, __mmask16 __U, __m256h __A)\n+{\n+  return (__m256h) __builtin_ia32_getexpph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t   (__v16hf) __W,\n+\t\t\t\t\t\t   (__mmask16) __U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_getexp_ph (__mmask16 __U, __m256h __A)\n+{\n+  return (__m256h) __builtin_ia32_getexpph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t   (__v16hf)\n+\t\t\t\t\t\t   _mm256_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask16) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getexp_ph (__m128h __A)\n+{\n+  return (__m128h) __builtin_ia32_getexpph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf)\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getexp_ph (__m128h __W, __mmask8 __U, __m128h __A)\n+{\n+  return (__m128h) __builtin_ia32_getexpph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __W,\n+\t\t\t\t\t\t   (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getexp_ph (__mmask8 __U, __m128h __A)\n+{\n+  return (__m128h) __builtin_ia32_getexpph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf)\n+\t\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask8) __U);\n+}\n+\n+\n+/* Intrinsics vgetmantph, vgetmantsh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_getmant_ph (__m256h __A, _MM_MANTISSA_NORM_ENUM __B,\n+\t\t   _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m256h) __builtin_ia32_getmantph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v16hf)\n+\t\t\t\t\t\t     _mm256_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_getmant_ph (__m256h __W, __mmask16 __U, __m256h __A,\n+\t\t\t_MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t_MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m256h) __builtin_ia32_getmantph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v16hf) __W,\n+\t\t\t\t\t\t     (__mmask16) __U);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_getmant_ph (__mmask16 __U, __m256h __A,\n+\t\t\t _MM_MANTISSA_NORM_ENUM __B,\n+\t\t\t _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m256h) __builtin_ia32_getmantph256_mask ((__v16hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v16hf)\n+\t\t\t\t\t\t     _mm256_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask16) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_getmant_ph (__m128h __A, _MM_MANTISSA_NORM_ENUM __B,\n+\t\t_MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m128h) __builtin_ia32_getmantph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v8hf)\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_getmant_ph (__m128h __W, __mmask8 __U, __m128h __A,\n+\t\t     _MM_MANTISSA_NORM_ENUM __B,\n+\t\t     _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m128h) __builtin_ia32_getmantph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v8hf) __W,\n+\t\t\t\t\t\t     (__mmask8) __U);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_getmant_ph (__mmask8 __U, __m128h __A,\n+\t\t      _MM_MANTISSA_NORM_ENUM __B,\n+\t\t      _MM_MANTISSA_SIGN_ENUM __C)\n+{\n+  return (__m128h) __builtin_ia32_getmantph128_mask ((__v8hf) __A,\n+\t\t\t\t\t\t     (__C << 2) | __B,\n+\t\t\t\t\t\t     (__v8hf)\n+\t\t\t\t\t\t     _mm_setzero_ph (),\n+\t\t\t\t\t\t     (__mmask8) __U);\n+}\n+\n+#else\n+#define _mm256_getmant_ph(X, B, C)                                              \\\n+  ((__m256h) __builtin_ia32_getmantph256_mask ((__v16hf)(__m256h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v16hf)(__m256h)_mm256_setzero_ph (),\\\n+\t\t\t\t\t  (__mmask16)-1))\n+\n+#define _mm256_mask_getmant_ph(W, U, X, B, C)                                   \\\n+  ((__m256h) __builtin_ia32_getmantph256_mask ((__v16hf)(__m256h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v16hf)(__m256h)(W),                 \\\n+\t\t\t\t\t  (__mmask16)(U)))\n+\n+#define _mm256_maskz_getmant_ph(U, X, B, C)                                     \\\n+  ((__m256h) __builtin_ia32_getmantph256_mask ((__v16hf)(__m256h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v16hf)(__m256h)_mm256_setzero_ph (),\\\n+\t\t\t\t\t  (__mmask16)(U)))\n+\n+#define _mm_getmant_ph(X, B, C)                                                 \\\n+  ((__m128h) __builtin_ia32_getmantph128_mask ((__v8hf)(__m128h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v8hf)(__m128h)_mm_setzero_ph (),   \\\n+\t\t\t\t\t  (__mmask8)-1))\n+\n+#define _mm_mask_getmant_ph(W, U, X, B, C)                                      \\\n+  ((__m128h) __builtin_ia32_getmantph128_mask ((__v8hf)(__m128h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v8hf)(__m128h)(W),                 \\\n+\t\t\t\t\t  (__mmask8)(U)))\n+\n+#define _mm_maskz_getmant_ph(U, X, B, C)                                        \\\n+  ((__m128h) __builtin_ia32_getmantph128_mask ((__v8hf)(__m128h) (X),           \\\n+\t\t\t\t\t (int)(((C)<<2) | (B)),                 \\\n+\t\t\t\t\t  (__v8hf)(__m128h)_mm_setzero_ph (),   \\\n+\t\t\t\t\t  (__mmask8)(U)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "78127fab3c0deed243a8bc63700597254aa7b6d0", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -1304,6 +1304,9 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n \n # FP16 builtins\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n+DEF_FUNCTION_TYPE (QI, V8HF, INT, UQI)\n+DEF_FUNCTION_TYPE (HI, V16HF, INT, UHI)\n+DEF_FUNCTION_TYPE (SI, V32HF, INT, USI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)"}, {"sha": "bfa1d56a7b8eb83fcf7954d9d323218992c7aa9a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -2818,6 +2818,14 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv8\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv16hf_mask, \"__builtin_ia32_vreduceph_v16hf_mask\", IX86_BUILTIN_VREDUCEPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_rndscalev8hf_mask, \"__builtin_ia32_vrndscaleph_v8hf_mask\", IX86_BUILTIN_VRNDSCALEPH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_V8HF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_rndscalev16hf_mask, \"__builtin_ia32_vrndscaleph_v16hf_mask\", IX86_BUILTIN_VRNDSCALEPH_V16HF_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512dq_fpclassv16hf_mask, \"__builtin_ia32_fpclassph256_mask\", IX86_BUILTIN_FPCLASSPH256, UNKNOWN, (int) HI_FTYPE_V16HF_INT_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512dq_fpclassv8hf_mask, \"__builtin_ia32_fpclassph128_mask\", IX86_BUILTIN_FPCLASSPH128, UNKNOWN, (int) QI_FTYPE_V8HF_INT_UQI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512dq_fpclassv32hf_mask, \"__builtin_ia32_fpclassph512_mask\", IX86_BUILTIN_FPCLASSPH512, UNKNOWN, (int) SI_FTYPE_V32HF_INT_USI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512dq_vmfpclassv8hf_mask, \"__builtin_ia32_fpclasssh_mask\", IX86_BUILTIN_FPCLASSSH_MASK, UNKNOWN, (int) QI_FTYPE_V8HF_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_getexpv16hf_mask, \"__builtin_ia32_getexpph256_mask\", IX86_BUILTIN_GETEXPPH256, UNKNOWN, (int) V16HF_FTYPE_V16HF_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_getexpv8hf_mask, \"__builtin_ia32_getexpph128_mask\", IX86_BUILTIN_GETEXPPH128, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_getmantv16hf_mask, \"__builtin_ia32_getmantph256_mask\", IX86_BUILTIN_GETMANTPH256, UNKNOWN, (int) V16HF_FTYPE_V16HF_INT_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_getmantv8hf_mask, \"__builtin_ia32_getmantph128_mask\", IX86_BUILTIN_GETMANTPH128, UNKNOWN, (int) V8HF_FTYPE_V8HF_INT_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3041,6 +3049,10 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducepv32hf_mask_round, \"__buil\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_reducesv8hf_mask_round, \"__builtin_ia32_vreducesh_v8hf_mask_round\", IX86_BUILTIN_VREDUCESH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_rndscalev32hf_mask_round, \"__builtin_ia32_vrndscaleph_v32hf_mask_round\", IX86_BUILTIN_VRNDSCALEPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_INT_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_rndscalev8hf_mask_round, \"__builtin_ia32_vrndscalesh_v8hf_mask_round\", IX86_BUILTIN_VRNDSCALESH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_getexpv32hf_mask_round, \"__builtin_ia32_getexpph512_mask\", IX86_BUILTIN_GETEXPPH512, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_sgetexpv8hf_mask_round, \"__builtin_ia32_getexpsh_mask_round\", IX86_BUILTIN_GETEXPSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_getmantv32hf_mask_round, \"__builtin_ia32_getmantph512_mask\", IX86_BUILTIN_GETMANTPH512, UNKNOWN, (int) V32HF_FTYPE_V32HF_INT_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vgetmantv8hf_mask_round, \"__builtin_ia32_getmantsh_mask_round\", IX86_BUILTIN_GETMANTSH_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_INT_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "f3df7300b97e85a38d3a3f2ed7af19af81863f65", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -9913,6 +9913,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case HI_FTYPE_V16SF_INT_UHI:\n     case QI_FTYPE_V8SF_INT_UQI:\n     case QI_FTYPE_V4SF_INT_UQI:\n+    case QI_FTYPE_V8HF_INT_UQI:\n+    case HI_FTYPE_V16HF_INT_UHI:\n+    case SI_FTYPE_V32HF_INT_USI:\n     case V4SI_FTYPE_V4SI_V4SI_UHI:\n     case V8SI_FTYPE_V8SI_V8SI_UHI:\n       nargs = 3;\n@@ -10234,8 +10237,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t      case CODE_FOR_avx_vpermilv4df_mask:\n \t      case CODE_FOR_avx512f_getmantv8df_mask:\n \t      case CODE_FOR_avx512f_getmantv16sf_mask:\n+\t      case CODE_FOR_avx512vl_getmantv16hf_mask:\n \t      case CODE_FOR_avx512vl_getmantv8sf_mask:\n \t      case CODE_FOR_avx512vl_getmantv4df_mask:\n+\t      case CODE_FOR_avx512fp16_getmantv8hf_mask:\n \t      case CODE_FOR_avx512vl_getmantv4sf_mask:\n \t      case CODE_FOR_avx512vl_getmantv2df_mask:\n \t      case CODE_FOR_avx512dq_rangepv8df_mask_round:\n@@ -10771,10 +10776,12 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t\t{\n \t\tcase CODE_FOR_avx512f_getmantv8df_mask_round:\n \t\tcase CODE_FOR_avx512f_getmantv16sf_mask_round:\n+\t\tcase CODE_FOR_avx512bw_getmantv32hf_mask_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv2df_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv2df_mask_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv4sf_round:\n \t\tcase CODE_FOR_avx512f_vgetmantv4sf_mask_round:\n+\t\tcase CODE_FOR_avx512f_vgetmantv8hf_mask_round:\n \t\t  error (\"the immediate argument must be a 4-bit immediate\");\n \t\t  return const0_rtx;\n \t\tcase CODE_FOR_avx512f_cmpv8df3_mask_round:"}, {"sha": "b67ec1507d9fa11474e8025d74bfd2b7746d0a17", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -717,7 +717,8 @@\n   [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"TI\") (V8DI \"TI\")])\n \n (define_mode_attr vecmemsuffix\n-  [(V16SF \"{z}\") (V8SF \"{y}\") (V4SF \"{x}\")\n+  [(V32HF \"{z}\") (V16HF \"{y}\") (V8HF \"{x}\")\n+   (V16SF \"{z}\") (V8SF \"{y}\") (V4SF \"{x}\")\n    (V8DF \"{z}\") (V4DF \"{y}\") (V2DF \"{x}\")])\n \n (define_mode_attr ssedoublemodelower\n@@ -10615,20 +10616,20 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_getexp<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-        (unspec:VF_AVX512VL [(match_operand:VF_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+        (unspec:VFH_AVX512VL [(match_operand:VFH_AVX512VL 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n                         UNSPEC_GETEXP))]\n    \"TARGET_AVX512F\"\n    \"vgetexp<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\";\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_sgetexp<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")]\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (unspec:VFH_128\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")]\n \t    UNSPEC_GETEXP)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -24771,10 +24772,10 @@\n (define_insn \"avx512dq_fpclass<mode><mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n           (unspec:<avx512fmaskmode>\n-            [(match_operand:VF_AVX512VL 1 \"vector_operand\" \"vm\")\n+            [(match_operand:VFH_AVX512VL 1 \"vector_operand\" \"vm\")\n              (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n              UNSPEC_FPCLASS))]\n-   \"TARGET_AVX512DQ\"\n+   \"TARGET_AVX512DQ || VALID_AVX512FP16_REG_MODE(<MODE>mode)\"\n    \"vfpclass<ssemodesuffix><vecmemsuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\";\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -24785,21 +24786,21 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n-\t    [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")\n+\t    [(match_operand:VFH_128 1 \"nonimmediate_operand\" \"vm\")\n              (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n \t    UNSPEC_FPCLASS)\n \t  (const_int 1)))]\n-   \"TARGET_AVX512DQ\"\n+   \"TARGET_AVX512DQ || VALID_AVX512FP16_REG_MODE(<MODE>mode)\"\n    \"vfpclass<ssescalarmodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\";\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<avx512>_getmant<mode><mask_name><round_saeonly_name>\"\n-  [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(unspec:VF_AVX512VL\n-\t  [(match_operand:VF_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+  [(set (match_operand:VFH_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VFH_AVX512VL\n+\t  [(match_operand:VFH_AVX512VL 1 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_GETMANT))]\n   \"TARGET_AVX512F\"\n@@ -24808,11 +24809,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_vgetmant<mode><mask_scalar_name><round_saeonly_scalar_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (unspec:VFH_128\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_saeonly_scalar_nimm_predicate>\" \"<round_saeonly_scalar_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_GETMANT)\n \t  (match_dup 1)"}, {"sha": "b3cffa0644f2125e848ce3b617cca480fc65d5b6", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -713,10 +713,20 @@\n #define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_fpclassph512_mask(A, D, C) __builtin_ia32_fpclassph512_mask(A, 1, C)\n+#define __builtin_ia32_fpclasssh_mask(A, D, U) __builtin_ia32_fpclasssh_mask(A, 1, U)\n+#define __builtin_ia32_getexpph512_mask(A, B, C, D) __builtin_ia32_getexpph512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpsh_mask_round(A, B, C, D, E) __builtin_ia32_getexpsh_mask_round(A, B, C, D, 4)\n+#define __builtin_ia32_getmantph512_mask(A, F, C, D, E) __builtin_ia32_getmantph512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantsh_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsh_mask_round(A, B, 1, W, U, 4)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n+#define __builtin_ia32_fpclassph256_mask(A, D, C) __builtin_ia32_fpclassph256_mask(A, 1, C)\n+#define __builtin_ia32_fpclassph128_mask(A, D, C) __builtin_ia32_fpclassph128_mask(A, 1, C)\n+#define __builtin_ia32_getmantph256_mask(A, E, C, D) __builtin_ia32_getmantph256_mask(A, 1, C, D)\n+#define __builtin_ia32_getmantph128_mask(A, E, C, D) __builtin_ia32_getmantph128_mask(A, 1, C, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "67ef567e4376917669fc82c4f854342cf0d34194", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -730,10 +730,20 @@\n #define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_fpclassph512_mask(A, D, C) __builtin_ia32_fpclassph512_mask(A, 1, C)\n+#define __builtin_ia32_fpclasssh_mask(A, D, U) __builtin_ia32_fpclasssh_mask(A, 1, U)\n+#define __builtin_ia32_getexpph512_mask(A, B, C, D) __builtin_ia32_getexpph512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpsh_mask_round(A, B, C, D, E) __builtin_ia32_getexpsh_mask_round(A, B, C, D, 4)\n+#define __builtin_ia32_getmantph512_mask(A, F, C, D, E) __builtin_ia32_getmantph512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantsh_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsh_mask_round(A, B, 1, W, U, 4)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n+#define __builtin_ia32_fpclassph256_mask(A, D, C) __builtin_ia32_fpclassph256_mask(A, 1, C)\n+#define __builtin_ia32_fpclassph128_mask(A, D, C) __builtin_ia32_fpclassph128_mask(A, 1, C)\n+#define __builtin_ia32_getmantph256_mask(A, E, C, D) __builtin_ia32_getmantph256_mask(A, 1, C, D)\n+#define __builtin_ia32_getmantph128_mask(A, E, C, D) __builtin_ia32_getmantph128_mask(A, 1, C, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "04163874f90bfb741a387e971786a79c18112f44", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -677,8 +677,11 @@ test_1 (_mm512_reduce_ph, __m512h, __m512h, 123)\n test_1 (_mm_roundscale_ph, __m128h, __m128h, 123)\n test_1 (_mm256_roundscale_ph, __m256h, __m256h, 123)\n test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n+test_1 (_mm512_getexp_round_ph, __m512h, __m512h, 8)\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n+test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n+test_1y (_mm512_getmant_round_ph, __m512h, __m512h, 1, 1, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -705,13 +708,19 @@ test_2 (_mm_maskz_roundscale_ph, __m128h, __mmask8, __m128h, 123)\n test_2 (_mm256_maskz_roundscale_ph, __m256h, __mmask16, __m256h, 123)\n test_2 (_mm512_maskz_roundscale_ph, __m512h, __mmask32, __m512h, 123)\n test_2 (_mm_roundscale_sh, __m128h, __m128h, __m128h, 123)\n+test_2 (_mm512_maskz_getexp_round_ph, __m512h, __mmask32, __m512h, 8)\n+test_2 (_mm_getexp_round_sh, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n test_2x (_mm512_maskz_reduce_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n test_2x (_mm512_maskz_roundscale_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n test_2x (_mm_reduce_round_sh, __m128h, __m128h, __m128h, 123, 8)\n test_2x (_mm_roundscale_round_sh, __m128h, __m128h, __m128h, 123, 8)\n+test_2x (_mm512_maskz_getmant_ph, __m512h, __mmask32, __m512h, 1, 1)\n+test_2x (_mm_getmant_sh, __m128h, __m128h, __m128h, 1, 1)\n+test_2y (_mm512_maskz_getmant_round_ph, __m512h, __mmask32, __m512h, 1, 1, 8)\n+test_2y (_mm_getmant_round_sh, __m128h, __m128h, __m128h, 1, 1, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -737,12 +746,18 @@ test_3 (_mm_mask_roundscale_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n test_3 (_mm256_mask_roundscale_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n test_3 (_mm512_mask_roundscale_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n test_3 (_mm_maskz_roundscale_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_3 (_mm_maskz_getexp_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_mask_getexp_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n test_3x (_mm512_mask_roundscale_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n test_3x (_mm_maskz_reduce_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_3x (_mm_maskz_roundscale_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_3x (_mm512_mask_getmant_ph, __m512h, __m512h, __mmask32, __m512h, 1, 1)\n+test_3x (_mm_maskz_getmant_sh, __m128h, __mmask8, __m128h, __m128h, 1, 1)\n+test_3y (_mm_maskz_getmant_round_sh, __m128h, __mmask8, __m128h, __m128h, 1, 1, 8)\n+test_3y (_mm512_mask_getmant_round_ph, __m512h, __m512h, __mmask32, __m512h, 1, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -760,8 +775,11 @@ test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m51\n test_4 (_mm_mask_scalef_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4 (_mm_mask_getexp_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)\n+test_4y (_mm_mask_getmant_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "008600a393ddcf257bff6a54ee4a35375c4b5001", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -782,8 +782,11 @@ test_1 (_mm512_reduce_ph, __m512h, __m512h, 123)\n test_1 (_mm_roundscale_ph, __m128h, __m128h, 123)\n test_1 (_mm256_roundscale_ph, __m256h, __m256h, 123)\n test_1 (_mm512_roundscale_ph, __m512h, __m512h, 123)\n+test_1 (_mm512_getexp_round_ph, __m512h, __m512h, 8)\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n+test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n+test_1y (_mm512_getmant_round_ph, __m512h, __m512h, 1, 1, 8)\n test_2 (_mm512_add_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_sub_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_mul_round_ph, __m512h, __m512h, __m512h, 8)\n@@ -809,13 +812,19 @@ test_2 (_mm_maskz_roundscale_ph, __m128h, __mmask8, __m128h, 123)\n test_2 (_mm256_maskz_roundscale_ph, __m256h, __mmask16, __m256h, 123)\n test_2 (_mm512_maskz_roundscale_ph, __m512h, __mmask32, __m512h, 123)\n test_2 (_mm_roundscale_sh, __m128h, __m128h, __m128h, 123)\n+test_2 (_mm512_maskz_getexp_round_ph, __m512h, __mmask32, __m512h, 8)\n+test_2 (_mm_getexp_round_sh, __m128h, __m128h, __m128h, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n test_2x (_mm512_maskz_reduce_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n test_2x (_mm512_maskz_roundscale_round_ph, __m512h, __mmask32, __m512h, 123, 8)\n test_2x (_mm_reduce_round_sh, __m128h, __m128h, __m128h, 123, 8)\n test_2x (_mm_roundscale_round_sh, __m128h, __m128h, __m128h, 123, 8)\n+test_2x (_mm512_maskz_getmant_ph, __m512h, __mmask32, __m512h, 1, 1)\n+test_2x (_mm_getmant_sh, __m128h, __m128h, __m128h, 1, 1)\n+test_2y (_mm512_maskz_getmant_round_ph, __m512h, __mmask32, __m512h, 1, 1, 8)\n+test_2y (_mm_getmant_round_sh, __m128h, __m128h, __m128h, 1, 1, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -840,12 +849,18 @@ test_3 (_mm_mask_roundscale_ph, __m128h, __m128h, __mmask8, __m128h, 123)\n test_3 (_mm256_mask_roundscale_ph, __m256h, __m256h, __mmask16, __m256h, 123)\n test_3 (_mm512_mask_roundscale_ph, __m512h, __m512h, __mmask32, __m512h, 123)\n test_3 (_mm_maskz_roundscale_sh, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_3 (_mm_maskz_getexp_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_mask_getexp_round_ph, __m512h, __m512h, __mmask32, __m512h, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n test_3x (_mm512_mask_roundscale_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n test_3x (_mm_maskz_reduce_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_3x (_mm_maskz_roundscale_round_sh, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_3x (_mm512_mask_getmant_ph, __m512h, __m512h, __mmask32, __m512h, 1, 1)\n+test_3x (_mm_maskz_getmant_sh, __m128h, __mmask8, __m128h, __m128h, 1, 1)\n+test_3y (_mm_maskz_getmant_round_sh, __m128h, __mmask8, __m128h, __m128h, 1, 1, 8)\n+test_3y (_mm512_mask_getmant_round_ph, __m512h, __m512h, __mmask32, __m512h, 1, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -862,8 +877,11 @@ test_4 (_mm_mask_sqrt_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm512_mask_scalef_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm_mask_reduce_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n test_4 (_mm_mask_roundscale_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123)\n+test_4 (_mm_mask_getexp_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n+test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)\n+test_4y (_mm_mask_getmant_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1, 8)\n \n /* avx512fp16vlintrin.h */\n test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)"}, {"sha": "b3f07587acb47bfc86f23eff0351d942b14f9f79", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8486e9f268b88356d37036b3e30b19ce51d32fdb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=8486e9f268b88356d37036b3e30b19ce51d32fdb", "patch": "@@ -731,10 +731,20 @@\n #define __builtin_ia32_vrndscaleph_v8hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v8hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscaleph_v16hf_mask(A, B, C, D) __builtin_ia32_vrndscaleph_v16hf_mask(A, 123, C, D)\n #define __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, C, D, E, F) __builtin_ia32_vrndscalesh_v8hf_mask_round(A, B, 123, D, E, 8)\n+#define __builtin_ia32_fpclassph512_mask(A, D, C) __builtin_ia32_fpclassph512_mask(A, 1, C)\n+#define __builtin_ia32_fpclasssh_mask(A, D, U) __builtin_ia32_fpclasssh_mask(A, 1, U)\n+#define __builtin_ia32_getexpph512_mask(A, B, C, D) __builtin_ia32_getexpph512_mask(A, B, C, 8)\n+#define __builtin_ia32_getexpsh_mask_round(A, B, C, D, E) __builtin_ia32_getexpsh_mask_round(A, B, C, D, 4)\n+#define __builtin_ia32_getmantph512_mask(A, F, C, D, E) __builtin_ia32_getmantph512_mask(A, 1, C, D, 8)\n+#define __builtin_ia32_getmantsh_mask_round(A, B, C, W, U, D) __builtin_ia32_getmantsh_mask_round(A, B, 1, W, U, 4)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n #define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n+#define __builtin_ia32_fpclassph256_mask(A, D, C) __builtin_ia32_fpclassph256_mask(A, 1, C)\n+#define __builtin_ia32_fpclassph128_mask(A, D, C) __builtin_ia32_fpclassph128_mask(A, 1, C)\n+#define __builtin_ia32_getmantph256_mask(A, E, C, D) __builtin_ia32_getmantph256_mask(A, 1, C, D)\n+#define __builtin_ia32_getmantph128_mask(A, E, C, D) __builtin_ia32_getmantph128_mask(A, 1, C, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}]}