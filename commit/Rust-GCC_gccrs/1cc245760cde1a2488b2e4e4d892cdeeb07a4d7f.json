{"sha": "1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjMjQ1NzYwY2RlMWEyNDg4YjJlNGU0ZDg5MmNkZWViMDdhNGQ3Zg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-10-14T00:17:51Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-10-14T00:17:51Z"}, "message": "sh.c (TARGET_BUILTIN_DECL): Define.\n\n\t* config/sh/sh.c (TARGET_BUILTIN_DECL): Define.\n\t(struct builtin_description): Add fndecl field.\n\t(bdesc): Remove const qualifier.  Update initializer.\n\t(sh_media_init_builtins): Remove const qualifier for d.  Record\n\tthe result of add_builtin_function to the fndecl field.\n\t(sh_builtin_decl): New.\n\t(sh_media_builtin_decl): New.\n\nFrom-SVN: r152745", "tree": {"sha": "40a3ade4261f6710345d84f82ed4bcd02ed8a90a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a3ade4261f6710345d84f82ed4bcd02ed8a90a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f/comments", "author": null, "committer": null, "parents": [{"sha": "21f5e01449dd2190a52bb0a2caa5593e9af7326e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f5e01449dd2190a52bb0a2caa5593e9af7326e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f5e01449dd2190a52bb0a2caa5593e9af7326e"}], "stats": {"total": 216, "additions": 127, "deletions": 89}, "files": [{"sha": "e2440abd626e8ccf5dedab985d58aff4833960ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "patch": "@@ -1,3 +1,13 @@\n+2009-10-14  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (TARGET_BUILTIN_DECL): Define.\n+\t(struct builtin_description): Add fndecl field.\n+\t(bdesc): Remove const qualifier.  Update initializer.\n+\t(sh_media_init_builtins): Remove const qualifier for d.  Record\n+\tthe result of add_builtin_function to the fndecl field.\n+\t(sh_builtin_decl): New.\n+\t(sh_media_builtin_decl): New.\n+\n 2009-10-14  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/38948"}, {"sha": "7758bfa0f3bdc872ad2cb74cabfc632329594bf1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 117, "deletions": 89, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=1cc245760cde1a2488b2e4e4d892cdeeb07a4d7f", "patch": "@@ -222,7 +222,9 @@ static bool sh_optimize_target_register_callee_saved (bool);\n static bool sh_ms_bitfield_layout_p (const_tree);\n \n static void sh_init_builtins (void);\n+static tree sh_builtin_decl (unsigned, bool);\n static void sh_media_init_builtins (void);\n+static tree sh_media_builtin_decl (unsigned, bool);\n static rtx sh_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void sh_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n static void sh_file_start (void);\n@@ -416,6 +418,8 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS sh_init_builtins\n+#undef TARGET_BUILTIN_DECL\n+#define TARGET_BUILTIN_DECL sh_builtin_decl\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN sh_expand_builtin\n \n@@ -10520,6 +10524,7 @@ struct builtin_description\n   const enum insn_code icode;\n   const char *const name;\n   int signature;\n+  tree fndecl;\n };\n \n /* describe number and signedness of arguments; arg[0] == result\n@@ -10586,99 +10591,99 @@ static const char signature_args[][4] =\n /* mshalds, mshard, mshards, mshlld, mshlrd: shift count is unsigned int.  */\n /* mshards_q: returns signed short.  */\n /* nsb: takes long long arg, returns unsigned char.  */\n-static const struct builtin_description bdesc[] =\n-{\n-  { CODE_FOR_absv2si2,\t\"__builtin_absv2si2\", SH_BLTIN_V2SI2 },\n-  { CODE_FOR_absv4hi2,\t\"__builtin_absv4hi2\", SH_BLTIN_V4HI2 },\n-  { CODE_FOR_addv2si3,\t\"__builtin_addv2si3\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_addv4hi3,\t\"__builtin_addv4hi3\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_ssaddv2si3,\"__builtin_ssaddv2si3\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_usaddv8qi3,\"__builtin_usaddv8qi3\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_ssaddv4hi3,\"__builtin_ssaddv4hi3\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_alloco_i,\t\"__builtin_sh_media_ALLOCO\", SH_BLTIN_PV },\n-  { CODE_FOR_negcmpeqv8qi,\"__builtin_sh_media_MCMPEQ_B\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_negcmpeqv2si,\"__builtin_sh_media_MCMPEQ_L\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_negcmpeqv4hi,\"__builtin_sh_media_MCMPEQ_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_negcmpgtuv8qi,\"__builtin_sh_media_MCMPGT_UB\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_negcmpgtv2si,\"__builtin_sh_media_MCMPGT_L\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_negcmpgtv4hi,\"__builtin_sh_media_MCMPGT_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_mcmv,\t\"__builtin_sh_media_MCMV\", SH_BLTIN_UUUU },\n-  { CODE_FOR_mcnvs_lw,\t\"__builtin_sh_media_MCNVS_LW\", SH_BLTIN_3 },\n-  { CODE_FOR_mcnvs_wb,\t\"__builtin_sh_media_MCNVS_WB\", SH_BLTIN_V4HI2V8QI },\n-  { CODE_FOR_mcnvs_wub,\t\"__builtin_sh_media_MCNVS_WUB\", SH_BLTIN_V4HI2V8QI },\n-  { CODE_FOR_mextr1,\t\"__builtin_sh_media_MEXTR1\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr2,\t\"__builtin_sh_media_MEXTR2\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr3,\t\"__builtin_sh_media_MEXTR3\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr4,\t\"__builtin_sh_media_MEXTR4\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr5,\t\"__builtin_sh_media_MEXTR5\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr6,\t\"__builtin_sh_media_MEXTR6\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mextr7,\t\"__builtin_sh_media_MEXTR7\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mmacfx_wl,\t\"__builtin_sh_media_MMACFX_WL\", SH_BLTIN_MAC_HISI },\n-  { CODE_FOR_mmacnfx_wl,\"__builtin_sh_media_MMACNFX_WL\", SH_BLTIN_MAC_HISI },\n-  { CODE_FOR_mulv2si3,\t\"__builtin_mulv2si3\", SH_BLTIN_V2SI3, },\n-  { CODE_FOR_mulv4hi3,\t\"__builtin_mulv4hi3\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_mmulfx_l,\t\"__builtin_sh_media_MMULFX_L\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_mmulfx_w,\t\"__builtin_sh_media_MMULFX_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_mmulfxrp_w,\"__builtin_sh_media_MMULFXRP_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_mmulhi_wl,\t\"__builtin_sh_media_MMULHI_WL\", SH_BLTIN_V4HI2V2SI },\n-  { CODE_FOR_mmullo_wl,\t\"__builtin_sh_media_MMULLO_WL\", SH_BLTIN_V4HI2V2SI },\n-  { CODE_FOR_mmulsum_wq,\"__builtin_sh_media_MMULSUM_WQ\", SH_BLTIN_XXUU },\n-  { CODE_FOR_mperm_w,\t\"__builtin_sh_media_MPERM_W\", SH_BLTIN_SH_HI },\n-  { CODE_FOR_msad_ubq,\t\"__builtin_sh_media_MSAD_UBQ\", SH_BLTIN_XXUU },\n-  { CODE_FOR_mshalds_l,\t\"__builtin_sh_media_MSHALDS_L\", SH_BLTIN_SH_SI },\n-  { CODE_FOR_mshalds_w,\t\"__builtin_sh_media_MSHALDS_W\", SH_BLTIN_SH_HI },\n-  { CODE_FOR_ashrv2si3,\t\"__builtin_ashrv2si3\", SH_BLTIN_SH_SI },\n-  { CODE_FOR_ashrv4hi3,\t\"__builtin_ashrv4hi3\", SH_BLTIN_SH_HI },\n-  { CODE_FOR_mshards_q,\t\"__builtin_sh_media_MSHARDS_Q\", SH_BLTIN_SUS },\n-  { CODE_FOR_mshfhi_b,\t\"__builtin_sh_media_MSHFHI_B\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mshfhi_l,\t\"__builtin_sh_media_MSHFHI_L\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_mshfhi_w,\t\"__builtin_sh_media_MSHFHI_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_mshflo_b,\t\"__builtin_sh_media_MSHFLO_B\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_mshflo_l,\t\"__builtin_sh_media_MSHFLO_L\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_mshflo_w,\t\"__builtin_sh_media_MSHFLO_W\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_ashlv2si3,\t\"__builtin_ashlv2si3\", SH_BLTIN_SH_SI },\n-  { CODE_FOR_ashlv4hi3,\t\"__builtin_ashlv4hi3\", SH_BLTIN_SH_HI },\n-  { CODE_FOR_lshrv2si3,\t\"__builtin_lshrv2si3\", SH_BLTIN_SH_SI },\n-  { CODE_FOR_lshrv4hi3,\t\"__builtin_lshrv4hi3\", SH_BLTIN_SH_HI },\n-  { CODE_FOR_subv2si3,\t\"__builtin_subv2si3\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_subv4hi3,\t\"__builtin_subv4hi3\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_sssubv2si3,\"__builtin_sssubv2si3\", SH_BLTIN_V2SI3 },\n-  { CODE_FOR_ussubv8qi3,\"__builtin_ussubv8qi3\", SH_BLTIN_V8QI3 },\n-  { CODE_FOR_sssubv4hi3,\"__builtin_sssubv4hi3\", SH_BLTIN_V4HI3 },\n-  { CODE_FOR_fcosa_s,\t\"__builtin_sh_media_FCOSA_S\", SH_BLTIN_SISF },\n-  { CODE_FOR_fsina_s,\t\"__builtin_sh_media_FSINA_S\", SH_BLTIN_SISF },\n-  { CODE_FOR_fipr,\t\"__builtin_sh_media_FIPR_S\", SH_BLTIN_3 },\n-  { CODE_FOR_ftrv,\t\"__builtin_sh_media_FTRV_S\", SH_BLTIN_3 },\n-  { CODE_FOR_mac_media,\t\"__builtin_sh_media_FMAC_S\", SH_BLTIN_3 },\n-  { CODE_FOR_sqrtdf2,\t\"__builtin_sh_media_FSQRT_D\", SH_BLTIN_2 },\n-  { CODE_FOR_sqrtsf2,\t\"__builtin_sh_media_FSQRT_S\", SH_BLTIN_2 },\n-  { CODE_FOR_fsrra_s,\t\"__builtin_sh_media_FSRRA_S\", SH_BLTIN_2 },\n-  { CODE_FOR_ldhi_l,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L },\n-  { CODE_FOR_ldhi_q,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q },\n-  { CODE_FOR_ldlo_l,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L },\n-  { CODE_FOR_ldlo_q,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q },\n-  { CODE_FOR_sthi_l,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L },\n-  { CODE_FOR_sthi_q,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q },\n-  { CODE_FOR_stlo_l,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L },\n-  { CODE_FOR_stlo_q,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q },\n-  { CODE_FOR_ldhi_l64,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L64 },\n-  { CODE_FOR_ldhi_q64,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q64 },\n-  { CODE_FOR_ldlo_l64,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L64 },\n-  { CODE_FOR_ldlo_q64,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q64 },\n-  { CODE_FOR_sthi_l64,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L64 },\n-  { CODE_FOR_sthi_q64,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q64 },\n-  { CODE_FOR_stlo_l64,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L64 },\n-  { CODE_FOR_stlo_q64,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q64 },\n-  { CODE_FOR_nsb,\t\"__builtin_sh_media_NSB\", SH_BLTIN_SU },\n-  { CODE_FOR_byterev,\t\"__builtin_sh_media_BYTEREV\", SH_BLTIN_2 },\n-  { CODE_FOR_prefetch,\t\"__builtin_sh_media_PREFO\", SH_BLTIN_PSSV },\n+static struct builtin_description bdesc[] =\n+{\n+  { CODE_FOR_absv2si2,\t\"__builtin_absv2si2\", SH_BLTIN_V2SI2, 0 },\n+  { CODE_FOR_absv4hi2,\t\"__builtin_absv4hi2\", SH_BLTIN_V4HI2, 0 },\n+  { CODE_FOR_addv2si3,\t\"__builtin_addv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_addv4hi3,\t\"__builtin_addv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_ssaddv2si3,\"__builtin_ssaddv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_usaddv8qi3,\"__builtin_usaddv8qi3\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_ssaddv4hi3,\"__builtin_ssaddv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_alloco_i,\t\"__builtin_sh_media_ALLOCO\", SH_BLTIN_PV, 0 },\n+  { CODE_FOR_negcmpeqv8qi,\"__builtin_sh_media_MCMPEQ_B\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_negcmpeqv2si,\"__builtin_sh_media_MCMPEQ_L\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_negcmpeqv4hi,\"__builtin_sh_media_MCMPEQ_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_negcmpgtuv8qi,\"__builtin_sh_media_MCMPGT_UB\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_negcmpgtv2si,\"__builtin_sh_media_MCMPGT_L\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_negcmpgtv4hi,\"__builtin_sh_media_MCMPGT_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_mcmv,\t\"__builtin_sh_media_MCMV\", SH_BLTIN_UUUU, 0 },\n+  { CODE_FOR_mcnvs_lw,\t\"__builtin_sh_media_MCNVS_LW\", SH_BLTIN_3, 0 },\n+  { CODE_FOR_mcnvs_wb,\t\"__builtin_sh_media_MCNVS_WB\", SH_BLTIN_V4HI2V8QI, 0 },\n+  { CODE_FOR_mcnvs_wub,\t\"__builtin_sh_media_MCNVS_WUB\", SH_BLTIN_V4HI2V8QI, 0 },\n+  { CODE_FOR_mextr1,\t\"__builtin_sh_media_MEXTR1\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr2,\t\"__builtin_sh_media_MEXTR2\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr3,\t\"__builtin_sh_media_MEXTR3\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr4,\t\"__builtin_sh_media_MEXTR4\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr5,\t\"__builtin_sh_media_MEXTR5\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr6,\t\"__builtin_sh_media_MEXTR6\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mextr7,\t\"__builtin_sh_media_MEXTR7\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mmacfx_wl,\t\"__builtin_sh_media_MMACFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n+  { CODE_FOR_mmacnfx_wl,\"__builtin_sh_media_MMACNFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n+  { CODE_FOR_mulv2si3,\t\"__builtin_mulv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_mulv4hi3,\t\"__builtin_mulv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_mmulfx_l,\t\"__builtin_sh_media_MMULFX_L\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_mmulfx_w,\t\"__builtin_sh_media_MMULFX_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_mmulfxrp_w,\"__builtin_sh_media_MMULFXRP_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_mmulhi_wl,\t\"__builtin_sh_media_MMULHI_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n+  { CODE_FOR_mmullo_wl,\t\"__builtin_sh_media_MMULLO_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n+  { CODE_FOR_mmulsum_wq,\"__builtin_sh_media_MMULSUM_WQ\", SH_BLTIN_XXUU, 0 },\n+  { CODE_FOR_mperm_w,\t\"__builtin_sh_media_MPERM_W\", SH_BLTIN_SH_HI, 0 },\n+  { CODE_FOR_msad_ubq,\t\"__builtin_sh_media_MSAD_UBQ\", SH_BLTIN_XXUU, 0 },\n+  { CODE_FOR_mshalds_l,\t\"__builtin_sh_media_MSHALDS_L\", SH_BLTIN_SH_SI, 0 },\n+  { CODE_FOR_mshalds_w,\t\"__builtin_sh_media_MSHALDS_W\", SH_BLTIN_SH_HI, 0 },\n+  { CODE_FOR_ashrv2si3,\t\"__builtin_ashrv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { CODE_FOR_ashrv4hi3,\t\"__builtin_ashrv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { CODE_FOR_mshards_q,\t\"__builtin_sh_media_MSHARDS_Q\", SH_BLTIN_SUS, 0 },\n+  { CODE_FOR_mshfhi_b,\t\"__builtin_sh_media_MSHFHI_B\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mshfhi_l,\t\"__builtin_sh_media_MSHFHI_L\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_mshfhi_w,\t\"__builtin_sh_media_MSHFHI_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_mshflo_b,\t\"__builtin_sh_media_MSHFLO_B\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_mshflo_l,\t\"__builtin_sh_media_MSHFLO_L\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_mshflo_w,\t\"__builtin_sh_media_MSHFLO_W\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_ashlv2si3,\t\"__builtin_ashlv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { CODE_FOR_ashlv4hi3,\t\"__builtin_ashlv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { CODE_FOR_lshrv2si3,\t\"__builtin_lshrv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { CODE_FOR_lshrv4hi3,\t\"__builtin_lshrv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { CODE_FOR_subv2si3,\t\"__builtin_subv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_subv4hi3,\t\"__builtin_subv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_sssubv2si3,\"__builtin_sssubv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { CODE_FOR_ussubv8qi3,\"__builtin_ussubv8qi3\", SH_BLTIN_V8QI3, 0 },\n+  { CODE_FOR_sssubv4hi3,\"__builtin_sssubv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { CODE_FOR_fcosa_s,\t\"__builtin_sh_media_FCOSA_S\", SH_BLTIN_SISF, 0 },\n+  { CODE_FOR_fsina_s,\t\"__builtin_sh_media_FSINA_S\", SH_BLTIN_SISF, 0 },\n+  { CODE_FOR_fipr,\t\"__builtin_sh_media_FIPR_S\", SH_BLTIN_3, 0 },\n+  { CODE_FOR_ftrv,\t\"__builtin_sh_media_FTRV_S\", SH_BLTIN_3, 0 },\n+  { CODE_FOR_mac_media,\t\"__builtin_sh_media_FMAC_S\", SH_BLTIN_3, 0 },\n+  { CODE_FOR_sqrtdf2,\t\"__builtin_sh_media_FSQRT_D\", SH_BLTIN_2, 0 },\n+  { CODE_FOR_sqrtsf2,\t\"__builtin_sh_media_FSQRT_S\", SH_BLTIN_2, 0 },\n+  { CODE_FOR_fsrra_s,\t\"__builtin_sh_media_FSRRA_S\", SH_BLTIN_2, 0 },\n+  { CODE_FOR_ldhi_l,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L, 0 },\n+  { CODE_FOR_ldhi_q,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q, 0 },\n+  { CODE_FOR_ldlo_l,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L, 0 },\n+  { CODE_FOR_ldlo_q,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q, 0 },\n+  { CODE_FOR_sthi_l,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L, 0 },\n+  { CODE_FOR_sthi_q,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q, 0 },\n+  { CODE_FOR_stlo_l,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L, 0 },\n+  { CODE_FOR_stlo_q,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q, 0 },\n+  { CODE_FOR_ldhi_l64,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L64, 0 },\n+  { CODE_FOR_ldhi_q64,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q64, 0 },\n+  { CODE_FOR_ldlo_l64,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L64, 0 },\n+  { CODE_FOR_ldlo_q64,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q64, 0 },\n+  { CODE_FOR_sthi_l64,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L64, 0 },\n+  { CODE_FOR_sthi_q64,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q64, 0 },\n+  { CODE_FOR_stlo_l64,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L64, 0 },\n+  { CODE_FOR_stlo_q64,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q64, 0 },\n+  { CODE_FOR_nsb,\t\"__builtin_sh_media_NSB\", SH_BLTIN_SU, 0 },\n+  { CODE_FOR_byterev,\t\"__builtin_sh_media_BYTEREV\", SH_BLTIN_2, 0 },\n+  { CODE_FOR_prefetch,\t\"__builtin_sh_media_PREFO\", SH_BLTIN_PSSV, 0 },\n };\n \n static void\n sh_media_init_builtins (void)\n {\n   tree shared[SH_BLTIN_NUM_SHARED_SIGNATURES];\n-  const struct builtin_description *d;\n+  struct builtin_description *d;\n \n   memset (shared, 0, sizeof shared);\n   for (d = bdesc; d - bdesc < (int) ARRAY_SIZE (bdesc); d++)\n@@ -10724,11 +10729,23 @@ sh_media_init_builtins (void)\n \t  if (signature < SH_BLTIN_NUM_SHARED_SIGNATURES)\n \t    shared[signature] = type;\n \t}\n-      add_builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n-\t\t\t    NULL, NULL_TREE);\n+      d->fndecl =\n+\tadd_builtin_function (d->name, type, d - bdesc, BUILT_IN_MD,\n+\t\t\t      NULL, NULL_TREE);\n     }\n }\n \n+/* Returns the shmedia builtin decl for CODE.  */\n+\n+static tree\n+sh_media_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{        \n+  if (code >= ARRAY_SIZE (bdesc))\n+    return error_mark_node;\n+          \n+  return bdesc[code].fndecl;\n+}\n+\n /* Implements target hook vector_mode_supported_p.  */\n bool\n sh_vector_mode_supported_p (enum machine_mode mode)\n@@ -10767,6 +10784,17 @@ sh_init_builtins (void)\n     sh_media_init_builtins ();\n }\n \n+/* Returns the sh builtin decl for CODE.  */\n+\n+static tree\n+sh_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n+{        \n+  if (TARGET_SHMEDIA)\n+    return sh_media_builtin_decl (code, initialize_p);\n+          \n+  return error_mark_node;\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient)."}]}