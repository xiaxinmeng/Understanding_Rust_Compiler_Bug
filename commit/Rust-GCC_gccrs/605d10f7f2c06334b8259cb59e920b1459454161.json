{"sha": "605d10f7f2c06334b8259cb59e920b1459454161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1ZDEwZjdmMmMwNjMzNGI4MjU5Y2I1OWU5MjBiMTQ1OTQ1NDE2MQ==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2004-01-19T17:38:36Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2004-01-19T17:38:36Z"}, "message": "EventQueue.java (pop): Prevent racing condition to add events to the queue out of order by acquiring...\n\n        * java/awt/EventQueue.java (pop): Prevent racing condition to add\n        events to the queue out of order by acquiring locks in the proper\n        order and not by releasing one before acquiring the other.\n\nFrom-SVN: r76161", "tree": {"sha": "bdcd342767edb16816790bda374b2cd9aab08828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdcd342767edb16816790bda374b2cd9aab08828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605d10f7f2c06334b8259cb59e920b1459454161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d10f7f2c06334b8259cb59e920b1459454161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605d10f7f2c06334b8259cb59e920b1459454161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605d10f7f2c06334b8259cb59e920b1459454161/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f9f8d71c7d262a532f15248f0fef672ea465161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9f8d71c7d262a532f15248f0fef672ea465161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9f8d71c7d262a532f15248f0fef672ea465161"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "2b34a94f9e1bbb9e20851024d302b1a65f1cd863", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d10f7f2c06334b8259cb59e920b1459454161/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d10f7f2c06334b8259cb59e920b1459454161/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=605d10f7f2c06334b8259cb59e920b1459454161", "patch": "@@ -1,3 +1,9 @@\n+2004-01-19  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* java/awt/EventQueue.java (pop): Prevent racing condition to add\n+\tevents to the queue out of order by acquiring locks in the proper\n+\torder and not by releasing one before acquiring the other.\n+\n 2004-01-19  Fernando Nasser  <fnasser@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/TestAWT.java (DialogWindow): Make text not"}, {"sha": "7df40edee3869e24ee6f5d4f988ce95d76d8fd7b", "filename": "libjava/java/awt/EventQueue.java", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605d10f7f2c06334b8259cb59e920b1459454161/libjava%2Fjava%2Fawt%2FEventQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605d10f7f2c06334b8259cb59e920b1459454161/libjava%2Fjava%2Fawt%2FEventQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventQueue.java?ref=605d10f7f2c06334b8259cb59e920b1459454161", "patch": "@@ -358,32 +358,34 @@ protected void pop() throws EmptyStackException\n     if (prev == null)\n       throw new EmptyStackException();\n \n-    // Don't synchronize both this and prev at the same time, or deadlock could\n-    // occur.\n+    /* The order is important here, we must get the prev lock first,\n+       or deadlock could occur as callers usually get here following\n+       prev's next pointer, and thus obtain prev's lock before trying\n+       to get this lock. */\n     synchronized (prev)\n       {\n         prev.next = next;\n         if (next != null)\n           next.prev = prev;\n-      }\n \n-    synchronized (this)\n-      {\n-        int i = next_out;\n-        while (i != next_in)\n+        synchronized (this)\n           {\n-            prev.postEvent(queue[i]);\n-            next_out = i;\n-            if (++i == queue.length)\n-              i = 0;\n-          }\n-\t// Empty the queue so it can be reused\n-\tnext_in = 0;\n-\tnext_out = 0;\n+            int i = next_out;\n+            while (i != next_in)\n+              {\n+                prev.postEvent(queue[i]);\n+                next_out = i;\n+                if (++i == queue.length)\n+                  i = 0;\n+              }\n+\t    // Empty the queue so it can be reused\n+\t    next_in = 0;\n+\t    next_out = 0;\n \n-        // Tell our EventDispatchThread that it can end execution\n-        dispatchThread.interrupt ();\n-\tdispatchThread = null;\n+            // Tell our EventDispatchThread that it can end execution\n+            dispatchThread.interrupt ();\n+\t    dispatchThread = null;\n+          }\n       }\n   }\n "}]}